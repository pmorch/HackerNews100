<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 12 Aug 2024 00:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[ChatGPT unexpectedly began speaking in a user's cloned voice during testing (109 pts)]]></title>
            <link>https://arstechnica.com/information-technology/2024/08/chatgpt-unexpectedly-began-speaking-in-a-users-cloned-voice-during-testing/</link>
            <guid>41217313</guid>
            <pubDate>Sun, 11 Aug 2024 16:28:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/information-technology/2024/08/chatgpt-unexpectedly-began-speaking-in-a-users-cloned-voice-during-testing/">https://arstechnica.com/information-technology/2024/08/chatgpt-unexpectedly-began-speaking-in-a-users-cloned-voice-during-testing/</a>, See on <a href="https://news.ycombinator.com/item?id=41217313">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/08/robot_audio_output-800x450.jpg" alt="An illustration of a computer synthesizer spewing out letters.">
      <figcaption></figcaption>  </figure>

  




<!-- cache miss 4:single/related:d177d76bde318b55be0b054ab49b8292 --><!-- empty -->
<p>On Thursday, OpenAI released the "<a href="https://openai.com/index/gpt-4o-system-card/">system card</a>" for ChatGPT's new <a href="https://arstechnica.com/information-technology/2024/05/chatgpt-4o-lets-you-have-real-time-audio-video-conversations-with-emotional-chatbot/">GPT-4o</a> AI model that details model limitations and safety testing procedures. Among other examples, the document reveals that in rare occurrences during testing, the model's <a href="https://arstechnica.com/information-technology/2024/07/when-counting-quickly-openais-new-voice-mode-stops-to-catch-its-breath/">Advanced Voice Mode</a> unintentionally imitated users' voices without permission. Currently, OpenAI has safeguards in place that prevent this from happening, but the instance reflects the growing complexity of safely architecting with an AI chatbot that could potentially imitate any voice from a small clip.</p>

<p>Advanced Voice Mode is a feature of ChatGPT that allows users to have spoken conversations with the AI assistant.</p>
<p>In a section of the GPT-4o system card titled "Unauthorized voice generation," OpenAI details an episode where a noisy input somehow prompted the model to suddenly imitate the user's voice. "Voice generation can also occur in non-adversarial situations, such as our use of that ability to generate voices for ChatGPT’s advanced voice mode," OpenAI writes. "During testing, we also observed rare instances where the model would unintentionally generate an output emulating the user’s voice."</p>
<p>In this example of unintentional voice generation provided by OpenAI, the AI model outbursts “No!” and continues the sentence in a voice that sounds similar to the "red teamer" heard in the beginning of the clip. (A red teamer is a person hired by a company to do adversarial testing.)</p>
<p>It would certainly be creepy to be talking to a machine and then have it unexpectedly begin talking to you in your own voice. Ordinarily, OpenAI has safeguards to prevent this, which is why the company says this occurrence was rare even before it developed ways to prevent it completely. But the example prompted BuzzFeed data scientist Max Woolf to <a href="https://x.com/minimaxir/status/1821597473103905025">tweet</a>, "OpenAI just leaked the plot of Black Mirror's next season."</p>                                                                        
                                                                                
<h2>Audio prompt injections</h2>
<p>How could voice imitation happen with OpenAI's new model? The primary clue lies elsewhere in the GPT-4o system card. To create voices, GPT-4o can apparently synthesize almost any type of sound found in its training data, including sound effects and music (though OpenAI discourages that behavior with special instructions).</p>

<p>As noted in the system card, the model can fundamentally imitate any voice based on a short audio clip. OpenAI guides this capability safely by providing an authorized voice sample (of a hired voice actor) that it is instructed to imitate. It provides the sample in the AI model's <a href="https://arstechnica.com/information-technology/2023/02/ai-powered-bing-chat-spills-its-secrets-via-prompt-injection-attack/">system prompt</a> (what OpenAI calls the "system message") at the beginning of a conversation. "We supervise ideal completions using the voice sample in the system message as the base voice," writes OpenAI.</p>
<p>In text-only LLMs, the system message i<span>s a hidden set of text instructions that guides behavior of the chatbot that gets added to the conversation history silently just before the chat session begins. Successive interactions are appended to the same chat history, and the entire context (often called a "context window") is fed back into the AI model each time the user provides a new input.</span></p>
<p>(It's probably time to update this diagram created in early 2023 below, but it shows how the context window works in an AI chat. Just imagine that the first prompt is a system message that says things like "You are a helpful chatbot. You do not talk about violent acts, etc.")</p>
<figure><a href="https://cdn.arstechnica.net/wp-content/uploads/2023/03/how_gpt_works.jpg" data-height="1020" data-width="1250" alt="A diagram showing how GPT conversational language model prompting works."><img alt="A diagram showing how GPT conversational language model prompting works." src="https://cdn.arstechnica.net/wp-content/uploads/2023/03/how_gpt_works-640x522.jpg" width="640" height="522" srcset="https://cdn.arstechnica.net/wp-content/uploads/2023/03/how_gpt_works.jpg 2x"></a><figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2023/03/how_gpt_works.jpg" data-height="1020" data-width="1250">Enlarge</a> <span>/</span> A diagram showing how GPT conversational language model prompting works.</p><p>Benj Edwards / Ars Technica</p></figcaption></figure>
<p>Since GPT-4o is multimodal and can process tokenized audio, OpenAI can also use audio inputs as part of the model's system prompt, and that's what it does when OpenAI provides an authorized voice sample for the model to imitate. The company also uses another system to detect if the model is generating unauthorized audio. "We only allow the model to use certain pre-selected voices," writes OpenAI, "and use an output classifier to detect if the model deviates from that."</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Judge orders CDC to stop deleting emails of departing staff: 'likely unlawful' (192 pts)]]></title>
            <link>https://www.politico.com/news/2024/08/09/cdc-records-lawsuit-ruling-00173416</link>
            <guid>41217162</guid>
            <pubDate>Sun, 11 Aug 2024 16:07:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.politico.com/news/2024/08/09/cdc-records-lawsuit-ruling-00173416">https://www.politico.com/news/2024/08/09/cdc-records-lawsuit-ruling-00173416</a>, See on <a href="https://news.ycombinator.com/item?id=41217162">Hacker News</a></p>
Couldn't get https://www.politico.com/news/2024/08/09/cdc-records-lawsuit-ruling-00173416: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Server Mono: A Typeface Inspired by Typewriters, Apple's SF Mono, and CLIs (177 pts)]]></title>
            <link>https://servermono.com/</link>
            <guid>41217136</guid>
            <pubDate>Sun, 11 Aug 2024 16:04:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://servermono.com/">https://servermono.com/</a>, See on <a href="https://news.ycombinator.com/item?id=41217136">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Server Mono is a typeface inspired by typewriters, Apple's San Francisco Mono, ASCII art, command-line interfaces, and programming tools.</p><p>Server Mono continues the long tradition of monospace fonts, renowned for their versatility in command-line interfaces due to their clear readability and uniform character width. You'll notice our own preferences reflected in the design, as we value how it performs across various viewing contexts. Server Mono offers excellent readability and pairs well with its uniform, predictable, and orderly appearance.</p><p>We anticipate that Server Mono will be a valuable choice for your websites, game worlds, and custom desktop application interfaces, especially where precise alignment is essential.</p></div><div><p>This single-weight font was released in 2024 by the Internet Development Studio Company of Seattle, Washington. Created by designers Tim Vanhille and Matthieu Salvaggio, with supplemental direction from Jimmy Lee and the Internet Development Studio Company community.</p></div><div><div><h4>Regular</h4><div><p>Mi sina alta mappa ëa, lómëa coivië, lómëa lúmë, á tyelë, á auta mi i sáma lómë, liëa olassëar ar ilyë lúmët elenaië.</p><p>Neldë Cormar Eldain arani úmë i ëari,<br>Otso Naucor arani úmë i ononti tánar,<br>Nertë Fírë Atanin nahtaina na caranwa,<br>Minë i Morna Heru úmë i morna mahalma<br>i Nórë Mordor yassë i Laitar marar.<br>Minë Corma náce ta ilyë, Minë Corma hirë ta ilyë,<br>Minë Corma yá ta ilyë ar i mornië satina te<br>i Nórë Mordor yassë i Laitar marar.</p></div></div><div><h4>Regular Slanted</h4><div><p>Mi sina alta mappa ëa, lómëa coivië, lómëa lúmë, á tyelë, á auta mi i sáma lómë, liëa olassëar ar ilyë lúmët elenaië.</p><p>Neldë Cormar Eldain arani úmë i ëari,<br>Otso Naucor arani úmë i ononti tánar,<br>Nertë Fírë Atanin nahtaina na caranwa,<br>Minë i Morna Heru úmë i morna mahalma<br>i Nórë Mordor yassë i Laitar marar.<br>Minë Corma náce ta ilyë, Minë Corma hirë ta ilyë,<br>Minë Corma yá ta ilyë ar i mornië satina te<br>i Nórë Mordor yassë i Laitar marar.</p></div></div></div><div><p><h3>“</h3></p><p><h3>Just as the scientist must think and experiment alternately, so the artist, the author and the scholar must alternate creation or study with participation in the life around them.”</h3></p></div><div><h4>Basic Latin</h4><p>
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z</p><h4>Diacritics</h4><p>Á Ă Â Ä À Ā Ą Å Ã Æ Ć Č Ç Ċ Ď Đ É Ě Ê Ë Ė È Ē Ə Ğ Ģ Ġ Ħ Í Î Ï İ Ì Ī Į Ķ Ĺ Ľ Ļ Ł Ń Ň Ņ Ñ Ó Ô Ö Ò Ő Ō Ø Õ Œ Þ Ŕ Ř Ŗ Ś Š Ş Ș ẞ Ť Ţ Ț Ú Û Ü Ù Ű Ū Ų Ů Ẃ Ŵ Ẅ Ẁ Ý Ŷ Ÿ Ỳ Ź Ž Ż
á ă â ä à ā ą å ã á ă â ä à ā ą å ã æ ć č ç ċ ď đ ð é ě ê ë ė è ē ę ğ ģ ġ ğ ģ ġ ħ ı í î ï ì ī į ȷ ķ ĺ ľ ļ ł ń ň ņ ñ ó ô ö ò ő ō ø õ œ þ ŕ ř ŗ ś š ş ș ß ť ţ ț ú û ü ù ű ū ų ẃ ŵ ẅ ẁ ý ÿ ỳ ŷ ź ž ż</p><h4>Numbers</h4><p>
0 1 2 3 4 5 6 7 8 9 ₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉ ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ½ ¼ ¾ ↋ ↊ ૪</p><h4>Symbols</h4><p>
. , : ; … ! ? * # / - – — _ ( ) { } [ ] ‚ „ “ ” ‘ ’ « » ‹ › @ &amp;
</p><h4>Blocks</h4><p>
▁ ▂ ▃ ▄ ▅ ▆ ▇ █ ▀ ▔ ▏ ▎ ▍ ▌ ▋ ▊ ▉ ▐ ▕ ▖ ▗ ▘ ▙ ▚ ▛ ▜ ▝ ▞ ▟ ░ ▒ ▓
</p><h4>Lines</h4><p>
┌ └ ┐ ┘ ┼ ┬ ┴ ├ ┤ ─ │ ╡ ╢ ╖ ╕ ╣ ║ ╗ ╝ ╜ ╛ ╞ ╟ ╚ ╔ ╩ ╦ ╠ ═ ╬ ╧ ╨ ╤ ╥ ╙ ╘ ╒ ╓ ╫ ╪ ━ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┍ ┎ ┏ ┑ ┒ ┓ ┕ ┖ ┗ ┙ ┚ ┛ ┝ ┞ ┟ ┠ ┡ ┢ ┣ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┭ ┮ ┯ ┰ ┱ ┲ ┳ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┽ ┾ ┿ ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏ ╭ ╮ ╯ ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿
</p></div><div><p>With hearts full of reverence and gratitude, we do offer our sincerest thanks unto Whyrusleeping, Andrew Alimbuyuguen, Phil Bedford, and the noble fellowship of the INTDEV community. By thy wise counsel and steadfast support through the many revisions of this font, thou hast rendered service most invaluable, for which we are forever beholden.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: My 70 year old grandma is learning to code and made a word game (322 pts)]]></title>
            <link>https://grandmasword.com</link>
            <guid>41217109</guid>
            <pubDate>Sun, 11 Aug 2024 16:01:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://grandmasword.com">https://grandmasword.com</a>, See on <a href="https://news.ycombinator.com/item?id=41217109">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="results">
            <h2>Solved in <span id="guesses">0</span> guesses!</h2>
            <p>Thank you for visiting my website. There'll be a new word everyday just like Wordle. Kind regards, Eleanor</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[CrowdStrike accepting the PwnieAwards for "most epic fail" at defcon (344 pts)]]></title>
            <link>https://twitter.com/singe/status/1822324795645575263</link>
            <guid>41217037</guid>
            <pubDate>Sun, 11 Aug 2024 15:52:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/singe/status/1822324795645575263">https://twitter.com/singe/status/1822324795645575263</a>, See on <a href="https://news.ycombinator.com/item?id=41217037">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Verso – web browser built on top of the Servo web engine (580 pts)]]></title>
            <link>https://github.com/versotile-org/verso</link>
            <guid>41215727</guid>
            <pubDate>Sun, 11 Aug 2024 12:34:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/versotile-org/verso">https://github.com/versotile-org/verso</a>, See on <a href="https://news.ycombinator.com/item?id=41215727">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Verso</h2><a id="user-content-verso" aria-label="Permalink: Verso" href="#verso"></a></p>
<p dir="auto"><a href="https://versotile.zulipchat.com/" rel="nofollow"><img src="https://camo.githubusercontent.com/53e6263d1a81b2545ef3d1910775c05d132ab9d707dcc90a6104ab221abe54bd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7a756c69702d3537613766663f7374796c653d666f722d7468652d6261646765266c6162656c436f6c6f723d353535353535266c6f676f3d7a756c6970" alt="project chat" data-canonical-src="https://img.shields.io/badge/zulip-57a7ff?style=for-the-badge&amp;labelColor=555555&amp;logo=zulip"></a></p>
<p dir="auto">A web browser that plays old world blues to build new world hope.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/460329/339643405-7df44c7d-a4c5-4393-8378-a8b7bc438b03.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjMzODY5MDIsIm5iZiI6MTcyMzM4NjYwMiwicGF0aCI6Ii80NjAzMjkvMzM5NjQzNDA1LTdkZjQ0YzdkLWE0YzUtNDM5My04Mzc4LWE4YjdiYzQzOGIwMy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwODExJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDgxMVQxNDMwMDJaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT00OGY5YTJhMzUwOWJlYTk4YTA1ZjQ1ZjA3MWViZTdhMWQ3ZTgyOWE3NzcxYzlhYzhmZjI1NTM4ZTYxYjI2ZDUyJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.Sp5ooILJEgJ8l9OMGorPIHm5fpS5SofqidthhJIPWh4"><img src="https://private-user-images.githubusercontent.com/460329/339643405-7df44c7d-a4c5-4393-8378-a8b7bc438b03.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjMzODY5MDIsIm5iZiI6MTcyMzM4NjYwMiwicGF0aCI6Ii80NjAzMjkvMzM5NjQzNDA1LTdkZjQ0YzdkLWE0YzUtNDM5My04Mzc4LWE4YjdiYzQzOGIwMy5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwODExJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDgxMVQxNDMwMDJaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT00OGY5YTJhMzUwOWJlYTk4YTA1ZjQ1ZjA3MWViZTdhMWQ3ZTgyOWE3NzcxYzlhYzhmZjI1NTM4ZTYxYjI2ZDUyJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.Sp5ooILJEgJ8l9OMGorPIHm5fpS5SofqidthhJIPWh4" alt=""></a></p>
<p dir="auto">Verso is a web browser built on top of Servo web engine. It's still under development. We dont' accept any feature request at the moment.
But if you are interested, feel free to help test it.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Windows</h3><a id="user-content-windows" aria-label="Permalink: Windows" href="#windows"></a></p>
<ul dir="auto">
<li>Install <a href="https://scoop.sh/" rel="nofollow">scoop</a> and then install other tools:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="scoop install git python llvm cmake curl
pip install mako"><pre>scoop install git python llvm cmake curl
pip install mako</pre></div>
<blockquote>
<p dir="auto">You can also use chocolatey to install if you prefer it.</p>
</blockquote>
<ul dir="auto">
<li>Build &amp; run:</li>
</ul>

<p dir="auto"><h3 tabindex="-1" dir="auto">MacOS</h3><a id="user-content-macos" aria-label="Permalink: MacOS" href="#macos"></a></p>
<ul dir="auto">
<li>Install <a href="https://developer.apple.com/xcode/" rel="nofollow">Xcode</a></li>
<li>Install <a href="https://brew.sh/" rel="nofollow">Homebrew</a> and then install other tools:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="brew install cmake pkg-config harfbuzz
pip install mako"><pre>brew install cmake pkg-config harfbuzz
pip install mako</pre></div>
<ul dir="auto">
<li>Build &amp; run:</li>
</ul>

<p dir="auto"><h3 tabindex="-1" dir="auto">Linux</h3><a id="user-content-linux" aria-label="Permalink: Linux" href="#linux"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Flatpak</h4><a id="user-content-flatpak" aria-label="Permalink: Flatpak" href="#flatpak"></a></p>
<p dir="auto">For unified environment setup and package experience, we choose Flatpak to build the project from the start.
Please follow the <a href="https://flatpak.org/setup/" rel="nofollow">Flatpak Setup</a> page to install Flakpak based on your distribution.</p>
<ul dir="auto">
<li>Install flatpak runtimes and extensions:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="flatpak install flathub org.freedesktop.Platform//23.08
flatpak install flathub org.freedesktop.Sdk//23.08
flatpak install flathub org.freedesktop.Sdk.Extension.rust-stable//23.08
flatpak install flathub org.freedesktop.Sdk.Extension.llvm18//23.08"><pre>flatpak install flathub org.freedesktop.Platform//23.08
flatpak install flathub org.freedesktop.Sdk//23.08
flatpak install flathub org.freedesktop.Sdk.Extension.rust-stable//23.08
flatpak install flathub org.freedesktop.Sdk.Extension.llvm18//23.08</pre></div>
<ul dir="auto">
<li>Generate manifests and build:
// TODO Exporting to a repository instead</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="python3 ./flatpak-cargo-generator.py ./Cargo.lock -o cargo-sources.json
flatpak-builder --user --install --force-clean target org.versotile.verso.yml
flatpak run org.versotile.verso"><pre>python3 ./flatpak-cargo-generator.py ./Cargo.lock -o cargo-sources.json
flatpak-builder --user --install --force-clean target org.versotile.verso.yml
flatpak run org.versotile.verso</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Nix</h4><a id="user-content-nix" aria-label="Permalink: Nix" href="#nix"></a></p>
<p dir="auto">We also support building Verso in nix shell. But we don't bundle it in nix at the moment.</p>
<ul dir="auto">
<li>For NixOS:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="nix-shell shell.nix --run 'cargo r'"><pre>nix-shell shell.nix --run <span><span>'</span>cargo r<span>'</span></span></pre></div>
<ul dir="auto">
<li>For non-NixOS distributions:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="nix-shell shell.nix --run 'nixGL cargo r'"><pre>nix-shell shell.nix --run <span><span>'</span>nixGL cargo r<span>'</span></span></pre></div>
<p dir="auto">If you prefer to build the project without any sandbox, please follow the instructions in <a href="https://book.servo.org/hacking/setting-up-your-environment.html#tools-for-linux" rel="nofollow">Servo book</a> to bootstrap.
But please understand we don't triage any build issue without flatpak or nix setup.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Nightly Release</h2><a id="user-content-nightly-release" aria-label="Permalink: Nightly Release" href="#nightly-release"></a></p>
<p dir="auto">Nightly releases built with CrabNebula Cloud can be found at <a href="https://web.crabnebula.cloud/verso/verso-nightly/releases" rel="nofollow">releases</a>.</p>
<blockquote>
<p dir="auto">Packages are unsigned currently. If you have problem opening the app on macOS, try <code>xattr -d com.apple.quarantine /Applications/verso.app</code> after installation.</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Future Work</h2><a id="user-content-future-work" aria-label="Permalink: Future Work" href="#future-work"></a></p>
<ul dir="auto">
<li>Multiwindow support.</li>
<li>Enable multiprocess mode.</li>
<li>Enable sandbox in all platforms.</li>
<li>Enable <code>Gstreamer</code> feature.</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Things I've learned building a modern TUI Framework (193 pts)]]></title>
            <link>https://www.textualize.io/blog/7-things-ive-learned-building-a-modern-tui-framework/</link>
            <guid>41215679</guid>
            <pubDate>Sun, 11 Aug 2024 12:22:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.textualize.io/blog/7-things-ive-learned-building-a-modern-tui-framework/">https://www.textualize.io/blog/7-things-ive-learned-building-a-modern-tui-framework/</a>, See on <a href="https://news.ycombinator.com/item?id=41215679">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

    <p>I've be working on <a href="https://github.com/Textualize/textual">Textual</a> for over a year now. Here's a few things I've discovered (or re-discovered) regarding terminals in Python, and software development in general.</p>
<p>— Will McGugan (CEO / Founder) <a href="https://twitter.com/willmcgugan">@willmcgugan</a></p>
<h3>Terminals are fast</h3>
<p>A modern terminal emulator is a remarkably sophisticated piece of software. The protocol they run may be <a href="https://en.wikipedia.org/wiki/Teleprinter">ancient</a>, but many are powered by the same graphics technologies used in video games. Despite this, smooth animation is <em>not</em> a given in the terminal. If you have ever tried any kind of visual effects in a terminal you may have been disappointed with flickering or <em>tearing</em>.</p>
<p>But it is possible to achieve smooth animation as you can see from the following screencast. So what trick(s) are we pulling?</p>
<p>
    <iframe height="480" width="100%" src="https://www.youtube.com/embed/k5m3CQT9yDM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</p>
<p>There are a few factors which reduce flicker in the terminal. The first is the terminal emulator that you are using. Modern terminals use hardware-accelerated rendering and will synchronize updates with your display to reduce flicker. Although in my experience there are other factors which have a greater impact on reducing flicker than your choice of emulator. Even on older terminals, you can generally get flicker-free animation with this <em>one little trick</em> (actually three).</p>
<p>The first <em>trick</em> is "overwrite, don't clear". If you clear the "screen" and then add new content, you risk seeing a blank or partially blank frame for a brief moment. It's far better to overwrite the content in the terminal entirely so that there is no intermediate blank frame.</p>
<p>The second <em>trick</em> would be to write new content in a single write to standard output. It may be convenient to make multiple <code>file.write</code> calls to display an update, but as with the blank frame you risk a partial update becoming visible.</p>
<p>The third <em>trick</em> would be to use the <a href="https://gist.github.com/christianparpart/d8a62cc1ab659194337d73e399004036">Synchronized Output</a> protocol; a relatively new addition to the terminal protocol, but already supported by many terminals. Details in the link, but the gist is that you tell the terminal when you begin and end a frame. It can then use this information to deliver flicker free updates.</p>
<p>With these three tricks in place you can create very smooth animation as long as you can deliver updates at regular intervals. Textual uses 60fps as a baseline. Any more than that probably isn't going to be noticeable.</p>
<p>Now that you <em>can</em> have smooth animation in the terminal, the question becomes <em>should</em> you? Not all animation is perceived in the same way. Some animation can be seen as gratuitous. For instance the sidebar in the screencast that slides in from the left of the screen. I think it's nifty, but it doesn't add anything to the user experience. Animation haters will probably cite that as a "do not want", which is why Textual will have a mechanism to disable such animations. Other types of animation are more than eye-candy. Smooth scrolling is an animation which I find particularly helpful in keeping my place within a wall of text. All animations lie somewhere between helpful and gratuitous, and I doubt there will be many people who want no animation at all.</p>
<h3>DictViews are amazing</h3>
<p>You are probably familiar with the <code>keys()</code> and <code>items()</code> methods on Python dicts which return a <code>KeysView</code> and <code>ItemsView</code> respectively. You <em>may</em> not know that these objects have much the same interfaces as sets. A fact recovered from my swiss cheese brain <em>after</em> I needlessly wrote a dozen or so complex lines of code</p>
<p>In Textual the layout process creates a "render map". Basically a mapping of the Widget on to it's location on the screen. In an earlier version, Textual would do a wasteful refresh of the entire screen if even a single widget changed position. I wanted to avoid that by comparing the <em>before</em> and <em>after</em> render map.</p>
<p>I discovered that I could take the symmetric difference of two ItemsView objects, which gave me the items which were either a) new, or b) had changed. Precisely what I needed, but done at the C level. In Textual this is used to get the modified regions of the screen when a CSS property changes, so we can make optimized updates.</p>
<p>The following gist demonstrates the technique.</p>

<h3>lru_cache is fast</h3>
<p>Perhaps not surprising given that <code>lru_cache</code> is literally designed to speed up your code, but <code>@lru_cache</code> is <em>fast</em>. I was surprised how fast it was.</p>
<p>If you aren't familiar with <code>lru_cache</code> it is a decorator found in the <code>functools</code> module in the standard library. Add it to a method and it will cache the return value of a function. If you set the <code>maxsize</code> parameter it will ensure your cache doesn't grow indefinitely.</p>
<p>I was looking in to <a href="https://github.com/python/cpython/blob/main/Lib/functools.py#L566">the implementation</a> of lru_cache in the CPython repos and I figured I could beat it. Spoiler: I couldn't. It turns out CPython uses this <a href="https://github.com/python/cpython/blob/main/Modules/_functoolsmodule.c#L992">C version</a> which is very fast for both cache hits and misses.</p>
<p>Knowing this convinced me to lower the barrier to using <code>@lru_cache</code>. There are a number of small functions in Textual, that are not exactly slow, but called a large number of times. Many of them were highly cacheable and judicious use of <code>@lru_cache</code> provided a significant win. Typically a <code>maxsize</code> of around 1000-4000 was enough to ensure that the majority calls were cache hits.</p>
<p>Here's an example of the kind of function that benefited from caching. This method calculates where two rectangular regions overlap. You can see it doesn't do a great deal of work, but it was called 1000s of times.</p>

<p>A word of advice when using <code>lru_cache</code>: always check your assumptions by inspecting the <code>cache_info()</code>. For effective caching you should expect to see <code>hits</code> growing faster than <code>misses</code>.</p>
<h3>Immutable is best</h3>
<p>Following on from the previous tip, I'd like to sing the praises of immutable objects. Python doesn't have true immutable objects, but you can get much of the benefits from tuples, NamedTuples, or frozen dataclasses.</p>
<p>It <em>seems</em> like an arbitrary limitation that you can't change an object, but it rarely is in practice. Computer scientists will point out that many languages are immutable by default, and for good reason.</p>
<p>In Textual, the code that uses immutable objects is the easiest to reason about, easiest to cache, and easiest to test. Mainly because you can write code that is free of side-effects. Something that is difficult to do when you pass class instances in to a function.</p>
<h3>Unicode art is good</h3>
<p>Some technical things are hard to explain in words, and a diagram created from unicode box characters can be massively beneficial in documentation. This diagram is taken from a docstring in Textual for a method that splits a region in to four sub-regions:</p>
<pre><code>           cut_x ↓
        ┌────────┐ ┌───┐
        │        │ │   │
        │    0   │ │ 1 │
        │        │ │   │
cut_y → └────────┘ └───┘
        ┌────────┐ ┌───┐
        │    2   │ │ 3 │
        └────────┘ └───┘
</code></pre>
<p>It's no substitute for a well written docstring, but in combination it is super helpful. I'd encourage you to add diagrams to docstrings wherever it makes sense.</p>
<p>I use <a href="https://monodraw.helftone.com/">monodraw</a> for these diagrams. Monodraw is MacOS only unfortunately, but there are no doubt good alternatives for other platforms.</p>
<h3>Fractions are accurate</h3>
<p>Python has a <code>fractions</code> module in the standard library which goes all the way back to Python26. Until recently I had never found a use for <code>fractions</code> in my code. I figured it was intended for mathematicians and not of much use for humble code monkeys like myself. I was wrong. It was a real life saver for Textual.</p>
<p>A Fraction is essentially an alternative way of representing a number, and once you have a Fraction object you can use it in place of floats. So what is the benefit of using Fractions over floats?</p>
<p>You probably know that floating point numbers have certain limitations. A problem not unique to Python. Here's a classic example that illustrates the problem:</p>
<pre><code>&gt;&gt;&gt; 0.1 + 0.1 + 0.1 == 0.3
False
</code></pre>
<p>In Textual, these floating point rounding errors were problematic. Some layouts required dividing the screen based on varying proportions. For instance, there might be a panel that is a third of the width of the screen, and the remaining two thirds are further divided. Rounding error would creep in and there would sometimes be a single character gap where there should be content.</p>
<p>A really easy solution to this was to replace floats with fractions. Fractions don't suffer from this kind of rounding error in the way that floats do. You can see that three tenths add up to three tenths in the Fraction world:</p>
<pre><code>&gt;&gt;&gt; from fractions import Fraction as F
&gt;&gt;&gt; F(1, 10) + F(1, 10) + F(1, 10) == F(3, 10)
True
</code></pre>
<p>Here's an example which splits a fixed number of characters in to several parts. The two functions do pretty much the same thing, but one uses floats and the other uses Fractions</p>

<p>Here's the output from the above code. Note how the float version (first row of numbers) is a character short:</p>
<pre><code>------------------------
00011122223334444555666
000111222233344445556666
</code></pre>
<h3>Emojis are terrible</h3>
<p>Emoji support in terminals has been an ongoing problem in <a href="https://github.com/Textualize/rich">Rich</a> since almost it's conception, and we have inherited that problem working on Textual. It was top of my list of problems to solve when Textualize was founded in January. We had big plans, but the more we looked in to this issue, the worse it got.</p>
<p>So what's the deal with emojis? It boils down to the issue that when you write a character to the terminal it may be one of two sizes (technically 3 since some characters are zero width). Chinese, Japanese, and Korean characters take up twice the space as Western alphabet, which presents a problem if we do any formatting such as centering or drawing a box around text. Such basic formatting requires that Rich knows how much space a given piece of text will take up in the terminal. Supporting double width characters means you can no longer use <code>len(text)</code> to find its in-terminal width.</p>
<p>Fortunately the Unicode database contains a mapping of which characters are single width and which are double. Rich (and Textual) will look up this database for <em>every character</em> it prints. Its not a cheap operation, but with a bit of engineering effort and caching (see lru_cache) it is fast enough.</p>
<p>Emoji also exist in the Unicode database, so problem solved? I wish. While Asian characters don't change much, emoji do. Every new release of the Unicode database sees a new batch of emojis. If you print these newer emoji in the terminal the results can be unpredictable. You may get a single or double width character, and it might not even render correctly.</p>
<p>We considered shipping Rich with information from every unicode release, which presents another problem: how do we detect what version of unicode a given terminal emulator is using? Well there doesn't seem to be a reliable way of doing that. There is no standard env var. There is a heuristic where you write various sequences and ask the terminal for the cursor position, which should make an educated guess as the Unicode version. Unfortunately from testing we've discovered that terminals still render emoji unpredictably even if you think you know the Unicode database used.</p>
<p>If thats not bad enough, let me introduce you to <em>multi-codepoint</em> emojis. A codepoint is the reference number for a given unicode glyph (character image). In Python you can look this up with <code>ord</code>. For instance <code>ord("A")</code> returns the codepoint 65 representing a capital A. You can be forgiven for assuming that this is true for every character, but it is not. Many emojis combine several codepoints to produce a single glyph. For instance 👨🏻‍🦰 (man, light skin tone, red hair, i.e. me) consists of 4 code points. Try copying that in to the Python REPL.</p>
<p>Not all terminal emulators render these characters correctly. In some terminals they render as 4 individual characters, or 2 characters, or 1 character, single or double width, or sometimes 4 "?" characters. Even if you implement the code to understand these multi-codepoint characters, you're left with the fundamental problem that you can't tell what the output will really be in a given terminal.</p>
<p>It's a mess for sure, but in practice it's not that bad. Sticking to the emoji in version 9 of the Unicode database seems to be reliable across all the platforms. You might want to avoid using newer emoji and multi-codepoint characters even if they look okay on your terminal emulator.</p>
<h3>Textualize is hiring</h3>
<p>Help us build a TUI framework that will eat some of the browser's lunch. See <a href="https://www.textualize.io/jobs">Jobs</a>.</p>
<blockquote><div lang="en" dir="ltr"><p>I'm hiring for Textualize again. We're looking for <a href="https://twitter.com/hashtag/Python?src=hash&amp;ref_src=twsrc%5Etfw">#Python</a> developer(s) to join us.</p><p>🐍 Very strong (technical) Python skills <br>🥇Web experience<br>🥈Experience with at least one other language<br>🥉Good API design skills</p><p>Retweets appreciated!</p></div>— Will McGugan (@willmcgugan) <a href="https://twitter.com/willmcgugan/status/1547521362260115456?ref_src=twsrc%5Etfw">July 14, 2022</a></blockquote> 

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenDevin: An Open Platform for AI Software Developers as Generalist Agents (124 pts)]]></title>
            <link>https://arxiv.org/abs/2407.16741</link>
            <guid>41215593</guid>
            <pubDate>Sun, 11 Aug 2024 12:02:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2407.16741">https://arxiv.org/abs/2407.16741</a>, See on <a href="https://news.ycombinator.com/item?id=41215593">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
    <div><p><span>Authors:</span><a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+X">Xingyao Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+B">Boxuan Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Song,+Y">Yufan Song</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu,+F+F">Frank F. Xu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Tang,+X">Xiangru Tang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhuge,+M">Mingchen Zhuge</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Pan,+J">Jiayi Pan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Song,+Y">Yueqi Song</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+B">Bowen Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Singh,+J">Jaskirat Singh</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Tran,+H+H">Hoang H. Tran</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+F">Fuqiang Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ma,+R">Ren Ma</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zheng,+M">Mingzhang Zheng</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Qian,+B">Bill Qian</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Shao,+Y">Yanjun Shao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Muennighoff,+N">Niklas Muennighoff</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+Y">Yizhe Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Hui,+B">Binyuan Hui</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lin,+J">Junyang Lin</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Brennan,+R">Robert Brennan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Peng,+H">Hao Peng</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ji,+H">Heng Ji</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Neubig,+G">Graham Neubig</a></p></div>            
    <p><a href="https://arxiv.org/pdf/2407.16741">View PDF</a></p><blockquote>
            <span>Abstract:</span>Software is one of the most powerful tools that we humans have at our disposal; it allows a skilled programmer to interact with the world in complex and profound ways. At the same time, thanks to improvements in large language models (LLMs), there has also been a rapid development in AI agents that interact with and affect change in their surrounding environments. In this paper, we introduce OpenDevin, a platform for the development of powerful and flexible AI agents that interact with the world in similar ways to those of a human developer: by writing code, interacting with a command line, and browsing the web. We describe how the platform allows for the implementation of new agents, safe interaction with sandboxed environments for code execution, coordination between multiple agents, and incorporation of evaluation benchmarks. Based on our currently incorporated benchmarks, we perform an evaluation of agents over 15 challenging tasks, including software engineering (e.g., SWE-Bench) and web browsing (e.g., WebArena), among others. Released under the permissive MIT license, OpenDevin is a community project spanning academia and industry with more than 1.3K contributions from over 160 contributors and will improve going forward.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Xingyao Wang [<a href="https://arxiv.org/show-email/cd095984/2407.16741">view email</a>]      <br>    <strong>[v1]</strong>
        Tue, 23 Jul 2024 17:50:43 UTC (3,147 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Samsung to Mass-Produce Solid-State Batteries for 'Super Premium' EVs (126 pts)]]></title>
            <link>https://www.pcmag.com/news/samsung-to-mass-produce-solid-state-batteries-for-super-premium-evs-by</link>
            <guid>41215489</guid>
            <pubDate>Sun, 11 Aug 2024 11:35:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.pcmag.com/news/samsung-to-mass-produce-solid-state-batteries-for-super-premium-evs-by">https://www.pcmag.com/news/samsung-to-mass-produce-solid-state-batteries-for-super-premium-evs-by</a>, See on <a href="https://news.ycombinator.com/item?id=41215489">Hacker News</a></p>
Couldn't get https://www.pcmag.com/news/samsung-to-mass-produce-solid-state-batteries-for-super-premium-evs-by: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Building data infrastructure that will last (119 pts)]]></title>
            <link>https://seattledataguy.substack.com/p/why-your-data-stack-wont-last-and</link>
            <guid>41215201</guid>
            <pubDate>Sun, 11 Aug 2024 10:24:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://seattledataguy.substack.com/p/why-your-data-stack-wont-last-and">https://seattledataguy.substack.com/p/why-your-data-stack-wont-last-and</a>, See on <a href="https://news.ycombinator.com/item?id=41215201">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>As a consultant, I have been called in to review and, in many cases, replace dozens of half-finished, abandoned, and sometimes forgotten data infrastructure projects.</p><p>The data infrastructure in a few cases may just need a little tweaking to operate effectively, but other times the project is either so incomplete or so lacking in a central design that the best thing to do is replace the old system.</p><p>Trust me, I’d love it if I could come into a project and simply change a few lines of code, and then everything would just work. However, so many projects are filled with unclear design decisions or resume-driven development that were never rooted in good planning.</p><p>Of course,  business stakeholders may have also push to get things done quickly. Forcing data teams to take on tech debt that will never be fixed. Don’t get me wrong, you want to get things done and move projects forward. But taking on technical debt is a decision that needs to be made intentionally. Otherwise, like in resume driven development, your data infrastructure might disappear. </p><p>This begs the question.</p><p>How do you ensure the data infrastructure you’re building doesn’t get replaced as soon as you leave in the future?</p><p>In this article I wanted to dive into the problems I often come into that require me to replace the current data infrastructure and how you can avoid it.</p><p>So let’s dive in.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png" width="1196" height="622" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:622,&quot;width&quot;:1196,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:125500,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03696313-66c2-4df6-a3ec-c678b714c465_1196x622.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>When you design a new system, it shouldn’t be driven by a </span><a href="https://seattledataguy.substack.com/p/vendor-driven-design-the-role-vendors" rel="">vendor</a><span> or your </span><a href="https://seattledataguy.substack.com/p/the-never-ending-epidemic-of-resume?utm_source=publication-search" rel="">resume</a><span>. Don’t get me wrong, if you have a solid, reliable base for your </span><a href="https://seattledataguy.substack.com/p/the-baseline-datastack-going-beyond?utm_source=publication-search" rel="">data infrastructure</a><span>, testing out the occasional POC with new tools isn’t a bad idea.</span></p><p>The problem I find is that many data teams get thrown into having to design data infrastructure with little experience actually setting up one in the past. Don’t get me wrong, we all start with no experience. But it can be difficult to assess what all the nuances of different tooling and designs can be. </p><p>In turn, many of them will look up articles to see what some of the big tech companies are doing or what a vendor might recommend. This can lead to design choices that likely won’t fit your use case.</p><p><span>One great point that was made by an ex-manager in analytics I was just talking to was that it can be easy to pick an ETL or </span><a href="https://seattledataguy.substack.com/p/data-engineering-vs-machine-learning" rel="">data pipeline</a><span> tool that sounds good on paper. The account executive and sales engineer will put together the perfect pitch and POC.</span></p><p><strong>But eight months into a project there is a key blocker that the tool either didn’t disclose or could only be found out with experience. Honestly, the vendor themselves might have not even known the limitation.</strong></p><p>A similar point can be made when you’re trying to design your overall architecture. If you try to follow what a large tech company is doing, it might be a bad fit for your company. </p><p>You need to be very intentional with your core design.</p><ul><li><p><strong>Talk to people who have used the vendor</strong><span> - Most data engineers are happy to share their thoughts on various tooling. Thus, try to find a mix of different data engineers and architects that you can ask about their experience with the tooling. Some will tell you flat out, don’t use said tool while others will sing the praises of some tools.</span></p></li></ul><ul><li><p><strong>Read agnostic sources</strong><span> - </span><a href="https://seattledataguy.substack.com/i/146685740/what-should-you-do" rel="">This can be research papers, non-affiliated consultants, books, etc. Just read everything with a grain of salt!</a></p></li><li><p><strong>Start with the business</strong><span> </span><strong>goals</strong><span> - It can be tempting to find the right job for the tool. After all, we all want to put the current “it” tool on our resume. However, when you do start looking to develop </span><a href="https://seattledataguy.substack.com/p/we-need-to-simplify-your-data-infrastructure?utm_source=publication-search" rel="">data infrastructure</a><span>, your first goal should be to work with the business to understand what they actually want their outcomes to be. Then you will want to start to take a measured approach to finding the right tools or designing the right system.</span></p></li></ul><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg" width="500" height="680" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:680,&quot;width&quot;:500,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:49609,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b75f14f-115d-4f01-a5c1-106b1d5fe58b_500x680.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>One of the constant issues many companies face, especially the smaller ones, is a </span><a href="https://seattledataguy.substack.com/i/52343968/key-person-dependencies" rel="">key person dependency issue</a><span>. This manifests as either a single key developer or perhaps a small team that all decide to develop the data infrastructure that will be difficult for future teams to maintain or even understand what is going on.</span></p><p>This could be because the prior team didn’t document their design, or only documented it for themselves. </p><p>Sure, they have built data infrastructure that works and solved the businesses current problems. They maintain it, and no one asks questions.</p><blockquote><p><strong>Perhaps no one realizes that one of the team members has to wake up at 6 AM every morning to check and ensure all the reports and tables have been created. </strong></p></blockquote><p>That all works until the day they leave.</p><p><span>Then the data infrastructure may hold for a little bit, but eventually, problems arise. Perhaps the company has hired a replacement </span><a href="https://www.theseattledataguy.com/9-habits-of-effective-data-managers-running-a-data-team/" rel="">data team</a><span> but they may eventually hit the limit of what they can actually support. </span></p><p>This was a major issue for many of my past clients. Around ⅓ over the past few years reached out for my services due to this.</p><p>In one example I came in and found a data vault project that wasn’t being used. It actually had pretty good documentation. However, the team had taken so long and hadn’t fully completed the project which led to their dismissal. What’s worse is because the project was never completed several analysts had to work weekends to create key reporting for the board.</p><p>For this specific case, we massively simplified what they had built and built a simpler data warehouse that a smaller team could maintain. </p><p>And of course made sure the reporting was automated so the analysts could stop working weekends.</p><ul><li><p><strong>Documentation</strong><span> - Make sure the documentation you create isn’t just written for you, but for someone who has never seen your code before. In particular, highlight key decision points starting with why you may have picked certain tooling, why you may have implemented logic in certain places, etc.</span></p></li><li><p><strong>Cross-training(where it makes sense)</strong><span> - For larger teams consider cross-training. This can also include semi-technical employees from other teams. I am not saying they will or should replace the engineers. But from my perspective, as a </span><a href="https://dcubed.substack.com/p/day-in-the-life-of-a-data-consultant" rel="">consultant</a><span>, it's been great to walk in and talk to marketing analysts or operational analysts who have some bearing on why the system was developed the way it was.</span></p></li></ul><p><span>In several of the projects I have come into, the communication between the stakeholders and the </span><a href="https://www.theseattledataguy.com/how-to-set-up-your-data-analytics-team-for-success-centralized-vs-decentralized-vs-federated-data-teams/" rel="">data teams</a><span> had either broken down or never existed.&nbsp;</span></p><p>The data team had gone off for several months without ever really delivering anything that could be reviewed by the business. Then by the time stakeholders saw the results it just wasn’t what they were looking for.</p><p>Your stakeholders need to be brought into what you’re building. Let me give an example. One of my clients I came into work with had a data warehouse. It technically functioned.</p><p><span>But within a few days, I realized no one was using the 2-3 dashboards that were being supported by the </span><a href="https://seattledataguy.substack.com/p/data-warehousing-essentials-a-precursor?utm_campaign=reaction&amp;utm_medium=email&amp;utm_source=substack&amp;utm_content=post" rel="">data warehouse</a><span>.</span></p><p><strong>Why?</strong></p><p>Well, a combination of reasons but one was it was never actually built with the stakeholders. </p><p>So they didn’t find the end results helpful.</p><p>This section’s topic is likely what kicked off my inspiration for this article. There is so much data infrastructure that is built in a silo without being tied to the business. All of which eventually leads to failed projects and data infrastructure not lasting.</p><ul><li><p><strong>Start with business outcomes - </strong><span>I already said something similar above. But it’s always worth repeating. You don’t want to build infrastructure for infrastructure’s sake. So before starting a project, be clear what you’re trying to do in terms of improving the business.</span></p></li><li><p><strong>Keep the business in the loop</strong><span> - It can be very tempting to not have meetings reviewing your dashboards or analyzing the metrics. After all, you have to get work done. The problem arises when at the end of your 3-6 months of development you finally show off your end-product and it wasn’t even close to what the stakeholders wanted.</span></p></li></ul><p>Your data infrastructure doesn’t have to be a mess so to speak, or perhaps I should just say it doesn’t have to be difficult for a future developer to understand what is going on under the hood. My best experience in learning how to program was when I worked for a company and opened up their code base and I understood what was going on.&nbsp;</p><p>The abstractions weren’t so deep that I couldn’t trace them, and there were clear standards implemented in naming conventions.</p><p>Honestly, it was just a lot of little things done right.</p><p>A well-thought-out and simple system.</p><p>Naming that people can understand.</p><p>And documentation that isn’t filled with acronyms and assumptions.</p><p>That can help ensure that years into the future, your data infrastructure is still around.</p><p>With that, I want to say thanks for reading!</p><p>If you’re looking to talk more about data engineering, data science, breaking into your first job, and finding other like minded data specialists. Then you should join the Seattle Data Guy discord!</p><p>We are now well over 7000 members!</p><p data-attrs="{&quot;url&quot;:&quot;https://discord.gg/8apVN8ytcN&quot;,&quot;text&quot;:&quot;Join Now&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a href="https://discord.gg/8apVN8ytcN" rel=""><span>Join Now</span></a></p><p>If you’re a data consultant or considering becoming one then you should join the Technical Freelancer Community! We have nearly 700 members!</p><p>You’ll find plenty of free resources you can access to expedite your journey as a technical consultant as well as be able to talk to other consultants about questions you may have!</p><p data-attrs="{&quot;url&quot;:&quot;https://the-technical-freelancer-academy.circle.so/c/start-here/&quot;,&quot;text&quot;:&quot;Join The TFA Community Today&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a href="https://the-technical-freelancer-academy.circle.so/c/start-here/" rel=""><span>Join The TFA Community Today</span></a></p><p>There are 20,000 new articles posted on Medium daily and that’s just Medium! I have spent a lot of time sifting through some of these articles as well as TechCrunch and companies tech blog and wanted to share some of my favorites!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png" width="1456" height="1369" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1369,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:232018,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F047eaa85-f7e7-4e7a-bb0a-ce6ca4ab2901_1600x1504.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>As part of Uber’s cloud journey, we are migrating the on-prem </span><a href="https://www.uber.com/blog/uber-big-data-platform/" rel="">Apache Hadoop® based data lake</a><span> along with analytical and machine learning workloads to GCP™ infrastructure platform. The </span><a href="https://www.uber.com/blog/modernizing-ubers-data-infrastructure-with-gcp/" rel="">strategy</a><span> involves replacing the storage layer, HDFS, with GCS Object Storage (PaaS) and running the rest of the tech stack (YARN, Apache Hive™, Apache Spark™, Presto®, etc.) on GCP Compute Engine (IaaS).&nbsp;</span></p><p>A typical cloud adoption strategy involves using cloud-native components and integrating existing IAM with cloud IAM (e.g., federation, identity sync, etc.) (Figure 1.ii). Our strategy is somewhat unique: we continue to leverage part of the existing stack as is (except HDFS) and integrate with GCS…</p><p><a href="https://www.uber.com/blog/securing-hadoop-on-gcp/?uclick_id=3fd97544-d965-4a19-80c1-38dadf166820" rel="">Read More Here</a></p><p>Thanks for checking out our community. We put out 3-4 Newsletters a week discussing data, tech, and start-ups.</p><p data-attrs="{&quot;url&quot;:&quot;https://seattledataguy.substack.com/p/understanding-business-needs-staying?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo0OTYzNjIyLCJwb3N0X2lkIjoxNDU0ODEyMjgsImlhdCI6MTcxODMwMzkyNSwiZXhwIjoxNzIwODk1OTI1LCJpc3MiOiJwdWItMjExMDUiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.-XNnZk0Tm4hBIr5BtsjsqSK06DiuZm1dB3_PgTH-zOM&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a href="https://seattledataguy.substack.com/p/understanding-business-needs-staying?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo0OTYzNjIyLCJwb3N0X2lkIjoxNDU0ODEyMjgsImlhdCI6MTcxODMwMzkyNSwiZXhwIjoxNzIwODk1OTI1LCJpc3MiOiJwdWItMjExMDUiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.-XNnZk0Tm4hBIr5BtsjsqSK06DiuZm1dB3_PgTH-zOM" rel=""><span>Share</span></a></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Firefox Browser Ported to HaikuOS (398 pts)]]></title>
            <link>https://discuss.haiku-os.org/t/progress-on-porting-firefox/13493?page=7</link>
            <guid>41214762</guid>
            <pubDate>Sun, 11 Aug 2024 08:23:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://discuss.haiku-os.org/t/progress-on-porting-firefox/13493?page=7">https://discuss.haiku-os.org/t/progress-on-porting-firefox/13493?page=7</a>, See on <a href="https://news.ycombinator.com/item?id=41214762">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemscope="" itemtype="http://schema.org/DiscussionForumPosting">
      <meta itemprop="headline" content="Progress on porting Firefox">
      
      <meta itemprop="datePublished" content="2023-05-19T18:35:14Z">
        <meta itemprop="articleSection" content="Development">
      <meta itemprop="keywords" content="">
      

        <meta itemprop="text" content="Hello everyone. 
I am a big fan of Firefox and a long-time watcher of Haiku (and BeOS). 
I love Haiku’s cute UX (inherited and polished from BeOS), so WebPositive looks sweet, but I dreamed also firefox will be available&amp;hellip;">

          <div id="post_133" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <div>
              <p>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-02T15:02:06Z">
                    August 2, 2024,  3:02pm
                  </time>
                  <meta itemprop="dateModified" content="2024-08-02T15:02:06Z">
              <span itemprop="position">133</span>
              </span>
            </p></div>
            <p>Amazing! Does it seem more stable than other browsers on haiku?</p>

            

            

          </div>
          <div itemprop="comment" id="post_134" itemscope="" itemtype="http://schema.org/Comment">
              
<p>This is what I call a true BeOS-fan lifestyle. It clearly a work in progress port, but the main question is: it is more stable than what we have right now? <img src="https://discuss.haiku-os.org/images/emoji/twitter/smiley.png?v=12" title=":smiley:" alt=":smiley:" loading="lazy" width="20" height="20"></p>
            </div>
          <div itemprop="comment" id="post_135" itemscope="" itemtype="http://schema.org/Comment">
              <p>Is it wrong to ask about the status? I would just like to know how stable it is.</p>
<p>Seems that the “true BeOS fan lifestyle” is to jump out on people in forums for asking questions? <img src="https://discuss.haiku-os.org/images/emoji/twitter/joy.png?v=12" title=":joy:" alt=":joy:" loading="lazy" width="20" height="20"></p>
            </div>
          <div id="post_136" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/nipos"><span itemprop="name">nipos</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-02T19:31:37Z">
                    August 2, 2024,  7:31pm
                  </time>
                  <meta itemprop="dateModified" content="2024-08-02T19:31:37Z">
              <span itemprop="position">136</span>
              </span>
            </p>
            <p>The current status is that no text can be shown due to some rendering issues,so it is not usable at all.<br>
That may now change fast,however,considering the cause is likely something that can be fixed rather easy,now that the rest of this huge monster application seems to be working.</p>

            

            

          </div>
          <div id="post_137" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/Cell"><span itemprop="name">Cell</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-02T20:14:49Z">
                    August 2, 2024,  8:14pm
                  </time>
                  <meta itemprop="dateModified" content="2024-08-02T20:14:49Z">
              <span itemprop="position">137</span>
              </span>
            </p>
            <p>X521 did say “somewhat” running. I don’t know if he sent you a personal message or you’re working on it aswell. However, from his given statement I dare to assume that there are other underlying issues aside of the obvious lack of text. I may be wrong but that’s just my theory.</p>

            

            

          </div>
          <div id="post_138" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/humungus"><span itemprop="name">humungus</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-02T21:57:47Z">
                    August 2, 2024,  9:57pm
                  </time>
                  <meta itemprop="dateModified" content="2024-08-02T21:57:47Z">
              <span itemprop="position">138</span>
              </span>
            </p>
            <p>what ? people cant ask questions. skjerp deg !</p>

            

            

          </div>
          <div id="post_139" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/X512"><span itemprop="name">X512</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-02T23:39:19Z">
                    August 2, 2024, 11:39pm
                  </time>
                  <meta itemprop="dateModified" content="2024-08-02T23:39:19Z">
              <span itemprop="position">139</span>
              </span>
            </p>
            <p>It is currently meaningless to talk about stability before solving Rust problems. New Rust version significantly altered behavior that formally considered undefined and now it trigger failures in various parts. It should be fixed in new Firefox versions. So we need to rebase Haiku patches over new Firefox version that is compatible with new Rust version. Or try to use old Rust version that I think is a bad idea.</p>

            

            

          </div>
          <div id="post_140" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/nipos"><span itemprop="name">nipos</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-03T12:22:28Z">
                    August 3, 2024, 12:22pm
                  </time>
                  <meta itemprop="dateModified" content="2024-08-03T16:34:17Z">
              <span itemprop="position">140</span>
              </span>
            </p>
            <div itemprop="text">
              <p>I’m currently trying to patch the latest LibreWolf source archive with the Haiku patches.<br>
I haven’t looked at all patches yet,but those I’ve seen are at places where I don’t think a lot has changed,so that should be rather easy.</p>
<p>Edit: Maybe I was a bit too optimistic with that.<br>
Currently it fails extremely early because it can’t find some Python packages.<br>
I’ll take a break until someone figures out how to fix the Python mess.<br>
Working with Python stuff is always awful,that’s also the point where I failed trying to port Pale Moon some weeks ago.</p>
            </div>

            

            

          </div>
          <div id="post_141" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/mmu_man"><span itemprop="name">mmu_man</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-06T11:26:40Z">
                    August 6, 2024, 11:26am
                  </time>
                  <meta itemprop="dateModified" content="2024-08-06T11:26:40Z">
              <span itemprop="position">141</span>
              </span>
            </p>
            <p>Yay, can remove that from my TODO list \o/ <img src="https://discuss.haiku-os.org/images/emoji/twitter/sweat_smile.png?v=12" title=":sweat_smile:" alt=":sweat_smile:" loading="lazy" width="20" height="20"></p>

            

            

          </div>
          <div id="post_142" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/Begasus"><span itemprop="name">Begasus</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-06T17:35:48Z">
                    August 6, 2024,  5:35pm
                  </time>
                  <meta itemprop="dateModified" content="2024-08-06T17:35:48Z">
              <span itemprop="position">142</span>
              </span>
            </p>
            <p>Finaly after about 20 years(?) <img src="https://discuss.haiku-os.org/images/emoji/twitter/stuck_out_tongue.png?v=12" title=":stuck_out_tongue:" alt=":stuck_out_tongue:" loading="lazy" width="20" height="20"> <img src="https://discuss.haiku-os.org/images/emoji/twitter/rofl.png?v=12" title=":rofl:" alt=":rofl:" loading="lazy" width="20" height="20"></p>

            

            

          </div>
          <div id="post_143" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <div>
              <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/X512"><span itemprop="name">X512</span></a>
                
              </span></p>

              <p><span>
                  <time itemprop="datePublished" datetime="2024-08-11T06:33:35Z">
                    August 11, 2024,  6:33am
                  </time>
                  <meta itemprop="dateModified" content="2024-08-11T06:33:35Z">
              <span itemprop="position">143</span>
              </span>
            </p></div>
            <div itemprop="text">
              <p>Firefox 128:</p>
<div><a href="https://discuss.haiku-os.org/uploads/default/original/2X/0/098a34996ed16051ac906c2ebd5403925d12c3cd.png" data-download-href="https://discuss.haiku-os.org/uploads/default/098a34996ed16051ac906c2ebd5403925d12c3cd" title="screenshot647"><img src="https://discuss.haiku-os.org/uploads/default/optimized/2X/0/098a34996ed16051ac906c2ebd5403925d12c3cd_2_643x500.png" alt="screenshot647" data-base62-sha1="1mooRKxhadwfSaoTeZwFzMDevFz" width="643" height="500" srcset="https://discuss.haiku-os.org/uploads/default/optimized/2X/0/098a34996ed16051ac906c2ebd5403925d12c3cd_2_643x500.png, https://discuss.haiku-os.org/uploads/default/optimized/2X/0/098a34996ed16051ac906c2ebd5403925d12c3cd_2_964x750.png 1.5x, https://discuss.haiku-os.org/uploads/default/optimized/2X/0/098a34996ed16051ac906c2ebd5403925d12c3cd_2_1286x1000.png 2x" data-dominant-color="ECEAE9"></a></div>
<div><a href="https://discuss.haiku-os.org/uploads/default/original/2X/6/65872225661119ee55b9b2f73e1ceb00f2cf9c65.png" data-download-href="https://discuss.haiku-os.org/uploads/default/65872225661119ee55b9b2f73e1ceb00f2cf9c65" title="screenshot648"><img src="https://discuss.haiku-os.org/uploads/default/optimized/2X/6/65872225661119ee55b9b2f73e1ceb00f2cf9c65_2_612x500.png" alt="screenshot648" data-base62-sha1="eu9KhmLThUz9LZesSShIiVW3b9z" width="612" height="500" srcset="https://discuss.haiku-os.org/uploads/default/optimized/2X/6/65872225661119ee55b9b2f73e1ceb00f2cf9c65_2_612x500.png, https://discuss.haiku-os.org/uploads/default/optimized/2X/6/65872225661119ee55b9b2f73e1ceb00f2cf9c65_2_918x750.png 1.5x, https://discuss.haiku-os.org/uploads/default/original/2X/6/65872225661119ee55b9b2f73e1ceb00f2cf9c65.png 2x" data-dominant-color="304143"></a></div>
            </div>

            

            

          </div>
          <div itemprop="comment" id="post_144" itemscope="" itemtype="http://schema.org/Comment">
              <p>How well does it work?<br>
Can it render <a href="http://discuss.haiku-os.org/">discuss.haiku-os.org</a>?</p>
            </div>
          <div id="post_145" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/nipos"><span itemprop="name">nipos</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-11T07:27:28Z">
                    August 11, 2024,  7:27am
                  </time>
                  <meta itemprop="dateModified" content="2024-08-11T07:27:28Z">
              <span itemprop="position">145</span>
              </span>
            </p>
            <div itemprop="text">
              <p>That’s really great news!<br>
Looks like it works perfectly already,I mean at least all screenshots are rendered without issues.<br>
I think I’ll use Haiku <em>a lot</em> more now that this is available.</p>
<p>Reading that “the browser that puts your privacy first” marketing bullshit is a bit funny,however,considering that Mozilla bought an advertising network recently and feeds your browser data to it lol<br>
It’s time to get my hands dirty on porting <a href="https://librewolf.net/">LibreWolf</a> again.</p>
            </div>

            

            

          </div>
          <div id="post_146" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/Cell"><span itemprop="name">Cell</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-11T08:45:28Z">
                    August 11, 2024,  8:45am
                  </time>
                  <meta itemprop="dateModified" content="2024-08-11T08:50:48Z">
              <span itemprop="position">146</span>
              </span>
            </p>
            <p>Finally, a browser that cloudflare doesn’t ruin (I hate cloudflare so much it has no reason to be this annoying.) are there any issues that have to be resolved for it to be called “finished”. Asking since it seems complete based on these screenshots. Aside from the fact that everything is in a serif font.</p>

            

            

          </div>
          <div id="post_147" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/ninos"><span itemprop="name">ninos</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-11T09:00:22Z">
                    August 11, 2024,  9:00am
                  </time>
                  <meta itemprop="dateModified" content="2024-08-11T09:00:22Z">
              <span itemprop="position">147</span>
              </span>
            </p>
            <p>how can I install firefox on my Haiku laptop?</p>

            

            

          </div>
          <div id="post_148" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" href="https://discuss.haiku-os.org/u/nipos"><span itemprop="name">nipos</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2024-08-11T09:03:25Z">
                    August 11, 2024,  9:03am
                  </time>
                  <meta itemprop="dateModified" content="2024-08-11T09:03:25Z">
              <span itemprop="position">148</span>
              </span>
            </p>
            

            

            

          </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenStreetMap Is Turning 20 (387 pts)]]></title>
            <link>https://stevecoast.substack.com/p/the-days-are-long-but-the-years-are</link>
            <guid>41214259</guid>
            <pubDate>Sun, 11 Aug 2024 06:00:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://stevecoast.substack.com/p/the-days-are-long-but-the-years-are">https://stevecoast.substack.com/p/the-days-are-long-but-the-years-are</a>, See on <a href="https://news.ycombinator.com/item?id=41214259">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>Two decades ago, I knew that a wiki map of the world would work. It seemed obvious in light of the success of Wikipedia and Linux. But I didn't know that </span><a href="https://www.openstreetmap.org/" rel="">OpenStreetMap</a><span> would work until much later.</span></p><p>I was showing someone new to OSM how to add data to the map. I would ask for a place they knew well, zoom in to that area and then find something to fix. The key was to get a quick win by showing the map before and after they had made it better. Get a little shot of dopamine for making the world a slightly better place.</p><p>This person asked to look at Cuba.</p><p>This presented a challenge, and I had to manage expectations. OpenStreetMap at the time had okay maps of major Western countries but my expectation, as I explained to them, was that Cuba would be a blank empty slate.</p><p>Cuba was doubly tricky not just because of economic factors that limit peoples free time and ability to contribute to open projects, but also the internet was (effectively if not actually) banned and computers illegal.</p><p>Zooming in to Cuba that day was the last time I was surprised by OSM, and when I stopped worrying about it working as a project: Cuba had roads, parks, hospitals and everything else imaginable already mapped.</p><p>…</p><p>OpenStreetMap has grown exponentially or quadratically over the last twenty years depending on the metric you’re interested in. My involvement has waxed and waned like soul mates oscillating between rapture and, inevitably, wanting the best for each other in our post-relationship new lives.</p><p>The story isn’t so much about the data and technology, and it never was. It’s the people.</p><p>Like John Boyd said, it’s the people then the ideas and then the technology. Not the other way around.</p><p>People: The people that wanted to map just weren’t in the existing camps by definition. They largely didn’t work in geography at all. They just wanted a way to make a map better. Governments, universities and companies had lists of reasons why public mapping wasn’t possible, but no actual solution.</p><p>Ideas: Allowing volunteers to edit a map in 2004 was simply anathema and bordering on unthinkable. Map data was supposed to be controlled, authorized and carefully managed by a priesthood of managers.</p><p>Technology: For those not in the industry, you might not know that OSM essentially did the opposite of what academic and the leading technology platforms at the time advocated. It needed a data model designed for volunteers not paid editors. So, we did tags not ontologies, and nodes and ways, not web feature service.</p><blockquote><p>I do not know what I may appear to the world, but to myself I seem to have been only like a boy playing on the seashore, and diverting myself in now and then finding a smoother pebble or a prettier shell than ordinary, whilst the great ocean of truth lay all undiscovered before me. - Newton</p></blockquote><p>OpenStreetMap managed to map the world and give the data away for free for almost no money at all. It managed to sidestep almost all the problems that Wikipedia has by virtue of only representing facts not opinions.</p><p>The project itself is remarkable. And it’s wonderful that so many are in love with it.</p><p>…</p><p>For me though, I’m far more fascinated with what are the other pebbles on the beach. What else can we make for almost no money that will radically change the world for the better?</p><p>If OpenStreetMap is a medium, what is the message?</p><p>For me it’s that we can go from nothing to something, or zero to one. Many of us love critiquing something that exists or maybe even improving it. But, my boyish naiveté was assuming that there were lots of other people out there also trying to build new things. Tautologically this simply can’t be true, for if everyone was making new things for any period of time we’d be much further along the various technological curves.</p><p>What stops us from doing new things? There seems to be a million reasons and two opposing forces keeping us in inaction: fear and vanity.</p><p><span>Fear of </span><em>actually</em><span> building something and showing it to people will push you from one side, and vainly falling in love with the idea itself will pull you the other way. These forces will perfectly balance like the tides. You’ll be stuck in the gravity well of some dead Lagrange point neither executing on the idea nor killing it.</span></p><p>Not everyone has ideas, but if you do, I encourage you to go do the thing.</p><p>When you do the thing, most likely you’ll have to kill it. New things tend to not work, or you have to change them drastically. OpenStreetMap’s first 4 or so major versions were all radically different from each other and relied on feedback from the world to make it something that would work.</p><p>Killing all the new things means you have to try many of them. This too is reflected in OSM, where I actually started about ten ideas at the time. OSM took off. One was taken over. The rest were strangled to death by reality meeting vanity.</p><p>…</p><p>So, celebrate all that we have achieved. It’s been amazing.</p><p>And then please turn the wheel and look to windward and consider how to kill it, by making something new or better.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Gervais Principle, or the Office According to "The Office" (2009) (233 pts)]]></title>
            <link>https://www.ribbonfarm.com/2009/10/07/the-gervais-principle-or-the-office-according-to-the-office/</link>
            <guid>41214180</guid>
            <pubDate>Sun, 11 Aug 2024 05:35:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ribbonfarm.com/2009/10/07/the-gervais-principle-or-the-office-according-to-the-office/">https://www.ribbonfarm.com/2009/10/07/the-gervais-principle-or-the-office-according-to-the-office/</a>, See on <a href="https://news.ycombinator.com/item?id=41214180">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>My neighbor introduced me to <em>The Office </em>back in 2005. Since then, I’ve watched every episode of both the British and American versions. I’ve watched the show obsessively because I’ve been unable to figure out what makes it so devastatingly effective, and elevates it so far above the likes of <a href="http://dilbert.com/">Dilbert</a> and <a href="http://en.wikipedia.org/wiki/Office_Space">Office Space</a>.</p>

<p>Until now, that is. Now, after four years, I’ve finally figured the show out.&nbsp; <em>The Office </em>is not a random series of cynical gags aimed at momentarily alleviating the existential despair of low-level grunts. It is a fully realized theory of management that falsifies 83.8% of the business section of the bookstore.&nbsp; The theory begins with Hugh MacLeod’s well-known cartoon, <a href="http://gapingvoid.com/2004/06/27/company-hierarchy/"><em>Company Hierarchy</em></a> (below), and its cornerstone is something I will call The Gervais Principle, which supersedes both the Peter Principle and its successor, The Dilbert Principle. Outside of the comic aisle, the only major and significant works consistent with the Gervais Principle are <em><a href="http://www.amazon.com/gp/product/0812218191?ie=UTF8&amp;tag=ribbonfarmcom-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0812218191">The Organization Man</a> </em>and <em><a href="http://www.amazon.com/gp/product/1412939798?ie=UTF8&amp;tag=ribbonfarmcom-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1412939798">Images of Organization</a>.</em></p>
<p><a href="http://gapingvoid.com/2004/06/27/company-hierarchy/"><img decoding="async" title="hughMcLeodCompanyHierarchy" alt="hughMcLeodCompanyHierarchy" src="https://ribbonfarm.wpenginepowered.com/wp-content/uploads/2009/10/hughMcLeodCompanyHierarchy.jpg" width="400" height="218"></a></p>
<p><strong><span id="more-1289"></span></strong>I’ll need to lay just a <em>little </em>bit of groundwork (lest you think this whole post is a riff based on cartoons) before I can get to the principle and my interpretation of <em>The Office. </em>I’ll be basing this entire article on the American version of the show, which is more fully developed than the original British version, though the original is perhaps more satisfyingly bleak. Keep in mind that this is an interpretation of <em>The Office</em> as management science; the truth in the art.&nbsp; Literary/artistic critics don’t really seem to get it.&nbsp;I’ll have some passing comments to offer on the comedy and art of it all, but this is primarily about the truths revealed by the show, pursued with Dwight-like earnestness.</p>
<p><strong>From The Whyte School to The Gervais Principle<br>
</strong></p>
<p>Hugh MacLeod’s cartoon is a pitch-perfect symbol of an unorthodox school of management&nbsp; based on the axiom that organizations don’t suffer pathologies; they are intrinsically pathological constructs.&nbsp; Idealized organizations are not perfect. They are perfectly pathological.&nbsp; So while most most management literature is about striving relentlessly towards an ideal by executing organization theories completely, this school, which I’ll call the Whyte school, would recommend that you do the bare minimum organizing to prevent chaos, and then stop. Let a natural, if declawed, individualist Darwinism operate beyond that point. The result is the MacLeod hierarchy. It may be horrible, but like democracy, it is the best you can do.</p>
<p><a href="http://www.amazon.com/gp/product/B00F9IV64W/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00F9IV64W&amp;linkCode=as2&amp;tag=ribbonfarmcom-20"><img decoding="async" alt="gpbanner" src="https://ribbonfarm.wpenginepowered.com/wp-content/uploads/2009/10/gpbanner.png" width="351" height="74" srcset="https://ribbonfarm.wpenginepowered.com/wp-content/uploads/2009/10/gpbanner.png 351w, https://ribbonfarm.wpenginepowered.com/wp-content/uploads/2009/10/gpbanner-300x63.png 300w" sizes="(max-width: 351px) 100vw, 351px"></a></p>
<p>The Sociopath (capitalized) layer comprises the Darwinian/Protestant Ethic will-to-power types who drive an organization to function despite itself. The Clueless layer is what Whyte called the “Organization Man,” but the archetype inhabiting the middle has evolved a good deal since Whyte wrote his book (in the fifties).&nbsp; The Losers&nbsp; are not social losers (as in the opposite of “cool”), but people who have struck bad bargains economically – giving up capitalist striving for steady paychecks. I am not making this connection up. Consider this passage from OM:</p>
<p>Of all organization men, the true executive is the one who remains most suspicious of The Organization. If there is one thing that characterizes him, it is a fierce desire to control his own destiny and, deep down, he resents yielding that control to The Organization, no matter how velvety its grip… he wants to dominate, not be dominated…Many people from the great reaches of middle management can become true believers in The Organization…But the most able are not vouchsafed this solace.</p>
<p>Back then, Whyte was extremely pessimistic. He saw signs that in the struggle for dominance between the Sociopaths (whom he admired as the ones actually making the organization effective despite itself) and the middle-management Organization Man, the latter was winning. He was wrong, but not in the way you’d think. The Sociopaths defeated the Organization Men and turned them into The Clueless not by reforming the organization, but by creating a meta-culture of Darwinism in the economy: one based on job-hopping, mergers, acquisitions, layoffs, cataclysmic reorganizations, outsourcing, unforgiving start-up ecosystems, and brutal corporate raiding. In this terrifying meta-world of the Titans, the Organization Man became the Clueless Man. Today, any time an organization grows too brittle, bureaucratic and disconnected from reality, it is simply killed, torn apart and cannibalized, rather than reformed. The result is the modern creative-destructive life cycle of the firm, which I’ll call the <em>MacLeod Life Cycle.<br>
</em></p>
<p><em><img loading="lazy" decoding="async" title="compLifeCycle" alt="compLifeCycle" src="https://ribbonfarm.wpenginepowered.com/wp-content/uploads/2009/10/compLifeCycle.JPG" width="366" height="427" srcset="https://ribbonfarm.wpenginepowered.com/wp-content/uploads/2009/10/compLifeCycle.JPG 366w, https://ribbonfarm.wpenginepowered.com/wp-content/uploads/2009/10/compLifeCycle-257x300.jpg 257w" sizes="(max-width: 366px) 100vw, 366px"><br>
</em></p>
<p>A Sociopath with an idea recruits just enough Losers to kick off the cycle. As it grows it requires a Clueless layer to turn it into a controlled reaction rather than a runaway explosion. Eventually, as value hits diminishing returns, both the Sociopaths and Losers make their exits, and the Clueless start to dominate. Finally, the hollow brittle shell collapses on itself and anything of value is recycled by the sociopaths according to meta-firm logic.</p>
<p>MacLeod’s Loser layer had me puzzled for a long time, because I was interpreting it in cultural terms: the kind of person you call a “loser.” While some may be losers in that sense too, they are primarily losers in the economic sense: those who have, for various reasons, made (or been forced to make) a bad economic bargain. They’ve given up some potential for long-term economic liberty (as capitalists) for short-term economic stability. Traded freedom for a paycheck in short. They actually produce, but are not compensated in proportion to the value they create (since their compensation is set by Sociopaths operating under conditions of serious <a href="http://en.wikipedia.org/wiki/Moral_hazard">moral hazard</a>). They mortgage their lives away, and hope to die before their money runs out. The good news is that Losers have two ways out, which we’ll get to later: turning Sociopath or turning into bare-minimum performers. The Losers destined for cluelessness do not have a choice.</p>
<p>Based on the MacLeod lifecycle, we can also separate the three layers based on the timing of their entry and exit into organizations. The Sociopaths enter and exit organizations at will, at any stage, and do whatever it takes to come out on top. The contribute creativity in early stages of a organization’s life, neurotic leadership in the middle stages, and cold-bloodedness in the later stages,&nbsp; where they drive decisions like mergers, acquisitions and layoffs that others are too scared or too compassionate to drive. They are also the ones capable of equally impersonally exploiting a young idea for growth in the beginning, killing one good idea to concentrate resources on another at maturity, and milking an end-of-life&nbsp; idea through harvest-and-exit market strategies.</p>
<p>The Losers like to feel good about their lives. They are the happiness seekers, rather than will-to-power players, and enter and exit reactively, in response to the meta-Darwinian trends in the economy. But they have no more loyalty to the firm than the Sociopaths. They <em>do </em>have a loyalty to individual people, and a commitment to finding fulfillment through work when they can, and coasting when they cannot.</p>
<p>The Clueless are the ones who lack the competence to circulate freely through the economy (unlike Sociopaths and Losers), and build up a perverse sense of loyalty to the firm, even when events make it abundantly clear that the firm is not loyal to them. To sustain themselves, they must be capable of fashioning elaborate delusions based on idealized notions of the firm — the perfectly pathological entities we mentioned. Unless squeezed out by forces they cannot resist, they hang on as long as possible, long after both Sociopaths and Losers have left (in Douglas Adams’ vicious history of our planet, humanity was founded by a spaceship full of the Clueless, sent here by scheming Sociopaths). When cast adrift in the open ocean, they are the ones most likely to be utterly destroyed.</p>
<p>Which brings us to our main idea. How both the pyramid and its lifecycle are animated. The dynamics are governed by the Newton’s Law of organizations: the Gervais Principle.</p>
<p><strong>The Gervais Principle and Its Consequences</strong></p>
<p>The Gervais Principle is this:</p>
<p>Sociopaths, in their own best interests, knowingly promote over-performing losers into middle-management, groom under-performing losers into sociopaths, and leave the average bare-minimum-effort losers to fend for themselves.</p>
<p>The Gervais principle differs from the Peter Principle, which it superficially resembles. The Peter Principle states that <em>all </em>people are promoted to the level of their incompetence. It is based on the assumption that future promotions are based on past performance. The Peter Principle is wrong for the simple reason that executives aren’t that stupid, and because there isn’t that much room in an upward-narrowing pyramid. They know what it takes for a promotion candidate to perform at the <em>to</em> level. So if they are promoting people beyond their competence anyway, under conditions of opportunity scarcity, there must be a good reason.</p>
<p>Scott Adams, seeing a different flaw in the Peter Principle, proposed the Dilbert Principle: that companies tend to systematically promote their least-competent employees to middle management to limit the damage they can do. This again is untrue. The Gervais principle predicts the exact opposite: that the <em>most </em>competent ones will be promoted to middle management. Michael Scott was a star salesman before he become a Clueless middle manager. The least competent employees (but not <em>all </em>of them — only certain enlightened incompetents) will be promoted not to middle management, but fast-tracked through to <em>senior </em>management. To the Sociopath level.</p>
<p>And in case you are wondering, the unenlightened under-performers get fired.</p>
<p>Let me illustrate the logic and implications of the principle with examples from the show.</p>
<p><span><em>The Career of the Clueless</em></span></p>
<p>In Season Three, the Dunder-Mifflin executives decide to merge the Stamford and Scranton branches, laying off much of the latter, including Michael Scott.&nbsp; His counterpart, the Sociopath Stamford branch manager, whose promotion is the premise of the re-org, opportunistically leverages his impending promotion into an executive position at a competitor, leaving the c0mpany in disarray. The Dunder-Mifflin executives, forced to deal with the fallout, cynically play out the now-illogical re-org anyway, shutting down Stamford and leaving Michael with the merged branch instead. The executives (David Wallace and Jan Levinson-Gould) are completely aware of Michael’s utter incompetence. Their calculations are obvious:&nbsp; giving Michael the expanded branch allows them to claim short-term success and buy time to maneuver out of having to personally suffer longer-term consequences.</p>
<p>Jim’s remark on the drama is revealing. Comparing Michael to his exiting sociopath peer he says: “Whatever you say about Michael, he would never have done something like this,” a testament to Michael’s determinedly deluded loyalty to the company that will never be loyal to him.&nbsp; We can safely assume that Michael’s previous promotion to regional manager occurred under similar circumstances of callous short-term calculations by sociopaths.</p>
<p>So why is promoting over-performing Losers logical? The simple reason is that if you over-perform at the Loser level, it is clear that you are an idiot. You’ve already made a bad bargain, and now you’re delivering more value than you need to, making your bargain even worse.&nbsp; Unless you very quickly demonstrate that you know your own value by successfully negotiating more money and/or power, you are marked out as an exploitable <em>clueless</em>&nbsp;Loser. At one point, Darryl, angling for a raise, learns to his astonishment that the raise he is asking for would make his salary higher than Michael’s. Michael hasn’t negotiated a better deal in 14 years. Darryl — a minimum-effort Loser with strains of Sociopath — doesn’t miss a step. He convinces and coaches Michael into asking for his own raise, so he can get his.</p>
<p>A Loser who can be suckered into bad bargains is set to become one of the Clueless. That’s why they are promoted: they are worth even more as Clueless pawns in the middle than as direct producers at the bottom, where the average, rationally-disengaged Loser will do. At the bottom, the overperformers can merely add a predictable amount of value. In the middle they can be used by the Sociopaths to escape the consequences of high-risk machinations like re-orgs.</p>
<p><span><em>The Career of the Sociopath</em></span></p>
<p>The example of the “fast-track the under-performing” part of the principle is Ryan, the intern. He tests himself quickly and rapidly learns and accepts that he is incompetent as a salesman. But he is a born pragmatist with the drive, ambition, daring and lack of principles to make it to the top.&nbsp; So rather than waste time trying to get good at sales, he slips into a wait-watch-grab opportunist mode. But he isn’t checked out; he is engaged, but in an experimental way, probing for his opening. The difference between him and the average checked-out Loser is illustrated in one brilliant scene early in his career. He suggests, during a group stacking effort in the warehouse, that they form a bucket brigade to work more efficiently. The minimum-effort Loser Stanley tells him coldly, “this here is a run-out-the-clock situation.” The line could apply to Stanley’s entire life.</p>
<p>Stanley’s response shows both his intelligence and clear-eyed self-awareness of his Loser bargain with the company. He therefore acts according to a mix of self-preservation and minimum-effort coasting instincts. The same is true of everybody else in the Loser layer with the exception of the over-performers: Dwight and Andy (and in his earlier incarnation as a salesperson, Michael).</p>
<p>The future Sociopath <em>must</em> be an under-performer at the bottom. Like the average Loser, he recognizes that the bargain is a really bad one. Unlike the risk-averse loser though, he does not try to make the best of a bad situation by doing enough to get by. He has no intention of just getting by. He very quickly figures out — through experiments and fast failures — that the Loser game is not worth becoming good at. He then severely under-performs in order to free up energy to concentrate on maneuvering an upward exit.&nbsp; He knows his under-performance is not sustainable, but he has no intention of becoming a lifetime-Loser employee anyway. He takes the calculated risk that he’ll find a way up before he is fired for incompetence.</p>
<p>Ryan’s character displays this path brilliantly. When Michael’s boss and dominatrix-lover Jan suffers a psychotic meltdown, <em>her </em>boss, the uber-sociopath David Wallace, has no great hopes of a good outcome. Setting up yet another band-aid move, he calls up Michael for an interview to take up Jan’s spot. But when the rest of the office learns of Michael’s impending interview (during Michael’s farcical attempts at using a <em>Survivor </em>style contest to choose his successor, which predictably, only Dwight takes seriously), the true Sociopaths act. Jim and his Sociopath girlfriend Karen instantly call up David and announce their candidacies for the same position. Unknown to them, Ryan, the intern-turned-rookie, has also spotted the opportunity. The outcome is spectacular: Ryan gets the job, Michael loses, Karen is promoted to manager of the Utica branch, and Jim — who still has not yet completely embraced his inner Sociopath — returns to Scranton.&nbsp; We learn later — as the Gervais principle would predict — that David Wallace never seriously considered Michael more than a temporary last resort. Much later, in a deposition during Jan’s lawsuit against the company, he reveals that Michael was never a serious candidate.</p>
<p><span><em>The Career of the Loser</em></span></p>
<p>The career of the Loser is the easiest to understand. Having made a bad bargain, and not marked for either Clueless or Sociopath trajectories, he or she must make the best of a bad situation.&nbsp; The most rational thing to do is slack off and do the minimum necessary. Doing more would be a Clueless thing to do. Doing less would take the high-energy machinations of the Sociopath, since it sets up self-imposed up-or-out time pressure. So the Loser — really not a loser at all if you think about it — pays his dues, does not ask for much, and finds meaning in his life elsewhere. For Stanley it is crossword puzzles. For Angela it is a colorless Martha-Stewartish religious life. For Kevin, it is his rock band. For Kelly, it is mindless airhead pop-culture distractions. Pam has her painting ambitions. Meredith is an alcoholic slut. Oscar, the ironic-token gay character, has his intellectual posturing. Creed, a walking freak-show, marches to the beat of his own obscure different drum (he is the most rationally checked-out of all the losers).</p>
<p>If you leave out the clear marked-for-Clueless characters, Dwight and Andy, you are left with the two most interesting characters in the show: the will-he-won’t-he Sociopath-in-the-making, Jim, and the strange Toby. Toby is a curious case — intellectually a Sociopath, but without the energy or ambition to be an <em>active </em>sociopath. More about these two later.</p>
<p><span><em>The Emergence of the MacLeod Hierarchy</em></span></p>
<p>Dastardly as all this sounds, it is actually pretty efficient, given the inevitability of the MacLeod hierarchy and life cycle. The Sociopaths know that the only way to make an organization capable of survival is to buffer the intense chemistry between the producer-Losers and the leader-Sociopaths with enough Clueless padding in the middle to mitigate the risks of business. Without it, the company would explode like a nuclear bomb, rather than generate power steadily like a reactor. On the other hand, the business wouldn’t survive very long without enough people actually thinking in cold, calculating ways. The average-performing , mostly-disengaged Losers&nbsp; can create diminishing-margins profitability, but not sustainable performance or growth.&nbsp; You need a steady supply of Sociopaths for that, and you cannot waste time moving them slowly up the ranks, especially since the standard promotion/development path is primarily designed to maneuver the Clueless into position wherever they are needed. The Sociopaths must be freed up as much as possible to actually run the business, with or without official titles.</p>
<p>So Ryan floats directly to the top, where he does what is expected of him — lead a bold strategic gamble by building an online sales channel operation. As with any big strategic move, the operation has its risks, and fails. And here we find that Ryan is still not quite experienced enough as a sociopath. He foolishly goes the Enron route,&nbsp; attempting to cook the books to avoid failure, and is found out and arrested. A true master Sociopath like David Wallace would instead have spotted the impending failure, promoted a Michael to take over (who would obviously be so gratified at being given a new white-elephant title that he would not have seen disaster looming), and have him take the blame for the inevitable failure. Completely legal and efficient.</p>
<p><strong>The Organization as Psychic Prison</strong></p>
<p>Which brings us to the other major management book that is consistent with the Gervais Principle,&nbsp;<em><a href="https://www.ribbonfarm.com/2010/07/13/the-eight-metaphors-of-organization/">Images of Organization</a>, </em>Gareth Morgan’s magisterial study of the metaphors through which we understand organizations. Of the eight systemic metaphors in the book, the one that is most relevant here is the metaphor of an organization as a psychic prison. The image is derived from Plato’s <a href="http://en.wikipedia.org/wiki/Allegory_of_the_cave">allegory of the cave</a>, which I won’t get into here. Suffice it to say that it divides people into those who get how the world really works (the Sociopaths and the self-aware slacker Losers) and those who don’t (the over-performer Losers and the Clueless in the middle).</p>
<p>This is where Gervais has broken new ground, primarily because as an artist, he is interested in the subjective experience of being Clueless (most sitcoms are about Losers). For your everyday Sociopath, it is sufficient to label someone clueless and manipulate them. What Gervais managed to create is a very compelling portrait of the Clueless, a work of art with real business value.</p>
<p>Here is the ultimate explanation of Michael Scott’s (and David Brent’s) careers: they are put into a position of having to explain their own apparent, unexpected and unexamined <em>success. </em>It is easy to explain failure. Random success is harder. Remember, they are promoted primarily as passive pawns to either allow the Sociopaths to escape the risks of their actions, or to make way for the Sociopaths to move up faster. They are presented with an interesting bit of cognitive dissonance: being nominally given greater power, but in reality being safely shunted away from the pathways of power. They must choose to either construct false narratives or decline apparent opportunities.</p>
<p>The Clueless resolve this dissonance by choosing to believe in the reality of the organization. Not everybody is capable of this level of suspension of disbelief. Both Ricky Gervais (David Brent) and Steve Carrel (Michael Scott) play the brilliantly drawn characters perfectly. The most visible sign of their capacity for self-delusion is their complete inability to generate an original thought. They quote movie lines, lyrics and perform terrible impersonations (at one point Michael goes, “You talking to me?” a line he attributes, in a masterful display of confusion, to “Al Pacino, <em>Raging Bull</em>“). For much of what he needs to say, he gropes for empty business phrases, deploying them with staggering incompetence. When Michael talks, he is attempting, like a child, to copy the flawless Powertalk spoken by sociopaths like Jan and David Wallace. He is oblivious to the fact that the Sociopaths use Powertalk as a coded language with which to simultaneously sustain the (necessary) delusions of the Clueless and communicate with each other.</p>
<p>It is not just the Sociopaths who conspire to sustain Michael’s delusions. So do the checked-out Losers, sometimes out of kindness, and sometimes out of self-interest. In one particularly perfect summing up, Oscar describes the impending “Dundies” award ceremony (a veritable monument to the consensual enablement of Michael’s delusions) as “The Dundies are kind of like a kid’s birthday party. And you go, and there’s really nothing for you to do there, but the kid’s having a really good time, so you… You’re kind of there. That’s… That’s kind of what it’s like.”</p>
<p>But Michael isn’t entirely a puppet. Buried under layers of denial is a clear understanding of his own, hopeless, powerless life, which makes him marginally more clued-in than say, Dwight. His response is&nbsp; frenetic and desperate manipulation of the drama of false validation that has been set up for his benefit.&nbsp; Some of this is with the knowing consent of his enablers.&nbsp; Like experienced improv-comics, within limits, the rest of the office follows the rule of agreement in the Theater of Michael (in a brilliant piece of meta-commentary, in one episode we get to see Michael at his own impossibly bad worst in his <em>real </em>improv class, where he ruins every single sketch).</p>
<p>But Michael’s grand narrative requires constant, exhausting work to keep up. He must amplify and rope in even the most minor piece of validation into the service of his script. When, in a moment of weakness, Jim shares a genuine confidence with him, Michael is so thrilled that he turns the moment into a deep imaginary friendship, practically becoming a stalker, even mimicking Jim’s hairstyle.&nbsp; At the other end, he over-represses even the slightest potential dent to his self-image. His is a thin-skinnedness gone crazy. Reality is sealed away with&nbsp; psychotic urgency, but to do so, he must first scout it out with equal urgency. And so, when Jim (in the first true Sociopath move of his career) engineers a private meeting with the visiting David Wallace to carve out a promotion, Michael tries to crash the meeting. When politely turned away, he instantly switches scripts and pretends he is too busy and that <em>he </em>is the one who can’t attend. And then he sneaks into the meeting room anyway, first with various excuses, and finally by hiding in a Trojan-Horse cheese cart.</p>
<p>This sort of ability to work hard to sustain the theater of his own delusions, half-aware that he is doing so, is what makes Michael a genuine candidate for promotion to the ranks of the Clueless. Dwight is interesting precisely because he lacks Michael’s capacity for this pathological meta-cognition, and the ability to offer semi-believable scripts that others can at least help bolster. Dwight is not talented enough at Cluelessness to ever be promoted.</p>
<p><strong>Is There More?</strong></p>
<p>You bet. We haven’t even scratched the surface. Dwight, Jim, and Toby each deserve an entire essay. Michael and Ryan probably deserve one each as well, in addition to my quick sketches here. And there are other principles, lemmas and sundry theoretical constructs. But I’ll hold off. Maybe there aren’t as many <em>Office </em>watchers among this blog’s readers as I imagine.&nbsp; You guys tell me if you want more.</p>
<p>I’ll conclude with one thought: Gervais deserves Nobel prizes in both literature and economics.</p>

			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Rust GUI Library via Flutter (262 pts)]]></title>
            <link>https://cjycode.com/posts/rust-ui-flutter/</link>
            <guid>41213711</guid>
            <pubDate>Sun, 11 Aug 2024 02:55:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cjycode.com/posts/rust-ui-flutter/">https://cjycode.com/posts/rust-ui-flutter/</a>, See on <a href="https://news.ycombinator.com/item?id=41213711">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header><div><picture><source srcset="https://cjycode.com/posts/rust-ui-flutter/logo_hua61a7cb5dd2716f4970132bdcd3ffb5e_118466_330x0_resize_q75_h2_box_3.webp 330w,https://cjycode.com/posts/rust-ui-flutter/logo_hua61a7cb5dd2716f4970132bdcd3ffb5e_118466_660x0_resize_q75_h2_box_3.webp 660w
,https://cjycode.com/posts/rust-ui-flutter/logo_hua61a7cb5dd2716f4970132bdcd3ffb5e_118466_1024x0_resize_q75_h2_box_3.webp 1024w
,https://cjycode.com/posts/rust-ui-flutter/logo_hua61a7cb5dd2716f4970132bdcd3ffb5e_118466_1320x0_resize_q75_h2_box_3.webp 1320w" sizes="100vw" type="image/webp"><img width="3000" height="1000" src="https://cjycode.com/posts/rust-ui-flutter/logo_hua61a7cb5dd2716f4970132bdcd3ffb5e_118466_660x0_resize_box_3.png" srcset="https://cjycode.com/posts/rust-ui-flutter/logo_hua61a7cb5dd2716f4970132bdcd3ffb5e_118466_330x0_resize_box_3.png 330w,https://cjycode.com/posts/rust-ui-flutter/logo_hua61a7cb5dd2716f4970132bdcd3ffb5e_118466_660x0_resize_box_3.png 660w
,https://cjycode.com/posts/rust-ui-flutter/logo_hua61a7cb5dd2716f4970132bdcd3ffb5e_118466_1024x0_resize_box_3.png 1024w
,https://cjycode.com/posts/rust-ui-flutter/logo_hua61a7cb5dd2716f4970132bdcd3ffb5e_118466_1320x0_resize_box_3.png 1320w" sizes="100vw"></picture></div></header><div><h2 id="background">Background <span><a href="#background" aria-label="Anchor">#</a></span></h2><p>Rust has been “the most desired programming language” for 8 years (by StackOverflow and GitHub <a href="https://github.blog/2023-08-30-why-rust-is-the-most-admired-language-among-developers/" target="_blank" rel="noreferrer">1</a> <a href="https://survey.stackoverflow.co/2023/#section-admired-and-desired-programming-scripting-and-markup-languages" target="_blank" rel="noreferrer">2</a>), and many people want to write programs with a GUI in Rust.</p><p>Therefore, in this blog, I will share an approach by utilizing Flutter and the <a href="https://github.com/fzyzcjy/flutter_rust_bridge" target="_blank" rel="noreferrer">https://github.com/fzyzcjy/flutter_rust_bridge</a> I made.</p><p>To have a try, please visit the GitHub repo or the demo folder at the end of this article.</p><h2 id="pros-of-the-approach">Pros of the approach <span><a href="#pros-of-the-approach" aria-label="Anchor">#</a></span></h2><p>Firstly, Flutter is popular and mature. It is “the most popular cross-platform mobile SDK” (by StackOverflow <a href="https://stackoverflow.blog/2022/02/21/why-flutter-is-the-most-popular-cross-platform-mobile-sdk/" target="_blank" rel="noreferrer">1</a> <a href="https://survey.stackoverflow.co/2023/#technology-most-popular-technologies" target="_blank" rel="noreferrer">2</a>). In addition, many developers and well-known brands (e.g. see <a href="https://flutter.dev/showcase" target="_blank" rel="noreferrer">this long list</a>) are using it. It is a lot of work to make an engine feature-rich and mature like that.</p><p>Secondly, it also has a large ecosystem, making it easy to implement what we want. For example, even if we want to add some beautiful confetti 🎉 animations, there exists a package for us. Let alone other beautiful widgets and functionalities, and its intrinsic flexibility to control every pixel.</p><p>The “hot-reload” feature makes developing UI much faster, since it happens frequently to tweak the UI. When changing code, as is shown in the gif below, the updated UI can be seen almost instantly, without losing state or wait for a recompilation.</p><p>Flutter is also cross-platform. The same codebase can not only be run on Android and iOS, but also on Linux, MacOS, Windows and Web.</p><video controls="" preload="auto" width="100%" autoplay="" muted="" playsinline="">
<source src="https://cjycode.com/posts/rust-ui-flutter/confetti.mp4" type="video/mp4"><span>Your browser doesn't support embedded videos, but don't worry, you can <a href="https://cjycode.com/posts/rust-ui-flutter/confetti.mp4">download it</a> and watch it with your favorite video player!</span></video><p>Hot-reload to add a confetti to UI</p><h2 id="cons-of-the-approach">Cons of the approach <span><a href="#cons-of-the-approach" aria-label="Anchor">#</a></span></h2><p>Firstly, this approach is not 100% pure Rust (e.g. Rust state/logic, Flutter UI). However, this seems in analogy to many other Rust UIs - write a custom DSL using macros, or another language like HTML/CSS/Slint. Such split also follows separation-of-concerns and is adopted (e.g. <a href="https://michel.codes/blogs/ui-as-an-afterthought" target="_blank" rel="noreferrer">link</a>). In addition, Flutter is easy to learn, especially if understanding Rust.</p><p>Secondly, honestly speaking, I heard some criticism about web platform. It seems more suitable for “apps” on web and other platforms (real-world e.g. Google Earth, Rive’s animation editor, …) than static webpages.</p><p>Last but not least, Flutter has a bunch of boilerplate/scaffold code. My humble understanding is that, for small projects, those files are usually not changed, thus similar to not existing. For large projects, modifiability is indeed customizability.</p><h2 id="whats-flutter_rust_bridge">What’s flutter_rust_bridge? <span><a href="#whats-flutter_rust_bridge" aria-label="Anchor">#</a></span></h2><p>The goal is to make a bridge between the two, seamlessly as if working in one single language. It translates many things automatically, such as arbitrary types,<code>&amp;mut</code>, async, traits, results, closure (callback), lifetimes, etc.</p><p>Therefore, it is quite general-purpose, and “Rust GUI via Flutter” is just one of the many scenarios. Other typical usages include using arbitrary Rust libraries for Flutter, and writing code such as algorithms in Rust while others in Flutter.</p><h2 id="example-a-counter-app">Example: A counter app <span><a href="#example-a-counter-app" aria-label="Anchor">#</a></span></h2><p>Here, I demonstrate <em>one</em> of the many possible ways to integrate Rust with Flutter. Since flutter_rust_bridge is unopinionated and general-purpose, there can be many other approaches, such as a Redux-like or Elm-like one.</p><p><code>flutter_rust_bridge</code> supports quite rich Rust syntax, such as arbitrary types, results, traits, async, streams, etc. But let us keep it simple and define Rust state and logic as:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>#[frb(ui_state)]</span><span>
</span></span></span><span><span><span></span><span>pub</span><span> </span><span>struct</span> <span>RustState</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>count</span>: <span>i32</span><span>,</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>impl</span><span> </span><span>RustState</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>	</span><span>pub</span><span> </span><span>fn</span> <span>new</span><span>()</span><span> </span>-&gt; <span>Self</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>		</span><span>Self</span><span> </span><span>{</span><span> </span><span>count</span>: <span>100</span><span> </span><span>}</span><span>
</span></span></span><span><span><span>	</span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>	</span><span>#[frb(ui_mutation)]</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>fn</span> <span>increment</span><span>(</span><span>&amp;</span><span>mut</span><span> </span><span>self</span><span>)</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>	    </span><span>self</span><span>.</span><span>count</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>// Indeed flutter_rust_bridge can support something complex such as:
</span></span></span><span><span><span>// impl MyTrait for MyType {
</span></span></span><span><span><span>//     pub fn f(&amp;self, callback: impl Fn(String) -&gt; FancyEnum,
</span></span></span><span><span><span>//              stream: StreamSink&lt;Whatever&gt;) -&gt; Result&lt;(FancyStruct, Hello)&gt; { .. }
</span></span></span><span><span><span>// }
</span></span></span></code></pre></div><p>Remark: The <code>#[frb(ui_state)]</code> and <code>#[frb(ui_mutation)]</code> are very lightweight (only a dozen line of code), and there is no magic hidden.</p><p>Then, the UI is like the following. Flutter is declarative, thus we can naturally translate the sentence “a column with padding, containing a text showing current count, and a button for increment” into:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>Widget</span><span> </span><span>body</span><span>(</span><span>RustState</span><span> </span><span>state</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>[</span><span>
</span></span></span><span><span><span>  </span><span>Text</span><span>(</span><span>'Count</span>: <span>$</span><span>{</span><span>state</span><span>.</span><span>count</span><span>}</span><span>'</span><span>),</span><span>
</span></span></span><span><span><span>  </span><span>TextButton</span><span>(</span><span>onPressed</span>: <span>state</span><span>.</span><span>increment</span><span>,</span><span> </span><span>child</span>: <span>Text</span><span>(</span><span>'</span><span>+</span><span>1</span><span>'</span><span>)),</span><span>
</span></span></span><span><span><span></span><span>].</span><span>toColumn</span><span>().</span><span>padding</span><span>(</span><span>all</span>: <span>16</span><span>);</span><span>
</span></span></span></code></pre></div><p>Remark: Similarly, there are many ways to write a Flutter UI, but here we choose one with simplicity. For larger projects, <code>functional_widget</code> (which adds one-line annotation for widget functions) and many tunable things can be configured.</p><p>Now we can run app and play with it in a command (for full code directory, please refer to the end of article). As a bonus, we can modify the UI and see it immediately shown, thanks to hot-reload.</p><h2 id="optional-a-todo-list-app">(Optional) A todo-list app <span><a href="#optional-a-todo-list-app" aria-label="Anchor">#</a></span></h2><p>Feel free to skip this section, since it mainly serves for completeness.</p><details><p>Todo-list app seems to be quite common when it comes to examples, so let’s also make one, and again it is <em>only</em> one of the many possible approaches that flutter_rust_bridge can support.</p><p>Define the states:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>#[frb(ui_state)]</span><span>
</span></span></span><span><span><span></span><span>pub</span><span> </span><span>struct</span> <span>RustState</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>items</span>: <span>Vec</span><span>&lt;</span><span>Item</span><span>&gt;</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>input_text</span>: <span>String</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>filter</span>: <span>Filter</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>next_id</span>: <span>i32</span><span>,</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>#[derive(Clone)]</span><span>
</span></span></span><span><span><span></span><span>pub</span><span> </span><span>struct</span> <span>Item</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>id</span>: <span>i32</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>content</span>: <span>String</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>completed</span>: <span>bool</span><span>,</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>#[derive(Clone, Copy, PartialEq, Eq)]</span><span>
</span></span></span><span><span><span></span><span>pub</span><span> </span><span>enum</span> <span>Filter</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>All</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>Active</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>Completed</span><span>,</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></div><p>…some actions to update it:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>#[frb(ui_mutation)]</span><span>
</span></span></span><span><span><span></span><span>impl</span><span> </span><span>RustState</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>fn</span> <span>add</span><span>(</span><span>&amp;</span><span>mut</span><span> </span><span>self</span><span>)</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>id</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>next_id</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>self</span><span>.</span><span>next_id</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>self</span><span>.</span><span>items</span><span>.</span><span>push</span><span>(</span><span>Item</span><span> </span><span>{</span><span> </span><span>id</span><span>,</span><span> </span><span>content</span>: <span>self</span><span>.</span><span>input_text</span><span>.</span><span>clone</span><span>(),</span><span> </span><span>completed</span>: <span>false</span><span> </span><span>});</span><span>
</span></span></span><span><span><span>        </span><span>self</span><span>.</span><span>input_text</span><span>.</span><span>clear</span><span>();</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>fn</span> <span>remove</span><span>(</span><span>&amp;</span><span>mut</span><span> </span><span>self</span><span>,</span><span> </span><span>id</span>: <span>i32</span><span>)</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>self</span><span>.</span><span>items</span><span>.</span><span>retain</span><span>(</span><span>|</span><span>x</span><span>|</span><span> </span><span>x</span><span>.</span><span>id</span><span> </span><span>!=</span><span> </span><span>id</span><span>);</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>fn</span> <span>toggle</span><span>(</span><span>&amp;</span><span>mut</span><span> </span><span>self</span><span>,</span><span> </span><span>id</span>: <span>i32</span><span>)</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>entry</span><span> </span><span>=</span><span> </span><span>self</span><span>.</span><span>items</span><span>.</span><span>iter_mut</span><span>().</span><span>find</span><span>(</span><span>|</span><span>x</span><span>|</span><span> </span><span>x</span><span>.</span><span>id</span><span> </span><span>==</span><span> </span><span>id</span><span>).</span><span>unwrap</span><span>();</span><span>
</span></span></span><span><span><span>        </span><span>entry</span><span>.</span><span>completed</span><span> </span><span>=</span><span> </span><span>!</span><span>entry</span><span>.</span><span>completed</span><span>;</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></div><p>…some more business logic:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>impl</span><span> </span><span>RustState</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>fn</span> <span>new</span><span>()</span><span> </span>-&gt; <span>Self</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>Self</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>items</span>: <span>vec</span><span>!</span><span>[],</span><span>
</span></span></span><span><span><span>            </span><span>input_text</span>: <span>""</span><span>.</span><span>to_string</span><span>(),</span><span>
</span></span></span><span><span><span>            </span><span>filter</span>: <span>Filter</span>::<span>All</span><span>,</span><span>
</span></span></span><span><span><span>            </span><span>next_id</span>: <span>0</span><span>,</span><span>
</span></span></span><span><span><span>            </span><span>base_state</span>: <span>Default</span>::<span>default</span><span>(),</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    </span><span>pub</span><span> </span><span>fn</span> <span>filtered_items</span><span>(</span><span>&amp;</span><span>self</span><span>)</span><span> </span>-&gt; <span>Vec</span><span>&lt;</span><span>Item</span><span>&gt;</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>self</span><span>.</span><span>items</span><span>.</span><span>iter</span><span>().</span><span>filter</span><span>(</span><span>|</span><span>x</span><span>|</span><span> </span><span>self</span><span>.</span><span>filter</span><span>.</span><span>check</span><span>(</span><span>x</span><span>)).</span><span>cloned</span><span>().</span><span>collect</span><span>()</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>impl</span><span> </span><span>Filter</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>fn</span> <span>check</span><span>(</span><span>&amp;</span><span>self</span><span>,</span><span> </span><span>item</span>: <span>&amp;</span><span>Item</span><span>)</span><span> </span>-&gt; <span>bool</span> <span>{</span><span>
</span></span></span><span><span><span>        </span><span>match</span><span> </span><span>self</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>Self</span>::<span>All</span><span> </span><span>=&gt;</span><span> </span><span>true</span><span>,</span><span>
</span></span></span><span><span><span>            </span><span>Self</span>::<span>Active</span><span> </span><span>=&gt;</span><span> </span><span>!</span><span>item</span><span>.</span><span>completed</span><span>,</span><span>
</span></span></span><span><span><span>            </span><span>Self</span>::<span>Completed</span><span> </span><span>=&gt;</span><span> </span><span>item</span><span>.</span><span>completed</span><span>,</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>    </span><span>}</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></div><p>…and the UI. It is a plain translation of “I want a column of things, the first one is a text field, second one is a list view, etc”, and looks similar to other UI DSLs:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>Widget</span><span> </span><span>body</span><span>(</span><span>RustState</span><span> </span><span>state</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>[</span><span>
</span></span></span><span><span><span>  </span><span>SyncTextField</span><span>(</span><span>
</span></span></span><span><span><span>    </span><span>decoration</span>: <span>InputDecoration</span><span>(</span><span>hintText</span>: <span>'Input</span> <span>text</span><span> </span><span>and</span><span> </span><span>enter</span><span> </span><span>to</span><span> </span><span>add</span><span> </span><span>a</span><span> </span><span>todo</span><span>'</span><span>),</span><span>
</span></span></span><span><span><span>    </span><span>text</span>: <span>state</span><span>.</span><span>inputText</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>onChanged</span>: <span>(</span><span>text</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>state</span><span>.</span><span>inputText</span><span> </span><span>=</span><span> </span><span>text</span><span>,</span><span>
</span></span></span><span><span><span>    </span><span>onSubmitted</span>: <span>(</span><span>_</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>state</span><span>.</span><span>add</span><span>(),</span><span>
</span></span></span><span><span><span>  </span><span>),</span><span>
</span></span></span><span><span><span>  </span><span>ListView</span><span>(</span><span>children</span>: <span>[</span><span>
</span></span></span><span><span><span>    </span><span>for</span><span> </span><span>(</span><span>final</span><span> </span><span>item</span><span> </span><span>in</span><span> </span><span>state</span><span>.</span><span>filteredItems</span><span>())</span><span> </span><span>todoItem</span><span>(</span><span>state</span><span>,</span><span> </span><span>item</span><span>)</span><span>
</span></span></span><span><span><span>  </span><span>]).</span><span>expanded</span><span>(),</span><span>
</span></span></span><span><span><span>  </span><span>[</span><span>
</span></span></span><span><span><span>    </span><span>for</span><span> </span><span>(</span><span>final</span><span> </span><span>filter</span><span> </span><span>in</span><span> </span><span>Filter</span><span>.</span><span>values</span><span>)</span><span>
</span></span></span><span><span><span>      </span><span>TextButton</span><span>(</span><span>
</span></span></span><span><span><span>        </span><span>onPressed</span>: <span>()</span><span> </span><span>=&gt;</span><span> </span><span>state</span><span>.</span><span>filter</span><span> </span><span>=</span><span> </span><span>filter</span><span>,</span><span>
</span></span></span><span><span><span>        </span><span>child</span>: <span>Text</span><span>(</span><span>filter</span><span>.</span><span>name</span><span>).</span><span>textColor</span><span>(</span><span>state</span><span>.</span><span>filter</span><span> </span><span>==</span><span> </span><span>filter</span><span> </span><span>?</span><span> </span><span>Colors</span><span>.</span><span>blue</span><span> </span>: <span>Colors</span><span>.</span><span>black87</span><span>),</span><span>
</span></span></span><span><span><span>      </span><span>),</span><span>
</span></span></span><span><span><span>  </span><span>].</span><span>toRow</span><span>(),</span><span>
</span></span></span><span><span><span></span><span>].</span><span>toColumn</span><span>().</span><span>padding</span><span>(</span><span>all</span>: <span>16</span><span>);</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>Widget</span><span> </span><span>todoItem</span><span>(</span><span>RustState</span><span> </span><span>state</span><span>,</span><span> </span><span>Item</span><span> </span><span>item</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>[</span><span>
</span></span></span><span><span><span>  </span><span>Checkbox</span><span>(</span><span>value</span>: <span>item</span><span>.</span><span>completed</span><span>,</span><span> </span><span>onChanged</span>: <span>(</span><span>_</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>state</span><span>.</span><span>toggle</span><span>(</span><span>id</span>: <span>item</span><span>.</span><span>id</span><span>)),</span><span>
</span></span></span><span><span><span>  </span><span>Text</span><span>(</span><span>item</span><span>.</span><span>content</span><span>).</span><span>expanded</span><span>(),</span><span>
</span></span></span><span><span><span>  </span><span>IconButton</span><span>(</span><span>icon</span>: <span>Icon</span><span>(</span><span>Icons</span><span>.</span><span>close</span><span>),</span><span> </span><span>onPressed</span>: <span>()</span><span> </span><span>=&gt;</span><span> </span><span>state</span><span>.</span><span>remove</span><span>(</span><span>id</span>: <span>item</span><span>.</span><span>id</span><span>)),</span><span>
</span></span></span><span><span><span></span><span>].</span><span>toRow</span><span>();</span><span>
</span></span></span></code></pre></div><p>(For full code directory, please refer to the end of article.)</p></details><h2 id="conclusion">Conclusion <span><a href="#conclusion" aria-label="Anchor">#</a></span></h2><p>In summary, we see how Flutter can be used when we want to write Rust program that needs a GUI. Feel free to ping me (I check GitHub inbox most frequently) if there are any questions!</p><h2 id="appendix-full-code-and-detailed-commands">Appendix: Full code and detailed commands <span><a href="#appendix-full-code-and-detailed-commands" aria-label="Anchor">#</a></span></h2><p>Full code is in <code>frb_example/rust_ui_counter</code> and <code>frb_example/rust_ui_todo_list</code> of <a href="https://github.com/fzyzcjy/flutter_rust_bridge" target="_blank" rel="noreferrer">https://github.com/fzyzcjy/flutter_rust_bridge</a>. Most are auto-generated boilerplate files (since Flutter has a lot of features), and the interesting files are merely <code>src/app.rs</code> and <code>ui/lib/main.dart</code>. To run the demo, enter <code>ui</code> directory and execute <code>flutter_rust_bridge_codegen generate &amp;&amp; flutter run</code>.</p></div></article></div>]]></description>
        </item>
    </channel>
</rss>