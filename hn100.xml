<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 21 Nov 2024 00:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Google stops letting sites like Forbes rule search for "Best CBD Gummies" (114 pts)]]></title>
            <link>https://arstechnica.com/gadgets/2024/11/google-cracks-down-on-parasite-seo-punishing-established-publishers/</link>
            <guid>42198115</guid>
            <pubDate>Wed, 20 Nov 2024 21:07:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/gadgets/2024/11/google-cracks-down-on-parasite-seo-punishing-established-publishers/">https://arstechnica.com/gadgets/2024/11/google-cracks-down-on-parasite-seo-punishing-established-publishers/</a>, See on <a href="https://news.ycombinator.com/item?id=42198115">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          
          
<p>Under the strength of Forbes' long-existing and well-linked site, Forbes Marketplace/Advisor has dominated the search term "best cbd gummies" for "an eternity," <a href="https://x.com/lilyraynyc/status/1859262396130336911">according to SEO analyst Lily Ray</a>. Forbes has similarly dominated "best pet insurance," and long came up as the second result for "how to get rid of roaches," as <a href="https://larslofgren.com/forbes-marketplace/">detailed in a blog post by Lars Lofgren</a>. If people click on this high-ranking result, and then click on a link to buy a product or request a roach removal consultation, Forbes typically gets a cut.</p>
<p>Forbes Marketplace had seemingly also provided SEO-minded review services to CNN and USA Today, as <a href="https://larslofgren.com/cnn-usa-today-forbes-marketplace/">detailed by Lofgren</a>. Lofgren's term for this business, "Parasite SEO," took hold in corners critical of the trend. Ars has contacted Forbes for comment and will update this post with response.</p>
<h2>“The unfair, exploitative nature” of “parasite SEO”</h2>
<p>Google writes that it had reviewed "situations where there might be varying degrees of first-party involvement" (most publishers' review sites indicate some kind of oversight or editorial standards linked to the primary site). But however arranged, "no amount of first-party involvement alters the fundamental third-party nature of the content or the unfair, exploitative nature of attempting to take advantage of the host sites' ranking signals."</p>
<p>As such, using third-party content in such a way as to take advantage of a high search quality ranking, outside the site's primary focus, is considered spam. That delivers a major hit to a site's Google ranking, and the impact is already being felt.</p>
<p>The SEO reordering does not affect more established kinds of third-party content, like wire service reports, syndication, or well-marked sponsored content, as detailed in Google's spam policy <a href="https://developers.google.com/search/docs/essentials/spam-policies#site-reputation">section about site reputation abuse</a>. As seen on the <a href="https://www.reddit.com/r/SEO">SEO subreddit</a>, and on social media, Google has given sites running afoul of its updated policy a "<a href="https://support.google.com/webmasters/answer/9044175?hl=en-NA">Manual Action</a>" rather than relying only on its algorithm to catch the often opaque arrangements.</p>


          
                  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SQL, Homomorphisms and Constraint Satisfaction Problems (104 pts)]]></title>
            <link>https://www.philipzucker.com/sql_graph_csp/</link>
            <guid>42195994</guid>
            <pubDate>Wed, 20 Nov 2024 17:07:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.philipzucker.com/sql_graph_csp/">https://www.philipzucker.com/sql_graph_csp/</a>, See on <a href="https://news.ycombinator.com/item?id=42195994">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <p>Database queries are a pretty surprisingly powerful tool that can solve seemingly intractable problems.</p>

<p>It is a fun coding challenge to do things in SQL. I’ve seen people solve sudokus or do <a href="https://github.com/mitchellh/advent-2021-sql">advent of code</a>, or you can build a datalog on SQL with a little metaprogramming (maybe even fully internally). It is also possible to build a <a href="https://github.com/awto/chr2sql">CHR (constraint handling rules) system on SQL</a> or a graph rewriting system on SQL. Here I talk about how one can use SQL queries to do graph instruction matching <a href="https://www.philipzucker.com/imatch-datalog/">https://www.philipzucker.com/imatch-datalog/</a> .</p>

<p>SQL is a feature rich language, it is not surprising that you can do these things from that perspective, using this and that odd feature. But even the simple idealized “SELECT FROM WHERE” core of SQL has a lot of power.</p>

<p>From a logical perspective, this core is basically conjunctive queries <a href="https://en.wikipedia.org/wiki/Conjunctive_query#Relationship_to_other_query_languages">https://en.wikipedia.org/wiki/Conjunctive_query#Relationship_to_other_query_languages</a> . Each table is a logical predicate, each variable is bound to a row of a column. The SELECT fields are bits that aren’t being existentially bound and therefore hidden, aka free variables.</p>

<p>$\exists y. edge(x,y) \land path(y,z)$ is the predicate form of the query <code>SELECT edge.a, path.b from edge, path WHERE edge.b = path.a</code>. There is a little bit of rearrangement from the entry centric view of predicates to the row centric view of SQL. I am not aware of a way to easily give a name to a particular entry in sql. I used this correspondence to describe how to either build a datalog engine on sql, or hand compile your datalog rules to sql <a href="https://www.philipzucker.com/tiny-sqlite-datalog/">https://www.philipzucker.com/tiny-sqlite-datalog/</a> .</p>

<h2 id="sql-loops-and-csp">SQL, Loops, and CSP</h2>

<p>From a more imperative perspective, SELECT-FROM-WHERE statements are basically for loops. SQL is an odd language in that the FROM comes after the SELECT. This puts a row variables binding site after their usage points. Maybe this isn’t <em>that</em> crazy considering set comprehension <code>{x for x in A if x &gt; 0}</code> is quite similar.</p>

<table>
  <tbody>
    <tr>
      <td>SQL</td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code>FROM mytable as row_a</code></td>
      <td><code>for row_a in mytable:</code></td>
    </tr>
    <tr>
      <td><code>WHERE row_a.col1 = rowa.col2</code></td>
      <td><code>if row_a.col1 == row_a.col2:</code></td>
    </tr>
    <tr>
      <td><code>SELECT row_a.col1, row_a.col2</code></td>
      <td><code>yield row_a.col1, row_a.col2</code></td>
    </tr>
  </tbody>
</table>

<p>A thing SQL engines do is that they rearrange and optimize these loops and refactor them into joins and other things. Python for loops however execute just like you say it (slowly).</p>

<p>Search problems over finite spaces can be solved by brute force loops. Enumerate all possibilities and take the ones that work.</p>

<p>So in this manner SQL is a constraint solver.</p>

<p>An example constraint satisfaction puzzle is the send more money puzzle <a href="https://en.wikipedia.org/wiki/Verbal_arithmetic">https://en.wikipedia.org/wiki/Verbal_arithmetic</a> in which we need to find digits <code>S,E,N,D,M,O,R,Y</code> such that <code>SEND + MORE = MONEY</code>.
A pure python version of the send more money puzzle with simplistic pruning is</p>

<div><pre><code><span>def</span> <span>solve_send_money</span><span>():</span>
    <span>for</span> <span>s</span> <span>in</span> <span>range</span><span>(</span><span>1</span><span>,</span> <span>10</span><span>):</span>  <span># S must be non-zero
</span>        <span>for</span> <span>e</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
            <span>if</span> <span>e</span> <span>==</span> <span>s</span><span>:</span>
                <span>continue</span>
            <span>for</span> <span>n</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                <span>if</span> <span>n</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>):</span>
                    <span>continue</span>
                <span>for</span> <span>d</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                    <span>if</span> <span>d</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>):</span>
                        <span>continue</span>
                    <span>for</span> <span>m</span> <span>in</span> <span>range</span><span>(</span><span>1</span><span>,</span> <span>10</span><span>):</span>  <span># M must be non-zero
</span>                        <span>if</span> <span>m</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>,</span> <span>d</span><span>):</span>
                            <span>continue</span>
                        <span>for</span> <span>o</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                            <span>if</span> <span>o</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>,</span> <span>d</span><span>,</span> <span>m</span><span>):</span>
                                <span>continue</span>
                            <span>for</span> <span>r</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                                <span>if</span> <span>r</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>,</span> <span>d</span><span>,</span> <span>m</span><span>,</span> <span>o</span><span>):</span>
                                    <span>continue</span>
                                <span>for</span> <span>y</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                                    <span>if</span> <span>y</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>,</span> <span>d</span><span>,</span> <span>m</span><span>,</span> <span>o</span><span>,</span> <span>r</span><span>):</span>
                                        <span>continue</span>
                                    <span># Convert SEND, MORE, and MONEY to integers
</span>                                    <span>send</span> <span>=</span> <span>1000</span> <span>*</span> <span>s</span> <span>+</span> <span>100</span> <span>*</span> <span>e</span> <span>+</span> <span>10</span> <span>*</span> <span>n</span> <span>+</span> <span>d</span>
                                    <span>more</span> <span>=</span> <span>1000</span> <span>*</span> <span>m</span> <span>+</span> <span>100</span> <span>*</span> <span>o</span> <span>+</span> <span>10</span> <span>*</span> <span>r</span> <span>+</span> <span>e</span>
                                    <span>money</span> <span>=</span> <span>10000</span> <span>*</span> <span>m</span> <span>+</span> <span>1000</span> <span>*</span> <span>o</span> <span>+</span> <span>100</span> <span>*</span> <span>n</span> <span>+</span> <span>10</span> <span>*</span> <span>e</span> <span>+</span> <span>y</span>
                                    
                                    <span>if</span> <span>send</span> <span>+</span> <span>more</span> <span>==</span> <span>money</span><span>:</span>
                                        <span>return</span> <span>(</span><span>s</span><span>,</span><span>e</span><span>,</span><span>n</span><span>,</span><span>d</span><span>,</span><span>m</span><span>,</span><span>o</span><span>,</span><span>r</span><span>,</span><span>e</span><span>,</span><span>m</span><span>,</span><span>o</span><span>,</span><span>n</span><span>,</span><span>e</span><span>,</span><span>y</span><span>),</span> <span>send</span><span>,</span> <span>more</span><span>,</span> <span>money</span>

</code></pre></div>

<div><pre><code><span>%%</span><span>timeit</span> 
<span>solve_send_money</span><span>()</span>
</code></pre></div>

<div><pre><code>762 ms ± 35 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre></div>

<h4 id="sql-send-more-money">SQL Send More Money</h4>

<p>We can write the same thing in SQL and execute using duckdb or sqlite. Duckdb is a bit faster and is faster than the pure python version.</p>

<div><pre><code><span>import</span> <span>sqlite3</span>
<span>import</span> <span>duckdb</span>
<span>query</span> <span>=</span> <span>"""
WITH RECURSIVE digits(digit) AS (
    SELECT 0
    UNION ALL
    SELECT digit + 1
    FROM digits
    WHERE digit &lt; 9
)
SELECT s.digit AS S, e.digit AS E, n.digit AS N, d.digit AS D,
       m.digit AS M, o.digit AS O, r.digit AS R, y.digit AS Y
FROM digits s, digits e, digits n, digits d, digits m, digits o, digits r, digits y
WHERE s.digit &lt;&gt; e.digit AND s.digit &lt;&gt; n.digit AND s.digit &lt;&gt; d.digit AND s.digit &lt;&gt; m.digit AND
      s.digit &lt;&gt; o.digit AND s.digit &lt;&gt; r.digit AND s.digit &lt;&gt; y.digit AND
      e.digit &lt;&gt; n.digit AND e.digit &lt;&gt; d.digit AND e.digit &lt;&gt; m.digit AND
      e.digit &lt;&gt; o.digit AND e.digit &lt;&gt; r.digit AND e.digit &lt;&gt; y.digit AND
      n.digit &lt;&gt; d.digit AND n.digit &lt;&gt; m.digit AND n.digit &lt;&gt; o.digit AND
      n.digit &lt;&gt; r.digit AND n.digit &lt;&gt; y.digit AND
      d.digit &lt;&gt; m.digit AND d.digit &lt;&gt; o.digit AND d.digit &lt;&gt; r.digit AND
      d.digit &lt;&gt; y.digit AND
      m.digit &lt;&gt; o.digit AND m.digit &lt;&gt; r.digit AND m.digit &lt;&gt; y.digit AND
      o.digit &lt;&gt; r.digit AND o.digit &lt;&gt; y.digit AND
      r.digit &lt;&gt; y.digit AND
      s.digit &lt;&gt; 0 AND m.digit &lt;&gt; 0 AND
      (1000 * s.digit + 100 * e.digit + 10 * n.digit + d.digit) +
      (1000 * m.digit + 100 * o.digit + 10 * r.digit + e.digit) =
      (10000 * m.digit + 1000 * o.digit + 100 * n.digit + 10 * e.digit + y.digit);
"""</span>
<span>conn</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>
<span>conn</span><span>.</span><span>execute</span><span>(</span><span>query</span><span>).</span><span>fetchall</span><span>()</span>

</code></pre></div>

<div><pre><code>[(9, 5, 6, 7, 1, 0, 8, 2)]
</code></pre></div>

<div><pre><code><span>%%</span><span>timeit</span>
<span>conn</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>
<span>conn</span><span>.</span><span>execute</span><span>(</span><span>query</span><span>).</span><span>fetchone</span><span>()</span>
</code></pre></div>

<div><pre><code>969 ms ± 74.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre></div>

<div><pre><code><span>%%</span><span>timeit</span>
<span>conn</span> <span>=</span> <span>duckdb</span><span>.</span><span>connect</span><span>()</span> <span># not really a noticeable part of benchmark
</span><span>conn</span><span>.</span><span>execute</span><span>(</span><span>query</span><span>).</span><span>fetchone</span><span>()</span>
</code></pre></div>

<div><pre><code>240 ms ± 16.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre></div>

<h4 id="bonus-c-send-more-money">Bonus: C Send More Money</h4>

<p>This does raise the question of comparing to a C version. Quite a bit faster indeed.</p>

<div><pre><code><span>%%</span><span>file</span> <span>/</span><span>tmp</span><span>/</span><span>money</span><span>.</span><span>c</span>
<span>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
</span><span>int</span> <span>main</span><span>()</span> <span>{</span>
    <span>clock_t</span> <span>start_time</span> <span>=</span> <span>clock</span><span>();</span>
    <span>//</span><span>int</span> <span>niter</span> <span>=</span> <span>0</span><span>;</span> <span>Adding</span> <span>this</span> <span>slows</span> <span>clang</span> <span>down</span> <span>quite</span> <span>a</span> <span>bit</span>
    <span>for</span> <span>(</span><span>int</span> <span>s</span> <span>=</span> <span>1</span><span>;</span> <span>s</span> <span>&lt;</span> <span>10</span><span>;</span> <span>s</span><span>++</span><span>)</span> <span>{</span> <span>//</span> <span>S</span> <span>must</span> <span>be</span> <span>non</span><span>-</span><span>zero</span>
        <span>for</span> <span>(</span><span>int</span> <span>e</span> <span>=</span> <span>0</span><span>;</span> <span>e</span> <span>&lt;</span> <span>10</span><span>;</span> <span>e</span><span>++</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span><span>e</span> <span>==</span> <span>s</span><span>)</span> <span>continue</span><span>;</span>
            <span>for</span> <span>(</span><span>int</span> <span>n</span> <span>=</span> <span>0</span><span>;</span> <span>n</span> <span>&lt;</span> <span>10</span><span>;</span> <span>n</span><span>++</span><span>)</span> <span>{</span>
                <span>if</span> <span>(</span><span>n</span> <span>==</span> <span>s</span> <span>||</span> <span>n</span> <span>==</span> <span>e</span><span>)</span> <span>continue</span><span>;</span>
                <span>for</span> <span>(</span><span>int</span> <span>d</span> <span>=</span> <span>0</span><span>;</span> <span>d</span> <span>&lt;</span> <span>10</span><span>;</span> <span>d</span><span>++</span><span>)</span> <span>{</span>
                    <span>if</span> <span>(</span><span>d</span> <span>==</span> <span>s</span> <span>||</span> <span>d</span> <span>==</span> <span>e</span> <span>||</span> <span>d</span> <span>==</span> <span>n</span><span>)</span> <span>continue</span><span>;</span>
                    <span>for</span> <span>(</span><span>int</span> <span>m</span> <span>=</span> <span>1</span><span>;</span> <span>m</span> <span>&lt;</span> <span>10</span><span>;</span> <span>m</span><span>++</span><span>)</span> <span>{</span> <span>//</span> <span>M</span> <span>must</span> <span>be</span> <span>non</span><span>-</span><span>zero</span>
                        <span>if</span> <span>(</span><span>m</span> <span>==</span> <span>s</span> <span>||</span> <span>m</span> <span>==</span> <span>e</span> <span>||</span> <span>m</span> <span>==</span> <span>n</span> <span>||</span> <span>m</span> <span>==</span> <span>d</span><span>)</span> <span>continue</span><span>;</span>
                        <span>for</span> <span>(</span><span>int</span> <span>o</span> <span>=</span> <span>0</span><span>;</span> <span>o</span> <span>&lt;</span> <span>10</span><span>;</span> <span>o</span><span>++</span><span>)</span> <span>{</span>
                            <span>if</span> <span>(</span><span>o</span> <span>==</span> <span>s</span> <span>||</span> <span>o</span> <span>==</span> <span>e</span> <span>||</span> <span>o</span> <span>==</span> <span>n</span> <span>||</span> <span>o</span> <span>==</span> <span>d</span> <span>||</span> <span>o</span> <span>==</span> <span>m</span><span>)</span> <span>continue</span><span>;</span>
                            <span>for</span> <span>(</span><span>int</span> <span>r</span> <span>=</span> <span>0</span><span>;</span> <span>r</span> <span>&lt;</span> <span>10</span><span>;</span> <span>r</span><span>++</span><span>)</span> <span>{</span>
                                <span>if</span> <span>(</span><span>r</span> <span>==</span> <span>s</span> <span>||</span> <span>r</span> <span>==</span> <span>e</span> <span>||</span> <span>r</span> <span>==</span> <span>n</span> <span>||</span> <span>r</span> <span>==</span> <span>d</span> <span>||</span> <span>r</span> <span>==</span> <span>m</span> <span>||</span> <span>r</span> <span>==</span> <span>o</span><span>)</span> <span>continue</span><span>;</span>
                                <span>for</span> <span>(</span><span>int</span> <span>y</span> <span>=</span> <span>0</span><span>;</span> <span>y</span> <span>&lt;</span> <span>10</span><span>;</span> <span>y</span><span>++</span><span>)</span> <span>{</span>
                                    <span>if</span> <span>(</span><span>y</span> <span>==</span> <span>s</span> <span>||</span> <span>y</span> <span>==</span> <span>e</span> <span>||</span> <span>y</span> <span>==</span> <span>n</span> <span>||</span> <span>y</span> <span>==</span> <span>d</span> <span>||</span> <span>y</span> <span>==</span> <span>m</span> <span>||</span> <span>y</span> <span>==</span> <span>o</span> <span>||</span> <span>y</span> <span>==</span> <span>r</span><span>)</span> <span>continue</span><span>;</span>

                                    <span>//</span> <span>Calculate</span> <span>SEND</span><span>,</span> <span>MORE</span><span>,</span> <span>and</span> <span>MONEY</span>
                                    <span>int</span> <span>send</span> <span>=</span> <span>1000</span> <span>*</span> <span>s</span> <span>+</span> <span>100</span> <span>*</span> <span>e</span> <span>+</span> <span>10</span> <span>*</span> <span>n</span> <span>+</span> <span>d</span><span>;</span>
                                    <span>int</span> <span>more</span> <span>=</span> <span>1000</span> <span>*</span> <span>m</span> <span>+</span> <span>100</span> <span>*</span> <span>o</span> <span>+</span> <span>10</span> <span>*</span> <span>r</span> <span>+</span> <span>e</span><span>;</span>
                                    <span>int</span> <span>money</span> <span>=</span> <span>10000</span> <span>*</span> <span>m</span> <span>+</span> <span>1000</span> <span>*</span> <span>o</span> <span>+</span> <span>100</span> <span>*</span> <span>n</span> <span>+</span> <span>10</span> <span>*</span> <span>e</span> <span>+</span> <span>y</span><span>;</span>
                                    <span>//</span><span>niter</span><span>++</span><span>;</span>

                                    <span>if</span> <span>(</span><span>send</span> <span>+</span> <span>more</span> <span>==</span> <span>money</span><span>)</span> <span>{</span>
                                        <span>clock_t</span> <span>end_time</span> <span>=</span> <span>clock</span><span>();</span>
                                        <span>double</span> <span>time_taken</span> <span>=</span> <span>((</span><span>double</span><span>)(</span><span>end_time</span> <span>-</span> <span>start_time</span><span>))</span> <span>/</span> <span>CLOCKS_PER_SEC</span><span>;</span>
                                        <span>printf</span><span>(</span><span>"Time taken by loops: %.6f seconds</span><span>\n</span><span>"</span><span>,</span> <span>time_taken</span><span>);</span>
                                        <span>printf</span><span>(</span><span>"SEND = %d, MORE = %d, MONEY = %d</span><span>\n</span><span>"</span><span>,</span> <span>send</span><span>,</span> <span>more</span><span>,</span> <span>money</span><span>);</span>
                                        <span>//</span><span>printf</span><span>(</span><span>"Tests: %d</span><span>\n</span><span>"</span><span>,</span> <span>niter</span><span>);</span>
                                        <span>return</span> <span>0</span><span>;</span>
                                    <span>}</span>
                                <span>}</span>
                            <span>}</span>
                        <span>}</span>
                    <span>}</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
    <span>return</span> <span>1</span><span>;</span>
<span>}</span>
</code></pre></div>



<div><pre><code><span>!</span> <span>clang</span> <span>-</span><span>O3</span> <span>-</span><span>march</span><span>=</span><span>native</span> <span>-</span><span>o</span> <span>/</span><span>tmp</span><span>/</span><span>money</span> <span>/</span><span>tmp</span><span>/</span><span>money</span><span>.</span><span>c</span> <span>&amp;&amp;</span> <span>/</span><span>tmp</span><span>/</span><span>money</span>
</code></pre></div>

<div><pre><code>Time taken by loops: 0.003991 seconds
SEND = 9567, MORE = 1085, MONEY = 10652
</code></pre></div>

<div><pre><code><span>!</span> <span>gcc</span> <span>-</span><span>O3</span> <span>-</span><span>march</span><span>=</span><span>native</span> <span>-</span><span>o</span> <span>/</span><span>tmp</span><span>/</span><span>money</span> <span>/</span><span>tmp</span><span>/</span><span>money</span><span>.</span><span>c</span> <span>&amp;&amp;</span> <span>/</span><span>tmp</span><span>/</span><span>money</span>
</code></pre></div>

<div><pre><code>Time taken by loops: 0.019185 seconds
SEND = 9567, MORE = 1085, MONEY = 10652
</code></pre></div>

<p>Hmm. My system clang vs gcc is another 5x? That’s kind of surprising. I have a new clang (20) and an old gcc 11.4. Maybe that’s enough. The thing also that it may be rearranging the loops? If I try to add a counter, clang slows down to about gcc. Very interesting.</p>

<h2 id="relation-and-graph-homomorphisms">Relation and Graph Homomorphisms</h2>

<p>There is another perspective on what SQL is doing. It is finding a mapping (a <a href="https://en.wikipedia.org/wiki/Homomorphism">homomorphism</a>) between the query and the database.</p>

<p>We have intuition about databases that comes from typically thinking about small queries (&lt; 100 tables referenced in FROM statements) and big databases (millions, billions or more of rows).</p>

<p>The running time of naive nested loops is exponential in the number of loops. Considered as a function of the size the of query, database queries are quite computationally expensive.</p>

<p><a href="https://en.wikipedia.org/wiki/Graph_homomorphism">Graph homomorphisms</a> are a particular familiar case of a homomorphism. Graphs can be easily mapped into database tables as an edge table with two columns.</p>

<p>I have heard that I should be scared of <a href="https://en.wikipedia.org/wiki/Subgraph_isomorphism_problem">subgraph matching</a> or <a href="https://en.wikipedia.org/wiki/Graph_isomorphism">graph isomorphism</a> because they are NP ish. But in many common cases, the size of the patterns is pretty small, and the size of the database is pretty big. So the problem is not that hard.</p>

<p>Here for example I can turn a networkx graph into a sqlite table</p>

<div><pre><code><span>import</span> <span>sqlite3</span>
<span>import</span> <span>networkx</span> <span>as</span> <span>nx</span>
<span>def</span> <span>db_of_graph</span><span>(</span><span>conn</span><span>,</span> <span>G</span><span>):</span>
    <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO nodes VALUES (?)"</span><span>,</span> <span>map</span><span>(</span><span>lambda</span> <span>v</span> <span>:</span> <span>(</span><span>v</span><span>,),</span>  <span>G</span><span>.</span><span>nodes</span><span>))</span>
    <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO edges VALUES (?, ?)"</span><span>,</span> <span>G</span><span>.</span><span>edges</span><span>)</span>
    <span>if</span> <span>not</span> <span>G</span><span>.</span><span>is_directed</span><span>():</span>
        <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO edges VALUES (?, ?)"</span><span>,</span> <span>[(</span><span>j</span><span>,</span><span>i</span><span>)</span> <span>for</span> <span>i</span><span>,</span><span>j</span> <span>in</span> <span>G</span><span>.</span><span>edges</span><span>])</span>
</code></pre></div>

<p>And conversely export the edge table back out into a networkx graph.</p>

<div><pre><code><span>def</span> <span>graph_of_db</span><span>(</span><span>con</span><span>):</span>
    <span>G</span> <span>=</span> <span>nx</span><span>.</span><span>DiGraph</span><span>()</span>
    <span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM nodes"</span><span>)</span>
    <span>G</span><span>.</span><span>add_nodes_from</span><span>(</span><span>map</span><span>(</span><span>lambda</span> <span>x</span><span>:</span> <span>x</span><span>[</span><span>0</span><span>],</span> <span>res</span><span>.</span><span>fetchall</span><span>()))</span>
    <span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM edges"</span><span>)</span>
    <span>G</span><span>.</span><span>add_edges_from</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
    <span>return</span> <span>G</span>
</code></pre></div>

<p>The form of these simple <code>FROM-SELECT-WHERE</code> queries (conjuctive queries) is remarkably similar to a database itself, but with symbolic entries. Each FROM would become a row in this symbolic database. We can for example convert a graph also into a query that will find the image of the graph in the database. The solutions to this query are graph homomorphisms. When codegenning SQL I find maintaining separate <code>select</code> <code>from</code> <code>where</code> lists to be a useful thing.</p>

<div><pre><code><span>def</span> <span>query_of_graph</span><span>(</span><span>G</span><span>,</span><span>unique</span><span>=</span><span>False</span><span>):</span>
    <span>"""Unique will give subgraph isomorphism"""</span>
    <span>selects</span> <span>=</span> <span>[]</span>
    <span>froms</span> <span>=</span> <span>[]</span>
    <span>wheres</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>node</span> <span>in</span> <span>G</span><span>:</span>
        <span>froms</span> <span>+=</span> <span>[</span><span>f</span><span>"nodes AS v</span><span>{</span><span>node</span><span>}</span><span>"</span><span>]</span>
        <span>selects</span> <span>+=</span> <span>[</span><span>f</span><span>"v</span><span>{</span><span>node</span><span>}</span><span>.v AS v</span><span>{</span><span>node</span><span>}</span><span>"</span><span>]</span>
    <span>for</span> <span>i</span><span>,</span> <span>(</span><span>a</span><span>,</span><span>b</span><span>)</span> <span>in</span> <span>enumerate</span><span>(</span><span>G</span><span>.</span><span>edges</span><span>):</span>
        <span>froms</span> <span>+=</span> <span>[</span><span>f</span><span>"edges as e</span><span>{</span><span>i</span><span>}</span><span>"</span><span>]</span>
        <span>wheres</span> <span>+=</span> <span>[</span><span>f</span><span>"e</span><span>{</span><span>i</span><span>}</span><span>.src = v</span><span>{</span><span>a</span><span>}</span><span>.v"</span>  <span>,</span> <span>f</span><span>"e</span><span>{</span><span>i</span><span>}</span><span>.dst = v</span><span>{</span><span>b</span><span>}</span><span>.v"</span><span>]</span>
    <span>if</span> <span>unique</span><span>:</span>
        <span>for</span> <span>node</span> <span>in</span> <span>G</span><span>:</span>
            <span>for</span> <span>node2</span> <span>in</span> <span>G</span><span>:</span>
                <span>if</span> <span>node</span> <span>!=</span> <span>node2</span><span>:</span>
                    <span>wheres</span> <span>+=</span> <span>[</span><span>f</span><span>"v</span><span>{</span><span>node</span><span>}</span><span> != v</span><span>{</span><span>node2</span><span>}</span><span>"</span><span>]</span>
    <span>sql</span> <span>=</span> <span>"SELECT "</span> <span>+</span> <span>", "</span><span>.</span><span>join</span><span>(</span><span>selects</span><span>)</span> <span>+</span> \
          <span>"</span><span>\n</span><span>FROM "</span> <span>+</span>  <span>", "</span><span>.</span><span>join</span><span>(</span><span>froms</span><span>)</span> <span>+</span> \
          <span>"</span><span>\n</span><span>WHERE "</span> <span>+</span> <span>" AND "</span><span>.</span><span>join</span><span>(</span><span>wheres</span><span>)</span>
    <span>return</span> <span>sql</span>
<span>def</span> <span>clear_db</span><span>(</span><span>con</span><span>):</span>
    <span>con</span><span>.</span><span>execute</span><span>(</span><span>"DELETE FROM nodes"</span><span>)</span>
    <span>con</span><span>.</span><span>execute</span><span>(</span><span>"DELETE FROM edges"</span><span>)</span>
<span>con</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"CREATE TABLE nodes(v)"</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"CREATE TABLE edges(src,dst)"</span><span>)</span>
</code></pre></div>

<div><pre><code>&lt;sqlite3.Cursor at 0x7b99507714c0&gt;
</code></pre></div>

<h4 id="some-examples">Some Examples</h4>

<p>We can make a graph and insert the appropriate edge table into the database.</p>

<div><pre><code><span>G</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>7</span><span>,</span> <span>create_using</span><span>=</span><span>nx</span><span>.</span><span>DiGraph</span><span>)</span>
<span>nx</span><span>.</span><span>draw</span><span>(</span><span>G</span><span>,</span> <span>with_labels</span><span>=</span><span>True</span><span>)</span>
</code></pre></div>

<p><img src="https://www.philipzucker.com/pynb/2024-11-18-sql_graph_csp_files/2024-11-18-sql_graph_csp_19_0.png" alt="png"></p>

<div><pre><code><span>db_of_graph</span><span>(</span><span>con</span><span>,</span> <span>G</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * from edges"</span><span>).</span><span>fetchall</span><span>()</span>
</code></pre></div>

<div><pre><code>[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]
</code></pre></div>

<p>We can seek out the smaller pattern graph from the larger graph</p>

<div><pre><code><span>lhs</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>3</span><span>,</span> <span>create_using</span><span>=</span><span>nx</span><span>.</span><span>DiGraph</span><span>)</span>
<span>nx</span><span>.</span><span>draw</span><span>(</span><span>lhs</span><span>,</span> <span>with_labels</span><span>=</span><span>True</span><span>)</span>
</code></pre></div>

<p><img src="https://www.philipzucker.com/pynb/2024-11-18-sql_graph_csp_files/2024-11-18-sql_graph_csp_22_0.png" alt="png"></p>

<div><pre><code><span>print</span><span>(</span><span>query_of_graph</span><span>(</span><span>lhs</span><span>))</span>
</code></pre></div>

<div><pre><code>SELECT v0.v AS v0, v1.v AS v1, v2.v AS v2
FROM nodes AS v0, nodes AS v1, nodes AS v2, edges as e0, edges as e1
WHERE e0.src = v0.v AND e0.dst = v1.v AND e1.src = v1.v AND e1.dst = v2.v
</code></pre></div>

<div><pre><code><span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>lhs</span><span>)).</span><span>fetchall</span><span>()</span>
</code></pre></div>

<div><pre><code>[(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]
</code></pre></div>

<h4 id="automorphisms">Automorphisms</h4>

<p>We can also find all homomorphisms of the graph into itself, of which there is only one for the directed graph.</p>

<div><pre><code><span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>)).</span><span>fetchall</span><span>()</span>
</code></pre></div>



<p>For the undirected graph, there are more homomorphisms.</p>

<div><pre><code><span>clear_db</span><span>(</span><span>con</span><span>)</span>
<span>G</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>4</span><span>)</span> <span># undirected
</span><span>db_of_graph</span><span>(</span><span>con</span><span>,</span> <span>G</span><span>)</span>
<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>))</span>
<span>res</span><span>.</span><span>fetchall</span><span>()</span>

</code></pre></div>

<div><pre><code>[(1, 0, 1, 0),
 (1, 0, 1, 2),
 (0, 1, 0, 1),
 (0, 1, 2, 1),
 (0, 1, 2, 3),
 (2, 1, 0, 1),
 (2, 1, 2, 1),
 (2, 1, 2, 3),
 (1, 2, 1, 0),
 (1, 2, 1, 2),
 (1, 2, 3, 2),
 (3, 2, 1, 0),
 (3, 2, 1, 2),
 (3, 2, 3, 2),
 (2, 3, 2, 1),
 (2, 3, 2, 3)]
</code></pre></div>

<p>A homomorphism into yourself is not an isomorphism. You need a uniqueness constraint also for that, which can easily be expressed in SQL. The undirected path graph has 2 automorphisms, the identity and the reversal.</p>

<div><pre><code><span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>,</span><span>unique</span><span>=</span><span>True</span><span>))</span>
<span>res</span><span>.</span><span>fetchall</span><span>()</span>
</code></pre></div>

<div><pre><code>[(0, 1, 2, 3), (3, 2, 1, 0)]
</code></pre></div>

<h4 id="graph-coloring">Graph Coloring</h4>

<p>We can also implement a coloring as an homomorphism into the fully connected graph, representing the colors and allowed edges between colors.</p>

<div><pre><code><span>clear_db</span><span>(</span><span>con</span><span>)</span>
<span>colors</span> <span>=</span> <span>nx</span><span>.</span><span>complete_graph</span><span>(</span><span>2</span><span>)</span> <span># a two coloring graph
</span><span>db_of_graph</span><span>(</span><span>con</span><span>,</span><span>colors</span><span>)</span>
<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM edges"</span><span>)</span>
<span>res</span> <span>=</span> <span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
</code></pre></div>



<div><pre><code><span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>))</span> <span># two dimer colorings
</span><span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
</code></pre></div>

<div><pre><code>[(1, 0, 1, 0), (0, 1, 0, 1)]
</code></pre></div>

<h2 id="bits-and-bobbles">Bits and Bobbles</h2>

<p>Try it out on colab: <a href="https://colab.research.google.com/github/philzook58/philzook58.github.io/blob/master/pynb/2024-11-18-sql_graph_csp.ipynb">https://colab.research.google.com/github/philzook58/philzook58.github.io/blob/master/pynb/2024-11-18-sql_graph_csp.ipynb</a></p>

<p>Hacker news comments. <a href="https://news.ycombinator.com/item?id=42195994">https://news.ycombinator.com/item?id=42195994</a>
<code>babel_</code> points out that clang vs gcc is due to autovectorization <a href="https://godbolt.org/z/xfdxGvMYP">https://godbolt.org/z/xfdxGvMYP</a></p>

<p><a href="https://dl.acm.org/doi/pdf/10.1145/335168.335209">https://dl.acm.org/doi/pdf/10.1145/335168.335209</a> Constraint Satisfaction and Database Theory: a Tutorial Moshe Y. Vardi</p>

<p><a href="https://users.soe.ucsc.edu/~kolaitis/talks/csp-oxford.pdf">https://users.soe.ucsc.edu/~kolaitis/talks/csp-oxford.pdf</a>  Constraint Satisfaction and Logic Phokion G. Kolaitis</p>

<p><a href="https://berkeley-cs294-248.github.io/">https://berkeley-cs294-248.github.io/</a>  CS294-248: Topics in Database Theory</p>

<p>Alice book <a href="http://webdam.inria.fr/Alice/">http://webdam.inria.fr/Alice/</a> Foundations of Databases. I know there is some discussion of query containment involvinf something like a “symbolic” database corresponding to a query.</p>

<p>Have you tried rubbing a database on it? <a href="https://www.hytradboi.com/">https://www.hytradboi.com/</a> Databases used for sometimes unusual purposes</p>

<p><a href="https://www.youtube.com/watch?v=mykR7mP5Zdk&amp;t=269s&amp;ab_channel=SimonsInstitute">https://www.youtube.com/watch?v=mykR7mP5Zdk&amp;t=269s&amp;ab_channel=SimonsInstitute</a>  Logic and Databases Phokion Kolaitis</p>

<p><a href="https://dl.acm.org/doi/10.1145/3018882.3018893">https://dl.acm.org/doi/10.1145/3018882.3018893</a> Language-integrated query with ordering, grouping and outer joins  <a href="https://okmij.org/ftp/meta-programming/index.html#SQUR">https://okmij.org/ftp/meta-programming/index.html#SQUR</a><br>
It is also noted that moanadic comprehension can do sql stuf <a href="https://ncatlab.org/nlab/files/WadlerMonads.pdf">https://ncatlab.org/nlab/files/WadlerMonads.pdf</a> <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/monad_comprehensions.html">https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/monad_comprehensions.html</a> <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/generalised_list_comprehensions.html#generalised-list-comprehensions">https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/generalised_list_comprehensions.html#generalised-list-comprehensions</a> <a href="https://dl.acm.org/doi/10.1145/2034675.2034678">https://dl.acm.org/doi/10.1145/2034675.2034678</a>
LINQ is a whole thing</p>

<p>Note newtorkx has its own homomorphism and ismorphisms functionality. Going to SQl may or may not be more efficient. <a href="https://networkx.org/documentation/stable/reference/algorithms/isomorphism.html">https://networkx.org/documentation/stable/reference/algorithms/isomorphism.html</a> <a href="https://networkx.org/documentation/stable/reference/algorithms/isomorphism.vf2.html#graph-matcher">https://networkx.org/documentation/stable/reference/algorithms/isomorphism.vf2.html#graph-matcher</a> Everything has bindings to sqlite though. Pretty convenient and flexible.
<a href="https://pallini.di.uniroma1.it/">https://pallini.di.uniroma1.it/</a> nauty and traces are high performance isomorphism / automorphism/ canonization solvers</p>

<p>Query containment. Since you can make a sql query to find homomorphisms, you can check query containment as a sql query itself. Isn’t that fun?</p>

<p>The symbolic database as a herbrand model.</p>

<p>Gra</p>

<p>I’ve never seriously used a graph database, but I kind of can’t see the appeal for this reason. I find pretty often modelling domains as graphs to not actually map that well because I want a notion of ordering.</p>

<p>I really had this one rotting in my draft backlog for a long time. Good to just dump stuff out.</p>

<h2 id="sql-model-check">SQL model check</h2>

<p>SQL is a model checker for first order logic. SQL + something like NOT and EXISTS statements can express any first order logic statement.</p>

<p>Model checking has a connotation of being about temporal logic, or software system checking. But the term itself is talking about literally checking a model satisfies a formula <code>M |= t</code>. Model checking is a general concept that can be applied to any logic with a notion of smenantics.</p>

<p>Model checking is also kind of saying there is a kind of homomorphism between the syntax and semantics.</p>

<p>This is also a confusion that we have in talking about the “complexity” of a logic. The ocmplexity depends on which question we are asking. Are me asking satisfiability or model checking? Satisfiiability is also aasking about the <code>M |= t</code> models question, but it is of the form <code>formula -&gt; option model</code> rather than the form <code>model -&gt; formula -&gt; bool</code>. The moding of the question is different.</p>

<p>When people talk about SAT being NP, they are talking about the satisfiability problem.
When they talk about existential second order logic being NP, they are talking about the model checking problem <a href="https://en.wikipedia.org/wiki/Fagin%27s_theorem">https://en.wikipedia.org/wiki/Fagin%27s_theorem</a> <a href="https://en.wikipedia.org/wiki/Descriptive_complexity_theory">https://en.wikipedia.org/wiki/Descriptive_complexity_theory</a></p>

<p>When people talk about datalog being PSPACE co</p>

<p>Tree decomposition for dynamic programming</p>

<h2 id="sql-query-plans">Sql query plans</h2>

<p>sqlite query plan is basically the same loops <a href="https://www.sqlite.org/eqp.html">https://www.sqlite.org/eqp.html</a> <a href="https://www.sqlite.org/queryplanner-ng.html">https://www.sqlite.org/queryplanner-ng.html</a></p>

<div><pre><code><span>import</span> <span>sqlite3</span>
<span>import</span> <span>duckdb</span>
<span>query</span> <span>=</span> <span>"""
EXPLAIN QUERY PLAN WITH RECURSIVE digits(digit) AS (
    SELECT 0
    UNION ALL
    SELECT digit + 1
    FROM digits
    WHERE digit &lt; 9
)
SELECT s.digit AS S, e.digit AS E, n.digit AS N, d.digit AS D,
       m.digit AS M, o.digit AS O, r.digit AS R, y.digit AS Y
FROM digits s, digits e, digits n, digits d, digits m, digits o, digits r, digits y
WHERE s.digit &lt;&gt; e.digit AND s.digit &lt;&gt; n.digit AND s.digit &lt;&gt; d.digit AND s.digit &lt;&gt; m.digit AND
      s.digit &lt;&gt; o.digit AND s.digit &lt;&gt; r.digit AND s.digit &lt;&gt; y.digit AND
      e.digit &lt;&gt; n.digit AND e.digit &lt;&gt; d.digit AND e.digit &lt;&gt; m.digit AND
      e.digit &lt;&gt; o.digit AND e.digit &lt;&gt; r.digit AND e.digit &lt;&gt; y.digit AND
      n.digit &lt;&gt; d.digit AND n.digit &lt;&gt; m.digit AND n.digit &lt;&gt; o.digit AND
      n.digit &lt;&gt; r.digit AND n.digit &lt;&gt; y.digit AND
      d.digit &lt;&gt; m.digit AND d.digit &lt;&gt; o.digit AND d.digit &lt;&gt; r.digit AND
      d.digit &lt;&gt; y.digit AND
      m.digit &lt;&gt; o.digit AND m.digit &lt;&gt; r.digit AND m.digit &lt;&gt; y.digit AND
      o.digit &lt;&gt; r.digit AND o.digit &lt;&gt; y.digit AND
      r.digit &lt;&gt; y.digit AND
      s.digit &lt;&gt; 0 AND m.digit &lt;&gt; 0 AND
      (1000 * s.digit + 100 * e.digit + 10 * n.digit + d.digit) +
      (1000 * m.digit + 100 * o.digit + 10 * r.digit + e.digit) =
      (10000 * m.digit + 1000 * o.digit + 100 * n.digit + 10 * e.digit + y.digit);
"""</span>
<span>conn</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>
<span>conn</span><span>.</span><span>execute</span><span>(</span><span>query</span><span>).</span><span>fetchall</span><span>()</span>

</code></pre></div>

<div><pre><code>[(3, 0, 0, 'MATERIALIZE digits'),
 (7, 3, 0, 'SETUP'),
 (8, 7, 0, 'SCAN CONSTANT ROW'),
 (21, 3, 0, 'RECURSIVE STEP'),
 (22, 21, 0, 'SCAN digits'),
 (46, 0, 0, 'SCAN s'),
 (50, 0, 0, 'SCAN m'),
 (57, 0, 0, 'SCAN o'),
 (65, 0, 0, 'SCAN n'),
 (76, 0, 0, 'SCAN e'),
 (90, 0, 0, 'SCAN d'),
 (107, 0, 0, 'SCAN r'),
 (127, 0, 0, 'SCAN y')]
</code></pre></div>

<p>Using</p>

<p><code>WITH digits(digit) AS (
    VALUES (0), (1), (2), (3), (4), (5), (6), (7), (8), (9)
)</code> with duckdb was if anything slower that using with recursive.</p>
<h2 id="csp">CSP</h2>

<p>SQL queries are enumerating homomorphisms between the query and the database. This perspective puts the query and the database on smilar footing, which feels odd.</p>

<p>As a subcase of this capability, if the database is holding an edge table and attributes, then a query is a graph homomorphism solver.
If we dymmetrically place two graphs into the database and in a query, we can enumerate isomoprhisms. Isn’t that fun?</p>

<p>Another perspective is that the query is a formula, and the database is a model of the formula.</p>

<p>We are used to small queries and large databases, but this is not a definition</p>

<p>A perspective on what a constraint satisfaction problem is is that is is a homomorphism problem.
For example, graph coloring is a homomorphism from a graph to a complete graph of colors (with no self edges).</p>

<p>Constraint satisfaction is an assignment to variables values frm their domain subject to constraints. The particular connectivty of a problem can be represented by a hypergraph. The target structure represents the domains the variables can take on, and the constraint hyperedges map to a relation representing the constraint.
A class of CSP problems is allowing the connecvtivity graph to vary, while keeping the target (the types of constraints fixed). Is this a useful characterization? Eh. It’s interesting that it ties into other mathemtical topicas.</p>

<p>The naive solution of a constraint satsifaction problem is to just make a big sequence of loops, pruning / breaking with checks that constraint are satisifed. We want to push the checks as high as possible.
This a a very static perspective.
More dynammically, we want to pick the variable ordering inside the choice branches. This is more of a backtracking feel. We do proppagation to disallow subchoices</p>

<p>A problem that is easy to embed into database queries is graph homomomorphism. Queries and databases feel very different, but they are more symettric than you might think.</p>

<p>In typical usage, queries are small and databases are large.
A graph coloring problem can be mdelled as fnding a graph homomorphism into a complete graph. This flips the intuition on it’s head with a large query and small database. Examples like these are better served probably by a constraint satisfaction solver or SAT style techniques.</p>

<p>The middle ground of roughly equal graphs is a graph isomorphism problem. Custom solvers like nauty exist for this case too.</p>

<div><pre><code><span>import</span> <span>sqlite3</span>
<span>import</span> <span>networkx</span> <span>as</span> <span>nx</span>
<span>def</span> <span>db_of_graph</span><span>(</span><span>conn</span><span>,</span> <span>G</span><span>):</span>
    <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO nodes VALUES (?)"</span><span>,</span> <span>map</span><span>(</span><span>lambda</span> <span>v</span> <span>:</span> <span>(</span><span>v</span><span>,),</span>  <span>G</span><span>.</span><span>nodes</span><span>))</span>
    <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO edges VALUES (?, ?)"</span><span>,</span> <span>G</span><span>.</span><span>edges</span><span>)</span>
<span>def</span> <span>graph_of_db</span><span>(</span><span>con</span><span>):</span>
    <span>G</span> <span>=</span> <span>nx</span><span>.</span><span>DiGraph</span><span>()</span>
    <span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM nodes"</span><span>)</span>
    <span>G</span><span>.</span><span>add_nodes_from</span><span>(</span><span>map</span><span>(</span><span>lambda</span> <span>x</span><span>:</span> <span>x</span><span>[</span><span>0</span><span>],</span> <span>res</span><span>.</span><span>fetchall</span><span>()))</span>
    <span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM edges"</span><span>)</span>
    <span>G</span><span>.</span><span>add_edges_from</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
    <span>return</span> <span>G</span>
<span>def</span> <span>query_of_graph</span><span>(</span><span>G</span><span>):</span>
    <span>selects</span> <span>=</span> <span>[]</span>
    <span>froms</span> <span>=</span> <span>[]</span>
    <span>wheres</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>node</span> <span>in</span> <span>G</span><span>:</span>
        <span>froms</span> <span>+=</span> <span>[</span><span>f</span><span>"nodes AS v</span><span>{</span><span>node</span><span>}</span><span>"</span><span>]</span>
        <span>selects</span> <span>+=</span> <span>[</span><span>f</span><span>"v</span><span>{</span><span>node</span><span>}</span><span>.v AS v</span><span>{</span><span>node</span><span>}</span><span>"</span><span>]</span>
    <span>for</span> <span>i</span><span>,</span> <span>(</span><span>a</span><span>,</span><span>b</span><span>)</span> <span>in</span> <span>enumerate</span><span>(</span><span>G</span><span>.</span><span>edges</span><span>):</span>
        <span>froms</span> <span>+=</span> <span>[</span><span>f</span><span>"edges as e</span><span>{</span><span>i</span><span>}</span><span>"</span><span>]</span>
        <span>wheres</span> <span>+=</span> <span>[</span><span>f</span><span>"e</span><span>{</span><span>i</span><span>}</span><span>.src = v</span><span>{</span><span>a</span><span>}</span><span>.v"</span>  <span>,</span> <span>f</span><span>"e</span><span>{</span><span>i</span><span>}</span><span>.dst = v</span><span>{</span><span>b</span><span>}</span><span>.v"</span><span>]</span>
    <span>sql</span> <span>=</span> <span>"SELECT "</span> <span>+</span> <span>", "</span><span>.</span><span>join</span><span>(</span><span>selects</span><span>)</span> <span>+</span> \
          <span>"</span><span>\n</span><span>FROM "</span> <span>+</span>  <span>", "</span><span>.</span><span>join</span><span>(</span><span>froms</span><span>)</span> <span>+</span> \
          <span>"</span><span>\n</span><span>WHERE "</span> <span>+</span> <span>" AND "</span><span>.</span><span>join</span><span>(</span><span>wheres</span><span>)</span>
    <span>return</span> <span>sql</span>
<span>G</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>7</span><span>,</span> <span>create_using</span><span>=</span><span>nx</span><span>.</span><span>DiGraph</span><span>)</span>
<span>lhs</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>3</span><span>,</span> <span>create_using</span><span>=</span><span>nx</span><span>.</span><span>DiGraph</span><span>)</span>
<span>con</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>

<span>con</span><span>.</span><span>execute</span><span>(</span><span>"CREATE TABLE nodes(v)"</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"CREATE TABLE edges(src,dst)"</span><span>)</span>
<span>db_of_graph</span><span>(</span><span>con</span><span>,</span> <span>G</span><span>)</span>
<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>lhs</span><span>))</span>
<span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
<span># Result: [(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]
</span>
<span>print</span><span>(</span><span>graph_of_db</span><span>(</span><span>con</span><span>))</span>
<span>"DELETE FROM nodes WHERE nodes.v = ?"</span>
<span>"DELETE FROM edges where edges.src = ? OR edges.dst = ?"</span>

<span>con</span><span>.</span><span>execute</span><span>(</span><span>"DELETE FROM nodes"</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"DELETE FROM edges"</span><span>)</span>
<span>colors</span> <span>=</span> <span>nx</span><span>.</span><span>complete_graph</span><span>(</span><span>2</span><span>)</span> <span># a two coloring
</span><span>db_of_graph</span><span>(</span><span>con</span><span>,</span><span>colors</span><span>)</span>
<span># symmetrize. Maybe db_of_graph should do this. if not isinstanc(G,nx.DiGraph)
</span><span>con</span><span>.</span><span>execute</span><span>(</span><span>"INSERT INTO edges SELECT edges.dst, edges.src FROM edges"</span><span>)</span>

<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM edges"</span><span>)</span>
<span>res</span> <span>=</span> <span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>))</span>
<span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
<span># [(1, 0, 1, 0, 1, 0, 1), (0, 1, 0, 1, 0, 1, 0)]
</span></code></pre></div>

<p>Graph coloring can be solved through dynamic programming. If we cut up a graph, we only need to know if it can be colored with particular choices at interfaces. Choosing interfaces like this is a graph partitioning problem, but also is a tree decomposition.</p>

<p>One of the things that I found appealing about category theory is that it presents a design methodology to convert things that look graph-like like string diagrams into term-like expresssions of combinators.</p>

<p>Hmm. python-metis is not a thing anymore? Just pip install metis, it works with networkx anyway</p>

<div><pre><code><span>import</span> <span>metis</span>

<span>import</span> <span>networkx</span> <span>as</span> <span>nx</span>
<span>G</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>7</span><span>)</span>
<span>edgecuts</span><span>,</span> <span>parts</span> <span>=</span> <span>metis</span><span>.</span><span>part_graph</span><span>(</span><span>G</span><span>,</span><span>3</span><span>)</span>
<span>print</span><span>(</span><span>edgecuts</span><span>,</span> <span>parts</span><span>)</span>

<span>print</span><span>(</span><span>nx</span><span>.</span><span>community</span><span>.</span><span>kernighan_lin_bisection</span><span>(</span><span>G</span><span>))</span> <span># anneal a cut by node swapping
</span><span>print</span><span>(</span><span>list</span><span>(</span><span>nx</span><span>.</span><span>community</span><span>.</span><span>girvan_newman</span><span>(</span><span>G</span><span>)))</span> <span># remove edges from graph
</span></code></pre></div>

<p>Recursively partition to build query plan (?)</p>

<p>You can build a query plan using these graph partitioners
but also query planners can be used to find partitions / tree decompositions.</p>

<p>There are also custom solvers for this.</p>

<p>graph datastructure</p>

<p><code>[(v1,v2)]</code></p>

<div><pre><code>Node(outs,ins)
= [(outs,ins)]
out, inner , in

</code></pre></div>

<p>dynamic tree decomposition
hyprgraph data structure</p>

  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Undergraduates with family income below $200k will be tuition-free at MIT (246 pts)]]></title>
            <link>https://news.mit.edu/2024/mit-tuition-undergraduates-family-income-1120</link>
            <guid>42195895</guid>
            <pubDate>Wed, 20 Nov 2024 16:59:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.mit.edu/2024/mit-tuition-undergraduates-family-income-1120">https://news.mit.edu/2024/mit-tuition-undergraduates-family-income-1120</a>, See on <a href="https://news.ycombinator.com/item?id=42195895">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
          

            <p>Undergraduates with family income below $200,000 can expect to attend MIT tuition-free starting next fall, thanks to newly expanded financial aid. Eighty percent of American households meet this income threshold.</p><p>And&nbsp;for&nbsp;the 50 percent of American families with income below $100,000, parents can expect to pay nothing at all toward the&nbsp;full cost of their&nbsp;students’ MIT education,&nbsp;which includes tuition as well as housing, dining, fees, and an allowance for books and personal expenses.</p><p>This $100,000 threshold is up from $75,000 this year, while next year’s $200,000 threshold for tuition-free attendance will increase from its current level of $140,000.</p><p>These new steps to enhance MIT’s affordability for students and families are the latest in a long history of efforts by the Institute to free up more resources to make an MIT education as affordable and accessible as possible. Toward that end, MIT has earmarked $167.3 million in need-based financial aid this year for undergraduate students — up some 70 percent from a decade ago.</p><p>“MIT’s distinctive model of education — intense, demanding, and rooted in science and engineering — has profound practical value to our students and to society,” MIT President Sally Kornbluth says. “As the&nbsp;<em>Wall Street Journal&nbsp;</em>recently reported, MIT is better at improving the financial futures of its graduates than any other U.S. college, and&nbsp;<a href="https://www.timeshighereducation.com/student/best-universities/best-universities-graduate-jobs-global-university-employability-ranking" title="https://www.timeshighereducation.com/student/best-universities/best-universities-graduate-jobs-global-university-employability-ranking">the Institute also ranks number one in the world for the employability of its graduates</a>.”&nbsp;</p><p>“The cost of college is a real concern for families across the board,” Kornbluth adds, “and we’re determined to make this transformative educational&nbsp;experience available to the most talented students, whatever their financial circumstances.&nbsp;So, to every student out there who dreams of coming to MIT: Don’t let concerns about cost stand in your way.”</p><p>MIT is&nbsp;<a href="https://sfs.mit.edu/undergraduate-students/the-cost-of-attendance/making-mit-affordable/" title="https://sfs.mit.edu/undergraduate-students/the-cost-of-attendance/making-mit-affordable/">one of only nine colleges</a>&nbsp;in the US that does&nbsp;<em>not</em>&nbsp;consider applicants’ ability to pay as part of its admissions process and that meets the full demonstrated financial need&nbsp;⁠for all undergraduates.&nbsp;MIT does not expect students on aid to take loans, and,&nbsp;unlike many other institutions, MIT does&nbsp;<em>not</em>&nbsp;provide an admissions advantage to the children of alumni or donors. Indeed, 18 percent of current MIT undergraduates are first-generation college students.</p><p>“We believe MIT should be the preeminent destination for the most talented students in the country interested in an education centered on science and technology, and accessible to the best students regardless of their financial circumstances,” says Stu Schmill, MIT’s dean of admissions and student financial services.</p><p>“With the need-based financial aid we provide today, our education is much more affordable now than at any point in the past,” adds Schmill, who graduated from MIT in 1986, “even though the ‘sticker price’ of MIT is higher now than it was when I was an undergraduate.”</p><p>Last year, the median annual cost paid by an MIT undergraduate receiving financial aid was $12,938⁠, allowing 87 percent of students in the Class of 2024 to graduate debt-free. Those who did borrow graduated with median debt of $14,844. At the same time, graduates benefit from the&nbsp;<a href="https://sfs.mit.edu/undergraduate-students/the-cost-of-attendance/return-on-investment/">lifelong&nbsp;value</a> of an MIT degree, with an average starting salary of $126,438 for graduates entering industry, according to MIT’s most recent survey of its graduating students.</p><p>MIT’s endowment — made up of generous gifts made by individual alumni and friends — allows the Institute to provide this level of financial aid, both now and into the future.</p><p>“Today’s announcement is a powerful expression of how much our graduates value their MIT experience,” Kornbluth says, “because our ability to provide financial aid of this scope depends on decades of individual donations to our endowment, from generations of MIT alumni and&nbsp;other&nbsp;friends.&nbsp;In effect, our endowment is an inter-generational gift from past MIT students&nbsp;to the students of today and tomorrow.”</p><p><strong>What MIT families can expect in 2025</strong></p><p>As noted earlier: Starting next fall, for families with income below $100,000, with typical assets, parents can expect to pay nothing for the full cost of attendance, which includes&nbsp;tuition, housing, dining, fees, and allowances for books and personal expenses.</p><p>For families with income from $100,000 to $200,000, with typical assets, parents can expect to pay on a sliding scale from $0 up to a maximum of around $23,970, which is this year’s total cost for MIT housing, dining, fees, and allowances for books and personal expenses.</p><p>Put another way, next year all MIT families with income below $200,000 can expect to contribute well below $27,146, which is the annual average cost for in-state students to attend and live on campus at public universities in the US, according to the&nbsp;<a href="https://educationdata.org/average-cost-of-college#average-total-cost-of-college">Education Data Initiative</a>. And even among families with income above $200,000, many still receive need-based financial aid from MIT, based on their unique financial circumstances. Families can use MIT’s online&nbsp;<a href="https://sfs.mit.edu/undergraduate-students/the-cost-of-attendance/estimate-your-cost/">calculators</a> to estimate the cost of attendance for their specific family.</p><p>This past summer, MIT’s faculty-led Committee on Undergraduate Admissions and Financial Aid was publicly charged by President Kornbluth with undertaking a review of the Institute’s&nbsp;admissions and financial aid policies, to ensure that MIT remains as fully accessible as possible to all students, regardless of their financial circumstances. The steps announced today are the first of these recommendations to be reviewed and adopted.</p>        

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[La Basilica Di San Pietro (118 pts)]]></title>
            <link>https://unlocked.microsoft.com/vatican/</link>
            <guid>42194587</guid>
            <pubDate>Wed, 20 Nov 2024 15:15:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://unlocked.microsoft.com/vatican/">https://unlocked.microsoft.com/vatican/</a>, See on <a href="https://news.ycombinator.com/item?id=42194587">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        


        <!-- Video for checking low power mode. -->
        

        <main id="site-main" tabindex="-1">
            <!-- Switch theme back to the page theme. -->
            

<!-- Start : La Basilica di San Pietro -->
<div id="post-6848">
    
    <div id="block_a82c80c9829cab79891071a035dd5f0a">
                            <p>
                    Making cultural heritage&nbsp;more accessible with AI&nbsp;                </p>
                        
                    </div>









<div id="block_673e62afa30bd">
    

<div id="block_673e62afa2900">
    <p>Photogrammetry, AI, and digital preservation combine to create a digital twin of St. Peter’s Basilica with thousands of images, allowing visitors to explore it in detail from anywhere in the world.</p>
<p>Located in Vatican City, St. Peter’s Basilica is over 400 years old, and is one of the most well-known churches in the world revered for its breathtaking Renaissance and Baroque architecture. Famous architects like Michelangelo and Bernini contributed to the design of the church, which took over 100 years to complete.</p>
<p>Today, <a href="https://virtual.basilicasanpietro.va/" target="_blank" rel="noopener"><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>La Basilica </span></span></span><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>d</span></span></span><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>i San Pietro</span></span></span></a><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>—</span></span>a collaboration between the Vatican, Iconem, and Microsoft—gives everyone full access to Vatican City’s most iconic church via AI-enabled immersive exhibits and an interactive website.</p>
</div>









<div id="block_673e62afa2ef2">
    <h2>Making history</h2>
<p>Taking photos of every detail of a massive historic cathedral and piecing them all together sounds daunting, especially in less than a month, but with AI, it’s possible. Iconem, a leader in digital preservation based in Paris, uses advanced photogrammetry and AI to create 3D replicas of the world’s most famous historic landmarks and archaeologial sites.</p>
<p>Andrea Louis, software engineer and Technical Project Manager at Iconem, found the <span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>La Basilica </span></span></span><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>d</span></span></span><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>i San Pietro</span></span></span> experience stimulating due to its size and complexity, and the many spiritual, artistic, and historical layers involved. Being inside St. Peter’s Basilica gave her and the Iconem team intimate knowledge of the church, which allowed them to develop new ways to bring visitors inside the space.</p>
</div>


</div>









<div id="block_673e62afa7468">
    











<div id="block_598c3703aa7dcec4cc717744e5534f76">
        <blockquote>It’s like an investigation of the 2,000-year history through one unique monument.</blockquote>
                    <div>
                                    <p>Yves Ubelmann</p>
                                                    <p>Founder and CEO of Iconem</p>
                            </div>
                    </div>









<p>To make the <a href="https://virtual.basilicasanpietro.va/" target="_blank" rel="noopener">3D version of St. Peter’s Basilica</a>, the Iconem team took over 400,000 high-resolution images using advanced photogrammetry techniques. They spent three weeks scanning the Basilica using various devices including drones, cameras, and lasers, and Azure processed&nbsp;the massive volume of images collected. This data was&nbsp;securely backed up and stored in Azure&nbsp;Cloud, making it accessible to partners.&nbsp;Iconem then created an ultra-precise 3D model, or a digital twin of the Basilica. AI-generated imagery taken from Iconem’s photogrammetry data enhanced visualization of both the interior and exterior of the Basilica, allowing visitors to explore every intricate detail from anywhere in the world.</p>


</div>









    









<div id="block_673e62afad035">
    

<div id="block_673e62afac80f">
    <h2>Bringing it to life with AI</h2>
<p>Microsoft provided the AI tech needed to process and analyze Iconem’s vast amount of photogrammetry data used to create the <a href="https://virtual.basilicasanpietro.va/" target="_blank" rel="noopener">digital twin of St. Peter’s Basilica</a>. Microsoft’s AI for Good Lab contributed advanced tools that refined the digital twin with millimeter-level accuracy, and used AI to help detect and map structural vulnerabilities like cracks and missing mosaic tiles. The Vatican oversaw the collaboration, ensuring the preservation of the Basilica as a cultural, spiritual, and historically significant site for years to come.</p>
</div>









<div id="block_673e62afaca88">
    <h2>An experience of a lifetime</h2>
<p>In November 2024, ahead of the the 2025 Holy Year Jubilee, both the public exhibition and digital platforms of St. Peter’s Basilica will be available for everyone to see and experience in the Pétros enì exhibit. The Holy Year Jubilee occurs every 25 years as a year of grace and pilgrimage in the Roman Catholic church. During this time, Catholics are encouraged to take a pilgrimage to Rome where they can participate in ceremonies, religious events, and focus on spiritual renewal. “Pilgrims of Hope” is the theme of the 2025 Holy Year Jubilee.</p>
<p>The Pétros enì exhibit will give the 35 million pilgrims in Rome an immersive, in-person experience of a lifetime, and it will also help more than a billion Catholics unable to make the trip feel like they’re in the moment.</p>
</div>












</div>









<div id="block_b4db1ad64661c694e62737353435c2fd">
        <blockquote><span data-teams="true"><span dir="ltr">This project ultimately allows us to rediscover what is fully human and connects everyone.</span></span></blockquote>
                    <div>
                                    <p>Cardinal Mauro Gambetti</p>
                                                    <p>Archpriest of St. Peter’s Basilica </p>
                            </div>
                    </div>






</div>
<!-- End : La Basilica di San Pietro -->


    </main>

    

    
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How good are American roads? (154 pts)]]></title>
            <link>https://www.construction-physics.com/p/how-good-are-american-roads</link>
            <guid>42194327</guid>
            <pubDate>Wed, 20 Nov 2024 14:45:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.construction-physics.com/p/how-good-are-american-roads">https://www.construction-physics.com/p/how-good-are-american-roads</a>, See on <a href="https://news.ycombinator.com/item?id=42194327">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><span>We’re in an era where US infrastructure is getting a lot of attention. We need a lot of </span><a href="https://www.amazon.com/Electrify-Optimists-Playbook-Energy-Future/dp/0262046237" rel="">energy infrastructure for decarbonization</a><span>, and to enable the </span><a href="https://www.construction-physics.com/p/how-to-build-an-ai-data-center" rel="">AI data center buildout</a><span>. There’s lots of interest in building </span><a href="https://www.smartcitiesdive.com/news/us-high-speed-rail-outlook-california-brightline-amtrak/731370/" rel="">high-speed rail</a><span>, mass transit infrastructure, </span><a href="https://unchartedterritories.tomaspueyo.com/p/does-desalination-promise-a-future" rel="">desalination plants</a><span> in arid regions, and </span><a href="https://www.construction-physics.com/p/do-us-ports-need-more-automation" rel="">better ports</a><span>.</span></p><p><span>One facet of infrastructure that doesn’t get all that much attention is roads, despite the fact that they’re crucial transportation infrastructure, and probably the infrastructure that Americans interact with most directly and consistently. The US has the largest road network in the world, about 4.3 million miles of road, and Americans </span><a href="https://frontiergroup.org/resources/fact-file-americans-drive-most/" rel="">drive much more</a><span> than residents in most other countries. Good-quality roads are important for a functioning economy, and rough roads </span><a href="https://www.nber.org/system/files/working_papers/w31981/w31981.pdf" rel="">inflict costs</a><span> in the form of reduced vehicle speeds.</span></p><p>How good is American road infrastructure? How does it compare with roads built in other countries?</p><p>Overall, the quality of US interstates is very high, while the quality of roads in major cities is quite poor. And while there’s some anecdotal evidence that US roads are worse than European roads, I wasn’t able to find much international road quality data to compare. The limited data I found points to the US not being a huge outlier in road quality. But more data is needed to compare accurately.</p><p><span>The most common metric for measuring road quality is the </span><a href="https://en.wikipedia.org/wiki/International_roughness_index" rel="">International Roughness Index</a><span> (IRI). The IRI measures how much a car moves vertically as it travels over a given distance, and is typically given in units like “inches per mile” or “millimeters per meter.” Lower IRI is better: the rougher the road, the more the car bounces up and down, and the higher the IRI. As we’ll see, standards for road quality vary from country to country, but a “good” IRI is generally in the neighborhood of 95 inches per mile / 1.5 millimeters per meter or less.</span></p><p><span>Data on US road quality is provided by the Bureau of Transportation Statistics and the Federal Highway Administration (FHWA) at the </span><a href="https://www.bts.gov/content/condition-us-roadways-functional-system" rel="">national</a><span>, </span><a href="https://www.bts.gov/road-condition" rel="">state</a><span>, and </span><a href="https://www.fhwa.dot.gov/policyinformation/statistics/2022/hm73.cfm" rel="">city level</a><span>. It’s not 100% clear to me what’s included in this data, or what the selection criteria is. It definitely includes essentially all of the Interstate System, as well as other major highways that make up the </span><a href="https://en.wikipedia.org/wiki/National_Highway_System_(United_States)" rel="">National Highway System</a><span>. But the National Highway System has on the order of </span><a href="https://en.wikipedia.org/wiki/National_Highway_System_(United_States)" rel="">160,000 miles</a><span>, while there is quality data for around 800,000 miles worth of road. Presumably the other 640,000 miles are other important roads outside of the highway system. Regardless, the roads we have quality data for are only a fraction (around 19%) of the US’s total road network.</span></p><p>To start, let’s look at overall road quality, broken down by whether they’re interstate highways or not, and whether they’re urban or rural roads.</p><p><span>Note: The FHWA uses slightly different category breakdowns in different places. Some places it uses </span><a href="https://www.fhwa.dot.gov/policyinformation/pubs/hf/pl11028/chapter7.cfm" rel="">three categories</a><span>, some places </span><a href="https://www.fhwa.dot.gov/policyinformation/statistics/2022/hm73.cfm" rel="">it uses five</a><span>, and some places it uses </span><a href="https://www.bts.gov/content/condition-us-roadways-functional-system" rel="">a different five</a><span>. I’ve used the categories given in the national level statistics. These are consistent with the three-level categorization used elsewhere, with an additional “very good” and “very poor” labels I’ve assigned to &lt; 60 and &gt; 220 IRI. Note that state DOTs might use their own, slightly different quality categories.</span></p><p><span>US interstates are fairly good quality, with more than 80% of mileage good or very good, and only a tiny fraction of mileage (around 3%) poor or very poor. Non-interstate roads are, unsurprisingly, less good, with only around 40% of measured mileage good or better, and 20% poor or worse. Interestingly, in all cases urban roads are worse quality than rural roads, presumably because they see higher traffic than rural roads. More than a third of non-interstate urban roads are poor quality or worse. And remember, this data is just a fraction of total US road mileage (which includes more than a million miles of </span><a href="https://en.wikipedia.org/wiki/List_of_countries_by_road_network_size" rel="">unpaved roads</a><span>). Presumably average quality of the total non-interstate road network is even worse.</span></p><p>We can also see how road quality has changed over time. Over the last 30 years, interstate quality has been steadily improving, while non-interstate has been fairly flat.</p><p>We can also look at a state-by-state breakdown. For interstates, there’s not a huge amount of variation: only four states have less than 60% of their roads good quality or better, and almost every state has less than 10% of its interstate mileage poor quality or worse.</p><p><span>With non-interstates, we see more variation. Broadly, highly rural states tend to have higher quality roads than more urbanized states, though there’s a decent amount of variation. California, which is reasonably rural, nevertheless comes in third from the bottom. Interestingly, I expected cold places to have lower road quality in general due to things like </span><a href="https://orf.od.nih.gov/TechnicalResources/Documents/Technical%20Bulletins/19TB/The%20Freeze-Thaw%20Cycle%20in%20Concrete%20and%20Brick%20Assemblies%20January%202019-Technical%20Bulletin_508.pdf" rel="">freeze-thaw cycles</a><span> and the impact of </span><a href="https://en.wikipedia.org/wiki/Salt_Belt" rel="">road salting</a><span>, but there doesn’t seem to be much correlation. Plenty of cold places (North Dakota, Wyoming, Minnesota) have good-quality roads, while plenty of warm places (Louisiana, New Mexico, California) have poor-quality roads.</span></p><p><span>We can also look at the road quality of individual cities. Below is road quality (non-interstate) for the 19 largest metro areas in the US.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-1-151890432" target="_self" rel="">1</a></span></p><p>While urban roads are poor in general, there’s a large amount of variation. Cities like Atlanta and Minneapolis have less than 10% of their roads are poor quality or worse, while more than 60% of the roads in San Francisco and Los Angeles are poor. But in general, most major cities aren’t doing great: in 13 of the 19 largest US cities, more than 1/3rd of the roads are poor quality. And here again we see that cold climate doesn’t seem to have much impact on road quality, with cold places like Minneapolis and New York near the top, while warm cities like Los Angeles, San Diego and Dallas are near the bottom.</p><p>So US interstates seem high-quality, while urban roads are often quite poor. How does this compare to other countries?</p><p><span>It’s unfortunately not easy to tell. The US ranks very highly in the international </span><a href="https://worldpopulationreview.com/country-rankings/road-quality-by-country" rel="">Roads Quality Index</a><span> (11th in the world, as of 2019), but this is based on a survey of the perceptions of business leaders about road quality, not actual road data. A </span><a href="https://www.imf.org/-/media/Files/Publications/WP/2022/English/wpiea2022095-print-pdf.ashx" rel="">2022 IMF study</a><span> of various countries’ road quality ranked the US best in the world, but it relied on estimated travel speeds between major cities using Google Maps data, not actual road roughness. While the IRI is commonly used by countries around the world to measure road quality, I had a very hard time finding any international datasets comparable to FHWA data.</span></p><p><span>But I was able to scrape together a few. </span><a href="https://www.orr.gov.uk/sites/default/files/2023-10/trl-report-on-benchmarking-the-condition-of-highway-networks.pdf" rel="">This 2023 report</a><span> from the UK compares highway quality in England, Wales, Scotland, and the Netherlands, and provides a high-level summary of IRI data.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-2-151890432" target="_self" rel="">2</a></span><span> </span><a href="https://open.canada.ca/data/en/dataset/01dfc06c-6ef0-4fd0-a010-8ba20e3c9d10" rel="">This Canadian website</a><span> gives IRI data up to 2021 for the provincial highways in Ontario. </span><a href="https://www.tii.ie/media/n45jg5jx/tii-national-roads-network-indicators-2017.pdf" rel="">This presentation</a><span> gives some summary IRI statistics for Ireland’s national roads as of 2017, and </span><a href="https://www.instituteofasphalt.org/requirements/papers/61_2.pdf" rel="">this one</a><span> gives some IRI data for Irish regional roads as of 2018.</span></p><p>Because these countries use somewhat different roughness categories, I graphed each of these, along with US interstate and non-interstate roads, using a cumulative distribution function, which gradually adds the fraction of roads at different IRI levels. The farther the curve is to the left, the larger the fraction of roads at a lower IRI, and the higher quality the road network.</p><p><span>For most of the international sources, the data is for the national or provincial highway network, major roads which (as far as I can tell) are roughly equivalent to the US National Highway System. The exception is the Irish regional road data, which I believe are a lower tier of road.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-3-151890432" target="_self" rel="">3</a></span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png" width="1456" height="1099" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1099,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>We see that US interstates compare very well; as good or better than the national road networks in every other country for which there’s data. US non-interstates do less well: about 90% of Dutch national roads are “good” by US standards, for instance, whereas only around 40% of US non-interstates are. Nevertheless, the US doesn’t seem to be a huge outlier: its roads seem to be roughly as good as British national roads, for instance. I’m also assuming that the US data includes a lot of lower-importance/quality roads beyond the national system that drag its average down. My guess is that if you restricted US data to just the National Highway System roads, average quality would jump significantly.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-4-151890432" target="_self" rel="">4</a></span></p><p><span>On the other hand, while Ireland has reasonably good motorways (interstate equivalents) and “engineered pavements” (whatever that means), it appears to have poor regional and legacy roads, to the point where I’d be sure there was an error in the data if I hadn’t already heard that Ireland has unusually poor roads.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-5-151890432" target="_self" rel="">5</a></span></p><p><span>Unfortunately, this doesn’t include data from many countries we might be interested in, like the Nordics, Germany, France, or Spain (anecdotally, I’ve heard that Spain has exceptionally good roads). And it's only measuring a very small portion of each country’s road network: the Netherlands data, for instance, is based on about 7,000 kilometers of national highway network, a tiny fraction of the </span><a href="https://en.wikipedia.org/wiki/Roads_in_the_Netherlands" rel="">139,000 kilometers</a><span> of roads in the country.&nbsp;</span></p><p><span>Is there anything else we can look at that might prove illuminating? One thing we can do is compare the quality standards of different countries: how smooth does a road have to be to meet different quality thresholds? </span><a href="https://www.tandfonline.com/doi/abs/10.1080/14680629.2016.1197144" rel="">This 2016 paper compares International Roughness Index specifications around the world</a><span>. </span><a href="https://open.alberta.ca/dataset/1bd6fde8-b313-4183-a3a4-602acc87ff59/resource/7d22a447-8e0f-41e2-ba6f-b91a7afd95cc/download/6351771-2000-international-roughness-index-uses-comparison-iri-other-jurisdictions.pdf" rel="">This report from 2000</a><span> gives a few more, though unfortunately they’re quite old. Most countries have five different quality levels. For ease of comparison, we’ll use the same “very good," “good," “acceptable," “poor," and “very poor” descriptors that we used for US roads. We can compare these to quality thresholds in the US.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-6-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-6-151890432" target="_self" rel="">6</a></span><span>&nbsp;</span></p><p>Looking at this, we see that the US generally has fairly strict quality standards compared to other countries. The US for instance, has a higher threshold for what counts as “good” than any other country listed, and only Holland has a higher bar for what counts as “very good.”</p><p><span>There’s also slivers of information that can be found elsewhere. </span><a href="https://www.europarl.europa.eu/RegData/etudes/STUD/2014/529059/IPOL_STU(2014)529059_EN.pdf" rel="">This 2014 EU report</a><span> states that as of 2011, on average both national and local roads in Spain were “deficient” (though it doesn’t give an IRI rating). </span><a href="https://www.concreteconstruction.net/how-to/construction/u-s-tour-of-european-concrete-highways_o" rel="">This article from 1992</a><span> discusses several US road experts and government representatives touring France, Austria, Germany, the Netherlands, and Belgium to examine their roadways. They found that European roads were much higher quality, noting that “the serious deterioration that exists on US highways and streets was virtually never seen in Europe,” likely because damage was repaired much sooner. It’s of course hard to weigh a report from more than 30 years ago too heavily, but the 2023 UK report mentioned above also notes that Dutch highways, which were of higher quality than UK highways, were resurfaced much more frequently. (I tried to find data on road maintenance schedules for various countries and came up short.)</span></p><p><a href="https://time.com/archive/6720166/why-america-has-so-many-potholes/" rel="">A Time article from 2001</a><span> claims that European roads are superior to US ones because, in addition to more frequent maintenance, European countries build roads more durably:</span></p><blockquote><p><em>European highways actually carry more traffic and considerably heavier truck weights than US roads, yet they are smoother and far sturdier. European highways are designed by their builders to last 40 years; the projected life of American roads is half as long.</em></p></blockquote><p><span>As far as I can tell, the most common way to build a road more durably is to use concrete construction. Most roads in the US are built using one or more layers of asphalt concrete (a mixture of aggregate and </span><a href="https://en.wikipedia.org/wiki/Bitumen" rel="">bitumen</a><span> as a binder) over a layer of coarse aggregate like gravel. But you can also make pavement out of conventional Portland cement concrete, complete with steel reinforcing. Concrete pavement will generally have a longer lifespan than asphalt pavement, at the expense of </span><a href="https://www.eupave.eu/wp-content/uploads/BP64-Guide-to-Concrete-Road-Pavements-BRITPAVE.pdf" rel="">greater upfront cost</a><span>:</span></p><blockquote><p><em>The maximum service life of an asphalt service course is 20 years…compared with 30 to 50 years for concrete road surfaces. Indeed, subject to cost parameters a concrete road can be designed for however long it is required.</em></p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png" width="618" height="219.65060240963857" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:413,&quot;width&quot;:1162,&quot;resizeWidth&quot;:618,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>Cross section of a continuously reinforced concrete pavement, via </span><a href="https://www.fhwa.dot.gov/pavement/concrete/pubs/hif16026.pdf" rel="">FHWA</a><span>.</span></figcaption></figure></div><p><a href="https://www.fhwa.dot.gov/policyinformation/statistics/2020/hm12.cfm" rel="">Most US roads</a><span> are indeed made of asphalt rather than concrete, but so are most European roads, it seems. </span><a href="https://www.tno.nl/en/sustainable/infrastructure/asphalt/" rel="">80% of Dutch roads</a><span> are made of multi-layered asphalt pavements, </span><a href="https://iea.blob.core.windows.net/assets/imports/events/202/TransportMat_Session3_Matschei_08032018.pdf" rel="">this presentation</a><span> on the German highway network states that only 30% of Germany highways are made of concrete, and </span><a href="https://horizoneuropencpportal.eu/sites/default/files/2024-06/eapa-recommendations-for-road-authorities-to-optimise-paving-sustainability-health-safety-and-quality-through-the-use-of-warm-mix-asphalt-2024.pdf" rel="">this report</a><span> claims that more than 90% of European roads are surfaced with asphalt (though this is made somewhat more complicated by the fact that you can have a concrete road with a thin asphalt surface).</span></p><p><span>It’s also possible that European roads use the same basic construction methods, but are built more robustly. In 1993, the Michigan DOT </span><a href="https://www.bridgemi.com/business-watch/why-are-germanys-roads-better-or-are-they" rel="">experimented</a><span> by rebuilding a concrete road using two methods: one section was built using its standard construction methods, and another was built using more robust German specifications. The German section had two layers of concrete instead of one, a gravel base course instead of sand, and tighter joint spacing. However, after 20 years of service, the German section was actually performing slightly worse than the one built to Michigan standards, despite costing twice as much to build.</span></p><p>To sum up, US interstates seem high quality, and as good as comparable roads in Europe. Non-interstates are lower quality, particularly within major urban areas, but a lack of data makes it hard to do much international comparison. The limited data we have suggests that US roads are perhaps not a huge outlier in quality. It also seems likely that many European roads are maintained better than US roads and resurfaced more frequently, and that European roads are designed more robustly (though perhaps not in a way that results in better service life).</p><p>Overall, my main takeaway is that roads in major US cities are often shockingly bad, particularly in California, and that much more data is needed on road quality in other countries. If you know of good international road quality datasets (ideally IRI), please let me know!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GNU Artanis 1.0.0 Released (124 pts)]]></title>
            <link>https://artanis.dev/blog/1.0.0-release.html</link>
            <guid>42194315</guid>
            <pubDate>Wed, 20 Nov 2024 14:44:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://artanis.dev/blog/1.0.0-release.html">https://artanis.dev/blog/1.0.0-release.html</a>, See on <a href="https://news.ycombinator.com/item?id=42194315">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="text-org29e9361">
<p>
GNU Artanis was born in 2013, and it's a web application framework written in Guile Scheme. It's designed to be simple and easy to use, and it's suitable for small to medium web applications. It's licensed under GPLv3+ and LGPLv3.
</p>

<p>
In the beginning, Artanis was largely inspired by Ruby on Rails to generate the scaffold code as possible. And the URL remapping API was inspired by Sinatra, another web framework of Ruby. That's why it's named "Artanis", since it's the revserse of "Sinatra".
</p>

<p>
But as time goes by, Artanis has its own features and design.
</p>

<p>
The first convention of Artanis is "Scheme only", we don't intend to write C code for extension as possible, unless it's really necessary. So far, we still don't have any C code in Artanis. The contributors may provide extension in C, but the Artanis core is still pure Scheme. That's because GNU Guile provides great features to interact with C libraries, which is the original reason why Guile exists.
</p>

<p>
The default server core of Artanis is named "Ragnarok", which is high performance asynchronous non-blocking server design based on co-routine. Notably, the co-routine is implemented in pure Scheme feature called Delimited Continuation.
</p>

<p>
GNU Artanis is both the official project of GNU operating system, and <a href="https://hardenedlinux.org/">HardenedLinux community</a>.
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What is the origin of the lake tank image that has become a meme? (2021) (465 pts)]]></title>
            <link>https://history.stackexchange.com/questions/57033/what-is-the-origin-of-the-lake-tank-image-that-has-become-a-meme</link>
            <guid>42193771</guid>
            <pubDate>Wed, 20 Nov 2024 13:30:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://history.stackexchange.com/questions/57033/what-is-the-origin-of-the-lake-tank-image-that-has-become-a-meme">https://history.stackexchange.com/questions/57033/what-is-the-origin-of-the-lake-tank-image-that-has-become-a-meme</a>, See on <a href="https://news.ycombinator.com/item?id=42193771">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="text">
<p><em><strong>It's a Panzer IVD of the 31st Panzer Regiment assigned to the 5th Panzer Div. commanded by Lt. Heinz Zobel lost on May 13th, 1940. The "lake" is the Meuse River. The man is a German pioneer.</strong></em></p>
<p><a href="https://i.sstatic.net/D5iQh.png" rel="noreferrer"><img src="https://i.sstatic.net/D5iQh.png" alt="enter image description here"></a></p>
<p>All credit to finding the Panzer of the Lake goes to <a href="https://www.youtube.com/watch?v=RO58B6LcTfM&amp;list=WL&amp;index=24" rel="noreferrer">ConeOfArc for coordinating the search</a>, and miller786 and their team for finding the Panzer. Full sources and details are in <a href="https://docs.google.com/document/d/14L7qfAXdZ3ekIKKCCneXc5PK3NxJrdhOxBi3Jyrd5Eo/edit#" rel="noreferrer">Panzer Of The Lake - Meuse River Theory</a></p>
<h2>The Panzer and the "Lake"</h2>
<p>The photo was taken about <a href="https://goo.gl/maps/BNsJQnmFcXTUYxju9" rel="noreferrer">coordinates 50.29092467073664, 4.893099128823844</a> near modern Wallonia, Belgium on the Meuse River. The tank was not recovered until much later in 1941. The man is an unnamed German pioneer likely at the time of recovery.</p>
<p><a href="https://i.sstatic.net/HQD9v.png" rel="noreferrer"><img src="https://i.sstatic.net/HQD9v.png" alt="enter image description here"></a></p>
<p><em>Comparison of an alternative original photo and the most recent image available of the location (July 2020, Google Street View)</em></p>
<p><a href="https://i.sstatic.net/dA3g6.png" rel="noreferrer"><img src="https://i.sstatic.net/dA3g6.png" alt="enter image description here"></a></p>
<p>On May 12th, 1940 the 31st Panzer Regiment, assigned to the 5th Panzer Division, attempted to capture a bridge over the Meuse River at Yvoir. The bridge was demolished by 1st Lieutenant De Wispelaere of the Belgian Engineers.</p>
<blockquote>
<p>Werner Advance Detachment (under Oberst Paul Hermann Werner, commander, 31st Panzer Regiment), which belonged to the 5th Panzer Division, under Rommel’s command... Werner received a message from close support air reconnaissance in the afternoon that the bridge at Yvoir (seven kilometers north of Dinant) was still intact. He (Werner) immediately ordered Leutnant [Heinz] Zobel’s armored assault team of two armored scout cars and one Panzer platoon to head to the bridge at top speed... Belgian engineers under the command of 1st Lieutenant de Wispelaere had prepared the bridge for demolition while a platoon of Ardennes Light Infantry and elements of a French infantry battalion screened the bridge... Although the last soldiers had already passed the bridge, de Wispelaere delayed the demolition because civilian refugees were still approaching... two German armored scout cars charged toward the bridge while the following three Panzers opened fire. De Wispelaere immediately pushed the electrical ignition, but there was no explosion... Wispelaere now left his shelter and worked the manual ignition device. Trying to get back to his bunker, he was hit by a burst from a German machine gun and fell to the ground, mortally wounded. At the same time, the explosive charge went off. After the gigantic smoke cloud had drifted away, only the remnants of the pillars could be seen.</p>
</blockquote>
<p><a href="https://i.sstatic.net/dMmU6.png" rel="noreferrer"><img src="https://i.sstatic.net/dMmU6.png" alt="enter image description here"></a></p>
<p>A few kilometers south at Houx, the Germans used a portion of a pontoon bridge (Bruckengerat B) rated to carry 16 tons to ferry their 25 ton tanks across.</p>
<blockquote>
<p>By noon on May 13, Pioniere completed an eight-ton ferry and crossed twenty anti-tank guns to the west bank, however to maintain the tempo of his divisions advance, he needed armor and motorized units across the river. Rommel personally ordered the ferry converted to a heavier sixteen-ton variant to facilitate the crossing of the light Panzers and armored cars. Simultaneously, the Pioniere began construction on a bridge capable of crossing the division’s heavier Panzers and motorized units.</p>
</blockquote>
<p><em>Major Erich Schnee in “The German Pionier: Case Study of the Combat Engineer’s Employment During Sustained Ground Combat”</em></p>
<p><a href="https://i.sstatic.net/LdmBC.jpg" rel="noreferrer"><img src="https://i.sstatic.net/LdmBC.jpg" alt="enter image description here"></a></p>
<p>On the evening of the 13th, Lt. Zobel's tank is crossing. Approaching the shore, the ferry lifts, the load shifts, and the tank falls into the river.</p>
<p><a href="https://i.sstatic.net/f7YbE.png" rel="noreferrer"><img src="https://i.sstatic.net/f7YbE.png" alt="enter image description here"></a></p>
<blockquote>
<p>The panzer IV of Lieutenant Zabel [sic] of the 31. Panzer Regiment of the 5. Panzer-Division, on May 13, 1940, in Houx, as good as underwater except for the vehicle commander’s cupola. Close to the west bank, at the pontoon crossing site and later site of 5. Panzer Division bridge, a 16 tonne ferry (Bruckengerat B) gave way to the approaching shoreline, likely due to the rotating movement of the panzer, which turned right when disembarking (the only possible direction to quickly leave the Meuse’s shore due to the wall created by the rail line). The tank would be fished out in 1941 during the reconstruction of the bridge.</p>
</blockquote>
<p><a href="https://i.sstatic.net/UagYm.png" rel="noreferrer"><img src="https://i.sstatic.net/UagYm.png" alt="enter image description here"></a></p>
<h2>The Man</h2>
<p>Sometime later the photograph was taken of a German pioneer infantryman looking at the tank. Later the tank was recovered and its ultimate fate is unknown.</p>
<blockquote>
<p>Available evidence suggests the soldier in the photo is a Pioneer/Tank recovery crew, holding a Kar98k and wearing an EM/NCO'S Drill &amp; Work uniform, more commonly known as “Drillich”.</p>
<p>His role is proven by the presence of pontoon ferries on the Meuse river, used by the 5th Panzer Division. That is also proven by his uniform, which, as evidence suggests, was used during work to prevent damage to their standard woolen uniform.</p>
</blockquote>
<p><a href="https://i.sstatic.net/PEzl0.png" rel="noreferrer"><img src="https://i.sstatic.net/PEzl0.png" alt="enter image description here"></a></p>
<p><em>German pioneers prepare Panzer IIs for ferry crossing</em></p>
<p><a href="https://i.sstatic.net/lud8R.png" rel="noreferrer"><img src="https://i.sstatic.net/lud8R.png" alt="enter image description here"></a></p>
<p><em>An early version of the Drillich</em></p>
<hr>
<h2>My own speculation and research prior to the discovery.</h2>
<p>While I can't identify the photo, I can narrow down the tank. I believe it is a Panzer IV D.</p>
<p>It has the <a href="https://en.wikipedia.org/wiki/7.5_cm_KwK_37" rel="noreferrer">short barrelled 7.5 cm KwK 37</a> narrowing it down to a Panzer IV Ausf. A through F1 or a <a href="https://www.worldwarphotos.info/gallery/germany/tanks-2-3/panzer3n/" rel="noreferrer">Panzer III N</a>.</p>
<p>Both had very similar turrets, but the Panzer III N has a wider gun mantlet, a more angular shroud, and lacked (or covered) the distinctive angular view ports (I believe they're view ports) on either side of the turret face.</p>
<p><a href="https://i.sstatic.net/gt6vR.jpg" rel="noreferrer"><img src="https://i.sstatic.net/gt6vR.jpg" alt="Panzer III N in Italy 1944"></a></p>
<p><em>Panzer III N in Italy 1944</em>. <a href="https://www.worldwarphotos.info/gallery/germany/tanks-2-3/panzer3n/panzer-iii-ausf-n-italy-1944/" rel="noreferrer">source</a></p>
<p>This leaves the Panzer IV. The distinctive cupola was added in model B. The external gun mantlet was added in model D.</p>
<p><a href="https://i.sstatic.net/BOimo.jpg" rel="noreferrer"><img src="https://i.sstatic.net/BOimo.jpg" alt="Panzer IV model C"></a></p>
<p><em>Panzer IV model C lacking the external gun mantlet</em>. <a href="https://www.worldwarphotos.info/gallery/germany/tanks-2-3/panzer-iv/panzer-iv-65pzrg-2/" rel="noreferrer">source</a>.</p>
<p><a href="https://i.sstatic.net/tiIK4.jpg" rel="noreferrer"><img src="https://i.sstatic.net/tiIK4.jpg" alt="Panzer IV model D in France 1940"></a></p>
<p><em>Panzer IV model D in France 1940 with the external gun mantlet and periscope</em>. <a href="https://www.worldwarphotos.info/wp-content/gallery/germany/tanks/panzer-iv/Frankreich_Panzer_IV.jpg" rel="noreferrer">source</a></p>
<p><a href="https://i.sstatic.net/zmbVR.jpg" rel="noreferrer"><img src="https://i.sstatic.net/zmbVR.jpg" alt="Panzer IV D drawings"></a></p>
<p>Note the front half of the turret top is smooth. There is a protrusion to the front left of the cupola (I believe it's a periscope sight) and another circular opening to the front right. Finally, note the large ventilation hatch just in front of the cupola.</p>
<p>Model E would eliminate the ventilation hatch and replace it with a fan. The periscope was replaced with a hatch for signal flags.</p>
<p><a href="https://i.sstatic.net/MycMf.jpg" rel="noreferrer"><img src="https://i.sstatic.net/MycMf.jpg" alt="Panzer IV model E"></a></p>
<p><em>Panzer IV model E lacking the periscope and ventilation hatch</em>. <a href="https://www.worldwarphotos.info/gallery/germany/tanks-2-3/panzer-iv/panzer-iv-31-2/" rel="noreferrer">source</a>.</p>
<p>Panzer IV model D entered mass production in October 1939 which means it would be too late for Poland, but could have seen service in France, Norway, or the Soviet Union.</p>
<hr>
<p>As for the soldier...</p>
<p>The rifle has a turned down bolt handle, a bayonet lug (missing from late rifles), a distinctive disassembly disc on the side of the stock (also missing from late rifles), no front site hood (indicative of an early rifle), and you can just about make out extra detail in the nose cap (also early). This is likely an early <a href="https://en.wikipedia.org/wiki/Karabiner_98k" rel="noreferrer">Karabiner 98k</a> which is missing its cleaning rod. See <a href="https://www.youtube.com/watch?v=knPDsJyCpjI" rel="noreferrer">Forgotten Weapons: Evolution of the Karabiner 98k, From Prewar to Kriegsmodell</a>.</p>
<hr>
<p><em><strong>UPDATE</strong></em></p>
<p><a href="https://www.youtube.com/channel/UC1_oUtCGIqUMbIyRPeJsSyw" rel="noreferrer">ConeOfArc</a> posted a video <a href="https://www.youtube.com/watch?v=HaRO_dTqO1E&amp;list=WL" rel="noreferrer"><em>The Search for Panzer of the Lake</em></a>.</p>
<p>He broke down what he could identify about the solder, probably German.</p>
<ul>
<li>German winter style lower.</li>
<li>German wool tunic.</li>
<li>M34 Army Standard cap.</li>
<li>Kar98 rifle missing the cleaning rod.</li>
</ul>
<p>For the tank he confirms it's a Panzer IV D using similar criteria I used and he found <a href="https://i.sstatic.net/cmPAz.jpg" rel="noreferrer">two additional photos of what appear to be the same tank</a> claiming to be from the Western front in 1940.</p>
<p><a href="https://i.sstatic.net/43hSO.jpg" rel="noreferrer"><img src="https://i.sstatic.net/43hSO.jpg" alt="enter image description here"></a></p>
<p><a href="https://i.sstatic.net/Tcmqv.jpg" rel="noreferrer"><img src="https://i.sstatic.net/Tcmqv.jpg" alt="enter image description here"></a></p>
<p>He then found a <a href="https://hitriy-plan.livejournal.com/441311.html" rel="noreferrer">Russian source</a> claiming it was found in Romania at the onset of Barbarossa in 1941.</p>
<p>Unfortunately that's all for now. ConeOfArc has put a bounty of $100 US for definitive proof of the tank's location. More detail can be had on ConeOfArc's Discord.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bluesky is ushering in a pick-your-own algorithm era of social media (182 pts)]]></title>
            <link>https://www.newscientist.com/article/2456782-bluesky-is-ushering-in-a-pick-your-own-algorithm-era-of-social-media/</link>
            <guid>42193549</guid>
            <pubDate>Wed, 20 Nov 2024 12:59:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newscientist.com/article/2456782-bluesky-is-ushering-in-a-pick-your-own-algorithm-era-of-social-media/">https://www.newscientist.com/article/2456782-bluesky-is-ushering-in-a-pick-your-own-algorithm-era-of-social-media/</a>, See on <a href="https://news.ycombinator.com/item?id=42193549">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-barrier="None">
                    <figure><p><img width="1350" height="900" alt="" src="https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg" data-src="https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg" sizes="(min-width: 1288px) 837px, (min-width: 1024px) calc(57.5vw + 55px), (min-width: 415px) calc(100vw - 40px), calc(70vw + 74px)" srcset="https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=300 300w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=400 400w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=500 500w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=600 600w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=700 700w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=800 800w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=837 837w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=900 900w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1003 1003w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1100 1100w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1200 1200w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1300 1300w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1400 1400w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1500 1500w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1600 1600w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1674 1674w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1700 1700w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1800 1800w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1900 1900w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=2006 2006w" loading="eager" fetchpriority="high" data-image-context="Article" data-image-id="2456783" data-caption="Bluesky sign-ups continue to grow" data-credit="Anna Barclay/Getty Images"></p><figcaption><div><p>Bluesky sign-ups continue to grow</p><p>Anna Barclay/Getty Images</p></div></figcaption></figure>
<p>As a technology reporter, I like to think I’m an early adopter. I<a href="https://www.newscientist.com/article/2372273-what-is-going-on-with-twitter-and-should-i-move-to-bluesky-instead/"> first signed up to the social network Bluesky around 18 months ago</a>, when the platform saw a small surge in users disaffected by Elon Musk’s approach to <a href="https://www.newscientist.com/article/2383886-why-is-twitter-becoming-x-and-should-you-move-to-threads-or-bluesky/">what was then still called Twitter</a>.</p>
<p>It didn’t stick. Like many, I found the lure of Twitter too strong, and let my Bluesky account wither, but in recent weeks I have returned – and I am not alone. With Musk continuing to transform his social platform, now called X, at the same time as taking a role in US president-elect Donald Trump’s upcoming government, the Xodus has begun. Bluesky has gained <a href="https://bsky.app/profile/rose.bsky.team/post/3lb6w3q3tsu2d">12 million users in two months</a>, and has just surpassed 20 million users. This time I intend on sticking around – and I think others will, too.</p>
    
<p>In large part, that’s because I want a social media experience without being bombarded by hate speech, gore and pornographic videos – all of which users of X have complained about in recent months. But I’m also big on Bluesky because I think it signals a shift in how social media works on a more fundamental level.</p>
<span></span><p>Social media algorithms – the computer code that decides what each user is shown – have long been a point of contentious debate. Fears of disappearing down “rabbit holes” of radicalisation, or being trapped in “<a href="https://www.newscientist.com/article/2128426-has-the-social-media-political-bubble-theory-just-been-popped/">echo chambers</a>” of consensual, sometimes conspiratorial, viewpoints, have dominated scientific literature.</p>
<p>The use of algorithms to filter information has become the norm because chronologically presenting information from followers creates a confusing morass for the average user to process. Sorting and filtering what is important – or likely to keep users engaged – has become key to the success of platforms like Facebook, X and Instagram.</p>
<p>But control of these algorithms also gives you a big say in what people read. One of the bugbears many users have with X is its “For you” algorithm, which under Musk has seen commentary by and about him seemingly shoved into users’ timelines, even if they don’t directly follow him.</p>
<p>Bluesky’s approach isn’t to ditch algorithms – instead, it has more than the average social network. In a <a href="https://bsky.social/about/blog/3-30-2023-algorithmic-choice">2023 blog post</a>, Jay Graber, Bluesky’s CEO, outlined the ethos of the platform. Bluesky promotes a “marketplace of algorithms”, she wrote, instead of a single “master algorithm”.</p>
    
<p>In practice, this means that users can see posts by people they follow on the app, the standard view Bluesky defaults to. But they can equally opt to see <a href="https://bsky.app/profile/did:plc:z72i7hdynmk6r22z27h6tvur/feed/with-friends">what’s popular with friends</a>, an algorithmically-dictated selection of posts that your peers enjoy. There are <a href="https://bsky.app/profile/did:plc:jfhpnnst6flqway4eaeqzj2a/feed/for-science">feeds specifically for scientists</a>, curated by those working in the field, or ones <a href="https://bsky.app/profile/did:plc:w4xbfzo7kqfes5zb7r6qv3rw/feed/blacksky">to promote Black voices</a>, which are often thinned out by algorithmic filtering. One feed even specifically <a href="https://bsky.app/profile/did:plc:vpkhqolt662uhesyj6nxm7ys/feed/infreq">promotes “quiet posters”</a> – users who post infrequently, and whose views would otherwise be drowned out by those who share every opinion with their followers.</p>
<p>This menu of options allows Bluesky to serve two purposes, bridging the past era of social media and the future one. The platform has the potential, once it reaches a critical mass of users, to act as the “de facto public town square”, as <a href="https://x.com/elonmusk/status/1507777261654605828?lang=en">Musk dubbed Twitter</a> before he purchased it. Bluesky arguably is the only remaining such square, given X has shifted to exclude many mainstream voices, and competitors like Threads choose to shy away from promoting politics and current affairs.</p>
<p>But Bluesky also allows you to tailor the app to your needs – not only through feeds, but other elements like starter packs of recommended users to quickly get involved in individual niches, or blocking tools to quieten unruly voices.</p>
<p>There are still hitches, undoubtedly. Finding the right feed for you can be tricky, while creating your own is even more complicated, requiring third-party tools. But the ability to get the full view of public conversation, then to drill down into smaller debates within clusters and communities of that broad swathe of society, is exciting. It’s a model of a new social media where users, not big companies or enigmatic individuals, are in charge of what they see. And if Bluesky continues to add users, it could become the norm. So come and join me – I’m <a href="https://bsky.app/profile/stokel.bsky.social">@stokel.bsky.social</a>.</p>
<p><em>Chris Stokel-Walker is a freelance technology journalist</em></p>

                    <section><p>Topics:</p></section>                </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How Google spent 15 years creating a culture of concealment (104 pts)]]></title>
            <link>https://www.nytimes.com/2024/11/20/technology/google-antitrust-employee-messages.html</link>
            <guid>42192972</guid>
            <pubDate>Wed, 20 Nov 2024 11:45:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/11/20/technology/google-antitrust-employee-messages.html">https://www.nytimes.com/2024/11/20/technology/google-antitrust-employee-messages.html</a>, See on <a href="https://news.ycombinator.com/item?id=42192972">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/11/20/technology/google-antitrust-employee-messages.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Why don't you move abroad? (179 pts)]]></title>
            <link>https://orkohunter.net/blog/why-dont-you-move-abroad/</link>
            <guid>42191805</guid>
            <pubDate>Wed, 20 Nov 2024 08:23:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://orkohunter.net/blog/why-dont-you-move-abroad/">https://orkohunter.net/blog/why-dont-you-move-abroad/</a>, See on <a href="https://news.ycombinator.com/item?id=42191805">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img src="https://orkohunter.net/blog/why-dont-you-move-abroad/header.png" alt=""></p>
<div>
<ul>
<li><a href="#the-iit-dream">The IIT Dream</a></li>
<li><a href="#college-and-open-source">College and Open Source</a></li>
<li><a href="#twitter--san-francisco">Twitter @ San Francisco</a></li>
<li><a href="#the-emotional-turmoil-in-san-francisco">The Emotional Turmoil in San Francisco</a></li>
<li><a href="#college-placements-and-first-job">College placements and first job</a></li>
<li><a href="#life-in-tokyo">Life in Tokyo</a></li>
<li><a href="#life-in-stockholm-and-covid">Life in Stockholm and Covid</a></li>
<li><a href="#you-know-you-can-come-back-right"><em>“You know you can come back right?”</em></a></li>
<li><a href="#back-home">Back home</a></li>
<li><a href="#so-why-dont-you-move-abroad-now">So, why don’t you move abroad now?</a></li>
<li><a href="#my-vision-for-india">My vision for India</a></li>
</ul>
</div>
<p>I just wrapped up a tech conference here this week in Salt Lake City. I was one of the speakers. It was a special moment for me. Strangely enough, the very first time I came to US, it was also as a speaker at a conference.</p>
<p><em>“Did you just say you are a speaker at this thing?”</em>, asked the US Visa officer, before stamping a B1/B2 on my Passport for ten years.</p>
<p>I was 18 back then. The confusion made sense.</p>
<p>A decade has gone by. I got married, switched multiple jobs, wrote a lot of code, lived in three different continents, spoke at many conferences and made a lot of friends for life. I am now back living in India.</p>
<p><em>“Dude, so when are you moving to the US?”,</em> I frequently get asked by friends, colleagues and my well-wishers.</p>
<p><em>“I’m not”.</em></p>
<p>My answer falls flat on most people. It’s as if, I’ve just said, <em>“I do not want more money and success.”</em></p>
<p>In this blog post I want to add more colors to my answer. Hope some of you relate with this, especially if you are someone like me considering your decision of moving abroad or moving back.</p>
<p>But first, let me take you back to my teens when life was much simpler and Physics was my most favorite thing in life.</p>
<h2 id="the-iit-dream"><a href="#the-iit-dream" aria-label="the iit dream permalink"></a>The IIT Dream</h2>
<p>Just like many Indians of my generation, I spent my childhood in a single bedroom rented house. Every evening, my brother and I would sit in front of an oil lamp and study, mostly maths and science. In the mornings, our <em>dada ji</em> would teach us English and Hindi grammar. It was a household where two things were most valued - Education and Love.</p>
<p>Education, because that seemed like the only way to escape generational poverty and not having to worry about, if there are enough candlesticks to last the week or not.</p>
<p>And, Love because <em>familia is everything</em>.</p>
<p>Millions of students in India prepare to get into IITs every year. With the proper amount of luck and improper amount of childhood sacrifices, I made it into IIT Kharagpur. And that changed everything.</p>
<p>During the admission to engineering colleges, more than two thirds of students want to study Computer Science. This is want increases the chances of landing a job and what everyone seems to be doing. In my hostel room in Kota where I studied for 2 years of IIT prep, I had a note stuck on my wall which listed all the opening and closing ranks of all Computer Science branches in the 7 major IITs. When I saw the results and my rank, it was nowhere close to those CS cutoff ranks and I teared up as if I had failed.</p>
<p>And just like that, 99.99% of Indian students start their education journey by the system telling them that they are not worth it and they don’t even get to decide what they study.</p>
<p>While I couldn’t get into the Computer Science department, I knew what I wanted to study. My father has been a software engineer since the 90s and my brother is an absolute rockstar with computers. We didn’t have cartoons in TV back in our childhood but had our hands on keyboard ever since I could possibly remember.</p>
<p>So, I was ready to join IIT and say <em>“Fuck you,”</em> to the education system, “<em>I’m going to be the best programmer the world has ever seen.”</em></p>
<h2 id="college-and-open-source"><a href="#college-and-open-source" aria-label="college and open source permalink"></a>College and Open Source</h2>
<p>I was nowhere close to being the best programmer. I failed to implement a linked list in C in my first year. It was not going well. However, at the same time, I created my first Python package <a href="https://github.com/morse-talk/morse-talk">morse-talk</a> and published on pypi.org. It was immediately used by a professor somewhere in Europe who forked it and made a lot of contributions.</p>
<p>My goal of being the “best programmer” shifted to "create value for others by writing code". That summer, only 4 students were selected in the <a href="https://en.wikipedia.org/wiki/Google_Summer_of_Code">Google Summer of Code</a> from my college. I was one of them, the only freshman. Two years of GSoC paid more than enough to cover my five years of college tuition fees. I found both value and meaning by doing Open Source.</p>
<p>Very quickly, people started referring me with my <a href="https://github.com/orkohunter">GitHub handle</a> OrkoHunter. I, among few of my good friends, established <a href="https://kossiitkgp.org/">Kharagpur Open Source Society</a> to spread the culture of Open Source in campus. Though secretly, it was to give hope to the students who were defeated by the education system and told <em>“You can’t study Computer Science, because you didn’t know Carbon has a radioactive isotope.”</em> In the first few years, we exclusively hired only non-CS students out of spite.</p>
<h2 id="twitter--san-francisco"><a href="#twitter--san-francisco" aria-label="twitter  san francisco permalink"></a>Twitter @ San Francisco</h2>
<p>I was having a blast with the altruism that came with organizing Open Source workshops for students, helping them write their first useful Python application and making their first Pull Request. In 2017, we organized our first ever Open Source conference in college. We had about a thousand attendees, two days of talks, tutorials and lots of fun. We had full flown AV setup, speakers and attendees coming from multiple cities. We had a large budget too. I was leading it, being one of the three co-chairs of the conference. We were living the dream!</p>
<p>One night during the summit, I received an email from a recruiter at Twitter - <em>“Hey Himanshu, We saw your GitHub profile. Would you like to join us for an internship at Twitter San Francisco office in the Open Source team?”</em>. I was so busy with the conference that I forgot to respond for 24 hours. She reached back - <em>“Himanshu, are you interested?”</em></p>
<p>Landing a foreign internship in college is one of those 0.1% things - it’s extremely rare. You need to practice a lot of leetcode, have excellent referrals and be a sports programmer ready to traverse a binary tree. I have never written a Binary Tree traversal in life.</p>
<p>My interviews were all around the projects I had open sourced by then. One being the most popular Python library for Graph Theory, the other being a package used to study X-ray data from black holes. I was working on much more important things. Learning how to traverse a Binary Tree for me was a waste of time - that’s how I saw it back then. I knew I will most likely never use it. Though I used to be maniacal about writing reusable code and ReactJS!</p>
<p>I applied for the J1 visa (short term work visa) and made my way to San Francisco. That summer in SF was probably the coldest summer I had ever. The internship paid extremely well and taught a lot of things about corporate Open Source. I worked upon setting up the <a href="https://opensource.twitter.dev/">opensource.twitter.dev</a> - something which still runs and publishes weekly reports of Twitter’s flagship open source projects. I’m pretty sure Elon Musk has seen the website.</p>
<p>Career-wise, it was the best thing that could have happened to me. My manager from Twitter moved to Spotify later on who told me about the Backstage Open Source project, which led me to Harness leading the product built on top of Backstage. As Steve Jobs once said, <em>“you will only be able to connect the dots looking backwards.”</em></p>
<h2 id="the-emotional-turmoil-in-san-francisco"><a href="#the-emotional-turmoil-in-san-francisco" aria-label="the emotional turmoil in san francisco permalink"></a>The Emotional Turmoil in San Francisco</h2>
<p>Despite the thrilling career advancements that summer, I often wept myself to sleep at nights. The timezone difference between India and US west coast is about 12 hours. Which means, when you wake up, your family and friends are about to go to bed. And when you come back from office, your family has just woken up. Couple of hours is all you get to connect with anyone back home.</p>
<p>Okay, here’s the thing, I had lived alone before. For the IIT prep, I was in Kota for 2 years locked in my room and studying, visited home only two times during Diwalis. My college was in a remote village and far from home as well. But I had never felt that lonely, being on the other side of the world than home.</p>
<p>I am also not an introvert when it comes to talking to strangers. I was leading two student groups in college and fortunately made a lot of friends. It was easy for me to approach seniors, batch mates and juniors in college to build relationships. However, making friends in US was a completely different ballgame.</p>
<p>Money and Status was on everyone’s mind. All they talked about was Visas, dating, getting paid more and playing a different kind of game that I wanted to play. Not many <em>truly</em> wanted to be a software engineer or cared about Software. While I found few who did and made a real attempt to know each other - the friendships I found in the US were very shallow. Back home, we called them acquaintances.</p>
<p>It all felt … like an unlivable place for commoners like me. Homelessness was at its peak. I am the guy, who likes to walk slow on the streets without a destination. But I was told on day one Twitter orientation to <em>“Walk fast”</em>. Drugged homeless people approached me, one guy tried to hit me while waiting to cross the street. I once went out to get some groceries and when making a turn, I saw a person holding a gun, hiding at the turn, waiting for someone. I had never seen a gun in my life till that point. It made me think - <em>“If I’m caught accidentally in a gun fight here, no amount of legal justice or candle marches would make my parents happy”.</em></p>
<p>Don’t get me wrong, I have a huge respect for San Francisco and the Bay Area. For me, it still is one of the most beautiful places on earth. Being an engineer as well as follower of Ram Dass and Timothy Leary, I thank the west for what it has given to world. One of the first Open Source license BSD, came from Berkley. The computer I am using to write this on, came from the valley. Silicon Valley is an absolutely historic place for a techie like me. I actually felt quiet emotional walking on the Haight-Ashbury street. The words “Turn On, Tune In and Drop out” echoed in my ears.</p>
<p>Despite the respect for the place and culture, I found myself struggling to become one with it. After spending 4 months there, I still had one year of college left. On my final day in US, I ate my last bagel sandwich in a cafe in Mission district and boarded my flight back to Kolkata. After 24 hours of flight and three hours of cab drive, I reached my hostel. One of my dear friends was waiting for me downstairs at 2AM. We hugged and I knew, I had arrived <em>home</em>.</p>
<h2 id="college-placements-and-first-job"><a href="#college-placements-and-first-job" aria-label="college placements and first job permalink"></a>College placements and first job</h2>
<p>Being an Indian student, it is almost impossible to get your first job in the US. Very rarely companies take the chance of picking you to go through H1B lottery, employers go for a safer choice. My manager at Twitter tried to get me a job, but after months of struggle, he gave up, and I had no job offer.</p>
<p>All IITs and most colleges have a “placement season” where companies fly in on campus and hire as many students as they can within a short period of time. It’s a flea market. Thousands of students show up in collared white shirts, blue pants and polished black shoes with resumes in their hands. Day 1 placement makes you a rockstar among your friends. If you are not placed by Day 10, you are essentially a loser.</p>
<p>Students get no choice of where they want to work at. If you pass their series of coding tests, panel discussions and what not - you are given one offer (if you are blessed then maybe 2-3 offers) and have to make the decision in an hour. No negotiation on what you will be doing, at what location or at what compensation.</p>
<p>The rebel in me found the system to be dehumanizing, especially for the Top 1% students of the country. As a result, I told myself that I will find a job elsewhere where I will have some idea on what I’ll be working upon and with whom. I did not sign up for campus placements.</p>
<p>A friend of mine connected me with an employer in Tokyo. The product was Mercari US and the team was pretty diverse. It paid well and many of my friends were already going to Tokyo that year. I interviewed with the CTO, VP of Product and Engineering and my Engineering Manager, and I was in! Again, without traversing a binary tree. The job paid extremely well for a new grad like me. I was set to join them after I graduate. As they say, <em>when it rains, it pours</em>.</p>
<h2 id="life-in-tokyo"><a href="#life-in-tokyo" aria-label="life in tokyo permalink"></a>Life in Tokyo</h2>
<p>I was very excited to go to Japan. I found the country to be extremely calm and connected with the roots of human consciousness. It was people, people were hardworking but respectful of each other. Great customer service, free of crime and welcoming. Everyone was somehow aware. Everyone respected elderly and valued wisdom.</p>
<p>Japan and India only has a timezone difference of about 4 hours. There was plenty of time in the day for me to connect back to family and friends. I made friends there as well, actually a lot of them. I was sharing my apartment with a very good friend of mine from college. Life was amazing!</p>
<p>Work was great too. I distinctly remember my manager saying - <em>“You don’t seem like a fresher”</em>. All because I have been writing real code for 5 years at that point and not traversing binary trees. I knew what a 12 factor app was and how to write effective Database queries that scales up to tens of thousands of daily active users.</p>
<p>One fine day, I was talking to my ex-manager back from Twitter, who had just moved to Spotify. He told me about <a href="https://github.com/backstage/backstage">Backstage Open Source</a>. It was released just a few days ago, on March 14, 2020. I have always dreamt about writing Open Source software while getting paid for it. He said, <em>“Himanshu, just so you know, I would love to work with you again in a heartbeat, if I could.”</em></p>
<p>Over the weekend, I got two pull requests merged in the project. It had 50 GitHub stars back then and a few contributors. It is currently at about 30K stars with 1500+ contributors. Interviews happened with Spotify and I knew every single one of my interviewers. In one of those, we forgot to introduce ourselves as we have been talking back and forth on Discord on the same day. I made my way in. Spotify flew me Premium Economy to Stockholm, the land of Opeth and Zlatan Ibrahimovic. That’s all I knew about Sweden.</p>
<h2 id="life-in-stockholm-and-covid"><a href="#life-in-stockholm-and-covid" aria-label="life in stockholm and covid permalink"></a>Life in Stockholm and Covid</h2>
<p>My first summer in Stockholm was my best summer ever. The bar was already high by that point, but I absolutely enjoyed biking every weekend to play football, walking around the rivers, parks and nearby jungles. Stockholm is an interesting landscape, within 5 mins you can reach downtown, a river, a historic place or a cave - it’s all nearby, everything is.</p>
<p>Europe values work-life balance like no one else. I still believe if anyone wants to have fun in life and doesn't want to work too hard, get a job in Europe.</p>
<p>But back then, Covid was at its peak. It didn’t affect my life in Sweden who was one of the few countries to not implement ban on anything. However, I didn’t get to see enough of Europe or attended enough concerts as I had hoped for. I only got to travel in my last year, and it was already too late - the dark winters in Stockholm had taken a hit on me.</p>
<p>Two and half years passed by. I experienced the peak of my career. Got to be known as “The Backstage Guy” in the Open Source community. I saw the team grew from 10 to 50 and onboarded many engineers, many of them were far more skilled and experienced than me. I had learned a lot at Spotify and is one of the best companies to be working for as an engineer.</p>
<p>The timezone difference was not that different either. Again 4 hours and I was able to connect with my family and friends. I found some good friends back there as well. However, during that time, my grandmother passed away. This was the first time I had experienced death in my family. Someone I knew was no more in this world. I was not able to go back in time and mourn with family. Though I was not extremely attached to my grandma, it made me think - <em>what if I had lost someone else, someone far closer to me?</em> It was also the time when I became a lot closer to my lovely childhood friend, who is now my wife. After many years, it made no sense to me to live far from her.</p>
<p>In all the European and work life glory, something was not working out.</p>
<h2 id="you-know-you-can-come-back-right"><a href="#you-know-you-can-come-back-right" aria-label="you know you can come back right permalink"></a><em>“You know you can come back right?”</em></h2>
<p>One fine day, I was sitting in my living room. I had gained about 25 KGs of additional weight in the past year. It was three in the afternoon and the sun had already set. I was on a video call with my dad. We were talking about a few things, one of them being Russia’s invasion on Ukraine. He was quiet worried about the situations in Europe. I said Sweden had no bone in this fight so don’t worry about it. But then after the conversation, he was about to hang up, as mom had called for the evening tea. Just then, something hit me and I froze. <em>I was alone in this apartment, middle of nowhere. Why was I not there with them, having that cup of tea?</em></p>
<p>I broke. Tears streamed down my face and I had no words. What could I have said? That I am an incapable, grown man who can’t even live on his own? Someone who can’t move on from family? At that moment, I just wanted to hug my father, but I couldn’t.</p>
<p>He kept asking - <em>What happened? Why are you crying? Are you not well?</em></p>
<p>Silence. I had no words to explain what I was feeling. It was definitely the <em>Chai</em>, now that I think about it. Us Indians, huh.</p>
<p>After few minutes, he said something that unlocked a door in my perception that I had never opened. He said, <em>“You know you can always come back right? No one is forcing you to live there. You can have an amazing life back in India too.”</em></p>
<p>To be honest, I didn’t know this. I really did not know this! All I knew, was that you are supposed to move abroad when you grow up. Moving abroad is synonymous with being successful, filling up your bank account. It takes your career to the moon and gives you the highest level of status possible among your peers. I thought that was the only, most respectful way.</p>
<p>The very next day, I wrote an email to my General Manager that I am moving to India. Spotify didn’t permit engineers to work from India, so I knew this was not going to work out. But at that moment, I just wanted to go back home and hug my father - and no job or salary was going to stop me from doing that.</p>
<p>Fortunately, Spotify valued the work I was doing with Backstage and exceptionally permitted me to work from India. I was their first R&amp;D hire here.</p>
<h2 id="back-home"><a href="#back-home" aria-label="back home permalink"></a>Back home</h2>
<p>Once I had made the decision to move, I decided to update my friends about it. I put up a WhatsApp status and also made a post on LinkedIn. <a href="https://www.linkedin.com/feed/update/urn:li:activity:6944645250938241024/">My post went viral</a> with 5 million views, 28,000 reactions and 900 comments.</p>
<p>My decision to move back was shocking to many. Many of my friends who lived abroad related to the challenges of loneliness and cultural shock with me. It was also post-Covid era, where many realized remote work is possible and being in the same location all the time is not needed. Startups were blooming, many of them hiring engineering exclusively in India. There was a mass reverse-brain drain happening in that moment, it still is happening, and I am very excited about it!</p>
<p>I moved back home, starting living in Mumbai with my wife and family. I now get to spend time with my parents without having to plan my days and think about my international travels. Back then, any travel would be 2-4 weeks and there was no room to catchup with an old friend in a different city. I had missed so many reunions, marriages and family events. I now attend them all.</p>
<p>My mental health has now fully recovered. My physical health is coming along, long way to go still.</p>
<p>I work remotely at Harness as a Product Manager, the best job I could be doing right now. I fly to Bangalore every quarter to meet my team in person and spend a lot of time with my colleagues in the US over Zoom. I like working late, my most productive hours are 6-10PM. In childhood, this was the time after school where I would sit to study without any distractions. In college, this was the time after classes for club meetups, project discussions or just writing code. Even at work, my most important meetings happen in the evening. Some see it as a cost of living in India, for me this works just fine. Maybe things will change after having kids.</p>
<h2 id="so-why-dont-you-move-abroad-now"><a href="#so-why-dont-you-move-abroad-now" aria-label="so why dont you move abroad now permalink"></a>So, why don’t you move abroad now?</h2>
<p>I think people should live where they are the happiest. Happiness sparks creativity and is responsible for overall success. Yes, moving to US increases my chances of professional career success, I’ll get to be in proximity with people who have ideas and money to make the ideas come alive. But for me, it comes with significant emotional damage. For some people out there, this is a sacrifice worth making. This was a lot true 20 years ago. The internet age has changed everything. It is now possible to balance career, wealth and happiness while living in India as a techie.</p>
<p><em>“Why don’t you move to the US with your wife? You’ll have family and friends around.”</em></p>
<p>Let me put it in a way which doesn’t offend people - very few of my friends in the US are my real friends. My best friends in US are all planning to move back. My other friends are stuck in the whirlwind of H1Bs and Green Card applications and coping up with their emotional challenges. I wish the best for all of them, but I do not enjoy that lifestyle - it reeks of captivity and not freedom.</p>
<p><em>“If you plan to start your own company, shouldn’t you move out of India?”</em></p>
<p>Yes I do intend to create a company in the future. And yes, most likely the customers are going to be in the west. However, I have seen enough companies with India based founders that I have full confidence I do not have to move personally to make the company successful. I’ll travel frequently and stay up late - which I already do in some sense. We live in a global internet-enabled world.</p>
<p>It’s also not that easy. Visas make it extremely hard for Indians to start a company in the US. The whole process makes me want to puke. The Government and popular opinion seems to be heading in an opposite direction. The dehumanizing experience is similar to my take on campus placements in college above.</p>
<p><em>“Why don’t you move temporarily for a few years?”</em></p>
<p>Maybe for 3 months, yes. Moving for 2 years is a slippery slope of accepting the emotional damage which I will cause to myself and my wife. The drug called monthly salary will keep adding band-aids to the damage and it will again be too late before I realize the repercussions.</p>
<p><em>“If you don’t move, it will affect your career.”</em></p>
<p>For me, success is both the professional success and emotional wellbeing. I am willing to sacrifice some of my professional success for the other. We all have one life.</p>
<h2 id="my-vision-for-india"><a href="#my-vision-for-india" aria-label="my vision for india permalink"></a>My vision for India</h2>
<p>As Richard Feynman says - <em>you are not nameless to yourself, your family and the surrounding ones.</em> When I was 17 in college, my first meaning of life came from doing Open Source and helping others realize that they have much more in them - much more than what the system and society says about them. I uplifted many and showed alternate ways to do well in life. At least, for a few dozen people. A path which did not include Grades and meaningless competitive code grinding.</p>
<p>I think 21st century is a fantastic time to be in a developing nation like India, especially among the tech-enabled hard-working Indians that I know of. I have a lot of hope for my generation. I plan to write more on this in a separate post, when I find time.</p>
<p>Hope you enjoyed reading through this. If at any point, I have hurt your sentiments, I would like to apologize. This is me expressing my own personal views on this very controversial and emotional topic. I still advise people to choose what’s best for them, moving abroad is a great option for many who do not carry emotional baggage like me. We all have one life, and we all should do what’s best for us and our loved ones. Peace.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Foursquare Open Source Places: A new foundational dataset (147 pts)]]></title>
            <link>https://simonwillison.net/2024/Nov/20/foursquare-open-source-places/</link>
            <guid>42191781</guid>
            <pubDate>Wed, 20 Nov 2024 08:19:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2024/Nov/20/foursquare-open-source-places/">https://simonwillison.net/2024/Nov/20/foursquare-open-source-places/</a>, See on <a href="https://news.ycombinator.com/item?id=42191781">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>



<p><strong><a href="https://location.foursquare.com/resources/blog/products/foursquare-open-source-places-a-new-foundational-dataset-for-the-geospatial-community/">Foursquare Open Source Places: A new foundational dataset for the geospatial community</a></strong> (<a href="https://waxy.org/2024/11/foursquare-open-sources-its-places-database/" title="Andy Baio">via</a>) I did not expect this!</p>
<blockquote>
<p>[...] we are announcing today the general availability of a foundational open data set, Foursquare Open Source Places ("FSQ OS Places"). This base layer of 100mm+ global places of interest ("POI") includes 22 core attributes (see schema <a href="https://docs.foursquare.com/data-products/docs/places-os-data-schema">here</a>) that will be updated monthly and available for commercial use under the Apache 2.0 license framework.</p>
</blockquote>
<p>The data is available <a href="https://docs.foursquare.com/data-products/docs/access-fsq-os-places">as Parquet files</a> hosted on Amazon S3.</p>
<p>Here's how to list the available files:</p>
<pre><code>aws s3 ls s3://fsq-os-places-us-east-1/release/dt=2024-11-19/places/parquet/
</code></pre>
<p>I got back <code>places-00000.snappy.parquet</code> through <code>places-00024.snappy.parquet</code>, each file around 455MB for a total of 10.6GB of data.</p>
<p>I ran <code>duckdb</code> and then used DuckDB's ability to remotely query Parquet on S3 to explore the data a bit more without downloading it to my laptop first:</p>
<pre><code>select count(*) from 's3://fsq-os-places-us-east-1/release/dt=2024-11-19/places/parquet/places-00000.snappy.parquet';
</code></pre>
<p>This got back 4,180,424 - that number is similar for each file, suggesting around 104,000,000 records total.</p>
<p>The I ran this query to retrieve 1,000 places from that first file as newline-delimited JSON:</p>
<pre><code>copy (
    select * from 's3://fsq-os-places-us-east-1/release/dt=2024-11-19/places/parquet/places-00000.snappy.parquet'
    limit 1000
) to '/tmp/places.json';
</code></pre>
<p>Here's <a href="https://gist.github.com/simonw/53ad57ad42c7efe75e2028d975907180">that places.json file</a>, and here it is <a href="https://lite.datasette.io/?json=https://gist.github.com/simonw/53ad57ad42c7efe75e2028d975907180#/data/raw">imported into Datasette Lite</a>.</p>
<p>Finally, I got ChatGPT Code Interpreter to <a href="https://chatgpt.com/share/673d7b92-0b4c-8006-a442-c5e6c2713d9c">convert that file to GeoJSON</a> and pasted the result <a href="https://gist.github.com/simonw/1e2a170b7368932ebd3922cb5d234924">into this Gist</a>, giving me a map of those thousand places (because Gists automatically render GeoJSON):</p>
<p><img alt="A map of the world with 1000 markers on it. A marker in Columbia shows a dialog for Raisbeck, Bogota Dv, Cra 47 A 114 05 Second Floor" src="https://static.simonwillison.net/static/2024/places-geojson.jpg"></p>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AAA – Analytical Anti-Aliasing (442 pts)]]></title>
            <link>https://blog.frost.kiwi/analytical-anti-aliasing/</link>
            <guid>42191709</guid>
            <pubDate>Wed, 20 Nov 2024 08:03:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.frost.kiwi/analytical-anti-aliasing/">https://blog.frost.kiwi/analytical-anti-aliasing/</a>, See on <a href="https://news.ycombinator.com/item?id=42191709">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Today’s journey is <a href="https://en.wikipedia.org/wiki/Spatial_anti-aliasing">Anti-Aliasing</a> and the destination is <strong>Analytical Anti-Aliasing</strong>. Getting rid of rasterization <a href="https://en.wikipedia.org/wiki/Jaggies">jaggies</a> is an art-form with decades upon decades of maths, creative techniques and non-stop innovation. With so many years of research and development, there are many flavors.</p><p>From the simple but resource intensive <a href="https://en.wikipedia.org/wiki/Supersampling"><strong>SSAA</strong></a>, over theory dense <a href="https://www.iryoku.com/smaa/"><strong>SMAA</strong></a>, to using machine learning with <a href="https://en.wikipedia.org/wiki/Deep_learning_anti-aliasing"><strong>DLAA</strong></a>. Same goal - <strong><em>vastly</em></strong> different approaches. We’ll take a look at how they work, before introducing a new way to look a the problem - the ✨<em><strong>analytical</strong></em>🌟 way. The perfect Anti-Aliasing exists and is simpler than you think.</p><blockquote><p>Having <a href="https://mirrorball.frost.kiwi/">implemented</a> it multiple times over the years, I'll also share some juicy secrets I have never read anywhere before.</p><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><h2 id="the-setup" tabindex="-1">The Setup <a href="#the-setup">#</a></h2><p>To understand the Anti-Aliasing algorithms, we will implement them along the way! Following <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL">WebGL canvases</a> draw a moving circle. Anti-Aliasing <em>cannot</em> be fully understood with just images, movement is <em>essential</em>. The red box has 4x zoom. Rendering is done at <a href="https://en.wikipedia.org/wiki/1:1_pixel_mapping">native</a> resolution of your device, important to judge sharpness.</p><blockquote><p>Please pixel-peep to judge sharpness and aliasing closely. Resolution of your screen too high to see aliasing? Lower the resolution with the following buttons, which will <a href="https://tanalin.com/en/articles/integer-scaling/">integer-scale</a> the rendering.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><div><p> <label for="native">Native<p>Resolution</p></label></p><p> <label for="half">½<p>Resolution</p></label></p><p> <label for="quarter">¼<p>Resolution</p></label></p><p> <label for="eight">⅛<p>Resolution</p></label></p></div><canvas id="canvasSimple" width="100%" height="400px"></canvas><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/simple.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/simple.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle.vs">circle.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>attribute</span> <span>vec3</span> col<span>;</span>

<span>/* The coordinates that will be used to for our drawing operations */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* Color for the fragment shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>

<span>/* Aspect ratio */</span>
<span>uniform</span> <span>float</span> aspect_ratio<span>;</span>
<span>/* Position offset for the animation */</span>
<span>uniform</span> <span>vec2</span> offset<span>;</span>
<span>/* Size of the Unit Quad */</span>
<span>uniform</span> <span>float</span> size<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* Assign the verticies to be used as the distance field for drawing. This
	   will be linearly interpolated before going to the fragment shader */</span>
	uv <span>=</span> vtx<span>;</span>
	<span>/* Sending some nice color to the fragment shader */</span>
	color <span>=</span> col<span>;</span>

	<span>vec2</span> vertex <span>=</span> vtx<span>;</span>
	<span>/* correct for aspect ratio  */</span>
	vertex<span>.</span>x <span>*=</span> aspect_ratio<span>;</span>
	<span>/* Shrink the Quad and thus the "canvas", that the circle is drawn on */</span>
	vertex <span>*=</span> size<span>;</span>
	<span>/* Make the circle move in a circle, heh :] */</span>
	vertex <span>+=</span> offset<span>;</span>

	<span>/* Vertex Output */</span>
	gl_Position <span>=</span> <span>vec4</span><span>(</span>vertex<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle.fs">circle.fs</a></summary><pre><code><span>precision</span> <span>mediump</span> <span>float</span><span>;</span>
<span>/* uv coordinates from the vertex shader */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* color from the vertex shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span>/* Clamped and scaled uv.y added to color simply to make the bottom of the
	   circle white, so the contrast is high and you can see strong aliasing */</span>
	<span>vec3</span> finalColor <span>=</span> color <span>+</span> <span>clamp</span><span>(</span> <span>-</span> uv<span>.</span>y <span>*</span> <span>0.4</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>

	<span>/* Discard fragments outside radius 1 from the center */</span>
	<span>if</span> <span>(</span><span>length</span><span>(</span>uv<span>)</span> <span>&lt;</span> <span>1.0</span><span>)</span>
		gl_FragColor <span>=</span> <span>vec4</span><span>(</span>finalColor<span>,</span> <span>1.0</span><span>)</span><span>;</span>
	<span>else</span>
		<span>discard</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleSimple.js">circleSimple.js</a></summary><pre><code><span>function</span> <span>setupSimple</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> simpleColorFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName<span>,</span> showQuadOpt</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> circleDrawFramebuffer<span>,</span> frameTexture<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> showQuad <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span><span>,</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Show Quad instead of circle choise */</span>
	<span>const</span> showQuadOption <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>showQuadOpt<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	showQuadOption<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"false"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			showQuad <span>=</span> <span>(</span>event<span>.</span>target<span>.</span>value <span>===</span> <span>"true"</span><span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* SimpleColor Shader */</span>
	<span>const</span> simpleColorShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> simpleColorFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationSimple <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>simpleColorShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircleSimple <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>simpleColorShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircleSimple <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>simpleColorShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>
	gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>if</span> <span>(</span>showQuad<span>)</span> <span>{</span>
			gl<span>.</span><span>useProgram</span><span>(</span>simpleColorShd<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationSimple<span>,</span> aspect_ratio<span>)</span><span>;</span>
			gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircleSimple<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircleSimple<span>,</span> circleSize<span>)</span><span>;</span>
			gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p>Let’s start out simple. Using <a href="https://en.wikipedia.org/wiki/OpenGL_Shading_Language">GLSL</a> Shaders we tell the GPU of your device to draw a circle in the most simple and naive way possible, as seen in <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circle.fs">circle.fs</a> above: If the <a href="https://docs.gl/sl4/length"><code>length()</code></a> from the middle point is bigger than 1.0, we <a href="https://www.khronos.org/opengl/wiki/Fragment_Shader#Special_operations"><code>discard</code></a> the pixel.</p><p>The circle is blocky, especially at smaller resolutions. More painfully, there is strong “pixel crawling”, an artifact that’s very obvious when there is any kind of movement. As the circle moves, rows of pixels pop in and out of existence and the stair steps of the pixelation move along the side of the circle like beads of different speeds.</p><blockquote><p>The low ¼ and ⅛ resolutions aren't just there for extreme pixel-peeping, but also to represent small elements or ones at large distance in 3D.</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>At lower resolutions these artifacts come together to destroy the circular form. The combination of slow movement and low resolution causes one side’s pixels to come into existence, before the other side’s pixels disappear, causing a wobble. Axis-alignment with the pixel grid causes “plateaus” of pixels at every 90° and 45° position.</p><h3 id="technical-breakdown" tabindex="-1">Technical breakdown <a href="#technical-breakdown">#</a></h3><blockquote><p>Understanding the GPU code is not necessary to follow this article, but will help to grasp whats happening when we get to the analytical bits.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><p>4 vertices making up a quad are sent to the GPU in the vertex shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circle.vs">circle.vs</a>, where they are received as <code>attribute vec2 vtx</code>. The coordinates are of a “unit quad”, meaning the coordinates look like the following image. With <a href="https://www.copetti.org/writings/consoles/sega-saturn/#segas-offering">one famous exception</a>, all GPUs use triangles, so the quad is actually made up of two triangles.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/unit.svg" alt="Schematic make-up of the unit quad"><figcaption>Schematic make-up of the unit quad</figcaption></figure><p>The vertices <a href="https://blog.frost.kiwi/analytical-anti-aliasing/utility.js">here</a> are given to the fragment shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circle.fs">circle.fs</a> via <code>varying vec2 uv</code>. The fragment shader is called per <a href="https://www.khronos.org/opengl/wiki/Fragment">fragment</a> (here fragments are pixel-sized) and the <a href="http://learnwebgl.brown37.net/12_shader_language/glsl_data_types.html#storage-qualifiers"><code>varying</code></a> is interpolated linearly with <a href="https://en.wikipedia.org/wiki/Texture_mapping#Affine_texture_mapping">perspective corrected</a>, <a href="https://en.wikipedia.org/wiki/Barycentric_coordinate_system">barycentric coordinates</a>, giving us a <code>uv</code> coordinate per pixel from <code>-1</code> to <code>+1</code> with zero at the center.</p><p>By performing the check <code>if (length(uv) &lt; 1.0)</code> we draw our color for fragments inside the circle and reject fragments outside of it. What we are doing is known as “Alpha testing”. Without diving too deeply and just to hint at what’s to come, what we have created with <code>length(uv)</code> is the <a href="https://en.wikipedia.org/wiki/Signed_distance_function#Applications">signed distance field</a> of a point.</p><blockquote><p>Just to clarify, the circle isn't "drawn with geometry", which would have finite resolution of the shape, depending on how many vertices we use. It's "drawn by the shader".</p><img src="https://blog.frost.kiwi/assets/kiwis/speak.svg"></blockquote><h2 id="ssaa" tabindex="-1">SSAA <a href="#ssaa">#</a></h2><p>SSAA stands for <a href="https://en.wikipedia.org/wiki/Supersampling">Super Sampling Anti-Aliasing</a>. Render it bigger, downsample to be smaller. The idea is as old as 3D rendering itself. In fact, the first movies with CGI all relied on this with the most naive of implementations. One example is the 1986 movie “<a href="https://en.wikipedia.org/wiki/Flight_of_the_Navigator">Flight of the Navigator</a>”, as covered by <a href="https://www.youtube.com/@CaptainDisillusion">Captain Disillusion</a> in the video below.</p><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/flight_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/flight.mp4" type="video/mp4"></video><figcaption>SSAA as used in "Flight of the Navigator" (1986)<br>Excerpt from <a href="https://www.youtube.com/watch?v=tyixMpuGEL8">"Flight of the Navigator | VFXcool"</a><br>YouTube Video by <a href="https://www.youtube.com/@CaptainDisillusion">Captain Disillusion</a></figcaption></figure><blockquote><p>1986 did it, so can we. Implemented in mere seconds. <b>Easy</b>, right?</p><img src="https://blog.frost.kiwi/assets/kiwis/ice.svg"></blockquote><div><p> <label for="nativeSSAA">Native<p>Resolution</p></label></p><p> <label for="halfSSAA">½<p>Resolution</p></label></p><p> <label for="quarterSSAA">¼<p>Resolution</p></label></p><p> <label for="eightSSAA">⅛<p>Resolution</p></label></p></div><canvas id="canvasSSAA" width="100%" height="400px"></canvas><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/ssaa.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/ssaa.png" alt="image"></p></details><details><summary>SSAA buffer Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/post.fs">post.fs</a></summary><pre><code><span>precision</span> <span>mediump</span> <span>float</span><span>;</span>

<span>uniform</span> <span>sampler2D</span> u_texture<span>;</span>
<span>varying</span> <span>vec2</span> texCoord<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
	gl_FragColor <span>=</span> <span>texture2D</span><span>(</span>u_texture<span>,</span> texCoord<span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleSSAA.js">circleSSAA.js</a></summary><pre><code><span>function</span> <span>setupSSAA</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> frameTexture<span>,</span> circleDrawFramebuffer<span>,</span> frameTextureLinear<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span><span>,</span>
			<span>premultipliedAlpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Setup Possibilities */</span>
	<span>let</span> renderbuffer <span>=</span> <span>null</span><span>;</span>
	<span>let</span> resolveFramebuffer <span>=</span> <span>null</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Post Shader */</span>
	<span>const</span> postShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		resolveFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>

		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTextureLinear <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> <span>(</span>canvas<span>.</span>width <span>/</span> resDiv<span>)</span> <span>*</span> <span>2</span><span>,</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span> <span>*</span> <span>2</span><span>,</span> frameTextureLinear<span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTextureLinear<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>(</span>canvas<span>.</span>width <span>/</span> resDiv<span>)</span> <span>*</span> <span>2</span><span>,</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span> <span>*</span> <span>2</span><span>)</span><span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>postShd<span>)</span><span>;</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>

		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTextureLinear<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteRenderbuffer</span><span>(</span>renderbuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p><a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleSSAA.js">circleSSAA.js</a> draws at twice the resolution to a texture, which fragment shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/post.fs">post.fs</a> reads from at standard resolution with <a href="https://docs.gl/es2/glTexParameter">GL_LINEAR</a> to perform SSAA. So we have <em>four</em> input pixels for every <em>one</em> output pixel we draw to the screen. But it’s somewhat strange: There is definitely Anti-Aliasing happening, but less than expected.</p><blockquote><p>There should be 4 steps of transparency, but we only get two!</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>Especially at lower resolutions, we can see the circle <em>does</em> actually have 4 steps of transparency, but mainly at the 45° “diagonals” of the circle. A circle has of course no sides, but at the axis-aligned “bottom” there are only 2 steps of transparency: Fully Opaque and 50% transparent, the 25% and 75% transparency steps are missing.</p><h3 id="conceptually-simple%2C-actually-hard" tabindex="-1">Conceptually simple, actually hard <a href="#conceptually-simple%2C-actually-hard">#</a></h3><p>We aren’t sampling against the circle shape at twice the resolution, we are sampling against the quantized result of the circle shape. Twice the resolution, but discrete pixels nonetheless. The combination of pixelation and sample placement doesn’t hold enough information where we need it the most: at the axis-aligned “flat parts”.</p><blockquote><p>Four times the memory <b>and</b> four times the calculation requirement, but only a half-assed result.</p><img src="https://blog.frost.kiwi/assets/kiwis/facepalm.svg"></blockquote><p>Implementing SSAA properly is a minute craft. Here we are drawing to a 2x resolution texture and down-sampling it with linear interpolation. So actually, this implementation needs 5x the amount of VRAM. A proper implementation samples the scene multiple times and combines the result without an intermediary buffer.</p><blockquote><p>With our implementation, we can't even do more than 2xSSAA with one texture read, as linear interpolation happens <a href="https://stackoverflow.com/questions/53896032/">only with 2x2 samples</a>.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><p>To combat axis-alignment artifacts like with our circle above, we need to place our SSAA samples better. There are <a href="https://en.wikipedia.org/wiki/Supersampling#Supersampling_patterns">multiple ways to do so</a>, all with pros and cons. To implement SSAA properly, we need deep integration with the rendering pipeline. For 3D primitives, this happens below API or engine, in the realm of vendors and drivers.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/sample-patterns.svg" alt="SAA sample patterns"><figcaption>SSAA sample patterns. <a href="https://en.wikipedia.org/wiki/Supersampling#Supersampling_patterns">Source</a></figcaption></figure><p>In fact, some of the best implementations were <a href="https://web.archive.org/web/20180716171211/https://naturalviolence.webs.com/sgssaa.htm">discovered by vendors on accident</a>, like <a href="https://www.youtube.com/watch?v=ntlYwrbUlWo">SGSSAA</a>. There are also ways in which SSAA can make your scene look <em>worse</em>. Depending on implementation, SSAA messes with <a href="https://en.wikipedia.org/wiki/Mipmap">mip-map</a> calculations. As a result the mip-map lod-bias may need adjustment, as explained in the <a href="https://web.archive.org/web/20180716171211/https://naturalviolence.webs.com/sgssaa.htm">article above</a>.</p><blockquote><p>WebXR UI package <a href="https://github.com/felixmariotto/three-mesh-ui">three-mesh-ui</a>, a package mature enough to be <a href="https://developers.meta.com/horizon/blog/project-flowerbed-a-webxr-case-study/">used by Meta</a>, uses shader-based rotated grid super sampling to achieve sharp text rendering in VR, <a href="https://github.com/felixmariotto/three-mesh-ui/blob/b9c19e542e5234bc964a44c1e7aa4eeb16676757/build/three-mesh-ui.module.js#L2964">as seen in the code</a>.</p><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><h2 id="msaa" tabindex="-1">MSAA <a href="#msaa">#</a></h2><p><a href="https://en.wikipedia.org/wiki/Multisample_anti-aliasing">MSAA</a> is super sampling, but only at the silhouette of models, overlapping geometry, and texture edges if “<a href="https://bgolus.medium.com/anti-aliased-alpha-test-the-esoteric-alpha-to-coverage-8b177335ae4f">Alpha to Coverage</a>” is enabled. MSAA is implemented by the graphics card in-hardware by the graphics vendors and what is supported depends on hardware. In the select box below you can choose different MSAA levels for our circle.</p><p><a href="https://opengl.gpuinfo.org/displaycapability.php?name=GL_MAX_SAMPLES">There is up to MSAA x64</a>, but what is available is implementation defined. WebGL 1 has no support, which is why the next canvas initializes a <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext">WebGL 2</a> context. In WebGL, NVIDIA limits MSAA to 8x on Windows, even if more is supported, whilst on Linux no such limit is in place. On smartphones you will only get exactly 4x, as discussed below.</p><div><p> <label for="nativeMSAA">Native<p>Resolution</p></label></p><p> <label for="halfMSAA">½<p>Resolution</p></label></p><p> <label for="quarterMSAA">¼<p>Resolution</p></label></p><p> <label for="eightMSAA">⅛<p>Resolution</p></label></p></div><canvas id="canvasMSAA" width="100%" height="400px"></canvas><div><p> <label for="1pxMSAA"><p>edge smoothing</p></label></p><p> <label for="sqrt2pxMSAA"><p>edge smoothing</p></label></p></div><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/msaa.png">MSAA 4x Screenshot</a>, in case WebGL 2 doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/msaa.png" alt="image"></p></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleMSAA.js">circleMSAA.js</a></summary><pre><code><span>function</span> <span>setupMSAA</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> circleSimpleFragSrc<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName<span>,</span> radioSmoothSize</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> frameTexture<span>,</span> circleDrawFramebuffer<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>let</span> pixelSmoothSize <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl2'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span><span>,</span>
			<span>premultipliedAlpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Setup Possibilities */</span>
	<span>let</span> samples <span>=</span> <span>1</span><span>;</span>
	<span>let</span> renderbuffer <span>=</span> <span>null</span><span>;</span>
	<span>let</span> resolveFramebuffer <span>=</span> <span>null</span><span>;</span>

	<span>const</span> maxSamples <span>=</span> gl<span>.</span><span>getParameter</span><span>(</span>gl<span>.</span><span>MAX_SAMPLES</span><span>)</span><span>;</span>

	<span>/* Enable the options in the MSAA dropdown based on maxSamples */</span>
	<span>const</span> msaaSelect <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>"MSAA"</span><span>)</span><span>;</span>
	<span>for</span> <span>(</span><span>let</span> option <span>of</span> msaaSelect<span>.</span>options<span>)</span> <span>{</span>
		<span>if</span> <span>(</span><span>parseInt</span><span>(</span>option<span>.</span>value<span>)</span> <span>&lt;=</span> maxSamples<span>)</span> <span>{</span>
			option<span>.</span>disabled <span>=</span> <span>false</span><span>;</span>
		<span>}</span>
	<span>}</span>
	samples <span>=</span> <span>parseInt</span><span>(</span>msaaSelect<span>.</span>value<span>)</span><span>;</span>

	<span>/* Event listener for select dropdown */</span>
	msaaSelect<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		<span>/* Get new MSAA level and reset-init buffers */</span>
		samples <span>=</span> <span>parseInt</span><span>(</span>msaaSelect<span>.</span>value<span>)</span><span>;</span>
		<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Smooth Size */</span>
	<span>const</span> radiosSmooth <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioSmoothSize<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radiosSmooth<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			pixelSmoothSize <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> pixelSizeCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"pixelSize"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>
	<span>const</span> circleShd_step <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleSimpleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation_step <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd_step<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle_step <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd_step<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle_step <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd_step<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Post Shader */</span>
	<span>const</span> postShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		gl<span>.</span><span>deleteRenderbuffer</span><span>(</span>renderbuffer<span>)</span><span>;</span>
		renderbuffer <span>=</span> gl<span>.</span><span>createRenderbuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindRenderbuffer</span><span>(</span>gl<span>.</span><span>RENDERBUFFER</span><span>,</span> renderbuffer<span>)</span><span>;</span>
		<span>const</span> errorMessageElement <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'sampleErrorMessage'</span><span>)</span><span>;</span>
		<span>/* Here we need two branches because of implementation specific
		   shenanigans. Mobile chips will always force any call to 
		   renderbufferStorageMultisample() to be 4x MSAA, so to have a noAA
		   comparison, we split the Framebuffer setup */</span>
		<span>if</span> <span>(</span>samples <span>!=</span> <span>1</span><span>)</span> <span>{</span>
			gl<span>.</span><span>renderbufferStorageMultisample</span><span>(</span>gl<span>.</span><span>RENDERBUFFER</span><span>,</span> samples<span>,</span> gl<span>.</span><span>RGBA8</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
			gl<span>.</span><span>framebufferRenderbuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>RENDERBUFFER</span><span>,</span> renderbuffer<span>)</span><span>;</span>

			<span>const</span> actualSamples <span>=</span> gl<span>.</span><span>getRenderbufferParameter</span><span>(</span>
				gl<span>.</span><span>RENDERBUFFER</span><span>,</span>
				gl<span>.</span><span>RENDERBUFFER_SAMPLES</span>
			<span>)</span><span>;</span>
			<span>if</span> <span>(</span>samples <span>!==</span> actualSamples<span>)</span> <span>{</span>
				errorMessageElement<span>.</span>style<span>.</span>display <span>=</span> <span>'block'</span><span>;</span>
				errorMessageElement<span>.</span>textContent <span>=</span> <span><span>`</span><span>⚠️ You chose MSAAx</span><span><span>${</span>samples<span>}</span></span><span>, but the graphics driver forced it to MSAAx</span><span><span>${</span>actualSamples<span>}</span></span><span>. You are probably on a mobile GPU, where this behavior is expected.</span><span>`</span></span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				errorMessageElement<span>.</span>style<span>.</span>display <span>=</span> <span>'none'</span><span>;</span>
			<span>}</span>
		<span>}</span> <span>else</span> <span>{</span>
			errorMessageElement<span>.</span>style<span>.</span>display <span>=</span> <span>'none'</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		resolveFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>DRAW_FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>DRAW_FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		gl<span>.</span><span>disable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>
		gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>SAMPLE_ALPHA_TO_COVERAGE</span><span>)</span><span>;</span>
		<span>/* Setup PostProcess Framebuffer */</span>
		<span>if</span> <span>(</span>samples <span>==</span> <span>1</span><span>)</span>
			gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>
		<span>else</span>
			gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span>samples <span>==</span> <span>1</span><span>)</span>
			gl<span>.</span><span>useProgram</span><span>(</span>circleShd_step<span>)</span><span>;</span>
		<span>else</span>
			gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		<span>if</span> <span>(</span>samples <span>==</span> <span>1</span><span>)</span> <span>{</span>
			<span>/* Here we need two branches because of implementation specific
   			   shenanigans. Mobile chips will always force any call to 
   			   renderbufferStorageMultisample() to be 4x MSAA, so to have a noAA
   			   comparison, we split the demo across two shaders */</span>
			gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle_step<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation_step<span>,</span> aspect_ratio<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle_step<span>,</span> circleSize<span>)</span><span>;</span>
		<span>}</span>
		<span>else</span> <span>{</span>
			gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>pixelSizeCircle<span>,</span> <span>(</span><span>2.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span> <span>*</span> pixelSmoothSize<span>)</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>disable</span><span>(</span>gl<span>.</span><span>SAMPLE_ALPHA_TO_COVERAGE</span><span>)</span><span>;</span>
		gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		<span>if</span> <span>(</span>samples <span>!==</span> <span>1</span><span>)</span> <span>{</span>
			gl<span>.</span><span>useProgram</span><span>(</span>postShd<span>)</span><span>;</span>
			gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>

			<span>/* Resolve the MSAA framebuffer to a regular texture */</span>
			gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>READ_FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
			gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>DRAW_FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>
			gl<span>.</span><span>blitFramebuffer</span><span>(</span>
				<span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>,</span>
				<span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>,</span>
				gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>,</span> gl<span>.</span><span>LINEAR</span>
			<span>)</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteRenderbuffer</span><span>(</span>renderbuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><blockquote><p>What is edge smoothing and how does MSAA even know what to sample against? For now we skip the shader code and implementation. First let's take a look at MSAA's pros and cons in general.</p><img src="https://blog.frost.kiwi/assets/kiwis/speak.svg"></blockquote><h3 id="implementation-specific-headaches" tabindex="-1">Implementation specific headaches <a href="#implementation-specific-headaches">#</a></h3><p>We rely on hardware to do the Anti-Aliasing, which obviously leads to the problem that user hardware may not support what we need. The sampling patterns MSAA uses may also do things we don’t expect. Depending on what your hardware does, you may see the circle’s edge transparency steps appearing “in the wrong order”.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/outoforder.png" alt="Sample pattern and circle shape clash: pixels are seemingly 'checkerboxed'"><figcaption>Sample pattern and circle shape clash: pixels are seemingly "checkerboxed"</figcaption></figure><p>When MSAA became required with <a href="https://en.wikipedia.org/wiki/OpenGL#OpenGL_3.0">OpenGL 3</a> &amp; <a href="https://en.wikipedia.org/wiki/DirectX#DirectX_10">DirectX 10</a> era of hardware, support was especially hit &amp; miss. Even latest <a href="https://en.wikipedia.org/wiki/Intel_GMA#GMA_4500">Intel GMA</a> iGPUs expose the OpenGL extension <a href="https://registry.khronos.org/OpenGL/extensions/EXT/EXT_framebuffer_multisample.txt"><code>EXT_framebuffer_multisample</code></a>, but don’t in-fact support MSAA, <a href="https://community.khronos.org/t/yet-another-intel-multisample-thread/69614/2">which led to confusion</a>. But also in more recent smartphones, support just <a href="https://issues.chromium.org/issues/40114751">wasn’t that clear-cut</a>.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/iOSroundedMSAA.png" alt="iOS 2xMSAA, created by rounding transparency of 4xMSAA"><figcaption>Double edges - iOS 2xMSAA, created by iOS rounding transparency of 4xMSAA</figcaption></figure><p>Mobile chips support <em>exactly</em> MSAAx4 and things are weird. Android will let you pick 2x, but the driver will force 4x anyways. iPhones &amp; iPads do something rather stupid: Choosing 2x will make it 4x, but transparency will be rounded to nearest 50% multiple, leading to double edges in our example. There is hardware specific reason:</p><h3 id="performance-cost%3A-(maybe)-zero" tabindex="-1">Performance cost: (maybe) Zero <a href="#performance-cost%3A-(maybe)-zero">#</a></h3><p>Looking at modern video games, one might believe that MSAA is of the past. It usually brings a hefty performance penalty after all. Surprisingly, it’s still the king under certain circumstances and in very specific situations, even performance free.</p><blockquote><p>As a gamer, this goes against instinct...</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/MSAA-PerformanceFree_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/MSAA-PerformanceFree.mp4" type="video/mp4"></video><figcaption>Video: MSAA 4x is performance free in certain contexts<br>Excerpt from <a href="https://gdcvault.com/play/1024538">"Developing High Performance Games for Different Mobile VR Platforms"</a><br>GDC 2017 talk by <a href="https://www.linkedin.com/in/rahulprasad2/">Rahul Prasad</a></figcaption></figure><blockquote><p><a href="https://www.linkedin.com/in/rahulprasad2/">Rahul Prasad:</a> Use MSAA […] It’s actually not as expensive on mobile as it is on desktop, it’s one of the nice things you get on mobile. […] On some (mobile) GPUs 4x (MSAA) is free, so use it when you have it.</p></blockquote><p>As explained by <a href="https://www.linkedin.com/in/rahulprasad2/">Rahul Prasad</a> in the above talk, in VR 4xMSAA is a must and may come free on certain mobile GPUs. The specific reason would derail the blog post, but in case you want to go down that particular rabbit hole, here is Epic Games’ <a href="https://www.linkedin.com/in/niklas-smedberg-a96466/">Niklas Smedberg</a> giving a run-down.</p><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/tile-based-gpus_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/tile-based-gpus.mp4" type="video/mp4"></video><figcaption>Video: Tiled based rendering GPU architecture<br>Excerpt from <a href="https://gdcvault.com/play/1020756">"Next-Generation AAA Mobile Rendering"</a><br>GDC 2014 talk by <a href="https://www.linkedin.com/in/niklas-smedberg-a96466/">Niklas Smedberg</a> and <a href="https://twitter.com/NOTimothyLottes">Timothy Lottes</a></figcaption></figure><p>In short, this is possible under the condition of <a href="https://gamedevelopment.tutsplus.com/forward-rendering-vs-deferred-rendering--gamedev-12342a">forward rendering</a> with geometry that is not too dense and the GPU having <a href="https://developer.arm.com/documentation/102662/0100/Tile-based-GPUs">tiled-based rendering architecture</a>, which allows the GPU to perform MSAA calculations without heavy memory access and thus <a href="https://blog.frost.kiwi/WebGL-LUTS-made-simple/#performance-cost%3A-zero">latency hiding</a> the cost of the calculation. Here’s <a href="https://github.com/KhronosGroup/Vulkan-Samples/tree/main/samples/performance/msaa#color-resolve">deep dive</a>, if you are interested.</p><h3 id="a-complex-toolbox" tabindex="-1">A complex toolbox <a href="#a-complex-toolbox">#</a></h3><p>MSAA <a href="https://docs.gl/gl3/glGetMultisample">gives you access</a> to the samples, making <a href="https://therealmjp.github.io/posts/msaa-resolve-filters/">custom MSAA filtering curves</a> a possibility. It also allows you to <a href="https://bgolus.medium.com/rendering-a-sphere-on-a-quad-13c92025570c">merge both standard mesh-based and signed-distance-field rendering</a> via <a href="https://bgolus.medium.com/anti-aliased-alpha-test-the-esoteric-alpha-to-coverage-8b177335ae4f">alpha to coverage</a>. This complex features set made possible the most out-of-the-box thinking I ever witnessed in graphics programming:</p><p><a href="https://en.wikipedia.org/wiki/Assassin%27s_Creed_Unity">Assassin’s Creed Unity</a> used MSAA to render at half resolution and reconstruct only some buffers to full-res from MSAA samples, as described on page 48 of the talk “<a href="https://advances.realtimerendering.com/s2015/aaltonenhaar_siggraph2015_combined_final_footer_220dpi.pdf">GPU-Driven Rendering Pipelines</a>” by <a href="https://www.linkedin.com/in/ulrich-haar-730407218">Ulrich Haar</a> and <a href="https://x.com/SebAaltonen">Sebastian Aaltonen</a>. Kinda like <a href="https://developer.nvidia.com/vrworks/graphics/variablerateshading">variable rate shading</a>, but implemented with duct-tape and without vendor support.</p><blockquote><p>The brain-melting lengths to which graphics programmers go to utilize hardware acceleration to the last drop has me sometimes in awe.</p><img src="https://blog.frost.kiwi/assets/kiwis/surprised.svg"></blockquote><h2 id="post-process-anti-aliasing" tabindex="-1">Post-Process Anti-Aliasing <a href="#post-process-anti-aliasing">#</a></h2><p>In 2009 a <a href="https://web.archive.org/web/20141205052029/http://visual-computing.intel-research.net/publications/papers/2009/mlaa/mlaa.pdf">paper</a> by <a href="https://research.nvidia.com/person/alexander-reshetov">Alexander Reshetov</a> struck the graphics programming world like a ton of bricks: take the blocky, aliased result of the rendered image, find edges and classify the pixels into tetris-like shapes with per-shape filtering rules and remove the blocky edge. Anti-Aliasing based on the <a href="https://en.wikipedia.org/wiki/Mathematical_morphology">morphology</a> of pixels - <a href="https://www.iryoku.com/mlaa/">MLAA</a> was born.</p><p>Computationally cheap, easy to implement. Later it was refined with more emphasis on removing sub-pixel artifacts to become <a href="https://www.iryoku.com/smaa/">SMAA</a>. It became a fan favorite, with <a href="https://mrhaandi.blogspot.com/p/injectsmaa.html?m=1">an injector being developed early on</a> to put SMAA into games that didn’t support it. Some considered these too blurry, the saying “vaseline on the screen” was coined.</p><blockquote><p>It was the future, a sign of things to come. No more shaky hardware support. Like <a href="https://en.wikipedia.org/wiki/Fixed-function">Fixed-Function pipelines</a> died in favor of programmable shaders Anti-Aliasing too became "shader based".</p><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><h3 id="fxaa" tabindex="-1">FXAA <a href="#fxaa">#</a></h3><p>We’ll take a close look at an algorithm that was inspired by MLAA, developed by <a href="https://x.com/NOTimothyLottes">Timothy Lottes</a>. “Fast approximate anti-aliasing”, <a href="https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf">FXAA</a>. In fact, when it came into wide circulation, it received some incredible press. <a href="https://www.realtimerendering.com/blog/fxaa-rules-ok/">Among others</a>, <a href="https://blog.codinghorror.com/about-me/">Jeff Atwood</a> pulled neither bold fonts nor punches in his <a href="https://blog.codinghorror.com/fast-approximate-anti-aliasing-fxaa/">2011 blog post</a>, later <a href="http://kotaku.com/5866780/">republished by Kotaku</a>.</p><blockquote><p><a href="https://blog.codinghorror.com/about-me/"><strong>Jeff Atwood</strong></a>: The FXAA method is so good, in fact, it makes all other forms of full-screen anti-aliasing pretty much obsolete overnight. <strong>If you have an FXAA option in your game, you should enable it immediately</strong> and ignore any other AA options.</p></blockquote><p>Let’s see what the hype was about. The final version publicly released was FXAA 3.11 on <a href="https://web.archive.org/web/20120121124756/http://timothylottes.blogspot.com/2011/08/fxaa-311-bug-fixes-for-360.html">August 12th 2011</a> and the following demos are based on this. First, let’s take a look at our circle with FXAA doing the Anti-Aliasing at default settings.</p><div><p> <label for="nativeFXAA">Native<p>Resolution</p></label></p><p> <label for="halfFXAA">½<p>Resolution</p></label></p><p> <label for="quarterFXAA">¼<p>Resolution</p></label></p><p> <label for="eightFXAA">⅛<p>Resolution</p></label></p></div><canvas id="canvasFXAA" width="100%" height="400px"></canvas><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/fxaa.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/fxaa.png" alt="image"></p></details><details><summary>WebGL FXAA Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/post-FXAA.fs">post-FXAA.fs</a></summary><pre><code><span>precision</span> <span>mediump</span> <span>float</span><span>;</span>

<span>uniform</span> <span>sampler2D</span> u_texture<span>;</span>
<span>varying</span> <span>vec2</span> texCoord<span>;</span>

<span>uniform</span> <span>vec2</span> RcpFrame<span>;</span>

<span>/* FXAA 3.11 code, after passing through the preprocessor with settings:
    - FXAA PC QUALITY
	  - FXAA_PC 1
	- Default QUALITY
	  - FXAA_QUALITY_PRESET 12
	- Optimizations disabled for WebGL 1
	  - FXAA_GLSL_120 1
	  - FXAA_FAST_PIXEL_OFFSET 0
	  - Further optimizations possible with WebGL 2 or by enabling extension
	    GL_EXT_shader_texture_lod
	- GREEN_AS_LUMA is disabled
	  - FXAA_GREEN_AS_LUMA 0
	  - Input must be RGBL
*/</span>

<span>float</span> <span>FxaaLuma</span><span>(</span><span>vec4</span> rgba<span>)</span> <span>{</span> <span>return</span> rgba<span>.</span>w<span>;</span> <span>}</span>
<span>vec4</span> <span>FxaaPixelShader</span><span>(</span>
	<span>vec2</span> pos<span>,</span>
	<span>sampler2D</span> tex<span>,</span>
	<span>vec2</span> fxaaQualityRcpFrame<span>,</span>
	<span>float</span> fxaaQualitySubpix<span>,</span>
	<span>float</span> fxaaQualityEdgeThreshold<span>,</span>
	<span>float</span> fxaaQualityEdgeThresholdMin<span>)</span>
<span>{</span>
	<span>vec2</span> posM<span>;</span>
	posM<span>.</span>x <span>=</span> pos<span>.</span>x<span>;</span>
	posM<span>.</span>y <span>=</span> pos<span>.</span>y<span>;</span>
	<span>vec4</span> rgbyM <span>=</span> <span>texture2D</span><span>(</span>tex<span>,</span> posM<span>)</span><span>;</span>

	<span>float</span> lumaS <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>1</span><span>,</span> <span>0</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>0</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>0</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>

	<span>float</span> maxSM <span>=</span> <span>max</span><span>(</span>lumaS<span>,</span> rgbyM<span>.</span>w<span>)</span><span>;</span>
	<span>float</span> minSM <span>=</span> <span>min</span><span>(</span>lumaS<span>,</span> rgbyM<span>.</span>w<span>)</span><span>;</span>
	<span>float</span> maxESM <span>=</span> <span>max</span><span>(</span>lumaE<span>,</span> maxSM<span>)</span><span>;</span>
	<span>float</span> minESM <span>=</span> <span>min</span><span>(</span>lumaE<span>,</span> minSM<span>)</span><span>;</span>
	<span>float</span> maxWN <span>=</span> <span>max</span><span>(</span>lumaN<span>,</span> lumaW<span>)</span><span>;</span>
	<span>float</span> minWN <span>=</span> <span>min</span><span>(</span>lumaN<span>,</span> lumaW<span>)</span><span>;</span>
	<span>float</span> rangeMax <span>=</span> <span>max</span><span>(</span>maxWN<span>,</span> maxESM<span>)</span><span>;</span>
	<span>float</span> rangeMin <span>=</span> <span>min</span><span>(</span>minWN<span>,</span> minESM<span>)</span><span>;</span>
	<span>float</span> rangeMaxScaled <span>=</span> rangeMax <span>*</span> fxaaQualityEdgeThreshold<span>;</span>
	<span>float</span> range <span>=</span> rangeMax <span>-</span> rangeMin<span>;</span>
	<span>float</span> rangeMaxClamped <span>=</span> <span>max</span><span>(</span>fxaaQualityEdgeThresholdMin<span>,</span> rangeMaxScaled<span>)</span><span>;</span>
	<span>bool</span> earlyExit <span>=</span> range <span>&lt;</span> rangeMaxClamped<span>;</span>

	<span>if</span> <span>(</span>earlyExit<span>)</span>
		<span>return</span> rgbyM<span>;</span>

	<span>float</span> lumaNW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaSE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaNE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaSW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>

	<span>float</span> lumaNS <span>=</span> lumaN <span>+</span> lumaS<span>;</span>
	<span>float</span> lumaWE <span>=</span> lumaW <span>+</span> lumaE<span>;</span>
	<span>float</span> subpixRcpRange <span>=</span> <span>1.0</span> <span>/</span> range<span>;</span>
	<span>float</span> subpixNSWE <span>=</span> lumaNS <span>+</span> lumaWE<span>;</span>
	<span>float</span> edgeHorz1 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> rgbyM<span>.</span>w<span>)</span> <span>+</span> lumaNS<span>;</span>
	<span>float</span> edgeVert1 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> rgbyM<span>.</span>w<span>)</span> <span>+</span> lumaWE<span>;</span>

	<span>float</span> lumaNESE <span>=</span> lumaNE <span>+</span> lumaSE<span>;</span>
	<span>float</span> lumaNWNE <span>=</span> lumaNW <span>+</span> lumaNE<span>;</span>
	<span>float</span> edgeHorz2 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaE<span>)</span> <span>+</span> lumaNESE<span>;</span>
	<span>float</span> edgeVert2 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaN<span>)</span> <span>+</span> lumaNWNE<span>;</span>

	<span>float</span> lumaNWSW <span>=</span> lumaNW <span>+</span> lumaSW<span>;</span>
	<span>float</span> lumaSWSE <span>=</span> lumaSW <span>+</span> lumaSE<span>;</span>
	<span>float</span> edgeHorz4 <span>=</span> <span>(</span><span>abs</span><span>(</span>edgeHorz1<span>)</span> <span>*</span> <span>2.0</span><span>)</span> <span>+</span> <span>abs</span><span>(</span>edgeHorz2<span>)</span><span>;</span>
	<span>float</span> edgeVert4 <span>=</span> <span>(</span><span>abs</span><span>(</span>edgeVert1<span>)</span> <span>*</span> <span>2.0</span><span>)</span> <span>+</span> <span>abs</span><span>(</span>edgeVert2<span>)</span><span>;</span>
	<span>float</span> edgeHorz3 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaW<span>)</span> <span>+</span> lumaNWSW<span>;</span>
	<span>float</span> edgeVert3 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaS<span>)</span> <span>+</span> lumaSWSE<span>;</span>
	<span>float</span> edgeHorz <span>=</span> <span>abs</span><span>(</span>edgeHorz3<span>)</span> <span>+</span> edgeHorz4<span>;</span>
	<span>float</span> edgeVert <span>=</span> <span>abs</span><span>(</span>edgeVert3<span>)</span> <span>+</span> edgeVert4<span>;</span>

	<span>float</span> subpixNWSWNESE <span>=</span> lumaNWSW <span>+</span> lumaNESE<span>;</span>
	<span>float</span> lengthSign <span>=</span> fxaaQualityRcpFrame<span>.</span>x<span>;</span>
	<span>bool</span> horzSpan <span>=</span> edgeHorz <span>&gt;=</span> edgeVert<span>;</span>
	<span>float</span> subpixA <span>=</span> subpixNSWE <span>*</span> <span>2.0</span> <span>+</span> subpixNWSWNESE<span>;</span>

	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		lumaN <span>=</span> lumaW<span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		lumaS <span>=</span> lumaE<span>;</span>
	<span>if</span> <span>(</span>horzSpan<span>)</span>
		lengthSign <span>=</span> fxaaQualityRcpFrame<span>.</span>y<span>;</span>
	<span>float</span> subpixB <span>=</span> <span>(</span>subpixA <span>*</span> <span>(</span><span>1.0</span> <span>/</span> <span>12.0</span><span>)</span><span>)</span> <span>-</span> rgbyM<span>.</span>w<span>;</span>

	<span>float</span> gradientN <span>=</span> lumaN <span>-</span> rgbyM<span>.</span>w<span>;</span>
	<span>float</span> gradientS <span>=</span> lumaS <span>-</span> rgbyM<span>.</span>w<span>;</span>
	<span>float</span> lumaNN <span>=</span> lumaN <span>+</span> rgbyM<span>.</span>w<span>;</span>
	<span>float</span> lumaSS <span>=</span> lumaS <span>+</span> rgbyM<span>.</span>w<span>;</span>
	<span>bool</span> pairN <span>=</span> <span>abs</span><span>(</span>gradientN<span>)</span> <span>&gt;=</span> <span>abs</span><span>(</span>gradientS<span>)</span><span>;</span>
	<span>float</span> gradient <span>=</span> <span>max</span><span>(</span><span>abs</span><span>(</span>gradientN<span>)</span><span>,</span> <span>abs</span><span>(</span>gradientS<span>)</span><span>)</span><span>;</span>
	<span>if</span> <span>(</span>pairN<span>)</span>
		lengthSign <span>=</span> <span>-</span>lengthSign<span>;</span>
	<span>float</span> subpixC <span>=</span> <span>clamp</span><span>(</span><span>abs</span><span>(</span>subpixB<span>)</span> <span>*</span> subpixRcpRange<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>

	<span>vec2</span> posB<span>;</span>
	posB<span>.</span>x <span>=</span> posM<span>.</span>x<span>;</span>
	posB<span>.</span>y <span>=</span> posM<span>.</span>y<span>;</span>
	<span>vec2</span> offNP<span>;</span>
	offNP<span>.</span>x <span>=</span> <span>(</span><span>!</span>horzSpan<span>)</span> <span>?</span> <span>0.0</span> <span>:</span> fxaaQualityRcpFrame<span>.</span>x<span>;</span>
	offNP<span>.</span>y <span>=</span> <span>(</span>horzSpan<span>)</span> <span>?</span> <span>0.0</span> <span>:</span> fxaaQualityRcpFrame<span>.</span>y<span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		posB<span>.</span>x <span>+=</span> lengthSign <span>*</span> <span>0.5</span><span>;</span>
	<span>if</span> <span>(</span>horzSpan<span>)</span>
		posB<span>.</span>y <span>+=</span> lengthSign <span>*</span> <span>0.5</span><span>;</span>

	<span>vec2</span> posN<span>;</span>
	posN<span>.</span>x <span>=</span> posB<span>.</span>x <span>-</span> offNP<span>.</span>x <span>*</span> <span>1.0</span><span>;</span>
	posN<span>.</span>y <span>=</span> posB<span>.</span>y <span>-</span> offNP<span>.</span>y <span>*</span> <span>1.0</span><span>;</span>
	<span>vec2</span> posP<span>;</span>
	posP<span>.</span>x <span>=</span> posB<span>.</span>x <span>+</span> offNP<span>.</span>x <span>*</span> <span>1.0</span><span>;</span>
	posP<span>.</span>y <span>=</span> posB<span>.</span>y <span>+</span> offNP<span>.</span>y <span>*</span> <span>1.0</span><span>;</span>
	<span>float</span> subpixD <span>=</span> <span>(</span><span>(</span><span>-</span><span>2.0</span><span>)</span> <span>*</span> subpixC<span>)</span> <span>+</span> <span>3.0</span><span>;</span>
	<span>float</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>)</span><span>)</span><span>;</span>
	<span>float</span> subpixE <span>=</span> subpixC <span>*</span> subpixC<span>;</span>
	<span>float</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>)</span><span>)</span><span>;</span>

	<span>if</span> <span>(</span><span>!</span>pairN<span>)</span>
		lumaNN <span>=</span> lumaSS<span>;</span>
	<span>float</span> gradientScaled <span>=</span> gradient <span>*</span> <span>1.0</span> <span>/</span> <span>4.0</span><span>;</span>
	<span>float</span> lumaMM <span>=</span> rgbyM<span>.</span>w <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
	<span>float</span> subpixF <span>=</span> subpixD <span>*</span> subpixE<span>;</span>
	<span>bool</span> lumaMLTZero <span>=</span> lumaMM <span>&lt;</span> <span>0.0</span><span>;</span>

	lumaEndN <span>-=</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
	lumaEndP <span>-=</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
	<span>bool</span> doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
	<span>bool</span> doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
	<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
		posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> <span>1.5</span><span>;</span>
	<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
		posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> <span>1.5</span><span>;</span>
	<span>bool</span> doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
	<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
		posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> <span>1.5</span><span>;</span>
	<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
		posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> <span>1.5</span><span>;</span>

	<span>if</span> <span>(</span>doneNP<span>)</span>
	<span>{</span>
		<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
			lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
			lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
			lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
			lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
		doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
		doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
			posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> <span>2.0</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
			posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> <span>2.0</span><span>;</span>
		doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
			posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> <span>2.0</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
			posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> <span>2.0</span><span>;</span>

		<span>if</span> <span>(</span>doneNP<span>)</span>
		<span>{</span>
			<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
				lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
				lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
				lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
				lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
			doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
			doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
				posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> <span>4.0</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
				posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> <span>4.0</span><span>;</span>
			doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
				posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> <span>4.0</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
				posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> <span>4.0</span><span>;</span>

			<span>if</span> <span>(</span>doneNP<span>)</span>
			<span>{</span>
				<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
					lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
					lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
					lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
					lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
				doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
				doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
					posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> <span>12.0</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
					posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> <span>12.0</span><span>;</span>
				doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
					posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> <span>12.0</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
					posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> <span>12.0</span><span>;</span>
			<span>}</span>
		<span>}</span>
	<span>}</span>

	<span>float</span> dstN <span>=</span> posM<span>.</span>x <span>-</span> posN<span>.</span>x<span>;</span>
	<span>float</span> dstP <span>=</span> posP<span>.</span>x <span>-</span> posM<span>.</span>x<span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		dstN <span>=</span> posM<span>.</span>y <span>-</span> posN<span>.</span>y<span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		dstP <span>=</span> posP<span>.</span>y <span>-</span> posM<span>.</span>y<span>;</span>

	<span>bool</span> goodSpanN <span>=</span> <span>(</span>lumaEndN <span>&lt;</span> <span>0.0</span><span>)</span> <span>!=</span> lumaMLTZero<span>;</span>
	<span>float</span> spanLength <span>=</span> <span>(</span>dstP <span>+</span> dstN<span>)</span><span>;</span>
	<span>bool</span> goodSpanP <span>=</span> <span>(</span>lumaEndP <span>&lt;</span> <span>0.0</span><span>)</span> <span>!=</span> lumaMLTZero<span>;</span>
	<span>float</span> spanLengthRcp <span>=</span> <span>1.0</span> <span>/</span> spanLength<span>;</span>

	<span>bool</span> directionN <span>=</span> dstN <span>&lt;</span> dstP<span>;</span>
	<span>float</span> dst <span>=</span> <span>min</span><span>(</span>dstN<span>,</span> dstP<span>)</span><span>;</span>
	<span>bool</span> goodSpan <span>=</span> directionN <span>?</span> goodSpanN <span>:</span> goodSpanP<span>;</span>
	<span>float</span> subpixG <span>=</span> subpixF <span>*</span> subpixF<span>;</span>
	<span>float</span> pixelOffset <span>=</span> <span>(</span>dst <span>*</span> <span>(</span><span>-</span>spanLengthRcp<span>)</span><span>)</span> <span>+</span> <span>0.5</span><span>;</span>
	<span>float</span> subpixH <span>=</span> subpixG <span>*</span> fxaaQualitySubpix<span>;</span>

	<span>float</span> pixelOffsetGood <span>=</span> goodSpan <span>?</span> pixelOffset <span>:</span> <span>0.0</span><span>;</span>
	<span>float</span> pixelOffsetSubpix <span>=</span> <span>max</span><span>(</span>pixelOffsetGood<span>,</span> subpixH<span>)</span><span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		posM<span>.</span>x <span>+=</span> pixelOffsetSubpix <span>*</span> lengthSign<span>;</span>
	<span>if</span> <span>(</span>horzSpan<span>)</span>
		posM<span>.</span>y <span>+=</span> pixelOffsetSubpix <span>*</span> lengthSign<span>;</span>

	<span>return</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM<span>)</span><span>.</span>xyz<span>,</span> rgbyM<span>.</span>w<span>)</span><span>;</span>
<span>}</span>


<span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
	gl_FragColor <span>=</span> <span>FxaaPixelShader</span><span>(</span>
		texCoord<span>,</span> u_texture<span>,</span> RcpFrame<span>,</span> <span>0.75</span><span>,</span> <span>0.166</span><span>,</span> <span>0.0833</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleFXAA.js">circleFXAA.js</a></summary><pre><code><span>function</span> <span>setupFXAA</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> frameTexture<span>,</span> circleDrawFramebuffer<span>,</span> frameTextureLinear<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span><span>,</span>
			<span>premultipliedAlpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Setup Possibilities */</span>
	<span>let</span> samples <span>=</span> <span>1</span><span>;</span>
	<span>let</span> renderbuffer <span>=</span> <span>null</span><span>;</span>
	<span>let</span> resolveFramebuffer <span>=</span> <span>null</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Post Shader */</span>
	<span>const</span> postShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>)</span><span>;</span>
	<span>const</span> rcpFrameLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>postShd<span>,</span> <span>"RcpFrame"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		resolveFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>

		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTextureLinear <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTextureLinear<span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTextureLinear<span>,</span> <span>0</span><span>)</span><span>;</span>

		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>postShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>rcpFrameLocation<span>,</span> <span>1.0</span> <span>/</span> <span>(</span>canvas<span>.</span>width <span>/</span> resDiv<span>)</span><span>,</span> <span>1.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span><span>;</span>
		gl<span>.</span><span>disable</span><span>(</span>gl<span>.</span><span>SAMPLE_ALPHA_TO_COVERAGE</span><span>)</span><span>;</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>

		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTextureLinear<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>


		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteRenderbuffer</span><span>(</span>renderbuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p>A bit of a weird result. It looks good if the circle wouldn’t move. Perfectly smooth edges. But the circle distorts as it moves. The axis-aligned top and bottom especially have a little nub that appears and disappears. And switching to lower resolutions, the circle even loses its round shape, <a href="https://www.youtube.com/watch?v=x8TO-nrUtSI">wobbling like Play Station 1 graphics</a>.</p><p>Per-pixel, FXAA considers only the 3x3 neighborhood, so it can’t possibly know that this area is part of a big shape. But it also doesn’t just “blur edges”, as often said. As explained in the <a href="https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf">official whitepaper</a>, it finds the edge’s direction and shifts the pixel’s coordinates to let the performance free linear interpolation do the blending.</p><p>For our demo here, wrong tool for the job. Really, we didn’t do FXAA justice with our example. FXAA was created for another use case and has many settings and presets. It was created to anti-alias more complex scenes. Let’s give it a fair shot!</p><h4 id="fxaa-full-demo" tabindex="-1">FXAA full demo <a href="#fxaa-full-demo">#</a></h4><p>A scene from my favorite piece of software in existence: <a href="https://store.steampowered.com/app/244630/NEOTOKYO/">NeoTokyo°</a>. I created a bright area light in an NT° map and moved a bench to create an area of strong aliasing. The following demo uses the aliased output from <a href="https://store.steampowered.com/app/244630/NEOTOKYO/">NeoTokyo°</a>, calculates the required luminance channel and applies FXAA. All FXAA presets and settings at your finger tips.</p><blockquote><p>This has fixed resolution and will only be at you device's native resolution, if your device has no dpi scaling and the browser is at 100% zoom.</p><img src="https://blog.frost.kiwi/assets/kiwis/speak.svg"></blockquote><p><span><label> Enable FXAA</label> </span><span><label> Enable Red Box</label> </span><span><label> Play / Pause</label></span></p><table><tbody><tr><td colspan="4"><div><p><span><label> Show Luma</label> </span><span><label> Green as Luma</label></span></p></div></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>FXAA_QUALITY_PRESET</code></td></tr><tr><td><code>FXAA_QUALITY_PRESET</code></td><td colspan="2"></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>fxaaQualitySubpix</code></td></tr><tr><td><code>fxaaQualitySubpix</code></td><td></td><td><output id="fxaaQualitySubpixValue">0.75</output></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>fxaaQualityEdgeThreshold</code></td></tr><tr><td><code>fxaaQualityEdgeThreshold</code></td><td></td><td><output id="fxaaQualityEdgeThresholdValue">0.166</output></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>fxaaQualityEdgeThresholdMin</code></td></tr><tr><td><code>fxaaQualityEdgeThresholdMin</code></td><td></td><td><output id="fxaaQualityEdgeThresholdMinValue">0.0833</output></td><td></td></tr><tr><td colspan="4"></td></tr></tbody></table><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/fxaainteractive.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/fxaainteractive.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/FXAA-interactive.vs">FXAA-interactive.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* FXAA expects flipped, DirectX style UV coordinates */</span>
	uv <span>=</span> vtx <span>*</span> <span>vec2</span><span>(</span><span>0.5</span><span>,</span> <span>-</span><span>0.5</span><span>)</span> <span>+</span> <span>0.5</span><span>;</span>
	gl_Position <span>=</span> <span>vec4</span><span>(</span>vtx<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/FXAA-interactive.fs">FXAA-interactive.fs</a></summary><pre><code><span>precision</span> <span>highp</span> <span>float</span><span>;</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>

<span>uniform</span> <span>sampler2D</span> texture<span>;</span>
<span>uniform</span> <span>vec2</span> RcpFrame<span>;</span>
<span>uniform</span> <span>float</span> u_fxaaQualitySubpix<span>;</span>
<span>uniform</span> <span>float</span> u_fxaaQualityEdgeThreshold<span>;</span>
<span>uniform</span> <span>float</span> u_fxaaQualityEdgeThresholdMin<span>;</span>

<span>/*============================================================================
                           FXAA QUALITY - PRESETS
============================================================================*/</span>
<span>/*============================================================================
                     FXAA QUALITY - MEDIUM DITHER PRESETS
============================================================================*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>10</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>3</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>3.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>11</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>4</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>3.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>12</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>13</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>6</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>14</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>7</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>15</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>8</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>

<span>/*============================================================================
                     FXAA QUALITY - LOW DITHER PRESETS
============================================================================*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>20</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>3</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>21</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>4</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>22</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>23</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>6</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>24</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>7</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>3.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>25</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>8</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>26</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>9</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>27</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>10</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P9</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>28</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>11</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P9</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P10</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>29</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>12</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P9</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P10</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P11</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>

<span>/*============================================================================
                     FXAA QUALITY - EXTREME QUALITY
============================================================================*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>39</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>12</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P9</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P10</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P11</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>


<span>/*============================================================================
                   GREEN AS LUMA OPTION SUPPORT FUNCTION
============================================================================*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_GREEN_AS_LUMA <span>==</span> <span>0</span><span>)</span></span></span>
    <span>float</span> <span>FxaaLuma</span><span>(</span><span>vec4</span> rgba<span>)</span> <span>{</span> <span>return</span> rgba<span>.</span>w<span>;</span> <span>}</span>
<span><span>#</span><span>else</span></span>
    <span>float</span> <span>FxaaLuma</span><span>(</span><span>vec4</span> rgba<span>)</span> <span>{</span> <span>return</span> rgba<span>.</span>y<span>;</span> <span>}</span>
<span><span>#</span><span>endif</span>    </span>

<span>/*============================================================================
                             FXAA3 QUALITY - PC
============================================================================*/</span>
<span>vec4</span> <span>FxaaPixelShader</span><span>(</span>
    <span>//</span>
    <span>// Use noperspective interpolation here (turn off perspective interpolation).</span>
    <span>// {xy} = center of pixel</span>
    <span>vec2</span> pos<span>,</span>
    <span>//</span>
    <span>// Input color texture.</span>
    <span>// {rgb_} = color in linear or perceptual color space</span>
    <span>// if (FXAA_GREEN_AS_LUMA == 0)</span>
    <span>//     {__a} = luma in perceptual color space (not linear)</span>
    <span>sampler2D</span> tex<span>,</span>
    <span>//</span>
    <span>// Only used on FXAA Quality.</span>
    <span>// This must be from a constant/uniform.</span>
    <span>// {x_} = 1.0/screenWidthInPixels</span>
    <span>// {_y} = 1.0/screenHeightInPixels</span>
    <span>vec2</span> fxaaQualityRcpFrame<span>,</span>
    <span>//</span>
    <span>// Only used on FXAA Quality.</span>
    <span>// This used to be the FXAA_QUALITY_SUBPIX define.</span>
    <span>// It is here now to allow easier tuning.</span>
    <span>// Choose the amount of sub-pixel aliasing removal.</span>
    <span>// This can effect sharpness.</span>
    <span>//   1.00 - upper limit (softer)</span>
    <span>//   0.75 - default amount of filtering</span>
    <span>//   0.50 - lower limit (sharper, less sub-pixel aliasing removal)</span>
    <span>//   0.25 - almost off</span>
    <span>//   0.00 - completely off</span>
    <span>float</span> fxaaQualitySubpix<span>,</span>
    <span>//</span>
    <span>// Only used on FXAA Quality.</span>
    <span>// This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.</span>
    <span>// It is here now to allow easier tuning.</span>
    <span>// The minimum amount of local contrast required to apply algorithm.</span>
    <span>//   0.333 - too little (faster)</span>
    <span>//   0.250 - low quality</span>
    <span>//   0.166 - default</span>
    <span>//   0.125 - high quality </span>
    <span>//   0.063 - overkill (slower)</span>
    <span>float</span> fxaaQualityEdgeThreshold<span>,</span>
    <span>//</span>
    <span>// Only used on FXAA Quality.</span>
    <span>// This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.</span>
    <span>// It is here now to allow easier tuning.</span>
    <span>// Trims the algorithm from processing darks.</span>
    <span>//   0.0833 - upper limit (default, the start of visible unfiltered edges)</span>
    <span>//   0.0625 - high quality (faster)</span>
    <span>//   0.0312 - visible limit (slower)</span>
    <span>// Special notes when using FXAA_GREEN_AS_LUMA,</span>
    <span>//   Likely want to set this to zero.</span>
    <span>//   As colors that are mostly not-green</span>
    <span>//   will appear very dark in the green channel!</span>
    <span>//   Tune by looking at mostly non-green content,</span>
    <span>//   then start at zero and increase until aliasing is a problem.</span>
    <span>float</span> fxaaQualityEdgeThresholdMin
<span>)</span> <span>{</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>vec2</span> posM<span>;</span>
    posM<span>.</span>x <span>=</span> pos<span>.</span>x<span>;</span>
    posM<span>.</span>y <span>=</span> pos<span>.</span>y<span>;</span>
    <span>vec4</span> rgbyM <span>=</span> <span>texture2D</span><span>(</span>tex<span>,</span> posM<span>)</span><span>;</span>
    <span><span>#</span><span>if</span> <span><span>(</span>FXAA_GREEN_AS_LUMA <span>==</span> <span>0</span><span>)</span></span></span>
        <span><span>#</span><span>define</span> <span>lumaM</span> <span>rgbyM<span>.</span>w</span></span>
    <span><span>#</span><span>else</span></span>
        <span><span>#</span><span>define</span> <span>lumaM</span> <span>rgbyM<span>.</span>y</span></span>
    <span><span>#</span><span>endif</span></span>
    <span>float</span> lumaS <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>0</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>1</span><span>,</span> <span>0</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>0</span><span>,</span><span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>0</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> maxSM <span>=</span> <span>max</span><span>(</span>lumaS<span>,</span> lumaM<span>)</span><span>;</span>
    <span>float</span> minSM <span>=</span> <span>min</span><span>(</span>lumaS<span>,</span> lumaM<span>)</span><span>;</span>
    <span>float</span> maxESM <span>=</span> <span>max</span><span>(</span>lumaE<span>,</span> maxSM<span>)</span><span>;</span>
    <span>float</span> minESM <span>=</span> <span>min</span><span>(</span>lumaE<span>,</span> minSM<span>)</span><span>;</span>
    <span>float</span> maxWN <span>=</span> <span>max</span><span>(</span>lumaN<span>,</span> lumaW<span>)</span><span>;</span>
    <span>float</span> minWN <span>=</span> <span>min</span><span>(</span>lumaN<span>,</span> lumaW<span>)</span><span>;</span>
    <span>float</span> rangeMax <span>=</span> <span>max</span><span>(</span>maxWN<span>,</span> maxESM<span>)</span><span>;</span>
    <span>float</span> rangeMin <span>=</span> <span>min</span><span>(</span>minWN<span>,</span> minESM<span>)</span><span>;</span>
    <span>float</span> rangeMaxScaled <span>=</span> rangeMax <span>*</span> fxaaQualityEdgeThreshold<span>;</span>
    <span>float</span> range <span>=</span> rangeMax <span>-</span> rangeMin<span>;</span>
    <span>float</span> rangeMaxClamped <span>=</span> <span>max</span><span>(</span>fxaaQualityEdgeThresholdMin<span>,</span> rangeMaxScaled<span>)</span><span>;</span>
    <span>bool</span> earlyExit <span>=</span> range <span>&lt;</span> rangeMaxClamped<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>if</span><span>(</span>earlyExit<span>)</span>
        <span>return</span> rgbyM<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> lumaNW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span><span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaSE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaNE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>1</span><span>,</span><span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaSW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> lumaNS <span>=</span> lumaN <span>+</span> lumaS<span>;</span>
    <span>float</span> lumaWE <span>=</span> lumaW <span>+</span> lumaE<span>;</span>
    <span>float</span> subpixRcpRange <span>=</span> <span>1.0</span><span>/</span>range<span>;</span>
    <span>float</span> subpixNSWE <span>=</span> lumaNS <span>+</span> lumaWE<span>;</span>
    <span>float</span> edgeHorz1 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaM<span>)</span> <span>+</span> lumaNS<span>;</span>
    <span>float</span> edgeVert1 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaM<span>)</span> <span>+</span> lumaWE<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> lumaNESE <span>=</span> lumaNE <span>+</span> lumaSE<span>;</span>
    <span>float</span> lumaNWNE <span>=</span> lumaNW <span>+</span> lumaNE<span>;</span>
    <span>float</span> edgeHorz2 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaE<span>)</span> <span>+</span> lumaNESE<span>;</span>
    <span>float</span> edgeVert2 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaN<span>)</span> <span>+</span> lumaNWNE<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> lumaNWSW <span>=</span> lumaNW <span>+</span> lumaSW<span>;</span>
    <span>float</span> lumaSWSE <span>=</span> lumaSW <span>+</span> lumaSE<span>;</span>
    <span>float</span> edgeHorz4 <span>=</span> <span>(</span><span>abs</span><span>(</span>edgeHorz1<span>)</span> <span>*</span> <span>2.0</span><span>)</span> <span>+</span> <span>abs</span><span>(</span>edgeHorz2<span>)</span><span>;</span>
    <span>float</span> edgeVert4 <span>=</span> <span>(</span><span>abs</span><span>(</span>edgeVert1<span>)</span> <span>*</span> <span>2.0</span><span>)</span> <span>+</span> <span>abs</span><span>(</span>edgeVert2<span>)</span><span>;</span>
    <span>float</span> edgeHorz3 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaW<span>)</span> <span>+</span> lumaNWSW<span>;</span>
    <span>float</span> edgeVert3 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaS<span>)</span> <span>+</span> lumaSWSE<span>;</span>
    <span>float</span> edgeHorz <span>=</span> <span>abs</span><span>(</span>edgeHorz3<span>)</span> <span>+</span> edgeHorz4<span>;</span>
    <span>float</span> edgeVert <span>=</span> <span>abs</span><span>(</span>edgeVert3<span>)</span> <span>+</span> edgeVert4<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> subpixNWSWNESE <span>=</span> lumaNWSW <span>+</span> lumaNESE<span>;</span>
    <span>float</span> lengthSign <span>=</span> fxaaQualityRcpFrame<span>.</span>x<span>;</span>
    <span>bool</span> horzSpan <span>=</span> edgeHorz <span>&gt;=</span> edgeVert<span>;</span>
    <span>float</span> subpixA <span>=</span> subpixNSWE <span>*</span> <span>2.0</span> <span>+</span> subpixNWSWNESE<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> lumaN <span>=</span> lumaW<span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> lumaS <span>=</span> lumaE<span>;</span>
    <span>if</span><span>(</span>horzSpan<span>)</span> lengthSign <span>=</span> fxaaQualityRcpFrame<span>.</span>y<span>;</span>
    <span>float</span> subpixB <span>=</span> <span>(</span>subpixA <span>*</span> <span>(</span><span>1.0</span><span>/</span><span>12.0</span><span>)</span><span>)</span> <span>-</span> lumaM<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> gradientN <span>=</span> lumaN <span>-</span> lumaM<span>;</span>
    <span>float</span> gradientS <span>=</span> lumaS <span>-</span> lumaM<span>;</span>
    <span>float</span> lumaNN <span>=</span> lumaN <span>+</span> lumaM<span>;</span>
    <span>float</span> lumaSS <span>=</span> lumaS <span>+</span> lumaM<span>;</span>
    <span>bool</span> pairN <span>=</span> <span>abs</span><span>(</span>gradientN<span>)</span> <span>&gt;=</span> <span>abs</span><span>(</span>gradientS<span>)</span><span>;</span>
    <span>float</span> gradient <span>=</span> <span>max</span><span>(</span><span>abs</span><span>(</span>gradientN<span>)</span><span>,</span> <span>abs</span><span>(</span>gradientS<span>)</span><span>)</span><span>;</span>
    <span>if</span><span>(</span>pairN<span>)</span> lengthSign <span>=</span> <span>-</span>lengthSign<span>;</span>
    <span>float</span> subpixC <span>=</span> <span>clamp</span><span>(</span><span>abs</span><span>(</span>subpixB<span>)</span> <span>*</span> subpixRcpRange<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>vec2</span> posB<span>;</span>
    posB<span>.</span>x <span>=</span> posM<span>.</span>x<span>;</span>
    posB<span>.</span>y <span>=</span> posM<span>.</span>y<span>;</span>
    <span>vec2</span> offNP<span>;</span>
    offNP<span>.</span>x <span>=</span> <span>(</span><span>!</span>horzSpan<span>)</span> <span>?</span> <span>0.0</span> <span>:</span> fxaaQualityRcpFrame<span>.</span>x<span>;</span>
    offNP<span>.</span>y <span>=</span> <span>(</span> horzSpan<span>)</span> <span>?</span> <span>0.0</span> <span>:</span> fxaaQualityRcpFrame<span>.</span>y<span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> posB<span>.</span>x <span>+=</span> lengthSign <span>*</span> <span>0.5</span><span>;</span>
    <span>if</span><span>(</span> horzSpan<span>)</span> posB<span>.</span>y <span>+=</span> lengthSign <span>*</span> <span>0.5</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>vec2</span> posN<span>;</span>
    posN<span>.</span>x <span>=</span> posB<span>.</span>x <span>-</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P0<span>;</span>
    posN<span>.</span>y <span>=</span> posB<span>.</span>y <span>-</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P0<span>;</span>
    <span>vec2</span> posP<span>;</span>
    posP<span>.</span>x <span>=</span> posB<span>.</span>x <span>+</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P0<span>;</span>
    posP<span>.</span>y <span>=</span> posB<span>.</span>y <span>+</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P0<span>;</span>
    <span>float</span> subpixD <span>=</span> <span>(</span><span>(</span><span>-</span><span>2.0</span><span>)</span><span>*</span>subpixC<span>)</span> <span>+</span> <span>3.0</span><span>;</span>
    <span>float</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>)</span><span>)</span><span>;</span>
    <span>float</span> subpixE <span>=</span> subpixC <span>*</span> subpixC<span>;</span>
    <span>float</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>)</span><span>)</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>if</span><span>(</span><span>!</span>pairN<span>)</span> lumaNN <span>=</span> lumaSS<span>;</span>
    <span>float</span> gradientScaled <span>=</span> gradient <span>*</span> <span>1.0</span><span>/</span><span>4.0</span><span>;</span>
    <span>float</span> lumaMM <span>=</span> lumaM <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
    <span>float</span> subpixF <span>=</span> subpixD <span>*</span> subpixE<span>;</span>
    <span>bool</span> lumaMLTZero <span>=</span> lumaMM <span>&lt;</span> <span>0.0</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    lumaEndN <span>-=</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
    lumaEndP <span>-=</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
    <span>bool</span> doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
    <span>bool</span> doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P1<span>;</span>
    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P1<span>;</span>
    <span>bool</span> doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P1<span>;</span>
    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P1<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
        doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
        doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P2<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P2<span>;</span>
        doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P2<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P2<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
        <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>3</span><span>)</span></span></span>
        <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
            doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
            doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P3<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P3<span>;</span>
            doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P3<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P3<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
            <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>4</span><span>)</span></span></span>
            <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P4<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P4<span>;</span>
                doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P4<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P4<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>5</span><span>)</span></span></span>
                <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                    doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                    doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P5<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P5<span>;</span>
                    doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P5<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P5<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                    <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>6</span><span>)</span></span></span>
                    <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                        doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                        doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P6<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P6<span>;</span>
                        doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P6<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P6<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                        <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>7</span><span>)</span></span></span>
                        <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                            doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                            doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P7<span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P7<span>;</span>
                            doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P7<span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P7<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>8</span><span>)</span></span></span>
    <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
        doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
        doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P8<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P8<span>;</span>
        doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P8<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P8<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
        <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>9</span><span>)</span></span></span>
        <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
            doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
            doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P9<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P9<span>;</span>
            doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P9<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P9<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
            <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>10</span><span>)</span></span></span>
            <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P10<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P10<span>;</span>
                doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P10<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P10<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>11</span><span>)</span></span></span>
                <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                    doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                    doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P11<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P11<span>;</span>
                    doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P11<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P11<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                    <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>12</span><span>)</span></span></span>
                    <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                        doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                        doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P12<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P12<span>;</span>
                        doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P12<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P12<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                    <span>}</span>
                    <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
                <span>}</span>
                <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
            <span>}</span>
            <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
        <span>}</span>
        <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>}</span>
    <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
                        <span>}</span>
                        <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
                    <span>}</span>
                    <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
                <span>}</span>
                <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
            <span>}</span>
            <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
        <span>}</span>
        <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>}</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> dstN <span>=</span> posM<span>.</span>x <span>-</span> posN<span>.</span>x<span>;</span>
    <span>float</span> dstP <span>=</span> posP<span>.</span>x <span>-</span> posM<span>.</span>x<span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> dstN <span>=</span> posM<span>.</span>y <span>-</span> posN<span>.</span>y<span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> dstP <span>=</span> posP<span>.</span>y <span>-</span> posM<span>.</span>y<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>bool</span> goodSpanN <span>=</span> <span>(</span>lumaEndN <span>&lt;</span> <span>0.0</span><span>)</span> <span>!=</span> lumaMLTZero<span>;</span>
    <span>float</span> spanLength <span>=</span> <span>(</span>dstP <span>+</span> dstN<span>)</span><span>;</span>
    <span>bool</span> goodSpanP <span>=</span> <span>(</span>lumaEndP <span>&lt;</span> <span>0.0</span><span>)</span> <span>!=</span> lumaMLTZero<span>;</span>
    <span>float</span> spanLengthRcp <span>=</span> <span>1.0</span><span>/</span>spanLength<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>bool</span> directionN <span>=</span> dstN <span>&lt;</span> dstP<span>;</span>
    <span>float</span> dst <span>=</span> <span>min</span><span>(</span>dstN<span>,</span> dstP<span>)</span><span>;</span>
    <span>bool</span> goodSpan <span>=</span> directionN <span>?</span> goodSpanN <span>:</span> goodSpanP<span>;</span>
    <span>float</span> subpixG <span>=</span> subpixF <span>*</span> subpixF<span>;</span>
    <span>float</span> pixelOffset <span>=</span> <span>(</span>dst <span>*</span> <span>(</span><span>-</span>spanLengthRcp<span>)</span><span>)</span> <span>+</span> <span>0.5</span><span>;</span>
    <span>float</span> subpixH <span>=</span> subpixG <span>*</span> fxaaQualitySubpix<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> pixelOffsetGood <span>=</span> goodSpan <span>?</span> pixelOffset <span>:</span> <span>0.0</span><span>;</span>
    <span>float</span> pixelOffsetSubpix <span>=</span> <span>max</span><span>(</span>pixelOffsetGood<span>,</span> subpixH<span>)</span><span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> posM<span>.</span>x <span>+=</span> pixelOffsetSubpix <span>*</span> lengthSign<span>;</span>
    <span>if</span><span>(</span> horzSpan<span>)</span> posM<span>.</span>y <span>+=</span> pixelOffsetSubpix <span>*</span> lengthSign<span>;</span>
    <span>return</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM<span>)</span><span>.</span>xyz<span>,</span> lumaM<span>)</span><span>;</span>
<span>}</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span><span>#</span><span>if</span> <span><span>(</span>FXAA_LUMA<span>)</span></span></span>
		<span><span>#</span><span>if</span> <span><span>(</span>FXAA_GREEN_AS_LUMA<span>)</span></span></span>
				gl_FragColor <span>=</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>texture<span>,</span> uv<span>)</span><span>.</span>ggg<span>,</span> <span>1.0</span><span>)</span><span>;</span>
			<span><span>#</span><span>else</span>		</span>
				gl_FragColor <span>=</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>texture<span>,</span> uv<span>)</span><span>.</span>aaa<span>,</span> <span>1.0</span><span>)</span><span>;</span>
		<span><span>#</span><span>endif</span></span>
	<span><span>#</span><span>elif</span> <span><span>(</span>FXAA_ENABLE<span>)</span></span></span>
		gl_FragColor <span>=</span> <span>FxaaPixelShader</span><span>(</span>
			uv<span>,</span> texture<span>,</span> RcpFrame<span>,</span> u_fxaaQualitySubpix<span>,</span> u_fxaaQualityEdgeThreshold<span>,</span> u_fxaaQualityEdgeThresholdMin<span>)</span><span>;</span>
	<span><span>#</span><span>else</span></span>
		gl_FragColor <span>=</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>texture<span>,</span> uv<span>)</span><span>.</span>rgb<span>,</span> <span>1.0</span><span>)</span><span>;</span>
	<span><span>#</span><span>endif</span></span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/FXAA-interactive.js">FXAA-interactive.js</a></summary><pre><code><span>"use strict"</span><span>;</span>
<span>async</span> <span>function</span> <span>loadFrame</span><span>(</span><span>gl<span>,</span> path</span><span>)</span> <span>{</span>
	<span>const</span> response <span>=</span> <span>await</span> <span>fetch</span><span>(</span>path<span>)</span><span>;</span>
	<span>const</span> blob <span>=</span> <span>await</span> response<span>.</span><span>blob</span><span>(</span><span>)</span><span>;</span>
	<span>const</span> bitmap <span>=</span> <span>await</span> <span>createImageBitmap</span><span>(</span>blob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span> <span>}</span><span>)</span><span>;</span>

	<span>const</span> target <span>=</span> gl<span>.</span><span>createTexture</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> target<span>)</span><span>;</span>

	gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_MIN_FILTER</span><span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
	gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_MAG_FILTER</span><span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
	gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_WRAP_S</span><span>,</span> gl<span>.</span><span>CLAMP_TO_EDGE</span><span>)</span><span>;</span>
	gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_WRAP_T</span><span>,</span> gl<span>.</span><span>CLAMP_TO_EDGE</span><span>)</span><span>;</span>

	gl<span>.</span><span>texImage2D</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> <span>0</span><span>,</span> gl<span>.</span><span>RGB</span><span>,</span> gl<span>.</span><span>RGB</span><span>,</span> gl<span>.</span><span>UNSIGNED_BYTE</span><span>,</span> bitmap<span>)</span><span>;</span>

	bitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
	<span>return</span> target<span>;</span>
<span>}</span>

<span>async</span> <span>function</span> <span>loadAllFrames</span><span>(</span><span>gl<span>,</span> start<span>,</span> end</span><span>)</span> <span>{</span>
	<span>const</span> framePromises <span>=</span> <span>[</span><span>]</span><span>;</span>
	<span>const</span> totalFrames <span>=</span> end <span>-</span> start <span>+</span> <span>1</span><span>;</span>
	<span>let</span> loadedFrames <span>=</span> <span>0</span><span>;</span>

	<span>const</span> loadingOverlay <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'loading-overlay'</span><span>)</span><span>;</span>

	loadingOverlay<span>.</span>style<span>.</span>display <span>=</span> <span>'flex'</span><span>;</span>
	<span>function</span> <span>updateLoadingProgress</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> percentage <span>=</span> Math<span>.</span><span>floor</span><span>(</span><span>(</span>loadedFrames <span>/</span> totalFrames<span>)</span> <span>*</span> <span>100</span><span>)</span><span>;</span>
		loadingOverlay<span>.</span>innerHTML <span>=</span> <span><span>`</span><span>Loading... </span><span><span>${</span>percentage<span>}</span></span><span>%</span><span>`</span></span><span>;</span>
		<span>if</span> <span>(</span>loadedFrames <span>===</span> totalFrames<span>)</span>
			loadingOverlay<span>.</span>style<span>.</span>display <span>=</span> <span>'none'</span><span>;</span>
	<span>}</span>

	<span>for</span> <span>(</span><span>let</span> i <span>=</span> start<span>;</span> i <span>&lt;=</span> end<span>;</span> i<span>++</span><span>)</span> <span>{</span>
		<span>const</span> path <span>=</span> <span><span>`</span><span>frames/</span><span><span>${</span>i<span>}</span></span><span>.png</span><span>`</span></span><span>;</span>
		<span>const</span> framePromise <span>=</span> <span>loadFrame</span><span>(</span>gl<span>,</span> path<span>)</span><span>.</span><span>then</span><span>(</span><span>texture</span> <span>=&gt;</span> <span>{</span>
			loadedFrames<span>++</span><span>;</span>
			<span>updateLoadingProgress</span><span>(</span><span>)</span><span>;</span>
			<span>return</span> texture<span>;</span>
		<span>}</span><span>)</span><span>;</span>
		framePromises<span>.</span><span>push</span><span>(</span>framePromise<span>)</span><span>;</span>
	<span>}</span>

	<span>const</span> textures <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span>framePromises<span>)</span><span>;</span>
	<span>return</span> textures<span>;</span>
<span>}</span>

<span>function</span> <span>setupFXAAInteractive</span><span>(</span><span>canvasId<span>,</span> simpleVtxSrc<span>,</span> simpleFragSrc<span>,</span> vertexLumaSrc<span>,</span> lumaFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>false</span><span>,</span>
			<span>premultipliedAlpha</span><span>:</span> <span>false</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>let</span> lumaBuffer<span>,</span> lumaTexture<span>,</span> blitBuffer<span>,</span> blitTexture<span>;</span>
	<span>let</span> enableFXAA <span>=</span> <span>true</span><span>;</span>
	<span>let</span> enableRed <span>=</span> <span>true</span><span>;</span>
	<span>let</span> showLuma <span>=</span> <span>false</span><span>;</span>
	<span>let</span> greenLuma <span>=</span> <span>false</span><span>;</span>
	<span>let</span> pause <span>=</span> <span>false</span><span>;</span>
	<span>let</span> fxaaQualityPreset <span>=</span> <span>12</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Passthrough Shader */</span>
	<span>let</span> fxaaShd<span>;</span>
	<span>let</span> rcpFrameLocation<span>;</span>
	<span>let</span> fxaaQualitySubpixLocation<span>;</span>
	<span>let</span> fxaaQualityEdgeThresholdLocation<span>;</span>
	<span>let</span> fxaaQualityEdgeThresholdMinLocation<span>;</span>

	<span>function</span> <span>updateFXAAShader</span><span>(</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>fxaaShd<span>)</span> <span>{</span>
			gl<span>.</span><span>deleteProgram</span><span>(</span>fxaaShd<span>)</span><span>;</span>
		<span>}</span>

		<span>const</span> prefix <span>=</span> <span><span>`</span><span>
        #define FXAA_QUALITY_PRESET </span><span><span>${</span>fxaaQualityPreset<span>}</span></span><span>
        #define FXAA_GREEN_AS_LUMA </span><span><span>${</span>greenLuma <span>?</span> <span>1</span> <span>:</span> <span>0</span><span>}</span></span><span>
        #define FXAA_ENABLE </span><span><span>${</span>enableFXAA <span>?</span> <span>1</span> <span>:</span> <span>0</span><span>}</span></span><span>
        #define FXAA_LUMA </span><span><span>${</span>showLuma <span>?</span> <span>1</span> <span>:</span> <span>0</span><span>}</span></span><span>
	    </span><span>`</span></span><span>;</span>

		fxaaShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleVtxSrc<span>,</span> simpleFragSrc<span>,</span> prefix<span>)</span><span>;</span>

		rcpFrameLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>fxaaShd<span>,</span> <span>"RcpFrame"</span><span>)</span><span>;</span>
		fxaaQualitySubpixLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>fxaaShd<span>,</span> <span>"u_fxaaQualitySubpix"</span><span>)</span><span>;</span>
		fxaaQualityEdgeThresholdLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>fxaaShd<span>,</span> <span>"u_fxaaQualityEdgeThreshold"</span><span>)</span><span>;</span>
		fxaaQualityEdgeThresholdMinLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>fxaaShd<span>,</span> <span>"u_fxaaQualityEdgeThresholdMin"</span><span>)</span><span>;</span>
	<span>}</span>

	<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> lumaShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> vertexLumaSrc<span>,</span> lumaFragSrc<span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>/* Load frames */</span>
	<span>let</span> framesLoaded <span>=</span> <span>false</span><span>;</span>
	<span>let</span> textures <span>=</span> <span>[</span><span>]</span><span>;</span>

	<span>/* Vertex Buffer of a simple Quad with some colors */</span>
	<span>const</span> unitQuad <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>-</span><span>1.0</span><span>,</span> <span>1.0</span><span>,</span>
		<span>1.0</span><span>,</span> <span>1.0</span><span>,</span>
		<span>1.0</span><span>,</span> <span>-</span><span>1.0</span><span>,</span>
		<span>-</span><span>1.0</span><span>,</span> <span>-</span><span>1.0</span><span>,</span>
	<span>]</span><span>)</span><span>;</span>

	<span>const</span> trackedCoords <span>=</span> <span>[</span>
		<span>[</span><span>357.250</span><span>,</span> <span>206.375</span><span>]</span><span>,</span>
		<span>[</span><span>356.602</span><span>,</span> <span>207.301</span><span>]</span><span>,</span>
		<span>[</span><span>356.309</span><span>,</span> <span>207.559</span><span>]</span><span>,</span>
		<span>[</span><span>354.832</span><span>,</span> <span>208.711</span><span>]</span><span>,</span>
		<span>[</span><span>353.121</span><span>,</span> <span>209.863</span><span>]</span><span>,</span>
		<span>[</span><span>350.578</span><span>,</span> <span>211.102</span><span>]</span><span>,</span>
		<span>[</span><span>347.594</span><span>,</span> <span>212.336</span><span>]</span><span>,</span>
		<span>[</span><span>343.457</span><span>,</span> <span>214.652</span><span>]</span><span>,</span>
		<span>[</span><span>338.086</span><span>,</span> <span>216.977</span><span>]</span><span>,</span>
		<span>[</span><span>332.803</span><span>,</span> <span>219.934</span><span>]</span><span>,</span>
		<span>[</span><span>327.791</span><span>,</span> <span>222.625</span><span>]</span><span>,</span>
		<span>[</span><span>324.259</span><span>,</span> <span>224.398</span><span>]</span><span>,</span>
		<span>[</span><span>319.233</span><span>,</span> <span>227.902</span><span>]</span><span>,</span>
		<span>[</span><span>315.627</span><span>,</span> <span>231.492</span><span>]</span><span>,</span>
		<span>[</span><span>315.381</span><span>,</span> <span>233.305</span><span>]</span><span>,</span>
		<span>[</span><span>314.672</span><span>,</span> <span>234.145</span><span>]</span><span>,</span>
		<span>[</span><span>314.616</span><span>,</span> <span>235.363</span><span>]</span><span>,</span>
		<span>[</span><span>315.028</span><span>,</span> <span>236.508</span><span>]</span><span>,</span>
		<span>[</span><span>316.072</span><span>,</span> <span>237.676</span><span>]</span><span>,</span>
		<span>[</span><span>317.366</span><span>,</span> <span>238.301</span><span>]</span><span>,</span>
		<span>[</span><span>317.657</span><span>,</span> <span>239.703</span><span>]</span><span>,</span>
		<span>[</span><span>319.354</span><span>,</span> <span>240.016</span><span>]</span><span>,</span>
		<span>[</span><span>320.018</span><span>,</span> <span>241.277</span><span>]</span><span>,</span>
		<span>[</span><span>321.091</span><span>,</span> <span>241.785</span><span>]</span><span>,</span>
		<span>[</span><span>321.726</span><span>,</span> <span>241.777</span><span>]</span><span>,</span>
		<span>[</span><span>321.824</span><span>,</span> <span>242.117</span><span>]</span><span>,</span>
		<span>[</span><span>322.334</span><span>,</span> <span>242.109</span><span>]</span><span>,</span>
		<span>[</span><span>322.082</span><span>,</span> <span>242.965</span><span>]</span><span>,</span>
		<span>[</span><span>322.100</span><span>,</span> <span>242.965</span><span>]</span>
	<span>]</span><span>;</span>

	<span>function</span> <span>applyTrackingData</span><span>(</span><span>index<span>,</span> location</span><span>)</span> <span>{</span>
		<span>const</span> x <span>=</span> <span>(</span>trackedCoords<span>[</span>index<span>]</span><span>[</span><span>0</span><span>]</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>2</span> <span>-</span> <span>1</span><span>;</span>
		<span>const</span> y <span>=</span> <span>1</span> <span>-</span> <span>(</span>trackedCoords<span>[</span>index<span>]</span><span>[</span><span>1</span><span>]</span> <span>/</span> canvas<span>.</span>height<span>)</span> <span>*</span> <span>2</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>location<span>,</span> x<span>,</span> y<span>)</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>setupBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>lumaBuffer<span>)</span><span>;</span>
		lumaBuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> lumaBuffer<span>)</span><span>;</span>

		lumaTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>,</span> lumaTexture<span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> lumaTexture<span>,</span> <span>0</span><span>)</span><span>;</span>

		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>blitBuffer<span>)</span><span>;</span>
		blitBuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> blitBuffer<span>)</span><span>;</span>

		blitTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>,</span> blitTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> blitTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
	<span>}</span>

	<span>const</span> fxaaCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'fxaaCheck'</span><span>)</span><span>;</span>
	fxaaCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		enableFXAA <span>=</span> fxaaCheckbox<span>.</span>checked<span>;</span>
		<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>
	<span>const</span> redCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'redCheck'</span><span>)</span><span>;</span>
	redCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		enableRed <span>=</span> redCheckbox<span>.</span>checked<span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>
	<span>const</span> pauseCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'pauseCheck'</span><span>)</span><span>;</span>
	pauseCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		pause <span>=</span> <span>!</span>pauseCheckbox<span>.</span>checked<span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>
	<span>const</span> lumaCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'lumaCheck'</span><span>)</span><span>;</span>
	lumaCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		showLuma <span>=</span> lumaCheckbox<span>.</span>checked<span>;</span>
		<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>
	<span>const</span> greenCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'greenCheck'</span><span>)</span><span>;</span>
	greenCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		greenLuma <span>=</span> greenCheckbox<span>.</span>checked<span>;</span>
		<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* FXAA Parameters */</span>
	<span>const</span> fxaaQualityPresetSelect <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'FXAA_QUALITY_PRESET'</span><span>)</span><span>;</span>
	fxaaQualityPresetSelect<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		fxaaQualityPreset <span>=</span> <span>parseInt</span><span>(</span>fxaaQualityPresetSelect<span>.</span>value<span>)</span><span>;</span>
		<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>let</span> fxaaQualitySubpix <span>=</span> <span>0.75</span><span>;</span>
	<span>let</span> fxaaQualityEdgeThreshold <span>=</span> <span>0.166</span><span>;</span>
	<span>let</span> fxaaQualityEdgeThresholdMin <span>=</span> <span>0.0833</span><span>;</span>

	<span>const</span> fxaaQualitySubpixRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'fxaaQualitySubpixRange'</span><span>)</span><span>;</span>
	<span>const</span> fxaaQualityEdgeThresholdRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'fxaaQualityEdgeThresholdRange'</span><span>)</span><span>;</span>
	<span>const</span> fxaaQualityEdgeThresholdMinRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'fxaaQualityEdgeThresholdMinRange'</span><span>)</span><span>;</span>

	fxaaQualitySubpixRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		fxaaQualitySubpix <span>=</span> <span>parseFloat</span><span>(</span>fxaaQualitySubpixRange<span>.</span>value<span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	fxaaQualityEdgeThresholdRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		fxaaQualityEdgeThreshold <span>=</span> <span>parseFloat</span><span>(</span>fxaaQualityEdgeThresholdRange<span>.</span>value<span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	fxaaQualityEdgeThresholdMinRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		fxaaQualityEdgeThresholdMin <span>=</span> <span>parseFloat</span><span>(</span>fxaaQualityEdgeThresholdMinRange<span>.</span>value<span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>

	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	canvas<span>.</span>width <span>=</span> <span>684</span><span>;</span>
	canvas<span>.</span>height <span>=</span> <span>480</span><span>;</span>

	gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>684</span><span>,</span> <span>480</span><span>)</span><span>;</span>

	<span>const</span> fps <span>=</span> <span>30</span><span>;</span>
	<span>const</span> frameDuration <span>=</span> <span>1000</span> <span>/</span> fps<span>;</span>
	<span>const</span> waitBetweenFramesMs <span>=</span> <span>1000</span><span>;</span>
	<span>let</span> frameIndex <span>=</span> <span>0</span><span>;</span>
	<span>let</span> lastFrameTime <span>=</span> <span>0</span><span>;</span>
	<span>let</span> forward <span>=</span> <span>true</span><span>;</span>
	<span>let</span> delayActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span><span>!</span>isRendering <span>||</span> redrawActive <span>||</span> <span>!</span>framesLoaded<span>)</span>
			<span>return</span><span>;</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> lumaBuffer<span>)</span><span>;</span>
		gl<span>.</span><span>disable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> textures<span>[</span>frameIndex<span>]</span><span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>lumaShd<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw To Screen */</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> blitBuffer<span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> lumaTexture<span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>fxaaShd<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		
		<span>/* FXAA Arguments */</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>rcpFrameLocation<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>fxaaQualitySubpixLocation<span>,</span> fxaaQualitySubpix<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>fxaaQualityEdgeThresholdLocation<span>,</span> fxaaQualityEdgeThreshold<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>fxaaQualityEdgeThresholdMinLocation<span>,</span> fxaaQualityEdgeThresholdMin<span>)</span><span>;</span>

		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> blitTexture<span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		<span>applyTrackingData</span><span>(</span>frameIndex<span>,</span> offsetLocationPost<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> canvas<span>.</span>width <span>/</span> canvas<span>.</span>height <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>)</span><span>;</span>
		<span>applyTrackingData</span><span>(</span>frameIndex<span>,</span> offsetLocationRed<span>)</span><span>;</span>
		<span>if</span> <span>(</span>enableRed<span>)</span>
			gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span>enableRed<span>)</span>
			gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>const</span> elapsed <span>=</span> time <span>-</span> lastFrameTime<span>;</span>
			<span>if</span> <span>(</span>elapsed <span>&gt;=</span> frameDuration<span>)</span> <span>{</span>
				lastFrameTime <span>=</span> time <span>-</span> <span>(</span>elapsed <span>%</span> frameDuration<span>)</span><span>;</span>
				<span>redraw</span><span>(</span><span>)</span><span>;</span>

				<span>if</span> <span>(</span>forward<span>)</span> <span>{</span>
					<span>if</span> <span>(</span><span>!</span>pause<span>)</span>
						frameIndex<span>++</span><span>;</span>
					<span>if</span> <span>(</span>frameIndex <span>==</span> <span>29</span><span>)</span> <span>{</span>
						frameIndex <span>=</span> <span>28</span><span>;</span>
						forward <span>=</span> <span>false</span><span>;</span>

						<span>if</span> <span>(</span><span>!</span>delayActive<span>)</span> <span>{</span>
							delayActive <span>=</span> <span>true</span><span>;</span>
							<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
								delayActive <span>=</span> <span>false</span><span>;</span>
								<span>if</span> <span>(</span>isRendering<span>)</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
							<span>}</span><span>,</span> waitBetweenFramesMs<span>)</span><span>;</span>
							<span>return</span><span>;</span>
						<span>}</span>
					<span>}</span>
				<span>}</span> <span>else</span> <span>{</span>
					<span>if</span><span>(</span><span>!</span>pause<span>)</span>
						frameIndex<span>--</span><span>;</span>
					<span>if</span> <span>(</span>frameIndex <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>
						forward <span>=</span> <span>true</span><span>;</span>
						frameIndex <span>=</span> <span>0</span><span>;</span>

						<span>if</span> <span>(</span><span>!</span>delayActive<span>)</span> <span>{</span>
							delayActive <span>=</span> <span>true</span><span>;</span>
							<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
								delayActive <span>=</span> <span>false</span><span>;</span>
								<span>if</span> <span>(</span>isRendering<span>)</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
							<span>}</span><span>,</span> waitBetweenFramesMs<span>)</span><span>;</span>
							<span>return</span><span>;</span>
						<span>}</span>
					<span>}</span>
				<span>}</span>
			<span>}</span>

			<span>if</span> <span>(</span><span>!</span>delayActive<span>)</span> <span>{</span>
				<span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
			<span>}</span>
		<span>}</span>
	<span>}</span>

	<span>async</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		<span>for</span> <span>(</span><span>const</span> entry <span>of</span> entries<span>)</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>{</span>
					<span>/* Start rendering, when canvas visible */</span>
					isRendering <span>=</span> <span>true</span><span>;</span>

					<span>/* Load all frames and await the result */</span>
					textures <span>=</span> <span>await</span> <span>loadAllFrames</span><span>(</span>gl<span>,</span> <span>0</span><span>,</span> <span>28</span><span>)</span><span>;</span>
					<span>setupBuffers</span><span>(</span><span>)</span><span>;</span>
					framesLoaded <span>=</span> <span>true</span><span>;</span>

					<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
				<span>}</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>/* Stop another redraw being called */</span>
				isRendering <span>=</span> <span>false</span><span>;</span>
				<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
					<span>/* Spin on draw calls being processed. To simplify sync.
					   In reality, this code block is never reached, but just
					   in case, we have this here. */</span>
				<span>}</span>
				<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
				gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>
				<span>/* Delete the textures to free up memory */</span>
				<span>if</span> <span>(</span>framesLoaded<span>)</span> <span>{</span>
					textures<span>.</span><span>forEach</span><span>(</span><span>texture</span> <span>=&gt;</span> <span>{</span>
						gl<span>.</span><span>deleteTexture</span><span>(</span>texture<span>)</span><span>;</span>
					<span>}</span><span>)</span><span>;</span>
					gl<span>.</span><span>deleteTexture</span><span>(</span>lumaTexture<span>)</span><span>;</span>
					gl<span>.</span><span>deleteFramebuffer</span><span>(</span>lumaBuffer<span>)</span><span>;</span>
					gl<span>.</span><span>deleteTexture</span><span>(</span>blitTexture<span>)</span><span>;</span>
					gl<span>.</span><span>deleteFramebuffer</span><span>(</span>blitBuffer<span>)</span><span>;</span>
					textures <span>=</span> <span>[</span><span>]</span><span>;</span>
					framesLoaded <span>=</span> <span>false</span><span>;</span>
				<span>}</span>
			<span>}</span>
		<span>}</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p>Just looking at the <a href="https://github.com/FrostKiwi/treasurechest/blob/main/posts/analytical-anti-aliasing/FXAA-3.11.glsl">full FXAA 3.11 source</a>, you can see the passion in every line. Portable <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L611">across OpenGL and DirectX</a>, a <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L716">PC version</a>, a <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L1341">XBOX 360</a> version, two finely optimized <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L1437">PS3 version</a> fighting for every GPU cycle, <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L1450">including shader disassambly</a>. Such level of professionalism and dedication, shared with the world in plain text.</p><blockquote><p>The sharing and openness is why I'm in love with graphics programming.</p><img src="https://blog.frost.kiwi/assets/kiwis/love.svg"></blockquote><p>It may be performance cheap, but only if you already have post-processing in place or do <a href="https://en.wikipedia.org/wiki/Deferred_shading">deferred shading</a>. Especially in mobile graphics, memory access is expensive, so saving the framebuffer to perform post processing is not always a given. If you need to setup render-to-texture in order to have FXAA, then the “F” in FXAA evaporates.</p><p>In this article we won’t jump into modern <a href="https://sugulee.wordpress.com/2021/06/21/temporal-anti-aliasingtaa-tutorial/">temporal anti-aliasing</a>, but before FXAA was even developed, <a href="https://x.com/NOTimothyLottes/status/1756732098402992584">TAA was already experimented</a> with. In fact, FXAA was supposed to <a href="https://web.archive.org/web/20120120082725/http://timothylottes.blogspot.com/2011/12/fxaa-40-stills-and-features.html">get a new version 4</a> and <a href="https://web.archive.org/web/20120120070945/http://timothylottes.blogspot.com/2011/12/big-fxaa-update-soon.html">incorporate temporal anti aliasing</a> in addition <a href="https://web.archive.org/web/20120120072820/http://timothylottes.blogspot.com/2011/12/fxaa-40-will-have-new-spatial-only.html">to the standard spatial one</a>, but instead it evolved further and rebranded into <a href="https://web.archive.org/web/20210116205348/https://www.nvidia.com/en-gb/geforce/technologies/txaa/technology/">TXAA</a>.</p><h2 id="analytical-anti-aliasing" tabindex="-1">Analytical Anti Aliasing <a href="#analytical-anti-aliasing">#</a></h2><p>Now we get to the good stuff. Analytical Anti-Aliasing approaches the problem backwards - it knows the shape you need and draws the pixel already Anti-Aliased to the screen. Whilst drawing the 2D or 3D shape you need, it fades the shape’s border by exactly one pixel.</p><div><p> <label for="nativeAnalytical">Native<p>Resolution</p></label></p><p> <label for="halfAnalytical">½<p>Resolution</p></label></p><p> <label for="quarterAnalytical">¼<p>Resolution</p></label></p><p> <label for="eightAnalytical">⅛<p>Resolution</p></label></p></div><div><p> <label for="1pxAAA"><p>edge smoothing</p></label></p><p> <label for="sqrt2pxAAA"><p>edge smoothing</p></label></p></div><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/analytical.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/analytical.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.vs">circle-analytical.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>attribute</span> <span>vec3</span> col<span>;</span>

<span>/* The coordinates that will be used to for our drawing operations */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* Color for the fragment shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>/* Fragment shader needs to know the pixel size and since we mess with the quad
   to expand it by 1 pixel to not change the final pixel size, we need to give
   the fragment shader the corrected pixel size */</span>
<span>varying</span> <span>float</span> pixelSizeAdjusted<span>;</span>

<span>/* Aspect ratio */</span>
<span>uniform</span> <span>float</span> aspect_ratio<span>;</span>
<span>/* Position offset for the animation */</span>
<span>uniform</span> <span>vec2</span> offset<span>;</span>
<span>/* Size of the Unit Quad */</span>
<span>uniform</span> <span>float</span> size<span>;</span>
<span>/* Pixel size in regards to the Quad */</span>
<span>uniform</span> <span>float</span> pixelSize<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* Assign the verticies to be used as the distance field for drawing. This
	   will be linearly interpolated before going to the fragment shader */</span>
	uv <span>=</span> vtx<span>;</span>
	<span>/* Sending some nice color to the fragment shader */</span>
	color <span>=</span> col<span>;</span>

	<span>vec2</span> vertex <span>=</span> vtx<span>;</span>
	<span>/* correct for aspect ratio  */</span>
	vertex<span>.</span>x <span>*=</span> aspect_ratio<span>;</span>
	<span>/* Grow the Quad and thus the "canvas", that the circle is drawn on. The
	   pixelSize is added for two reasons: 0.5px to get the original circle size
	   again, as the AAA fading is set to fade the edge on the circle inside,
	   preventing hard edges due to unrasterized pixels. And another 0.5px is
	   to correct the "breathing room" added in the fragment shader,
	   specifically for the MSAA sampling case, as hardware specific issues
	   around MSAA sampling may or may not result in transparent pixels
	   disappearing too soon. */</span>
	vertex <span>*=</span> size <span>+</span> pixelSize<span>;</span>
	<span>/* Calculate the true pixel size, after we messed with the quad's size */</span>
	pixelSizeAdjusted <span>=</span> pixelSize <span>/</span> <span>(</span>size <span>+</span> pixelSize<span>)</span><span>;</span>
	<span>/* Make the circle move in a circle, heh :] */</span>
	vertex <span>+=</span> offset<span>;</span>

	<span>/* Vertex Output */</span>
	gl_Position <span>=</span> <span>vec4</span><span>(</span>vertex<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.fs">circle-analytical.fs</a></summary><pre><code><span>precision</span> <span>mediump</span> <span>float</span><span>;</span>
<span>/* uv coordinates from the vertex shader */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* color from the vertex shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>/* pixel size from the vertex shader, corrected for influence of size changes */</span>
<span>varying</span> <span>float</span> pixelSizeAdjusted<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span>/* Our signed distance field of a point */</span>
	<span>float</span> dist <span>=</span> <span>length</span><span>(</span>uv<span>)</span><span>;</span>

	<span>/* We add half a pixel of breathing room. This is only required for the MSAA
	   case. Depending on Hardware implementation, rasterization, MSAA sample
	   count and placement, one row pixels may or may not disappear too soon,
	   when the circle's edge is right up against the unit quad's border */</span>
	dist <span>+=</span> pixelSizeAdjusted <span>*</span> <span>0.5</span><span>;</span>
	
	<span>/* Fade out the pixels near the edge of the circle with exactly the size of
	   one pixel, so we get pixel perfect Anti-Aliasing. */</span>
	<span>float</span> alpha <span>=</span> <span>(</span><span>1.0</span> <span>-</span> dist<span>)</span> <span>/</span> pixelSizeAdjusted<span>;</span>

	<span>/* Clamped and scaled uv.y added to color simply to make the bottom of the
	   circle white, so the contrast is high and you can see strong aliasing */</span>
    gl_FragColor <span>=</span> <span>vec4</span><span>(</span>color <span>+</span> <span>clamp</span><span>(</span> <span>-</span> uv<span>.</span>y <span>*</span> <span>0.4</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>,</span> alpha<span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleAnalytical.js">circleAnalytical.js</a></summary><pre><code><span>function</span> <span>setupAnalytical</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName<span>,</span> radioSmoothSize</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> circleDrawFramebuffer<span>,</span> frameTexture<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>let</span> pixelSmoothSize <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Smooth Size */</span>
	<span>const</span> radiosSmooth <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioSmoothSize<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radiosSmooth<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			pixelSmoothSize <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> pixelSizeCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"pixelSize"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelSizeCircle<span>,</span> <span>(</span><span>2.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span> <span>*</span> pixelSmoothSize<span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p>Always smooth without artifacts and you can adjust the amount of filtering. Preserves shape even at low resolutions. No extra buffers or extra hardware requirements.</p><blockquote><p>Even runs on basic WebGL 1.0 or OpenGLES 2.0, without any extensions.</p><img src="https://blog.frost.kiwi/assets/kiwis/party.svg"></blockquote><p>With the above buttons, you can set the smoothing to be equal to one pixel. This gives a sharp result, but comes with the caveat that axis-aligned 90° sides may still be perseved as “flat” in specific combinations of screen resolution, size and circle position.</p><p>Filtering based on the diagonal pixel size of <code>√2 px = 1.4142...</code>, ensures the “tip” of the circle in axis-aligned pixel rows and columns is always non-opaque. This removes the perception of flatness, but makes it shape ever so slightly more blurry.</p><blockquote><p>Or in other words: as soon as the border has an opaque pixel, there is already a transparent pixel "in front" of it.</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>This style of Anti-Aliasing is <a href="http://www.numb3r23.net/2015/08/17/using-fwidth-for-distance-based-anti-aliasing/">usually implemented</a> with 3 ingredients:</p><ul><li>Enabled <a href="https://gamedev.stackexchange.com/a/130933">Screen Space Derivative</a> extension or having a modern graphics context</li><li>Pixel-size calculated via <a href="https://docs.gl/sl4/length"><code>length</code></a>+<a href="https://docs.gl/sl4/dFdx"><code>dFdx</code></a>+<a href="https://docs.gl/sl4/dFdy"><code>dFdy</code></a> or approximated with <a href="https://docs.gl/sl4/fwidth"><code>fwidth</code></a></li><li>Blending with <a href="https://en.wikipedia.org/wiki/Smoothstep"><code>smoothstep</code></a></li></ul><p>But if you look at the code box above, you will find <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.fs">circle-analytical.fs</a> having <strong>none</strong> of those. And this is the secret sauce we will look at. Before we dive into the implementation, let’s clear the elephants in the room…</p><h3 id="what-even-is-%E2%80%9Canalytical%E2%80%9D%3F" tabindex="-1">What even <em>is</em> “Analytical”? <a href="#what-even-is-%E2%80%9Canalytical%E2%80%9D%3F">#</a></h3><p>In graphics programming, <em>Analytical</em> refers to effects created by knowing the make-up of the intended shape beforehand and performing calculations against the rigid mathematical definition of said shape. This term is used <strong><em>very</em></strong> loosely across computer graphics, similar to super sampling referring to multiple things, depending on context.</p><blockquote><p>A picture is worth a thousand words...</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/lastOfUs.jpg" alt="Character soft-shadow from stretched spheres in The Last Of Us."><figcaption>Character soft-shadow from stretched spheres in The Last Of Us.<br><a href="http://miciwan.com/SIGGRAPH2013/Lighting%20Technology%20of%20The%20Last%20Of%20Us.pdf">Lighting Technology of "The Last Of Us"</a>, Siggraph 2013 talk by <a href="http://miciwan.com/">Michał Iwanicki</a></figcaption></figure><p>Very soft soft-shadows which include <a href="http://wscg.zcu.cz/WSCG2012/short/B37-full.pdf">contact-hardening</a>, implemented by algorithms like <a href="https://developer.download.nvidia.com/shaderlibrary/docs/shadow_PCSS.pdf">percentage-closer soft shadows</a> are very computationally intense and require both high resolution shadow maps and/or very aggressive filtering to not produce shimmering during movement.</p><p>This is why <a href="https://en.wikipedia.org/wiki/Naughty_Dog">Naughty Dog</a>’s <a href="https://en.wikipedia.org/wiki/The_Last_of_Us">The Last of Us</a> relied on getting soft-shadows on the main character by calculating the shadow from a rigidly defined formula of a stretched sphere, multiple of which were arranged in the shape of the main character, shown in red. An improved implementation with shader code can be seen in this <a href="https://www.shadertoy.com/view/3stcD4">Shadertoy demo</a> by <a href="https://www.shadertoy.com/user/romainguy">romainguy</a>, with the more modern <a href="https://en.wikipedia.org/wiki/Capsule_(geometry)">capsule</a>, as opposed a stretched sphere.</p><p>This is now an integral part of modern game engines, <a href="http://dev.epicgames.com/documentation/en-us/unreal-engine/capsule-shadows-overview-in-unreal-engine">like Unreal</a>. As opposed to <a href="https://learnopengl.com/Advanced-Lighting/Shadows/Shadow-Mapping">standard shadow mapping</a>, we don’t render the scene from the perspective of the light with finite resolution. We evaluate the shadow <em>per-pixel</em> against the mathematical equation of the stretched sphere or capsule. This makes capsule shadows <strong><em>analytical</em></strong>.</p><blockquote><p>A video is worth a thousand words, 30 times a second.</p><img src="https://blog.frost.kiwi/assets/kiwis/laugh.svg"></blockquote><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/capsule-lastofus_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/capsule-lastofus.mp4" type="video/mp4"></video><figcaption>Capsule representation of characters in The Last of Us Part II<br><a href="https://www.youtube.com/watch?v=1J6aAHLCbWg">YouTube Video</a> by <a href="https://www.youtube.com/@MaxLebled_ALT">"Max Lebled's 2nd channel"</a></figcaption></figure><p>Staying with the Last of Us, <a href="https://en.wikipedia.org/wiki/The_Last_of_Us_Part_II">The Last of Us Part II</a> uses the same logic for blurry real-time reflections of the main character, where <a href="https://lettier.github.io/3d-game-shaders-for-beginners/screen-space-reflection.html">Screen Space Reflections</a> aren’t defined. Other options like <a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@8.2/manual/Ray-Traced-Reflections.html">raytracing against the scene</a>, or using a <a href="https://www.adriancourreges.com/blog/2015/11/02/gta-v-graphics-study/#environment-cubemap">real-time cubemap</a> like in <a href="https://en.wikipedia.org/wiki/Grand_Theft_Auto_V">GTA V</a> are either noisy and low resolution or high resolution, but low performance.</p><p>Here the reflection calculation is part of the material shader, rendering against the rigidly defined mathematical shape of the capsule <em>per-pixel</em>, multiple of which are arranged in the shape of the main character. This makes capsule reflections <strong><em>analytical</em></strong>.</p><blockquote><p>An online demo with is worth at least a million...<br>...yeah the joke is getting old.</p><img src="https://blog.frost.kiwi/assets/kiwis/facepalm.svg"></blockquote><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/analytical.png" alt=""><figcaption><a href="https://www.shadertoy.com/view/4djSDy">Shadertoy demo</a> for Analytical Ambient Occlusion by <a href="https://iquilezles.org/">Inigo Quilez</a></figcaption></figure><p><a href="https://learnopengl.com/Advanced-Lighting/SSAO">Ambient Occlusion</a> is essential in modern rendering, bringing contact shadows and approximating global illumination. Another topic as deep as the ocean, with so many implementations. Usually implemented by some form of “raytrace a bunch of rays and blur the result”.</p><p>In this <a href="https://www.shadertoy.com/view/4djSDy">Shadertoy demo</a>, the floor is evaluated <em>per-pixel</em> against the rigidly defined mathematical description of the sphere to get a soft, non-noisy, non-flickering occlusion contribution from the hovering ball. This implementation is <strong><em>analytical</em></strong>. Not just spheres, there are <a href="https://research.nvidia.com/sites/default/files/pubs/2010-06_Ambient-Occlusion-Volumes/McGuire10AOV.pdf">analytical approaches</a> also for complex geometry.</p><p>By extension, Unreal Engine has distance field approaches for <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/distance-field-soft-shadows-in-unreal-engine">Soft Shadows</a> and <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/using-distance-field-ambient-occlusion-in-unreal-engine">Ambient Occlusion</a>, though one may argue, that this type of signed distance field rendering doesn’t fit the description of <em>analytical</em>, considering the distance field is precalculated into a 3D texture.</p><h3 id="implementation" tabindex="-1">Implementation <a href="#implementation">#</a></h3><p>Let’s dive into the sauce. We work with <a href="https://www.youtube.com/watch?v=62-pRVZuS5c">signed distance fields</a>, where for every point that we sample, we know the distance to the desired shape. This information may be baked into a texture as done for <a href="https://github.com/Chlumsky/msdf-atlas-gen">SDF text rendering</a> or maybe be derived <em>per-pixel</em> from a mathematical formula for simpler shapes like <a href="https://iquilezles.org/articles/distfunctions2d/">bezier curves or hearts</a>.</p><p>Based on that distance we fade out the border of the shape. If we fade by the size of one pixel, we get perfectly smooth edges, without any strange side effects. The secret sauce is in the implementation and <a href="https://www.youtube.com/watch?v=bRL8v6--bW4">under the sauce</a> is where the magic is. <em>How</em> does the shader know the size of pixel? <em>How</em> do we blend based on distance?</p><blockquote><p>This approach gives motion-stable pixel-perfection, but doesn't work with traditional rasterization. The <b>full</b> shape requires a signed distance field.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><div><p> <label for="nativeCompare">Native<p>Resolution</p></label></p><p> <label for="halfCompare">½<p>Resolution</p></label></p><p> <label for="quarterCompare">¼<p>Resolution</p></label></p><p> <label for="eightCompare">⅛<p>Resolution</p></label></p></div><table><tbody><tr><td colspan="4"><code>Pixel&nbsp;size&nbsp;method</code></td></tr><tr><td><code>Pixel&nbsp;size&nbsp;method</code></td><td colspan="2"></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>Blend&nbsp;method</code></td></tr><tr><td><code>Blend&nbsp;method</code></td><td colspan="2"></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>Smoothing</code></td></tr><tr><td><code>Smoothing</code></td><td></td><td><output id="SmoothingPxValue">1.0</output>px</td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>Radius&nbsp;adjust&nbsp;</code></td></tr><tr><td><code>Radius&nbsp;adjust&nbsp;</code></td><td></td><td><output id="ShrinkAmountValue">0.0</output>px</td><td></td></tr><tr><td colspan="4"></td></tr></tbody></table><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/analytical.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/analytical.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.vs">circle-analytical.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>attribute</span> <span>vec3</span> col<span>;</span>

<span>/* The coordinates that will be used to for our drawing operations */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* Color for the fragment shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>/* Fragment shader needs to know the pixel size and since we mess with the quad
   to expand it by 1 pixel to not change the final pixel size, we need to give
   the fragment shader the corrected pixel size */</span>
<span>varying</span> <span>float</span> pixelSizeAdjusted<span>;</span>

<span>/* Aspect ratio */</span>
<span>uniform</span> <span>float</span> aspect_ratio<span>;</span>
<span>/* Position offset for the animation */</span>
<span>uniform</span> <span>vec2</span> offset<span>;</span>
<span>/* Size of the Unit Quad */</span>
<span>uniform</span> <span>float</span> size<span>;</span>
<span>/* Pixel size in regards to the Quad */</span>
<span>uniform</span> <span>float</span> pixelSize<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* Assign the verticies to be used as the distance field for drawing. This
	   will be linearly interpolated before going to the fragment shader */</span>
	uv <span>=</span> vtx<span>;</span>
	<span>/* Sending some nice color to the fragment shader */</span>
	color <span>=</span> col<span>;</span>

	<span>vec2</span> vertex <span>=</span> vtx<span>;</span>
	<span>/* correct for aspect ratio  */</span>
	vertex<span>.</span>x <span>*=</span> aspect_ratio<span>;</span>
	<span>/* Grow the Quad and thus the "canvas", that the circle is drawn on. The
	   pixelSize is added for two reasons: 0.5px to get the original circle size
	   again, as the AAA fading is set to fade the edge on the circle inside,
	   preventing hard edges due to unrasterized pixels. And another 0.5px is
	   to correct the "breathing room" added in the fragment shader,
	   specifically for the MSAA sampling case, as hardware specific issues
	   around MSAA sampling may or may not result in transparent pixels
	   disappearing too soon. */</span>
	vertex <span>*=</span> size <span>+</span> pixelSize<span>;</span>
	<span>/* Calculate the true pixel size, after we messed with the quad's size */</span>
	pixelSizeAdjusted <span>=</span> pixelSize <span>/</span> <span>(</span>size <span>+</span> pixelSize<span>)</span><span>;</span>
	<span>/* Make the circle move in a circle, heh :] */</span>
	vertex <span>+=</span> offset<span>;</span>

	<span>/* Vertex Output */</span>
	gl_Position <span>=</span> <span>vec4</span><span>(</span>vertex<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analyticalCompare.fs">circle-analyticalCompare.fs</a></summary><pre><code><span><span>#</span><span>if</span> <span><span>defined</span><span>(</span>FWIDTH<span>)</span> <span>||</span> <span>defined</span><span>(</span>DFD<span>)</span></span></span>
	<span><span>#</span><span>extension</span> <span>GL_OES_standard_derivatives <span>:</span> enable</span></span>
<span><span>#</span><span>endif</span></span>

<span>precision</span> <span>mediump</span> <span>float</span><span>;</span>
<span>/* uv coordinates from the vertex shader */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* color from the vertex shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>/* pixel size from the vertex shader, corrected for resizing */</span>
<span>varying</span> <span>float</span> pixelSizeAdjusted<span>;</span>
<span>/* How many pixels to shrink */</span>
<span>uniform</span> <span>float</span> shrinkAmount<span>;</span>
<span>/* How many pixels to smooth */</span>
<span>uniform</span> <span>float</span> smoothingAmount<span>;</span>

<span>/* Step function with Linear Interpolation, instead of Hermite Interpolation */</span>
<span>float</span> <span>linearstep</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>return</span> <span>clamp</span><span>(</span><span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span>

<span>/* Step function with Linear Interpolation, but no clamping */</span>
<span>float</span> <span>linearstepNoclamp</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>return</span> <span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>;</span>
<span>}</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span>/* The basic signed distance field of a point */</span>
	<span>float</span> dist <span>=</span> <span>length</span><span>(</span>uv<span>)</span><span>;</span>
	
	<span>/* Pixel size method */</span>
	<span><span>#</span><span>if</span> <span><span>defined</span><span>(</span>SIMPLE<span>)</span></span></span>
	    <span>float</span> pixelSize <span>=</span> pixelSizeAdjusted<span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>DFD<span>)</span></span></span>
	    <span>float</span> pixelSize <span>=</span> <span>length</span><span>(</span><span>vec2</span><span>(</span><span>dFdx</span><span>(</span>dist<span>)</span><span>,</span> <span>dFdy</span><span>(</span>dist<span>)</span><span>)</span><span>)</span><span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>FWIDTH<span>)</span></span></span>
	    <span>float</span> pixelSize <span>=</span> <span>fwidth</span><span>(</span>dist<span>)</span><span>;</span>
	<span><span>#</span><span>endif</span></span>

	<span>/* Radius Adjust */</span>
	dist <span>+=</span> pixelSize <span>*</span> shrinkAmount<span>;</span>

	<span>/* Blend method */</span>	
	<span><span>#</span><span>if</span> <span><span>defined</span><span>(</span>DIVISION<span>)</span></span></span>
	    <span>float</span> alpha <span>=</span> <span>(</span><span>1.0</span> <span>-</span> dist<span>)</span> <span>/</span> <span>(</span>pixelSize <span>*</span> smoothingAmount<span>)</span><span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>SMOOTHSTEP<span>)</span></span></span>
	    <span>float</span> alpha <span>=</span> <span>smoothstep</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>LINSTEP<span>)</span></span></span>
	    <span>float</span> alpha <span>=</span> <span>linearstep</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>LINSTEP_NO_CLAMP<span>)</span></span></span>
	    <span>float</span> alpha <span>=</span> <span>linearstepNoclamp</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span>
	<span><span>#</span><span>endif</span></span>

	<span>/* Clamped and scaled uv.y added to color simply to make the bottom of the
	   circle white, so the contrast is high and you can see strong aliasing */</span>
    gl_FragColor <span>=</span> <span>vec4</span><span>(</span>color <span>+</span> <span>clamp</span><span>(</span> <span>-</span> uv<span>.</span>y <span>*</span> <span>0.4</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>,</span> alpha<span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleAnalyticalComparison.js">circleAnalyticalComparison.js</a></summary><pre><code><span>function</span> <span>setupAnalyticalComparison</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> circleDrawFramebuffer<span>,</span> frameTexture<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>let</span> shrinkAmount <span>=</span> <span>1</span><span>;</span>
	<span>let</span> smoothingAmount <span>=</span> <span>1</span><span>;</span>
	<span>let</span> pixelSizeMethod <span>=</span> <span>"SIMPLE"</span><span>;</span>
	<span>let</span> blendMethod <span>=</span> <span>"DIVISION"</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>let</span> DerivativesExtension <span>=</span> gl<span>.</span><span>getExtension</span><span>(</span><span>'OES_standard_derivatives'</span><span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>const</span> pixelSizeMethodSwitch <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'pixelSizeMethod'</span><span>)</span><span>;</span>
	pixelSizeMethodSwitch<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		pixelSizeMethod <span>=</span> pixelSizeMethodSwitch<span>.</span>value<span>;</span>
		<span>updateShader</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>const</span> blendMethodSwitch <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'BLENDMETHOD'</span><span>)</span><span>;</span>
	blendMethodSwitch<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		blendMethod <span>=</span> blendMethodSwitch<span>.</span>value<span>;</span>
		<span>updateShader</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>const</span> SmoothingPxRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'SmoothingPxRange'</span><span>)</span><span>;</span>
	<span>const</span> ShrinkAmountRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'ShrinkAmountRange'</span><span>)</span><span>;</span>

	SmoothingPxRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		smoothingAmount <span>=</span> SmoothingPxRange<span>.</span>value<span>;</span>
	<span>}</span><span>)</span><span>;</span>
	ShrinkAmountRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		shrinkAmount <span>=</span> <span>-</span>ShrinkAmountRange<span>.</span>value<span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>let</span> circleShd<span>;</span>
	<span>let</span> aspect_ratioLocation<span>;</span>
	<span>let</span> offsetLocationCircle<span>;</span>
	<span>let</span> shrinkAmountLocation<span>;</span>
	<span>let</span> smoothingAmountLocation<span>;</span>
	<span>let</span> pixelSizeCircle<span>;</span>
	<span>let</span> sizeLocationCircle<span>;</span>

	<span>function</span> <span>updateShader</span><span>(</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>circleShd<span>)</span> <span>{</span>
			gl<span>.</span><span>deleteProgram</span><span>(</span>circleShd<span>)</span><span>;</span>
		<span>}</span>

		<span>const</span> prefix <span>=</span> <span><span>`</span><span>
        #define </span><span><span>${</span>pixelSizeMethod<span>}</span></span><span>
        #define </span><span><span>${</span>blendMethod<span>}</span></span><span>
	    </span><span>`</span></span><span>;</span>

		circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> prefix<span>)</span><span>;</span>

		aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
		offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
		shrinkAmountLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"shrinkAmount"</span><span>)</span><span>;</span>
		smoothingAmountLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"smoothingAmount"</span><span>)</span><span>;</span>
		pixelSizeCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"pixelSize"</span><span>)</span><span>;</span>
		sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>
	<span>}</span>
	<span>updateShader</span><span>(</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelSizeCircle<span>,</span> <span>(</span><span>2.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>shrinkAmountLocation<span>,</span> shrinkAmount<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>smoothingAmountLocation<span>,</span> smoothingAmount<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><h4 id="how-big-is-a-pixel%3F" tabindex="-1">How big is a pixel? <a href="#how-big-is-a-pixel%3F">#</a></h4><p>Specifically, by how much do we fade the border? If we hardcode a static value, eg. fade at 95% of the circle’s radius, we may get a pleasing result for that circle size at that screen resolution, but too much smoothing when the circle is bigger or closer to the camera and aliasing if the circle becomes small.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/fade.png" alt="Too much edge fading relative to this circle size"><figcaption>Too much edge fading relative to this circle size</figcaption></figure><p>We need to know the size of a pixel. This is in part what <a href="https://gamedev.stackexchange.com/a/130933">Screen Space derivatives</a> were created for. Shader functions like <a href="https://docs.gl/sl4/dFdx"><code>dFdx</code></a>, <a href="https://docs.gl/sl4/dFdy"><code>dFdy</code></a> and <a href="https://docs.gl/sl4/fwidth"><code>fwidth</code></a> allow you to get the size of a screen pixel relative to some vector. In the above <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analyticalCompare.fs">circle-analyticalCompare.fs</a> we determine by how much the distance changes via two methods:</p><pre><code>pixelSize <span>=</span> <span>fwidth</span><span>(</span>dist<span>)</span><span>;</span>
<span>/* or */</span>
pixelSize <span>=</span> <span>length</span><span>(</span><span>vec2</span><span>(</span><span>dFdx</span><span>(</span>dist<span>)</span><span>,</span> <span>dFdy</span><span>(</span>dist<span>)</span><span>)</span><span>)</span><span>;</span></code></pre><p>Relying on Screen Space derivatives has the benefit, that we get the pixel size delivered to us by the graphics pipeline. It properly respects any transformations we might throw at it, including 3D perspective.</p><p>The down side is that it is not supported by the WebGL 1 standard and has to be pulled in via the extension <code>GL_OES_standard_derivatives</code> or requires the jump to WebGL 2.</p><blockquote><p>Luckily I have never witnessed any device that supported WebGL 1, but not the Screen Space derivatives. Even the GMA based <a href="https://www.youtube.com/watch?v=Fs4GjDiOie8">Thinkpad X200 &amp; T500</a> I hardware modded do.</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><h5>Possibly painful</h5><p>Generally, there are some nasty pitfalls when using Screen Space derivatives: how the calculation happens is up to the implementation. This led to the split into <code>dFdxFine()</code> and <code>dFdxCoarse()</code> in later OpenGL revisions. The default case can be set via <a href="https://docs.gl/gl4/glHint"><code>GL_FRAGMENT_SHADER_DERIVATIVE_HINT</code></a>, but the standard hates you:</p><blockquote><p><a href="https://docs.gl/sl4/dFdx"><strong>OpenGL Docs</strong></a>: The implementation <em><strong>may</strong></em> choose which calculation to perform based upon factors such as performance or the value of the API <code>GL_FRAGMENT_SHADER_DERIVATIVE_HINT</code> hint.</p></blockquote><blockquote><p>Why do we have standards again? As a graphics programmer, anything with <code>hint</code> has me traumatized.</p><img src="https://blog.frost.kiwi/assets/kiwis/tired.svg"></blockquote><p>Luckily, neither case concerns us, as the difference doesn’t show itself in the context of Anti-Aliasing. Performance technically <a href="https://docs.gl/sl4/dFdx"><code>dFdx</code></a> and <a href="https://docs.gl/sl4/dFdy"><code>dFdy</code></a> are free (or rather, their cost is already part of the rendering pipeline), though the pixel size calculation using <code>length()</code> or <code>fwidth()</code> is not. It is performed <em>per-pixel</em>.</p><h5><a href="https://docs.gl/sl4/dFdx"><code>dFdx</code></a> + <a href="https://docs.gl/sl4/dFdy"><code>dFdy</code></a> + <a href="https://docs.gl/sl4/length"><code>length()</code></a> vs <a href="https://docs.gl/sl4/fwidth"><code>fwidth()</code></a></h5><p>This is why there exist two ways of doing this: getting the <code>length()</code> of the vector that <code>dFdx</code> and <code>dFdy</code> make up, a step involving the historically performance expensive <code>sqrt()</code> function or using <code>fwidth()</code>, which is the approximation <code>abs(dFdx()) + abs(dFdy())</code> of the above.</p><blockquote><p>It depends on context, but on semi-modern hardware a call to <code>length()</code> should be performance trivial though, even per-pixel.</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><p>To showcase the difference, the above <code>Radius adjust</code> slider works off of the <code>Pixel size method</code> and adjusts the SDF distance. If you go with <code>fwidth()</code> and a strong radius shrink, you’ll see something weird.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/rhobus.png" alt="Rhombous warping at small shape sizes due to use of fwidth()"><figcaption>Rhombous warping at small shape sizes due to use of <code>fwidth()</code></figcaption></figure><p>The diagonals shrink more than they should, as the approximation using addition scales too much diagonally. We’ll talk about professional implementations further below in a moment, but using <code>fwidth()</code> for AAA is what Unity extension “<a href="https://acegikmo.com/shapes/docs/#anti-aliasing">Shapes</a>” by <a href="https://twitter.com/FreyaHolmer/">Freya Holmér</a> calls “<a href="https://acegikmo.com/shapes/docs#anti-aliasing">Fast Local Anti-Aliasing</a>” with the following text:</p><blockquote><p>Fast LAA has a slight bias in the diagonal directions, making circular shapes appear ever so slightly rhombous and have a slightly sharper curvature in the orthogonal directions, especially when small. Sometimes the edges in the diagonals are slightly fuzzy as well.</p></blockquote><p>This effects our fading, which will fade more on diagonals. Luckily, we fade by the amount of one pixel and thus the difference is really only visible when flicking between the methods. What to choose depends on what you care more about: Performance or Accuracy? But what if I told you can have your cake and eat it too…</p><h5>DIY</h5><p>…Calculate it yourself! For the 2D case, this is trivial and easily abstracted away. We know the size our context is rendering at and how big our quad is that we draw on. Calculating the size of the pixel is thus done per-object, not per-pixel. This is what happens in the above <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleAnalyticalComparison.js">circleAnalyticalComparison.js</a>.</p><pre><code><span>/* Calculate pixel size based on height.
   Simple case: Assumes Square pixels and a square quad. */</span>
gl<span>.</span><span>uniform1f</span><span>(</span>pixelSizeCircle<span>,</span> <span>(</span><span>2.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span><span>)</span><span>;</span></code></pre><blockquote><p>No WebGL 2, no extensions, works on ancient hardware.</p><img src="https://blog.frost.kiwi/assets/kiwis/party.svg"></blockquote><p>The results are identical to the <code>dFdx</code> + <code>dFdy</code> + <code>length()</code> case, with the benefit of fully skipping the per-pixel calculation. This does become more involved, once the quad is stretched and performance-painful when perspective is involved.</p><h4 id="how-do-we-blend%3F" tabindex="-1">How do we blend? <a href="#how-do-we-blend%3F">#</a></h4><p>Ok, now we have the amount we want to blend by. The next step is to perform the adjustment of opacity. If we are doing 2D, then Alpha blending is the way to go. Straight forward, will never betray you.</p><p>Another option is using MSAA + <a href="https://bgolus.medium.com/anti-aliased-alpha-test-the-esoteric-alpha-to-coverage-8b177335ae4f">Alpha to Coverage</a>, as is done in the MSAA demo above. There are pit falls with the latter, as discussed previously and more headaches to follow below. The reason you would need this is for depth-buffer writes for <a href="https://bgolus.medium.com/rendering-a-sphere-on-a-quad-13c92025570c">correct blending in 3D scenes</a>.</p><blockquote><p>For the MSAA and AAA demos above, merely an API level switch. In both cases, the shaders are 100% <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.fs">identical</a>!</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><p>Still the alpha itself has to be faded based on distance. Here is where a “step” function comes in. We can input a start, an end point and the function will fade between them. <a href="http://www.numb3r23.net/2015/08/17/using-fwidth-for-distance-based-anti-aliasing/">Usually</a>, this is where the graphics programmer’s favorite <code>smoothstep()</code> comes in and where this blog post’s hot take begins:</p><h5>Don’t use <a href="https://en.wikipedia.org/wiki/Smoothstep"><code>smoothstep()</code></a></h5><p>Its use is <a href="http://www.numb3r23.net/2015/08/17/using-fwidth-for-distance-based-anti-aliasing/">often associated</a> with implementing anti-aliasing in <code>GLSL</code>, but its use doesn’t make sense in this context. It performs a <a href="https://en.wikipedia.org/wiki/Smoothstep">hermite interpolation</a>, but we<br>are dealing with a function applied across 2 pixels or just inside 1. There is no curve to be witnessed here.</p><blockquote><p>To be precise, both sampling and blending witness the smoothstep curve in the sub-pixel make-up of the edge, but the difference is tiny and can be corrected using an adjusted smoothing amount.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/smoothstep.svg" alt="Smoothstep and linear comparison"><figcaption>Smoothstep and linear comparison</figcaption></figure><p>Even though the slight performance difference doesn’t particularly matter on modern graphics cards, wasting cycles on performing the hermite interpolation doesn’t make sense to me. Let’s DIY it! The implementation of <a href="https://en.wikipedia.org/wiki/Smoothstep"><code>smoothstep()</code></a> is up to the vendor, but for the <code>float</code> case it’s essentially just :</p><pre><code><span>float</span> <span>smoothstep</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>float</span> t <span>=</span> <span>clamp</span><span>(</span><span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
	<span>return</span> t <span>*</span> t <span>*</span> <span>(</span><span>3.0</span> <span>-</span> <span>2.0</span> <span>*</span> t<span>)</span><span>;</span>
<span>}</span>
<span>.</span><span>.</span><span>.</span>
<span>float</span> alpha <span>=</span> <span>smoothstep</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span></code></pre><p>We can rip out the hermite interpolation and stick to the simple linear one. If you flick between the two in the above demo, you’ll see only a slight change, with pixel sized smoothing. At pixel size, the difference can easily be counter acted with an adjustment to the smoothing factor if you like one method over the other.</p><pre><code><span>/* Step function with Linear Interpolation
   instead of the Hermite Interpolation */</span>
<span>float</span> <span>linearstep</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>return</span> <span>clamp</span><span>(</span><span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span>
<span>.</span><span>.</span><span>.</span>
<span>float</span> alpha <span>=</span> <span>linearstep</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span></code></pre><p>But why even clamp? Alpha values below 0.0 or above 1.0 will be taken care of by the rendering pipeline during the blending step and thus no clamping is required. It <em>is</em> required when having multiple shapes on one quad, something I’ll go into below. But in the one shape per quad case, we can delete it.</p><pre><code><span>/* Step function with Linear Interpolation, but no clamping */</span>
<span>float</span> <span>linearstepNoclamp</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>return</span> <span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>;</span>
<span>}</span>
<span>.</span><span>.</span><span>.</span>
<span>float</span> alpha <span>=</span> <span>linearstepNoclamp</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span></code></pre><p>But wait a moment… When doing Anti-Aliasing we wish to affect the border of the shape, specifically distance 1.0, so most of this function cancels out! In fact, we <strong>don’t</strong> need a step function. The blending can be performed by a simple division.</p><pre><code><span>float</span> alpha <span>=</span> <span>(</span><span>1.0</span> <span>-</span> dist<span>)</span> <span>/</span> <span>(</span>pixelSize <span>*</span> smoothingAmount<span>)</span><span>;</span></code></pre><p>I have been using this simplified term in different places for years. Performance wise, the most expensive thing still remains: the per-pixel division. Modern cards should also have no issues optimizing the hermite interpolation’s multiplication and addition down to a few <a href="https://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation#Fused_multiply%E2%80%93add">Fused Multiply-Add</a> instructions. Still, I prefer the simplicity.</p><h5>What’s with the shrinking?</h5><p>There is an ellusive implementation interaction with MSAA and the rasterizer. <em>Only</em> when using this with MSAA + Alpha to Coverage (regardless of sample count), there will be exactly one side of the quad with a missing 0.5 pixels, on <strong>some</strong> hardware. This is why there is this weird 0.5 px breathing room being added.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/hardEdgeBug.png" alt="Hard edge bug with MSAA on select hardware"><figcaption>Hard edge bug with MSAA on select hardware</figcaption></figure><p>Our circle is drawn to the very edge of the quad, which works, but only as long the graphics card doesn’t surprise us with edge cases. Specifically modern NVIDIA cards seems to eat one side of the quad too soon, though I have never seen this occur with alpha blending. To combat this, we give our SDF 0.5px of breathing room:</p><pre><code><span>/* We add half a pixel of breathing room. This is only required for the MSAA
   case. Depending on Hardware implementation, rasterization, MSAA sample
   count and placement, one row pixels may or may not disappear too soon,
   when the circle's edge is right up against the unit quad's border */</span>
dist <span>+=</span> pixelSizeAdjusted <span>*</span> <span>0.5</span><span>;</span></code></pre><blockquote><p>An edge case.</p><img src="https://blog.frost.kiwi/assets/kiwis/laugh.svg"></blockquote><h5>Drawing multiple?</h5><p>You can draw multiple shapes in one Quad and both will be Anti-Aliased, though blending will start to get more involved. In that case both shapes will need to be evaluated per-pixel and their results will need to be clamped, weighted and summed, otherwise there won’t be Anti-Aliasing when they intersect.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/multiple.jpg" alt="Aliasing free blending of multiple circle visualizations from mirrorball.frost.kiwi"><figcaption>Aliasing free blending of multiple visualizations<br>From <a href="https://mirrorball.frost.kiwi/">🔮 Mathematical Magic Mirrorball</a></figcaption></figure><p>Here is what blending looks like in my WebApp <a href="https://mirrorball.frost.kiwi/">🔮 Mathematical Magic Mirrorball</a>, a WebApp which pulls 360° panoramic projections from photos, videos and live-streams of mirror balls. There I have multiple visualizations and color overlays explaining resolution distribution of the projection. <a href="https://github.com/FrostKiwi/Mirrorball/blob/main/src/shd/crop.fs#L35">The code</a> to keep all this anti-aliased is:</p><pre><code><span>float</span> factorGreen <span>=</span> area_toggle <span>*</span> <span>clamp</span><span>(</span><span>(</span>area_f <span>-</span> lenCircle<span>)</span> <span>*</span> pxsize_rcp<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>float</span> factorRed <span>=</span> area_toggle <span>*</span> <span>clamp</span><span>(</span><span>(</span>lenCircle <span>-</span> area_b<span>)</span> <span>*</span> pxsize_rcp<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span> <span>*</span> smoothedAlpha<span>;</span>
<span>float</span> factorBlack <span>=</span> mask_toggle <span>*</span> <span>(</span><span>1.0</span> <span>-</span> smoothedAlpha<span>)</span><span>;</span>

<span>vec3</span> finalColor <span>=</span> baseColor <span>*</span> <span>(</span><span>1.0</span> <span>-</span> factorGreen <span>-</span> factorRed <span>-</span> factorBlack<span>)</span> <span>+</span>
                  greenColor <span>*</span> factorGreen <span>+</span>
                  redColor <span>*</span> factorRed <span>+</span>
                  blackColor <span>*</span> factorBlack<span>;</span></code></pre><p>All this additional stuff … why not draw color overlays in an additional pass? The cost of drawing across that area again is an order of magnitude higher than just coloring the output in the shape we need as we go. Tinting in an Anti-Aliased fashion in one draw-call is the cleanest way to do this I think.</p><h3 id="3d" tabindex="-1">3D <a href="#3d">#</a></h3><p>Everything we talked about extends to the 3D case as well. We won’t dig <a href="https://iquilezles.org/articles/distfunctions/">into 3D shapes themselves</a> and will stick to a 2D rounded square in 3D perspective with a moving camera. I use this a lot when graphics programming to create a scene with a “ground floor” where my objects live on.</p><div><p> <label for="native3D">Native<p>Resolution</p></label></p><p> <label for="half3D">½<p>Resolution</p></label></p><p> <label for="quarter3D">¼<p>Resolution</p></label></p><p> <label for="eight3D">⅛<p>Resolution</p></label></p></div><div><p> <label for="showCirclelabel3D">Draw Rounded Square</label></p><p> <label for="showQuadlabel3D">Show Quad</label></p></div><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/3d.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/3d.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/3DAnalytical.vs">3DAnalytical.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>attribute</span> <span>vec3</span> col<span>;</span>
<span>/* The coordinates that will be used to for our drawing operations */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>uniform</span> <span>mat4</span> perspective<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* Assign the verticies to be used as the distance field for drawing. This
	   will be linearly interpolated before going to the fragment shader */</span>
	uv <span>=</span> vtx<span>;</span>
	<span>/* Some nice color */</span>
	color <span>=</span> col<span>;</span>

	<span>/* Make Circle smaller and correct aspect ratio */</span>
    <span>vec4</span> pos <span>=</span> <span>vec4</span><span>(</span>vtx<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
    gl_Position <span>=</span> perspective <span>*</span> pos<span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/3DAnalytical.fs">3DAnalytical.fs</a></summary><pre><code><span><span>#</span><span>extension</span> <span>GL_OES_standard_derivatives <span>:</span> enable</span></span>
<span>precision</span> <span>mediump</span> <span>float</span><span>;</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>varying</span> <span>vec3</span> color<span>;</span>

<span>float</span> <span>roundedBoxSDF</span><span>(</span><span>vec2</span> uv<span>,</span> <span>float</span> Size<span>,</span> <span>float</span> Radius<span>)</span>
<span>{</span>
    <span>return</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>abs</span><span>(</span>uv<span>)</span> <span>-</span> Size <span>+</span> Radius<span>,</span> <span>0.0</span><span>)</span><span>)</span> <span>-</span> Radius<span>;</span>
<span>}</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span>/* Pixel Size, but missing Perspective correction */</span>
	<span>//float pixelsize = length(vec2(dFdx(uv.x), dFdy(uv.y)));</span>
	<span>float</span> dist <span>=</span> <span>roundedBoxSDF</span><span>(</span>uv<span>,</span> <span>1.0</span><span>,</span> <span>0.4</span><span>)</span><span>;</span>

	<span>/* Fade out near the edge of the circle */</span>
	<span>float</span> pixelSize <span>=</span> <span>length</span><span>(</span><span>vec2</span><span>(</span><span>dFdx</span><span>(</span>dist<span>)</span><span>,</span> <span>dFdy</span><span>(</span>dist<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> alpha <span>=</span> <span>-</span>dist <span>/</span> <span>(</span>pixelSize <span>*</span> <span>1.4142135623730950488016887242097</span><span>)</span><span>;</span>

	<span>/* Clamped and scaled uv.y added to color simply to make the bottom of the
	   circle white, so the contrast is high and you can see strong aliasing */</span>
    gl_FragColor <span>=</span> <span>vec4</span><span>(</span>color <span>+</span> <span>clamp</span><span>(</span> <span>-</span> uv<span>.</span>y <span>*</span> <span>0.4</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>,</span> alpha<span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/3DAnalytical.js">3DAnalytical.js</a></summary><pre><code><span>function</span> <span>setup3D</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> simpleColorFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> radioName<span>,</span> showQuadOpt</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> circleDrawFramebuffer<span>,</span> frameTexture<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> showQuad <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>let</span> DerivativesExtension <span>=</span> gl<span>.</span><span>getExtension</span><span>(</span><span>'OES_standard_derivatives'</span><span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Show Quad instead of circle choise */</span>
	<span>const</span> showQuadOption <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>showQuadOpt<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	showQuadOption<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"false"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			showQuad <span>=</span> <span>(</span>event<span>.</span>target<span>.</span>value <span>===</span> <span>"true"</span><span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> viewProjectionLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"perspective"</span><span>)</span><span>;</span>

	<span>/* SimpleColor Shader */</span>
	<span>const</span> simpleColorShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> simpleColorFragSrc<span>)</span><span>;</span>
	<span>const</span> viewProjectionLocationSimple <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>simpleColorShd<span>,</span> <span>"perspective"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	<span>let</span> viewMatrix <span>=</span> Mat4<span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>
	<span>let</span> projectionMatrix <span>=</span> Mat4<span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>

	<span>let</span> eye <span>=</span> <span>[</span><span>1.5</span><span>,</span> <span>1.5</span><span>,</span> <span>1.5</span><span>]</span><span>;</span>
	<span>let</span> target <span>=</span> <span>[</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>]</span><span>;</span>
	<span>let</span> up <span>=</span> <span>[</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>1</span><span>]</span><span>;</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		<span>const</span> radius <span>=</span> <span>5</span> <span>+</span> <span>4</span> <span>*</span> Math<span>.</span><span>sin</span><span>(</span>time <span>/</span> <span>2000</span><span>)</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>5000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		eye<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		eye<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>

		Mat4<span>.</span><span>lookAt</span><span>(</span>viewMatrix<span>,</span> eye<span>,</span> target<span>,</span> up<span>)</span><span>;</span>

		<span>let</span> fov <span>=</span> <span>75</span> <span>*</span> Math<span>.</span><span>PI</span> <span>/</span> <span>180</span><span>;</span>
		Mat4<span>.</span><span>perspectiveNO</span><span>(</span>projectionMatrix<span>,</span> fov<span>,</span> aspect_ratio<span>,</span> <span>1</span><span>,</span> <span>Infinity</span><span>)</span><span>;</span>

		Mat4<span>.</span><span>multiply</span><span>(</span>projectionMatrix<span>,</span> projectionMatrix<span>,</span> viewMatrix<span>)</span><span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniformMatrix4fv</span><span>(</span>viewProjectionLocation<span>,</span> <span>false</span><span>,</span> projectionMatrix<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>if</span><span>(</span>showQuad<span>)</span><span>{</span>
			gl<span>.</span><span>useProgram</span><span>(</span>simpleColorShd<span>)</span><span>;</span>
			gl<span>.</span><span>uniformMatrix4fv</span><span>(</span>viewProjectionLocationSimple<span>,</span> <span>false</span><span>,</span> projectionMatrix<span>)</span><span>;</span>
			gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> width <span>/</span> height<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span></code></pre></details></blockquote><p>With the 3D camera and resulting perspective matrix multiplication, we use the reliable screen space derivatives again to get the pixel size. But in reality, <a href="https://web.archive.org/web/20150521050627/https://www.opengl.org/wiki/Compute_eye_space_from_window_space">we can still do without</a>! This would require us to multiply of the inverse perspective matrix with the fragment coordinates <em><strong>per pixel</strong></em>. Performance-painful, yet possible.</p><h3 id="unmentioned-challenges" tabindex="-1">Unmentioned challenges <a href="#unmentioned-challenges">#</a></h3><p>There is something I have not explained yet, a persistent misunderstanding I held until <a href="https://stannum.io/">Yakov Galka</a> explained <a href="https://stackoverflow.com/questions/73903568">the deetz to me on stackoverflow</a>. Depending on how we setup the blending math, to perform the smoothing we may remove pixel alpha on the inside of the shape, add it to the outside or center it.</p><p>Adding or subtracting would mess with the shape every so slightly, especially at small sizes or under strong perspective. So centering is the way to go. Unfortunately, centering the fade on the border can put the edge outside our quad and lead to hard edges or clipping.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/cut.png" alt="Clipping of the border"><figcaption>Clipping of the border. (Overdone for emphasis)</figcaption></figure><p>In 3D this is especially painful, as there is no amount of safety margin that would solve this, with the camera at oblique angles. Nvidia introduced the vendor specific extension <a href="https://registry.khronos.org/OpenGL/extensions/NV/NV_conservative_raster_dilate.txt"><code>NV_conservative_raster_dilate</code></a> to always give you an extra pixel at the border. Unfortunately it’s not available in WebGL and specific to NVIDIA hardware.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/missing_raster_by_yakov-galka.png" alt="Border pixels not rasterized due to fading overshooting the quad"><figcaption>Border pixels not rasterized due to fading overshooting the quad<br>Source: <a href="https://stackoverflow.com/questions/73903568">Explanation</a> on Stack overflow by <a href="https://stannum.io/">Yakov Galka</a></figcaption></figure><p>So we are forced to shrink the border in all cases. This leads to smooth edges even under strong perspective, but technically influences the shape. This is absolutely <em>not</em> visible in isolation, but may lead to mismatches or unexpected behavior, as even perspective has now an influence on the shape.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/inside_raster_by_yakov-galka.png" alt="Border pixels rasterized with shrunken border"><figcaption>Border pixels rasterized with shrunken border<br>Source: <a href="https://stackoverflow.com/questions/73903568">Explanation</a> on Stack overflow by <a href="https://stannum.io/">Yakov Galka</a></figcaption></figure><p>For the 2D case, we could implement a kind of <a href="https://registry.khronos.org/OpenGL/extensions/NV/NV_conservative_raster_dilate.txt"><code>NV_conservative_raster_dilate</code></a> ourselves, by growing the quad in the vertex shader by one pixel and shrink the signed distance field by one pixel in the fragment shader. And this <em>is</em> exactly what’s happening in the 2D demos on this page!</p><blockquote><p>This is really pedantic and just here for correctness. In most cases, you don't need to be so precise.</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>That is the reason the red box always lines up with the border, at all resolution switches and with all 2D demos on this page. Specifically in the vertex shader, the line responsible for this is:</p><pre><code><span>/* Grow the Quad and thus the "canvas", that the circle is drawn on. The
   pixelSize is added for two reasons: 0.5px to get the original circle size
   again, as the AAA fading is set to fade the edge on the circle inside,
   preventing hard edges due to unrasterized pixels. And another 0.5px is
   to correct the "breathing room" added in the fragment shader,
   specifically for the MSAA sampling case, as hardware specific issues
   around MSAA sampling may or may not result in transparent pixels
   disappearing too soon. */</span>
vertex <span>*=</span> size <span>+</span> pixelSize<span>;</span></code></pre><blockquote><p>Not messing up gamma and multiplied vs premultiplied alpha are important for all forms of AA, but are very context dependant. This blog post is about AAA specifically, thus we ignore these.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><h2 id="what-are-the-big-boys-doing%3F" tabindex="-1">What are the big boys doing? <a href="#what-are-the-big-boys-doing%3F">#</a></h2><p>This rendering approach has found its way into many professional products. Let’s finish by looking at some of them.</p><h3 id="%E2%80%9Cshapes%E2%80%9D-for-unity" tabindex="-1"><a href="https://acegikmo.com/shapes">“Shapes”</a> for Unity <a href="#%E2%80%9Cshapes%E2%80%9D-for-unity">#</a></h3><p>Feature-wise the most complete implementation of this approach is in Unity extension <a href="https://acegikmo.com/shapes">Shapes</a> by <a href="https://twitter.com/FreyaHolmer/">Freya Holmér</a>. There the SDFs are either anti-aliased by MSAA or are blended like in this blog post, though it’s referred to as “<a href="https://acegikmo.com/shapes/docs/#anti-aliasing">Fast Local Anti-Aliasing</a>” for the <code>fwidth()</code> case and “<a href="https://acegikmo.com/shapes/docs/#anti-aliasing">Corrected Local Anti-Aliasing</a>” for the <code>length()</code> case.</p><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/shapes_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/shapes.mp4" type="video/mp4"></video><figcaption>Trailer for <a href="https://acegikmo.com/shapes">"Shapes"</a> by <a href="https://twitter.com/FreyaHolmer/">Freya Holmér</a></figcaption></figure><p>With motion-blur, <a href="https://acegikmo.com/shapes/docs/#shapes-feature-table">shape-respecting color gradients</a> and lines <a href="https://acegikmo.com/shapes/docs/#anti-aliasing">below 1px being opacity faded</a> to prevent further aliasing, this is signed-distance field rendering and AAA by extension, implemented to its logical conclusion.</p><h3 id="valve-software%E2%80%99s-implementation" tabindex="-1"><a href="https://www.valvesoftware.com/">Valve Software</a>’s implementation <a href="#valve-software%E2%80%99s-implementation">#</a></h3><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/tf2hud.png" alt="Hud elements in Team Fortress 2"><figcaption>Hud elements in <a href="https://www.teamfortress.com/">Team Fortress 2</a></figcaption></figure><p>Valve introduced extensive use of signed distance field rendering to the <a href="https://en.wikipedia.org/wiki/Source_(game_engine)">Source engine</a> during the development of the <a href="https://en.wikipedia.org/wiki/The_Orange_Box">Orange Box</a>. Most prominently in <a href="https://www.teamfortress.com/">Team Fortress 2</a>, where it was used to create smooth yet sharp UI elements on the HUD. It even received its own <a href="https://wiki.teamfortress.com/wiki/Developer_commentary">Developer Commentary</a> entry.</p><blockquote><p><strong>Alden Kroll:</strong> Two-dimensional HUD elements present a particular art problem, because they have to look good and sharp no matter what resolution the user is running their game at. Given today’s availability of high resolution wide-screen displays, this can require a lot of texture memory and a lot of work anticipating different display resolutions. The problem for Team Fortress 2 was even more daunting because of our desire to include a lot of smooth curved elements in our HUD. We developed a new shader system for drawing ‘line art’ images. The system allows us to create images at a fixed resolution that produced smooth silhouettes even when scaled up to a very high resolution. This shader system also handles outlining and drop-shadows, and can be applied in the 3D space to world elements such as signs.</p></blockquote><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/valve.png" alt="64x64 Texture: Alpha blended, Alpha Tested and SDF rendering"><figcaption>64x64 Texture: Alpha blended, Alpha Tested and SDF rendering<br>Paper: <a href="https://steamcdn-a.akamaihd.net/apps/valve/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf">Improved Alpha-Tested Magnification for Vector Textures and Special Effect</a></figcaption></figure><p>They also released <a href="https://steamcdn-a.akamaihd.net/apps/valve/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf">a paper</a> describing the specific implementation, including a showcase for use in the 3D game world, though I have never seen it used in the game world itself in Valve titles. Added as a mere footnote to the paper, was a way to improve rendering with sharp corners…</p><h3 id="the-future-of-all-things-font%3F" tabindex="-1">The future of all things font? <a href="#the-future-of-all-things-font%3F">#</a></h3><p>If you save a signed distance field into a texture and sample it with linear interpolation, you will get perfectly sharp characters at any size, but the limited resolution will result in clipped or rounded corners, depending on implementation math.</p><p>Picking up on that foot note and bringing the technique to its logical conclusion was the most thorough and well composed Master Thesis I ever read: “<a href="https://github.com/Chlumsky/msdfgen/files/3050967/thesis.pdf">Shape Decomposition for Multi-channel Distance Fields</a>” by <a href="https://github.com/Chlumsky">Viktor Chlumský</a>, which included code for the <a href="https://github.com/Chlumsky/msdfgen">font-file to SDF conversion</a> and a full <a href="https://github.com/Chlumsky/msdf-atlas-gen?tab=readme-ov-file">font atlas generator</a>.</p><p>Basically, use RGB and a median term to get perfectly sharp text at any size, including an Alpha channel with the classical SDF for effects like glows and drop shadows, all done on the GPU with no run-time baking or intense processing. If you dig around in video games, you will find SDF based font rendering from time to time!</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/msdf.png" alt="Multi-Channel SDF demo from msdf-atlas-gen"><figcaption>Multi-Channel SDF demo from <a href="https://github.com/Chlumsky/msdf-atlas-gen?tab=readme-ov-file">msdf-atlas-gen</a></figcaption></figure><p>From experience I can tell you, that there are more implementation headaches. Chinese, Japanese, Korean characters require bigger textures to resolve their minute details. Bigger textures means you’ll often minimize during rendering, but minimizing may introduce artifacts on its own…</p><p>But considering the current state of browser font baking + rendering and the <em>pure insanity</em> of edge-cases covered, including <a href="https://faultlore.com/blah/text-hates-you/">synthetic fallbacks for missing italic or bold variants</a> and baking 4 variants with 0.25px offsets to account for minute sampling issues, I think SDF text rendering has not been given enough serious consideration.</p><blockquote><p>"<a href="https://faultlore.com/blah/text-hates-you/">Text rendering hates you</a>" is a recommended read if you want to see how crushingly complex this topic gets.</p><img src="https://blog.frost.kiwi/assets/kiwis/tired.svg"></blockquote><p>You may be wondering, if we can get the <a href="https://www.shadertoy.com/view/MlKcDD">analytical solution for a bezier curve</a>, why bake into textures instead? We may know the solution for <strong>one</strong> segment, but to get the full shape we need to sum up all the contributions from all segments. This works, but performance tanks hard, as we solve <em>every</em> bezier curve segment <strong>per pixel</strong>.</p><h2 id="clarity-should-not-be-a-luxury" tabindex="-1">Clarity should not be a luxury <a href="#clarity-should-not-be-a-luxury">#</a></h2><p>Modern video games often use TAA in combination with dynamic resolution scaling, a concoction guaranteed to result in blurriness. These AA algorithms come with post-process sharpening built-in to combat this, as is done in <a href="https://gpuopen.com/fidelityfx-cas/">FSR</a> or <a href="https://docs.unity3d.com/Packages/com.unity.postprocessing@3.4/manual/Anti-aliasing.html#temporal-anti-aliasing">TAA</a>. Fixing blurring by sharpening, I find this a bit of graphics programming sin.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/warframetaa.png" alt="TAA Sharpening in Warframe"><figcaption>TAA Sharpening in <a href="https://www.warframe.com/">Warframe</a></figcaption></figure><p>Whole communities rally around fixing this, like the reddit communities “<a href="https://www.reddit.com/r/MotionClarity/">r/MotionClarity</a>” or the lovingly titled “<a href="https://www.reddit.com/r/FuckTAA">r/FuckTAA</a>”, all with the understanding, that Anti-Aliasing should not come at the cost of clarity. FXAA creator Timothy Lottes mentioned, that this is <a href="https://x.com/NOTimothyLottes/status/1756733156877578611">solvable to some degree with adjustments to filtering</a>, though even the most modern titles suffer from this.</p><p>What we have not talked about are the newer machine learning approaches as done for instance with NVIDIA’s <a href="https://en.wikipedia.org/wiki/Deep_learning_anti-aliasing"><strong>DLAA</strong></a>, as that is really outside the scope of this post. Suffice to say Timothy Lottes is <a href="https://x.com/NOTimothyLottes/status/1756746848402800785">not a fan</a>. As for AAA, it’s lovely being able to draw smooth yet sharp, motion-stable shapes of any size at native resolutions.</p><blockquote><p>Please feel free to use these techniques in your projects.</p><img src="https://blog.frost.kiwi/assets/kiwis/love.svg"></blockquote></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Yi Peng 3 crossed both cables C-Lion 1 and BSC at times matching when they broke (464 pts)]]></title>
            <link>https://bsky.app/profile/auonsson.bsky.social/post/3lbc5va7f722p</link>
            <guid>42191394</guid>
            <pubDate>Wed, 20 Nov 2024 06:56:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bsky.app/profile/auonsson.bsky.social/post/3lbc5va7f722p">https://bsky.app/profile/auonsson.bsky.social/post/3lbc5va7f722p</a>, See on <a href="https://news.ycombinator.com/item?id=42191394">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Lush: My favorite small programming language (108 pts)]]></title>
            <link>https://scottlocklin.wordpress.com/2024/11/19/lush-my-favorite-small-programming-language/</link>
            <guid>42191354</guid>
            <pubDate>Wed, 20 Nov 2024 06:47:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://scottlocklin.wordpress.com/2024/11/19/lush-my-favorite-small-programming-language/">https://scottlocklin.wordpress.com/2024/11/19/lush-my-favorite-small-programming-language/</a>, See on <a href="https://news.ycombinator.com/item?id=42191354">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		<p>I meant to write about this when I started my blog in 2009. Eventually <a href="https://lush.sourceforge.net/">Lush</a> kind of faded out of my consciousness, as it was a lot easier to get work doing stuff in R or Matlab or whatever. The guy who was maintaining the code moved on to other things. The guys who wrote most of the code were getting famous because of the<a href="https://github.com/hparik11/German-Traffic-Sign-Recognition"> German Traffic Sign</a> results. I moved on to other things.&nbsp; I had a thought bubble the other day that I’d try to compile it and see what happened. Binutils guys have been busy for the last decade and changed all manner of things: I couldn’t even find documentation of the old binutils the last version of Lush2 was linked against. Then I noticed poking around the old <a href="https://lush.sourceforge.net/">sourceforge site</a> that Leon Bottou had done some recent check ins fixing (more effectively than me) the same problems in the Lush1 branch. I stuck the subversion repo with history so you can marvel at it on <a href="https://github.com/locklin/lush-code">github</a>. I may try to revive a few of the demos I remember as being cool.</p>
<p>I call it a small language; compared to contemporary Python or R it is quite small, and had a small number of developers. The developers were basically <a href="https://yann.lecun.com/">Yann LeCun</a> and <a href="https://leon.bottou.org/">Leon Bottou</a>&nbsp; and some of their students (there are other names in the source like <a href="https://yoshuabengio.org/">Yoshua Bengio</a>). This tool is where they developed <a href="https://en.wikipedia.org/wiki/LeNet">what became</a> Deep Learning –<a href="https://github.com/locklin/lush-code/blob/master/lush1/trunk/packages/gblearn2/demos/lenet5.lsh">lenet5</a>; the first version of <a href="https://github.com/locklin/lush-code/tree/master/lush1/trunk/packages/torch">Torch</a> was in here (as I recall it was more oriented to HMMs at the time). Since it’s a lisp, it’s easy to add macros and such to make it do your bidding and fit your needs. Unlike anything else I’ve ever used, Lush is a real <em>ergonomic</em> fit for the programmer. It has a self-documenting feature which is incredibly useful: sort of like what R does, it takes comments in code and makes them into documentation. Unlike R documentation there is a way of viewing it in a <a href="https://github.com/locklin/lush-code/blob/master/lush1/trunk/lsh/libogre/helptool.lsh">nice gui</a> and linking it to other documentation. So you have a nice manual for the system and whatever you built in it, almost automagically. Remember “literate coding?” It was always a sort of aspiration: this is a real <a href="https://github.com/locklin/lush-code/blob/master/lush1/trunk/lsh/libstd/ldoc.lsh">implementation</a> of it, and it’s so easy to use, you’d have to be actively malicious or in a pretty big hurry not to do it. Here’s a screen I made for myself so I could remember how to use some code I built 15 years ago (it still works BTW). You can update it at the CLI, just like everything else in a Lisp.</p>
<p><a href="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png"><img data-attachment-id="7503" data-permalink="https://scottlocklin.wordpress.com/2024/11/19/lush-my-favorite-small-programming-language/lush/" data-orig-file="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png" data-orig-size="1036,617" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="lush" data-image-description="" data-image-caption="" data-medium-file="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png?w=300" data-large-file="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png?w=720" src="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png?w=720" alt="" width="720" height="429" srcset="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png?w=720 720w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png?w=150 150w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png?w=300 300w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png?w=768 768w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png?w=1024 1024w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/lush.png 1036w" sizes="(max-width: 720px) 100vw, 720px"></a></p>
<p>As a Lisp, you have access to macros which allows you to do magic things that make <a href="https://x.com/paulg/status/1853046165467508977">Paul Graham</a> happy.&nbsp; I am smooth brain: only wrote a couple of them: I’ve written considerably more C macros than Lisp macros and plan on keeping it that way. The Lush authors also don’t use them very often; mostly in the <a href="https://github.com/locklin/lush-code/tree/master/lush1/trunk/lsh/compiler">compiler</a>, which is how it should be.&nbsp; <em>“A word to the wise: don’t get carried away with macros.”</em>&nbsp; as Peter Norvig told us in PAIP. There is a nice object system, and a very useful set of GUI tooling. Not just the help gizmo; there’s a full fledged GUI (<a href="https://github.com/locklin/lush-code/blob/master/lush1/trunk/lsh/libogre/ogre.lsh">ogre</a>). Imagine that; something to develop old fashioned graphical user interfaces without importing two gigabytes of Electron and javascript baloney. The <a href="https://github.com/locklin/lush-code/blob/master/lush1/trunk/lsh/libogre/helptool.lsh">helptool</a> uses this; it is not an HTML browser. The documentation format looks a bit like markdown with a few quirks; I never had to look at a manual to write the stuff. Essentially it looks like the standard two sentence comments you put to remind yourself what a complicated function does. It has a nice object system the GUI thing is written in; I assume it’s something like <a href="https://en.wikipedia.org/wiki/Common_Lisp_Object_System">CLOS</a>: whatever it is, there are no surprises and anyone who knows about namespaces and objects can use it. I found it particularly useful for its encapsulation of raw FFI pointers and other tooling which is best trapped in a namespace where it can’t hurt anything.</p>
<p>Since it is oriented around developing 80s-90s era cutting edge machine learning, one of the core types is the array. The arrays are real APL style arrays: rank 0 to rank 4, which is probably one rank higher than most sane people use (most people use rank 2, aka matrices). It looks like it had up to rank-7 at one point: I have no idea what you’d do with that. APLs such as J often have rank-whatever, so someone somewhere has probably done something with such structures. Lush2 had an interesting APL like sublanguage for operating on the arrays, which looked pretty handy, but which I never quite got into (most of my work was in Lush1).</p>
<p>All this is cool, but I suppose <a href="https://www.red-lang.org/">other</a> small programming languages promise things like this. The really cool thing about it is the layers. You get a high level interpreted Lisp. You also have a compilable subset of Lisp; mostly oriented around numerics things, just as one would expect in a domain specific language one might develop early convolutional net/deep learning algorithms in. Even better than this, if you want to call some C, including calling libraries, you can enclose your C in a Lisp macro and compile it right into the interpreter. Most of the interesting and useful code in the world still sits behind a C API. With a tool like this: suddenly you have a useful interpreter where you can vacuum in all the DLLs you want, and they’ll be available at the command line.</p>
<p><a href="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png"><img data-attachment-id="7506" data-permalink="https://scottlocklin.wordpress.com/2024/11/19/lush-my-favorite-small-programming-language/autoencoder/" data-orig-file="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png" data-orig-size="1147,1001" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="autoencoder" data-image-description="" data-image-caption="" data-medium-file="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png?w=300" data-large-file="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png?w=720" src="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png?w=720" alt="" width="720" height="628" srcset="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png?w=720 720w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png?w=150 150w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png?w=300 300w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png?w=768 768w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png?w=1024 1024w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/autoencoder.png 1147w" sizes="(max-width: 720px) 100vw, 720px"></a></p>
<p>Most interpreters have some FFI facility for doing this; none to my knowledge are this easy to use or powerfully agglomerative. The memory management happens for free, more or less. In, say, R’s repl, you can do something called dyn.load on libraries with R compatible types. If it’s more complex than that you might have to write significant wrapper code, and this is a hack: it might just leak memory all over the place. You have to work pretty hard to encapsulate C libraries in a proper R package, compiling against the R sources. J, same story; you can use the <a href="https://code.jsoftware.com/wiki/Guides/DLLs/Calling_DLLs">15!:0 foreign</a> to load a dll and wrap up J structures to send, with some tooling to deallocate or copy memory locations (very carefully). In Lush, you call the C functions directly, in C, on C’s terms (or C++ ). You can write a couple of lines C wrapper, a couple of pages; whatever: it’s all a part of the Lush source. If you look at examples of well-wrapped dlls in R on CRAN, you’ll see they’re festooned with all manner of ugly R structure casts, mysterious R #defines and all kinds of badness and quasi-memory management you’d have to read a 300 page manual to make sense of what’s going on. Having done this a few times, I’m exaggerating a tiny bit, but it is tedious and fiddly and takes a fair amount of work; a couple days if you’ve never done it before, versus a couple minutes. In Lush you just stick a dollar sign in front of variables you allocated in Lush in your C function calls, and after it’s been compiled into the interpreter (which happens if you “libload” the file), you call them, variables appear where they’re supposed to. No memory leaks. Usually doesn’t take down the interpreter when something goes wrong, though of course if you send something weird to a raw pointer it will probably segfault and die. Here’s an image grab of a simple method for instantiating a KD-tree using <a href="https://www.cs.umd.edu/~mount/ANN/">LibANN</a> (a bleeding edge nearest neighbor library of circa 2009):</p>
<div data-shortcode="caption" id="attachment_7508"><p><a href="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/c-magic.png"><img aria-describedby="caption-attachment-7508" data-attachment-id="7508" data-permalink="https://scottlocklin.wordpress.com/2024/11/19/lush-my-favorite-small-programming-language/c-magic/" data-orig-file="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/c-magic.png" data-orig-size="596,607" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="C-magic" data-image-description="" data-image-caption="" data-medium-file="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/c-magic.png?w=295" data-large-file="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/c-magic.png?w=596" src="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/c-magic.png" alt="" width="596" height="607" srcset="https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/c-magic.png 596w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/c-magic.png?w=147&amp;h=150 147w, https://scottlocklin.wordpress.com/wp-content/uploads/2024/11/c-magic.png?w=295&amp;h=300 295w" sizes="(max-width: 596px) 100vw, 596px"></a></p><p id="caption-attachment-7508">First lines are the documentation; inside the defmethod we try to make a new kdtree; the stuff between #{ and }# is normal C++. You can see the $ in front of $out, this tells the Lush compiler to pull the result back into the interpreter. This method gets compiled and loaded and accessed like any other method in Lush. idx2 is a matrix type, the other stuff does what you think it does.</p></div>
<p>Lush dates from <em><strong>1987</strong></em>: I don’t even remember what kind of computers people used back then. I assume something like a 68020 Sun Workstation or a VAX. Even when I was using it in 2009, a “multicore” system might have two cores, so it wasn’t really designed with that sort of thing in mind either (though you could link to blas which do this in most numerics cases and it has tooling to use it on a <a href="https://github.com/locklin/lush-code/blob/master/lush1/trunk/lsh/libstd/cluster.lsh">cluster</a>). Some of the intestines of the thing probably reflect this. I’m sure Lush1 is nowhere near 64 bit clean (trying to allocate a big array: when I was using it in 2009 it was 32 bit binaries only, which was fine as nobody had 256g of ram back then. Other stuff which will seem unfamiliar to contemporary people: it’s for talking to local libraries. There is no provision for a package manager over the interbutts, or much other network stuff I noticed beyond sockets. No JSON (didn’t exist), sql interfaces (was exotic pay-for technology) and none of the stuff modern code sloppers are used to having. It was mostly a tool for developing more Lush code which links to locally installed libraries: this is what R&amp;D on machine learning algorithms had to be back then. As a tool for building your own little universe of new numerics oriented algorithms it is almost incomparably cozy and nice. You get the high level stuff to move bits around in style. You get the typedefed sublanguage to compile hot chunks to the metal, and you get C/C++ APIs or adding new functions written in C/C++ as a natural part of the system. Extremely cozy system to use. While it’s not the Lisp machine enthusiasts like <a href="https://www.loper-os.org/">Stas</a> are always telling us about, it’s probably about as close as you’re going to get to that experience using a contemporary operating system and hardware. Yes you have to deal with the C API: I’m sorry about that, but it’s just current year reality. Nobody is going to rewrite BLAS&nbsp; in Haskell or CMU-CL to make you happy. Purity is folly.</p>
<p>As a tool, if I had to fault it for anything, it’s a few small things which I could probably fix. For example, in Kubuntu anyway, you can’t copy/paste examples from the helptool. This is probably something that could be repaired if I dig down into whatever X library the ogre package calls to do this. It’s no big deal; not a very wordy language anyway, and I should be reading the docs and typing code I’m about to run in emacs rather than copypasta. Another slightly annoying thing is a lack of built in pretty-print for results. Many languages have this problem: in Lush it’s easy to write one and I have one around somewhere. Some of the packages aren’t well documented and some don’t work because of various forms of bitrot: this is to be expected in something this old. Other than that, no faults. Very cozy programming language. The coziest.</p>
<p><img src="https://i.imgur.com/ldiuNCD.gif" width="498" height="381"></p>
<p>The <a href="https://github.com/locklin/lush-code/tree/master/lush1/trunk/src">C insides</a> are fairly understandable, modulo the glowing crystal <a href="https://github.com/locklin/lush-code/blob/master/lush1/trunk/src/dldbfd.c">dldbfd.c</a> gizmo at the center that does the binutils incantations that make the dynamic linking magic happen. Even that looks like it could be understood if you were familiar with binutils. Lush1 there are a number of odd pieces that were planned to be sawed off which you can sort of infer by their absence in <a href="https://github.com/locklin/lush-code/tree/master/lush2">Lush2</a>, which had a redesigned VM. However, Lush1 compiles and runs the old code, and Lush2 doesn’t.</p>
<p>While this programming language could (and really should) be revived, even in its present state it can be marveled at. Both for its historical importance in developing machine learning algorithms, and for its wonderful “programmer first” utility. I don’t know what exigencies caused them to move the Torch neural net library to Lua; probably whiny wimps who were intimidated by parenthesis. I can guess why it ended up in Python (the Visual Basic of current year). It’s one of those things where, had things worked out a little differently, machine learning people would be typing lots of parenthesis in <em>vastly more futuristic</em> Lush instead of drearily plodding along with spaghetti in Jupyter. It represents a very clear vision of how software development should work. No bureaucracies or committees were involved in its design: just people who needed a good tool to invent the future. I suspect the committees and social pressures involved in larger programming languages is why they’re often so awful. Lush is all designed and built by <em>makers</em>, not bureaucrats and “product managers.” It feels purposeful. It also feels incomplete, which is as it should be, as these guys were too talented to maintain programming languages. Like an unfinished <a href="https://en.wikipedia.org/wiki/Saint_Jerome_in_the_Wilderness_%28Leonardo%29#/media/File:Saint_Jerome_Leonardo_-_image_only_(Q972196).jpg">DaVinci painting</a>; you can see the grandeur of the artist’s vision.</p>
<p>I’ve always been fans of these guys; as I pointed out in my article on <a href="https://scottlocklin.wordpress.com/2023/05/31/djvu-and-its-connection-to-deep-learning/">DjVu</a>, there is much to admire beyond their good taste in algorithms and dogged determination to continue working on them at a time when only eccentrics were interested in neural nets. All the cool kids of the era were doing <a href="https://github.com/locklin/lush-code/blob/master/lush2/packages/svm/lasvm.lsh">SVMs</a> …. because …. researchers are mostly trend following rather than thinking. Hopefully I don’t cheese them off too much by bringing it up, though as an American it is arguably a sovereign duty to piss off the French. For myself, I have a shitload of work to do in coming months. I sort of hope I can find an excuse to fiddle around with it some more, or maybe even use it in production in some small way. If I do, I’ll write about it. I&nbsp; encourage others to give it a try and ponder how cool 2024 would have been if we used this tool instead of trashfire Python slop you’re all doomed to use in your day job.</p>
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Let's Encrypt is 10 years old now (477 pts)]]></title>
            <link>https://letsencrypt.org/2014/11/18/announcing-lets-encrypt/</link>
            <guid>42191228</guid>
            <pubDate>Wed, 20 Nov 2024 06:13:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://letsencrypt.org/2014/11/18/announcing-lets-encrypt/">https://letsencrypt.org/2014/11/18/announcing-lets-encrypt/</a>, See on <a href="https://news.ycombinator.com/item?id=42191228">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	
	<article>
		<p>Vital personal and business information flows over the Internet more frequently than ever, and we don’t always know when it’s happening. It’s clear at this point that encrypting is something all of us should be doing. Then why don’t we use <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">TLS (the successor to SSL)</a> everywhere? Every browser in every device supports it. Every server in every data center supports it. Why don’t we just flip the switch?</p>
<p>The challenge is server certificates. The anchor for any TLS-protected communication is a public-key certificate which demonstrates that the server you’re actually talking to is the server you intended to talk to. For many server operators, getting even a basic server certificate is just too much of a hassle. The application process can be confusing. It usually costs money. It’s tricky to install correctly. It’s a pain to update.</p>
<p>Let’s Encrypt is a new free certificate authority, built on a foundation of cooperation and openness, that lets everyone be up and running with basic server certificates for their domains through a simple one-click process.</p>
<p>Mozilla Corporation, Cisco Systems, Inc., Akamai Technologies, Electronic Frontier Foundation, IdenTrust, Inc., and researchers at the University of Michigan are working through the Internet Security Research Group (“ISRG”), a California public benefit corporation, to deliver this much-needed infrastructure in Q2 2015. The ISRG welcomes other organizations dedicated to the same ideal of ubiquitous, open Internet security.</p>
<p>The key principles behind Let’s Encrypt are:</p>
<ul>
<li><strong>Free:</strong> Anyone who owns a domain can get a certificate validated for that domain at zero cost.</li>
<li><strong>Automatic:</strong> The entire enrollment process for certificates occurs painlessly during the server’s native installation or configuration process, while renewal occurs automatically in the background.</li>
<li><strong>Secure:</strong> Let’s Encrypt will serve as a platform for implementing modern security techniques and best practices.</li>
<li><strong>Transparent:</strong> All records of certificate issuance and revocation will be available to anyone who wishes to inspect them.</li>
<li><strong>Open:</strong> The automated issuance and renewal protocol will be an open standard and as much of the software as possible will be open source.</li>
<li><strong>Cooperative:</strong> Much like the underlying Internet protocols themselves, Let’s Encrypt is a joint effort to benefit the entire community, beyond the control of any one organization.</li>
</ul>
<p>If you want to help these organizations in making TLS Everywhere a reality, here’s how you can get involved:</p>
<ul>
<li><a href="https://letsencrypt.org/sponsors/" hreflang="">Sponsor ISRG</a></li>
<li><a href="https://letsencrypt.org/getinvolved/" hreflang="">Help Us Build Let’s Encrypt</a></li>
</ul>
<p>To learn more about the ISRG and our partners, check out our <a href="https://letsencrypt.org/about/" hreflang="">About</a> page.</p>

	</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Blender 4.3 (235 pts)]]></title>
            <link>https://www.blender.org/download/releases/4-3/</link>
            <guid>42190863</guid>
            <pubDate>Wed, 20 Nov 2024 04:39:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.blender.org/download/releases/4-3/">https://www.blender.org/download/releases/4-3/</a>, See on <a href="https://news.ycombinator.com/item?id=42190863">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<article id="post-93176" class="page">
			<div>
				
<div id="intro">
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/www.blender.org\/wp-content\/uploads\/2024\/10\/blender_43_splash.webp&quot;,&quot;figureClassNames&quot;:&quot;wp-block-image size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-93060&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1000,&quot;targetHeight&quot;:500,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: Blender 4.3 splash artwork by Blender Studio&quot;,&quot;alt&quot;:&quot;Blender 4.3 splash artwork by Blender Studio&quot;}" data-wp-interactive="core/image"><img fetchpriority="high" decoding="async" width="1000" height="500" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2024/10/blender_43_splash.webp" alt="Blender 4.3 splash artwork by Blender Studio" srcset="https://www.blender.org/wp-content/uploads/2024/10/blender_43_splash.webp 1000w, https://www.blender.org/wp-content/uploads/2024/10/blender_43_splash-512x256.webp 512w, https://www.blender.org/wp-content/uploads/2024/10/blender_43_splash-768x384.webp 768w" sizes="(max-width: 1000px) 100vw, 1000px"><figcaption><mark>Splash artwork by <a href="https://studio.blender.org/" data-type="link" data-id="https://studio.blender.org/" target="_blank" rel="noreferrer noopener">Blender Studio</a></mark></figcaption></figure>



<p>Released November 19th, 2024</p>
</div>



<div id="recap">
<h2>Video <strong>Recap</strong></h2>



<p>Round-up of what’s new, in detail.</p>



<figure><p>
<iframe title="Blender 4.3 New Features Official Overview" width="500" height="281" src="https://www.youtube.com/embed/KnpvIIfm7uQ?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p><figcaption>Blender 4.3 new features overview by Jonathan Lampel from <a href="https://www.youtube.com/channel/UC9VayT7q3pQ7tdF-TG4Q0yQ" data-type="link" data-id="https://www.youtube.com/channel/UC9VayT7q3pQ7tdF-TG4Q0yQ" target="_blank" rel="noreferrer noopener">CGCookie</a>, <a href="https://www.youtube.com/@harryblends" data-type="link" data-id="https://www.youtube.com/@harryblends" target="_blank" rel="noreferrer noopener">Harry Blends</a>,<br><a href="https://www.youtube.com/@christopher3d475" data-type="link" data-id="https://www.youtube.com/@christopher3d475" target="_blank" rel="noreferrer noopener">Christopher 3D</a>, and Aidy Burrows from <a href="https://www.youtube.com/@CreativeShrimp" data-type="link" data-id="https://www.youtube.com/@CreativeShrimp" target="_blank" rel="noreferrer noopener">Creative Shrimp</a>.</figcaption></figure>
</div>



<div id="eevee">
<h5>EEVEE</h5>


<div id="paragraph-plus-block_e9bec21da4136ad6d2924cc127c07efb">
	<p>It’s (real-)time for</p>
<p>LIGHT <strong>LINKING</strong></p>

	
</div>



<p>The real-time renderer EEVEE now supports Light Linking and Shadow Linking—features previously available only in Cycles.</p>



<div>
<div>
<h2>More control than eeveer before.</h2>



<p>With light linking, lights can be set to affect only specific objects in the scene.</p>



<p>Shadow linking additionally gives control over which objects acts as shadow blockers for a light.</p>



<p>This is now feature parity with Cycles.</p>




</div>



<p>
<figure><video autoplay="" controls="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2024/11/eevee_light_linking.mp4"></video><figcaption>Simply create a Light Linking collection and drag in the objects you want to affect. Toggle the checkbox to invert the effect.</figcaption></figure>
</p>
</div>
</div>



<div id="rendering">
<h5>SHADERS</h5>


<p><strong>METAL</strong> TO THE PEDAL</p>



<p>A new <strong>Metallic BSDF</strong> node has been added to the shader editor.</p>



<div>
<div>
<h2>Metallic BSDF</h2>



<p>This new node exposes existing, but hard to access metallic material configurations in a small node.</p>




</div>



<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/www.blender.org\/wp-content\/uploads\/2024\/11\/rendering_metallic_bsdf.webp&quot;,&quot;figureClassNames&quot;:&quot;wp-block-image size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-93335&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:960,&quot;targetHeight&quot;:540,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: Metallic BSDF recreating Nickel and Copper materials&quot;,&quot;alt&quot;:&quot;Metallic BSDF recreating Nickel and Copper materials&quot;}" data-wp-interactive="core/image"><img decoding="async" width="960" height="540" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2024/11/rendering_metallic_bsdf.webp" alt="Metallic BSDF recreating Nickel and Copper materials" srcset="https://www.blender.org/wp-content/uploads/2024/11/rendering_metallic_bsdf.webp 960w, https://www.blender.org/wp-content/uploads/2024/11/rendering_metallic_bsdf-512x288.webp 512w, https://www.blender.org/wp-content/uploads/2024/11/rendering_metallic_bsdf-768x432.webp 768w, https://www.blender.org/wp-content/uploads/2024/11/rendering_metallic_bsdf-480x270.webp 480w" sizes="(max-width: 960px) 100vw, 960px"><figcaption>Metallic BSDF recreating Nickel and Copper materials.</figcaption></figure>
</div>
</div>



<div>
<div>
<figure><img loading="lazy" decoding="async" width="334" height="425" src="https://www.blender.org/wp-content/uploads/2024/11/rendering_metallic_bsdf_node.webp" alt="Metallic BSDF Node"><figcaption>Metallic BSDF node.</figcaption></figure>
</div>



<div>
<h3>F82 Tint</h3>



<p>The F82 Tint approximation is artist friendly, taking colors as inputs. This is currently in use by the <a href="https://docs.blender.org/manual/en/4.3/render/shader_nodes/shader/principled.html" data-type="link" data-id="https://docs.blender.org/manual/en/4.3/render/shader_nodes/shader/principled.html" target="_blank" rel="noreferrer noopener">Principled BSDF</a>.</p>



<h3>Conductor Fresnel</h3>



<p>This method is more complex to use, requiring IOR and Extinction coefficients per color channel as inputs. However, it can produce subtly more accurate results for real-world metals, previously achievable only through custom <a href="https://docs.blender.org/manual/en/4.3/render/shader_nodes/osl.html" data-type="link" data-id="https://docs.blender.org/manual/en/4.3/render/shader_nodes/osl.html" target="_blank" rel="noreferrer noopener">OSL</a> scripts.</p>



<p>EEVEE does not yet support the Conductor Fresnel type, so it internally remaps the IOR and Extinction coefficients to colors and uses them with the F82 Tint approximation.</p>
</div>
</div>
</div>



<div id="texturing">
<h5>TEXTURES</h5>



<h2><strong>Make Some</strong> <mark>(Gabor)</mark> <strong>Noise</strong></h2>



<p>A new texture node was added that can create procedural Gabor noise for random interleaved bands with controllable direction and width.</p>



<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/www.blender.org\/wp-content\/uploads\/2024\/11\/blender_43_gabor_noise_example.webp&quot;,&quot;figureClassNames&quot;:&quot;wp-block-image size-large&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-93349&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1587,&quot;targetHeight&quot;:951,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: Gabor Noise example in Blender 4.3&quot;,&quot;alt&quot;:&quot;Gabor Noise example in Blender 4.3&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1280" height="767" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2024/11/blender_43_gabor_noise_example-1280x767.webp" alt="Gabor Noise example in Blender 4.3" srcset="https://www.blender.org/wp-content/uploads/2024/11/blender_43_gabor_noise_example-1280x767.webp 1280w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_gabor_noise_example-512x307.webp 512w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_gabor_noise_example-768x460.webp 768w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_gabor_noise_example-1536x920.webp 1536w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_gabor_noise_example.webp 1587w" sizes="(max-width: 1280px) 100vw, 1280px"><figcaption><mark>New texture node Gabor Noise example in Blender 4.3</mark></figcaption></figure>




</div>



<section id="compositor">
<div>
<h5>COMPOSITOR</h5>


<p>YOU SHALL <strong>PASS</strong></p>



<div>
<p>Forget F12. EEVEE passes are now available for interactive compositing.</p>



<figure><video controls="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2024/11/eevee_compositor_multi_pass_s.mp4"></video><figcaption><mark>Multi-pass compositing lets you create complex NPR setups and effects directly in the 3D Viewport.</mark></figcaption></figure>
</div>
</div>



<div>
<h2>MORE COMPOSITOR</h2>



</div>
</section>



<section id="extensions"><img loading="lazy" decoding="async" width="1650" height="1027" alt="Blender 3.3 splash by Piotr Krynski" src="https://www.blender.org/wp-content/uploads/2022/08/piotr-krynski-scanislands-blender-33lts-crop.jpg" data-object-fit="cover" srcset="https://www.blender.org/wp-content/uploads/2022/08/piotr-krynski-scanislands-blender-33lts-crop.jpg 1650w, https://www.blender.org/wp-content/uploads/2022/08/piotr-krynski-scanislands-blender-33lts-crop-512x319.jpg 512w, https://www.blender.org/wp-content/uploads/2022/08/piotr-krynski-scanislands-blender-33lts-crop-1280x797.jpg 1280w, https://www.blender.org/wp-content/uploads/2022/08/piotr-krynski-scanislands-blender-33lts-crop-768x478.jpg 768w, https://www.blender.org/wp-content/uploads/2022/08/piotr-krynski-scanislands-blender-33lts-crop-1536x956.jpg 1536w" sizes="(max-width: 1650px) 100vw, 1650px"><div><p>BLENDER <strong>EXTENDED</strong></p>



<div>
<p>The <a href="https://extensions.blender.org/" data-type="link" data-id="https://extensions.blender.org/" target="_blank" rel="noreferrer noopener">Blender Extensions platform</a> continues to grow, offering hundreds of free add-ons and themes that enable endless customization of workflows.</p>



<p>You can also share your own add-ons and themes!</p>
</div>




</div></section>



<section id="uv">
<h5>UV EDITING</h5>


<p><strong>SLIM</strong> UVs</p>



<p>A new method makes unwrapping organic shapes a breeze.</p>



<div>
<div>
<h2>Minimum Stretch,<br>Minimal Effort</h2>



<p>A new iterative unwrapping method “Minimum Stretch” has been added which can deliver results with less distortion by iteratively refining the result.</p>



<p>Ideal for organic shapes. This uses the <strong>SLIM</strong> algorithm (Scalable Local Injective Mappings) internally, see the&nbsp;<a href="https://igl.ethz.ch/projects/slim/">research publication</a>.</p>



<p>It can be used from the Unwrap menu as well as “Live Unwrap”.</p>
</div>



<div>
<figure><img loading="lazy" decoding="async" width="602" height="369" src="https://www.blender.org/wp-content/uploads/2024/11/blender_43_uv_menu.webp" alt="Blender 4.3 UV Unwrap menu" srcset="https://www.blender.org/wp-content/uploads/2024/11/blender_43_uv_menu.webp 602w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_uv_menu-512x314.webp 512w" sizes="(max-width: 602px) 100vw, 602px"><figcaption>New UV Unwrap menu</figcaption></figure>
</div>
</div>



<div id="tabs-block_1208b238cfc04124f377487b130dbeb0">
		<ul role="tablist">
						<li>
				<a id="t-minimum-stretch-slim-0-tab" data-toggle="pill" href="#t-minimum-stretch-slim-0" role="tab" aria-controls="t-minimum-stretch-slim-0" aria-selected="true">
					Minimum Stretch (SLIM)				</a>
			</li>
						<li>
				<a id="t-conformal-1-tab" data-toggle="pill" href="#t-conformal-1" role="tab" aria-controls="t-conformal-1" aria-selected="false">
					Conformal				</a>
			</li>
						<li>
				<a id="t-angle-based-default-2-tab" data-toggle="pill" href="#t-angle-based-default-2" role="tab" aria-controls="t-angle-based-default-2" aria-selected="false">
					Angle Based (default)				</a>
			</li>
					</ul>
		
	</div>







<div>
<h2>PLUS</h2>



</div>
</section>



<section id="studio"><img loading="lazy" decoding="async" width="1142" height="690" alt="" src="https://www.blender.org/wp-content/uploads/2024/01/Screenshot-2024-01-05-at-11.08.20.png" data-object-fit="cover" data-object-position="50% 25%" srcset="https://www.blender.org/wp-content/uploads/2024/01/Screenshot-2024-01-05-at-11.08.20.png 1142w, https://www.blender.org/wp-content/uploads/2024/01/Screenshot-2024-01-05-at-11.08.20-512x309.png 512w, https://www.blender.org/wp-content/uploads/2024/01/Screenshot-2024-01-05-at-11.08.20-768x464.png 768w" sizes="(max-width: 1142px) 100vw, 1142px"><div><p><strong>STUDIO</strong> FRIENDLY</p>



<p>Thanks to portable installation, new environment variables, custom bundling of extensions, Blender 4.3 is easier than ever to integrate in studio pipelines.</p>




</div></section>



<div id="geometry-nodes">
<div>
<h5>GEOMETRY NODES</h5>


<p>SO <strong>MUCH</strong> IT<br>
DOESN’T FIT THIS TITLE</p>



<div>
<p>For Each Element Zone. Gizmos. Support for Grease Pencil. Packed Bakes. Custom Warnings. Geometry Names. New Nodes.</p>



<p>Simon Thommes offers a delightful sneak peek into the abundance of Geo Goodies packed into this Blender update!</p>
</div>



<figure><p>
<iframe loading="lazy" title="Gizmos, For-Each Zone and more! NEW Geometry Nodes features - Blender 4.3" width="500" height="281" src="https://www.youtube.com/embed/Opzk1wUhzCw?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p><figcaption>Overview of everything new in Geometry Nodes by Simon Thommes from Blender Studio.</figcaption></figure>
</div>



<div><p>EFFORTLESS ITERATION WITH<br>
<strong>FOR EACH</strong> ELEMENT</p>



<p>A new type of loop zone is available now! The <strong>For Each Element </strong>zone will make it easy to iterate over elements of a geometry in parallel, making repetitive processes a breeze to handle.</p>



<figure><video autoplay="" controls="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-for-each-zone-geo-nodes.mp4"></video></figure>




</div>



<div><p>GET <strong>HANDS-ON</strong></p>



<p>You can now add gizmos to node groups! This means you can edit the inputs to a node tree right in the 3D viewport – no need to dive into the node editor or modifier stack. It’s a game-changer for a more intuitive and hands-on experience!</p>


<div id="tabs-block_141ba90bf3f64ef10b62c9ba1bd70ccc">
		<ul role="tablist">
						<li>
				<a id="t-modifier-interaction-0-tab" data-toggle="pill" href="#t-modifier-interaction-0" role="tab" aria-controls="t-modifier-interaction-0" aria-selected="true">
					Modifier Interaction				</a>
			</li>
						<li>
				<a id="t-nodes-interaction-1-tab" data-toggle="pill" href="#t-nodes-interaction-1" role="tab" aria-controls="t-nodes-interaction-1" aria-selected="false">
					Nodes Interaction				</a>
			</li>
					</ul>
		
	</div>



<p>Although built-in nodes aren’t using this power yet, the future looks bright. Advanced users will benefit now, and soon everyone will enjoy Blender’s growing procedural capabilities!</p>




</div>



<div><p><strong>GEOMETRY NAMING</strong> MADE EASY</p>



<p>Introducing the <strong>Set Geometry Name</strong> node, a new node designed to enhance your workflow. This node allows for the easy assignment of names to geometries, with automatic initialization based on object and collection names.</p>



<figure><img loading="lazy" decoding="async" width="1055" height="475" src="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-geometry-names-1.png" alt="" srcset="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-geometry-names-1.png 1055w, https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-geometry-names-1-512x231.png 512w, https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-geometry-names-1-768x346.png 768w" sizes="(max-width: 1055px) 100vw, 1055px"><figcaption>Geometries can now be named with the new Set Geometry Name node.</figcaption></figure>




</div>



<div><p>GEO NODES MEETS <strong>GREASE PENCIL</strong></p>



<p>Geometry Nodes now work smoothly with Grease Pencil data, breaking it down into layers with curves and custom attributes. Updated nodes can now handle Grease Pencil data seamlessly, processing each layer separately.</p>



<figure><video autoplay="" controls="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2024/11/greasepencil_fan_art_magical_cat_by_threadwood.mp4"></video><figcaption>Fan art by Daniel Martinez Lara of <a href="https://www.threadwood.com/magical-cat.html" data-type="link" data-id="https://www.threadwood.com/" target="_blank" rel="noreferrer noopener">“Magical Cat” by</a> <a href="https://www.threadwood.com/magical-cat.html" data-type="link" data-id="https://www.threadwood.com/" target="_blank" rel="noreferrer noopener">Threadwood</a>, drawn using Grease Pencil converted into mesh on-the-fly using Geometry Nodes for a “claymation” effect.</figcaption></figure>



<figure><video controls="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-gp-v3-geo-nodes.mp4"></video></figure>




</div>



<div><p>NEW <strong>UTILITY NODES</strong></p>


<div id="cards-block_1073868a11f5bdd36ca2c9727dc6a1d8">
		
		
					<div>

																	<p><a href="https://docs.blender.org/manual/en/4.3/modeling/geometry_nodes/utilities/math/hash_value.html">
							<img decoding="async" src="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-utility-nodes-hash.png" alt="Hash Value">						</a></p><p><a href="https://docs.blender.org/manual/en/4.3/modeling/geometry_nodes/utilities/math/hash_value.html">Hash Value</a>
						
													<span href="https://docs.blender.org/manual/en/4.3/modeling/geometry_nodes/utilities/math/hash_value.html"><p>Hashes various types into an integer. Useful to generate stable randomness.</p>
</span>
											</p>
									</div>
				
					<div>

																	<p><a href="https://docs.blender.org/manual/en/4.3/modeling/geometry_nodes/utilities/math/integer_math.html">
							<img decoding="async" src="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-utility-nodes-integer-math.png" alt="Integer Math">						</a></p><p><a href="https://docs.blender.org/manual/en/4.3/modeling/geometry_nodes/utilities/math/integer_math.html">Integer Math</a>
						
													<span href="https://docs.blender.org/manual/en/4.3/modeling/geometry_nodes/utilities/math/integer_math.html"><p>Provides building block support for integer operations</p>
</span>
											</p>
									</div>
				
					</div>
</div>



<div><p>WARNINGS <strong>UI</strong></p>



<p>Introducing the <strong>Warning Node</strong>, which allows custom warnings to be added to node groups, allowing dynamic messaging directly on the interface.</p>






<div>
<div>
<h2>BE <strong>ALERT</strong></h2>



<p>The display of warnings in the Geometry Nodes modifier has been reorganized. They are now in a panel and ordered by severity and alphabetically.</p>




</div>



<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/www.blender.org\/wp-content\/uploads\/2024\/11\/blender-rn-4-3-warnings.png&quot;,&quot;figureClassNames&quot;:&quot;wp-block-image size-full m-0&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-93375&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:360,&quot;targetHeight&quot;:360,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="360" height="360" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-warnings.png" alt="" srcset="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-warnings.png 360w, https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-warnings-150x150.png 150w, https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-warnings-200x200.png 200w" sizes="(max-width: 360px) 100vw, 360px"></figure>
</div>
</div>
</div>



<div><p>OTHER <strong>GEO GOODIES</strong></p>



<div>
<div>
<figure><img loading="lazy" decoding="async" width="603" height="417" src="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-bake-size.png" alt="" srcset="https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-bake-size.png 603w, https://www.blender.org/wp-content/uploads/2024/11/blender-rn-4-3-bake-size-512x354.png 512w" sizes="(max-width: 603px) 100vw, 603px"><figcaption>Bake node in use</figcaption></figure>
</div>



<div><p>PACKED <strong>BAKES</strong></p>



<p>Bakes created with the Bake node or Simulation zone can now be packed into the .blend file.</p>
</div>
</div>



<div>
<h2>MORE GEOMETRY NODES</h2>







</div>
</div>
</div>



<div id="donate"><p><img loading="lazy" decoding="async" width="1270" height="720" alt="Sprite Fright" src="https://www.blender.org/wp-content/uploads/2023/03/sprite_fright_older_sprite_16x9.jpg" data-object-fit="cover" srcset="https://www.blender.org/wp-content/uploads/2023/03/sprite_fright_older_sprite_16x9.jpg 1270w, https://www.blender.org/wp-content/uploads/2023/03/sprite_fright_older_sprite_16x9-512x290.jpg 512w, https://www.blender.org/wp-content/uploads/2023/03/sprite_fright_older_sprite_16x9-768x435.jpg 768w" sizes="(max-width: 1270px) 100vw, 1270px"></p></div>



<section id="grease-pencil">
<h5>GREASE PENCIL</h5>


<p><strong>GREASE</strong> <span>LIGHTNIN’</span></p>



<p>The Grease Pencil engine was completely rewritten for better performance and to remove deeper limitations.</p>



<p>Pencils <s><mark>down</mark></s> up.</p>



<div>
<div>
<figure><img loading="lazy" decoding="async" width="502" height="729" src="https://www.blender.org/wp-content/uploads/2024/11/grease_pencil_layer_groups.webp" alt="Grease Pencil Layer Groups" srcset="https://www.blender.org/wp-content/uploads/2024/11/grease_pencil_layer_groups.webp 502w, https://www.blender.org/wp-content/uploads/2024/11/grease_pencil_layer_groups-353x512.webp 353w" sizes="(max-width: 502px) 100vw, 502px"></figure>
</div>



<div>
<h2><strong>Group</strong> Hug</h2>



<p>Organize your layers into Layer Groups! A new way to keep your Grease Pencil objects tidy.</p>



<p>They allow for easy toggling of visibility, locking, and onion skinning for all the layers in the group.</p>



<p>Additionally, they can be color-coded using <mark>c</mark><mark>o</mark><mark>l</mark><mark>o</mark><mark>r</mark> tags, similar to Collections in the Outliner.</p>




</div>
</div>



<div>
<div>
<h2><strong>Fill</strong>ing Great</h2>



<p>A new Fill Gradient tool is here!</p>



<p>Found in Edit Mode below the Interpolation tool, it lets users change the fill gradient (set in material settings) by selecting fill strokes and click-dragging with the Gradient tool.</p>




</div>



<div>
<figure><img loading="lazy" decoding="async" width="948" height="726" src="https://www.blender.org/wp-content/uploads/2024/11/grease_pencil_fill_gradient_tool.webp" alt="Fill Gradient Tool" srcset="https://www.blender.org/wp-content/uploads/2024/11/grease_pencil_fill_gradient_tool.webp 948w, https://www.blender.org/wp-content/uploads/2024/11/grease_pencil_fill_gradient_tool-512x392.webp 512w, https://www.blender.org/wp-content/uploads/2024/11/grease_pencil_fill_gradient_tool-768x588.webp 768w" sizes="(max-width: 948px) 100vw, 948px"></figure>
</div>
</div>



<div>
<p>
<figure><video autoplay="" controls="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2024/11/greasepencil_eraser.mp4"></video><figcaption>Four eraser brushes available through the asset shelf.</figcaption></figure>
</p>



<div>
<h2>No Trace Left Behind</h2>



<p>The eraser has been rewritten to allow strokes to be “cut”.</p>



<p>Instead of just deleting points, it now correctly solves for the intersections of the eraser’s edge and creates new points on the stroke.</p>



<p>The Soft eraser also does this but for multiple levels of transparency radiating outwards from the center of the eraser.</p>




</div>
</div>



<h2>MORE GREASE PENCIL</h2>




</section>



<section id="vfx-platform"><img loading="lazy" decoding="async" width="2048" height="858" alt="Still from Agent 327: view of Amsterdam." src="https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146.jpg" data-object-fit="cover" srcset="https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146.jpg 2048w, https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146-512x215.jpg 512w, https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146-1280x536.jpg 1280w, https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146-768x322.jpg 768w, https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146-1536x644.jpg 1536w" sizes="(max-width: 2048px) 100vw, 2048px"><div><p><strong>INDUSTRY</strong> READY</p>



<p>All Blender releases this year align with the <a href="https://vfxplatform.com/" data-type="link" data-id="https://vfxplatform.com/" target="_blank" rel="noreferrer noopener">VFX Reference Platform 2024</a>, making integration and maintenance in studio pipelines easier.</p>




</div></section>



<section id="asset"><p><strong>BRUSH UP</strong><br>
YOUR WORKFLOW</p>



<p><br>With over a hundred default brushes and an improved interface, Blender 4.3’s new brush workflow makes management, customization, and sharing across projects easier than ever.</p>



<figure><img loading="lazy" decoding="async" width="926" height="434" src="https://www.blender.org/wp-content/uploads/2024/11/blender_43_asset_shelf.webp" alt="Sculpt Mode Asset Shelf in Blender 4.3" srcset="https://www.blender.org/wp-content/uploads/2024/11/blender_43_asset_shelf.webp 926w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_asset_shelf-512x240.webp 512w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_asset_shelf-768x360.webp 768w" sizes="(max-width: 926px) 100vw, 926px"><figcaption>Asset shelf in the 3D Viewport while in mesh Sculpt mode.</figcaption></figure>



<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/www.blender.org\/wp-content\/uploads\/2024\/11\/blender_43_brush_popup_splash.webp&quot;,&quot;figureClassNames&quot;:&quot;wp-block-image aligncenter size-full is-style-cover-center-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-93560&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1052,&quot;targetHeight&quot;:658,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: Asset shelf in the 3D Viewport while in Grease Pencil Draw mode.&quot;,&quot;alt&quot;:&quot;Asset shelf in the 3D Viewport while in Grease Pencil Draw mode.&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1052" height="658" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2024/11/blender_43_brush_popup_splash.webp" alt="Asset shelf in the 3D Viewport while in Grease Pencil Draw mode." srcset="https://www.blender.org/wp-content/uploads/2024/11/blender_43_brush_popup_splash.webp 1052w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_brush_popup_splash-512x320.webp 512w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_brush_popup_splash-768x480.webp 768w" sizes="(max-width: 1052px) 100vw, 1052px"><figcaption>Asset shelf in the 3D Viewport while in Grease Pencil Draw mode.</figcaption></figure>
</div>



<div>
<div><p>BRUSH = ASSET</p>



<p>Brushes are now assets, making them easy to save, share, and reuse through the Asset Browser.</p>



<p>Organize custom libraries and access your favorite brushes across projects.</p>




</div>



<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/www.blender.org\/wp-content\/uploads\/2024\/11\/blender_43_brush_asset_menu.webp&quot;,&quot;figureClassNames&quot;:&quot;wp-block-image size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-93564&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:590,&quot;targetHeight&quot;:523,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: Brush Asset menu&quot;,&quot;alt&quot;:&quot;Brush Asset menu&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="590" height="523" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2024/11/blender_43_brush_asset_menu.webp" alt="Brush Asset menu" srcset="https://www.blender.org/wp-content/uploads/2024/11/blender_43_brush_asset_menu.webp 590w, https://www.blender.org/wp-content/uploads/2024/11/blender_43_brush_asset_menu-512x454.webp 512w" sizes="(max-width: 590px) 100vw, 590px"><figcaption>Duplicate, save, and edit medatada of brush assets.</figcaption></figure>
</div>
</div>



<h2>AND MORE</h2>



</section>



<section id="ui">
<h5>USER INTERFACE</h5>


<p>USER INTERFACE</p>



<div>
<h2>Dock-on<br>Dock-off</h2>



<p>Introducing: Area Docking!</p>



<p>Tear an area into its own (now neatly named) window, or dock it back into another area.</p>
</div>



<div>
<div>
<h2>Lots to Say</h2>



<p>Tooltips now provide much more information than before.</p>



<p>Images display their resolution and color space, movies show their duration, and fonts include previews.</p>
</div>



<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/www.blender.org\/wp-content\/uploads\/2024\/11\/image.png&quot;,&quot;figureClassNames&quot;:&quot;wp-block-image size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-93592&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:702,&quot;targetHeight&quot;:519,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: Improved tooltips.&quot;,&quot;alt&quot;:&quot;Improved tooltips.&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="702" height="519" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2024/11/image.png" alt="Improved tooltips." srcset="https://www.blender.org/wp-content/uploads/2024/11/image.png 702w, https://www.blender.org/wp-content/uploads/2024/11/image-512x379.png 512w" sizes="(max-width: 702px) 100vw, 702px"></figure>
</div>
</div>



<div>
<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/www.blender.org\/wp-content\/uploads\/2024\/11\/image-1.png&quot;,&quot;figureClassNames&quot;:&quot;wp-block-image size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-93594&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:479,&quot;targetHeight&quot;:246,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="479" height="246" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2024/11/image-1.png" alt=""></figure>
</div>



<p>To improve accessibility, tooltips now have dedicated style settings for font size, weight, and shadows.</p>
</div>



<div>
<div>
<h2>Clarity</h2>



<p>A new theme option allows for enhanced highlights around an area when the mouse is over it, for better accessibility.</p>



<p>Non-active areas can also have a custom border color.</p>
</div>



<div>
<figure><img loading="lazy" decoding="async" width="577" height="198" src="https://www.blender.org/wp-content/uploads/2024/11/image-2.png" alt="" srcset="https://www.blender.org/wp-content/uploads/2024/11/image-2.png 577w, https://www.blender.org/wp-content/uploads/2024/11/image-2-512x176.png 512w" sizes="(max-width: 577px) 100vw, 577px"></figure>
</div>
</div>



<h2>MORE UI</h2>



<div id="word-cloud-block_4e1123036cf9a57031fc1579f28d0122">
			<div>
			<p>Nodes</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/246c513f92353af7c9d1644901ce160da83e928a" target="_blank">
							Added support for line separators in built-in nodes.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/c0179a1b782eb8d7f298421f4adae04307aa9d02" target="_blank">
							Hover on panel headers show their description.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/e842966c5e" target="_blank">
							Node Groups: new default width option.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/a6d5652043e4b98035a535c693bdf7ae868053ae" target="_blank">
							String sockets can now use placeholders instead of labels, to allow wider input fields.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/83fa565ec28f8faae7da0057a086f1ff481c1a39" target="_blank">
							Inserting nodes with link-drag-search is much more convenient now.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Cursors</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/458c60269b" target="_blank">
							macOS: New “Hand”-style mouse cursors added for dialog and docking interaction.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/125252" target="_blank">
							New cursors for VSE handles.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Keymap</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/095aab986b" target="_blank">
							File Browser: Assign mouse buttons 4 and 5 to navigate back/next.						</a>
														</li>
										</ul>
		</div>
			
			<div>
			<p>Status Bar</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/0c1d8ad8a5" target="_blank">
							Status bar cleared during text input and other modal operations.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/user_interface/#status-bar" target="_blank">
							Compact layout thanks to Improved spacing.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/a57c3be05e" target="_blank">
							New SVG icons.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/5642944e33" target="_blank">
							Show screen operation keymaps info.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>General</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/5cfe733f84" target="_blank">
							Improved Color Picker layout.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/019d987072" target="_blank">
							Wider data-block search lists.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/0e690d3abb" target="_blank">
							Dialogs: Change the cursor on hover when a dialog can be dragged.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/f40cd831fd" target="_blank">
							Timeline (and similar editors) hide the scroll-bars when they are sized very short.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/cc9bd758c9" target="_blank">
							Maximum UI resolution scale increased to 6x.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/1b6910c61c" target="_blank">
							Prevent tooltips from changing size on zoom.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/123408" target="_blank">
							Viewport color picking in Rendering mode now returns the linear color value, without view transform applied.						</a>
														</li>
															<li>
																<span>The Auto-Keying button is now colored red when active.</span>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/111495" target="_blank">
							Windows with a single editor now have descriptive titles.						</a>
														</li>
															<li>
																<span>Better padding all over the place.</span>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/b64cf71c1d" target="_blank">
							File Browser thumbnail file type icon moved to corner of item bounds.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/d8f550875b" target="_blank">
							Color sampling performance improvements.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/126376" target="_blank">
							Hit size for resizing areas increased.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Menus</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/4317f50f5f" target="_blank">
							Recent Files: New option to clear only items not found.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/5bb7f06409" target="_blank">
							Recent Files: Items not found are no longer removed automatically. 						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/9c4e56e307" target="_blank">
							“Save Incremental” menu item moved down in its section to reduce accidental selection.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Text</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/108b71047a" target="_blank">
							“Widget Label” Text Style removed.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/1992296828" target="_blank">
							Text weights change correctly if selecting a UI font with non-regular weight.						</a>
														</li>
										</ul>
		</div>
		</div>
</section>



<section id="arm"><img loading="lazy" decoding="async" width="2560" height="1073" alt="Charge Open Movie" src="https://www.blender.org/wp-content/uploads/2023/02/background_charge_fireplace.jpg" data-object-fit="cover" srcset="https://www.blender.org/wp-content/uploads/2023/02/background_charge_fireplace.jpg 2560w, https://www.blender.org/wp-content/uploads/2023/02/background_charge_fireplace-512x215.jpg 512w, https://www.blender.org/wp-content/uploads/2023/02/background_charge_fireplace-1280x537.jpg 1280w, https://www.blender.org/wp-content/uploads/2023/02/background_charge_fireplace-768x322.jpg 768w, https://www.blender.org/wp-content/uploads/2023/02/background_charge_fireplace-1536x644.jpg 1536w, https://www.blender.org/wp-content/uploads/2023/02/background_charge_fireplace-2048x858.jpg 2048w" sizes="(max-width: 2560px) 100vw, 2560px"><div><p><strong>ARM</strong>ED<br>
FOR THE FUTURE</p>



<p>Blender 4.3 runs natively on Windows on Arm, thanks to integration by <a href="https://www.qualcomm.com/" data-type="link" data-id="https://www.qualcomm.com/" target="_blank" rel="noreferrer noopener">Qualcomm</a>, which recently joined the <a href="https://fund.blender.org/" target="_blank" rel="noreferrer noopener">Development Fund</a>.</p>




</div></section>



<section id="vse">
<div>
<div><p><span>BRINGING STRIPS</span><br>
<strong>TOGETHER</strong></p>



<p>Blender 4.3 is another fantastic release for the Video Sequencer, with numerous performance improvements and features you won’t want to live without.</p>
</div>



<div>
<div>
<h2><strong>CONNECTED</strong> STRIPS</h2>



<p>Connect strips for easy selection and transformation.</p>



<p>Hold <strong>Alt</strong> to select and transform only one strip while keeping the connection.</p>



<p>Quickly toggle connection using <strong>Ctrl+Alt+C</strong>.</p>
</div>



<p>
<figure><video autoplay="" controls="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2024/11/vse_connect_strips.mp4"></video><figcaption>Movie strips are automatically connected to their sound strip.</figcaption></figure>
</p>
</div>



<div>
<p>
<figure><video autoplay="" controls="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2024/11/vse_preview_snap.mp4"></video><figcaption>Snapping in Sequencer Preview.</figcaption></figure>
</p>



<div>
<h2>OH SNAP!</h2>



<p>Sequencer Preview now supports snapping, with source points at corners and origins of all selected, visible strips.</p>



<p>Targets include preview boundaries, center, and other strip corners/origins.</p>
</div>
</div>



<h2><strong>FASTER</strong> EVERYTHING</h2>



<div>
<div>
<ul>
<li><a href="https://projects.blender.org/blender/blender/pulls/127121" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/127121" target="_blank" rel="noreferrer noopener">Color Balance</a> is several times faster.</li>



<li><a href="https://projects.blender.org/blender/blender/pulls/127409" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/127409" target="_blank" rel="noreferrer noopener">Saturation and Multiply strip </a>color controls are several times faster (multi-threaded now).</li>



<li><a href="https://projects.blender.org/blender/blender/pulls/127467" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/127467" target="_blank" rel="noreferrer noopener">Tonemap modifier is 10-15 times faster</a> (multi-threaded luminance estimation, color conversion optimizations).</li>



<li><a href="https://projects.blender.org/blender/blender/pulls/127310" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/127310" target="_blank" rel="noreferrer noopener">Faster processing of alpha-over </a>strip at the bottom of strip stack.</li>



<li>Various parts of <a href="https://developer.blender.org/docs/release_notes/4.3/sequencer/#performance" data-type="link" data-id="https://developer.blender.org/docs/release_notes/4.3/sequencer/#performance" target="_blank" rel="noreferrer noopener">image processing related to color transformations</a> (particularly for float/HDR images) are faster now.</li>
</ul>
</div>



<div>
<ul>
<li>Drawing the timeline has been improved for complex timelines:
<ul>
<li>Faster drawing of the <a href="https://projects.blender.org/blender/blender/pulls/127913" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/127913" target="_blank" rel="noreferrer noopener">channels list</a>.</li>



<li>Faster drawing of <a href="https://projects.blender.org/blender/blender/pulls/128015" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/128015" target="_blank" rel="noreferrer noopener">waveforms and animation curve overlays</a>.</li>



<li>Faster drawing of <a href="https://projects.blender.org/blender/blender/pulls/128170" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/128170" target="_blank" rel="noreferrer noopener">retiming keys</a>.</li>



<li>Other <a href="https://projects.blender.org/blender/blender/pulls/128057" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/128057" target="_blank" rel="noreferrer noopener">optimizations</a>.</li>
</ul>
</li>
</ul>







<ul>
<li>Multi-threaded <a href="https://projects.blender.org/blender/blender/pulls/128054" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/128054" target="_blank" rel="noreferrer noopener">video proxy downscaling</a>.</li>



<li><a href="https://projects.blender.org/blender/blender/pulls/126972" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/126972" target="_blank" rel="noreferrer noopener">Thumbnails</a> now draw much faster.</li>



<li>Faster and more consistent <a href="https://projects.blender.org/blender/blender/pulls/126405" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/126405" target="_blank" rel="noreferrer noopener">thumbnail cache</a>.</li>
</ul>
</div>
</div>
</div>



<h2>EVEN MORE <strong>SEQUENCER</strong></h2>




</section>



<section id="splash"><img loading="lazy" decoding="async" width="1920" height="959" alt="Blender 4.3 splash artwork by Blender Studio" src="https://www.blender.org/wp-content/uploads/2024/11/blender_splash_artwork_43_2K.webp" data-object-fit="cover" srcset="https://www.blender.org/wp-content/uploads/2024/11/blender_splash_artwork_43_2K.webp 1920w, https://www.blender.org/wp-content/uploads/2024/11/blender_splash_artwork_43_2K-512x256.webp 512w, https://www.blender.org/wp-content/uploads/2024/11/blender_splash_artwork_43_2K-1280x639.webp 1280w, https://www.blender.org/wp-content/uploads/2024/11/blender_splash_artwork_43_2K-768x384.webp 768w, https://www.blender.org/wp-content/uploads/2024/11/blender_splash_artwork_43_2K-1536x767.webp 1536w" sizes="(max-width: 1920px) 100vw, 1920px"><div>
<div>
<h2>GET THE ARTWORK</h2>



<p>Blender splash artwork source files are available for you to play with, not only for Blender 4.3 but for <a href="https://www.blender.org/download/demo-files/#blender-splash-screens" data-type="URL" data-id="https://www.blender.org/download/demo-files/#blender-splash-screens" target="_blank" rel="noreferrer noopener">previous versions as</a><a href="https://www.blender.org/download/demo-files/#splash" data-type="URL" data-id="https://www.blender.org/download/demo-files/#splash" target="_blank" rel="noreferrer noopener"> </a><a href="https://www.blender.org/download/demo-files/#blender-splash-screens" data-type="URL" data-id="https://www.blender.org/download/demo-files/#blender-splash-screens">well</a>.</p>




</div>



<div>
<figure><img loading="lazy" decoding="async" width="1000" height="500" src="https://www.blender.org/wp-content/uploads/2024/10/blender_43_splash.webp" alt="Blender 4.3 splash artwork by Blender Studio" srcset="https://www.blender.org/wp-content/uploads/2024/10/blender_43_splash.webp 1000w, https://www.blender.org/wp-content/uploads/2024/10/blender_43_splash-512x256.webp 512w, https://www.blender.org/wp-content/uploads/2024/10/blender_43_splash-768x384.webp 768w" sizes="(max-width: 1000px) 100vw, 1000px"><figcaption>Blender 4.3 splash artwork by Blender Studio</figcaption></figure>
</div>
</div></section>



<section id="more">
<h2>BUT WAIT, THERE’S MORE</h2>


<div id="word-cloud-block_987ad121eba15f4b73ecf0f530ff27b0">
			
			<div>
			<p>Sculpt</p>
			<ul>
											<li>
																<a href="https://code.blender.org/2024/11/this-summers-sculpt-mode-refactor/" target="_blank">
							Entering sculpt mode is about <strong>5 times faster</strong>.						</a>
														</li>
															<li>
																<a href="https://code.blender.org/2024/11/this-summers-sculpt-mode-refactor/" target="_blank">
							Brush evaluation is about <strong>8 times faster</strong> for mesh sculpting.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Animation</p>
			<ul>
											<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/animation_rigging/#properties-editor" target="_blank">
							<strong>Properties Editor</strong>: Added Action selectors for data-blocks.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/animation_rigging/#motion-paths" target="_blank">
							<strong>Motion Paths</strong>: New theme entry to drive the color of the lines before/after the current frame.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/animation_rigging/#keyframing" target="_blank">
							<strong>Keyframing</strong>: When inserting keys, all other keys get deselected leaving only the newly created keys selected.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/animation_rigging/#bone-eyedropper" target="_blank">
							<strong>Bones Eyedropper</strong>: Properties where a bone can be chosen now have an eyedropper button that allows to pick bones from the 3D Viewport or the Outliner.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Core</p>
			<ul>
											<li>
																<a href="https://docs.blender.org/manual/en/4.3/files/data_blocks.html#name-rename" target="_blank">
							It is now possible to <strong>force rename</strong> elements.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/modeling/#copy-material-to-selected" target="_blank">
							<strong>Copy Material to Selected</strong> now sets the Link type of the selected objects to match those of the active object.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Cycles</p>
			<ul>
											<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/cycles/#hip-rt-support-on-linux" target="_blank">
							<strong>Linux</strong>: Support for <strong>hardware accelerated ray-tracing</strong> using HIP-RT.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/123532" target="_blank">
							<strong>Volume Scatter</strong>: New phase functions.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/123345" target="_blank">
							<strong>Oren-Nayar BSDF</strong> is now energy-presserving and accounts for multiscattering, matching matches <strong>OpenPBR</strong>.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/123616" target="_blank">
							<strong>Principled BSDF</strong>: New Diffuse Roughness input.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/123551" target="_blank">
							macOS: AMD and Intel GPU support from Metal backend has been removed.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/123046" target="_blank">
							Panoramic Camera: Support for cylindrical projection mapping.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/125899" target="_blank">
							NVIDIA: Performance and memory optimizations for B-Spline curves when using OptiX.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/125899" target="_blank">
							NVIDIA: Minimum driver required is now version <strong>495.89</strong>						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/c2f93e0f68aec9fa48ba311401ef2545c53b24ba" target="_blank">
							AMD: Support for Vega in Cycles AMD HIP backend has been removed.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>EEVEE</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/000d34c398" target="_blank">
							Add toggle for Fast GI Approximation, similar to Cycles.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/bc3fdc329378128dc4253681f869e01d924da213" target="_blank">
							Objects with volume probe visibility turned off now cast shadow properly during lightprobe volume baking.						</a>
														</li>
										</ul>
		</div>
			
			<div>
			<p>USD</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/460aa3c231321ebfc8208ab65f18826066f72c60" target="_blank">
							Added support for exporting Point Clouds						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/80cf6b99c3820f8179516b95733031aec2183a64" target="_blank">
							Material purposes are now selectable during import						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/8a97f31e7694908fadee3db2305488250bbd63cf" target="_blank">
							Improved handling of @asset@ paths inside USD files						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/3c394d39f2ced658d990f437981f1d855917b1cb" target="_blank">
							More efficient export of animated attribute data when unchanged from prior frames.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>glTF</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/b25da97fefdf8854ffda3884dce16a2c92f9b69e" target="_blank">
							Import: Enable Draco mesh compression						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/98a7aa2c41c03ebf7f29915a98c3bf9161a5fc47" target="_blank">
							Import: Fixed importing Vertex Color on point/edges						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/58141b739607d01c1cda835eb9bf51249ec2000b" target="_blank">
							Export: Set UDIM material names with tile number.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/51222557397cc55556650fe670c07ec0ecaf3e6d" target="_blank">
							Export: Manage Quaternion &amp; Matrix attribute types for custom attributes.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/11451a208228effc12ee7ad7b90a79e616d85874" target="_blank">
							Export: Better logging						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/8d575d3c8540499b9bbd52525572aaaa6685064d" target="_blank">
							Export: Enable exporting joint leaf at tail of leaf bones.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/89c389c465b6bc6046c8408627fde7c186639f08" target="_blank">
							Hook UI: distinct import &amp; export draw code						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/pipeline_assets_io/#gltf" target="_blank">
							Several bug fixes						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Python API</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/76e7770bc9" target="_blank">
							Handlers: Added new <code>blend_import_pre</code> and <code>blend_import_post</code> called before/after any linked-data-related operation.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/grease_pencil_migration/#python-api" target="_blank">
							Grease Pencil Python API migration guide						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/python_api/#data-blocks" target="_blank">
							Data-Blocks: New rename function						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/python_api/#curves" target="_blank">
							New functions for <strong>Curves</strong>						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/14b03fca3c3c6a24da58278373093ae9451e37c" target="_blank">
							Added <code>bpy.app.python_args</code> to support calling Python in an environment matching Blender’s Python environment.						</a>
														</li>
															<li>
																<span><code>uiLayout.template_search()</code> now supports a custom text label</span>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.3/python_api/#breaking-changes" target="_blank">
							Breaking changes						</a>
														</li>
										</ul>
		</div>
			
		</div>



<p>Plus hundreds of bug fixes, code cleanups and refactors.<br>See the <a href="https://developer.blender.org/docs/release_notes/4.3/" data-type="link" data-id="https://developer.blender.org/docs/release_notes/4.3/" target="_blank" rel="noreferrer noopener">full list of changes</a>.</p>
</section>



<section id="credits">
<h2>CREDITS</h2>




</section>
			</div>
		</article>
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Understanding the BM25 full text search algorithm (274 pts)]]></title>
            <link>https://emschwartz.me/understanding-the-bm25-full-text-search-algorithm/</link>
            <guid>42190650</guid>
            <pubDate>Wed, 20 Nov 2024 03:43:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://emschwartz.me/understanding-the-bm25-full-text-search-algorithm/">https://emschwartz.me/understanding-the-bm25-full-text-search-algorithm/</a>, See on <a href="https://news.ycombinator.com/item?id=42190650">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2024-11-19T16:20Z">
                    Nov 19, 2024
                </time>
            </i>
        </p>
    

    <p>BM25, or Best Match 25, is a widely used algorithm for full text search. It is the default in Lucene/Elasticsearch and SQLite, among others. Recently, it has become common to combine full text search and vector similarity search into "hybrid search". I wanted to understand how full text search works, and specifically BM25, so here is my attempt at understanding by re-explaining.</p>
<ol>
<li><a href="#motivation-can-bm25-scores-be-compared-across-queries">Motivation: can BM25 scores be compared across queries?</a></li>
<li><a href="#ranking-documents-probabilistically">Ranking documents probabilistically</a></li>
<li><a href="#components-of-bm25">Components of BM25</a></li>
<li><a href="#behold-math">Behold, Math!</a><ol>
<li><a href="#query-terms">Query terms</a></li>
<li><a href="#inverse-document-frequency-idf">Inverse Document Frequency (IDF)</a></li>
<li><a href="#term-frequency-in-the-document">Term frequency in the document</a></li>
<li><a href="#document-length-normalization">Document length normalization</a></li>
<li><a href="#putting-it-all-together">Putting it all together</a></li>
</ol>
</li>
<li><a href="#cleverness-of-bm25-and-its-precursors">Cleverness of BM25 and its precursors</a><ol>
<li><a href="#ranking-by-probability-without-calculating-probability">Ranking by probability without calculating probability</a></li>
<li><a href="#assuming-most-documents-are-irrelevant">Assuming most documents are irrelevant</a></li>
</ol>
</li>
<li><a href="#conclusion-bm25-scores-can-be-compared-within-the-same-collection">Conclusion: BM25 scores can be compared <em>within the same collection</em></a></li>
<li><a href="#further-reading">Further reading</a></li>
</ol>
<h2 id="motivation-can-bm25-scores-be-compared-across-queries">Motivation: can BM25 scores be compared across queries?</h2><p>For a quick bit of context on why I'm thinking about search algorithms, I'm building a <a href="https://scour.ing/">personalized content feed</a> that scours noisy sources for content related to your interests. I started off using <a href="https://emschwartz.me/binary-vector-embeddings-are-so-cool/">vector similarity search</a> and wanted to also include full-text search to improve the handling of exact keywords (for example, a friend has "Solid.js" as an interest and using vector similarity search alone, that turns up more content related to React than Solid).</p>
<p>The question that motivated this deep dive into BM25 was: <strong>can I compare the BM25 scores of documents across multiple queries to determine which query the document best matches?</strong></p>
<p>Initially, both ChatGPT and Claude told me no — though annoyingly, after doing this deep dive and formulating a more precise question, they both said yes 🤦‍♂️. Anyway, let's get into the details of BM25 and then I'll share my conclusions about this question.</p>
<h2 id="ranking-documents-probabilistically">Ranking documents probabilistically</h2><p>At the most basic level, the goal of a full text search algorithm is to take a query and find the <em>most relevant</em> documents from a set of possibilities.</p>
<p>However, we don't <em>really</em> know which documents are "relevant", so the best we can do is guess. Specifically, we can rank documents based on the <em>probability</em> that they are relevant to the query. (This is called <em>The Probability Ranking Principle</em>.)</p>
<p>How do we calculate the probability that a document is relevant?</p>
<p>For full text or <em>lexical</em> search, we are only going to use qualities of the search query and each of the documents in our collection. (In contrast, vector similarity search might use an embedding model trained on an external corpus of text to represent the meaning or <em>semantics</em> of the query and document.)</p>
<h2 id="components-of-bm25">Components of BM25</h2><p>BM25 uses a couple of different components of the query and the set of documents:</p>
<ul>
<li><strong>Query terms</strong>: if a search query is made up of multiple terms, BM25 will calculate a separate score for each term and then sum them up.</li>
<li><strong>Inverse Document Frequency (IDF)</strong>: how rare is a given search term across the entire document collection? We assume that common words (such as "the" or "and") are less informative than rare words. Therefore, we want to boost the importance of rare words.</li>
<li><strong>Term frequency in the document</strong>: how many times does a search term appear in a given document? We assume that more repetition of a query term in a given document increases the likelihood that that document is related to the term. However, BM25 also adjusts this so that there are diminishing returns each time a term is repeated.</li>
<li><strong>Document length</strong>: how long is the given document compared to others? Long documents might repeat the search term more, just by virtue of being longer. We don't want to unfairly boost long documents, so BM25 applies some normalization based on how the document's length compares to the average.</li>
</ul>
<p>These four components are what make up BM25. Now, let's look at exactly how they're used.</p>
<h2 id="behold-math">Behold, math!</h2><p>The BM25 algorithm might look scary to non-mathematicians (my eyes glazed over the first time I saw it), but I promise, it's not too hard to understand!</p>
<p>Here is the full equation:</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mtext>score</mtext><mo stretchy="false">(</mo><mi>D</mi><mo>,</mo><mi>Q</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>ln</mi><mrow><mo stretchy="true" fence="true" form="prefix">(</mo><mfrac><mrow><mi>N</mi><mo>−</mo><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mn>0.5</mn></mrow><mrow><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mn>0.5</mn></mrow></mfrac><mo>+</mo><mn>1</mn><mo stretchy="true" fence="true" form="postfix">)</mo></mrow><mi>·</mi><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo>,</mo><mi>D</mi><mo stretchy="false">)</mo><mi>·</mi><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo>,</mo><mi>D</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mi>·</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>b</mi><mo>+</mo><mi>b</mi><mi>·</mi><mfrac><mrow><mo stretchy="false">|</mo><mi>D</mi><mo stretchy="false">|</mo></mrow><mrow><mtext>avgdl</mtext></mrow></mfrac><mo stretchy="false">)</mo></mrow></mfrac></mrow></math><p>Now, let's go through it piece-by-piece.</p>
<h3 id="query-terms">Query terms</h3><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mtext>score</mtext><mo stretchy="false">(</mo><mi>D</mi><mo>,</mo><mi>Q</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo>.</mo><mo>.</mo><mo>.</mo></mrow></math><ul>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>D</mi></mrow></math> is a given document</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>Q</mi></mrow></math> is the full query, potentially composed of multiple query terms</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>n</mi></mrow></math> is the number of query terms</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow></math> is each of the query terms</li>
</ul>
<p>This part of the equation says: given a document and a query, sum up the scores for each of the query terms.</p>
<p>Now, let's dig into how we calculate the score for each of the query terms.</p>
<h3 id="inverse-document-frequency-idf">Inverse Document Frequency (IDF)</h3><p>The first component of the score calculates how rare the query term is within the whole collection of documents using the Inverse Document Frequency (IDF).</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>ln</mi><mrow><mo stretchy="true" fence="true" form="prefix">(</mo><mfrac><mrow><mi>N</mi><mo>−</mo><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mn>0.5</mn></mrow><mrow><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mn>0.5</mn></mrow></mfrac><mo>+</mo><mn>1</mn><mo stretchy="true" fence="true" form="postfix">)</mo></mrow></mrow></math><p>The key elements to focus on in this equation are:</p>
<ul>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>N</mi></mrow></math> is the total number of documents in our collection</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></math> is the number of documents that contain the query term</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>N</mi><mo>−</mo><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></math> therefore is the number of documents that <em>do not</em> contain the query term</li>
</ul>
<p>In simple language, this part boils down to the following: common terms will appear in many documents. If the term appears in many documents, we will have a small number (<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>N</mi><mo>−</mo><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></math>, or the number of documents that <em>do not</em> have the term) divided by <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>N</mi></mrow></math>. As a result, common terms will have a small effect on the score.</p>
<p>In contrast, rare terms will appear in few documents so <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></math> will be small and <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>N</mi><mo>−</mo><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></math> will be large. Therefore, rare terms will have a greater impact on the score.</p>
<p>The constants <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0.5</mn></mrow></math> and <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>1</mn></mrow></math> are there to smooth out the equation and ensure that we don't end up with wildly varying results if the term is either very rare or very common.</p>
<h3 id="term-frequency-in-the-document">Term frequency in the document</h3><p>In the previous step, we looked at how rare the term is across the whole set of documents. Now, let's look at how frequent the given query is in the given document.</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo>,</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo>,</mo><mi>D</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub></mrow></mfrac></mrow></math><p>The terms in this equation are:</p>
<ul>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow></math> is a given query</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>D</mi></mrow></math> is a given document</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo>,</mo><mi>D</mi><mo stretchy="false">)</mo></mrow></math> is the frequency of the given query in the given document</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><msub><mi>k</mi><mn>1</mn></msub></mrow></math> is a tuning parameter that is generally set between <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>1.2</mn></mrow></math> and <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>2</mn></mrow></math></li>
</ul>
<p>This equation takes the term frequency within the document into effect, but ensures that term repetition has diminishing returns. The intuition here is that, at some point, the document is probably related to the query term and we don't want an infinite amount of repetition to be weighted too heavily in the score.</p>
<p>The <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><msub><mi>k</mi><mn>1</mn></msub></mrow></math> parameter controls how quickly the returns to term repetition diminish. You can see how the slope changes based on this setting:</p>
<p><img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/emschwartz/50-pm.webp" alt="Effect of the k parameter"></p>
<blockquote>
<p>From <a href="https://www.staff.city.ac.uk/~sbrp622/papers/foundations_bm25_review.pdf">The Probabilistic Relevance Framework: BM25 and Beyond</a></p>
</blockquote>
<h3 id="document-length-normalization">Document length normalization</h3><p>The last thing we need is to compare the length of the given document to the lengths of the other documents in the collection.</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>b</mi><mo>+</mo><mi>b</mi><mi>·</mi><mfrac><mrow><mo stretchy="false">|</mo><mi>D</mi><mo stretchy="false">|</mo></mrow><mrow><mtext>avgdl</mtext></mrow></mfrac><mo stretchy="false">)</mo></mrow></math><p>From right to left this time, the parameters are:</p>
<ul>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mo stretchy="false">|</mo><mi>D</mi><mo stretchy="false">|</mo></mrow></math> is the length of the given document</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>a</mi><mi>v</mi><mi>g</mi><mi>d</mi><mi>l</mi></mrow></math> is the average document length in our collection</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>b</mi></mrow></math> is another tuning parameter that controls how much we normalize by the document length</li>
</ul>
<p>Long documents are likely to contain the search term more frequently, just by virtue of being longer. Since we don't want to unfairly boost long documents, this whole term is going to go in the denominator of our final equation. That is, a document that is longer than average (<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mfrac><mrow><mo stretchy="false">|</mo><mi>D</mi><mo stretchy="false">|</mo></mrow><mrow><mi>a</mi><mi>v</mi><mi>g</mi><mi>d</mi><mi>l</mi></mrow></mfrac><mo>&gt;</mo><mn>1</mn></mrow></math>) will be penalized by this adjustment.</p>
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>b</mi></mrow></math> can be adjusted by the user. Setting <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>b</mi><mo>=</mo><mn>0</mn></mrow></math> turns off document length normalization, while setting <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>b</mi><mo>=</mo><mn>1</mn></mrow></math> applies it fully. It is normally set to <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0.75</mn></mrow></math>.</p>
<h3 id="putting-it-all-together">Putting it all together</h3><p>If we take all of the components we've just discussed and put them together, we arrive back at the full BM25 equation:</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><munder><munder><mrow><mtext>score</mtext><mo stretchy="false">(</mo><mi>D</mi><mo>,</mo><mi>Q</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup></mrow><mo>⏟</mo></munder><mrow><mtext>Summing&nbsp;each&nbsp;query&nbsp;term's&nbsp;score</mtext></mrow></munder><munder><munder><mrow><mi>ln</mi><mrow><mo stretchy="true" fence="true" form="prefix">(</mo><mfrac><mrow><mi>N</mi><mo>−</mo><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mn>0.5</mn></mrow><mrow><mi>n</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mn>0.5</mn></mrow></mfrac><mo>+</mo><mn>1</mn><mo stretchy="true" fence="true" form="postfix">)</mo></mrow></mrow><mo>⏟</mo></munder><mrow><mtext>Inverse&nbsp;Document&nbsp;Frequency</mtext></mrow></munder><mi>·</mi><mover><mover><mrow><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo>,</mo><mi>D</mi><mo stretchy="false">)</mo><mi>·</mi><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo>,</mo><mi>D</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mi>·</mi><munder><munder><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>b</mi><mo>+</mo><mi>b</mi><mi>·</mi><mfrac><mrow><mo stretchy="false">|</mo><mi>D</mi><mo stretchy="false">|</mo></mrow><mrow><mtext>avgdl</mtext></mrow></mfrac><mo stretchy="false">)</mo></mrow><mo>⏟</mo></munder><mrow><mtext>Document&nbsp;length&nbsp;normalization</mtext></mrow></munder></mrow></mfrac></mrow><mo>⏞</mo></mover><mrow><mtext>Term&nbsp;frequency&nbsp;in&nbsp;the&nbsp;document</mtext></mrow></mover></mrow></math><p>Reading from left to right, you can see that we are summing up the scores for each query term. For each, we are taking the Inverse Document Frequency, multiplying it by the term frequency in the document (with diminishing returns), and then normalizing by the document length.</p>
<h2 id="cleverness-of-bm25-and-its-precursors">Cleverness of BM25 and its precursors</h2><p>We've just gone through the components of the BM25 equation, but I think it's worth pausing to emphasize two of its most ingenious aspects.</p>
<h3 id="ranking-by-probability-without-calculating-probability">Ranking by probability without calculating probability</h3><p>As mentioned earlier, BM25 is based on an idea called the Probability Ranking Principle. In short, it says:</p>
<blockquote>
<p>If retrieved documents are ordered by decreasing probability of relevance on the data available, then the system’s effectiveness is the best that can be obtained for the data.</p>
<ul>
<li><a href="https://www.staff.city.ac.uk/~sbrp622/papers/foundations_bm25_review.pdf">The Probabilistic Relevance Framework: BM25 and Beyond</a></li>
</ul>
</blockquote>
<p>Unfortunately, calculating the "true" probability that a document is relevant to a query is nearly impossible.</p>
<p>However, we really care about the <em>order</em> of the documents more than we care about the exact probability. Because of this, researchers realized that you could simplify the equations and make it practicable. Specifically, you could drop terms from the equation that would be required to calculate the full probability but where leaving them out would not affect the <em>order</em>.</p>
<p>Even though we are using the Probability Ranking Principle, we are actually calculating a "weight" instead of a probability.</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>W</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mstyle scriptlevel="1"><mtable><mtr><mtd><mi>t</mi><mo>∈</mo><mi>q</mi><mo>,</mo></mtd></mtr><mtr><mtd><msub><mi>f</mi><mrow><mi>t</mi><mo>,</mo><mi>d</mi></mrow></msub><mo>&gt;</mo><mn>0</mn></mtd></mtr></mtable></mstyle></mrow></msub><mi>log</mi><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>F</mi><mo>=</mo><msub><mi>f</mi><mrow><mi>t</mi><mo>,</mo><mi>d</mi></mrow></msub><mo stretchy="false">|</mo><mi>R</mi><mo>=</mo><mn>1</mn><mo stretchy="false">)</mo><mspace width="0.167em"></mspace><mi>P</mi><mo stretchy="false">(</mo><mi>F</mi><mo>=</mo><mn>0</mn><mo stretchy="false">|</mo><mi>R</mi><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>F</mi><mo>=</mo><msub><mi>f</mi><mrow><mi>t</mi><mo>,</mo><mi>d</mi></mrow></msub><mo stretchy="false">|</mo><mi>R</mi><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo><mspace width="0.167em"></mspace><mi>P</mi><mo stretchy="false">(</mo><mi>F</mi><mo>=</mo><mn>0</mn><mo stretchy="false">|</mo><mi>R</mi><mo>=</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow></math><p>This equation calculates the weight using term frequencies. Specifically:</p>
<ul>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>W</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">)</mo></mrow></math> is the weight for a given document</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>F</mi><mo>=</mo><msub><mi>f</mi><mrow><mi>t</mi><mo>,</mo><mi>d</mi></mrow></msub><mo stretchy="false">|</mo><mi>R</mi><mo>=</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></math> is the probability that the query term would appear in the document with a given frequency (<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><msub><mi>f</mi><mrow><mi>t</mi><mo>,</mo><mi>d</mi></mrow></msub></mrow></math>) if the document is relevant (<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>R</mi><mo>=</mo><mn>1</mn></mrow></math>)</li>
</ul>
<p>The various terms boil down to the probability that we would see a certain query term frequency within the document if the document is relevant or not relevant, and the probabilities that the term would not appear at all if the document is relevant or not.</p>
<p>The Robertson/Sparck Jones Weight is a way of estimating these probabilities but only using the counts of different sets of documents:</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><msup><mi>w</mi><mrow><mi>R</mi><mi>S</mi><mi>J</mi></mrow></msup><mo>=</mo><mi>log</mi><mfrac><mrow><mo stretchy="false">(</mo><mi>r</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>R</mi><mo>−</mo><mi>n</mi><mo>+</mo><mi>r</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>r</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>R</mi><mo>−</mo><mi>r</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow></math><p>The terms here are:</p>
<ul>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>r</mi></mrow></math> is the number of relevant documents that contain the query term</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>N</mi></mrow></math> is the total number of documents in the collection</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>R</mi></mrow></math> is the number of relevant documents in the collection</li>
<li><math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>n</mi></mrow></math> is the number of documents that contain the query term</li>
</ul>
<p>The big, glaring problem with this equation is that you first need to know which documents are relevant to the query. How are we going to get those?</p>
<h3 id="assuming-most-documents-are-irrelevant">Assuming most documents are irrelevant</h3><p>The question about how to make use of the Robertson/Sparck Joes weight apparently stumped the entire research field for about 15 years. The equation was built up from a solid theoretical foundation, but relying on already having relevance information made it nearly impossible to put to use.</p>
<p>The BM25 developers made a very clever assumption to get to the next step.</p>
<p>For any given query, we can assume that most documents are not going to be relevant. If we assume that the number of relevant documents is so small as to be negligible, we can just set those numbers to zero!</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>R</mi><mo>=</mo><mi>r</mi><mo>=</mo><mn>0</mn></mrow></math><p>If we substitute this into the Robertson/Sparck Jones Weight equation, we get nearly the IDF term used in BM25:</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>log</mi><mfrac><mrow><mo stretchy="false">(</mo><mn>0</mn><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>0</mn><mo>−</mo><mi>n</mi><mo>+</mo><mn>0</mn><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>0</mn><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>0</mn><mo>−</mo><mn>0</mn><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mi>log</mi><mfrac><mrow><mn>0.5</mn><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>n</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mn>0.5</mn></mrow></mfrac><mo>=</mo><mi>log</mi><mfrac><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mi>n</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow></math><p>Not relying on relevance information made BM25 much more useful, while keeping the same theoretical underpinnings. Victor Lavrenko described this as a <a href="https://youtu.be/_UxUZvPfEKo?si=QF7YRldXUcRuhh78">"very impressive leap of faith"</a>, and I think this is quite a neat bit of BM25's backstory.</p>
<h2 id="conclusion-bm25-scores-can-be-compared-emwithin-the-same-collectionem">Conclusion: BM25 scores can be compared <em>within the same collection</em></h2><p>As I mentioned at the start, my motivating question was whether I could compare BM25 scores for a document across queries to understand which query the document best matches.</p>
<p>In general, BM25 scores cannot be directly compared (and this is what ChatGPT and Claude stressed to me in response to my initial inquiries 🙂‍↔️). The algorithm does not produce a score from 0 to 1 that is easy to compare across systems, and it doesn't even try to estimate the probability that a document is relevant. It only focuses on ranking documents within a certain collection in an order that approximates the probability of their relevance to the query. A higher BM25 score means the document is likely to be <em>more relevant</em>, but it isn't the actual probability that it is relevant.</p>
<p>As far as I understand now, it is possible to compare the BM25 scores across queries <em>for the same document within the same collection of documents</em>.</p>
<p>My hint that this was the case was the fact that BM25 sums the scores of each query term. There should not be a semantic difference between comparing the scores for two query term and two whole queries.</p>
<p>The important caveat to stress, however, is the <em>same document within the same collection</em>. BM25 uses the IDF or rarity of terms as well as the average document length within the collection. Therefore, you cannot necessarily compare scores across time because any modifications to the overall collection could change the scores.</p>
<p>For my purposes, though, this is useful enough. It means that I can do a full text search for each of a user's interests in my collection of content and compare the BM25 scores to help determine which pieces best match their interests.</p>
<p>I'll write more about ranking algorithms and how I'm using the relevance scores in future posts, but in the meantime I hope you've found this background on BM25 useful or interesting!</p>
<p><em>Thanks to Alex Kesling and Natan Last for feedback on drafts of this post.</em></p>
<h2 id="further-reading">Further reading</h2><p>If you are interested in diving further into the theory and history of BM25, I would highly recommend watching Elastic engineer Britta Weber's 2016 talk <a href="https://www.elastic.co/elasticon/conf/2016/sf/improved-text-scoring-with-bm25">Improved Text Scoring with BM25</a> and reading <a href="https://www.staff.city.ac.uk/~sbrp622/papers/foundations_bm25_review.pdf">The Probabilistic Relevance Framework: BM25 and Beyond</a> by Stephen Robertson and Hugo Zaragoza.</p>
<p>Also, I had initially included comparisons between BM25 and some other algorithms in this post. But, as you know, it was already a bit long 😅. So, you can now find those in this other post: <a href="https://emschwartz.me/comparing-full-text-search-algorithms-bm25-tf-idf-and-postgres">Comparing full text search algorithms: BM25, TF-IDF, and Postgres</a>.</p>
<hr>
<p>Discuss on <a href="https://lobste.rs/s/ovbb1u/understanding_bm25_full_text_search">Lobsters</a> and <a href="https://news.ycombinator.com/item?id=42185233">Hacker News</a>.</p>


    

    
        
            <p>
                
                    <a href="https://emschwartz.me/blog/?q=scour">#scour</a>
                
                    <a href="https://emschwartz.me/blog/?q=search">#search</a>
                
                    <a href="https://emschwartz.me/blog/?q=understanding">#understanding</a>
                
            </p>
        

        
            


        
    


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Epic Allows Internet Archive to Distribute Unreal and Unreal Tournament Forever (461 pts)]]></title>
            <link>https://www.techdirt.com/2024/11/18/epic-allows-internet-archive-to-distribute-for-free-unreal-unreal-tournament-forever/</link>
            <guid>42190541</guid>
            <pubDate>Wed, 20 Nov 2024 03:15:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.techdirt.com/2024/11/18/epic-allows-internet-archive-to-distribute-for-free-unreal-unreal-tournament-forever/">https://www.techdirt.com/2024/11/18/epic-allows-internet-archive-to-distribute-for-free-unreal-unreal-tournament-forever/</a>, See on <a href="https://news.ycombinator.com/item?id=42190541">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="storywrap-454289">

				


				


				<h3>from the <i>was-that-so-hard?</i> dept</h3>
				


				<p>One of the most frustrating aspects in the ongoing conversation around the <a href="https://www.techdirt.com/tag/preservation/">preservation</a> of older video games, also known as cultural output, is the collision of IP rights and some publishers’ unwillingness to both continue to support and make available these older games and their refusal to release those same games into the public domain so that others can do so. It creates this crazy situation in which a company insists on retaining its copyrights over a video game that it has effectively disappeared with no good or legitimate way for the public to preserve them. As I’ve argued for some time now, this breaks the copyright contract with the public and should come with repercussions. The whole bargain that is copyright law is that creative works are granted a limited monopoly on the production of that work, with that work eventually arriving into the public domain. If that arrival is not allowed to occur, the bargain is broken, and not by anyone who would supposedly “infringe” on the copyright of that work.</p>
<p>Why would game publishers do this sort of thing? There are plenty of theories. The fad of retro-gaming is such that publishers can claim they are reserving their rights for an eventual remastered version, or otherwise a re-released version, of these games. Sometimes they even follow through on those plans. In other cases, some companies are just so ingrained in IP protectionism that they can’t see past their own nose (hi there, <a href="https://www.techdirt.com/company/nintendo/">Nintendo</a>!). In still other cases the companies that published the game no longer exist, and <a href="https://www.techdirt.com/2020/11/11/happy-20th-birthday-to-no-one-lives-forever-classic-pc-game-that-cant-be-sold-today-thanks-to-ip/">unraveling</a> who now holds the rights to their games can be an absolute nightmare.</p>
<p>But it just doesn’t have to be like this. Companies could be willing to give up their iron-fisted control over their IP for these older games they aren’t willing to support or preserve themselves and let others do it for them. And if you need a real world example of that, you need look only at how <a href="https://kotaku.com/unreal-engine-epic-free-internet-archive-fortnite-1851698320">Epic is working with The Internet Archive</a> to do exactly that.</p>
<blockquote>
<p><em>Epic, now primarily known for&nbsp;Fortnite&nbsp;and the Unreal Engine, has given permission for two of the most significant video games ever made,&nbsp;Unreal&nbsp;and&nbsp;Unreal Tournament, to be freely accessed via the Internet Archive. As spotted by&nbsp;<a href="https://www.rockpapershotgun.com/classic-shooters-unreal-and-unreal-tournament-are-now-free-and-preserved-on-the-internet-archive" target="_blank" rel="noreferrer noopener">RPS</a>, via&nbsp;<a href="https://www.resetera.com/threads/epic-games-gives-the-thumbs-up-to-archive-org-copies-of-unreal-gold-and-unreal-tournament-goty-free-to-download-for-all.1035414/" target="_blank" rel="noreferrer noopener">ResetEra</a>, the OldUnreal group announced the move on their Discord, along with instructions for how to easily download and play them on modern machines.</em></p>
<p><em>Huge kudos to Epic for being cool with this, because while it shouldn’t be unusual to happily let people freely share a three-decade-old game you don’t sell any more, it’s vanishingly rare. And if you remain in any doubt, we just got word back from Epic confirming they’re on board.</em></p>
<p><em>“We can confirm that&nbsp;Unreal 1&nbsp;and&nbsp;Unreal Tournament&nbsp;are available on&nbsp;<a href="http://archive.org/" target="_blank" rel="noreferrer noopener">archive.org</a>,” a spokesperson told us by email, “and people are free to independently link to and play these versions.”</em></p>
</blockquote>
<p>Importantly, OldUnreal and The Internet Archive very much know what they’re doing here. Grabbing the ZIP file for the game sleekly pulls the ISO directly from The Internet Archive, installs it, and there are instructions for how to get the game up and running on modern hardware. This is obviously a labor of love from fans dedicated toward keeping these two excellent games alive.</p>
<p>And the size and success of these games is important, too. It would be all too easy for Epic to keep this IP to itself with a plan for a remastered version of each game, or for a forthcoming sequel, or anything like that. Instead, Epic has just opened up and allowed the internet to do its thing in preserving these important titles using one of the most trustworthy sources to do so. </p>
<p>But this is just two games. What would be really nice to see is this become a trend, or, better yet, a program run by The Internet Archive. Don’t want to bother to preserve your old game? No problem, let the IA do it for you!</p>

				
<p>

	Filed Under: <a href="https://www.techdirt.com/tag/archives/" rel="tag">archives</a>, <a href="https://www.techdirt.com/tag/internet-archive/" rel="tag">internet archive</a>, <a href="https://www.techdirt.com/tag/preservation/" rel="tag">preservation</a>, <a href="https://www.techdirt.com/tag/unreal/" rel="tag">unreal</a>, <a href="https://www.techdirt.com/tag/unreal-tournament/" rel="tag">unreal tournament</a>, <a href="https://www.techdirt.com/tag/video-game-preservation/" rel="tag">video game preservation</a>, <a href="https://www.techdirt.com/tag/video-games/" rel="tag">video games</a>
	<br>

	Companies: <a href="https://www.techdirt.com/company/epic/" rel="category tag">epic</a>, <a href="https://www.techdirt.com/company/internet-archive/" rel="category tag">internet archive</a>
</p>

			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Webvm: Virtual Machine for the Web (193 pts)]]></title>
            <link>https://github.com/leaningtech/webvm</link>
            <guid>42190395</guid>
            <pubDate>Wed, 20 Nov 2024 02:45:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/leaningtech/webvm">https://github.com/leaningtech/webvm</a>, See on <a href="https://news.ycombinator.com/item?id=42190395">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">WebVM</h2><a id="user-content-webvm" aria-label="Permalink: WebVM" href="#webvm"></a></p>
<p dir="auto"><a href="https://discord.gg/yWRr2YnD9c" rel="nofollow"><img src="https://camo.githubusercontent.com/14e2084618f98ad490f03307eb30fe6a4c0bf870e3a7592d50509053ae5ad7ad/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3938383734333838353132313534383332393f636f6c6f723d253233353836354632266c6f676f3d646973636f7264266c6f676f436f6c6f723d253233666666" alt="Discord server" data-canonical-src="https://img.shields.io/discord/988743885121548329?color=%235865F2&amp;logo=discord&amp;logoColor=%23fff"></a>
<a href="https://github.com/leaningtech/webvm/issues"><img src="https://camo.githubusercontent.com/212d2851b0637842fbb7b1d38232807f528369b02bfdd94a89d9d0b9ecbd152b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6c65616e696e67746563682f776562766d" alt="Issues" data-canonical-src="https://img.shields.io/github/issues/leaningtech/webvm"></a></p>
<p dir="auto">This repository hosts the source code for <a href="https://webvm.io/" rel="nofollow">https://webvm.io</a>, a Linux virtual machine that runs in your browser.</p>
<p dir="auto">Try out the new Alpine / Xorg / i3 graphical environment: <a href="https://webvm.io/alpine.html" rel="nofollow">https://webvm.io/alpine.html</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/leaningtech/webvm/blob/main/assets/welcome_to_WebVM_alpine_2024.png"><img src="https://github.com/leaningtech/webvm/raw/main/assets/welcome_to_WebVM_alpine_2024.png" width="90%"></a></p>
<p dir="auto">WebVM is a server-less virtual environment running fully client-side in HTML5/WebAssembly. It's designed to be Linux ABI-compatible. It runs an unmodified Debian distribution including many native development toolchains.</p>
<p dir="auto">WebVM is powered by the CheerpX virtualization engine, and enables safe, sandboxed client-side execution of x86 binaries on any browser. CheerpX includes an x86-to-WebAssembly JIT compiler, a virtual block-based file system, and a Linux syscall emulator.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Enable networking</h2><a id="user-content-enable-networking" aria-label="Permalink: Enable networking" href="#enable-networking"></a></p>
<p dir="auto">Modern browsers do not provide APIs to directly use TCP or UDP. WebVM provides networking support by integrating with Tailscale, a VPN network that supports WebSockets as a transport layer.</p>
<ul dir="auto">
<li>Open the "Networking" panel from the side-bar</li>
<li>Click "Connect to Tailscale" from the panel</li>
<li>Log in to Tailscale (create an account if you don't have one)</li>
<li>Click "Connect" when prompted by Tailscale</li>
<li>If you are unfamiliar with Tailscale or would like additional information see <a href="https://github.com/leaningtech/webvm/blob/main/docs/Tailscale.md">WebVM and Tailscale</a>.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Fork, deploy, customize</h2><a id="user-content-fork-deploy-customize" aria-label="Permalink: Fork, deploy, customize" href="#fork-deploy-customize"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/leaningtech/webvm/blob/main/assets/fork_deploy_instructions.gif"><img src="https://github.com/leaningtech/webvm/raw/main/assets/fork_deploy_instructions.gif" alt="deploy_instructions_gif" width="90%" data-animated-image=""></a></p>
<ul dir="auto">
<li>Fork the repository.</li>
<li>Enable Github pages in settings.
<ul dir="auto">
<li>Click on <code>Settings</code>.</li>
<li>Go to the <code>Pages</code> section.</li>
<li>Select <code>Github Actions</code> as the source.
<ul dir="auto">
<li>If you are using a custom domain, ensure <code>Enforce HTTPS</code> is enabled.</li>
</ul>
</li>
</ul>
</li>
<li>Run the workflow.
<ul dir="auto">
<li>Click on <code>Actions</code>.</li>
<li>Accept the prompt. This is required only once to enable Actions for your fork.</li>
<li>Click on the workflow named <code>Deploy</code>.</li>
<li>Click <code>Run workflow</code> and then once more <code>Run workflow</code> in the menu.</li>
</ul>
</li>
<li>After a few seconds a new <code>Deploy</code> workflow will start, click on it to see details.</li>
<li>After the workflow completes, which takes a few minutes, it will show the URL below the <code>deploy_to_github_pages</code> job.</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/leaningtech/webvm/blob/main/assets/result.png"><img src="https://github.com/leaningtech/webvm/raw/main/assets/result.png" width="70%"></a></p>
<p dir="auto">You can now customize <code>dockerfiles/debian_mini</code> to suit your needs, or make a new Dockerfile from scratch. Use the <code>Path to Dockerfile</code> workflow parameter to select it.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Local deployment</h2><a id="user-content-local-deployment" aria-label="Permalink: Local deployment" href="#local-deployment"></a></p>
<p dir="auto">From a local <code>git clone</code></p>
<ul dir="auto">
<li>Download the <code>debian_mini</code> Ext2 image from <a href="https://github.com/leaningtech/webvm/releases/">https://github.com/leaningtech/webvm/releases/</a>
<ul dir="auto">
<li>You can also build your own by selecting the "Upload GitHub release" workflow option</li>
<li>Place the image in the repository root folder</li>
</ul>
</li>
<li>Edit <code>config_github_terminal.js</code>
<ul dir="auto">
<li>Uncomment the default values for <code>CMD</code>, <code>ARGS</code>, <code>ENV</code> and <code>CWD</code></li>
<li>Replace <code>IMAGE_URL</code> with the URL (absolute or relative) for the Ext2 image. For example <code>"/debian_mini_20230519_5022088024.ext2"</code></li>
</ul>
</li>
<li>Build WebVM using <code>npm</code>, output will be placed in the <code>build</code> directory
<ul dir="auto">
<li><code>npm install</code></li>
<li><code>npm run build</code></li>
</ul>
</li>
<li>Start NGINX, it automatically points to the <code>build</code> directory just created
<ul dir="auto">
<li><code>nginx -p . -c nginx.conf</code></li>
</ul>
</li>
<li>Visit <code>http://127.0.0.1:8081</code> and enjoy your local WebVM</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Example customization: Python3 REPL</h2><a id="user-content-example-customization-python3-repl" aria-label="Permalink: Example customization: Python3 REPL" href="#example-customization-python3-repl"></a></p>
<p dir="auto">The <code>Deploy</code> workflow takes into account the <code>CMD</code> specified in the Dockerfile. To build a REPL you can simply apply this patch and deploy.</p>
<div dir="auto" data-snippet-clipboard-copy-content="diff --git a/dockerfiles/debian_mini b/dockerfiles/debian_mini
index 2878332..1f3103a 100644
--- a/dockerfiles/debian_mini
+++ b/dockerfiles/debian_mini
@@ -15,4 +15,4 @@ WORKDIR /home/user/
 # We set env, as this gets extracted by Webvm. This is optional.
 ENV HOME=&quot;/home/user&quot; TERM=&quot;xterm&quot; USER=&quot;user&quot; SHELL=&quot;/bin/bash&quot; EDITOR=&quot;vim&quot; LANG=&quot;en_US.UTF-8&quot; LC_ALL=&quot;C&quot;
 RUN echo 'root:password' | chpasswd
-CMD [ &quot;/bin/bash&quot; ]
+CMD [ &quot;/usr/bin/python3&quot; ]"><pre><span>diff --git a/dockerfiles/debian_mini b/dockerfiles/debian_mini</span>
index 2878332..1f3103a 100644
<span>--- a/dockerfiles/debian_mini</span>
<span>+++ b/dockerfiles/debian_mini</span>
<span>@@ -15,4 +15,4 @@</span> WORKDIR /home/user/
 # We set env, as this gets extracted by Webvm. This is optional.
 ENV HOME="/home/user" TERM="xterm" USER="user" SHELL="/bin/bash" EDITOR="vim" LANG="en_US.UTF-8" LC_ALL="C"
 RUN echo 'root:password' | chpasswd
<span><span>-</span>CMD [ "/bin/bash" ]</span>
<span><span>+</span>CMD [ "/usr/bin/python3" ]</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Bugs and Issues</h2><a id="user-content-bugs-and-issues" aria-label="Permalink: Bugs and Issues" href="#bugs-and-issues"></a></p>
<p dir="auto">Please use <a href="https://github.com/leaningtech/webvm/issues">Issues</a> to report any bug.
Or come to say hello / share your feedback on <a href="https://discord.gg/yTNZgySKGa" rel="nofollow">Discord</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">More links</h2><a id="user-content-more-links" aria-label="Permalink: More links" href="#more-links"></a></p>
<ul dir="auto">
<li><a href="https://leaningtech.com/webvm-server-less-x86-virtual-machines-in-the-browser/" rel="nofollow">WebVM: server-less x86 virtual machines in the browser</a></li>
<li><a href="https://leaningtech.com/webvm-virtual-machine-with-networking-via-tailscale/" rel="nofollow">WebVM: Linux Virtualization in WebAssembly with Full Networking via Tailscale</a></li>
<li><a href="https://leaningtech.com/mini-webvm-your-linux-box-from-dockerfile-via-wasm/" rel="nofollow">Mini.WebVM: Your own Linux box from Dockerfile, virtualized in the browser via WebAssembly</a></li>
<li>Reference GitHub Pages deployment: <a href="https://mini.webvm.io/" rel="nofollow">Mini.WebVM</a></li>
<li><a href="https://www.youtube.com/watch?v=VqrbVycTXmw" rel="nofollow">Crafting the Impossible: X86 Virtualization in the Browser with WebAssembly</a> Talk at JsNation 2022</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Thanks to...</h2><a id="user-content-thanks-to" aria-label="Permalink: Thanks to..." href="#thanks-to"></a></p>
<p dir="auto">This project depends on:</p>
<ul dir="auto">
<li><a href="https://cheerpx.io/" rel="nofollow">CheerpX</a>, made by <a href="https://leaningtech.com/" rel="nofollow">Leaning Technologies</a> for x86 virtualization and Linux emulation</li>
<li>xterm.js, <a href="https://xtermjs.org/" rel="nofollow">https://xtermjs.org/</a>, for providing the Web-based terminal emulator</li>
<li><a href="https://tailscale.com/" rel="nofollow">Tailscale</a>, for the networking component</li>
<li><a href="https://savannah.nongnu.org/projects/lwip/" rel="nofollow">lwIP</a>, for the TCP/IP stack, compiled for the Web via <a href="https://github.com/leaningtech/cheerp-meta/">Cheerp</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Versioning</h2><a id="user-content-versioning" aria-label="Permalink: Versioning" href="#versioning"></a></p>
<p dir="auto">WebVM depends on the CheerpX x86-to-WebAssembly virtualization technology, which is included in the project via <a href="https://www.npmjs.com/package/@leaningtech/cheerpx" rel="nofollow">NPM</a>.</p>
<p dir="auto">The NPM package is updated on every release.</p>
<p dir="auto">Every build is immutable, if a specific version works well for you today, it will keep working forever.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">WebVM is released under the Apache License, Version 2.0.</p>
<p dir="auto">You are welcome to use, modify, and redistribute the contents of this repository.</p>
<p dir="auto">The public CheerpX deployment is provided <strong>as-is</strong> and is <strong>free to use</strong> for technological exploration, testing and use by individuals. Any other use by organizations, including non-profit, academia and the public sector, requires a license. Downloading a CheerpX build for the purpose of hosting it elsewhere is not permitted without a commercial license.</p>
<p dir="auto">Read more about <a href="https://cheerpx.io/docs/licensing" rel="nofollow">CheerpX licensing</a></p>
<p dir="auto">If you want to build a product on top of CheerpX/WebVM, please get in touch: <a href="mailto:sales@leaningtech.com">sales@leaningtech.com</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tiny Glade 'built' its way to >600k sold in a month (393 pts)]]></title>
            <link>https://newsletter.gamediscover.co/p/how-tiny-glade-built-its-way-to-600k</link>
            <guid>42190065</guid>
            <pubDate>Wed, 20 Nov 2024 01:45:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newsletter.gamediscover.co/p/how-tiny-glade-built-its-way-to-600k">https://newsletter.gamediscover.co/p/how-tiny-glade-built-its-way-to-600k</a>, See on <a href="https://news.ycombinator.com/item?id=42190065">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><em><span>[The&nbsp;</span><a href="http://newsletter.gamediscover.co/" rel="">GameDiscoverCo game discovery newsletter</a><span>&nbsp;is written by ‘how people find your game’ expert &amp;&nbsp;company&nbsp;founder&nbsp;Simon Carless, and is a regular look at how people discover and buy video games in the 2020s.]</span></em></p><p><span>We’re back for a new week, and thanks for the feedback on our </span><em><span>‘news up front, </span><s>party</s><span> main feature in the back’ </span></em><span>newsletter structure, which seems to have gone down well. (We spend a lot of time picking the right news - not </span><em>all</em><span> the news - for that section.)</span></p><p><span>Before we start, we’re going to ask you an important question - should you be sinking your 401k into </span><a href="https://en.wikipedia.org/wiki/VTuber" rel="">vTuber</a><span> stocks? Dungeon Investing is trying to answer that by </span><a href="https://www.dungeoninvesting.com/p/cover-corp-vtuber-industry-analysis" rel="">a deep financial dive into Hololive parent company Cover Corp</a><span>, whom you might know from  </span><a href="https://store.steampowered.com/app/2420510/HoloCure__Save_the_Fans/" rel="">hit free Steam fangame HoloCure</a><span> and </span><a href="https://www.youtube.com/watch?v=KnHUeaOff0s" rel="">that L.A. Dodgers baseball collab</a><span>. Huh!</span></p><p><em><span>[</span><strong>HEADS UP: </strong><span>you can support GameDiscoverCo by </span><strong><a href="https://newsletter.gamediscover.co/subscribe" rel="">subscribing to GDCo Plus right now</a></strong><span>. You get base access to </span><a href="http://plus.gamediscover.co/" rel="">a super-detailed Steam back -end</a><span> for unreleased &amp; released games, full access to a second weekly newsletter, Discord access, eight game discovery eBooks &amp; </span><a href="https://newsletter.gamediscover.co/about" rel="">lots more</a><span>.]</span></em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg" width="800" height="554" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:554,&quot;width&quot;:800,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:68579,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ddff51b-0ccc-4d41-89ff-91ce32b8ec69_800x554.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>We’re starting out with the latest game platform &amp; discovery news, as is now our rule. And here’s what we’d like to point out:</p><ul><li><p><span>GameDiscoverCo’s </span><a href="https://www.linkedin.com/posts/simoncarless_heres-gamediscovercos-list-of-trending-activity-7256713834302734336-yzho" rel="">latest </a><em><a href="https://www.linkedin.com/posts/simoncarless_heres-gamediscovercos-list-of-trending-activity-7256713834302734336-yzho" rel="">‘trending unreleased Steam games’</a></em><a href="https://www.linkedin.com/posts/simoncarless_heres-gamediscovercos-list-of-trending-activity-7256713834302734336-yzho" rel=""> chart</a><span> - sorted by new followers in the last 7 days - shows that Chinese interest in </span><a href="https://store.steampowered.com/app/2277560/WUCHANG_Fallen_Feathers/" rel="">Wuchang: Fallen Feathers</a><span>, post-Black Myth, is keeping it at #1. (And </span><a href="https://store.steampowered.com/app/2246340/Monster_Hunter_Wilds/" rel="">Monster Hunter Wilds</a><span> - #2 -  leapfrogged the newly announced </span><a href="https://store.steampowered.com/app/1962700/Subnautica_2/" rel="">Subnautica 2</a><span> at #3.)</span></p></li><li><p><span>Elsewhere on that chart - </span><a href="https://plus.gamediscover.co/follower-velocity/" rel="">viewable daily &amp; sortable by our Plus members</a><span> - leftover Steam Next Fest interest (</span><a href="https://store.steampowered.com/app/2507950/Delta_Force/" rel="">Delta Force</a><span>, #4, </span><a href="https://store.steampowered.com/app/490110/The_Precinct/" rel="">The Precinct</a><span>, #10) and pre-launch surges (</span><a href="https://store.steampowered.com/app/1845910/Dragon_Age_The_Veilguard/" rel="">Dragon Age: The Veilguard</a><span> at #5) also feature strongly. And </span><a href="https://store.steampowered.com/app/2178070/Towers_of_Aghasba/" rel="">Towers of Aghasba</a><span> (#12) is an interesting-looking survival crafter debuting in November.</span></p></li><li><p><span>Late-breaking news from PlayStation: Sony </span><a href="https://sonyinteractive.com/en/news/blog/an-update-from-playstation-studios/" rel="">has decided to close first-party Concord dev Firewalk Studios</a><span>, as well as German-based mobile outfit Neon Koi (formerly Savage Game Studios), noting </span><em>“we will work to find placement for some of those impacted within our global community of studios where possible.”</em></p></li><li><p><span>Veteran journoconsultant Brian Crecente notes that </span><em><span>“the </span><a href="https://game.substack.com/p/consoles-arent-dying-but-they-are" rel="">gaming console isn't dying; it's just being redefined</a><span>”</span></em><span>, as handheld PCs like Steam Deck get mainstreamed over time. A similar change snuck up for PC laptops - per IDC: </span><em>“of all PCs shipped in 2023, desktops made up about 30 percent [&amp;] tower computers… were roughly half of that.”</em></p></li><li><p><span>The crew at Stream Hatchet looked at </span><a href="https://streamhatchet.com/blog/steam-next-fest-demos-on-live-streaming/" rel="">the top Steam Next Fest games in terms of live Twitch streams</a><span>, noting: </span><em>“Multiplayer shooter games saw by far the most attention, with hero shooter/MOBA Supervive and tactical shooter Delta Force being the only titles to exceed 1M hours watched.” </em><a href="https://store.steampowered.com/app/2916430/Fast_Food_Simulator/" rel="">Fast Food Simulator</a><span> also saw 506K hours watched.</span><strong>.</strong></p></li><li><p><span>Now </span><a href="https://news.adobe.com/news/2024/10/102424-ea-sports-and-adobe-join-forces" rel="">here’s wild UGC crossover for a hit game</a><span>: </span><em><span>"Adobe Express is.. available in Team Builder for [EA’s] </span><a href="https://www.ea.com/games/ea-sports-college-football/college-football-25" rel="">College Football 25</a><span>”,</span></em><span> allowing players to customize their team logos &amp; jerseys with royalty-free designs. There’s Adobe upsell, too: </span><em>“With the free Adobe Express plan, you can create up to 25 custom images for your teams per month."</em></p></li><li><p><span>Here’s a complex article </span><a href="https://intrinsiceconomies.substack.com/p/steam-aggregators-and-the-game-industry" rel="">on </a><em><a href="https://intrinsiceconomies.substack.com/p/steam-aggregators-and-the-game-industry" rel="">‘Steam, aggregators &amp; the game industry’,</a></em><span> which laments: </span><em>“Why publish games from experienced teams with a pedigree when they can’t consistently predict the market through the lens of their expertise, and end up having the same or lower hit rate as any random rookie developer whose meme hobby demo went viral?” (</em><span>Too much sneering at </span><em>‘low quality’</em><span> games here for us, tho - the market decides.)</span></p></li><li><p><span>Talking of EA Sports College Football 25, it’s the </span><a href="https://www.videogameschronicle.com/news/ea-sports-college-football-25-is-the-best-selling-american-football-game-ever-by-revenue/" rel="">best-selling American football game ever by U.S. dollar sales</a><span>, per Circana, and also</span><strong> </strong><em><strong>“</strong><span>the overall #2 best-selling sports game in US history in terms of US dollar sales, bettered only by NBA 2K21.” </span></em><span>(GDCo estimates the PS5 version as 93.5% U.S. players, btw - wow, that’s high.)</span></p></li><li><p><span>Roblox things the </span><a href="https://www.metaversemarcom.io/post/roblox-s-fall-2024-creator-roadmap" rel="">company’s upcoming creator road map</a><span> includes in-experience commerce via Shopify, music discovery &amp; in-world video, among other features; Roblox is </span><a href="https://www.theverge.com/2024/10/23/24277992/roblox-pre-teen-children-parent-accounts-default-settings" rel="">providing new parental controls for younger kids</a><span> on the platform, likely planned pre-Hindenburg Research, but good to roll out now.</span></p></li><li><p><span>Just Steam platform things: did you know you can see how much money you’ve spent directly on your Steam account </span><a href="https://help.steampowered.com/en/accountdata/AccountSpend" rel="">via this link</a><span> for ‘External Spend’? And did you know you can look up the ‘market value’ of any public Steam account </span><a href="https://steamdb.info/calculator/" rel="">via this SteamDB link</a><span>? (Be scared.)</span></p></li><li><p><span>Microlinks: Fortnite is </span><a href="https://www.fortnite.com/news/coming-soon-progress-your-fortnite-passes-by-playing-any-experience" rel="">allowing you to</a><em><a href="https://www.fortnite.com/news/coming-soon-progress-your-fortnite-passes-by-playing-any-experience" rel=""> ‘cross-advance’ </a></em><a href="https://www.fortnite.com/news/coming-soon-progress-your-fortnite-passes-by-playing-any-experience" rel="">your Battle Passes for Fortnite, LEGO Fortnite and Fortnite Festival</a><span> by using the same XP for all ; Apple </span><em><span>“appears </span><a href="https://www.roadtovr.com/apple-halts-vision-pro-production-cutback/" rel="">to be scaling back production of Vision Pro</a><span>, and may even halt manufacturing entirely by the end of the year, </span><a href="https://www.theinformation.com/articles/apple-sharply-scales-back-production-of-vision-pro" rel="">The Information </a><span>reports”</span></em><span>; short-episode live action ad/content is </span><a href="https://www.linkedin.com/posts/matejlancaric_short-form-entertainment-has-reshaped-the-activity-7255473269502332928-2Ygv" rel="">spreading from the Quibi-like Reelshort to mobile games</a><span>.</span></p></li></ul><div id="youtube2-iRLcKE-S6As" data-attrs="{&quot;videoId&quot;:&quot;iRLcKE-S6As&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/iRLcKE-S6As?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p><span>We’re guessing you might have seen Pounce Light’s glorious </span><em>“relaxing building game”</em><span> </span><a href="https://store.steampowered.com/app/2198150/Tiny_Glade/" rel="">Tiny Glade</a><span> </span><em>($15)</em><span>, which Ana Opara and Tomasz Stachowiak launched on Steam on Sept. 23rd, after a two-year dev period and </span><a href="https://newsletter.gamediscover.co/p/which-games-hit-big-in-steams-june" rel="">a Top 10 appearance in June’s Next Fest</a><span>.</span></p><p><span>We expected the game to do well - but at 10,000+ CCU on launch, and &gt;1,000 CCU even now, it’s doing amazing for a micro-indie. Why? It appealed to the cozy demo, like </span><a href="https://youtu.be/iRLcKE-S6As" rel="">The Sims streamers</a><span> (above), </span><a href="https://www.youtube.com/watch?v=ZzNNoo0Zpns" rel="">wider </a><em><a href="https://www.youtube.com/watch?v=ZzNNoo0Zpns" rel="">‘city builder’ </a></em><a href="https://www.youtube.com/watch?v=ZzNNoo0Zpns" rel="">influencers</a><span> - and has UGC galore, since players are </span><a href="https://www.youtube.com/watch?v=mKoRzTK1HkU" rel="">building Helm’s Deep from The Lord Of The Rings</a><span> in the game.</span></p><p><span>So we </span><em>had</em><span> to contact the devs for a Q&amp;A. They were kind enough to be transparent with their numbers - as of a few days ago - including this Steam back-end overview:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png" width="621" height="319" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:319,&quot;width&quot;:621,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:31884,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F880cf215-5b7c-428c-934d-a64bcff754a1_621x319.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>A few things stand out there as impressive or different to the norm:</p><ul><li><p><span>the </span><strong>616,000 copies sold in less than a month</strong><span>, pretty much guaranteeing Tiny Glade is selling a million or two over time. (Blimey.)</span></p></li><li><p><span>the </span><strong>big DAU (daily active) number compared to CCU (concurrents)</strong><span> - ~30x, versus 8-10x for stickier titles. (But the game is still 97% Positive in user reviews.)</span></p></li><li><p><span>the </span><strong>median time played of just 1 hour 4 minutes</strong><span> - relatively low, though we know some outliers build for hundreds of hours.</span></p></li></ul><p><span>Just flagging: </span><strong>we don’t really see low play time as a negative </strong><span>here. Tiny Glade is, at its heart, a gorgeous software toy. It doesn’t have in-game goals - it’s a sandbox. The people who bought it love it, and want to support it, and don’t have any regrets. Neat!</span></p><p><span>The Tiny Glade team also passed along the country-based stats for Steam buyers, which are intriguing: United States (32%), Germany (9%), France (7%), UK (7%), China (7%), Canada (4%), Russian Federation (4%), Australia (3%), Netherlands (2%) and Japan (2%). So - </span><strong>less Asia-centric than a number of other recent PC hits</strong><span>…</span></p><p><span>Switching to GameDiscoverCo data: here’s our Steam Deep Dive ‘Affinity’ data, showing </span><strong>medium-sized (or above) games</strong><span> which </span><strong>have a high player overlap with Tiny Glade</strong><span>, and are </span><strong>&gt;10x more likely than a ‘normal’ Steam player to own that game</strong><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg" width="508" height="444.5" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:700,&quot;width&quot;:800,&quot;resizeWidth&quot;:508,&quot;bytes&quot;:132535,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2dd08c19-9edb-4920-a2c5-7cf575217aab_800x700.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>(‘Affinity multiplier’ is how much more likely you are to own this game than the average Steam player, if you also own Tiny Glade.)</figcaption></figure></div><p>This gives a really good flavor of the kinds of players who pick up Tiny Glade. They’re:</p><ul><li><p><strong>Interested in freeform town/city builders</strong><span>, like </span><a href="https://store.steampowered.com/app/1291340/Townscaper/" rel="">Townscaper</a><span> and </span><a href="https://store.steampowered.com/app/1455840/Dorfromantik/" rel="">Dorfromantik</a><span>.</span></p></li><li><p><strong>Delighted by cozy games with more abstract goals</strong><span>, like </span><a href="https://store.steampowered.com/app/1135690/Unpacking/" rel="">Unpacking</a><span>.</span></p></li><li><p><strong>Fans of medieval city-builders</strong><span>, like </span><a href="https://store.steampowered.com/app/242920/Banished/" rel="">Banished</a><span> and </span><a href="https://store.steampowered.com/app/1363080/Manor_Lords/" rel="">Manor Lords</a><span>.</span></p></li></ul><p><span>But… why </span><em>did</em><span> people buy Tiny Glade? The answer is - in our view - that every single video (or demo) that the game has ever put out, from </span><a href="https://x.com/anastasiaopara/status/1565629377823395841" rel="">early viral Tweets</a><span> to  </span><a href="https://www.youtube.com/watch?v=2-Pmal2UupI" rel="">the Future Games Show 2023 trailer</a><span> and beyond, screams </span><em>‘this’ll be so fun to build things in, play me!’</em></p><p><span>With the devs being so good at putting out new WIP work and trailers, the game was rarely </span><em>not</em><span> viral. It launched with a mindblowing 1,375,441 Steam wishlists - the team notes that </span><em>“the big spike at ~20k [daily additions] around May 2024 is Steam Next Fest”</em><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png" width="847" height="392" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:392,&quot;width&quot;:847,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:48771,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F20922d8c-8f45-495c-b25b-080935ab76b9_847x392.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Due to the sheer amount of players, streamers and influencers recommending the game at launch - hence that Overwhelmingly Positive review score - and </span><a href="https://x.com/Morwull/status/1838289272220139859" rel="">a Steam ‘takeover’ feature</a><span> - Tiny Glade also had a visibly good post-launch </span><em>‘long tail’</em><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png" width="728" height="237.02325581395348" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8f5fad08-1074-4361-895c-eb20907f0892_688x224.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:224,&quot;width&quot;:688,&quot;resizeWidth&quot;:728,&quot;bytes&quot;:11979,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8f5fad08-1074-4361-895c-eb20907f0892_688x224.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The game hasn’t had any discounts yet, either - it should shoot back up then.</figcaption></figure></div><p><span>Listen, we know that </span><em>‘incredibly well-made game sells’</em><span> is self-evident, and perhaps not news. But the kind of game this is, goals-wise - and the fact the devs could charge $15 for it, despite being so freeform - is super interesting. So don’t dismiss it out of hand.</span></p><p>To finish up, here’s a brief Q&amp;A we had with Ana &amp; Tom. We don’t generally reprint these in full. But the answers they had were so fascinating, we felt we had to. Ta da:</p><div><p><span>Q: </span><strong>There's a trend recently for games that really don't have strong failure states or put any pressure on the player. Sometimes </strong><em><strong>'game designers'</strong></em><strong> don't want to design </strong><em><strong>'games'</strong></em><strong> like that. Can you explain why you decided to make Tiny Glade like that?</strong></p><p><span>I think it depends on what kind of experience you're trying to achieve… We wanted to craft a serene space that you can escape to, the childhood feeling that you have all the time in the world. Sometimes you want a high intensity game - but sometimes you just want to kick back and see where your imagination takes you.</span></p></div><div id="youtube2-y579pGbhf-s" data-attrs="{&quot;videoId&quot;:&quot;y579pGbhf-s&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/y579pGbhf-s?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><div><p><strong>Q: How much did you iterate with alpha/beta testers pre-release to polish the game, or did you end up doing a lot of the UI/UX iteration yourself? </strong></p><p><span>Oh, we iterated a lot. Some tools went through 6 or 7 fully fleshed out prototypes before we settled on what you can see in the game today. We first do a simple version that we can test on ourselves. Sometimes that stage alone can take multiple attempts. </span></p></div><p>If it does pass our internal evaluation, we polish it up a bit, and then we run a playtest. If we're lucky, then that version works and then it's about smoothing the rough edges, doing micro iterations, so to say. But often things don't work like you'd expect, and you need to go back to the drawing board and try again. </p><div><p><span>Sometimes you can only tell if something works when the rest of the pieces are at a certain level of completion. It's a very, very iterative process, where you work on all the pieces together, fleshing them all out little by little. Before we shipped, we had 5 external playtests in the two year development period.</span></p><p><strong>Q: Do you have two or three rules of 'game feel' that you think you did great in Tiny Glade? It's clear that 'game feel' is a big part of its success!</strong></p><p><span>Yes! We actually outlined design pillars in the very beginning of the development. They were </span><em>"a lot from little effort"</em><span>, </span><em>"no wrong answers"</em><span>, </span><em>"it's alive" </em><span>(the latter referring to the world reacting to what you've built, such as ivy, birds, </span><a href="https://www.youtube.com/shorts/RUNCTeKy7RM" rel="">sheep</a><span>, etc). </span></p></div><p><span>For the 'game feel', I think </span><em>"a lot from little effort"</em><span> is probably the biggest one. Whenever you draw a wall, change roof shape, drag out fences, a lot of stuff is being generated right here and now, just on your whim. Each brick, pebble and plank is carefully placed by the game. </span></p><p>With anything that's generated, we aim for it to feel hand-crafted and perfectly imperfect, as if someone manually constructed all these things just for you. You can hear it from the sound design too. We wanted it to be very tactile, and have an association with real materials, as if you're building a diorama in real life.</p><div id="youtube2-cvswAg5Lrtw" data-attrs="{&quot;videoId&quot;:&quot;cvswAg5Lrtw&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/cvswAg5Lrtw?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><div><p><strong>Q: Tech-wise, I was blown away that</strong><em><strong> [often high-end focused game tech eggheads]</strong></em><strong><span> Digital Foundry </span><a href="https://www.youtube.com/watch?v=cvswAg5Lrtw" rel="">gave you a rave video review</a><span>! Congrats on that - the tech is standout. Do you have any tech inspirations, and do you think procedural elements are still under-used in games?</span></strong></p><p><span>Thank you :D From a rendering perspective, the biggest inspirations were </span><a href="https://store.steampowered.com/app/48000/LIMBO/" rel="">Limbo</a><span> &amp; </span><a href="https://store.steampowered.com/app/304430/INSIDE/" rel="">Inside</a><span>. There, you don't need to tweak a million settings in options to get a beautiful experience from the start. You launch the game, and you’re immediately in it. </span></p></div><div><p><span>We strived for the full experience to be the same across all machines, so that you could experience beautiful lighting even on low-end PCs. When it comes to lighting technologies, after many iterations, Tiny Glade actually ended up being similar to </span><a href="https://store.steampowered.com/app/412020/Metro_Exodus/" rel="">Metro Exodus</a><span> :D</span></p><p><span>I think we’re used to seeing procedural techniques used for generating huge worlds, or </span><em>‘infinite’</em><span> content. So one could say that procedural is used to a narrow extent. But that might be just a matter of semantics, because one could also draw parallels between procedural generation and systemic gameplay. </span></p></div><p><span>Many games amplify your input via multiple layered systems; they might just not be labeled as</span><em> "procedural generation"</em><span>. You could even say that </span><a href="https://www.youtube.com/watch?v=kKtUyggrxoQ" rel="">the wand design system in Noita</a><span> is procedural generation. We happen to use it to make the act of creation satisfying and responsive instead.</span></p><p><span>It’s true that a dominant platform-led status quo can be smothering. But for practical reasons, grumbling about it often gets suppressed. So it’s fascinating to see a spinoff of </span><a href="https://store.steampowered.com/app/632470/Disco_Elysium__The_Final_Cut/" rel="">Disco Elysium</a><span> studio ZA/UM - a game very much forged in radical politics - </span><a href="https://www.vg247.com/disco-elysium-spin-off-studio-summer-eternal-on-chances-of-things-getting-better-for-game-devs" rel="">go straight for the jugular about the workers vs. the ruling (platform) parties</a><span>.</span></p><p><span>Banger quote #1, from </span><a href="https://summereternal.com/" rel="">Summer Eternal</a><span>’s Aleksandar Gavrilović? </span><em><span>“I am still eagerly awaiting a second crisis [beyond the current layoffs], one which would spotlight the largest structural issue in game development… </span><strong><span>one third of all PC revenue from all developers (from indies to AAA) is syphoned to digital </span><a href="https://www.merriam-webster.com/dictionary/fiefdom" rel="">fiefdoms</a><span>, of which Valve is the most egregious example</span></strong><span>. </span></em></p><p><em><span>I can imagine a near future with more worker power, but I </span><strong>lack the imagination to envision the replacement of Valve with a community owned alternative</strong><span>. That 'winter castle' will not fall as easily, but we should at least start openly discussing alternatives."</span></em></p><p><span>Banger quote #2, from the company’s Dora Klindžić? </span><em><span>"It’s true, Summer Eternal will not fix the games industry, although as a byproduct of our operation we might generate a panacea for agriculture, astronomy, inaccurate bus timetables, those hoax messages that target your mom, local elections, and syphilis. </span><strong>I think this industry is finished. But fortunately for everyone, video games are not</strong><span>.” </span></em><span>Now that’s a soundbite….</span></p><p><span>[</span><em><span>We’re&nbsp;</span><a href="http://www.gamediscover.co/" rel="">GameDiscoverCo</a><span>, an agency based around one simple issue: how do players find, buy and enjoy your PC or console game? We run the newsletter you’re reading, and provide consulting services for publishers, funds, and other smart game industry folks.]</span></em></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta Uses LLMs to Improve Incident Response (138 pts)]]></title>
            <link>https://www.tryparity.com/blog/how-meta-uses-llms-to-improve-incident-response</link>
            <guid>42189991</guid>
            <pubDate>Wed, 20 Nov 2024 01:34:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tryparity.com/blog/how-meta-uses-llms-to-improve-incident-response">https://www.tryparity.com/blog/how-meta-uses-llms-to-improve-incident-response</a>, See on <a href="https://news.ycombinator.com/item?id=42189991">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-framer-name="Content" data-framer-component-type="RichTextContainer"><p>In June, Meta released an article titled <!--$--><a href="https://engineering.fb.com/2024/06/24/data-infrastructure/leveraging-ai-for-efficient-incident-response/" rel="noopener">Leveraging AI for efficient incident response</a><!--/$--> on their engineering blog. In this article, engineers outline how they leveraged large language models to improve Meta's incident response capabilities. The headline metric from this report: <strong>Meta was able to use LLMs to successfully root cause incidents with 42% accuracy</strong> in their web monorepo. This means that nearly half the time, the <strong>mean time to resolution (MTTR) can potentially be reduced from hours to seconds</strong>. Seeing one of the largest and most complex engineering organizations in the world use generative AI for incident response so successfully gives us hope that we can bring the same benefit to all engineering teams with <!--$--><a href="https://tryparity.com/" rel="noopener">Parity</a><!--/$-->. Let's dive into how Meta accomplished these results and what we can learn from it.</p><h2>Meta's Incident Management at Scale</h2><p>It can be hard to appreciate the scale and velocity of code changes at a company the size of Meta. They are shipping thousands of changes per day almost entirely within a <!--$--><a href="https://blog.3d-logic.com/2024/09/02/what-it-is-like-to-work-in-metas-facebooks-monorepo/" rel="noopener">single monorepo</a><!--/$-->. Meta literally <!--$--><a href="https://graphite.dev/blog/why-facebook-doesnt-use-git" rel="noopener">re-engineered Mercurial</a><!--/$--> to keep up with the speed at which their codebase was growing (really fun read and nugget of open source history). At this scale, investigating outages becomes a massive undertaking. "Hey did anyone ship anything recently" in #engineering probably doesn't cut it as a response process.</p><p>Meta has invested in sophisticated incident response tools to make the life of on-call engineers easier. All of that tooling is built to solve the same problem any engineer at any organization aims to solve: <strong>what's going wrong, why is it going wrong, and how do we fix it</strong>. Generative AI has clear potential to improve MTTR and incident management processes across the board, and Meta charts one of the potential paths to doing so.</p><h2>Meta's Approach to LLMs for Incident Response</h2><p>Meta's approach to LLMs for incident response enhances the speed and accuracy of RCA by surfacing likely root causes to engineers at the start of their investigation. To handle the complexity of investigating issues within their massive monolithic codebase, they first use heuristic-based retrieval methods to select a subset of code changes and then use LLM-based ranking to narrow in. The retrieval phase reduces the overwhelming number of potential changes by using heuristics like code ownership, directory structures, and runtime code graphs. Once the search space is narrowed down, only the most relevant changes are passed along for deeper analysis by LLMs.</p><p><img alt="How Meta scopes down code changes with heuristics and LLMs" data-framer-asset="data:framer/asset-reference,NZp9ysyAbkYwFzYyzMEyCwlCmc.png" data-framer-height="682" data-framer-width="1536" height="341" src="https://framerusercontent.com/images/NZp9ysyAbkYwFzYyzMEyCwlCmc.png" srcset="https://framerusercontent.com/images/NZp9ysyAbkYwFzYyzMEyCwlCmc.png?scale-down-to=512 512w,https://framerusercontent.com/images/NZp9ysyAbkYwFzYyzMEyCwlCmc.png?scale-down-to=1024 1024w,https://framerusercontent.com/images/NZp9ysyAbkYwFzYyzMEyCwlCmc.png 1536w" width="768" data-framer-original-sizes="" sizes="(min-width: 1200px) 100vw, (min-width: 810px) and (max-width: 1199px) 100vw, (max-width: 809px) 100vw"></p><p><em>How Meta scopes down code changes with heuristics and LLMs</em></p><p>The tool fits right into Meta’s existing incident management processes. Engineers investigate issues just as they normally would, but now, the AI results are surfaced at the start of an investigation, automatically pulling in and ranking the most likely causes of the issue in real time. This means they can quickly focus on the most relevant code changes without spending time digging through thousands of possibilities. Instead of replacing the engineers' expertise, the AI acts as a helpful assistant, focusing them in on the most likely causes of the issue sooner.</p><h2>Fine Tuning Llama 2 7B to Identify Culprit Code Changes</h2><p>One of the particularly interesting innovations behind Meta's AI incident response is the use of a fine-tuned Llama 2 7B model. The model was tuned specifically for root cause analysis by training it on historical incident investigations, which allowed it to learn from past scenarios where the underlying cause was already known. They used a two-phase approach for fine-tuning: starting with continued pre-training (CPT) and followed by a supervised fine-tuning (SFT) phase. During CPT, the model was exposed to internal Meta artifacts such as wikis, code repositories, and Q&amp;A documents, giving it a contextual foundation. In the SFT phase, Meta mixed the original training data of Llama 2 with its own root cause analysis dataset, which focused on instruction-tuning examples, enabling the model to follow RCA-related prompts effectively.</p><p><img alt="The fine-tuning process used for Llama 2 7B" data-framer-asset="data:framer/asset-reference,PXBwLHWp7U7VsAwRG3rVAdjcwOQ.png" data-framer-height="407" data-framer-width="896" height="203" src="https://framerusercontent.com/images/PXBwLHWp7U7VsAwRG3rVAdjcwOQ.png" srcset="https://framerusercontent.com/images/PXBwLHWp7U7VsAwRG3rVAdjcwOQ.png?scale-down-to=512 512w,https://framerusercontent.com/images/PXBwLHWp7U7VsAwRG3rVAdjcwOQ.png 896w" width="448" data-framer-original-sizes="" sizes="(min-width: 1200px) 100vw, (min-width: 810px) and (max-width: 1199px) 100vw, (max-width: 809px) 100vw"></p><p><em>The fine-tuning process used for Llama 2 7B</em></p><p>The fine-tuning dataset was constructed with the constraints of a real-world investigation in mind. Each example involved 2 to 20 potential code changes, with minimal information known at the time of investigation initiation. By training the model this way, Meta equipped it to handle scenarios where data is scarce, making it more applicable to actual investigations. The fine-tuning process enabled the model to generate ranked lists of potential causes, ordered by relevance. The ranking system is built around log probabilities, where the model evaluates how likely each change is to be the root cause based on historical patterns. This fine-tuning process, combined with the aggregation of new datasets, allows Meta's LLM to significantly improve the accuracy of its root cause predictions, achieving a 42% success rate in identifying the culprit code changes during investigations.</p><h2>LLM Agents for Incident Response Are Next (Probably)</h2><p>Meta's use of additional pre-training and fine-tuning on internal documentation and RCA datasets point to another avenue worth exploring: LLM agents for incident response. Agents can actively gather additional relevant context from a larger number of data sources to improve their results. They can also begin to handle more of the incident response process and workflow (find and follow runbooks, measure impact, take mitigation steps, create code changes, write initial post-mortems). Agents are a natural next step, and I'd be surprised if the team isn't already exploring it.</p><h2>42% Accuracy: Good or Bad?</h2><p>The biggest question I had when I read the Meta article was how should I interpret the 42% accuracy result? On the surface, this feels like a disappointing result. While there's no great benchmark for human performance, it still seems quite far from what an engineer could achieve. But when you consider that nearly half the time that an investigation began, an engineer had the root cause handed directly to them, it's an incredible result. As long as the engineer has the context and information to quickly rule out incorrect results, this would likely lead to massive improvements in MTTR. It's also an impressive result for the scale of changes that are being shipped at Meta. At a smaller organization, it's likely that finding culprit commits is a much easier task.</p><h2>Making AI Accessible to All Engineering Teams</h2><p>The way Meta has integrated AI into their incident response process offers a blueprint for other organizations. By using LLMs to prioritize probable root causes, teams can drastically cut down on investigation time, allowing engineers to jump straight into remediation. AI can help by parsing through logs, tracking recent code changes, and correlating potential issues across different environments. Starting with the investigation</p><h2>How Parity Can Bring AI to Your Team's Incident Response</h2><p>Meta is one of the best-resourced engineering teams in the world, and most teams simply don't have armies of researchers with the resources to fine-tune models and experiment with AI technologies. So how does the average team benefit from these insights from Meta? Surely if LLMs can help root cause incidents in one of the most complex infra stacks in the world nearly half the time, they should be helpful for every other engineering organization, right?</p><p>That's exactly our goal at Parity. We've built the world's first AI SRE for incident response to bring these benefits to teams everywhere. We use LLM agents to investigate and root cause issues the same way an engineer would. When an alert from PagerDuty or DataDog triggers, Parity's agent begins to investigate the issue, gather context, and presents its findings to the engineer. This means before an on-call engineer has even opened their laptop, Parity has already done an investigation and engineers can move to remediation faster. We're personally pretty excited about Parity's performance, and the fact that Meta is built a similar tool gives us a lot of confidence that other teams can benefit from these solutions!</p><h2>The Future of Incident Response and AI</h2><p>The exploration of AI's role in incident response is just getting started, and the potential is clear. Humans aren't great at incident response, and we all hate waking up at 2am to resolve an issue. It's not hard to imagine we'll soon be at super-human performance in this problem space. Underlying improvements in model reasoning ability seem well suited to improving performance in the incident response space (we're particularly excited by the potential of <!--$--><a href="https://openai.com/index/introducing-openai-o1-preview/" rel="noopener">OpenAI's o1</a><!--/$-->). And we believe agents will play an important role in moving accuracy even higher. A world where engineers no longer have to deal with alerts and can get back to building isn't too far away.</p><p>There is also massive potential in adjacent areas like cybersecurity incidents. It's not too hard to imagine that LLMs will be used to respond to cyber threats or by security analysts to explore new attack vectors and prevent potential threats (check out our friends from YC over at <!--$--><a href="https://asterisk.so/" rel="noopener">Asterisk</a><!--/$--> who are working in this space!)</p><p><em>Note: I would like to acknowledge the great work by the team at Meta that worked on this, and I highly recommend reading the original article from Meta Engineering!</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: Bluesky Accounts Worth Following for HN Enthusiasts (131 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=42189890</link>
            <guid>42189890</guid>
            <pubDate>Wed, 20 Nov 2024 01:18:21 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=42189890">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="42196040"><td></td></tr>
            <tr id="42189927"><td></td></tr>
                <tr id="42190086"><td></td></tr>
                <tr id="42190172"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190172" href="https://news.ycombinator.com/vote?id=42190172&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>Starter packs are such a cool and obvious idea for onboarding new users. Probably won't be long before the other sites introduce something similar.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42190227"><td></td></tr>
                <tr id="42193741"><td></td></tr>
            <tr id="42192769"><td></td></tr>
                  <tr id="42189931"><td></td></tr>
            <tr id="42190889"><td></td></tr>
                  <tr id="42195722"><td></td></tr>
            <tr id="42189950"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42189950" href="https://news.ycombinator.com/vote?id=42189950&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>I see a lot of people on Mastodon posting jokes about Twitter users moving to another centralised and venture capital-backed platform, like that "this time it will be different for sure!". I haven't read up on it myself so don't know what to think. Can someone burst my bubble on this?</p><p>Edit: saw a lot of valid responses, thanks! My question is answered and I might sign up on bsky as well if I get bored on Mastodon or want to connect with someone there :)</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190274"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190274" href="https://news.ycombinator.com/vote?id=42190274&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>IMO Bluesky (really atproto) is decentralized along the axes that matter, while Mastodon is decentralized along the axes that don't. It's sort of a figure-ground inversion in thinking about a social media protocol so I think a lot of the criticism is coming from people who haven't taken any time to understand it.</p><p>It's an open protocol, but more like the www than email. You can port your identity to another host at any time. You can self host if you want. You have complete control over how your chosen feed algorithm aggregates posts from the firehose. If you want to make a competing service to Bluesky you can even do that, and it will still interoperate with all the Bluesky users.</p><p>Whereas with Mastodon, when you pick an instance you're essentially picking which benevolent dictator you want mediating your experience. Mastodon is decentralized in the sense that it breaks the platform up into smaller fiefdoms; Bluesky is decentralized in the sense that you retain control over your own experience.</p><p>Some recommended reading on Bluesky/atproto:</p><p><a href="https://bsky.app/profile/laurenshof.online/post/3la5j3qgqvo2n" rel="nofollow">https://bsky.app/profile/laurenshof.online/post/3la5j3qgqvo2...</a></p><p><a href="https://fediversereport.com/a-conceptual-model-of-atproto-and-activitypub/" rel="nofollow">https://fediversereport.com/a-conceptual-model-of-atproto-an...</a></p><p><a href="https://atproto.com/articles/atproto-for-distsys-engineers" rel="nofollow">https://atproto.com/articles/atproto-for-distsys-engineers</a></p><p><a href="https://atproto.com/guides/faq" rel="nofollow">https://atproto.com/guides/faq</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190297"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190297" href="https://news.ycombinator.com/vote?id=42190297&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>&gt; You can port your identity to another host at any time. You can self host if you want. You have complete control over how your chosen feed algorithm aggregates posts from the firehose. If you want to make a competing service to Bluesky you can even do that, and it will still interoperate with all the Bluesky users.</p><p>&gt; Whereas with Mastodon, when you pick an instance you're essentially picking which benevolent dictator</p><p>Wait what? All of the benefits you mention for Bluesky apply equally to Mastodon (in both cases you can host your own thing if you like), and the latter (downside) applies to Bluesky when you sign up with the official server right? What's the difference you're pointing out?</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42195601"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42195601" href="https://news.ycombinator.com/vote?id=42195601&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>&gt; What's the difference you're pointing out?</p><p>They don't equally apply.</p><p>&gt; (in both cases you can host your own thing if you like), and the latter (downside) applies to Bluesky when you sign up with the official server right?</p><p>You can host things, sure, but atproto (this is really more about the protocol than the application layer) has true account portability, whereas Mastodon does not. Moving your account on Mastodon account has multiple options, all of which are closer to redirects: <a href="https://docs.joinmastodon.org/user/moving/" rel="nofollow">https://docs.joinmastodon.org/user/moving/</a></p><p>This all also requires cooperation from your host; if you're kicked out, then you can't do any of this. A profile redirect only stays up as long as that host is up.</p><p>Whereas with atproto, you can move between PDSes, and nothing will change with regards to your social graph. If your old PDS kicks you out or dies, you can recreate all of your data onto your new PDS by replaying it off of the relay.</p><p>That is, with Mastodon, your identity and your data storage are linked, so changing your identity requires changing your data storage, and changing your data storage requires changing your identity. But with atproto, these two things are separated, so changing one does not require changing the other.</p><p>Even if you sign up via bsky.app, there isn't even one official server: they partitioned their userbase among a bunch of different PDSes.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190629"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42190629" href="https://news.ycombinator.com/vote?id=42190629&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>I was replying to a post claiming Bluesky is centralized, since it's not, really. Maybe I should have left Mastodon out of it :)</p><p>I think they're both good, but different tools for different jobs. Mastodon is good for tighter knit community. I think Bluesky has potential to be a decentralized replacement for social media with n &gt;&gt; dunbar's number.</p><p>The difference is in the protocol. Bluesky's atproto is IMO very clever and well designed. It's not every day I read something and think to myself, "I wish I'd thought of that!" I'd encourage anybody whose interest is piqued to dig in and read up.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="42189997"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42189997" href="https://news.ycombinator.com/vote?id=42189997&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Personally I don't really care that Bluesky is centralized, I actually prefer it since it's easier to use and there isn't the risk that my random server admin is going to go rouge or shut down the server like you get with Mastodon.</p><p>Twitter was pretty much fine until Musk started shitting it up so something that is pretty much like Twitter pre Musk is all I want. Bluesky fills that position well.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190336"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190336" href="https://news.ycombinator.com/vote?id=42190336&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>I see why people might say it but "Bluesky is centralized" isn't an especially accurate criticism. The protocol allows essentially any aspect of Bluesky to be decentralized, up to and including starting a competing service that still interoperates with Bluesky users—no permission required.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190117"><td></td></tr>
                  <tr id="42190129"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190129" href="https://news.ycombinator.com/vote?id=42190129&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>There’s a deep lesson in the victory of Bluesky over Mastodon about the general inability of Open Source projects to provide a simple, intuitive end user experience.  It’s unsurprising for those of us who have participated in Open Souce for a while, but Bluesky vs. Mastodon will become the canonical example.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190190"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190190" href="https://news.ycombinator.com/vote?id=42190190&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Where is this “victory” of bluesky over mastodon? IMO they are both losers and most likely stay losers (as in never be anywhere close to twitter).</p><p>Even the accounts posted here, signed up in 2023, posted on bluesky three times.</p><p>If anything, I at least know some people who seem to have found some small community amongst the mastodongers.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190349"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42190349" href="https://news.ycombinator.com/vote?id=42190349&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>I suppose that time will tell.  Twitter is in the midst of an experiment to see if social network effects will keep users around despite unlimited levels of political hostility, abuse, and algorithmic shenanigans from the ownership.  My impression is that there’s a limit and we’ve crossed it post election as Bluesky has been gaining a million users each day, but my bias is showing.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42193201"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42193201" href="https://news.ycombinator.com/vote?id=42193201&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Wasn't Bluesky developed in house by a paid team at Twitter, who also developed the protocol? And isn't its UX essentially a clone of Twitter's, which itself is the result of millions of dollars in R&amp;D and proprietary labor? And isn't the existing familiarity with Twitter the only reason Bluesky's interface is "intuitive?"</p><p>A lot of the rough edges for Mastodon come from it actually being decentralized, and the extra complexity that brings. There is for all intents and purposes only one Bluesky instance, and there will likely only ever be one instance due to network effects. It's open source in the same way Reddit or HN are open source - the code is available, but there is only one implementation that matters.</p><p>I don't think you're entirely wrong - Mastodon could definitely do with better UX, but let's not pretend the playing field is level here. Bluesky's success is very much the result of corporate and proprietary development culture, advertising and startup hype, not of open source culture.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42195071"><td></td></tr>
                        <tr id="42190034"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190034" href="https://news.ycombinator.com/vote?id=42190034&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>If you're worried about your content on Bluesky or whatever getting hijacked, you should consider POSSE: <a href="https://indieweb.org/POSSE" rel="nofollow">https://indieweb.org/POSSE</a></p><p>(One of the strengths of Bluesky over X is that Bluesky currently doesn't punish people who link away from the site)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190092"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190092" href="https://news.ycombinator.com/vote?id=42190092&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>I think it’s mistaken. You can run your own bluesky server, I’m meaning to get around to it but seems fairly straight forward:</p><p><a href="https://atproto.com/guides/self-hosting" rel="nofollow">https://atproto.com/guides/self-hosting</a></p><p>When I tried to install mastodon it downloaded literally hundreds of random dependencies, there was no way I could verify the security of it. Real shitshow imho.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190157"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190157" href="https://news.ycombinator.com/vote?id=42190157&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>What I hear is that there was an outage that took all of bsky down, as well as centralised moderation. Correct me if I'm wrong, or if it's still in the works, but it sounds like valid criticism when people say that demonstrates it functions as a centralised platform</p><p>Haven't tried self-hosting Mastodon since I was looking for a social platform and not a new hobby. There's lots of hosters to choose from though, including the usual suspects like German Tchncs and French La Quadrature du Net (they also host other alternatives to big tech platforms like peertube)</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42195650"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42195650" href="https://news.ycombinator.com/vote?id=42195650&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>&gt; What I hear is that there was an outage that took all of bsky down, as well as centralised moderation.</p><p>"all of" is accurate only in the sense that there's one major appview right now, but it wouldn't take down all of the independent PDS hosts. Anyone using an alternative appview wouldn't have been affected.</p><p>There is centralized moderation for the bluesky application, but not at the protocol level.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190183"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42190183" href="https://news.ycombinator.com/vote?id=42190183&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Honestly I found starting my own mastodon server less work than trying to figure which of somebody else’s servers to use.</p><p>I’m not sure as to the future of bluesky, but they are committed to having a distributed network, and have been before they even launched.</p><p>I think claims to the contrary are sour grapes.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42190249"><td></td></tr>
                <tr id="42190338"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42190338" href="https://news.ycombinator.com/vote?id=42190338&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>The full thread has a lot of speculation without basis in fact (eg why a given VC decided to invest in bsky), and the primary technical argument involves some theoretical issues vis-a-vis rebuilding the network if 25%+ of users decide to migrate out.</p><p>I don’t put that much stock in such critiques when a project is still evolving, learning lessons, and most importantly growing.</p><p>Most of the complaints coming from the mastodon crowd feel more like emacs vs vim “debates” of yesteryear.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="42190079"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190079" href="https://news.ycombinator.com/vote?id=42190079&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>I’m open to the possibility that Bluesky will go “bad” in some way.</p><p>Still not opposed to trying.</p><p>Gave up twitter long ago anyway.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42193270"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42193270" href="https://news.ycombinator.com/vote?id=42193270&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>I kinda agree with that take, I just wanna bet on a new space, reset my algorithmic recommendations, plus find new accounts to read.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190170"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190170" href="https://news.ycombinator.com/vote?id=42190170&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Products go through lifecycles. I don't need to use them for their whole lifetimes, just while they are viable.</p><p>Many of us have probably experienced this with at least one major platform: Facebook. A score of years ago, it was considered cool. New platforms have taken their place: in fact, for a certain audience, Twitter was once the cool place they went to after fleeing Facebook.</p><p>For certain purposes, FB is dead. Same for Twitter. Now it's Bluesky's turn. It doesn't need to last for a century to be worth it.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190266"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190266" href="https://news.ycombinator.com/vote?id=42190266&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>It is sad, though, that you have to rebuild again after something like Facebook falls out of favor. Contacts get lost. I guess people will move to newer technologies than Mastodon as well, but so long as the concept is valid and the software maintained, transitioning to another instance is a feature of the system. I hear it has its issues but in general, you publish some redirect on your old profile (there's a button for doing it in your account settings) and then all followers will switch to the new location. You shouldn't have to start over from scratch in a normal case as migration is a foreseen situation</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42192472"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42192472" href="https://news.ycombinator.com/vote?id=42192472&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Besides everything else, there are only so many insane billionaires of sufficient insanity to buy and ruin a social network. Like, Dorsey was pretty odd, but that wasn't sufficient to totally ruin Twitter. Lightning, one might think, is somewhat unlikely to strike twice, and thus a realistic worst-case future for Bluesky is, more or less, old-Twitter.</p><p>Like, would I depend on Bluesky for anything important? No, of course not, that would be silly. But for use as a social network, it's sufficient, for now (I'm splitting my time between it and Mastodon; Bluesky is, generally, more _fun_.)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190164"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190164" href="https://news.ycombinator.com/vote?id=42190164&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>Mastodon users are really not happy that there's an alternative that might actually give users data sovereignty, wresting power away from people whose only way of relating to others is by exerting control over them.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190528"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190528" href="https://news.ycombinator.com/vote?id=42190528&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Can you explain the differences in the “data sovereignty” story that bluesky does better than Mastodon?</p><p>I never see these discussions on bluesky or mastodon only here on Hacker News but it almost is never elaborated just that bluesky’s is better.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42195668"><td></td></tr>
                        <tr id="42190094"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190094" href="https://news.ycombinator.com/vote?id=42190094&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>It's the Team Fortress 2 paradox all over again. TF2 famously had a number of games all coming to dismantle its market dominance and each of them failed miserably. This might have seemed puzzling given TF2's somewhat antiquated gameplay and maps. It turns out that the magic sauce of TF2 was never the gameplay but instead the dogged and disciplined developer support from Valve over the years. For the latest example, look no further than Overwatch 2 killing itself with a greedy business model which, again, had nothing to do with the core game.</p><p>Likewise, Twitter is a very simple website to clone and compete with. Resisting the temptation to censor, putting in the effort to establish a non-exploitative business model, etc, is something that no one else has been able to do.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190449"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190449" href="https://news.ycombinator.com/vote?id=42190449&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>I really think features, support, and functionality are secondary or tertiary effects at best, with the network-effect, first-to-market, winner-takes-all type mindshare stuff very very far ahead of them in impact.  This also vaguely implies that features must be at least 10x better to make a meaningful difference.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42190017"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190017" href="https://news.ycombinator.com/vote?id=42190017&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>I haven't seen those, mostly because finding people on Mastodon is impossible ;)</p><p>Maybe it will be different, maybe it won't. But the people moving to bsky care more about usability than they care about federation. They're not saying "this time will be different", they're picking a platform they feel comfortable using and don't care about VC money or not.</p><p>If that doesn't align with your values, maybe you don't want to join them. Because, yes, bsky is investor-financed, and at some point they'll need money. You might not agree with how they'll make that money, and it will be indeed no different. Your bubble is right on that.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190041"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190041" href="https://news.ycombinator.com/vote?id=42190041&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Mastadonians are being total sore losers , they're so proud that they're actually decentralized and self hosted (even tho most users are on mastadon.social)</p><p>IMO bluesky being a clone of Twitter in its UX means that you're going to get the same social dynamics, just a different group in charge of moderation decisions.</p><p>Bluesky is supposed to offer a different architecture of allowing users to decide what they see via shared blocklists and labeling services, but they still regularly ban right wingers, trolls, and griefers from having an identifier on their servers, and since there's no one hosting an alternate appview, it's Pretty Damned Centralized (tm) for the time being.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190075"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190075" href="https://news.ycombinator.com/vote?id=42190075&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>Does Bluesky manipulate one’s feed or does it let it be based on the user’s subscriptions’ posts posted in reverse chronological order, filtered by the user’s preferences? Like Mastodon does?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190139"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42190139" href="https://news.ycombinator.com/vote?id=42190139&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Bluesky lets you configure your feeds, or add new ones: <a href="https://bsky.app/feeds" rel="nofollow">https://bsky.app/feeds</a></p><p>Default Bluesky has the "Discover" feed and the "Following" feed. The "Discover" feed is the equivalent of the algorithmic "For you" feed in X, but you can always unpin it.</p><p>The "Following" feed is close to what you want I think.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190121"><td></td></tr>
                <tr id="42190125"><td></td></tr>
                  <tr id="42190096"><td></td></tr>
                  <tr id="42190209"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190209" href="https://news.ycombinator.com/vote?id=42190209&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>I don't see one or the other as having won or lost. I don't know anyone on bsky and various people on Mastodon, also before joining Mastodon about a year ago, but hear bsky is bigger on the whole. Probably a regional thing, and part of what I seek on this type of platform is local people and news. Heard of an open day of the Effelsberg radio telescope for example, which was a really nice experience and I'm not sure by what other means I could have learned of it (following all places of interest in a large radius separately perhaps? How would discovery of new places work?). It simply fulfills its purpose for me rather than being a "total sore loser"</p><p>I also really enjoy the inclusivity features like content warnings, filters, and alt texts. Didn't know I'd want these but it has been super nice around the USA election period, or when videos don't load on mobile data you can just read the text and know whether to bother with further attempts. Dunno if bsky has feature parity there or if people make use of it. My Mastodon instance in particular is quite... I don't want to say strict, but there's a good culture about it</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42192513"><td></td></tr>
                  <tr id="42190071"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190071" href="https://news.ycombinator.com/vote?id=42190071&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>&gt;they're so proud that they're actually decentralized and self hosted (even tho most users are on mastadon.social)</p><p>Sorry, is any of that supposed to be wrong? People who use a decentralised platform aren't going to be fans of a new, mostly-centralised platform, I don't see how that's being sore losers. I also don't think most people on the Fediverse expect mainstream adoption any time soon, and many don't want it either.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190083"><td></td></tr>
                <tr id="42190730"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_42190730" href="https://news.ycombinator.com/vote?id=42190730&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>Being on a large instance doesn't mean you don't care about decentralisation, you can still choose to migrate to a different instance if you want. The whole point is you're not locked in to one vendor and you can move if you want to, not that everyone should have to live on their own island</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42193357"><td></td></tr>
                              <tr id="42190073"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190073" href="https://news.ycombinator.com/vote?id=42190073&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>Somehow the tone of your first paragraph doesn't match the content of the other two. They make it seem like the Mastodonians are pretty much Right™</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190067"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42190067" href="https://news.ycombinator.com/vote?id=42190067&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>&gt; they still regularly ban right wingers</p><p>No. There are plenty of conservatives on Bluesky and Threads.</p><p>They get banned when they cross the line and start being deliberately antagonistic.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="42189965"><td></td></tr>
                <tr id="42189970"><td></td></tr>
                <tr id="42189988"><td></td></tr>
                <tr id="42195516"><td></td></tr>
            <tr id="42190708"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42190708" href="https://news.ycombinator.com/vote?id=42190708&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>No certainly not. My name isn’t actually Graydon, but it’s the name of a place where I used to live and so I’ve long been using it as my online moniker.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                              <tr id="42190102"><td></td></tr>
            <tr id="42189982"><td></td></tr>
            <tr id="42193259"><td></td></tr>
            <tr id="42190517"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42190517" href="https://news.ycombinator.com/vote?id=42190517&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>New versions of the same old social media will never fix the problems of social media.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190732"><td></td></tr>
                <tr id="42193279"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42193279" href="https://news.ycombinator.com/vote?id=42193279&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Yeah, I really don't think Bluesky will be that different and when it matters they will find a way to enshitificate it.</p><p>But I love to get new accounts to follow and good content.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42190748"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190748" href="https://news.ycombinator.com/vote?id=42190748&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div>
                  <p>Yes, but asking people not to use social media is not constructive. I don't use any, but I understand why people do, psychologically speaking. It's inevitable. The least they can do is migrate to whichever seems least enshittified at the moment.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="42192456"><td></td></tr>
                  <tr id="42191131"><td></td></tr>
            <tr id="42190021"><td></td></tr>
            <tr id="42190533"><td></td></tr>
            <tr id="42191548"><td></td></tr>
            <tr id="42191583"><td></td></tr>
            <tr id="42190064"><td></td></tr>
            <tr id="42190526"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42190526" href="https://news.ycombinator.com/vote?id=42190526&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>I'm so glad to see an influx of tech and security related accounts on bsky.</p><p>When I was last using bsky a lot under a different account, it was a much smaller site and a lot of the major posters seemed to mostly just be involved with interpersonal drama.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190082"><td></td></tr>
            <tr id="42190053"><td></td></tr>
            <tr id="42190039"><td></td></tr>
            <tr id="42190868"><td></td></tr>
            <tr id="42190014"><td></td></tr>
            <tr id="42190054"><td></td></tr>
            <tr id="42190008"><td></td></tr>
            <tr id="42190300"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42190300" href="https://news.ycombinator.com/vote?id=42190300&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>A few tech/ML related that I've found to follow,</p><p>Jeremy Howard
@jph.bsky.social</p><p>Gaël Varoquaux
@gaelvaroquaux.bsky.social</p><p>antirez
@antirez.bsky.social</p><p>Armin Ronacher
@mitsuhiko.at</p><p>Brewster Kahle
@brewster.kahle.org</p><p>Hacker News Top Stories
@hackernewsbot.bsky.social</p><p>Simon Willison
@simonwillison.net</p><p>Julia Evans
@b0rk.jvns.ca</p><p>Miguel de Icaza
@migueldeicaza.bsky.social</p><p>Randall Munroe
@xkcd.com</p><p>Melanie Mitchell
@melaniemitchell.bsky.social</p><p>karpathy
@karpathy.bsky.social</p><p>François Chollet
@fchollet.bsky.social</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190995"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42190995" href="https://news.ycombinator.com/vote?id=42190995&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>I was there when it was like 500 people. Took a break and came back. Mostly post about product and game development.</p><p>Sho.bsky.social</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42190701"><td></td></tr>
            <tr id="42190174"><td></td></tr>
            <tr id="42190077"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42190077" href="https://news.ycombinator.com/vote?id=42190077&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>oh . perfect.</p><p>hey technical bluesky. i have a challenge for you.</p><p>tail the firehose on bluesky and calculate how many posts per second there are.</p><p>its 90-130 today. my observation is that its trending downward by 15-30 posts a second per day despite the upward alleged user growth.</p><p>and is that number going up or DOWN despite allegedly being 20x bigger than ever and a million new accounts a day?</p><p>#!/bin/bash</p><p>./websocat4.x86_64-unknown-linux-musl wss://jetstream.atproto.tools/subscribe\?wantedCollections=app.bsky.feed.post |pv --line-mode --rate &gt; /dev/null</p><p>so what are these millions of new accounts if they dont post anything?</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42190107"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190107" href="https://news.ycombinator.com/vote?id=42190107&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>I can’t answer or even evaluate your interpretation.</p><p>But let’s assume that the people are there and there’s a lot less posting and more reading.</p><p>Maybe that’s ok, or even better?</p><p>Not saying it is, but maybe?</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42192532"><td></td></tr>
            <tr id="42190211"><td></td></tr>
            <tr id="42190150"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42190150" href="https://news.ycombinator.com/vote?id=42190150&amp;how=up&amp;goto=item%3Fid%3D42189890"></a></center>    </td><td><br><div><p>Tantrums about X can only last so long.</p><p>On the upside we all got the opportunity to just block any accounts announcing their departure from X.</p></div></td></tr>
        </tbody></table></td></tr>
                  </tbody></div></div>]]></description>
        </item>
    </channel>
</rss>