<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 26 Jul 2024 01:30:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[U.S. Department of Defense – Detecting Agile BS [pdf] (118 pts)]]></title>
            <link>https://media.defense.gov/2018/Oct/09/2002049591/-1/-1/0/DIB_DETECTING_AGILE_BS_2018.10.05.PDF</link>
            <guid>41073688</guid>
            <pubDate>Thu, 25 Jul 2024 21:40:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://media.defense.gov/2018/Oct/09/2002049591/-1/-1/0/DIB_DETECTING_AGILE_BS_2018.10.05.PDF">https://media.defense.gov/2018/Oct/09/2002049591/-1/-1/0/DIB_DETECTING_AGILE_BS_2018.10.05.PDF</a>, See on <a href="https://news.ycombinator.com/item?id=41073688">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Switzerland mandates government agencies use open-source software (114 pts)]]></title>
            <link>https://www.tomshardware.com/software/switzerland-mandates-government-agencies-use-open-source-software</link>
            <guid>41072795</guid>
            <pubDate>Thu, 25 Jul 2024 20:05:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomshardware.com/software/switzerland-mandates-government-agencies-use-open-source-software">https://www.tomshardware.com/software/switzerland-mandates-government-agencies-use-open-source-software</a>, See on <a href="https://news.ycombinator.com/item?id=41072795">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article-body">
<p>Switzerland has recently enacted a law requiring its government to use open-source software (OSS) and disclose the source code of any software developed by or for the public sector. According to <a data-analytics-id="inline-link" href="https://www.zdnet.com/article/switzerland-now-requires-all-government-software-to-be-open-source/?s=31" target="_blank" data-url="https://www.zdnet.com/article/switzerland-now-requires-all-government-software-to-be-open-source/?s=31" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">ZDNet</a>, this “public body, public code” approach makes government operations more transparent while increasing <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/security" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.tomshardware.com/tag/security">security</a> and efficiency. Such a move would likely fail in the U.S. but is becoming increasingly common throughout Europe.</p><p>According to Switzerland’s new “Federal Law on the Use of Electronic Means for the Fulfillment of Government Tasks” (EMBAG), government agencies must use open-source software throughout the public sector.&nbsp;</p><p>It’s not an entirely new move for Switzerland. In 2011, the Swiss Federal Supreme Court published its court application, Open Justitia, using an OSS license. It was unpopular with legal software company Weblaw, and more than a decade of political and legal battles followed.</p><p>The new law allows the codifies allowing Switzerland to release its software under OSS licenses. Not just that; it requires the source code be released that way “unless the rights of third parties or security-related reasons would exclude or restrict this.”&nbsp;</p><p>In addition to mandating the OSS code, EMBAG also requires Swiss government agencies to release non-personal and non-security-sensitive government data to the public. Calling this Open Government Data, this aspect of the new law contributes to a dual “open by default” approach that should allow for easier reuse of software and data while also making governance more transparent.</p><p>Other nations throughout Europe have made similar moves. France’s version of the U.S. FBI, known as the National Gendarmerie, uses Linux on most PCs. Schleswig-Holstein, one of Germany’s 16 states, recently migrated 30,000 computers from <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/microsoft" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.tomshardware.com/tag/microsoft">Microsoft</a> products to Linux and LibreOffice.&nbsp;</p><p>The European Union has also worked for years to help OSS become more secure through the Free and Open Source Software Auditing (FOSSA) project. At the same time, there could be some cause for concern about the future of OSS in Europe — there are concerns the European Commission might cut funding for an essential source of financing for OSS projects.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-VHzDKP52cwzLBL6YEhpXCD"><section><p>Get Tom's Hardware's best news and in-depth reviews, straight to your inbox.</p></section></div><p>In the U.S., however, there’s much less support for OSS. The U.S. government does offer some support for open-source, but it’s much more constrained. For example, the Federal Source Code Policy requires government agencies to release at least 20% of their new custom-developed code as OSS. Also, the General Services Administration (GSA) requires its organizations to account for and publish any of their open-source code.</p><p>The critical difference, though, is that no laws in the U.S. mandate the use of open-source software like Switzerland’s. If Switzerland’s new openness works well, it could be a model for further change throughout the rest of Europe and the United States.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI crawlers need to be more respectful (196 pts)]]></title>
            <link>https://about.readthedocs.com/blog/2024/07/ai-crawlers-abuse/</link>
            <guid>41072549</guid>
            <pubDate>Thu, 25 Jul 2024 19:39:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://about.readthedocs.com/blog/2024/07/ai-crawlers-abuse/">https://about.readthedocs.com/blog/2024/07/ai-crawlers-abuse/</a>, See on <a href="https://news.ycombinator.com/item?id=41072549">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>In the last few months, we have noticed an increase in abusive site crawling,
mainly from AI products and services. These products are recklessly crawling
many sites across the web, and we've already had to block several sources of abusive traffic.
It feels like a new AI gold rush,
and in their haste,
some of these crawlers are behaving in a way that harms the sites they depend on.</p>
<p>At Read the Docs,
we host documentation for many projects and are generally bot friendly,
but the behavior of AI crawlers is currently causing us problems.
We have noticed AI crawlers aggressively pulling content, seemingly without basic
checks against abuse.
Bots repeatedly download large files hundreds of times daily,
partially from bugs in their crawlers,
with traffic coming from many IP addresses without rate or bandwidth limiting.</p>
<p>AI crawlers are acting in a way that is not respectful to the sites they are crawling,
and that is going to cause a backlash against AI crawlers in general.
As a community-supported site without a large budget,
AI crawlers have cost us a significant amount of money in bandwidth charges,
and caused us to spend a large amount of time dealing with abuse.</p>
<h2 id="ai-crawler-abuse">AI crawler abuse</h2>
<p>We have been seeing a number of bad crawlers over the past few months,
but here are a couple illustrative examples of the abuse we're seeing:</p>
<h3>73 TB in May 2024 from one crawler</h3>
<p><strong>One crawler downloaded 73 TB of zipped HTML files in May 2024, with almost 10 TB in a single day</strong>. This cost us over $5,000 in bandwidth charges, and we had to block the crawler. We emailed this company, reporting a bug in their crawler, and we're working with them on reimbursing us for the costs.</p>
<p><img alt="AI crawler abuse, May 2024" src="https://about.readthedocs.com/images/posts/bandwidth-may-2024.png"></p>
<p>This was a bug in their crawler that was causing it to download the same files over and over again.
There was no bandwidth limiting in place,
or support for Etags and Last-Modified headers which would have allowed the crawler to only download files that had changed.
We have reported this issue to them,
and hopefully the issue will be fixed.</p>
<p>We do have a CDN for these files,
but this request was for an old URL that had an old redirect in place.
This redirect went to an old dashboard download URL,
where we don't have CDN caching in place for security reasons around serving other dynamic content.
We are planning to fix this redirect to point to the cached URL.</p>
<details>
<summary>Example web requests</summary>

<pre>
-&gt; curl -IL "https://media.readthedocs.org/htmlzip/chainer/v1.24.0/_modules/chainer/testing/_modules/chainer/_modules/cupy/indexing/_modules/chainer/initializers/normal.html"
HTTP/2 302
date: Thu, 25 Jul 2024 16:24:18 GMT
content-type: text/html
content-length: 138
location: https://buildmedia.readthedocs.org/media/htmlzip/chainer/v1.24.0/_modules/chainer/testing/_modules/chainer/_modules/cupy/indexing/_modules/chainer/initializers/normal.html
x-backend: web-i-0af0e99066a6e05c0
access-control-allow-origin: *
x-served: Nginx
cf-cache-status: DYNAMIC
server: cloudflare
cf-ray: 8a8d7fd81d060943-SEA

HTTP/2 302
date: Thu, 25 Jul 2024 16:24:18 GMT
content-type: text/html
content-length: 138
location: https://readthedocs.org/projects/chainer/downloads/htmlzip/v1.24.0/
x-backend: web-i-092bc168f09ac4a16
cf-cache-status: HIT
age: 537
expires: Thu, 25 Jul 2024 20:24:18 GMT
cache-control: public, max-age=14400
server: cloudflare
cf-ray: 8a8d7fda9837c87c-SEA

HTTP/2 200
date: Thu, 25 Jul 2024 16:24:18 GMT
content-type: application/zip
content-length: 5888860
content-disposition: filename=docs-chainer-org-en-v1.24.0.zip
x-amz-id-2: +DjI2tMbUou9XNK5+G53Gyhah4lhBwAgnRiqBh9vsR3KzqxajSTC4B+eIQBY+pi+ZR6McRQngSI=
x-amz-request-id: Z502YT87WEMM3ZY9
last-modified: Thu, 11 Feb 2021 09:12:59 GMT
etag: "c8cb418f5a8ff2e376fc5f7b7564e445"
x-amz-meta-mtime: 1495712654.422637991
accept-ranges: bytes
x-served: Nginx-Proxito-Sendfile
x-backend: web-i-01ce033e08bb601ef
referrer-policy: strict-origin-when-cross-origin
x-frame-options: DENY
x-content-type-options: nosniff
content-security-policy: object-src 'none'; frame-ancestors 'none'
cf-cache-status: DYNAMIC
server: cloudflare
cf-ray: 8a8d7fdbbf787565-SEA

</pre>

As you can see, this file was last modified in 2021.
However, crawlers didn't have this basic check and instead repeatedly downloaded files like these hundreds of times each.

</details>

<h3>10 TB in June 2024 from another</h3>
<p>In June 2024, <strong>someone used Facebook's content downloader to download 10 TB</strong> of data, mostly Zipped HTML and PDF files. We tried to email Facebook about it with the <a href="http://www.facebook.com/externalhit_uatext.php">contact information listed in the bot's user agent</a>, but the email bounced.</p>
<p><img alt="AI Crawler abuse, June 2024" src="https://about.readthedocs.com/images/posts/bandwidth-june-2024.png"></p>
<p>We think this was someone using Facebook's content downloader to download all of our files, but we aren't really sure.
It could also be Meta crawling sites with their latest AI project,
but the user agent is not clear.</p>
<h2 id="actions-taken">Actions taken</h2>
<p>We have IP-based rate limiting in place for many of our endpoints,
however these crawlers are coming from a large number of IP addresses,
so our rate limiting is not effective.</p>
<p>These crawlers are using real user agents that identify them,
which is a good thing.
However, we can't simply rate limit all user agents to our platform because many real users use the same browsers with the same user agent.
(CDN providers: if you're reading this, there's an opportunity here!)</p>
<p>We have taken a few actions to try to mitigate this abuse:</p>
<ul>
<li>We have temporarily blocked all traffic from bots <a href="https://radar.cloudflare.com/traffic/verified-bots">Cloudflare identifies as AI Crawlers</a>, while we figure out how to deal with this.</li>
<li>We have started monitoring our bandwidth usage more closely and are working on more aggressive rate limiting rules.</li>
<li>We will reconfigure our CDN to better cache these files, reducing the load on our origin servers.</li>
</ul>
<h2 id="outcomes">Outcomes</h2>
<p>Given that our Community site is only for hosting open source projects,
AWS and Cloudflare do give us sponsored plans,
but we only have a limited number of credits each year.
The additional bandwidth costs AI crawlers are currently causing will likely mean we will run out of AWS credits early.</p>
<p><strong>By blocking these crawlers,
bandwidth for our downloaded files has decreased by 75% (~800GB/day to ~200GB/day).</strong>
If all this traffic hit our origin servers,
it would cost around $50/day, or $1,500/month,
along with the increased load on our servers.</p>
<p>Normal traffic gets cached by our CDN,
and doesn't cost us anything for bandwidth.
But because many of these files are not downloaded often (and they're large),
the cache is usually expired and the requests hit our origin servers directly,
causing substantial bandwidth charges.
Zipped documentation was designed for offline consumption by users, not for crawlers.</p>
<h2 id="next-steps">Next steps</h2>
<p>We are asking all AI companies to be more respectful of the sites they are crawling.
They are risking many sites blocking them for abuse,
irrespective of the other copyright and moral issues that are at play in the industry.</p>
<p>As a major host of open source documentation,
we'd love to work with these companies on a deal to crawl our site respectfully.
We could build an integration that would alert them to content changes,
and download the files that have changed.
However, none of these companies have reached out to us,
except in response to abuse reports.</p>
<p>We also ask that they implement basic checks in their crawlers for all sites.
A good example is the <a href="https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#scrapy.extensions.httpcache.RFC2616Policy">RFC2616Policy downloader from Scrapy</a>,
which implement many of these policies.</p>
<p>If these companies wish to be good actors in the space,
they need to start acting like it,
instead of burning bridges with folks in the community.</p>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Jacek Karpińśki, the computer genius the communists couldn't stand (2017) (177 pts)]]></title>
            <link>https://culture.pl/en/article/jacek-karpinski-the-computer-genius-the-communists-couldnt-stand</link>
            <guid>41072026</guid>
            <pubDate>Thu, 25 Jul 2024 18:50:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://culture.pl/en/article/jacek-karpinski-the-computer-genius-the-communists-couldnt-stand">https://culture.pl/en/article/jacek-karpinski-the-computer-genius-the-communists-couldnt-stand</a>, See on <a href="https://news.ycombinator.com/item?id=41072026">Hacker News</a></p>
Couldn't get https://culture.pl/en/article/jacek-karpinski-the-computer-genius-the-communists-couldnt-stand: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Secure Boot is broken on 200 models from 5 big device makers (113 pts)]]></title>
            <link>https://arstechnica.com/security/2024/07/secure-boot-is-completely-compromised-on-200-models-from-5-big-device-makers/</link>
            <guid>41071708</guid>
            <pubDate>Thu, 25 Jul 2024 18:21:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/security/2024/07/secure-boot-is-completely-compromised-on-200-models-from-5-big-device-makers/">https://arstechnica.com/security/2024/07/secure-boot-is-completely-compromised-on-200-models-from-5-big-device-makers/</a>, See on <a href="https://news.ycombinator.com/item?id=41071708">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2020/10/rootkit-800x533.jpg" alt="Secure Boot is completely broken on 200+ models from 5 big device makers">
      <figcaption><p>sasha85ru | Getty Imates</p></figcaption>  </figure>

  




<!-- cache hit 58:single/related:e9440a0a1361baaf57ed2854a9a45ef6 --><!-- empty -->
<p>In 2012, an industry-wide coalition of hardware and software makers adopted <a href="https://uefi.org/press-release/UEFI_Forum_Releases_UEFI_2.3.1_Specification_Update_and_Schedules_July_3_2012">Secure Boot</a> to protect against a long-looming security threat. The threat was the specter of malware that could infect the BIOS, the firmware that loaded the operating system each time a computer booted up. From there, it could remain immune to detection and removal and could load even before the OS and security apps did.</p>
<p>The threat of such BIOS-dwelling malware was largely theoretical and fueled in large part by the creation of <a href="https://blog.csdn.net/icelord/article/details/1604884">ICLord Bioskit</a> by a Chinese researcher in 2007. ICLord was a <a href="https://en.wikipedia.org/wiki/Rootkit">rootkit</a>, a class of malware that gains and maintains stealthy root access by subverting key protections built into the operating system. The proof of concept demonstrated that such BIOS rootkits weren't only feasible; they were also powerful. In 2011, the threat became a reality with the discovery of <a href="https://www.theregister.com/2011/09/14/bios_rootkit_discovered/">Mebromi</a>, the first-known BIOS rootkit to be used in the wild.</p>
<p>Keenly <a href="https://uefi.org/sites/default/files/resources/UEFI_Plugfest_2011Q4_P5_Insyde.pdf">aware of Mebromi</a> and its potential for a devastating new class of attack, the Secure Boot architects hashed out a complex new way to shore up security in the pre-boot environment. Built into UEFI—the Unified Extensible Firmware Interface that would become the successor to BIOS—Secure Boot used <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">public-key cryptography</a> to block the loading of any code that wasn’t signed with a pre-approved digital signature. To this day, key players in security—among them&nbsp;<a href="https://www.microsoft.com/en-us/surface/do-more-with-surface/what-is-secure-boot" target="_blank" rel="noopener">Microsoft</a>&nbsp;and the&nbsp;<a href="https://media.defense.gov/2020/Sep/15/2002497594/-1/-1/0/CTR-UEFI-SECURE-BOOT-CUSTOMIZATION-20200915.PDF/CTR-UEFI-SECURE-BOOT-CUSTOMIZATION-20200915.PDF" target="_blank" rel="noopener">US National Security Agency</a>—regard Secure Boot as an important, if not essential, foundation of trust in securing devices in some of the most critical environments, including in industrial control and enterprise networks.</p>
<h2>An unlimited Secure Boot bypass</h2>
<p>On Thursday, researchers from security firm Binarly revealed that Secure Boot is completely compromised on more than 200 device models sold by Acer, Dell, Gigabyte, Intel, and Supermicro. The cause: a cryptographic key underpinning Secure Boot on those models that was compromised in 2022. In a public GitHub repository committed in December of that year, someone working for multiple US-based device manufacturers published what’s known as a platform key, the cryptographic key that forms the root-of-trust anchor between the hardware device and the firmware that runs on it. The repository was located at https://github.com/raywu-aaeon/Ryzen2000_4000.git, and it's not clear when it was taken down.</p>                                                                        
                                                                                
<p>The repository included the private portion of the platform key in encrypted form. The encrypted file, however, was protected by a four-character password, a decision that made it trivial for Binarly, and anyone else with even a passing curiosity, to crack the passcode and retrieve the corresponding plain text. The disclosure of the key went largely unnoticed until January 2023, when Binarly researchers found it while investigating a supply-chain incident. Now that the leak has come to light, security experts say it effectively torpedoes the security assurances offered by Secure Boot.</p>
<p>“It’s a big problem,” said Martin Smolár, a malware analyst specializing in rootkits who reviewed the Binarly research and spoke to me about it. “It’s basically an unlimited Secure Boot bypass for these devices that use this platform key. So until device manufacturers or OEMs provide firmware updates, anyone can basically… execute any malware or untrusted code during system boot. Of course, privileged access is required, but that’s not a problem in many cases.”</p>
<p>Binarly researchers said their scans of firmware images uncovered 215 devices that use the compromised key, which can be identified by the certificate serial number 55:fb:ef:87:81:23:00:84:47:17:0b:b3:cd:87:3a:f4. A table appearing at the end of this article lists each one.</p>
<p>The researchers soon discovered that the compromise of the key was just the beginning of a much bigger supply-chain breakdown that raises serious doubts about the integrity of Secure Boot on more than 300 additional device models from virtually all major device manufacturers. As is the case with the platform key compromised in the 2022 GitHub leak, an additional 21 platform keys contain the strings “DO NOT SHIP” or “DO NOT TRUST.”</p>
<figure><a href="https://cdn.arstechnica.net/wp-content/uploads/2024/07/do-not-trust-certificate.jpg" data-height="1354" data-width="2136" alt="Test certificate provided by AMI."><img alt="Test certificate provided by AMI." src="https://cdn.arstechnica.net/wp-content/uploads/2024/07/do-not-trust-certificate-640x406.jpg" width="640" height="406" srcset="https://cdn.arstechnica.net/wp-content/uploads/2024/07/do-not-trust-certificate-1280x811.jpg 2x"></a><figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2024/07/do-not-trust-certificate.jpg" data-height="1354" data-width="2136">Enlarge</a> <span>/</span> Test certificate provided by AMI.</p><p>Binarly</p></figcaption></figure>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI Announces SearchGPT (278 pts)]]></title>
            <link>https://chatgpt.com/search</link>
            <guid>41071639</guid>
            <pubDate>Thu, 25 Jul 2024 18:15:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chatgpt.com/search">https://chatgpt.com/search</a>, See on <a href="https://news.ycombinator.com/item?id=41071639">Hacker News</a></p>
Couldn't get https://chatgpt.com/search: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[SearchGPT Prototype (113 pts)]]></title>
            <link>https://openai.com/index/searchgpt-prototype/</link>
            <guid>41071585</guid>
            <pubDate>Thu, 25 Jul 2024 18:11:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openai.com/index/searchgpt-prototype/">https://openai.com/index/searchgpt-prototype/</a>, See on <a href="https://news.ycombinator.com/item?id=41071585">Hacker News</a></p>
Couldn't get https://openai.com/index/searchgpt-prototype/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Unfashionably secure: why we use isolated VMs (177 pts)]]></title>
            <link>https://blog.thinkst.com/2024/07/unfashionably-secure-why-we-use-isolated-vms.html</link>
            <guid>41070870</guid>
            <pubDate>Thu, 25 Jul 2024 17:00:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.thinkst.com/2024/07/unfashionably-secure-why-we-use-isolated-vms.html">https://blog.thinkst.com/2024/07/unfashionably-secure-why-we-use-isolated-vms.html</a>, See on <a href="https://news.ycombinator.com/item?id=41070870">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				
<p>Would your rather observe an eclipse through a pair of new Ray-Bans, or a used Shade 12 welding helmet? Undoubtably the Aviators are more fashionable, but the permanent retinal damage sucks. Fetch the trusty welding helmet.</p>



<p>We’ve made a number of security choices when building Canary that have held us in pretty good stead. These choices are interesting in that they don’t involve the purchase of security products, they don’t get lots of discussion in security engineering threads, and they verge on being unfashionable. One major unsexy architectural choice has proved itself: complete customer isolation.</p>



<hr>



<h2>Background</h2>



<p>Fundamentally, Canary relies on two components: the Canary devices (hardware or virtual) that are deployed in customer infrastructure, and the Console (which we run) that these Canaries report into. Very broadly this is identical to most cloud-managed device or appliance products: appliances send telemetry to the cloud. It’s typical for cloud-managed devices to report to a <em>single</em> endpoint (e.g. one HTTPS service), or perhaps a region-specific endpoint.<sup data-fn="925d468e-bde0-4cd8-a7d0-966e252f595e"><a href="#925d468e-bde0-4cd8-a7d0-966e252f595e" id="925d468e-bde0-4cd8-a7d0-966e252f595e-link">1</a></sup> In those products, devices are managed via a website that is multi-tenanted (i.e. the same management site is shared by multiple customers). This comes with multiple operational and cost benefits, and is a natural choice.</p>



<p>Except, we don’t make that choice. Every Canary customer has their own tenant, the Console.</p>



<figure><img fetchpriority="high" decoding="async" width="960" height="436" data-attachment-id="3524" data-permalink="https://blog.thinkst.com/2024/07/unfashionably-secure-why-we-use-isolated-vms.html/image-17" data-orig-file="https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?fit=2392%2C1086&amp;ssl=1" data-orig-size="2392,1086" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?fit=300%2C136&amp;ssl=1" data-large-file="https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?fit=960%2C436&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?resize=960%2C436&amp;ssl=1" alt="" srcset="https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?resize=1024%2C465&amp;ssl=1 1024w, https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?resize=300%2C136&amp;ssl=1 300w, https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?resize=768%2C349&amp;ssl=1 768w, https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?resize=1536%2C697&amp;ssl=1 1536w, https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?resize=2048%2C930&amp;ssl=1 2048w, https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?resize=1200%2C545&amp;ssl=1 1200w, https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png?w=1920&amp;ssl=1 1920w" sizes="(max-width: 960px) 100vw, 960px" data-recalc-dims="1"><figcaption>Each customer gets their own Console</figcaption></figure>



<p>Why? Well, that’s the point of this post.&nbsp;<a href="https://canary.tools/" target="_blank" rel="noreferrer noopener">Canary</a>&nbsp;is assessed by external security testers on a regular basis. It’s always fun watching security testers’ reactions when they’re told that Canary customers aren’t colocated. Faces fall, furious notes are taken, and followup questions come thick and fast to try to figure out new (meaningful) angles of attack.</p>



<p>I used to do the same kind of security consulting, and unauthorized access to other users’ data was an issue we reliably found when testing multi-tenant applications (especially web applications). There are so many avenues to explore. Insecure direct object references (e.g. you can access anyone’s bank statement by iterating through the numeric statement ID parameter in the URL <a href="https://vulnerablebank.com/account/statment?id=4728309">https://vulnerablebank.com/account/statment?id=4728309</a>), Cross-site scripting bugs using in-app messaging between users, server-side bugs which let the attacker gain local access to the server and thereby view all data, query injection bugs (such as SQLi) which let the attacker extract data directly out the DB without further checks, and many more. A root cause for those attacks we found was that unrelated organisations’ data was colocated.</p>



<p>When we designed Canary’s architecture, we explicitly wanted to keep customer data separated by a strong boundary, not just application-level permissions checks. We picked a model that gave us complete isolation between customers: they wouldn’t share services, datastores, and resources like IP addresses.&nbsp;</p>



<p>This came with drawbacks on the operational side (and influenced the product design), but we’ve been extremely happy with the trade. In this post, we’ll explore the model more, and point to clear examples of where it worked for us. Let’s start with a short explanation of what services we actually run.</p>



<h2>Service Requirements</h2>



<p>In delivering Thinkst Canary to our customers, we have several services that must be run. The Console is a website run on a uWSGI and Nginx; there’s honeypot configuration and alert data that must be persistently stored and retrieved quickly; there’s services to communicate with the deployed devices; there are Canarytoken services which serve HTTP and DNS traffic on a separate IP from the management interface; and there’s a separate service to ship alerts via Syslog for customers who opt for it.</p>



<p>All combined, these make up the Thinkst Canary product.</p>



<h2>Our architecture: VM isolation</h2>



<p>All the aforementioned Canary Console services for a single customer are contained within their own AWS EC2 instance. In other words, we run a VM per customer.</p>



<p>In some circles, this approach isn’t considered sexy. There are no containers, no serverless functions, no cloud databases, no hyperscale support, no message buses (well… there are but they exist on the instance only), no load balancers, no k8s clusters. Nothing here will earn us a speaking invite to CNCF events, or an architecture diagram full of AWS service icons, and we happily accept this trade off.</p>



<p>The thing is, cloud architectures can become caricatures of themselves. AWS’ reference design to host WordPress inside AWS looks like this:</p>


<div>
<figure><img decoding="async" src="https://lh7-us.googleusercontent.com/docsz/AD_4nXcPX6K-s_mJ7NbCDInyHF4noJsl8YpxQnKo4TIB3korXNQVzcfObKqbAOElmifvMm7xLPQTMNZ1Xv99Rk137hoQvT26yYPIGbvH06O_PCyLwQT4bBI8KtFufxbIEdwfsqRt-9hnVuFpV7phqGl7J2ImyJPZ?key=P9OtcW-1UE1as9LeMAioIw" alt=""><figcaption>All this, and still no one reads my blog</figcaption></figure></div>


<p>Broadly speaking, the main beneficiaries of Cloud-native architectures are the developers and operators of a service, not their customers. Your customers don’t care whether your database is hosted at RDS, or Aurora, or if it’s MySQL running on a 1U in a colocation data centre, so long as they can access the data reliably, safely, and quickly. Cloud-native tech makes it easier for <em>developers and operators</em> to build such systems, but customers (on average) don’t have requirements for whether Cloud tech is used (or not).</p>


<div>
<figure><img decoding="async" src="https://lh7-us.googleusercontent.com/docsz/AD_4nXd9cFq9TBaLX6p27RTSN7JLXFC6TUeUdk8aLLobLlbs3JEhBv6q-wf3UXhslFIbK_2-gmsQvbfA4xHjt5J1VofPVAWFqxOc59AnXrk_QsKhN877pQT63WOM7e-10XbR0epgsOP0WJgQy0mdrNWI1jjgdzrb?key=P9OtcW-1UE1as9LeMAioIw" alt=""><figcaption>This is what Customers care about: can I login and see my data?</figcaption></figure></div>


<p>Choosing Cloud-native technologies and approaches comes with its own baggage. For us, the primary issue is that the security boundary that separates customers from each other becomes an application issue, and that is too risky. As a security vendor, a breach of customer data is a nightmare scenario for us.</p>



<p>Consider, for example, a standard deployment model where customer data all resides in a single database or small number of databases (could be relational DB, or a document database, or similar). The boundaries between that data would either be enforced by the database through different users and roles, or (more typically) through the querying application applying authorisation checks after data has been retrieved from the database or as part of the query supplied by the application to the database. If the application is responsible for maintaining the boundary, then any vulnerability which allows an attacker to bypass the authorisation check would violate the boundary. Every query, every data retrieval is a potential source of vulnerabilities, and must be carefully guarded. No mistakes. This is true whenever either the data is colocated, or users rely on the same endpoints and web addresses to access data. It’s frighteningly common for these issues to occur.</p>



<p>Reworking our web backend to rely on Lambdas would be a terrible approach for several reasons, and also ignores the interrelationship between the other services (such as device communications). Likewise, AWS IoT is a non-starter for managing our devices; we operate in networks where outbound MQTT and HTTPS is simply not allowed (which is why we rely on encrypted DNS traffic for device-to-Console communication). In other words, piecing together the same service from the Lego blocks of AWS services would result in a more cumbersome and less Customer-focused product. Instead, if we take on the responsibility of building those blocks ourselves, we can run a service that fits together beautifully, like an intricate custom puzzle.</p>



<p>The isolated VM approach has drawbacks, which we’ll touch on shortly, but it has more benefits.</p>



<hr>



<h2>Benefits</h2>



<h3>Outsourcing the hardest problem</h3>



<p>In going with this battle-tested approach, we’re cleanly relying on the AWS hypervisor to maintain a silicone-assisted security boundary. Arguably entire AWS’ computing business rests on the strength of their hypervisor.<sup data-fn="09dbe066-795f-4fb4-a3f2-ccd1ed46d6a7"><a href="#09dbe066-795f-4fb4-a3f2-ccd1ed46d6a7" id="09dbe066-795f-4fb4-a3f2-ccd1ed46d6a7-link">2</a></sup> Bugs in their hypervisor that yield cross-customer access are an existential threat to AWS, and they have a deeply vested interest in maintaining that boundary. They have proved themselves to be excellent in running and maintaining this hypervisor over a long period of time.<sup data-fn="b897f452-af23-49f8-b39d-ec385abe571c"><a href="#b897f452-af23-49f8-b39d-ec385abe571c" id="b897f452-af23-49f8-b39d-ec385abe571c-link">3</a></sup> And, in the extreme event that a 0day hypervisor bug is used to attack a Canary customer, even then a) an attacker would need to first need to colocate their attack VM on the same physical host as our customer’s VM, and b) only one customer would be affected; the splash zone is naturally limited.</p>



<h3>Performance and monitoring</h3>



<p>Running all services related to a single customer on the same instance makes certain kinds of monitoring and investigating much simpler. We don’t need to collect performance data from multiple systems to understand what one customer is experiencing; it’s already all in the one place. We run a custom DNS server, and at times debugging involves packet captures to understand issues; it’s extremely helpful knowing that traffic at the Console is related to the customer issue being investigated.</p>



<p>The inverse is also true. Isolating a customer’s services to a VM means any spike in usage or service degradation is constrained to just that Console. Faults occur; we see EC2 hardware issues on a regular basis and when those occur it’s a single Console affected (and automatically restored), not an entire service for all customers. In a hypothetical scenario where all our services run in, say, a Kubernetes cluster, all our eggs are in the k8s basket. A k8s failure takes out all customers<sup data-fn="ae9da95a-5552-4545-af01-59f9bf948b5c"><a href="#ae9da95a-5552-4545-af01-59f9bf948b5c" id="ae9da95a-5552-4545-af01-59f9bf948b5c-link">4</a></sup>; in the VM model, you have to reach “AWS in several regions fails simultaneously” to find the single-point of failure.</p>



<p>Isolated VMs are just a step away from the original horizontal scaling (i.e. more physical servers). Our scaling model when adding more customers is to duplicate the infrastructure for them, not to squeeze them in alongside everyone else. That means we don’t focus on hyper optimising a handful of services that all customers wind up using. Our Consoles have small compute needs and in most cases run “small” EC2 instances. Mean load is usually something like 0.04, and the 99th percentile load is 0.5.&nbsp;</p>



<h3>Regulatory compliance</h3>



<p>Per-customer VMs means we can easily meet regulatory burdens; some customers need to keep their data in one geographic region for compliance reasons. It’s trivial for us to handle these requests and currently can add entire new regions in the space of hours to our supported list. If, instead, we relied on shared infrastructure, then new regions would be big and expensive additions.</p>



<h3>Staged rollouts</h3>



<p>This approach also means we can rollout code and features to subsets of customers trivially before making them generally available. New code is deployed in a staggered manner across the fleet and, as a side-effect, rollouts will be paused if we see errors before code makes it to all customers.</p>



<h3>Operational security</h3>



<p>We can also implement IP-filtering at the security group level for customers, should they require it. This level of isolation is simply not possible on shared infrastructure.</p>



<p>In building the application our user model is simplified because we don’t need to take into account an organisation boundary between data sets. We have users of different permission levels, but they all belong to the same organisation. This makes authorisation code easier to reason about, and helps speed up development.&nbsp;</p>



<hr>



<h2>False Benefits</h2>



<p>One supposed argument in favour of the VM model is that it decreases your dependency on any single cloud provider, and makes it easier to switch because theoretically you can simply run your VM elsewhere. While it’s true that we’re not fully dependent on AWS for the compute environment (because we supply our own VM), we’re still reliant on other AWS services, especially around monitoring, orchestration, and network services. Switching to another provider would be non-trivial, and I don’t see the VM as a real benefit in this regard. The barrier to switching is still incredibly high.</p>



<hr>



<h2>Drawbacks</h2>



<p>The flipside of the coin is that we incur a greater operational cost in terms of both effort and spend. Maintaining thousands of instances requires us to be proficient in configuration management. We need to think both in terms of configuration at scale (managing thousands of instances), and very local issues (a recent example is Ubuntu changing the behaviour of /tmp permissions, necessitating customisations to /etc/sysctl.conf. In a container world, someone else would have likely handled that.) Our Linux sysadmin skills have stood us in good stead; without decent sysadmin skills this path would have been a tricky one to pursue.</p>



<p>I’ve not even touched on the impact on <em>product design</em> that isolated VMs brings, but suffice it to say it’s deeply built into Canary; when we ship devices (hardware or otherwise), they need a path to discover their Console, which is a whole separate topic.</p>



<h3>Custom monitoring</h3>



<p>While AWS provides instance checks to track instance health, we’ve had to build all sorts of monitoring, because the built-in AWS monitoring tools weren’t sufficient for what we needed. Consider that we have thousands of instances (and IPs), with corresponding DNS entries and multiple services (speaking both DNS and HTTP). We want to know within minutes if any of them become unresponsive, and we had to build that tooling ourselves. In addition, on-instance monitoring is also performed to understand whether we’re approaching a failure mode on a Console.</p>



<h3>Hardware reliance and limitations</h3>



<p>I mentioned above that hardware fault isolation is a benefit, since it only affects that one Console on the broken hardware. The consequence of this is that one customer is offline until our tooling automatically restarts the VM. This typically happens within minutes of the failure.</p>



<p>While we’ve not come close to approaching any real instance size limit, there’s a theoretical limit in having a single instance per customer: it’s the largest available EC2 instance. But it’s not a concern for us; we’re not yet at the halfway point in the EC2 instance size progression even for our most demanding customers (and instance sizes double on each step).</p>



<h3>Slower rollouts</h3>



<p>Rolling out code across thousands of instances usually takes a couple of hours because we perform the rollout in increasingly larger sets. If we simply ran a handful of massive servers or clusters, code rollout would likely be faster.</p>



<h3>Cost</h3>



<p>Lastly, this approach is almost certainly more expensive. Our instances sit idle for the most part and we pay EC2 a pretty penny for the privilege. This is likely the biggest drawback for most organisations considering this approach. (It’s worth noting that we bootstrapped Thinkst and never took external funding. While this approach <em>is</em> more costly than the traditional model, it’s certainly not prohibitive because the cost scales linearly as you gain customers. If you’re in the red and are hoping to improve operating margins by cramming more customers onto the same compute, this approach isn’t for you. It won’t work with negative profit margins, as every new customer scales the cost linearly.)</p>



<p>With all these drawbacks, the benefits still far outweigh them in our view. We can point to concrete moments when the isolated VM model has proved its mettle.</p>



<hr>



<h2>Case Studies</h2>



<h3>Case Study 1: Debug console</h3>



<p>In <a href="https://blog.thinkst.com/2018/12/making-nginx-slightly-less-surprising.html">our early days</a> we had an incident on a Console, in which a developer left a debugger exposed to the Web. If customer data had been present on that Console, then we’d have had to roll external incident response along with publishing breach announcements. Instead, the isolated VM (which was the developer’s VM) meant there was no customer data on that VM at all. After detecting the incident we simply burned that infrastructure to the ground, and built in controls to ensure the same bug could never leave us open again.</p>



<h3>Case Study 2: Web application bugs</h3>



<p>Through the years of security assessments we’ve undergone, the assessors have found several common bug classes. But they’ve never discovered access to another customer’s data. We prefer crystal box testing and hand over source code during tests; even after extremely clever exploits with full source code access, it’s impossible to read data that simply isn’t there.</p>



<h3>Case Study 3: osslsigncode</h3>



<p>Earlier this year <a href="https://blog.thinkst.com/2024/07/unobtrusively-upgrading-ubuntu-underfoot.html">we found out</a> that, despite paying for security patches in Ubuntu, we still had a vulnerable version of a package called osslsigncode installed due to Canonical refusing to upgrade the package in contravention of their advertising copy. The situation is now resolved, but while this vulnerable version was present we had to conduct a risk assessment to determine whether we shipped our own version of the package or resolved the underlying issue by upgrading to an Ubuntu version where the fix was already provided.</p>



<p>If we relied on shared infrastructure, we’d have to scramble to resolve the situation because of the risk that one customer exploits the vulnerability and gains access to the host that also handles another customer’s data.</p>



<p>However, because of the isolated VM model, the risk assessment had a different outcome. We reasoned that an attacker needed to be authenticated; that we don’t have open registration; that the attacker would need to craft a custom exploit (no public exploit was or is available for this issue); and if exploited they’d see only their own instance and their own data. The upside for the attacker would be: they can access their own data. This heavily discounts the value of the attack, and so the isolated VM gave us breathing room to resolve the issue in a deeper way.</p>



<hr>



<h2>Should you default to isolated VMs?</h2>



<p>The obvious answer is… there is no obvious answer. We’ve thought about the tradeoffs, and for our risk profile the AWS hypervisor is the boundary we’re most happy with. Our Customers are more interested in having their data remain their own, than whether we’re running Canary with various pieces of Cloud tech. Returning to our opening question, we pick the unfashionable welding helmet over the Aviators for eclipse viewing, every time.</p>



<p>We know this introduces a cost, product-wise, operationally, and in terms of compute expense. We’re happy to eat this because it lets us sleep better at night.</p>



<p>The tradeoff depends on whether you can afford the large slack in paying for mostly idle systems, have the sysadmin capacity to run thousands of instances, and are willing to reimplement tools specifically for your own infrastructure. The upside is a security boundary that is very, very hard. We’re happy on this path.</p>


<ol><li id="925d468e-bde0-4cd8-a7d0-966e252f595e">A cluster might service the endpoints, but embedded in the appliance or device is a single or limited set or URLs. <a href="#925d468e-bde0-4cd8-a7d0-966e252f595e-link" aria-label="Jump to footnote reference 1">↩︎</a></li><li id="09dbe066-795f-4fb4-a3f2-ccd1ed46d6a7">Even services which abstract away the idea of EC2 instances, like Lambdas, still run on VMs underneath and rely on the hypervisor. <a href="#09dbe066-795f-4fb4-a3f2-ccd1ed46d6a7-link" aria-label="Jump to footnote reference 2">↩︎</a></li><li id="b897f452-af23-49f8-b39d-ec385abe571c">When hypervisor bugs are published, AWS usually is given advanced notice in order to remediate the issue across all of AWS. <a href="#b897f452-af23-49f8-b39d-ec385abe571c-link" aria-label="Jump to footnote reference 3">↩︎</a></li><li id="ae9da95a-5552-4545-af01-59f9bf948b5c">Perhaps it’s a mistyped administration command, or a configuration error, or an upgrade that didn’t go according to plan. A Kubernetes failure would affect all Customers at once. <a href="#ae9da95a-5552-4545-af01-59f9bf948b5c-link" aria-label="Jump to footnote reference 4">↩︎</a></li></ol>
				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Wat – Deep inspection of Python objects (144 pts)]]></title>
            <link>https://github.com/igrek51/wat</link>
            <guid>41070428</guid>
            <pubDate>Thu, 25 Jul 2024 16:18:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/igrek51/wat">https://github.com/igrek51/wat</a>, See on <a href="https://news.ycombinator.com/item?id=41070428">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">🙀 WAT Inspector</h2><a id="user-content--wat-inspector" aria-label="Permalink: 🙀 WAT Inspector" href="#-wat-inspector"></a></p>

<p dir="auto">Deep inspection of Python objects.</p>
<p dir="auto"><strong>WAT</strong> is a powerful inspection tool
that allows you to delve into and examine unknown objects at runtime.</p>
<blockquote>
<p dir="auto">"Wat" is a variant of the English word "what" that is often used to express confusion or disgust</p>
</blockquote>
<p dir="auto">If you find yourself deep within the Python console, feeling dazed and confused,
wondering "WAT? What's that thing?",
that's where the <code>wat</code> inspector comes in handy.</p>
<p dir="auto">Start the Python Interpreter (or attach to one) and execute <code>wat / object</code> on any <code>object</code>
to investigate its
<strong>type</strong>, <strong>formatted value</strong>, <strong>variables</strong>, <strong>methods</strong>, <strong>parent types</strong>, <strong>signature</strong>,
<strong>documentation</strong>, and even its <strong>source code</strong>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/igrek51/wat/blob/master/docs/img/wat-datetime.png?raw=true"><img src="https://github.com/igrek51/wat/raw/master/docs/img/wat-datetime.png?raw=true" alt=""></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description wat-demo.mp4">wat-demo.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/12595017/330394505-3585123a-c1c4-4ca3-85cd-f52e82e9c744.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjE5NDY5MDMsIm5iZiI6MTcyMTk0NjYwMywicGF0aCI6Ii8xMjU5NTAxNy8zMzAzOTQ1MDUtMzU4NTEyM2EtYzFjNC00Y2EzLTg1Y2QtZjUyZTgyZTljNzQ0Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA3MjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzI1VDIyMzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTM2NDczOTc1ZWZmYjkyNmQ4MDIwOTAwNTViZDQ5NWM3MDRlOGQ2OWZmYjZhYzE1YTFjMzk0MGI0MGNjYzI0MDEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.BBTeq2SmNsszkGNA9PgUCqX-oqZwxgBygfd8kJaXemE" data-canonical-src="https://private-user-images.githubusercontent.com/12595017/330394505-3585123a-c1c4-4ca3-85cd-f52e82e9c744.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjE5NDY5MDMsIm5iZiI6MTcyMTk0NjYwMywicGF0aCI6Ii8xMjU5NTAxNy8zMzAzOTQ1MDUtMzU4NTEyM2EtYzFjNC00Y2EzLTg1Y2QtZjUyZTgyZTljNzQ0Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA3MjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzI1VDIyMzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTM2NDczOTc1ZWZmYjkyNmQ4MDIwOTAwNTViZDQ5NWM3MDRlOGQ2OWZmYjZhYzE1YTFjMzk0MGI0MGNjYzI0MDEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.BBTeq2SmNsszkGNA9PgUCqX-oqZwxgBygfd8kJaXemE" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">Import</h2><a id="user-content-import" aria-label="Permalink: Import" href="#import"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Insta-Load</h3><a id="user-content-insta-load" aria-label="Permalink: Insta-Load" href="#insta-load"></a></p>
<p dir="auto">If you want to debug something quickly,
you <strong>don't even need to install anything</strong> to use the inspector.</p>
<p dir="auto">Load it on the fly by pasting this snippet to your Python interpreter:</p>
<div dir="auto" data-snippet-clipboard-copy-content="import base64, zlib
code = 'eJzNWumO20YS/u+naEx+iLJpxRPvASiRd5144hhwkoUz2cCYGRCUSM0wpkiBpGxPtALyEPsM+2D7JFtHH9U8JM1sAsSAR1J31dddR1dXV/eyKlcqiZt4kcd1ndYqW63LqnFND3RDVtTrdNGouFZ1k0T6p+ktLV2Vmm/1bf1gifDN7Torrg3y8+I2VC+yRROq11kNf79fN1lZxHmozm/XaaheNWkVz3P49mMBHQ/+7uZCf9UrHvurslhm19MHCv7VNwA9VfOyzOl3simStBINRZmUi1o05GVxLX4uyiTVP4fGe940VTbfNCkPWcQr4Kibin69j/MN/ATh6CeIDL9QHkaP8xxF2jfDdZW9jxtJUmfXRdxsKmgzOrqA8a6Yv1y0m5N0acwUEE05/5mmFNKvh2FbVWqmvo7zOg07M/J7pPL8HqdFv92p028HPbSbx6zOk5MT+jz7GK+yIlXNTYrzB1lG4JTFsqxWMQobqnqzuEE3zJqa9Bwq7mzShM0QwkeVob7rUK3S5qZM6tAobbNKi4aQVFmputxUi5SmOyGK6Tqu4hVrjodXTWm0Kim0Gj/cAH5aIREYsGi4XZWbZr1p1IcMBofP2LhOrYIizYjDzhHUW5lpjuUQrNzOCEVZPI7n8yp9n8VW5lrFReLLJ6GMbTtg3CEmKLnYil0RndJUuVSxWm6KBduGxUDN8gISYMaJBNxNBgi+TcCUFo5l0oFJQpEXCZysWOQbgIJ26SqeX9HUA23IiGl4leiVErLpZvQ31IqZaf3ArAA8JJPM8I9tYbFm/BGSUmasGSKgEcZjuTa9wf9YS3SsHj/DkDbVFBhgodcLuMGwmjrasOoSimEX5wUypS2AohcMc8GRDX5F5NPQpHXFvwNQFnNX6VrTUAQGQmxx/dlSkKjZDImoF63i90TQla2jRZmXVWCH1kHJzXQSr9dpkQTL0faH87evz6Iv37x6+c159OXrH892PJPtm7Mfzs53amtRdiOeTgrKvRMgmmAY7kgQlNOhyP7d1ulgpyk0Ng6GQVXoHn8G9Ac1KM23d3jaAj0hsMWMAwsZ1nwthuEWIqo9S2rSOynQ8NjxdYMZHmCzGtZjExcLkitUQU7ZSEKZCUw3VPPbBncQ/IirKoa0pdmsMS+pUyCB1OaXtKCvVVxcp+O7+UyeFm52vptDF6tazNZkENThBsIkBHR4nTYYwVmQURRhcxSN4Pt/f/2P8BqbUaDegSkysJHtCZA3VNYAx3qszVWcyU2TEQNighkXvvJkKUKcV5vUSopUGPeLstERaMLhhHeDfj0w32RRbiDIjy6L0RjX9hNHsEeMl2+ev93BNrEFBPr0FkR3/Qqo9GODUBcdLFA9oIGTjATglbMmy0X7BEoViJR6ktW05dl45YksZNbbsNYo/4oQMvCMB8Nx31HK8Gzq9nlj1ctiy63CNYWheOOy44i0B0IwdKVJEGWQ3keuh92A+cehepfezvJ4NU9i4p7S3wn6ZMcdtfIjWNiJhqyjOqXUIXADWHA7YTiYTEDhAAO6BsLbYDxV6hMFk89+KSETydU8ruxwMF/ISOM8+pAlzQ1IUtYT1Lhtr7Nf0mAM1sw3q6JuTxPMmlZN8CRUWsOgWvUIVua/fx2ph230R4oUPbT27gzRgJZgyrgkJj+XWQFRDpJrzLLoS1aYVBX0wi01GfS7skg9C/cpTaiIRvH2UmwzuzVEgYKIKA/qcwFOgrSppn7GQVmJORVetE9jVzwNcBz0siQTaQCKCe0oJXa7+eqsbobNIFVcNTWm6gGETogcuCKxAxQumr1Yo7NmP0zp7MxbZtDVZMUmtY36mNc3th4aERnKMtl0CP3OKs5lRbRu3AxtVAcWGz04r7nTVgCgIY89lntQRAGRXMRp1I/t+hxG0V1rB78fhLnN0jzpHLgDT6UYDGY4Na+VRpzxuF4HJhQzSl9YEr/XTGZmZ+X3+/mt16UtOdOffqdV4sx+awGXixluEbaRzwhDFtbrA8SmjJeWBLSwszXVrfM6vdq8lMB6R/pxka4b9WVcp2f0Fc9ccJZOO/ypm85AkjDlLMlMjqbkFSR6JhdJt8OkXG58Dt4lmnrCwT9REWdVVVZcJqKv4wHgkwDSnvGJjfcDm+tULMp0mX1ETq74nOi0vctcVhABIU6aM+ogUFzfFguFOhwEO4ixl5uP2vfjnW+yHKQ4lvkmrvvSy4OsMmtyFCdyU3CJB2YcW6ba+cnIyzdnZ9/ttjjqzuZZ1OSsbo8xzm1bGdHxTqqnJlUGeAznNhfjmd//0HbLEAJYYioa7Kj9a2w5WsZZniZYw4ARZGFlqrYUs9LxDr6mUi6dO+uI4I73Q7JxaG5Jo0G8rBu2fgzGnWnaCM1ImGjTRh9YbppEmw3oevxAd0aUKqYFpQzFdQDEOgCKdC4yNbKAc8H2vrAvX7BVDAqhEVcJzDmLBtfBlRLMof2KnQMM0QIg2xAnfhv7Hq3803b09uz16+9/2m1tKmu8WHdoW+MQOxhja2dsrC5Vopd9v0J8yXXmRsO681nXCWG+bmoUOkeGn9qx1CyzH9N44LjVwXeLVcnj0ie6G49fdhUbkO7Raw/sFI4n/jkMGiz2ZSHOYsOe2Qes7dDjPa7u31mKez1QcO9fRZZZ+lh79ViisTfR7hQzCkxThWVcMFjHX0RRRC8JBO3q6MSLw6Otrk9p7dqdl/PWobhiY/+3z1+efXf+fIdUnoEkBBYJhiG8rQJJB3Go1HkQ6M3Zix1RtnG6GgpAmXDSz8u4GfeoygAj4tYvuQ1jYhWqi2Xsir3SuMauM/54dNpX5DIhLqv3IGPvEcj9boBFPu3SO+sJ0h/FvOHrVN8CCp/0/RHPo3VviThz+ysebrEJD8LcLI9+obF7gSqdwMFzVcuDK5D0LkxiZTh3ZDqwjrsMJIAosYhp77Z6aIz+LuCHrqzC0rvz2gqy8IgRMIvCthOQOeCmx6du2FWWJJCtE0Dn7F+PBz3U7FNbV+yRUFT8EbNo7WK73TGxtT3UrpW4df0wr/U1wb08Bf3AugBC/UbWbPmceoSy/bHseHEvM17d3YoXV702tPcGEd+E+yZblckmx8MaUUyiiBuiyOhNE+jNAwuhhoVOjsBBZ7VI8lIZjw43j8Hcjbl+3+eBZng+0/g+PMTDw+0mg8w2V/cuNdq6sCUtl6uLwxZR03FrVZX+aQudGo33MVRzOMnzhQ0InBabFUA2Wu0TzTr2EyjcFpC5J2XDf52KleYRI9X6avxIZi7qeG5hwfyEpX0H5M5s1m+0TfBugxdDv565hKDRW9kSFiJdFcUiL7OqbmiNhAoUX6U1LlAkngB8k9FRnZJdYyokEVax/MAmfjziWxgbD9IicL1j9UydPnlyEOViClRXHpbxTjkSOWDn0NBXFtfRslNNPaoG6xx2vZnn2YJHwaiLX8g/6Qv4pLgDkOcRUwY1BU/O0qnKxoFbExyNLFH1C5mNU8CxAN4MWDQ4g/aze6JL2Uy9zBdkGMeTdBhIyzOI48m7Zz48bf3g5CjJ9ki1F6Yt2LBQ+2DacvWg4C2xsBYw+1K65cWxSNegXIPNZPUF+T+IXXjI1DvamCDcUhgOPu0LfYM1DXs5Jc/XUhRcH0Oy9MrTM609jEOlBXf5Lr0X9erb/e6KNev+WM2K8X8L1UpxSLdD8hxW7mHOg9r1Lo74BZdw9jsr90X7Mdd+3YqA8huoVoYnIcndFXuYcVivXL7/KW7so0K9i1HGxCdhrLam+pXhpnhXlB8Knc/U9GDPPOFbYypVVrV5QUa7KiTNWRNFQZ3my1A9fPjuQ1xd1/JWHjomEb1Tw3DG/YKfXt4wv59+CGZ8qhbdpLmpsOI/k/eMBBY+qhmCMvRfgDKUUwIL+kygiNEIqXOru0QFnFe3ys+CPwDupxrPvPmAATpEE8iWs2WWglu0yd3LSvCYFqdHOWm9X/rWQBqkmAubXjmCXyN0p2Z6xSzoIaJ8pOkeZ6Iri8eZPgZW7ATMnd9n+mjs+B28vieaPiNeGHTY7vRK08fj9zZt/Rz/UNNHg53aM3j/W82vsKHrPHkJO329z7+CcY87+VQM4gitdSdDw17n5VyMO4is6XqhYdl49yQ6Th58TCGW3sCDCvzH71ldm87540UT0XMCDlAlPpF1pyi/DGveihMRBjMZuwQqXQC7mIcBTZeTTfxzI9CT/YsRBB04oeFwV/7VARJ7khbpBxct5QTAq9e3QnU+8WSzTvCgq+Nv3w2BEY8mjHN13PJpF8xKC9EHAoIENsofvpUwY0ZYhEgidryIY1kwljptqk2aZO+tWoWlpvYGktQhjEpEY/WJ+lQgxUlyT5RHAiWvb7Jlcy8gQPriC7nF/V9Qz54JqLK6L8y/pGz3l0ug6BcVFooepR3yefQ53Cln2pO6S8yEBXzJCdnPdkTbFtY36tGuu1YwOmn+C02K5U688vCdmp+GztQIN6nRASCiOYDD+9AhJE11AAt3pUNIRHMAh3eqQ0ia6gAWBLlDQEhyUNu45Ef3jg5dRL3HHAWpaXsxOyErzupU2coPPVRop49aAw+cC5uSWmtj6qmnaYgqndSbeVCNLj+ezi8vLpNHwefwZ/y3Ffo4/Oc9jFB79cJopS4VB0bDoQqYIhyHarsb661iWfGTaPneYbGpsDxIXZrMe/CBuUyEi48ecgef8XPQebx4hzs/7n6QfxF3uyjKo4k3k92SqJkQfU6WEcI+OB6ie5FlgFgP3Tst8682L8BCAaCVhM9Fc6GBJM2FgNpypTRK27PaVjFe+rua5Y+kfi3w76p/SirVbHT55OnTiyer0QN5CqIrIew4tR0vXn1rWz+zrW/OXtjWJ58/PW3heP2nsp8SeMn6WZvVpziVFJwhS+6nbe4WyalHgm+cBfOf2swewakk0M8JJPefbedXb597Iv3F9vz0zatzb8i/CkU8f+sUSz3/A3vsqZs='
exec(zlib.decompress(base64.b64decode(code.encode())).decode(), globals())"><pre><span>import</span> <span>base64</span>, <span>zlib</span>
<span>code</span> <span>=</span> <span>'eJzNWumO20YS/u+naEx+iLJpxRPvASiRd5144hhwkoUz2cCYGRCUSM0wpkiBpGxPtALyEPsM+2D7JFtHH9U8JM1sAsSAR1J31dddR1dXV/eyKlcqiZt4kcd1ndYqW63LqnFND3RDVtTrdNGouFZ1k0T6p+ktLV2Vmm/1bf1gifDN7Torrg3y8+I2VC+yRROq11kNf79fN1lZxHmozm/XaaheNWkVz3P49mMBHQ/+7uZCf9UrHvurslhm19MHCv7VNwA9VfOyzOl3simStBINRZmUi1o05GVxLX4uyiTVP4fGe940VTbfNCkPWcQr4Kibin69j/MN/ATh6CeIDL9QHkaP8xxF2jfDdZW9jxtJUmfXRdxsKmgzOrqA8a6Yv1y0m5N0acwUEE05/5mmFNKvh2FbVWqmvo7zOg07M/J7pPL8HqdFv92p028HPbSbx6zOk5MT+jz7GK+yIlXNTYrzB1lG4JTFsqxWMQobqnqzuEE3zJqa9Bwq7mzShM0QwkeVob7rUK3S5qZM6tAobbNKi4aQVFmputxUi5SmOyGK6Tqu4hVrjodXTWm0Kim0Gj/cAH5aIREYsGi4XZWbZr1p1IcMBofP2LhOrYIizYjDzhHUW5lpjuUQrNzOCEVZPI7n8yp9n8VW5lrFReLLJ6GMbTtg3CEmKLnYil0RndJUuVSxWm6KBduGxUDN8gISYMaJBNxNBgi+TcCUFo5l0oFJQpEXCZysWOQbgIJ26SqeX9HUA23IiGl4leiVErLpZvQ31IqZaf3ArAA8JJPM8I9tYbFm/BGSUmasGSKgEcZjuTa9wf9YS3SsHj/DkDbVFBhgodcLuMGwmjrasOoSimEX5wUypS2AohcMc8GRDX5F5NPQpHXFvwNQFnNX6VrTUAQGQmxx/dlSkKjZDImoF63i90TQla2jRZmXVWCH1kHJzXQSr9dpkQTL0faH87evz6Iv37x6+c159OXrH892PJPtm7Mfzs53amtRdiOeTgrKvRMgmmAY7kgQlNOhyP7d1ulgpyk0Ng6GQVXoHn8G9Ac1KM23d3jaAj0hsMWMAwsZ1nwthuEWIqo9S2rSOynQ8NjxdYMZHmCzGtZjExcLkitUQU7ZSEKZCUw3VPPbBncQ/IirKoa0pdmsMS+pUyCB1OaXtKCvVVxcp+O7+UyeFm52vptDF6tazNZkENThBsIkBHR4nTYYwVmQURRhcxSN4Pt/f/2P8BqbUaDegSkysJHtCZA3VNYAx3qszVWcyU2TEQNighkXvvJkKUKcV5vUSopUGPeLstERaMLhhHeDfj0w32RRbiDIjy6L0RjX9hNHsEeMl2+ev93BNrEFBPr0FkR3/Qqo9GODUBcdLFA9oIGTjATglbMmy0X7BEoViJR6ktW05dl45YksZNbbsNYo/4oQMvCMB8Nx31HK8Gzq9nlj1ctiy63CNYWheOOy44i0B0IwdKVJEGWQ3keuh92A+cehepfezvJ4NU9i4p7S3wn6ZMcdtfIjWNiJhqyjOqXUIXADWHA7YTiYTEDhAAO6BsLbYDxV6hMFk89+KSETydU8ruxwMF/ISOM8+pAlzQ1IUtYT1Lhtr7Nf0mAM1sw3q6JuTxPMmlZN8CRUWsOgWvUIVua/fx2ph230R4oUPbT27gzRgJZgyrgkJj+XWQFRDpJrzLLoS1aYVBX0wi01GfS7skg9C/cpTaiIRvH2UmwzuzVEgYKIKA/qcwFOgrSppn7GQVmJORVetE9jVzwNcBz0siQTaQCKCe0oJXa7+eqsbobNIFVcNTWm6gGETogcuCKxAxQumr1Yo7NmP0zp7MxbZtDVZMUmtY36mNc3th4aERnKMtl0CP3OKs5lRbRu3AxtVAcWGz04r7nTVgCgIY89lntQRAGRXMRp1I/t+hxG0V1rB78fhLnN0jzpHLgDT6UYDGY4Na+VRpzxuF4HJhQzSl9YEr/XTGZmZ+X3+/mt16UtOdOffqdV4sx+awGXixluEbaRzwhDFtbrA8SmjJeWBLSwszXVrfM6vdq8lMB6R/pxka4b9WVcp2f0Fc9ccJZOO/ypm85AkjDlLMlMjqbkFSR6JhdJt8OkXG58Dt4lmnrCwT9REWdVVVZcJqKv4wHgkwDSnvGJjfcDm+tULMp0mX1ETq74nOi0vctcVhABIU6aM+ogUFzfFguFOhwEO4ixl5uP2vfjnW+yHKQ4lvkmrvvSy4OsMmtyFCdyU3CJB2YcW6ba+cnIyzdnZ9/ttjjqzuZZ1OSsbo8xzm1bGdHxTqqnJlUGeAznNhfjmd//0HbLEAJYYioa7Kj9a2w5WsZZniZYw4ARZGFlqrYUs9LxDr6mUi6dO+uI4I73Q7JxaG5Jo0G8rBu2fgzGnWnaCM1ImGjTRh9YbppEmw3oevxAd0aUKqYFpQzFdQDEOgCKdC4yNbKAc8H2vrAvX7BVDAqhEVcJzDmLBtfBlRLMof2KnQMM0QIg2xAnfhv7Hq3803b09uz16+9/2m1tKmu8WHdoW+MQOxhja2dsrC5Vopd9v0J8yXXmRsO681nXCWG+bmoUOkeGn9qx1CyzH9N44LjVwXeLVcnj0ie6G49fdhUbkO7Raw/sFI4n/jkMGiz2ZSHOYsOe2Qes7dDjPa7u31mKez1QcO9fRZZZ+lh79ViisTfR7hQzCkxThWVcMFjHX0RRRC8JBO3q6MSLw6Otrk9p7dqdl/PWobhiY/+3z1+efXf+fIdUnoEkBBYJhiG8rQJJB3Go1HkQ6M3Zix1RtnG6GgpAmXDSz8u4GfeoygAj4tYvuQ1jYhWqi2Xsir3SuMauM/54dNpX5DIhLqv3IGPvEcj9boBFPu3SO+sJ0h/FvOHrVN8CCp/0/RHPo3VviThz+ysebrEJD8LcLI9+obF7gSqdwMFzVcuDK5D0LkxiZTh3ZDqwjrsMJIAosYhp77Z6aIz+LuCHrqzC0rvz2gqy8IgRMIvCthOQOeCmx6du2FWWJJCtE0Dn7F+PBz3U7FNbV+yRUFT8EbNo7WK73TGxtT3UrpW4df0wr/U1wb08Bf3AugBC/UbWbPmceoSy/bHseHEvM17d3YoXV702tPcGEd+E+yZblckmx8MaUUyiiBuiyOhNE+jNAwuhhoVOjsBBZ7VI8lIZjw43j8Hcjbl+3+eBZng+0/g+PMTDw+0mg8w2V/cuNdq6sCUtl6uLwxZR03FrVZX+aQudGo33MVRzOMnzhQ0InBabFUA2Wu0TzTr2EyjcFpC5J2XDf52KleYRI9X6avxIZi7qeG5hwfyEpX0H5M5s1m+0TfBugxdDv565hKDRW9kSFiJdFcUiL7OqbmiNhAoUX6U1LlAkngB8k9FRnZJdYyokEVax/MAmfjziWxgbD9IicL1j9UydPnlyEOViClRXHpbxTjkSOWDn0NBXFtfRslNNPaoG6xx2vZnn2YJHwaiLX8g/6Qv4pLgDkOcRUwY1BU/O0qnKxoFbExyNLFH1C5mNU8CxAN4MWDQ4g/aze6JL2Uy9zBdkGMeTdBhIyzOI48m7Zz48bf3g5CjJ9ki1F6Yt2LBQ+2DacvWg4C2xsBYw+1K65cWxSNegXIPNZPUF+T+IXXjI1DvamCDcUhgOPu0LfYM1DXs5Jc/XUhRcH0Oy9MrTM609jEOlBXf5Lr0X9erb/e6KNev+WM2K8X8L1UpxSLdD8hxW7mHOg9r1Lo74BZdw9jsr90X7Mdd+3YqA8huoVoYnIcndFXuYcVivXL7/KW7so0K9i1HGxCdhrLam+pXhpnhXlB8Knc/U9GDPPOFbYypVVrV5QUa7KiTNWRNFQZ3my1A9fPjuQ1xd1/JWHjomEb1Tw3DG/YKfXt4wv59+CGZ8qhbdpLmpsOI/k/eMBBY+qhmCMvRfgDKUUwIL+kygiNEIqXOru0QFnFe3ys+CPwDupxrPvPmAATpEE8iWs2WWglu0yd3LSvCYFqdHOWm9X/rWQBqkmAubXjmCXyN0p2Z6xSzoIaJ8pOkeZ6Iri8eZPgZW7ATMnd9n+mjs+B28vieaPiNeGHTY7vRK08fj9zZt/Rz/UNNHg53aM3j/W82vsKHrPHkJO329z7+CcY87+VQM4gitdSdDw17n5VyMO4is6XqhYdl49yQ6Th58TCGW3sCDCvzH71ldm87540UT0XMCDlAlPpF1pyi/DGveihMRBjMZuwQqXQC7mIcBTZeTTfxzI9CT/YsRBB04oeFwV/7VARJ7khbpBxct5QTAq9e3QnU+8WSzTvCgq+Nv3w2BEY8mjHN13PJpF8xKC9EHAoIENsofvpUwY0ZYhEgidryIY1kwljptqk2aZO+tWoWlpvYGktQhjEpEY/WJ+lQgxUlyT5RHAiWvb7Jlcy8gQPriC7nF/V9Qz54JqLK6L8y/pGz3l0ug6BcVFooepR3yefQ53Cln2pO6S8yEBXzJCdnPdkTbFtY36tGuu1YwOmn+C02K5U688vCdmp+GztQIN6nRASCiOYDD+9AhJE11AAt3pUNIRHMAh3eqQ0ia6gAWBLlDQEhyUNu45Ef3jg5dRL3HHAWpaXsxOyErzupU2coPPVRop49aAw+cC5uSWmtj6qmnaYgqndSbeVCNLj+ezi8vLpNHwefwZ/y3Ffo4/Oc9jFB79cJopS4VB0bDoQqYIhyHarsb661iWfGTaPneYbGpsDxIXZrMe/CBuUyEi48ecgef8XPQebx4hzs/7n6QfxF3uyjKo4k3k92SqJkQfU6WEcI+OB6ie5FlgFgP3Tst8682L8BCAaCVhM9Fc6GBJM2FgNpypTRK27PaVjFe+rua5Y+kfi3w76p/SirVbHT55OnTiyer0QN5CqIrIew4tR0vXn1rWz+zrW/OXtjWJ58/PW3heP2nsp8SeMn6WZvVpziVFJwhS+6nbe4WyalHgm+cBfOf2swewakk0M8JJPefbedXb597Iv3F9vz0zatzb8i/CkU8f+sUSz3/A3vsqZs='</span>
<span>exec</span>(<span>zlib</span>.<span>decompress</span>(<span>base64</span>.<span>b64decode</span>(<span>code</span>.<span>encode</span>())).<span>decode</span>(), <span>globals</span>())</pre></div>
<p dir="auto">Now you can use <code>wat</code> object.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Install with pip</h3><a id="user-content-install-with-pip" aria-label="Permalink: Install with pip" href="#install-with-pip"></a></p>
<p dir="auto">Alternatively, install <strong>wat-inspector</strong> package and import inspection tool from <strong>wat</strong> module:</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip install wat-inspector"><pre>pip install wat-inspector</pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">Usage &amp; modifiers</h2><a id="user-content-usage--modifiers" aria-label="Permalink: Usage &amp; modifiers" href="#usage--modifiers"></a></p>
<p dir="auto"><code>wat</code> object can quickly inspect things
by using the division operator (to avoid typing parentheses).
A short, no-parentheses syntax <code>wat / object</code> is equivalent to <code>wat(object)</code>.</p>
<p dir="auto">You can call <code>wat.modifiers / object</code> (or <code>wat.modifiers(object)</code>)
with the following <strong>modifiers</strong>:</p>
<ul dir="auto">
<li><code>.short</code> or <code>.s</code> to hide attributes (variables and methods)</li>
<li><code>.long</code> to show non-abbreviated values and documentation</li>
<li><code>.dunder</code> to display dunder attributes</li>
<li><code>.code</code> to reveal the source code of a function, method, or class</li>
<li><code>.nodocs</code> to hide documentation for functions and classes</li>
<li><code>.all</code> to include all available information</li>
</ul>
<p dir="auto">You can chain modifiers, e.g. <code>wat.long.dunder.nodocs / object</code>.</p>
<p dir="auto">Call <code>wat.locals</code> or <code>wat()</code> to inspect <code>locals()</code> variables.
Call <code>wat.globals</code> to inspect <code>globals()</code> variables.</p>
<p dir="auto">Type <code>wat</code> in the interpreter to learn more about this object itself.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Use Cases Examples</h2><a id="user-content-use-cases-examples" aria-label="Permalink: Use Cases Examples" href="#use-cases-examples"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Determine type</h3><a id="user-content-determine-type" aria-label="Permalink: Determine type" href="#determine-type"></a></p>
<p dir="auto">In a dynamic typing language like Python, it's often hard to determine the type of an object. WAT Inspector can help you with that by showing the name of the type with the module it comes from.</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> wat.short / (1,)
value: (1,)
type: tuple
len: 1"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>wat</span>.<span>short</span> <span>/</span> (<span>1</span>,)
<span>value</span>: (<span>1</span>,)
<span>type</span>: <span>tuple</span>
<span>len</span>: <span>1</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content=">>> wat.short / {None}
value: {None}
type: set
len: 1"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>wat</span>.<span>short</span> <span>/</span> {<span>None</span>}
<span>value</span>: {<span>None</span>}
<span>type</span>: <span>set</span>
<span>len</span>: <span>1</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content=">>> wat.short / user
str: admin
repr: <User: admin>
type: django.contrib.auth.models.User
parents: django.contrib.auth.models.AbstractUser, django.contrib.auth.base_user.AbstractBaseUser, django.contrib.auth.models.PermissionsMixin, django.db.models.base.Model, django.db.models.utils.AltersData"><pre><span>&gt;&gt;</span><span>&gt;</span> <span>wat</span>.<span>short</span> <span>/</span> <span>user</span>
<span>str</span>: <span>admin</span>
<span>repr</span>: <span>&lt;</span><span>User</span>: <span>admin</span><span>&gt;</span>
<span>type</span>: <span>django</span>.<span>contrib</span>.<span>auth</span>.<span>models</span>.<span>User</span>
<span>parents</span>: <span>django</span>.<span>contrib</span>.<span>auth</span>.<span>models</span>.<span>AbstractUser</span>, <span>django</span>.<span>contrib</span>.<span>auth</span>.<span>base_user</span>.<span>AbstractBaseUser</span>, <span>django</span>.<span>contrib</span>.<span>auth</span>.<span>models</span>.<span>PermissionsMixin</span>, <span>django</span>.<span>db</span>.<span>models</span>.<span>base</span>.<span>Model</span>, <span>django</span>.<span>db</span>.<span>models</span>.<span>utils</span>.<span>AltersData</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/igrek51/wat/blob/master/docs/img/wat-short-types.png?raw=true"><img src="https://github.com/igrek51/wat/raw/master/docs/img/wat-short-types.png?raw=true" alt=""></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/igrek51/wat/blob/master/docs/img/wat-intro-set.png?raw=true"><img src="https://github.com/igrek51/wat/raw/master/docs/img/wat-intro-set.png?raw=true" alt=""></a></p>
<p dir="auto">Now that you've identified the actual type,
you can put the type annotations in your code to reduce the confusion.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Look up methods</h3><a id="user-content-look-up-methods" aria-label="Permalink: Look up methods" href="#look-up-methods"></a></p>
<p dir="auto">Listing methods, functions and looking up their signature is extremely beneficial to see how to use them.
Plus, you can read their docstrings.</p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/igrek51/wat/blob/master/docs/img/wat-string.png?raw=true"><img src="https://github.com/igrek51/wat/raw/master/docs/img/wat-string.png?raw=true" alt=""></a></p>
<p dir="auto">Use <code>wat.long</code> if you want to see full doscstrings.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Discover function's signature</h3><a id="user-content-discover-functions-signature" aria-label="Permalink: Discover function's signature" href="#discover-functions-signature"></a></p>
<p dir="auto">See the docstrings and the signature of a function or a method to see how to use it.</p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/igrek51/wat/blob/master/docs/img/wat-str-split.png?raw=true"><img src="https://github.com/igrek51/wat/raw/master/docs/img/wat-str-split.png?raw=true" alt=""></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Look up attributes</h3><a id="user-content-look-up-attributes" aria-label="Permalink: Look up attributes" href="#look-up-attributes"></a></p>
<p dir="auto">List the attribues and their types to see what's really inside the inspected object.</p>
<div dir="auto" data-snippet-clipboard-copy-content="wat / re.match('(\d)_(.*)', '1_title')"><pre><span>wat</span> <span>/</span> <span>re</span>.<span>match</span>(<span>'(\d)_(.*)'</span>, <span>'1_title'</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/igrek51/wat/blob/master/docs/img/wat-re-match.png?raw=true"><img src="https://github.com/igrek51/wat/raw/master/docs/img/wat-re-match.png?raw=true" alt=""></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Explore modules</h3><a id="user-content-explore-modules" aria-label="Permalink: Explore modules" href="#explore-modules"></a></p>
<p dir="auto">One of the use cases is to explore modules.
For instance you can list functions, classes and the sub-modules of a selected module.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import pathlib
wat / pathlib"><pre><span>import</span> <span>pathlib</span>
<span>wat</span> <span>/</span> <span>pathlib</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/igrek51/wat/blob/master/docs/img/wat-pathlib.png?raw=true"><img src="https://github.com/igrek51/wat/raw/master/docs/img/wat-pathlib.png?raw=true" alt=""></a></p>
<p dir="auto">Then, you can navigate further, e.g. <code>wat / pathlib.fnmatch</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Explore dunder attributes</h3><a id="user-content-explore-dunder-attributes" aria-label="Permalink: Explore dunder attributes" href="#explore-dunder-attributes"></a></p>
<p dir="auto">By default, WAT Inspector hides attributes starting with <code>__</code>. Use <code>wat.dunder</code> to see them.</p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/igrek51/wat/blob/master/docs/img/wat-dict-dunder.png?raw=true"><img src="https://github.com/igrek51/wat/raw/master/docs/img/wat-dict-dunder.png?raw=true" alt=""></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Review the code</h3><a id="user-content-review-the-code" aria-label="Permalink: Review the code" href="#review-the-code"></a></p>
<p dir="auto">Look up the source code of a function to see how it really works.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import re
wat.code / re.match"><pre><span>import</span> <span>re</span>
<span>wat</span>.<span>code</span> <span>/</span> <span>re</span>.<span>match</span></pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/igrek51/wat/blob/master/docs/img/wat-code-rematch.png?raw=true"><img src="https://github.com/igrek51/wat/raw/master/docs/img/wat-code-rematch.png?raw=true" alt=""></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Debug with breakpoint</h3><a id="user-content-debug-with-breakpoint" aria-label="Permalink: Debug with breakpoint" href="#debug-with-breakpoint"></a></p>
<p dir="auto">You can use Python's <code>breakpoint()</code> keyword to launch an interactive debugger in your program:</p>
<div dir="auto" data-snippet-clipboard-copy-content="logger.debug('init')
x = {'what is it?'}
breakpoint()
logger.debug('done')"><pre><span>logger</span>.<span>debug</span>(<span>'init'</span>)
<span>x</span> <span>=</span> {<span>'what is it?'</span>}
<span>breakpoint</span>()
<span>logger</span>.<span>debug</span>(<span>'done'</span>)</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="(Pdb) from wat import wat  # or paste insta-load snippet
(Pdb) wat / x  # inspect local variable
...
(Pdb) c  # continue execution"><pre>(<span>Pdb</span>) <span>from</span> <span>wat</span> <span>import</span> <span>wat</span>  <span># or paste insta-load snippet</span>
(<span>Pdb</span>) <span>wat</span> <span>/</span> <span>x</span>  <span># inspect local variable</span>
...
(<span>Pdb</span>) <span>c</span>  <span># continue execution</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Explore Python built-ins</h3><a id="user-content-explore-python-built-ins" aria-label="Permalink: Explore Python built-ins" href="#explore-python-built-ins"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Look up local variables</h3><a id="user-content-look-up-local-variables" aria-label="Permalink: Look up local variables" href="#look-up-local-variables"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Look up global variables</h3><a id="user-content-look-up-global-variables" aria-label="Permalink: Look up global variables" href="#look-up-global-variables"></a></p>

</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Launch HN: Undermind (YC S24) – AI agent for discovering scientific papers (136 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=41069909</link>
            <guid>41069909</guid>
            <pubDate>Thu, 25 Jul 2024 15:36:57 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=41069909">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="41069909">
      <td><span></span></td>      <td><center><a id="up_41069909" href="https://news.ycombinator.com/vote?id=41069909&amp;how=up&amp;goto=item%3Fid%3D41069909"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=41069909">Launch HN: Undermind (YC S24) – AI agent for discovering scientific papers</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_41069909">112 points</span> by <a href="https://news.ycombinator.com/user?id=jramette">jramette</a> <span title="2024-07-25T15:36:57"><a href="https://news.ycombinator.com/item?id=41069909">7 hours ago</a></span> <span id="unv_41069909"></span> | <a href="https://news.ycombinator.com/hide?id=41069909&amp;goto=item%3Fid%3D41069909">hide</a> | <a href="https://hn.algolia.com/?query=Launch%20HN%3A%20Undermind%20(YC%20S24)%20%E2%80%93%20AI%20agent%20for%20discovering%20scientific%20papers&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=41069909&amp;auth=1a6fb7dd4544dd9e5eec5847729cb868bddc831d">favorite</a> | <a href="https://news.ycombinator.com/item?id=41069909">48&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><div><p>Hey HN! We’re Josh and Tom from Undermind (<a href="https://www.undermind.ai/">https://www.undermind.ai/</a>). We’re building a search engine for complex scientific research. There's a demo video at <a href="https://www.loom.com/share/10067c49e4424b949a4b8c9fd8f3b12c?sid=5ee3cd96-2b05-4768-8856-cb1b83e40a70" rel="nofollow">https://www.loom.com/share/10067c49e4424b949a4b8c9fd8f3b12c?...</a>, as well as example search results on our homepage.</p><p>We’re both physicists, and one of our biggest frustrations during grad school was finding research — There were a lot of times when we had to sit down to scope out new ideas for a project and quickly become a deep expert, or we had to find solutions to really complex technical problems, but the only way to do that was manually dig through papers on Google Scholar for hours. It was very tedious, to the point where we would often just skip the careful research and hope for the best. Sometimes you’d get burned a few months later because someone already solved the problem you thought was novel and important, or you’d waste your time inventing/building a solution for something when one already existed.</p><p>The problem was there’s just no easy way to figure out what others have done in research, and load it into your brain. It’s one of the biggest bottlenecks for doing truly good, important research.</p><p>We wanted to fix that. LLMs clearly help, but are mostly limited to general knowledge. Instead, we needed something that would pull in research papers, and give you exactly what you need to know, even for very complex ideas and topics. We realized the way to do this is to mimic the research strategies we already know work, because we do them ourselves, and so we built an agent-like LLM pipeline to carefully search in a way that mimics human research strategies.</p><p>Our search system works a bit differently from casual search engines. First, we have you chat back and forth with an LLM to make sure we actually understand your really complex research goals up front, like you’re talking to a colleague. Then the system carefully searches for you for ~3 minutes. At a high level, it does something similar to tree search, following citation rabbit holes and adapting based on what it discovers to look for more content over multiple iterations (the same way you would if you decided to spend a few hours). The 3 minute delay is annoying, but we’re optimizing for quality of results rather than latency right now. At the end there’s a report.</p><p>We’re trying to achieve two things with this careful, systematic agent-like discovery process:</p><p>1. We want to be very accurate, and only recommend very specific results if you ask for a specific topic. To do this, we carefully read and evaluate content from papers with the highest quality LLMs (we’re just reading abstracts and citations for now, because they’re more widely accessible - but also working on adding full texts).</p><p>2. We want to find everything relevant to your search, because in research it’s crucial to know if something exists or not. The key to being exhaustive is the adaptive algorithms we’ve developed (following citations, changing strategy based on what we find, etc). However, one cool feature of the automated pipeline is we can track the discovery process as the search proceeds. Early on, we find many good results, and later on they get more sparse, until all the good leads are exhausted and we stop finding anything helpful. We can statistically model that process, and figure out when we’ve found everything (it actually has an interesting exponential saturation behavior, which you can read a bit more about in our whitepaper (<a href="https://www.undermind.ai/static/Undermind_whitepaper.pdf">https://www.undermind.ai/static/Undermind_whitepaper.pdf</a>), which we wrote for a previous prototype.)</p><p>You can try searching yourself here:
<a href="https://www.undermind.ai/query_app/promotion/">https://www.undermind.ai/query_app/promotion/</a>. This is a special HN link where, for today, we’ve dropped the signup gate for your first few searches. Usually we require login so you can save searches.</p><p>We’re excited to share this with you! We’d love to hear about your experiences searching, what’s clear or not, and any feedback. We’ll be here to answer any questions or comments.</p></div></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI solves IMO problems at silver medal level (784 pts)]]></title>
            <link>https://deepmind.google/discover/blog/ai-solves-imo-problems-at-silver-medal-level/</link>
            <guid>41069829</guid>
            <pubDate>Thu, 25 Jul 2024 15:29:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://deepmind.google/discover/blog/ai-solves-imo-problems-at-silver-medal-level/">https://deepmind.google/discover/blog/ai-solves-imo-problems-at-silver-medal-level/</a>, See on <a href="https://news.ycombinator.com/item?id=41069829">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <p data-block-key="q2big">Breakthrough models AlphaProof and AlphaGeometry 2 solve advanced reasoning problems in mathematics</p><p data-block-key="7r8gq">Artificial general intelligence (AGI) with advanced mathematical reasoning has the potential to unlock new frontiers in science and technology.</p><p data-block-key="2a5b7">We’ve made great progress building AI systems that help mathematicians discover <a href="https://deepmind.google/discover/blog/exploring-the-beauty-of-pure-mathematics-in-novel-ways/" rel="noopener" target="_blank">new insights</a>, <a href="https://deepmind.google/discover/blog/discovering-novel-algorithms-with-alphatensor/" rel="noopener" target="_blank">novel algorithms</a> and answers to <a href="https://deepmind.google/discover/blog/funsearch-making-new-discoveries-in-mathematical-sciences-using-large-language-models/" rel="noopener" target="_blank">open problems</a>. But current AI systems still struggle with solving general math problems because of limitations in reasoning skills and training data.</p><p data-block-key="kuaa">Today, we present AlphaProof, a new reinforcement-learning based system for formal math reasoning, and AlphaGeometry 2, an improved version of our <a href="https://deepmind.google/discover/blog/alphageometry-an-olympiad-level-ai-system-for-geometry/" rel="noopener" target="_blank">geometry-solving system</a>. Together, these systems solved four out of six problems from this year’s <a href="https://www.imo2024.uk/" rel="noopener" target="_blank">International Mathematical Olympiad</a> (IMO), achieving the same level as a silver medalist in the competition for the first time.</p>
</div><div>
  <h2 data-block-key="q2big">Breakthrough AI performance solving complex math problems</h2><p data-block-key="fmv98">The IMO is the oldest, largest and most prestigious competition for young mathematicians, held annually since 1959.</p><p data-block-key="2n0o6">Each year, elite pre-college mathematicians train, sometimes for thousands of hours, to solve six exceptionally difficult problems in algebra, combinatorics, geometry and number theory. Many of the winners of the <a href="https://www.mathunion.org/imu-awards/fields-medal" rel="noopener" target="_blank">Fields Medal</a>, one of the highest honors for mathematicians, have represented their country at the IMO.</p><p data-block-key="929s2">More recently, the annual IMO competition has also become widely recognised as a grand challenge in machine learning and an aspirational benchmark for measuring an AI system’s advanced mathematical reasoning capabilities.</p><p data-block-key="5vk51">This year, we applied our combined AI system to the competition problems, provided by the IMO organizers. Our solutions were scored according to the IMO’s point-awarding rules by prominent mathematicians <a href="https://www.dpmms.cam.ac.uk/~wtg10/" rel="noopener" target="_blank">Prof Sir Timothy Gowers</a>, an IMO gold medalist and Fields Medal winner, and <a href="https://www.polyomino.org.uk/" rel="noopener" target="_blank">Dr Joseph Myers</a>, a two-time IMO gold medalist and Chair of the IMO 2024 Problem Selection Committee.</p>
</div><div>
  <p data-block-key="lr8cb">First, the problems were manually translated into formal mathematical language for our systems to understand. In the official competition, students submit answers in two sessions of 4.5 hours each. Our systems solved one problem within minutes and took up to three days to solve the others.</p><p data-block-key="8tekc">AlphaProof solved two algebra problems and one number theory problem by determining the answer and proving it was correct. This included the hardest problem in the competition, solved by only five contestants at this year’s IMO. AlphaGeometry 2 proved the geometry problem, while the two combinatorics problems remained unsolved.</p>
</div><p data-block-key="ewrpn">Each of the six problems can earn seven points, with a total maximum of 42. Our system achieved a final score of 28 points, earning a perfect score on each problem solved — equivalent to the top end of the <a href="https://www.imo-official.org/year_info.aspx?year=2024" rel="noopener" target="_blank">silver-medal category</a>. This year, the gold-medal threshold starts at 29 points, and was achieved by <a href="https://www.imo-official.org/year_individual_r.aspx?year=2024" rel="noopener" target="_blank">58 of 609 contestants</a> at the official competition.</p><div>
  <h2 data-block-key="anhnq">AlphaProof: a formal approach to reasoning</h2><p data-block-key="fv51b">AlphaProof is a system that trains itself to prove mathematical statements in the formal language <a href="https://lean-lang.org/" rel="noopener" target="_blank">Lean</a>. It couples a pre-trained language model with the <a href="https://deepmind.google/discover/blog/alphazero-shedding-new-light-on-chess-shogi-and-go/" rel="noopener" target="_blank">AlphaZero</a> reinforcement learning algorithm, which previously taught itself how to master the games of chess, shogi and Go.</p><p data-block-key="8k252">Formal languages offer the critical advantage that proofs involving mathematical reasoning can be formally verified for correctness. Their use in machine learning has, however, previously been constrained by the very limited amount of human-written data available.</p><p data-block-key="523pv">In contrast, natural language based approaches can hallucinate plausible but incorrect intermediate reasoning steps and solutions, despite having access to orders of magnitudes more data. We established a bridge between these two complementary spheres by fine-tuning a <a href="https://deepmind.google/technologies/gemini/#introduction" rel="noopener" target="_blank">Gemini</a> model to automatically translate natural language problem statements into formal statements, creating a large library of formal problems of varying difficulty.</p><p data-block-key="ev3b8">When presented with a problem, AlphaProof generates solution candidates and then proves or disproves them by searching over possible proof steps in Lean. Each proof that was found and verified is used to reinforce AlphaProof’s language model, enhancing its ability to solve subsequent, more challenging problems.</p><p data-block-key="erlti">We trained AlphaProof for the IMO by proving or disproving millions of problems, covering a wide range of difficulties and mathematical topic areas over a period of weeks leading up to the competition. The training loop was also applied during the contest, reinforcing proofs of self-generated variations of the contest problems until a full solution could be found.</p>
</div><div>
  <h2 data-block-key="q2big">A more competitive AlphaGeometry 2</h2><p data-block-key="97f90">AlphaGeometry 2 is a significantly improved version of <a href="https://deepmind.google/discover/blog/alphageometry-an-olympiad-level-ai-system-for-geometry/" rel="noopener" target="_blank">AlphaGeometry</a>. It’s a neuro-symbolic hybrid system in which the language model was based on <a href="https://deepmind.google/technologies/gemini/#introduction" rel="noopener" target="_blank">Gemini</a> and trained from scratch on an order of magnitude more synthetic data than its predecessor. This helped the model tackle much more challenging geometry problems, including problems about movements of objects and equations of angles, ratio or distances.</p><p data-block-key="dmclu">AlphaGeometry 2 employs a symbolic engine that is two orders of magnitude faster than its predecessor. When presented with a new problem, a novel knowledge-sharing mechanism is used to enable advanced combinations of different search trees to tackle more complex problems.</p><p data-block-key="ebi92">Before this year’s competition, AlphaGeometry 2 could solve 83% of all historical IMO geometry problems from the past 25 years, compared to the 53% rate achieved by its predecessor. For IMO 2024, AlphaGeometry 2 <a href="https://storage.googleapis.com/deepmind-media/DeepMind.com/Blog/imo-2024-solutions/P4/index.html" rel="noopener" target="_blank">solved Problem 4</a> within 19 seconds after receiving its formalization.</p>
</div><div>
  <h2 data-block-key="q2big">New frontiers in mathematical reasoning</h2><p data-block-key="agps5">As part of our IMO work, we also experimented with a natural language reasoning system, built upon <a href="https://deepmind.google/technologies/gemini/#introduction" rel="noopener" target="_blank">Gemini</a> and our latest research to enable advanced problem-solving skills. This system doesn’t require the problems to be translated into a formal language and could be combined with other AI systems. We also tested this approach on this year’s IMO problems and the results showed great promise.</p><p data-block-key="eqnun">Our teams are continuing to explore multiple AI approaches for advancing mathematical reasoning and plan to release more technical details on AlphaProof soon.</p><p data-block-key="9dmnq">We’re excited for a future in which mathematicians work with AI tools to explore hypotheses, try bold new approaches to solving long-standing problems and quickly complete time-consuming elements of proofs — and where AI systems like <a href="https://deepmind.google/technologies/gemini/#introduction" rel="noopener" target="_blank">Gemini</a> become more capable at math and broader reasoning.</p>
</div><div>
      <h2 data-block-key="iin1t">Acknowledgements</h2><p data-block-key="7nkda">We thank the International Mathematical Olympiad organization for their support.</p><p data-block-key="2ieok">AlphaProof development was led by Thomas Hubert, Rishi Mehta and Laurent Sartran; AlphaGeometry 2 and natural language reasoning efforts were led by Thang Luong.</p><p data-block-key="1bmr2">AlphaProof was developed with key contributions from Hussain Masoom, Aja Huang, Miklós Z. Horváth, Tom Zahavy, Vivek Veeriah, Eric Wieser, Jessica Yung, Lei Yu, Yannick Schroecker, Julian Schrittwieser, Ottavia Bertolli, Borja Ibarz, Edward Lockhart, Edward Hughes, Mark Rowland, Grace Margand. Alex Davies and Daniel Zheng led the development of informal systems such as final answer determination, with key contributions from Iuliya Beloshapka, Ingrid von Glehn, Yin Li, Fabian Pedregosa, Ameya Velingker and Goran Žužić. Oliver Nash, Bhavik Mehta, Paul Lezeau, Salvatore Mercuri, Lawrence Wu, Calle Soenne, Thomas Murrills, Luigi Massacci and Andrew Yang advised and contributed as Lean experts. Past contributors include Amol Mandhane, Tom Eccles, Eser Aygün, Zhitao Gong, Richard Evans, Soňa Mokrá, Amin Barekatain, Wendy Shang, Hannah Openshaw, Felix Gimeno. This work was advised by David Silver and Pushmeet Kohli.</p><p data-block-key="ehquf">The development of AlphaGeometry 2 was led by Trieu Trinh and Yuri Chervonyi, with key contributions by Mirek Olšák, Xiaomeng Yang, Hoang Nguyen, Junehyuk Jung, Dawsen Hwang and Marcelo Menegali. The development of the natural language reasoning system was led by Golnaz Ghiasi, Garrett Bingham, YaGuang Li, with key contributions by Swaroop Mishra, Nigamaa Nayakanti, Sidharth Mudgal, Qijun Tan, Junehyuk Jung, Hoang Nguyen, Alex Zhai, Dawsen Hwang, Mingyang Deng, Clara Huiyi Hu, Cosmo Du. Both AlphaGeometry and natural language reasoning systems were advised by Quoc Le.</p><p data-block-key="93atq">David Silver, Quoc Le, Demis Hassabis, and Pushmeet Kohli coordinated and managed the overall project.</p><p data-block-key="fvfqd">We’d also like to thank Insuk Seo, Evan Chen, Zigmars Rasscevskis, Kari Ragnarsson, Junhwi Bae, Jeonghyun Ahn, Jimin Kim, Hung Pham, Nguyen Nguyen, Son Pham, and Pasin Manurangsi who helped evaluate the quality of our language reasoning system. Prof Gregor Dolinar and Dr Geoff Smith MBE from the IMO Board, for the support and collaboration. Jarrod Kahn, Maciej Kula, Tu Vu, Hanzhao Lin, Chenkai Kuang, Vikas Verma, Yifeng Lu, Vihan Jain, Henryk Michalewski, Xavier Garcia, Arjun Kar, Lampros Lamprou, Kaushal Patel, Ilya Tolstikhen, Olivier Bousquet, Anton Tsitsulin, Dustin Zelle, CJ Carey, Sam Blackwell, Abhi Rao, Vahab Mirrokni, Behnam Neyshabur, Ethan Dyer, Keith Rush, Moritz Firsching, Dan Shved, Ihar Bury, Divyanshu Ranjan, Hadi Hashemi, Alexei Bendebury, Soheil Hassas Yeganeh, Shibl Mourad, Simon Schmitt, Satinder Baveja, Chris Dyer, Jacob Austin, Wenda Li, Heng-tze Cheng, Ed Chi, Koray Kavukcuoglu, Oriol Vinyals, Jeff Dean and Sergey Brin for their support and advice.</p><p data-block-key="6chfs">Finally, we’d like to thank the many contributors to the Lean and Mathlib projects, without whom AlphaProof wouldn’t have been possible.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mapping Hacker News to find who knows what in the HN community (160 pts)]]></title>
            <link>https://blog.wilsonl.in/hackerverse-2/#</link>
            <guid>41069527</guid>
            <pubDate>Thu, 25 Jul 2024 15:04:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.wilsonl.in/hackerverse-2/#">https://blog.wilsonl.in/hackerverse-2/#</a>, See on <a href="https://news.ycombinator.com/item?id=41069527">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <article>
      
<p><a href="https://hn2.wilsonl.in/search/startups"><img src="https://blog.wilsonl.in/hackerverse-2/screenshot.png" alt="Navigate HN experts and enthusiasts by their contributions."></a></p>
<p>After the semantic map from the <a href="https://blog.wilsonl.in/hackerverse/">previous post</a>, where I embedded 40 million posts and comments from Hacker News, I saw how the community not only supported the project with encouraging suggestions but also discovered how quickly the community shrinks from across the world into real life relationships. Robert (<a href="https://news.ycombinator.com/user?id=robg">robg</a>) reached out and we began discussing his work in the neural basis of semantic knowledge and how he built social semantic algorithms way back in 2008. Despite the intervening 16 years, we're amazed that social networks, even Hacker News, don't compute and display the trusted voices across topics. Instead of prioritizing pages based on content, social networks could prioritize the people behind the content. The semantic map of the community, in effect, breaks down to computable regions based on the ways people use language to talk about their knowledge and interests.</p>
<p>In short, why is it so hard to discover and explore the people who best know about different topics, the extent of their knowledge, and how they relate to like minds? So Robert and I have been jamming for the last month toward some examples based on the semantics of Hacker News. For every user, based on their HN comments, I've computed their place in the complete semantic map of the entire community.</p>
<p>You can explore and interact with the new app at <a href="https://hn2.wilsonl.in/">hn2.wilsonl.in</a>.</p>
<p>Here are some cool things we discovered as we've looked at how to expand the Hackerverse:</p>
<ul>
<li><p>We can <strong>organize your semantics</strong> on Hacker News. By starting with a user for the semantics of the community we show your contributions to HN semantically alongside similar users, and your "unique identity" of words you use.</p>
<ul>
<li>For example, check out <a href="https://hn2.wilsonl.in/user/robg">robg's new profile</a>.</li>
</ul>
</li>
<li><p>We can <strong>search</strong> the semantics of HN based on who knows what. The n-th order semantics shows how any search vector decomposes into the constituent people and how they use language in the community. Example queries:</p>
<ul>
<li><a href="https://hn2.wilsonl.in/search/startups">startups</a></li>
<li><a href="https://hn2.wilsonl.in/search/go%20vs%20rust%20programming">go vs rust programming</a></li>
<li><a href="https://hn2.wilsonl.in/search/neuroscience%20and%20sleep">neuroscience and sleep</a></li>
<li><a href="https://hn2.wilsonl.in/search/email%20marketing">email marketing</a></li>
</ul>
</li>
<li><p>We can <strong>map the community</strong> by who knows what and their relationships based on the semantics involved. Knowledge is not equally uniform, so this topography of the community helps to highlight the people and what they know.</p>
</li>
</ul>
<p>When you add up these three capabilities—organize your semantics, search the semantics, and map the community—we think the technology starts to show the people behind the words. Rather than organizing the world's information, what if we could organize the world's people? It has us thinking about a whole range of social knowledge challenges, but we'd love to hear your thoughts. Please join the waitlist if you'd like to further explore with us as we make more progress on this project. We're focused on the fun of finding and connecting with people not pages, and we'd love to hear your thoughts.</p>

    </article>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Let's consign CAP to the cabinet of curiosities (113 pts)]]></title>
            <link>https://brooker.co.za/blog/2024/07/25/cap-again.html</link>
            <guid>41069403</guid>
            <pubDate>Thu, 25 Jul 2024 14:52:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://brooker.co.za/blog/2024/07/25/cap-again.html">https://brooker.co.za/blog/2024/07/25/cap-again.html</a>, See on <a href="https://news.ycombinator.com/item?id=41069403">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post">


<p>CAP? Again? Still?</p>

<p>Brewer’s CAP theorem, and Gilbert and Lynch’s <a href="https://users.ece.cmu.edu/~adrian/731-sp04/readings/GL-cap.pdf">formalization of it</a>, is the first introduction to hard trade-offs for many distributed systems engineers. Going by the vast amounts of ink and bile spent on the topic, it is not unreasonable for new folks to conclude that it’s an important, foundational, idea.</p>

<p>The reality is that CAP is nearly irrelevant for almost all engineers building cloud-style distributed systems, and applications on the cloud. It’s much closer to relevant for developers of intermittently connected mobile and IoT applications, and space where the trade-off is typically seen as common sense already.</p>

<p>We’ll start with this excellent diagram from Bernstein and Das’s <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/sigtt611-bernstein.pdf">Rethinking Eventual Consistency</a>:</p>

<p><img src="https://brooker.co.za/blog/images/bernstein_das_fig2.png" alt=""></p>

<p>CAP interests itself in the first two boxes. If there’s no partition (everybody can speak to everybody), we’re OK. Where CAP goes off the rails is the second box: if a quorum of replicas is available to the client, they can still get both strong consistency, and uncompromised availability.</p>

<p><em>What do we mean when we say Available?</em></p>

<p>Consider the quorum system below. We have seven clients. Six are on the majority (quorum<sup><a href="#foot1">1</a></sup>) side, and are smiling because they can enjoy <em>both</em> availability and strong consistency (provided the system doesn’t allow the seventh client to write). The frowning client is out in the cold. They can get stale reads, but can’t write, so they’re frowning.</p>

<p><img src="https://brooker.co.za/blog/images/cap_A_vs_a.png" alt=""></p>

<p>The formalized CAP theorem would call this system <em>unavailable</em>, based on their definition of <em>availability</em>:</p>

<blockquote>
  <p>every request received by a non-failing node in the system must result in a response.</p>
</blockquote>

<p>Most engineers, operators, and six of seven clients, would call this system <em>available</em>. This difference in definitions for a <a href="https://brooker.co.za/blog/2018/02/25/availability-liveness.html">common everyday term</a> causes no end of confusion. Including among those who (incorrectly) claim that this system can’t offer consistency and availability to the six happy clients. It can.</p>

<p><em>Can we make the seventh client happy?</em></p>

<p>As system operators, we still don’t love this situation, and would like all seven of our clients to be happy. This is where we head down to the third box in Bernstein and Das’s diagram, which gives us two choices.</p>

<ul>
  <li>We can accept writes on both sides, provided those writes can be merged later in a sensible way, and offer eventually-consistent reads on both sides.</li>
  <li>We can find another way to make the seventh client happy.</li>
</ul>

<p>The majority of the websites and systems you interact with day-to-day take the second path.</p>

<p>Here’s how that works:</p>

<p><img src="https://brooker.co.za/blog/images/cap_a_with_lb.png" alt=""></p>

<p>Seven happy clients talk to our service via a load balancer. DNS, multi-cast, or some other mechanism directs them towards a healthy load balancer on the healthy side of the partition. The load balancer directs traffic to the healthy replicas, from that healthy side. None of the clients need to be aware that a network partition exists (except a small number who may see their connection to the bad side drop, and be replaced by a connection to the good side).</p>

<p>If the partition extended to the whole big internet that clients are on, this wouldn’t work. But they typically don’t.</p>

<p><em>Extending to Architectures On the Cloud</em></p>

<p>Architectures in the cloud, or in any group of datacenters, do need to deal with network partitions an infrastructure failures. They do that using the same mechanism.</p>

<p><img src="https://brooker.co.za/blog/images/cap_a_with_app.png" alt=""></p>

<p>Applications are deployed in multiple datacenters. A combination of load balancer and some routing mechanism (like DNS) directs customers to healthy copies of the application that can get to a quorum of replicas. Clients are none the wiser, and all have a smile on their faces.</p>

<p><em>The CAP Theorem is Irrelevant</em></p>

<p>The point of these simple, and perhaps simplistic, examples is that CAP trade-offs aren’t a big deal for cloud systems (and cloud-like systems across multiple datacenters). In practice, the redundant nature of connectivity and ability to use routing mechanisms to send clients to the healthy side of partitions means that the vast majority of cloud systems can offer both strong consistency and high availability to their clients, even in the presence of most common types of network partitions.</p>

<p>This doesn’t mean the CAP theorem is wrong, just that it’s not particularly practically interesting.</p>

<p>It also doesn’t mean that there aren’t interesting trade-offs to be considered. Interesting ones include trade-offs between on-disk durability and write latency, between read latency and write latency, between consistency and latency, between latency and throughput, between consistency and throughput<sup><a href="#foot2">2</a></sup>, between isolation and throughput, and many others. Almost all of these trade-offs are more practically important to the cloud system engineer than CAP.</p>

<p><em>When is CAP Relevant?</em></p>

<p>CAP tends to be most relevant to the folks who seem to talk about it least: engineers designing and building systems in intermittently connected environments. IoT. Environmental monitoring. Mobile applications. These tend to be cases where one device, or a small group of them, can be partitioned off from the internet mother ship due to awkward physical situations. Like somebody standing the way of the laser. Or power failures. Or getting in an elevator.</p>

<p>In these settings, applications simply must visit the bottom right corner of Bernstein and Das’s diagram. They must figure out whether to accept writes, and how to merge them, or they must be unavailable for updates. It’s also worth noting that these applications tend not to contain full replicas of the data set, and so read availability may also be affected by loss of connectivity.</p>

<p>I suspect that these folks don’t think about CAP for the same reason you don’t think about air: it’s just part of their world.</p>

<p><em>A challenge</em></p>

<p>The point of this post isn’t merely to be the ten billionth blog post on the CAP theorem. It’s to issue a challenge. A request. Please, if you’re an experienced distributed systems person who’s teaching some new folks about trade-offs in your space, don’t start with CAP. Maybe start by talking about durability versus latency (how many copies? where?). Or one of the <a href="https://dl.acm.org/doi/abs/10.1145/72981.72982">hundred impossibility results from this Nancy Lynch paper</a>. If you absolutely want to talk about a trade-off space with a cool acronym, maybe start with <a href="https://arxiv.org/pdf/1901.01930.pdf">CALM</a>, <a href="https://stratos.seas.harvard.edu/files/stratos/files/rum.pdf">RUM</a>, or even <a href="https://www.cs.umd.edu/~abadi/papers/abadi-pacelc.pdf">PACELC</a>.</p>

<p>Let’s consign CAP to the cabinet of curiosities.</p>

<p><em>Footnotes</em></p>

<ol>
  <li>
    <p><a name="foot1"></a> In this post, I’m going to use <em>majority</em> and <em>quorum</em> interchangeably, despite the fact that some systems have <em>quorums</em> that are not <em>majorities</em>. The predominant case is that <em>quorum</em> is a simple <em>majority</em>.</p>
  </li>
  <li>
    <p><a name="foot2"></a> The <a href="https://dsf.berkeley.edu/jmh/papers/anna_ieee18.pdf">Anna</a> Key-Value store from Chenggang Wu and team at Berkeley is one great example of an exploration of a trade-off space.</p>
  </li>
</ol>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Reverse Engineering for Everyone (387 pts)]]></title>
            <link>https://0xinfection.github.io/reversing/</link>
            <guid>41069256</guid>
            <pubDate>Thu, 25 Jul 2024 14:41:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://0xinfection.github.io/reversing/">https://0xinfection.github.io/reversing/</a>, See on <a href="https://news.ycombinator.com/item?id=41069256">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="book-search-results" tabindex="-1" role="main">
    <section>
                                
                                <h2 id="
----reverse-engineering-for-everyone
">
    Reverse Engineering For Everyone!
</h2>

<h4 id="
----—-by
----
--------mytechnotalent
----
">
    — by
    <a href="https://twitter.com/mytechnotalent" target="_blank">
        @mytechnotalent
    </a>
</h4>

<p>
    <a href="https://github.com/mytechnotalent/Reverse-Engineering-Tutorial" target="_blank">
        <img src="https://img.shields.io/badge/GitHub-Reverse%20Engineering%20For%20Everyone!-green.svg?logo=github">
    </a>
        <a href="https://twitter.com/mytechnotalent" target="_blank">
        <img src="https://img.shields.io/badge/Twitter-@mytechnotalent-blue.svg?logo=twitter">
    </a>
    <a href="https://github.com/mytechnotalent/Reverse-Engineering-Tutorial/blob/master/LICENSE" target="_blank">
        <img src="https://img.shields.io/badge/License-Apache%202.0-orange.svg?logo=apache">
    </a>
</p>

<h3 id="
----wait-whats-reverse-engineering
">
    Wait, what's reverse engineering?
</h3>
<p>
    Wikipedia defines it as:
    </p><blockquote>
        Reverse engineering, also called backwards engineering or back engineering, is the process by which an artificial object is deconstructed to reveal its designs, architecture, code, or to extract knowledge from the object. It is similar to scientific research, the only difference being that scientific research is conducted into a natural phenomenon.
    </blockquote>
    Whew, that was quite a mouthful, wasn't it? Well, it is one of the main reasons why this tutorial set exists. To make reverse engineering
    <i>
        as simple as possible.
    </i>

<p>
    <img src="https://0xinfection.github.io/reversing/cover.png">
</p>
<p>
    This comprehensive set of reverse engineering tutorials covers x86, x64 as well as 32-bit ARM and 64-bit architectures. If you're a newbie looking to learn reversing, or just someone looking to revise on some concepts, you're at the right place. As a beginner, these tutorials will carry you from nothing upto the mid-basics of reverse engineering, a skill that everyone within the realm of cyber-security should possess. If you're here just to refresh some concepts, you can conveniently use the side bar to take a look at the sections that has been covered so far.
</p>
<p>
    You can get the entire tutorial set in PDF or MOBI format. All these ebook versions will get updated automatically as new tutorials will be added. 
</p>
<p>
    Download here: [ <a href="https://0xinfection.github.io/reversing/reversing-for-everyone.pdf">PDF</a> | <a href="https://0xinfection.github.io/reversing/reversing-for-everyone.mobi">MOBI</a> ]
</p>

<p>
    <sub>
        Gitbook crafted with ♡ by
        <a href="https://twitter.com/0xInfection" target="_blank">
            @0xInfection
        </a>
    </sub>
</p>
                                
                                </section>
    <div>
        <div>
            
            <h2><span></span> results matching "<span></span>"</h2>
            <ul></ul>
            
        </div>
        <p>
            
            <h2>No results matching "<span></span>"</h2>
            
        </p>
    </div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Memory Mapping an FPGA from an STM32 (102 pts)]]></title>
            <link>https://serd.es/2024/07/24/Memory-mapping-an-FPGA-from-a-STM32.html</link>
            <guid>41068995</guid>
            <pubDate>Thu, 25 Jul 2024 14:21:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://serd.es/2024/07/24/Memory-mapping-an-FPGA-from-a-STM32.html">https://serd.es/2024/07/24/Memory-mapping-an-FPGA-from-a-STM32.html</a>, See on <a href="https://news.ycombinator.com/item?id=41068995">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="main_content">
        <article>
  
  <a href="https://serd.es/2024/07/24/Memory-mapping-an-FPGA-from-a-STM32.html">
    <time datetime="2024-07-24T20:45:00-07:00">
        2024-07-24 20:45
    </time>
  </a>
  <p>I teased at this a bit in my previous posts and finally have a setup I’m happy with, so I thought I’d do a more
in-depth writeup.</p>

<p>To recap, the planned architecture for most of my future large-scale embedded projects is a fairly large (AMD Xilinx
Kintex-7 or Artix / Kintex UltraScale+) FPGA for the high speed data plane paired with a STM32H735 for the control
plane with a memory mapped interface between them.</p>

<h2 id="why-a-two-chip-solution">Why a two-chip solution?</h2>

<p>This is somewhat reminiscent of SoC FPGAs like Xilinx’s Zynq / Versal platforms, but with a few important differences
that make it suit my needs and preferences better:</p>

<ul>
  <li>Using a MCU-class Cortex-M CPU instead of an applications processor is simpler to program in a bare-metal no-OS
or minimal RTOS environment</li>
  <li>The large (564 kB) on chip SRAM and 1 MB on chip flash eliminates the need for time-consuming DDR SDRAM layout for my
typical firmwares (&lt;200 kB each of ram/flash used)</li>
  <li>The disaggregated pinout (two smaller BGAs rather than one larger one) is simpler to fan out on less PCB layers, and
allows placing the FPGA and MCU with some distance between them if this is more convenient for layout reasons</li>
  <li>Decentralizing allows the FPGA and MCU to enforce security boundaries between each other. For example, the FPGA can
refuse to accept a bitstream from the MCU that isn’t signed by a key stored in the FPGA, and on-MCU memory and
peripherals can’t be touched by the FPGA.</li>
  <li>I can mix and match MCUs and FPGAs to achieve the mix of features, IO, BOM cost, etc. that fits my application</li>
  <li>The STM32 has hardware AES and random number generator IPs while Zynq (shockingly) does not</li>
</ul>

<h2 id="the-memory-interface">The memory interface</h2>

<p>After several false starts using quad SPI, I’ve settled on using the Flexible Memory Controller (FMC) as the preferred
MCU-side bridge between the AXI on the STM32 and the FPGA’s internal interconnect. This is a highly configurable module
which can be used to interface to old school (PC133 etc) SDRAM, asynchronous or synchronous SRAM/PSRAM, parallel
NOR/NAND flash, etc.</p>

<p>Most importantly, unlike the OCTOSPI peripheral on the STM32H735, there is no hardware caching or prefetch in the FMC
IP itself - only the normal L1 I/D caches provided by the Cortex-M7. And there’s not even any need to mess with these,
since the first FMC bank has a mapping at 0xc000_0000 which is configured as strongly ordered, uncached, device memory
in the MPU right out of the box - no need to mess around with MPU registers to turn off the cache for this range.</p>

<p>The FMC operating mode most amenable to FPGA bridging is synchronous PSRAM since this provides a clock (which can be
made free-running between memory activity burst, allowing you to run internal FPGA logic, PLLs, etc. off it) and
supports a hardware wait signal, allowing the FPGA to stall the bus in case pipeline delays or a slow peripheral
require more latency than the fixed number of wait states provided in the initial FMC register configuration.</p>

<p>Hooking up 26 LVCMOS33 pins including clock, 16 bit multiplexed address/data, control signals, byte write enables, one
chip select, and three high address bits occupies about half of a 7 series HR or UltraScale+ HD I/O bank. This
configuration gives me 1 MB of address space (2^(16+3) = 512K 16-bit words addressable) on the FPGA and I can break out
a few more address pins if I need more space for a more complex FPGA design.</p>

<h2 id="hardware-design">Hardware design</h2>

<p>I didn’t have any boards with a suitable combination of MCU, FPGA, and interconnect routing so I threw together a quick
test board in KiCAD. It’s a six layer design on Shengyi S1000-2M (cost optimized Asian FR-4 class material) since
there’s nothing particularly fast on the board and I wanted it to be cheap.</p>

<p><a href="https://serd.es/assets/fmc-test-full.jpg"><img src="https://serd.es/assets/fmc-test-800.jpg" alt="Photo of test board with RJ45 jack and Ethernet PHY in the top left corner, Spartan-7 FPGA right center, MCU in the middle, and power inlet in the bottom left"></a></p>

<p>The board is intended to pair with my second generation 48 -&gt; 12V <a href="https://github.com/azonenberg/common-ibc">intermediate bus
converter</a> and also be used for bringup/validation testing of it, so it
includes the PicoBlade control and Mini-Fit Jr 12V input connectors for that. I have the new IBC boards but haven’t had
time to populate any yet, so for now I’m powering it off a first-iteration reworked IBC prototype that I had lying
around.</p>

<p>It contains a STM32L431 in QFN-48 as supervisor / rail sequencer (so I can validate that and develop firmware before
using it in a more expensive, complex design), a STM32H735 in 201-BGA as the main processor, and a Xilinx XC7S25
Spartan-7 FPGA in FTGB196 for the other side of the bridge. I could have got away with less FPGA but wanted this board
to be a more general FPGA+MCU dev board, and also needed sufficient logic capacity and RAM for logic analyzer cores
during bringup, so decided against using the XC7S6 or 15 that I had on the shelf.</p>

<p>The FPGA and MCU are wired together by several interfaces: the FMC discussed above, an OCTOSPI channel, and 10/100
RMII. The OCTOSPI and RMII are not used in the current firmware due to the caching issues discussed in my previous
posts and the fact that the FMC is significantly faster than the RMII interface (more on that later).</p>

<p>The second OCTOSPI channel on the MCU is connected to a quad SPI flash that is currently unused, but I want to play
with in the future. I think this will work fine; the OCTOSPI is actually designed for interfacing with external flash
and most of the quirks I’ve encountered were the result of trying to shoehorn it into something it was not meant to do.</p>

<p>In addition to the interfaces to the MCU, the FPGA has an RGMII connection to a KSZ9031RNX gigabit Ethernet PHY, a PMOD
for GPIO expansion, and four LEDs for status indications.</p>

<p>The MCU also has a PMOD of its own, another four LEDs, and a 3.3V UART broken out to pin headers for debug console.</p>

<h2 id="integrated-platform">Integrated platform</h2>

<p>The STM32H735 is a very complex chip (the <a href="https://www.st.com/resource/en/reference_manual/rm0468-stm32h723733-stm32h725735-and-stm32h730-value-line-advanced-armbased-32bit-mcus-stmicroelectronics.pdf">reference
manual</a>
weighs in at 3357 pages) so we’ll only show the parts relevant to the discussion in figures here.</p>

<p>From the MCU’s perspective, the FPGA shows up as a 64 MB region (of which only 1 MB is wired up on this board) of APB
SFR address space mapped starting at 0xc000_0000. In my <a href="https://github.com/azonenberg/misc-devboards/blob/master/fpga-stm32-ifaces/firmware/main/firmware.ld">linker
script</a> these
regions are referred to as FMC_APB1 and FMC_APB2 to avoid ambiguity with the on-MCU APB1 and APB2 bus segments located
in the 0x4000_0000 peripheral address range.</p>

<p>64-bit accesses are not currently supported since the FPGA-side bus is 32 bits and I haven’t implemented logic to break
up a 64-bit burst into two 32-bit transactions. 32-bit read and write accesses are fully supported including wait state
propagation; 16 and 8 bit accesses are mostly implemented but thorough testing has been low priority since most
of my peripherals have native 32-bit registers anyway.</p>

<p><a href="https://serd.es/assets/fpga-mcu-block.png"><img src="https://serd.es/assets/fpga-mcu-block.png" alt="Block diagram showing AXI bus within STM32, APB bus within FPGA, and bridge via the FMC"></a></p>

<p>The FPGA design (implemented in SystemVerilog) contains:</p>

<ul>
  <li>A tri speed 10/100/1000 <a href="https://github.com/azonenberg/antikernel-ipcores/blob/master/interface/ethernet/RGMIIMACWrapper.sv?ts=4">RGMII
MAC</a> paired
with memory mapped <a href="https://github.com/azonenberg/antikernel-ipcores/blob/master/interface/ethernet/APB_EthernetRxBuffer_x32.sv">RX
FIFO</a> and
<a href="https://github.com/azonenberg/antikernel-ipcores/blob/master/interface/ethernet/APB_EthernetTxBuffer_x32_1G.sv">TX
FIFO</a></li>
  <li>An <a href="https://github.com/azonenberg/antikernel-ipcores/blob/master/interface/ethernet/APB_MDIO.sv?ts=4">MDIO
controller</a></li>
  <li>A 32-bit
<a href="https://github.com/azonenberg/antikernel-ipcores/blob/master/interface/gpio/APB_GPIO.sv?ts=4">GPIO port</a> connected to
the PHY reset pin, some other miscellaneous control/status signals around the board and internal to the FPGA, and the
FPGA PMOD pins</li>
  <li>A few support blocks for things like querying the FPGA device ID, temperature, and other system health sensors</li>
</ul>

<h2 id="fpga-side-amba-implementation">FPGA-side AMBA implementation</h2>

<p>I shied away from using AMBA interconnects in my FPGA design for a long time because of Xilinx’s choices of using AXI
(large and heavy weight) for everything, and having individual ports for every control signal (whyyyy?). But Vivado now
has good support for SystemVerilog interfaces (when I last looked at this circa 2017, while interfaces were supported
it couldn’t handle arrays of them).</p>

<p>Rather than using AXI for everything, I’ve decided to standardize on 32-bit APB as my internal control-plane
interconnect. It’s much smaller and simpler, and for poking config registers it’s more than fast enough. And, as you’ll
see later on, you can actually push quite a bit of data over it if necessary.</p>

<p>The <a href="https://github.com/azonenberg/misc-devboards/blob/master/fpga-stm32-ifaces/rtl/iface-test/iface-test.srcs/sources_1/new/top.sv?ts=4">top
level</a>
of the design is mostly IO declarations and the APB interconnect.</p>

<h3 id="fmc-bridge">FMC bridge</h3>

<p>The FMC bridge is a bidirectional converter between the STM32 FMC bus to AMBA APB. You can go look at <a href="https://github.com/azonenberg/antikernel-ipcores/blob/master/amba/bridging/FMC_APBBridge.sv?ts=4">the
source</a> if you want
to see all the gory details, but here’s how it’s instantiated.</p>

<p>The bridge contains an internal PLL (as of this writing only 7 series is supported but UltraScale+ will be added soon)
locked to the FMC clock (which must be free running) and generating two equal-frequency output clocks. The phase of
these clocks can be adjusted as needed to improve setup/hold margin depending on on IO timing requirements for your
specific FPGA, board trace delays, etc.</p>

<p>The first clock phase is used for capturing inbound FMC control/write data signals and driving the APB PCLK out to
internal loads within the FPGA, while the second clock is used for launching read data back to the MCU. At higher clock
speeds it may be necessary to move the launch clock back relative to the capture clock in order to buy a bit more
timing margin for the system-synchronous bus. (If anyone at ST is listening, could you maybe add some kind of DQS or
other source-synchronous read capture clock to the FMC in your next gen parts?)</p>

<p>This bridge converts inbound FMC transactions directly to APB read/write transactions, setting the APB PSTRB signal as
needed to match the byte write enables on the FMC. APB latency is properly propagated back to the NWAIT signal on the
FMC, so peripherals can take arbitrarily long to service requests (although this will stall the AXI bus on the STM32,
so beware).</p>

<p>As of now, the PSLVERR signal is not used for anything, but in the future I plan to break it out to a latching
interrupt line of some sort that will trigger a “you done segfaulted” ISR on the MCU to handle the error.</p>

<figure><pre><code data-lang="verilog"><span>APB</span> <span>#(.</span><span>DATA_WIDTH</span><span>(</span><span>32</span><span>),</span> <span>.</span><span>ADDR_WIDTH</span><span>(</span><span>20</span><span>),</span> <span>.</span><span>USER_WIDTH</span><span>(</span><span>0</span><span>))</span> <span>fmc_apb</span><span>();</span>

<span>FMC_APBBridge</span> <span>#(</span>
    <span>.</span><span>CLOCK_PERIOD</span><span>(</span><span>7.27</span><span>),</span>    <span>//137.5 MHz</span>
    <span>.</span><span>VCO_MULT</span><span>(</span><span>8</span><span>),</span>           <span>//1.1 GHz VCO</span>
    <span>.</span><span>CAPTURE_CLOCK_PHASE</span><span>(</span><span>-</span><span>30</span><span>),</span>
    <span>.</span><span>LAUNCH_CLOCK_PHASE</span><span>(</span><span>-</span><span>30</span><span>)</span>
<span>)</span> <span>fmcbridge</span><span>(</span>
    <span>.</span><span>apb</span><span>(</span><span>fmc_apb</span><span>),</span>

    <span>.</span><span>clk_mgmt</span><span>(</span><span>clk_125mhz</span><span>),</span>

    <span>.</span><span>fmc_clk</span><span>(</span><span>fmc_clk</span><span>),</span>
    <span>.</span><span>fmc_nwait</span><span>(</span><span>fmc_nwait</span><span>),</span>
    <span>.</span><span>fmc_noe</span><span>(</span><span>fmc_noe</span><span>),</span>
    <span>.</span><span>fmc_ad</span><span>(</span><span>fmc_ad</span><span>),</span>
    <span>.</span><span>fmc_nwe</span><span>(</span><span>fmc_nwe</span><span>),</span>
    <span>.</span><span>fmc_nbl</span><span>(</span><span>fmc_nbl</span><span>),</span>
    <span>.</span><span>fmc_nl_nadv</span><span>(</span><span>fmc_nl_nadv</span><span>),</span>
    <span>.</span><span>fmc_a_hi</span><span>(</span><span>fmc_a_hi</span><span>),</span>
    <span>.</span><span>fmc_cs_n</span><span>(</span><span>fmc_ne1</span><span>)</span>
<span>);</span></code></pre></figure>

<h3 id="apb-bridges">APB bridges</h3>

<p>My <a href="https://github.com/azonenberg/antikernel-ipcores/blob/master/amba/apb/APBBridge.sv?ts=4">APB bridge</a> module takes a
single APB requester port and bridges it out to arbitrarily many completers, each mapped at consecutive, equally sized
regions of address space configured as an array of SystemVerilog interfaces. No fancy GUI address space editors, no
automatic code generation, just a parameterizable module.</p>

<p>Most nontrivial designs will include a mix of peripherals with simple, tiny register maps (just a few control bits) and
larger, more complex ones with memory mapped buffers etc. My architecture implements this by using a tree of bridges;
the test system has a root bridge with two 64 kB bus segments. One of these is then subdivided into 1 kB segments for
general peripherals while the other is subdivided into 4 kB segments for the Ethernet FIFOs.</p>

<p>The bridge is completely combinatorial to provide maximum flexibility for timing-latency tradeoffs; it is expected that
real-world designs will add <a href="https://github.com/azonenberg/antikernel-ipcores/blob/master/amba/apb/APBRegisterSlice.sv?ts=4">register
slices</a> throughout the
design as required to make timing at the desired PCLK frequency.</p>

<figure><pre><code data-lang="verilog"><span>//Two 16-bit bus segments at 0xc000_0000 (APB1) and c001_0000 (APB2)</span>
<span>APB</span> <span>#(.</span><span>DATA_WIDTH</span><span>(</span><span>32</span><span>),</span> <span>.</span><span>ADDR_WIDTH</span><span>(</span><span>16</span><span>),</span> <span>.</span><span>USER_WIDTH</span><span>(</span><span>0</span><span>))</span> <span>rootAPB</span><span>[</span><span>1</span><span>:</span><span>0</span><span>]();</span>

<span>//Root bridge</span>
<span>APBBridge</span> <span>#(</span>
	<span>.</span><span>BASE_ADDR</span><span>(</span><span>32'h0000_0000</span><span>),</span>	<span>//MSBs are not sent over FMC</span>
	<span>.</span><span>BLOCK_SIZE</span><span>(</span><span>32'h1_0000</span><span>),</span>
	<span>.</span><span>NUM_PORTS</span><span>(</span><span>2</span><span>)</span>
<span>)</span> <span>root_bridge</span> <span>(</span>
	<span>.</span><span>upstream</span><span>(</span><span>fmc_apb_pipe</span><span>),</span>
	<span>.</span><span>downstream</span><span>(</span><span>rootAPB</span><span>)</span>
<span>);</span>

<span>//Pipeline stages at top side of each root in case we need to improve timing</span>
<span>APB</span> <span>#(.</span><span>DATA_WIDTH</span><span>(</span><span>32</span><span>),</span> <span>.</span><span>ADDR_WIDTH</span><span>(</span><span>16</span><span>),</span> <span>.</span><span>USER_WIDTH</span><span>(</span><span>0</span><span>))</span> <span>apb1_root</span><span>();</span>
<span>APBRegisterSlice</span> <span>#(.</span><span>DOWN_REG</span><span>(</span><span>0</span><span>),</span> <span>.</span><span>UP_REG</span><span>(</span><span>0</span><span>))</span> <span>regslice_apb1_root</span><span>(</span>
	<span>.</span><span>upstream</span><span>(</span><span>rootAPB</span><span>[</span><span>0</span><span>]),</span>
	<span>.</span><span>downstream</span><span>(</span><span>apb1_root</span><span>));</span>

<span>APB</span> <span>#(.</span><span>DATA_WIDTH</span><span>(</span><span>32</span><span>),</span> <span>.</span><span>ADDR_WIDTH</span><span>(</span><span>16</span><span>),</span> <span>.</span><span>USER_WIDTH</span><span>(</span><span>0</span><span>))</span> <span>apb2_root</span><span>();</span>
<span>APBRegisterSlice</span> <span>#(.</span><span>DOWN_REG</span><span>(</span><span>0</span><span>),</span> <span>.</span><span>UP_REG</span><span>(</span><span>0</span><span>))</span> <span>regslice_apb2_root</span><span>(</span>
	<span>.</span><span>upstream</span><span>(</span><span>rootAPB</span><span>[</span><span>1</span><span>]),</span>
	<span>.</span><span>downstream</span><span>(</span><span>apb2_root</span><span>));</span></code></pre></figure>

<h2 id="performance">Performance</h2>

<p>In order to check how fast the interface actually is, I wrote a minimalistic iperf3 compatible server application as a
benchmark. Not that I actually expect to be trying to firehose packets as fast as I can (I didn’t implement rate
limiting) from a STM32 hanging off an FPGA, but it’s a decent stress test of the interconnect bandwidth.</p>

<p>I chose reverse UDP mode (STM32 sending, PC receiving) for the benchmark to minimize the amount of CPU used on the
benchmark with the goal of primarily stressing the bus - in other words, this should not be interpreted as a realistic
performance figure that can be achieved by actual application code doing nontrivial things, merely a figure of merit
for comparison to future implementations.</p>

<p>The current APBEthernetInterface driver doesn’t use any DMA, just a busy loop that effectively memcpy’s the data over
(with a few slight tweaks to ensure alignment etc). Given that all of the memory accesses are made by the CPU, I put
the packet buffers and all of the internal data structures used by the TCP/IP stack in DTCM to maximize performance.</p>

<p>With the FMC clocked at 125 MHz and both PLL clock phases set to -30 degrees (after BUFG insertion delay), my current
test firmware can sustain 284 Mbps over a ten-second test.</p>

<p><img src="https://serd.es/assets/iperf3.png" alt="iperf3 screenshot showing 284 Mbps of UDP traffic"></p>

<p>There’s probably potential to go faster, the FMC can clock to double the current rate (250 MHz) but I had trouble
getting reliable performance. On my next “real” design I’ll have a faster FPGA (although potentially slower IOs,
UltraScale+ HDIO are actually somewhat slow compared to 7 series HR) and may spend some time playing with constraints
and PLL phases to see if I can push it any further. But realistically, this is already more than enough for my needs.</p>

<h2 id="conclusions">Conclusions</h2>

<p>Overall this was surprisingly painless. The interface just works, with almost no fuss. Pushing to higher clock rates
(past 125 MHz) is likely to be a bit challenging due to the system-synchronous nature of the bus. I played around a bit
with dynamic PLL reconfiguration and some ideas for link trainining of sorts, but honestly I don’t think it’s
necessary.</p>

<p>I expect the code will evolve slightly over time, perhaps eventually adding 64-bit transfer support on the FMC side and
bridging to AHB rather than APB for reduced overhead of sequential transfers, but this is likely to be the backbone of
my large FPGA+MCU projects for the foreseeable future.</p>

<p>Like this post? <a href="https://ioc.exchange/@azonenberg/112845173275261011">Drop me a comment on Mastodon</a></p>

</article>

      </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Haystack – an IDE for exploring and editing code on an infinite canvas (163 pts)]]></title>
            <link>https://haystackeditor.com/</link>
            <guid>41068719</guid>
            <pubDate>Thu, 25 Jul 2024 13:54:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://haystackeditor.com/">https://haystackeditor.com/</a>, See on <a href="https://news.ycombinator.com/item?id=41068719">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main" data-framer-hydrate-v2="{&quot;routeId&quot;:&quot;augiA20Il&quot;,&quot;localeId&quot;:&quot;default&quot;,&quot;breakpoints&quot;:[{&quot;hash&quot;:&quot;72rtr7&quot;}]}" data-framer-ssr-released-at="2024-07-24T14:10:37.271Z" data-framer-page-optimized-at="2024-07-25T22:02:51.993Z"><div id="i20W9XPdh"><nav data-framer-name="Desktop"><div data-framer-name="Top"><p><img decoding="async" src="https://framerusercontent.com/images/9bx5KI14yg2zRgbrESEvKFOdFM.png" alt=""></p></div><div data-framer-name="Links"><div data-framer-component-type="RichTextContainer"><p><a data-styles-preset="HklxZCvk0" href="https://haystackeditor.com/#home">Home</a></p></div><div data-framer-component-type="RichTextContainer"><p><a data-styles-preset="HklxZCvk0" href="https://haystackeditor.com/#demo-1">Demo</a></p></div><div data-framer-component-type="RichTextContainer"><p><a data-styles-preset="HklxZCvk0" href="https://haystackeditor.com/#faq">FAQs</a></p></div><div data-framer-name="Closed" data-highlight="true" tabindex="0" id="undefined-8jocpt"><p data-styles-preset="pjC45sGTy">Download</p></div></div></nav></div><header data-framer-name="Header" id="home" name="Header"><p data-framer-component-type="RichTextContainer"><h2>Navigate and refactor your code with ease</h2></p><p data-framer-component-type="RichTextContainer"><h2>An IDE built on top of a canvas, Haystack takes care of the tedious and confusing parts of coding for you</h2></p><div data-border="true"><p><img decoding="async" sizes="1065px" srcset="https://framerusercontent.com/images/QpBpFi1AMfOINPGCcfAohi8OVD4.gif?scale-down-to=512 512w,https://framerusercontent.com/images/QpBpFi1AMfOINPGCcfAohi8OVD4.gif?scale-down-to=1024 1024w,https://framerusercontent.com/images/QpBpFi1AMfOINPGCcfAohi8OVD4.gif 1065w" src="https://framerusercontent.com/images/QpBpFi1AMfOINPGCcfAohi8OVD4.gif" alt=""></p></div><div data-framer-name="Closed" data-highlight="true" tabindex="0" id="sw9whx"><p>Download</p></div></header><header data-framer-name="Header Image" id="demo" name="Header Image"><p data-framer-component-type="RichTextContainer"><h2>Haystack in action</h2></p><div id="demo-1"><article role="presentation"></article></div></header><div data-framer-name="FAQ" id="faq" name="FAQ"><p data-framer-component-type="RichTextContainer"><h2>Frequently Asked Questions</h2></p><div data-framer-name="Column" name="Column"><div data-framer-name="Closed" data-highlight="true" tabindex="0"><p>Can I keep my settings from VS Code?</p></div><div data-framer-name="Closed" data-highlight="true" tabindex="0"><p>Does Haystack log or send my code anywhere?</p></div><div data-framer-name="Closed" data-highlight="true" tabindex="0"><p>How do I navigate more easily inside of editors?</p></div><div data-framer-name="Closed" data-highlight="true" tabindex="0"><p>I don't see the extension I want in the sidebar</p></div><div data-framer-name="Closed" data-highlight="true" tabindex="0"><p>What languages do you support?</p></div><div data-framer-name="Closed" data-highlight="true" tabindex="0"><p>Why does the Python language server not work?</p></div><div data-framer-name="Closed" data-highlight="true" tabindex="0"><p>What platforms do you support?</p></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A chemist explains the chemistry behind decaf coffee (165 pts)]]></title>
            <link>https://theconversation.com/retaining-flavor-while-removing-caffeine-a-chemist-explains-the-chemistry-behind-decaf-coffee-233196</link>
            <guid>41067616</guid>
            <pubDate>Thu, 25 Jul 2024 12:04:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://theconversation.com/retaining-flavor-while-removing-caffeine-a-chemist-explains-the-chemistry-behind-decaf-coffee-233196">https://theconversation.com/retaining-flavor-while-removing-caffeine-a-chemist-explains-the-chemistry-behind-decaf-coffee-233196</a>, See on <a href="https://news.ycombinator.com/item?id=41067616">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
    <p>For many people, the aroma of freshly brewed coffee is the start of a great day. But <a href="https://www.uclahealth.org/news/article/caffeine-connection-between-coffee-and-headaches">caffeine can cause headaches and jitters</a> in others. That’s why many people reach for a decaffeinated cup instead.</p>

<p><a href="https://miamioh.edu/profiles/cas/michael-crowder.html">I’m a chemistry professor</a> who has taught lectures on why chemicals dissolve in some liquids but not in others. The processes of decaffeination offer great real-life examples of these chemistry concepts. Even the best decaffeination method, however, <a href="https://www.ncausa.org/Decaffeinated-Coffee">does not remove all of the caffeine</a> – about 7 milligrams of caffeine usually remain in an 8-ounce cup.</p>

<p>Producers decaffeinating their coffee want to remove the caffeine while retaining all – or at least most – of the other chemical aroma and flavor compounds. Decaffeination <a href="https://www.bbc.com/future/article/20180917-how-do-you-decaffeinate-coffee">has a rich history</a>, and now almost all coffee producers use <a href="https://www.scientificamerican.com/article/how-is-caffeine-removed-t/">one of three common methods</a>.</p>

<p>All these methods, <a href="https://doi.org/10.1080/15422119.2013.771127">which are also used to make decaffeinated tea</a>, <a href="https://www.bbc.com/future/article/20180917-how-do-you-decaffeinate-coffee">start with green, or unroasted, coffee beans</a> that have been premoistened. Using roasted coffee beans would result in a coffee with a very different aroma and taste because the <a href="https://doi.org/10.1016/B978-0-12-384947-2.00183-5">decaffeination steps would remove some flavor and odor compounds</a> produced during roasting.</p>

<h2>The carbon dioxide method</h2>

<p>In the relatively new carbon dioxide method, developed in the early 1970s, producers use high-pressure CO₂ to extract caffeine from moistened coffee beans. They pump the CO₂ into a sealed vessel containing the moistened coffee beans, and the caffeine molecules dissolve in the CO₂. </p>

<p>Once the caffeine-laden CO₂ is separated from the beans, producers pass the CO₂ mixture either through a container of water or over <a href="https://generalcarbon.com/facts-about-activated-carbon/activated-carbon-faq/">a bed of activated carbon</a>. Activated carbon is carbon that’s been heated up to high temperatures and exposed to steam and oxygen, which creates pores in the carbon. This step filters out the caffeine, and <a href="https://doi.org/10.1021/jf0518305">most likely other chemical compounds</a>, some of which affect the flavor of the coffee. </p>

<p>These compounds either bind in the pores of the activated carbon or they stay in the water. Producers dry the decaffeinated beans using heat. Under the heat, any remaining CO₂ evaporates. Producers can then repressurize and reuse the same CO₂.</p>

<p>This method <a href="https://www.scientificamerican.com/article/how-is-caffeine-removed-t/">removes 96% to 98% of the caffeine</a>, and the resulting coffee has only minimal CO₂ residue.</p>

<p>This method, which requires expensive equipment for making and handling the CO₂, is <a href="https://coffeecode.co.uk/decaffeination-4-main-methods/#google_vignette">extensively used</a> to decaffeinate commercial-grade, or supermarket, coffees.</p>

<h2>Swiss water process</h2>

<p>The Swiss water method, initially used <a href="https://coffeecode.co.uk/decaffeination-4-main-methods/#google_vignette">commercially in the early 1980s</a>, uses hot water to decaffeinate coffee.</p>

<p>Initially, producers soak a batch of green coffee beans in hot water, which extracts both the caffeine and other chemical compounds from the beans. </p>

<p>It’s kind of like what happens when you brew roasted coffee beans – you place dark beans in clear water, and the chemicals that cause the coffee’s dark color leach out of the beans into the water. In a similar way, the hot water pulls the caffeine from not yet decaffeinated beans.</p>

<p>During the soaking, the caffeine concentration is higher in the coffee beans than in the water, so the caffeine moves into the water from the beans. Producers then take the beans out of the water and placed them into fresh water, which has no caffeine in it – so the process repeats, and more caffeine moves out of the beans and into the water. The producers repeat this process, up to 10 times, until <a href="https://www.scientificamerican.com/article/how-is-caffeine-removed-t/">there’s hardly any caffeine left</a> in the beans. </p>

<p>The resulting water, which now contains the caffeine and any flavor compounds that dissolved out from the beans, gets passed through activated charcoal filters. These trap caffeine and other similarly sized chemical compounds, such as sugars <a href="https://www.sciencedirect.com/topics/neuroscience/polyamine">and organic compounds called polyamines</a>, while allowing most of the other chemical compounds to remain in the filtered water.</p>

<p>Producers then use the filtered water – saturated with flavor but devoid of most of the caffeine – to soak a new batch of coffee beans. This step lets the flavor compounds lost during the soaking process reenter the beans. </p>

<figure>
            <p><iframe data-src="https://www.youtube.com/embed/tAEQ4G-1jTQ?wmode=transparent&amp;start=0" frameborder="0" allowfullscreen="" width="100%" height="400"></iframe></p>
            <figcaption><span>This animation shows the steps to the Swiss water process.</span></figcaption>
          </figure>

<p>The <a href="https://www.swisswater.com/pages/coffee-decaffeination-process">Swiss water process</a> is prized for its chemical-free approach and its ability to preserve most of the coffee’s natural flavor. This method <a href="https://www.scientificamerican.com/article/how-is-caffeine-removed-t/">has been shown to remove 94% to 96%</a> of the caffeine.</p>

<h2>Solvent-based methods</h2>

<p>This traditional and most common approach, <a href="https://www.scientificamerican.com/article/how-is-caffeine-removed-t/">first done in the early 1900s</a>, <a href="https://checkyourdecaf.org/">uses organic solvents</a>, which are liquids that dissolve organic chemical compounds such as caffeine. Ethyl acetate and methylene chloride are two common solvents used to extract caffeine from green coffee beans. There are two main solvent-based methods. </p>

<p>In the direct method, producers soak the moist beans directly in the solvent or in a water solution containing the solvent. </p>

<p>The solvent extracts most of the caffeine and other chemical compounds with a similar solubility to caffeine from the coffee beans. The producers then remove the beans from the solvent after about 10 hours and dry them.</p>

<p>In the indirect method, producers soak the beans in hot water for a few hours and then take them out. They then treat the water with solvent to remove caffeine from the water. Methylene chloride, the most common solvent, does not dissolve in the water, so it forms a layer on top of the water. The caffeine dissolves better in methylene chloride than in water, so most of the caffeine stays up in the methylene chloride layer, which producers can separate from the water. </p>

<figure>
            <a href="https://images.theconversation.com/files/605838/original/file-20240709-17-s27jbd.png?ixlib=rb-4.1.0&amp;q=45&amp;auto=format&amp;w=1000&amp;fit=clip"><p><img alt="A diagram showing some of the ways to decaffeinate coffee." data-src="https://images.theconversation.com/files/605838/original/file-20240709-17-s27jbd.png?ixlib=rb-4.1.0&amp;q=45&amp;auto=format&amp;w=754&amp;fit=clip" data-srcset="https://images.theconversation.com/files/605838/original/file-20240709-17-s27jbd.png?ixlib=rb-4.1.0&amp;q=45&amp;auto=format&amp;w=600&amp;h=424&amp;fit=crop&amp;dpr=1 600w, https://images.theconversation.com/files/605838/original/file-20240709-17-s27jbd.png?ixlib=rb-4.1.0&amp;q=30&amp;auto=format&amp;w=600&amp;h=424&amp;fit=crop&amp;dpr=2 1200w, https://images.theconversation.com/files/605838/original/file-20240709-17-s27jbd.png?ixlib=rb-4.1.0&amp;q=15&amp;auto=format&amp;w=600&amp;h=424&amp;fit=crop&amp;dpr=3 1800w, https://images.theconversation.com/files/605838/original/file-20240709-17-s27jbd.png?ixlib=rb-4.1.0&amp;q=45&amp;auto=format&amp;w=754&amp;h=533&amp;fit=crop&amp;dpr=1 754w, https://images.theconversation.com/files/605838/original/file-20240709-17-s27jbd.png?ixlib=rb-4.1.0&amp;q=30&amp;auto=format&amp;w=754&amp;h=533&amp;fit=crop&amp;dpr=2 1508w, https://images.theconversation.com/files/605838/original/file-20240709-17-s27jbd.png?ixlib=rb-4.1.0&amp;q=15&amp;auto=format&amp;w=754&amp;h=533&amp;fit=crop&amp;dpr=3 2262w" sizes="(min-width: 1466px) 754px, (max-width: 599px) 100vw, (min-width: 600px) 600px, 237px" src="https://images.theconversation.com/files/605838/original/file-20240709-17-s27jbd.png?ixlib=rb-4.1.0&amp;q=45&amp;auto=format&amp;w=754&amp;fit=clip"></p></a>
            <figcaption>
              <span>A few chemical processes can remove the caffeine from coffee beans.</span>
              <span><a href="https://www.compoundchem.com/2018/09/26/coffee-decaffeination/">Andy Brunning/Compound Interest</a>, <a href="http://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC</a></span>
            </figcaption>
          </figure>

<p>As in the Swiss water method, the producers can reuse the “caffeine-free” water, which may return some of the flavor compounds removed in the first step. </p>

<p>These methods remove <a href="https://www.scientificamerican.com/article/how-is-caffeine-removed-t/">about 96% to 97% of the caffeine</a>.</p>

<h2>Is decaf coffee safe to drink?</h2>

<p>One of the common solvents, ethyl acetate, comes naturally in many foods and beverages. It’s considered a <a href="https://www.consumerreports.org/coffee/is-decaffeinated-coffee-bad-for-you/">safe chemical for decaffeination</a> by the Food and Drug Administration. </p>

<p>The FDA and the Occupational Safety and Health Administration have deemed methylene chloride unsafe to consume at concentrations above 10 milligrams per kilogram of your body weight. However, the amount of residual methylene chloride found in roasted coffee beans is <a href="https://doi.org/10.1080/10408699991279231">very small – about 2 to 3 milligrams per kilogram</a>. It’s <a href="https://www.consumerreports.org/coffee/is-decaffeinated-coffee-bad-for-you/">well under the FDA’s limits</a>.</p>

<p>OSHA and its European counterparts have <a href="https://www.osha.gov/laws-regs/regulations/standardnumber/1910/1910.1052">strict workplace rules</a> to minimize methylene chloride exposure for workers involved in the decaffeination process. </p>

<p>After producers decaffeinate coffee beans using methylene chloride, they steam the beans and dry them. Then the coffee beans are roasted at high temperatures. During the steaming and roasting process, the beans get hot enough that residual methylene chloride evaporates. The roasting step also produces new flavor chemicals from the breakdown of chemicals into other chemical compounds. These give coffee its distinctive flavor.</p>

<p>Plus, most people brew their coffee at <a href="https://www.consumerreports.org/coffee/is-decaffeinated-coffee-bad-for-you/">between 190 F to 212 F</a>, which is another opportunity for methylene chloride to evaporate.</p>

<h2>Retaining aroma and flavor</h2>

<p>It’s chemically impossible to dissolve out only the caffeine without also dissolving out other chemical compounds in the beans, so decaffeination inevitably removes some other compounds that contribute to the aroma and flavor of your cup of coffee. </p>

<p>But some techniques, like the Swiss water process and the indirect solvent method, have steps that may reintroduce some of these extracted compounds. These approaches probably can’t return all the extra compounds back to the beans, but they may add some of the flavor compounds back.</p>

<p>Thanks to these processes, you can have that delicious cup of coffee without the caffeine – unless your waiter accidentally switches the pots.</p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Switzerland Makes Open Source Software Mandatory for Public Sector (138 pts)]]></title>
            <link>https://news.itsfoss.com/switzerland-open-source/</link>
            <guid>41066984</guid>
            <pubDate>Thu, 25 Jul 2024 10:40:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.itsfoss.com/switzerland-open-source/">https://news.itsfoss.com/switzerland-open-source/</a>, See on <a href="https://news.ycombinator.com/item?id=41066984">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
<div>
<p><a href="https://www.pikapods.com/?utm_campaign=banner-2024-05&amp;utm_source=itsfoss" target="_blank"><img src="https://news.itsfoss.com/assets/images/pikapods-banner-v3.webp"></a></p><p>Many governments around Europe have been trying to break free from the shackles of closed-source software by <a href="https://news.itsfoss.com/german-state-ditches-microsoft/">moving away</a> from the various offerings by Big Tech, and other competing firms. </p><p>However, in a more wide-ranging move, <a href="https://en.wikipedia.org/wiki/Switzerland?ref=news.itsfoss.com">Switzerland</a>'s government has implemented something truly unique that's rarely seen in today's <a href="https://en.wikipedia.org/wiki/Big_Tech?ref=news.itsfoss.com" rel="noreferrer">Big Tech</a>-dominated world.</p><h2 id="governments-around-the-world-need-to-catch-up">Governments Around The World Need To Catch Up</h2><figure><img src="https://news.itsfoss.com/content/images/2024/07/EMBAG.jpg" alt="a screenshot of a translated excerpt from the official draft for embag" loading="lazy" width="1130" height="824" srcset="https://news.itsfoss.com/content/images/size/w600/2024/07/EMBAG.jpg 600w, https://news.itsfoss.com/content/images/size/w1000/2024/07/EMBAG.jpg 1000w, https://news.itsfoss.com/content/images/2024/07/EMBAG.jpg 1130w" sizes="(min-width: 720px) 720px"><figcaption><span>A translated excerpt from the official draft for EMBAG</span></figcaption></figure><p>Short for <a href="https://www.fedlex.admin.ch/eli/fga/2023/787/de?ref=news.itsfoss.com" rel="noreferrer">EMBAG</a>, the Federal Law on the Use of Electronic Means for the Fulfillment of Government Tasks was a landmark law passed back in 2023, which has recently been put into effect.</p><p>Under this, <strong>all public sector government agencies are required to use open-source software</strong>, with an additional obligation of open sourcing any source code developed by or for those agencies.</p><p>However, in cases where there might be conflicts with third-party rights, or security issues, the code may not be disclosed.</p><p>Moreover, under the same provisions of Article 9, <strong>there's also a mechanism for allowing such public agencies to offer additional services</strong> pertaining to maintenance, integration, infrastructure security, etc. for public benefit with appropriate payouts being made to cover such costs.</p><p><a href="https://www.linkedin.com/in/matthiasstuermer/?ref=news.itsfoss.com" rel="noreferrer">Dr. Matthias Stürmer</a>, Head of the Institute for Public Sector Transformation at Bern University, is credited to being one of the loudest voices behind the need for such openness in the Swiss government.</p><p>During a conversation with <a href="https://joinup.ec.europa.eu/collection/open-source-observatory-osor/news/new-open-source-law-switzerland?ref=news.itsfoss.com">Open Source Observatory</a>, he added that:</p><blockquote>Switzerland's new 'public money public code' law is a great opportunity for government, the IT industry and society. </blockquote><blockquote>All stakeholders benefit from this new regulation since the public sector can reduce vendor lock-in, companies can grow their digital business solutions, and taxpayers spend less on IT solutions and receive better services due to increased competition and innovation.</blockquote><p>If you want to dive deeper into how EMBAG came to be, you can go through Dr. Stürmer's <a href="https://www.ti8m.com/de/blog/open-source-gesetz-schweiz?ref=news.itsfoss.com">detailed blog</a>, which is written in German. You can use your browser's translator to read it, or paste the contents into an online translation tool.</p><p><em>💬 Would you like your government to do the same? Let me know below!</em></p><p>Via: <a href="https://www.zdnet.com/article/switzerland-now-requires-all-government-software-to-be-open-source/?ref=news.itsfoss.com" rel="noreferrer">ZDNET</a></p><p><strong>Suggested Read </strong>📖</p><figure><a href="https://news.itsfoss.com/german-state-ditches-microsoft/"><div><p>Wow! German State Ditches Microsoft for Open-Source Software</p><p>The end of dominance for Microsoft in this German state, replacing Windows with Linux, and Office with Libreoffice.</p><p><img src="https://news.itsfoss.com/content/images/size/w256h256/2022/08/android-chrome-192x192.png" alt=""><span>It's FOSS News</span><span>Sourav Rudra</span></p></div><p><img src="https://news.itsfoss.com/content/images/2024/04/german-state-de-microsoft-campaign.png" alt=""></p></a></figure>

<hr>
<h2 id="more-from-its-foss">More from It's FOSS...</h2>
<ul>
<li>Support us by opting for <a href="https://itsfoss.com/#/portal/signup">It's FOSS Plus</a> membership.</li>
<li>Join our <a href="https://itsfoss.community/">community forum</a>.</li>
<li>📩 Stay updated with the latest on Linux and Open Source. Get our <a href="https://itsfoss.com/newsletter/">weekly Newsletter</a>.</li>
</ul>
</div>



</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Scraping 1k+ news sources and aggregating all Startup information (181 pts)]]></title>
            <link>https://old.reddit.com/r/hackernews/comments/1e5clqz/show_hn_scraping_1k_news_sources_and_aggregating/</link>
            <guid>41066866</guid>
            <pubDate>Thu, 25 Jul 2024 10:21:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://old.reddit.com/r/hackernews/comments/1e5clqz/show_hn_scraping_1k_news_sources_and_aggregating/">https://old.reddit.com/r/hackernews/comments/1e5clqz/show_hn_scraping_1k_news_sources_and_aggregating/</a>, See on <a href="https://news.ycombinator.com/item?id=41066866">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="searchexpando"><p><label>limit my search to r/hackernews</label></p><div id="moresearchinfo"><p>use the following search parameters to narrow your results:</p><dl><dt>subreddit:<i>subreddit</i></dt><dd>find submissions in "subreddit"</dd><dt>author:<i>username</i></dt><dd>find submissions by "username"</dd><dt>site:<i>example.com</i></dt><dd>find submissions from "example.com"</dd><dt>url:<i>text</i></dt><dd>search for "text" in url</dd><dt>selftext:<i>text</i></dt><dd>search for "text" in self post contents</dd><dt>self:yes (or self:no)</dt><dd>include (or exclude) self posts</dd><dt>nsfw:yes (or nsfw:no)</dt><dd>include (or exclude) results marked as NSFW</dd></dl><p>e.g. <code>subreddit:aww site:imgur.com dog</code></p><p><a href="https://www.reddit.com/wiki/search">see the search faq for details.</a></p></div><p><a href="https://www.reddit.com/wiki/search" id="search_showmore">advanced search: by author, subreddit...</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[CrowdStrike will be liable for damages in France (310 pts)]]></title>
            <link>https://thehftguy.com/2024/07/25/crowdstrike-will-be-liable-for-damages-in-france-based-on-the-ovh-precedent/</link>
            <guid>41066811</guid>
            <pubDate>Thu, 25 Jul 2024 10:07:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thehftguy.com/2024/07/25/crowdstrike-will-be-liable-for-damages-in-france-based-on-the-ovh-precedent/">https://thehftguy.com/2024/07/25/crowdstrike-will-be-liable-for-damages-in-france-based-on-the-ovh-precedent/</a>, See on <a href="https://news.ycombinator.com/item?id=41066811">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
		<main id="main" role="main">

		
			<article id="post-18235">
		<!-- .entry-header -->

	<div>
					
<p>Hello,</p>



<p>Today I am doing a quick post to cover the recent CrowdStrike incident that is estimated <a href="https://www.bbc.co.uk/news/articles/cpe3zgznwjno">to have disabled 8.5M computers </a>and <a href="https://www.theguardian.com/technology/article/2024/jul/24/crowdstrike-outage-companies-cost">caused more than $5.4B in damages</a> since last week.</p>



<p>Now a common questions is whether CrowdStrike will be liable for damages? The answer is most certainly yes. There is actually a very similar case that was brought to court a few years ago regarding the <a href="https://fr.wikipedia.org/wiki/Incendie_du_centre_de_donn%C3%A9es_d%27OVHcloud_%C3%A0_Strasbourg">OVH incident</a>, in France. While it applies to France, which is the jurisdiction I am the most familiar with, the same principles will apply to many other jurisdictions.</p>



<p>One quick note to clear a common misconception before we begin. Most contracts have boilerplate terms to waive liability, there is a common misconception that they may waive liability, however they do not. These terms have no meaning in most jurisdiction outside of the US and either way, it’s not possible to waive liability in most circumstances (e.g. anything involving gross negligence, criminal activities or going against the law itself).</p>



<h2>About OVH</h2>



<p>OVH is a French datacenter and cloud provider, allegedly the largest hosting provider in Europe. They are most known for providing physical servers and virtual machines, as well as a variety of cloud services.</p>



<p>A fire broke out on 10th March 2021 in their SGB location. It burned down two datacenters SGB1 SGB2 with little or no recovery and rendered two more datacenters SGB3 SGB4 inoperable for a while.</p>



<p>What is interesting is the aftermath. Multiple sites were destroyed causing irrecoverable loss of service and loss of data to their customers. Multiple customers pursued them in court for damages and they won. </p>



<p>I found there were a few interesting points raised and discussed by the court:</p>



<ul>
<li>(Skipping the elements about the fire itself, to focus on the service and tech)</li>



<li>There was complete loss of service during and after the event</li>



<li>There was complete irrecoverable loss of data after the event</li>



<li>OVH provided a backup service for their machines and services</li>



<li>There was complete irrevocable loss of the backups after the event</li>



<li>There were multiple datacenters in nearby locations, as is standard practice to provide some resiliency: SGB1 SGB2 SGB3 SGB4</li>



<li>Multiple datacenters burned down at once.</li>



<li>The multiple datacenters were in fact in the same place, a few steps apart. That was considered unexpected and not reasonable by the court.</li>



<li>The backups were stored in the same datacenter or in the other datacenter that might happen to be in the same place. That was not considered reasonable by the court.</li>



<li>OVH tried to argue that customers should have followed good practice of having multiple backups in separate locations. The court acknowledged it was the good practice.</li>



<li>The court determined OVH was the backup provider, the court determined it was the role of OVH to provide backups to a reasonable standard and observe good practices. This includes storing a copy of the backup elsewhere as is good practice.</li>



<li>The court ruled the OVH backup service was not operated to a reasonable standard and failed at its purpose.</li>
</ul>



<p>I find it interesting for techies, the court will judge your tech and what can really be considered best practices. It’s like the ultimate code review 😀</p>



<p>To summarize how things work: harm done + intent to cause harm or negligence = potential for damages</p>



<p>There is significant harm caused to customers, as entire businesses were shutdown, often indefinitely with complete data loss and no possibility to recover. There are multiple occurrences of negligence, mistakes or questionable practices in how OVH was operating the service, which lead to the issue. It’s a solid case. There are multiple customers who opened a case against OVH and won. There may be more still being processed.</p>



<p>That brings us to CrowdStrike. The similarities are striking!</p>







<h2>About CrowdStrike</h2>



<p>CrowdStrike is an anti-virus software that is installed on computers. It’s sometimes called an EDR (Endpoint Detection and Response) these days. It’s mostly installed on corporate devices in large companies, as they are required to have a security solution.</p>



<p>CrowdStrike runs on startup of the computer. It is deeply embedding itself into the operating system (Windows or Linux) at a kernel level, to run as soon as possible and before other things start. It monitors what runs, it can block and report anything that it deems suspicious.</p>



<p>On 19th July 2019, CrowdStrike pushed an update to their software. The update was bugged and crashed any computer it was deployed on. Millions of computers simultaneously received the update across the world and were rendered non functional. </p>



<p>I think there are multiple interesting points to raise and discuss:</p>



<ul>
<li>CrowdStrike runs at startup in a highly privileged mode (kernel driver on Windows) and it starts first.</li>



<li>It can prevent any other software and prevent the system itself from running, whether intentionally to block a threat or accidentally due to a bug or misjudging a non-threat.</li>



<li>It is deployed to millions of corporate devices in industries like banks, travel, supermarket, etc… it is largely targeted to critical industries and critical devices with confidential information.</li>



<li>It is a highly critical application operating in sensitive environments, which requires extra care to develop and to test.</li>



<li>On the day of the incident, CrowdStrike pushed the updates to millions of critical devices at once</li>



<li>Good practice requires to stage software upgrades.</li>



<li>How was it possible for CrowdStrike to ship a (broken) update to millions of devices in the span of minutes? Was there no testing and no staged rollout?</li>



<li>From discussion online, customers in hospitals have complained about this issue before and requested for CrowdStrike to allow some control on updates. One customers reported they were rejected with a 50 pages memo from CrowdStrike saying they refuse to stage anything.</li>



<li>Does CrowdStrike not have any ability to stage a rollout? They have repeatedly alluded that they did not and/or refused to. That may be in breach of regulated industries they sell to.</li>



<li>CrowdStrike is expected to be heavily tested to not disrupt the (critical) devices it is deployed to.</li>



<li>The update crashed any computer it was deployed to (BSOD).</li>



<li>How was it possible for an ostensibly broken update to not be detected before it was pushed to the outside world?</li>



<li>Does CrowdStrike do any testing whatsoever? Obviously they didn’t or the incident wouldn’t have happened.</li>



<li>It is not an isolated incident. The same thing happened few weeks earlier with the CrowdStrike agent on Linux, nuking the system and there may be other occurrences before.</li>



<li>After the bad update was pushed, it took nearly two hours for CrowdStrike to realize there was a problem and stop the update.</li>



<li>Developers working on critical software are required to monitor a deployment after deploying, to verify it’s working as expected and not causing issues.</li>



<li>What was CrowdStrike doing after deploying? Were they monitoring the deployment? Could they not notice that the update destroyed every machine it was deployed to?</li>



<li></li>



<li>All computers were rendered inoperable by CrowdStrike, unable to boot.</li>



<li>For affected companies, that left all their employees with a dead computer, unable to do anything.</li>



<li>It wasn’t possible for users to “access” the computer to raise a ticket or troubleshoot it.</li>



<li>It was a complete loss of service with no way to recover.</li>



<li>One way to fix the computer was for the IT team to be given the computer and completely reinstall (reimage) it.</li>



<li>Another way that was found later in the day, was for an administrator to access the computer physically AND try to boot in safe mode or recovery mode then delete the driver file for CrowdStrike. </li>



<li>This remediation can only be done with physical access to the affected computer AND by an administrator who has a special password (or USB key with the password) to start a laptop into recovery mode.</li>



<li>It will take weeks for affected companies to physically get a hand on every device, user laptop, desktop and server. It can be thousands to hundreds of thousands of devices to get to.</li>



<li>It will take longer for devices that are enclosed or difficult to access, like screen terminals in an airport, medical devices and machinery in a hospital, elevator panels.</li>



<li>It may be impossible to restore the device if the device is locked down somehow (physically blocked or recovery password unknown).</li>



<li>Employees who require a computer to work are unable to work during all that time. </li>



<li>It is not possible to provide a spare computer to affected users, the spares were affected by the issue too.</li>



<li>Crowstrike is a security software that was meant to keep computers running and protected from threats.</li>



<li>CrowdStrike destroyed the computers it was supposed to protect, it failed at its purpose.</li>
</ul>



<p>There is significant harm caused to customers. Businesses were partially or completely shutdown, for days or weeks. There are multiple occurrences of negligence, mistakes and questionable practices in how CrowdStrike was operating the service, which lead to the issue. The issue was not an isolated incident, as people have reported the same thing happened just few weeks before on a lesser scale.</p>



<p>That should leave CrowdStrike liable wide open to countless claims for damages.</p>



<p>Customers operating in regulated industries like healthcare, finance, aerospace, transportation, are actually required to test and stage and track changes. <a href="https://www.crowdstrike.co.uk/why-crowdstrike/crowdstrike-compliance-certification/">CrowdStrike claims to have a dozen certifications and standards</a> which require them to follow particular development practices and carry out various level of testing, but they clearly did not. The simple fact that CrowdStrike does not do any of that and actively refuses to, puts them in breach of compliance, which puts customers themselves in breach of compliance by using CrowdStrike. All together, there may be sufficient grounds to unilaterally terminate any CrowdStrike contracts for any customer who wishes to.</p>







<h2>Appendix</h2>



<p>As additional evidence, we can quote <a href="https://news.ycombinator.com/item?id=41007570">an employee working for BitLocker discussing their testing and rolling methodology</a>. BitLocker is a tool to securely encrypt the disk on your computer. It will prevent anybody else from reading any data if the computer is lost or stolen. It’s similarly critical. It’s the first thing to run on startup and nothing can run without it (no data can be loaded from disk). Any mistake or bug in BitLocker would render the computer unable to operate and render all data on it unreadable (full irrecoverable data loss, exactly like the OVH incident). They have many layers of testing, starting with testing on their own computer then their own team then other teams. Do CrowdStrike employees even have CrowdStrike running on their machine?</p>


<div>
<figure><img data-attachment-id="18251" data-permalink="https://thehftguy.com/2024/07/25/crowdstrike-will-be-liable-for-damages-in-france-based-on-the-ovh-precedent/image-6/" data-orig-file="https://thehftguy.com/wp-content/uploads/2024/07/image.png" data-orig-size="2694,447" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://thehftguy.com/wp-content/uploads/2024/07/image.png?w=300" data-large-file="https://thehftguy.com/wp-content/uploads/2024/07/image.png?w=809" tabindex="0" role="button" width="1024" height="169" src="https://thehftguy.com/wp-content/uploads/2024/07/image.png?w=1024" alt=""></figure></div>






<p>As additional evidence, we can quote another <a href="https://news.ycombinator.com/item?id=41007575">employee working for a non identified company</a>, who claims their company was hit by a previous CrowdStrike issue, they formally requested for CrowdStrike to allow staged rollout, CrowdStrike refused and sent back a 50 pages memo categorically refusing the idea. If that is true, this memo may now constitute critical evidence against CrowdStrike.</p>



<figure><img data-attachment-id="18254" data-permalink="https://thehftguy.com/2024/07/25/crowdstrike-will-be-liable-for-damages-in-france-based-on-the-ovh-precedent/image-8/" data-orig-file="https://thehftguy.com/wp-content/uploads/2024/07/image-2.png" data-orig-size="2696,472" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://thehftguy.com/wp-content/uploads/2024/07/image-2.png?w=300" data-large-file="https://thehftguy.com/wp-content/uploads/2024/07/image-2.png?w=809" tabindex="0" role="button" width="1024" height="179" src="https://thehftguy.com/wp-content/uploads/2024/07/image-2.png?w=1024" alt=""></figure>





			
								</div><!-- .entry-content -->

	<!-- .entry-footer -->
</article><!-- #post-## -->

				<!-- .navigation -->
	
			
<!-- #comments -->

		
		</main><!-- #main -->
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Defense of Lisp macros: The automotive field as a case in point (128 pts)]]></title>
            <link>https://mihaiolteanu.me/defense-of-lisp-macros</link>
            <guid>41066544</guid>
            <pubDate>Thu, 25 Jul 2024 09:18:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mihaiolteanu.me/defense-of-lisp-macros">https://mihaiolteanu.me/defense-of-lisp-macros</a>, See on <a href="https://news.ycombinator.com/item?id=41066544">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="contents">
            

            <p> <em>Replacing Lisp's beautiful parentheses with dozens of special tools and
                languages, none powerful enough to conquer the whole software landscape, leads to
                fragmentation and extra effort from everyone, vendors and developers alike. The
                automotive field is a case in point.</em>
            </p>

            <ul>
                    <a href="#intro">
                        <li>Intro</li>
                    </a>
                    <a href="#three-problems">
                        <li>The three basic problems all tools try to solve</li>
                    </a>
                    <a href="#automotive-tools">
                        <li>Automotive has special tools and languages for everything</li>
                    </a>
                    <a href="#live-systems">
                        <li>The need to interact with a running system childbirths more tools</li>
                    </a>
                    <a href="#language-environment">
                        <li>A language is not just its syntax but the tools and environment around it</li>
                    </a>
                    <a href="#non-formal-methods">
                        <li>Rules and processes are enforced with non-formal methods</li>
                    </a>
                    <a href="#dsls">
                        <li>Domain specific languages are everywhere</li>
                    </a>
                    <a href="#autosar">
                        <li>Move away from the language completely and just click buttons</li>
                    </a>
                    <a href="#the-future">
                        <li>The future: self-driving cars go all in on DSLs</li>
                    </a>
                    <a href="#conclusion">
                        <li>Conclusion</li>
                    </a>                    
                </ul>
            

            <p id="intro">
                <h2>Intro</h2>
            </p>
            <p> The fearsome Lisp macros and other aliens brought to life by the Lisp parentheses
                often get the blame for breeding a style of software development rich in
                abstractions and <a target="_blank" href="https://wiki.c2.com/?StumblingBlocksForDomainSpecificLanguages">domain
                specific languages</a> in contrast to the easily recognizable C-like creatures. What
                is not officially admitted is that in any project or industry of sufficient size, an
                overabundance of better, improved, simple, easy to use tools, programming languages,
                standards and best practices are employed and brought to life in an ah-hoc manner. A
                confirmation of <a target="_blank" href="https://en.wikipedia.org/wiki/Greenspun's_tenth_rule">Greenspun's Tenth
                Rule</a>, if you will. Though the motivation behind this proliferation be that "this
                is just the way things are" or that "the project is just too complex", part of
                reason lies in the use of programming languages that lack power, extensibility and
                interactivity. </p>

            <p> I'll look at the automotive industry which relies solely on the C programming
                language, at least on the surface, and bring to light these hidden creatures. When a
                people is not powerful enough to rule the whole continent, every beggar together
                with their pack of hideous horses vies for their neighbor's riches. The landscape is
                fractured and tens of languages and dialects are spoken. All journeys take much
                longer than usual. Pacts, alliances and agreements for safe passage with all tribe
                leaders need to be signed and constantly updated. One sees in their voyage countless
                rituals none better or more widespread than the other. Without a powerful language
                to hold it all together, the automotive world is also split into pieces with each
                wannabe king claiming it has found the path to the happy life and deserves to mount
                the throne. Watch for this sign in what follows and for the three main problems all
                these tools try to solve once and for all.  </p>

            
            <p id="three-problems">
                <h2> The three basic problems all tools try to solve </h2>
            </p>
            <p> Firstly, how to find out what your application is doing in real time once it is up
                and running. How to check your assumptions, backtrack, readjust and try again, how
                to have access to as many parts of the running system as possible and how to modify
                anything without slowing down your pace, like a road cyclist who doesn't need to
                stop at every curb to change gears and loose momentum. How to achieve all this
                seamlessly and concentrate on the project itself and not the tooling and the
                irrelevant problems around it. In short, how to be one with the system at all stages
                of development with as few interruptions as possible.  </p>

            <p>
                Secondly, how to come up with more intuitive and powerful means to develop, express
                and even comprehend whole software systems above the minutest details of algorithms
                and if's and else's. The classic "can't see the forest for the trees " idiom. What
                does the system do at a higher level? How it is organized? How can I easily and
                meaningfully change it without going into too much pointer arithmetic details? How
                do I speak about it, how do I cram it all up inside my brain to aid my understanding
                and explore it in my mind or with my colleagues and clients to better get the
                message across and align on goals and purposes. Ideally, it would be in a language
                closer to English or a language that everybody speaks fluently or even something
                visual I can slurp up all at once, like a painting that I can glance instantly and
                not a book that takes weeks to read, though of course, now I need some training or
                experience in the arts to understand anything and there are myriads of
                interpretation of those brushes before my eyes. But still, a language that is
                formally verifiable and able to be evaluated by a computer without much intervention
                from my side. This is the heart of abstraction towers and of domain specific
                languages. Many tools try to solve this problem without even knowing it.
            </p>

            <p>
                Lastly, how to organize everything around the main programming language. What tools
                are best for building or packaging your software, what tools for writing code and
                how to settle on a definition of "best". How to organizing teams, agree on
                standards, writing style, where to keep requirements and how to keep them in sync
                with the implementation. How to make sure everyone is on the same page regarding the
                language features, how to use those features in a standard way and what to avoid,
                either because one wants to prevent different ways of doing things or because some
                of those things are really dangerous. How to solve the "shortage of qualified
                people" problem which branches into how to make things more beginner friendly,
                easier and intuitive by avoiding C pointers and C macros and recursion, for example
                and by employing GUI tools and code generators that avoid these pitfalls. Only to
                fall into different mousetraps, of course.
            </p>

            <p>
                All solutions, the problems they beget and again the solutions to fix them in this
                never-ending circle all spring from these initial needs and wants.
            </p>

            <p id="automotive-tools">
                <h2>Automotive has special tools and languages for everything</h2>
            </p>
            <p>
                A car's software is split into dedicated <a target="_blank" href="https://en.wikipedia.org/wiki/Electronic_control_unit">ECU</a>s,
                each controlling the seats, windows or engine, among others. These microcontrollers
                with memory and peripherals and developed independently by different teams are all
                connected by a single communication network and exchange thousands of uniquely
                identified <a target="_blank" href="https://en.wikipedia.org/wiki/CAN_bus">CAN</a> messages
                each second. To simplify, each ECU behaves like a server, and the list of messages
                it sends and receives represents its API. These are the microservices of the
                automotive world, if you will.
            </p>

            <p>
                At a minimum, an ECU must receive wake-up and periodic CAN messages from other ECUs
                to function properly. In the development phase, where these other ECUs are
                physically missing from one's desk, an engineer needs to simulate them in software
                together with the ability to sniff out CAN messages from their physical ECU, similar
                to what a <a target="_blank" href="https://en.wikipedia.org/wiki/Wireshark">Wireshark</a> user
                sniffing network packets does. In a first sign of wannabe sole rulers across wast
                landscapes, Vector's
                <a target="_blank" href="https://www.vector.com/int/en/products/products-a-z/software/canoe/">CANoe</a>,
                is "the only tool for all development and test tasks and a versatile tool for
                the development, testing and analysis of entire ECU networks as well as individual
                ECUs."
            </p>

            <p>
                In my experience, at the start of any new project it best to first discover the
                project at the fastest speed possible, with the full knowledge that my initial
                solution will not be correct and most of my code will not even survive the first few
                iterations. The classic "build one to throw one away" idiom. These iterations will
                help understand and even rewrite some of my initial assumptions. In extreme cases
                even to confirm that what I'm trying to develop is useless or impossible to
                build. This then is the first step in developing a software product or probably any
                handiwork. CANoe, and plenty of other tools in this field, confirms this need and
                that C is not the right tool to be going out exploring dangerous paths in the middle
                of the night,
            </p>

            <blockquote>
                <p>
                    At the beginning of the development process, CANoe is used to create simulation
                    models which simulate the behavior of the ECUs. Over the further course of ECU
                    development, these models serve as the basis for analysis, testing and the
                    integration of bus systems and ECUs. This makes it possible to detect problems
                    early and correct them. Graphic and text based analysis windows are provided for
                    evaluating the results.
                </p>
                <p>
                    <a target="_blank" href="https://cdn.vector.com/cms/content/products/canoe/canoe/docs/Product%20Informations/CANoe_ProductInformation_EN.pdf">
                        CANoe: Product Information</a>
                </p>
            </blockquote>

            <p>
                To aid this purpose, CANoe's
                <a target="_blank" href="https://cdn.vector.com/cms/content/products/canoe/canoe/graphics/Gallery/CANoe14_Simulation_gallery_EN.jpg">simulation
                panel</a> contains a visual representation of a car's network and the attached ECUs
                with the intention of simulating the whole car before writing any C code. Each ECU
                can be clicked around and programmed in <a target="_blank" href="https://www.vector.com/us/en/know-how/capl/">CAPL</a>,
                an event-driven programming language developed by Vector. It has C-like syntax,
                intentionally chosen to make C developers feel right at home, as Vector notes, while
                also acknowledging is doesn't introduce any groundbreaking ideas or
                abstractions. Instead, it tries to make life easier for engineers: "the goal of CAPL
                has always been to solve specific tasks as simply as possible. Typical tasks are
                reacting to received messages, checking and setting signal values and sending
                messages. A program should restrict itself to precisely these things and not require
                any additional overhead." The
                <a target="_blank" href="https://www.vector.com/int/en/know-how/capl/">
                    CAPL know-how</a> page has all the details.
            </p>

            <p>
                This software <a target="_blank" href="https://www.google.com/search?q=model%20based%20development">modeling</a>
                and the introduction of new, easier, intuitive, even graphical languages and
                interfaces similar in style to what one is already familiar with is a recurring
                theme throughout this journey. Watch out for it.
            </p>

            <p>
                CANoe's
                <a target="_blank" href="https://cdn.vector.com/cms/content/products/canoe/canoe/graphics/Gallery/CANoe17.3_Analysis_gallery_EN.jpg">
                trace panel</a> displays all the messages on a CAN network, the sniffing requirement
                I've mentioned above. All messages have unique ids and each message's payload
                contains one or more signals that are attached a predefined meaning, like
                <em>ignition_on</em> or <em>vehicle_speed</em>. Thus, on receiving a CAN message, a
                hypothetical ECU implementation in C would first check its id in a big switch case,
                let's say. If the id is from the approved list of messages, C goes on and reads the
                payload. We can imagine getters and setters for such signals, like <em>getIgnitionStatus</em> or a
                periodically called function like <em>sendVehicleSpeed</em> that sends this info out
                on the CAN network for all the other ECUs to see. All this data about ids, messages
                and signals can be hard coded, but if it would, CANoe and similar tools would have a
                hard time deciphering what are essentially just bytes on a wire and the user would,
                in the best scenario, only see hexadecimal values in their graphical
                interfaces. They would have to either check the source code to see what they mean or
                some kind of a table like an excel sheet shared by all team members where all
                message ids and signals are kept together and assigned human-readable tags and extra
                info. So to make life "easier" for everyone the list of all CAN messages available
                on a network, together with the ECUs that send or receive them is kept in a
                <a target="_blank" href="http://mcu.so/Microcontroller/Automotive/dbc-file-format-documentation_compress.pdf">dbc</a> database
                that is then used by both the C implementation and the visual tools, a proprietary
                file format also developed by Vector. I've put the easier part into quotes. Every
                time I see something advertised as easy and intuitive I'm seeing green meadows and
                leafy forests, blood-sucking ticks waiting in the ambush.
            </p>

            <p>
                Take a look at a
                <a target="_blank" href="https://hackage.haskell.org/package/ecu-0.0.8/src/src/j1939_utf8.dbc">
                    dbc file example</a>. Not human readable. The handling of these databases which,
                by the way, are now officially part of the project's requirements and managed by the
                client, is done with yet another tool:
                <a target="_blank" href="https://www.vector.com/int/en/products/products-a-z/software/candb/">
                    CANdb</a>. Interestingly, dbc files do not contain the default values nor the interval at
                which signals must be sent, so this extra info is kept in some other medium, like
                <a target="_blank" href="https://stackoverflow.com/questions/48151369/how-to-generate-signal-possible-values-from-dbc-as-a-generic-output-with-capl">
                    excel files</a>, as seen it in practice.
            </p>

            <p>
                But see what problem this need of ours to express CAN messages in a human-readable
                format introduces? Now the list of CAN messages is extracted away from the
                implementation language, extracted and expressed in a format the C language does not
                understand. As a result, every time the client updates the database, the developer
                has to manually translate each and every message from the dbc and excel sheets back
                to source code. A developer's job, after all. Only this code is quite repetitive,
                huge, prone to fat fingers errors and really boring. All messages have the same
                structure only different names and different byte-orderings. The sane way is to let
                code generators do this job. But code generators are already a new language, the
                language they're implemented in and the language of how to use them. A rift has
                suddenly appeared out of the blue.
            </p>

            <p>
                Climb up that high mountain and observe the king's country. C is the implementation
                language for an ECU that handles well-structured CAN messages. Nothing fancy. But
                the need to display and send those messages from external tools, possibly through
                scripting languages, the need to handle these messages with tools that don't require
                programming skills, the need to gather them into a single file easy to peruse, talk
                about and exchange between teams, all these needs forces the list of such messages
                outside of the implementation language, outside of C. If C's syntax, with no outside
                help, would be able to express such and use such a list to generate its own
                functions, interfaces and header files from it, that is if C would be able to write
                C, then these extra tools, dbc files, excel sheets and extra build steps would not
                be needed. CANoe or any other tools on their part could use use this well-formatted
                list for their own needs. Even better, if that format would be human-readable as C
                code should be, even creating, editing, searching, diff-ing and reading these files
                in one's text editor, would be possible without extra tools. But that is not the
                case, and so, we have a fine display of foot soldiers instead of a beautiful white
                horse.
            </p>

            <p>
                To finish this discussion in glory and to confirm in the reader's eyes that in this
                particular case the introduction of a new language brings nothing really new just a
                slightly different syntax, check out the CAPL example from Vector's
                <a target="_blank" href="https://support.vector.com/sys_attachment.do?sys_id=a5a6bc0e1bfe18948e9a535c2e4bcb9b">
                    Tips and tricks for the use of CAPL</a>.
            </p>

            <p>
                As a side node, Vector considers C macros too powerful, though they don't shy away from
                their own macro flavors to aid in writing generic programs,
            </p>

            <blockquote>
                <p>
                    The preprocessor is a powerful tool in the C language, but it can also lead to
                    confusion and consequently to errors. Therefore, only a subset of the well-known
                    preprocessor directives in C is offered in CAPL with comparable semantics [...]
                    In CAPL, there are a number of predefined macros that are available to users for
                    use in the code or for conditional compiling.  Macros for use in the code can be
                    used anywhere in the code without restriction.  In contrast to C, macros may be
                    used freely within string constants, identifiers for variables, and function
                    names. They always begin and end with a % character, and they are primarily used
                    to write generic programs.
                </p>

                <p>
                <a target="_blank" href="https://cdn.vector.com/cms/content/know-how/_technical-articles/CAPL_2_CANNewsletter_201409_PressArticle_EN.pdf">
                    Tips and tricks for the use of CAPL
                </a>
                </p>
            </blockquote>

            <p>
                I've simplified things a bit for the sake of discussion and considered only CAN
                networks thus far, but it is worth mentioning that when there are other networks
                present as they usually are, dbc files are not enough. They can't express Lin,
                FlexRay, MOST or Ethernet networks. An new, xml-based file format is needed for
                that:
                <a target="_blank" href="https://hal.science/hal-02275436/document">FIBEX</a>. A
                first hint that <a target="_blank" href="https://www.defmacro.org/ramblings/lisp.html">xml is quite popular</a>
                for parentheses nay-sayers and a confirmation that the landscape is truly split into
                little kingdoms. I will quote a big chunk from the standard since it reiterates some
                of the things I've already covered and as such it might aid up the reader's
                understanding,
            </p>

            <blockquote>
                <p>
                    A single cluster (ECU) can transfer several hundred or even thousands of shared
                    signals. A network can contain several clusters that are interconnected via so
                    called gateways that transfer signals between them. Many protocols used within
                    the different clusters have been developed to support the different needs of a
                    wide range of applications. Among them are CAN, LIN, FlexRay, and
                    MOST. Obviously, the importance of communication technologies has been increased
                    dramatically.
                </p>

                <p>
                    Databases are necessary to store the information of all signals and their
                    parameters in order to manage efficiently these networks. That data is used for
                    various design and verification steps. Many dedicated tools have shown up on the
                    market to support that. However, their application focus may
                    differ. Unfortunately, no common format for the exchange of data between
                    different tools is presently available. The growing number of signals in a
                    reasonable network yields an increasing demand for a straightforward way to
                    exchange data to avoid an error prone manual handling of redundant
                    data. Furthermore, the fast-growing communication requirements of the
                    implemented functions result into an increasing number of new, extended, and
                    more dedicated tools. This increases the need for an exchange format that
                    supports better data handling.
                </p>

                <p>
                    FIBEX is an XML data structure that can describe a complete network within one
                    file. This data generally includes definitions of signals, frames, clusters, and
                    ECUs sending and receiving the signals. FIBEX can be used to transfer network
                    information between different tools. It is not intended to replace but to
                    supplement established standards that are often used to store data locally. The
                    coexistence with existing formats is regarded as an advantage since available
                    tools and standards can still be used. FIBEX provides a bridge between them.
                </p>

                <p>
                    FIBEX’ strength is seen in the field of tool integration, data exchange, and
                    data integrity. It is “more powerful” than most of the more dedicated
                    formats. For example a single instance can contain the description of clusters
                    with different protocols as well as the transfer function of the gateway between
                    them. FIBEX should be used as an extension whenever the specific format is not
                    sufficient. Since many tool vendors have announced to support FIBEX, a
                    conversion between FIBEX and specific formats should be well supported.
                </p>
                    
                <p>
                    <a target="_blank" href="https://hal.science/hal-02275436/document">FIBEX – An Exchange Format for Networks Based on Field Busses</a><br>
                    <a target="_blank" href="https://www.asam.net/standards/detail/mcd-2-net">ASAM MCD-2 NET</a>
                </p>
            </blockquote>

            <p id="live-systems">
                <h2>The need to interact with a running system childbirths more tools</h2>
            </p>
            <p>
                In a <a target="_blank" href="https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/#s16-lisp-as-a-system">perfect world</a> I
                can play with a running system directly from my text editor. I can change variables
                and check their values, I can call any function from anywhere and display, save and
                modify the return result of such calls instantly, I can scribble wild ideas directly
                in code with as little ceremony as possible, I can modify, update and define new
                functions on the go, all this without the need of extra tools, rebuild and restart
                steps. All the code is available at my fingertips, all features before my eyes, no
                hidden parts, no forbidden areas, perfect freedom, all cards on the table, both
                hands on the keyboard. What a joy!
            </p>

            <p>
                In the real world the hints of such joys start with a debugger but these joys are
                soon wrecked. Debuggers understand these time consuming, focus-assassins and
                debilitating "code change, rebuild, restart" cycles,
            </p>

            <blockquote>
                <p>
                    The classic debugging technique is to simply add trace code to the program to
                    print out values of variables as the program executes [...] First of all, this
                    approach requires a constant cycle of strategically adding trace code,
                    recompiling the program, running the program and analyzing the output of the
                    trace code, removing the trace code after the bug is fixed, and repeating these
                    steps for each new bug that is discovered. This is highly time consuming and
                    fatigue making. Most importantly, these actions distract you from the real task
                    and reduce your ability to focus on the reasoning process necessary to find the
                    bug.
                </p>

                <p>
                    <a target="_blank" href="https://www.amazon.com/Art-Debugging-GDB-DDD-Eclipse-ebook/dp/B002N3M6U4">
                    The Art of Debugging with GDB, DDD, and Eclipse</a>
                </p>
            </blockquote>

            <p>
                But debuggers only temporarily avoid the cycle, as any code changes still involve a
                rebuild. And they introduce new tools able to examine the state of a running system,
                tools with their own special terminology, user interfaces and scripting
                languages. On this last point, haven't you noticed that every intuitive, simple to
                understand, button-clicking tool is heaven in its birthing phases and can act as the
                true savior for a while? Until things get serious, at which point a real programming
                language is always produced for those repetitive or error-prone tasks. Windows
                people have figured that out and turned this problem into
                <a target="_blank" href="https://en.wikipedia.org/wiki/UiPath">fortunes</a>.
                <a target="_blank" href="https://news.ycombinator.com/item?id=41061237">Figma</a>
                people as well.
                <a target="_blank" href="https://news.ycombinator.com/item?id=14482988">Visual
                programming</a> to make life easier?! Regardless, the automotive world doesn't lack
                such scripting languages as each vendor promotes a different debugger for their own
                special microcontrollers. I'll mention Lauterbach's
                <a target="_blank" href="https://support.lauterbach.com/downloads/files/practice-reference-card-pdf-2">PRACTICE</a>
                scripting language with its ancient 
                <a target="_blank" href="https://www2.lauterbach.com/pdf/practice_user.pdf">GOTO statements</a>and
                macros of three different kinds (local, global or private) and even recursive
                macros. Macros' crusaders surely like the idea of macros. Check the documentation
                for the details.
            </p>            

            <p>
                There are alternatives to the use of debuggers in the automotive field, none better
                nor powerful enough to conquer all the other tribes, as I've already hinted in the
                introduction, not even the debugger itself. I'll look at two of them.
            </p>

            <p>
                Firstly, the
                <a target="_blank" href="https://raw.githubusercontent.com/Microrain-zh/uds_protocol/master/ISO_14229-1_2013.en.PDF.pdf">
                Unified Diagnostic Services (UDS)</a> or Diag, for short. It's a feature all ECUs
                must implement by law and it allows a car shop to configure, update, and check the
                ECU's status. Diag is still about sending CAN messages, or routines in
                Diag-speak. These are standardized messages used to read certain memory addresses,
                predefined identifiers which are mapped to variables in the C implementation, as
                well as to write them. In short, poke your ECU like it was a server with all kinds
                of GET or POST requests and
                <a target="_blank" href="https://cdn.vector.com/cms/content/products/canoe/canoe/graphics/Gallery/CANoe15_Diagnostics_gallery_EN.jpg">
                check its response</a> in CANoe's or other vendor's intuitive
                <a target="_blank" href="https://www.vector.com/int/en/products/products-a-z/software/canoe/diagnostics/">Diag</a>
                interface. The 400 pages long ISO standard has all the details,
            </p>

            <blockquote>
                <p>
                    Modern vehicles have a diagnostic interface for off-board diagnostics, which
                    makes it possible to connect a computer (client) or diagnostics tool, which is
                    referred to as tester, to the communication system of the vehicle. Thus, UDS
                    requests can be sent to the controllers which must provide a response (this may
                    be positive or negative). This makes it possible to interrogate the fault memory
                    of the individual control units, to update them with new firmware, have
                    low-level interaction with their hardware (e.g. to turn a specific output on or
                    off), or to make use of special functions (referred to as routines) to attempt
                    to understand the environment and operating conditions of an ECU to be able to
                    diagnose faulty or otherwise undesirable behavior.
                </p>

                <p>
                    <a target="_blank" href="https://en.wikipedia.org/wiki/Unified_Diagnostic_Services">Wikipedia: Unified Diagnostic Services</a><br>
                    
                </p>
            </blockquote>

            <p>
                In a shocking move, the dbc file format we've already seen is not designed to hold
                Diag messages though Diag messages are still just CAN messages. At 500 pages long,
                the ODX standard introduces a new xml-based file format to fill this gap,
            </p>

            <blockquote>
                <p>
                    The ODX specification contains the data model to describe all diagnostic data of
                    a vehicle and physical ECU, e.g. diagnostic trouble codes, data parameters,
                    identification data, input/output parameters, ECU configuration (variant coding)
                    data and communication parameters. ODX is described in Unified Modeling
                    Language (UML) diagrams and the data exchange format uses XML.
                </p>

                <p>
                    <a target="_blank" href="https://libgen.li/ads.php?md5=c5d5a0dc51624268ded4b34c632ec846">
                        ISO 22901-1: Road vehicles - Open diagnostic data exchange (ODX)</a>
                </p>
            </blockquote>

            <p>
                In a rare admission of a war campaign gone wrong, or to smear its adversaries and
                push its own solutions, Vector recognizes this is a complex beast one dares not tame
                with bare hands,
            </p>

            <blockquote>
                <p>
                    Until now, the process of creating ODX data has been restricted to just a
                    limited circle of experts, due to its complexity. The current specification
                    encompasses almost 400 pages. Users of the ODX data would rather concentrate on
                    their actual task, namely the development of diagnostic applications, without
                    having to deal with the specification or the data format and its dialects. With
                    suitable tool support this is possible.
                </p>

                <p>
                    <a target="_blank" href="https://cdn.vector.com/cms/content/know-how/_technical-articles/diagnostics/ODX_HanserAutomotive_200612_PressArticle_EN.pdf"> ODX in Practice: Experiences, challenges and potential</a>                   
                </p>
            </blockquote>

            <p>
                The suitable tool is Vector's
                <a target="_blank" href="https://www.vector.com/int/en/products/products-a-z/software/candelastudio">CANdelaStudio</a>.
                In a surprise move, the Diag data is not saved in the ODX format, as expected, but
                in its own proprietary CDD (CANdelaStudio Diagnostic Description) file format. It's
                the hunting season for file formats! The advantages section mentions that CDD files
                can be exported to other formats like CSV, HTML, ODX, RTF, XML,
                <a target="_blank" href="https://www.vector.com/at/en/products/application-areas/ecu-calibration/a2l-data-description">a2l</a>,
                DEXT or CDI (I couldn't find what this is). I'll quote Autosar's DEXT, and come back
                to Autosar itself later in this article, since it give some reasons why even ODX is
                not sufficient for all needs and even new standards and formats are needed,
            </p>

            <blockquote>
                <p>
                    The market shows a high demand for transferring diagnostic demands to [...]
                    suppliers. In the past, due to the absence of integral options, many file
                    formats like ODX or EcuC were often used. But neither ODX nor EcuC is well
                    suited to transfer this information. For example, ODX lacks in fault memory
                    details and EcuC has a very generic nature that renders the enforcement of a
                    strict model formalization very difficult. Therefore, the obvious solution
                    approach has been to define a new standardized AUTOSAR exchange format on
                    diagnostic functionality that can be used similar to a System Description,
                    formalized as an ARXML file.
                </p>

                <p>
                    <a target="_blank" href="https://www.autosar.org/fileadmin/standards/R20-11/CP/AUTOSAR_TPS_DiagnosticExtractTemplate.pdf">
                        AUTOSAR: Diagnostic Extract Template
                    </a>
                </p>
            </blockquote>

            <p>
                I've seen examples on the rigidness of these tools. Sometimes people want to
                highlight the features to be implemented in the next release or make some notes
                around them. Other times the team would ask the client if this or that Diag service
                can be added or this or that CAN message added, removed or modified, either because
                it was really wrong or because it was an internal message the team relies on. Since
                these visual tools do not provide the features to annotate, copy/paste, modify or
                comment out things, the teams relies on word documents, excel sheets, emails or just
                video calls and drawings on screen. With these, the places where one finds the
                project requirements increases as well, only because these languages developed to
                extend the original stiff language, are themselves not extendable by their users.
            </p>

            <p>
                Diag still doesn't solve the development speed problem. It has access to some
                predefined variables for reading and writing. It can call out functions through
                these Diag routines and all this helps. When one of these variables or some part of
                the code you're currently developing is not callable through any Diag routine, the
                solution is to implement such a routine which requires knowledge of how the Diag
                module works, something that might be outside your actual problem you're trying to
                solve. This still bring us back to a rebuild and reflash cycle.
            </p>

            <p>
                Secondly, the other alternative to a Debugger is Calibration. A new protocol and a
                new standard. A way to modify configuration options, or memory addresses, in a
                running ECU without touching the code The absence of any features to do so without
                recompiling the whole project is clearly stated as the motivation behind the
                standard,
            </p>

            <blockquote>
                <p>
                    The calibration of parameters is an essential part of ECU software
                    development. Once a new set of parameters has been determined, the next
                    development step is to run tests in order to evaluate the effectiveness of the
                    calibration. For this purpose, internal variables are read from memory and
                    transferred to a system that displays the data in a human-readable format.
                </p>

                <p>                    
                    In the early days of ECU development, the values of calibration parameters were
                    directly modified in the source code. Variables had to be made available for
                    data logging in the source code as well. Every change to parameters or the list
                    of measurable variables required modifications in the source code,
                    re-compilation and flashing of the ECU.
                </p>

                <p>
                    As the control software grew in complexity [...] this process became too
                    cumbersome and slow. Additionally, the process of measurement &amp; calibration
                    needed to be separated from the process of software development, because a
                    calibration engineer would need to change a parameter value or would want to
                    record the values from a measurement variable, he had to ask the software
                    developer to compile a new software version for him. This is the fundamental
                    motivation for the group of ASAM MCD standards. The MCD standard provided the
                    way to abstract the calibration from the physical memory locations.
                </p>

                <p>
                    <a target="_blank" href="https://www.asam.net/standards/detail/mcd-2-mc/wiki/">ASAM MCD-2 MC</a>                    
                </p>
            </blockquote>

            <p>
                CANoe's <a target="_blank" href="https://cdn.vector.com/cms/content/know-how/_technical-articles/CANoe_AMD_XCP_PressArticle_201812_EN.pdf">
                AMD/XCP</a> plugin offers another perspective on this issue,
            </p>

            <blockquote>
                <p>
                Option AMD/XCP extends CANoe by adding the ability to access ECU memory. This access is done via the
                ASAM-standardized XCP or CCP protocol and is convenient to configure with files in A2L format.
                </p>

                <p>
                CANoe offers access to internal ECU values via XCP/CCP for testing and analysis tasks. In contrast
                to the pure blackbox test, in which only the external ECU signals are stimulated and measured,
                internal values can also be calibrated and evaluated over XCP/CCP. Changes to these parameters lead
                to specific error states, and the resulting ECU behavior can be tested directly. It is also possible
                to test different variants of ECU software – switching is performed directly over XCP. Missing
                sensor values can also be simulated by writing values to the relevant memory locations via XCP/CCP.
                </p>

                <p>
                    <a target="_blank" href="https://cdn.vector.com/cms/content/products/canoe/canoe/docs/Product%20Informations/CANoe_ProductInformation_EN.pdf">CANoe: Product Information</a>
                </p>
            </blockquote>

            <p>
                An a2l file contains all the memory addresses we want to be able to read and write
                together with a meaning attached to each address, the size and the type of data one
                expects to find there (here is a
                <a target="_blank" href="https://github.com/christoph2/pyA2L/blob/18db093f9856a51d304dcde05f84b3d6e63b3d62/examples/example-a2l-file.a2l">a2l
                example file</a> and <a target="_blank" href="https://www.asam.net/index.php?eID=dumpFile&amp;t=f&amp;f=2132&amp;token=1672c6611f14141ae705140149a9401141821de0">ASAM's downloads section</a>
                offers additional examples). Functions that transform from one type of data to
                another are also defined in such files as there is a conversion of types between the
                target (ECU, C implementation) and the tools that use that data in a "human-readable
                format". For complex transformations where a real programming language is needed,
                the standard mentions a way to specify Windows DLL files in the a2l files. No
                mention of Linux, for example. Additionally the transfer protocol (XCP or CCP)
                between the PC must also be specified by a metalanguage (AML). This is the same rift
                we've seen before. Simplistically, one side needs to know what to ask for and to
                know how to interpret the response once it receives it; the other side needs to know
                where to look for the requested information. In the middle, someone must take care
                that the message gets across the valley through some medium (XCP or CCP),
            </p>

            <blockquote>
                <p>
                    To convert the ECU internal characteristic and measurement implementation values
                    into physical values, ASAM MCD-2 MC describes computation methods for their
                    conversion between both representations. Calibration engineers can work with the
                    ECU data in a familiar format without having to understand ECU-internal data
                    formats. Software engineers can provide this data to them or even get the
                    description files automatically generated from code generators. An include
                    mechanism ensures that description files can originate from different sources.
                </p>

                <p>
                    The ECU normally stores the measurement and calibration quantities internally in
                    an implementation optimized format. This format is very often a fixed-point
                    format. Outside the ECU physical models are used. The standard describes by
                    so-called record layouts how data are stored inside the ECU and which
                    computation methods are needed to transform the ECU internal data representation
                    into the physical one and vice versa.
                </p>

                <p>
                    The standard also allows to describe and configure the ECU interfaces or vendor
                    specific extensions by a meta description language (AML). For ASAM standardized
                    ECU interfaces, such as CCP and XCP the content of these AML parts are also
                    standardized. But there are also a lot of vendor specific instantiations in the
                    market which use this mechanism.
                </p>
                
                <p>    
                    Measurement and calibration systems are normally only used during development
                    phase of ECUs. They allow a direct, address-oriented write and read-access but
                    also a synchronous, continuous measurement access to ECU internal variables.
                </p>

                <p>
                    <a target="_blank" href="https://pdfcoffee.com/download/asam-ae-mcd-2-mc-bs-v1-7-1-pdf-free.html">ASAM MCD-2 MC (ASAP2 / A2L) - Data Model for ECU Measurement and Calibration (Version 1.7.1)</a>
                </p>
            </blockquote>

            <p>
                This is another non-human readable file format to be handled only with tools. Since
                the memory addresses in a2l files are hard coded, any C code change that results in a
                change of allocated addresses after a build must lead to a change in the a2l file as
                well, or we'll read and write a different location than the one we'd expect to. This
                step is done with code generator tools, as confirmed even by the official
                documentation.
            </p>

            <p>
                Tools and standards, a protocol (XCP, not CAN) and a file format (a2l) are needed to
                access what are practically variables from a running application,
            </p>

            <blockquote>
                <p>
                    With the XCP protocol standardized by ASAM, the user can read individual values
                    directly from the ECU as needed. Once the A2L file has been configured and the
                    necessary values selected, CANoe automatically acquires them and maps them as system
                    variables. The user can then use these variables in any of the testing
                    tasks. Besides offering access to ECU inputs and outputs, they also provide an
                    in-depth look into the ECU’s memory.
                </p>

                <p>
                    <a target="_blank" href="https://cdn.vector.com/cms/content/know-how/_technical-articles/CANoe_AMD_XCP_PressArticle_201812_EN.pdf">
                        Vector: A Look Behind the Scenes; ECU testing with XCP support</a>                    
                </p>
            </blockquote>

            <p>
                The testing phase itself is done with CAPL or with CANape as we'll soon see. One
                extracts the values of variables from a running ECU, maps them through an a2l file,
                makes them available to one's system and uses them for testing purposes using a
                different language than the language used to implement the system in the first
                place. Does that sound "simple"? No need to stress it, but any bugs or missing
                features found in this way will need to be fixed by modifying the C code, the
                language the actual system is implemented in. So back again to the rebuild cycle.
            </p>

            <p>
                The a2l files specify the addresses and what goes where, a sort of an API, if you
                will. But the actual data to be written or read from an ECU is stored in a different
                format.
                <a target="_blank" href="https://www.asam.net/standards/detail/cdf/wiki/">ASAM
                CDF</a> specifies an XML file format for this purpose while the
                <a target="_blank" href="https://www.asam.net/standards/detail/mdf/wiki/">ASAM MDF</a>
                a "very efficient binary format". As well as the a2l example mentioned above, the
                ASAM's website
                <a target="_blank" href="https://www.asam.net/standards/detail/cdf/wiki/">downloads section</a>
                also has
                <a target="_blank" href="https://www.asam.net/index.php?eID=dumpFile&amp;t=f&amp;f=2132&amp;token=1672c6611f14141ae705140149a9401141821de0">
                cdf and mdf file examples</a>.
            </p>

            <p>
                Vector has found "clever" ways to generate the a2l files, either through
                <a target="_blank" href="https://cdn.vector.com/cms/content/products/asap2/ASAP2Tool-Set_Screenshot_EN.png">ASAP2 Studio</a>'s
                "intuitive" interface
                <a target="_blank" href="https://www.vector.com/at/en/products/application-areas/ecu-calibration/a2l-data-description">among
                others</a>, but also from source code directly via C code comments. This, of course,
                needs outside parsers and code generators since C can do nothing with its own code,
                which in this case is not even code but a predefined way to tag comments similar to
                what some tools would use to generate documentation. Here is an example from
                <a target="_blank" href="https://cdn.vector.com/cms/content/products/asap2/Docs/ASAP2Tool-Set_Manual_EN.pdf">ASAP2
                Tool-Set User Manual</a> on how to annotate C code with comments for the automatic
                generation of a2l files at build time (check the manual for more examples),
            </p>

            <blockquote>
                <p>
                    /*<br>
                    @@ SYMBOL = sample1<br>
                    @@ A2L_TYPE = MEASURE<br>
                    @@ DATA_TYPE = UBYTE<br>
                    @@ END<br>
                    */<br>

                    </p><p>
                        results in...
                    </p>
                    
                    /begin MEASUREMENT sample1 ""<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;UBYTE NO_COMPU_METHOD 0 0 0 255<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;ECU_ADDRESS 0<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;/begin IF_DATA CANAPE_EXT<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;100<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LINK_MAP "sample1" 0 0 0 0 0 0 0<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;/end IF_DATA<br>
                    /end MEASUREMENT
                
            </blockquote>

            <p>
                This rift, this mismatch at the boundary between two systems expressed in different
                languages, is another recurring theme. It always creates a need to conceive extra
                formats to patch that gap and make the two understand each other and use each other's
                data. That's a big problem when tools proliferate due to there not being a powerful
                one in the first place. It is why our traveler takes ten days for a journey that
                should take just one. Kings of the old knew that. If everybody does not speak the
                same language and enjoy the same culture, willingly or forcefully through the kiss
                of the sword, every journey through the king's land involves talking to every
                tribesman to secure safe passage. Some ask exorbitant prices, some refuse
                outright. A dirty business and a bad climate for business.
            </p>

            <p>
                It is the same story with prose writing, I find. If English hadn't given me the
                words and metaphors and the technical means to wrap up things in rifts and kings, I
                would either have to use another language (and offer the reader a dictionary and a
                way of translating from one expression to another, similar to what a2l does) or
                repeat the same things over and over. But as things stand I can wrap up concepts
                already talked about and understood by the reader in a few words or images and refer
                to them instead, shifting the discussion to a higher level. Or my language can be
                visual, like in arts, or theater or music. In that case the medium of transmission
                is different which is what all these file formats do. Eventually in life one must
                pass beyond the everyday language of "he did this, then he did that" to express some
                different concepts and feelings. Maybe that's the meaning of the well-known saying
                that "Lisp has assisted a number of our most gifted fellow humans in thinking
                previously impossible thoughts". Additionally, the quest for such metaphors is
                another technical problem. Similar to iteration speed in programming, I want to
                quickly find new words, write them down, reread, edit, delete, write again. As fast
                as possible. I can't imagine what writing without a computer was like in the past.
            </p>

            <p>
                I've hinted in a previous comment about a tool to handle all this calibration
                business in one place, a special tool only for this purpose,
                <a target="_blank" href="https://www.vector.com/int/en/products/products-a-z/software/canape">CANape</a>
                (CAN Application Programming Environment) or "The Universal Tool in the Vehicle,
                Test Bench and Laboratory" (see 
                <a target="_blank" href="https://cdn.vector.com/cms/content/products/canape/Docs/CANape_ProductInformation_EN.pdf">
                    CANape: Product Information</a>).
            </p>

            <p>
                The Wikipedia article on <a target="_blank" href="https://en.wikipedia.org/wiki/CANape">CANape</a> stresses
                the part where one does not modify the source code but updates the configuration
                variables to change an ECUs behavior, which is avoiding the exact rebuild-restart
                cycle I've underlined already.
            </p>

            <p>
                Again, because buttons and clicks help a user only up to a certain point, to make
                sense of the possibly thousands of data points per second, CANape uses a scripting
                language. Can you guess it? Is it CAPL? No! It's CASL (Calculation and Scripting
                Language). Don't stress, though, "the syntax of CASL is very similar to the C
                programming language". The official manual even assures one of only needing a
                general programming knowledge of C and nothing else,
            </p>

            <blockquote>
                <p>
                    Note: Do not confuse CASL with the programming language CAPL, which is used in
                    the CANoe and CANalyzer environments. CAPL is an event-oriented programming
                    language. So-called CAPL program nodes are used to specify when an event will be
                    executed and the nature of the reaction. CASL, on the other hand, is a
                    signal-oriented language.
                </p>

                <p>
                    <a target="_blank" href="https://cdn.vector.com/cms/content/products/canape/Docs/CANape_CASL_Manual_EN.pdf">
                        CANape CASL: User Manual</a>
                </p>
            </blockquote>

            <p>
                The fear of pointers is still with us, plus extra trivialities,
            </p>

            <blockquote>
                <p>
                    The CANape scripting language CASL is very similar to the C programming language. However, it
                    differs in the following aspects:
                </p>
                <ul>
                    <li>CANape uses only double values for internal calculations</li>
                    <li>CANape does not use pointers</li>
                    <li>A missing result type is interpreted as void</li>
                    <li>Arrays of any dimension and size may be passed</li>
                    <li>An empty parameter list is allowed like in C++</li>
                    <li>Overloading of functions (i.e., multiple functions with the same name but with
                        different parameter lists) is possible like in C++</li>
                    <li>A parameter check is made like in C++</li>

                </ul>
                

                <p>
                    <a target="_blank" href="https://cdn.vector.com/cms/content/products/canape/Docs/CANape_CASL_Manual_EN.pdf">
                        CANape CASL: User Manual</a>
                </p>
            </blockquote>

            <p>
                CASL is still not strong enough. It can be extended through DLLs for case where you
                might still want to go back and actually use C functions directly from CASL, a
                language developed to interact with systems developed in C, or I donno, it all
                starts to get really confusing at this point so I'll leave it to you to explore it
                further,
            </p>

            <blockquote>
                <p>
                    In CANape, it is possible to use the installed programming language CASL to
                    develop functions and scripts, e.g. in analyzing measurement data or automating
                    frequently used sequences. This document describes how the supplied functional
                    library can be extended to include your own libraries or functions. Potential
                    applications include functions whose source code should not be published, or
                    algorithms that cannot be implemented with the existing library or only with
                    great effort.
                </p>

                <p>
                    <a target="_blank" href="https://cdn.vector.com/cms/content/know-how/_application-notes/AN-IMC-1-012_How_to_use_C-Code_Functions_in_CANape.pdf">How to Use C Code Functions in CANape</a>
                </p>
            </blockquote>

            <p id="language-environment">
                <h2>A language is not just its syntax but the tools and environment around it</h2>
            </p>

            <p>
                Embedded developers are a special kind of software people. They use countless IDEs,
                probably a legacy of each microprocessor vendor mixing up their own IDE to be sold
                as opium for all the known software affections. At least in that other fantasy land,
                the rivalry is between two venerable kings, Emacs and VIM, but here the
                <a target="_blank" href="https://www.reddit.com/r/embedded/comments/1e4rbbk/of_ides_and_holy_wars">holy wars</a> look
                different, some of them use plain Nodepad, some have "advanced" to Notepad++,
                <a target="_blank" href="https://ww1.microchip.com/downloads/en/devicedoc/50002027d.pdf">MPLAB</a>,
                <a target="_blank" href="https://www.st.com/en/development-tools/stm32cubeide.html">CubeIDE</a>,
                <a target="_blank" href="https://doc.qt.io/qtcreator">QtCreator</a> and some to
                <a target="_blank" href="https://www.nxp.com/docs/en/user-guide/IDE_5.9_Users_Guide.pdf">CodeWarrior</a>,
                the best kind of warrior for our wannabe emperor. Even the DSLs (yes, let's call
                them that and stop pretending) like CAPL and CASL and the other programming
                languages we've seen until now come with their own IDEs.
            </p>

            <p>
                Here is what GreenHils, one these poison-mixers, is saying
            </p>

            <blockquote>
                <p>
                    By using a common set of development tools across projects, software engineers
                    can more easily share code or move between projects without compromising
                    productivity. The Project Builder’s intuitive GUI automates and simplifies the
                    configuration of complex programming projects. With its automatic dependency
                    determination, the Builder also helps cut time-to-market by eliminating the need
                    to write and debug makefiles.
                </p>

                <p>
                    <a target="_blank" href="http://flashtech.com.my/PDF/GH-MultiIDE.pdf">MULTI -
                        Integrated Development Environment for Device Software Optimization</a>
                </p>
            </blockquote>

            <p>
                God forbid the maker and his makefiles. They're too old and well established to keep
                using them. QtCreator employs
                <a target="_blank" href="https://doc.qt.io/qt-6/qmake-manual.html">qmake</a>
                to "help simplify the build process for development projects across different
                platforms. It automates the generation of makefiles so that only a few lines of
                information are needed to create each makefile". The MULTI IDE uses a proprietary,
                xml-based, configuration file (<a target="_blank" href="https://amazingalgorithms.com/file-extensions/gpj">gpj</a>)
                instead of makefiles but it also generates makefiles behind our backs. The switch to
                other tools to edit configuration options now becomes a near impossibility, as now
                everything that can be configured must be configured through that vendor's random
                interface, buttons and menus, a new interface from the ones already familiar to you,
                an interface bound to change. Some IDEs even have different config files that are
                incompatible from one version to the next,
            </p>

            <blockquote>
                <p>
                    [...] my main complaint with other tools is proprietary config file formats
                    which leave me stuck using their low-effort interface for absolutely every
                    change before compiling. If I can't use my favorite text-based tool to
                    diff/compare and make meaningful configuration changes, I will curse every extra
                    click or scroll that I'm forced to perform in their proprietary software just to
                    change an option for which I already know the name.
                </p>

                <p>
                    <a target="_blank" href="https://www.reddit.com/r/embedded/comments/1cgsgbw/how_to_improve_autosar_stack/">A reddit user</a>
                </p>                
            </blockquote>

            <p>
                As an example of how complicated and how non-standard such a setup can become, see
                the official Getting Started with
                <a target="_blank" href="https://www.nxp.com/docs/en/supporting-information/DWF13_AMF_AUT_T1059.pdf">Green Hills Tools</a>
                 guide from Renesas, a semiconductor manufacturer, as there is no freely available
                 online documentation or tutorial from GreenHills itself on how all this works.
            </p>

            <p>
                Speaking of Renesas, they proudly boast their own accomplishments in the IDE's field,
            </p>

            <blockquote>
                <p>
                    CS+ is an IDE integrating the necessary tools for the development phase of
                    software (e.g. design, implementation, and debugging) into a single platform. By
                    providing an integrated environment, it is possible to perform all development
                    using just this product, without the need to use many different tools
                    separately.
                </p>

                <p>
                    <a target="_blank" href="https://www.renesas.com/us/en/document/man/cs-v80500-integrated-development-environment-users-manual-ghs-ccrh850-build-tool-operation">
                    CS+ V8.05.00 Integrated Development Environment: User’s Manual</a>
                </p>
            </blockquote>

            <p>
                But Renesas goes one step further into unexplored territory. They have four
                different IDEs in their shop and even different, incompatible proprietary config
                file formats at that! Even inside the same company it proves quite impossible to decide
                on a single file format. There is ample documentation on
                <a target="_blank" href="https://www.renesas.com/us/en/software-tool/migration-tools-ide">
                    how to migrate between IDEs</a>
                (or <a target="_blank" href="https://www.renesas.com/us/en/document/mat/project-conversion-between-e-studio-and-cs-notes-and-tips">here</a>)
                and even from their IDEs to GreenHills. That's just a hint on how complicated even
                the business of writing code in a text editor can become.
            </p>

            <p id="non-formal-methods">
                <h2>Rules and processes are enforced with non-formal methods</h2>
            </p>

            <p>
                Even in a
                <a target="_blank" href="https://mihaiolteanu.me/language-abstractions">dead language like C</a>
                that offers no means to create incomprehensible DSLs and rich abstractions one can
                still bring to life ugly monsters,
            </p>

            <blockquote>
                <p>
                While C programs can be laid out in a structured and comprehensible manner, C makes
                it easy for programmers to write obscure code that is difficult to understand.
                </p>

                <p>
                There are areas of the language that are commonly misunderstood by programmers. For
                example, C has more operators than some other languages and consequently has a high
                number of different operator precedence levels, some of which are not intuitive. The
                type rules provided by C can also be confusing to programmers who are familiar with
                strongly-typed languages. For example, operands may be "promoted" to wider types,
                meaning that the type resulting from an operation is not necessarily the same as
                that of the operands.
                </p>

                <p>
                C programs can be compiled into small and efficient machine code, but the trade-off
                is that there is a very limited degree of run-time checking. C programs generally do
                not provide run-time checking for common problems such as arithmetic exceptions
                (e.g. divide by zero), overflow, validity of pointers, or array bound errors. The C
                philosophy is that the programmer is responsible for making such checks explicitly.
                </p>

                <p>
                    <a target="_blank" href="https://github.com/sakura1083841400/MISRA-C/blob/main/MISRA%20C%202012%20Guidelines%20for%20the%20use%20of.pdf">
                        MISRA C:2012 Guidelines for the use of the C language in critical systems
                    </a>
                </p>
            </blockquote>

            <p>
                The solution in automotive is to define standards that enforce certain coding
                practices, ban features like multiple returns from a single function, ban recursive
                functions or the dynamic allocation of memory (malloc) at runtime. But since one
                needs global constants to at least keep ECU configuration options (see Calibration,
                for example), this last rule forces a static pre-allocation of all memory at
                build-time. The usual approach is to keep tables with variable names, addresses and
                memory sizes in excel sheets, but since excel sheets are outside of C syntax, guess
                what do we need to bring in again?  Code generators! I won't dwelve on this issues
                again as it's already familiar from the dbc files discussion.
            </p>

            <p>
                The somewhat good news is that some of MISRA rules can be enforced with static
                checkers. These can generate reports about what rules are followed and what not,
                similar to a compiler. That bad news is that some rules can only be checked by
                manual inspection alone so you put your faith in the good will and patience of the
                developer,
            </p>

            <blockquote>
                <p>
                    It is possible to check that C source code complies with MISRA C by means of inspection alone.
                    However, this is likely to be extremely time-consuming and error prone. Any realistic process for
                    checking code against MISRA C will therefore involve the use of at least one static analysis tool.
                </p>

                <p>
                    All of the factors that apply to compiler selection apply also to the selection of static analysis
                    tools, although the validation of analysis tools is a little different from that of compilers. An
                    ideal static analysis tool would:
                </p>

                <ul>
                        <li>Detect all violations of MISRA C guidelines;</li>
                        <li>Produce no "false positives", i.e. would only report genuine violations and would not report
                            non-violations or possible violations.</li>
                    </ul>
                
                
                <p>
                    It is not, and never will be, possible to produce a static analysis tool that
                    meets this ideal behavior. The ability to detect the maximum number of
                    violations possible, while minimizing the number of false positive messages, is
                    therefore an important factor in choosing a tool.
                </p>

                <p>
                    There is a wide range of tools available with execution times ranging from
                    seconds to days. Broadly speaking, tools that consume less time are more likely
                    to produce false positives than those that consume large amounts of
                    time. Consideration should also be given to the balance between analysis time
                    and analysis precision during tool selection.
                </p>

                <p>
                    Analysis tools vary in their emphasis. Some might be general purpose, whereas
                    others might focus on performing a thorough analysis of a subset of potential
                    issues. Thus it might be necessary to use more than one tool in order to
                    maximize the coverage of issues.
                </p>

                <p>
                    Each mandatory, required and advisory rule is classified as decidable or
                    undecidable. This classification describes the theoretical ability of a static
                    analyzer to answer the question “Does this code comply with this rule?” The
                    directives are not classified in this way because it is impossible, given only
                    the source code, to devise an algorithm that could guarantee to check for
                    compliance.
                </p>

                <p>
                    <a target="_blank" href="https://github.com/sakura1083841400/MISRA-C/blob/main/MISRA%20C%202012%20Guidelines%20for%20the%20use%20of.pdf">
                        MISRA C:2012 Guidelines for the use of the C language in critical systems
                    </a>
                </p>
            </blockquote>

            <p>
                One feature, or a limitation, is that the committee admits not all use-cases can be
                foreseen by the standard so it offers a "deviation" feature. A deviation is another
                non-formal piece of text saying this or that rule can be skipped in this or that
                circumstance: "It is important that such deviations are properly recorded and
                authorized. Individual programmers can be prevented from deviating guidelines by
                means of a formal authorization procedure. Formal record keeping is good practice and
                supports any safety argument that might be made for the software."
            </p>

            <p>
                So MISRA rules save some headaches and errors when applied, but there are places
                where they don't apply and that is necessary for the project and good. After a while
                you kinda start
                <a target="_blank" href="https://news.ycombinator.com/item?id=38182855">ignoring MISRA</a>
                with "we need this here anyway, MISRA doesn't know what is doing, I'll just check
                this in and be merry". It is a standard that employs extra tooling for it to be
                enforced and generates additional documents, be them Word documents or code
                comments, or what have you.
            </p>

            <p> I don't think this is truly realized, but all this information written down in word
                sheets, requirements, knowledge passed on in meetings, little tricks and short hacks
                solved in video calls, information passed in emails and instant messaging is
                information that is part of the project, that is put down in some kind of a
                language, a non-formal one like English or tables or boxes or scribbles or laughs
                and jokes. The more a project has of these, the harder it is to talk about and
                verify the actual state of the project as it is obviously impossible to evaluate a
                non-formal language like you would a formal programming language and thus it becomes
                that much harder to explore and play with, test and explore the project.</p>

            
            <p id="dsls">
                <h2>Domain specific languages are everywhere</h2>
            </p>
            <p> Some colleagues openly admitted of not knowing C at all, even though their CVs and
                their positions assumed such knowledge. But how? They've developed visual models in <a target="_blank" href="https://www.mathworks.com/products/simulink.html">Simulink</a>, "a block
                diagram environment used to design systems with multi domain models, simulate before
                moving to hardware, and deploy without writing code." Unlike the CANoe ECU models
                that are meant to aid in the understanding of the project but need a software
                developer to write the ECU code, this graphical programming language also generates the C
                code, efficient and MISRA compliant at that. See the <a target="_blank" href="https://www.mathworks.com/solutions/embedded-code-generation/production-code-automotive-ecu.html">Automotive
                Code Generation</a> page for details. C is here treated as a kind of a bytecode,
                never to be seen, never to be touched. Now don't go buzzing me with "we don't need
                nor like DSLs here" silly story. I won't believe you anymore. I can't!  </p>

            <p>
                The graphical programming language, similar to
                <a target="_blank" href="https://www.ni.com/en/shop/labview.html">LabVIEW</a> if
                you're more familiar with that, is used to move blocks around and connect them to
                pass the data and the computational results from one block to another, as one would
                call functions and return their values in a classic text-based programming
                language. Behind each block is
                <a target="_blank" href="https://www.mathworks.com/products/matlab/programming-with-matlab.html">
                    Matlab</a>, "a high-level programming language designed for engineers and scientists
                that expresses matrix and array mathematics directly". Some user success stories for
                warm-up follow,
            </p>

            <blockquote>
                <p>
                    Simulink is particularly helpful in two stages of our development process. Early
                    on, it helps us try new ideas and visualize how they will work. After generating
                    code and conducting in-vehicle tests, we can run multiple simulations, refine
                    the design, and regenerate code for the next iteration.
                </p>

                <p>
                    <a target="_blank" href="https://www.mathworks.com/products/simulink.html">
                        Jonny Andersson, Scania
                    </a>
                </p>
            </blockquote>

            <blockquote>
                <p>
                    Whether you’re developing controls for [...] an autonomous vehicle, an
                    excavator, [...], if your team is manually writing code and using document-based
                    requirements capture, the only way to answer these questions will be through
                    trial and error or testing on a physical prototype. And if a single requirement
                    changes, the entire system will have to be recorded and rebuilt, delaying the
                    project by days, or even weeks.
                </p>
                
                <p>
                    Using Model-Based Design with MATLAB® and Simulink®, instead of handwritten code
                    and documents, you create a system model [...]. You can simulate the model at
                    any point to get an instant view of system behavior and to test out multiple
                    what-if scenarios without risk, without delay, and without reliance on costly
                    hardware.
                </p>

                <p>
                    <a target="_blank" href="https://www.mathworks.com/content/dam/mathworks/white-paper/gated/model-based-design-with-simulation-white-paper.pdf">
                        Model-Based Design for Embedded Control Systems
                    </a>                   
                </p>
            </blockquote>

            <p>
                Exactly the issue I've touched upon in the introduction. C's abstractions are not
                powerful enough to rise above dumb low-level details and get a clear picture of what
                you're trying to achieve, talk about that, share those bigger ideas with colleagues
                and refine on them. It also touches on that other point, namely, the iteration
                speed, how fast can you go from one version to the next, how fast can you change the
                implementation, test it, rewrite it, change your assumptions, see something
                tangible and not just imagining things and talking about things in meetings and on
                informal communication channels, be them video or texting.
            </p>

            <p>
                But, my apologies for the interruption, I'll let these people talk for themselves,
                since they touch on all the pain points so beautifully,
            </p>
            
            <blockquote>
                <p>
                    In a traditional workflow, where requirements are captured in documents, hand off
                    can lead to errors and delay. Often, the engineers creating the design documents
                    or requirements are different from those who design the system. Requirements may
                    be “thrown over a wall,” meaning there’s no clear or consistent communication
                    between the two teams.
                </p>

                <p>
                    In Model-Based Design, you author, analyze, and manage requirements within your
                    Simulink model. You can create rich text requirements with custom attributes and
                    link them to designs, code, and tests. Requirements can also be imported and
                    synchronized from external sources such as requirements management tools. When a
                    requirement linked to the design changes, you receive automatic notification. As
                    a result, you can identify the part of the design or test directly affected by
                    the change and take appropriate action to address it.
                </p>

                <p>
                    In a traditional workflow, embedded code must be handwritten from system models
                    or from scratch.  Software engineers write control algorithms based on
                    specifications written by control systems engineers. Each step in this
                    process—writing the specification, manually coding the algorithms, and debugging
                    the handwritten code can be both time-consuming and error-prone. With
                    Model-Based Design, instead of writing thousands of lines of code by hand, you
                    generate code directly from your model, and the model acts as a bridge between
                    the software engineers and the control systems engineers. The generated code can
                    be used for rapid prototyping or production. Rapid prototyping provides a fast
                    and inexpensive way to test algorithms on hardware in real time and perform
                    design iterations in minutes rather than weeks. You can use prototype hardware
                    or your production ECU. With the same rapid prototyping hardware and design
                    models, you can conduct hardware-in-the-loop testing and other test and
                    verification activities to validate hardware and software designs before
                    production.  Production code generation converts your model into the actual code
                    that will be implemented on the production embedded system. The generated code
                    can be optimized for specific processor architectures and integrated with
                    handwritten legacy code.
                </p>
               
                <p>
                    <a target="_blank" href="https://www.mathworks.com/content/dam/mathworks/white-paper/gated/model-based-design-with-simulation-white-paper.pdf">
                        Model-Based Design for Embedded Control Systems
                    </a>                   
                </p>
            </blockquote>

            <p>
                Check out an example of generating C code from a Simulink model with the
                <a target="_blank" href="https://www.mathworks.com/help/rtw/ug/generating-code-using-simulink-coder.html">Simulink Coder</a>.
                Since the generated code must fit in with the rest of the project, sometimes adjustments are
                necessary, like in this example on how to
                <a target="_blank" href="https://www.mathworks.com/help/rtw/ug/configure-model-data-for-c-code-generation.html">configure the model</a> for
                C code generation.                
            </p>

            <p>
                Needless to say, this is a whole new and complex language, "we don't need no special
                new languages besides C, we need only if's, else's and everything as concrete as
                possible" people be damned. No wonder engineers working with Simulink are not
                necessarily C developers. Simulink is a brand new universe that takes years to swim
                safely through its waters, regardless of what the marketing white paper above says
                about it being easy to use and avoiding the "time-consuming and error-prone" method
                of hand-writing your own code. HAND-WRITING YOUR CODE?! That's an activity for
                future to be software anarchists! Regardless, the suits of the present seem to have
                developed a fondness towards it and for code that generates code. Code that
                generates code?! Wait, I've heard that idea before and it usually gets smashed to
                pieces as being "irrelevant for us here". Regardless, I'll pass the microphone
                again,
            </p>

            <blockquote>
                <p>
                    Compact, efficient code: the code automatically generated with Embedded Coder
                    and Simulink Coder required about 16% less RAM than the handwritten code used on
                    a previous version of the Cruise Controller; the code met all project
                    requirements for efficiency and structure.
                </p>

                <p>
                    High test efficiency: debugging the control software on the desktop instead of
                    in the vehicle enabled the Daimler team to reduce the time and cost associated
                    with resolving software problems.
                </p>

                <p>
                    Fast development: the entire project, including analysis, restructuring,
                    modeling, and testing, took just 18 months. It would have been nearly impossible
                    to achieve this project deadline without the use of simulation, production code
                    generation, and processor-in-the-loop capabilities offered by MathWorks.
                </p>

                <p>
                    <a target="_blank" href="https://www.mathworks.com/company/user_stories/daimler-designs-cruise-controller-for-mercedes-benz-trucks.html">
                        Daimler Designs Cruise Controller for Mercedes-Benz Trucks
                    </a>
                </p>
            </blockquote>

            <blockquote>
                <p>
                    Code development costs cut by two-thirds: by modeling the control application
                    software in Simulink and using the model as an executable specification, we have
                    eliminated misunderstandings that can occur between OEMs and suppliers. Further,
                    by generating code from our models, we have eliminated the bugs and human errors
                    that come with hand-coding. These improvements enabled us to cut code
                    development costs by roughly two-thirds and shorten development times.
                </p>

                <p>
                    <a target="_blank" href="https://www.mathworks.com/company/user_stories/nissan-accelerates-development-and-testing-of-engine-control-software.html?s_tid=srchtitle">
                        Nissan Accelerates Development and Testing of Engine Control Software
                    </a>
                </p>
            </blockquote>

            <blockquote>
                <p>
                    We also anticipated many design iterations, so we wanted an easy way to
                    visualize results and debug our designs. In addition, we wanted to save time by
                    generating code, but the code had to be efficient, as the CPU load on our
                    electronics control unit (ECU) was already about 60% when we started the sensor
                    fusion project.
                </p>

                <p>
                    <a target="_blank" href="https://www.mathworks.com/company/technical-articles/developing-advanced-emergency-braking-systems-at-scania.html?s_tid=srchtitle">
                        Developing Advanced Emergency Braking Systems at Scania               
                    </a>
                </p>
            </blockquote>

            <blockquote>
                <p>
                    According to my experience with Toyota, pretty much all of the code is written
                    in C. But there are some several functions mainly about bit manipulation which
                    are written in assembly. However, they are shifting towards model-based
                    development using higher level language like MATLAB, and convert back to C to
                    shorten the development cycle and improve in readability, re usability and code
                    maintenance.
                </p>

                <p>
                    <a target="_blank" href="https://www.quora.com/What-programing-language-is-used-to-write-software-for-a-cars-electronic-control-unit-ECU?no_redirect=1">
                        A Quora user on programming languages for ECUs
                    </a>
                </p>
            </blockquote>

            <p>
                C is truly dead at this point. But why not stab it a little longer? What would be
                the harm in it, anyway?
            </p>

            <blockquote>
                <p>
                    ASCET provides an innovative solution for the functional and software
                    development of modern embedded software systems. ASCET supports every step of
                    the development process with a new approach to modeling, code generation and
                    simulation, thus making higher quality, shorter innovation cycles and cost
                    reductions a reality.
                </p>

                <p>
                    The ASCET tools support model-based software development. In model-based
                    development, you construct an executable specification – the model – of your
                    system and establish its properties through simulation and testing in early
                    stages of development. When you are satisfied that the model behaves as
                    required, it can be converted automatically to production quality code. The key
                    advantage of model-based development is that the software system can be designed
                    by domain experts, using domain-specific notions, independently from knowing any
                    details how it will be realized by an implementation.
                </p>

                <a target="_blank" href="https://etas.services/download-center-files/products_ASCET_Software_Products/etas-ascet-developer-7.9.0-getting-started-20240126.pdf">
                    ETAS ASCET Developer 7.9.0: Getting Started
                </a><br>
                <a target="_blank" href="https://www.etas.com/download-center-files/products_ASCET_Software_Products/ASCET_V6.3_Getting_Started.pdf">
                    ASCET: Getting Started
                </a>
            </blockquote>

            <p>
                Die C, die, even though you're already dead!
            </p>

            <blockquote>
                <p>
                    But C has a dark side. It is too easy for errors to creep into the code that can
                    be extremely difficult to find. Problems start with the syntax because it makes
                    writing code vulnerable to error. For example, optional braces, assignment in
                    expressions, and automatic switch/case fall through, etc. Then there are
                    semantically dubious or complex features that are difficult to use correctly and
                    encourage “programming on the edge of safety.“ For example, goto statements,
                    pointers, and integral promotion. These aspects can also interact in dangerous
                    ways
                </p>

                <p>
                    ETAS is rising to all these challenges with a new language to engineer safe and
                    secure software effectively: Embedded Software Development Language (ESDL). ESDL
                    eliminates typical C pitfalls and, in addition, enables software reuse,
                    simplifies maintenance, and supports product-line variant engineering. ESDL
                    enables developers to spend time solving problems instead of programming around
                    the inadequacies of C.
                </p>

                <p>
                    Using code generation to create C Efficient use of ESDL in development is
                    enabled with ETAS ASCET DEVELOPER 7, an Eclipse-based Integrated
                    Development Environment (IDE) and a C code generator.
                </p>

                <p>
                    The IDE provides modern editing features like language templates, content
                    assistance proposals and quick fixes for problems. This makes ESDL easy to learn
                    for beginners. ASCET-DEVELOPER 7 also continually checks for ESDL programming
                    violations, calculates quality metrics, and offers best-practice
                    recommendations. Feedback is provided to developers “on-the-fly” during edit
                    time, therefore reducing the time between making a coding error and its
                    detection to zero.
                </p>

                <p>
                    <a target="_blank" href="https://www.etas.com/data/RealTimes_2017/rt_2017_1_16_en.pdf">
                        ESDL: Safety and Security in Code
                    </a>
                </p>
            </blockquote>

            <p>
                Same story again from ETAS, a subsidiary of Bosch. It is interesting to note that
                the model and the code are seen as different entities. In Lisp world, the model that
                generates the Lisp code is still Lisp. That's the big difference. In automotive
                world, the model that generates C code is something entirely different. It could be
                a visual language, it could make use of xml files, it can implement a scripting
                language. All these combined define the modeling language.
            </p>

            <p>
                Sure it is easy to fall prey to such hype and most of is maybe just that, hype
                and marketing and people wanting to make money and gain market share. Nothing wrong
                with it. But having never seen more powerful systems, having never played with the
                parentheses, for example, makes one that more gullible and easily impressed by such
                promises.
            </p>

            <p>
                Do you want to explore Siemens'
                <a target="_blank" href="https://www.plm.automation.siemens.com/media/global/es/Siemens-PLM-Simcenter-Embedded-Software-Designer-fs-71311-A4_tcm54-55209.pdf">Simcenter Embedded Software Designer</a>
                on your own? Go on!
            </p>


            <p id="autosar">
                <h2>Move away from the language completely and just click buttons</h2>
            </p>

            <blockquote>
                <p>
                    Your mistake is in assuming that you'll write code when using Autosar. Autosar
                    exists so that the company doesn't need to hire developers to write code. The
                    ideal is to buy everything from suppliers who also take on the liability in case
                    there are bugs and recalls need to be made. If you work with Autosar, you need
                    to be VERY clear with your future employer about what EXACTLY your duties will
                    be. It is very likely that your role as an "Autosar developer" will mainly
                    consist of integrating Autosar components and configuring them.
                </p>

                <!-- <p>
                     It really depends on how much are you willing to risk, are you young? Do you
                     have debts to paid? if you are young but are not in a serious need of money I
                     would not recommend entering Autosar C, take the risk and find something else,
                     if your need of money is really really hard then yes you will always find
                     something.
                     </p>
                -->
                <p>
                    Lol, you are joking right? Any person who values their time and career future
                    and wants to actually develop something fun would stay away from AUTOSAR.
                </p>

                <p>
                    I like cars and tried the Autosar route. It kind of sucked the fun out of
                    development for me.
                </p>

                <p>
                    <a target="_blank" href="https://www.reddit.com/r/embedded/comments/zdb02b/to_autosar_or_not_to_autosar/">
                        Reddit answers to a user asking if they should go with Autosar in their career
                    </a>
                </p>
            </blockquote>

            <p>
                <a target="_blank" href="https://www.autosar.org/">Autosar</a>'s goal is to aid
                in <a target="_blank" href="https://www.autosar.org/fileadmin/standards/R21-11/CP/AUTOSAR_TPS_SoftwareComponentTemplate.pdf">
                    code reuse</a> through standard modules and interfaces. The modules are
                implemented and sold by third-party vendors, either independently or as a
                <a target="_blank" href="https://www.vector.com/int/en/products/products-a-z/embedded-software/microsar/">whole stack</a>
                while their configuration and the connection between them (the function calls,
                after all) are done through visual tools and code generators.
            </p>

            <p>
                There are two main Autosar schools of thought, the
                <a target="_blank" href="https://www.autosar.org/standards/classic-platform">Classic Platform</a>
                where the ECU's software is split into three layers, the
                <a target="_blank" href="https://www.autosar.org/fileadmin/standards/R22-11/CP/AUTOSAR_EXP_LayeredSoftwareArchitecture.pdf">
                    Layered Software Architecture</a> document having all the details and the pretty
                pictures and the
                <a target="_blank" href="https://www.autosar.org/standards/adaptive-platform">Adaptive Platform</a>
                which "implements the AUTOSAR Runtime for Adaptive Applications (ARA). Two types of
                interfaces are available, services and APIs. The platform consists of functional
                clusters which are grouped in services and the AUTOSAR Adaptive Basis." Yes, I
                really don't know what that means or why they are called platforms.
            </p>

            

            <p>
                The reason for this split, aside from the "increased complexity" and
                "high-performance computing needs" mentioned in the
                <a target="_blank" href="https://www.autosar.org/fileadmin/standards/R21-11/AP/AUTOSAR_EXP_SWArchitecture.pdf">
                    Explanation of Adaptive Platform Software Architecture</a>
                and a really surprise move on the part of the more than 350 Autosar
                <a target="_blank" href="https://www.autosar.org/about/partners">
                    Autosar legislators</a>, is that these platforms are specifically
                <a target="_blank" href="https://www.mathworks.com/help/autosar/ug/autosar-platform-comparison.html">
                    targeting C and C++</a>. Autosar is not language-agnostic though it boasts itself as 
                <a target="_blank" href="https://www.autosar.org/fileadmin/standards/R20-11/AP/AUTOSAR_RS_General.pdf">
                    a rich and modern programming environment
                </a>. As such, the standard is quite low-level, it does specify the details of what
                goes where but does not build new abstractions to make it easy to talk about the
                project. It does build visual tools instead, as we shall see. A change to a
                different programming language, like Rust, would again force the change to a still
                new standard, as the change from C to C++ did, if that future ever comes before
                Autosar anarchists storm the castle and burn it to the ground,
            </p>

            <blockquote>
                <p>
                    If you want a dead end career, autosar is a good place to start. I could barely
                    sustain for a month working with that messed up software.
                </p>

                <p>
                    <a target="_blank" href="https://www.reddit.com/r/embedded/comments/198iurj/is_automotive_embedded_autosar_only/">
                        Reddit: comment to the question "Is automotive embedded Autosar only?"
                    </a>
                </p>                
            </blockquote>

            <p>
                It also brings it new types that have to be mapped back to C++, similar to
                a2l. Remember the dictionaries and the transport medium across that rift? Either
                way, the gist is that modules developed by one vendor, if it follows the correct
                Autosar platform and platform version can be used like lego bricks. Pluck them
                into a project using the same Autosar platform and version alongside other modules
                developed by the same or even a different vendor and it should all work, it's
                interfaces will have the structure and semantics defined by Autosar. Hardly
                groundbreaking! Though it needs over
                <a target="_blank" href="https://www.autosar.org/search">
                    2300 official documents
                </a> spanning more than
                <a target="_blank" href="https://www.ar-compendium.com/">
                    13000 pages</a> to specify in the minutest of details the architecture of the entire software
                stack of the ECU itself, what goes into each module, what goes out, the types of
                data, the function signatures, all that.
            </p>

            <blockquote>
                <p>
                The AUTOSAR application communication interface shall allow AUTOSAR applications to use the same
                interface definition independently of whether they are located on the same or on different ECUs. A
                standardized interface definition for applications is a prerequisite for the reuse of software and
                hardware independent deployment.
                </p>

                <p>
                    <a target="_blank" href="https://www.autosar.org/fileadmin/standards/R22-11/FO/AUTOSAR_RS_Main.pdf">
                        Autosar: Main Requirements
                    </a>
                </p>
            </blockquote>

            <p>
                Things are a bit messy when it comes to file formats. Unlike the safe lands we've seen before, the
                XML file is again the choice for such module specification, though it also requires UML diagrams,
                excel files, GUI tools and splashy visuals,
            </p>

            <blockquote>
                <p>
                    In a development process, many different tools with different representation of
                    AUTOSAR models are used (Excel Sheets, Modeling Tools, UML, XML, etc.). Each
                    tool and its underlying representation of data have their advantages and
                    disadvantages. These tools and representations can be grouped into technological
                    spaces.
                </p>

                <p>
                    Using XML and UML within AUTOSAR combines the strength of both technological
                    spaces: AUTOSAR defined templates for data that is exchanged in AUTOSAR. Since
                    XML is widely accepted as a standard for representation and exchange of
                    structured data it was chosen to be the basis for the exchange of AUTOSAR
                    models. Due to the complexity of the data and its interrelationships a manual
                    creation of a consistent AUTOSAR XML schema turned out to be time-consuming and
                    error prone. In addition the expressive power of XML schema is not sufficient
                    for expressing content related constraints between data entities.
                </p>

                <p>
                    Therefore a meta-model based approach was chosen to graphically describe the
                    templates by means of UML2.0 class diagrams. Constraints that cannot be
                    formulated graphically are described textually in the template specifications
                    respectively as OCL (Object constraint language). The UML model which defines
                    all data entities and interrelationships that can be used for describing AUTOSAR
                    systems and related artifacts is called AUTOSAR meta-model. An instance of the
                    meta-model, i.e. a concrete description of software components, etc., is called
                    an AUTOSAR model.
                </p>
            </blockquote>

            <p>
                Autosar here even mentions the reason behind needing a new format:
                <a target="_blank" href="https://www.autosar.org/fileadmin/standards/R22-11/CP/AUTOSAR_EXP_AIUserGuide.pdf">
                    commonly readable</a> by both parties across the rift. Commonly readable again,
                not human readable. Here are some arxml examples:
                <a target="_blank" href="https://github.com/telehan/autosar-arxml/blob/master/examples/autosar3/portinterfaces/PortInterfaces.arxml">
                    PortInterfaces.arxml</a> and
                <a target="_blank" href="https://github.com/nikidimitrow/Learning-AUTOSAR-fundamental/blob/master/BasicsOfAUTOSAR/EcuM_swc.arxml">
                    EcuM_swc.arxml</a>.
            </p>

            <p>
                If in CANoe one would bring in help to model a single ECU, in Autosar one models the
                entire car by way of these Components which then get assigned to either the same ECU
                or different ECUs connected to the same CAN network, for example. This is somewhat
                similar to what Kubernetes would do when you want another instance of your Docker
                app up and running without having to worry where it will be deployed. 
            </p>

            <p>
                Autosar comes with its own terminology (runnables, software components, PDUs, Ports,
                splittables, etc; check the 140 pages long
                <a target="_blank" href="https://www.autosar.org/fileadmin/standards/R22-11/FO/AUTOSAR_TR_Glossary.pdf">
                    glossary</a> for more). The UML diagrams even have their own original icons (see
                <a target="_blank" href="https://www.autosar.org/fileadmin/standards/R20-11/CP/AUTOSAR_EXP_VFB.pdf">
                    Autosar: Virtual Functional Bus, Chapter 3: Overall mechanisms and concepts</a>).
            </p>

            <p>
                GUI tooling <b>is</b> the way to develop software with Autosar, from configuring,
                splitting, merging, modifying the arxml files to generating the C or C++ code. There
                are some old friends in this space, with
                <a target="_blank" href="https://cdn.vector.com/cms/content/know-how/autosar/Documents/AUTOSAR_Solution_Fact_Sheet_EN.pdf">
                    Vector</a> offering "a complete solution for your projects: tools, basic software,
                engineering services, on-site support and training classes. Additionally numerous
                other tools for ECU testing as well as measurement and calibration are available."
                Similar to Matlab's Simulink, there is an emphasis on
                <a target="_blank" href="https://cdn.vector.com/cms/content/products/DaVinci/Developer_Classic/DEV_SW_Design_Graphic.jpg">
                    visual programming</a>, <a target="_blank" href="https://cdn.vector.com/cms/content/products/DaVinci/Developer_Classic/DEV_DataExchangeAnalysis.jpg">
                    user-friendliness</a> and
                <a target="_blank" href="https://d23rjziej2pu9i.cloudfront.net/wp-content/uploads/2020/12/14160240/9_Getting-started-Configuring-modules.png">
                    easy</a> to ride wild horses. Everything easy and intuitive. Has nobody here read
                <a target="_blank" href="https://norvig.com/21-days.html">
                    Teach Yourself Programming in Ten Years</a>? Or "Teach Yourself Programming", for that matter? Or "Programming"? Was it
                replaced with
                <a target="_blank" href="https://www.youtube.com/watch?v=ChowxIrpIIY">
                    Model, Build &amp; Execute App in Only 10 Minutes</a>, instead?
            </p>

            <blockquote>
                <p>
                DaVinci Developer Classic is a tool for designing the architecture of software components (SWCs) for
                AUTOSAR Classic ECUs. This tool lets you create a graphic design of the interfaces, define the
                internal behavior with runnable entities and link the SWCs to one another.
                </p>
                
                <p>
                This function lets you generate the header file and the implementation template file for C-based
                applications easily and quickly from the DaVinci Developer Classic tool.
                </p>

                <p>
                Advantages: User-friendly and easy design of AUTOSAR SWCs; Numerous graphic editing functions; Check
                the SWCs for AUTOSAR conformity; Link model-based development tools via ARXML
                </p>

                <p>
                    <a target="_blank" href="https://cdn.vector.com/cms/content/products/DaVinci/DaVinci_Developer_FactSheet_EN.pdf">
                        Vector: DaVinci Developer Fact Sheet
                    </a><br>
                    <a target="_blank" href="https://www.vector.com/se/en/products/products-a-z/software/davinci-developer-classic/">
                        Vector: DaVinci Developer Classic
                    </a>
               </p>
            </blockquote>

            <p>
                DaVinci's Modeling Language (DML) is a kind of visual language that all tools in
                this Autosar sphere employ, the goal being a "simplified representation of the ARMXL
                models". Check the
                <a target="_blank" href="https://www.vector.com/se/en/products/products-a-z/software/davinci-developer-adaptive">
                    DaVinci Developer Adaptive</a> for extra info, video sessions included.
            </p>

            <p>
                Dassault Systèmes offers the
                <a target="_blank" href="https://www.3ds.com/fileadmin/AB_Refresh1_2.pdf">
                    AUTOSAR Builder™</a>, another user friendly wizard (check page 6 for a "beautiful" model),
            </p>

            <blockquote>
                <p>
                    AUTOSAR Builder is 100% AUTOSAR standard-compliant. To ease the creation of
                    complex AUTOSAR models, it offers user friendly wizards and advanced graphical
                    and table-based editors, guiding the user thru typical AUTOSAR design
                    steps. Therefore, it hides the complexity of AUTOSAR design activity through
                    features which not only prevent the user from creating erroneous designs but
                    also by offering automated completion/creation of AUTOSAR design elements.
                </p>

                <a target="_blank" href="https://www.3ds.com/products/catia/autosar-builder">
                    Dassault Systèmes: CATIA Autosar Builder
                </a>
            </blockquote>

            <p>
                <a target="_blank" href="https://www.elektrobit.com/products/ecu/eb-tresos/studio/">
                    Tresos Studio</a> from Elektrobit is another wizard.
                Check how one would go about
                <a target="_blank" href="https://d23rjziej2pu9i.cloudfront.net/wp-content/uploads/2021/12/EB_tresos/EB_tresos_AUTOSAR_Builder_Workflow.pdf">
                    building a new project with EB Tresos</a>. Buttons, clicks, new terminology. Easy
                    and fun!
            </p>

            <blockquote>
                <p>
                    ECU basic software configuration, validation, and generation in one single
                    environment. Users benefit from one tool environment for configuration,
                    validation, and code generation instead of juggling multiple
                    tools. Multithreading mechanisms are used to save time for code
                    generation. Various assistant functions and wizards ease day-to-day work.
                </p>

                <p>
                    <a target="_blank" href="https://www.elektrobit.com/products/ecu/eb-tresos/studio/">
                        Elektrobit: EB Tresos Studio
                    </a>
                </p>
            </blockquote>

            <p>
                Engineers leave companies and the field completely due to Autosar, but business
                suits seem to like it since it's just buttons one can click so they can understand
                that. While kings dream of impossibly expensive grand palaces the soldiers in the
                field know about how crazy all this is, they feel and see that they've become button
                clickers instead of software engineers. But I'll let others share their pain and
                misery of having to live with a DSL not invented by one person but by an association
                of over 350 automotive "partners" worldwide,
            </p>

            <blockquote>
                <p>
                If you want to increase the chances of being miserable in your professional career start working
                with autosar. I worked 3 months with it, and just bailed, I spend more time dealing with the
                tooling than actually implementing a feature.
                </p>

                <p>
                The only way I learned any of that was to screw around with it and very deliberately ask questions
                when updates were made so that I could learn. By the end of it, I was able to make simple changes
                but honestly I still never understood what was going on behind the scenes. If you get good at it,
                it’s decent job security. But it’s gonna be quite a ride.
                </p>

                <p>
                What you do do all day long is use Autosar GUIs. For those, no public tutorials exist as far as I'm
                aware because not only do these tools cost serious money, the seminars taught on how to use them
                aren't free either.  This exactly is why you can't meaningfully learn Autosar without having an
                Autosar-related job. You just don't have access to the tools and 3rd party libraries.
                </p>

                <a target="_blank" href="https://www.reddit.com/r/embedded/comments/167clxg/how_to_learn_autosar/">
                    Users feelings on Reddit about their own experience with Autosar
                </a>
            </blockquote>

            <blockquote>
                <p>
                    AUTOSAR takes a long time to get a hold of. I got 1.5 years in it and I still
                    haven't understood that thing properly. You can spend 10 years working on just
                    Com stack or diag stack that would still be about 15-20% of autosar
                    architecture. In fact you can spend your entire career with just that one
                    stack. I know folks who have worked 5 years in one stack and struggle when they
                    change over to a new stack. It's a painful software to deal with, at least on
                    the vector daVinci software, you make one drop-down menu selection and your
                    configuration in 2 other places would have been changed. The documentation for
                    the architecture is published on the autosar website and it's free to read. The
                    software is a whole other story. You can't buy the software because it's really
                    expensive. You can't pirate download the software because the automobile
                    companies usually send a list of features needed and the companies like vector
                    which provide the software just release the software with the requested features
                    for that specific project. You gotta have to bang your head a lot and struggle
                    for a few initially to get a hold of the thing.
                </p>

                <p>
                    Basically a tool that is supposed to make a bunch of automotive makers happy but
                    in reality it leaves everyone equally unhappy, but because it is "standardized"
                    it gets used anyway.
                </p>

                <p>
                    I actually LOVE automotive. But I would never touch any AUTOSAR project. AUTOSAR
                    is basically just a convoluted way to deflect blame (and liability) when some
                    weird software bugs happen. I would go as far as saying that AUTOSAR makes
                    software quality worse, because nobody understands how this complex monster of
                    XML, headers, configs, #ifdevs etc works. I prefer to spend my time to write
                    solid architecture, easy understandable code, and test the shit out of my
                    code. Complexity is the enemy of quality.
                </p>

                <p>
                    Now I just sit back with a margarita in my hand and enjoy watching the European
                    car brands being out-innovated by more nimble, flexible, maintainable,
                    adaptable, robust, "fitter" Asian brands. Once the last German automotive
                    supplier is gone kaputt, AUTOSAR will be forgotten by history. Darwin always
                    wins in the end....
                </p>

                <p>
                    Autosar is bad. It is bad as specification(nonono it is not a standard, it is a
                    specification) for multiple reason. But that is not actually a problem. The
                    problem is implementations. They are horrible, they are bad at any angle. Buggy
                    tooling, ignoring actual autosar(they call it a deviation), slow, incompatible,
                    ugly implemented bsp level, where you have to learn tens and hundreds of
                    workarounds and tricks. Simplest operation takes weeks to implement.
                </p>

                <p>
                    It is the ecosystem around the autosar that is cancerous. The tools are buggy
                    and atrocious. The code they produce is unreadable and in some instances buggy
                    as well. The documentation is also non-existent. The complexity is bigger than
                    developing by hand but I guess you gain the time of testing and complying with
                    all the standards. And all these at a very high price point. The few months I
                    worked with some of these tools were the most miserable months of my career. If
                    you work above mcal you are not an embedded developer you are a systems
                    engineer. Where I work the people that have only worked on automotive lack very
                    fundamental knowledge of embedded. I wonder what will happen in the automotive
                    industry when there will be very few that grasp the low level.
                </p>

                <p>
                    Vector daVinci is really a pain in the ... . The documentation is somehow vague
                    , they do not offer too many details. And i found a lot of bugs in the cbd
                    package that i received from them after being bought for more than a couple
                    thousands. On the other hand , i had a project in which i had to rewrite
                    manually the CanNm stack (non autosar project which used autosar type NM) and
                    still has problems. The idea of standardization is not bad by itself, only the
                    complexity of configuring correctly the project is driving me nuts.
                </p>

                <p>
                    <a target="_blank" href="https://www.reddit.com/r/embedded/comments/1cef2ql/hate_for_autosar/">
                        Reddit: Hate for Autosar
                    </a>                    
                </p>
            </blockquote>

            <p id="the-future">
                <h2>The future: self-driving cars go all in on DSLs</h2>
            </p>

            <p>
                The wannabes Caesars have done it. They won't leave any stone unturned, not a single
                place on the continent remains untouched by their grandiosity. And as such, they
                have legislated new languages with which now one speaks of the driving conditions
                and of the interactions between cars, though I don't see what new things they
                introduce besides the "human-readable Python-like syntax, that provides for a lower
                learning curve for domain experts while supporting a domain model that is directly
                recognizable by domain experts" (<a target="_blank" href="https://publications.pages.asam.net/standards/ASAM_OpenSCENARIO/ASAM_OpenSCENARIO_DSL/latest/language-reference/introduction.html#_domain_specific_language">
                ASAM introduction</a>) and a need to "describe the behavior of the autonomous vehicle as well as
                other actors or entities in the environment."
            </p>

            <p>
                This standard started out as an xml-based format but evolved into a full-fleged DSL,
                the <a target="_blank" href="https://publications.pages.asam.net/standards/ASAM_OpenSCENARIO/ASAM_OpenSCENARIO_DSL/latest/introduction.html">
                ASAM OpenSCENARIO</a>, which defines a declarative, constraint-based and aspect-oriented programming
                language. All in one. Here is a "scenario" that requires an initial speed of 40 to
                60 kph, as pieces of code are now called not functions but scenarios, similar to
                Autosar's reinventing the familiar modules terminology into components,
            </p>

            <blockquote>
                <div><p>
                    scenario my_scenario:<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;s: speed with:<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keep (it in [40kph..60kph])</p><p>

                    &nbsp;&nbsp;&nbsp;&nbsp;do serial:<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init: car1.drive() with:<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# note that it is recommended to specify an initial range<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# for speed and not a concrete speed<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speed(speed: s, at: start)</p></div>

                <p>
                    <a target="_blank" href="https://publications.pages.asam.net/standards/ASAM_OpenSCENARIO/ASAM_OpenSCENARIO_DSL/latest/user-guide/writing_reusable_scenarios.html">
                        ASAM: OpenSCENARIO DSL, Writing Reusable Scenarios                   
                    </a>
                </p>
            </blockquote>

            <p>
                I won't dwelve much on this one mostly because I haven't used it, except to note
                that other companies are basing their own DSLs on OpensSenario, like Foretellix's
                Measurable Scenario Definition Language (M-SDL),
            </p>

            <blockquote>
                <p>
                    The Measurable Scenario Description Language (M-SDL) is a mostly declarative
                    programming language. The only scenario that executes automatically is the
                    top-level scenario, top.main. You control the execution flow of the program by
                    adding scenarios to top.main. M-SDL is an aspect-oriented programming
                    language. This means you can modify the behavior or aspects of some or all
                    instances of an object to suit the purposes of a particular verification test,
                    without disturbing the original description of the object.
                </p>

                <p>
                    <a target="_blank" href="https://releases.asam.net/OpenSCENARIO/2.0-concepts/M-SDL_LRM_OS.pdf">
                        Foretellix: Measurable Scenario Description Language Reference        
                    </a>
                </p>
            </blockquote>

            <p>
                Here is an example from the reference manual that shows how to define a new scenario
                called <em>two_phases</em>. It defines a single actor, <em>car1</em>, which is a green
                truck. It uses the serial operator to activate the <em>car1.drive</em> scenario, and it
                applies the <em>speed()</em> modifier,
            </p>

            <blockquote>
                <div><p>
                    # A two-phase scenario<br>
                    scenario traffic.two_phases: # Scenario name<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;# Define the cars with specific attributes<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;car1: car with:<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keep(it.color == green)<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keep(it.category == truck)<br>
                    path: path # a route from the map; specify map in the test</p><p>

                    # Define the behavior<br>
                    do serial:<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;phase1: car1.drive(path: path) with:<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speed(speed: 0kph, at: start)<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speed(speed: 10kph, at: end)<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;phase2: car1.drive(path: path) with:<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speed(speed: [10..15]kph)</p></div>

                <p>
                    <a target="_blank" href="https://releases.asam.net/OpenSCENARIO/2.0-concepts/M-SDL_LRM_OS.pdf">
                        Foretellix: Measurable Scenario Description Language Reference        
                    </a>
                    
                </p>
            </blockquote>

            <p>
                At a first glance, and similar to the CAPL observation I've made above, it doesn't
                look to me that they introduce really new or desperately needed language abstractions
                that aren't available in other languages.
            </p>

            <p>
                There is even a specification for the road network, in xml of course,
            </p>

            <blockquote>
                <p>
                    ASAM OpenDRIVE was developed in response to demand for the specification of an
                    exchange format to define static road networks that can be used in driving
                    simulation applications.
                </p>

                <p>
                    The ASAM OpenDRIVE Specification specifies the file format for static road
                    network descriptions. The Extensible Markup Language (XML) is used to represent
                    these descriptions. The ASAM OpenDRIVE Specification specifies how to model
                    static road networks. In more detail, it specifies the structure, the sequence,
                    the elements, and values to represent static road networks.
                </p>

                <p>
                    <a target="_blank" href="https://publications.pages.asam.net/standards/ASAM_OpenDRIVE/ASAM_OpenDRIVE_Specification/latest/specification/00_preface/00_introduction.html">
                        ASAM OpenDRIVE
                    </a>
                </p>
            </blockquote>

            <p>
                If this
                <a target="_blank" href="https://www.youtube.com/watch?v=2pX2dJL0Jnc">
                    video presentation of ASAM OpenDRIVE</a> doesn't convince you of its value,
                there is a different standard for road networks one can use, a standard developed by
                the same German car manufacturers, also based on xml,
            </p>

            <blockquote>
                <p>
                    The Navigation Data Standard (NDS) is a standardized format for automotive-grade
                    navigation databases, jointly developed by automobile manufacturers and
                    suppliers. NDS is an association registered in Germany. Members are automotive
                    OEMs, map data providers, and navigation device/application providers.
                </p>

                <p>
                    <a target="_blank" href="https://en.wikipedia.org/wiki/Navigation_Data_Standard">
                        Wikipedia: Navigation Data Standard
                    </a><br>
                    <a target="_blank" href="https://nds-association.org/nds-tools/">
                        NDS Tools: Providing Our Members With Everything They Need
                    </a>
                </p>
            </blockquote>

            <p>
                Well, the list of examples can go on and on but we've reached the edge of the
                continent. What remains is to turn our horses around and explore the little kingdoms
                we've already encountered in our journey in more detail. Or, who knows, you can
                venture into the rough seas ahead and bring to light new DSL, file formats,
                standards and intuitively easy to use tools now that your appetite has been wet.
            </p>

            <p id="conclusion">
                <h2>Conclusion</h2>
            </p>
            <p>
                The pristine C land has been torn to pieces. Every imaginable torture has been
                inflicted upon it. Its use restricted, features forbidden, fresh blood brought in to
                replace its inadequacies, people banned for even seeing its face, its true self
                painted over with colorful interfaces. Nobody wants to see its true image, nobody to
                hear its voice. Yet, they say it is the thing they all need. Like health, they all
                praise it then drink themselves to death. A plethora of tools to increase the speed
                of development, to inspect a running system, to exchange requirements and reach
                agreement between teams and stakeholders as to what needs to be developed and extra
                programming languages have taken its place.
            </p>

            <p>
                If Lisp gives its practitioners the freedom to dream and play with their own wild
                abstractions, its absence gives companies the opportunity to flood the market with
                junk-food software and keep developers hooked on these cheap, calorie intensive but
                nutritionally void substitutes. And build fortunes, as a result.
            </p>

            <p>
                On the other hand, I feel skeptical that one tool can solve all problems. I feel
                skeptical that Lisp can be used everywhere. That fact that it works so well in a
                couple of instances, like it does for Emacs or
                <a target="_blank" href="https://stumpwm.github.io/">StumpWM</a> among others, is no
                real argument. The cost, the energy, the developers' know-how, must all be counted
                in as well. There is only so much talent lying around in any industry.
                <a target="_blank" href="https://mihaiolteanu.me/if-lisp-is-so-great">Not everybody
                    can live in designer houses</a>, some must live in cramped apartment blocks. It
                is possible that the software industry has stretched itself thin, most probably
                driven by profits. Software is the promised land where investors multiply their
                fortunes. When more and more of these gold-seekers pour in, the "human resources"
                needs increase as well. At one point there is a lack of sufficiently trained or
                naturally inclined practitioners to be able to do the job. So naturally the response
                is to lower the entry threshold. Naturally the response is to simplify, improve and
                expand on the tools these newcomers use. The more intuitive, the better. With the
                negative effects we see all around us. It is possible indeed that a small team of
                knowledgeable parentheses masters could build a car's software in Lisp, do it
                better and more efficiently than what is now available in the industry with all these
                tools we've seen. But add in dozens of car companies in the mix all wanting a market
                share in this gold rush and the number of available teams riding wild horses
                and still being able to
                <a target="_blank" href="https://en.wikipedia.org/wiki/Parthian_shot">take a shot</a>
                decreases dramatically. So what is one supposed to do? Bring in the tamed
                horses. The old ones, too. Even the lame ones! In times of war, even donkeys are
                good enough and can count horses for a while.
            </p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My Favorite Algorithm: Linear Time Median Finding (219 pts)]]></title>
            <link>https://rcoh.me/posts/linear-time-median-finding/</link>
            <guid>41066536</guid>
            <pubDate>Thu, 25 Jul 2024 09:16:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rcoh.me/posts/linear-time-median-finding/">https://rcoh.me/posts/linear-time-median-finding/</a>, See on <a href="https://news.ycombinator.com/item?id=41066536">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
          <p>
          Thanks to random internet strangers, you can also read this post in:
          
            <a href="https://habr.com/post/346930/">Russian</a>
          
          </p>
        
        

<p>Finding the median in a list seems like a trivial problem, but doing so in linear time turns out to be tricky. In this post I’m going to walk through one of my favorite algorithms, the median-of-medians approach to find the median of a list in deterministic linear time. Although proving that this algorithm runs in linear time is a bit tricky, this post is targeted at readers with only a basic level of algorithmic analysis.</p>

<h3 id="finding-the-median-in-o-n-log-n">Finding the median in O(n log n)</h3>

<p>The most straightforward way to find the median is to sort the list and just pick the median by its index. The fastest comparison-based sort is <code>\(O(n \log n)\)</code>, so that dominates the runtime.<sup id="fnref:2"><a rel="footnote" href="#fn:2">1</a></sup><sup id="fnref:3"><a rel="footnote" href="#fn:3">2</a></sup></p>
<div><pre><code data-lang="python"><span>def</span> <span>nlogn_median</span>(l):
    l <span>=</span> sorted(l)
    <span>if</span> len(l) <span>%</span> <span>2</span> <span>==</span> <span>1</span>:
        <span>return</span> l[len(l) <span>/</span> <span>2</span>]
    <span>else</span>:
        <span>return</span> <span>0.5</span> <span>*</span> (l[len(l) <span>/</span> <span>2</span> <span>-</span> <span>1</span>] <span>+</span> l[len(l) <span>/</span> <span>2</span>])</code></pre></div>
<p>Although this method offers the simplest code, it’s certainly not the fastest.</p>

<h3 id="finding-the-median-in-average-o-n">Finding the median in average O(n)</h3>

<p>Our next step will be to <em>usually</em> find the median within linear time, assuming we don’t get unlucky. This algorithm, called “quickselect”, was devevloped by Tony Hoare who also invented the similarly-named quicksort. It’s a recursive algorithm that can find any element (not just the median).</p>

<ol>
<li>Pick an index in the list. It doesn’t matter how you pick it, but choosing one at random works well in practice. The element at this index is called the <strong>pivot</strong>.</li>
<li>Split the list into 2 groups:

<ol>
<li>Elements less than or equal to the pivot, <code>lesser_els</code></li>
<li>Elements strictly greater than the pivot, <code>great_els</code></li>
</ol></li>
<li>We know that one of these groups contains the median. Suppose we’re looking for the <em>kth</em> element:

<ul>
<li>If there are <em>k</em> or more elements in <code>lesser_els</code>, recurse on list <code>lesser_els</code>, searching for the <em>kth</em> element.</li>
<li>If there are fewer than <em>k</em> elements in <code>lesser_els</code>, recurse on list <code>greater_els</code>. Instead of searching for <em>k</em>, we search for <code>k-len(lesser_els)</code>.</li>
</ul></li>
</ol>

<p>Here’s an example of the algorithm running on a list with 11 elements:</p>

<pre><code>Consider the list below. We'd like to find the median.
l = [9,1,0,2,3,4,6,8,7,10,5]
len(l) == 11, so we're looking for the 6th smallest element
First, we must pick a pivot. We randomly select index 3.
The value at this index is 2.

Partitioning based on the pivot:
[1,0,2], [9,3,4,6,8,7,10,5]
We want the 6th element. 6-len(left) = 3, so we want
the third smallest element in the right array

We're now looking for third smallest element in the array below:
[9,3,4,6,8,7,10,5]
We pick an index at random to be our pivot.
We pick index 3, the value at which, l[3]=6

Partitioning based on the pivot:
[3,4,5,6] [9,7,10]
We want the 3rd smallest element, so we know it's the
3rd smallest element in the left array

We're now looking for the 3rd smallest in the array below:
[3,4,5,6]
We pick an index at random to be our pivot.
We pick index 1, the value at which, l[1]=4
Partitioning based on the pivot:
[3,4] [5,6]
We're looking for the item at index 3, so we know it's
the smallest in the right array.

We're now looking for the smallest element in the array below:
[5,6]

At this point, we can have a base case that chooses the larger
or smaller item based on the index.
We're looking for the smallest item, which is 5.
return 5
</code></pre>

<p>To find the median with quickselect, we’ll extract quickselect as a separate function. Our <code>quickselect_median</code> function will call <code>quickselect</code> with the correct indices.</p>
<div><pre><code data-lang="python"><span>import</span> random
<span>def</span> <span>quickselect_median</span>(l, pivot_fn<span>=</span>random<span>.</span>choice):
    <span>if</span> len(l) <span>%</span> <span>2</span> <span>==</span> <span>1</span>:
        <span>return</span> quickselect(l, len(l) <span>//</span> <span>2</span>, pivot_fn)
    <span>else</span>:
        <span>return</span> <span>0.5</span> <span>*</span> (quickselect(l, len(l) <span>/</span> <span>2</span> <span>-</span> <span>1</span>, pivot_fn) <span>+</span>
                      quickselect(l, len(l) <span>/</span> <span>2</span>, pivot_fn))


<span>def</span> <span>quickselect</span>(l, k, pivot_fn):
    <span></span><span>"""
</span><span>    Select the kth element in l (0 based)
</span><span>    :param l: List of numerics
</span><span>    :param k: Index
</span><span>    :param pivot_fn: Function to choose a pivot, defaults to random.choice
</span><span>    :return: The kth element of l
</span><span>    """</span>
    <span>if</span> len(l) <span>==</span> <span>1</span>:
        <span>assert</span> k <span>==</span> <span>0</span>
        <span>return</span> l[<span>0</span>]

    pivot <span>=</span> pivot_fn(l)

    lows <span>=</span> [el <span>for</span> el <span>in</span> l <span>if</span> el <span>&lt;</span> pivot]
    highs <span>=</span> [el <span>for</span> el <span>in</span> l <span>if</span> el <span>&gt;</span> pivot]
    pivots <span>=</span> [el <span>for</span> el <span>in</span> l <span>if</span> el <span>==</span> pivot]

    <span>if</span> k <span>&lt;</span> len(lows):
        <span>return</span> quickselect(lows, k, pivot_fn)
    <span>elif</span> k <span>&lt;</span> len(lows) <span>+</span> len(pivots):
        <span># We got lucky and guessed the median</span>
        <span>return</span> pivots[<span>0</span>]
    <span>else</span>:
        <span>return</span> quickselect(highs, k <span>-</span> len(lows) <span>-</span> len(pivots), pivot_fn)</code></pre></div>
<p>Quickselect excels in the real world: It has almost no overhead and operates in average <code>\(O(n)\)</code>. Let’s prove it.</p>

<h4 id="proof-of-average-o-n">Proof of Average O(n)</h4>

<p>On average, the pivot will split the list into 2 approximately equal-sized pieces. Therefore, each subsequent recursion operates on <sup>1</sup>⁄<sub>2</sub> the data of the previous step.</p>

<p>$$C=n+\frac{n}{2}+\frac{n}{4}+\frac{n}{8}+…=2n=O(n)$$</p>

<p>There are many ways to prove that this series converges to 2n. Rather than reproducing one here, I’ll just direct you to the excellent <a href="https://en.wikipedia.org/wiki/1/2_%2B_1/4_%2B_1/8_%2B_1/16_%2B_%E2%8B%AF">Wikipedia article</a> about this specific infinite series.</p>

<p>Quickselect gets us linear performance, but only in the average case. What if we aren’t happy to be average, but instead want to guarantee that our algorithm is linear time, no matter what?</p>

<h3 id="deterministic-o-n">Deterministic O(n)</h3>

<p>In the section above, I described quickselect, an algorithm with <em>average</em> <code>\(O(n)\)</code> performance. Average in this context means that, <em>on average</em>, the algorithm will run in <code>\(O(n)\)</code>. Technically, you could get extremely unlucky: at each step, you could pick the largest element as your pivot. Each step would only remove one element from the list and you’d actually have <code>\(O(n^2)\)</code> performance instead of <code>\(O(n)\)</code>.</p>

<p>With that in mind, what follows is an algorithm for <em>picking pivots</em>. Our goal will be to pick a pivot in linear time that removes enough elements in the worst case to provide <code>\(O(n)\)</code> performance when used with quickselect. This algorithm was originally developed in 1973 by the mouthful of Blum, Floyd, Pratt, Rivest, and Tarjan. If my treatment is unsatisfying, their <a href="http://people.csail.mit.edu/rivest/pubs/BFPRT73.pdf">1973 paper</a> will certainly be sufficient. Rather than walk through the algorithm in prose, I’ve heavily annotated my Python
implementation below:</p>
<div><pre><code data-lang="python"><span>def</span> <span>pick_pivot</span>(l):
    <span></span><span>"""
</span><span>    Pick a good pivot within l, a list of numbers
</span><span>    This algorithm runs in O(n) time.
</span><span>    """</span>
    <span>assert</span> len(l) <span>&gt;</span> <span>0</span>

    <span># If there are &lt; 5 items, just return the median</span>
    <span>if</span> len(l) <span>&lt;</span> <span>5</span>:
        <span># In this case, we fall back on the first median function we wrote.</span>
        <span># Since we only run this on a list of 5 or fewer items, it doesn't</span>
        <span># depend on the length of the input and can be considered constant</span>
        <span># time.</span>
        <span>return</span> nlogn_median(l)

    <span># First, we'll split `l` into groups of 5 items. O(n)</span>
    chunks <span>=</span> chunked(l, <span>5</span>)

    <span># For simplicity, we can drop any chunks that aren't full. O(n)</span>
    full_chunks <span>=</span> [chunk <span>for</span> chunk <span>in</span> chunks <span>if</span> len(chunk) <span>==</span> <span>5</span>]


    <span># Next, we sort each chunk. Each group is a fixed length, so each sort</span>
    <span># takes constant time. Since we have n/5 chunks, this operation</span>
    <span># is also O(n)</span>
    sorted_groups <span>=</span> [sorted(chunk) <span>for</span> chunk <span>in</span> full_chunks]

    <span># The median of each chunk is at index 2</span>
    medians <span>=</span> [chunk[<span>2</span>] <span>for</span> chunk <span>in</span> sorted_groups]

    <span># It's a bit circular, but I'm about to prove that finding</span>
    <span># the median of a list can be done in provably O(n).</span>
    <span># Finding the median of a list of length n/5 is a subproblem of size n/5</span>
    <span># and this recursive call will be accounted for in our analysis.</span>
    <span># We pass pick_pivot, our current function, as the pivot builder to</span>
    <span># quickselect. O(n)</span>
    median_of_medians <span>=</span> quickselect_median(medians, pick_pivot)
    <span>return</span> median_of_medians

<span>def</span> <span>chunked</span>(l, chunk_size):
    <span></span><span>"""Split list `l` it to chunks of `chunk_size` elements."""</span>
    <span>return</span> [l[i:i <span>+</span> chunk_size] <span>for</span> i <span>in</span> range(<span>0</span>, len(l), chunk_size)]</code></pre></div>
<p>Let’s prove why the median-of-medians is a good pivot. To help, consider this visualization of our pivot-selection algorithm:</p>

<p><img src="https://rcoh.me/images/median-of-medians.svg" alt="Pivot selection visualization"></p>

<p>The red oval denotes the medians of the chunks, and the center circle denotes the median-of-medians. Recall that we want our pivot to split the list as evenly as possible. Let’s consider the worst possible case – the case where are pivot is as close as possible to the beginning of the list (without loss of generality, this argument symmetrically applies to the end of the list as well.)</p>

<p>Consider the four quadrants (which overlap, including the center column (when the number of columns is odd) &amp; middle row):</p>

<ul>
<li>Top left: Every item in this quadrant is strictly less than the median</li>
<li>Bottom left: These items may be bigger (or smaller!) than the median</li>
<li>Top right: These items may be bigger (or smaller!) than the median</li>
<li>Bottom right: Every item in this quadrant is strictly greater than the median</li>
</ul>

<p>Out of these four two quadrants are useful because they allow us to make assertions about their contents (top left, bottom right) and two are not (bottom left, top right).</p>

<p>Now lets return to our original task, finding the worst possible case where our pivot falls as early in the list as possible. As I argued above, at a minimum, every item in the top left is strictly less than our pivot. How many items are there as a function of <code>\(n\)</code>? Each column has 5 items, of which we’ll take 3; we’re taking half of the columns, thus:</p>

<p>$$f(n)=\frac{3}{5}*\frac{1}{2}n=\frac{3}{10}n$$</p>

<p>Therefore, at each step, at minimum, we will remove, at minimum, 30% of the rows.</p>

<p>But is dropping 30% of the elements at each step sufficient? It’s worse than the 50% we achieved in the randomized algorithm. At each step, our algorithm must do:</p>

<ul>
<li>O(n) work to partition the elements</li>
<li>Solve 1 subproblem <sup>1</sup>⁄<sub>5</sub> the size of the original to compute the median of medians</li>
<li>Solve 1 subproblem <sup>7</sup>⁄<sub>10</sub> the size of the original as the recursive step</li>
</ul>

<p>This yields the following equation for the total runtime, <code>\(T(n)\)</code>:</p>

<p>$$T(n)=n + T\left(\frac{n}{5}\right)+T\left(\frac{7n}{10}\right)$$</p>

<p>It’s not straightforward to prove why this is <code>\(O(n)\)</code>. The initial version of this post alluded to the master theorem, but someone recently brought to my attention that that is incorrect – since there are two recursive terms, you can’t apply the master theorem. Rather, the only straightforward proof that I’m aware of is by induction.<sup id="fnref:induction"><a rel="footnote" href="#fn:induction">3</a></sup></p>

<h3 id="recap">Recap</h3>

<p>We have quickselect, an algorithm that can find the median in linear time given a sufficiently good pivot. We have our median-of-medians algorithm, an <code>\(O(n)\)</code> algorithm to select a pivot (which is good enough for quickselect). Combining the two, we have an algorithm to find the median (or the nth element of a list) in linear time!</p>

<h3 id="linear-time-medians-in-practice">Linear Time Medians In Practice</h3>

<p>In the real world, selecting a pivot at random is almost always sufficient. Although the median-of-medians approach is still linear time, it just takes too long to compute in practice. The <code>C++</code> standard library uses an algorithm called <a href="https://en.wikipedia.org/wiki/Introselect">introselect</a> which utilizes a combination of heapselect and quickselect and has an <code>\(O(n \log n)\)</code> bound. Introselect allows you to use a generally fast algorithm with a poor upper bound in combination with an algorithm that is slower in practice but has a good upper bound. Implementations start with the fast algorithm, but fall back to the slower algorithm if they’re unable to pick effective pivots.</p>

<p>To finish out, here’s a comparison of the elements considered by each implementation. This isn’t runtime performance, but instead the total number of elements looked at by the quickselect function. It doesn’t count the work to compute the median-of-medians. The point of this graph <strong>is not</strong> to demonstrate that median-of-medians is a good algorithm, but rather to demonstrate that it’s an effective way to pick pivots.</p>

<p><img src="https://rcoh.me/images/medians-graph.png" alt="Graph of elements visited"></p>

<p>It’s exactly what you would expect! The deterministic pivot almost always considers fewer elements in quickselect than the random pivot. Sometimes we get lucky and guess the pivot on the first try, which manifests itself as dips in the green line. Math works!</p>

<p>P.S: In 2017 a <a href="http://erdani.com/research/sea2017.pdf">new paper</a> came out that actually makes the median-of-medians approach competitive with other selection algorithms. Thanks to the paper’s author, Andrei Alexandrescu for bringing it to my attention!</p>

<p>Thanks to Leah Alpert for reading drafts of this post. Reddit users <code>axjv</code> and <code>linkazoid</code> pointed out that <code>9</code> mysteriously disappeared in my example which has since been fixed. Another astute reader pointed out several errors which have since been resolved:</p>

<ul>
<li>The recurrence relation was <code>\(7T(n/10)\)</code> but should have been <code>\(T(7n/10))\)</code></li>
<li>The master theorem is actually inapplicable in this case</li>
<li>I incorrectly referred to the top right, instead of top left quadrant in my arguments</li>
</ul>

<hr><p>

Want to get emailed about new blog posts?
</p><p>

I post about once every few weeks on topics like
<a href="https://rcoh.me/tags/databases">databases</a>, <a href="https://rcoh.me/tags/language-internals">language internals</a> and <a href="https://rcoh.me/tags/algorithms">algorithms</a>, and recently, <a href="https://rcoh.me/tags/deep-learning">deep learning</a>.

</p><hr><p>
Do you want to hire me? I’m available for engagements from 1 week to a few months. <a href="https://rcoh.me/hire-me">Hire me!</a></p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple Maps on the web launches in beta (389 pts)]]></title>
            <link>https://www.apple.com/newsroom/2024/07/apple-maps-on-the-web-launches-in-beta/</link>
            <guid>41065326</guid>
            <pubDate>Thu, 25 Jul 2024 06:26:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.apple.com/newsroom/2024/07/apple-maps-on-the-web-launches-in-beta/">https://www.apple.com/newsroom/2024/07/apple-maps-on-the-web-launches-in-beta/</a>, See on <a href="https://news.ycombinator.com/item?id=41065326">Hacker News</a></p>
<div id="readability-page-1" class="page">




	
    







<nav id="ac-localnav" lang="en-US" role="navigation" aria-label="Newsroom" data-analytics-region="local nav" data-sticky="">
    
    
    
        




    
    
    
	
	

</nav>






<!-- main goes here -->
<main id="main" role="main">
    
    


    <div>
        <article data-analytics-activitymap-region-id="quickread">
            




    
    
    









    





    <div>
        <div>
            
            <img srcset="https://www.apple.com/newsroom/images/logos/quick-reads-logos/Apple-Maps.jpg.square_social.jpg, https://www.apple.com/newsroom/images/logos/quick-reads-logos/Apple-Maps.jpg.square_social.jpg 2x" src="https://www.apple.com/newsroom/images/logos/quick-reads-logos/Apple-Maps.jpg.square_social.jpg" alt="The Apple Maps app logo.">
        </div>

        

        <div>
                
                
                
                    <h2>
                        
    
        Apple Maps on the web launches in beta
    

                    </h2>
                
            </div>

        

        
            
    
    
    
    
    

        

    </div>







    
    
    


     
     
    
        <div>
             
                 <div>Today, <a href="http://beta.maps.apple.com/" target="_blank" rel="nofollow" data-analytics-exit-link="">Apple Maps on the web</a> is available in public beta, allowing users around the world to access Maps directly from their browser.<sup>1</sup>
</div>
                 
             
                 <div>Now, users can get driving and walking directions; find great places and useful information including photos, hours, ratings, and reviews; take actions like ordering food directly from the Maps place card; and browse curated Guides to discover places to eat, shop, and explore in cities around the world. Additional features, including Look Around, will be available in the coming months.
</div>
                 
             
                 <div>All developers, including those using <a href="https://developer.apple.com/documentation/mapkitjs/" target="_blank" rel="nofollow" data-analytics-exit-link="">MapKit JS</a>, can also link out to Maps on the web, so their users can get driving directions, see detailed place information, and more.
</div>
                 
             
                 <div>Maps on the web is currently available in English, and is compatible with Safari and Chrome on Mac and iPad, as well as Chrome and Edge on Windows PCs. Support for additional languages, browsers, and platforms will be expanded over time.
</div>
                 
             
         </div>
 

    
    
    





    
    
    <div>
            <ol>
<li>Availability varies depending on region.</li>
</ol>

        </div>



    
    
    




            <section data-analytics-activitymap-region-id="quickread accordion" data-component-list="Accordion">
                <ul data-accordion="" role="list">
                    




    
    
    








    
    
    <li data-accordion-item="accordion-item-0">
        
        
            <h2>
                
    

            </h2>
        
        
    </li>





                </ul>
            </section>
        </article>

    </div>
    


</main>

<!-- main ends here -->


	

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Every company should be owned by its employees (780 pts)]]></title>
            <link>https://www.elysian.press/p/employee-ownership</link>
            <guid>41065227</guid>
            <pubDate>Thu, 25 Jul 2024 06:10:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.elysian.press/p/employee-ownership">https://www.elysian.press/p/employee-ownership</a>, See on <a href="https://news.ycombinator.com/item?id=41065227">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png" width="1456" height="1097" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1097,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:6286325,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5dd334d7-440e-4ea9-9385-1be0186d010a_2464x1856.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>There are 47 millionaires working for </span><a href="https://centralstatesco.com/" rel="">Central States Manufacturing</a><span>, and they’re not all in the C-Suite. Many of them are drivers or machinists—blue-collar workers for the company.&nbsp;</span></p><p>How? The company is owned by its employees. Every worker gets a salary but also a percentage of their salary in stock ownership. When the company does well, so do the employees—all of them, not just the ones at the top.&nbsp;</p><p><span>And the company </span><em>is</em><span> doing well. “When we sat down eight years ago, we said we want to be a billion-dollar company and have 1,500 people, we are on track to be both of those this year,” </span><a href="https://www.linkedin.com/in/tim-ruger-b9763011/" rel="">Tim Ruger</a><span>, president of Central States, tells me.</span></p><p><span>That’s right, this manufacturing company will become a unicorn this year—one of only </span><a href="https://companiesmarketcap.com/largest-companies-by-revenue/" rel="">6,000</a><span> companies in the world earning more than $1 billion in revenue. But unlike Walmart, Amazon, and Apple, it’s not just the executives getting paid out.</span></p><p>“It’s not like 80 percent of the company is owned by management and the rest is owned by employees, it’s really well spread across all functions,”&nbsp; Ruger tells me. “We've got a number of people that have been here 15, 20 years and they have $1 million plus balances, which is really cool for a person that came out of high school and runs our rollformer. You can’t do that everywhere.”</p><p><span>He’s right, and because you can’t do that everywhere there is a huge wealth disparity in America. Even though the economy has been on an upward trajectory for a century, the wealth it generates has funneled to a much smaller population who owns it. After </span><a href="https://www.elysian.press/p/an-alternative-to-tax-the-rich" rel="">a 1990s bill</a><span> meant executives started getting paid in stock options while the rest of their employees earned a static salary, executive pay skyrocketed with the market while their workers’ pay stagnated.&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp" width="1216" height="1172" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1172,&quot;width&quot;:1216,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:91842,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f8a6160-0cc6-4938-960c-754fa06a7532_1216x1172.webp 1456w" sizes="100vw"></picture></div></a></figure></div><p>If employees had also owned part of the company, their pay would have skyrocketed with the market too, but they didn’t. “It's hard to build true wealth for yourself if you don't have some type of ownership in something, and it's hard for most people to get ownership in something,” Ruger says.&nbsp;</p><p><span>Upping the minimum wage won’t fix that. As Nathan Schneider says in his book </span><em><a href="https://bookshop.org/a/2268/9781568589596" rel="">Everything for Everyone</a></em><span>: “One way or another, wealth is going to the owners—of where we live, where we work, and what we consume.”</span></p><p>So why not make workers the owners?</p><p><span>There is a growing movement to do just that. Central States is one of </span><a href="https://www.nceo.org/articles/employee-ownership-by-the-numbers" rel="">6,533 companies</a><span> that have formed an Employee Stock Ownership Plan (or ESOP) in the United States, and that number is growing by about 250 companies annually. That’s 14.7 million employees who have ownership in companies worth, collectively, $2.1 trillion.&nbsp;</span></p><p>Every year, those employees get a percentage of their salaries in company stock. During Central States’ worst year, employees earned the equivalent of 6 percent of their pay in stock, during their best they earned 26 percent. Last year, an employee earning $100,000 a year received $26,000 worth of stock in their account. As the company has grown, the value of that stock has averaged 20 percent returns annually, outperforming the stock market.&nbsp;</p><p>Just like Jeff Bezos can sell a portion of his Amazon stock to buy a new house, employees at ESOPs can pull money out of their stock accounts to pay for tuition, medical bills, or as a downpayment on a primary residence.&nbsp;</p><p><span>“We have several in production and drivers who have been here for over 20 years that have multi-million dollar accounts,” </span><a href="https://www.linkedin.com/in/chad-ware-b9307b234/" rel="">Chad Ware</a><span>, Central States’ CFO tells me. “We’ve had several folks take out enough money to buy a home outright.”</span></p><p>An ESOP account functions a lot like a second 401k, but invested solely in the company. Employees can pull out whenever they’d like, but outside of those approved uses they will have to pay taxes and an early withdrawal fee to remove the funds before the age of 59 ½. After they leave the company or retire, the complete balance of their accounts will be paid out to them over a six-year period.&nbsp;</p><p>This means the company needs to have that cash on hand to pay out, and this has to be budgeted into their annual cash flow. But it also means the employees are incentivized to participate in the wellbeing of the company.</p><p><span>On the stock market, executives are expected to produce quarterly results, often to the detriment of their companies’ long-term success. After Boeing famously rushed the rollout of its 737 MAX aircraft to meet quarterly expectations, fatal crashes and safety concerns killed </span><a href="https://www.reuters.com/business/aerospace-defense/us-says-boeing-breached-2021-deferred-prosecution-737-max-agreement-2024-05-14/" rel="">346 people</a><span> and cost the company </span><a href="https://knowledge.insead.edu/strategy/boeings-tragedy-fall-american-icon#:~:text=The%20737%20MAX%20fleet%20was,was%20reduced%20and%20then%20stopped." rel="">$20 billion</a><span>. Companies like Wells Fargo, Sears, and Bausch Health have similarly cut corners to inflate short-term results at the expense of their long-term health.</span></p><p>But an employee at Central States doesn’t care about one good quarter, they care about a good 10 years, and a good 50. If the company’s products turn out to be inferior next year their stock in the company will tank, if the company goes bankrupt in 20 years it will go down to zero. It’s in their best interest to act in the long-term interest of the company, and to grow it sustainably rather than quickly.&nbsp;</p><p><span>“One of our CEOs likes to say that these companies are not looking to hit home runs, they're looking to hit singles and doubles on a regular basis,” </span><a href="https://www.linkedin.com/in/noelle-montano-a940106/" rel="">Noelle Montaño</a><span>, executive director for Employee-owned S Corporations of America (or </span><a href="https://esca.us/" rel="">ESCA</a><span>) tells me. “When the C-Suite goes into work every day, they see the receptionist, the person on the factory floor, the guy who's building the building or digging the ditches, and they know that those are the shareholders they are responsible for. They take that seriously.”</span></p><p>Every month, Central States executives share the company’s P&amp;L with employees, and every year they share the financials of the business at annual shareholders meetings, where employee-owners can participate in discussions about the future of the company. After a new plant was struggling with sales in its second year, one employee-owner raised his hand at a shareholder meeting and said, “This isn’t helping our company, and it’s not helping my share price, can we discuss the closure of this plant?”&nbsp;</p><p>“It was a great conversation, I love the fact that it’s not somebody else's problem,” Ruger says. “They're thinking like business owners, which is what you want, right?”</p><p>As a result, ESOPs are generally healthier companies. “These companies do better at employee retention, they do better at retirement benefits, they default less often on loans,” Montaño says. “Our companies did better during the Great Recession, they did better during Covid.”</p><p><span>There are serious benefits to the company for operating this way. ESOPs are a viable alternative to unions—there is no rift between the owners and the workers, workers </span><em>are </em><span>the owners! They are also exempt from paying income tax—though they tend to spend those dollars on their employees instead.&nbsp;</span></p><p>“It helped us grow when we were smaller. Now that we're larger, what we're paying out each year to our employee-owners is probably more than we would pay in tax, quite honestly,” Ruger says. “But if I have to choose who we pay our money to, I'd rather pay employee owners than give it back to the government. I think it's probably the right way.”</p><p><span>He brings up a good point. I’ve mentioned before that I do not think the answer to our wealth disparity is to “</span><a href="https://www.elysian.press/p/an-alternative-to-tax-the-rich" rel="">tax the rich</a><span>.” Don’t take Jeff Bezos’ money and give it to the government, better distribute Amazon’s earnings among its employees—not just to its founder.</span></p><p>“I think our taxes are way too burdening and we don’t do a good job using the money. I wouldn’t mind paying more if we were using it well, I just don’t know if we are,” Ruger says. “Why redistribute the wealth after it’s already been earned, why can’t we earn it beforehand? It naturally levels out the haves and have-nots.”</p><p>It’s worth noting that the “haves” still benefit from this equation. </p><p>“Most ESOP companies start because the founder wants to exit or cash out, but they don't want to sell to a private equity firm that will run their company into the ground or slash and burn employee headcount,” Ware says. “A lot of owners built a company and were in the trenches with the people beside them. They want to take care of them, but they also want to cash out. A good option is to set up an ESOP, and that's exactly how Central States got started.”</p><p>Carl Carpenter founded Central States in 1988, but sold it to his employees when he retired in 1991. More specifically: He sold a portion of the shares of his company to an ESOP trust, which holds the company's shares on behalf of the employees. In 2011, the company bought the remaining shares and became 100% employee-owned. Carpenter sailed into the sunset with a nice retirement package even as he allowed his employees to start building their own, and I don’t see why every founder shouldn’t do the same.&nbsp;</p><p>“There are real benefits for an owner turning the company into an ESOP,” Ruger says. “They personally benefit from the sale when they exit the business. Additionally, there are some real tax benefits to turn it into an ESOP—they pay a whole lot less taxes when they sell the company.”</p><p>The only reason they don’t do it more often is because they don’t know about it. “The number one issue is education,” Montaño says. “If you're looking to sell your business and you go to your accountant or lawyer, they may not say ‘Have you thought about an ESOP?’”&nbsp;</p><p>It’s also not a quick process—founders interested in selling to their employees need to plan ahead. A feasibility study needs to be conducted to ensure the viability of an ESOP plan and an independent valuation of the company needs to be conducted to determine the fair market value of the shares. A trust needs to be defined and structured, and a trustee appointed to oversee it on behalf of the employees. “If an owner just wants to get out, an ESOP is not for them,” Montaño says.&nbsp;</p><p><span>That might be changing, ESOPs have bi-partisan support in Congress and moves have been made to improve education about ESOPS and make the transition easier for founders. “We have support from Members of Congress across the political spectrum.... It's capitalism at its best,”&nbsp; Montaño says. “A year and a half ago, there was legislation mandating the Department of Labor to open an </span><a href="https://www.dol.gov/newsroom/releases/ebsa/ebsa20230710" rel="">Office of Employee Ownership</a><span>, and they've taken a more robust interest in ESOP companies and recently appointed someone from the employee ownership community to this important role.”</span></p><p><a href="https://www.nceo.org/articles/employee-ownership-by-the-numbers#6" rel="">In 2022</a><span>, only 34 percent of families in the bottom half of income distribution held stocks, while 78 percent of families in the upper-middle-income group did—95 percent of families in the top one percent held stocks. But employee ownership changes that equation. As the process becomes easier and education about ESOPs grows, more and more founders will exit by selling their companies to their employees, and the result is that more and more of the wealth will be owned by everyone who works, not just the person they work for.</span></p><p>As the stock market gets richer, so will we all, and that’s a future I’m excited about working toward.&nbsp;</p><p>“I'd love to see it more and more and more,” Ruger says. “It's really generating wealth for people, I’m convinced we're going to change generations.”</p><p data-attrs="{&quot;url&quot;:&quot;https://www.elysian.press/p/employee-ownership/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.elysian.press/p/employee-ownership/comments" rel=""><span>Leave a comment</span></a></p><p><span>This is a continuation of my </span><a href="https://www.elysian.press/t/capitalism" rel="">capitalism series</a><span> which is figuring out how capitalism can work better for everyone while serving as research for my utopian novel. I hope you’ll join us in the comments for further discussion!</span></p><p>Thanks for reading, </p><p>P.S. If you enjoyed this post, please share it or recommend my work to your subscribers! That’s how I meet new people and earn a living as a writer. Thank you so much for your support.</p><p data-attrs="{&quot;url&quot;:&quot;https://www.elysian.press/p/employee-ownership?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.elysian.press/p/employee-ownership?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[EU parliament member hit by Israeli Candiru spyware (293 pts)]]></title>
            <link>https://twitter.com/moo9000/status/1816352054425829420</link>
            <guid>41065156</guid>
            <pubDate>Thu, 25 Jul 2024 05:58:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/moo9000/status/1816352054425829420">https://twitter.com/moo9000/status/1816352054425829420</a>, See on <a href="https://news.ycombinator.com/item?id=41065156">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Google Search: Roboto Mono (147 pts)]]></title>
            <link>https://www.google.com/search?q=roboto+mono+font</link>
            <guid>41064950</guid>
            <pubDate>Thu, 25 Jul 2024 05:16:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.google.com/search?q=roboto+mono+font">https://www.google.com/search?q=roboto+mono+font</a>, See on <a href="https://news.ycombinator.com/item?id=41064950">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main"><div><p>Roboto Mono is a monospaced addition to the Roboto type family. Like the other members of the Roboto family, the fonts are optimized for readability on screens ...</p></div><div><p>Download the Roboto Mono font for free to create great typography. Create a custom image with your own words. Embed the Roboto Mono font on your website ...</p></div><div><p>Roboto Mono Thin Italic. View family. Similar fonts &amp; pairings. Try in Adobe Express. Add font. Purchased Web only Web only requires Upgrade Not available ...</p></div><div><p>Download free roboto mono font, view its character map and generate text-based images or logos with roboto mono font online.</p></div><div><p>Roboto Mono Font. Download the Roboto Mono font by Christian Robertson. Roboto Mono has been downloaded 132936 times.</p></div><div><p>The Roboto Mono variable font family is a versatile monospace web typeface offering weights ranging from 100 to 700 including italic variants for free.</p></div><div><div aria-expanded="false" id="tsuid_1" role="button" tabindex="0" data-ved="2ahUKEwiipIm6i8KHAxVrHzQIHZEWDvgQuk56BAgBEAI"><p>What is Roboto Mono font?</p></div><div aria-expanded="false" id="tsuid_2" role="button" tabindex="0" data-ved="2ahUKEwiipIm6i8KHAxVrHzQIHZEWDvgQuk56BAgBEAk"><p>How to install Roboto mono font?</p></div><div aria-expanded="false" id="tsuid_3" role="button" tabindex="0" data-ved="2ahUKEwiipIm6i8KHAxVrHzQIHZEWDvgQuk56BAgBEBE"><p>Can I use Roboto for free?</p></div></div><div><p>Download and install the Roboto Mono font by Christian Robertson. The Roboto Mono font has been downloaded 133097 times.</p></div><div><p>Roboto Mono font has variable features, including the following styles: Thin, Light, Regular, Medium, Bold. Roboto Mono Regular Ver 2.001 𑁋 Modified at May ...</p></div><div><p>Roboto has a dual nature. It has a mechanical skeleton and the forms are largely geometric. At the same time, the font features friendly and open curves.</p></div><div><p><span>03.07.2024</span><span> � </span>Typografie.info-Font-Wiki; Roboto Mono. Roboto � Liste � Roboto Serif. Font-Wiki: Roboto Mono von Christian Robertson. Daten zur Schrift.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Investigating corrupt Winamp skins (453 pts)]]></title>
            <link>https://jordaneldredge.com/notes/corrupted-skins/</link>
            <guid>41064645</guid>
            <pubDate>Thu, 25 Jul 2024 04:14:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jordaneldredge.com/notes/corrupted-skins/">https://jordaneldredge.com/notes/corrupted-skins/</a>, See on <a href="https://news.ycombinator.com/item?id=41064645">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><time datetime="2024-07-24T06:36:00.000Z">Jul 24, 2024</time></p><p>In January of 2021 I was exploring the corpus of Skins I collected for the <a href="https://jordaneldredge.com/blog/winamp-skin-musuem/">Winamp Skin Museum</a> and found some that seemed corrupted, so I decided to explore them. Winamp skins are actually just zip files with a different file extension, so I tried extracting their files to see what I could find.</p><p>This ended up leading me down a series of wild rabbit holes where I found:</p><ul><li><p>Encrypted files which I was able to crack to discover their secrets</p></li><li><p>A gift a dad in Thailand had made for his two and a half year old son, but didn’t want published online</p></li><li><p>Somebody’s email password</p></li><li><p>A secret biography of Chet Baker</p></li><li><p>Cryptic backwards audio files</p></li><li><p>A file called <code>worm.exe</code> which held quite the surprise</p></li><li><p>A host of extremely random images and files</p></li><li><p>56 previously unknown Winamp skins hidden inside other Winamp skins!</p></li></ul><p>This all aligned perfectly with my love of <a href="https://jordaneldredge.com/tag/winamp/">Winamp</a>, my love of <a href="https://jordaneldredge.com/tag/found/">found items</a> and was enabled by storing all the data I have about these skins <a href="https://twitter.com/captbaritone/status/1535471373191028737">in an sqlite database</a> (as <a href="https://news.ycombinator.com/item?id=31703874">discussed on Hacker News</a>).</p><p>Here’s the story:</p><hr><p>The first corrupted file I looked at contained just a PDF advertising a rentable bowling pin mascot costume:</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/e94461bd-1f9c-4ef4-bbda-23acc32ef0df/EsErCPFVoAACjOn.jpeg" alt="" height="1534" width="1406"></p><hr><p>Another was called <code>bobs_car.wsz</code> and, as advertised, contained just this picture, which I have to assume is the titular “Bob’s car”.</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/02d049fc-ee84-42b7-95f1-52c4c434db63/bobs_car.jpg" alt="" height="273" width="384"></p><hr><p>But then things got interesting. I found one that was an encrypted zip archive.</p><p><a href="https://capt.dev/file/TCIZp9O6FQBS51QrxWj1d/resubmitted.2003_acura_rsx.wsz">resubmitted.2003_rsx.wsz</a></p><p>I took the opportunity to learn about tools for brute forcing passwords in zip files. Soon enough, I cracked it, and found its contents:</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/7371ccc8-08f3-4202-b955-39ba04f31394/Screen_Shot_2021-01-18_at_10.46.36_PM.png" alt="" height="1036" width="710"></p><p>The password was "honda”. No idea why it might have been encrypted.</p><hr><p>Another one had been created by a dad in Thailand who made an Adobe Illustrator mock up illustration of a Winamp skin he had designed as a gift to his two and a half year old son. But he didn't know how to make it a skin, so he sent it to <a href="http://winamp.com/">winamp.com</a> (along with a text file letter) asking that it be made into a skin that he could use. The letter was very touching but he asked them not to share the skin, so I have not included it here.</p><hr><p>I found another encrypted zip file. This time the password was not in my wordlist. After a bit of fiddling with the cracking tool’s config file, I was able to brute force it as well. The result was a valid Winamp skin!</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/4d300a93-0973-42bf-8eff-43d2b4b33d94/Screen_Shot_2021-01-19_at_4.12.13_PM.png" alt="" height="952" width="572"></p><p>Password was "nayane”.</p><p>I went ahead and uploaded the decrypted version <a href="https://jordaneldredge.com/a3ea435df7ab4f7fa106ed23644b0358/">here</a>.</p><hr><p>This got me interested in other “sensitive” things that might be included in skins, so I started searching for things like “password” inside the files <em>inside</em> all the Winamp skins.</p><p>I found one with a file called <code>E-mail passwords.txt</code> which contained… their email address and email password. Not great operational security.</p><hr><p><a href="https://skins.webamp.org/skin/bf47d3cee462143bb4549fee59f567b2/Marshall_Matters_Skin_2.wsz/">Another skin</a> contained a text file with hundreds of blank lines and then, at the very bottom, the text:</p><p><span><pre><p><code><span><span></span></span><br><span><span></span></span><br><span><span></span></span><br><span><span></span></span><br><span><span></span></span><br><span><span></span></span><br><span><span>YOU HAVE FOUND THE SUPRISE!!!</span></span><br><span><span>USE THIS PASSWORD:KEWL16</span></span></code></p></pre></span></p><p>Inside the skin was a file <code>Suprise!.zip</code> which was itself encrypted, but the password didn’t work! Eventually I figured out that the password needed to be lower case. Inside were a bunch of <code>.avs</code> files:</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/5b5f915c-44b9-4c36-adf6-1d69ea615450/Screen_Shot_2021-01-20_at_11.45.00_AM.png" alt="" height="632" width="1278"></p><hr><p><a href="https://skins.webamp.org/skin/5447f1bdfd64ffa7b3abe051ad717bcb/Chet_Baker.wsz/">This skin</a> included a file named <code>secret.txt</code> which was just a biography of <a href="https://en.wikipedia.org/wiki/Chet_Baker">Chet Baker</a>.</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/a1ef95d4-8330-453f-a3e4-1df46ef9249b/Screen_Shot_2021-01-20_at_11.48.43_AM.png" alt="" height="1786" width="1588"></p><hr><p>Some skins included mp3s inside them:</p><p><span><pre><p><code><span><span>sqlite&gt; SELECT skin_md5, file_name FROM archive_files WHERE file_name LIKE "%.mp3";</span></span><br><span><span>105a63846a068bcd2199f3921c006c99|winampme/MSNet d�marrage  Win-Me.mp3</span></span><br><span><span>125a87ff1e2b7bce537aa3126b1a80d8|cool.mp3</span></span><br><span><span>329105cd7d11d3ec1236a7333a6b46e9|WILLIAM/Winamp Skin/MegaMan/Megaman/[MegaMan X] - X Theme.mp3</span></span><br><span><span>57a98f6b68236dd22a006fc8171f94b5|SPARKY.MP3</span></span><br><span><span>7653b2504bc3d9404a17c8eca7ba71af|Knuckle-Duster/hagmans_demo.mp3</span></span><br><span><span>86080023e53a798ccda91109d33abeb7|arrrrrrg.mp3</span></span><br><span><span>9f9c65a5d416d1a97f18dd8488e8cf7b|Blair Amp Project f/Heather_Sorry.mp3</span></span><br><span><span>a5a3a08340feb5dae3aa87af698b0654|cool.mp3</span></span><br><span><span>b6a51893dde10f4bcbee50a1fa24b217|(Adam Sandler - Billy Madison - Back 2 School).mp3</span></span><br><span><span>b6a51893dde10f4bcbee50a1fa24b217|(Mike Myers - Huge Head).mp3</span></span><br><span><span>b6cf670eb351e2e76f9048a25aeb639d|Diablo.mp3</span></span><br><span><span>b8ba93a4d427d8fd4f4c5fba7bcba627|BROTHEL - Breathe Swallow.mp3</span></span><br><span><span>b8ba93a4d427d8fd4f4c5fba7bcba627|BROTHEL - Fuck That Noise.mp3</span></span><br><span><span>b8ba93a4d427d8fd4f4c5fba7bcba627|BROTHEL - SunScreen2000.mp3</span></span><br><span><span>c647cd24f5809664e0d2e210a68310c1|SKATEBOARDING - Osiris ShoesTheme.mp3</span></span><br><span><span>c9b348ae2b93471b76ee2634a12d1dce|The Mark, Tom and Travis show/Blink 182 - Dammit (Sample).mp3</span></span><br><span><span>d54e166f5227967e153ec40783473c0b|cos-xenu.mp3</span></span><br><span><span>d54e166f5227967e153ec40783473c0b|lrh-xenu.mp3</span></span><br><span><span>e47edeecb002afecf1b30ebab8c8d1e9|Destroy v2.0.mp3</span></span><br><span><span>fcf17a808fdb485bb3e95a64debea848|Diablo.mp3</span></span></code></p></pre></span></p><p>For example this bizarre five second <code>cool.mp3</code>.</p><hr><p><a href="https://skins.webamp.org/skin/fb3b75ccbb49d5d08e54e4705d51bd56/Alien_Workshop_Sovergein_Sect.wsz/">This skin</a> included a file named <code>Sovergein Sect.wav</code>.</p><p>Upon listening it sounded like it was being played backwards, so I reversed the audio file:</p><div><p>Sovergein_Sect_mp3cut.net.mp3</p><a title="Download" href="https://capt.dev/file/HFNMgySWlK27_5Bceihx1/Sovergein_Sect_mp3cut.net.mp3" download=""><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 512 512" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"></path></svg></a></div><p>I think it’s someone saying the name of the skin and some other information?</p><hr><p>Some days later I found a skin that contained just one file: <code>WORM.EXE</code> That sounds dangerous!</p><p>I fed it to Virus Total but it didn’t detect any issues. So, someone in the Webamp Discord bravely tried running it in a VM and got this prompt:</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/0c010165-607f-4476-8b84-cb384f3a42f6/unknown.png" alt="" height="480" width="640"></p><p>It was a worm <em>game</em>, like the game snake!</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/4a0c7793-43a4-41b0-9a86-e99750e33f9f/VxrgXlCeTz.gif" alt="" height="480" width="640"></p><p>Here’s top speed:</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/e775bd6e-fab0-4017-8c30-448f0a3f05eb/rgoq4NmUII.gif" alt="" height="480" width="640"></p><hr><p>Another skin had just one file <code>Standing around the hoop.jpg</code></p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/b4461029-d051-4d3e-a6bd-a9925006ab2f/Standing_around_the_hoop.jpg" alt="" height="1167" width="1275"></p><hr><p>Another one contained just a single file <code>ellie.bmp</code> Here’s Ellie I suppose?</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/000b0643-74f1-4cf5-9592-dc0be20e0ff0/elli.png" alt="" height="630" width="418"></p><p>Reencoded as <code>.png</code></p><hr><p>Another had two new born baby pictures and a text file:</p><blockquote><p>Here is a few pictures of Dom's baby.</p><p>Joe</p></blockquote><hr><p>Finally, I thought to look for skins that contained other skins within them, and discovered 127 skins! 54 of which were not already in the museum, so I uploaded them.</p><p><img src="https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/f4239931-353a-4530-8939-80bf9f217673/Screen_Shot_2021-01-24_at_12.51.41_PM.png" alt="" height="1760" width="2784"></p><hr><p>It’s so interesting how if you get a large enough number of things that were created by real people, you can end up finding all kinds of crazy stuff! This was such an amazingly strange and  interesting ride!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Node.js adds experimental support for TypeScript (957 pts)]]></title>
            <link>https://github.com/nodejs/node/pull/53725</link>
            <guid>41064351</guid>
            <pubDate>Thu, 25 Jul 2024 02:57:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/nodejs/node/pull/53725">https://github.com/nodejs/node/pull/53725</a>, See on <a href="https://news.ycombinator.com/item?id=41064351">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">It is possible to execute TypeScript files by setting the experimental flag <code>--experimental-strip-types</code>.<br>
Node.js will transpile TypeScript source code into JavaScript source code.<br>
During the transpilation process, no type checking is performed, and types are discarded.</p>
<h3 dir="auto">Roadmap</h3>
<p dir="auto">Refs: <a data-error-text="Failed to load title" data-id="2408734753" data-permission-text="Title is private" data-url="https://github.com/nodejs/loaders/issues/217" data-hovercard-type="issue" data-hovercard-url="/nodejs/loaders/issues/217/hovercard" href="https://github.com/nodejs/loaders/issues/217">nodejs/loaders#217</a></p>
<h3 dir="auto">Motivation</h3>
<p dir="auto">I believe enabling users to execute TypeScript files is crucial to move the ecosystem forward, it has been requested on all the surveys, and it simply cannot be ignored. We must acknowledge users want to run <code>node foo.ts</code> without installing external dependencies or loaders.</p>
<blockquote>
<p dir="auto">There is a TC39 proposal for <a href="https://github.com/tc39/proposal-type-annotations">type annotations</a></p>
</blockquote>
<h3 dir="auto">Why type stripping</h3>
<p dir="auto">Type stripping as the name suggest, means removing all the <code>types</code>,  transform the input in a JavaScript module.</p>
<div dir="auto" data-snippet-clipboard-copy-content="const foo: string = &quot;foo&quot;;"><pre><span>const</span> <span>foo</span>: <span>string</span> <span>=</span> <span>"foo"</span><span>;</span></pre></div>
<p dir="auto">Becomes:</p>

<p dir="auto">Other runtimes also perform transformation of some TypeScript only features into JavaScript, for example enums, which do not exists in JavaScript.<br>
At least initially in this PR no trasformation is performed, meaning that using <code>Enum</code>, <code>namespaces</code> etc... will not be possible.</p>
<h3 dir="auto">Why I chose @swc/wasm-typescript</h3>
<p dir="auto">Because of <em>simplicity</em>.<br>
I have considered other tools but they require either rust or go to be added to the toolchain.<br>
<code>@swc/wasm-typescript</code> its a small package with a wasm and a js file to bind it.<br>
Swc is currently used by Deno for the same purpose, it's battle tested.<br>
In the future I see this being implemented in  <strong>native layer</strong>.<br>
Massive shoutout to <a data-hovercard-type="user" data-hovercard-url="/users/kdy1/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/kdy1">@kdy1</a> for releasing a swc version for us.</p>
<hr>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> Refer to the PR changes in <code>module.md</code> for implementation details and limitations.</p>
    </div>
  </task-lists>
  
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What is Toybox? (104 pts)]]></title>
            <link>http://landley.net/toybox/</link>
            <guid>41064333</guid>
            <pubDate>Thu, 25 Jul 2024 02:53:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://landley.net/toybox/">http://landley.net/toybox/</a>, See on <a href="https://news.ycombinator.com/item?id=41064333">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<h2>Current release <a href="https://landley.net/toybox/news.html">0.8.11</a> (April 8, 2024)</h2>
<hr>


<h2><a name="what">What is toybox?</a></h2><a name="what">

</a><p><a name="what">Toybox combines many common Linux command line utilities together into
a single </a><a href="http://landley.net/toybox/license.html">BSD-licensed</a> executable. It's simple, small, fast, and reasonably
standards-compliant (<a href="http://opengroup.org/onlinepubs/9699919799">POSIX-2008</a> and <a href="http://refspecs.linuxfoundation.org/LSB_4.1.0">LSB 4.1</a>).</p>

<p>Toybox's main goal is to make Android
<a href="http://landley.net/aboriginal/about.html#selfhost">self-hosting</a>
by improving Android's command line utilities so it can
build an installable Android Open Source Project image
entirely from source under a stock Android system. After a talk at the 2013
Embedded Linux Conference explaining this plan
(<a href="http://landley.net/talks/celf-2013.txt">outline</a>,
<a href="https://www.youtube.com/watch?v=SGmtP5Lg_t0">video</a>), Google
<a href="https://lwn.net/Articles/629362/">merged toybox into AOSP</a> and
began shipping toybox in Android Marshmallow in 2015.</p>

<p>Toybox aims to provide one quarter of a theoretical "minimal native
development environment", which is the simplest Linux system capable of
rebuilding itself from source code and then building
<a href="http://linuxfromscratch.org/lfs">Linux From Scratch</a>
and the <a href="https://source.android.com/">Android Open Source Project</a>
under the result. In theory, this should only require four packages:
1) a set of posix-ish command line utilities,
2) a compiler<a name="1_back"></a><sup><span size="-3"><a href="#1">[1]</a></span></sup>,
3) a C library, and 4) a kernel. This provides a reproducible and auditable
base system, which with the addition of a few convienciences (vi, top,
shell command line history...) can provide a usable interactive experience
rather than just a headless build server.</p>

<b><h2><a name="why">Why is toybox?</a></h2></b><a name="why">

</a><p><a name="why">The </a><a href="http://landley.net/talks/celf-2013.txt">2013 toybox talk</a>
at ELC was devoted to this question, and has the following sections:</p>

<ul>
<li>0m29s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=0m29s">The smartphone is replacing the PC</a></li>
  <ul>
  <li>4m22s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=4m22s">Software needed to become self-hosting</a></li>
  <li>6m20s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=6m20s">Do we care if android or iphone wins?</a></li>
  </ul>
<li>9m45s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=9m45s">Android not vanilla: oppose or accept?</a></li>
  <ul>
  <li>11m30s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=11m30s">Open source can't do User Interfaces</a></li>
  </ul>
<li>15m09s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=15m09s">Android is not copyleft: oppose or accept?</a></li>
<li>18m23s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=18m23s">Security issues</a></li>
<li>21m15s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=21m15s">Solutions to the software problems</a></li>
  <ul>
  <li>22m55s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=22m55s">What toybox needs to be/do</a></li>
  <li>28m17s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=28m17s">What is toybox?</a></li>
    <ul>
    <li>28m58s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=28m58s">Why toybox started...</a></li>
    <li>37m50s <a href="http://www.youtube.com/watch?v=SGmtP5Lg_t0#t=37m50s">What does toybox actually implement?</a></li>
    </ul>
  </ul>
</ul>

<p>A more recent talk from 2019 compares
<a href="https://www.youtube.com/watch?v=MkJkyMuBm3g#t=1m18s">BusyBox vs toybox</a>
and explains the design decisions behind both.
(A 2015 toybox talk was part of the channel
<a href="https://marc.info/?l=linux-embedded&amp;m=158159902514847&amp;w=2">accidentally deleted</a> off youtube by the Linux Foundation,
but the <a href="https://landley.net/talks/celf-2015.txt">outline</a> is
still available.)</p>

<b><h2><a name="context">What context was toybox created in?</a></h2></b><a name="context">

</a><p><a name="context">The toybox maintainer's previous minimal self-hosting system project,
</a><a href="http://landley.net/aboriginal/about.html">Aboriginal Linux</a>,
got a native development environment down to only seven packages in
its 1.0 release (busybox, uClibc, gcc, binutils, make, bash, and linux)
and then built Linux From Scratch under the result. That project
<a href="http://landley.net/aboriginal/history.html">was the reason</a>
toybox's maintainer became busybox maintainer, having done so
much work to extend busybox to replace all the gnu tools in a Linux From
Scratch build that the previous maintainer handed over the project (to
spend more time on buildroot).</p>

<p>Despite the maintainer's history with busybox, toybox is a fresh
from-scratch implementation under an
<a href="https://source.android.com/source/licenses.html">android-compatible</a>
<a href="http://landley.net/toybox/license.html">license</a>. Busybox predates Android, but has never
shipped with Android due to the license. As long as we're starting over anyway,
we can do a better job.</p>

<p>Toybox's current minimal native development environment builder is a new
<a href="https://github.com/landley/toybox/blob/master/scripts/mkroot.sh">tiny
implementation</a> integrated into the toybox source.
The "make root" target will create a simple toybox chroot
(by default in the root/host directory), and adding a LINUX= argument to
the make command line pointing to Linux kernel source code creates a tiny
bootable system with a wrapper script to run it under the emulator
<a href="https://qemu.org/">qemu</a>.</p>

<p>The list of commands remaining before we can build Linux From Scratch under
the result (with an appropriate
<a href="https://github.com/landley/toybox/blob/master/scripts/mcm-buildall.sh">compiler</a>)
is tracked <a href="http://landley.net/toybox/roadmap.html#dev_env">in
the roadmap</a>, and doing so is one of the main goals for toybox's 1.0
release.</p>

<p>Building LFS requres fewer commands than building AOSP, which has a lot more
<a href="http://source.android.com/source/initializing.html">build
prerequisites</a>. In theory some of those can be built from source
as external packages (we're clearly not including our own java implementation),
but some early prerequisites may need to be added to bootstrap AOSP far enough
to build them (such as a read-only version of "git":
how does repo download the AOSP source otherwise?)
<a name="2_back"></a><sup><span size="-3"><a href="#2">[2]</a></span></sup></p>

<b><h2><a name="status">What commands are planned/implemented in toybox?</a></h2></b><a name="status">

</a><p><a name="status">The current list of commands implemented by toybox is on the
</a><a href="http://landley.net/toybox/status.html">status page</a>, which is updated each release.
There is also a <a href="http://landley.net/toybox/roadmap.html">roadmap</a> listing all planned commands
for the 1.0 release and the reasons for including them.</p>

<p>In general, configuring toybox with "make defconfig" enables all the commands
compete enough to be useful. Configuring "allyesconfig" enables partially
implemented commands as well, along with debugging features.</p>

<b><h3>Relevant Standards</h3></b>

<p>Most commands are implemented according to POSIX-2008 (I.E.
<a href="http://opengroup.org/onlinepubs/9699919799/idx/utilities.html">The
Single Unix Specification version 4</a>) where applicable. This does not mean
that toybox is implementing every SUSv4 utility: some such as SCCS and ed are
obsolete, while others such as c99 are outside the scope of the project.
Toybox also isn't implementing full internationalization support: it should be
8-bit clean and handle UTF-8, but otherwise we leave this to X11 and higher
layers. And some things (like $CDPATH support in "cd") await a good
explanation of why to bother with them. (POSIX provides an important
frame of reference, but is not an infallable set of commandments to be blindly
obeyed. We do try to document our deviations from it in the comment section
at the start of each command under toys/posix.)</p>

<p>The other major sources of commands are the Linux man pages, the
Linux Standard Base, and testing the behavior of existing command
implementations (although not generally looking at their
source code), including the commands in Android's toolbox. SUSv4 does not
include many basic commands such as "mount", "init", and "mke2fs", which are
kind of nice to have.</p>

<p>For more on this see the <a href="http://landley.net/toybox/roadmap.html">roadmap</a> and
<a href="http://landley.net/toybox/design.html">design goals</a>.</p>

<b><h2><a name="downloads">Download</a></h2></b><a name="downloads">

</a><p><a name="downloads">This project is maintained as a </a><a href="https://github.com/landley/toybox">git
archive</a>, and also offers <a href="http://landley.net/toybox/downloads">source
tarballs</a> and <a href="http://landley.net/toybox/bin">static binaries</a>
of the release versions.</p>

<p>The maintainer's <a href="http://landley.net/notes.html">development log</a> and the project's
<a href="http://lists.landley.net/listinfo.cgi/toybox-landley.net">mailing
list</a> are also good ways to track what's going on with the project.</p>

<b><h2><a name="toycans">What's the toybox logo image?</a></h2></b><a name="toycans">

</a><p><a name="toycans">It's </a><a href="http://landley.net/toybox/toycans-big.jpg">carefully stacked soda cans</a>. Specifically,
it's a bunch of the original "Coke Zero" and "Pepsi One" cans, circa 2006,
stacked to spell out the binary values of the ascii string "Toybox", with
null terminator at the bottom. (The big picture's on it's side because
the camera was held sideways to get a better shot.)</p>

<p>No, it's not photoshopped, I actually had these cans until a coworker
who Totally Did Not Get It <sup><span size="-3"><a href="http://www.timesys.com/">tm</a></span></sup> threw them out one day after I'd gone home,
thinking they were recycling. (I still have two of each kind, but
Pepsi One seems discontinued and Coke Zero switched its can color
from black to grey, presumably in celebration. It was fun while it lasted...)</p>

<b><h2>Footnotes</h2></b>

<p><a name="1"></a><a href="#1_back">[1]</a> Ok, most toolchains (gcc, llvm, pcc, libfirm...)
are multiple packages, but the maintainer of toybox used to maintain a
<a href="http://landley.net/tinycc">fork of tinycc</a> (an integrated
compiler/assembler/linker which once upon a
time did <a href="http://bellard.org/tcc/tccboot.html">build a bootable linux
kernel</a> before its original developer abandoned the project),
and has <a href="http://landley.net/hg/qcc/file/tip/todo/todo.txt">vague plans</a> of <a href="http://landley.net/qcc">trying
again someday</a>. The compiler toolchain is _conceptually_ one package,
implementable as a single multicall binary acting like make, cc, as, ld, cpp,
strip, readelf, nm, objdump, and so on as necessary. It's just the existing
packages that do this <strike>kinda suck</strike> don't. (In theory "make"
belongs in qcc, in practice llvm hasn't got its own make so toybox probably
needs to add it after 1.0 to eliminate another gpl build prerequite from
AOSP.)</p>

<p><a name="2"></a><a href="#2_back">[2]</a>
The dividing line is
"Is there an acceptably licensed version Android can ship, or do we have
to write one?" Since android is not "GNU/Linux" in any way, we need to
clean out all traces of gnu software from its build to get a clean
self-hosting system.</p>

</div></div>]]></description>
        </item>
    </channel>
</rss>