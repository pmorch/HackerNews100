<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 22 Apr 2025 21:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Sapphire: Rust based package manager for macOS (Homebrew replacement) (147 pts)]]></title>
            <link>https://github.com/alexykn/sapphire</link>
            <guid>43765011</guid>
            <pubDate>Tue, 22 Apr 2025 18:39:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/alexykn/sapphire">https://github.com/alexykn/sapphire</a>, See on <a href="https://news.ycombinator.com/item?id=43765011">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Sapphire</h2><a id="user-content-sapphire" aria-label="Permalink: Sapphire" href="#sapphire"></a></p>
<blockquote>
<p dir="auto"><strong>WARNING: ALPHA SOFTWARE</strong> &gt; Sapphire is experimental, under heavy development, and may be unstable. Use at your own risk!</p>
<p dir="auto">Uninstalling a cask with brew then reinstalling it with Sapphire will have it installed with slightly different paths, your user settings etc. will not be migrated automatically.</p>
</blockquote>
<p dir="auto">Sapphire is a next‚Äëgeneration, Rust‚Äëpowered package manager inspired by Homebrew. It installs and manages:</p>
<ul dir="auto">
<li><strong>Formulae:</strong> command‚Äëline tools, libraries, and languages</li>
<li><strong>Casks:</strong> desktop applications and related artifacts on macOS</li>
</ul>
<blockquote>
<p dir="auto"><em>ARM only for now, might add x86 support eventually</em></p>
</blockquote>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">‚öôÔ∏è Project Structure</h2><a id="user-content-Ô∏è-project-structure" aria-label="Permalink: ‚öôÔ∏è Project Structure" href="#Ô∏è-project-structure"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><strong>sapphire‚Äëcore</strong> Core library: fetching, dependency resolution, archive extraction, artifact handling (apps, binaries, pkg installers, fonts, plugins, zap/preflight/uninstall stanzas, etc.)</p>
</li>
<li>
<p dir="auto"><strong>sapphire‚Äëcli</strong> Command‚Äëline interface: <code>sapphire</code> executable wrapping the core library.</p>
</li>
</ul>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">üöß Current Status</h2><a id="user-content--current-status" aria-label="Permalink: üöß Current Status" href="#-current-status"></a></p>
<ul dir="auto">
<li>Bottle installation and uninstallation</li>
<li>Cask installation and uninstallation</li>
<li>Parallel downloads and installs for speed</li>
<li>Automatic dependency resolution and installation</li>
<li>Building Formulae from source (very early impl)</li>
</ul>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">üöÄ Roadmap</h2><a id="user-content--roadmap" aria-label="Permalink: üöÄ Roadmap" href="#-roadmap"></a></p>
<ol dir="auto">
<li><strong>Upgrade</strong> command to update installed packages</li>
<li><strong>Cleanup</strong> old downloads, versions, caches</li>
<li><strong>Reinstall</strong> command for quick re‚Äëpours</li>
<li><strong>Prefix isolation:</strong> support <code>/opt/sapphire</code> as standalone layout</li>
<li><strong><code>sapphire init</code></strong> helper to bootstrap your environment</li>
<li><strong>Ongoing</strong> Bug fixes and stability improvements</li>
</ol>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">üì¶ Usage</h2><a id="user-content--usage" aria-label="Permalink: üì¶ Usage" href="#-usage"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Print help
sapphire --help

# Update metadata
sapphire update

# Search for packages
sapphire search <formula/cask>

# Get package info
sapphire info <formula/cask>

# Install bottles or casks
sapphire install <formula/cask>

# Build and install a formula from source
sapphire install --build-from-source <formula>

# Uninstall
sapphire uninstall <formula/cask>

# (coming soon)
sapphire upgrade [--all] <name>
sapphire cleanup
sapphire init"><pre><span><span>#</span> Print help</span>
sapphire --help

<span><span>#</span> Update metadata</span>
sapphire update

<span><span>#</span> Search for packages</span>
sapphire search <span>&lt;</span>formula/cask<span>&gt;</span>

<span><span>#</span> Get package info</span>
sapphire info <span>&lt;</span>formula/cask<span>&gt;</span>

<span><span>#</span> Install bottles or casks</span>
sapphire install <span>&lt;</span>formula/cask<span>&gt;</span>

<span><span>#</span> Build and install a formula from source</span>
sapphire install --build-from-source <span>&lt;</span>formula<span>&gt;</span>

<span><span>#</span> Uninstall</span>
sapphire uninstall <span>&lt;</span>formula/cask<span>&gt;</span>

<span><span>#</span> (coming soon)</span>
sapphire upgrade [--all] <span>&lt;</span>name<span>&gt;</span>
sapphire cleanup
sapphire init</pre></div>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">üèóÔ∏è Building from Source</h2><a id="user-content-Ô∏è-building-from-source" aria-label="Permalink: üèóÔ∏è Building from Source" href="#Ô∏è-building-from-source"></a></p>
<p dir="auto"><strong>Prerequisites:</strong> Rust toolchain (stable).</p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone <repo-url>
cd sapphire
cargo build --release"><pre>git clone <span>&lt;</span>repo-url<span>&gt;</span>
<span>cd</span> sapphire
cargo build --release</pre></div>
<p dir="auto">The <code>sapphire</code> binary will be at <code>target/release/sapphire</code>. Add it to your <code>PATH</code>.</p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">ü§ù Contributing</h2><a id="user-content--contributing" aria-label="Permalink: ü§ù Contributing" href="#-contributing"></a></p>
<p dir="auto">Sapphire lives and grows by your feedback and code! We‚Äôre particularly looking for:</p>
<ul dir="auto">
<li>Testing and bug reports for Cask &amp; Bottle installation + <code>--build-from-source</code></li>
<li>Test coverage for core and cask modules</li>
<li>CLI UI/UX improvements</li>
<li>See <a href="https://github.com/alexykn/sapphire/blob/main/CONTRIBUTING.md">CONTRIBUTING.md</a></li>
</ul>
<p dir="auto">Feel free to open issues or PRs. Every contribution helps!</p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">üìÑ License</h2><a id="user-content--license" aria-label="Permalink: üìÑ License" href="#-license"></a></p>
<ul dir="auto">
<li><strong>Sapphire:</strong> BSD‚Äë3‚ÄëClause - see <a href="https://github.com/alexykn/sapphire/blob/main/LICENSE.md">LICENSE.md</a></li>
<li>Inspired by Homebrew BSD‚Äë2‚ÄëClause ‚Äî see <a href="https://www.google.com/search?q=NOTICE.md" rel="nofollow">NOTICE.md</a></li>
</ul>
<hr>
<blockquote>
<p dir="auto"><em>Alpha software. No guarantees. Use responsibly.</em></p>
</blockquote>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Are polynomial features the root of all evil? (2024) (102 pts)]]></title>
            <link>https://alexshtf.github.io/2024/01/21/Bernstein.html</link>
            <guid>43764101</guid>
            <pubDate>Tue, 22 Apr 2025 16:49:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://alexshtf.github.io/2024/01/21/Bernstein.html">https://alexshtf.github.io/2024/01/21/Bernstein.html</a>, See on <a href="https://news.ycombinator.com/item?id=43764101">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
    <h2 id="a-myth">A myth</h2>

<p>When fitting a non-linear model using linear regression, we typically generate new features using non-linear functions. We also know that any function, in theory, can be approximated by a sufficiently high degree polynomial. This result is known as <a href="https://en.wikipedia.org/wiki/Stone%E2%80%93Weierstrass_theorem">Weierstrass approximation theorem</a>. But many blogs, papers, and even books tell us that high polynomials should be avoided. They tend to oscilate and overfit, and regularization doesn‚Äôt help! They even scare us with images, such as the one below, when the polynomial fit using the data points (in red) is far away from the true function (in blue):
<img src="https://alexshtf.github.io/assets/poly_overfit.png" alt="Polynomial overfitting"></p>

<p>It turns out that it‚Äôs just a MYTH. There‚Äôs nothing inherently wrong with high degree polynomials, and in contrast to what is typically taught, high degree polynomials are easily controlled using standard ML tools, like regularization. The source of the myth stems mainly from two misconceptions about polynomials that we will explore here. In fact, not only they are great non-linear features, certain representations also provide us with powerful control over the shape of the function we wish to learn.</p>

<p>A colab notebook with the code for reproducing the above results is available <a href="https://github.com/alexshtf/alexshtf.github.io/blob/master/assets/polyfeatures.ipynb">here</a>.</p>

<h2 id="approximation-vs-estimation">Approximation vs estimation</h2>

<p>Vladimir Vapnik, in his famous book ‚ÄúThe Nature of Statistical Learning Theory‚Äù which is cited more than 100,000 times as of today, coined the approximation vs. estimation balance. The approximation power of a model is its ability to represent the ‚Äúreality‚Äù we would like to learn. Typically, approximation power increases with the complexity of the model - more parameters mean more power to represent any function to arbitrary precision. Polynomials are no different - higher degree polynomials can represent functions to higher accuracy. However, more parameters make it difficult to <em>estimate these parameters from the data</em>.</p>

<p>Indeed, higher degree polynomials have a higher capacity to approximate arbitrary functions. And since they have more coefficients, these coefficients are harder to estimate from data. But how does it differ from other non-linear features, such as the well-known <a href="https://en.wikipedia.org/wiki/Radial_basis_function">radial basis functions</a>? Why do polynomials have such a bad reputation? Are they truly hard to estimate from data?</p>

<p>It turns out that the primary source is the standard polynomial basis for n-degree polynomials \(\mathbb{E}_n = {1, x, x^2, ..., x^n}\). Indeed, any degree \(n\)  polynomial can be written as a linear combination of these functions:</p><p>

\[\alpha_0 \cdot 1 + \alpha_1 \cdot x + \alpha_2 \cdot x^2 + \cdots + \alpha_n x^n\]

</p><p>But the standard basis \(\mathbb{B}_n\) is <em>awful</em> for estimating polynomials from data. In this post we will explore other ways to represent polynomials that are appropriate for machine learning, and are readily available in standard Python packages. We note, that one advantage of polynomials over other non-linear feature bases is that the only hyperparameter is their <em>degree</em>. There is no ‚Äúkernel width‚Äù, like in radial basis functions<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>The second source of their bad reputation is misunderstanding of Weierstrass‚Äô approximation theorem. It‚Äôs usually cited as ‚Äúpolynomials can approximate arbitrary continuous functions‚Äù. But that‚Äôs not entrely true. They can approximate arbitrary continuous functions <strong>in an interval</strong>. This means that when using polynomial features, the data must be normalized to lie in an interval. It can be done using min-max scaling, computing empirical quantiles, or passing the feature through a sigmoid. But we should avoid the use of polynomials on raw un-normalized features.</p>

<h2 id="building-the-basics">Building the basics</h2>

<p>In this post we will demonstrate fitting the function</p><p>

\[f(x)=\sin(8 \pi x) / \exp(x)+x\]

</p><p>on the interval \([0, 1]\) by fitting to \(m=30\) samples corrupted by Gaussian noise. The following code implements the function and generates samples:</p>

<div><pre><code><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>

<span>def</span> <span>true_func</span><span>(</span><span>x</span><span>):</span>
  <span>return</span> <span>np</span><span>.</span><span>sin</span><span>(</span><span>8</span> <span>*</span> <span>np</span><span>.</span><span>pi</span> <span>*</span> <span>x</span><span>)</span> <span>/</span> <span>np</span><span>.</span><span>exp</span><span>(</span><span>x</span><span>)</span> <span>+</span> <span>x</span>

<span>m</span> <span>=</span> <span>30</span>
<span>sigma</span> <span>=</span> <span>0.1</span>

<span># generate features
</span><span>np</span><span>.</span><span>random</span><span>.</span><span>seed</span><span>(</span><span>42</span><span>)</span>
<span>X</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>rand</span><span>(</span><span>m</span><span>)</span>
<span>y</span> <span>=</span> <span>true_func</span><span>(</span><span>X</span><span>)</span> <span>+</span> <span>sigma</span> <span>*</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>m</span><span>)</span>
</code></pre></div>

<p>For function plotting, we will use uniformly-spaced points in \([0, 1]\). The following code plots the true function and the sample points:</p>

<div><pre><code><span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>

<span>plt_xs</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>1000</span><span>)</span>
<span>plt</span><span>.</span><span>scatter</span><span>(</span><span>X</span><span>.</span><span>ravel</span><span>(),</span> <span>y</span><span>.</span><span>ravel</span><span>())</span>
<span>plt</span><span>.</span><span>plot</span><span>(</span><span>plt_xs</span><span>,</span> <span>true_func</span><span>(</span><span>plt_xs</span><span>),</span> <span>'blue'</span><span>)</span>
<span>plt</span><span>.</span><span>show</span><span>()</span>
</code></pre></div>

<p><img src="https://alexshtf.github.io/assets/polyfit_func.png" alt="polyfit_func"></p>

<p>Now let‚Äôs fit a polynomial to the sampled points using the standard basis. Namely, we‚Äôre given the set of noisy points \(\{ (x_i, y_i) \}_{i=1}^m\), and we need to find the coefficients \(\alpha_0, \dots, \alpha_n\) that minimize:</p><p>

\[\sum_{i=1}^m (\alpha_0 + \alpha_1 x_i + \dots + \alpha_n x_i^n - y_i)^2\]

</p><p>As expected, this is readily accomplished by transforming each sample \(x_i\) to a vector of features \(1, x_i, \dots, x_i^n\), and fitting a linear regression model to the resulting features. Fortunately, NumPy has the <code>numpy.polynomial.polynomial.polyvander</code>function. It takes a vector containing \(x_1, \dots, x_m\) and produces the matrix</p><p>

\[\begin{pmatrix}
1 &amp; x_1 &amp; x_1^2 &amp; \dots &amp; x_1^n \\
1 &amp; x_2 &amp; x_2^2 &amp; \dots &amp; x_2^n \\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
1 &amp; x_m &amp; x_m^2 &amp; \dots &amp; x_m^n \\
\end{pmatrix}\]

</p><p>The name of the function comes from the name of the matrix - the Vandermonde matrix. Let‚Äôs use it to fit a polynomial of degree \(n=50\).</p>

<div><pre><code><span>from</span> <span>sklearn.linear_model</span> <span>import</span> <span>LinearRegression</span>
<span>import</span> <span>numpy.polynomial.polynomial</span> <span>as</span> <span>poly</span>

<span>n</span> <span>=</span> <span>50</span>
<span>model</span> <span>=</span> <span>LinearRegression</span><span>(</span><span>fit_intercept</span><span>=</span><span>False</span><span>)</span>
<span>model</span><span>.</span><span>fit</span><span>(</span><span>poly</span><span>.</span><span>polyvander</span><span>(</span><span>X</span><span>,</span> <span>deg</span><span>=</span><span>n</span><span>),</span> <span>y</span><span>)</span>
</code></pre></div>

<p>The reason we use <code>fit_intercept=False</code> is because the ‚Äòintercept‚Äô is provided by the first column of the Vandermonde matrix. Now we can plot the function we just fit:</p>

<div><pre><code><span>plt</span><span>.</span><span>scatter</span><span>(</span><span>X</span><span>.</span><span>ravel</span><span>(),</span> <span>y</span><span>.</span><span>ravel</span><span>())</span>                                    <span># plot the samples
</span><span>plt</span><span>.</span><span>plot</span><span>(</span><span>plt_xs</span><span>,</span> <span>true_func</span><span>(</span><span>plt_xs</span><span>),</span> <span>'blue'</span><span>)</span>                          <span># plot the true function
</span><span>plt</span><span>.</span><span>plot</span><span>(</span><span>plt_xs</span><span>,</span> <span>model</span><span>.</span><span>predict</span><span>(</span><span>poly</span><span>.</span><span>polyvander</span><span>(</span><span>plt_xs</span><span>,</span> <span>deg</span><span>=</span><span>n</span><span>)),</span> <span>'r'</span><span>)</span> <span># plot the fit model
</span><span>plt</span><span>.</span><span>ylim</span><span>([</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>])</span>
<span>plt</span><span>.</span><span>show</span><span>()</span>
</code></pre></div>

<p>As expected, we got the ‚Äúscary‚Äù image from the beginning of this post. Indeed, the standard basis is awful for model fitting! We hope that regularization provides a remedy, but it does not. Maybe adding some L2 regularization helps? Let‚Äôs use the <code>Ridge</code> class from the <code>sklearn.linear_model</code>  package to fit an L2 regularized model:</p>

<div><pre><code><span>from</span> <span>sklearn.linear_model</span> <span>import</span> <span>Ridge</span>

<span>reg_coef</span> <span>=</span> <span>1e-7</span>
<span>model</span> <span>=</span> <span>Ridge</span><span>(</span><span>fit_intercept</span><span>=</span><span>False</span><span>,</span> <span>alpha</span><span>=</span><span>reg_coef</span><span>)</span>
<span>model</span><span>.</span><span>fit</span><span>(</span><span>poly</span><span>.</span><span>polyvander</span><span>(</span><span>X</span><span>,</span> <span>deg</span><span>=</span><span>n</span><span>),</span> <span>y</span><span>)</span>

<span>plt</span><span>.</span><span>scatter</span><span>(</span><span>X</span><span>.</span><span>ravel</span><span>(),</span> <span>y</span><span>.</span><span>ravel</span><span>())</span>                                    <span># plot the samples
</span><span>plt</span><span>.</span><span>plot</span><span>(</span><span>plt_xs</span><span>,</span> <span>true_func</span><span>(</span><span>plt_xs</span><span>),</span> <span>'blue'</span><span>)</span>                          <span># plot the true function
</span><span>plt</span><span>.</span><span>plot</span><span>(</span><span>plt_xs</span><span>,</span> <span>model</span><span>.</span><span>predict</span><span>(</span><span>poly</span><span>.</span><span>polyvander</span><span>(</span><span>plt_xs</span><span>,</span> <span>deg</span><span>=</span><span>n</span><span>)),</span> <span>'r'</span><span>)</span> <span># plot the fit model
</span><span>plt</span><span>.</span><span>ylim</span><span>([</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>])</span>
<span>plt</span><span>.</span><span>show</span><span>()</span>
</code></pre></div>

<p>We get the following result:</p>

<p><img src="https://alexshtf.github.io/assets/polyfit_standard_ridge.png" alt="polyfit_standard_ridge"></p>

<p>The regularization coefficient coefficient of \(\alpha=10^{-7}\) is large enough to break the model in \([0,0.8]\) but not large enough to avoid over-fitting in \([0.8, 1]\). Increasing the coefficient clearly won‚Äôt help - the model will be broken even further in \([0, 0.8]\).</p>

<p>Since we will be trying several polynomial bases, it makes sense to write a more generic function for our experiments that will accept various ‚ÄúVandermonde‚Äù matrix functions of the basis of our choice, fit the polynomial using the <code>Ridge</code> class, and plot it with the original function and the sample points.</p>

<div><pre><code><span>def</span> <span>fit_and_plot</span><span>(</span><span>vander</span><span>,</span> <span>n</span><span>,</span> <span>alpha</span><span>):</span>
  <span>model</span> <span>=</span> <span>Ridge</span><span>(</span><span>fit_intercept</span><span>=</span><span>False</span><span>,</span> <span>alpha</span><span>=</span><span>alpha</span><span>)</span>
  <span>model</span><span>.</span><span>fit</span><span>(</span><span>vander</span><span>(</span><span>X</span><span>,</span> <span>deg</span><span>=</span><span>n</span><span>),</span> <span>y</span><span>)</span>

  <span>plt</span><span>.</span><span>scatter</span><span>(</span><span>X</span><span>.</span><span>ravel</span><span>(),</span> <span>y</span><span>.</span><span>ravel</span><span>())</span>                           <span># plot the samples
</span>  <span>plt</span><span>.</span><span>plot</span><span>(</span><span>plt_xs</span><span>,</span> <span>true_func</span><span>(</span><span>plt_xs</span><span>),</span> <span>'blue'</span><span>)</span>                 <span># plot the true function
</span>  <span>plt</span><span>.</span><span>plot</span><span>(</span><span>plt_xs</span><span>,</span> <span>model</span><span>.</span><span>predict</span><span>(</span><span>vander</span><span>(</span><span>plt_xs</span><span>,</span> <span>deg</span><span>=</span><span>n</span><span>)),</span> <span>'r'</span><span>)</span> <span># plot the fit model
</span>  <span>plt</span><span>.</span><span>ylim</span><span>([</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>])</span>
  <span>plt</span><span>.</span><span>show</span><span>()</span>  
</code></pre></div>

<p>Now we can reproduce our latest experiment by invoking:</p>

<div><pre><code><span>fit_and_plot</span><span>(</span><span>poly</span><span>.</span><span>polyvander</span><span>,</span> <span>n</span><span>=</span><span>50</span><span>,</span> <span>alpha</span><span>=</span><span>1e-7</span><span>)</span>
</code></pre></div>

<h2 id="polynomial-bases">Polynomial bases</h2>

<p>It turns out that in our sister discipline, approximation theory, reseachers also encountered similar difficulties with the standard basis \(\mathbb{E}_n\), and developed a thoery for approximating functions by polynomials from different bases. Two prominent examples of bases of \(n\)-degree polynomials include, and their:</p>

<ol>
  <li>The <a href="https://en.wikipedia.org/wiki/Chebyshev_polynomials">Chebyshev polynomials</a> \(\mathbb{T}_n = \{ T_0, T_1, \dots, T_n \}\), implemented in the <code>numpy.polynomial.chebyshev</code> module.</li>
  <li>The <a href="https://en.wikipedia.org/wiki/Legendre_polynomials">Legendre polynomials</a> \(\mathbb{P}_n = \{ P_0, P_1, \dots, P_n \}\), implemented in the <code>numpy.polynomial.legendre</code> module.</li>
</ol>

<p>They are the computational workhorse of a large variety of numerical algorithms that are enabled by approximating a function using a polynomial, and are well-known for their advantages in approximating functions in the \([-1, 1]\) interval<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" rel="footnote">2</a></sup>. In particular, the corresponding ‚ÄúVandermonde‚Äù matrices are provided by the <code>chebvander</code> and <code>legvander</code> functions in corresponding modules above. Each row in these matrices contains the value of the basis functions at each point, just like the standard Vandermonde matrix of the standard basis. For example, the Chebyshev Vandermonde matrix is:</p><p>

\[\begin{pmatrix}
T_0(x_1) &amp; T_1(x_1) &amp; \dots &amp; T_n(x_1) \\
T_0(x_2) &amp; T_1(x_2) &amp; \dots &amp; T_n(x_2) \\
\vdots &amp; \vdots  &amp; \ddots&amp; \vdots  \\
T_0(x_m) &amp; T_1(x_m) &amp; \dots &amp; T_n(x_m) \\
\end{pmatrix}\]

</p><p>I will not elaborate their formulas and properties here for a reason that will immediately be revealed. However, I highly recomment Prof. Nick Trefethen‚Äôs ‚ÄúApproximation theory and approximation practice‚Äù <a href="https://people.maths.ox.ac.uk/trefethen/atapvideos.html">online video course</a> to get familiar with their advantages. His book with the same name is an excellent introduction to the subject.</p>

<p>It might be tempting to try fitting a Chebyshev polynomial using our <code>fit_and_plot</code> method above directly:</p>

<div><pre><code><span>import</span> <span>numpy.polynomial.chebyshev</span> <span>as</span> <span>cheb</span>

<span>fit_and_plot</span><span>(</span><span>cheb</span><span>.</span><span>chebvander</span><span>,</span> <span>n</span><span>=</span><span>50</span><span>,</span> <span>alpha</span><span>=</span><span>1e-7</span><span>)</span>
</code></pre></div>

<p>However, that‚Äôs not the best thing to do. We aim to fit a function sampled from \([0, 1]\), but the Chebyshev basis ‚Äúlives‚Äù in \([-1, 1]\). Therefore, we will add the transformation \(x \to 2x-1\) before invoking the <code>chebvander</code> function:</p>

<div><pre><code><span>def</span> <span>scaled_chebvander</span><span>(</span><span>x</span><span>,</span> <span>deg</span><span>):</span>
  <span>return</span> <span>cheb</span><span>.</span><span>chebvander</span><span>(</span><span>2</span> <span>*</span> <span>x</span> <span>-</span> <span>1</span><span>,</span> <span>deg</span><span>=</span><span>deg</span><span>)</span>

<span>fit_and_plot</span><span>(</span><span>scaled_chebvander</span><span>,</span> <span>n</span><span>=</span><span>50</span><span>,</span> <span>alpha</span><span>=</span><span>1</span><span>)</span>
</code></pre></div>

<p>Note that a different basis requires a different regularization coefficient. We get the following result:</p>

<p><img src="https://alexshtf.github.io/assets/polyfit_cheb_reg1.png" alt="polyfit_cheb_reg1"></p>

<p>Whoa! Seems even worse than the standard basis!. Maybe more regularization helps?</p>

<div><pre><code><span>fit_and_plot</span><span>(</span><span>scaled_chebvander</span><span>,</span> <span>n</span><span>=</span><span>50</span><span>,</span> <span>alpha</span><span>=</span><span>10</span><span>)</span>
</code></pre></div>

<p><img src="https://alexshtf.github.io/assets/polyfit_cheb_reg10.png" alt="polyfit_cheb_reg10"></p>

<p>Appears that our polynomial is both a bad fit for the function, and extremely oscilatory. Even worse when the standard basis! Interested readers can repeat the experiment with Legendre polynomials and see a slightly better, but similar result. So what‚Äôs wrong? Is everything that approximation theory tries to teach us about polynomials wrong?</p>

<p>The answer stems from the fundamental difference between two tasks:</p>

<ul>
  <li><strong>Interpolation</strong> - finding a polynomial that agrees with the approximated function \(f(x)\) <em>exactly</em> at a set of <em>carefully chosen</em> points</li>
  <li><strong>Fitting</strong> - finding a polynomial that agrees <em>approximately</em> with a given <em>noisy</em> set of points, which are <em>out of our control</em>.</li>
</ul>

<p>The Chebyshev and Legendre bases perform extremely well at the the interpolation task, but not at the fitting task. It turns out that the polynomial \(T_k\) in the Chebyshev basis, and the polynomial \(P_k\) in the Legendre basis, are both \(k\)-degree polynomials. For example, \(T_1\) is a linear function, whereas \(T_{50}\) is a polynomial of degree 50. These two functions are radically different. Thus, the coefficient of \(T_1\) and \(T_{50}\) have ‚Äúdifferent units‚Äù. This property is shared with the standard basis as well. Thus, we have two issues:</p>

<ol>
  <li>A small change of the coefficient of a high degree basis function, say the coefficient \(\alpha_{50}\), has a huge effect on the shape of the polynomial. Thus, a small perturbation in the input data, be it from noise or a slighly different data point \(x_i\), has a <em>huge</em> effect of the fit model.</li>
  <li>L2 regularization makes no sense! For reasonable functions, the coefficient \(\alpha_{50}\) should be much smaller than the coefficient \(\alpha_1\). This is regardless of the choice of the basis!</li>
</ol>

<p>Both properties show that for the fitting, rather the interpolation tasks we need something else.</p>

<h2 id="the-bernstein-basis">The Bernstein basis</h2>

<p>A remedy is provided by the <a href="https://en.wikipedia.org/wiki/Bernstein_polynomial">Bernstein basis</a> \(\mathbb{B}_n = \{  b_{0,n}, \dots, b_{n, n} \}\). These are \(n\)-degree polynomials defined by on \([0, 1]\) by:</p><p>

\[b_{i,n}(x) = \binom{n}{i} x^i (1-x)^{n-i}\]

</p><p>These polynomials are widely used in computer graphics to approximate curves and surfaces, but it appears that they‚Äôre less known in the machine learning community. In fact, all the text you see on the screen when reading this post is rendered using Bernstein polynomials<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" rel="footnote">3</a></sup>. We will study them more in depth in the next posts, but at this stage I would like to point out two simple properties that give an intuitive explanation of why they‚Äôre useful in machine learning.</p>

<p>First, note that each \(b_{i,n}\) is an \(n\)-degree polynomial. Thus, when representing a polynomial using</p><p>

\[p_n(x) = \alpha_0 b_{0,n}(x) + \alpha_1 b_{1,n}(x) + \dots + \alpha_n b_{n,n}(x),\]

</p><p>all the coefficients have the same ‚Äúunits‚Äù.</p>

<p>If the formula of \(b_{i,n}(x)\) seems familiar - you are correct. It is exactly the probability mass function of the binomial distribution for obtaining \(i\) successes in a sequence of trials whose success probability is \(x\). Therefore, \(b_{i,n}(x) \geq 0\),  and \(\sum_{i=0}^n b_{i,n}(x) = 1\) for any \(x \in [0, 1]\). Consequently, the polynomial \(p_n(x)\) is just a weighted average of the coefficients \(\alpha_0, \dots, \alpha_n\). So not only the coefficients have the same ‚Äúunits‚Äù, their ‚Äúunits‚Äù are also the same as the model‚Äôs labels. Thus, they‚Äôre much easier to regularize - they‚Äôre all on the same ‚Äúscale‚Äù.</p>

<p>Finally, due to the equivalence with the binomial distribution p.m.f, we can implement a ‚ÄúVandermonde‚Äù matrix in Python using the <code>scipy.stats.binom.pmf</code> function.</p>

<div><pre><code><span>from</span> <span>scipy.stats</span> <span>import</span> <span>binom</span>

<span>def</span> <span>bernvander</span><span>(</span><span>x</span><span>,</span> <span>deg</span><span>):</span>
	<span>return</span> <span>binom</span><span>.</span><span>pmf</span><span>(</span><span>np</span><span>.</span><span>arange</span><span>(</span><span>1</span> <span>+</span> <span>deg</span><span>),</span> <span>deg</span><span>,</span> <span>x</span><span>.</span><span>reshape</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>))</span>
</code></pre></div>

<p>Let‚Äôs try and fit without regularization at all</p>

<div><pre><code><span>fit_and_plot</span><span>(</span><span>bernvander</span><span>,</span> <span>n</span><span>=</span><span>50</span><span>,</span> <span>alpha</span><span>=</span><span>0</span><span>)</span>
</code></pre></div>

<p><img src="https://alexshtf.github.io/assets/polyfit_bern_reg0.png" alt="polyfit_bern_reg0"></p>

<p>We see our regular over-fitting. Now let‚Äôs see that they‚Äôre indeed easy to regularize. After trying several regularization coefficients, I came up with this:</p>

<div><pre><code><span>fit_and_plot</span><span>(</span><span>bernvander</span><span>,</span> <span>n</span><span>=</span><span>50</span><span>,</span> <span>alpha</span><span>=</span><span>5e-7</span><span>)</span>
</code></pre></div>

<p><img src="https://alexshtf.github.io/assets/polyfit_bern_reg5em4.png" alt="polyfit_bern_reg5em4"></p>

<p>Beautiful! This is a polynomial of degree 50! The fit is great, no oscillations, and the misfit near the right endpoint stems from the noise - I don‚Äôt believe there‚Äôs enough information in the data to convey the fact that it should ‚Äúcurve up‚Äù rather than ‚Äúcurve down‚Äù.</p>

<p>Let‚Äôs see what happens when we crank-up the degree. Can we produce a nice non-oscilating polynomial?</p>

<div><pre><code><span>fit_and_plot</span><span>(</span><span>bernvander</span><span>,</span> <span>n</span><span>=</span><span>100</span><span>,</span> <span>alpha</span><span>=</span><span>5e-4</span><span>)</span>
</code></pre></div>

<p><img src="https://alexshtf.github.io/assets/polyfit_bern_100_reg5em4.png" alt="polyfit_bern_100_reg5em4"></p>

<p>This is a polynomial of degree 100, that does not overfit!</p>

<h2 id="summary">Summary</h2>

<p>The notorious reputation of high-degree polynomials in the machine learning community is primarily a myth. Despite it, papers, books, and blog posts are based on this premise as if it was an axiom. Bernstein polynomials are little known in the machine learning community, but there are a few papers<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" rel="footnote">4</a></sup><sup id="fnref:5" role="doc-noteref"><a href="#fn:5" rel="footnote">5</a></sup> using them to represent polynomial features. Their main advantage is ease of use - we can use high degree polynomials to exploit their approximation power, and easily control model complexity with just one hyperparameter - the regularization coefficient.</p>

<p>In the following posts we will explore the Bernstein basis in more detail. We will use it to create polynomial features for real-world datasets and test it versus the standard basis. Moreover, we will see how to regularize the coefficients to control the shape of the function we aim to represent.. For example, what if we know that the function we‚Äôre aiming to fit is increasing? Stay tuned!</p>

<hr>



  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I should have loved biology too (131 pts)]]></title>
            <link>https://nehalslearnings.substack.com/p/i-should-have-loved-biology-too</link>
            <guid>43764076</guid>
            <pubDate>Tue, 22 Apr 2025 16:46:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nehalslearnings.substack.com/p/i-should-have-loved-biology-too">https://nehalslearnings.substack.com/p/i-should-have-loved-biology-too</a>, See on <a href="https://news.ycombinator.com/item?id=43764076">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>About a year ago, I came across James Somers‚Äô blog post, </span><em><a href="https://jsomers.net/i-should-have-loved-biology/" rel="">I should have loved biology</a></em><span>. I began reading it and every sentence struck a chord: ‚ÄúI should have loved biology but found it a lifeless recitation of names‚Äù; ‚ÄúIn textbooks, astonishing facts were presented without astonishment‚Äù; ‚ÄúIn biology class, biology wasn‚Äôt presented as a quest for the secrets of life. The textbooks wrung out the questing.‚Äù In fact, the chord was so neatly stuck that I stopped reading about a quarter of the way through, and found myself falling into a memory. I was sitting in my 7th grade biology class, completely disinterested. Every time our teacher would turn her back to us to write on the blackboard, my friends and I would sling paper pellets at each other across the room, barely paying attention as she narrated wearily about cell walls or chloroplasts or mitochondria being the powerhouse of the cell. I liked math and physics and economics and even chemistry, to some extent (much less pellet slinging), but biology, with its endless memorization of definitions and regurgitation of facts ‚Äì no, biology could go back under the soil it came from.</span></p><p>Now, I‚Äôm obsessed. I can‚Äôt get enough. I‚Äôve read about fifteen books in the last year or so, watched countless YouTube videos, and started a bioinformatics course. And my list keeps growing. The first quarter of Somers‚Äô post was so effective in making me consider my own disinterest-to-obsession journey ‚Äì (I didn‚Äôt even read the rest until months later) ‚Äì that I decided to look back and examine what caused this complete change of heart.</p><p><span>More than anything ‚Äì nature documentaries, science shows, museum visits ‚Äì it was great writing that allowed me to see the world of biology differently. My interest in biology, or rather the reversal of my disinterest in biology, began when I read </span><em>The Sixth Extinction</em><span> in 2016, during my second year of university. Elizabeth Kolbert‚Äôs gripping writing unveiled a completely different perspective of the subject, right alongside the scientists and researchers: driving through a Panamanian rainforest looking for golden frogs, searching a littered New Jersey creek for ammonites, scuba-diving in Castello Aragonese to inspect carbon dioxide rushing out of sea vents and in The Great Barrier Reef to look at octopi and coral reefs and blue starfish and leopard sharks and giant clams. Biology, suddenly, didn‚Äôt seem just a list of facts to memorize; it was an adventure.</span></p><p>I still remember how I felt after finishing her book: a strange mix of wonder and tragedy, awe and despair. That narrative structure ‚Äì vivid reporting and meticulous research built on a foundation of context and history ‚Äì changed how I saw science and scientists. No more dry paragraphs of definitions and explanations; every discovery had a story.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg" width="1000" height="667" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:667,&quot;width&quot;:1000,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1083159,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://nehalslearnings.substack.com/i/158089094?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F736031ab-8053-410c-a5d3-819ed2ec8935_1000x667.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>The Great Barrier Reef, the world‚Äôs largest coral reef system. Elizabeth Kolbert occasionally reports about the impact of climate change there.</figcaption></figure></div><p><span>I wanted more books just like that, and luckily for me, several months later in an airport bookshop in Bangalore, I came across and picked up </span><em>The Gene</em><span>. I wasn‚Äôt aware of who Siddhartha Mukherjee was at the time (possibly the mention of Pulitzer Prize winner on the cover influenced me), and I had no prior interest in genetics, but that book would end up completely changing my worldview on biology and non-fiction writing. If Kolbert made a crack in the dam I had built around biology, Mukherjee would go on to smash the whole thing down to pieces.</span></p><p>One of the stories in the book, the discovery of the gene that caused Huntington‚Äôs disease, moved me tremendously when I first read it a few years ago. It‚Äôs the perfect example of the amount of effort that goes into a scientific discovery that then ends up as a single sentence in a textbook; in this case, that Huntington‚Äôs disease is a hereditary, neurodegenerative disorder caused by a mutation in a single gene.</p><p><span>The story of finding that mutation would make a thrilling movie: a young woman named Nancy Wexler, devastated by the news that her mother has been diagnosed with Huntignton‚Äôs and that she and her sister would have a 50-50 chance of getting it, decides to devote her life to solving this medical mystery. Her quest takes her from nursing homes in Los Angeles to interdisciplinary scientific workshops in Boston to stilt villages surrounding Lake Maracaibo in Venezuela. Her decade-long blood and skin sample collection efforts there would create the largest family tree with Huntington‚Äôs, leading to the first genetic test for the disease, followed by locating the precise genetic mutation that caused it</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-158089094" href="https://nehalslearnings.substack.com/p/i-should-have-loved-biology-too#footnote-1-158089094" target="_self" rel="">1</a></span><span>.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp" width="1456" height="970" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:970,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:231012,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://nehalslearnings.substack.com/i/158089094?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F33d54e68-df2c-473f-83df-a735abf0c1bd_2048x1365.webp 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Dr. Nancy Wexler in 1990, with a family tree that traced the path of Huntington‚Äôs. Acey Harper/The LIFE Collection, via Getty Images. Taken from the New York Times.</figcaption></figure></div><p><span>The gene sequence had a strange repeating structure, CAGCAGCAG‚Ä¶ continuing for 17 repeats on average (ranging between 10 to 35 normally), encoding a huge protein that‚Äôs found in neurons and testicular tissue (its exact function is still not well understood). The mutation that causes HD increases the number of repeats to more than forty ‚Äì a ‚Äúmolecular stutter‚Äù ‚Äì creating a longer huntingtin protein, which is believed to form abnormally sized clumps when enzymes in neural cells cut it. The more repeats there are, the sooner the symptoms occur and the higher the severity</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-158089094" href="https://nehalslearnings.substack.com/p/i-should-have-loved-biology-too#footnote-2-158089094" target="_self" rel="">2</a></span><span>.</span></p><p>Nancy herself opted not to take the genetic test she helped create. ‚ÄúIf the test showed I have the gene,‚Äù she wrote in 1991, ‚Äúwould I continue to feel the happiness, the passion, the occasional ecstasy I feel now? Is the chance of release from Huntington‚Äôs worth the risk of losing joy?‚Äù. In 2020, at the age of 74, she revealed that she had Huntington‚Äôs. The public acknowledgment was not a surprise for those close to her ‚Äì for the last decade, they noticed her gait slowly deteriorate, speech slur, and limbs jerk in random directions, the same characteristics she saw in her mother half a century ago, and in the hundreds of Venezuelan patients she tended to ever since.</p><p>There‚Äôs still no cure for Huntington‚Äôs disease, but every time I hear about progress on cures, I feel a rush of emotions, like I have a personal stake in its invention. I really wish to see one found within Nancy Wexler‚Äôs lifetime; this movie deserves a happy ending.</p><p>Pick a field in biology, or a slice of history, and you‚Äôll find countless stories just like this. Mischievous Watson and Crick figuring out the structure of DNA after getting a peek at Rosalind Franklin‚Äôs crisp x-ray crystallography photograph; Baruch Blumberg discovering hepatitis B after locating the antigen in the blood of an Australian Aboriginal, and beating NIH to its cure, the world‚Äôs first cancer vaccine; James Simpson systematically inhaling various vapors and recording its effects in the search for a better anesthetic, resulting in the discovery of chloroform; Andreas Vesalius taking prisoners‚Äô corpses hanging in the gallows in 16th century Paris and, along with painter Andrea Mategna, publishing nearly 700 incredibly detailed drawings of the human anatomy.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg" width="1200" height="1678" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1678,&quot;width&quot;:1200,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:161518,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://nehalslearnings.substack.com/i/158089094?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffe22ef74-a63b-41c9-82c1-8f5f0962f3c9_1200x1678.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>An illustration from </span><em>De Humani Corporis Fabrica</em><span> (On the Fabric of the Human Body), published in 1543 by Andreas Vesalius and Andrea Mategna. The first edition included over 200 high-detail anatomical illustrations. I particularly like this one.</span></figcaption></figure></div><p>History and stories may not be immediately applicable, but when used as a key ingredient it makes the discoveries more majestic, more impactful. That‚Äôs what I love about Mukherjee‚Äôs writing: it‚Äôs a unique stew of history, biography, experimental methods and results, scientific findings and their significance, seasoned well with personal anecdotes, and presented with the candor of a physician and the artistry of a poet. The context creates a kind of multiplier when the mind-shattering discoveries are explained ‚Äì how a genotype gives rise to a phenotype, how cancer works, how a heart beats or a bone mends itself or a brain remembers a memory. Like the climax of a movie scene, the beauty and immensity of the discovery or the invention feels far more compelling after following the steps that got us there.</p><p><span>Every discovery might not have an entertaining backstory, but even when focusing on just the phenomenon, great technical writing has this striking ability to make you see the world differently. The same molecule or cell or organ, theory or experiment or discovery, suddenly seems monumental, like it‚Äôs the most important thing in the world. It makes you think: </span><em>why didn‚Äôt I learn about this before?</em></p><p><span>One of my favourites is the way Mukherjee describes how a neuron communicates in </span><em>The Song of the Cell</em><span>:</span></p><blockquote><p><em>Imagine the nerve, first, in its ‚Äúresting‚Äù state. At rest, the internal milieu of the neuron contains a high concentration of potassium ions and a minimal concentration of sodium ions. This exclusion of sodium from the neuron‚Äôs interior is critical; we might imagine these sodium ions as a throng outside the citadel, locked out of the castle‚Äôs walls and banging at the gates to get inside. Natural chemical equilibrium would drive the influx of sodium into the neuron. In its resting state, the cell actively excludes sodium from entry, using energy to drive the ions out‚Ä¶</em></p><p><em>[...] The dendrites are the site within the neuron where the ‚Äúinput‚Äù of the signal originates. When a stimulus‚Äîtypically a chemical called a ‚Äúneurotransmitter‚Äù‚Äîarrives at one of the dendrites, it binds to a cognate receptor on the membrane. And it is at this point that the cascade of nerve conduction begins.</em></p><p><em>The binding of the chemical to the receptor causes channels in the membrane to open. The citadel‚Äôs gates are thrown ajar, and sodium floods into the cell. As more ions swarm in, the neuron‚Äôs net charge changes: every influx of ions generates a small positive pulse. And as more and more transmitters bind, and more such channels open, the pulse increases in amplitude. A cumulative charge courses through the cell body.</em></p></blockquote><p><span>The mental picture of a </span><em>throng</em><span> of sodium ions </span><em>locked out of the castle walls</em><span> is so helpful and convincing. I can see, in my mind‚Äôs eye, these shadowy ions</span><em> banging at the gates to get inside</em><span>, like an invading army</span><em>.</em><span> Then, after the neurotransmitter binds to the cognate receptor, the sodium ions don‚Äôt just enter, they </span><em>flood</em><span> and </span><em>swarm</em><span> in; the membrane doesn‚Äôt just open, its </span><em>gates are thrown ajar</em><span>. The metaphor makes the chemical process relatable without leaving out the details; the vivid language romanticizes it, creating a mental picture that not only stays with you, but makes you want to learn more.</span></p><p>A little later in the chapter, Mukherjee writes about neural connection in the fetus:</p><blockquote><p><em>Neural connections between the eyes and the brain are formed long before birth, establishing the wiring and the circuitry that allow a child to begin visualizing the world the minute she emerges from the womb. Long before the eyelids open, during the early development of the visual system, waves of spontaneous activity ripple from the retina to the brain, like dancers practicing their moves before a performance‚Ä¶ This fetal warm-up act‚Äîthe soldering of neural connections before the eyes actually function‚Äîis crucial to the performance of the visual system. The world has to be dreamed before it is seen.</em></p></blockquote><p><span>There‚Äôs something about this evocative language that leaves a sweet, lingering imprint on my mind ‚Äî a new set of neural connections; my own </span><em>throng </em><span>of sodium ions </span><em>banging at the gates</em><span>, my own </span><em>ripples</em><span>. The details ‚Äì which ions, the name of the receptor ‚Äì might get murky after the passage of time, but the sweet feeling remains, like a memory of a heavenly meal; you may have forgotten the exact taste, but the feeling of satisfaction lingers, and occasionally, when it enters front and center, you might imagine visiting the restaurant (or home) once more. </span></p><p>That‚Äôs what I feel after reading books like this ‚Äì the belief that I‚Äôll revisit it, relive it, relearn it. It fills up a reservoir of curiosity, and every subsequent piece of stimulus ‚Äì a neurology article or academic paper shared on Twitter, a documentary or YouTube video, another book (even textbooks) ‚Äì opens the floodgates, and makes you want to explore a little more. I might not have the equipment to see this cell myself, but when written like this, this world too can be dreamed before it is seen.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg" width="1456" height="2176" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:2176,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1369914,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://nehalslearnings.substack.com/i/158089094?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6fc1a45a-1e78-4f31-8ec1-fa70f76126e4_1927x2880.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Santiago Ram√≥n y Cajal‚Äôs famous drawing of neurons, circa late 19th century. He would go on to create more than 2,900 drawings detailing the nervous system‚Äôs architecture. Image taken from Quanta Magazine</figcaption></figure></div><p><span>The more you explore, the more astonishing it gets. Suddenly, you‚Äôre surrounded by these facts that stop you in your tracks. Like the fact that there are 20-30 trillion red blood cells in our body, making up roughly 84% of all our cells, and 1.2 million are created in our bone marrow every second. Or the fact that our visual system is predictive, calculating where to move the hand to catch a ball before your visual system has fully registered its trajectory</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-158089094" href="https://nehalslearnings.substack.com/p/i-should-have-loved-biology-too#footnote-3-158089094" target="_self" rel="">3</a></span><span>.</span></p><p><span>One of my favorite ‚Äòsentences that stopped me in my tracks‚Äô comes from Nick Lane‚Äôs book, </span><em>The Vital Question</em><span>. He starts with carefully explaining that all cells derive their energy from a single type of chemical reaction, the redox reaction, where electrons are transferred from one molecule to another. Rust is a redox reaction: iron donates electrons to oxygen, being </span><em>oxidized</em><span> in the process. Same with fire: oxygen (O</span><sub>2</sub><span>) is </span><em>reduced</em><span> to water after receiving two electrons (O</span><sup>2-</sup><span>) and then two protons (H</span><sub>2</sub><span>O), balancing the charges, and releasing heat in the process. Respiration ‚Äî the process that turns our food into energy ‚Äî does exactly this as well, except that it conserves </span><em>some</em><span> of the energy in the form of a molecule called adenosine triphosphate (ATP). Think of ATP as an energy currency, able to be stored or converted back into energy by splitting the molecule into ADP (adenosine diphosphate) and P</span><sub>i</sub><span> (phospate). And so, he writes, ‚Äú</span><strong>in the end respiration and burning are equivalent; the slight delay in the middle is what we know as life</strong><em>.‚Äù</em></p><p>Wait, what? The slight delay in the middle is what we know as life? I think when I first read that I might have skipped a heartbeat. I learned about mitochondria and ATP and redox reactions and aerobic respiration in high school, but I never pictured it as millions of molecular fires that keep us alive. Actually, not a million; it‚Äôs at least a quadrillion ‚Äì per second. </p><p>ATP is synthesized by the fabled mitochondria, but that‚Äôs not all they do. They also regulate metabolism, participate in cell growth and death, manage calcium levels, and are involved in detoxification, hormone production, and cellular signalling. They even have their own genetic code. In fact, your mitochondria come from your mother and your mother only; they‚Äôre not genetically recombined like the rest of you. They‚Äôre remarkably fascinating; even the universally memed ‚Äúpowerhouse‚Äù doesn‚Äôt quite cover its capabilities.</p><p>All of this is still merely scratching the surface of wonder. I‚Äôve only really described three examples in biology, all of which relate to human cells. But we‚Äôre just one of the millions of organisms on this planet. Bacteria, plants, fungi, insects, birds, reptiles, mammals, and everything in between, are all made up of cells. And every level ‚Äì ecological, species, organism, tissue, cellular, organelle, protein, genome ‚Äì has its own stories, each its own magic.</p><p><span>In his blog post, Somers advised to learn in small, deep slices. But I took a different approach: I went shallow and wide. Kolbert, Mukherjee, and Lane inspired exploring adjacent domains, and so I read about epidemiology, drug discovery, gene editing, molecular biology, systems and synthetic biology, immunotherapy, and memoirs from surgeons, cancer patients, and ‚Äúbiology watchers‚Äù. Even my fiction choices started to exhibit a biology tinge: </span><em>The Shell Collector</em><span>, </span><em>The Covenant of Water</em><span>, </span><em>The Overstory</em><span>. Eventually, I started seeing biology everywhere ‚Äî the roots of a sidewalk tree battling with concrete, a group of sparrows frolicking in a bush, a young woman in an air cast fiddling with her crutches ‚Äî as if it escaped the pages and began whispering its presence wherever I went.</span></p><p>Last summer, I went scuba diving for the first time in my life. I‚Äôve wanted to go since I was a teen, a desire amplified after reading Kolbert‚Äôs adventures and watching ocean documentaries. After years and years of postponing, I finally pulled the trigger and flew to Puerto Vallarta to get Open Water certified. I could fill an entire essay with just this certification experience ‚Äî the anxiety-inducing pre-dive coursework that essentially just lists the many ways you can get seriously injured or die; the silly awkwardness of training in a Mexican hotel pool surrounded by curious onlookers; the ear injury I sustained after my first ocean dive, where a rupture caused by improper depressurization caused middle ear fluid to flood my right ear canal, leaving me with partial hearing loss for a week (even PADI‚Äôs intimidating coursework could only do so much) ‚Äî but I will focus on just the experience of my second dive here.</p><p>It was a picture-perfect day in Puerto Vallarta: deep blue skies, fluffy cotton-candy clouds floating above, a momentary cool breeze tempering the unrelenting summer humidity. As our boat sped along to Playa Majahuitas, about a 40 minutes ride from the main pier, I watched the lush green hills roll by just behind the shore, the ocean shimmering as the sun flung silver disks across its surface. During the ride, I asked the couple sharing the boat about their scuba experiences, and, again, I got a common response I still couldn‚Äôt relate to: that it was meditative ‚Äî it was where your problems of land disappear, and you get to be a visitor in the home of sea-life, a polite guest just observing. </p><p>Our dive spot looked like a painting: water so clear you could see schools of fish just by peering over the edge of the boat. Just before we began, we got a surprise visit from a manta ray ‚Äì this enormous, ethereal creature silently gliding under the water, just flicking the tips of its wings above the surface, as if to say hello, and welcome us into its home.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg" width="1456" height="1941" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1941,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2068990,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://nehalslearnings.substack.com/i/158089094?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd786de1d-a8e2-4b8d-907f-91213b90e3b8_3024x4032.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The dive spot in Playa Majahuitas, Mexico</figcaption></figure></div><p>After the dive that day, I understood what the couple meant. I felt a lot more comfortable with my equipment second time around, and so, no longer apprehensive about buoyancy or breathing rate or how deep I was, I finally felt free to fully take in my surroundings. I fell into a gentle rhythm: inhale, listen to the hiss of the regulator, exhale, watch the bubbles float away. You‚Äôre distinctly aware of each and every moment, mind blank and in awe of the world around you: a large school of Cortez wrasses passing by; a camouflaged octopus hiding under the seabed; a moray eel sticking its neck out of a little hole, an angry look on its face, as if you‚Äôve just disturbed its sleep; the vast, splendid diversity of corals ‚Äì you can see it living, with little, wavy hand-like appendages collecting bits of floating food to eat, with tiny fish swimming in and out and around, as if playing a game of tag. </p><p>It was truly marvelous. Colors, too, are more vibrant underwater, as if the gods enhanced saturation as a gift to those that dare venture below. The body of spotted boxfish are a glittery blue, and the yellow speckled top shines in contrast. The corals too are rich: deep oranges, yellows, greens and browns. Even ocean documentaries, with their film-grade color editing, don‚Äôt capture the true shades.</p><p>During the boat ride back, I had this incredibly calming bliss completely take over my body. (Maybe that‚Äôs also what people attribute to its meditative quality, although meditative isn‚Äôt exactly the right word). For me, the whole experience would mark the start of a gradual realization that I wanted my role in biology to be more than just reading. My favorite science writers ‚Äì Kolbert, Mukherjee, Lane, Lewis Thomas, Donald Kirsch ‚Äì all wrote from experience, and if I wanted to write, or create, like that, I‚Äôd have to experience the world too. I began piecing together the things that had been swimming in my mind: namely, how to combine my past passion, interactive learning, with my latest obsession, biology. </p><p><span>I have since restarted working on my website, </span><a href="https://www.newtinteractive.com/" rel="">Newt Interactive</a><span>, to make interactive articles and accessible simulators for topics in biology. I too, like Somers mentions at the end of his blog post, want to bring the three dimensional nature of biology to life. The subject is teeming with fascinating phenomena that remain hidden or inaccessible to those outside scientific and research communities. Occasionally, I‚Äôll come across something incredible ‚Äî like a video of a molecular motor in action ‚Äî but the sheer marvel of that just fundamentally doesn‚Äôt click unless you‚Äôre already well versed in the subject</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-158089094" href="https://nehalslearnings.substack.com/p/i-should-have-loved-biology-too#footnote-4-158089094" target="_self" rel="">4</a></span><span>. </span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png" width="1456" height="851" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:851,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1749056,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://nehalslearnings.substack.com/i/158089094?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46e08242-5854-4c59-9503-7ff62990aef3_3440x2010.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>My interactive simulator of a coherent type-1 feed forward loop, a common gene circuit. My hope is that these kinds of playgrounds can make complex topics more accessible. </span><a href="https://www.newtinteractive.com/blocks/c1-ffl" rel="">Try it out on Newt Interactive</a></figcaption></figure></div><p><span>I hope to bridge this gap and make some of biology's intricate mechanisms comprehensible and awe-inspiring for everyone. I‚Äôve started with an </span><a href="https://www.newtinteractive.com/series/systems-biology/transcription-network-basics-1" rel="">interactive series on systems biology</a><span> (and wrote about my idea and motivation behind it in a </span><a href="https://nehalslearnings.substack.com/p/a-new-interactive-series-for-systems" rel="">previous post</a><span>), as well as some standalone simulators for a few concepts: </span><a href="https://www.newtinteractive.com/blocks/c1-ffl" rel="">coherent type-1 feed forward loops</a><span> and </span><a href="https://www.newtinteractive.com/blocks/circuit-evolution" rel="">genetic circuit evolution</a><span>, for two. My goal is to work my way up to more sophisticated simulations, tools, and interactive articles that will help illustrate, and importantly, allow you to play with, more advanced concepts. In addition, I‚Äôd like to generally write and draw more as well (also started with this by making </span><a href="https://press.asimov.com/articles/gene-circuit" rel="">my first science graphic and biological math model for Asimov Press</a><span>).</span></p><p>Stories of science can elicit all kinds of emotions: joy, sadness, enchantment, heartbreak, optimism, valiance, apprehension, intrigue. I find, however, that one theme seems to be consistent among the characters: curiosity. This shouldn‚Äôt come as a surprise, of course, but what I hadn‚Äôt anticipated was how infectious it could be. Just reading about these scientists ‚Äî their history, theories, efforts, mistakes and unwavering dedication to truth ‚Äî kindled an active curiosity in me. I don‚Äôt think I have the patience to do what the scientists I read about did, experimenting day after day, week and week, year after year, exploring a small sliver in the ‚Äúinfinite vastness of biology‚Äù. And, since my curiosity started and ended with books, I didn‚Äôt think there was a meaningful role I could play. I couldn‚Äôt hear the calling.</p><p>But now I‚Äôm not so sure. I have this recurring desire to look down a microscope, and see a cell live its life, see its components swimming, squirming, dividing. I want to see a sequencing machine take in an organism‚Äôs DNA and spit out all its nucleotide bases; to hold a test-tube with genetic material that I edited with CRISPR-Cas9; to roam around a laboratory and peek at each bench‚Äôs weird collection of tools and equipment and liquids, slide my feet across the polished laboratory floor, smell the lingering scent of disinfectant; to go on more dives and hikes and explore the breathtaking diversity of life. It‚Äôs not quite a calling, more like hearing a faint ringtone in a distant room. You‚Äôre not sure if your phone‚Äôs ringing or your mind‚Äôs making the sound up. Maybe this time it‚Äôs worth taking a look.</p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ClickHouse gets lazier (and faster): Introducing lazy materialization (177 pts)]]></title>
            <link>https://clickhouse.com/blog/clickhouse-gets-lazier-and-faster-introducing-lazy-materialization</link>
            <guid>43763688</guid>
            <pubDate>Tue, 22 Apr 2025 16:03:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://clickhouse.com/blog/clickhouse-gets-lazier-and-faster-introducing-lazy-materialization">https://clickhouse.com/blog/clickhouse-gets-lazier-and-faster-introducing-lazy-materialization</a>, See on <a href="https://news.ycombinator.com/item?id=43763688">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Imagine if you could skip packing your bags for a trip because you find out at the airport you‚Äôre not going. That‚Äôs what ClickHouse is doing with data now.</p>
<p>ClickHouse is one of the fastest analytical databases available, and much of that speed comes from avoiding unnecessary work. The less data it scans and processes, the faster queries run. Now it pushes this idea even further with a new optimization: lazy materialization, which delays reading column data until it‚Äôs actually needed.</p>
<p>This seemingly "lazy" behavior turns out to be extremely effective in real-world workloads, especially for <code>Top N</code> queries that sort large datasets and apply <code>LIMIT</code> clauses, a common pattern in observability and general analytics. In these scenarios, lazy materialization can dramatically accelerate performance, often by orders of magnitude.</p>
<blockquote>
<p><strong>Spoiler alert</strong>: We‚Äôll show you how a ClickHouse query went from 219 seconds to just 139 milliseconds‚Äî<strong>a 1,576√ó speedup</strong>‚Äîwithout changing a single line of SQL. Same query. Same table. Same machine. The only thing that changed? When ClickHouse reads the data.</p>
</blockquote>
<p>In this post, we‚Äôll walk through how lazy materialization works and how it fits into ClickHouse‚Äôs broader I/O optimization stack. To give a complete picture, we‚Äôll also briefly demonstrate the other key building blocks of I/O efficiency in ClickHouse, highlighting not just what lazy materialization does, but how it differs from and complements the techniques already in place.</p>
<p>We‚Äôll begin by describing the core I/O-saving techniques ClickHouse already uses, then run a real-world query through them, layer by layer, until lazy materialization kicks in and changes everything.</p>

<p>Over the years, ClickHouse has introduced a series of layered optimizations to aggressively reduce I/O. These techniques form the foundation of its speed and efficiency:</p>
<ul>
<li>
<p><strong><a href="https://clickhouse.com/docs/parts">Columnar storage</a></strong> allows skipping entire columns that aren‚Äôt needed for a query and also enables high compression by grouping similar values together, minimizing I/O during data loading.</p>
</li>
<li>
<p><strong><a href="https://clickhouse.com/docs/primary-indexes">Sparse primary indexes</a></strong>, <strong><a href="https://clickhouse.com/docs/optimize/skipping-indexes">secondary data-skipping indexes</a></strong>, and <strong><a href="https://clickhouse.com/docs/data-modeling/projections">projections</a></strong> prune irrelevant data by identifying which <strong>granules</strong> (row blocks) might match filters on <em>indexed columns</em>. These techniques operate at the granule level and can be used individually or in combination.</p>
</li>
<li>
<p><strong><a href="https://clickhouse.com/docs/optimize/prewhere">PREWHERE</a></strong> checks matches also for filters on <em>non-indexed</em> columns to skip data early that would otherwise be loaded and discarded. It can work independently or refine the granules selected by indexes, complementing granule pruning by skipping rows that don‚Äôt match <em>all</em> column filters.</p>
</li>
<li>
<p><strong><a href="https://clickhouse.com/blog/introducing-the-clickhouse-query-condition-cache">The query condition cache (deep dive)</a></strong> speeds up repeated queries by remembering which granules matched all filters last time. ClickHouse can then skip reading and filtering granules that didn‚Äôt match, even if the query shape changes. Since it simply caches the result of index and PREWHERE filtering, we won‚Äôt cover it further here.  <strong>We disabled it in all tests below to avoid skewing results.</strong></p>
</li>
</ul>
<blockquote>
<p>These techniques, including the lazy materialization introduced below, reduce I/O <em>during</em> query processing, which is the focus of this post. An orthogonal approach is to reduce table size (and query work) upfront by precomputing results with <a href="https://clickhouse.com/docs/materialized-view/incremental-materialized-view">incremental</a> or <a href="https://clickhouse.com/docs/materialized-view/refreshable-materialized-view">refreshable</a> <strong>materialized views</strong>, which we won‚Äôt cover here.</p>
</blockquote>

<p>While the aforementioned I/O optimizations can significantly reduce data read, they still assume that all columns for rows passing the <code>WHERE</code> clause must be loaded before running operations like sorting, aggregation, or <code>LIMIT</code>. But what if some columns aren‚Äôt needed until later, or some data, despite passing the <code>WHERE</code> clause, is never needed at all?</p>
<p>That‚Äôs where <strong>lazy materialization</strong> comes in. An orthogonal enhancement that completes the I/O optimization stack:</p>
<ul>
<li>
<p>Indexing, together with PREWHERE, ensures that only rows matching column filters in the <code>WHERE</code> clause are processed.</p>
</li>
<li>
<p>Lazy materialization builds on this by deferring column reads until they‚Äôre actually required by the query execution plan. Even after filtering, only the columns needed for the next operation‚Äîsuch as sorting‚Äîare loaded immediately. Others are postponed and, due to <code>LIMIT</code>, are often read only partially, just enough to produce the final result. This makes lazy materialization especially powerful for <em>Top N</em> queries, where the final result may only require a handful of rows from certain, often large, columns.</p>
</li>
</ul>
<blockquote>
<p>This kind of fine-grained column processing is only possible because ClickHouse stores each column independently. In <a href="https://clickhouse.com/engineering-resources/what-is-columnar-database#row-based-vs-column-based">row-oriented</a> databases, where all columns are read together, this level of deferred I/O simply isn‚Äôt feasible.</p>
</blockquote>
<p>To demonstrate its impact, we‚Äôll now walk through a real-world example and show how each layer of optimization plays a role.</p>

<p>We‚Äôll use the <a href="https://clickhouse.com/docs/getting-started/example-datasets/amazon-reviews">Amazon customer reviews</a> dataset, which has around 150 million product reviews from 1995 to 2015.</p>
<p>
We‚Äôre running ClickHouse 25.4 on an AWS <code>m6i.8xlarge</code> EC2 instance with:<br>
‚Ä¢ 32 vCPUs<br>
‚Ä¢ 128 GiB RAM<br>
‚Ä¢ 1 TiB gp3 SSD (with default settings: 3000 IOPS, 125 MiB/s max throughput üêå)<br>
‚Ä¢ Ubuntu Linux 24.04
</p>
<p>On that machine, we first created the Amazon reviews table:</p>
<pre><div><pre><code><span><span>CREATE</span><span><span> </span><span>TABLE</span><span> amazon.amazon_reviews
</span></span></span><span>(
<span></span></span><span><span>    `review_date` </span><span><span>Date</span><span> CODEC(ZSTD(</span><span>1</span><span>)),
</span></span></span><span><span>    `marketplace` LowCardinality(String) CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `customer_id` UInt64 CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `review_id` String CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `product_id` String CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `product_parent` UInt64 CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `product_title` String CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `product_category` LowCardinality(String) CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `star_rating` UInt8 CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `helpful_votes` UInt32 CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `total_votes` UInt32 CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `vine` Bool CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `verified_purchase` Bool CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `review_headline` String CODEC(ZSTD(</span><span><span>1</span><span>)),
</span></span></span><span><span>    `review_body` String CODEC(ZSTD(</span><span><span>1</span><span>))
</span></span></span><span>)
<span></span></span><span><span>ENGINE </span><span><span>=</span><span> MergeTree
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> (review_date, product_category);</span></span></span></code></pre></div></pre>
<p>And then loaded the dataset from Parquet files hosted in our public example datasets S3 bucket:</p>
<pre><div><pre><code><span><span>INSERT</span><span><span> </span><span>INTO</span><span>  amazon.amazon_reviews
</span></span></span><span><span></span><span><span>SELECT</span><span> </span><span>*</span><span> </span><span>FROM</span><span> s3Cluster(</span><span>'default'</span><span>, </span><span>'https://datasets-documentation.s3.eu-west-3.amazonaws.com/amazon_reviews/amazon_reviews_*.snappy.parquet'</span><span>);</span></span></span></code></pre></div></pre>
<p>We check the table‚Äôs size after loading:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span>
</span></span></span><span><span>    formatReadableQuantity(</span><span><span>sum</span><span>(</span><span>rows</span><span>)) </span><span>AS</span><span> </span><span>rows</span><span>,
</span></span></span><span><span>    formatReadableSize(</span><span><span>sum</span><span>(data_uncompressed_bytes)) </span><span>AS</span><span> data_size,
</span></span></span><span><span>    formatReadableSize(</span><span><span>sum</span><span>(data_compressed_bytes)) </span><span>AS</span><span> compressed_size
</span></span></span><span><span></span><span><span>FROM</span><span> system.parts
</span></span></span><span><span></span><span><span>WHERE</span><span> active </span><span>AND</span><span> database </span><span>=</span><span> </span><span>'amazon'</span><span> </span><span>AND</span><span> </span><span>table</span><span> </span><span>=</span><span> </span><span>'amazon_reviews'</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>‚îå‚îÄrows‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄdata_size‚îÄ‚î¨‚îÄcompressed_size‚îÄ‚îê
</span><span></span></span><span>‚îÇ 150.96 million ‚îÇ 70.47 GiB ‚îÇ 30.05 GiB       ‚îÇ
<span></span></span><span>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò<span></span></span></code></pre></div></pre>
<p>After loading, the table contains ~150 million rows and:</p>
<ul>
<li>70 GiB uncompressed data</li>
<li>~30 GiB compressed on disk using ZSTD(1)</li>
</ul>

<p>150 million rows is hardly a challenge for ClickHouse. For example, this query sorts all 150 million values in the <code>helpful_votes</code> column (which isn‚Äôt part of the table‚Äôs sort key) and returns the top 3, in just 70 milliseconds cold (with the OS filesystem cache <a href="https://clickhouse.com/blog/clickhouse-gets-lazier-and-faster-introducing-lazy-materialization#with-cold-os-level-filesystem-cache">cleared</a> beforehand) and a processing throughput of 2.15 billion rows/s:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span> helpful_votes
</span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> helpful_votes </span><span>DESC</span><span>
</span></span></span><span><span>LIMIT </span><span><span>3</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>‚îå‚îÄhelpful_votes‚îÄ‚îê
</span><span></span></span><span>‚îÇ         47524 ‚îÇ
<span></span></span><span>‚îÇ         41393 ‚îÇ
<span></span></span><span>‚îÇ         41278 ‚îÇ
<span></span></span><span>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
<span></span></span><span>
<span></span></span><span>3 rows in set. Elapsed: 0.070 sec. Processed 150.96 million rows, 603.83 MB (2.15 billion rows/s., 8.61 GB/s.)
<span></span></span><span>Peak memory usage: 3.59 MiB.<span></span></span></code></pre></div></pre>
<p>Note that the query doesn‚Äôt benefit from indexing, PREWHERE, or other I/O reduction techniques, since it has no filters. But thanks to columnar storage, ClickHouse only reads the <code>helpful_votes</code> column and skips the rest.</p>
<p>Here‚Äôs another example query that simply selects (with cold filesystem cache) all data from a single <code>review_body</code> column:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span> review_body
</span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews
</span></span></span><span><span>FORMAT </span><span><span>Null</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>Query id: b9566386-047d-427c-a5ec-e90bee027b02
</span><span></span></span><span>
<span></span></span><span>0 rows in set. Elapsed: 176.640 sec. Processed 150.96 million rows, 56.02 GB (854.61 thousand rows/s., 317.13 MB/s.)
<span></span></span><span>Peak memory usage: 733.14 MiB.<span></span></span></code></pre></div></pre>
<p>üò± Almost 3 minutes! Despite reading just a single column.</p>
<p>But the bottleneck wasn‚Äôt ClickHouse, it was the disk‚Äôs throughput. This query scanned a much larger column, 56 GB vs. 600 MB in the previous example. On our test machine, which has a <a href="https://clickhouse.com/blog/clickhouse-gets-lazier-and-faster-introducing-lazy-materialization#test-setup-dataset-and-machine">relatively slow disk</a> and 32 CPU cores, ClickHouse used 32 <a href="https://clickhouse.com/docs/optimize/query-parallelism">parallel streams</a> to read the data. The <a href="https://clickhouse.com/docs/operations/system-tables/query_log">query log</a> confirms that the majority of the 3-minute runtime was spent <a href="https://github.com/ClickHouse/ClickHouse/blob/9d60aa01a83346648eae5dc9572530388271f7b0/src/Common/ProfileEvents.cpp#L101">waiting on the read syscall</a>:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span> 
</span></span></span><span><span>  round(ProfileEvents[</span><span><span>'DiskReadElapsedMicroseconds'</span><span>] </span><span>/</span><span> </span><span>1e6</span><span>) </span><span>AS</span><span> disk_read_seconds,
</span></span></span><span><span>  ProfileEvents[</span><span><span>'ConcurrencyControlSlotsAcquired'</span><span>] </span><span>AS</span><span> parallel_streams,
</span></span></span><span><span>  formatReadableTimeDelta(round(disk_read_seconds </span><span><span>/</span><span> parallel_streams), </span><span>'seconds'</span><span>) </span><span>AS</span><span> time_per_stream
</span></span></span><span><span></span><span><span>FROM</span><span> system.query_log
</span></span></span><span><span></span><span><span>WHERE</span><span> query_id </span><span>=</span><span> </span><span>'b9566386-047d-427c-a5ec-e90bee027b02'</span><span> 
</span></span></span><span><span>  </span><span><span>AND</span><span> type </span><span>=</span><span> </span><span>'QueryFinish'</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>‚îå‚îÄdisk_read_seconds‚îÄ‚î¨‚îÄparallel_streams‚îÄ‚î¨‚îÄtime_per_stream‚îÄ‚îê
</span><span></span></span><span>‚îÇ              5512 ‚îÇ               32 ‚îÇ 172 seconds     ‚îÇ
<span></span></span><span>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò<span></span></span></code></pre></div></pre>
<p>Clearly, brute-force scans aren‚Äôt ideal, especially with cold caches. Let‚Äôs give ClickHouse something to work with.</p>

<p>Despite the airport <a href="https://clickhouse.com/blog/clickhouse-gets-lazier-and-faster-introducing-lazy-materialization">drama</a>, I‚Äôm still set on that beach holiday, and that means loading my eReader with only the best. So I ask ClickHouse to help me find the most helpful 5-star verified reviews for digital ebook purchases since 2010, showing the number of helpful votes, book title, review headline, and the review itself:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span>
</span></span></span><span>    helpful_votes,
<span></span></span><span>    product_title,
<span></span></span><span>    review_headline,
<span></span></span><span>    review_body
<span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews
</span></span></span><span><span></span><span><span>WHERE</span><span> review_date </span><span>&gt;=</span><span> </span><span>'2010-01-01'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> product_category </span><span>=</span><span> </span><span>'Digital_Ebook_Purchase'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> verified_purchase
</span></span></span><span><span></span><span><span>AND</span><span> star_rating </span><span>&gt;</span><span> </span><span>4</span><span>
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> helpful_votes </span><span>DESC</span><span>
</span></span></span><span><span>LIMIT </span><span><span>3</span><span>
</span></span></span><span>FORMAT Vertical;<span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>Row 1:
</span><span></span></span><span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<span></span></span><span>helpful_votes:   6376
<span></span></span><span>product_title:   Wheat Belly: Lose the Wheat, Lose the Weight, and Find Your Path Back to Health
<span></span></span><span>review_headline: Overweight? Diabetic? Got High Blood Pressure, Arthritis? Get this Book!
<span></span></span><span>review_body:     I've been following Dr. Davis' heart scan blog for the past ...
<span></span></span><span>
<span></span></span><span>Row 2:
<span></span></span><span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<span></span></span><span>helpful_votes:   4149
<span></span></span><span>product_title:   The Life-Changing Magic of Tidying Up: The Japanese Art of Decluttering and Organizing
<span></span></span><span>review_headline: Truly life changing
<span></span></span><span>review_body:     I rarely write reviews, but this book truly sparked somethin...
<span></span></span><span>
<span></span></span><span>Row 3:
<span></span></span><span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<span></span></span><span>helpful_votes:   2623
<span></span></span><span>product_title:   The Fast Metabolism Diet: Eat More Food and Lose More Weight
<span></span></span><span>review_headline: Fantastic Results **UPDATED 1/23/2015**
<span></span></span><span>review_body:     I have been on this program for 7 days so far.  I know it ma...<span></span></span></code></pre></div></pre>
<p>The query above selects four columns, including three (<code>product_title</code>, <code>review_headline</code>, <code>review_body</code>) of the largest in the table:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span>
</span></span></span><span><span>    name </span><span><span>as</span><span> </span><span>column</span><span>,
</span></span></span><span><span>    formatReadableSize(</span><span><span>sum</span><span>(data_uncompressed_bytes)) </span><span>AS</span><span> data_size,
</span></span></span><span><span>    formatReadableSize(</span><span><span>sum</span><span>(data_compressed_bytes)) </span><span>AS</span><span> compressed_size
</span></span></span><span><span></span><span><span>FROM</span><span> system.columns
</span></span></span><span><span></span><span><span>WHERE</span><span> database </span><span>=</span><span> </span><span>'amazon'</span><span> </span><span>AND</span><span> </span><span>table</span><span> </span><span>=</span><span> </span><span>'amazon_reviews'</span><span>
</span></span></span><span><span></span><span><span>GROUP</span><span> </span><span>BY</span><span> name
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> </span><span>sum</span><span>(data_uncompressed_bytes) </span><span>DESC</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>‚îå‚îÄcolumn‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄdata_size‚îÄ‚îÄ‚î¨‚îÄcompressed_size‚îÄ‚îê
</span><span></span></span><span>‚îÇ review_body       ‚îÇ 51.13 GiB  ‚îÇ 21.60 GiB       ‚îÇ
<span></span></span><span>‚îÇ product_title     ‚îÇ 8.12 GiB   ‚îÇ 3.53 GiB        ‚îÇ
<span></span></span><span>‚îÇ review_headline   ‚îÇ 3.38 GiB   ‚îÇ 1.58 GiB        ‚îÇ
<span></span></span><span>‚îÇ review_id         ‚îÇ 2.07 GiB   ‚îÇ 1.35 GiB        ‚îÇ
<span></span></span><span>‚îÇ product_id        ‚îÇ 1.55 GiB   ‚îÇ 720.97 MiB      ‚îÇ
<span></span></span><span>‚îÇ customer_id       ‚îÇ 1.12 GiB   ‚îÇ 524.35 MiB      ‚îÇ
<span></span></span><span>‚îÇ product_parent    ‚îÇ 1.12 GiB   ‚îÇ 571.63 MiB      ‚îÇ
<span></span></span><span>‚îÇ helpful_votes     ‚îÇ 575.86 MiB ‚îÇ 72.11 MiB       ‚îÇ
<span></span></span><span>‚îÇ total_votes       ‚îÇ 575.86 MiB ‚îÇ 83.50 MiB       ‚îÇ
<span></span></span><span>‚îÇ review_date       ‚îÇ 287.93 MiB ‚îÇ 239.43 KiB      ‚îÇ
<span></span></span><span>‚îÇ marketplace       ‚îÇ 144.51 MiB ‚îÇ 414.92 KiB      ‚îÇ
<span></span></span><span>‚îÇ product_category  ‚îÇ 144.25 MiB ‚îÇ 838.96 KiB      ‚îÇ
<span></span></span><span>‚îÇ star_rating       ‚îÇ 143.96 MiB ‚îÇ 41.99 MiB       ‚îÇ
<span></span></span><span>‚îÇ verified_purchase ‚îÇ 143.96 MiB ‚îÇ 20.50 MiB       ‚îÇ
<span></span></span><span>‚îÇ vine              ‚îÇ 1.75 MiB   ‚îÇ 844.89 KiB      ‚îÇ
<span></span></span><span>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò<span></span></span></code></pre></div></pre>
<p>The example query touches 60+ GiB of (uncompressed) data. As we showed earlier, even with 32 parallel streams, just reading that from the (relatively slow) disk would take 3+ minutes with a cold cache.</p>
<p>But the query includes filters on multiple columns (<code>review_date</code>, <code>product_category</code>, <code>verified_purchase</code>, and <code>star_rating</code>), plus a <code>LIMIT</code> applied after sorting by <code>helpful_votes</code>. This is the perfect setup for ClickHouse‚Äôs layered I/O optimizations:</p>
<ul>
<li>
<p><strong>Indexing</strong> prunes rows that don‚Äôt match filters on the primary/sorting key (<code>review_date</code>, <code>product_category</code>).</p>
</li>
<li>
<p><strong>PREWHERE</strong> pushes filtering deeper and prunes rows that don‚Äôt match <em>all</em> column filters.</p>
</li>
<li>
<p><strong>Lazy materialization</strong> delays loading the large <code>SELECT</code> columns (<code>product_title</code>, <code>review_headline</code>, <code>review_body</code>) until they‚Äôre actually needed‚Äîafter sorting and applying <code>LIMIT</code>. Ideally, most of that large column data is never read at all.</p>
</li>
</ul>
<p>Each layer cuts down I/O further. Together, they reduce data read, memory use, and query time. Let‚Äôs see how much of a difference that makes, one layer at a time.</p>

<p>In the following sections, we clear the OS-level filesystem (page) cache before each query run using</p>
<p><code>echo 3 | sudo tee /proc/sys/vm/drop_caches &gt;/dev/null</code>.</p>
<p>on the Linux command line. This simulates the worst-case scenario and ensures the results reflect actual disk reads, not cached data.</p>
<!-- -->

<p>Before we bring in the optimizations, let‚Äôs see what happens when ClickHouse runs the query without any shortcuts‚Äîno indexing, no PREWHERE, no lazy materialization.</p>
<p>To do this, we run the example query on a version of the table without a sorting/primary key, meaning it won‚Äôt benefit from any index-based optimizations. The following command creates that baseline table:</p>
<pre><div><pre><code><span><span>CREATE</span><span><span> </span><span>TABLE</span><span> amazon.amazon_reviews_no_pk
</span></span></span><span><span>Engine </span><span><span>=</span><span> MergeTree 
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> ()
</span></span></span><span><span></span><span><span>AS</span><span> </span><span>SELECT</span><span> </span><span>*</span><span> </span><span>FROM</span><span> amazon.amazon_reviews;</span></span></span></code></pre></div></pre>
<p>Now we run the example query, with both PREWHERE and lazy materialization disabled, on the baseline table:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span>
</span></span></span><span>    helpful_votes,
<span></span></span><span>    product_title,
<span></span></span><span>    review_headline,
<span></span></span><span>    review_body
<span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews_no_pk
</span></span></span><span><span></span><span><span>WHERE</span><span> review_date </span><span>&gt;=</span><span> </span><span>'2010-01-01'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> product_category </span><span>=</span><span> </span><span>'Digital_Ebook_Purchase'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> verified_purchase
</span></span></span><span><span></span><span><span>AND</span><span> star_rating </span><span>&gt;</span><span> </span><span>4</span><span>
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> helpful_votes </span><span>DESC</span><span>
</span></span></span><span><span>LIMIT </span><span><span>3</span><span>
</span></span></span><span><span>FORMAT </span><span><span>Null</span><span>
</span></span></span><span>SETTINGS
<span></span></span><span><span>    optimize_move_to_prewhere </span><span><span>=</span><span> </span><span>false</span><span>,
</span></span></span><span><span>    query_plan_optimize_lazy_materialization </span><span><span>=</span><span> </span><span>false</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>3 rows in set. Elapsed: 219.508 sec. Processed 150.96 million rows, 72.13 GB (687.71 thousand rows/s., 328.60 MB/s.)
</span><span></span></span><span>Peak memory usage: 953.25 MiB.<span></span></span></code></pre></div></pre>
<p>The ‚ë† query streamed all 150 million rows‚Äîorganized into <a href="https://clickhouse.com/docs/guides/best-practices/sparse-primary-indexes#data-is-organized-into-granules-for-parallel-data-processing">granules</a> (the smallest processing units in ClickHouse, each covering 8,192 rows by default)‚Äîof ‚ë° the 8 required columns from disk to ‚ë¢ memory, processing 72 GB of data in 220 seconds and peaking at 953 MiB of memory usage:</p>

<blockquote>
<p>ClickHouse processes table data in a <a href="https://clickhouse.com/docs/optimize/query-parallelism">streaming fashion</a>, reading and operating on blocks of granules incrementally instead of loading all data into memory at once. That‚Äôs why, even for the query above which processed 72 GB of data, peak memory usage stayed under 1 GiB.</p>
</blockquote>
<p>With the baseline set, let‚Äôs see how the first layer of optimization improves things.</p>

<p>Obviously, scanning the entire dataset is far from optimal. Let‚Äôs start applying ClickHouse‚Äôs optimizations, beginning with the primary index. We run the example query, still with both PREWHERE and lazy materialization disabled, on the original table, which uses <code>(review_date, product_category)</code> as its compound sorting (primary) key:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span>
</span></span></span><span>    helpful_votes,
<span></span></span><span>    product_title,
<span></span></span><span>    review_headline,
<span></span></span><span>    review_body
<span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews
</span></span></span><span><span></span><span><span>WHERE</span><span> review_date </span><span>&gt;=</span><span> </span><span>'2010-01-01'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> product_category </span><span>=</span><span> </span><span>'Digital_Ebook_Purchase'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> verified_purchase
</span></span></span><span><span></span><span><span>AND</span><span> star_rating </span><span>&gt;</span><span> </span><span>4</span><span>
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> helpful_votes </span><span>DESC</span><span>
</span></span></span><span><span>LIMIT </span><span><span>3</span><span>
</span></span></span><span><span>FORMAT </span><span><span>Null</span><span>
</span></span></span><span>SETTINGS
<span></span></span><span><span>   optimize_move_to_prewhere </span><span><span>=</span><span> </span><span>false</span><span>,
</span></span></span><span><span>   query_plan_optimize_lazy_materialization </span><span><span>=</span><span> </span><span>false</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>0 rows in set. Elapsed: 95.865 sec. Processed 53.01 million rows, 27.67 GB (552.98 thousand rows/s., 288.68 MB/s.)
</span><span></span></span><span>Peak memory usage: 629.00 MiB.<span></span></span></code></pre></div></pre>
<p>Because the query includes ‚ë† filters on the table‚Äôs compound sorting (primary) key, ClickHouse ‚ë° loads and evaluates the <a href="https://clickhouse.com/docs/primary-indexes">sparse primary index</a> to ‚ë¢ select only granules within the primary key columns that might contain matching rows. These potentially relevant granules are then ‚ë£ streamed into memory, along with positionally aligned granules from any other columns needed for the query. The remaining filters are applied after this step:</p>

<p>As a result, only 53 million rows from the eight required columns are streamed from disk to memory, processing 28 GB instead of 72 GB of data, and cutting runtime by more than half: 96 seconds vs. 220 seconds.</p>
<blockquote>
<p>The primary index prunes granules based on filters on the primary key columns.</p>
</blockquote>
<p>However, ClickHouse still loads all other column granules that are positionally aligned with the matching key column granules, even if filters on non-key columns exclude them later. That means unnecessary data is still being read and processed.</p>
<p>To fix that, we now enable PREWHERE.</p>

<p>We run the same query again, this time with <a href="https://clickhouse.com/docs/optimize/prewhere">PREWHERE</a> enabled (but still without lazy materialization). PREWHERE adds an additional layer of efficiency filtering out irrelevant data before reading non-filter columns from disk:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span>
</span></span></span><span>    helpful_votes,
<span></span></span><span>    product_title,
<span></span></span><span>    review_headline,
<span></span></span><span>    review_body
<span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews
</span></span></span><span><span></span><span><span>WHERE</span><span> review_date </span><span>&gt;=</span><span> </span><span>'2010-01-01'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> product_category </span><span>=</span><span> </span><span>'Digital_Ebook_Purchase'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> verified_purchase
</span></span></span><span><span></span><span><span>AND</span><span> star_rating </span><span>&gt;</span><span> </span><span>4</span><span>
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> helpful_votes </span><span>DESC</span><span>
</span></span></span><span><span>LIMIT </span><span><span>3</span><span>
</span></span></span><span><span>FORMAT </span><span><span>Null</span><span>
</span></span></span><span>SETTINGS
<span></span></span><span><span>    optimize_move_to_prewhere </span><span><span>=</span><span> </span><span>true</span><span>,
</span></span></span><span><span>    query_plan_optimize_lazy_materialization </span><span><span>=</span><span> </span><span>false</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>0 rows in set. Elapsed: 61.148 sec. Processed 53.01 million rows, 16.28 GB (866.94 thousand rows/s., 266.24 MB/s.)
</span><span></span></span><span>Peak memory usage: 583.30 MiB.<span></span></span></code></pre></div></pre>
<p>With PREWHERE enabled, the query processed the same 53 million rows but read significantly less column data, 16.28 GB vs. 27.67 GB, and completed 36% faster (61 seconds vs. 96 seconds), while also slightly reducing peak memory usage.</p>
<p>To understand this improvement, let‚Äôs briefly walk through how PREWHERE changes the way ClickHouse processes the query.</p>
<p>Instead of streaming all selected column granules up front, ClickHouse begins PREWHERE processing by ‚ë† loading only the primary key column granules identified by the index analysis to check which ones actually contain matches. In this case, all selected granules do match, so ‚ë° the positionally aligned granules for the next filter column‚Äî<code>verified_purchase</code>‚Äîare selected to be loaded for further filtering:</p>

<p>Next, ClickHouse ‚ë† reads the selected <code>verified_purchase</code> column granules to evaluate the filter <code>verified_purchase</code> (which is a shortcut for <code>verified_purchase == True</code> ).</p>
<p>In this case, three out of four granules contain matching rows, so only ‚ë° their positionally aligned granules from the next filter column‚Äî<code>star_rating</code>‚Äîare selected for further processing:</p>

<p>Finally, ClickHouse reads the three selected granules from the <code>star_rating</code> column to evaluate the last filter <code>star_rating &gt; 4</code>.</p>
<p>Two of the three granules contain matching rows, so just the positionally aligned granules from the remaining columns‚Äî<code>helpful_votes</code>, <code>product_title</code>, <code>review_headline</code>, and <code>review_body</code>‚Äîare selected to be loaded for further processing:</p>

<p>With that, PREWHERE processing is complete.</p>
<blockquote>
<p>Instead of loading all column granules selected by the primary index up front and then applying the remaining filters, PREWHERE pre-filters the selected data early‚Äîhence the name. ClickHouse evaluates filters one column at a time, using a <a href="https://clickhouse.com/docs/optimize/prewhere#prewhere-optimization-is-automatically-applied">cost-based approach</a>‚Äîtypically starting with the cheapest column to read‚Äîand loads data only for rows that pass each step. This progressively narrows the dataset, reducing I/O before the query runs the main operations like sorting, aggregation, <code>LIMIT</code>, and <code>SELECT</code>.</p>
</blockquote>
<p>Note that PREWHERE can also work independently of indexing. If a query has only filters on non-indexed columns, it still helps reduce I/O by skipping non-matching rows early.</p>

<p>After PREWHERE filtering, ClickHouse proceeds to ‚ë† load the selected data, ‚ë° sort it, and ‚ë¢ apply the LIMIT clause:</p>

<p>Each layer we‚Äôve added so far has chipped away at the query time, skipping unnecessary data, reducing I/O, and streamlining the work.</p>
<p>From a full scan that took 220 seconds, we‚Äôre already down to 61 seconds. But we‚Äôre not done yet. One last layer brings the biggest reduction yet.</p>

<p>Let‚Äôs see what happens when lazy materialization joins the stack. We run the query one last time, with all I/O optimizations enabled, including lazy materialization.</p>
<pre><div><pre><code><span><span>SELECT</span><span><span>
</span></span></span><span>    helpful_votes,
<span></span></span><span>    product_title,
<span></span></span><span>    review_headline,
<span></span></span><span>    review_body
<span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews
</span></span></span><span><span></span><span><span>WHERE</span><span> review_date </span><span>&gt;=</span><span> </span><span>'2010-01-01'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> product_category </span><span>=</span><span> </span><span>'Digital_Ebook_Purchase'</span><span>
</span></span></span><span><span></span><span><span>AND</span><span> verified_purchase
</span></span></span><span><span></span><span><span>AND</span><span> star_rating </span><span>&gt;</span><span> </span><span>4</span><span>
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> helpful_votes </span><span>DESC</span><span>
</span></span></span><span><span>LIMIT </span><span><span>3</span><span>
</span></span></span><span><span>FORMAT </span><span><span>Null</span><span>
</span></span></span><span>SETTINGS
<span></span></span><span><span>    optimize_move_to_prewhere </span><span><span>=</span><span> </span><span>true</span><span>,
</span></span></span><span><span>    query_plan_optimize_lazy_materialization </span><span><span>=</span><span> </span><span>true</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>0 rows in set. Elapsed: 0.181 sec. Processed 53.01 million rows, 807.55 MB (292.95 million rows/s., 4.46 GB/s.)
</span><span></span></span><span>Peak memory usage: 3.88 MiB.<span></span></span></code></pre></div></pre>
<p>üòÆ From 61 seconds to 181 milliseconds, a 338√ó speedup.</p>
<p>ClickHouse processed the same 53 million rows but read 20√ó less column data, used 150√ó less memory, and finished before you could blink.</p>
<p>Let‚Äôs look under the hood to see how that happened.</p>
<p>The explanation is simple:</p>
<p>After PREWHERE filtering, ClickHouse doesn‚Äôt load all remaining columns <a href="https://clickhouse.com/blog/clickhouse-gets-lazier-and-faster-introducing-lazy-materialization#steps-after-prewhere-filtering">right away</a>.</p>
<p>Instead, it loads only what‚Äôs needed next. Since the next step is sorting by <code>helpful_votes</code> and applying the LIMIT, ClickHouse ‚ë† loads just the selected (and PREWHERE-filtered) <code>helpful_votes</code> granules, ‚ë° sorts their rows, ‚ë¢ applies the LIMIT, and only then ‚ë£ loads the corresponding rows from the <a href="https://clickhouse.com/blog/clickhouse-gets-lazier-and-faster-introducing-lazy-materialization#a-more-realistic-querywhere-optimizations-matter">large</a> <code>product_title</code>, <code>review_headline</code>, and <code>review_body</code> columns:</p>

<p>And just like that, the final layer clicks into place, bringing execution time down from 220 seconds to just 181 milliseconds. Same query. Same table. Same machine. Same slow disk‚Ä¶just <strong>1,215√ó faster</strong>. All we changed was how and when data is read.</p>
<blockquote>
<p>In this example, lazy materialization delivers the biggest gain because the query selects large text columns, and thanks to lazy materialization, only 3 rows from them are needed in the end. But depending on the dataset and query shape, earlier optimizations like indexing or PREWHERE may yield greater savings. These techniques work together, each contributes to reducing I/O in a different way.</p>
</blockquote>
<p>Note: Lazy materialization is applied automatically for <code>LIMIT N</code> queries, but only up to a <code>N</code> threshold. This is controlled by the <a href="https://clickhouse.com/docs/operations/settings/settings#query_plan_max_limit_for_lazy_materialization">query_plan_max_limit_for_lazy_materialization</a> setting (default: 10). If set to 0, lazy materialization applies to all LIMIT values with no upper bound.</p>

<p>To benefit from indexing and PREWHERE, a query needs filters, on primary key columns for indexing, and on any columns for PREWHERE. As shown above, lazy materialization layers cleanly on top, but unlike the others, it can also speed up queries with no column filters at all.</p>
<p>To demonstrate this, we remove all filters from our example query to find the reviews with the highest number of helpful votes, regardless of date, product, rating, or verification status, returning the top 3 along with their title, headline, and full text.</p>
<p>We first run that query (with <a href="https://clickhouse.com/blog/clickhouse-gets-lazier-and-faster-introducing-lazy-materialization#with-cold-os-level-filesystem-cache">cold filesystem caches</a>) with lazy materialization disabled:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span>
</span></span></span><span>    helpful_votes,
<span></span></span><span>    product_title,
<span></span></span><span>    review_headline,
<span></span></span><span>    review_body
<span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> helpful_votes </span><span>DESC</span><span>
</span></span></span><span><span>LIMIT </span><span><span>3</span><span>
</span></span></span><span>FORMAT Vertical
<span></span></span><span>SETTINGS
<span></span></span><span><span>    query_plan_optimize_lazy_materialization </span><span><span>=</span><span> </span><span>false</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>Row 1:
</span><span></span></span><span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<span></span></span><span>helpful_votes:   47524
<span></span></span><span>product_title:   Kindle: Amazon's Original Wireless Reading Device (1st generation)
<span></span></span><span>review_headline: Why and how the Kindle changes everything
<span></span></span><span>review_body:     This is less a \"pros and cons\" review than a hopefully use...
<span></span></span><span>
<span></span></span><span>Row 2:
<span></span></span><span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<span></span></span><span>helpful_votes:   41393
<span></span></span><span>product_title:   BIC Cristal For Her Ball Pen, 1.0mm, Black, 16ct (MSLP16-Blk)
<span></span></span><span>review_headline: FINALLY!
<span></span></span><span>review_body:     Someone has answered my gentle prayers and FINALLY designed ...
<span></span></span><span>
<span></span></span><span>Row 3:
<span></span></span><span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<span></span></span><span>helpful_votes:   41278
<span></span></span><span>product_title:   The Mountain Kids 100% Cotton Three Wolf Moon T-Shirt
<span></span></span><span>review_headline: Dual Function Design
<span></span></span><span>review_body:     This item has wolves on it which makes it intrinsically swee...
<span></span></span><span>
<span></span></span><span>
<span></span></span><span>0 rows in set. Elapsed: 219.071 sec. Processed 150.96 million rows, 71.38 GB (689.08 thousand rows/s., 325.81 MB/s.)
<span></span></span><span>Peak memory usage: 1.11 GiB.<span></span></span></code></pre></div></pre>
<p>Now we rerun the query (again with a cold filesystem cache), but this time with lazy materialization enabled:</p>
<pre><div><pre><code><span><span>SELECT</span><span><span>
</span></span></span><span>    helpful_votes,
<span></span></span><span>    product_title,
<span></span></span><span>    review_headline,
<span></span></span><span>    review_body
<span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> helpful_votes </span><span>DESC</span><span>
</span></span></span><span><span>LIMIT </span><span><span>3</span><span>
</span></span></span><span>FORMAT Vertical
<span></span></span><span>SETTINGS
<span></span></span><span><span>    query_plan_optimize_lazy_materialization </span><span><span>=</span><span> </span><span>true</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>Row 1:
</span><span></span></span><span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<span></span></span><span>helpful_votes:   47524
<span></span></span><span>product_title:   Kindle: Amazon's Original Wireless Reading Device (1st generation)
<span></span></span><span>review_headline: Why and how the Kindle changes everything
<span></span></span><span>review_body:     This is less a \"pros and cons\" review than a hopefully use...
<span></span></span><span>
<span></span></span><span>Row 2:
<span></span></span><span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<span></span></span><span>helpful_votes:   41393
<span></span></span><span>product_title:   BIC Cristal For Her Ball Pen, 1.0mm, Black, 16ct (MSLP16-Blk)
<span></span></span><span>review_headline: FINALLY!
<span></span></span><span>review_body:     Someone has answered my gentle prayers and FINALLY designed ...
<span></span></span><span>
<span></span></span><span>Row 3:
<span></span></span><span>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<span></span></span><span>helpful_votes:   41278
<span></span></span><span>product_title:   The Mountain Kids 100% Cotton Three Wolf Moon T-Shirt
<span></span></span><span>review_headline: Dual Function Design
<span></span></span><span>review_body:     This item has wolves on it which makes it intrinsically swee...
<span></span></span><span>
<span></span></span><span>
<span></span></span><span>0 rows in set. Elapsed: 0.139 sec. Processed 150.96 million rows, 1.81 GB (1.09 billion rows/s., 13.06 GB/s.)
<span></span></span><span>Peak memory usage: 3.80 MiB.<span></span></span></code></pre></div></pre>
<p>Boom: a <strong>1,576√ó speedup</strong>‚Äîfrom 219 seconds to just 139 milliseconds‚Äîwith 40√ó less data read and 300√ó lower memory usage.</p>
<p>This example highlights what makes lazy materialization unique among ClickHouse‚Äôs I/O optimizations.</p>
<blockquote>
<p>Lazy materialization doesn‚Äôt need column filters to deliver speedups. While indexing and PREWHERE rely on query predicates to skip data, lazy materialization improves performance purely by deferring work, loading only what‚Äôs needed, when it‚Äôs needed.</p>
</blockquote>

<p>We can observe the lazy materialization for the previous query by inspecting the query‚Äôs logical execution plan using the <a href="https://clickhouse.com/docs/sql-reference/statements/explain#explain-plan">EXPLAIN</a> clause:</p>
<pre><div><pre><code><span><span>EXPLAIN actions </span><span><span>=</span><span> </span><span>1</span><span>
</span></span></span><span><span></span><span><span>SELECT</span><span>
</span></span></span><span>    helpful_votes,
<span></span></span><span>    product_title,
<span></span></span><span>    review_headline,
<span></span></span><span>    review_body
<span></span></span><span><span></span><span><span>FROM</span><span> amazon.amazon_reviews
</span></span></span><span><span></span><span><span>ORDER</span><span> </span><span>BY</span><span> helpful_votes </span><span>DESC</span><span>
</span></span></span><span><span>LIMIT </span><span><span>3</span><span>
</span></span></span><span>SETTINGS
<span></span></span><span><span>    query_plan_optimize_lazy_materialization </span><span><span>=</span><span> </span><span>true</span><span>;</span></span></span></code></pre></div></pre>
<pre><div><pre><code><span><span>...
</span><span></span></span><span>Lazily read columns: review_headline, review_body, product_title 
<span></span></span><span>  Limit                    
<span></span></span><span>    Sorting                             
<span></span></span><span>      ReadFromMergeTree<span></span></span></code></pre></div></pre>
<p>We can read the operator plan from bottom to top and observe that ClickHouse defers reading the three large String columns until after sorting and limiting.</p>

<p>This journey began with a full-table scan: 220 seconds, 72 GB read, and 1 GiB memory used. Through ClickHouse‚Äôs layered I/O optimizations, we chipped away at runtime, one technique at a time:</p>
<ul>
<li>
<p>‚ë† The <strong>primary index</strong> pruned granules that didn‚Äôt match filters on indexed columns (<code>review_date</code>, <code>product_category</code>).</p>
</li>
<li>
<p>‚ë°  <strong>PREWHERE</strong> filtered out granules early that passed the index but failed filters on non-indexed columns (<code>verified_purchase</code>, <code>star_rating</code>), reducing unnecessary reads.</p>
</li>
<li>
<p>‚ë¢  <strong>Lazy materialization</strong> deferred reading the large <code>SELECT</code> columns (<code>product_title</code>, <code>review_headline</code>, <code>review_body</code>) until after sorting by <code>helpful_votes</code> and applying <code>LIMIT</code>.</p>
</li>
</ul>

<p>Each layer helped, but for our dataset and query shape lazy materialization changed the game.</p>
<p>The result?</p>
<ul>
<li>From 220s ‚Üí 0.18s = <strong>over 1,200√ó speedup</strong> on the filtered query</li>
<li>From 219s ‚Üí 0.139s = <strong>over 1,500√ó speedup</strong> on a full-table Top N query</li>
</ul>
<p><strong>Same table. Same machine. Same SQL code.</strong> The only thing we changed? How and <em>when</em> ClickHouse reads the data.</p>
<p>Lazy materialization doesn‚Äôt just make ClickHouse faster, it completes the I/O optimization stack.
And the laziest part? It (and PREWHERE) are on by default. You get the speed without lifting a finger.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Algebraic Semantics for Machine Knitting (151 pts)]]></title>
            <link>https://uwplse.org/2025/03/31/Algebraic-Knitting.html</link>
            <guid>43763614</guid>
            <pubDate>Tue, 22 Apr 2025 15:55:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://uwplse.org/2025/03/31/Algebraic-Knitting.html">https://uwplse.org/2025/03/31/Algebraic-Knitting.html</a>, See on <a href="https://news.ycombinator.com/item?id=43763614">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>As programming languages researchers, we‚Äôre entitled to a certain level of mathematical
rigor behind the languages we write and analyze. Programming languages have <em>semantics</em>, which are
definitions of what statements in the language mean. We can use those semantics to do all
sorts of useful things, like error checking, compiling for efficiency, code transformation,
and so on.</p>

<p>This blog post is about a programming domain that doesn‚Äôt yet enjoy the same level of rigor
in its semantics: machine knitting. People write programs to control massive arrays of needles
that manipulate yarn into useful 3D objects. In this blog post, I‚Äôll run through the process
of finding ‚Äúthe right‚Äù semantics for machine knitting, touching on why we want semantics, connections
to traditional programming languages, and what we might use these semantics for in the future.
In our search, there are a surprising number of guest appearances by fields of study outside of programming languages:
algebraic topology, group theory, knot theory, category theory, and even quantum computing!</p>

<p>I‚Äôll motivate semantics with a toy problem: can two given statements commute with each other?
Here‚Äôs an example where they can:</p>

<p>By ‚Äúcommute‚Äù, I mean that if I swapped the order of the lines, the program would do the same
thing. The commuting problem is important: a compiler might move around the order of instructions
to optimize memory usage by batching related instructions together, an analyzer might want
to see if two programs are equivalent, and we might also want to know whether we can run two instructions
in parallel. In the above example, we know that the statements commute because of the implied <em>semantics</em>
of the statements ‚Äì they don‚Äôt have anything in common, so they shouldn‚Äôt affect each other!</p>

<p>Here are some more examples. These statements don‚Äôt commute because there‚Äôs a data dependency:</p>

<p>If we swapped those two statements, the statement assigning <code>x</code>‚Äôs value would use a potentially different
value for <code>y</code>.</p>

<p>Non-commuting statements might happen for reasons other than direct data dependencies. Imagine
we‚Äôre in C ‚Äì do these function calls commute?</p>
<div><pre><code><span>x</span> <span>=</span> <span>f</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>);</span>
<span>y</span> <span>=</span> <span>f</span><span>(</span><span>c</span><span>,</span> <span>d</span><span>);</span>
</code></pre></div>
<p>We can‚Äôt be sure that they do ‚Äì perhaps the <code>f</code> function mutates some counter variable
every time it‚Äôs called.</p>

<p>Apart from explicit mutable state, there‚Äôs one more C-like thing that commonly prevents commuting:</p>
<div><pre><code><span>*</span><span>x</span> <span>=</span> <span>*</span><span>x</span> <span>+</span> <span>3</span><span>;</span>
<span>*</span><span>y</span> <span>=</span> <span>*</span><span>y</span> <span>*</span> <span>2</span><span>;</span>
</code></pre></div>
<p>If the <code>x</code> and <code>y</code> pointers are the same, these statements don‚Äôt commute.</p>

<p>It‚Äôs notable that in a <em>pure</em> language, there‚Äôs no hidden mutable state or pointer
aliasing. Haskell is a popular language that‚Äôs very close to being pure ‚Äì since
it supports IO operations like printing to the console and reading/writing files, it‚Äôs
not pure. In Haskell, these functions <em>do</em> commute, as long as there‚Äôs no IO monad malarkey:</p>


<p>The reason that Haskell‚Äôs commuting result is different than C is that its semantics are different ‚Äì any time we want to
prove a property of a language‚Äôs behavior, we‚Äôll have to turn to that language‚Äôs semantics. We know that proving properties
of machine knitting programs could be a powerful tool: <a href="https://doi.org/10.1145/3654777.3676405">a 2024 paper</a> showed massive
speedups using an optimizing compiler, using only a few program transformations that are <em>intuitively</em> correct. To scale that
result and prove the compiler‚Äôs accuracy, we‚Äôll need to develop semantics for machine knitting.</p>

<h2 id="machine-knitting-background">Machine knitting background</h2>

<p>This introduction is only for the details of machine knitting that are relevant
to this blog post. Unfortunately, the mechanisms behind a machine that automatically
creates useful objects from spools of yarn are pretty complicated! If you‚Äôd like to read
more about machine knitting, <a href="https://doi.org/10.1145/3592449">this paper</a> has a good
introduction.</p>

<p>Knitting machines have an array of hundreds of needles, called a bed. This is analogous
to the memory of a traditional computer ‚Äì registers hold values, and needles hold loops
of yarn. There are also <em>carrier strands</em> that move throughout the machine, winding through,
around, and past the loops of needles to create <em>stitches</em>, which I‚Äôll later compare to basic operations
in traditional programming languages. Here‚Äôs how a basic stitch is formed in knitting:</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/stitch_pre.svg" alt="A cyan carrier strand to the left of a loop">
  <img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/stitch_no_box.svg" alt="The carrier strand has been pulled through the loop, creating a new cyan loop">
  <img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/stitch_post.svg" alt="A box has been drawn around part of the previous image; the stitch takes a cyan carrier strand and gold loop
  in and returns a cyan loop and a cyan carrier strand">
</p>

<p>A carrier strand (in cyan) is pulled through a loop (in gold) to create a new loop.
Note how the bottom gold loop is held in place as long as the top cyan loop and carrier strand
are held up. After the stitch, the knitting machine drops the bottom loop, but the bottom
loop stays connected and stable. This is like a value falling out of scope, but since some in-scope
value points to it, it‚Äôs not garbage-collected (gravity is the garbage collector of machine knitting!).</p>

<p>There are many variants of stitches, but they all follow the same
input-output pattern: loops and carrier strands in, loops and carrier strands 
out. In that way, they‚Äôre kind of like basic operations we‚Äôre used to in computer science,
like addition or bitwise AND: values in, values out. The third image above draws a box around the
stitch to show its inputs and outputs: carrier strand and loop in, loop and carrier strand out.</p>

<p>There‚Äôs one more technicality in machine knitting: in order to do a stitch
involving some values, those values must be all adjacent to each other.
In the example below, we can‚Äôt immediately knit the cyan carrier on the far left with
the gold loop on the far right ‚Äì instead, 
we have to move
the values next to each other before creating a stitch.</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/move_pre.svg" alt="A cyan carrier strand, red loop, and gold loop">
  <img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/move_post.svg" alt="The cyan carrier strand crosses over the red loop, and makes a stitch with the gold loop">
</p>

<p>This is also true for traditional computing ‚Äì to compute the
boolean AND of two bits, we need to connect those two bits to an AND gate,
getting them right next to each other. Computer architects use complicated
routing mechanisms like multiplexers to do this; when we code in traditional
programming languages, we don‚Äôt have to worry about those constraints
because the computer architects have generously handled it for us.</p>

<p>The languages used for machine knitting don‚Äôt include many of the traditional
programming language features that make code hard to analyze: no <code>if</code>
statements (branching) or <code>for</code> loops, and no functions. Machine
knitting code is just a series of operations that perform stitches and
move carrier strands and loops around. This should make analyzing machine knitting
easier: there‚Äôs far less complexity than traditional programming languages.
In fact, for our specific question of whether two operations commute, the
problem seems almost trivial: similar to pure functional programming
languages, there‚Äôs no global state or aliasing in
machine knitting. However, there‚Äôs something tricky hiding in
machine knitting that isn‚Äôt a worry in traditional computing contexts:
since knitting is done in 3 dimensions, when strands cross, one goes over and
the other goes under. This can cause operations to snag on each other, even if
no strand directly connects them. I‚Äôll illustrate this with some diagrams.</p>

<h2 id="diagrams">Diagrams</h2>

<p>Let‚Äôs start by carefully analyzing something core to traditional computing:
combinatorial boolean circuits. Here‚Äôs a simple example <code>myfunc</code> that maps
3 bits to 3 bits.</p>
<div><pre><code><span>fn</span> <span>myfunc</span><span>(</span><span>x1</span><span>,</span> <span>x2</span><span>,</span> <span>x3</span><span>)</span> <span>{</span>
    <span>y1</span><span>,</span> <span>y2</span> <span>=</span> <span>dup</span><span>(</span><span>x2</span><span>);</span> <span>// split the wire in two</span>
    <span>y3</span> <span>=</span> <span>and</span><span>(</span><span>x3</span><span>,</span> <span>x1</span><span>);</span>

    <span>return</span> <span>y1</span><span>,</span> <span>y2</span><span>,</span> <span>y3</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>It‚Äôs usually easier to reason about circuits when they‚Äôre drawn (forgive my very strange choices when drawing
the diagram; all will be clear once we get to knitting):</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/diagram_circuit_pre.svg" alt="Circuit diagram for the above code">
</p>

<p>I pose the same question: can the
<code>dup</code> and <code>and</code> operations commute? Here, the answer is a definite yes:
global state and aliasing aren‚Äôt present, and there‚Äôs no data dependency.
Here is the same function with the operations commuted:</p>

<div><pre><code><span>fn</span> <span>myfunc</span><span>(</span><span>x1</span><span>,</span> <span>x2</span><span>,</span> <span>x3</span><span>)</span> <span>{</span>
    <span>y3</span> <span>=</span> <span>and</span><span>(</span><span>x3</span><span>,</span> <span>x1</span><span>);</span>
    <span>y1</span><span>,</span> <span>y2</span> <span>=</span> <span>dup</span><span>(</span><span>x2</span><span>);</span>

    <span>return</span> <span>y1</span><span>,</span> <span>y2</span><span>,</span> <span>y3</span><span>;</span>
<span>}</span>
</code></pre></div>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/diagram_circuit_post.svg" alt="Circuit diagram for the above code">
</p>

<p>Deciding whether two operations commute in a combinatorial circuit is easy
‚Äì they can commute if and only if there‚Äôs no directed path connecting them,
just like how two functions can commute in Haskell as long as there‚Äôs no data
dependency between them and no IO trickery.</p>

<h3 id="knitting-diagrams">Knitting diagrams</h3>

<p>Now, let‚Äôs try something similar for knitting. For simplicity, we‚Äôll work in a
made-up machine knitting language that hides some of the technicalities
that aren‚Äôt important for this post. Our knitting function takes three strands as input,
does two stitches, and returns three new strands. I‚Äôve taken the liberty to
simplify the diagrams by not drawing
the ‚Äúinternals‚Äù of the stitches (now they‚Äôre just boxes)
and I‚Äôm drawing both loops and carrier strands as single strands.</p>
<div><pre><code><span>fn</span> <span>myknit</span><span>(</span><span>s1</span><span>,</span> <span>s2</span><span>,</span> <span>s3</span><span>)</span> <span>{</span>
    <span>t1</span><span>,</span> <span>t2</span> <span>=</span> <span>stitch1</span><span>(</span><span>s2</span><span>);</span>
    <span>cross</span> <span>t1</span> <span>over</span> <span>s1</span><span>;</span>
    <span>cross</span> <span>s3</span> <span>over</span> <span>t2</span><span>;</span>
    <span>cross</span> <span>s1</span> <span>over</span> <span>s3</span><span>;</span>
    <span>t3</span> <span>=</span> <span>stitch2</span><span>(</span><span>s3</span><span>,</span> <span>s1</span><span>);</span>
    <span>cross</span> <span>t2</span> <span>over</span> <span>t3</span><span>;</span>

    <span>return</span> <span>t1</span><span>,</span> <span>t2</span><span>,</span> <span>t3</span><span>;</span>
<span>}</span>
</code></pre></div>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/diagram_knit.svg" alt="Diagram for the above knitting code. The stitch1 and stitch2 boxes aren't directly connected by a
  strand, but due to the way the strands have crossed, there is no way to move stitch2 below stitch1">
</p>

<p>Well, the diagram looks almost the same as the circuit diagram, but now every time two
strands cross, we have to specify which one goes on top of the other. This is extra noticeable
in the code: all crossings between strands are listed and annotated. We‚Äôre careful to record and
display these over/under crossings in machine knitting because they‚Äôre a feature of working in
a physical medium: the way strands cross affects how a knitted object looks and feels, and it can
drastically change the shape of the final object!</p>

<p>These over/under crossings are what make the commuting problem difficult for machine knitting.
In the above example, there‚Äôs no data dependency (i.e., no connecting strand) between the two
operations. However, because of how their strands are crossing, the operations ‚Äúsnag‚Äù on each other
so they can‚Äôt commute. It‚Äôs perhaps easy for humans to look at the above diagram and decide whether
two operations snag on each other, but how can we author an accurate algorithm to
apply automated analysis to these affairs? We need some way of formalizing these ideas so a computer
can reason about them‚Ä¶ ah yes, those semantics we mentioned earlier.</p>

<p>Now is a good time to mention that there actually ARE semantics for machine knitting:
<a href="https://doi.org/10.1145/3592449">a 2023 paper</a> set up rigorous mathematical semantics for all of machine
knitting. However, these semantics are defined in <em>tangles</em> from knot theory. This is a natural way to
define knitted objects ‚Äì they really are a tangle of strands in 3D space! However, the equivalences of
knot theory are defined by continuous deformations ‚Äì two knots are equivalent whenever we can stretch, move,
expand, and contract one knot into the other without tearing strands. Since the goal is to write computer
programs that analyze machine knitting, the proposed semantics aren‚Äôt directly useful to computers. Computers don‚Äôt have
any notion of what a ‚Äúcontinuous deformation‚Äù is, and they‚Äôre particularly bad at doing anything involving
continuous quantities. The semantics are useful for humans to do basic hand-written proofs and are a great
starting point, but we‚Äôd like to extend them so we can use computers to perform automatic analysis.</p>

<h3 id="aside-quantum-computing">Aside: quantum computing</h3>

<p>It should be noted that if we actually constructed the combinatorial circuit from earlier by
plugging wires into tangible logic gates, we would also have to make some decision for each
crossing as to which wire goes on top. However, this is simply not a concern for computer scientists:
it doesn‚Äôt matter which wire goes on top, because electrons don‚Äôt care whether they go above or below
other electrons ‚Äì it doesn‚Äôt change the resulting computation.</p>

<p>Models in quantum physics allow for particles that <em>do</em> remember how they pass over
and under each other. This could have big effects in quantum computing, where a so-called topological
quantum computer using these particles could be far more resistant to decoherence than
conventional quantum computing. A team at Microsoft has
<a href="https://doi.org/10.1038/s41586-024-08445-2">recently published some experimental results in topological quantum computing</a>
using a setup to braid quasiparticles together in 2+1 dimensions
of space and time respectively. The methods, setup, and goals are certainly different than machine
knitting, but it‚Äôs quite satisfying to see the two seemingly unrelated topics of machine knitting and
quantum computing bound by similar mathematical ideas.</p>

<h2 id="algebraicizing-our-topology">Algebraicizing our topology</h2>

<p>As I hinted earlier, we‚Äôd like to formalize the previous diagrams so we can study their properties, using
something more computer-friendly than knot theory. Really, this is an exercise in algebraic topology ‚Äì
representing a topology (like our deformations of 3D space) with algebra, which is a lot easier to work
with. The <em>braid group</em> is a great starter example of how mathematicians represent a topological object
with algebra.</p>

<h3 id="the-braid-group">The braid group</h3>

<p>For folks familiar with group theory, the braid group on \(n\) strands is</p><p>

\[B_n = \langle \sigma_1, \ldots, \sigma_{n-1} | \sigma_i ; \sigma_{i+1} ; \sigma_i = \sigma_{i+1} ; \sigma_i ; \sigma_{i+1}, \sigma_i ; \sigma_j = \sigma_j ; \sigma_i \rangle\]

</p><p>for \(|i - j| \geq 2,\) and it represents the equivalence classes of \(n\) strands under ambient isotopy.
For the folks confused by this deluge of notation, read on!</p>

<p>A group is a set of elements \(G = \{x_1, x_2, \ldots \}\) with</p>

<ol>
  <li>Some way to <em>combine</em> or <em>compose</em> elements together, which I‚Äôll represent
using a semicolon. For any \(x, y \in G,\) we have \(x ; y \in G.\)</li>
  <li>Some identity element that represents ‚Äúnothing‚Äù. We‚Äôll call that element
\(\text{id}\in G,\) and it has the property \(\text{id} ; x = x = x ; \text{id}.\)</li>
  <li>Some way to <em>invert</em> elements: for any \(x \in G,\) there‚Äôs some \(x^{-1} \in G\)
where \(x;x^{-1} = \text{id} = x^{-1} ; x.\)</li>
</ol>

<p>One group we‚Äôre all familiar with is the integers under addition: the composition of integers is
addition, the identity is \(0,\) and inverting is negation.</p>

<p>For any natural number \(n\) (let‚Äôs say \(n=5\)), the <em>braid group on \(n\) strands</em> is one of
these groups. There are infinite elements in that group, and every element is 5 strands,
oriented bottom-to-top, passing over/under each other. It‚Äôs good to think of braids as
nailed or glued down at either end, and two braids are <em>equivalent</em> whenever one can be transformed
into the other by shifting around strands, keeping the nailed-down ends fixed.
Here are two examples of braids on 5 strands; I‚Äôll call the left one \(x\) and the right one \(y\):</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/inter-5.svg" alt="Braid x = sigma_1^{-1} ; sigma_2 ; sigma_1 ; sigma_3^{-1} in B_5">
  <img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/inter-5-2.svg" alt="Braid y = sigma_2^{-1} ; sigma_1 ; sigma_3^{-1} ; sigma_4 in B_5">
</p>

<p>Next, we‚Äôll define what composition, the identity, and inverses are:</p>

<p>Composition is vertical concatenation, read bottom to top. So \(x ; y\) is \(x\) pasted
below \(y,\) with the strands connected in order:</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/inter-5-concat.svg" alt="Braid x = sigma_1^{-1} ; sigma_2 ; sigma_1 ; sigma_3^{-1} ; sigma_2^{-1} ; sigma_1 ; sigma_3^{-1} ; sigma_4 in B_5">
</p>

<p>The identity in the braid group is just \(n\) strands going straight:</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/ident-5.svg" alt="5 vertical strands, none of them crossing">
</p>

<p>With the definition of composition being vertical concatenation, hopefully we can agree that
pasting on the identity at either end doesn‚Äôt really change anything, so that braid is indeed the identity.
Finally, inverses are mirror images about the horizontal line through the middle of the braid ‚Äì below is \(x\) on the left and
\(x^{-1}\) on the right:</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/inter-5.svg" alt="Braid x = sigma_1^{-1} ; sigma_2 ; sigma_1 ; sigma_3^{-1} in B_5">
  <img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/inter-5-inv.svg" alt="Braid x^{-1} = sigma_3 ; sigma_1^{-1} ; sigma_2^{-1} ; sigma_1 in B_5">
</p>

<p>When we compose \(x ; x^{-1},\) we get a braid that untangles to be the identity:</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/inter-5-inv-concat.svg" alt="Braid x = sigma_1^{-1} ; sigma_2 ; sigma_1 ; sigma_3^{-1} ; sigma_3 ; sigma_1^{-1} ; sigma_2^{-1} ; sigma_1 in B_5">
</p>

<p>This is all well and good, but we need some way to write braids down so computers can use them.
We‚Äôll do this by listing their crossings in order, from bottom to top. We‚Äôll use \(\sigma_i\) to
refer to the \(i\)th strand from the left crossing over the \((i+1)\)th strand, and \(\sigma_i^{-1}\)
for under. Then we can write the braid \(x\) as \(x = \sigma_1^{-1} ; \sigma_2 ; \sigma_1 ; \sigma_3^{-1}.\)</p>

<p>There‚Äôs one more complication: there‚Äôs more than one way to write down braids. For example, we could
write \(x\) as \(x = \sigma_1^{-1} ; \sigma_2 ; \sigma_3^{-1} ; \sigma_1\) instead ‚Äì here‚Äôs the original \(x\)
diagram on the left and the new one on the right:</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/inter-5.svg" alt="Braid x = sigma_1^{-1} ; sigma_2 ; sigma_1 ; sigma_3^{-1} in B_5">
  <img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/inter-5-syn.svg" alt="Braid x = sigma_1^{-1} ; sigma_2 ; sigma_3^{-1} ; sigma_1 in B_5">
</p>

<p>This diagram of \(x\) and the original are equivalent ‚Äì by shifting the crossings up/down, we transform
one into the other. So the braid group has extra relations to account for this:
\(\sigma_i ; \sigma_{i+1} ; \sigma_i = \sigma_{i+1} ; \sigma_i ; \sigma_{i+1}\) and \(\sigma_i ; \sigma_j = \sigma_j ; \sigma_i.\)
Here are those relations drawn out, with the left and right sides being equal in each row:</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/yb-1.svg" alt="A red strand passes over a cyan and green strand, then the cyan passes over the green">
  <img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/yb-2.svg" alt="Cyan passes over green, then red passes over green and cyan">
</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/comm-1.svg" alt="Red over cyan, then green over purple">
  <img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/comm-2.svg" alt="Green over purple, then red over cyan">
</p>

<p>Physics note: the first equation is called the <a href="https://en.wikipedia.org/wiki/Yang%E2%80%93Baxter_equation">Yang-Baxter equation</a>, and
it appears in many more places than just the braid group!</p>

<p>It should be noted that the relation \(\sigma_i ; \sigma_i^{-1} = \text{id}\) is implicit in all groups:</p>

<p><img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/sc-1.svg" alt="A red strand passes over a cyan strand, then over the cyan strand from the other side">
  <img src="https://uwplse.org/blog/images/2025-03-31-Algebraic-Knitting/braid/sc-2.svg" alt="The red and cyan strands don't cross">
</p>

<p>Now, we should all be on the same page for the braid group: the notation</p><p>

\[B_n = \langle \sigma_1, \ldots, \sigma_{n-1} | \sigma_i ; \sigma_{i+1} ; \sigma_i = \sigma_{i+1} ; \sigma_i ; \sigma_{i+1}, \sigma_i ; \sigma_j = \sigma_j ; \sigma_i \rangle\]

</p><p>for \(|i - j| \geq 2\)
tells us how to write braids down (with \(\sigma_1, \ldots, \sigma_{n-1}\)) and which words mean the same thing.</p>

<p>The braid group is well-studied and comes with some powerful algorithms. The presentation is canonicalizable in polynomial time,
meaning there are algorithms that we can run to efficiently tell whether two braids written down using \(\sigma_i\) are
equivalent. This is a great sign for our goal of computable semantics for machine knitting ‚Äì mathematicians have taken a topological object
with a lot of the structure we want in machine knitting, boiled it down to something computer-friendly, and even authored
some useful algorithms! However, the braid group can only represent the pieces of machine knitting programs without stitches.
Stitches operate like functions on strands, with input and output strands. The count of inputs can be different
than the count of outputs, changing the count of strands as we perform the stitch. The braid group is limited to some fixed \(n\) strands, so it can‚Äôt represent
stitches. To get the complete picture of machine knitting, we‚Äôll need to generalize our mathematical assumptions to include the boxes
that represent stitches.</p>

<h3 id="monoidal-categories-and-their-diagrams">Monoidal categories and their diagrams</h3>

<p>In programming languages research, category theory is best known for research in type theory.
I‚Äôve spent all my math allowance for this blog post explaining the braid group so I won‚Äôt get into the nitty-gritty
of what categories are ‚Äì in short, it‚Äôs an algebraic object, like a group, but more general: composition
doesn‚Äôt always have to be defined, and inverses don‚Äôt always have to exist.</p>

<p>Of particular note are the ideas of <a href="https://ncatlab.org/nlab/show/internal+logic">internal logics</a> and internal languages
of categories: correspondences between a category, some logic, and some theoretical programming language model. The
<a href="https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence">Curry-Howard correspondence</a> describes the connection
between logic and programming languages, and these ideas add category theory to the party.</p>

<p>One such correspondence lies between <em>linear logic</em>, where values can only be used and must be used once, and
<em>symmetric monoidal categories</em>. All categories have composition, which I‚Äôm interpreting as vertical concatenation like in the braid
group; monoidal categories additionally have horizontal concatenation (like multiple values in scope, running two circuits in sequence,
or an array of needles holding loops). Symmetric monoidal categories
can be drawn as boxes connected by strands where the over/under-ness of
strand crossings isn‚Äôt recorded or drawn: exactly the diagrams we draw for combinatorial circuits! The symmetric
monoidal category gives notation and axioms for us to rigorously study those circuits, just like the braid group
gives notation and axioms for studying braids. <em>Symmetric</em> monoidal category is a great name because it‚Äôs closely
related to the symmetric group.</p>

<p>Following the same idea, <em>braided monoidal categories</em> generalize symmetric monoidal categories by recording
over/under crossings, and we draw our diagrams as such ‚Äì just like our diagram for machine knitting!
Back in 1991 when braided monoidal categories were still young,
<a href="https://doi.org/10.1016/0001-8708(91)90003-P">Joyal and Street</a> showed that the axioms of braided monoidal categories
correspond with the topology of the diagrams we use for them. Since our diagrams really do represent physical topological
objects, this means that braided monoidal categories are perfect for machine knitting!</p>

<h2 id="actually-using-these-semantics">Actually using these semantics</h2>
<p>Now that we‚Äôve identified an algebraic structure for machine knitting, we‚Äôd like to use that formalism to perform useful
analysis of machine knitting programs. One immediate goal is program equivalence: given two machine knitting programs, will
they produce the same object up to topological equivalence? We can reduce those programs to their braided monoidal category
representations and work with those. This is closely related to the braid group‚Äôs canonicalization I mentioned earlier ‚Äì can we
extend that to the braided monoidal category? I‚Äôve developed an algorithm that does just that in polynomial time, but it‚Äôs
too complicated to fit in a blog post. To borrow some language from Fermat, I‚Äôve
<a href="https://en.wikipedia.org/wiki/Fermat's_Last_Theorem#Fermat's_conjecture">discovered a truly marvelous algorithm and proof of correctness, which this blog post‚Äôs margin is too narrow to contain</a>.
The algorithm works by using some new ideas to canonicalize the positions and order of stitches, and then uses the braid group canonicalization to canonicalize
the crossings between stitches.</p>

<p>We could use the canonicalization algorithm to compile and optimize machine knitting programs. Normal forms are important to compilers because they can greatly
simplify the language to be compiled ‚Äì a canonical form builds on that by additionally providing a uniqueness guarantee. The axioms of braided monoidal categories
lay out exactly all the program transformations we should consider. Finally, I also have an interest in developing a user-facing programming language for machine knitting
that‚Äôs closer to the abstraction provided by category theory. The current machine knitting languages are closely tied to controlling knitting machines, so they require
the user to specify which needles on the machine hold strands (like how assembly requires users to specify which registers use values). On top of usability, a new programming
language might also come with features for performance, fabrication reliability, or modularity of programs.</p>

<p>Big thanks to my advisors at UW, Gilbert Bernstein and Adriana Schulz, for being flexible as a first-year PhD student learns category
theory and topology through the lens of machine knitting. This work is in part a collaboration with folks currently and previously at CMU,
including <a href="https://jlin98.github.io/">Jenny Lin</a>, <a href="https://t0mpr1c3.github.io/">Tom Price</a>, <a href="https://www.cs.cmu.edu/~jmccann/">Jim McCann</a>,
and <a href="https://www.cmu.edu/dietrich/philosophy/people/phd/hannah-fechtner.html">Hannah Fechtner</a>.</p>

<h2 id="further-reading">Further reading</h2>

<ol>
  <li><a href="https://doi.org/10.1145/3654777.3676405">KODA, the optimizing knitting compiler</a></li>
  <li><a href="https://doi.org/10.1145/3592449">Topological machine knitting semantics</a></li>
  <li><a href="https://doi.org/10.1038/s41586-024-08445-2">Microsoft‚Äôs experimental progress in topological quantum computing</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Braid_group">Wikipedia article for the braid group</a></li>
  <li><a href="https://ncatlab.org/nlab/show/internal+logic">nLab‚Äôs page on internal logics</a></li>
  <li><a href="https://doi.org/10.1016/0001-8708(91)90003-P">Joyal and Street‚Äôs paper connecting category theory diagrams and topology</a></li>
</ol>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Supabase raises $200M Series D at $2B valuation (248 pts)]]></title>
            <link>https://finance.yahoo.com/news/exclusive-supabase-raises-200-million-112154867.html</link>
            <guid>43763225</guid>
            <pubDate>Tue, 22 Apr 2025 15:17:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://finance.yahoo.com/news/exclusive-supabase-raises-200-million-112154867.html">https://finance.yahoo.com/news/exclusive-supabase-raises-200-million-112154867.html</a>, See on <a href="https://news.ycombinator.com/item?id=43763225">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>  <p><!-- HTML_TAG_START -->Paul Copplestone didn‚Äôt think things like this actually happened.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Then one day Accel‚Äôs Gonzalo Mocorrea asked for his New Zealand address‚Äîmore than 7,000 miles from Silicon Valley.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Mocorrea ‚Äúliterally showed up on my doorstep in WƒÅnaka, which is really not easy to get to,‚Äù said Copplestone, the CEO and cofounder of open source application development platform Supabase. ‚ÄúFor the next two days, he‚Äôd pop in and we‚Äôd chat for a couple hours.‚Äù<!-- HTML_TAG_END --></p>    <p><!-- HTML_TAG_START -->After a few days in WƒÅnaka‚Äîlocated on New Zealand's South Island and famous for its snow capped mountains overlooking a massive mirror of a lake‚ÄîAccel‚Äôs Mocorrea called in backup, texting partner Arun Mathew.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->‚ÄúArun said ‚Äòalright, I‚Äôm coming,‚Äô‚Äù said Copplestone. ‚ÄúAnd I said, ‚ÄòOh no, don‚Äôt come! We haven‚Äôt agreed to anything!‚Äô But yeah, he came, we had dinner in Queenstown, another beautiful place. We caught up the next morning, and they offered a term sheet.‚Äù<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Accel‚Äôs Mathew had traveled more than 24 hours, across two flights and multiple car rides, to make the trip as the firm weighed its first investment in Supabase.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->‚ÄúI needed to sit across the table, look him in the eye, and really believe he‚Äôs going to do something else,‚Äù Mathew told <em>Fortune</em>. ‚ÄúThat‚Äôs necessary, certainly at this valuation‚Ä¶We know what greatness looks like, we believe that‚Äîand I‚Äôm obviously betting with my career.‚Äù<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->That term sheet became Supabase‚Äôs latest funding round, a $200 million Series D valuing the company at $2 billion, <em>Fortune</em> can exclusively report. Coatue, Y Combinator, Craft Ventures, and Felicis participated in the round, as did big-name angels like OpenAI Chief Product Officer Kevin Weil, Vercel CEO Guillermo Rauch, and <a href="https://fortune.com/2024/09/05/laravel-raises-57-million-series-a-from-accel/" rel="nofollow noopener" target="_blank" data-ylk="slk:Laravel CEO Taylor Otwell;elm:context_link;itc:0;sec:content-canvas">Laravel CEO Taylor Otwell</a>.<!-- HTML_TAG_END --></p>    <p><!-- HTML_TAG_START -->‚ÄúThe core thesis for us is that in every major platform shift, there's always value created at the database layer,‚Äù said Mathew. ‚ÄúIt's part of the reason that Larry Ellison and <a href="https://fortune.com/europe/2025/03/17/oracle-uk-ai-boom-5-billion-cloud-investment-larry-ellison-trump-starmer/" rel="nofollow noopener" target="_blank" data-ylk="slk:Oracle;elm:context_link;itc:0;sec:content-canvas">Oracle</a> have held the same power for 40-plus years. It's partially why MongoDB is one of the most interesting enterprise software companies out there‚Ä¶The database layer has a lot of dead bodies, but it also has a number of companies that have created exceptional enterprise value.‚Äù<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Supabase is currently used by two million developers who manage more than 3.5 million databases. The startup supports Postgres, the most popular developer database system that‚Äôs an alternative to Google‚Äôs Firebase. Supabase‚Äôs goal: To be a one-stop backend for developers and "vibe coders."<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->‚ÄúI see our community, over the next decade, as something that will grow with us, and it‚Äôs for everyone from developers, all the way up to enterprise,‚Äù said Copplestone. ‚ÄúIt‚Äôs more than just developers even now. Our sign-up rate just doubled in the past three months because of vibe coding‚ÄîBolt, Lovable, Cursor, all those.‚Äù<!-- HTML_TAG_END --></p> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I open-sourced my AI toy company that runs on ESP32 and OpenAI realtime (120 pts)]]></title>
            <link>https://github.com/akdeb/ElatoAI</link>
            <guid>43762409</guid>
            <pubDate>Tue, 22 Apr 2025 14:10:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/akdeb/ElatoAI">https://github.com/akdeb/ElatoAI</a>, See on <a href="https://news.ycombinator.com/item?id=43762409">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">üöÄ ElatoAI: Realtime AI Speech for ESP32</h2><a id="user-content--elatoai-realtime-ai-speech-for-esp32" aria-label="Permalink: üöÄ ElatoAI: Realtime AI Speech for ESP32" href="#-elatoai-realtime-ai-speech-for-esp32"></a></p>
<p dir="auto">Realtime AI Speech powered by OpenAI Realtime API, ESP32, Secure WebSockets, and Deno Edge Functions for &gt;10-minute uninterrupted global conversations</p>
<p dir="auto"><a href="https://discord.gg/KJWxDPBRUj" rel="nofollow"><img src="https://camo.githubusercontent.com/a6bebe6b4fcd39437b9209e02e63af22ac414ffcfcf1bd0224924a924e113bd4/68747470733a2f2f646362616467652e76657263656c2e6170702f6170692f7365727665722f4b4a577844504252556a3f7374796c653d666c6174" alt="Discord Follow" data-canonical-src="https://dcbadge.vercel.app/api/server/KJWxDPBRUj?style=flat"></a>
<a href="https://www.gnu.org/licenses/gpl-3.0.en.html" rel="nofollow"><img src="https://camo.githubusercontent.com/bb4e5c0036a6a8cdbc59b38d44f09ad8f6dc722751dad34d3df5bf0ac61913c1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c7565" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/license-MIT-blue"></a>‚ÄÇ‚ÄÇ‚ÄÇ
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/da1334d6d7641a2f8b8a392848949968d3e2f74e04dd8f18e88b8274c5c288fc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6f64652e6a732d32322e31332e302d79656c6c6f772e737667"><img src="https://camo.githubusercontent.com/da1334d6d7641a2f8b8a392848949968d3e2f74e04dd8f18e88b8274c5c288fc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6f64652e6a732d32322e31332e302d79656c6c6f772e737667" alt="Node.js" data-canonical-src="https://img.shields.io/badge/Node.js-22.13.0-yellow.svg"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6011eef04208dc40ad937a7deb0e3267a39aeef1231389e35deb305d09443039/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6578742e6a732d31342e322e372d627269676874677265656e2e737667"><img src="https://camo.githubusercontent.com/6011eef04208dc40ad937a7deb0e3267a39aeef1231389e35deb305d09443039/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6578742e6a732d31342e322e372d627269676874677265656e2e737667" alt="Next.js" data-canonical-src="https://img.shields.io/badge/Next.js-14.2.7-brightgreen.svg"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e10edb68f4e033e521165fdd24d654e3ac2f1d43cbdab9a8cf9b76319e27106f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52656163742d31382e322e302d626c75652e737667"><img src="https://camo.githubusercontent.com/e10edb68f4e033e521165fdd24d654e3ac2f1d43cbdab9a8cf9b76319e27106f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52656163742d31382e322e302d626c75652e737667" alt="React" data-canonical-src="https://img.shields.io/badge/React-18.2.0-blue.svg"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Demo Video</h2><a id="user-content-demo-video" aria-label="Permalink: Demo Video" href="#demo-video"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description Elato.open-source.conversational.AI.device.mp4">Elato.open-source.conversational.AI.device.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/20175219/435005042-aa60e54c-5847-4a68-80b5-5d6b1a5b9328.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUzNTA1MDMsIm5iZiI6MTc0NTM1MDIwMywicGF0aCI6Ii8yMDE3NTIxOS80MzUwMDUwNDItYWE2MGU1NGMtNTg0Ny00YTY4LTgwYjUtNWQ2YjFhNWI5MzI4Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDE5MzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTNjZTRiYTdhNWJlZWMzZTVjM2VlZWE2MmFiNDJjYjkwYmNkY2YxOTU2Y2VkZDMzMTMwYTBlNGEwOWFiYWEwNjUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.o_7HQusgVlfhCHbV1IOlzhYl5pD9NiBvrQw61HOxMrg" data-canonical-src="https://private-user-images.githubusercontent.com/20175219/435005042-aa60e54c-5847-4a68-80b5-5d6b1a5b9328.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUzNTA1MDMsIm5iZiI6MTc0NTM1MDIwMywicGF0aCI6Ii8yMDE3NTIxOS80MzUwMDUwNDItYWE2MGU1NGMtNTg0Ny00YTY4LTgwYjUtNWQ2YjFhNWI5MzI4Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDE5MzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTNjZTRiYTdhNWJlZWMzZTVjM2VlZWE2MmFiNDJjYjkwYmNkY2YxOTU2Y2VkZDMzMTMwYTBlNGEwOWFiYWEwNjUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.o_7HQusgVlfhCHbV1IOlzhYl5pD9NiBvrQw61HOxMrg" controls="controls" muted="muted">

  </video>
</details>

<a href="https://www.youtube.com/watch?v=o1eIAwVll5I" rel="nofollow">
  <img src="https://camo.githubusercontent.com/c937f11455e973bb4d27d3cac0d9f79f64a49482daef0ead1c301e51844a16c7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f576174636825323044656d6f2d596f75547562652d7265643f7374796c653d666f722d7468652d6261646765266c6f676f3d796f7574756265" alt="Watch Demo on YouTube" data-canonical-src="https://img.shields.io/badge/Watch%20Demo-YouTube-red?style=for-the-badge&amp;logo=youtube">
</a>
<p dir="auto"><h2 tabindex="-1" dir="auto">‚ö°Ô∏è Hardware Design</h2><a id="user-content-Ô∏è-hardware-design" aria-label="Permalink: ‚ö°Ô∏è Hardware Design" href="#Ô∏è-hardware-design"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/akdeb/ElatoAI/blob/main/pcb-design.png"><img src="https://github.com/akdeb/ElatoAI/raw/main/pcb-design.png" alt="Hardware Setup" width="100%"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<ol dir="auto">
<li>Install <a href="https://supabase.com/docs/guides/local-development/cli/getting-started" rel="nofollow">Supabase CLI</a> and set up your Local Supabase Backend. From the root directory, run:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="brew install supabase/tap/supabase
supabase start # Starts your local Supabase server with the default migrations and seed data."><pre>brew install supabase/tap/supabase
supabase start <span><span>#</span> Starts your local Supabase server with the default migrations and seed data.</span></pre></div>
<ol start="2" dir="auto">
<li>Set up your NextJS Frontend. (<a href="https://github.com/akdeb/ElatoAI/blob/main/frontend-nextjs/README.md">See the Frontend README</a>) From the <code>frontend-nextjs</code> directory, run the following commands. (<strong>Login creds:</strong> Email: <a href="mailto:admin@elatoai.com">admin@elatoai.com</a>, Password: admin)</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="cd frontend-nextjs
npm install

# Set your environment variables
cp .env.example .env.local
# NEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>
# OPENAI_API_KEY=<your_openai_api_key>

# Run the development server
npm run dev"><pre><span>cd</span> frontend-nextjs
npm install

<span><span>#</span> Set your environment variables</span>
cp .env.example .env.local
<span><span>#</span> NEXT_PUBLIC_SUPABASE_ANON_KEY=&lt;your_supabase_anon_key&gt;</span>
<span><span>#</span> OPENAI_API_KEY=&lt;your_openai_api_key&gt;</span>

<span><span>#</span> Run the development server</span>
npm run dev</pre></div>
<ol start="3" dir="auto">
<li>
<p dir="auto">Add your ESP32-S3 Device MAC Address to the <a href="http://localhost:3000/home/settings" rel="nofollow">Settings page</a> in the NextJS Frontend. This links your device to your account.
To find your ESP32-S3 Device's MAC Address, build and upload <code>test/print_mac_address_test.cpp</code> using PlatformIO.</p>
</li>
<li>
<p dir="auto">Add your OpenAI API Key in the <code>server-deno/.env</code> and <code>frontend-nextjs/.env.local</code> file.</p>
</li>
</ol>
<div data-snippet-clipboard-copy-content="OPENAI_API_KEY=<your_openai_api_key>"><pre><code>OPENAI_API_KEY=&lt;your_openai_api_key&gt;
</code></pre></div>
<ol start="5" dir="auto">
<li>Start the Deno server. (<a href="https://github.com/akdeb/ElatoAI/blob/main/server-deno/README.md">See the Deno server README</a>)</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="# Navigate to the server directory
cd server-deno

# Set your environment variables
cp .env.example .env
# NEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>
# OPENAI_API_KEY=<your_openai_api_key>

# Run the server at port 8000
deno run -A --env-file=.env main.ts"><pre><span><span>#</span> Navigate to the server directory</span>
<span>cd</span> server-deno

<span><span>#</span> Set your environment variables</span>
cp .env.example .env
<span><span>#</span> NEXT_PUBLIC_SUPABASE_ANON_KEY=&lt;your_supabase_anon_key&gt;</span>
<span><span>#</span> OPENAI_API_KEY=&lt;your_openai_api_key&gt;</span>

<span><span>#</span> Run the server at port 8000</span>
deno run -A --env-file=.env main.ts</pre></div>
<ol start="5" dir="auto">
<li>
<p dir="auto">Set up your ESP32 Arduino Client. (<a href="https://github.com/akdeb/ElatoAI/blob/main/firmware-arduino/README.md">See the ESP32 README</a>) On PlatformIO, first <code>Build</code> the project, then <code>Upload</code> the project to your ESP32.</p>
</li>
<li>
<p dir="auto">The ESP32 should open an AP <code>ELATO-DEVICE</code> to connect to Wifi. Connect to it and go to <code>http://192.168.4.1</code> to configure the device wifi.</p>
</li>
<li>
<p dir="auto">Once your Wifi is configured, turn the device off and on again and it should connect to your Wifi and the Deno edge server.</p>
</li>
<li>
<p dir="auto">Now you can talk to your AI Character!</p>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Project Architecture</h2><a id="user-content-project-architecture" aria-label="Permalink: Project Architecture" href="#project-architecture"></a></p>
<p dir="auto">ElatoAI consists of three main components:</p>
<ol dir="auto">
<li><strong>Frontend Client</strong> (<code>Next.js</code> hosted on Vercel) - to create and talk to your AI agents and 'send' it to your ESP32 device</li>
<li><strong>Edge Server Functions</strong> (<code>Deno</code> running on Deno/Supabase Edge) - to handle the websocket connections from the ESP32 device and the OpenAI API calls</li>
<li><strong>ESP32 IoT Client</strong> (<code>PlatformIO/Arduino</code>) - to receive the websocket connections from the Edge Server Functions and send audio to the OpenAI API via the Deno edge server.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">üåü Features</h2><a id="user-content--features" aria-label="Permalink: üåü Features" href="#-features"></a></p>
<ol dir="auto">
<li><strong>Realtime Speech-to-Speech</strong>: Instant speech conversion powered by OpenAI's Realtime APIs.</li>
<li><strong>Create Custom AI Agents</strong>: Create custom agents with different personalities and voices.</li>
<li><strong>Customizable Voices</strong>: Choose from a variety of voices and personalities.</li>
<li><strong>Secure WebSockets</strong>: Reliable, encrypted WebSocket communication.</li>
<li><strong>Server VAD Turn Detection</strong>: Intelligent conversation flow handling for smooth interactions.</li>
<li><strong>Opus Audio Compression</strong>: High-quality audio streaming with minimal bandwidth.</li>
<li><strong>Global Edge Performance</strong>: Low latency Deno Edge Functions ensuring seamless global conversations.</li>
<li><strong>ESP32 Arduino Framework</strong>: Optimized and easy-to-use hardware integration.</li>
<li><strong>Conversation History</strong>: View your conversation history.</li>
<li><strong>Device Management</strong>: Register and manage your devices.</li>
<li><strong>User Authentication</strong>: Secure user authentication and authorization.</li>
<li><strong>Conversations with WebRTC and Websockets</strong>: Talk to your AI with WebRTC on the NextJS webapp and with websockets on the ESP32.</li>
<li><strong>Volume Control</strong>: Control the volume of the ESP32 speaker from the NextJS webapp.</li>
<li><strong>Realtime Transcripts</strong>: The realtime transcripts of your conversations are stored in the Supabase DB.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">üõ† Tech Stack</h2><a id="user-content--tech-stack" aria-label="Permalink: üõ† Tech Stack" href="#-tech-stack"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Component</th>
<th>Technology Used</th>
</tr>
</thead>
<tbody>
<tr>
<td>Frontend</td>
<td>Next.js, Vercel</td>
</tr>
<tr>
<td>Backend</td>
<td>Supabase DB</td>
</tr>
<tr>
<td>Edge Functions</td>
<td>Deno Edge Functions on Deno/Supabase</td>
</tr>
<tr>
<td>IoT Client</td>
<td>PlatformIO, Arduino Framework, ESP32-S3</td>
</tr>
<tr>
<td>Audio Codec</td>
<td>Opus</td>
</tr>
<tr>
<td>Communication</td>
<td>Secure WebSockets</td>
</tr>
<tr>
<td>Libraries</td>
<td>ArduinoJson, WebSockets, AsyncWebServer, ESP32_Button, Arduino Audio Tools, ArduinoLibOpus</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">üó∫Ô∏è High-Level Flow</h2><a id="user-content-Ô∏è-high-level-flow" aria-label="Permalink: üó∫Ô∏è High-Level Flow" href="#Ô∏è-high-level-flow"></a></p>
<section data-identity="65c7f3cf-ab78-4f32-9c40-23a254c1c485" data-host="https://viewscreen.githubusercontent.com" data-src="https://viewscreen.githubusercontent.com/markdown/mermaid?docs_host=https%3A%2F%2Fdocs.github.com" data-type="mermaid" aria-label="mermaid rendered output container">
  <div dir="auto" data-json="{&quot;data&quot;:&quot;flowchart TD\n  User[User Speech] --&amp;gt; ESP32\n  ESP32[ESP32 Device] --&amp;gt;|WebSocket| Edge[Deno Edge Function]\n  Edge --&amp;gt;|OpenAI API| OpenAI[OpenAI Realtime API]\n  OpenAI --&amp;gt; Edge\n  Edge --&amp;gt;|WebSocket| ESP32\n  ESP32 --&amp;gt; User[AI Generated Speech]\n&quot;}" data-plain="flowchart TD
  User[User Speech] --> ESP32
  ESP32[ESP32 Device] -->|WebSocket| Edge[Deno Edge Function]
  Edge -->|OpenAI API| OpenAI[OpenAI Realtime API]
  OpenAI --> Edge
  Edge -->|WebSocket| ESP32
  ESP32 --> User[AI Generated Speech]
">
      <pre lang="mermaid" aria-label="Raw mermaid code">flowchart TD
  User[User Speech] --&gt; ESP32
  ESP32[ESP32 Device] --&gt;|WebSocket| Edge[Deno Edge Function]
  Edge --&gt;|OpenAI API| OpenAI[OpenAI Realtime API]
  OpenAI --&gt; Edge
  Edge --&gt;|WebSocket| ESP32
  ESP32 --&gt; User[AI Generated Speech]
</pre>
    </div>
  <span role="presentation">
    <span data-view-component="true">
      <span>Loading</span>
</span>
  </span>
</section>

<p dir="auto"><h2 tabindex="-1" dir="auto">Project Structure</h2><a id="user-content-project-structure" aria-label="Permalink: Project Structure" href="#project-structure"></a></p>
<section data-identity="c2843843-c98d-4ca7-bdf2-6a2332934d9e" data-host="https://viewscreen.githubusercontent.com" data-src="https://viewscreen.githubusercontent.com/markdown/mermaid?docs_host=https%3A%2F%2Fdocs.github.com" data-type="mermaid" aria-label="mermaid rendered output container">
  <div dir="auto" data-json="{&quot;data&quot;:&quot;graph TD\n  repo[ElatoAI]\n  repo --&amp;gt; frontend[Frontend Vercel NextJS]\n  repo --&amp;gt; deno[Deno Edge Function]\n  repo --&amp;gt; esp32[ESP32 Arduino Client]\n  deno --&amp;gt; supabase[Supabase DB]\n\n  frontend --&amp;gt; supabase\n  esp32 --&amp;gt; websockets[Secure WebSockets]\n  esp32 --&amp;gt; opus[Opus Codec]\n  esp32 --&amp;gt; audio_tools[arduino-audio-tools]\n  esp32 --&amp;gt; libopus[arduino-libopus]\n  esp32 --&amp;gt; ESPAsyncWebServer[ESPAsyncWebServer]\n&quot;}" data-plain="graph TD
  repo[ElatoAI]
  repo --> frontend[Frontend Vercel NextJS]
  repo --> deno[Deno Edge Function]
  repo --> esp32[ESP32 Arduino Client]
  deno --> supabase[Supabase DB]

  frontend --> supabase
  esp32 --> websockets[Secure WebSockets]
  esp32 --> opus[Opus Codec]
  esp32 --> audio_tools[arduino-audio-tools]
  esp32 --> libopus[arduino-libopus]
  esp32 --> ESPAsyncWebServer[ESPAsyncWebServer]
">
      <pre lang="mermaid" aria-label="Raw mermaid code">graph TD
  repo[ElatoAI]
  repo --&gt; frontend[Frontend Vercel NextJS]
  repo --&gt; deno[Deno Edge Function]
  repo --&gt; esp32[ESP32 Arduino Client]
  deno --&gt; supabase[Supabase DB]

  frontend --&gt; supabase
  esp32 --&gt; websockets[Secure WebSockets]
  esp32 --&gt; opus[Opus Codec]
  esp32 --&gt; audio_tools[arduino-audio-tools]
  esp32 --&gt; libopus[arduino-libopus]
  esp32 --&gt; ESPAsyncWebServer[ESPAsyncWebServer]
</pre>
    </div>
  <span role="presentation">
    <span data-view-component="true">
      <span>Loading</span>
</span>
  </span>
</section>

<p dir="auto"><h2 tabindex="-1" dir="auto">‚öôÔ∏è PlatformIO Configuration</h2><a id="user-content-Ô∏è-platformio-configuration" aria-label="Permalink: ‚öôÔ∏è PlatformIO Configuration" href="#Ô∏è-platformio-configuration"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="[env:esp32-s3-devkitc-1]
platform = espressif32 @ 6.10.0
board = esp32-s3-devkitc-1
framework = arduino
monitor_speed = 115200

lib_deps =
    bblanchon/ArduinoJson@^7.1.0
    links2004/WebSockets@^2.4.1
    ESP32Async/ESPAsyncWebServer@^3.7.6
    https://github.com/esp-arduino-libs/ESP32_Button.git#v0.0.1
    https://github.com/pschatzmann/arduino-audio-tools.git#v1.0.1
    https://github.com/pschatzmann/arduino-libopus.git#a1.1.0"><pre><span>[env:esp32-s3-devkitc-1]</span>
<span>platform</span> = espressif32 @ 6.10.0
<span>board</span> = esp32-s3-devkitc-1
<span>framework</span> = arduino
<span>monitor_speed</span> = 115200

<span>lib_deps</span> =
    bblanchon/ArduinoJson@^7.1.0
    links2004/WebSockets@^2.4.1
    ESP32Async/ESPAsyncWebServer@^3.7.6
    https://github.com/esp-arduino-libs/ESP32_Button.git<span><span>#</span>v0.0.1</span>
    https://github.com/pschatzmann/arduino-audio-tools.git<span><span>#</span>v1.0.1</span>
    https://github.com/pschatzmann/arduino-libopus.git<span><span>#</span>a1.1.0</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">üìä Important Stats</h2><a id="user-content--important-stats" aria-label="Permalink: üìä Important Stats" href="#-important-stats"></a></p>
<ul dir="auto">
<li>‚ö°Ô∏è <strong>Latency</strong>: &lt;1s round-trip globally</li>
<li>üéß <strong>Audio Quality</strong>: Opus codec at 24kbps (high clarity)</li>
<li>‚è≥ <strong>Uninterrupted Conversations</strong>: Up to 10 minutes continuous conversations</li>
<li>üåé <strong>Global Availability</strong>: Optimized with edge computing with Deno</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">üõ° Security</h2><a id="user-content--security" aria-label="Permalink: üõ° Security" href="#-security"></a></p>
<ul dir="auto">
<li>Secure WebSockets (WSS) for encrypted data transfers</li>
<li>Optional: API Key encryption with 256-bit AES</li>
<li>Supabase DB for secure authentication</li>
<li>Supabase RLS for all tables</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">üö´ Limitations</h2><a id="user-content--limitations" aria-label="Permalink: üö´ Limitations" href="#-limitations"></a></p>
<ul dir="auto">
<li>3-4s Cold start time while connecting to edge server</li>
<li>Limited to upto 10 minutes of uninterrupted conversations</li>
<li>Edge server stops when wall clock time is exceeded</li>
<li>No speech interruption detection on ESP32</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">ü§ù Contributing</h2><a id="user-content--contributing" aria-label="Permalink: ü§ù Contributing" href="#-contributing"></a></p>
<ol dir="auto">
<li>Looking for Speech Interruption detection on ESP32</li>
<li>Adding Arduino IDE support</li>
<li>Adding tool calling support on Deno Edge</li>
</ol>
<p dir="auto">We welcome contributions</p>
<ul dir="auto">
<li>Fork this repository.</li>
<li>Create your feature branch (<code>git checkout -b feature/EpicFeature</code>).</li>
<li>Commit your changes (<code>git commit -m 'Add EpicFeature'</code>).</li>
<li>Push to the branch (<code>git push origin feature/EpicFeature</code>).</li>
<li>Open a PR</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is licensed under the MIT License - see the <a href="https://github.com/akdeb/ElatoAI/blob/main/LICENSE">LICENSE</a> file for details.</p>
<hr>
<p dir="auto"><strong>If you find this project interesting or useful, drop a GitHub ‚≠êÔ∏è. It helps a lot!</strong></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Abusing DuckDB-WASM by making SQL draw 3D graphics (Sort Of) (156 pts)]]></title>
            <link>https://www.hey.earth/posts/duckdb-doom</link>
            <guid>43761998</guid>
            <pubDate>Tue, 22 Apr 2025 13:35:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.hey.earth/posts/duckdb-doom">https://www.hey.earth/posts/duckdb-doom</a>, See on <a href="https://news.ycombinator.com/item?id=43761998">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="__next"><article dir="ltr"><h2>Abusing DuckDB-WASM by making SQL draw 3D graphics (Sort Of)</h2><h2>Building a SQL-Powered Doom Clone in the Browser<span id="building-a-sql-powered-doom-clone-in-the-browser"></span><a href="#building-a-sql-powered-doom-clone-in-the-browser" aria-label="Permalink for this section"></a></h2>
<p>I had this slightly crazy idea: Could I ditch most of the conventional JavaScript game loop and rendering logic and build a 3D game engine where <strong>SQL queries</strong> did the heavy lifting? Naturally, I decided to try building a primitive, text-based Doom clone to see how far I could push it using <strong>DuckDB-WASM</strong>.</p>
<p><img alt="A screenshot of the text-based Doom clone, showing the 3D view and minimap" loading="lazy" width="922" height="536" decoding="async" data-nimg="1" srcset="https://www.hey.earth/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fduckdb-doom.5f9e25b8.png&amp;w=1080&amp;q=75 1x, https://www.hey.earth/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fduckdb-doom.5f9e25b8.png&amp;w=1920&amp;q=75 2x" src="https://www.hey.earth/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fduckdb-doom.5f9e25b8.png&amp;w=1920&amp;q=75"></p>
<p>Spoiler: It <em>kind of</em> works, it was often painful, but I learned a ton about the surprising power (and quirks) of running an analytical database engine in the browser for tasks it was definitely not designed for.</p>
<h2>The Setup: SQL Isn't Just for <code dir="ltr">SELECT *</code> Anymore<span id="the-setup-sql-isnt-just-for-select--anymore"></span><a href="#the-setup-sql-isnt-just-for-select--anymore" aria-label="Permalink for this section"></a></h2>
<p>Forget managing game state in JavaScript objects or drawing pixels with Canvas/WebGL. My approach looked like this:</p>
<ol>
<li>
<p><strong>The Database is the World:</strong> The 16x16 map, player coordinates (<code dir="ltr">x</code>, <code dir="ltr">y</code>, <code dir="ltr">dir</code>), enemy/bullet positions, game settings ‚Äì everything lives in DuckDB tables, right there in the browser tab.</p>

</li>
<li>
<p><strong>SQL Dictates Reality:</strong></p>
<ul>
<li>Want to move forward? <code dir="ltr">UPDATE player SET x = x + COS(dir)*step, y = y + SIN(dir)*step;</code></li>
<li>Bullet hits a wall? <code dir="ltr">DELETE FROM bullets WHERE EXISTS (SELECT 1 FROM map WHERE ...)</code></li>
<li>Enemy fragged? A <code dir="ltr">JOIN</code> between <code dir="ltr">bullets</code> and <code dir="ltr">enemies</code> followed by <code dir="ltr">DELETE</code> statements.</li>
</ul>

</li>
<li>
<p><strong>The Renderer is a SQL <code dir="ltr">VIEW</code>:</strong> This is where it gets wild. I defined a SQL <code dir="ltr">VIEW</code> named <code dir="ltr">render_3d_frame</code> that actually performs raycasting and renders the 3D scene. This beast uses recursive CTEs to cast rays for each screen column, calculates wall distances (with fish-eye correction!), determines the height of the wall slice for that column, and then uses <code dir="ltr">string_agg</code> to stitch together the characters (<code dir="ltr">' '</code>, <code dir="ltr">.</code>, <code dir="ltr">‚ñà</code>, <code dir="ltr">‚ñì</code>, <code dir="ltr">‚ñí</code>, <code dir="ltr">‚ñë</code>) for each row of the final text frame.</p>
<p>Here's the core of the raycasting algorithm in SQL:</p>

<p>Yes, SQL is calculating perspective and drawing characters. DuckDB's recursive CTE capabilities are unexpectedly powerful for this kind of work.</p>
</li>
<li>
<p><strong>JavaScript Glues It Together (and Handles Sprites):</strong> My JS code became the orchestrator. It handles keyboard input, runs the <code dir="ltr">setInterval</code> game loop, calls the SQL view to get the background frame, <em>then</em> fetches entity (bullet/enemy) positions and pre-calculated wall distances (from <em>another</em> SQL view!). It performs a quick Z-buffer check in JS to see if a sprite is closer than the wall at its projected screen column, draws it onto the background frame if it is, and finally outputs the resulting text onto a <code dir="ltr">&lt;pre&gt;</code> tag.</p>

</li>
</ol>
<p>Essentially, I took DuckDB-WASM ‚Äì designed for fast analytics ‚Äì and coerced it into acting like a state machine and a rudimentary rendering pipeline.</p>
<h2>The Gauntlet: My Battles with Bugs, Binders, and Browsers<span id="the-gauntlet-my-battles-with-bugs-binders-and-browsers"></span><a href="#the-gauntlet-my-battles-with-bugs-binders-and-browsers" aria-label="Permalink for this section"></a></h2>
<p>This wasn't exactly a smooth ride. Here's a log of some of the more... memorable... challenges and the fixes that eventually worked:</p>
<h3>1. The Initial Roadblock: DuckDB-WASM Just Wouldn't Load (404s)<span id="1-the-initial-roadblock-duckdb-wasm-just-wouldnt-load-404s"></span><a href="#1-the-initial-roadblock-duckdb-wasm-just-wouldnt-load-404s" aria-label="Permalink for this section"></a></h3>
<ul>
<li><strong>Pain Point:</strong> My first attempts using standard CDN links for the worker script just flat-out failed with <code dir="ltr">net::ERR_ABORTED 404</code>. Debugging WASM loading issues in the browser isn't always intuitive.</li>
<li><strong>The Fix:</strong> Digging into the DuckDB-WASM docs revealed the more robust initialization pattern: using their helper functions (<code dir="ltr">getJsDelivrBundles</code>) or explicitly selecting a bundle (<code dir="ltr">mvp</code> for max compatibility), creating the worker via <code dir="ltr">URL.createObjectURL(new Blob(...))</code>, and using the <code dir="ltr">+esm</code> CDN endpoint for the main module import.</li>
</ul>

<p>The lesson: When working with WASM libraries, always follow the recommended initialization patterns from the library authors.</p>
<h3>2. SQL Dialect Gotchas: <code dir="ltr">AUTOINCREMENT</code> vs. <code dir="ltr">SEQUENCE</code><span id="2-sql-dialect-gotchas-autoincrement-vs-sequence"></span><a href="#2-sql-dialect-gotchas-autoincrement-vs-sequence" aria-label="Permalink for this section"></a></h3>
<ul>
<li><strong>Pain Point:</strong> Muscle memory from SQLite/MySQL led me to use <code dir="ltr">AUTOINCREMENT</code> for the <code dir="ltr">bullets</code> table ID. DuckDB promptly slapped me with a <code dir="ltr">Parser Error: syntax error at or near "AUTOINCREMENT"</code>.</li>
<li><strong>The Fix:</strong> Remembering that DuckDB adheres more closely to standard SQL sequences. This meant <code dir="ltr">CREATE SEQUENCE my_seq;</code> and then <code dir="ltr">CREATE TABLE ... (id INTEGER PRIMARY KEY DEFAULT nextval('my_seq'), ...)</code>.</li>
</ul>

<p>This highlights an important point about DuckDB: it's not just SQLite in the browser. It has its own SQL dialect with nuances from PostgreSQL and standard SQL.</p>
<h3>3. Fighting the Query Planner (Binder Errors &amp; Table Functions)<span id="3-fighting-the-query-planner-binder-errors--table-functions"></span><a href="#3-fighting-the-query-planner-binder-errors--table-functions" aria-label="Permalink for this section"></a></h3>
<ul>
<li>
<p><strong>Pain Point:</strong> This one drove me nuts for a while. I tried using <code dir="ltr">generate_series(0, settings.view_w - 1)</code> inside my rendering <code dir="ltr">VIEW</code>. The binder freaked out with errors like <code dir="ltr">Table function cannot contain subqueries</code> and even <code dir="ltr">Conversion Error: Could not convert string 's.view_w' to INT32</code>.</p>
</li>
<li>
<p><strong>The Fix:</strong> I had to restructure the view logic significantly. Instead of generating the exact range needed, I generated a <em>fixed, oversized</em> range (like 0-255) first, then added another CTE layer to <em>filter</em> that oversized range using the actual <code dir="ltr">view_w</code> from the settings CTE.</p>
</li>
</ul>

<p>I also initially forgot to alias the output of <code dir="ltr">generate_series</code>, leading to <code dir="ltr">Referenced column "value" not found</code> errors. Fixed with <code dir="ltr">generate_series(...) AS gs(col)</code>.</p>
<p>This approach satisfied the query planner, even though it's less elegant. It taught me that SQL query planners have strict rules about how and when references can be resolved, especially with table-generating functions.</p>
<h3>4. The Dreaded <code dir="ltr">async</code>/<code dir="ltr">setInterval</code> Race Condition<span id="4-the-dreaded-asyncsetinterval-race-condition"></span><a href="#4-the-dreaded-asyncsetinterval-race-condition" aria-label="Permalink for this section"></a></h3>
<ul>
<li>
<p><strong>Pain Point:</strong> My game loop was simple: <code dir="ltr">setInterval(async () =&gt; { await tick(); await render(); }, 150)</code>. But because <code dir="ltr">tick()</code> and <code dir="ltr">render()</code> involved <code dir="ltr">async</code> database calls, sometimes a new interval would fire before the previous one finished. This was most obvious with the temporary <code dir="ltr">collisions</code> table used for bullet hits ‚Äì I'd get rapid-fire "table <code dir="ltr">collisions</code> does not exist!" followed by "table <code dir="ltr">collisions</code> already exists!" errors.</p>
</li>
<li>
<p><strong>The Fix:</strong> A classic solution: a simple boolean lock (<code dir="ltr">isProcessingTick</code>). The interval callback now checks this flag; if true, it bails immediately. If false, it sets the flag, runs the async work in a <code dir="ltr">try...finally</code>, and clears the flag in the <code dir="ltr">finally</code> block, ensuring it's always released.</p>
</li>
</ul>

<p>This was a classic reminder that asynchronous timing with recurring events needs careful handling, especially when database operations are involved.</p>
<h3>5. Sprites: Beyond the SQL Background (Z-Buffer Logic)<span id="5-sprites-beyond-the-sql-background-z-buffer-logic"></span><a href="#5-sprites-beyond-the-sql-background-z-buffer-logic" aria-label="Permalink for this section"></a></h3>
<ul>
<li>
<p><strong>Pain Point:</strong> The SQL view rendered walls/floor/ceiling beautifully (well, beautifully for text mode). But enemies and bullets were just data. Drawing them required knowing <em>if they were hidden by a wall</em>.</p>
</li>
<li>
<p><strong>The Fix:</strong> A hybrid approach combining SQL and JavaScript. I created <em>another</em> SQL view (<code dir="ltr">column_distances</code>) specifically to output the distance to the nearest wall for each screen column:</p>
</li>
</ul>

<p>Then, in my JavaScript <code dir="ltr">render3d</code> function, I performed the Z-buffer check by comparing entity depth to wall depth for each screen column.</p>
<h2>Performance and Results<span id="performance-and-results"></span><a href="#performance-and-results" aria-label="Permalink for this section"></a></h2>
<p>How did it actually run? Surprisingly well, considering what we're asking SQL to do. On a modern laptop, I get about 6-7 FPS with the 150ms game loop interval. The most expensive operation is the SQL raycasting view, which takes about 80-100ms to execute. The sprite rendering in JavaScript is quite fast in comparison.</p>
<p><img alt="A GIF showing gameplay with player movement and shooting" loading="lazy" width="870" height="508" decoding="async" data-nimg="1" srcset="https://www.hey.earth/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fduckdb-doom.3aba91f6.gif&amp;w=1080&amp;q=75 1x, https://www.hey.earth/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fduckdb-doom.3aba91f6.gif&amp;w=1920&amp;q=75 2x" src="https://www.hey.earth/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fduckdb-doom.3aba91f6.gif&amp;w=1920&amp;q=75"></p>
<p>Here's what the game looks like in action. The main view shows the 3D perspective with text-based graphics, while the smaller box in the corner shows a top-down minimap. You can see how the walls are rendered with different characters based on distance, giving a primitive 3D effect.</p>
<p>The movement feels responsive enough, and the SQL-based collision detection works well. There's something strangely satisfying about mowing down enemies with SQL <code dir="ltr">DELETE</code> statements.</p>
<h2>Pushing SQL to Its Limits: What I Learned<span id="pushing-sql-to-its-limits-what-i-learned"></span><a href="#pushing-sql-to-its-limits-what-i-learned" aria-label="Permalink for this section"></a></h2>
<p>This experiment taught me several important lessons about both SQL and browser-based development:</p>
<ol>
<li>
<p><strong>SQL is surprisingly powerful for non-traditional use cases.</strong> It's not just for data retrieval. The combination of recursive CTEs, window functions, and aggregate functions makes complex algorithms possible.</p>
</li>
<li>
<p><strong>DuckDB-WASM is impressively performant.</strong> Running an analytical database engine in the browser that can handle complex recursive queries 6-7 times per second is no small feat.</p>
</li>
<li>
<p><strong>The boundaries between languages can be blurred.</strong> This project combined SQL for game state and rendering fundamentals, with JavaScript for orchestration and sprite handling. Neither could have done the job alone.</p>
</li>
<li>
<p><strong>Debugging across language boundaries is challenging.</strong> When something went wrong, it wasn't always clear if the issue was in the JavaScript, the SQL, or at the interface between them. I added extensive logging to track the flow between components.</p>
</li>
<li>
<p><strong>Query planning is a complex art.</strong> I had to work around many limitations of how SQL planners work, especially around table function evaluation and CTEs.</p>
</li>
</ol>
<h2>Would I Recommend This Approach?<span id="would-i-recommend-this-approach"></span><a href="#would-i-recommend-this-approach" aria-label="Permalink for this section"></a></h2>
<p>For a production game? Absolutely not. It's a fun hack, but there are much better tools for game development.</p>
<p>But as a learning exercise? 100% yes. This project forced me to think deeply about:</p>
<ul>
<li>SQL query optimization and execution planning</li>
<li>Raycasting algorithms and 3D projection</li>
<li>Asynchronous JavaScript patterns</li>
<li>The capabilities and limitations of WASM in the browser</li>
</ul>
<h2>Try It Yourself!<span id="try-it-yourself"></span><a href="#try-it-yourself" aria-label="Permalink for this section"></a></h2>
<p>If you want to experiment with this SQL-powered monstrosity yourself, I've put the <a target="_blank" rel="noreferrer" href="https://github.com/patricktrainer/duckdb-doom">full source code on GitHub<span> (opens in a new tab)</span></a>. It's about 500 lines of code total, with roughly half being SQL and half JavaScript.</p>
<p>I'd love to see how far others can push this concept. Could you add textures? Implement a more complex game world? Add enemies that move and shoot back? The SQL rabbit hole goes deep!</p>
<h2>What's Next?<span id="whats-next"></span><a href="#whats-next" aria-label="Permalink for this section"></a></h2>
<p>This experiment has me wondering what other unconventional uses might exist for DuckDB-WASM in the browser. Physics simulations? Path finding algorithms? Full-text search engines?</p>
<p>Sometimes the most interesting projects come from using tools in ways they were never intended to be used. What weird DuckDB-WASM experiment would you like to see next?</p><small>not made by a ü§ñ</small></article><!--$--><!--/$--></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Whistleblower: DOGE Siphoned NLRB Case Data (765 pts)]]></title>
            <link>https://krebsonsecurity.com/2025/04/whistleblower-doge-siphoned-nlrb-case-data/</link>
            <guid>43760801</guid>
            <pubDate>Tue, 22 Apr 2025 11:04:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://krebsonsecurity.com/2025/04/whistleblower-doge-siphoned-nlrb-case-data/">https://krebsonsecurity.com/2025/04/whistleblower-doge-siphoned-nlrb-case-data/</a>, See on <a href="https://news.ycombinator.com/item?id=43760801">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
												<p>A security architect with the <strong>National Labor Relations Board</strong> (NLRB) alleges that employees from <strong>Elon Musk</strong>‚Äòs <strong>Department of Government Efficiency</strong> (DOGE) transferred gigabytes of sensitive data from agency case files in early March, using short-lived accounts configured to leave few traces of network activity. The NLRB whistleblower said the unusual large data outflows coincided with multiple blocked login attempts from an Internet address in Russia that tried to use valid credentials for a newly-created DOGE user account.</p>
<div id="attachment_71048"><p><img aria-describedby="caption-attachment-71048" decoding="async" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/beruliscomplaint.png" alt="" width="749" height="823" srcset="https://krebsonsecurity.com/wp-content/uploads/2025/04/beruliscomplaint.png 786w, https://krebsonsecurity.com/wp-content/uploads/2025/04/beruliscomplaint-768x844.png 768w, https://krebsonsecurity.com/wp-content/uploads/2025/04/beruliscomplaint-782x860.png 782w" sizes="(max-width: 749px) 100vw, 749px"></p><p id="caption-attachment-71048">The cover letter from Berulis‚Äôs whistleblower statement, sent to the leaders of the Senate Select Committee on Intelligence.</p></div>
<p>The allegations came in an April 14 letter to the Senate Select Committee on Intelligence, signed by <strong>Daniel J. Berulis</strong>, a 38-year-old security architect at the NLRB.</p>
<p><strong>NPR</strong>, which was the <a href="https://www.npr.org/2025/04/15/nx-s1-5355896/doge-nlrb-elon-musk-spacex-security" target="_blank" rel="noopener">first to report</a> on Berulis‚Äôs whistleblower complaint, says NLRB is a small, independent federal agency that investigates and adjudicates complaints about unfair labor practices, and stores ‚Äúreams of potentially sensitive data, from confidential information about employees who want to form unions to proprietary business information.‚Äù</p>
<p>The complaint documents a one-month period beginning March 3, during which DOGE officials reportedly demanded the creation of all-powerful ‚Äútenant admin‚Äù accounts in NLRB systems that were to be exempted from network logging activity that would otherwise keep a detailed record of all actions taken by those accounts.</p>
<p>Berulis said the new DOGE accounts had unrestricted permission to read, copy, and alter information contained in NLRB databases. The new accounts also could restrict log visibility, delay retention, route logs elsewhere, or even remove them entirely ‚Äî top-tier user privileges that neither Berulis nor his boss possessed.</p>
<p>Berulis writes that on March 3, a black SUV accompanied by a police escort arrived at his building ‚Äî the NLRB headquarters in Southeast Washington, D.C. The DOGE staffers did not speak with Berulis or anyone else in NLRB‚Äôs IT staff, but instead met with the agency leadership.</p>
<p>‚ÄúOur acting chief information officer told us not to adhere to standard operating procedure with the DOGE account creation, and there was to be no logs or records made of the accounts created for DOGE employees, who required the highest level of access,‚Äù Berulis wrote of their instructions after that meeting.</p>
<p>‚ÄúWe have built in roles that auditors can use and have used extensively in the past but would not give the ability to make changes or access subsystems without approval,‚Äù he continued. ‚ÄúThe suggestion that they use these accounts was not open to discussion.‚Äù</p>
<p>Berulis found that on March 3 one of the DOGE accounts created an opaque, virtual environment known as a ‚Äúcontainer,‚Äù which can be used to build and run programs or scripts without revealing its activities to the rest of the world. Berulis said the container caught his attention because he polled his colleagues and found none of them had ever used containers within the NLRB network.</p>
<p>Berulis said he also noticed that early the next morning ‚Äî between approximately 3 a.m. and 4 a.m. EST on Tuesday, March 4&nbsp; ‚Äî there was a large increase in outgoing traffic from the agency. He said it took several days of investigating with his colleagues to determine that one of the new accounts had transferred approximately 10 gigabytes worth of data from the NLRB‚Äôs <strong>NxGen</strong> case management system.</p>
<p>Berulis said neither he nor his co-workers had the necessary network access rights to review which files were touched or transferred ‚Äî or even where they went. But his complaint notes the NxGen database contains sensitive information on unions, ongoing legal cases, and corporate secrets.</p>
<p>‚ÄúI also don‚Äôt know if the data was only 10gb in total or whether or not they were consolidated and compressed prior,‚Äù Berulis told the senators. ‚ÄúThis opens up the possibility that even more data was exfiltrated. Regardless, that kind of spike is extremely unusual because data almost never directly leaves NLRB‚Äôs databases.‚Äù</p>
<p>Berulis said he and his colleagues grew even more alarmed when they noticed nearly two dozen login attempts from a Russian Internet address (83.149.30,186) that presented valid login credentials for a DOGE employee account ‚Äî one that had been created just minutes earlier. Berulis said those attempts were all blocked thanks to rules in place that prohibit logins from non-U.S. locations.</p>
<p>‚ÄúWhoever was attempting to log in was using one of the newly created accounts that were used in the other DOGE related activities and it appeared they had the correct username and password due to the authentication flow only stopping them due to our no-out-of-country logins policy activating,‚Äù Berulis wrote. ‚ÄúThere were more than 20 such attempts, and what is particularly concerning is that many of these login attempts occurred within 15 minutes of the accounts being created by DOGE engineers.‚Äù</p>
<p>According to Berulis, the naming structure of one Microsoft user account connected to the suspicious activity suggested it had been created and later deleted for DOGE use in the NLRB‚Äôs cloud systems: ‚Äú<strong>DogeSA_2d5c3e0446f9@nlrb.microsoft.com</strong>.‚Äù He also found other new Microsoft cloud administrator accounts with nonstandard usernames, including ‚Äú<strong>Whitesox, Chicago M.</strong>‚Äù and ‚Äú<strong>Dancehall, Jamaica R</strong>.‚Äù</p>
<div id="attachment_71042"><p><a href="https://krebsonsecurity.com/wp-content/uploads/2025/04/whitesoxchicago.png" target="_blank" rel="noopener"><img aria-describedby="caption-attachment-71042" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/whitesoxchicago.png" alt="" width="749" height="556" srcset="https://krebsonsecurity.com/wp-content/uploads/2025/04/whitesoxchicago.png 1072w, https://krebsonsecurity.com/wp-content/uploads/2025/04/whitesoxchicago-768x570.png 768w, https://krebsonsecurity.com/wp-content/uploads/2025/04/whitesoxchicago-782x581.png 782w" sizes="(max-width: 749px) 100vw, 749px"></a></p><p id="caption-attachment-71042">A screenshot shared by Berulis showing the suspicious user accounts.</p></div>
<p>On March 5, Berulis documented that a large section of logs for recently created network resources were missing, and a network watcher in <strong>Microsoft Azure</strong> was set to the ‚Äúoff‚Äù state, meaning it was no longer collecting and recording data like it should have.</p>
<p>Berulis said he discovered someone had downloaded three external code libraries from <strong>GitHub</strong> that neither NLRB nor its contractors ever use. A ‚Äúreadme‚Äù file in one of the code bundles explained it was created to rotate connections through a large pool of cloud Internet addresses that serve ‚Äúas a proxy to generate pseudo-infinite IPs for web scraping and brute forcing.‚Äù Brute force attacks involve automated login attempts that try many credential combinations in rapid sequence.</p>
<p>The complaint alleges that by March 17 it became clear the NLRB no longer had the resources or network access needed to fully investigate the odd activity from the DOGE accounts, and that on March 24, the agency‚Äôs associate chief information officer had agreed the matter should be reported to <strong>US-CERT</strong>. Operated by the Department of Homeland Security‚Äôs <strong>Cybersecurity and Infrastructure Security Agency</strong> (CISA), US-CERT provides on-site cyber incident response capabilities to federal and state agencies.</p>
<p>But Berulis said that between April 3 and 4, he and the associate CIO were informed that ‚Äúinstructions had come down to drop the US-CERT reporting and investigation and we were directed not to move forward or create an official report.‚Äù Berulis said it was at this point he decided to go public with his findings.<span id="more-71035"></span></p>
<div id="attachment_71050"><p><a href="https://krebsonsecurity.com/wp-content/uploads/2025/04/berulis-mar4-spike.png" target="_blank" rel="noopener"><img aria-describedby="caption-attachment-71050" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/berulis-mar4-spike.png" alt="" width="685" height="908"></a></p><p id="caption-attachment-71050">An email from Daniel Berulis to his colleagues dated March 28, referencing the unexplained traffic spike earlier in the month and the unauthorized changing of security controls for user accounts.</p></div>
<p><strong>Tim Bearese</strong>, the NLRB‚Äôs acting press secretary, told NPR that DOGE neither requested nor received access to its systems, and that ‚Äúthe agency conducted an investigation after Berulis raised his concerns but ‚Äòdetermined that no breach of agency systems occurred.'‚Äù The NLRB did not respond to questions from KrebsOnSecurity.</p>
<p>Nevertheless, Berulis has shared a number of supporting screenshots showing agency email discussions about the unexplained account activity attributed to the DOGE accounts, as well as NLRB security alerts from Microsoft about network anomalies observed during the timeframes described.</p>
<p>As <strong>CNN</strong> <a href="https://www.cnn.com/2025/02/15/business/nlrb-trump-musk-workers/index.html#:~:text=Musk's%20SpaceX%20brought%20a%20case,it%20for%20firing%20some%20employees." target="_blank" rel="noopener">reported</a> last month, the NLRB has been effectively hobbled since <strong>President Trump</strong> fired three board members, leaving the agency without the quorum it needs to function.</p>
<p>‚ÄúDespite its limitations, the agency had become a thorn in the side of some of the richest and most powerful people in the nation ‚Äî notably Elon Musk, Trump‚Äôs key supporter both financially and arguably politically,‚Äù CNN wrote.</p>
<p>Both <strong>Amazon</strong> and Musk‚Äôs <strong>SpaceX</strong> have <a href="https://apnews.com/article/amazon-nlrb-unconstitutional-spacex-elon-musk-ab42977117d883e97110a7bf8e8b257f" target="_blank" rel="noopener">been suing</a> the NLRB over complaints the agency filed in disputes about workers‚Äô rights and union organizing, arguing that the NLRB‚Äôs very existence is unconstitutional. On March 5, a U.S. appeals court <a href="https://www.reuters.com/legal/government/musks-spacex-loses-early-legal-challenge-us-labor-boards-powers-2025-03-05/" target="_blank" rel="noopener">unanimously rejected</a> Musk‚Äôs claim that the NLRB‚Äôs structure somehow violates the Constitution.</p>
<p>Berulis shared screenshots with KrebsOnSecurity showing that on the day the NPR published its story about his claims (April 14), the deputy CIO at NLRB sent an email stating that administrative control had been removed from all employee accounts. Meaning, suddenly none of the IT employees at the agency could do their jobs properly anymore, Berulis said.</p>
<div id="attachment_71043"><p><a href="https://krebsonsecurity.com/wp-content/uploads/2025/04/noadmin-nlrb.png" target="_blank" rel="noopener"><img aria-describedby="caption-attachment-71043" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/noadmin-nlrb.png" alt="" width="750" height="377" srcset="https://krebsonsecurity.com/wp-content/uploads/2025/04/noadmin-nlrb.png 1046w, https://krebsonsecurity.com/wp-content/uploads/2025/04/noadmin-nlrb-768x386.png 768w, https://krebsonsecurity.com/wp-content/uploads/2025/04/noadmin-nlrb-782x393.png 782w" sizes="(max-width: 750px) 100vw, 750px"></a></p><p id="caption-attachment-71043">An email from the NLRB‚Äôs associate chief information officer Eric Marks, notifying employees they will lose security administrator privileges.</p></div>
<p>Berulis shared a screenshot of an agency-wide email dated April 16 from NLRB director <strong>Lasharn Hamilton</strong>&nbsp;saying DOGE officials had requested a meeting, and reiterating claims that the agency had no prior ‚Äúofficial‚Äù contact with any DOGE personnel. The message informed NLRB employees that two DOGE representatives would be detailed to the agency part-time for several months.</p>
<div id="attachment_71041"><p><img aria-describedby="caption-attachment-71041" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/nlrb-dir-emailapril14.png" alt="" width="551" height="568"></p><p id="caption-attachment-71041">An email from the NLRB Director Lasharn Hamilton on April 16, stating that the agency previously had no contact with DOGE personnel.</p></div>
<p>Berulis told KrebsOnSecurity he was in the process of filing a support ticket with Microsoft to request more information about the DOGE accounts when his network administrator access was restricted. Now, he‚Äôs hoping lawmakers will ask Microsoft to provide more information about what really happened with the accounts.</p>
<p>‚ÄúThat would give us way more insight,‚Äù he said. ‚ÄúMicrosoft has to be able to see the picture better than we can. That‚Äôs my goal, anyway.‚Äù</p>
<p>Berulis‚Äôs attorney told lawmakers that on April 7, while his client and legal team were preparing the whistleblower complaint, someone physically taped a threatening note to Mr. Berulis‚Äôs home door with photographs ‚Äî taken via drone ‚Äî of him walking in his neighborhood.</p>
<p>‚ÄúThe threatening note made clear reference to this very disclosure he was preparing for you, as the proper oversight authority,‚Äù reads a preface by Berulis‚Äôs attorney <strong>Andrew P. Bakaj</strong>. ‚ÄúWhile we do not know specifically who did this, we can only speculate that it involved someone with the ability to access NLRB systems.‚Äù</p>
<p>Berulis said the response from friends, colleagues and even the public has been largely supportive, and that he doesn‚Äôt regret his decision to come forward.</p>
<p>‚ÄúI didn‚Äôt expect the letter on my door or the pushback from [agency] leaders,‚Äù he said. ‚ÄúIf I had to do it over, would I do it again? Yes, because it wasn‚Äôt really even a choice the first time.‚Äù</p>
<p>For now, Mr. Berulis is taking some paid family leave from the NLRB. Which is just as well, he said, considering he was stripped of the tools needed to do his job at the agency.</p>
<p>‚ÄúThey came in and took full administrative control and locked everyone out, and said limited permission will be assigned on a need basis going forward‚Äù Berulis said of the DOGE employees. ‚ÄúWe can‚Äôt really do anything, so we‚Äôre literally getting paid to count ceiling tiles.‚Äù</p>
<p>Further reading: <a href="https://whistlebloweraid.org/wp-content/uploads/2025/04/2025_0414_Berulis-Disclosure-with-Exhibits.s.pdf" target="_blank" rel="noopener">Berulis‚Äôs complaint</a> (PDF).</p>
											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SerenityOS is a love letter to '90s user interfaces (169 pts)]]></title>
            <link>https://serenityos.org/</link>
            <guid>43760626</guid>
            <pubDate>Tue, 22 Apr 2025 10:24:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://serenityos.org/">https://serenityos.org/</a>, See on <a href="https://news.ycombinator.com/item?id=43760626">Hacker News</a></p>
<div id="readability-page-1" class="page">
<img src="https://serenityos.org/banner2.png" alt="SerenityOS">

<b>A graphical Unix-like operating system for desktop computers!</b>

<p>SerenityOS is a love letter to '90s user interfaces with a custom Unix-like core. It flatters with sincerity by stealing beautiful ideas from various other systems.</p>

<p>Roughly speaking, the goal is a marriage between the aesthetic of late-1990s productivity software and the power-user accessibility of late-2000s *nix.</p>

<p>This is a system by us, for us, based on the things we like.</p>

<p><b>Project:</b></p>
<ul>
    <li><a href="https://github.com/SerenityOS/serenity">SerenityOS on GitHub</a></li>
    <li><a href="https://discord.gg/serenityos">SerenityOS Discord Server</a> <span color="red">(join here to chat!)</span></li>
    <li><a href="https://man.serenityos.org/">SerenityOS man pages</a></li>
    <li><a href="https://serenityos.org/faq/">Frequently asked questions</a></li>
    <li><a href="https://serenityos.org/bounty/">Bug bounty program</a></li>
</ul>

<p><b>Birthday posts:</b></p>
<ul>
    <li><a href="https://serenityos.org/happy/5th/">Happy 5th birthday, SerenityOS!</a></li>
    <li><a href="https://serenityos.org/happy/4th/">Happy 4th birthday! The 4th year of SerenityOS</a></li>
    <li><a href="https://serenityos.org/happy/3rd/">Happy 3rd birthday! SerenityOS: Year 3 in review</a></li>
    <li><a href="https://serenityos.org/happy/2nd/">Happy 2nd birthday! SerenityOS: The second year</a></li>
    <li><a href="https://serenityos.org/happy/1st/">Happy 1st birthday! SerenityOS: From zero to HTML in a year</a></li>
</ul>

<p><b>Screenshot:</b></p>

<img src="https://serenityos.org/screenshot-b36968c.png">



</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Attacking My Landlord's Boiler (337 pts)]]></title>
            <link>https://blog.videah.net/attacking-my-landlords-boiler/</link>
            <guid>43759073</guid>
            <pubDate>Tue, 22 Apr 2025 04:27:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.videah.net/attacking-my-landlords-boiler/">https://blog.videah.net/attacking-my-landlords-boiler/</a>, See on <a href="https://news.ycombinator.com/item?id=43759073">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div><h2>Attacking My Landlord's Boiler</h2><p><label>Posted on <time datetime="2025-04-22T00:00:00+00:00">April 22, 2025</time> ‚Ä¢ 10 minute read</label></p></div><figure><div><picture><img alt="Very bright red photo of a Macbook plugged into a HackRF radio, with my thermostat sitting next to it" height="500px" src="https://blog.videah.net/processed_images/banner.929433b287ec442f.png"></picture></div></figure><div><p>Please do your due diligence and check local laws before attempting anything I do in this post. Transmitting radio signals can become legally problematic <em>very quickly</em>, and the band I specifically transmit on here (<code>868Mhz</code>) is <strong>illegal</strong> in the United States without a license. I'd rather you didn't have men in suits knocking on your door on my account. You've been warned!</p></div><p>A little while ago I moved into an apartment to live on my own for the first time. This has given me a decent amount of newfound freedom to sculpt my living environment to my liking, but not enough where I could start knocking down walls. I have a landlord (and a deposit!) to think about, after all. üôÇ</p><p>While it isn't near the level of knocking down walls, I was finding heating my apartment rather frustrating. The boiler's thermostat installed by my landlord is a single radio-controlled unit that uses a built-in temperature sensor to modulate the heating on and off to meet a target temperature. This presents a few first-world problems:</p><ul><li>The temperature sensor can only sample a single room in the apartment, which heats unevenly.</li><li>That room is dependent on the physical proximity of the thermostat's controls, which can be annoying to use if I might be in bed and the controls are in the living room or vice versa.</li><li>If I forget to turn the heating off before I leave the apartment, I'm wasting a lot of costly energy.</li></ul><p>I automate things around my apartment with <a href="https://www.home-assistant.io/">Home Assistant</a>, and I wanted to be able to do the same here. There are a lot of off-the-shelf solutions for this, obviously, but to get back to the knocking-down-walls comparison, they would require my landlord's cooperation and likely a visit from an electrician. I don't want that!</p><p>Instead, here's how I figured out how to control my apartment's heating in a way that leaves no trace using the existing thermostat already fitted by my landlord, and maybe learn a bit about radios along the way.</p><h2 id="where-do-we-start">Where Do We Start?</h2><p>I knew that the thermostat communicated with the boiler through some kind of radio protocol. We could try to reverse-engineer the protocol from scratch, but as I'll get into later, that turns out to be <em>very involved</em> and way beyond my minimal radio skills.</p><p>I eventually decided it was a lot easier to attempt something called a <a href="https://en.wikipedia.org/wiki/Replay_attack#Remote_keyless-entry_system_for_vehicles">Replay Attack</a>. This involves cloning the signals sent between the boiler and the thermostat, and then pretending <em>we</em> are the thermostat by re-broadcasting the signals. This way we don't need to understand the protocol, just replay it.</p><div><p>This approach requires some degree of luck and crossing your fingers. Replay attacks can be pretty easily thwarted by using an incrementing counter in the communications to nullify previous signals, ignoring signals with a counter value you've already seen. I was lucky the thermostat does not do this‚Äîyour mileage may vary!</p></div><h2 id="initial-reconnaissance">Initial Reconnaissance</h2><p>The first thing I did was check to see if there was any information online about my specific thermostat. I came across <a href="https://www.wolseley.co.uk/product/center-rf-wireless-programmable-boiler-thermostat">a listing for the exact model I had</a>, along with a datasheet in the attachments section. The section on <em>RF Communication</em> is exactly what I was looking for:</p><figure><picture><img decoding="async" loading="lazy" src="https://blog.videah.net/attacking-my-landlords-boiler/images/boiler_datasheet_rf.png"></picture></figure><p>From this, we know the thermostat communicates around the <code>868Mhz</code> range. The <code>Protocol: Encrypted</code> part was initially a bit concerning, but it turned out to not be a problem.</p><p>The first issue I'm running into here is that there are shockingly few resources on cloning a <code>868Mhz</code> signal online. Most beefy resources were about using LoRa/Meshtastic. I would come across a lot of Reddit posts of people trying to do the same thing as me for things like ceiling fans and garage doors, but nobody seemed to have any answers... üò≠</p><div><p>I <em>suspect</em> this is because unlicensed <code>868Mhz</code> transmission is illegal in the US and nobody cares about Europe, but who really knows. My life would be <em>so much</em> easier if it were <code>433Mhz</code> instead, as there is a plethora of consumer-facing tools for communicating on that band.</p></div><h2 id="seeing-signals">Seeing Signals</h2><p>So without much to go on, I thought the first thing to do would be to actually <em>see</em> the radio packets and inspect them. I'd read about <a href="https://en.wikipedia.org/wiki/Software-defined_radio">Software-Defined Radios</a> in the past and guessed it'd be my best bet. Most SDRs are <em>really</em> expensive, so I went with the budget <a href="https://www.aliexpress.com/item/1005005952566458.html?spm=a2g0o.order_list.order_list_main.165.295b1802ErX1lM">RTL-SDR V4</a> off of AliExpress. (This actually ended up being somewhat unnecessary for reasons we'll eventually get to!)</p><div><p>You might have heard of the infamous <a href="https://flipperzero.one/">Flipper Zero</a> and its ability to clone and replay signals. Maybe you're like me and consider using it in this situation, but be warned that the Flipper is <strong>NOT</strong> an SDR. The Flipper is very stingy about what frequencies it can operate on. I found this out the hard way when I borrowed one and assumed all was hopeless when it wouldn't work.</p></div><p>After it arrived, I hooked it up to my laptop with the <a href="https://www.sdrpp.org/">SDR++</a> software just to see if it worked and get an initial glimpse of my thermostat yapping. After pressing the thermostat's buttons a few times, I managed to see the waterfall light up!</p><figure><picture><img decoding="async" loading="lazy" src="https://blog.videah.net/attacking-my-landlords-boiler/images/sdr_plus_plus.png"></picture><figcaption>The "waterfall" at 868Mhz showing long horizontal blips.</figcaption></figure><div><p>Ignore the solid vertical line on the waterfall‚Äîthis is just a common byproduct of using a really cheap SDR, and for me it appears nearby to any frequency I'm inspecting.</p></div><p>This step isn't super important, but we can then try to use the <a href="https://github.com/merbanan/rtl_433">rtl_433</a> tool (it works on other frequencies despite the name) to see if the thermostat is speaking a known protocol. More obscure devices might not work here!</p><figure><picture><img decoding="async" loading="lazy" src="https://blog.videah.net/attacking-my-landlords-boiler/images/rtl_443_results.png"></picture></figure><p>It seems like this thermostat speaks the same protocol as another Honeywell one. The demand attribute sets whether the boiler is on (1) or off (0), and then the boiler responds with an acknowledgement (presumably so the thermostat can determine if it's out of range).</p><h2 id="trying-to-yell-back">Trying To Yell Back</h2><p>Now that we've actually seen the back-and-forth communication, we want to be able to send some packets ourselves and puppeteer the boiler as if we were the thermostat.</p><figure><picture><img decoding="async" loading="lazy" src="https://blog.videah.net/attacking-my-landlords-boiler/images/challenger.png"></picture><figcaption>Using a 868Mhz Challenger Dev Board, first failed attempt...</figcaption></figure><p>This was the step I got stuck on for <em>months</em>. I was trying the "smart" route of attempting to reverse-engineer and reconstruct the packets <em>by hand</em> using <a href="https://github.com/jopohl/urh">URH</a> and then broadcasting them with very cheap <code>868Mhz</code> microcontroller boards. I can safely say this was all wayyy outside of my skill set. None of the boards were really designed to talk to anything other than <em>the exact same board</em>, and going any further than that required poking at radio registers in ways I wasn't comfortable doing.</p><h2 id="the-hackrf">The HackRF</h2><figure><picture><img decoding="async" loading="lazy" src="https://blog.videah.net/attacking-my-landlords-boiler/images/hackrf-board.png"></picture><figcaption>The official HackRF One board, going on to spawn many AliExpress clones.</figcaption></figure><p>I decided to then go for the <strong>sledgehammer</strong> approach: use a full-blown SDR to just replay the exact same signal without a care for what the signal actually contains. But the cheap RTL-SDR I got earlier only supports receiving, not broadcasting. SDRs that can broadcast are usually <em>hundreds of dollars</em>.</p><p>I say <em>usuallyyy</em> because one of the most common broadcast-capable SDRs, the <code>HackRF One</code> (usually upwards of $400), had numerous clones available on AliExpress for a fraction of the price‚Äîjust $40.</p><div><p>And then I say <em>haddd</em> because, writing this months later, AliExpress has removed pretty much every listing you could find just searching "HackRF". From my understanding, they were getting nabbed at customs in a lot of countries that were getting pissy about importing a scawy hacking tool, so they just decided to nuke all the listings rather than deal with it. Newer clones can be bought from <a href="https://opensourcesdrlab.com/products/r10c-hrf-sdr-software-defined-1mhz-to-6ghz-mainboard-development-board-kit?VariantsId=10158">here</a>, but they aren't nearly as cheap as they used to be... üò≠</p></div><p>There are some obvious ethical (and probably a few technical) problems with cheap clones of what is meant to be open-source hardware, but I figured it'd be fine for my small use case. Please <a href="https://greatscottgadgets.com/hackrf/one">support the original hardware project</a> if it's within your means to!</p><div><p>As I kinda alluded to earlier, this makes the need for the RTL-SDR sort of redundant? But I guess it's always good to have another SDR just to confirm that we're not polluting other frequencies.</p></div><h2 id="actually-yelling-back">Actually Yelling Back</h2><p>With the HackRF in hand, we can use the <a href="https://manpages.debian.org/unstable/hackrf/hackrf_transfer.1.en.html">hackrf_transfer tool</a> to record signals and, most importantly, <em>replay</em> signals. I perform these commands and then press the appropriate controls on the thermostat to write the signals to individual files:</p><pre data-lang="shell"><code data-lang="shell"><span># We set the frequency to 868.3Mhz and the sample rate to 2000000.
</span><span>hackrf_transfer -r turn_off.raw -f 868300000 -s 2000000
</span><span>hackrf_transfer -r turn_on.raw -f 868300000 -s 2000000
</span></code></pre><p>And then we can try and turn the boiler off and on from CLI like this:</p><pre data-lang="shell"><code data-lang="shell"><span># We use -a to turn on the amplifier and -x to increase the gain a tad.
</span><span>hackrf_transfer -t turn_off.raw -f 868300000 -s 2000000 -a 1 -x 23
</span><span>hackrf_transfer -t turn_on.raw -f 868300000 -s 2000000 -a 1 -x 23
</span></code></pre><p>After doing this, I could hear the physical relay inside of my boiler turning on and off!</p><h2 id="automating-the-whole-thing">Automating The Whole Thing</h2><figure><picture><img decoding="async" loading="lazy" src="https://blog.videah.net/attacking-my-landlords-boiler/images/hackrf_horizontal.png"></picture><figcaption>My HackRF clone in a 3D printed case, plugged into the server.</figcaption></figure><p>I have the HackRF plugged into a powered USB hub connected to my Home Assistant server. I wrote a very basic web server that simply shells out to the transmit commands above in a Docker container.</p><p>Then with an <a href="https://github.com/Limych/ha-average">Average Sensor Plugin</a> and the config YAML below:</p><pre data-lang="yaml"><code data-lang="yaml"><span>command_line</span><span>:
</span><span>  - </span><span>switch</span><span>:
</span><span>    </span><span>name</span><span>: </span><span>Boiler
</span><span>    </span><span>command_on</span><span>: "</span><span>curl http://docker-vm:1111/api/on</span><span>"
</span><span>    </span><span>command_off</span><span>: "</span><span>curl http://docker-vm:1111/api/off</span><span>"
</span><span>
</span><span>sensor</span><span>:
</span><span>  - </span><span>platform</span><span>: </span><span>average
</span><span>    </span><span>name</span><span>: "</span><span>Average Temperature</span><span>"
</span><span>    </span><span>entities</span><span>:
</span><span>      - </span><span>sensor.bedroom_thermostat_temperature
</span><span>      - </span><span>sensor.kitchen_thermostat_temperature
</span><span>
</span><span>climate</span><span>:
</span><span>  - </span><span>platform</span><span>: </span><span>generic_thermostat
</span><span>  </span><span>name</span><span>: </span><span>Boiler Thermostat
</span><span>  </span><span>heater</span><span>: </span><span>switch.boiler
</span><span>  </span><span>target_sensor</span><span>: </span><span>sensor.average_temperature
</span></code></pre><p>We have a working controllable thermostat! ü§Ø</p><p>At this point I was just happy to have the thing <em>working</em> after so many months, so I'll be the first to admit this setup with Home Assistant is a bit slapdash and could use some cleanup. It'd be better to write a proper plugin and control the radio directly instead of shelling out to the CLI. Relying on <code>curl</code> to heat my apartment is maybe a bit cursed?</p><h2 id="was-it-worth-it">Was It Worth It?</h2><figure><picture><img decoding="async" loading="lazy" src="https://blog.videah.net/attacking-my-landlords-boiler/images/boiler_grafana.png"></picture><figcaption>Grafana graph showing the temperatures following the target one.</figcaption></figure><p>I've been using this setup to control the heating of my apartment since the beginning of December and haven't had any issues since! It's super convenient to dial in the temperature from my phone, and the automations I have make me feel like this project was really worth the work.</p><p>I have some basic automations like having the temperature go down when I'm sleeping and then up in the morning in time for me waking up, but I also have it so the heating turns off when I go into town and turns back on when I'm just a few train stops away so my place is nice and toasty for me getting home!</p><p>The only thing I'm not happy with is needing to use a very powerful and versatile radio like the HackRF for something as simple as a boiler on/off switch. But I'd rather use something overkill and have it work than spend ages trying to force smaller radios to do my bidding.</p><p>The important thing is I'm not as cold as I used to be! üê∫</p><hr><div><h3>There was a comment section here. It's gone now.</h3><p>As of March 16th, 2025 the United Kingdom's <a href="https://en.wikipedia.org/wiki/Online_Safety_Act_2023">Online Safety Act</a> has gone into full effect. The law presents a lot of challenges for hobbyist websites like this one to present any user-to-user content (like y'know, <i>blog comments</i>) and comes with some pretty serious repercussions for non-compliance.</p><p>The odds of Ofcom (the regulator who's job is to enforce this) kicking my door down over this blog are low if we are being honest with ourselves. But the odds are at least somewhere above zero and the punishment is a life ruining <strong>¬£18 million fine(!!)</strong> so it's just not worth the risk. taking the risk.</p><p>A kind lawyer has written up the <a href="https://onlinesafetyact.co.uk/ra_blog_with_comments/">implications of this law for self-run blogs like this one</a> and the only way to guarantee that I am not in-scope would be to manually review all comments made before being available to the public. Not to be a big baby about it all but I don't really want to do this! I liked my current setup!</p><p>So I guess as a little act of protest and to hedge against any risk I've removed the comment section entirely. Sorry about that!</p><p>If you want more information on this and how much this sucks for the hobbyist internet <a href="https://lobste.rs/s/ukosa1/uk_users_lobsters_needs_your_help_with#c_xevn8a">please read this writeup</a>.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Prolog Adventure Game (153 pts)]]></title>
            <link>https://github.com/stefanrodrigues2/Prolog-Adventure-game</link>
            <guid>43757916</guid>
            <pubDate>Tue, 22 Apr 2025 00:25:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/stefanrodrigues2/Prolog-Adventure-game">https://github.com/stefanrodrigues2/Prolog-Adventure-game</a>, See on <a href="https://news.ycombinator.com/item?id=43757916">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-turbo-body="">
      



    <div>
      <p><a href="#start-of-content" data-skip-target-assigned="false">Skip to content</a>

      <span data-view-component="true">
    <span data-view-component="true"></span>
</span></p>

<react-partial partial-name="keyboard-shortcuts-dialog" data-ssr="false" data-attempted-ssr="false">
  
  
  
</react-partial>




      

          

              


<header role="banner" data-is-top="true" data-color-mode="light" data-light-theme="light" data-dark-theme="dark">
  <h2>Navigation Menu</h2>

  

  <div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_advanced_security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_advanced_security_link_product_navbar&quot;}" href="https://github.com/security/advanced-security">
      
      <div>
        <p>GitHub Advanced Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code Review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_product_navbar&quot;}" href="https://github.com/features/code-search">
      
      <div>
        <p>Code Search</p><p>
        Find more, search less
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
                    <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;events_amp_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;events_amp_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      Events &amp; Webinars

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ebooks_amp_whitepapers&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ebooks_amp_whitepapers_link_resources_navbar&quot;}" href="https://github.com/resources/whitepapers">
      Ebooks &amp; Whitepapers

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      
      <div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

                </ul>
              </div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

                </ul>
              </div>
              
          </div>
</li>


                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:stefanrodrigues2/Prolog-Adventure-game" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="M4vuOji49guaighiHrSnS9--O-oFMi09HV2wYCAhD4N7BMxFYquC3d1bQxroHie4_cOQeZWpBnUJvUDD_wm6jQ" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="stefanrodrigues2/Prolog-Adventure-game" data-current-org="" data-current-owner="stefanrodrigues2" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>


            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=stefanrodrigues2%2FProlog-Adventure-game" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/stefanrodrigues2/Prolog-Adventure-game&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="47b5bb1e96ab2a5691eed9fb85bb5f1cadd34712d11c688d3d741b64a453840e" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>

              
          
        </p></div>
      </div>
</header>

      
    </div>

  








    


    






  <div itemscope="" itemtype="http://schema.org/SoftwareSourceCode" data-commit-hovercards-enabled="" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="" data-project-hovercards-enabled="">
    <main id="js-repo-pjax-container">
      
  





    






  
  

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance">
    <div data-view-component="true" id="repo-content-pjax-container">      










<react-partial partial-name="repos-overview" data-ssr="true" data-attempted-ssr="true">
  
  
  <div data-target="react-partial.reactRoot"><div itemscope="" itemtype="https://schema.org/abstract"><h2>Repository files navigation</h2><nav aria-label="Repository files"><ul role="list"><li><a href="#" aria-current="page"><span data-component="icon"></span><span data-component="text" data-content="README">README</span></a></li></ul></nav></div><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Prolog-Adventure-game</h2><a id="user-content-prolog-adventure-game" aria-label="Permalink: Prolog-Adventure-game" href="#prolog-adventure-game"></a></p>
<p dir="auto">Adventure game with prolog language. The player has to find the treasure hidden inside the castle to win the game. A total of 3 lives will be available. Implemented interactive gameplay mechanics such as locked doors, hidden objects, incomplete objects, limited resources, and inventory management.</p>
</article></div></div>
</react-partial>

      </div>

</turbo-frame>


    </main>
  </div>

          



    <ghcc-consent id="ghcc" data-initial-cookie-consent-allowed="" data-cookie-consent-required="true"></ghcc-consent>



  

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open="">
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog="">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[101 BASIC Computer Games (168 pts)]]></title>
            <link>https://github.com/maurymarkowitz/101-BASIC-Computer-Games</link>
            <guid>43757341</guid>
            <pubDate>Mon, 21 Apr 2025 22:47:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/maurymarkowitz/101-BASIC-Computer-Games">https://github.com/maurymarkowitz/101-BASIC-Computer-Games</a>, See on <a href="https://news.ycombinator.com/item?id=43757341">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<tr>
<td>ACEYDU</td>
<td>Play acey-ducey with the computer</td>
<td>13</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>AMAZIN</td>
<td>Computer constructs a maze</td>
<td>15</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>ANIMAL</td>
<td>Computer guesses animals and learns new ones from you</td>
<td>17</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>AWARI</td>
<td>Ancient game of rotating beans in pits</td>
<td>19</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>BAGLES</td>
<td>Guess a mystery 3-digit number by logic</td>
<td>22</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>BANNER</td>
<td>Prints any message on a large banner</td>
<td>24</td>
<td>EduSystem 50</td>
</tr>
<tr>
<td>BASBAL</td>
<td>Baseball game</td>
<td>26</td>
<td>EduSystem 15/30/35, uses CHAIN</td>
</tr>
<tr>
<td>BASKET</td>
<td>Basketball game</td>
<td>29</td>
<td>Dartmouth?</td>
</tr>
<tr>
<td>BATNUM</td>
<td>Match wits in a battle of numbers vs. the computer</td>
<td>32</td>
<td>Dartmouth?</td>
</tr>
<tr>
<td>BATTLE</td>
<td>Decode a matrix to locate enemy battleship</td>
<td>34</td>
<td>HP?</td>
</tr>
<tr>
<td>BINGO</td>
<td>Computer prints your card and calls the numbers</td>
<td>36</td>
<td>DECsystem 10</td>
</tr>
<tr>
<td>BLKJAC</td>
<td>Blackjack (very comprehensive), Las Vegas rules</td>
<td>39</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>BLKJAK</td>
<td>Blackjack (standard game)</td>
<td>42</td>
<td>EduSystem 30</td>
</tr>
<tr>
<td>BOAT</td>
<td>Destroy a gunboat from your submarine</td>
<td>43</td>
<td></td>
</tr>
<tr>
<td>BOMBER</td>
<td>Fly World War II bombing missions</td>
<td>45</td>
<td>Unclear, supports ELSE</td>
</tr>
<tr>
<td>BOUNCE</td>
<td>Plot a bouncing ball</td>
<td>47</td>
<td>generic</td>
</tr>
<tr>
<td>BOWL</td>
<td>Bowling at the neighborhood lanes</td>
<td>48</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>BOXING</td>
<td>3-round Olympic boxing match</td>
<td>50</td>
<td>generic DEC</td>
</tr>
<tr>
<td>BUG</td>
<td>Roll dice vs. the computer to draw a bug</td>
<td>52</td>
<td>HP?</td>
</tr>
<tr>
<td>BULCOW</td>
<td>Guess a mystery 5-digit number vs. the computer</td>
<td>55</td>
<td>Dartmouth?</td>
</tr>
<tr>
<td>BULEYE</td>
<td>Throw darts</td>
<td>57</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>BULL</td>
<td>You're the matador in a championship bullfight</td>
<td>59</td>
<td>generic DEC</td>
</tr>
<tr>
<td>BUNNY</td>
<td>Computer drawing of the Playboy bunny</td>
<td>62</td>
<td>No code</td>
</tr>
<tr>
<td>BUZZWD</td>
<td>Compose your speeches with the latest buzzwords</td>
<td>63</td>
<td>EduSystem</td>
</tr>
<tr>
<td>CALNDR</td>
<td>Calendar for any year</td>
<td>65</td>
<td>EduSystem</td>
</tr>
<tr>
<td>CAN-AM</td>
<td>Drive a Group 7 car in a Can-Am road race</td>
<td>67</td>
<td>Dartmouth</td>
</tr>
<tr>
<td>CHANGE</td>
<td>Computer imitates a cashier</td>
<td>72</td>
<td>EduSystem</td>
</tr>
<tr>
<td>CHECKR</td>
<td>Game of checkers</td>
<td>73</td>
<td></td>
</tr>
<tr>
<td>CHEMST</td>
<td>Dilute kryptocyanic acid to make it harmless</td>
<td>76</td>
<td>generic</td>
</tr>
<tr>
<td>CHIEF</td>
<td>Silly arithmetic drill</td>
<td>77</td>
<td>EduSystem</td>
</tr>
<tr>
<td>CHOMP</td>
<td>Eat a cookie avoiding the poison piece (2 or more players)</td>
<td>78</td>
<td>generic</td>
</tr>
<tr>
<td>CIVILW</td>
<td>Fight the Civil War</td>
<td>80</td>
<td>generic</td>
</tr>
<tr>
<td>CRAPS</td>
<td>Play craps (dice), Las Vegas style</td>
<td>83</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>CUBE</td>
<td>Negotiate a 3-D cube avoiding hidden landmines</td>
<td>85</td>
<td>generic</td>
</tr>
<tr>
<td>DIAMND</td>
<td>Prints 1-page diamond patterns</td>
<td>87</td>
<td>BASIC-8/EduSystem</td>
</tr>
<tr>
<td>DICE</td>
<td>Summarizes dice rolls</td>
<td>89</td>
<td>BASIC-8/EduSystem</td>
</tr>
<tr>
<td>DIGITS</td>
<td>Computer tries to guess digits you select at random</td>
<td>91</td>
<td>BASIC-PLUS?</td>
</tr>
<tr>
<td>DOGS</td>
<td>Penny arcade dog race</td>
<td>93</td>
<td>EduSystem 50</td>
</tr>
<tr>
<td>EVEN</td>
<td>Take objects from a pile--try to end with an even number</td>
<td>96</td>
<td></td>
</tr>
<tr>
<td>EVEN1</td>
<td>Same as EVEN--computer improves its play</td>
<td>98</td>
<td></td>
</tr>
<tr>
<td>FIPFOP</td>
<td>Solitaire logic game--change a row of Xs to Os</td>
<td>99</td>
<td></td>
</tr>
<tr>
<td>FOOTBL</td>
<td>Professional football (very comprehensive)</td>
<td>101</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>FOOTBAL</td>
<td>High School football</td>
<td>104</td>
<td></td>
</tr>
<tr>
<td>FURS</td>
<td>Trade furs with the white man</td>
<td>106</td>
<td></td>
</tr>
<tr>
<td>GOLF</td>
<td>Golf game‚Äîchoose your clubs and swing</td>
<td>109</td>
<td></td>
</tr>
<tr>
<td>GOMOKO</td>
<td>Ancient board game of logic and strategy</td>
<td>110</td>
<td></td>
</tr>
<tr>
<td>GUESS</td>
<td>Guess a mystery number‚Äîcomputer gives you clues</td>
<td>113</td>
<td>EduSystem 20</td>
</tr>
<tr>
<td>GUNNER</td>
<td>Fire a cannon at a stationary target</td>
<td>115</td>
<td></td>
</tr>
<tr>
<td>GUNER1</td>
<td>Fire a cannon at a moving target</td>
<td>116</td>
<td>generic</td>
</tr>
<tr>
<td>HANG</td>
<td>Hangman word guessing game</td>
<td>118</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>HELLO</td>
<td>Computer becomes your friendly psychiatrist</td>
<td>120</td>
<td>EduSystem 25</td>
</tr>
<tr>
<td>HEX</td>
<td>Hexapawn game</td>
<td>122</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>HI-LO</td>
<td>Try to hit the mystery jackpot</td>
<td>124</td>
<td></td>
</tr>
<tr>
<td>HI-Q</td>
<td>Try to remove all the pegs from a board</td>
<td>126</td>
<td></td>
</tr>
<tr>
<td>HMRABI</td>
<td>Govern the ancient city-state of Sumeria</td>
<td>128</td>
<td>generic</td>
</tr>
<tr>
<td>HOCKEY</td>
<td>Ice hockey vs. Cornell</td>
<td>130</td>
<td></td>
</tr>
<tr>
<td>HORSES</td>
<td>Off-track betting on a horse race</td>
<td>133</td>
<td></td>
</tr>
<tr>
<td>HURKLE</td>
<td>Find the Hurkle hiding on a 10x10 grid</td>
<td>135</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>KINEMA</td>
<td>Drill in simple kinematics</td>
<td>137</td>
<td>generic</td>
</tr>
<tr>
<td>KING</td>
<td>Govern a modern island kingdom wisely</td>
<td>138</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>LETTER</td>
<td>Guess a mystery letter‚Äîcomputer gives you clues</td>
<td>141</td>
<td>EduSystem 30</td>
</tr>
<tr>
<td>LIFE</td>
<td>John Conway's Game of Life</td>
<td>143</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>LIFE-2</td>
<td>Competitive game of life (2 or more players)</td>
<td>146</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>LITQZ</td>
<td>Children's literature quiz</td>
<td>148</td>
<td>EduSystem 30</td>
</tr>
<tr>
<td>MATHD</td>
<td>Children's arithmetic drill using pictures of dice</td>
<td>151</td>
<td>EduSystem 30</td>
</tr>
<tr>
<td>MNOPLY</td>
<td>Monopoly for 2 players</td>
<td>153</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>MUGWMP</td>
<td>Locate 4 Mugwumps hiding on a 10x10 grid</td>
<td>156</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>NICOMA</td>
<td>Computer guesses number you think of</td>
<td>158</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>NIM</td>
<td>Chinese game of Nim</td>
<td>160</td>
<td>EduSystem 30?</td>
</tr>
<tr>
<td>NUMBER</td>
<td>Silly number matching game</td>
<td>162</td>
<td>EduSystem 30</td>
</tr>
<tr>
<td>1CHECK</td>
<td>Challenging game to remove checkers from a board</td>
<td>163</td>
<td>unknown, uses USING</td>
</tr>
<tr>
<td>ORBIT</td>
<td>Destroy an orbiting germ-laiden enemy spaceship</td>
<td>165</td>
<td>generic</td>
</tr>
<tr>
<td>PIZZA</td>
<td>Deliver pizzas successfully</td>
<td>167</td>
<td></td>
</tr>
<tr>
<td>POETRY</td>
<td>Computer composes poetry in 4-part harmony</td>
<td>169</td>
<td>generic</td>
</tr>
<tr>
<td>POET</td>
<td>Computer composes random poetry</td>
<td>171</td>
<td>EduSystem ?</td>
</tr>
<tr>
<td>POKER</td>
<td>Poker game</td>
<td>172</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>QUBIC</td>
<td>3-dimensional tic-tac-toe</td>
<td>174</td>
<td>generic</td>
</tr>
<tr>
<td>QUEEN</td>
<td>Move a single chess queen vs. the computer</td>
<td>178</td>
<td>unknown, line 99999</td>
</tr>
<tr>
<td>REVERSE</td>
<td>Order a series of numbers by reversing</td>
<td>178</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>ROCKET</td>
<td>Land an Apollo capsule on the moon</td>
<td>180</td>
<td>EduSystem 30</td>
</tr>
<tr>
<td>ROCKT1</td>
<td>Lunar landing from 500 feet (with plot)</td>
<td>183</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>ROCKT2</td>
<td>Very comprehensive lunar landing</td>
<td>185</td>
<td>generic</td>
</tr>
<tr>
<td>ROCKSP</td>
<td>Game of rock, scissors, paper</td>
<td>188</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>ROULET</td>
<td>European roulette table</td>
<td>189</td>
<td>generic</td>
</tr>
<tr>
<td>RUSROU</td>
<td>Russian roulette</td>
<td>192</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>SALVO</td>
<td>Destroy an enemy fleet of ships</td>
<td>193</td>
<td>generic</td>
</tr>
<tr>
<td>SALVO1</td>
<td>Destroy 4 enemy outposts</td>
<td>195</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>SLOTS</td>
<td>Slot machine (one-arm bandit)</td>
<td>196</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>SNOOPY</td>
<td>Pictures of Snoopy</td>
<td>208</td>
<td>No code</td>
</tr>
<tr>
<td>SPACWR</td>
<td>Comprehensive game of spacewar</td>
<td>210</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>SPLAT</td>
<td>Open a parachute at the last possible moment</td>
<td>205</td>
<td>EduSystem ?</td>
</tr>
<tr>
<td>STARS</td>
<td>Guess a mystery number‚Äîstars give you clues</td>
<td>207</td>
<td>generic</td>
</tr>
<tr>
<td>STOCK</td>
<td>Stock market simulation</td>
<td>209</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>SYNONM</td>
<td>Word synonym drill</td>
<td>212</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>TARGET</td>
<td>Destroy a target in 3-D space‚Äîvery tricky</td>
<td>214</td>
<td>EduSystem ?</td>
</tr>
<tr>
<td>3D PLOT</td>
<td>Plots families of curves‚Äîlooks 3-dimensional</td>
<td>216</td>
<td>generic</td>
</tr>
<tr>
<td>TICTAC</td>
<td>Tic-tac-toe</td>
<td>218</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>TOWER</td>
<td>Towers of Hanoi puzzle</td>
<td>221</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>TRAIN</td>
<td>Time-speed-distance quiz</td>
<td>223</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>TRAP</td>
<td>Trap a mystery number‚Äîcomputer gives you clues</td>
<td>224</td>
<td>EduSystem 30</td>
</tr>
<tr>
<td>23MTCH</td>
<td>Game of 23 matches‚Äîtry not to take the last one</td>
<td>226</td>
<td></td>
</tr>
<tr>
<td>UGLY</td>
<td>Silly profile plot of an ugly woman</td>
<td>228</td>
<td>BASIC-8</td>
</tr>
<tr>
<td>WAR</td>
<td>Card game of war</td>
<td>230</td>
<td>generic</td>
</tr>
<tr>
<td>WAR-2</td>
<td>Troop tactics in war</td>
<td>232</td>
<td>EduSystem 30</td>
</tr>
<tr>
<td>WEKDAY</td>
<td>Facts about your birthday</td>
<td>234</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>WORD</td>
<td>Word guessing game</td>
<td>236</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>YAHTZE</td>
<td>Dice game of Yahtzee</td>
<td>238</td>
<td>BASIC-PLUS</td>
</tr>
<tr>
<td>ZOOP</td>
<td>BASIC programmer's nightmare</td>
<td>243</td>
<td>EduSystem 15/30/35</td>
</tr>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Evertop: E-ink IBM XT clone with 100+ hours of battery life (537 pts)]]></title>
            <link>https://github.com/ericjenott/Evertop</link>
            <guid>43757037</guid>
            <pubDate>Mon, 21 Apr 2025 22:07:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ericjenott/Evertop">https://github.com/ericjenott/Evertop</a>, See on <a href="https://news.ycombinator.com/item?id=43757037">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Evertop: an ultra lower power, ultra long battery solar PC</h2><a id="user-content-evertop-an-ultra-lower-power-ultra-long-battery-solar-pc" aria-label="Permalink: Evertop: an ultra lower power, ultra long battery solar PC" href="#evertop-an-ultra-lower-power-ultra-long-battery-solar-pc"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/testdrive2-1.JPG"><img width="34.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/testdrive2-1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/standing_angle1.JPG"><img width="24%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/standing_angle1.JPG"></a>
</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/solar_stand1.JPG"><img width="19.2%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/solar_stand1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/keyboard_detached2.JPG"><img width="21%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/keyboard_detached2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/opendevice3.JPG"><img width="30%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/opendevice3.JPG"></a>
</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Overview</h2><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">Evertop is a portable PC that emulates an IBM XT with an 80186 processor and 1MB RAM. It can run DOS, Minix, and some other old 1980s operating systems.  It also runs Windows up to version 3.0.  Because it's based on a powerful yet very low power microcontroller, uses an e-ink display, packs two 10,000mAh batteries, and implements extreme power saving measures, it can run for hundreds or even thousands of hours on a single charge.  Combine that with its built in solar panel, and you should be able to use it indefinitely off grid without ever having to worry about battery life.
<br></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Loaded with built-in peripherals</h3><a id="user-content-loaded-with-built-in-peripherals" aria-label="Permalink: Loaded with built-in peripherals" href="#loaded-with-built-in-peripherals"></a></p>
<p dir="auto">It features a built in keyboard, external PS/2 keyboard and mouse ports, full CGA, Hercules, and MCGA graphics support, partial EGA and VGA support, PC speaker, Adlib, Covox, and Disney Sound Source audio output, built in speaker and headphone jack with volume control wheel, one DB9 RS232 serial port, one TTL serial port, dual keyboard and mouse PS/2 ports, USB flash drive port for convenient file transfer, an RJ45 ethernet port, wifi, and LoRA radio (I wrote a LoRA realtime chat client in QBASIC in about 15 minutes).  Bluetooth hardware is present but I have not yet implemented it in any features, though I plan to add support for BT keyboard and mouse, and maybe serial over BT, IP over BT, audio over BT, and BT file transfer.  The keyboard can be easily detached on a short tether to make it convenient to prop up the device at an angle while placing the keyboard on a flat surface.  Or you can just plug in your own to the PS/2 port, as sometimes it's nice to be able to use a full sized keyboard, though the one I built into this device is big enough for normal typing.
<br></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Charging options for every scenario</h3><a id="user-content-charging-options-for-every-scenario" aria-label="Permalink: Charging options for every scenario" href="#charging-options-for-every-scenario"></a></p>
<p dir="auto">There are three ways you can power and charge this compputer: 1.) built in detachable solar panel, 2.) 2.5 - 20V DC input via an internal buck/boost circuit, or 3.) micro USB connector.  It can charge from all three sources simultaneously, and of course charge in every way while in use.  I also added a built in voltmeter to facilitate easy battery level and charge voltage monitoring.
<br></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Hundreds to thousands of hours on a single charge</h3><a id="user-content-hundreds-to-thousands-of-hours-on-a-single-charge" aria-label="Permalink: Hundreds to thousands of hours on a single charge" href="#hundreds-to-thousands-of-hours-on-a-single-charge"></a></p>
<p dir="auto">In power saving mode it can run between 200 hours on the low side and 500 hours or in some cases even much longer of constant interactive use, <b><i>not</i></b> standby.  That should afford ample opportunity to find some sunny weather and recharge the batteries long before they start getting low.  I'm also going to port over a simple native (non-emulated) text editor / word processor and e-reader that I made several years ago for a similar pocket device.  I'm hoping I can get over 1000 hours of constant use on a single charge with those, maybe even 5000-10000 hours on the e-reader app.  Evertop also features optional user initiated or automatic hibernate to disk and automatic total power shutoff via an IO controlled dual MOSFET circuit, so you can set it to hibernate and it will completely shut off power when idle, then when you power back on you can resume right where yo left off.  Internal peripherals can be shut off when not in use via physical switches on the front panel to ensure no power is being wasted.  The solar panel is rated at 6V and 6W, so theoretically it should be able to produce 1 amp with full sunlight.  The most I've ever seen it do is 700mA, but even that's enough to provide ten to fifty hours of constant use from each hour of sunlight.  And even on the dimmest cloudy days it still gets around 70-100mA, which at least gives can give one to five hours of use per hour of charge.
<br></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Storage</h3><a id="user-content-storage" aria-label="Permalink: Storage" href="#storage"></a></p>
<p dir="auto">I've been using a 256G SD card to store floppy and hard disk images, larger cards might work but I haven't tested one yet.  Hard drive images can be up to 4G each.  Emulated systems can mount two floppies and two hard drives for a total of 8G per emulated system.  You can set up multiple emulated systems and choose which one to boot at startup, or just default to the previous choice.
<br></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Technology</h3><a id="user-content-technology" aria-label="Permalink: Technology" href="#technology"></a></p>
<p dir="auto">Under the hood it's powered by an Espressif ESP32 microcontroller.  The display is a 5.83 inch 648x480 (yes, 648 with the 8) "fast refresh" model from good-display.com which uses no power when not refreshing.  I started out using Fabrizio Di Vittorio's amazing and excellent PCEmulator demo for his FabGL library and have been adding, cutting, changing, fixing, and generally tampering for two years to turn this into what it is today.  Enclosure is 3d printed matte PETG plastic.
<br></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Compatibility</h3><a id="user-content-compatibility" aria-label="Permalink: Compatibility" href="#compatibility"></a></p>
<div dir="auto"><p>Runs almost all IBM PC/XT compatible DOS software from the 1980s and early 90s.
</p></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">New minimal version: "Evertop Min"</h2><a id="user-content-new-minimal-version-evertop-min" aria-label="Permalink: New minimal version: &quot;Evertop Min&quot;" href="#new-minimal-version-evertop-min"></a></p>
<p dir="auto">For this version, I removed the built-in keyboard, variable voltage charging, solar panel, RJ45 ethernet, DB9 serial port, LoRA radio, volt meter and half the battery capacity to reduce weight, material, and costs of parts and assembly.  It still has the same e-ink display, dual keyboard/mouse PS/2 ports, built in speaker, headphone jack, volume control wheel, USB flash drive port, wifi networking, bluetooth, TTL serial port, sd card slot, and micro USB charging port.  And it runs the same firmware as its larger sibling.  Add your own PS/2 keyboard and an external solar panel and you're still good to go for basic long lasting off grid computing without the weight, bulk, and expense of all those wonderful bells and whistles.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/smallkbd2.JPG"><img width="26.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/smallkbd2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/connected_devices4.JPG"><img width="34%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/connected_devices4.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/excel.JPG"><img width="37%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/excel.JPG"></a>
</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/rightside2.JPG"><img width="38.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/rightside2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/leftside2.JPG"><img width="39.9%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/leftside2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/with_max2.jpg"><img width="19.7%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/with_max2.jpg"></a>
</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Sample Videos</h2><a id="user-content-sample-videos" aria-label="Permalink: Sample Videos" href="#sample-videos"></a></p>
<p dir="auto">Note: if some videos won't play in Firefox, please try using Chrome.<br>
<b>Or</b> watch the hi-res full length versions on my Youtube playlist <a href="https://youtube.com/playlist?list=PLS5HRMZsVMLZf-PbHvJDVLgTP-tTvth55&amp;si=df2rlJ7pIH9pm1Kg" rel="nofollow">here</a>.</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">QBASIC "hello world"</h3><a id="user-content-qbasic-hello-world" aria-label="Permalink: QBASIC &quot;hello world&quot;" href="#qbasic-hello-world"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403618011-5fa22022-bf06-4c9d-8cf1-ed0c71fa55c8.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MTgwMTEtNWZhMjIwMjItYmYwNi00YzlkLThjZjEtZWQwYzcxZmE1NWM4LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJmNGMzNjFiZTdiNDZkYmZkMWEyMDVmYjZmMGY0ZTA2Y2MwZTlmMDQ5ZmNhZTg1NjJhZjE1ZGE4YjA2NGVjMjMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.JYroNZe_m0oU0FdqJ3FDY2yr5BwU0Knrv_Kz8sHMiMY"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403618011-5fa22022-bf06-4c9d-8cf1-ed0c71fa55c8.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MTgwMTEtNWZhMjIwMjItYmYwNi00YzlkLThjZjEtZWQwYzcxZmE1NWM4LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJmNGMzNjFiZTdiNDZkYmZkMWEyMDVmYjZmMGY0ZTA2Y2MwZTlmMDQ5ZmNhZTg1NjJhZjE1ZGE4YjA2NGVjMjMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.JYroNZe_m0oU0FdqJ3FDY2yr5BwU0Knrv_Kz8sHMiMY"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description qbasic.mp4">qbasic.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403603470-7936a16b-e707-4298-a39a-2964b3c653aa.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDM0NzAtNzkzNmExNmItZTcwNy00Mjk4LWEzOWEtMjk2NGIzYzY1M2FhLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWRlMWJhM2E1ZGQwMzNjM2ViNzc0ZTk2ODBmMWM0YjVmMTczYmZhYzFlYTBjNTUwODZmNDBmYjE5MWIyNWEwODImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.iAijxpi6lNtDz9rb42zP63xE1tnaH25qYkKUo7SlBzk" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403603470-7936a16b-e707-4298-a39a-2964b3c653aa.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDM0NzAtNzkzNmExNmItZTcwNy00Mjk4LWEzOWEtMjk2NGIzYzY1M2FhLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWRlMWJhM2E1ZGQwMzNjM2ViNzc0ZTk2ODBmMWM0YjVmMTczYmZhYzFlYTBjNTUwODZmNDBmYjE5MWIyNWEwODImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.iAijxpi6lNtDz9rb42zP63xE1tnaH25qYkKUo7SlBzk" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Space Quest 3 with Adlib sound and music</h3><a id="user-content-space-quest-3-with-adlib-sound-and-music" aria-label="Permalink: Space Quest 3 with Adlib sound and music" href="#space-quest-3-with-adlib-sound-and-music"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403619934-82e9c201-96ba-4a23-9576-b5ada00116f7.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MTk5MzQtODJlOWMyMDEtOTZiYS00YTIzLTk1NzYtYjVhZGEwMDExNmY3LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTVhMDI5MmIwMDk2ZmRkZTFmOWE3YmQ4ZDhhZDJjZDA2MzE5ODlkMDg2MzJhNTgxY2E1NWU1Mjg5MWJiZWI2OWYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Kas22CaQDVRv3o49Z96MgJAEm9OoCjgNS8eJSDepO0c"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403619934-82e9c201-96ba-4a23-9576-b5ada00116f7.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MTk5MzQtODJlOWMyMDEtOTZiYS00YTIzLTk1NzYtYjVhZGEwMDExNmY3LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTVhMDI5MmIwMDk2ZmRkZTFmOWE3YmQ4ZDhhZDJjZDA2MzE5ODlkMDg2MzJhNTgxY2E1NWU1Mjg5MWJiZWI2OWYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Kas22CaQDVRv3o49Z96MgJAEm9OoCjgNS8eJSDepO0c"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description sq3.mp4">sq3.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403603808-2b20a7d1-0362-4848-8348-c91b98728131.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDM4MDgtMmIyMGE3ZDEtMDM2Mi00ODQ4LTgzNDgtYzkxYjk4NzI4MTMxLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTkyYjgxZTBkNzRkMzIzZDRiYzBkYjdjODVkODU1MDE3ZWExNjI2Y2RmZWI0NWU4NTIxYzBkOGQwMjQ3ODUwZWImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.LK9qka544-rAoEKB8IwQOdrQ9YXcW4f96HFMuCqVLSo" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403603808-2b20a7d1-0362-4848-8348-c91b98728131.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDM4MDgtMmIyMGE3ZDEtMDM2Mi00ODQ4LTgzNDgtYzkxYjk4NzI4MTMxLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTkyYjgxZTBkNzRkMzIzZDRiYzBkYjdjODVkODU1MDE3ZWExNjI2Y2RmZWI0NWU4NTIxYzBkOGQwMjQ3ODUwZWImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.LK9qka544-rAoEKB8IwQOdrQ9YXcW4f96HFMuCqVLSo" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Minesweeper on Windows</h3><a id="user-content-minesweeper-on-windows" aria-label="Permalink: Minesweeper on Windows" href="#minesweeper-on-windows"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620037-f1fc2659-ac04-4c34-980c-88f63df48484.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAwMzctZjFmYzI2NTktYWMwNC00YzM0LTk4MGMtODhmNjNkZjQ4NDg0LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTYyM2YxNjFiMzk3MjI5NWEyYWQ3MzkyZmNkZGQ1ZGFkMjc0NzM4MmQ4M2IwNDJlNzMyMWVkYTA1NjVmMTE2OGUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Y34YqzSFNJ5ItVeiduGPu9C9wfsDoCWRowcBn7iafyg"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620037-f1fc2659-ac04-4c34-980c-88f63df48484.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAwMzctZjFmYzI2NTktYWMwNC00YzM0LTk4MGMtODhmNjNkZjQ4NDg0LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTYyM2YxNjFiMzk3MjI5NWEyYWQ3MzkyZmNkZGQ1ZGFkMjc0NzM4MmQ4M2IwNDJlNzMyMWVkYTA1NjVmMTE2OGUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Y34YqzSFNJ5ItVeiduGPu9C9wfsDoCWRowcBn7iafyg"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description windows.minesweeper.mp4">windows.minesweeper.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403603976-540fa992-51f2-4d51-8aa3-3e9dba048924.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDM5NzYtNTQwZmE5OTItNTFmMi00ZDUxLThhYTMtM2U5ZGJhMDQ4OTI0Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBmM2FkMTUxMTViMzc4YjNlZmRkZDllZTUwOWI0NmRkMGNmYmZkYTgwODAzNzA5ZDUwNzhiMzY0NGZkMzQ2NGMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0._XzJx9n1FwrGdeTyIxALSUCnQppgZlCSAB44hjUkawQ" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403603976-540fa992-51f2-4d51-8aa3-3e9dba048924.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDM5NzYtNTQwZmE5OTItNTFmMi00ZDUxLThhYTMtM2U5ZGJhMDQ4OTI0Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBmM2FkMTUxMTViMzc4YjNlZmRkZDllZTUwOWI0NmRkMGNmYmZkYTgwODAzNzA5ZDUwNzhiMzY0NGZkMzQ2NGMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0._XzJx9n1FwrGdeTyIxALSUCnQppgZlCSAB44hjUkawQ" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Adlib Jukebox</h3><a id="user-content-adlib-jukebox" aria-label="Permalink: Adlib Jukebox" href="#adlib-jukebox"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620085-c8a92e9c-eab9-4acf-978d-760e890d9fa2.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAwODUtYzhhOTJlOWMtZWFiOS00YWNmLTk3OGQtNzYwZTg5MGQ5ZmEyLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQ1NDU1OTU5NGMxMjk0MGZiM2RmZjRhNWFhNTBhNWMyYTRjZGNkNGQwNzNjOGI3YzE0M2U5Yzc4ZWEyYTdmZWImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.2COPWEbtQlGzq5-ybN9PRFPj1SZNX0_hHyPFbJJSHr8"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620085-c8a92e9c-eab9-4acf-978d-760e890d9fa2.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAwODUtYzhhOTJlOWMtZWFiOS00YWNmLTk3OGQtNzYwZTg5MGQ5ZmEyLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQ1NDU1OTU5NGMxMjk0MGZiM2RmZjRhNWFhNTBhNWMyYTRjZGNkNGQwNzNjOGI3YzE0M2U5Yzc4ZWEyYTdmZWImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.2COPWEbtQlGzq5-ybN9PRFPj1SZNX0_hHyPFbJJSHr8"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description adlib_jukebox.mp4">adlib_jukebox.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403604695-f23e2479-c99c-4e64-bbf9-22223a75d402.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDQ2OTUtZjIzZTI0NzktYzk5Yy00ZTY0LWJiZjktMjIyMjNhNzVkNDAyLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg4MDMwZTZkZmUyODI1YjBmZTJmZGNjYTc5MTRjYzU3OTYyOWM0MWM3MmY0NjA4YTA3MDQ1NDMwYjBiMGVlNjQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.RRzkc2jRKf9Ic2K3HuV6gc1py2KsTG32xhIj0N4GDTw" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403604695-f23e2479-c99c-4e64-bbf9-22223a75d402.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDQ2OTUtZjIzZTI0NzktYzk5Yy00ZTY0LWJiZjktMjIyMjNhNzVkNDAyLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg4MDMwZTZkZmUyODI1YjBmZTJmZGNjYTc5MTRjYzU3OTYyOWM0MWM3MmY0NjA4YTA3MDQ1NDMwYjBiMGVlNjQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.RRzkc2jRKf9Ic2K3HuV6gc1py2KsTG32xhIj0N4GDTw" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Using a USB flash drive</h3><a id="user-content-using-a-usb-flash-drive" aria-label="Permalink: Using a USB flash drive" href="#using-a-usb-flash-drive"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620100-651762d9-426b-49ad-8cb4-2cdc7b2aecb9.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAxMDAtNjUxNzYyZDktNDI2Yi00OWFkLThjYjQtMmNkYzdiMmFlY2I5LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTIzMGI1YmM2ZGUzNWNmMzQzYmRkZGFjMWYxNzAxYjU4OTZmNTA3N2IyOTljZWQ5NDQzODY5NDk3Yjk5NzcyYTAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.m110I568YEWKcRw8yEt2lAHXYf5a9qPKe7trr-KmKPs"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620100-651762d9-426b-49ad-8cb4-2cdc7b2aecb9.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAxMDAtNjUxNzYyZDktNDI2Yi00OWFkLThjYjQtMmNkYzdiMmFlY2I5LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTIzMGI1YmM2ZGUzNWNmMzQzYmRkZGFjMWYxNzAxYjU4OTZmNTA3N2IyOTljZWQ5NDQzODY5NDk3Yjk5NzcyYTAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.m110I568YEWKcRw8yEt2lAHXYf5a9qPKe7trr-KmKPs"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description USB_flash_drive.mp4">USB_flash_drive.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403451179-77839a7c-f4f0-4fe8-b198-c7e36b9bc334.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM0NTExNzktNzc4MzlhN2MtZjRmMC00ZmU4LWIxOTgtYzdlMzZiOWJjMzM0Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQ1NDA1Y2MyNzQ5ZDdkMmY3ZGI4MGMxMGFmZDdmNWRjMGFiODEwZTg0NmRhNzNhODRhZmE5YzVkZjgxZDI3YmQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.HIVpY9S3uXw24lzsyovIFx0Oh8PxmpCMIPk5XLYNaEY" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403451179-77839a7c-f4f0-4fe8-b198-c7e36b9bc334.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM0NTExNzktNzc4MzlhN2MtZjRmMC00ZmU4LWIxOTgtYzdlMzZiOWJjMzM0Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQ1NDA1Y2MyNzQ5ZDdkMmY3ZGI4MGMxMGFmZDdmNWRjMGFiODEwZTg0NmRhNzNhODRhZmE5YzVkZjgxZDI3YmQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.HIVpY9S3uXw24lzsyovIFx0Oh8PxmpCMIPk5XLYNaEY" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Networking: Ping and FTP</h3><a id="user-content-networking-ping-and-ftp" aria-label="Permalink: Networking: Ping and FTP" href="#networking-ping-and-ftp"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620138-601dd03c-0d77-4ec1-8307-b76d72c7923d.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAxMzgtNjAxZGQwM2MtMGQ3Ny00ZWMxLTgzMDctYjc2ZDcyYzc5MjNkLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJlNGFkNzk3ZTViMDY0ZjdhMTc4NzJkNjkxMGRkNTk1OTk5YWZiN2YyNDU2MzQzY2FiYWJiZWQ4YmFmMGE3ODEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.qC9yrDgmC6SPni18fyzy_8URaS4n9-1KyTc9mazCGAU"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620138-601dd03c-0d77-4ec1-8307-b76d72c7923d.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAxMzgtNjAxZGQwM2MtMGQ3Ny00ZWMxLTgzMDctYjc2ZDcyYzc5MjNkLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJlNGFkNzk3ZTViMDY0ZjdhMTc4NzJkNjkxMGRkNTk1OTk5YWZiN2YyNDU2MzQzY2FiYWJiZWQ4YmFmMGE3ODEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.qC9yrDgmC6SPni18fyzy_8URaS4n9-1KyTc9mazCGAU"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description ping.ftp.mp4">ping.ftp.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403604835-5f67eb18-9b9b-4c4f-b5dd-cf022fadc6d1.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDQ4MzUtNWY2N2ViMTgtOWI5Yi00YzRmLWI1ZGQtY2YwMjJmYWRjNmQxLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTU5MzEwNDkxNmFmNjRhNDRiY2E4MzhlYmU3NTlhMjU5NzMwNTMyMmU0MDY3OTVhOTRjNTAwNTY1ZjEwNWVlYTcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.qHF6MezzAzV7McX0t_fUO7RWXWSVgXnf5b9ck_QJbRM" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403604835-5f67eb18-9b9b-4c4f-b5dd-cf022fadc6d1.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDQ4MzUtNWY2N2ViMTgtOWI5Yi00YzRmLWI1ZGQtY2YwMjJmYWRjNmQxLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTU5MzEwNDkxNmFmNjRhNDRiY2E4MzhlYmU3NTlhMjU5NzMwNTMyMmU0MDY3OTVhOTRjNTAwNTY1ZjEwNWVlYTcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.qHF6MezzAzV7McX0t_fUO7RWXWSVgXnf5b9ck_QJbRM" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Networking: Web browsing</h3><a id="user-content-networking-web-browsing" aria-label="Permalink: Networking: Web browsing" href="#networking-web-browsing"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620146-114475dc-eaad-4e1d-a4ab-3d190aa230e5.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAxNDYtMTE0NDc1ZGMtZWFhZC00ZTFkLWE0YWItM2QxOTBhYTIzMGU1LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJhYzlhZTUzYjM5NzVjNTFjMmE3NTQyMDdjZDY5MmJmZjMwMzUxNTU0YjJiYjRiNGE3MGU2ZWJkYjc2OGM2N2ImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.mB2a0ag78r9C4w5XvvK02RHWr-NEohdfoIfY2zyAttM"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620146-114475dc-eaad-4e1d-a4ab-3d190aa230e5.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAxNDYtMTE0NDc1ZGMtZWFhZC00ZTFkLWE0YWItM2QxOTBhYTIzMGU1LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJhYzlhZTUzYjM5NzVjNTFjMmE3NTQyMDdjZDY5MmJmZjMwMzUxNTU0YjJiYjRiNGE3MGU2ZWJkYjc2OGM2N2ImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.mB2a0ag78r9C4w5XvvK02RHWr-NEohdfoIfY2zyAttM"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description web.mp4">web.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403604905-8a99601b-c7f9-49f3-8a99-dfec2aed2d76.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDQ5MDUtOGE5OTYwMWItYzdmOS00OWYzLThhOTktZGZlYzJhZWQyZDc2Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTliNWE2YmE0NjJjOTBlNzBiMzNmMmJlYTJjOTliMDc3Njk5ZjJhOGU4MGUyN2U3NmEzMzdmOWJjZGRhMjExMzEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.0vmD1D7r5whhMxsIFfgkSlGtqLBnuWxRGPYY5X2H_8k" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403604905-8a99601b-c7f9-49f3-8a99-dfec2aed2d76.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDQ5MDUtOGE5OTYwMWItYzdmOS00OWYzLThhOTktZGZlYzJhZWQyZDc2Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTliNWE2YmE0NjJjOTBlNzBiMzNmMmJlYTJjOTliMDc3Njk5ZjJhOGU4MGUyN2U3NmEzMzdmOWJjZGRhMjExMzEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.0vmD1D7r5whhMxsIFfgkSlGtqLBnuWxRGPYY5X2H_8k" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Hibernating and resuming</h3><a id="user-content-hibernating-and-resuming" aria-label="Permalink: Hibernating and resuming" href="#hibernating-and-resuming"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620331-6e18e1be-cc90-42f3-a545-62e2a8999ca3.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAzMzEtNmUxOGUxYmUtY2M5MC00MmYzLWE1NDUtNjJlMmE4OTk5Y2EzLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTkwYmYwNmM3M2VhYWE5NjM1MTA4ZTE5YzhjYmIzMGQ0Mjg0YzllZTRlNmRjOWM4OGE3ZTE5ZDBhN2M3MDJiOWImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.5wa5vokJjImOeXnMtOeNWcomzuJtxUnsNstPRQ88PWc"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620331-6e18e1be-cc90-42f3-a545-62e2a8999ca3.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAzMzEtNmUxOGUxYmUtY2M5MC00MmYzLWE1NDUtNjJlMmE4OTk5Y2EzLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTkwYmYwNmM3M2VhYWE5NjM1MTA4ZTE5YzhjYmIzMGQ0Mjg0YzllZTRlNmRjOWM4OGE3ZTE5ZDBhN2M3MDJiOWImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.5wa5vokJjImOeXnMtOeNWcomzuJtxUnsNstPRQ88PWc"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description hibernate.resume.mp4">hibernate.resume.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403605014-c9758c15-9f8d-4058-a61f-c34481873b1e.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDUwMTQtYzk3NThjMTUtOWY4ZC00MDU4LWE2MWYtYzM0NDgxODczYjFlLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTRlMjg5ZmIxNjlhYTgzYzgwYTRiNDk0MzYzYmMxZWMzM2RiOGJlNjJiZDU4ZWJjNGFkMGU4NDU0MmY0OGVmZDUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.OmAO4ngftH7x6bzLEXHu8h0bZPAmJfo5Hf1ahcLOUWg" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403605014-c9758c15-9f8d-4058-a61f-c34481873b1e.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDUwMTQtYzk3NThjMTUtOWY4ZC00MDU4LWE2MWYtYzM0NDgxODczYjFlLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTRlMjg5ZmIxNjlhYTgzYzgwYTRiNDk0MzYzYmMxZWMzM2RiOGJlNjJiZDU4ZWJjNGFkMGU4NDU0MmY0OGVmZDUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.OmAO4ngftH7x6bzLEXHu8h0bZPAmJfo5Hf1ahcLOUWg" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Solar panel detaching and re-attaching</h3><a id="user-content-solar-panel-detaching-and-re-attaching" aria-label="Permalink: Solar panel detaching and re-attaching" href="#solar-panel-detaching-and-re-attaching"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620367-5d897835-51f1-47b4-bcbb-87023bcb50ec.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAzNjctNWQ4OTc4MzUtNTFmMS00N2I0LWJjYmItODcwMjNiY2I1MGVjLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTZmZWU4NWZjOGFjMDhkMjYzNWYxMTljMjU5NTY3OWVkNmM2NmYwNTZlOWY5MmZmYWZlYzMxMWExZmYwMGY5ZjImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.OMI9x59dZv-RnOhlHV1xBnpEn59XX5JR0Mwc63kWA-8"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620367-5d897835-51f1-47b4-bcbb-87023bcb50ec.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAzNjctNWQ4OTc4MzUtNTFmMS00N2I0LWJjYmItODcwMjNiY2I1MGVjLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTZmZWU4NWZjOGFjMDhkMjYzNWYxMTljMjU5NTY3OWVkNmM2NmYwNTZlOWY5MmZmYWZlYzMxMWExZmYwMGY5ZjImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.OMI9x59dZv-RnOhlHV1xBnpEn59XX5JR0Mwc63kWA-8"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description solar_panel_setup2.mp4">solar_panel_setup2.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403612643-3ee362a7-36d7-4355-b31c-2d30c2af94da.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MTI2NDMtM2VlMzYyYTctMzZkNy00MzU1LWIzMWMtMmQzMGMyYWY5NGRhLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEyNTY2MjQwNzEwYTM4NjM4ODY4NTVmYzk1MDAyNjI3N2RjMTRhYWU5MWZhZjYwYTg2NmNlMTgyY2JiNWM0NDImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.xgB4T_r1sxLeHSm5PAm-NVRQNPKxqTWk4PipI5bWHXQ" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403612643-3ee362a7-36d7-4355-b31c-2d30c2af94da.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MTI2NDMtM2VlMzYyYTctMzZkNy00MzU1LWIzMWMtMmQzMGMyYWY5NGRhLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEyNTY2MjQwNzEwYTM4NjM4ODY4NTVmYzk1MDAyNjI3N2RjMTRhYWU5MWZhZjYwYTg2NmNlMTgyY2JiNWM0NDImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.xgB4T_r1sxLeHSm5PAm-NVRQNPKxqTWk4PipI5bWHXQ" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">System startup and color inversion</h3><a id="user-content-system-startup-and-color-inversion" aria-label="Permalink: System startup and color inversion" href="#system-startup-and-color-inversion"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620380-fd269914-d7c6-41f8-ba09-b50392944180.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAzODAtZmQyNjk5MTQtZDdjNi00MWY4LWJhMDktYjUwMzkyOTQ0MTgwLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThjNDg4YTFlYzIzNTJkNGI3Y2MxYWZjZmRlZjM2NDMzZTI1NDMxOGZkZDFhODFlYWM3YWMxMzY5M2Q3YjdjMzQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.gYLq8TUOwcbwYoGm2cjrxBETCoK99EkrZ9RRcWTsDE4"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620380-fd269914-d7c6-41f8-ba09-b50392944180.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjAzODAtZmQyNjk5MTQtZDdjNi00MWY4LWJhMDktYjUwMzkyOTQ0MTgwLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThjNDg4YTFlYzIzNTJkNGI3Y2MxYWZjZmRlZjM2NDMzZTI1NDMxOGZkZDFhODFlYWM3YWMxMzY5M2Q3YjdjMzQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.gYLq8TUOwcbwYoGm2cjrxBETCoK99EkrZ9RRcWTsDE4"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description startup.inversion.mp4">startup.inversion.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403605202-8807fc27-6829-4491-978f-2921a8d432fe.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDUyMDItODgwN2ZjMjctNjgyOS00NDkxLTk3OGYtMjkyMWE4ZDQzMmZlLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJhNzhkMTI3YzMzMTEyMTY2NDZmMzA4YzExMTRmODM1NDA4YzcxNjhiOTNmOTRmOTRjYzMzNWRjMjdmZTIyODQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.CBaj0BvfDk11-eWL_nvxA4syMo9YUtm9siuSbGHGsm4" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403605202-8807fc27-6829-4491-978f-2921a8d432fe.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDUyMDItODgwN2ZjMjctNjgyOS00NDkxLTk3OGYtMjkyMWE4ZDQzMmZlLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJhNzhkMTI3YzMzMTEyMTY2NDZmMzA4YzExMTRmODM1NDA4YzcxNjhiOTNmOTRmOTRjYzMzNWRjMjdmZTIyODQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.CBaj0BvfDk11-eWL_nvxA4syMo9YUtm9siuSbGHGsm4" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">King's Quest 1</h3><a id="user-content-kings-quest-1" aria-label="Permalink: King's Quest 1" href="#kings-quest-1"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620401-12d81b80-13bb-4f15-9139-1087d0f94735.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0MDEtMTJkODFiODAtMTNiYi00ZjE1LTkxMzktMTA4N2QwZjk0NzM1LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWIxOGE4OGJhMGU3MzI3MjUxMWNjNjIzNzM4MTAyODA5OTA3MzcxOWVhMmU3ZjliODBlMzVmMDc2YTA0ODBlYzMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.TghatAQM6NyZ7vnZBWebTp1CqY0w9ujRnuPDwAWBCEU"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620401-12d81b80-13bb-4f15-9139-1087d0f94735.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0MDEtMTJkODFiODAtMTNiYi00ZjE1LTkxMzktMTA4N2QwZjk0NzM1LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWIxOGE4OGJhMGU3MzI3MjUxMWNjNjIzNzM4MTAyODA5OTA3MzcxOWVhMmU3ZjliODBlMzVmMDc2YTA0ODBlYzMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.TghatAQM6NyZ7vnZBWebTp1CqY0w9ujRnuPDwAWBCEU"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description kq1.mp4">kq1.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403605277-46d44474-fa79-49ea-9949-d85c53864d76.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDUyNzctNDZkNDQ0NzQtZmE3OS00OWVhLTk5NDktZDg1YzUzODY0ZDc2Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTI1NWRkOWQ0ZTQ0OWQwYWQwZTUwMmQxZDYyODViYTdmOWMyNjA0YWQyMjc2NjQ3NTUyMGEwMGZlZjJhYzhmNDUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.M-zjgZNZGGubHfItLiXV0TXtfEwrinpabNF2YE12C-c" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403605277-46d44474-fa79-49ea-9949-d85c53864d76.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDUyNzctNDZkNDQ0NzQtZmE3OS00OWVhLTk5NDktZDg1YzUzODY0ZDc2Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTI1NWRkOWQ0ZTQ0OWQwYWQwZTUwMmQxZDYyODViYTdmOWMyNjA0YWQyMjc2NjQ3NTUyMGEwMGZlZjJhYzhmNDUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.M-zjgZNZGGubHfItLiXV0TXtfEwrinpabNF2YE12C-c" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">QEdit editing autoexec.bat</h3><a id="user-content-qedit-editing-autoexecbat" aria-label="Permalink: QEdit editing autoexec.bat" href="#qedit-editing-autoexecbat"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620429-acd940e5-2030-4415-ab2c-4ad2efa77ddb.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0MjktYWNkOTQwZTUtMjAzMC00NDE1LWFiMmMtNGFkMmVmYTc3ZGRiLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWExYzgyZTU2Y2FkZWNmYTYyNTI0ZDBkNTA5YjVhZjhiNzA5ODUxODZiMmY4ODlkNTlkYTMyNmNlZDFhZDcwYzgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.hh-TsNzd_WFdiOKZOjujqnbECIFGjweLy5u5PMOUaEs"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620429-acd940e5-2030-4415-ab2c-4ad2efa77ddb.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0MjktYWNkOTQwZTUtMjAzMC00NDE1LWFiMmMtNGFkMmVmYTc3ZGRiLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWExYzgyZTU2Y2FkZWNmYTYyNTI0ZDBkNTA5YjVhZjhiNzA5ODUxODZiMmY4ODlkNTlkYTMyNmNlZDFhZDcwYzgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.hh-TsNzd_WFdiOKZOjujqnbECIFGjweLy5u5PMOUaEs"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description qedit.mp4">qedit.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403416828-c6fe3bd9-1a23-458f-8ec3-6ddc4d6cbe65.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM0MTY4MjgtYzZmZTNiZDktMWEyMy00NThmLThlYzMtNmRkYzRkNmNiZTY1Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTI5OGU0ZDI0ZGE2MGQ2ZjJmNWUzMmVjMzQxNWJkZmMyYTFjMjI4YTg2NjFmN2U4MWExZDk0MTJmODdmNWU4ZDQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.8mzHiWhfCpWjp3iqIaLLqNgmg1G1sHHukajMVNbOceY" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403416828-c6fe3bd9-1a23-458f-8ec3-6ddc4d6cbe65.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM0MTY4MjgtYzZmZTNiZDktMWEyMy00NThmLThlYzMtNmRkYzRkNmNiZTY1Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTI5OGU0ZDI0ZGE2MGQ2ZjJmNWUzMmVjMzQxNWJkZmMyYTFjMjI4YTg2NjFmN2U4MWExZDk0MTJmODdmNWU4ZDQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.8mzHiWhfCpWjp3iqIaLLqNgmg1G1sHHukajMVNbOceY" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Wolfenstein 3D</h3><a id="user-content-wolfenstein-3d" aria-label="Permalink: Wolfenstein 3D" href="#wolfenstein-3d"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620447-546131fb-ca1b-4ad8-acc7-720df0038656.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0NDctNTQ2MTMxZmItY2ExYi00YWQ4LWFjYzctNzIwZGYwMDM4NjU2LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZmZjRkNWE1ZjU3YjZkZjFhOTJiOTZmZjM0ZjIyNzM3ZTNjNzgxYzEyZWRjN2FlMGYzYmRhYWY5NzU4OGNmNDkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.skInMtQ_fkc-f1-bTlSLZWKlDEe7el0ncESMfFYYlc8"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620447-546131fb-ca1b-4ad8-acc7-720df0038656.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0NDctNTQ2MTMxZmItY2ExYi00YWQ4LWFjYzctNzIwZGYwMDM4NjU2LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZmZjRkNWE1ZjU3YjZkZjFhOTJiOTZmZjM0ZjIyNzM3ZTNjNzgxYzEyZWRjN2FlMGYzYmRhYWY5NzU4OGNmNDkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.skInMtQ_fkc-f1-bTlSLZWKlDEe7el0ncESMfFYYlc8"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description wolf3d.mp4">wolf3d.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403605728-e295904c-3d49-4982-8d65-b21779e48726.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDU3MjgtZTI5NTkwNGMtM2Q0OS00OTgyLThkNjUtYjIxNzc5ZTQ4NzI2Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTRkMzZmZDAzZWMyNmRhY2FkNWM2ODMwZDg2NjE0ZmY5Y2VlY2JkZjkyMTljYjg4NjA1ZmJiM2Y5YjY0ZTE4NmImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.4svPxZk3zz55c1rYjjznXkA6mzlWjUlFNWt-My1Zkyk" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403605728-e295904c-3d49-4982-8d65-b21779e48726.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDU3MjgtZTI5NTkwNGMtM2Q0OS00OTgyLThkNjUtYjIxNzc5ZTQ4NzI2Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTRkMzZmZDAzZWMyNmRhY2FkNWM2ODMwZDg2NjE0ZmY5Y2VlY2JkZjkyMTljYjg4NjA1ZmJiM2Y5YjY0ZTE4NmImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.4svPxZk3zz55c1rYjjznXkA6mzlWjUlFNWt-My1Zkyk" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Doom</h3><a id="user-content-doom" aria-label="Permalink: Doom" href="#doom"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620462-f79e5cf9-9837-47f0-9706-b3a232558d7a.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0NjItZjc5ZTVjZjktOTgzNy00N2YwLTk3MDYtYjNhMjMyNTU4ZDdhLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTE2MmFlZjdiZDJhZmI3ZDU2OTM0YjA0YTRlZjdlYzMxYjJjZmMwMDU0YTdjZGUzODIzMjc0OTM3NjkwMTFmMjEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.u-juO-qrx5XfGalM3AqSutc8RmWYP0jqGOuFLOnoFL8"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620462-f79e5cf9-9837-47f0-9706-b3a232558d7a.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0NjItZjc5ZTVjZjktOTgzNy00N2YwLTk3MDYtYjNhMjMyNTU4ZDdhLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTE2MmFlZjdiZDJhZmI3ZDU2OTM0YjA0YTRlZjdlYzMxYjJjZmMwMDU0YTdjZGUzODIzMjc0OTM3NjkwMTFmMjEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.u-juO-qrx5XfGalM3AqSutc8RmWYP0jqGOuFLOnoFL8"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description doom.mp4">doom.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403605779-fc9ec4e4-5f15-47cf-980f-c31522a4abcc.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDU3NzktZmM5ZWM0ZTQtNWYxNS00N2NmLTk4MGYtYzMxNTIyYTRhYmNjLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBmM2I2NWJjYzBkNDYwMzc5N2QwMTFiYzM4YjliYjM1MTI3NDBhMWIwZmE1ZTI4ZjJhZTY1ODk5NjRhMmM3MDEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.1M3sDtl9u8M2HApGvEBhuh5ZAqvXm0jleoiIjHAEqYE" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403605779-fc9ec4e4-5f15-47cf-980f-c31522a4abcc.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDU3NzktZmM5ZWM0ZTQtNWYxNS00N2NmLTk4MGYtYzMxNTIyYTRhYmNjLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTBmM2I2NWJjYzBkNDYwMzc5N2QwMTFiYzM4YjliYjM1MTI3NDBhMWIwZmE1ZTI4ZjJhZTY1ODk5NjRhMmM3MDEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.1M3sDtl9u8M2HApGvEBhuh5ZAqvXm0jleoiIjHAEqYE" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">CP/M-86 with Turbo Pascal</h3><a id="user-content-cpm-86-with-turbo-pascal" aria-label="Permalink: CP/M-86 with Turbo Pascal" href="#cpm-86-with-turbo-pascal"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620482-d71eaacb-92f9-4bc3-baec-dd1b68bb983a.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0ODItZDcxZWFhY2ItOTJmOS00YmMzLWJhZWMtZGQxYjY4YmI5ODNhLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTdmYmViMGUwOTA1NjEyZjkyMGU3NzgxNTQ1MWU1ZGY4MGZjOWYzNGVmOWI3M2E2YzQzYTczOTljZjcxZDI4NzEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Ws1zlZMlbw9HSYDgQkbP_VMSQWZjFpgLipsZD2wkjy4"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620482-d71eaacb-92f9-4bc3-baec-dd1b68bb983a.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0ODItZDcxZWFhY2ItOTJmOS00YmMzLWJhZWMtZGQxYjY4YmI5ODNhLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTdmYmViMGUwOTA1NjEyZjkyMGU3NzgxNTQ1MWU1ZGY4MGZjOWYzNGVmOWI3M2E2YzQzYTczOTljZjcxZDI4NzEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Ws1zlZMlbw9HSYDgQkbP_VMSQWZjFpgLipsZD2wkjy4"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description cpm.turbo_pascal.mp4">cpm.turbo_pascal.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403451413-1cd02330-907e-408f-8e0b-55a8b3c6f605.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM0NTE0MTMtMWNkMDIzMzAtOTA3ZS00MDhmLThlMGItNTVhOGIzYzZmNjA1Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTMxNGQ0MjMwODNiMDU4ZWVkOTJjODkzNDliM2ZjMThmOTBkMjEyMGYxZjBkNWZmZWMwODQyNDRhMTYyMzY1YzQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.q38BgmwUOEW3j5xJIX0xaNYLPrvROON8zsdeeswwH0M" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403451413-1cd02330-907e-408f-8e0b-55a8b3c6f605.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM0NTE0MTMtMWNkMDIzMzAtOTA3ZS00MDhmLThlMGItNTVhOGIzYzZmNjA1Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTMxNGQ0MjMwODNiMDU4ZWVkOTJjODkzNDliM2ZjMThmOTBkMjEyMGYxZjBkNWZmZWMwODQyNDRhMTYyMzY1YzQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.q38BgmwUOEW3j5xJIX0xaNYLPrvROON8zsdeeswwH0M" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">When and why to use "Color Emulation"</h3><a id="user-content-when-and-why-to-use-color-emulation" aria-label="Permalink: When and why to use &quot;Color Emulation&quot;" href="#when-and-why-to-use-color-emulation"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620497-83c75778-bd1e-41cc-9cf8-8109422c2773.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0OTctODNjNzU3NzgtYmQxZS00MWNjLTljZjgtODEwOTQyMmMyNzczLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJmYjQ3NTMxYWUxMzcyMDljY2MyZjZmZTdjNDFhYTJmYzQ0OWZlNTk3MTgyNWRlMTAxOTJkMTc0ZDkzMGI3OTcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.iRdv_aoJgAVFazFTqicdGRRWzwa-6pPWBTCT_wXLyPk"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620497-83c75778-bd1e-41cc-9cf8-8109422c2773.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA0OTctODNjNzU3NzgtYmQxZS00MWNjLTljZjgtODEwOTQyMmMyNzczLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTJmYjQ3NTMxYWUxMzcyMDljY2MyZjZmZTdjNDFhYTJmYzQ0OWZlNTk3MTgyNWRlMTAxOTJkMTc0ZDkzMGI3OTcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.iRdv_aoJgAVFazFTqicdGRRWzwa-6pPWBTCT_wXLyPk"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description color_emulation.mp4">color_emulation.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403451242-255e8f95-449a-4774-9168-92bb78608fd5.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM0NTEyNDItMjU1ZThmOTUtNDQ5YS00Nzc0LTkxNjgtOTJiYjc4NjA4ZmQ1Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWVmNjBiMGMwMmMzNWM3ZDJkYzI0YzNkNGUyZWFhMjhlNWIyOTAyZDQyNDdmNDk4Y2VhYjcyZTBjODQ1ZGJlZGQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.LqNg2hGK2UEsuhGxyXQe94ozBTrJRnX95kFxB9Q11TQ" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403451242-255e8f95-449a-4774-9168-92bb78608fd5.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM0NTEyNDItMjU1ZThmOTUtNDQ5YS00Nzc0LTkxNjgtOTJiYjc4NjA4ZmQ1Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWVmNjBiMGMwMmMzNWM3ZDJkYzI0YzNkNGUyZWFhMjhlNWIyOTAyZDQyNDdmNDk4Y2VhYjcyZTBjODQ1ZGJlZGQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.LqNg2hGK2UEsuhGxyXQe94ozBTrJRnX95kFxB9Q11TQ" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Planet X3 in Hercules graphics and VGA modes</h3><a id="user-content-planet-x3-in-hercules-graphics-and-vga-modes" aria-label="Permalink: Planet X3 in Hercules graphics and VGA modes" href="#planet-x3-in-hercules-graphics-and-vga-modes"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620508-9b68da63-0ea2-4d47-b7fd-3e72d05a9275.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1MDgtOWI2OGRhNjMtMGVhMi00ZDQ3LWI3ZmQtM2U3MmQwNWE5Mjc1LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTY2ZTVhODViZjMwZTM5ZjFiMTg4ZjgxZmFmMmU2MGQ2NTE4OTk0Yzk0YjFkNmI4ZDNhZWMxYjA3OTJhYjUwYWUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.zfta0Qqp7baLnQHiD4uP7-78Gdw4yjzvQCf4En3tUT8"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620508-9b68da63-0ea2-4d47-b7fd-3e72d05a9275.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1MDgtOWI2OGRhNjMtMGVhMi00ZDQ3LWI3ZmQtM2U3MmQwNWE5Mjc1LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTY2ZTVhODViZjMwZTM5ZjFiMTg4ZjgxZmFmMmU2MGQ2NTE4OTk0Yzk0YjFkNmI4ZDNhZWMxYjA3OTJhYjUwYWUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.zfta0Qqp7baLnQHiD4uP7-78Gdw4yjzvQCf4En3tUT8"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description Planet_X3.mp4">Planet_X3.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403613559-d3770d11-64d8-491e-b530-e117e26e44bb.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MTM1NTktZDM3NzBkMTEtNjRkOC00OTFlLWI1MzAtZTExN2UyNmU0NGJiLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWY0OTVhOTQ4ZWVjZjk3MTdhZmZmNmYxZTRmZDM1Y2IxZjgzNDFmOTY2ZGVlOTVmNDI2NGQ2NWE5YTA5ZjY5YjAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.j5zni_-93UJ7eVMsvCqvHbWJioRY1H3rdPDTGK4eA8U" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403613559-d3770d11-64d8-491e-b530-e117e26e44bb.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MTM1NTktZDM3NzBkMTEtNjRkOC00OTFlLWI1MzAtZTExN2UyNmU0NGJiLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWY0OTVhOTQ4ZWVjZjk3MTdhZmZmNmYxZTRmZDM1Y2IxZjgzNDFmOTY2ZGVlOTVmNDI2NGQ2NWE5YTA5ZjY5YjAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.j5zni_-93UJ7eVMsvCqvHbWJioRY1H3rdPDTGK4eA8U" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">ZZT version of King's Quest</h3><a id="user-content-zzt-version-of-kings-quest" aria-label="Permalink: ZZT version of King's Quest" href="#zzt-version-of-kings-quest"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620524-9dd0a693-d8e3-4094-badd-ff1a4859e9ca.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1MjQtOWRkMGE2OTMtZDhlMy00MDk0LWJhZGQtZmYxYTQ4NTllOWNhLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTU0NjExNTg2NzMxNzkzYjBmNTYxMWEwYWU4YTc5YTAwMmQ0YzYzMWE1ZWYyY2JlZjRkOGE5ZjVhNzllMDJmMTUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.gpo27s6Be3J3gceRERjXZ9xUCWvYzRW0ECCTR3dvcS8"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620524-9dd0a693-d8e3-4094-badd-ff1a4859e9ca.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1MjQtOWRkMGE2OTMtZDhlMy00MDk0LWJhZGQtZmYxYTQ4NTllOWNhLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTU0NjExNTg2NzMxNzkzYjBmNTYxMWEwYWU4YTc5YTAwMmQ0YzYzMWE1ZWYyY2JlZjRkOGE5ZjVhNzllMDJmMTUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.gpo27s6Be3J3gceRERjXZ9xUCWvYzRW0ECCTR3dvcS8"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description kqzzt.mp4">kqzzt.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403606146-27d068f2-91de-4887-bba5-bcdd4b63fbf2.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDYxNDYtMjdkMDY4ZjItOTFkZS00ODg3LWJiYTUtYmNkZDRiNjNmYmYyLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTUwYTY0ZWI2ZTU4ODQ0ZWEyZTIzNDcyYjZiOTM4MzRiNjNmN2QwOWZjZTA4ZDBkNGExNzk0Zjk2ODg0Mzc2ZDgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.2e55z4QM84kkDy2UqypDhtzJCw7UiuFFaQtuBXEs0hk" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403606146-27d068f2-91de-4887-bba5-bcdd4b63fbf2.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDYxNDYtMjdkMDY4ZjItOTFkZS00ODg3LWJiYTUtYmNkZDRiNjNmYmYyLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTUwYTY0ZWI2ZTU4ODQ0ZWEyZTIzNDcyYjZiOTM4MzRiNjNmN2QwOWZjZTA4ZDBkNGExNzk0Zjk2ODg0Mzc2ZDgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.2e55z4QM84kkDy2UqypDhtzJCw7UiuFFaQtuBXEs0hk" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Scott Adams's Pirate Adventure</h3><a id="user-content-scott-adamss-pirate-adventure" aria-label="Permalink: Scott Adams's Pirate Adventure" href="#scott-adamss-pirate-adventure"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620542-cdee7b09-22fd-414b-a960-4c7b1f6e383b.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1NDItY2RlZTdiMDktMjJmZC00MTRiLWE5NjAtNGM3YjFmNmUzODNiLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTUxNDliYTNjMDIxOWEyOWUyMDY4ODdhMjliYWZhNDhjNDgwYzNjODYzMGNjNjgzMjFiZGEyMDNhY2VlY2IyZDkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.RtLRRewad2bchcG1w6NN0vvtBkAy0AqcMfYYJy06I6Q"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620542-cdee7b09-22fd-414b-a960-4c7b1f6e383b.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1NDItY2RlZTdiMDktMjJmZC00MTRiLWE5NjAtNGM3YjFmNmUzODNiLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTUxNDliYTNjMDIxOWEyOWUyMDY4ODdhMjliYWZhNDhjNDgwYzNjODYzMGNjNjgzMjFiZGEyMDNhY2VlY2IyZDkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.RtLRRewad2bchcG1w6NN0vvtBkAy0AqcMfYYJy06I6Q"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description pirate_adventure.mp4">pirate_adventure.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403606263-f46fa540-cb63-4454-81f6-fe7e84447212.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDYyNjMtZjQ2ZmE1NDAtY2I2My00NDU0LTgxZjYtZmU3ZTg0NDQ3MjEyLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTcyNDg2YmRjMTExNTQ0ZjY3M2Q5ZWRlYzRhODkyZDE5YTQ1MTZiOWM0YjAyYzZmNTFkZjhlMGI3ZDQ4Y2M2MmQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.3QfiR6kw40G9GI8X3vvPcW-OLcR48_z0j5coOFRM1cE" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403606263-f46fa540-cb63-4454-81f6-fe7e84447212.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDYyNjMtZjQ2ZmE1NDAtY2I2My00NDU0LTgxZjYtZmU3ZTg0NDQ3MjEyLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTcyNDg2YmRjMTExNTQ0ZjY3M2Q5ZWRlYzRhODkyZDE5YTQ1MTZiOWM0YjAyYzZmNTFkZjhlMGI3ZDQ4Y2M2MmQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.3QfiR6kw40G9GI8X3vvPcW-OLcR48_z0j5coOFRM1cE" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">SimCity</h3><a id="user-content-simcity" aria-label="Permalink: SimCity" href="#simcity"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403621009-2167c72f-0b0a-4a8b-97ed-9fb0a39fde6e.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjEwMDktMjE2N2M3MmYtMGIwYS00YThiLTk3ZWQtOWZiMGEzOWZkZTZlLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTM4MzJjYzRlNTEwZThhOGNjMWNkMGYyNGYzNDA5MDAyYWJkMzhiNjU3OTVjZGRkYzU0M2EzYTlmN2E3Mjc2ZDMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Xez1016NauocVi3ea_zQuRNh0P-HAZrKgglXD14APKc"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403621009-2167c72f-0b0a-4a8b-97ed-9fb0a39fde6e.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjEwMDktMjE2N2M3MmYtMGIwYS00YThiLTk3ZWQtOWZiMGEzOWZkZTZlLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTM4MzJjYzRlNTEwZThhOGNjMWNkMGYyNGYzNDA5MDAyYWJkMzhiNjU3OTVjZGRkYzU0M2EzYTlmN2E3Mjc2ZDMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Xez1016NauocVi3ea_zQuRNh0P-HAZrKgglXD14APKc"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description simcity.mp4">simcity.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403606378-a8b7a0c0-d77a-4ccb-a051-0ceed19d8957.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDYzNzgtYThiN2EwYzAtZDc3YS00Y2NiLWEwNTEtMGNlZWQxOWQ4OTU3Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZmYzQyNDQzYTg2NzU0ZTFjNDBjODg1Njc0NjUxOWEwMDFjODVjMGY1ZTc5NWU1ZGFhZmRkZGY5MDMwNGJiYmYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.7leqxzEq12hT9BuOfOAk4OUSX13LXbMYKUTmknTQKpI" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403606378-a8b7a0c0-d77a-4ccb-a051-0ceed19d8957.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDYzNzgtYThiN2EwYzAtZDc3YS00Y2NiLWEwNTEtMGNlZWQxOWQ4OTU3Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZmYzQyNDQzYTg2NzU0ZTFjNDBjODg1Njc0NjUxOWEwMDFjODVjMGY1ZTc5NWU1ZGFhZmRkZGY5MDMwNGJiYmYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.7leqxzEq12hT9BuOfOAk4OUSX13LXbMYKUTmknTQKpI" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Zork</h3><a id="user-content-zork" aria-label="Permalink: Zork" href="#zork"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620553-1d12efe1-577a-438d-a59a-0259012a46fe.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1NTMtMWQxMmVmZTEtNTc3YS00MzhkLWE1OWEtMDI1OTAxMmE0NmZlLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWU3M2RjYmIzMWJlNmViNzQyZWE5Zjk3YjExMzg4ZTFhZTJiZDM1MzZhZjJhODVjODFjYjZhODE1ZmM4YjAwNmEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.-FM0PWA2RcCGi2GjHMp3Urg6lYnZvrLDjh80CruQPk8"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620553-1d12efe1-577a-438d-a59a-0259012a46fe.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1NTMtMWQxMmVmZTEtNTc3YS00MzhkLWE1OWEtMDI1OTAxMmE0NmZlLmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWU3M2RjYmIzMWJlNmViNzQyZWE5Zjk3YjExMzg4ZTFhZTJiZDM1MzZhZjJhODVjODFjYjZhODE1ZmM4YjAwNmEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.-FM0PWA2RcCGi2GjHMp3Urg6lYnZvrLDjh80CruQPk8"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description zork.mp4">zork.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403609300-8c195b5b-e7e3-49f2-b16d-81d6f7fbcded.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDkzMDAtOGMxOTViNWItZTdlMy00OWYyLWIxNmQtODFkNmY3ZmJjZGVkLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWI4MDQ5NGUzMDlkNzhkOTMwZTMxZjg4NmQ4M2RlNmEzMjJmYTkyZWM4YWRhZWI1ODFkZmE2MmFkNDQ3MjFiNTAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.VlDx6xhNtDWRlb2EzPPV2_Ah5kQW7kCmNTTzrE04W_o" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403609300-8c195b5b-e7e3-49f2-b16d-81d6f7fbcded.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDkzMDAtOGMxOTViNWItZTdlMy00OWYyLWIxNmQtODFkNmY3ZmJjZGVkLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWI4MDQ5NGUzMDlkNzhkOTMwZTMxZjg4NmQ4M2RlNmEzMjJmYTkyZWM4YWRhZWI1ODFkZmE2MmFkNDQ3MjFiNTAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.VlDx6xhNtDWRlb2EzPPV2_Ah5kQW7kCmNTTzrE04W_o" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h3 tabindex="-1" dir="auto">Minix with Colossal Cave Adventure</h3><a id="user-content-minix-with-colossal-cave-adventure" aria-label="Permalink: Minix with Colossal Cave Adventure" href="#minix-with-colossal-cave-adventure"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/33447810/403620562-4f26ca64-4a00-4bcc-9298-0007501bbc29.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1NjItNGYyNmNhNjQtNGEwMC00YmNjLTkyOTgtMDAwNzUwMWJiYzI5LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTMwZTJjMzBhOTk5OGRmNTFiNDJmYWI1ZjJhYjk1M2ZkYWU3NDc5OTc4YTUzMDBlMmJiNTMxNTY4YjdhZTkzZDEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.ypmOhduw_2PmtIRW2bsdHmv4_3gI2KbQ42qIC1RwOVQ"><img width="60" src="https://private-user-images.githubusercontent.com/33447810/403620562-4f26ca64-4a00-4bcc-9298-0007501bbc29.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MjA1NjItNGYyNmNhNjQtNGEwMC00YmNjLTkyOTgtMDAwNzUwMWJiYzI5LmpwZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTMwZTJjMzBhOTk5OGRmNTFiNDJmYWI1ZjJhYjk1M2ZkYWU3NDc5OTc4YTUzMDBlMmJiNTMxNTY4YjdhZTkzZDEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.ypmOhduw_2PmtIRW2bsdHmv4_3gI2KbQ42qIC1RwOVQ"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description minix.adventure.mp4">minix.adventure.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/33447810/403608183-d3a6b4d2-5469-4d94-b6e4-5f47aeae23ec.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDgxODMtZDNhNmI0ZDItNTQ2OS00ZDk0LWI2ZTQtNWY0N2FlYWUyM2VjLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWFjNTQ1ZmYxNWY0MzhlNzFlNmIzZWU4ZTQ2NjYwNDAzMGZjY2EwZjMwOTU4Mzg4NWI0NmZlZDg3NGRhMjQ3ODcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.zGnpbJfXTSZOnukfE22Sp6GjaIAlrM03aQhxC8gnOAo" data-canonical-src="https://private-user-images.githubusercontent.com/33447810/403608183-d3a6b4d2-5469-4d94-b6e4-5f47aeae23ec.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDUyODIxMDIsIm5iZiI6MTc0NTI4MTgwMiwicGF0aCI6Ii8zMzQ0NzgxMC80MDM2MDgxODMtZDNhNmI0ZDItNTQ2OS00ZDk0LWI2ZTQtNWY0N2FlYWUyM2VjLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA0MjIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNDIyVDAwMzAwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWFjNTQ1ZmYxNWY0MzhlNzFlNmIzZWU4ZTQ2NjYwNDAzMGZjY2EwZjMwOTU4Mzg4NWI0NmZlZDg3NGRhMjQ3ODcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.zGnpbJfXTSZOnukfE22Sp6GjaIAlrM03aQhxC8gnOAo" controls="controls" muted="muted">

  </video>
</details>


<p dir="auto"><h2 tabindex="-1" dir="auto">Sample Images</h2><a id="user-content-sample-images" aria-label="Permalink: Sample Images" href="#sample-images"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Games</h3><a id="user-content-games" aria-label="Permalink: Games" href="#games"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Doom</h4><a id="user-content-doom-1" aria-label="Permalink: Doom" href="#doom-1"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/doom1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/doom1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/doom2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/doom2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/doom3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/doom3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Monkey Island</h4><a id="user-content-monkey-island" aria-label="Permalink: Monkey Island" href="#monkey-island"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/monkeyisland1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/monkeyisland1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/monkeyisland2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/monkeyisland2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/monkeyisland3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/monkeyisland3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Space Quest 1</h4><a id="user-content-space-quest-1" aria-label="Permalink: Space Quest 1" href="#space-quest-1"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/spacequest1-1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/spacequest1-1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/spacequest1-2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/spacequest1-2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/spacequest1-3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/spacequest1-3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Space Quest 3</h4><a id="user-content-space-quest-3" aria-label="Permalink: Space Quest 3" href="#space-quest-3"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/spacequest3-1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/spacequest3-1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/spacequest3-2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/spacequest3-2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/spacequest3-3.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/spacequest3-3.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/spacequest3-4.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/spacequest3-4.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Wolfenstein 3D</h4><a id="user-content-wolfenstein-3d-1" aria-label="Permalink: Wolfenstein 3D" href="#wolfenstein-3d-1"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/wolf3d1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/wolf3d1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/wolf3d2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/wolf3d2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/wolf3d3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/wolf3d3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Test Drive</h4><a id="user-content-test-drive" aria-label="Permalink: Test Drive" href="#test-drive"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/testdrive2-2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/testdrive2-2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/testdrive1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/testdrive1.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Prince of Persia</h4><a id="user-content-prince-of-persia" aria-label="Permalink: Prince of Persia" href="#prince-of-persia"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/princeofpersia1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/princeofpersia1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/princeofpersia2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/princeofpersia2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">SimCity</h4><a id="user-content-simcity-1" aria-label="Permalink: SimCity" href="#simcity-1"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/simcity1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/simcity1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/simcity2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/simcity2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">The Black Cauldron</h4><a id="user-content-the-black-cauldron" aria-label="Permalink: The Black Cauldron" href="#the-black-cauldron"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/blackcauldron1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/blackcauldron1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/blackcauldron2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/blackcauldron2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Commander Keen: Keen Dreams</h4><a id="user-content-commander-keen-keen-dreams" aria-label="Permalink: Commander Keen: Keen Dreams" href="#commander-keen-keen-dreams"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/keendreams1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/keendreams1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/keendreams2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/keendreams2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/keendreams3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/keendreams3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Commander Keen: Goodbye Galaxy!</h4><a id="user-content-commander-keen-goodbye-galaxy" aria-label="Permalink: Commander Keen: Goodbye Galaxy!" href="#commander-keen-goodbye-galaxy"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/keengalaxy1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/keengalaxy1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/keengalaxy2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/keengalaxy2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">King's Quest 1</h4><a id="user-content-kings-quest-1-1" aria-label="Permalink: King's Quest 1" href="#kings-quest-1-1"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/kingsquest1-1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/kingsquest1-1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/kingsquest1-2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/kingsquest1-2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">King's Quest 4</h4><a id="user-content-kings-quest-4" aria-label="Permalink: King's Quest 4" href="#kings-quest-4"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/kingsquest4-1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/kingsquest4-1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/kingsquest4-2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/kingsquest4-2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/kingsquest4-3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/kingsquest4-3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Attack of the Petscii Robots</h4><a id="user-content-attack-of-the-petscii-robots" aria-label="Permalink: Attack of the Petscii Robots" href="#attack-of-the-petscii-robots"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/petsciirobots.JPG"><img width="60%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/petsciirobots.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Planet X3</h4><a id="user-content-planet-x3" aria-label="Permalink: Planet X3" href="#planet-x3"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/planetX3-1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/planetX3-1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/planetX3-2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/planetX3-2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/planetX3-3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/planetX3-3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Police Quest 1</h4><a id="user-content-police-quest-1" aria-label="Permalink: Police Quest 1" href="#police-quest-1"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/policequest1-1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/policequest1-1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/policequest1-2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/policequest1-2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/policequest1-3.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/policequest1-3.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/policequest1-4.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/policequest1-4.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Windows Solitaire</h4><a id="user-content-windows-solitaire" aria-label="Permalink: Windows Solitaire" href="#windows-solitaire"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/windowssolitaire.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/windowssolitaire.JPG"></a>
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Applications</h3><a id="user-content-applications" aria-label="Permalink: Applications" href="#applications"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Word for Windows</h4><a id="user-content-word-for-windows" aria-label="Permalink: Word for Windows" href="#word-for-windows"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/winword1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/winword1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/winword2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/winword2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Excel</h4><a id="user-content-excel" aria-label="Permalink: Excel" href="#excel"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/excel1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/excel1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/excel2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/excel2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Word 5.5</h4><a id="user-content-word-55" aria-label="Permalink: Word 5.5" href="#word-55"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/word5_5.JPG"><img width="60%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/word5_5.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Wordstar 7</h4><a id="user-content-wordstar-7" aria-label="Permalink: Wordstar 7" href="#wordstar-7"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/wordstar1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/wordstar1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/wordstar2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/wordstar2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">MS Works</h4><a id="user-content-ms-works" aria-label="Permalink: MS Works" href="#ms-works"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/msworks1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/msworks1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/msworks2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/msworks2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/msworks3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/msworks3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Scandisk</h4><a id="user-content-scandisk" aria-label="Permalink: Scandisk" href="#scandisk"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/scandisk.JPG"><img width="60%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/scandisk.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Adlib Jukebox</h4><a id="user-content-adlib-jukebox-1" aria-label="Permalink: Adlib Jukebox" href="#adlib-jukebox-1"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/adlib_jukebox1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/adlib_jukebox1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/apps/adlib_jukebox2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/apps/adlib_jukebox2.JPG"></a>
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Networking</h3><a id="user-content-networking" aria-label="Permalink: Networking" href="#networking"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Wifi Setup</h4><a id="user-content-wifi-setup" aria-label="Permalink: Wifi Setup" href="#wifi-setup"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/settingWifi1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/settingWifi1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/settingWifi2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/settingWifi2.JPG"></a>
</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/settingWifi3.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/settingWifi3.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/settingWifi4.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/settingWifi4.JPG"></a>
</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/settingWifi5.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/settingWifi5.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/settingWifi6.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/settingWifi6.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">NE2000 driver -- DHCP client -- ping</h4><a id="user-content-ne2000-driver----dhcp-client----ping" aria-label="Permalink: NE2000 driver -- DHCP client -- ping" href="#ne2000-driver----dhcp-client----ping"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/NE2000.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/NE2000.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/DHCP.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/DHCP.JPG"></a>
</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/ping1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/ping1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/ping2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/ping2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Web browsing</h4><a id="user-content-web-browsing" aria-label="Permalink: Web browsing" href="#web-browsing"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/webbrowser1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/webbrowser1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/webbrowser2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/webbrowser2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/webbrowser3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/webbrowser3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">FTP and telnet</h4><a id="user-content-ftp-and-telnet" aria-label="Permalink: FTP and telnet" href="#ftp-and-telnet"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/ftp1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/ftp1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/ftp2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/ftp2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/ftp3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/ftp3.JPG"></a>
</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/telnet1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/telnet1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/network/telnet2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/network/telnet2.JPG"></a>
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">System</h3><a id="user-content-system" aria-label="Permalink: System" href="#system"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Startup Screen</h4><a id="user-content-startup-screen" aria-label="Permalink: Startup Screen" href="#startup-screen"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/startup_screen.JPG"><img width="60%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/startup_screen.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Machine Selection</h4><a id="user-content-machine-selection" aria-label="Permalink: Machine Selection" href="#machine-selection"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/machine_selection.JPG"><img width="60%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/machine_selection.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Popup Menu: you can open it any time with a hotkey</h4><a id="user-content-popup-menu-you-can-open-it-any-time-with-a-hotkey" aria-label="Permalink: Popup Menu: you can open it any time with a hotkey" href="#popup-menu-you-can-open-it-any-time-with-a-hotkey"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/pop_menu.JPG"><img width="60%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/pop_menu.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Audio Settings</h4><a id="user-content-audio-settings" aria-label="Permalink: Audio Settings" href="#audio-settings"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/audio_settings.JPG"><img width="60%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/audio_settings.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Using a USB flash drive</h4><a id="user-content-using-a-usb-flash-drive-1" aria-label="Permalink: Using a USB flash drive" href="#using-a-usb-flash-drive-1"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/usb_flash_driver.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/usb_flash_driver.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/usb_flash_dir.JPG"><img width="48%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/usb_flash_dir.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Hibernate and resume</h4><a id="user-content-hibernate-and-resume" aria-label="Permalink: Hibernate and resume" href="#hibernate-and-resume"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/hibernated.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/hibernated.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/unhibernating1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/unhibernating1.JPG"></a>
</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/unhibernating2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/unhibernating2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/unhibernated.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/unhibernated.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Transferring a file between Evertop and Book 8088 via RS232 serial connection with Procomm Plus</h4><a id="user-content-transferring-a-file-between-evertop-and-book-8088-via-rs232-serial-connection-with-procomm-plus" aria-label="Permalink: Transferring a file between Evertop and Book 8088 via RS232 serial connection with Procomm Plus" href="#transferring-a-file-between-evertop-and-book-8088-via-rs232-serial-connection-with-procomm-plus"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/serial_xfer1.JPG"><img width="47%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/serial_xfer1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/system/serial_xfer2.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/system/serial_xfer2.JPG"></a>
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Minix and its C compiler</h3><a id="user-content-minix-and-its-c-compiler" aria-label="Permalink: Minix and its C compiler" href="#minix-and-its-c-compiler"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/minix/minixboot.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/minix/minixboot.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/minix/minix_c_compiler.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/minix/minix_c_compiler.JPG"></a>
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Exterior Views</h3><a id="user-content-exterior-views" aria-label="Permalink: Exterior Views" href="#exterior-views"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Right side showing earphone jack, USB flash drive, micro USB, PS/2, and DB9 RS232 serial ports</h4><a id="user-content-right-side-showing-earphone-jack-usb-flash-drive-micro-usb-ps2-and-db9-rs232-serial-ports" aria-label="Permalink: Right side showing earphone jack, USB flash drive, micro USB, PS/2, and DB9 RS232 serial ports" href="#right-side-showing-earphone-jack-usb-flash-drive-micro-usb-ps2-and-db9-rs232-serial-ports"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/rightside.JPG"><img width="100%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/rightside.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Left side showing ethernet, variable voltage input, and TTL serial ports</h4><a id="user-content-left-side-showing-ethernet-variable-voltage-input-and-ttl-serial-ports" aria-label="Permalink: Left side showing ethernet, variable voltage input, and TTL serial ports" href="#left-side-showing-ethernet-variable-voltage-input-and-ttl-serial-ports"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/ethernet&amp;charger2.JPG"><img width="100%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/ethernet&amp;charger2.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">SD card slot</h4><a id="user-content-sd-card-slot" aria-label="Permalink: SD card slot" href="#sd-card-slot"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/sdcardslot1.JPG"><img width="100%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/sdcardslot1.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Standing up</h4><a id="user-content-standing-up" aria-label="Permalink: Standing up" href="#standing-up"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/standing_angle1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/standing_angle1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/solar_stand1.JPG"><img width="30%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/solar_stand1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/standing_rightside2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/standing_rightside2.JPG"></a>
</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/standing_leftside1.JPG"><img width="32%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/standing_leftside1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/standing_rightside1.JPG"><img width="32%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/standing_rightside1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/standing_rightside3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/standing_rightside3.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Unfolded</h4><a id="user-content-unfolded" aria-label="Permalink: Unfolded" href="#unfolded"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/unfolded_front.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/unfolded_front.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/unfolded_back.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/unfolded_back.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Volt meter</h4><a id="user-content-volt-meter" aria-label="Permalink: Volt meter" href="#volt-meter"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/voltmeter1.JPG"><img width="60%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/voltmeter1.JPG"></a>
</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">Variable voltage charging: 3V, 9V, 13V, 19V</h4><a id="user-content-variable-voltage-charging-3v-9v-13v-19v" aria-label="Permalink: Variable voltage charging: 3V, 9V, 13V, 19V" href="#variable-voltage-charging-3v-9v-13v-19v"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/3v_charging1.JPG"><img width="24%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/3v_charging1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/9V_charging1.JPG"><img width="24%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/9V_charging1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/13v_charging1.JPG"><img width="24%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/13v_charging1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/19v_charging1.JPG"><img width="24%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/19v_charging1.JPG"></a>
</p>  

<p dir="auto"><h4 tabindex="-1" dir="auto">Keyboard removed and keyboard cord storage</h4><a id="user-content-keyboard-removed-and-keyboard-cord-storage" aria-label="Permalink: Keyboard removed and keyboard cord storage" href="#keyboard-removed-and-keyboard-cord-storage"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/keyboard_detached1.JPG"><img width="30%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/keyboard_detached1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/keyboard_detached2.JPG"><img width="31.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/keyboard_detached2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/keyboard_detached3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/keyboard_detached3.JPG"></a>
</p>  
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/keyboard_cord_storage1.JPG"><img width="63%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/keyboard_cord_storage1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/keyboard_cord_storage2.JPG"><img width="36%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/keyboard_cord_storage2.JPG"></a>
</p>  

<p dir="auto"><h4 tabindex="-1" dir="auto">Hacker friendly motherboard access</h4><a id="user-content-hacker-friendly-motherboard-access" aria-label="Permalink: Hacker friendly motherboard access" href="#hacker-friendly-motherboard-access"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/cpucover.JPG"><img width="43.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/cpucover.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/cpucover_opened.JPG"><img width="55.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/cpucover_opened.JPG"></a>
</p>  
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/cpu.JPG"><img width="70%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/cpu.JPG"></a>
</p>  

<p dir="auto"><h4 tabindex="-1" dir="auto">Current test points measurment in normal and power saving modes</h4><a id="user-content-current-test-points-measurment-in-normal-and-power-saving-modes" aria-label="Permalink: Current test points measurment in normal and power saving modes" href="#current-test-points-measurment-in-normal-and-power-saving-modes"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/current1.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/current1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/power_saving_current.JPG"><img width="49%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/power_saving_current.JPG"></a>
</p>  

<p dir="auto"><h4 tabindex="-1" dir="auto">Solar panel and removal</h4><a id="user-content-solar-panel-and-removal" aria-label="Permalink: Solar panel and removal" href="#solar-panel-and-removal"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/solar_panel.JPG"><img width="23%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/solar_panel.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/solar_cord1.JPG"><img width="27%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/solar_cord1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/solar_cord2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/solar_cord2.JPG"></a>
</p>  
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/solar_plug_attached.JPG"><img width="14.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/solar_plug_attached.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/solar_plug_detached.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/solar_plug_detached.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/solar_panel_detached1.JPG"><img width="43%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/solar_panel_detached1.JPG"></a>
</p> 

<p dir="auto"><h4 tabindex="-1" dir="auto">Using external keyboard and mouse</h4><a id="user-content-using-external-keyboard-and-mouse" aria-label="Permalink: Using external keyboard and mouse" href="#using-external-keyboard-and-mouse"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/extern_kbd_mouse5.JPG"><img width="70.25%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/extern_kbd_mouse5.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/extern_kbd_mouse_rightside.JPG"><img width="27.75%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/extern_kbd_mouse_rightside.JPG"></a>
</p>  

<p dir="auto"><h4 tabindex="-1" dir="auto">All together and all apart: side by side comparison</h4><a id="user-content-all-together-and-all-apart-side-by-side-comparison" aria-label="Permalink: All together and all apart: side by side comparison" href="#all-together-and-all-apart-side-by-side-comparison"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/games/testdrive2-1.JPG"><img width="49.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/games/testdrive2-1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/exterior/opendevice3.JPG"><img width="48.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/exterior/opendevice3.JPG"></a>
</p>  

<p dir="auto"><h3 tabindex="-1" dir="auto">Evertop Min - The same system, but minimized</h3><a id="user-content-evertop-min---the-same-system-but-minimized" aria-label="Permalink: Evertop Min - The same system, but minimized" href="#evertop-min---the-same-system-but-minimized"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/spacequest3.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/spacequest3.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/excel.JPG"><img width="39%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/excel.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/smallkbd1.JPG"><img width="27%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/smallkbd1.JPG"></a>
</p>  
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/smallkbd2.JPG"><img width="27%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/smallkbd2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/dieboldkbd.JPG"><img width="28%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/dieboldkbd.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/fullkeyboard&amp;mouse1.JPG"><img width="44%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/fullkeyboard&amp;mouse1.JPG"></a>
</p>  
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/rightside1.JPG"><img width="29%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/rightside1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/leftside2.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/leftside2.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/frontside2.JPG"><img width="37%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/frontside2.JPG"></a>
</p>  
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/connected_devices1.JPG"><img width="33%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/connected_devices1.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/connected_devices4.JPG"><img width="31.5%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/connected_devices4.JPG"></a>
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/ericjenott/Evertop/blob/main/images/min/with_max2.jpg"><img width="26%" src="https://github.com/ericjenott/Evertop/raw/main/images/min/with_max2.jpg"></a>
</p>  
<br>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Future of Compute: Nvidia's Crown Is Slipping (138 pts)]]></title>
            <link>https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia</link>
            <guid>43757017</guid>
            <pubDate>Mon, 21 Apr 2025 22:06:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia">https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia</a>, See on <a href="https://news.ycombinator.com/item?id=43757017">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png" width="640" height="472" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:472,&quot;width&quot;:640,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2eec847b-0926-40c7-b8b0-3098d849a02c_640x472.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Jensen Huang delivering the world's first DGX-1 server to OpenAI in 2016. Credit: Tom‚Äôs Hardware</figcaption></figure></div><p><span>No one has benefitted from </span><a href="https://gwern.net/scaling-hypothesis" rel="">the scaling hypothesis</a><span> quite like NVIDIA. On the back of an AI boom and GPU </span><a href="https://www.hpcwire.com/2024/06/10/nvidia-shipped-3-76-million-data-center-gpus-in-2023-according-to-study/" rel="">monopoly</a><span>, they‚Äôve become the fastest scaling hardware company in history‚Äìadding $2T of value in 13 months with </span><a href="https://www.marketwatch.com/livecoverage/nvidia-earnings-stock-results-q2-guidance-revenue-ai/card/nvidia-s-gross-margin-falls-sequentially-for-the-first-time-in-2-years-pJ6MoZSBfsmWEPpsA4Yu" rel="">SaaS-like margins</a><span>.&nbsp;</span></p><p><span>While the H100 generation likely represents peak pricing power (new </span><a href="https://www.semianalysis.com/p/nvidia-b100-b200-gb200-cogs-pricing" rel="">B200s have lower margins</a><span> and higher COGS), an immediate lack of alternatives means they‚Äôll continue to print cash.&nbsp;</span></p><p><span>The open question is long-term (&gt;6yrs) durability</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-150727993" href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia#footnote-1-150727993" target="_self" rel="">1</a></span><span>. Hyperscalers (Google, Microsoft, Amazon, and Meta) are aggressively consolidating AI demand to become the dominant consumers of AI accelerators; while developing competitive, highly-credible chip efforts.&nbsp;</span></p><p><span>Simultaneously, the sheer scale of compute needs has hit limits on capex, power availability, and infrastructure development. This is driving an enormous shift towards distributed, vertically-integrated, and co-optimized </span><em>systems</em><span> (chips, racks, networking, cooling, infrastructure software, power) that NVIDIA is ill-prepared to supply.</span></p><p><span>In this paradigm, </span><em>NVIDIA can lose with the highest-performing GPUs</em><strong>; </strong><span>the implications will reverberate at every level of the AI stack‚Äìfrom fabs and semiconductors, to infrastructure, clouds, model developers, and the application layer.&nbsp;</span></p><p><strong>Demand Consolidation</strong></p><p>NVIDIAs predicament has been driven by hyperscalers' consolidation of AI workloads and accelerator demand‚Äìsetting the stage for toothier custom silicon and evolving infrastructure requirements.&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png" width="1270" height="754" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:754,&quot;width&quot;:1270,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a27a9c-2da8-4c5d-9c97-29ec3aa64d55_1270x754.png 1456w" sizes="100vw"></picture></div></a><figcaption>Credit: Platformonomics</figcaption></figure></div><p><span>Already, ~50% of NVIDIA‚Äôs datacenter demand is from hyperscalers, the </span><a href="https://blog.johnluttig.com/p/nvidia-envy-understanding-the-gpu" rel="">other half </a><span>comes from a large number of startups, enterprises, VCs, and national consortiums.&nbsp;</span></p><p><span>That share is set to shrink‚Äìthe tidal wave of startup spending on GPUs was a </span><a href="https://www.tomshardware.com/tech-industry/artificial-intelligence/nvidia-h100-buyers-are-reportedly-reselling-their-h100s-as-supply-issues-ease" rel="">transient phenomenon</a><span> to secure access in a fiercely competitive market. Today, most startups simply </span><a href="https://a16z.com/navigating-the-high-cost-of-ai-compute/" rel="">don‚Äôt have</a><span> unusual control or infrastructure requirements and are better served by the cloud.&nbsp;</span></p><p><span>As such, early purchases were ill-fated; this is borne out by </span><a href="https://www.theinformation.com/articles/startups-that-bought-too-many-nvidia-chips-may-have-to-rent-them-out" rel="">low utilization</a><span> and </span><a href="https://www.latent.space/p/gpu-bubble" rel="">abysmal ROI‚Äôs</a><span> for small/short term GPU rentals (usually offered by startups that over-provisioned and are forced to </span><a href="https://www.theinformation.com/articles/startups-that-bought-too-many-nvidia-chips-may-have-to-rent-them-out" rel="">rent out at a loss</a><span>). This is eerily reminiscent of dot com era startups defending costly server hardware as the world moved to the cloud.</span></p><p data-attrs="{&quot;url&quot;:&quot;https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p><p><span>More fundamentally, and contrary to early expectations, the model rollout has aggressively consolidated around a few closed source APIs. Even </span><a href="https://ai.meta.com/blog/llama-3-2-connect-2024-vision-edge-mobile-devices/" rel="">open source</a><span> and </span><a href="https://machinelearning.apple.com/research/introducing-apple-foundation-models" rel="">edge</a><span> models are now the domain of the hyperscalers. Custom, small-midsize models trained with unique data for specific uses have struggled (e.g. </span><a href="https://x.com/emollick/status/1770618237782307075" rel="">Bloomberg GPT</a><span>). Scaled frontier models can be </span><a href="https://www.theinformation.com/articles/metas-free-ai-isnt-cheap-to-use-companies-say" rel="">cheaper</a><span> while performing and generalizing better ‚Äì especially with effective RAG and </span><a href="https://openai.com/index/gpt-4o-fine-tuning/" rel="">widely available fine-tuning</a><span>. Thus, the value proposition for most companies training proprietary models is </span><a href="https://www.globenewswire.com/news-release/2024/06/11/2896928/0/en/Delays-Implementation-Issues-and-Unrealized-Benefits-Challenge-Generative-AI-Initiatives-in-2024.html" rel="">unclear</a><span>. Going forward, demand from this long tail of buyers looks shaky; considerably consolidating NVIDIA‚Äôs revenue base.</span></p><p><span>Meanwhile, the smaller independent clouds (Coreweave, Lambda, Crusoe, Runpod etc) have very uncertain futures. NVIDIA propped these businesses up with direct </span><a href="https://www.cnbc.com/2024/10/11/nvidia-backed-coreweave-picks-up-650-million-credit-line.html" rel="">investments</a><span> and </span><a href="https://www.fierce-network.com/cloud/coreweave-stokes-gpu-fire-86b-warchest" rel="">preferential GPU allocations</a><span> in order to drive fragmentation and reduce their reliance on the hyperscalers. Yet, they face long term headwinds without the product variety, infrastructure, and talent to cross-sell and establish lock-in; forcing them to sell commoditized H100 hours. </span><a href="https://www.semianalysis.com/p/nvidias-ramp-volume-asp-cloud-pricing" rel="">NVIDIA‚Äôs production ramp</a><span> has eroded scarcity and attractive margins baked into initial assumptions, while undermining the ‚Äúmoat‚Äù of favorable allocation. These companies are also extremely leveraged on 3rd party demand, and have been relying on </span><a href="https://www.theregister.com/2024/04/05/lambda_500m_loan/" rel="">GPU-secured debt</a><span> + heroic fundraising to expand fast enough to reach competitive economies of scale. It‚Äôs an open question if this will work, but things look ugly. The effects of lukewarm third party demand are already visible from the high availability and </span><a href="https://www.latent.space/p/gpu-bubble" rel="">declining GPU/hour costs</a><span> at small clouds.&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png" width="1456" height="895" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:895,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29acb333-5366-4781-80bc-f3f3321acc40_1600x984.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Credit: SemiAnalysis (Lambda, Fluidstack and Nebius prices have since dropped by &gt;50%)</figcaption></figure></div><p><span>Price cuts have reduced costs by 40%+ since last year and show no signs of stopping. This is disastrous for the durability and unit economics of independent clouds. Currently, you can rent GPUs for </span><a href="https://gpus.llm-utils.org/h100-gpu-cloud-availability-and-pricing/" rel="">$1.99/hour</a><span>. At those prices providers are getting &lt;10% ROE; if prices dip </span><a href="https://www.latent.space/p/gpu-bubble" rel="">below ~$1.65/hour</a><span> they will be eating losses. This pain may be obfuscated</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-150727993" href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia#footnote-2-150727993" target="_self" rel="">2</a></span><span> by long depreciation schedules (</span><a href="https://www.nextplatform.com/2024/05/02/how-to-make-more-money-renting-a-gpu-than-nvidia-makes-selling-it/" rel="">4+ year useful lives for an A100?</a><span>) but will come to bite eventually. When it does, NVIDIA will have few alternative outlets for demand.</span></p><p><span>In contrast, external hyperscale cloud demand has </span><a href="https://www.cnbc.com/2024/04/25/microsoft-says-cloud-ai-demand-exceeds-supply-despite-spending-surge.html" rel="">grown rapidly</a><span>. It‚Äôs so high that </span><a href="https://www.theinformation.com/articles/ai-developers-stymied-by-server-shortage-at-aws-microsoft-google" rel="">developers</a><span> (even </span><a href="https://www.theinformation.com/articles/openai-eases-away-from-microsoft-data-centers" rel="">OpenAI</a><span>!) are facing chronic shortages with monthlong lead times. This is bolstered by internal demand, with </span><a href="https://blog.johnluttig.com/p/nvidia-envy-understanding-the-gpu" rel="">50-70%</a><span> of total compute going to frontier training runs and inference for major launches (e.g. Copilot, Gemini, Meta AI). Despite </span><a href="https://www.platformonomics.com/2023/02/follow-the-capex-cloud-table-stakes-2022-retrospective/" rel="">$20b+ each</a><span> in yearly capex, all the major clouds are </span><a href="https://gpus.llm-utils.org/h100-gpu-cloud-availability-and-pricing/" rel="">at capacity</a><span>. With their scale and infrastructure experience, the ‚Äúbig three‚Äù cloud providers are best positioned to amortize depreciation and downtime costs while offering superior flexibility, security, and reliability. As a result, AI service </span><a href="https://www.crn.com/news/ai/2024/satya-nadella-has-microsoft-in-the-ai-driver-s-seat" rel="">margins</a><span> are high and customer trust is strong.&nbsp;</span></p><p><span>These are the same structural advantages that drove the original transition to the cloud from on-prem. Hyperscalers will </span><a href="https://stratechery.com/2024/interviews-with-microsoft-ceo-satya-nadella-and-cto-kevin-scott-about-the-ai-platform-shift/" rel="">keep pressing</a><span> and are poised to increase market share for AI workloads. As a result, we‚Äôve already begun to see a major revenue consolidation for NVIDIA: in their </span><a href="https://s201.q4cdn.com/141608511/files/doc_financials/2024/q2/19771e6b-cc29-4027-899e-51a0c386111e.pdf" rel="">Q2 earnings</a><span>, a single cloud provider accounted for 29% of quarterly data center (a $3.9b purchase or ~130k H100s).&nbsp;</span></p><p>In light of this, NVIDIA is almost akin to an automotive component supplier; deriving most of their revenue from four customers with deep coffers, talent, and competitive ambitions. They have no way to reverse this trend. Now, they must gamble the business on their most competent competitors' chip efforts.</p><p><strong>Competing Silicon</strong></p><p><span>NVIDIA‚Äôs dominance for powering parallel AI/ML workloads was a manageable equilibrium when GPU spending was in the hundreds of millions. This is no longer the case; Microsoft added $10B/quarter in incremental AI spend last year. Capex is now </span><a href="https://stratechery.com/2024/interviews-with-microsoft-ceo-satya-nadella-and-cto-kevin-scott-about-the-ai-platform-shift/#capex" rel="">&gt;25%</a><span> of gross profit at some hyperscalers with GPUs making up </span><a href="https://observer.com/2024/07/microsoft-q2-earnings-ai-cloud/" rel="">half</a><span> of infrastructure spend and </span><a href="https://www.dwarkeshpatel.com/i/149705443/scaling-costs-and-power-demand" rel="">~80%</a><span> of datacenter TCO. Also, unlike software, inference is core to the marginal cost structure.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png" width="1118" height="696" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/aed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:696,&quot;width&quot;:1118,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faed9f982-c050-476c-99d8-55b6ad42192d_1118x696.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Credit: John Huber</figcaption></figure></div><p><span>As future training runs ($5B+) bump against spending limitations, customization, and </span><a href="https://stratechery.com/2024/interviews-with-microsoft-ceo-satya-nadella-and-cto-kevin-scott-about-the-ai-platform-shift/#capex" rel="">capital efficiency will be paramount</a><span> to maximally scaling compute, training the best models, and staying competitive. Simply ignoring NVIDIA and their margin stacking is no longer an option.</span></p><p><span>While independent NVIDIA alternatives have struggled, the hyperscalers have a successful track record of substituting and designing out key chip suppliers. Meta designed NVIDIA out (!) for some of their </span><a href="https://www.semianalysis.com/p/meta-custom-silicon-whats-old-is" rel="">largest DLRM workloads with their ASICs</a><span>, and Google did the same for key video encoding workloads from YouTube. Amazon replaced hypervisors with Nitro back in 2012 and a </span><a href="https://www.semianalysis.com/p/amazons-cloud-crisis-how-aws-will" rel="">huge volume of intel CPUs with Graviton</a><span>.</span></p><p><span>Hyperscale customers present extreme risk</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-150727993" href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia#footnote-3-150727993" target="_self" rel="">3</a></span><span> as they </span><a href="https://www.spglobal.com/market-intelligence/en/news-insights/research/hyperscalers-stress-ai-credentials-optimization-and-developer-empowerment" rel="">focus relentlessly on cost reduction</a><span>, substitution, and internal chips efforts. In doing so, they (and key design partners like </span><a href="https://www.reuters.com/technology/marvell-wins-new-ai-chip-business-lower-margins-2024-04-11/" rel="">Marvell</a><span>, </span><a href="https://www.semianalysis.com/p/broadcoms-google-tpu-revenue-explosion" rel="">Broadcom</a><span>, </span><a href="https://www.datagravity.dev/p/hyperscaler-ai-custom-chips-asic" rel="">Astera</a><span>, </span><a href="https://www.datagravity.dev/p/hyperscaler-ai-custom-chips-asic" rel="">Arista</a><span> and </span><a href="https://globaltechresearch.substack.com/p/marvell-mrvl-us-vs-alchip-3661-tt" rel="">AIchip</a><span>) bring to bear massive amounts of capital and engineering talent to actively undermine NVIDIA‚Äôs core business.&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png" width="1456" height="508" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:508,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:805470,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa3bc9017-bff6-4fc2-8d00-3af329ec1d98_1818x634.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Growth projections for the custom compute market and Marvell‚Äôs revenue ramp. Credit: SeekingAlpha</figcaption></figure></div><p><span>Google is a prime example of this. Their legacy workloads (search, ads, translate) made them one of the largest consumers of accelerated computing and ML inference. As such, they‚Äôve been working on AI accelerators (TPUs) in-house </span><a href="https://thechipletter.substack.com/p/googles-first-tensor-processing-unit" rel="">since 2013</a><span>. While development now follows multi-year timelines, v1 only took </span><a href="https://arxiv.org/abs/1704.04760" rel="">15 months</a><span> from kickoff to deployment ‚Äì with limited </span><a href="https://www.computer.org/csdl/magazine/mi/2021/02/09351692/1r50VAsNljq" rel="">budget</a><span>, </span><a href="https://www.computer.org/csdl/magazine/mi/2021/02/09351692/1r50VAsNljq" rel="">talent</a><span>, and an architecture from a </span><a href="https://www.eecs.harvard.edu/htk/static/files/1978-cmu-cs-report-kung-leiserson.pdf" rel="">1978 paper.</a><span> Given this, TPU performance is astonishing. They‚Äôre </span><a href="https://www.semianalysis.com/p/tpuv5e-the-new-benchmark-in-cost" rel="">cheaper than H100s</a><span> for inference and competitive for large training runs‚ÄìGemini-Ultra, a GPT-4 Class, frontier model was trained exclusively on </span><a href="https://arxiv.org/abs/2312.11805" rel="">TPU V4 clusters</a><span> (these are 2 generations old!).&nbsp;</span></p><p><span>Large enterprises have switched as well. </span><a href="https://www.prnewswire.com/news-releases/midjourney-selects-google-cloud-to-power-ai-generated-creative-platform-301771558.html" rel="">Midjourney</a><span> trained exclusively on TPUs and Anthropic </span><a href="https://www.prnewswire.com/news-releases/google-announces-expansion-of-ai-partnership-with-anthropic-301981815.html" rel="">uses v5e for inference</a><span>. Most recently, Apple chose to train its SOTA </span><a href="https://www.ctee.com.tw/news/20240730700423-430704" rel="">3B parameter local model on a mix of TPU V4 and V5p</a><span> instead of NVIDIA.&nbsp;</span></p><p><span>The pace of improvement isn‚Äôt slowing. TPUs are in their 6th generation and investment has accelerated. The newest gen (Trillium) has </span><a href="https://cloud.google.com/blog/products/compute/introducing-trillium-6th-gen-tpus" rel="">doubled energy efficiency and HBM capacity while more than tripling peak performance</a><span>. Google is also iterating on its software stack. They‚Äôve transitioned away from TensorFlow to JAX ‚Äì which handles compilation and low level deployment optimization. While slower than CUDA on GPUs, JAX is an increasingly viable cross-platform alternative. This is the result of improving support (e.g. libraries like Equinox), better scalability, speedups from compiling into XLA, as well as native support for autodiff and JIT compilation.</span></p><p><span>Critically, TPUs + JAX have been so effective that they‚Äôve almost entirely replaced NVIDIA GPUs for Google‚Äôs internal AI Workloads. This includes all of Deepmind (!), Gemini training + inference, as well as YouTube DLRM. Employees literally </span><a href="https://news.ycombinator.com/item?id=39670121" rel="">can‚Äôt remember the last time they used NVIDIA</a><span>. Nearly all remaining demand is for external GCP clients, but even here TPUs are </span><a href="https://news.ycombinator.com/item?id=39822184" rel="">aggressively ramping</a><span> to serve more workloads and further constrain </span><a href="https://www.theinformation.com/articles/all-i-want-for-christmas-is-gpus" rel="">NVIDIA spend</a><span>.&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png" width="800" height="357" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:357,&quot;width&quot;:800,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0caccae1-77b1-4411-93e1-ca72800ac904_800x357.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Amazon Trainium Launch Event. Credit: Amazon</figcaption></figure></div><p><span>It‚Äôs not just Google, Amazon is </span><a href="https://www.cnbc.com/2023/08/12/amazon-is-racing-to-catch-up-in-generative-ai-with-custom-aws-chips.html" rel="">ramping up</a><span> chip development‚Äìpowered by its 2015 acquisition of Annapurna Labs</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-150727993" href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia#footnote-4-150727993" target="_self" rel="">4</a></span><span>. They recently launched second generation Inferentia and new Trainium chips, with spending projected to ramp up to </span><a href="https://www.reuters.com/technology/marvell-wins-new-ai-chip-business-lower-margins-2024-04-11/" rel="">$2.5B by 2026</a><span>. While Gen 1 ran Alexa‚Äôs backend, Gen 2 (with </span><a href="https://www.nextplatform.com/2023/12/04/how-aws-can-undercut-nvidia-with-homegrown-ai-compute-engines/" rel="">more HBM and bandwidth</a><span>) is focused on LLM price/performance optimization. It‚Äôs been accompanied by the </span><a href="https://awsdocs-neuron.readthedocs-hosted.com/en/latest/index.html" rel="">Neuron SDK</a><span> ‚Äì a custom compiler that </span><a href="https://awsdocs-neuron.readthedocs-hosted.com/en/latest/general/faq/training/neuron-training.html" rel="">completely replaces CUDA</a><span>. It provides low level control and is </span><a href="https://awsdocs-neuron.readthedocs-hosted.com/en/latest/frameworks/torch/index.html" rel="">compatible</a><span> with Torch, Jax, and TensorFlow ‚Äì developers particularly like its </span><a href="https://aws.amazon.com/machine-learning/neuron/" rel="">performance analysis tooling</a><span>. Combined, this has proved a viable NVIDIA substitute for inference and large model training workloads. Anthropic now uses Amazon as their primary compute vendor; </span><a href="https://www.aboutamazon.com/news/aws/what-you-need-to-know-about-the-aws-ai-chips-powering-amazons-partnership-with-anthropic" rel="">moving frontier model training and inference workloads</a><span> to custom hardware </span><a href="https://www.datacenterdynamics.com/en/news/anthropic-to-use-google-tpu-v5e-chips-to-train-generative-ai-models/" rel="">in lieu of</a><span> NVIDIA. The two are even </span><a href="https://press.aboutamazon.com/2023/9/amazon-and-anthropic-announce-strategic-collaboration-to-advance-generative-ai" rel="">co-developing</a><span> future generations of Amazon hardware, informed by Anthropic.</span></p><p><span>Microsoft is similarly focused on ramping up internal chip development efforts</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5-150727993" href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia#footnote-5-150727993" target="_self" rel="">5</a></span><span>. 300 employees have drawn on past chip experience (Xbox) and a close partnership with AMD (eventually Marvell by ‚Äò25-‚Äô26) to </span><a href="https://www.zdnet.com/article/microsoft-unveils-first-ai-chip-maia-100-and-cobalt-cpu/" rel="">launch their first-gen</a><span> Maia 100 accelerator and associated Cobalt 100 CPU (an ARM based, Ampere replacement). The Maia accelerator is </span><a href="https://www.semianalysis.com/p/microsoft-infrastructure-ai-and-cpu" rel="">impressive</a><span>; in raw </span><a href="https://www.forbes.com/sites/karlfreund/2023/11/16/microsoft-announces-maia-ai-arm-cpu-amd-mi300--new-nvidia-for-azure/" rel="">FLOPS</a><span> it‚Äôs competitive with H100s, but it‚Äôs been constrained by HBM bandwidth (likely on account of their </span><a href="https://www.forbes.com/sites/karlfreund/2023/11/16/microsoft-announces-maia-ai-arm-cpu-amd-mi300--new-nvidia-for-azure/" rel="">pre-LLM design</a><span> and optimization for CNNs).&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png" width="1456" height="700" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a25a7659-cad6-4428-a6a4-009467da337b_1794x862.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:700,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:812966,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa25a7659-cad6-4428-a6a4-009467da337b_1794x862.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Microsoft cloud accelerator software stack (Maia + AMD + NVIDIA). Credit: Microsoft</figcaption></figure></div><p><span>On the software side, Microsoft launched the </span><a href="https://azure.microsoft.com/en-us/blog/azure-maia-for-the-era-of-ai-from-silicon-to-software-to-systems/" rel="">Maia SDK</a><span> ‚Äì a Pytorch compatible compiler that leans on </span><a href="https://openai.com/index/triton/" rel="">OpenAI‚Äôs Triton</a><span> framework to replace CUDA</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-6-150727993" href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia#footnote-6-150727993" target="_self" rel="">6</a></span><span>. Triton is both fairly efficient and very abstracted from underlying hardware, making it generalizable and highly legible to an ML engineer. Microsoft is pushing to use Triton </span><a href="https://azure.microsoft.com/en-us/blog/azure-maia-for-the-era-of-ai-from-silicon-to-software-to-systems/" rel="">to standardize and simplify custom kernel development.</a><span> They‚Äôve also already rolled out </span><a href="https://azure.microsoft.com/en-us/blog/fostering-ai-infrastructure-advancements-through-standardization/" rel="">a new data format (MX v1.0)</a><span> to standardize quantization across providers. This would make custom and 3rd party chips seamlessly interoperable and give devs complete portability; in effect commoditizing NVIDIA. Maia is very early, but has been tested in production; </span><a href="https://www.directionsonmicrosoft.com/members/blog/2023-11-15/microsoft-bets-its-own-chips-boost-azure-ai-workloads" rel="">serving inference </a><span>for Bing Chat (now Copilot) and Github Copilot. Future use cases will include 3rd party inference (OAI), training Microsoft‚Äôs </span><a href="https://www.theinformation.com/articles/meet-mai-1-microsoft-readies-new-ai-model-to-compete-with-google-openai" rel="">GPT4 level internal model (MAI-1)</a><span>, and serving Azure customers.&nbsp;</span></p><p><span>Even Meta is stepping into the custom silicon game and serving meaningful production workloads. Early Meta chips were optimized to serve ranking, advertising, and recommendation workloads (DLRM) for Instagram and Reels. This has changed with the launch of their second-gen </span><a href="https://about.fb.com/news/2024/04/introducing-our-next-generation-infrastructure-for-ai/" rel="">MTIA chips and a custom built software stack to support it</a><span>. These V2 chips are designed to serve AI inference applications for Meta AI characters/chat on Instagram and WhatsApp; they have </span><a href="https://about.fb.com/news/2024/04/introducing-our-next-generation-infrastructure-for-ai/" rel="">already been deployed</a><span> to data centers and are serving use cases in production. Meta is intent on expanding the scope of these chips particularly for synthetic data generation. </span><a href="https://ai.meta.com/blog/meta-llama-3-1/" rel="">Llama 3.1 relied</a><span> on this for supervised fine tuning and distillation to pretrain smaller models. In </span><a href="https://www.youtube.com/watch?v=9TU0XjJqpOg" rel="">Zuckerberg‚Äôs view</a><span>, immense inference capacity is a priority for future frontier model training. While Meta still </span><a href="https://www.datacenterdynamics.com/en/news/meta-to-operate-600000-gpus-by-year-end/" rel="">purchases NVIDIA</a><span>, the direction they‚Äôre moving is clear.&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png" width="1456" height="819" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F975b13bf-6c2e-439a-b811-903bc257ea7a_1600x900.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Credit: IOFund</figcaption></figure></div><p><span>The shift to custom silicon is especially telling because it‚Äôs happening in a market that should reinforce NVIDIAs moat. Current AI workloads are skewed towards training, even at Microsoft training is </span><a href="https://d18rn0p25nwr6d.cloudfront.net/CIK-0001045810/1cbe8fe7-e08a-46e3-8dcc-b429fc06c1a4.pdf" rel="">~60% of compute demand</a><span>. In theory, this should have limited the viability of custom silicon, as training is memory bound and sensitive to footprint constraints. As AI adoption accelerates, productization matures, and the </span><a href="https://www.sequoiacap.com/article/ais-600b-question/" rel="">revenue hole is filled</a><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-7-150727993" href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia#footnote-7-150727993" target="_self" rel="">7</a></span><span>, the balance will shift to inference; increasing pressure on NVIDIA. By 2025, </span><a href="https://blog.johnluttig.com/p/nvidia-envy-understanding-the-gpu" rel="">70% of GPU hours</a><span> will be spent on inference where custom silicon is especially competitive. Even to date, inference commoditization has been extremely aggressive. In many cases (especially for mid size models) last gen </span><a href="https://modal.com/blog/gpu-types" rel="">A100s offer better</a><span> performance/$ than H100s, and AMD has quietly become a more competitive substitute</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-8-150727993" href="https://mohitdagarwal.substack.com/p/from-dominance-to-dilemma-nvidia#footnote-8-150727993" target="_self" rel="">8</a></span><span>. In the longer term it‚Äôs even possible that </span><a href="https://wccftech.com/jim-keller-tenstorrent-wants-to-compete-with-nvidia-ai-gpus-using-risc-v-based-ai-cpus/" rel="">CPU-based inference</a><span> is optimal, particularly </span><a href="https://spectrum.ieee.org/ai-cpu" rel="">for small models</a><span>.</span></p><p><span>Ultimately, hyperscalers' successes with developing and deploying custom chips (particularly Google‚Äôs) is deeply worrying for NVIDIA. Hyperscalers have a long history of designing out component vendors, in a world of increasing consolidation this may be existential. Many of the most competitive chip efforts were started with different mandates </span><a href="https://thechipletter.substack.com/p/googles-first-tensor-processing-unit" rel="">over a decade ago</a><span>‚Äìwell before the massive wave of AI demand. While accelerator design cycles are long, it‚Äôs an eminently solvable problem that simply requires commitment, capital, and scale.&nbsp;</span></p><p><strong>The Distributed Scale Problem</strong></p><p><span>When discussing competing chip efforts, some will rebut that on a per-chip basis NVIDIAs upcoming </span><a href="https://www.nvidia.com/en-us/data-center/hgx/" rel="">B100 will be much faster</a><span> (delivering the performance of 3 Trillium TPUs). This may be true, but it illustrates a more important issue; per-chip performance doesn‚Äôt matter; </span><strong>NVIDIA can make the highest-performing GPUs on earth and lose.</strong><span>&nbsp;</span></p><p><span>Hyperscalers have the ability to vertically integrate while leveraging scale and specialization to make distributed </span><strong>systems</strong><span> that are cheaper and more performant in aggregate. For a platform agnostic supplier like NVIDIA, this is a structurally difficult trend to compete with or adapt to.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png" width="1024" height="555" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:555,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03307527-1d26-4b06-b0ca-71f21d91e97f_1024x555.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Credit: RegMedia</figcaption></figure></div><p><span>This is the result of a broader trend; with the breakdown of </span><a href="https://cartesianproduct.wordpress.com/2013/04/15/the-end-of-dennard-scaling/" rel="">dennard scaling</a><span> and </span><a href="https://fuse.wikichip.org/news/7343/iedm-2022-did-we-just-witness-the-death-of-sram/" rel="">SRAM logic shrinking</a><span>, returns to transistor miniaturization have decreased and new node costs have been </span><a href="https://www.extremetech.com/computing/272096-3nm-process-node" rel="">skyrocketing</a><span>. Hardware gains (density, performance, and cost) </span><a href="https://spectrum.ieee.org/stco-system-technology-cooptimization" rel="">increasingly come from</a><span> system technology co-optimization; the intelligent design of interconnect, chiplets, cooling, power, racks, and data centers. Much of this has been enabled by </span><a href="https://www.semianalysis.com/p/ai-expansion-supply-chain-analysis" rel="">advanced packaging</a><span> (e.g. chiplets, increased on-package HBM) and </span><a href="https://www.fabricatedknowledge.com/p/the-data-center-is-the-new-compute" rel="">larger substrates</a><span>. However, even more gains have come from a conscious effort by datacenter operators, suppliers, and system integrators to tailor designs for hyperscale needs. We‚Äôve just begun to see optimization at this layer in light of changing requirements for AI servers and data centers.</span></p><p><span>Microsoft's data center design is an example of this. They are </span><a href="https://www.microsoft.com/en-us/research/uploads/prod/2018/07/Southampton-Plenary.pdf" rel="">planning their own telecom fiber network</a><span> and rolling out new ColorZ pluggable optical transceivers + DSPs to support long distance (&lt;80km) data transmission ‚Äì effectively increasing peak cluster performance by connecting data centers. To support the huge data flows, Microsoft is </span><a href="https://www.microsoft.com/en-us/research/uploads/prod/2018/07/Southampton-Plenary.pdf" rel="">planning developments</a><span> of in package, and eventually on chip optics for switches and transceivers. Current racks with Maia chips have even more vertical integration. They use custom </span><a href="https://news.microsoft.com/source/features/ai/in-house-chips-silicon-to-service-to-meet-ai-demand/" rel="">power distribution</a><span>, high-bandwidth </span><a href="https://news.microsoft.com/source/features/ai/in-house-chips-silicon-to-service-to-meet-ai-demand/" rel="">ethernet protocols</a><span>, and dedicated in-rack </span><a href="https://www.techrepublic.com/article/microsoft-ai-maia-cobalt-chips/" rel="">‚Äúsidekicks‚Äù</a><span> to enable closed loop liquid cooling; increasing chip density while decreasing interconnect requirements and cost. Importantly, these servers </span><a href="https://azure.microsoft.com/en-us/blog/fostering-ai-infrastructure-advancements-through-standardization/" rel="">integrate into existing Azure datacenter infrastructure</a><span>, allowing for dynamic power optimization, easier management, and greater compute capacity in existing footprints; a requirement for scaling training runs in a world limited by build outs.&nbsp;</span></p><p><span>Google </span><a href="https://open.spotify.com/episode/0V9kRgNS7Ds6zh3GjdXUAQ?si=qE3MLNuFQLCFmSnvhG87jQ&amp;nd=1&amp;dlsi=3752b373bdfd4f2c" rel="">understands</a><span> this deeply. They have intentionally </span><a href="https://www.semianalysis.com/p/google-ai-infrastructure-supremacy" rel="">moved away from</a><span> big chips to swarms of smaller, cheaper ASICs with deep interconnects. At the rack level, all TPUs have identical configurations ‚Äì unburdened by the need to support different environments. </span><a href="https://www.nextplatform.com/2018/05/10/tearing-apart-googles-tpu-3-0-ai-coprocessor/" rel="">They also have fewer server boards that are integrated in the rack.</a><span> This increases shelf density and further reduces the complexity of hardware deployment. Google also </span><a href="https://www.semianalysis.com/p/google-apollo-the-3-billion-game" rel="">uses ICI as opposed to NVLink</a><span> enabling them to connect slices of 64 TPUs very cheaply over passive copper.&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png" width="1456" height="599" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:599,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d38869c-661c-442f-8ee8-826c54acb5e7_1600x658.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Credit: Google</figcaption></figure></div><p><span>Unlike Nvidia, however, Google also customizes significantly at and beyond the data center level. TPUs are designed to run in pods of 4096 chips </span><a href="https://www.semianalysis.com/p/google-apollo-the-3-billion-game" rel="">using custom optical switches (Apollo)</a><span> in lieu of normal electronic packet switches, greatly reducing power-consumption and downtime compared to NVIDIA. This is possible because across the data center, TPUs use a unique </span><a href="https://www.semianalysis.com/p/google-ai-infrastructure-supremacy" rel="">torus-shaped network topology, as opposed to Clos</a><span>; improving latency and locality. Combined with proprietary cloud networking hardware and software </span><a href="https://www.semianalysis.com/p/google-apollo-the-3-billion-game" rel="">(Jupiter)</a><span>, massive clusters of TPUs can be organized across data centers. This is how Google data centers provide </span><a href="https://www.semianalysis.com/p/google-ai-infrastructure-supremacy" rel="">performance/TCO that is nearly 30% lower than competitors</a><span> (primarily on account of reduced chip cost, downtime, and infra spend).&nbsp;</span></p><p><span>More importantly, in conjunction with smaller batch sizes, data verification tricks, and </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">advanced partitioning</a><span>, it means Google can train frontier models like Gemini Pro 1.5 </span><a href="https://arxiv.org/abs/2403.05530" rel="">over multiple connected data centers</a><span>.&nbsp;</span></p><p><span>This minimizes power/size requirements for future training (and likely search + synthetic data) infrastructure. It also greatly improves hardware modularity and extends the useful life of older chips/build outs as they can run alongside cutting-edge clusters in the future to train frontier models. Other hyperscalers are going in this direction as well; </span><a href="https://ai.meta.com/blog/meta-llama-3/" rel="">Meta trained Llama 3 across two data centers</a><span> and Microsoft is connecting clusters </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">across the country</a><span> for OpenAI. Infrastructure will become increasingly distributed as labs move away from synchronous training via hierarchical gradient descent. </span><a href="https://arxiv.org/abs/2208.03306" rel="">Meta</a><span>, </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">OpenAI</a><span>, and </span><a href="https://research.google/pubs/large-scale-distributed-deep-networks/" rel="">Google</a><span> are all actively researching ways to train separate model copies and merge branches back together‚Äìenabling truly asynchronous distributed training.&nbsp;</span></p><p><span>This is a massive advantage; distributed infrastructure is the only way we continue scaling and </span><a href="https://situational-awareness.ai/from-gpt-4-to-agi/" rel="">count new OOMs</a><span>. Right now compute is the biggest limitation for pushing frontier models; </span><a href="https://www.dwarkeshpatel.com/p/mark-zuckerberg" rel="">Mark Zuckerberg has explicitly said</a><span> that building out ultra-large data centers is a binding constraint. Multi-datacenter training runs enable the use of smaller, interconnected data centers. This reduces cost and increases throughput, but it also confers substantial benefits for quickly conducting and scaling infrastructure build outs. With smaller data centers, it is far easier to create designs, procure land rights/permitting, EIA approval, suppliers/GCs and </span><a href="https://www.sequoiacap.com/article/ai-data-center-buildout/" rel="">build out transmission + voltage transformers</a><span>. Connected clusters could also help overcome power constraints on a grid that's at capacity. Vanishingly </span><a href="https://www.washingtonpost.com/business/2024/03/07/ai-data-centers-power/" rel="">few utilities have enough excess capacity</a><span> to keep scaling; this is </span><a href="https://www.ibm.com/topics/hyperscale-data-center" rel="">doubly true in prime locations</a><span> with </span><a href="https://datacentremagazine.com/articles/sustainability-is-central-to-hyperscalers-strategies" rel="">clean energy</a><span> (required for hyperscalers given net-zero commitments). The issue is so acute that Microsoft </span><a href="https://www.washingtonpost.com/business/2024/09/20/microsoft-three-mile-island-nuclear-constellation/" rel="">reopened 3-Mile Island </a><span>(835MW) and </span><a href="https://www.helionenergy.com/articles/helion-announces-worlds-first-fusion-ppa-with-microsoft/" rel="">pre-purchased fusion power</a><span> from Helion; AWS purchased a </span><a href="https://www.ans.org/news/article-5842/amazon-buys-nuclearpowered-data-center-from-talen/" rel="">960MW nuclear plant</a><span>. Regardless, individual data centers will quickly hit size limits (e.g. a 10GW cluster would be </span><a href="https://www.publicpower.org/resource/americas-electricity-generating-capacity" rel="">~1% of installed US power</a><span>).&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png" width="1456" height="1049" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1049,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F87a5c486-ca7d-4fce-a16b-2fc912724c85_1568x1130.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Credit: Edward Conard</figcaption></figure></div><p><span>However, connected campuses and networked cross-regional clusters may be able to </span><a href="https://emp.lbl.gov/news/grid-connection-backlog-grows-30-2023-dominated-requests-solar-wind-and-energy-storage" rel="">move away from single endpoints</a><span> and draw power from multiple utilities and power sources. Interestingly, If you look at a </span><a href="https://www.datacentermap.com/content/nova/" rel="">map</a><span> of hyperscale data-centers and cross reference it with </span><a href="https://www.scc.virginia.gov/getattachment/46ad3b08-b38f-4d1d-be3b-a224e246ec7c/el_map.pdf" rel="">power zones</a><span>, you‚Äôll see many nearby datacenters are already served by different utilities. Currently we‚Äôre limited to in-region data centers using </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">ethernet (&lt;40km)</a><span>, but plans are being made to leverage telecom fiber and </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">connect datacenters as far as ~500km away</a><span>. Microsoft is already digging and has </span><a href="https://www.dwarkeshpatel.com/p/dylan-jon" rel="">spent over $10 billion</a><span> with fiber network providers like </span><a href="https://news.microsoft.com/2024/07/24/microsoft-and-lumen-technologies-partner-to-power-the-future-of-ai-and-enable-digital-transformation-to-benefit-hundreds-of-millions-of-customers/" rel="">Lumen</a><span>. While this will take a few years to deploy, it will provide </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">1-5Pbit of bandwidth</a><span> and &lt;1sec weight exchanges; enough to make multi-region training viable.&nbsp;&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png" width="1456" height="631" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/da09f307-2048-4358-a8e9-efe6355aec89_1776x770.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:631,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fda09f307-2048-4358-a8e9-efe6355aec89_1776x770.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Data Centers in just one Region of Northern Virginia (Ashburn). Credit: DatacenterMap</figcaption></figure></div><p>These regionally distributed training systems will keep scaling going and become the norm, enabling cheaper, faster infrastructure build outs while pushing peak power/compute across a single run (x-xxGWs). While distributed systems create some opportunities for nontraditional but well capitalized players, infrastructure expertise matters and it‚Äôs imperative for hyperscalers to scale along the frontier to train better models. The key long-term difference is that training will occur on ‚Äúsmall‚Äù networked campuses of x00MW-xGW datacenters as opposed to monolithic xxGW class data centers.&nbsp;</p><p><span>Such a world makes it extremely difficult for NVIDIA to compete on a performance or cost basis. Their lunch will be eaten as there‚Äôs no room for unspecialized </span><a href="https://stratechery.com/2023/nvidia-on-the-mountaintop/" rel="">platforms</a><span>. They can‚Äôt deeply integrate with a cloud or </span><a href="https://www.techpowerup.com/318976/nvidia-to-create-ai-semi-custom-chip-business-unit" rel="">customize hardware without designing out subscale customers</a><span>‚Äì which would further consolidate demand, subsidize competitors and commoditize their product. This is the innovator's dilemma that makes NVIDIA ill-suited to serve cross cluster or exascale use cases. The evidence of this is already reflected in surprising weaknesses when building massive, maximally performant systems.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png" width="1456" height="649" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:649,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ad167b0-f1f9-40f5-bae0-3e6eb62d61b4_1848x824.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Networking Layout for a DGX 100 server (8 A100s). Credit: NADDOD</figcaption></figure></div><p><span>For instance, NVIDIA‚Äôs Infiniband networking infrastructure is clearly not meant to support 100K+ GPU clusters. By design,</span><a href="https://www.naddod.com/blog/quick-understanding-gpu-server-network-card-configuration-in-ai-era#:~:text=In%20terms%20of%20the%20computational,400%20Gbps%20external%20network%20connection." rel=""> every GPU is only connected to a single NIC</a><span>, and every packet has to be delivered in the same order. Since models are so large and weights are distributed, a single failed NIC, GPU, or optical transceiver </span><a href="https://www.cudocompute.com/blog/enhance-hardware-reliability-for-ai-acceleration-at-scale" rel="">can take down an entire server,</a><span> forcing data to be retransmitted (this compounds as new racks make nodes larger). Even with frequent checkpointing this </span><a href="https://www.semianalysis.com/p/100000-h100-clusters-power-network" rel="">drags down MFU by multiple percentage points</a><span>. Moreover, while </span><a href="https://www.datacenterdynamics.com/en/news/nvidia-announces-x800-series-switches-for-generative-ai/" rel="">Nvidia is driving the transition to 800 Gbps</a><span> networking (useful for all customers), they‚Äôve been caught flat footed for a massive, hyperscale-led shift in datacom. We are likely to see </span><a href="https://www.lumentum.com/en/media-room/news-releases/marvell-lumentum-and-coherent-demonstrate-industrys-first-800g-zrzr" rel="">increasing use of pluggable ZR transceivers</a><span> to support the ultra-high bandwidth fiber connections needed to connect data centers. As part of this </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">we may also get new DSPs and supporting telecom hardware</a><span> (Amplifiers, Multiplexers, Transponders etc)‚Äìundermining NVIDIAs networking stack while </span><a href="https://investingwhisperer.com/heres-the-optics-on-druckenmillers-new-ai-stock/" rel="">benefiting providers like Coherent</a><span>, Lumentum, Inphi, Cisco, and Nokia.</span></p><p><span>Unfortunately for NVIDIA, blind spots extend to the infrastructure software stack. One of the most pressing issues is </span><a href="https://www.mescomputing.com/news/4188979/nvidia-outlines-ai-strategies-gpus-kubernetes" rel="">fault tolerance</a><span> ‚Äì key for ensuring reliability and high utilization when dealing with many points of failure in a training run. For subscale customers this isn‚Äôt a problem, but with really large cluster sizes NVIDIAs </span><a href="https://www.datacenterdynamics.com/en/news/meta-report-details-hundreds-of-gpu-and-hbm3-related-interruptions-to-llama-3-training-run/" rel="">network design and hardware choices provide no built in protection</a><span>. Despite this, NVIDIA still doesn't have a compelling proprietary library to handle fault tolerant training; subscale clients rely on </span><a href="https://cloud.google.com/blog/products/compute/rapidly-deploy-pytorch-applications-on-batch-using-torchx/" rel="">open source frameworks</a><span>. The major hyperscalers now rely on more robust internal solutions. For instance, Google uses proprietary software called </span><a href="https://blog.google/technology/ai/introducing-pathways-next-generation-ai-architecture/" rel="">Pathways</a><span>; it does a fantastic job of covering more edge cases and types of faults than other solutions (While being able to </span><a href="https://arxiv.org/abs/2203.12533" rel="">operate flexibly</a><span> with synchronous and asynchronous data flows). Pathways is also </span><a href="https://arxiv.org/abs/2203.12533" rel="">very good at detecting and fixing</a><span> nearly invisible GPU memory issues that slip past ECC; NVIDIAs diagnostic tool (DCGM) </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">is considerably less reliable</a><span>. NVIDIA also struggles to provide competitive partitioning and cluster management software. Their </span><a href="https://www.nvidia.com/en-us/data-center/base-command/" rel="">BaseCommand</a><span> system (built on Kubernetes) is designed to be cross platform and work with heterogeneous systems. However, once again, hyperscalers have better proprietary, integrated solutions like </span><a href="https://research.google/pubs/large-scale-cluster-management-at-google-with-borg/" rel="">Borg</a><span> (Google, also the basis of Kubernetes) and </span><a href="https://arxiv.org/pdf/2202.07848" rel="">Singularity</a><span> (Microsoft) which better handle scaled VM/container management, transparent migration, and GPU workload scheduling/management. Google even has a </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">custom sharder called MegaScaler</a><span> for synchronously partitioning workloads across TPU pods within and beyond a single campus.&nbsp;</span></p><p>Hyperscalers' core advantage is their vertical integration across the semiconductor, infrastructure, and model layers‚Äìwhich enables improved system level understanding, observability, co-optimization and failure analysis. NVIDIA has made some strides with Blackwell and GB200 servers to confront structural issues stemming from this.&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png" width="1456" height="673" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:673,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d69c4bf-1d11-4536-a178-5c66e14969e1_2048x946.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Liquid Cooling Heatsinks in a NVIDIA GB 200 Rack</figcaption></figure></div><p><span>On the hardware level, they installed rack wide </span><a href="https://www.fabricatedknowledge.com/p/the-data-center-is-the-new-compute" rel="">copper-connected backplanes</a><span> and </span><a href="https://www.nvidia.com/en-us/data-center/gb200-nvl72/" rel="">required liquid cooling</a><span> to improve density, energy efficiency and TCO. They‚Äôre also rolling out a new ethernet-based, datacenter-scale networking solution called </span><a href="https://www.sdxcentral.com/articles/analysis/nvidia-gets-serious-about-ethernet-networking-with-spectrum-x/2024/06/" rel="">Spectrum-X</a><span> (both the absolute and relative success to Broadcom will be </span><a href="https://www.techinvestments.io/p/the-ai-datacenter-nvidias-integrated" rel="">worth watching closely</a><span>). On the software side, they‚Äôre </span><a href="https://docs.nvidia.com/datacenter/dcgm/latest/release-notes/changelog.html" rel="">aggressively updating</a><span> their DCGM software and pushing a dedicated engine for </span><a href="https://www.nvidia.com/en-us/data-center/technologies/blackwell-architecture/" rel="">reliability, availability and serviceability (RAS)</a><span>. This is meant to help mitigate persistent NIC/Infiniband failures by using sensor level chip data to preemptively alert operators to failures.&nbsp;</span></p><p><span>However, all things considered, this isn‚Äôt enough. As discussed, better versions of nearly all key infrastructure software exist internally, and on the hardware side NVIDIA is behind the curve; they will struggle to adapt to massive change whereas the hyperscalers have been scaled and vertically integrated for a long time. Cooling is a great example of this. While NVIDIA </span><a href="https://nvidianews.nvidia.com/news/nvidia-blackwell-platform-arrives-to-power-a-new-era-of-computing" rel="">just mandated liquid</a><span>, Google did so back </span><a href="https://www.datacenterfrontier.com/cloud/article/11430207/google-shifts-to-liquid-cooling-for-ai-data-crunching" rel="">in 2018</a><span> with TPU v3 deployments. Today, they use </span><a href="https://www.semianalysis.com/p/multi-datacenter-training-openais" rel="">2x less water/kWh than Microsoft‚Äôs NVIDIA datacenters and have a PUE (power usage effectiveness) of 1.1, compared to &gt;1.4.</a><span> This means NVIDIA‚Äôs decision to keep small customers happy and </span><a href="https://www.anandtech.com/show/17405/nvidia-to-release-liquid-cooled-a100-and-h100-pcie-accelerators" rel="">drag their feet</a><span> on integration cost them 30% of effective power and 50% of footprint at every hyperscale data center!</span></p><p><span>No doubt, NVIDIA is aware of this and they are trying to push </span><a href="https://stratechery.com/2023/nvidia-gtc-dgx-cloud-nvidias-partners/" rel="">up the value chain</a><span> (DGX Cloud, NGC etc). Yet current efforts betray a narrow scope of vision; primarily optimizing at the data center level when the future is moving towards large campuses and clouds. While Jensen has demonstrated a willingness to play for the future (see the </span><a href="https://www.datagravity.dev/p/nvidias-10b-revenue-networking-business" rel="">prescient</a><span> Mellanox acquisition), NVIDIA today faces unprecedented secular challenges that have killed a long line of high-flying predecessors. Uneasy lies the head that wears the crown.</span></p><p><em>Thanks to: Lachy Groom, Jack Whitaker, Lauren Reeder, Gavin Uberti, Divyahans Gupta, Philip Clark, John Luttig, Tyler Cowen, Shahin Farshchi, Jannik Schilling, Bridget Harris, Harry Elliott, Luke Farritor, Jacob Rintamaki, Joe Semrai, Coen Armstrong, Trevor Chow, and Catherine Wu</em></p><p>Disclaimer: All views are exclusively my own and do not represent those of any of past or present employers. Everything in this article is based on public information. I hold no positions in Nvidia (NVDA). I am long Marvell (MRVL), Google (GOOG), Broadcom (AVGO), Vertiv (VRT), Micron (MU), Fabrinet (FN), Coherent (COHR), Talen Energy (TLN), ACM Research (ACMR), and Credo (CRDO)</p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cheating the Reaper in Go (171 pts)]]></title>
            <link>https://mcyoung.xyz/2025/04/21/go-arenas/</link>
            <guid>43756871</guid>
            <pubDate>Mon, 21 Apr 2025 21:46:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mcyoung.xyz/2025/04/21/go-arenas/">https://mcyoung.xyz/2025/04/21/go-arenas/</a>, See on <a href="https://news.ycombinator.com/item?id=43756871">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <p>Even though I am a C++ programmer at heart, Go fascinates me for none of the reasons you think. Go has made several interesting design decisions:</p> <ol> <li> <p>It has virtually no Undefined Behavior<sup id="fnref:goub" role="doc-noteref"><a href="#fn:goub" rel="footnote">1</a></sup>.</p> </li> <li> <p>It has very simple GC semantics that they‚Äôre mostly stuck with due to design decisions in the surface language.</p> </li> </ol> <p>These things mean that despite Go having a GC, it‚Äôs possible to do manual memory management in pure Go and in cooperation with the GC (although without any help from the <code>runtime</code> package). To demonstrate this, we will be building an untyped, garbage-collected arena abstraction in Go which relies on several GC implementation details.</p> <p>I would never play this kind of game in Rust or C++, because LLVM is extremely intelligent and able to find all kinds of ways to break you over the course of frequent compiler upgrades. On the other hand, although Go does not promise any compatibility across versions for code that imports <code>unsafe</code>, in practice, two forces work against Go doing this:</p> <ol> <li> <p>Go does not attempt to define what is and isn‚Äôt allowed: <code>unsafe</code> lacks any <a href="https://en.wikipedia.org/wiki/Operational_semantics">operational semantics</a>.</p> </li> <li> <p>Go prioritizes not breaking the ecosystem; this allows to assume that <a href="https://www.hyrumslaw.com/">Hyrum‚Äôs Law</a> will protect certain observable behaviors of the runtime, from which we may infer what can or cannot break easily.</p> </li> </ol> <p>This is in contrast to a high-performance native compiler like LLVM, which has a carefully defined boundary around all UB, allowing them to arbitrarily break programs that cross it (mostly) without fear of breaking the ecosystem.</p> <p>So, let‚Äôs dive in and cheat death.</p> <h2 id="what-are-we-building"><a href="#what-are-we-building">What Are We Building?</a></h2> <p>Our goal is to build an <em>arena</em>, which is a data structure for efficient allocation of memory that has the same lifetime. This reduces pressure on the general-purpose allocator by only requesting memory in large chunks and then freeing it all at once.</p> <p>For a comparison in Go, consider the following program:</p> <div><figure><pre><code data-lang="go"><span>package</span> <span>main</span>

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>()</span> <span>{</span>
  <span>var</span> <span>s</span> <span>[]</span><span>int</span>
  <span>for</span> <span>i</span> <span>:=</span> <span>range</span> <span>1000</span> <span>{</span>
    <span>prev</span> <span>:=</span> <span>cap</span><span>(</span><span>s</span><span>)</span>
    <span>s</span> <span>=</span> <span>append</span><span>(</span><span>s</span><span>,</span> <span>i</span><span>)</span>
    <span>if</span> <span>cap</span><span>(</span><span>s</span><span>)</span> <span>!=</span> <span>prev</span> <span>{</span>
      <span>fmt</span><span>.</span><span>Println</span><span>(</span><span>cap</span><span>(</span><span>s</span><span>))</span>
    <span>}</span>
  <span>}</span>
<span>}</span></code></pre></figure></div> <p>This program will print successive powers of 2: this is because <code>append</code> is implemented approximately like so:</p> <div><figure><pre><code data-lang="go"><span>func</span> <span>append</span><span>[</span><span>S</span> <span>~</span><span>[]</span><span>T</span><span>,</span> <span>T</span> <span>any</span><span>](</span><span>a</span><span>,</span> <span>b</span> <span>S</span><span>)</span> <span>S</span> <span>{</span>
  <span>// If needed, grow the allocation.</span>
  <span>if</span> <span>cap</span><span>(</span><span>a</span><span>)</span> <span>-</span> <span>len</span><span>(</span><span>a</span><span>)</span> <span>&lt;</span> <span>len</span><span>(</span><span>b</span><span>)</span> <span>{</span>
    <span>// Either double the size, or allocate just enough if doubling is</span>
    <span>// too little.</span>
    <span>newCap</span> <span>:=</span> <span>max</span><span>(</span><span>2</span><span>*</span><span>cap</span><span>(</span><span>a</span><span>),</span> <span>len</span><span>(</span><span>a</span><span>)</span><span>+</span><span>len</span><span>(</span><span>b</span><span>))</span>

    <span>// Grow a.</span>
    <span>a2</span> <span>:=</span> <span>make</span><span>([]</span><span>T</span><span>,</span> <span>len</span><span>(</span><span>a</span><span>),</span> <span>newCap</span><span>)</span>
    <span>copy</span><span>(</span><span>a2</span><span>,</span> <span>a</span><span>)</span>
    <span>a</span> <span>=</span> <span>a2</span>
  <span>}</span>

  <span>// Increase the length of a to fit b, then write b into the freshly</span>
  <span>// grown region.</span>
  <span>a</span> <span>=</span> <span>a</span><span>[</span><span>:</span><span>len</span><span>(</span><span>a</span><span>)</span><span>+</span><span>len</span><span>(</span><span>b</span><span>)]</span>
  <span>copy</span><span>(</span><span>a</span><span>[</span><span>len</span><span>(</span><span>a</span><span>)</span><span>-</span><span>len</span><span>(</span><span>b</span><span>)</span><span>:</span><span>],</span> <span>b</span><span>)</span>
  <span>return</span> <span>a</span>
<span>}</span></code></pre></figure></div> <p>For appending small pieces, <code>make</code> is only called <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span></span></span> times, a big improvement over calling it for every call to <code>append</code>. Virtually every programming language‚Äôs dynamic array abstraction makes this optimization.</p> <p>An arena generalizes this concept, but instead of resizing exponentially, it allocates <em>new</em> blocks and vends pointers into them. The interface we want to conform to is as follows:</p> <div><figure><pre><code data-lang="go"><span>type</span> <span>Allocator</span> <span>interface</span> <span>{</span>
  <span>Alloc</span><span>(</span><span>size</span><span>,</span> <span>align</span> <span>uintptr</span><span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span>
<span>}</span></code></pre></figure></div> <p>In go a size and and an alignment, out comes a pointer fresh memory with that layout. Go does not have user-visible uninitialized memory, so we additionally require that the returned region be zeroed. We also require that <code>align</code> be a power of two.</p> <p>We can give this a type-safe interface by writing a generic <code>New</code> function:</p> <div><figure><pre><code data-lang="go"><span>// New allocates a fresh zero value of type T on the given allocator, and</span>
<span>// returns a pointer to it.</span>
<span>func</span> <span>New</span><span>[</span><span>T</span> <span>any</span><span>](</span><span>a</span> <span>Allocator</span><span>)</span> <span>*</span><span>T</span> <span>{</span>
  <span>var</span> <span>t</span> <span>T</span>
  <span>p</span> <span>:=</span> <span>a</span><span>.</span><span>Alloc</span><span>(</span><span>unsafe</span><span>.</span><span>Sizeof</span><span>(</span><span>t</span><span>),</span> <span>unsafe</span><span>.</span><span>Alignof</span><span>(</span><span>t</span><span>))</span>
  <span>return</span> <span>(</span><span>*</span><span>T</span><span>)(</span><span>p</span><span>)</span>
<span>}</span></code></pre></figure></div> <p>This all feels very fine and dandy to anyone used to hurting themselves with <code>malloc</code> or <code>operator new</code> in C++, but there is a small problem. What happens when we allocate pointer-typed memory into this allocator?</p> <div><figure><pre><code data-lang="go"><span>// Allocate a pointer in our custom allocator, and then</span>
<span>// initialize it to a pointer on the Go heap.</span>
<span>p</span> <span>:=</span> <span>New</span><span>[</span><span>*</span><span>int</span><span>](</span><span>myAlloc</span><span>)</span>
<span>*</span><span>p</span> <span>=</span> <span>new</span><span>(</span><span>int</span><span>)</span>

<span>runtime</span><span>.</span><span>GC</span><span>()</span>
<span>**</span><span>p</span> <span>=</span> <span>42</span>  <span>// Use after free!</span></code></pre></figure></div> <p><code>Allocator.Alloc</code> takes a size and an alignment, which is sufficient to describe the <em>layout</em> of any type. For example, on 64-bit systems, <code>int</code> and <code>*int</code> have the same layout: 8 bytes of size, and 8 bytes of alignment.</p> <p>However, the Go GC (and all garbage collectors, generally) require one additional piece of information, which is somewhere between the layout of a value (how it is placed in memory) and the type of a value (rich information on its structure). To understand this, we need a brief overview on what a GC does.</p> <h2 id="mark-and-sweep"><a href="#mark-and-sweep">Mark and Sweep</a></h2> <blockquote> <p>For a complete overview on how to build a simple GC, take a look at a toy GC I designed some time ago: <a href="https://mcyoung.xyz/2022/06/07/alkyne-gc/">The Alkyne GC</a>.</p> </blockquote> <p>A garbage collector‚Äôs responsibility is to maintain a memory allocator and an accounting of:</p> <ol> <li>What memory has been allocated.</li> <li>Whether that memory is still in use.</li> </ol> <p>Memory that is not in use can be reclaimed and marked as unallocated, for re-use.</p> <p>The most popular way to accomplish this is via a ‚Äúmark and sweep‚Äù architecture. The GC will periodically walk the entire object graph of the program from certain pre-determined <em>roots</em>; anything it finds is ‚Äúmarked‚Äù as alive. After a mark is complete, all other memory is ‚Äúswept‚Äù, which means to mark it is unallocated for future re-use, or to return it to the OS, in the case of significant surplus.</p> <p>The roots are typically entities that are actively being manipulated by the program. In the case of Go, this is anything currently on the stack of some G<sup id="fnref:g" role="doc-noteref"><a href="#fn:g" rel="footnote">2</a></sup>, or anything in a global (of which there is a compile-time-known set).</p> <p>The marking phase begins with <em>stack scanning</em>, which looks at the stack of each G and locates any pointers contained therein. The Go compiler generates metadata for each function that specifies which stack slots in a function‚Äôs frame contain pointers. All of these pointers are live by definition.</p> <p>These pointers are placed into a queue, and each pointer is traced to its allocation on the heap. If the GC does not know anything about a particular address, it is discarded as foreign memory that does not need to be marked. If it does, each pointer in that allocation is pushed onto the queue if it has not already been marked as alive. The process continues until the queue is empty.</p> <p>The critical step here is to take the address of some allocation, and convert it into all of the pointer values within. Go has precise garbage collection, which means that it only treats things declared as pointers in the surface language as pointers: an integer that happens to look like an address will not result in sweeping. This results in more efficient memory usage, but trades off some more complexity in the GC.</p> <p>For example, the types <code>*int</code>, <code>map[int]byte</code>, <code>string</code>, <code>struct {A int; B *int}</code> all contain at least one pointer, while <code>int</code>, <code>[1000]byte</code>, <code>struct {X bool; F uintptr}</code> do not. The latter are called <em>pointer-free</em> types.</p> <p>Go enhances the layout of a type into a <em>shape</em> by adding a bitset that specifies which pointer-aligned, pointer-sized words of the type‚Äôs memory region contain a pointer. These are called the <em>pointer bits</em>. For example, here are the shapes of a few Go types on a 64-bit system.</p> <table> <thead> <tr> <th>Type</th> <th>Size/Align</th> <th>Pointer Bits<sup id="fnref:ptr-bits-endian" role="doc-noteref"><a href="#fn:ptr-bits-endian" rel="footnote">3</a></sup></th> </tr> </thead> <tbody> <tr> <td><code>byte</code></td> <td>1/1</td> <td><code>0</code></td> </tr> <tr> <td><code>int</code></td> <td>8/8</td> <td><code>0</code></td> </tr> <tr> <td><code>rune</code></td> <td>4/4</td> <td><code>0</code></td> </tr> <tr> <td><code>*int</code></td> <td>8/8</td> <td><code>1</code></td> </tr> <tr> <td><code>unsafe.Pointer</code></td> <td>8/8</td> <td><code>1</code></td> </tr> <tr> <td><code>string</code></td> <td>16/8</td> <td><code>10</code></td> </tr> <tr> <td><code>[]int</code></td> <td>24/8</td> <td><code>100</code></td> </tr> <tr> <td><code>[3]string</code></td> <td>48/8</td> <td><code>101010</code></td> </tr> <tr> <td><code>map[int]byte</code></td> <td>8/8</td> <td><code>1</code></td> </tr> <tr> <td><code>map[int]string</code></td> <td>8/8</td> <td><code>1</code></td> </tr> <tr> <td><code>any</code></td> <td>16/8</td> <td><code>01</code><sup id="fnref:itab" role="doc-noteref"><a href="#fn:itab" rel="footnote">4</a></sup></td> </tr> <tr> <td><code>error</code></td> <td>16/8</td> <td><code>01</code></td> </tr> <tr> <td><code>func(int) int</code></td> <td>8/8</td> <td><code>1</code></td> </tr> <tr> <td><code>runtime.hchan</code><sup id="fnref:hchan" role="doc-noteref"><a href="#fn:hchan" rel="footnote">5</a></sup></td> <td>104/8</td> <td><code>0010110011110</code></td> </tr> </tbody> </table> <p>In the Go GC, each allocation is tagged with its shape (this is done in a variety of ways in the GC, either through an explicit header on the allocation, itself (a ‚Äúmalloc header‚Äù), a runtime type stored in the allocation‚Äôs <code>runtime.mspan</code>, or another mechanism). When scanning a value, it uses this information to determine where the pointers to scan through are.</p> <p>The most obvious problem with our <code>Allocator.Alloc</code> type is that it does not discriminate shapes, so it cannot allocate memory that contains pointers: the GC will not be able to find the pointers, and will free them prematurely!</p> <p>In our example where we allocated an <code>*int</code> in our custom allocator, we wind up with a <code>**int</code> on the stack. You would think that Go would simply trace through the first <code>*</code> to find an <code>*int</code> and mark it as being alive, but that is not what happens! Go instead finds a pointer into some chunk that the custom allocator grabbed from the heap, which is missing the pointer bits of its shape!</p> <p>Why does go not look at the type of the pointer it steps through? Two reasons.</p> <ol> <li> <p>All pointers in Go are untyped from the runtime‚Äôs perspective; every <code>*T</code> gets erased into an <code>unsafe.Pointer</code>. This allows much of the Go runtime to be ‚Äúgeneric‚Äù without using actual generics.</p> </li> <li> <p>Pointee metadata can be aggregated, so that each pointer to an object does not have to remember its type at runtime.</p> </li> </ol> <p>The end result for us is that we can‚Äôt put pointers on the arena. This makes our <code>New</code> API unsafe, especially since Go does not provide a standard constraint for marking generic parameters as pointer-free: unsurprisingly, the don‚Äôt expect most users to care about such a detail.</p> <p>It <em>is</em> possible to deduce the pointer bits of a type using reflection, but that‚Äôs very slow, and the whole point of using arenas is to go fast. As we design our arena, though, it will become clear that there is a safe way to have pointers on it.</p> <h2 id="designing-the-arena"><a href="#designing-the-arena">Designing The Arena</a></h2> <p>Now that we have a pretty good understanding about what the Go GC is doing, we can go about designing a fast arena structure.</p> <p>The ideal case is that a call to <code>Alloc</code> is very fast: just offsetting a pointer in the common case. One assumption we can make off the bat is that all memory can be forced to have maximum alignment: most objects are a pointer or larger, and Go does have a maximum alignment for ordinary user types, so we can just ignore the <code>align</code> parameter and always align to say, 8 bytes. This means that the pointer to the next unallocated chunk will always be well-aligned. Thus, we might come up with a structure like this one:</p> <div><figure><pre><code data-lang="go"><span>type</span> <span>Arena</span> <span>struct</span> <span>{</span>
  <span>next</span>      <span>unsafe</span><span>.</span><span>Pointer</span>
  <span>left</span><span>,</span> <span>cap</span> <span>uintptr</span>
<span>}</span>

<span>const</span> <span>(</span>
  <span>// Power of two size of the minimum allocation granularity.</span>
  <span>wordBytes</span> <span>=</span> <span>8</span>  <span>// Depends on target, this is for 64-bit.</span>
  <span>minWords</span>  <span>=</span> <span>8</span>
<span>)</span>

<span>func</span> <span>(</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>Alloc</span><span>(</span><span>size</span><span>,</span> <span>align</span> <span>uintptr</span><span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span> <span>{</span>
  <span>// First, round the size up to the alignment of every object in</span>
  <span>// the arena.</span>
  <span>mask</span> <span>:=</span> <span>wordBytes</span> <span>-</span> <span>1</span>
  <span>size</span> <span>=</span> <span>(</span><span>size</span> <span>+</span> <span>mask</span><span>)</span> <span>&amp;^</span> <span>mask</span>
  <span>// Then, replace the size with the size in pointer-sized words.</span>
  <span>// This does not result in any loss of size, since size is now</span>
  <span>// a multiple of the uintptr size.</span>
  <span>words</span> <span>:=</span> <span>size</span> <span>/</span> <span>wordBytes</span>

  <span>// Next, check if we have enough space left for this chunk. If</span>
  <span>// there isn't, we need to grow.</span>
  <span>if</span> <span>a</span><span>.</span><span>left</span> <span>&lt;</span> <span>words</span> <span>{</span>
    <span>// Pick whichever is largest: the minimum allocation size,</span>
    <span>// twice the last allocation, or the next power of two</span>
    <span>// after words.</span>
    <span>a</span><span>.</span><span>cap</span> <span>=</span> <span>max</span><span>(</span><span>minWords</span><span>,</span> <span>a</span><span>.</span><span>cap</span><span>*</span><span>2</span><span>,</span> <span>nextPow2</span><span>(</span><span>words</span><span>))</span>
    <span>a</span><span>.</span><span>next</span> <span>=</span> <span>unsafe</span><span>.</span><span>Pointer</span><span>(</span><span>unsafe</span><span>.</span><span>SliceData</span><span>(</span><span>make</span><span>([]</span><span>uintptr</span><span>,</span> <span>a</span><span>.</span><span>cap</span><span>)))</span>
    <span>a</span><span>.</span><span>left</span> <span>=</span> <span>a</span><span>.</span><span>cap</span>
  <span>}</span>

  <span>// Allocate the chunk by incrementing the pointer.</span>
  <span>p</span> <span>:=</span> <span>a</span><span>.</span><span>next</span>
  <span>a</span><span>.</span><span>left</span> <span>-=</span> <span>words</span>
  <span>if</span> <span>a</span><span>.</span><span>left</span> <span>&gt;</span> <span>0</span> <span>{</span>
    <span>a</span><span>.</span><span>next</span> <span>=</span> <span>unsafe</span><span>.</span><span>Add</span><span>(</span><span>a</span><span>.</span><span>next</span><span>,</span> <span>size</span><span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>// Beware, offsetting to one-past-the-end is one of the few</span>
    <span>// things explicitly not allowed by Go.</span>
    <span>a</span><span>.</span><span>next</span> <span>=</span> <span>nil</span>
  <span>}</span>

  <span>return</span> <span>p</span>
<span>}</span>

<span>// nextPow2 returns the smallest power of two greater than n.</span>
<span>func</span> <span>nextPow2</span><span>(</span><span>n</span> <span>uintptr</span><span>)</span> <span>uintptr</span> <span>{</span>
  <span>return</span> <span>uintptr</span><span>(</span><span>1</span><span>)</span> <span>&lt;&lt;</span> <span>bits</span><span>.</span><span>Len</span><span>(</span><span>uint</span><span>(</span><span>n</span><span>))</span>
<span>}</span></code></pre></figure></div> <p>How fast is this really? Here‚Äôs a simple benchmark for it.</p> <div><figure><pre><code data-lang="go"><span>func</span> <span>BenchmarkArena</span><span>(</span><span>b</span> <span>*</span><span>testing</span><span>.</span><span>B</span><span>)</span> <span>{</span>
  <span>bench</span><span>[</span><span>int</span><span>](</span><span>b</span><span>)</span>
  <span>bench</span><span>[[</span><span>2</span><span>]</span><span>int</span><span>](</span><span>b</span><span>)</span>
  <span>bench</span><span>[[</span><span>64</span><span>]</span><span>int</span><span>](</span><span>b</span><span>)</span>
  <span>bench</span><span>[[</span><span>1024</span><span>]</span><span>int</span><span>](</span><span>b</span><span>)</span>
<span>}</span>

<span>const</span> <span>runs</span> <span>=</span> <span>100000</span>

<span>var</span> <span>sink</span> <span>any</span>

<span>func</span> <span>bench</span><span>[</span><span>T</span> <span>any</span><span>](</span><span>b</span> <span>*</span><span>testing</span><span>.</span><span>B</span><span>)</span> <span>{</span>
  <span>var</span> <span>z</span> <span>T</span>
  <span>n</span> <span>:=</span> <span>int64</span><span>(</span><span>runs</span> <span>*</span> <span>unsafe</span><span>.</span><span>Sizeof</span><span>(</span><span>z</span><span>))</span>
  <span>name</span> <span>:=</span> <span>fmt</span><span>.</span><span>Sprintf</span><span>(</span><span>"%v"</span><span>,</span> <span>reflect</span><span>.</span><span>TypeFor</span><span>[</span><span>T</span><span>]())</span>

  <span>b</span><span>.</span><span>Run</span><span>(</span><span>name</span><span>,</span> <span>func</span><span>(</span><span>b</span> <span>*</span><span>testing</span><span>.</span><span>B</span><span>)</span> <span>{</span>
    <span>b</span><span>.</span><span>Run</span><span>(</span><span>"arena"</span><span>,</span> <span>func</span><span>(</span><span>b</span> <span>*</span><span>testing</span><span>.</span><span>B</span><span>)</span> <span>{</span>
      <span>b</span><span>.</span><span>SetBytes</span><span>(</span><span>n</span><span>)</span>
      <span>for</span> <span>b</span><span>.</span><span>Loop</span><span>()</span> <span>{</span>
        <span>a</span> <span>:=</span> <span>new</span><span>(</span><span>arena</span><span>.</span><span>Arena</span><span>)</span>
        <span>for</span> <span>range</span> <span>runs</span> <span>{</span>
          <span>sink</span> <span>=</span> <span>arena</span><span>.</span><span>New</span><span>[</span><span>T</span><span>](</span><span>a</span><span>)</span>
        <span>}</span>
      <span>}</span>
    <span>})</span>

    <span>b</span><span>.</span><span>Run</span><span>(</span><span>"new"</span><span>,</span> <span>func</span><span>(</span><span>b</span> <span>*</span><span>testing</span><span>.</span><span>B</span><span>)</span> <span>{</span>
      <span>b</span><span>.</span><span>SetBytes</span><span>(</span><span>n</span><span>)</span>
      <span>for</span> <span>b</span><span>.</span><span>Loop</span><span>()</span> <span>{</span>
        <span>for</span> <span>range</span> <span>runs</span> <span>{</span>
          <span>sink</span> <span>=</span> <span>new</span><span>(</span><span>T</span><span>)</span>
        <span>}</span>
      <span>}</span>
    <span>})</span>
  <span>})</span>
<span>}</span></code></pre></figure></div> <p>The focus of this benchmark is to measure the cost of allocating many objects of the same size. The number of times the <code>for b.Loop()</code> loop will execute is unknown, and determined by the benchmarking framework to try to reduce statistical anomaly. This means that if we instead just benchmark a single allocation, the result will be <em>very</em> sensitive to the number of runs.</p> <p>We also use <code>b.SetBytes</code> to get a throughput measurement on the benchmark. This is a bit easier to interpret than the gross <code>ns/op</code>, the benchmark would otherwise produce. It tells us how much memory each allocator can allocate per unit time.</p> <p>We want to compare against <code>new</code>, but just writing <code>_ = new(T)</code> will get optimized out, since the resulting pointer does not escape. Writing it to a global is sufficient to convince Go that it escapes.</p> <p>Here‚Äôs the results, abbreviated to show only the bytes per second. All benchmarks were performed on my AMD Ryzen Threadripper 3960X. Larger is better.</p> <div><figure><pre><code data-lang="console"><span>BenchmarkArena/int/arena-48         794.84 MB/s
BenchmarkArena/int/new-48           390.59 MB/s
BenchmarkArena/[2]int/arena-48      1263.58 MB/s
BenchmarkArena/[2]int/new-48        528.06 MB/s
BenchmarkArena/[64]int/arena-48     7370.08 MB/s
BenchmarkArena/[64]int/new-48       2865.24 MB/s
BenchmarkArena/[1024]int/arena-48   9889.20 MB/s
BenchmarkArena/[1024]int/new-48     2875.75 MB/s</span></code></pre></figure></div> <p>This is quite nice, and certainly worth pursuing! The performance increase seems to scale up with the amount of memory allocated, for a 2x-4x improvement across different cases.</p> <p>Now we need to contend with the fact that our implementation is completely broken if we want to have pointers in it.</p> <h3 id="not-dropping-memory-on-the-ground"><a href="#not-dropping-memory-on-the-ground">Not Dropping Memory on the Ground</a></h3> <p>In <code>(*Arena).Alloc</code>, when we assign a freshly-allocated chunk, we overwrite <code>a.next</code>, which means the GC can reclaim it. But this is fine: as long as pointers into that arena chunk are alive, the GC will not free it, independent of the arena. So it seems like we don‚Äôt need to worry about it?</p> <p>However, the whole point of an arena is to allocate lots of memory that has the same lifetime. This is common for graph data structures, such as an AST or a compiler IR, which performs a lot of work that allocates a lot and then throws the result away.</p> <p>We are not allowed to put pointers in the arena, because they would disappear from the view of the GC and become freed too soon. But, if a pointer wants to go on an arena, it necessarily outlive the whole arena, since it outlives part of the arena, and the arena is meant to have the same lifetime.</p> <p>In particular, if we could make it so that holding any pointer returned by <code>Alloc</code> prevents the <em>entire arena</em> from being swept by the GC, the arena can safely contain pointers into itself! Consider this:</p> <ol> <li> <p>We have a pointer <code>p **int</code>. It is allocated on some arena <code>a</code>.</p> </li> <li> <p>The GC sees our pointer (as a type-erased <code>unsafe.Pointer</code>) and marks its allocation as live.</p> </li> <li> <p>Somehow, the GC also marks <code>a</code> as alive as a consequence.</p> </li> <li> <p>Somehow, the GC then marks every chunk <code>a</code> has allocated as alive.</p> </li> <li> <p>Therefore he chunk that <code>*p</code> points to is also alive, so <code>*p</code> does not need to be marked directly, and will not be freed early.</p> </li> </ol> <p>The step (3) is crucial. By forcing the whole arena to be marked, any pointers stored in the arena into itself will be kept alive automatically, without the GC needing to know how to scan for them.</p> <p>So, even though <code>*New[*int](a) = new(int)</code> is still going to result in a use-after-free, <code>*New[*int](a) = New[int](a)</code> would not! This small improvement does not make arenas themselves safe, but a data structure with an internal arena can be completely safe, so long as the only pointers that go into the arena are from the arena itself.</p> <p>How can we make this work? The easy part is (4), which we can implement by adding a <code>[]unsafe.Pointer</code> to the arena, and sticking every pointer we allocate into it.</p> <div><figure><pre><code data-lang="go"><span>type</span> <span>Arena</span> <span>struct</span> <span>{</span>
  <span>next</span>      <span>unsafe</span><span>.</span><span>Pointer</span>
  <span>left</span><span>,</span> <span>cap</span> <span>uintptr</span>

  <span>chunks</span> <span>[]</span><span>unsafe</span><span>.</span><span>Pointer</span>  <span>// New field.</span>
<span>}</span>

<span>func</span> <span>(</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>Alloc</span><span>(</span><span>size</span><span>,</span> <span>align</span> <span>uintptr</span><span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span> <span>{</span>
  <span>// ... snip ...</span>
  <span>if</span> <span>a</span><span>.</span><span>left</span> <span>&lt;</span> <span>words</span> <span>{</span>
    <span>// Pick whichever is largest: the minimum allocation size,</span>
    <span>// twice the last allocation, or the next power of two</span>
    <span>// after words.</span>
    <span>a</span><span>.</span><span>cap</span> <span>=</span> <span>max</span><span>(</span><span>minWords</span><span>,</span> <span>a</span><span>.</span><span>cap</span><span>*</span><span>2</span><span>,</span> <span>nextPow2</span><span>(</span><span>words</span><span>))</span>
    <span>a</span><span>.</span><span>next</span> <span>=</span> <span>unsafe</span><span>.</span><span>Pointer</span><span>(</span><span>unsafe</span><span>.</span><span>SliceData</span><span>(</span><span>make</span><span>([]</span><span>uintptr</span><span>,</span> <span>a</span><span>.</span><span>cap</span><span>)))</span>
    <span>a</span><span>.</span><span>left</span> <span>=</span> <span>a</span><span>.</span><span>cap</span>
    <span>a</span><span>.</span><span>chunks</span> <span>=</span> <span>append</span><span>(</span><span>a</span><span>.</span><span>chunks</span><span>,</span> <span>a</span><span>.</span><span>next</span><span>)</span>
  <span>}</span>
  <span>// ... snip ...</span>
<span>}</span></code></pre></figure></div> <p>The cost of the <code>append</code> is amortized: to allocate <code>n</code> bytes, we wind up allocating an additional <span><span><span><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>‚Å°</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log \log n)</annotation></semantics></math></span></span></span> times. But what does this do to our benchmarks?</p> <div><figure><pre><code data-lang="console"><span>BenchmarkArena/int/arena-48         800.08 MB/s
BenchmarkArena/int/new-48           386.81 MB/s
BenchmarkArena/[2]int/arena-48      1236.00 MB/s
BenchmarkArena/[2]int/new-48        520.84 MB/s
BenchmarkArena/[64]int/arena-48     7999.71 MB/s
BenchmarkArena/[64]int/new-48       2706.68 MB/s
BenchmarkArena/[1024]int/arena-48   9998.00 MB/s
BenchmarkArena/[1024]int/new-48     2816.28 MB/s</span></code></pre></figure></div> <p>Seems pretty much the same, which is a good sign.</p> <h3 id="back-pointers"><a href="#back-pointers">Back Pointers</a></h3> <p>Now that the arena does not discard any allocated memory, we can focus on condition (3): making it so that if any pointer returned by <code>Alloc</code> is alive, then so is the whole arena.</p> <p>Here we can make use of an important property of how Go‚Äôs GC works: any pointer into an allocation will keep it alive, as well as <em>anything reachable from that pointer</em>. But the chunks we‚Äôre allocating are <code>[]uintptr</code>s, which will not be scanned. If there could <em>somehow</em> be a single pointer in this slice that was scanned, we would be able to stick the pointer <code>a *Arena</code> there, and so when anything that <code>Alloc</code> returns is scanned, it would cause <code>a</code> to be marked as alive.</p> <p>So far, we have been allocating <code>[N]uintptr</code> using <code>make([]T)</code>, but we would actually like to allocate <code>struct { A [N]uintptr; P unsafe.Pointer }</code>, where <code>N</code> is some dynamic value.</p> <p>In its infintie wisdom, the Go standard library actually gives us a dedicated mechanism to do this: <code>reflect.StructOf</code>. This can be used to construct arbitrary anonymous <code>struct</code> types at runtime, which we can then allocate on the heap.</p> <p>So, instead of calling <code>make</code>, we might call this function:</p> <div><figure><pre><code data-lang="go"><span>func</span> <span>(</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>allocChunk</span><span>(</span><span>words</span> <span>uintptr</span><span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span> <span>{</span>
	<span>chunk</span> <span>:=</span> <span>reflect</span><span>.</span><span>New</span><span>(</span><span>reflect</span><span>.</span><span>StructOf</span><span>([]</span><span>reflect</span><span>.</span><span>StructField</span><span>{</span>
		<span>{</span>
			<span>Name</span><span>:</span> <span>"X0"</span><span>,</span>
			<span>Type</span><span>:</span> <span>reflect</span><span>.</span><span>ArrayOf</span><span>(</span><span>int</span><span>(</span><span>words</span><span>),</span> <span>reflect</span><span>.</span><span>TypeFor</span><span>[</span><span>uintptr</span><span>]()),</span>
		<span>},</span>
		<span>{</span><span>Name</span><span>:</span> <span>"X1"</span><span>,</span> <span>Type</span><span>:</span> <span>reflect</span><span>.</span><span>TypeFor</span><span>[</span><span>unsafe</span><span>.</span><span>Pointer</span><span>]()},</span>
	<span>}))</span><span>.</span><span>UnsafePointer</span><span>()</span>

  <span>// Offset to the end of the chunk, and write a to it.</span>
  <span>end</span> <span>:=</span> <span>unsafe</span><span>.</span><span>Add</span><span>(</span><span>chunk</span><span>,</span> <span>words</span> <span>*</span> <span>unsafe</span><span>.</span><span>Sizeof</span><span>(</span><span>uintptr</span><span>(</span><span>0</span><span>)))</span>
  <span>*</span><span>(</span><span>**</span><span>Arena</span><span>)(</span><span>end</span><span>)</span> <span>=</span> <span>a</span>

  <span>return</span> <span>chunk</span>
<span>}</span></code></pre></figure></div> <p>This appears to have a minor but noticeable effect on performance<sup id="fnref:type-cache" role="doc-noteref"><a href="#fn:type-cache" rel="footnote">6</a></sup>.</p> <div><figure><pre><code data-lang="console"><span>BenchmarkArena/int/arena-48         763.91 MB/s
BenchmarkArena/int/new-48           385.49 MB/s
BenchmarkArena/[2]int/arena-48      1174.00 MB/s
BenchmarkArena/[2]int/new-48        524.32 MB/s
BenchmarkArena/[64]int/arena-48     7563.54 MB/s
BenchmarkArena/[64]int/new-48       2649.63 MB/s
BenchmarkArena/[1024]int/arena-48   8668.02 MB/s
BenchmarkArena/[1024]int/new-48     2648.10 MB/s</span></code></pre></figure></div> <h2 id="more-optimizations"><a href="#more-optimizations">More Optimizations</a></h2> <p>Looking back at <code>Arena.Alloc</code>, the end of this function has a branch:</p> <div><figure><pre><code data-lang="go"><span>func</span> <span>(</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>Alloc</span><span>(</span><span>size</span><span>,</span> <span>align</span> <span>uintptr</span><span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span> <span>{</span>
  <span>// ... snip...</span>

  <span>// Allocate the chunk by incrementing the pointer.</span>
  <span>p</span> <span>:=</span> <span>a</span><span>.</span><span>next</span>
  <span>a</span><span>.</span><span>left</span> <span>-=</span> <span>words</span>
  <span>if</span> <span>a</span><span>.</span><span>left</span> <span>&gt;</span> <span>0</span> <span>{</span>
    <span>a</span><span>.</span><span>next</span> <span>=</span> <span>unsafe</span><span>.</span><span>Add</span><span>(</span><span>a</span><span>.</span><span>next</span><span>,</span> <span>size</span><span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>// Beware, offsetting to one-past-the-end is one of the few</span>
    <span>// things explicitly not allowed by Go.</span>
    <span>a</span><span>.</span><span>next</span> <span>=</span> <span>nil</span>
  <span>}</span>

  <span>return</span> <span>p</span>
<span>}</span></code></pre></figure></div> <p>This is the absolute hottest part of allocation, since it is executed every time we call this function. The branch is a bit unfortunate, but it‚Äôs necessary, as noted by the comment.</p> <p>In C++, if we have an array of <code>int</code> with <code>n</code> elements in it, and <code>int* p</code> is a pointer to the start of the array, <code>p + n</code> is a valid pointer, even though it can‚Äôt be dereferenced; it points ‚Äúone past the end‚Äù of the array. This is a useful construction, since, for example, you can use it to eliminate a loop induction variable:</p> <div><figure><pre><code data-lang="c++"><span>// Naive for loop, has an induction variable i.</span>
<span>for</span> <span>(</span><span>int</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>n</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
  <span>do_something</span><span>(</span><span>p</span><span>[</span><span>i</span><span>]);</span>
<span>}</span>

<span>// Faster: avoids the extra variable increment in the loop</span>
<span>// body for doing p[i].</span>
<span>for</span> <span>(</span><span>auto</span> <span>end</span> <span>=</span> <span>p</span> <span>+</span> <span>n</span><span>;</span> <span>p</span> <span>&lt;</span> <span>end</span><span>;</span> <span>p</span><span>++</span><span>)</span> <span>{</span>
  <span>do_something</span><span>(</span><span>*</span><span>p</span><span>);</span>
<span>}</span></code></pre></figure></div> <p>Go, however, gets very upset if you do this, because it confuses the garbage collector. The GC can‚Äôt tell the difference between a one-past-the-end pointer for allocation A, and for the start of allocation B immediately after it. At best this causes memory to stay alive for longer, and at worst it triggers safety interlocks in the GC. The GC will panic if it happens to scan a pointer for an address that it knows has been freed.</p> <p>But in our code above, every chunk now has an extra element at the very end that is not used for allocation, so we <em>can</em> have a pointer that <em>is</em> one-past-the-end of the <code>[N]uintptr</code> that we are vending memory from.</p> <p>The updated allocation function would look like this:</p> <div><figure><pre><code data-lang="go"><span>func</span> <span>(</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>Alloc</span><span>(</span><span>size</span><span>,</span> <span>align</span> <span>uintptr</span><span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span> <span>{</span>
  <span>// ... snip ...</span>

  <span>// Allocate the chunk by incrementing the pointer.</span>
  <span>p</span> <span>:=</span> <span>a</span><span>.</span><span>next</span>
  <span>a</span><span>.</span><span>next</span> <span>=</span> <span>unsafe</span><span>.</span><span>Add</span><span>(</span><span>a</span><span>.</span><span>next</span><span>,</span> <span>size</span><span>)</span>
  <span>a</span><span>.</span><span>left</span> <span>-=</span> <span>words</span>

  <span>return</span> <span>p</span>
<span>}</span></code></pre></figure></div> <p>Notably, we do not replace <code>a.left</code> with an end pointer, because of the <code>if a.left &lt; words</code> comparison. We can‚Äôt actually avoid the subtraction <code>a.left -= words</code> because we would have to do it to make this comparison work if we got rid of <code>a.left</code>.</p> <p>So how much better is this?</p> <div><figure><pre><code data-lang="console"><span>BenchmarkArena/int/arena-48         780.07 MB/s
BenchmarkArena/int/new-48           383.16 MB/s
BenchmarkArena/[2]int/arena-48      1245.73 MB/s
BenchmarkArena/[2]int/new-48        530.39 MB/s
BenchmarkArena/[64]int/arena-48     7684.39 MB/s
BenchmarkArena/[64]int/new-48       2679.94 MB/s
BenchmarkArena/[1024]int/arena-48   8859.99 MB/s
BenchmarkArena/[1024]int/new-48     2611.33 MB/s</span></code></pre></figure></div> <p>Remarkably, not very! This is an improvement on the order of magnitude of one or two percentage points. This is because the branch we deleted is extremely predictable.</p> <p>Turns out there‚Äôs a bigger improvement we can make.</p> <h3 id="write-barriers"><a href="#write-barriers">Write Barriers</a></h3> <p>Here‚Äôs the assembly Go generated for this function, heavily abridged, and annotated with the corresponding Go source code.</p> <div><figure><pre><code data-lang="llvm"><span>TEXT</span> <span>(*</span><span>Arena</span><span>).</span><span>Alloc</span><span>(</span><span>SB</span><span>)</span>
  <span>CMPQ</span>    <span>SP</span><span>,</span> <span>0x10</span><span>(</span><span>R14</span><span>)</span>
  <span>JBE</span>     <span>moreStack</span>  <span>; Stack growth prologue.</span>
  <span>PUSHQ</span>   <span>BP</span>
  <span>MOVQ</span>    <span>SP</span><span>,</span> <span>BP</span>
  <span>SUBQ</span>    <span>$</span><span>0x58</span><span>,</span> <span>SP</span>

  <span>; size = (size + mask) &amp;^ mask</span>
  <span>LEAQ</span>    <span>0x7</span><span>(</span><span>BX</span><span>),</span> <span>DX</span>
  <span>ANDQ</span>    <span>$</span><span>-0</span><span>x</span><span>8</span><span>,</span> <span>DX</span>
  <span>; words := size / wordBytes</span>
  <span>MOVQ</span>    <span>DX</span><span>,</span> <span>SI</span>
  <span>SHRQ</span>    <span>$</span><span>0x3</span><span>,</span> <span>DX</span>

  <span>; if a.left &lt; words</span>
  <span>CMPQ</span>    <span>0x8</span><span>(</span><span>AX</span><span>),</span> <span>DX</span>
  <span>JAE</span>     <span>alloc</span>

  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>0x68</span><span>(</span><span>SP</span><span>)</span>
  <span>MOVQ</span>    <span>SI</span><span>,</span> <span>0x48</span><span>(</span><span>SP</span><span>)</span>
  <span>MOVQ</span>    <span>DX</span><span>,</span> <span>0x40</span><span>(</span><span>SP</span><span>)</span>

  <span>; nextPow2(words)</span>
  <span>MOVZX</span>   <span>runtime</span><span>.x</span><span>86</span><span>HasPOPCNT</span><span>(</span><span>SB</span><span>),</span> <span>DI</span>
  <span>TESTL</span>   <span>DI</span><span>,</span> <span>DI</span>
  <span>JE</span>      <span>1</span><span>f</span>
  <span>XORL</span>    <span>DI</span><span>,</span> <span>DI</span>
  <span>POPCNTQ</span> <span>DX</span><span>,</span> <span>DI</span>
  <span>JMP</span>     <span>2</span><span>f</span>
<span>1</span><span>:</span>
  <span>MOVQ</span>    <span>DX</span><span>,</span> <span>AX</span>
  <span>CALL</span>    <span>math/bits</span><span>.</span><span>OnesCount</span><span>(</span><span>SB</span><span>)</span>
  <span>MOVQ</span>    <span>0x40</span><span>(</span><span>SP</span><span>),</span> <span>DX</span>
  <span>MOVQ</span>    <span>0x48</span><span>(</span><span>SP</span><span>),</span> <span>SI</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>DI</span>
  <span>MOVQ</span>    <span>0x68</span><span>(</span><span>SP</span><span>),</span> <span>AX</span>
<span>2</span><span>:</span>
  <span>CMPQ</span>    <span>DI</span><span>,</span> <span>$</span><span>0x1</span>
  <span>JE</span>      <span>1</span><span>f</span>
  <span>BSRQ</span>    <span>DX</span><span>,</span> <span>CX</span>
  <span>MOVQ</span>    <span>$</span><span>-0</span><span>x</span><span>1</span><span>,</span> <span>DI</span>
  <span>CMOVE</span>   <span>DI</span><span>,</span> <span>CX</span>
  <span>INCQ</span>    <span>CX</span>
  <span>MOVL</span>    <span>$</span><span>0x1</span><span>,</span> <span>DI</span>
  <span>SHLQ</span>    <span>CL</span><span>,</span> <span>DI</span>
  <span>CMPQ</span>    <span>CX</span><span>,</span> <span>$</span><span>0x40</span>
  <span>SBBQ</span>    <span>R8</span><span>,</span> <span>R8</span>
  <span>ANDQ</span>    <span>R8</span><span>,</span> <span>DI</span>
  <span>MOVQ</span>    <span>DI</span><span>,</span> <span>DX</span>
<span>1</span><span>:</span>
  <span>MOVQ</span>    <span>0x10</span><span>(</span><span>AX</span><span>),</span> <span>CX</span>
  <span>SHLQ</span>    <span>$</span><span>0x1</span><span>,</span> <span>CX</span>

  <span>; a.cap = max(minWords, a.cap*2, nextPow2(words))</span>
  <span>CMPQ</span>    <span>CX</span><span>,</span> <span>$</span><span>0x8</span>
  <span>MOVL</span>    <span>$</span><span>0x8</span><span>,</span> <span>BX</span>
  <span>CMOVA</span>   <span>CX</span><span>,</span> <span>BX</span>
  <span>CMPQ</span>    <span>DX</span><span>,</span> <span>BX</span>
  <span>CMOVA</span>   <span>DX</span><span>,</span> <span>BX</span>
  <span>MOVQ</span>    <span>BX</span><span>,</span> <span>0x10</span><span>(</span><span>AX</span><span>)</span>

  <span>; a.next = a.allocChunk(a.cap)</span>
  <span>CALL</span>    <span>github</span><span>.</span><span>com/mcy/go-arena</span><span>.(*</span><span>Arena</span><span>).</span><span>allocChunk</span><span>(</span><span>SB</span><span>)</span>
  <span>CMPL</span>    <span>runtime</span><span>.</span><span>writeBarrier</span><span>(</span><span>SB</span><span>),</span> <span>$</span><span>0x0</span>
  <span>JNE</span>     <span>1</span><span>f</span>
  <span>MOVQ</span>    <span>0x68</span><span>(</span><span>SP</span><span>),</span> <span>DX</span>
  <span>JMP</span>     <span>2</span><span>f</span>
<span>1</span><span>:</span>
  <span>CALL</span>    <span>runtime</span><span>.</span><span>gcWriteBarrier2</span><span>(</span><span>SB</span><span>)</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>0</span><span>(</span><span>R11</span><span>)</span>
  <span>MOVQ</span>    <span>0x68</span><span>(</span><span>SP</span><span>),</span> <span>DX</span>
  <span>MOVQ</span>    <span>0</span><span>(</span><span>DX</span><span>),</span> <span>R8</span>
  <span>MOVQ</span>    <span>R8</span><span>,</span> <span>0x8</span><span>(</span><span>R11</span><span>)</span>
<span>2</span><span>:</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>0</span><span>(</span><span>DX</span><span>)</span>

  <span>; a.left = a.cap</span>
  <span>MOVQ</span>    <span>0x10</span><span>(</span><span>DX</span><span>),</span> <span>R8</span>
  <span>MOVQ</span>    <span>R8</span><span>,</span> <span>0x8</span><span>(</span><span>DX</span><span>)</span>
  <span>MOVQ</span>    <span>0x28</span><span>(</span><span>DX</span><span>),</span> <span>CX</span>
  <span>MOVQ</span>    <span>0x20</span><span>(</span><span>DX</span><span>),</span> <span>BX</span>
  <span>INCQ</span>    <span>BX</span>
  <span>MOVQ</span>    <span>0x18</span><span>(</span><span>DX</span><span>),</span> <span>R8</span>
  <span>CMPQ</span>    <span>CX</span><span>,</span> <span>BX</span>
  <span>JAE</span>     <span>2</span><span>f</span>

  <span>; a.chunks = append(a.chunks, a.next)</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>0x50</span><span>(</span><span>SP</span><span>)</span>
  <span>MOVQ</span>    <span>R8</span><span>,</span> <span>AX</span>
  <span>MOVL</span>    <span>$</span><span>0x1</span><span>,</span> <span>DI</span>
  <span>LEAQ</span>    <span>0x28f70</span><span>(</span><span>IP</span><span>),</span> <span>SI</span>
  <span>CALL</span>    <span>runtime</span><span>.</span><span>growslice</span><span>(</span><span>SB</span><span>)</span>
  <span>MOVQ</span>    <span>0x68</span><span>(</span><span>SP</span><span>),</span> <span>DX</span>
  <span>MOVQ</span>    <span>CX</span><span>,</span> <span>0x28</span><span>(</span><span>DX</span><span>)</span>
  <span>CMPL</span>    <span>runtime</span><span>.</span><span>writeBarrier</span><span>(</span><span>SB</span><span>),</span> <span>$</span><span>0x0</span>
  <span>JE</span>      <span>1</span><span>f</span>
  <span>CALL</span>    <span>runtime</span><span>.</span><span>gcWriteBarrier2</span><span>(</span><span>SB</span><span>)</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>0</span><span>(</span><span>R11</span><span>)</span>
  <span>MOVQ</span>    <span>0x18</span><span>(</span><span>DX</span><span>),</span> <span>CX</span>
  <span>MOVQ</span>    <span>CX</span><span>,</span> <span>0x8</span><span>(</span><span>R11</span><span>)</span>
<span>1</span><span>:</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>0x18</span><span>(</span><span>DX</span><span>)</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>R8</span>
  <span>MOVQ</span>    <span>0x50</span><span>(</span><span>SP</span><span>),</span> <span>AX</span>
<span>2</span><span>:</span>
  <span>MOVQ</span>    <span>BX</span><span>,</span> <span>0x20</span><span>(</span><span>DX</span><span>)</span>
  <span>CMPL</span>    <span>runtime</span><span>.</span><span>writeBarrier</span><span>(</span><span>SB</span><span>),</span> <span>$</span><span>0x0</span>
  <span>JE</span>      <span>1</span><span>f</span>
  <span>CALL</span>    <span>runtime</span><span>.</span><span>gcWriteBarrier2</span><span>(</span><span>SB</span><span>)</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>0</span><span>(</span><span>R11</span><span>)</span>
  <span>MOVQ</span>    <span>-0</span><span>x</span><span>8</span><span>(</span><span>R8</span><span>)(</span><span>BX</span><span>*</span><span>8</span><span>),</span> <span>CX</span>
  <span>MOVQ</span>    <span>CX</span><span>,</span> <span>0x8</span><span>(</span><span>R11</span><span>)</span>
<span>1</span><span>:</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>-0</span><span>x</span><span>8</span><span>(</span><span>R8</span><span>)(</span><span>BX</span><span>*</span><span>8</span><span>)</span>
  <span>MOVQ</span>    <span>DX</span><span>,</span> <span>AX</span>
  <span>MOVQ</span>    <span>0x40</span><span>(</span><span>SP</span><span>),</span> <span>DX</span>
  <span>MOVQ</span>    <span>0x48</span><span>(</span><span>SP</span><span>),</span> <span>SI</span>

<span>alloc:</span>
  <span>; p := a.next</span>
  <span>MOVQ</span>    <span>0</span><span>(</span><span>AX</span><span>),</span> <span>CX</span>

  <span>; a.next = unsafe.Add(a.next, size)</span>
  <span>LEAQ</span>    <span>0</span><span>(</span><span>CX</span><span>)(</span><span>SI</span><span>*</span><span>1</span><span>),</span> <span>BX</span>
  <span>CMPL</span>    <span>runtime</span><span>.</span><span>writeBarrier</span><span>(</span><span>SB</span><span>),</span> <span>$</span><span>0x0</span>
  <span>JE</span>      <span>1</span><span>f</span>
  <span>CALL</span>    <span>runtime</span><span>.</span><span>gcWriteBarrier2</span><span>(</span><span>SB</span><span>)</span>
  <span>MOVQ</span>    <span>BX</span><span>,</span> <span>0</span><span>(</span><span>R11</span><span>)</span>
  <span>MOVQ</span>    <span>0</span><span>(</span><span>AX</span><span>),</span> <span>SI</span>
  <span>MOVQ</span>    <span>SI</span><span>,</span> <span>0x8</span><span>(</span><span>R11</span><span>)</span>
<span>1</span><span>:</span>
  <span>MOVQ</span>    <span>BX</span><span>,</span> <span>0</span><span>(</span><span>AX</span><span>)</span>

  <span>; a.left -= words</span>
  <span>LEAQ</span>    <span>0</span><span>(</span><span>CX</span><span>)(</span><span>SI</span><span>*</span><span>1</span><span>),</span> <span>BX</span>
  <span>SUBQ</span>    <span>DX</span><span>,</span> <span>0x8</span><span>(</span><span>AX</span><span>)</span>

  <span>; return p</span>
  <span>MOVQ</span>    <span>CX</span><span>,</span> <span>AX</span>
  <span>ADDQ</span>    <span>$</span><span>0x58</span><span>,</span> <span>SP</span>
  <span>POPQ</span>    <span>BP</span>
  <span>RET</span></code></pre></figure></div> <p>There‚Äôs a lot going on in this function, but most of it is a mix of Go not being great at register allocation, and lots of <em>write barriers</em>.</p> <p>A write barrier is a mechanism for synchronizing ordinary user code with the GC. Go generates code for one any time a non-pointer-free type is stored. For example, writing to a <code>**int</code>, <code>*string</code>, or <code>*[]int</code> requires a write barrier.</p> <p>Write barriers are implemented as follows:</p> <ol> <li> <p><code>runtime.writeBarrier</code> is checked, which determines whether the write barrier is necessary, which is only when the GC is in the mark phase. Otherwise the branch is taken to skip the write barrier.</p> </li> <li> <p>A call to one of the <code>runtime.gcWriteBarrierN</code> functions happens. <code>N</code> is the number of pointers that the GC needs to be informed of.</p> </li> <li> <p>This function calls <code>runtime.gcWriteBarrier</code>, which returns a buffer onto which pointers the GC needs to now trace through should be written to.</p> </li> <li> <p>The actual store happens.</p> </li> </ol> <p>A write barrier is required for a case like the following. Consider the following code.</p> <div><figure><pre><code data-lang="go"><span>func</span> <span>alloc</span><span>(</span><span>n</span> <span>**</span><span>int</span><span>)</span> <span>{</span>
  <span>*</span><span>n</span> <span>=</span> <span>new</span><span>(</span><span>int</span><span>)</span>
<span>}</span></code></pre></figure></div> <p>This function will call <code>runtime.newobject</code> to allocate eight bytes of memory. The resulting pointer will be returned in <code>rax</code>. This function then stores <code>rax</code> into <code>n</code> and returns. If we Godbolt this function, we‚Äôll find that it does, in fact, generate a write barrier:</p> <div><figure><pre><code data-lang="llvm"><span>TEXT</span> <span>x.</span><span>alloc</span>
  <span>CMPQ</span>    <span>SP</span><span>,</span> <span>16</span><span>(</span><span>R14</span><span>)</span>
  <span>JLS</span>     <span>growStack</span>
  <span>PUSHQ</span>   <span>BP</span>
  <span>MOVQ</span>    <span>SP</span><span>,</span> <span>BP</span>
  <span>SUBQ</span>    <span>$</span><span>16</span><span>,</span> <span>SP</span>

  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>main</span><span>.</span><span>n+</span><span>32</span><span>(</span><span>SP</span><span>)</span>

  <span>; new(int)</span>
  <span>LEAQ</span>    <span>type:</span><span>int</span><span>(</span><span>SB</span><span>),</span> <span>AX</span>
  <span>CALL</span>    <span>runtime</span><span>.</span><span>newobject</span><span>(</span><span>SB</span><span>)</span>

  <span>MOVQ</span>    <span>main</span><span>.</span><span>n+</span><span>32</span><span>(</span><span>SP</span><span>),</span> <span>CX</span>
  <span>TESTB</span>   <span>AL</span><span>,</span> <span>(</span><span>CX</span><span>)</span>

  <span>; This is the write barrier.</span>
  <span>CMPL</span>    <span>runtime</span><span>.</span><span>writeBarrier</span><span>(</span><span>SB</span><span>),</span> <span>$</span><span>0</span>
  <span>JEQ</span>     <span>skip</span>
  <span>MOVQ</span>    <span>(</span><span>CX</span><span>),</span> <span>DX</span>
  <span>CALL</span>    <span>runtime</span><span>.</span><span>gcWriteBarrier2</span><span>(</span><span>SB</span><span>)</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>(</span><span>R11</span><span>)</span>
  <span>MOVQ</span>    <span>DX</span><span>,</span> <span>8</span><span>(</span><span>R11</span><span>)</span>

<span>skip:</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>(</span><span>CX</span><span>)</span>
  <span>PCDATA</span>  <span>$</span><span>0</span><span>,</span> <span>$</span><span>-1</span>
  <span>ADDQ</span>    <span>$</span><span>16</span><span>,</span> <span>SP</span>
  <span>POPQ</span>    <span>BP</span>
  <span>RET</span>

<span>growStack:</span>
  <span>NOP</span>
  <span>MOVQ</span>    <span>AX</span><span>,</span> <span>8</span><span>(</span><span>SP</span><span>)</span>
  <span>CALL</span>    <span>runtime</span><span>.</span><span>morestack_noctxt</span><span>(</span><span>SB</span><span>)</span>
  <span>MOVQ</span>    <span>8</span><span>(</span><span>SP</span><span>),</span> <span>AX</span>
  <span>JMP</span>     <span>x.</span><span>alloc</span></code></pre></figure></div> <p>Note that two pointers get written: the pointer returned by <code>new(int)</code>, and the old value of <code>*n</code>. This ensures that regardless of where in this function the GC happens to be scanning through <code>*n</code>, it sees both values during the mark phase.</p> <p>Now, this isn‚Äôt necessary if the relevant pointers are already reachable in some other way‚Ä¶ which is exactly the case in our arena (thanks to the <code>chunks</code> slice). So the write barrier in the fast path is redundant.</p> <p>But, how do we get rid of it? There is a <code>//go:nowritebarrier</code>, but that‚Äôs not allowed outside of a list of packages allowlisted in the compiler. It also doens‚Äôt disable write barriers; it simply generates a diagnostic if any are emitted.</p> <p>But remember, write barriers only occur when storing pointer-typed memory‚Ä¶ so we can just replace <code>next unsafe.Pointer</code> with <code>next uintptr</code>.</p> <div><figure><pre><code data-lang="go"><span>type</span> <span>Arena</span> <span>struct</span> <span>{</span>
  <span>next</span>      <span>uintptr</span> <span>// A real pointer!</span>
  <span>left</span><span>,</span> <span>cap</span> <span>uintptr</span>

  <span>chunks</span> <span>[]</span><span>unsafe</span><span>.</span><span>Pointer</span>
<span>}</span>

<span>func</span> <span>(</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>Alloc</span><span>(</span><span>size</span><span>,</span> <span>align</span> <span>uintptr</span><span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span> <span>{</span>
  <span>mask</span> <span>:=</span> <span>wordBytes</span> <span>-</span> <span>1</span>
  <span>size</span> <span>=</span> <span>(</span><span>size</span> <span>+</span> <span>mask</span><span>)</span> <span>&amp;^</span> <span>mask</span>
  <span>words</span> <span>:=</span> <span>size</span> <span>/</span> <span>wordBytes</span>

  <span>if</span> <span>a</span><span>.</span><span>left</span> <span>&lt;</span> <span>words</span> <span>{</span>
    <span>a</span><span>.</span><span>cap</span> <span>=</span> <span>max</span><span>(</span><span>minWords</span><span>,</span> <span>a</span><span>.</span><span>cap</span><span>*</span><span>2</span><span>,</span> <span>nextPow2</span><span>(</span><span>words</span><span>))</span>

    <span>p</span> <span>:=</span> <span>a</span><span>.</span><span>allocChunk</span><span>(</span><span>a</span><span>.</span><span>cap</span><span>)</span>
    <span>a</span><span>.</span><span>next</span> <span>=</span> <span>uintptr</span><span>(</span><span>p</span><span>)</span>
    <span>a</span><span>.</span><span>left</span> <span>=</span> <span>a</span><span>.</span><span>cap</span>
    <span>a</span><span>.</span><span>chunks</span> <span>=</span> <span>append</span><span>(</span><span>a</span><span>.</span><span>chunks</span><span>,</span> <span>p</span><span>)</span>
  <span>}</span>

  <span>p</span> <span>:=</span> <span>a</span><span>.</span><span>next</span>
  <span>a</span><span>.</span><span>next</span> <span>+=</span> <span>size</span>
  <span>a</span><span>.</span><span>left</span> <span>-=</span> <span>words</span>

  <span>return</span> <span>unsafe</span><span>.</span><span>Pointer</span><span>(</span><span>p</span><span>)</span>
<span>}</span></code></pre></figure></div> <p><code>go vet</code> hates this, because it doesn‚Äôt know that we‚Äôre smarter than it is. Does This make the code faster? To make it a little bit more realistic, I‚Äôve written a separate variant of the benchmarks that hammers the GC really hard in a separate G:</p> <div><figure><pre><code data-lang="go"><span>go</span> <span>func</span><span>()</span> <span>{</span>
  <span>for</span> <span>{</span> <span>runtime</span><span>.</span><span>GC</span><span>()</span> <span>}</span>
<span>}()</span></code></pre></figure></div> <p>The result indicates that this is a worthwhile optimization for churn-heavy contexts. Performance is much worse overall, but that‚Äôs because the GC is pre-empting everyone. The improvement seems to be on the order of 20% for very small allocations.</p> <div><figure><pre><code data-lang="console"><span>#</span><span> </span>Before
<span>BenchmarkArena/int/arena-48         169.09 MB/s
BenchmarkArena/int/new-48           84.73 MB/s
BenchmarkArena/[2]int/arena-48      309.40 MB/s
BenchmarkArena/[2]int/new-48        120.23 MB/s
BenchmarkArena/[64]int/arena-48     1954.16 MB/s
BenchmarkArena/[64]int/new-48       950.48 MB/s
BenchmarkArena/[1024]int/arena-48   3341.13 MB/s
BenchmarkArena/[1024]int/new-48     1413.26 MB/s

</span><span>#</span><span> </span>After
<span>BenchmarkArena/int/arena-48         195.58 MB/s
BenchmarkArena/int/new-48           83.67 MB/s
BenchmarkArena/[2]int/arena-48      352.49 MB/s
BenchmarkArena/[2]int/new-48        120.13 MB/s
BenchmarkArena/[64]int/arena-48     1987.22 MB/s
BenchmarkArena/[64]int/new-48       903.78 MB/s
BenchmarkArena/[1024]int/arena-48   3342.67 MB/s
BenchmarkArena/[1024]int/new-48     1439.99 MB/s</span></code></pre></figure></div> <h3 id="realloc"><a href="#realloc">Realloc</a></h3> <p>Go does not offer an easy mechanism to ‚Äúreallocate‚Äù an allocation, as with <code>realloc()</code> in C. This is because it has no mechanism for freeing pointers explicitly, which is necessary for a reallocation abstraction.</p> <p>But we already don‚Äôt care about safety, so we can offer reallocation on our arena. Now, the reallocation we can offer is quite primitive: if a chunk happens to be the most recent one allocated, we can grow it. Otherwise we just allocate a new chunk and don‚Äôt free the old one.</p> <p>This makes it possible to implement ‚Äúarena slices‚Äù that can be constructed by appending, which will not trigger reallocation on slice growth as long as nothing else gets put on the arena.</p> <p><code>Realloc</code> would look something like this:</p> <div><figure><pre><code data-lang="go"><span>func</span> <span>(</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>Realloc</span><span>(</span>
  <span>ptr</span> <span>unsafe</span><span>.</span><span>Pointer</span><span>,</span>
  <span>oldSize</span><span>,</span> <span>newSize</span><span>,</span> <span>align</span> <span>uintptr</span><span>,</span>
<span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span> <span>{</span>
  <span>mask</span> <span>:=</span> <span>wordBytes</span> <span>-</span> <span>1</span>
  <span>oldSize</span> <span>=</span> <span>(</span><span>oldSize</span> <span>+</span> <span>mask</span><span>)</span> <span>&amp;^</span> <span>mask</span>
  <span>newSize</span> <span>=</span> <span>(</span><span>newSize</span> <span>+</span> <span>mask</span><span>)</span> <span>&amp;^</span> <span>mask</span>

  <span>if</span> <span>newSize</span> <span>&lt;=</span> <span>oldSize</span> <span>{</span>
    <span>return</span> <span>ptr</span>
  <span>}</span>

  <span>// Check if this is the most recent allocation. If it is,</span>
  <span>// we can grow in-place.</span>
  <span>if</span> <span>a</span><span>.</span><span>next</span> <span>-</span> <span>oldSize</span> <span>==</span> <span>uintptr</span><span>(</span><span>ptr</span><span>)</span> <span>{</span>
    <span>// Check if we have enough space available for the</span>
    <span>// requisite extra space.</span>
    <span>need</span> <span>:=</span> <span>(</span><span>newSize</span> <span>-</span> <span>oldSize</span><span>)</span> <span>/</span> <span>wordBytes</span>
    <span>if</span> <span>a</span><span>.</span><span>left</span> <span>&gt;=</span> <span>need</span> <span>{</span>
      <span>// Grow in-place.</span>
      <span>a</span><span>.</span><span>left</span> <span>-=</span> <span>need</span>
      <span>return</span> <span>ptr</span>
    <span>}</span>
  <span>}</span>

  <span>// Can't grow in place, allocate new memory and copy to it.</span>
  <span>new</span> <span>:=</span> <span>a</span><span>.</span><span>Alloc</span><span>(</span><span>newSize</span><span>,</span> <span>align</span><span>)</span>
  <span>copy</span><span>(</span>
    <span>unsafe</span><span>.</span><span>Slice</span><span>((</span><span>*</span><span>byte</span><span>)(</span><span>new</span><span>),</span> <span>newSize</span><span>),</span>
    <span>unsafe</span><span>.</span><span>Slice</span><span>((</span><span>*</span><span>byte</span><span>)(</span><span>ptr</span><span>),</span> <span>oldSize</span><span>),</span>
  <span>)</span>

  <span>return</span> <span>new</span>
<span>}</span></code></pre></figure></div> <p>Then, whenever we append to our arena slice, we can call <code>a.Realloc()</code> to grow it. However, this does not work if the slice‚Äôs base pointer is not the original address returned by <code>Alloc</code> or <code>Realloc</code>. It is an exercise for the reader to:</p> <ol> <li> <p>Implement a <code>Slice[T]</code> type that uses an arena for allocation.</p> </li> <li> <p>Make this work for any value of <code>ptr</code> within the most recent allocation, not just the base offset. This requires extra book-keeping.</p> </li> </ol> <h2 id="all-together"><a href="#all-together">All Together</a></h2> <p>Here is the entirety of the code that we have developed, not including the reallocation function above.</p> <div><figure><pre><code data-lang="go"><span>package</span> <span>arena</span>

<span>import</span> <span>(</span>
	<span>"math/bits"</span>
	<span>"reflect"</span>
	<span>"unsafe"</span>
<span>)</span>

<span>func</span> <span>New</span><span>[</span><span>T</span> <span>any</span><span>](</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>*</span><span>T</span> <span>{</span>
	<span>var</span> <span>t</span> <span>T</span>
	<span>p</span> <span>:=</span> <span>a</span><span>.</span><span>Alloc</span><span>(</span><span>unsafe</span><span>.</span><span>Sizeof</span><span>(</span><span>t</span><span>),</span> <span>unsafe</span><span>.</span><span>Alignof</span><span>(</span><span>t</span><span>))</span>
	<span>return</span> <span>(</span><span>*</span><span>T</span><span>)(</span><span>p</span><span>)</span>
<span>}</span>

<span>type</span> <span>Arena</span> <span>struct</span> <span>{</span>
	<span>next</span>      <span>unsafe</span><span>.</span><span>Pointer</span>
	<span>left</span><span>,</span> <span>cap</span> <span>uintptr</span>
	<span>chunks</span>    <span>[]</span><span>unsafe</span><span>.</span><span>Pointer</span>
<span>}</span>

<span>const</span> <span>(</span>
	<span>maxAlign</span> <span>uintptr</span> <span>=</span> <span>8</span> <span>// Depends on target, this is for 64-bit.</span>
	<span>minWords</span> <span>uintptr</span> <span>=</span> <span>8</span>
<span>)</span>

<span>func</span> <span>(</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>Alloc</span><span>(</span><span>size</span><span>,</span> <span>align</span> <span>uintptr</span><span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span> <span>{</span>
	<span>// First, round the size up to the alignment of every object in the arena.</span>
	<span>mask</span> <span>:=</span> <span>maxAlign</span> <span>-</span> <span>1</span>
	<span>size</span> <span>=</span> <span>(</span><span>size</span> <span>+</span> <span>mask</span><span>)</span> <span>&amp;^</span> <span>mask</span>
	<span>// Then, replace the size with the size in pointer-sized words. This does not</span>
	<span>// result in any loss of size, since size is now a multiple of the uintptr</span>
	<span>// size.</span>
	<span>words</span> <span>:=</span> <span>size</span> <span>/</span> <span>maxAlign</span>

	<span>// Next, check if we have enough space left for this chunk. If there isn't,</span>
	<span>// we need to grow.</span>
	<span>if</span> <span>a</span><span>.</span><span>left</span> <span>&lt;</span> <span>words</span> <span>{</span>
		<span>// Pick whichever is largest: the minimum allocation size, twice the last</span>
		<span>// allocation, or the next power of two after words.</span>
		<span>a</span><span>.</span><span>cap</span> <span>=</span> <span>max</span><span>(</span><span>minWords</span><span>,</span> <span>a</span><span>.</span><span>cap</span><span>*</span><span>2</span><span>,</span> <span>nextPow2</span><span>(</span><span>words</span><span>))</span>
		<span>a</span><span>.</span><span>next</span> <span>=</span> <span>a</span><span>.</span><span>allocChunk</span><span>(</span><span>a</span><span>.</span><span>cap</span><span>)</span>
		<span>a</span><span>.</span><span>left</span> <span>=</span> <span>a</span><span>.</span><span>cap</span>

		<span>a</span><span>.</span><span>chunks</span> <span>=</span> <span>append</span><span>(</span><span>a</span><span>.</span><span>chunks</span><span>,</span> <span>a</span><span>.</span><span>next</span><span>)</span>
	<span>}</span>

	<span>// Allocate the chunk by incrementing the pointer.</span>
	<span>p</span> <span>:=</span> <span>a</span><span>.</span><span>next</span>
	<span>a</span><span>.</span><span>next</span> <span>=</span> <span>unsafe</span><span>.</span><span>Add</span><span>(</span><span>a</span><span>.</span><span>next</span><span>,</span> <span>size</span><span>)</span>
	<span>a</span><span>.</span><span>left</span> <span>-=</span> <span>words</span>

	<span>return</span> <span>p</span>
<span>}</span>

<span>func</span> <span>(</span><span>a</span> <span>*</span><span>Arena</span><span>)</span> <span>allocChunk</span><span>(</span><span>words</span> <span>uintptr</span><span>)</span> <span>unsafe</span><span>.</span><span>Pointer</span> <span>{</span>
	<span>chunk</span> <span>:=</span> <span>reflect</span><span>.</span><span>New</span><span>(</span><span>reflect</span><span>.</span><span>StructOf</span><span>([]</span><span>reflect</span><span>.</span><span>StructField</span><span>{</span>
		<span>{</span>
			<span>Name</span><span>:</span> <span>"X0"</span><span>,</span>
			<span>Type</span><span>:</span> <span>reflect</span><span>.</span><span>ArrayOf</span><span>(</span><span>int</span><span>(</span><span>words</span><span>),</span> <span>reflect</span><span>.</span><span>TypeFor</span><span>[</span><span>uintptr</span><span>]()),</span>
		<span>},</span>
		<span>{</span><span>Name</span><span>:</span> <span>"X1"</span><span>,</span> <span>Type</span><span>:</span> <span>reflect</span><span>.</span><span>TypeFor</span><span>[</span><span>unsafe</span><span>.</span><span>Pointer</span><span>]()},</span>
	<span>}))</span><span>.</span><span>UnsafePointer</span><span>()</span>

	<span>// Offset to the end of the chunk, and write a to it.</span>
	<span>end</span> <span>:=</span> <span>unsafe</span><span>.</span><span>Add</span><span>(</span><span>chunk</span><span>,</span> <span>words</span><span>*</span><span>unsafe</span><span>.</span><span>Sizeof</span><span>(</span><span>uintptr</span><span>(</span><span>0</span><span>)))</span>
	<span>*</span><span>(</span><span>**</span><span>Arena</span><span>)(</span><span>end</span><span>)</span> <span>=</span> <span>a</span>

	<span>return</span> <span>chunk</span>
<span>}</span>

<span>func</span> <span>nextPow2</span><span>(</span><span>n</span> <span>uintptr</span><span>)</span> <span>uintptr</span> <span>{</span>
	<span>return</span> <span>uintptr</span><span>(</span><span>1</span><span>)</span> <span>&lt;&lt;</span> <span>bits</span><span>.</span><span>Len</span><span>(</span><span>uint</span><span>(</span><span>n</span><span>))</span>
<span>}</span></code></pre></figure></div> <p>There are other optimizations that we could make here that I haven‚Äôt discussed. For example, arenas could be re-used; once an arena is done, it could be ‚Äúreset‚Äù and placed into a <code>sync.Pool</code>. This arena would not need to go into the GC to request new chunks, re-using the ones previously allocated (and potentially saving on the cost of zeroing memory over and over again).</p> <p>I did say that this relies very heavily on Go‚Äôs internal implementation details. Whats the odds that they get broken in the future? Well, the requirement that allocations know their shape is forced by the existence of <code>unsafe.Pointer</code>, and the requirement that a pointer into any part of an allocation keeps the whole thing alive essentially comes from slices being both sliceable and mutable; once a slice escapes to the heap (and thus multiple goroutines) coordinating copies for shrinking a slice would require much more complexity than the current write barrier implementation.</p> <p>And in my opinion, it‚Äôs pretty safe to say that Hyrum‚Äôs Law has us covered here. ;)</p>  </div></div>]]></description>
        </item>
    </channel>
</rss>