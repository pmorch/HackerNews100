<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 05 Dec 2024 03:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Native dual-range input (137 pts)]]></title>
            <link>https://muffinman.io/blog/native-dual-range-input/</link>
            <guid>42320516</guid>
            <pubDate>Wed, 04 Dec 2024 18:39:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://muffinman.io/blog/native-dual-range-input/">https://muffinman.io/blog/native-dual-range-input/</a>, See on <a href="https://news.ycombinator.com/item?id=42320516">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page"><p><a href="#content">Jump to content</a></p><section id="content" role="main" tabindex="-1"><svg viewBox="0 0 1000 40"><path d="M 0.25 -5 L 0,0 L 500 40 L 1000,0.25 L 1000,-5 z"></path><path d="M-2000 -160 L 500 40 L 3000,-160 L 3000 42 L -2000 42"></path><path d="M-2000 -160 L 500 40 L 3000,-160" fill="none" vector-effect="non-scaling-stroke"></path></svg><div><p>I just released <a href="https://github.com/stanko/dual-range-input">@stanko/dual-range-input</a> - a native dual-range input. Here is how it looks with the default styles:</p><p>The "native" part is somewhat open for discussion. I call it native because the library uses two native HTML range inputs. This means that all of the native interactions and accessibility features are preserved.</p><p>Native inputs allow us not to reinvent the wheel. There is about <a href="https://cdn.jsdelivr.net/npm/@stanko/dual-range-input/dist/index.js">fifty lines of JavaScript</a> to synchronize the inputs, along with some CSS to ensure everything looks polished.</p><p>In my book, that is <em>native enough</em>.</p><h2 id="why">Why<a aria-label="Anchor link for: why" title="Anchor link for: why" href="#why"> </a></h2><p>When I create <a href="https://muffinman.io/art">my generative drawings</a>, I use a tool I built myself. This tool includes a UI for tweaking parameters, and I often have minimum and maximum sliders for certain parameters. I thought it would be nice to have a dual-range slider for these. However, most existing solutions rely heavily on JavaScript and reimplement dragging and accessibility features.</p><p>So, I set my own set of requirements:</p><ul><li>It should use native HTML range inputs.</li><li>When you click on the track, the closer of the two thumbs should jump to that value.</li></ul><p>Hopefully, after you read these two requirements, my solution will make sense.</p><h2 id="how-it-works">How it works<a aria-label="Anchor link for: how-it-works" title="Anchor link for: how-it-works" href="#how-it-works"> </a></h2><p>There are two inputs placed next to each other. When either of the inputs is changed, the library calculates a midpoint between the two selected values. Then the <code>min</code> and <code>max</code> attributes are set to the midpoint, and the width of both inputs is updated to match.</p><p>Here is an unstyled example, which will hopefully illustrate this well:</p><p>Even like this, it works reasonably well. We'll style it later to make it look nicer.</p><h3 id="resizing-the-inputs">Resizing the inputs<a aria-label="Anchor link for: resizing-the-inputs" title="Anchor link for: resizing-the-inputs" href="#resizing-the-inputs"> </a></h3><p>There's a small trick involved in calculating input widths. This is because the range input's track is actually shorter than the input's total width. All browsers leave enough space on the sides so the thumb doesn't stick out.</p><p>Here is a screenshot from Firefox (other browsers work similarly), where you can see that the track is shorter than the width. I've emphasized the space the browser leaves for the thumb.</p><p><img alt="Screenshot showing that the range input's track is shorter than its total width" src="https://muffinman.io/img/dual-range-input/thumb-width.png"></p><p>If we take an example where the inputs need to be in a 1:3 ratio, simply setting their widths to 25% and 75% isn't enough. We also need to account for the thumb width. Instead of calculating the exact ratio, I simplified the math by adding the thumb width to each input's width:</p><pre data-lang="scss"><code data-lang="scss"><span><span><span>input</span><span><span><span>:</span>first-child</span></span> </span><span>{</span>
</span><span> <span><span>width</span></span><span>:</span><span> <span><span>calc</span><span><span>(</span><span>25<span>%</span></span> <span>+</span> <span><span>var</span><span><span>(</span><span><span>--</span><span>dri-thumb-width</span></span></span><span><span>)</span></span></span></span><span><span>)</span></span></span></span><span>;</span>
</span><span><span>}</span>
</span><span>
</span><span><span><span>input</span><span><span><span>:</span>last-child</span></span> </span><span>{</span>
</span><span> <span><span>width</span></span><span>:</span><span> <span><span>calc</span><span><span>(</span><span>75<span>%</span></span> <span>+</span> <span><span>var</span><span><span>(</span><span><span>--</span><span>dri-thumb-width</span></span></span><span><span>)</span></span></span></span><span><span>)</span></span></span></span><span>;</span>
</span><span><span>}</span>
</span></code></pre><p>If you thought, <em>Wait, this adds up to more than 100%</em>, you'd be 100% right. That's why I applied a small trick: I added padding to the inputs' wrapper to accommodate the extra width for the thumbs.</p><p><img alt="Screenshot showing padding on the wrapper to accommodate extra width" src="https://muffinman.io/img/dual-range-input/padding.png"></p><p>This makes the math simpler while keeping the input sizing correct. It took me forever to explain this properly, and I'm still not sure if I succeeded.</p><h3 id="move-the-thumb-closer-to-the-click">Move the thumb closer to the click<a aria-label="Anchor link for: move-the-thumb-closer-to-the-click" title="Anchor link for: move-the-thumb-closer-to-the-click" href="#move-the-thumb-closer-to-the-click"> </a></h3><p>Because the inputs are resized to meet at the midpoint, whenever you click between the thumbs, the one closer to the click will move to that value.</p><p> and the midpoint will be easier to see.</p><p>If there's an odd number of steps between the thumbs, the last-used input is favored. Try it out with debug mode on, and you'll see what I mean.</p><p>With that, both requirements are satisfied. The only thing left is to style it properly.</p><h2 id="styling">Styling<a aria-label="Anchor link for: styling" title="Anchor link for: styling" href="#styling"> </a></h2><p>All browsers allow us to style range inputs using CSS. That made styling of the tracks and thumbs pretty straightforward. I just ensured that the tracks didn't have a border radius in the middle where they connect.</p><h3 id="theming">Theming<a aria-label="Anchor link for: theming" title="Anchor link for: theming" href="#theming"> </a></h3><p>I exposed several variables to make theming easier. Here's the complete list with their default values:</p><pre data-lang="scss"><code data-lang="scss"><span><span><span><span>.</span></span><span>dual-range-input</span> </span><span>{</span>
</span><span>  <span><span><span>--</span><span>dri-height</span></span></span><span>:</span><span> <span>1<span>.</span>5<span>rem</span></span></span><span>;</span>
</span><span>
</span><span>  <span><span><span>--</span><span>dri-thumb-width</span></span></span><span>:</span><span> <span>1<span>.</span>25<span>rem</span></span></span><span>;</span>
</span><span>  <span><span><span>--</span><span>dri-thumb-height</span></span></span><span>:</span><span> <span>1<span>.</span>25<span>rem</span></span></span><span>;</span>
</span><span>
</span><span>  <span><span><span>--</span><span>dri-thumb-color</span></span></span><span>:</span><span> <span><span>#</span>ddd</span></span><span>;</span>
</span><span>  <span><span><span>--</span><span>dri-thumb-hover-color</span></span></span><span>:</span><span> <span><span>#</span>a8d5ff</span></span><span>;</span>
</span><span>  <span><span><span>--</span><span>dri-thumb-active-color</span></span></span><span>:</span><span> <span><span>#</span>4eaaff</span></span><span>;</span>
</span><span>  <span><span><span>--</span><span>dri-thumb-border-color</span></span></span><span>:</span><span> <span><span>rgba</span><span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0<span>.</span>1</span></span><span><span>)</span></span></span></span><span>;</span>
</span><span>  <span><span><span>--</span><span>dri-thumb-border-radius</span></span></span><span>:</span><span> <span>1<span>rem</span></span></span><span>;</span>
</span><span>
</span><span>  <span><span><span>--</span><span>dri-track-height</span></span></span><span>:</span><span> <span>0</span><span><span>.</span>25<span>rem</span></span></span><span>;</span>
</span><span>  <span><span><span>--</span><span>dri-track-color</span></span></span><span>:</span><span> <span><span>#</span>ccc</span></span><span>;</span>
</span><span>  <span><span><span>--</span><span>dri-track-filled-color</span></span></span><span>:</span><span> <span><span>#</span>0084ff</span></span><span>;</span>
</span><span>  <span><span><span>--</span><span>dri-track-border-radius</span></span></span><span>:</span><span> <span>1<span>rem</span></span></span><span>;</span>
</span><span><span>}</span>
</span></code></pre><p>To create your own theme, simply override these variables.</p><h3 id="gradients">Gradients<a aria-label="Anchor link for: gradients" title="Anchor link for: gradients" href="#gradients"> </a></h3><p>One thing I thought was cool is how I used CSS gradients to paint the selected range in both inputs. I set the gradients to use the <code>--dri-gradient-position</code> variable, then updated that variable in the code along with the widths.</p><p>Here's how the CSS looks for one of the inputs:</p><pre data-lang="scss"><code data-lang="scss"><span><span><span>input</span><span><span><span>:</span>first-child</span></span><span><span>::</span><span>-moz-</span>range-track</span> </span><span>{</span>
</span><span>  <span><span>background-image</span></span><span>:</span><span> <span><span>linear-gradient</span><span><span>(</span>
</span></span></span></span><span><span><span><span>    <span>to</span> <span>right</span><span>,</span>
</span></span></span></span><span><span><span><span>    <span><span>var</span><span><span>(</span><span><span>--</span><span>dri-track-color</span></span></span><span><span>)</span></span></span> <span><span>var</span><span><span>(</span><span><span>--</span><span>dri-gradient-position</span></span></span><span><span>)</span></span></span><span>,</span>
</span></span></span></span><span><span><span><span>    <span><span>var</span><span><span>(</span><span><span>--</span><span>dri-track-filled-color</span></span></span><span><span>)</span></span></span> <span><span>var</span><span><span>(</span><span><span>--</span><span>dri-gradient-position</span></span></span><span><span>)</span></span></span>
</span></span></span></span><span><span><span><span>  </span><span><span>)</span></span></span></span><span>;</span>
</span><span><span>}</span>
</span></code></pre><p>Again,  and the semi-transparent thumbs will make the gradients easier to see.</p><h2 id="conclusion">Conclusion<a aria-label="Anchor link for: conclusion" title="Anchor link for: conclusion" href="#conclusion"> </a></h2><p>I had to write this post as <del>a brain dump</del> a way to consolidate my thoughts, so I hope it's not too convoluted.</p><p>Thank you for following along, and I hope this inspires you to try it out and consider using more native elements before opting for custom libraries.</p></div></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Outerbase Studio – Open-Source Database GUI (187 pts)]]></title>
            <link>https://github.com/outerbase/studio</link>
            <guid>42320032</guid>
            <pubDate>Wed, 04 Dec 2024 17:55:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/outerbase/studio">https://github.com/outerbase/studio</a>, See on <a href="https://news.ycombinator.com/item?id=42320032">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Outerbase Studio</h2><a id="user-content-outerbase-studio" aria-label="Permalink: Outerbase Studio" href="#outerbase-studio"></a></p>
<p dir="auto"><strong>Outerbase Studio</strong> is a lightweight, browser-based GUI for managing SQL databases, designed for simplicity and versatility. Initially built for LibSQL and SQLite, it now supports a broad range of databases, including:</p>
<p dir="auto"><strong>Supported Databases:</strong></p>
<ul dir="auto">
<li><strong>SQLite-based Database</strong>
<ul dir="auto">
<li>Turso/LibSQL</li>
<li>SQLite (local files)</li>
<li>Cloudflare D1</li>
<li>rqlite</li>
<li>StarbaseDB</li>
<li>Val.town</li>
</ul>
</li>
<li>MySQL (beta, limited features)</li>
<li>PostgreSQL (beta, limited features)</li>
</ul>
<hr>
<p dir="auto">Give it a try directly from your browser</p>
<p dir="auto"><a href="https://libsqlstudio.com/" rel="nofollow"><img src="https://private-user-images.githubusercontent.com/4539653/350291679-5d92ce58-9ce6-4cd7-9c65-4763d2d3b231.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzMzNTE3MDMsIm5iZiI6MTczMzM1MTQwMywicGF0aCI6Ii80NTM5NjUzLzM1MDI5MTY3OS01ZDkyY2U1OC05Y2U2LTRjZDctOWM2NS00NzYzZDJkM2IyMzEucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTIwNCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEyMDRUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YjlhNmFkMTE1ODc1ZDljOTFmN2Q3MzdkZjgxNzcyMTgwZDNmNWUzOTZiMzdjZWNiOGIxYTliMTMzM2MyNmFkMSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.VdECOwaLsFE_cScRvcLG0fw-0atqrvFGub02Lf3g5QA" alt="LibSQL Studio, sqlite online editor" secured-asset-link=""></a>
<a href="https://libsqlstudio.com/playground/client?template=chinook" rel="nofollow"><img src="https://private-user-images.githubusercontent.com/4539653/350291645-dcf7e246-fe72-4351-ab10-ae2d1658087d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzMzNTE3MDMsIm5iZiI6MTczMzM1MTQwMywicGF0aCI6Ii80NTM5NjUzLzM1MDI5MTY0NS1kY2Y3ZTI0Ni1mZTcyLTQzNTEtYWIxMC1hZTJkMTY1ODA4N2QucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTIwNCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEyMDRUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MmJhOWYyZmU3NmNmYWI0MTE2ZWUyZmIzZDFjY2MyMGZhYTIzMTljYzM0M2FkYzkzM2JlY2EzYzIxYjI4MDliNCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.iXRst9DCrdQ2NBSYBHjXk6SPBM8Unf7KtyiYoiK6U8w" alt="Libsql studio playground" secured-asset-link=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Desktop App</h2><a id="user-content-desktop-app" aria-label="Permalink: Desktop App" href="#desktop-app"></a></p>
<p dir="auto">You can download <a href="https://github.com/outerbase/studio-desktop/releases/">Windows and Mac desktop app here</a>.</p>
<p dir="auto">Outerbase Studio Desktop is a lightweight Electron wrapper for the Outerbase Studio web version. It enables support for drivers that aren't feasible in a browser environment, such as MySQL and PostgreSQL.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/4539653/350292159-1d7a3d90-61e3-4a77-83a5-4bb096bbfb4b.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzMzNTE3MDMsIm5iZiI6MTczMzM1MTQwMywicGF0aCI6Ii80NTM5NjUzLzM1MDI5MjE1OS0xZDdhM2Q5MC02MWUzLTRhNzctODNhNS00YmIwOTZiYmZiNGIuZ2lmP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTIwNCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEyMDRUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZDJlNDU4MmQ3MWM5YzM4NjM2MWVhYjE3N2ZiZTA1MDU1NjUyZjE4NDZiNGU1OWI1YjRhZjNlNTkyNDAwYTA0NyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.3IPl5luif-NcmkAKuqYJv5YnrXGAlp3zbInQtAgqjKU"><img src="https://private-user-images.githubusercontent.com/4539653/350292159-1d7a3d90-61e3-4a77-83a5-4bb096bbfb4b.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzMzNTE3MDMsIm5iZiI6MTczMzM1MTQwMywicGF0aCI6Ii80NTM5NjUzLzM1MDI5MjE1OS0xZDdhM2Q5MC02MWUzLTRhNzctODNhNS00YmIwOTZiYmZiNGIuZ2lmP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTIwNCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEyMDRUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZDJlNDU4MmQ3MWM5YzM4NjM2MWVhYjE3N2ZiZTA1MDU1NjUyZjE4NDZiNGU1OWI1YjRhZjNlNTkyNDAwYTA0NyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.3IPl5luif-NcmkAKuqYJv5YnrXGAlp3zbInQtAgqjKU" alt="libsqlstudio-git-preview (7)" data-animated-image=""></a></p>
<ul dir="auto">
<li><strong>Query Editor</strong>: It features a user-friendly query editor equipped with auto-completion and function hint tooltips. It allows you to execute multiple queries simultaneously and view their results efficiently.</li>
<li><strong>Data Editor</strong>: It comes with a powerful data editor, allowing you to stage all your changes and preview them before committing. The data table is highly optimized and lightweight, capable of rendering thousands of rows and columns efficiently.</li>
<li><strong>Schema Editor</strong>: It allows you to quickly create, modify, and remove table columns with just a few clicks without writing any SQL.</li>
<li><strong>Connection Manager</strong>: It includes a flexible connection manager, allowing you to store your connections locally in your browser. You can also store them on a server and share your connections across multiple devices.</li>
</ul>
<p dir="auto">The features mentioned above are just a few of the many we offer. Give it a try to explore everything we have in store.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Grifters, believers, grinders, and coasters (197 pts)]]></title>
            <link>https://www.seangoedecke.com/programmer-archetypes/</link>
            <guid>42319997</guid>
            <pubDate>Wed, 04 Dec 2024 17:52:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.seangoedecke.com/programmer-archetypes/">https://www.seangoedecke.com/programmer-archetypes/</a>, See on <a href="https://news.ycombinator.com/item?id=42319997">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header></header><section><p>Why do engineers get mad at each other so often?<sup id="fnref-1"><a href="#fn-1">1</a></sup> </p>
<p>I think a lot of programmer arguments bottom out in a cultural clash between different kinds of engineers: believers vs grifters, or coasters vs grinders. I’m going to argue that good companies actually have a healthy mix of all four types of engineer, so it’s probably sensible to figure out how to work with them.</p>
<p>Despite the names, I think grifters and coasters can be as good at their jobs as believers and grinders. I’m naming them this way because these are the names you’d give them when you’re complaining about your coworkers, and this article is really aimed at people who are trying to have a bit more empathy for the assholes they work with. I myself fall mostly in the grifter + coaster quadrant, and <a href="https://www.seangoedecke.com/how-to-ship">I think I’m great at my job</a>. Here’s a beautiful diagram:</p>
<p><span>
      <a href="https://www.seangoedecke.com/static/463a9c7a46c66e8232c46aaad5523766/081d5/quadrants.png" target="_blank" rel="noopener">
    <span></span>
  <img alt="quadrants" title="quadrants" src="https://www.seangoedecke.com/static/463a9c7a46c66e8232c46aaad5523766/fcda8/quadrants.png" srcset="https://www.seangoedecke.com/static/463a9c7a46c66e8232c46aaad5523766/12f09/quadrants.png 148w,
https://www.seangoedecke.com/static/463a9c7a46c66e8232c46aaad5523766/e4a3f/quadrants.png 295w,
https://www.seangoedecke.com/static/463a9c7a46c66e8232c46aaad5523766/fcda8/quadrants.png 590w,
https://www.seangoedecke.com/static/463a9c7a46c66e8232c46aaad5523766/efc66/quadrants.png 885w,
https://www.seangoedecke.com/static/463a9c7a46c66e8232c46aaad5523766/c83ae/quadrants.png 1180w,
https://www.seangoedecke.com/static/463a9c7a46c66e8232c46aaad5523766/081d5/quadrants.png 1264w" sizes="(max-width: 590px) 100vw, 590px" loading="lazy">
  </a>
    </span></p>
<p>These aren’t immutable aspects of your personality. They’re more categories for how you approach the job of software engineering - you’ll move around between quadrants as you change your approach to work, for all the usual reasons.</p>
<h2>Grifters</h2>
<p>Grifters play the game to win. They think carefully about the image they’re presenting to leadership, they make tactical decisions around performance cycles, and they are comfortable speaking the language of the organization. They respect the company mission as written, but what they really value is what the leaders of the company show they care about. Despite the name, grifters are not <em>frauds</em>. In an organization that rewards shipping good code and delighting customers, grifters will ship good code and delight customers. But they won’t sacrifice their own interests to ship good code and delight customers in an organization that rewards other behavior.</p>
<p>Grifters are good at getting stuff done in large organizations. You want a grifter leading a complicated engineering project, because a grifter understands the levers of power in a large organization and how to use them. Without any grifter involvement, projects tend to mysteriously stall out from lack of buy-in. However, Grifters aren’t very good at changing the culture of their organizations. They tend to go with the current instead. If all you have are grifters, your organization will probably naturally devolve into a lowest-common-denominator culture. Grifters also aren’t good at important work that’s unrewarding. In most software companies, you really want a handful of engineers obsessing about issues like accessibility, security and performance all the time, even when the organization as a whole doesn’t care about it. Those people probably won’t be grifters. </p>
<h2>Believers</h2>
<p>Believers just want to do good work. They think making tactical decisions and “managing up” is slimy, and they don’t do it. They truly value the company mission, or they wouldn’t be there. Typically they’re heavily invested in product decisions, and prioritize the user experience over profit. Believers are often under-promoted, either due to alienating leadership or just not investing enough effort into the promotion cycle. They’re not <em>suckers</em>, though - they know the political cost they’re paying by refusing to play the game. They’re willing to pay that cost in order to work in accordance with their values.</p>
<p>Believers are good at keeping an organization focused on the customer. They’re out there walking the walk and talking the talk, drumming into new hires that At This Company We Do Things Right. They’re also good at keeping code quality up and obsessing over issues that require long-term maintenance (like performance). However, they can struggle when an organization changes focus. In my experience, as companies grow and move more into the enterprise market, there’s usually a cohort of alienated believers who are made very unhappy. If your entire organization is believers, you’ll be very well-equipped to execute but have zero flexibility. You’re going to stick to the mission that everyone believes in, even if it runs the org directly into the ground.</p>
<h2>Coasters</h2>
<p>Coasters are chill. They work enough to get the job done, but typically no further - above all else they avoid work they see as unnecessary. They typically do a lot of “hammock time”: non-work activities where they ponder a work problem in the back of their minds (this is particularly true for senior+ engineers). They still take work seriously: when they’re working, work has their full attention. But they don’t force themselves to produce code when they’re really not feeling it. Why go to a ton of effort to push out mediocre work when they can come back to it later and do it right?</p>
<p>Coasters are good at maintaining a calm, safe environment on teams. They’re also good for teams that have a lot of last-minute requests or questions, because coasters have “slack in the system”: they’ll rarely be completely consumed by a particular task for days. But they’re not as good for teams that have a lot of well-defined work queued up - for that, you want a grinder. A software engineering org could survive with all coasters, but when the pressure ramps up it’s easier to have some grinders around.</p>
<h2>Grinders</h2>
<p>Grinders are locked in. There’s always something that needs doing and the grinder is ready to do it. They just love the mechanics of the job - writing code, reviewing PRs, answering questions on Slack - or at least they love being useful. They’re always heads-down on a problem, sometimes to the point where they can’t see the forest for the trees. Still, if you need something done fast, give it to a grinder.</p>
<p>The strengths of a grinder are obvious: they do a lot of work. The weaknesses are also pretty straightforward: when a grinder burns out, they burn out <em>hard</em>. In my experience, grinders also tend to be pretty high-strung, since operating with intensity for a long time puts strain on the whole system. If it’s not obvious from the way I’m writing about this, I don’t think being a grinder is sustainable as a general mode of operating (of course I’d say that, since I’m a coaster by nature). I’ve met a lot of junior engineers who are grinders, but very few staff+ engineers. I think that’s no accident. You either learn to dial it back a bit in the first 5-10 years or you flame out of the industry entirely.</p>
<h2>Summary</h2>
<ul>
<li>If you’re a grifter, you need to figure out how to work with believers, because an all-grifter company isn’t the kind of place you want to work.</li>
<li>If you’re a believer, you don’t have to figure out how to work with grifters, but you’ll probably have to be very selective about the companies you work for.</li>
<li>If you’re a grinder, you need to figure out how to work with coasters, because you’re likely to become one at some point if you want to stay in the industry (or at minimum many of your peers will).</li>
<li>If you’re a coaster, you should try and be understanding about grinders running around stressing everyone out. You’re only able to coast because someone is willing to occasionally grind.</li>
</ul>
</section><hr></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI helps researchers dig through old maps to find lost oil and gas wells (128 pts)]]></title>
            <link>https://newscenter.lbl.gov/2024/12/04/ai-helps-researchers-dig-through-old-maps-to-find-lost-oil-and-gas-wells/</link>
            <guid>42319969</guid>
            <pubDate>Wed, 04 Dec 2024 17:50:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newscenter.lbl.gov/2024/12/04/ai-helps-researchers-dig-through-old-maps-to-find-lost-oil-and-gas-wells/">https://newscenter.lbl.gov/2024/12/04/ai-helps-researchers-dig-through-old-maps-to-find-lost-oil-and-gas-wells/</a>, See on <a href="https://news.ycombinator.com/item?id=42319969">Hacker News</a></p>
Couldn't get https://newscenter.lbl.gov/2024/12/04/ai-helps-researchers-dig-through-old-maps-to-find-lost-oil-and-gas-wells/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[UnitedHealthcare CEO fatally shot in midtown Manhattan (179 pts)]]></title>
            <link>https://www.cnn.com/2024/12/04/us/brian-thompson-united-healthcare-death/index.html</link>
            <guid>42317968</guid>
            <pubDate>Wed, 04 Dec 2024 14:52:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnn.com/2024/12/04/us/brian-thompson-united-healthcare-death/index.html">https://www.cnn.com/2024/12/04/us/brian-thompson-united-healthcare-death/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=42317968">Hacker News</a></p>
Couldn't get https://www.cnn.com/2024/12/04/us/brian-thompson-united-healthcare-death/index.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[A pro-science, pro-progress, techno-optimistic health textbook from 1929 (120 pts)]]></title>
            <link>https://moreisdifferent.blog/p/a-pro-science-pro-progress-techno</link>
            <guid>42317952</guid>
            <pubDate>Wed, 04 Dec 2024 14:50:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://moreisdifferent.blog/p/a-pro-science-pro-progress-techno">https://moreisdifferent.blog/p/a-pro-science-pro-progress-techno</a>, See on <a href="https://news.ycombinator.com/item?id=42317952">Hacker News</a></p>
Couldn't get https://moreisdifferent.blog/p/a-pro-science-pro-progress-techno: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Genie 2: A large-scale foundation world model (863 pts)]]></title>
            <link>https://deepmind.google/discover/blog/genie-2-a-large-scale-foundation-world-model/</link>
            <guid>42317903</guid>
            <pubDate>Wed, 04 Dec 2024 14:45:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://deepmind.google/discover/blog/genie-2-a-large-scale-foundation-world-model/">https://deepmind.google/discover/blog/genie-2-a-large-scale-foundation-world-model/</a>, See on <a href="https://news.ycombinator.com/item?id=42317903">Hacker News</a></p>
Couldn't get https://deepmind.google/discover/blog/genie-2-a-large-scale-foundation-world-model/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Nearly half of teenagers globally cannot read with comprehension (103 pts)]]></title>
            <link>https://ourworldindata.org/data-insights/nearly-half-of-teenagers-globally-cannot-read-with-comprehension</link>
            <guid>42317442</guid>
            <pubDate>Wed, 04 Dec 2024 13:56:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ourworldindata.org/data-insights/nearly-half-of-teenagers-globally-cannot-read-with-comprehension">https://ourworldindata.org/data-insights/nearly-half-of-teenagers-globally-cannot-read-with-comprehension</a>, See on <a href="https://news.ycombinator.com/item?id=42317442">Hacker News</a></p>
Couldn't get https://ourworldindata.org/data-insights/nearly-half-of-teenagers-globally-cannot-read-with-comprehension: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I combined spaced repetition with emails so you can remember anything (125 pts)]]></title>
            <link>https://www.ginkgonotes.com/</link>
            <guid>42317393</guid>
            <pubDate>Wed, 04 Dec 2024 13:50:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ginkgonotes.com/">https://www.ginkgonotes.com/</a>, See on <a href="https://news.ycombinator.com/item?id=42317393">Hacker News</a></p>
<div id="readability-page-1" class="page"><section><section><div><p>Add some notes and we'll email them to you on specific days using spaced repetition. This personalized schedule ensures you remember.</p><div><p><span>100+</span> people remember their notes</p></div></div><div><p><span>Try adding a note 🪄</span><img alt="arrow" loading="lazy" width="80" height="80" decoding="async" data-nimg="1" srcset="https://www.ginkgonotes.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Farrow.e13ecc6a.png&amp;w=96&amp;q=75 1x, https://www.ginkgonotes.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Farrow.e13ecc6a.png&amp;w=256&amp;q=75 2x" src="https://www.ginkgonotes.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Farrow.e13ecc6a.png&amp;w=256&amp;q=75"></p></div></section><section><p>"Spaced repetition" is the best proven method to remember new information. That's why we built this app around it.</p><div><div><p><span>📚</span></p><h3>You spend hours reading and listening</h3></div><svg viewBox="0 0 138 138" fill="none" xmlns="http://www.w3.org/2000/svg"><g><path fill-rule="evenodd" clip-rule="evenodd" d="M72.9644 5.31431C98.8774 43.8211 83.3812 88.048 54.9567 120.735C54.4696 121.298 54.5274 122.151 55.0896 122.639C55.6518 123.126 56.5051 123.068 56.9922 122.506C86.2147 88.9044 101.84 43.3918 75.2003 3.80657C74.7866 3.18904 73.9486 3.02602 73.3287 3.44222C72.7113 3.85613 72.5484 4.69426 72.9644 5.31431Z"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M56.5084 121.007C56.9835 118.685 57.6119 115.777 57.6736 115.445C59.3456 106.446 59.5323 97.67 58.4433 88.5628C58.3558 87.8236 57.6824 87.2948 56.9433 87.3824C56.2042 87.4699 55.6756 88.1435 55.7631 88.8828C56.8219 97.7138 56.6432 106.225 55.0203 114.954C54.926 115.463 53.5093 121.999 53.3221 123.342C53.2427 123.893 53.3688 124.229 53.4061 124.305C53.5887 124.719 53.8782 124.911 54.1287 125.015C54.4123 125.13 54.9267 125.205 55.5376 124.926C56.1758 124.631 57.3434 123.699 57.6571 123.487C62.3995 120.309 67.4155 116.348 72.791 113.634C77.9171 111.045 83.3769 109.588 89.255 111.269C89.9704 111.475 90.7181 111.057 90.9235 110.342C91.1288 109.626 90.7117 108.878 89.9963 108.673C83.424 106.794 77.3049 108.33 71.5763 111.223C66.2328 113.922 61.2322 117.814 56.5084 121.007Z"></path></g></svg><div><p><span>😮‍💨</span></p><h3>You create notes on important insights</h3></div><svg viewBox="0 0 138 138" fill="none" xmlns="http://www.w3.org/2000/svg"><g><path fill-rule="evenodd" clip-rule="evenodd" d="M72.9644 5.31431C98.8774 43.8211 83.3812 88.048 54.9567 120.735C54.4696 121.298 54.5274 122.151 55.0896 122.639C55.6518 123.126 56.5051 123.068 56.9922 122.506C86.2147 88.9044 101.84 43.3918 75.2003 3.80657C74.7866 3.18904 73.9486 3.02602 73.3287 3.44222C72.7113 3.85613 72.5484 4.69426 72.9644 5.31431Z"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M56.5084 121.007C56.9835 118.685 57.6119 115.777 57.6736 115.445C59.3456 106.446 59.5323 97.67 58.4433 88.5628C58.3558 87.8236 57.6824 87.2948 56.9433 87.3824C56.2042 87.4699 55.6756 88.1435 55.7631 88.8828C56.8219 97.7138 56.6432 106.225 55.0203 114.954C54.926 115.463 53.5093 121.999 53.3221 123.342C53.2427 123.893 53.3688 124.229 53.4061 124.305C53.5887 124.719 53.8782 124.911 54.1287 125.015C54.4123 125.13 54.9267 125.205 55.5376 124.926C56.1758 124.631 57.3434 123.699 57.6571 123.487C62.3995 120.309 67.4155 116.348 72.791 113.634C77.9171 111.045 83.3769 109.588 89.255 111.269C89.9704 111.475 90.7181 111.057 90.9235 110.342C91.1288 109.626 90.7117 108.878 89.9963 108.673C83.424 106.794 77.3049 108.33 71.5763 111.223C66.2328 113.922 61.2322 117.814 56.5084 121.007Z"></path></g></svg><div><p><span>😔</span></p><h3>Days later, you've forgotten most of it</h3></div></div></section><div id="demo"><p><h2>Be more knowledgeable with less effort</h2></p></div><div id="faq"><div><p>FAQ</p><p>Frequently Asked Questions</p></div><ul><li></li><li></li><li></li><li></li><li></li><li></li></ul></div><div id="pricing"><div><p>Pricing</p><h2>Notes you’ll never lose track of</h2></div><div><div><div><p>Ginkgo Notes</p><p>Simple pricing. All Ginkgo Notes features.</p></div><p><label for="pricing-switch">Billed yearly</label></p><ul><li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg><span>Create up to 1000 new notes per month</span></li><li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg><span>Customizable repetition settings</span></li></ul></div><div><p><span>POPULAR</span></p><div><div><p>Pay once</p><p>Your long-term learning companion</p></div><ul><li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg><span>Unlimited notes</span></li><li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg><span>Customizable repetition settings</span></li><li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg><span>Early access to new features</span></li></ul><div><p>Pay once. Access forever.</p></div></div></div><div><div><p>Enterprise</p><p>For educational institutions and large teams</p></div><p>Custom</p><ul><li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg><span>Batch note creation</span></li><li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg><span>Branded note templates</span></li><li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg><span>Admin dashboard</span></li><li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"></path></svg><span>Priority support</span></li></ul></div></div></div><div><h2>Forget about forgetting</h2><p>Don't waste time learning new information that you'll forget.</p></div></section><div><p><a aria-current="page" href="https://www.ginkgonotes.com/#"><img alt="GinkgoNotes logo" fetchpriority="high" width="24" height="24" decoding="async" data-nimg="1" srcset="https://www.ginkgonotes.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ficon.aed309e0.png&amp;w=32&amp;q=75 1x, https://www.ginkgonotes.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ficon.aed309e0.png&amp;w=48&amp;q=75 2x" src="https://www.ginkgonotes.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ficon.aed309e0.png&amp;w=48&amp;q=75"></a></p><p>Remember your notes with science</p><p>Copyright © <!-- -->2024<!-- --> - All rights reserved</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Speeding up Ruby by rewriting C in Ruby (212 pts)]]></title>
            <link>https://jpcamara.com/2024/12/01/speeding-up-ruby.html</link>
            <guid>42316799</guid>
            <pubDate>Wed, 04 Dec 2024 12:31:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jpcamara.com/2024/12/01/speeding-up-ruby.html">https://jpcamara.com/2024/12/01/speeding-up-ruby.html</a>, See on <a href="https://news.ycombinator.com/item?id=42316799">Hacker News</a></p>
<div id="readability-page-1" class="page"><section><p><img src="https://cdn.uploads.micro.blog/98548/2024/yjitvsc.drawio.png" alt=""></p>
<p>There is a recent <a href="https://github.com/bddicken/languages">language comparison repo</a> which has been getting shared a lot. In it, CRuby was the third slowest option, only beating out R and Python.</p>
<p>The repo author, <a href="https://x.com/BenjDicken">@BenjDicken</a>, <a href="https://x.com/BenjDicken/status/1861072804239847914">created a fun visualization</a> of each language’s performance. Here’s one of the visualizations, which shows Ruby as the third slowest language benchmarked:</p>

<blockquote>
<p>The code for this visualization is from <a href="https://benjdd.com/languages/">https://benjdd.com/languages/</a>, with permission from <a href="https://x.com/BenjDicken/status/1862623583803253149">@BenjDicken</a></p>
</blockquote>
<p>The repository describes itself as:</p>
<blockquote>
<p>A repo for collaboratively building small benchmarks to compare languages.</p>
</blockquote>
<p>It contains two different benchmarks:</p>
<ol>
<li>“Loops”, which “Emphasizes loop, conditional, and basic math performance”</li>
<li>“Fibonacci”, which “Emphasizes function call overhead and recursion.”</li>
</ol>
<p>The loop example iterates 1 billion times, utilizing a nested loop:</p>
<div><pre tabindex="0"><code data-lang="ruby">u <span>=</span> <span>ARGV</span><span>[</span><span>0</span><span>].</span>to_i       
r <span>=</span> rand(<span>10_000</span>)                          
a <span>=</span> Array<span>.</span>new(<span>10_000</span>, <span>0</span>)                 
	
(<span>0</span><span>...</span><span>10_000</span>)<span>.</span>each <span>do</span> <span>|</span>i<span>|</span>                     
  (<span>0</span><span>...</span><span>100_000</span>)<span>.</span>each <span>do</span> <span>|</span>j<span>|</span>               
    a<span>[</span>i<span>]</span> <span>+=</span> j <span>%</span> u                     
  <span>end</span>
  a<span>[</span>i<span>]</span> <span>+=</span> r                      
<span>end</span>
	
puts a<span>[</span>r<span>]</span>
</code></pre></div><p>The Fibonacci example is a basic “naive” Fibonacci implementation<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup>:</p>
<pre><code>def fibonacci(n)
  return 0 if n == 0
  return 1 if n == 1
  fibonacci(n - 1) + fibonacci(n - 2)
end

u = ARGV[0].to_i
r = 0

(1...u).each do |i|
  r += fibonacci(i)
end

puts r
</code></pre>
<p>Run on <a href="https://x.com/BenjDicken">@BenjDicken</a>’s M3 MacBook Pro, Ruby 3.3.6 takes 28 seconds to run the loop iteration example, and 12 seconds to run the Fibonacci example. For comparison, node.js takes a little over a second for both examples - it’s not a great showing for Ruby.</p>
<table>
  <thead>
    <tr>
      <th></th>
      <th>Fibonacci</th>
      <th>Loops</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Ruby</td>
      <td>12.17s</td>
      <td>28.80s</td>
    </tr>
    <tr>
      <td>node.js</td>
      <td>1.11s</td>
      <td>1.03s</td>
    </tr>
  </tbody>
</table>
<p>From this point on, I’ll use benchmarks relative to my own computer. Running the same benchmark on my M2 MacBook Air, I get 33.43 seconds for the loops and 16.33 seconds for fibonacci - even worse 🥺. Node runs a little over 1 second for fibonacci and 2 seconds for the loop example.</p>
<table>
  <thead>
    <tr>
      <th></th>
      <th>Fibonacci</th>
      <th>Loops</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Ruby</td>
      <td>16.33s</td>
      <td>33.43s</td>
    </tr>
    <tr>
      <td>node.js</td>
      <td>1.36s</td>
      <td>2.07s</td>
    </tr>
  </tbody>
</table>
<h3 id="who-cares">Who cares?</h3>
<p>In most ways, these types of benchmarks are meaningless. Python was the slowest language in the benchmark, and yet at the same time it’s the <a href="https://github.blog/news-insights/octoverse/octoverse-2024/">most used language on Github as of October 2024</a>. Ruby runs some of the <a href="https://x.com/tobi/status/1863935229620363693">largest web apps in the world</a>. I ran a <a href="https://x.com/jpcamara/status/1849984009515966958">benchmark recently of websocket performance between the Ruby Falcon web server and node.js</a>, and the Ruby results were close to the node.js results. Are you doing a billion loop iterations or using web sockets?</p>
<p>A programming language should be reasonably efficient - after that the usefulness of the language, the type of tasks you work on, and language productivity outweigh the speed at which you can run a billion iterations of a loop, or complete an intentionally inefficient implementation of a Fibonacci method.</p>
<p>That said:</p>
<ol>
<li>The programming world loves microbenchmarks 🤷‍♂️</li>
<li>Having a fast benchmark may not be valuable in practice but it has meaning for people’s interest in a language. Some would claim it means you’ll have an easier time scaling performance, but that’s arguable<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup></li>
<li>It’s disappointing if your language of choice doesn’t perform well. It’s nice to be able to say “I use and enjoy this language, and it runs fast in all benchmarks!”</li>
</ol>
<p>In the case of this Ruby benchmark, I had a feeling that YJIT wasn’t being applied in the Ruby code, so I checked the repo. Lo and behold, the command was as follows:</p>
<pre><code>ruby ./code.rb 40
</code></pre>
<p>We know my results from earlier (33 seconds and 16 seconds). What do we get with YJIT applied?</p>
<pre><code>ruby --yjit ./code.rb 40
</code></pre>
<table>
  <thead>
    <tr>
      <th></th>
<th>Fibonacci</th>
<th>Loops</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ruby</td>
<td>2.06s</td>
<td>25.57s</td>
</tr>
</tbody>
</table>
<p>Nice! With YJIT, Fibonacci gets a massive boost - going from 16.88 seconds down to 2.06 seconds. It’s close to the speed of node.js at that point!</p>
<p>YJIT makes a more modest difference for the looping example - going from 33.43 seconds down to 25.57 seconds. Why is that?</p>
<h3 id="a-team-effort">A team effort</h3>
<p>I wasn’t alone in trying out these code samples with YJIT. On twitter, <a href="https://x.com/bsilva96">@bsilva96</a> had asked the same questions:</p>
<p><img src="https://cdn.uploads.micro.blog/98548/2024/screenshot-2024-12-01-at-8.38.46pm.png" alt=""></p>
<blockquote>
<p><a href="https://x.com/bsilva96/status/1861136096689606708">https://x.com/bsilva96/status/1861136096689606708</a></p>
</blockquote>
<p><a href="https://bsky.app/profile/k0kubun.com">@k0kubun</a> came through with insights into why things were slow and ways of improving the performance:</p>
<p><img src="https://cdn.uploads.micro.blog/98548/2024/screenshot-2024-12-01-at-8.41.03pm.png" alt=""></p>
<blockquote>
<p><a href="https://x.com/k0kubun/status/1861149512640979260">https://x.com/k0kubun/status/1861149512640979260</a></p>
</blockquote>
<p>Let’s unpack his response. There are three parts to it:</p>
<ol>
<li><code>Range#each</code> is still written in C as of Ruby 3.4</li>
<li><code>Integer#times</code> was converted from C to Ruby in Ruby 3.3</li>
<li><code>Array#each</code> was converted from C to Ruby in Ruby 3.4</li>
</ol>
<h3 id="1-rangeeach-is-still-written-in-c-which-yjit-cant-optimize">1. <code>Range#each</code> is still written in C, which YJIT can’t optimize</h3>
<p>Looking back at our Ruby code:</p>
<pre><code>(0...10_000).each do |i|                     
  (0...100_000).each do |j|               
    a[i] += j % u                     
  end
  a[i] += r                      
end
</code></pre>
<p>It’s written as a range, and range has its own <code>each</code> implementation, which is apparently written in C. The CRuby codebase is pretty easy to navigate - let’s find that implementation 🕵️‍♂️.</p>
<p>Most core classes in Ruby have top-level C files named after them - in this case we’ve got <code>range.c</code> at the root of the project. CRuby has a pretty readable interface for exposing C functions as classes and methods - there is an <code>Init</code> function, usually at the bottom of the file. Inside that <code>Init</code> our classes, modules and methods are exposed from C to Ruby. Here are the relevant pieces of <code>Init_Range</code>:</p>
<pre><code>void
Init_Range(void)
{
  //...
  rb_cRange = rb_struct_define_without_accessor(
    "Range", rb_cObject, range_alloc,
    "begin", "end", "excl", NULL);

  rb_include_module(rb_cRange, rb_mEnumerable);
  // ...
  rb_define_method(rb_cRange, "each", range_each, 0);
</code></pre>
<p>First, we define our <code>Range</code> class using <code>rb_struct_define...</code>. We name it <code>“Range”</code>, with a super class of <code>Object</code> (<code>rb_cObject</code>), and some initialization parameters (<code>“begin”</code>, <code>“end”</code> and whether to exclude the last value, ie the <code>..</code> vs <code>...</code> range syntax).</p>
<p>Second, we include <code>Enumerable</code> using <code>rb_include_module</code>. That gives us all the great Ruby enumeration methods like <code>map</code>, <code>select</code>, <code>include?</code> and <a href="https://docs.ruby-lang.org/en/3.3/Enumerable.html">a bajillion others</a>. All you have to do is provide an <code>each</code> implementation and it handles the rest.</p>
<p>Third, we define our <code>“each”</code> method. It’s implemented by the <code>range_each</code> function in C, and takes zero explicit arguments (blocks are not considered in this count).</p>
<p><code>range_each</code> is hefty. It’s almost 100 lines long, and specializes into several versions of itself. I’ll highlight a few, collapsed all together:</p>
<pre><code>static VALUE
range_each(VALUE range)
{
  //...
  range_each_fixnum_endless(beg);
  range_each_fixnum_loop(beg, end, range);
  range_each_bignum_endless(beg);
  rb_str_upto_endless_each(beg, sym_each_i, 0);
  // and even more...
</code></pre>
<p>These C functions handle all the variations of ranges you might use in your own code:</p>
<div><pre tabindex="0"><code data-lang="ruby">(<span>0</span><span>...</span>)<span>.</span>each
(<span>0</span><span>...</span><span>100</span>)<span>.</span>each
(<span>"a"</span><span>...</span><span>"z"</span>)<span>.</span>each
<span># and on...</span>
</code></pre></div><p>Why does it matter that <code>Range#each</code> is written in C? It means YJIT can’t inspect it - optimizations stop at the function call and resume when the function call returns. C functions are fast, but YJIT can take things further by creating specializations for hot paths of code. There is a great article from Aaron Patterson called <a href="https://railsatscale.com/2023-08-29-ruby-outperforms-c/">Ruby Outperforms C</a> where you can learn more about some of those specialized optimizations.</p>
<h3 id="2-optimizing-our-loop-integertimes-was-converted-from-c-to-ruby-in-ruby-33">2. Optimizing our loop: <code>Integer#times</code> was converted from C to Ruby in Ruby 3.3</h3>
<p>The hot path (<em>where most of our CPU time is spent</em>) is <code>Range#each</code>, which is a C function. YJIT can’t optimize C functions - they’re a black box. So what can we do?</p>
<blockquote>
<p>We converted Integer#times to Ruby in 3.3</p>
</blockquote>
<p>Interesting! In Ruby 3.3, <code>Integer#times</code> was <a href="https://github.com/ruby/ruby/pull/8388">converted from a C function to a Ruby method</a>! Here’s the 3.3+ version - its pretty simple:</p>
<pre><code>def times
  #... a little C interop code
  i = 0
  while i &lt; self
    yield i
    i = i.succ
  end
  self
end
</code></pre>
<p>Very simple. It’s just a basic while loop. Most importantly, it’s all Ruby code, which means YJIT should be able to introspect and optimize it!</p>
<h3 id="an-aside-on-integersucc">An aside on <code>Integer#succ</code></h3>
<p>The slightly odd part of that code is <code>i.succ</code>. I’d never heard of <code>Integer#succ</code>, which apparently gives you the “successor” to an integer.</p>
<p><img src="https://cdn.uploads.micro.blog/98548/2024/0c8bd56f64.png" alt=""></p>
<blockquote>
<p>I’ve never seen this show, and yet it’s the first thing I thought of when I learned about this method. Thanks, advertising.</p>
</blockquote>
<p>There was a PR to improve the performance of <code>Integer#succ</code> in early 2024, which helped me understand why anyone would ever use it:</p>
<blockquote>
<p>We use Integer#succ when we rewrite loop methods in Ruby (e.g. Integer#times and Array#each) because opt_succ (i = i.succ) is faster to dispatch on the interpreter than putobject 1; opt_plus (i += 1).</p>
<p><a href="https://github.com/ruby/ruby/pull/9519">https://github.com/ruby/ruby/pull/9519</a></p>
</blockquote>
<p><code>Integer#success</code> is like a virtual machine cheat code. It takes a common operation (adding 1 to an integer) and turns it from two virtual machine operations into one. We can call <code>disasm</code> on the <code>times</code> method to see that in action:</p>
<pre><code>puts RubyVM::InstructionSequence.disasm(1.method(:times))
</code></pre>
<p>The <code>Integer#times</code> method gets broken down into a lot of Ruby VM bytecode, but we only care about a few lines:</p>
<pre><code>...
0025 getlocal_WC_0   i@0
0027 opt_succ        &lt;calldata!mid:succ, ARGS_SIMPLE&gt;[CcCr]
0029 setlocal_WC_0   i@0
...
</code></pre>
<ul>
<li><code>getlocal_WC_0</code> gets our <code>i</code> variable from the current scope. That’s the <code>i</code> in <code>i.succ</code></li>
<li><code>opt_succ</code> performs the <code>succ</code> call in our <code>i.succ</code>. It will either call the actual <code>Integer#succ</code> method, or an optimized C function for small numbers</li>
<li>In Ruby 3.4 with YJIT enabled, small numbers get optimized even further into machine code (just a note, not shown in the VM machine code)</li>
<li><code>setlocal_WC_0</code> sets the result of <code>opt_succ</code> to our local variable <code>i</code></li>
</ul>
<p>If we change from <code>i = i.succ</code> to <code>i += 1</code>, we now have two VM operations take the place of <code>opt_succ</code>:</p>
<pre><code>...
0025 getlocal_WC_0        i@0
0027 putobject_INT2FIX_1_
0028 opt_plus             &lt;calldata!mid:+, argc:1, ARGS_SIMPLE&gt;
0029 setlocal_WC_0        i@0
...
</code></pre>
<p>Everything is essentially the same as before, except now we have two steps to go through instead of one:</p>
<ul>
<li><code>putobject_INT2FIX_1_</code> pushes the integer <code>1</code> onto the virtual machine stack</li>
<li><code>opt_plus</code> is the <code>+</code> in our <code>+= 1</code>, and calls either the Ruby <code>+</code> method or an optimized C function for small numbers</li>
<li>There is probably a YJIT optimization for <code>opt_plus</code> as well</li>
</ul>
<p>If there is nothing else to learn from this code, it’s this: the kinds of optimizations you do at the VM and JIT level are <em>deep</em>. When writing general Ruby programs we typically don’t and <em>shouldn’t</em> consider the impact of one versus two <em>machine code instructions</em>. But at the JIT level, on the scale of millions and billions of operations, it matters!</p>
<h3 id="back-to-integertimes">Back to <code>Integer#times</code></h3>
<p>Let’s try running our benchmark code again, using <code>times</code>! Instead of iterating over ranges, we simply iterate for <code>10_000</code> and <code>100_000</code> <code>times</code>:</p>
<div><pre tabindex="0"><code data-lang="ruby">u <span>=</span> <span>ARGV</span><span>[</span><span>0</span><span>].</span>to_i        
r <span>=</span> rand(<span>10_000</span>)        
a <span>=</span> Array<span>.</span>new(<span>10_000</span>, <span>0</span>)
	
<span>10_000</span><span>.</span>times <span>do</span> <span>|</span>i<span>|</span>
  <span>100_000</span><span>.</span>times <span>do</span> <span>|</span>j<span>|</span>
    a<span>[</span>i<span>]</span> <span>+=</span> j <span>%</span> u
  <span>end</span>
  a<span>[</span>i<span>]</span> <span>+=</span> r
<span>end</span>
	
puts a<span>[</span>r<span>]</span>
</code></pre></div><table>
<thead>
<tr>
<th></th>
<th>Loops</th>
</tr>
</thead>
<tbody>
<tr>
<td>Range#each</td>
<td>25.57s</td>
</tr>
<tr>
<td>Integer#times</td>
<td>13.66s</td>
</tr>
</tbody>
</table>
<p>Nice! YJIT makes a much larger impact using <code>Integer#times</code>. That trims things down significantly, taking it down to 13.66 seconds on my machine. On <a href="https://bsky.app/profile/k0kubun.com">@k0kobun</a>’s machine it actually goes down to 9 seconds (and 8 seconds on Ruby 3.4).</p>
<blockquote>
<p>It’s probably Ruby 3.5’s job to make it faster than 8s though.</p>
</blockquote>
<p>We might look forward to even faster performance in Ruby 3.5. We’ll see!</p>
<h3 id="3-arrayeach-was-converted-from-c-to-ruby-in-ruby-34">3. <code>Array#each</code> was converted from C to Ruby in Ruby 3.4</h3>
<p>CRuby continues to see C code rewritten in Ruby, and in Ruby 3.4 <code>Array#each</code> was one of those changes. Here is an <a href="https://github.com/ruby/ruby/pull/6687/files">example of the first attempt at implementing it</a>:</p>
<pre><code>def each
  unless block_given?
    return to_enum(:each) { self.length }
  end
  i = 0
  while i &lt; self.length
    yield self[i]
    i = i.succ
  end
  self
end
</code></pre>
<p>Super simple and readable! And YJIT optimizable!</p>
<p>Unfortunately, due to something related to CRuby internals, it contained <a href="https://jpcamara.com/2024/06/23/your-ruby-programs.html#race-conditions">race conditions</a>. A later implementation <a href="https://github.com/ruby/ruby/pull/11955">landed in Ruby 3.4</a>.</p>
<pre><code>def each
  Primitive.attr! :inline_block, :c_trace

  unless defined?(yield)
    return Primitive.cexpr! 'SIZED_ENUMERATOR(self, 0, 0, ary_enum_length)'
  end
  _i = 0
  value = nil
  while Primitive.cexpr!(%q{ ary_fetch_next(self, LOCAL_PTR(_i), LOCAL_PTR(value)) })
    yield value
  end
  self
end
</code></pre>
<p>Unlike the first implementation, and unlike <code>Integer#times</code>, things are a bit more cryptic this time. This is definitely not pure Ruby code that anyone could be expected to write. Somehow, the <code>Primitive</code> module seems to allow evaluating C code from Ruby, and in doing so avoids the race conditions present in the pure Ruby solution<sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup>.</p>
<p>By fetching indexes and values using C code, I think it results in a more atomic operation. I have no idea why the <code>Primitive.cexpr!</code> is used to return the enumerator, or what value <code>Primitive.attr! :inline_block</code> provides. Please comment if you have insights there!</p>
<p>I was a little loose with my earlier <code>Integer#times</code> source code as well. That actually had a bit of this <code>Primitive</code> syntax as well. The core of the method is what we looked at, and it’s all Ruby, but the start of the method contains the same <code>Primitive</code> calls for <code>:inline_block</code> and returning the enumerator:</p>
<pre><code>def times
  Primitive.attr! :inline_block
  unless defined?(yield)
    return Primitive.cexpr! 'SIZED_ENUMERATOR(self, 0, 0, int_dotimes_size)'
  end
  #...
</code></pre>
<p>Ok - it’s more cryptic than <code>Integer#times</code> was, but <code>Array#each</code> is mostly Ruby (on Ruby 3.4+). Let’s give it a try using arrays instead of ranges or <code>times</code>:</p>
<div><pre tabindex="0"><code data-lang="ruby">u <span>=</span> <span>ARGV</span><span>[</span><span>0</span><span>].</span>to_i
r <span>=</span> rand(<span>10_000</span>)
a <span>=</span> Array<span>.</span>new(<span>10_000</span>, <span>0</span>)
	
outer <span>=</span> (<span>0</span><span>...</span><span>10_000</span>)<span>.</span>to_a<span>.</span>freeze
inner <span>=</span> (<span>0</span><span>...</span><span>100_000</span>)<span>.</span>to_a<span>.</span>freeze
outer<span>.</span>each <span>do</span> <span>|</span>i<span>|</span>
  inner<span>.</span>each <span>do</span> <span>|</span>j<span>|</span>
    a<span>[</span>i<span>]</span> <span>+=</span> j <span>%</span> u
  <span>end</span>
  a<span>[</span>i<span>]</span> <span>+=</span> r
<span>end</span>
	
puts a<span>[</span>r<span>]</span>
</code></pre></div><p>Despite the embedded C code, YJIT still seems capable of making some hefty performance optimizations. It’s within the same range as <code>Integer#times</code>!</p>
<table>
<thead>
<tr>
<th></th>
<th>Loops</th>
</tr>
</thead>
<tbody>
<tr>
<td>Range#each</td>
<td>25.57s</td>
</tr>
<tr>
<td>Integer#times</td>
<td>13.66s</td>
</tr>
<tr>
<td>Array#each</td>
<td>13.96s</td>
</tr>
</tbody>
</table>
<h3 id="microbenchmarking-ruby-performance">Microbenchmarking Ruby performance</h3>
<p>I’ve forked the original language implementation repo, and created my own repository called “Ruby Microbench”. It takes all of the examples discussed, as well as several other forms of doing the iteration in Ruby: <a href="https://github.com/jpcamara/ruby_microbench">https://github.com/jpcamara/ruby_microbench</a></p>
<p>Here is the output of just running those using Ruby 3.4 with and without YJIT:</p>
<table>
<thead>
<tr>
<th></th>
<th>fibonacci</th><th>array#each</th>
<th>range#each</th>
<th>times</th>
<th>for</th>
<th>while</th>
<th>loop do</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ruby 3.4 YJIT</td>
<td>2.19s</td>
<td>14.02s</td>
<td>26.61s</td>
<td>13.12s</td>
<td>27.38s</td>
<td>37.10s</td>
<td>13.95s</td></tr>
<tr>
<td>Ruby 3.4</td>
<td>16.49s</td>
<td>34.29s</td>
<td>33.88s</td>
<td>33.18s</td>
<td>36.32s</td>
<td>37.14s</td>
<td>50.65s</td>
</tr>
</tbody>
</table>
<p>I have no idea why the <code>for</code> and <code>while</code> loop examples I wrote seem to be so slow. I’d expect them to run much faster. Maybe there’s an issue with how I wrote them - feel free to open an issue or PR if you see something wrong with my implementation. The <code>loop do</code> (taken from <a href="https://bsky.app/profile/timtilberg.bsky.social">@timtilberg</a>’s <a href="https://x.com/timtilberg/status/1861194052516864004">example</a>) runs around the same speed as <code>Integer#times</code> - although its performance is <em>awful</em> with YJIT turned off.</p>
<p>In addition to running Ruby 3.4, for fun I have it using <code>rbenv</code> to run:</p>
<ul>
<li>Ruby 3.3</li>
<li>Ruby 3.3 YJIT</li>
<li>Ruby 3.2</li>
<li>Ruby 3.2 YJIT</li>
<li>TruffleRuby 24.1</li>
<li>Ruby Artichoke</li>
<li>MRuby</li>
</ul>
<p>A few of the test runs are listed here:</p>
<table>
<thead>
<tr>
<th></th>
<th>fibonacci</th>
<th>
array#each
</th>
<th>range#each</th>
<th>times</th>
<th>for</th>
<th>while</th>
<th>loop do</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ruby 3.4 YJIT</td><td>2.19s</td>
<td>14.02s</td>
<td>26.61s</td>
<td>13.12s</td>
<td>27.38s</td>
<td>37.10s</td>
<td>13.95s</td></tr>
<tr>
<td>Ruby 3.4</td>
<td>16.49s</td>
<td>34.29s</td><td>33.88s</td>
<td>33.18s</td>
<td>36.32s</td>
<td>37.14s</td>
<td>50.65s</td>
</tr>
<tr><td>TruffleRuby 24.1</td><td>0.92s</td>
<td>0.97s</td>
<td>0.92s</td><td>2.39s</td>
<td>2.06s</td><td>3.90s</td>
<td>0.77s</td>
</tr><tr>
<td>MRuby 3.3</td>
<td>28.83s</td>
<td>144.65s</td>
<td>126.40s</td>
<td>128.22s</td>
<td>133.58s</td><td>91.55s</td>
<td>144.93s</td>
</tr>
<tr>
<td>Artichoke</td>
<td>19.71s</td>
<td>236.10s</td><td>214.55s</td>
<td>214.51s</td>
<td>215.95s</td>
<td>174.70s</td>
<td>264.67s</td>
</tr>
</tbody>
</table>
<p>Based on that, I’ve taken the original visualization and made a Ruby specific one here just for the <code>fibonacci</code> run:</p>

<h3 id="speeding-up-rangeeach">Speeding up <code>range#each</code></h3>
<p>Can we, the non <a href="https://bsky.app/profile/k0kubun.com">@k0kobun</a>’s of the world, make <code>range#each</code> faster? If I monkey patch the <code>Range</code> class with a pure-ruby implementation, things <em>do</em> get much faster! Here’s my implementation:</p>
<pre><code>class Range
  def each
    beginning = self.begin
    ending = self.end
    i = beginning
    loop do
      break if i == ending
      yield i
      i = i.succ
    end
  end
end
</code></pre>
<p>And here is the change in performance - 2 seconds slower than <code>times</code> - not bad!</p>
<table>
<thead>
<tr>
<th>				
</th>
<th>
Time spent
</th>
</tr>
</thead>
<tbody>
<tr>
<td>Range#each in C</td>
<td>25.57s</td>
</tr>
<tr>
<td>Range#each in Ruby</td>
<td>16.64s</td>
</tr>
</tbody>
</table>
<p>This is obviously over-simplified. I don’t handle all of the different cases of <code>Range</code>, and there may be nuances I am missing. Also, most of the Ruby rewritten methods I’ve seen invoke a <code>Primitive</code> class for certain operations. I’d love to learn more about when and why it’s needed.</p>
<p>But! It goes to show the power of moving things <em>out</em> of C and letting YJIT optimize our code. It can improve performance in ways that would be difficult or impossible to replicate in regular C code.</p>
<h3 id="yjit-standard-library">YJIT standard library</h3>
<p>Last year Aaron Patterson wrote an article called <a href="https://railsatscale.com/2023-08-29-ruby-outperforms-c/">Ruby Outperforms C</a>, in which he rewrote a C extension in Ruby for some GraphQL parsing. The Ruby code outperformed C thanks to YJIT optimizations.</p>
<p>This got me thinking that it would be interesting to see a kind of “YJIT standard library” emerge, where core ruby functionality run in C could be swapped out for Ruby implementations for use by people using YJIT.</p>
<p>As it turns out, this is almost exactly what the core YJIT team has been doing. In many cases they’ve completely removed C code, but more recently they’ve created a <code>with_yjit</code> block. The code will only take effect if YJIT is enabled, and otherwise the C code will run. For example, this is how<code>Array#each</code> is implemented:</p>
<pre><code>with_yjit do
  if Primitive.rb_builtin_basic_definition_p(:each)
    undef :each

    def each # :nodoc:
      # ... we examined this code earlier ...
    end
  end
end
</code></pre>
<p>As of Ruby 3.3, YJIT can be lazily initialized. Thankfully the <code>with_yjit</code> code handles this - the appropriate <code>with_yjit</code> versions of methods will be run once YJIT is enabled:</p>
<pre><code># Uses C-builtin
[1, 2, 3].each do |i|
  puts i
end

RubyVM::YJIT.enable

# Uses Ruby version, which can be YJIT optimized
[1, 2, 3].each do |i|
  puts i
end
</code></pre>
<p>This is because <code>with_yjit</code> is a YJIT “hook”, which is called the moment YJIT is enabled. After being called, it is removed from the runtime using <code>undef :with_yjit</code>.</p>
<h3 id="investigating-yjit-optimizations">Investigating YJIT optimizations</h3>
<p>We’ve looked at Ruby code. We’ve looked at C code. We’ve looked at Ruby VM bytecode. Why not take it one step deeper and look at some <em>machine code</em>? And maybe some Rust code? Hey - where are you going! Don’t walk away while I’m talking to you!</p>
<p>If you <em>haven’t</em> walked away, or skipped to the next section, let’s take a look at a small sliver of YJIT while we’re here!</p>
<p>We can see the machine code YJIT generates 😱. It’s possible by building CRuby from source with YJIT debug flags. If you’re on a Mac you can see <a href="https://jpcamara.com/2024/12/02/my-macos-setup.html">my MacOS setup for hacking on CRuby</a> or <a href="https://jpcamara.com/2024/11/27/my-docker-setup.html">my docker setup for hacking on CRuby</a> for more elaborate instructions on building Ruby. But the simplified step is when you go to <code>./configure</code> Ruby, you hand in an option of <code>--enable-yjit=dev</code>:</p>
<pre><code>./configure --enable-yjit=dev
make install
</code></pre>
<p>Let’s use our <code>Integer#times</code> example from earlier as our example Ruby code:</p>
<div><pre tabindex="0"><code data-lang="ruby">u <span>=</span> <span>ARGV</span><span>[</span><span>0</span><span>].</span>to_i
r <span>=</span> rand(<span>10_000</span>)
a <span>=</span> Array<span>.</span>new(<span>10_000</span>, <span>0</span>)
	
<span>10_000</span><span>.</span>times <span>do</span> <span>|</span>i<span>|</span>
  <span>100_000</span><span>.</span>times <span>do</span> <span>|</span>j<span>|</span>
    a<span>[</span>i<span>]</span> <span>+=</span> j <span>%</span> u
  <span>end</span>
  a<span>[</span>i<span>]</span> <span>+=</span> r
<span>end</span>
	
puts a<span>[</span>r<span>]</span>
</code></pre></div><p>Because you’ve built Ruby with YJIT in dev mode, you can hand in the <code>--yjit-dump-disasm</code> flag when running your ruby program:</p>
<pre><code>./ruby --yjit --yjit-dump-disasm test.rb 40
</code></pre>
<p>Using this, we can see the machine code created. We’ll just focus in on one tiny part - the machine code equivalent of the Ruby VM bytecode we read earlier. Here is the original VM bytecode for <code>opt_succ</code>, which is generated when you call <code>i.succ</code>, the <code>Integer#succ</code> method:</p>
<pre><code>...
0027 opt_succ        &lt;calldata!mid:succ, ARGS_SIMPLE&gt;[CcCr]
...
</code></pre>
<p>And here is the machine code YJIT generates in this scenario, on my Mac M2 arm64 architecture:</p>
<pre><code># Block: times@&lt;internal:numeric&gt;:259 
# reg_mapping: [Some(Stack(0)), None, None, None, None]
# Insn: 0027 opt_succ (stack_size: 1)
# call to Integer#succ
# guard object is fixnum
0x1096808c4: tst x1, #1
0x1096808c8: b.eq #0x109683014
0x1096808cc: nop 
0x1096808d0: nop 
0x1096808d4: nop 
0x1096808d8: nop 
0x1096808dc: nop 
# Integer#succ
0x1096808e0: adds x11, x1, #2
0x1096808e4: b.vs #0x109683048
0x1096808e8: mov x1, x11
</code></pre>
<p>To be honest, I about 25% understand this, and 75% am combining my own logic and AI to learn it 🤫. Feel free to yell at me if I get it a little wrong, I’d love to learn more. But here’s how I break this down.</p>
<pre><code># Block: times@&lt;internal:numeric&gt;:259
</code></pre>
<p>👆🏼This roughly corresponds to the line <code>i = i.succ</code> in the <code>Integer#times</code> method in <code>numeric.rb</code>. I say roughly because in my current code I see that on line 258, but maybe it shows the end of the block it’s run in since YJIT compiles “blocks” of code:</p>
<pre><code>256: while i &lt; self
257:   yield i
258:   i = i.succ
259: end

# reg_mapping: [Some(Stack(0)), None, None, None, None]
# Insn: 0027 opt_succ (stack_size: 1)
# call to Integer#succ
</code></pre>
<p>👆🏼I have no idea what <code>reg_mapping</code> means - probably mapping how it uses a CPU register? <code>Insn: 0027 opt_succ</code> looks very familiar! That’s our VM bytecode! <code>call to Integer#succ</code> is just a helpful comment added. YJIT is capable of adding comments to the machine code. We still haven’t even left the safety of the comments 😅.</p>
<pre><code># guard object is fixnum
</code></pre>
<p>👆🏼This is interesting. I can find a corresponding bit of Rust code that maps directly to this. Let’s take a look at it:</p>
<pre><code>fn jit_rb_int_succ(
  //...
  asm: &amp;mut Assembler,
  //...
) -&gt; bool {
  // Guard the receiver is fixnum
  let recv_type = asm.ctx.get_opnd_type(StackOpnd(0));
  let recv = asm.stack_pop(1);
  if recv_type != Type::Fixnum {
    asm_comment!(asm, "guard object is fixnum");
    asm.test(recv, Opnd::Imm(RUBY_FIXNUM_FLAG as i64));
         asm.jz(Target::side_exit(Counter::opt_succ_not_fixnum));
  }

  asm_comment!(asm, "Integer#succ");
  let out_val = asm.add(recv, Opnd::Imm(2)); // 2 is untagged Fixnum 1
  asm.jo(Target::side_exit(Counter::opt_succ_overflow));

  // Push the output onto the stack
  let dst = asm.stack_push(Type::Fixnum);
  asm.mov(dst, out_val);

  true
}
</code></pre>
<p>Oh nice! This is the actual YJIT Rust implementation of the <code>opt_succ</code> call. This is that optimization <a href="https://bsky.app/profile/k0kubun.com">@k0kobun</a> made to further improve <code>opt_succ</code> performance beyond the bytecode C function calls. We’re in the section that is checking if what we’re operating on is a Fixnum, which is a way small integers are stored internally in CRuby:</p>
<pre><code>if recv_type != TypeFixnum 
  asm_comment!(asm, "guard object is fixnum");
  asm.test(recv, Opnd::Imm(RUBY_FIXNUM_FLAG as i64));
  asm.jz(Target::side_exit(Counter::opt_succ_not_fixnum));
}
</code></pre>
<p>That becomes this machine code:</p>
<pre><code># guard object is fixnum
0x1096808c4: tst x1, #1
0x1096808c8: b.eq #0x109683014
</code></pre>
<p><code>asm.test</code> generates <code>tst x1, #1</code>, which according to an AI bot I asked is checking the least significant bit, which is a Fixnum “tag” that indicates this is a Fixnum. If it’s Fixnum, the result is 1 and <code>b.eq</code> is false. If it’s not a Fixnum, the result is <code>0</code> and <code>b.eq</code> is true and jumps away from this code.</p>
<pre><code>0x1096808cc: nop 
0x1096808d0: nop 
0x1096808d4: nop 
0x1096808d8: nop 
0x1096808dc: nop 
</code></pre>
<p>🤖 “NOPs for alignment/padding”. Thanks AI. I don’t know why it is needed, but at least I know what it probably is.</p>
<p>Finally, we <em>actually</em> add 1 to the number.</p>
<pre><code>asm_comment!(asm, "Integer#succ");
let out_val = asm.add(recv, Opnd::Imm(2)); // 2 is untagged Fixnum 1
asm.jo(Target::side_exit(Counter::opt_succ_overflow));

// Push the output onto the stack
let dst = asm.stack_push(Type::Fixnum);
asm.mov(dst, out_val);
</code></pre>
<p>The Rust code generates our <code>Integer#succ</code> comment. Then, to add 1, because of the “Fixnum tag” data embedded within our integer, actually means we have to add 2 using <code>adds x11, x1, #2</code> 😵‍💫. If we overflow the space available, it exits to a different code path - <code>b.vs</code> is a branch on overflow. Otherwise, it stores the result with <code>mov x1, x11</code>!</p>
<pre><code># Integer#succ
0x1096808e0: adds x11, x1, #2
0x1096808e4: b.vs #0x109683048
0x1096808e8: mov x1, x11
</code></pre>
<p>😮‍💨. That was a lot. And it seems like <em>alot</em> of working is being done, but because it’s such low level machine code it’s presumably super fast. We examined a teensy tiny portion of what YJIT is capable of generating - JITs are complicated!</p>
<p>Thanks to <a href="https://bsky.app/profile/k0kubun.com">@k0kobun</a> for providing me with the commands and pointing me at the <a href="https://github.com/ruby/ruby/blob/master/doc/yjit/yjit.md">YJIT docs</a> which contain tons of additional options as well.</p>
<h3 id="the-future-of-cruby-optimizations">The future of CRuby optimizations</h3>
<p>The irony of language implementation is that you often work less in the language you’re implementing than you do in something lower-level - in Ruby’s case, that’s mostly C and some Rust.</p>
<p>With a layer like YJIT, it potentially opens up a future where more of the language becomes plain Ruby, and Ruby developer contribution is easier. Many languages have a smaller low level core, and the majority of the language is written in itself (like Java, for instance). Maybe that’s a future for CRuby, someday! Until then, keep the YJIT optimizations coming, YJIT team!</p>


<section role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Naive in this case meaning that there are more efficient ways to calculate fibonacci numbers in a program&nbsp;<a href="#fnref:1" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>MJIT, the precursor to YJIT, made Ruby much faster on certain benchmarks. But on large realistic Rails applications it actually <a href="https://bugs.ruby-lang.org/issues/14490">made things <em>slower</em></a>&nbsp;<a href="#fnref:2" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>When C code is running, it has to opt-in to releasing the GVL, so it’s more difficult for threads to corrupt or modify data mid-operation. The original Ruby version could yield the GVL at points that would invalidate the array. That’s my understanding of the situation anyways.&nbsp;<a href="#fnref:3" role="doc-backlink">↩︎</a></p>
</li>
</ol>
</section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to grow professional relationships (341 pts)]]></title>
            <link>https://tej.as/blog/how-to-grow-professional-relationships-tjs-model</link>
            <guid>42315946</guid>
            <pubDate>Wed, 04 Dec 2024 09:42:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tej.as/blog/how-to-grow-professional-relationships-tjs-model">https://tej.as/blog/how-to-grow-professional-relationships-tjs-model</a>, See on <a href="https://news.ycombinator.com/item?id=42315946">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <p>Over my career, I’ve had the opportunity to get to know some of the world’s <a href="https://x.com/TejasKumar_/status/1862048032973324369">most</a> <a href="https://x.com/DavidKPiano">incredible</a> <a href="https://x.com/swyx">builders</a>. This same career has also seen quite a significant amount of gatekeeping: various <code>(m|b)</code>illionaire boys clubs and cliques have made it quite clear that they’d prefer to keep their world small and exclusive, and that there’s no room at their table. To each their own, but this dynamic has led to some thinking and reflection around the nature of professional relationships, friendships, and identity—ultimately resulting in what I’m calling <strong>TJS (The Journey to Synergy)</strong> Collaboration Model.</p>
<p><img src="https://tej.as/_astro/tjs.Dlc-SqUb_z1FF9.svg" alt="The TJS Collaboration Model" width="1775" height="801" loading="lazy" decoding="async"></p>
<p>This spectrum is how I measure professional relationships and where I stand in those relationships. It outlines seven states moving from a competitive, zero-sum mindset to one of shared identity (which is equally problematic).</p>
<p>Let’s briefly understand each state. One way we can make this information really practical is to understand it in context. A great illustrative context for this is <a href="https://tej.as/podcast">my podcast</a>, because it requires regularly interacting with people that inevitably reveals where we land on this spectrum.</p>
<h2 id="states-of-the-tjs-collaboration-model">States of the TJS Collaboration Model</h2>
<p>The TJS collaboration model is made up of the following seven distinct states.</p>
<ol>
<li>
<p><strong>Everything is a competition</strong>: in this initial state, interactions are characterized by <strong>gatekeeping and a zero-sum mentality</strong>: the idea that <em>for one party to eat, the other must starve</em>. People are not willing to share information, resources, or opportunities. There’s usually discrimination and exclusionary behavior here, either from racism, sexism, xenophobia, etc. I tend to not spend too much time with parties that hold this perspective.</p>
<p>In the context of the podcast, this is usually characterized not by rejection but instead by outright refusal to participate in any interaction whatsoever: what some call <a href="https://en.wikipedia.org/wiki/Ghosting_(behavior)#:~:text=Ghosting%2C%20simmering%20and%20icing%20are,any%20subsequent%20attempts%20to%20communicate.">“ghosting”</a>. I’m not entirely sure if they leave read receipts on to make their point, but I’ve found this behavior to be a pretty good indicator of where we stand on this spectrum. Of course, there are those that simply don’t receive any notifications and have read receipts turned off: these folks are likely not in this state and are just as busy as the rest of us.</p>
<p>Also in the context of the podcast, I’ve had guests accept an invitation and then later decline closer to the time of recording because they got invited to go on <a href="https://x.com/lexfridman">Lex Fridman</a> and mention “thanks for the invite, but now I don’t need this anymore”. There is no judgment at all here, but such behavior indicates where on this spectrum these relationships stand.</p>
</li>
<li>
<p><strong>Coexist</strong>: parties acknowledge each other’s existence but maintain minimal interaction, summarized as “I know <em>of</em> them, but we don’t really talk”. This is usually characterized by mutual respect, but a general distancing for myriad reasons that might include:</p>
<ul>
<li>
<p><strong>Personal differences</strong>: people might not get along personally, and while they may respect each other, they choose to maintain a distance. Ultimately, human beings are more or less big bundles of chemicals with legs. When chemicals interact, there’s usually a reaction: sometimes positive <code>(2H₂ + O₂ → 2H₂O)</code>, sometimes negative <code>(SO₃ + H₂O → H₂SO₄)</code>. This is usually natural and nothing personal.</p>
</li>
<li>
<p><strong>Professional differences</strong>: people may have different professional goals or values, which can lead to a lack of shared interests or collaboration. Some might want to be influencers, some might want to be builders, some might want to be investors—they pick the right relationships to be in for them at the time.</p>
</li>
<li>
<p><strong>Values differences</strong>: people may have different values that lead them to invest in different relationships. Some might value emotionality highly, leading them to be friends with other emotional people; others might value logic and reason, leading them to be friends with other logical people. Some might value money, leading them to be friends with other wealthy people, etc.</p>
</li>
</ul>
<p>In the context of the podcast, I’ve experienced folks who are aware it exists and even talk about it, but have never expressed interest in being a guest on it. I too have not extended invites here because we’re both in the same state of the spectrum. There’s nothing wrong with this: instead it’s kind of beautiful that both parties clearly understand where the other one stands on this spectrum and can move without any drama. It also doesn’t exclude the relationship from ever progressing and is usually just a matter of time before it does.</p>
</li>
<li>
<p><strong>Communicate</strong>: basic information exchange occurs, where either party would describe the other as “we spoke about something once” but the relationship doesn’t progress much further for similar reasons as above.</p>
<p>In the context of the podcast, this is where a conversation eventually leads to <em>“yeah, let’s do it”</em>, and then nothing ever happens, or an event is scheduled but has not yet taken place. Communication has happened, positive communication even, but—specifically in the case of the podcast—we have not yet cooperated on anything.</p>
<p>This is where the vast majority of western relationships live: a “comfortable distance” of sorts. We see traits of this outside a professional context as well, where shallow friends will talk and say <em>“let’s get coffee some time!”</em>, but then never actually follow up. Perhaps even worse, people in this state often make plans and then cancel at the last minute because it’s simply not convenient.</p>
<p>It’s pretty remarkable that this state is quite prominent in western culture and less so in other parts of the world as eloquently highlighted by my former <a href="https://x.com/TejasKumar_/status/1384524632263471106">Spotify</a> colleague <a href="https://x.com/orkohunter">Himanshu</a> in his <a href="https://orkohunter.net/blog/why-dont-you-move-abroad/">blog post about moving back to India</a>.</p>
</li>
<li>
<p><strong>Cooperate</strong>: parties participate in a neutral task together, where they’re both contributing to the same goal. The stakes are usually low, and the relationship is still mostly transactional.</p>
<p>A great experiential example of this from my career is when I’ve spoken at conferences with some folks who I’ve heard of but haven’t really developed much rapport with. The relationship is cordial, but not much else. How this low-stakes cooperation goes strongly influences next states: from here, either party can choose to remain in earlier states, or progress to the next state, <strong>Coordinate</strong>, based on how well they were able to work together (as popular culture calls it, <em>“the vibezzz”</em>).</p>
<p>In the context of the podcast, this is where we actually spend time in conversation together on an episode: both parties are contributing to the same goal, cooperating with each other to meet it. It’s slightly less convenient than the previous state, but given the quality of the cooperation, leads to far better outcomes.</p>
</li>
<li>
<p><strong>Coordinate</strong>: at this stage, one or both parties take deliberate steps to coordinate their actions toward a goal that belongs to one of the parties. This goal is often “adopted” by the other, looking something like:</p>
<ul>
<li>
<p><em>“we’re both going to be at this conference a day earlier, shall we go explore the city together?”</em> — one person’s goal of exploration is adopted by the other.</p>
</li>
<li>
<p><em>”I see you’re <a href="https://x.com/kentcdodds/status/1861808243590549572">working on a new course</a>—shall I do a <a href="https://x.com/TejasKumar_/status/1845140333933322311">giveaway</a> on my podcast when you launch?”</em> — one person’s goal of promoting their course is adopted by the other.</p>
</li>
</ul>
<p>Both of these cases are coordinated efforts. Though the latter is a more advanced state of coordination, the main gist here is that one or both parties take deliberate steps to coordinate their actions to achieve a newly shared goal: to support each other.</p>
<p>Either party can make the first move, and this tends to be a pretty chaotic space because it calls into question a number of topics like motivation, trust, and alignment. The party that makes the first move risks the other one thinking they’re being too aggressive, pushy, or plain weird.</p>
<p>They also risk the other party questioning their motivations:</p>
<ul>
<li>
<p><em>“Why is this person offering to amplify my course launch?"</em></p>
</li>
<li>
<p><em>"Why do they want to explore the city together?"</em></p>
</li>
<li>
<p><em>"What’s the catch?"</em></p>
</li>
<li>
<p><em>"Will I owe them a favor later?”</em></p>
</li>
</ul>
<p>The coordination state is usually perceived as risky—though empirical evidence proves it is not because <strong>people are on average more good than evil</strong> according to research from the lab of <a href="https://psychology.stanford.edu/people/jamil-zaki">Dr. Jamil Zaki</a> at Stanford University’s Department of Psychology, where they have demonstrated that <a href="https://www.youtube.com/watch?v=M7aUF3hi_8Q">coordinated efforts can lead to increased trust, motivation, and even happiness</a>.</p>
<p>Coordination is typically an inflection point in the relationship, as referenced in the diagram. If people have not spent enough time in previous states, this state usually will not work. If there were intense positive vibes in previous states, this will feel natural and seamless. Ultimately, both parties grow synergistically from coordinated efforts while working on entirely separate but complementary topics.</p>
<p>Folks that I’ve coordinated well with include:</p>
<ul>
<li>
<p><strong><a href="https://x.com/kentcdodds">Kent C. Dodds</a></strong> on deprecating his library <a href="https://github.com/paypal/glamorous">glamorous</a> in favor of <a href="https://github.com/emotion-js/emotion">emotion</a>: we built <em>separate things</em> that were complementary and coordinated on them together.</p>
</li>
<li>
<p><strong><a href="https://x.com/Aymen_Ben_Amor">Aymen Ben Amor</a></strong>, <strong><a href="https://x.com/theclarksell">Clark Sell</a></strong>, and <strong><a href="https://x.com/joshuakgoldberg">Josh Goldberg</a></strong> on <a href="https://tej.as/podcast/tell-me-about-that-conference">supporting their conferences via the podcast</a>: they were building a conference, I was building a podcast, and we coordinated on promoting the conference together (I adopted their goal of promoting the conference).</p>
</li>
<li>
<p><strong><a href="https://x.com/alexnmoldovan">Alex Moldovan</a></strong> who runs <a href="https://jsheroes.io/">JS Heroes</a> and has me as an ambassador: he creates the conference and coordinates with a set of ambassadors. We do not <em>create the conference</em> together. If we did, this would be the next step—<strong>Collaboration</strong>.</p>
</li>
</ul>
</li>
<li>
<p><strong>Collaborate</strong>: something beautiful happens when two or more people repeatedly execute successful coordinated efforts: there is a common recognition of high-quality synergy; that together, they are greater than the sum of their parts and they can continually share joy in their work. Collaboration is not when people coordinate efforts on building separate things that are complementary, but instead when they <strong>build the same thing together</strong>.</p>
<p>I’ve had the privilege of collaborating with a number of great folks over my career. If I was to start a company, go to war, or happen to be in a zombie apocalypse, I’d want these folks by my side. At this stage, all parties have established a high level of trust and understanding of each other. They understand boundaries and each other’s value systems extremely well. They are able to push boundaries and challenge ideas respectfully, with grace, without ego, at the right time and in the right circumstance.</p>
<p>Folks that I’ve had and continue to have excellent collaboration with include:</p>
<ul>
<li>
<p><strong><a href="https://x.com/fabien0102">Fabien Bernard</a></strong> and <strong><a href="https://x.com/mpotomin">Mikhail Potomin</a></strong>, where we built some software that was cool at the time but is now obsolete. Specifically,</p>
<ul>
<li>
<p><strong><a href="https://github.com/contiamo/restful-react">Restful React</a></strong>: a RESTful data layer for React applications that had a fully type-safe interface for working with REST APIs predictably.</p>
</li>
<li>
<p><strong><a href="https://github.com/contiamo/operational-ui">Operational UI</a></strong>: a React component library whose documentation had interactive <a href="https://microsoft.github.io/monaco-editor/">Monaco Editor</a> playgrounds with IntelliSense for TypeScript autocompletion <em>in the browser</em>. I did a talk about this at <a href="https://www.youtube.com/watch?v=ZsBW4S8hYMU">React Finland</a> in 2019 where I first met</p>
</li>
</ul>
</li>
<li>
<p><strong><a href="https://x.com/davidkpiano">David Khourshid</a></strong> and <strong><a href="https://x.com/jen_ayy_">Jenny Truong</a></strong>, where we built their wedding ceremony together where I was the officiant. This is a collaboration and not a coordination because we built the same thing (a wedding ceremony) together, instead of coordinating on building separate things that are complementary.</p>
</li>
<li>
<p><strong><a href="https://x.com/danieljcafonso">Daniel Afonso</a></strong>, <strong><a href="https://x.com/sergiikirianov">Sergii Kirianov</a></strong>, <strong><a href="https://x.com/ythecombinator">Matheus Albuquerque</a></strong>, <strong><a href="https://x.com/acemarke">Mark Erikson</a></strong>, <strong><a href="https://x.com/rickhanlonii">Rick Hanlon II</a></strong>, and more where we built my book <a href="https://www.amazon.com/Fluent-React-Performant-Intuitive-Applications/dp/1098138716/ref=sr_1_1?dib=eyJ2IjoiMSJ9.eigFqxPBQ8MG8Reub4v6d26VACrOAWNNB4flZUD6j_lArvmiIuT-RzRq5-7vyhvJd3ZruoaI9ZRp_I3r3-a5SNuGE_MAKaNluhRqBfjh6FQ.JAAVgZuJ8Rxht6r7T-dw4pSLd6FOIt8ckVtmo5QIHZ4&amp;dib_tag=se&amp;keywords=fluent+react&amp;qid=1732797223&amp;sr=8-1">Fluent React</a> together. I may have authored the book, but it was a strong collaborative effort where they reviewed it and continued to provide high-quality feedback until it was ready for publication. It was <em>one thing</em> that we all built together: a collaboration.</p>
</li>
</ul>
<p>I don’t yet build the podcast with anyone, but I’m open to it.</p>
</li>
<li>
<p><strong>We are the same</strong>: the final state represents a shared identity and enmeshment, which is <strong>not a positive state</strong>. Keeping with the old adage of “too much of a good thing is a bad thing”, this is a state where parties are co-dependent and enmeshed, where one or more members unhealthily depend on the other. There is a dissolution of individuality, a loss of identity and boundaries: this is a toxic state. <strong>In this state, we find and experience burnout.</strong></p>
<p>It’s easy to exploit this state and take advantage of one or more members. Ownership over collaborative efforts is also disputed in this state, and it’s not uncommon to see folks take credit for things that they didn’t do, or to see people step down from collaborative efforts because they feel they’re not being valued.</p>
<p>Attempts to reach ideal and healthy levels of collaboration often go wrong and end up here, usually by employers using toxic positivity and platitudes like <em>“we’re a startup family”</em>. You may recognize you’re in this state by several key warning signs:</p>
<ul>
<li>
<p><strong>Loss of Personal Identity</strong>: inability to develop or maintain a strong sense of self, only being able to describe yourself in relation to others, being uncomfortable taking credit for your own good work, and difficulty knowing your own wants and needs.</p>
</li>
<li>
<p><strong>Difficulty Making Independent Decisions</strong>: struggling to make choices without consulting others, feeling unable to function independently, anxious overthinking, and constantly seeking approval before taking action.</p>
</li>
<li>
<p><strong>Lack of Boundaries</strong>: having trouble saying “no,” allowing others to invade your privacy, and being unable to separate your emotions from those of others.</p>
</li>
</ul>
<p>I’ve fallen into this state a few times for very short periods and what has helped me get out of it is to redevelop <strong>my identity alone</strong> as a separate and beautiful thing from really any other party. That and separation from the problematic party. The combination of rediscovering self-identity, establishing healthy boundaries, separation, and working with a board-certified therapist is something that can be helpful for folks that find themselves in this state.</p>
<p>Ideally, we learn to recognize quality collaboration as the peak of synergy and protect against this state. I am thankful to rarely if ever find myself here and take strong measures to avoid it. If you’re in this state, it is my hope that this diagram and post will help you understand where you are and how to move forward. Keep reading for some actionable steps you can take to move your relationships forward.</p>
</li>
</ol>
<h2 id="making-it-practical">Making it Practical</h2>
<p>Take a moment to think about where your relationships stand on this spectrum. It’s a great exercise to help you understand where you are and where you want to be. I’ve already mentioned a few of my own excellent collaborators and folks with whom I coordinate well—who are yours? Who can you credit? For real, scroll up, copy the image, place it beside you, and ponder it closely.</p>
<p>Who are folks that you coexist with? Why? Who gatekeeps and excludes you? Who would you build a company with? I’d encourage carefully considering the answers to these questions and even copying the graph and placing avatars along its axis to help you visualize the status of your relationships. From there, you can start to take action to move relationships to where you want them to be, ultimately bringing your social setting into alignment with your goals and values.</p>
<p>Should you decide you’d like to move some relationships forward, here are some actionable pathways you can take.</p>
<h2 id="moving-relationships-forward">Moving Relationships Forward</h2>
<p>There’s plenty of evidence that shows that we’re at our worst when we are exclusionary and <em>zero-sum</em>. The inverse is also true: we are at our best when we are collaborating well with others. For example, <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4360764/">this paper</a> has two key ideas that I think are worth repeating here:</p>
<p>Working in isolation creates significant limitations:</p>
<ol>
<li>It creates a <strong>false sense of security</strong> because ideas are not likely to be challenged.</li>
<li>It results in work that <strong>will not reach as wide an audience</strong>.</li>
<li>It <strong>wastes limited resources</strong> through duplicated efforts.</li>
</ol>
<p>The paper also states that:</p>
<blockquote>
<p>The benefits of collaboration allow participants to achieve together more than they can individually, serve larger groups of people, and grow on individual and organizational levels.</p>
</blockquote>
<p>With this, we can see that <strong>collaboration is not just a nice-to-have but a necessity</strong>. It’s not just about getting along with others, but about building greater things together. Should you decide to move some relationships forward, here’s what has worked well for me:</p>
<ol>
<li>
<p><strong>Cultivate an abundance mindset</strong>: not virtue signaling, but I often <a href="https://x.com/Beccalytics/status/1858935386757886175">give away money</a> and time to folks. People question this from time to time and ultimately, the answer I end up giving is that <strong>there is so much to go around</strong>. The world is abundant and not zero-sum. I intentionally let people take advantage of me because I know I’ll recover whatever I need in another way. If you pour your entire bucket into others, it may become empty but it will never <em>stay empty</em>: it has rained on this planet since the beginning of time on rich and poor alike, and it will continue to rain. <strong>The rain will fill your bucket again.</strong></p>
<p>To cultivate this mindset, these practical steps from <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10039809/">these</a> <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10794476/">scientific</a> <a href="https://www.researchgate.net/publication/236137739_Volunteering_Predicts_Health_Among_Those_Who_Value_Others_Two_National_Studies">papers</a> may help:</p>
<ul>
<li>
<p><strong>Start Small</strong>: begin with micro-giving. Allocate a small percentage of your resources to deliberately give away. I do 10%, but you can start with 5% and see how it feels. Another useful habit is to practice random acts of kindness daily, whenever convient.</p>
</li>
<li>
<p><strong>Build Social Connections</strong>: join giving circles, participate in community service, and create giving networks. This is a great way to meet like-minded people and cultivate relationships. It’s like <em>“scarcity mindsets anonymous”</em>: a rehab group for those that suffer with scarcity mindset. Cooperate and collaborate with each other to achieve goals that are greater than the sum of your parts.</p>
</li>
<li>
<p><strong>Mindfulness Practice</strong>: daily gratitude journaling, abundance visualization, and regular meditation focusing on interconnectedness have all been scientifically proven (papers above) to help shift your mindset towards abundance.</p>
</li>
<li>
<p><strong>Track Impact</strong>: keep a “giving diary” to document your positive outcomes and ripple effects. This can help you remember to do it again and track your personal growth.</p>
</li>
</ul>
</li>
<li>
<p><strong>Abandon lost causes</strong>: people have literally blocked me on social media, ghosted me, or outright said “there’s no room for you at this table”. Anti-foreigner folks have physically attacked me and mentioned “go home” (to your country) in Germany, where I am a tax-paying permanent resident.</p>
<p>A lesson I learned from reading <a href="https://www.amazon.com.mx/Models-Attract-Women-Through-Honesty/dp/1463750358">Mark Manson’s “Models”</a> as an awkward stupid teenager who wanted to get girls is that the world is an abundant one full of all kinds of people: some who shun us, others who love us. When someone reveals that there’s no room for a relationship, they do us a huge favor and free us up to go pursue others who are open to it. I’ve seen great success in quickly being thankful for the data and moving on.</p>
</li>
<li>
<p><strong>Love your neighbor as yourself</strong>: I really love myself well. I feed myself good food, I give myself good exercise, I make money to invest in myself. I’ve seen enormous value and joy in extending the same love to others, beyond just one’s physical neighbor. It would be strange of me to expect something in return from myself as I take care of myself. When I treat people the way I want to be treated—and honor them appropriately, <strong>giving expecting nothing in return</strong>, there usually ends up being quite a wonderful return that leads to quality collaboration.</p>
<p>Obviously this isn’t <em>every time</em>, but the few times it works is worth all the times it doesn’t. It does open you up to abuse and being taken advantage of, but the few times it has worked for me heavily outweighs the times it hasn’t. I’d recommend reading <a href="https://www.amazon.com/Hope-Cynics-Surprising-Science-Goodness/dp/B0D5SD8W2B/ref=sr_1_1?dib=eyJ2IjoiMSJ9.YGSiHm0vKfPnGGrkfEHzjo81gfFIgxL-9JYZ3wynncT9hkigUoOdVe5Xf7co4vmVoA67pcbuC0blFH61PwRXw-jsQYC2X4Tmt7MvGdhEs1ew59RSDe-NSq2RvklLU_ZKA0xljACwL2T2dUUYYhzVow.6TyURxQ4Lkcxjo6baEUiRI0cpgny4R5Bay4IUE9Hu0k&amp;dib_tag=se&amp;keywords=hope+for+cynics&amp;qid=1732808871&amp;sr=8-1">Hope for Cynics</a> by the aforementioned Dr. Jamil Zaki for more on this topic.</p>
</li>
<li>
<p><strong>Sweat the details</strong>: we live in an age where we’re constantly bombarded by random nonsense vying for our attention. Conforming to the pattern of this world, it’s fairly common to respond to folks with low-effort communication.</p>
<ul>
<li><em>”sup"</em></li>
<li><a href="https://x.com/TejasKumar_/status/1747176544433230198"><em>"lgtm"</em></a></li>
<li><em>"sounds good”</em></li>
</ul>
<p>This is characteristic of the <strong>communicate</strong> state in our diagram.</p>
<p>Every single time a relationship has moved forward for me has been when <strong>I cared. A lot.</strong> It has been when folks have mentioned something that’s stressing them out and I listened. It has been when I followed up with them about it weeks later. It has been when my people and I have <strong>shown up and done the work</strong> that puts them at ease or actively invests in their goals—when we don’t conform to the pattern of the world, but instead transform our behavior to align closer to our values.</p>
<p>To circle back, <strong>coordination happens when one party adopts the goal of the other and takes initiative to support it</strong>. Sweating the details and doing the work, even at a cost to ourselves, is a great way to move from cooperation to coordination. When there are repeatedly successful coordinated efforts, the relationship will naturally progress to collaboration.</p>
</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>If you’ve made it this far, I hope you’ve found this useful. I also hope that you have actually <em>done the exercise</em> (and cooperated with me) to identify the current state of your relationships and feel empowered to move the ones that you’d like to forward.</p>
<p>If you’d like to join a <strong>coordinated</strong> effort to bring this information to more people, you can do so in the following ways:</p>
<ul>
<li>Share this post on social media however/wherever you want.</li>
<li>Share your version of the graph above with avatars superimposed on it with your collaborators and others.</li>
<li>Share your thoughts about this text with me on <a href="https://x.com/tejaskumar_">𝕏</a> or other platforms.</li>
</ul>
<p>If you’d like to <strong>collaborate</strong> on this post or its ideas, some great ways to do so are:</p>
<ul>
<li>Translate it into other languages to make it more accessible to more people.</li>
<li>Suggest typo fixes and studies to include.</li>
<li>Fact check and suggest removal of any inaccuracies.</li>
</ul>
<p>Notice how for <strong>collaboration</strong>, we’re working on the same thing (this post) together, and for <strong>coordination</strong> you’re creating separate things that are complementary? Okay, I think I’ve made my point.</p>
<p>Goodbye.</p> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why America's economy is soaring ahead of its rivals (230 pts)]]></title>
            <link>https://www.ft.com/content/1201f834-6407-4bb5-ac9d-18496ec2948b</link>
            <guid>42314797</guid>
            <pubDate>Wed, 04 Dec 2024 05:53:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ft.com/content/1201f834-6407-4bb5-ac9d-18496ec2948b">https://www.ft.com/content/1201f834-6407-4bb5-ac9d-18496ec2948b</a>, See on <a href="https://news.ycombinator.com/item?id=42314797">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><a data-trackable="a11y-skip-to-help" href="https://www.ft.com/accessibility">Accessibility help</a><a data-trackable="a11y-skip-to-navigation" href="#site-navigation">Skip to navigation</a><a data-trackable="a11y-skip-to-content" href="#site-content">Skip to content</a><a data-trackable="a11y-skip-to-footer" href="#site-footer">Skip to footer</a></p><div id="barrier-page"><div id="heroOffer-Hero offer-f9443aa4-795a-4bf5-8525-ee99e05b93a4" data-component="heroOffer" data-component-unique-name="Hero offer"><div data-o-grid-colspan="12 L6"><p><span></span><span></span><span></span><span>Subscribe to unlock this article</span><span></span></p></div><div data-o-grid-colspan="12 L6"><p><h2><span>Try unlimited access</span></h2><h2><strong><span>Only </span><span>Skr10</span><span> for 4 weeks</span></strong></h2></p><p><span>Then </span><span>Skr739</span><span> per month.
Complete digital access to quality FT journalism on any device. 
Cancel anytime during your trial.</span></p></div></div><div id="recommendedOffers-Recommended offers-d039683e-d169-47ab-b84d-893ae968a297" data-component="recommendedOffers" data-component-unique-name="Recommended offers"><p><h2 data-o-grid-colspan="12">Explore more offers.</h2></p><div data-o-grid-colspan="12"><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_standard.svg?source=next-barrier-page&amp;format=svg" alt=""></p><p><h3>Standard Digital</h3></p></div><p><span>Skr479</span><span> per month</span></p><p><span>Essential digital access to quality FT journalism on any device. Pay a year upfront and save 20%.</span></p></div><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_premium.svg?source=next-barrier-page&amp;format=svg" alt=""></p></div><p><span>Skr739</span><span> per month</span></p><p><span>Complete digital access to quality FT journalism with expert analysis from industry leaders. Pay a year upfront and save 20%.</span></p></div><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_ftprofessional.svg?source=next-barrier-page&amp;format=svg" alt=""></p></div><p><span>Pay per reader</span></p><p><span>Complete digital access for organisations. Includes exclusive features and content.</span></p></div></div></div><div data-component="subscriptionOptions" data-component-unique-name="Subscription options"><h2>Explore our full range of subscriptions.</h2><div><div><p>Discover all the plans currently available in your country</p></div><div><p>Digital access for organisations. Includes exclusive features and content.</p></div></div></div><div data-component="whyFT" data-component-unique-name="Why FT"><div><h2>Why the FT?</h2><p>See why over a million readers pay to read the Financial Times.</p></div><p><a href="https://subs.ft.com/whytheft?ft-content-uuid=1201f834-6407-4bb5-ac9d-18496ec2948b">Find out why</a></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenTTD is an open source simulation game based upon Transport Tycoon Deluxe (303 pts)]]></title>
            <link>https://www.openttd.org/</link>
            <guid>42314700</guid>
            <pubDate>Wed, 04 Dec 2024 05:29:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.openttd.org/">https://www.openttd.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42314700">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
        <p>I was once the hottest new model on the street.
Newspapers heralded my arrival in every town.
The titans of industry were inspired to produce more goods when I visited their factories.</p>

<p>But as the years have passed, so do their eyes pass over me, to eye curiously my replacements.
Will you try the new style, ma’am?
It’s so much better than <em>that old thing</em>.</p>

<p>I’ve watched my friends grow old and die.
My brother got caught in traffic and caused a horrific level crossing collision.
I get sick more often, wheezing to a halt wherever I am.
When I visit the doctor for a spot of renewal, they tell me,
“Sorry, I can’t help. You’re too old.”
When will I be autoreplaced?</p>

<p>Woe is the tale of the Balogh Goods Truck.
But what if we could slow or pause the steady march of time?
In OpenTTD 14, you can.</p>



        
            <p><a href="https://www.openttd.org/news/2024/03/23/timekeeping.html">Read more</a></p>
        
        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[IMG_0001 (1593 pts)]]></title>
            <link>https://walzr.com/IMG_0001/</link>
            <guid>42314547</guid>
            <pubDate>Wed, 04 Dec 2024 04:46:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://walzr.com/IMG_0001/">https://walzr.com/IMG_0001/</a>, See on <a href="https://news.ycombinator.com/item?id=42314547">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Between 2009 and 2012, iPhones had a built-in "Send to YouTube" button in the Photos app. Many of these uploads kept their default IMG_XXXX filenames, creating a time capsule of raw, unedited moments from random lives. </p><p>Inspired by <a href="https://ben-mini.github.io/2024/img-0416" target="_blank">Ben Wallace</a>, I made a bot that crawled YouTube and found 5 million of these videos! Watch them below, ordered randomly.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A particle physics course for high-school students (238 pts)]]></title>
            <link>https://ppc.web.cern.ch/</link>
            <guid>42314340</guid>
            <pubDate>Wed, 04 Dec 2024 03:49:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ppc.web.cern.ch/">https://ppc.web.cern.ch/</a>, See on <a href="https://news.ycombinator.com/item?id=42314340">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      


<h2>About this Course</h2>



<p>This is the pilot version of a particle physics course for high-school students – a research-based product of CERN’s <a href="https://per.web.cern.ch/" target="_blank">Physics Education Research</a> team. It contains 16 chapters with videos and quizzes and covers a core curriculum that introduces you to fundamental questions, such as “What is a particle?” or “What are charges and interactions?”, leading to more applied questions, such as “What is a particle accelerator?” and “What is a particle detector?”.</p>

<ul>
	<li>The total length of the pilot version of the course videos is close to 4 hours.</li>
	<li>The course features instructions for DIY experiments that you can try out at home.</li>
	<li>You can complete chapters in any order you like, so feel free to jump around and explore the full content of the course!</li>
	<li>If you complete all chapters by answering the corresponding quiz questions correctly, you qualify for a digital certificate!</li>
</ul>

<p>In the future, we want to further develop this particle physics course. That’s why we have also included feedback questions for every chapter to collect your feedback on the content of the course and its design. <span>Indeed, we need you to tell us how to improve this course and which topics to add in the future! </span>Your feedback will, of course, be collected anonymously, and your responses will have no impact on your completion of the course! Here’s a trailer to give you an idea of what this course is all about:</p>

<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="615" src="https://www.youtube.com/embed/OjrycTZxG4M"></iframe></p>






<h2>Are you ready?</h2>

<p>We’re excited to get you started! To access the particle physics course, you just need to create a <a href="https://users-portal.web.cern.ch/guest-registration" target="_blank">CERN guest account</a>.</p>

<p><label for="myCheckOver16"> I am 16 years old or above. </label></p>



<p><label for="myCheckUnder16"> I am younger than 16 years. </label></p>



<p>Once you have created a CERN guest account:<br>
Step 1: <a href="https://ppc.web.cern.ch/user/login">Sign in</a><br>
Step 2: <a href="https://ppc.web.cern.ch/chapters-0">Start the Course!</a></p>





<!-- <div class="button-container"><button class="take-course-btn" id="takeCourseBtn">Start the Course!</button></div> -->



    </div></div>]]></description>
        </item>
    </channel>
</rss>