<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 05 Nov 2023 14:00:14 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Exclusive access for LLM companies to largest Chinese nonfiction book collection (154 pts)]]></title>
            <link>https://annas-blog.org/duxiu-exclusive.html</link>
            <guid>38149093</guid>
            <pubDate>Sun, 05 Nov 2023 07:30:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://annas-blog.org/duxiu-exclusive.html">https://annas-blog.org/duxiu-exclusive.html</a>, See on <a href="https://news.ycombinator.com/item?id=38149093">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
  <p>
    annas-blog.org, 2023-10-04, <a href="https://annas-blog.org/duxiu-exclusive-chinese.html">Chinese version 中文版</a>, <a href="https://news.ycombinator.com/item?id=38149093">Discuss on Hacker News</a>
  </p>

  <p>
    <em><strong>TL;DR:</strong> Anna’s Archive acquired a unique collection of 7.5 million / 350TB Chinese non-fiction books — larger than Library Genesis. We’re willing to give an LLM company exclusive access, in exchange for high-quality OCR and text extraction.</em>
  </p>

  <p>
    This is a short blog post. We’re looking for some company or institution to help us with OCR and text extraction for a massive collection we acquired, in exchange for exclusive early access. After the embargo period, we will of course release the entire collection.
  </p>

  <p>
    High-quality academic text is extremely useful for training of LLMs. While our collection is Chinese, this should be even useful for training English LLMs: models seem encode concepts and knowledge regardless of the source language.
  </p>

  <p>
    For this, text needs to be extracted from the scans. What does Anna’s Archive get out of it? Full-text search of the books for its users.
  </p>

  <p>
    Because our goals align with that of LLM developers, we’re looking for a collaborator. We’re willing to give you <strong>exclusive early access to this collection in bulk for 1 year</strong>, if you can do proper OCR and text extraction. If you’re willing to share the entire code of your pipeline with us, we’d be willing to embargo the collection for longer.
  </p>

  <h3>Example pages</h3>

  <p>
    To prove to us that you have a good pipeline, here are some example pages to get started on, from a book on superconductors. Your pipeline should properly handle math, tables, charts, footnotes, and so on.
  </p>

  <p><a href="https://annas-blog.org/duxiu-examples/1.jpg"><img src="https://annas-blog.org/duxiu-examples/1.jpg"></a>
    <a href="https://annas-blog.org/duxiu-examples/2.jpg"><img src="https://annas-blog.org/duxiu-examples/2.jpg"></a>
  </p>
  <p><a href="https://annas-blog.org/duxiu-examples/3.jpg"><img src="https://annas-blog.org/duxiu-examples/3.jpg"></a>
    <a href="https://annas-blog.org/duxiu-examples/4.jpg"><img src="https://annas-blog.org/duxiu-examples/4.jpg"></a>
  </p>

  <p>
    Send your processed pages to <a href="https://annas-blog.org/cdn-cgi/l/email-protection#c988a7a7a888bbaaa1a0bfa0babd89b9bba6bda6a7e7a4ac"><span data-cfemail="6928070708281b0a01001f001a1d29191b061d060747040c">[email&nbsp;protected]</span></a>. If they look good, we will send you more in private, and we expect you to be able to quickly run your pipeline on those as well. Once we’re satisfied, we can make a deal.
  </p>

  <h3>Collection</h3>

  <p>
    Some more information about the collection. <a href="https://www.duxiu.com/bottom/about.html">Duxiu</a> is a massive database of scanned books, created by the <a href="https://www.chaoxing.com/">SuperStar Digital Library Group</a>. Most are academic books, scanned in order to make them available digitally to universities and libraries. For our English-speaking audience, <a href="https://library.princeton.edu/eastasian/duxiu">Princeton</a> and the <a href="https://guides.lib.uw.edu/c.php?g=341344&amp;p=2303522">University of Washington</a> have good overviews. There is also an excellent article giving more background: <a href="https://doi.org/10.1016/j.acalib.2009.03.012">“Digitizing Chinese Books: A Case Study of the SuperStar DuXiu Scholar Search Engine”</a> (look it up in Anna’s Archive).
  </p>

  <p>
    The books from Duxiu have long been pirated on the Chinese internet. Usually they are being sold for less than a dollar by resellers. They are typically distributed using the Chinese equivalent of Google Drive, which has often been hacked to allow for more storage space. Some technical details can be found <a href="https://github.com/duty-machine/duty-machine/issues/2010">here</a> and <a href="https://github.com/821/821.github.io/blob/7bbcdc8dd2ec4bb637480e054fe760821b4ad7b8/_Notes/IT/DX-CX.md">here</a>.
  </p>

  <p>
    Though the books have been semi-publicly distributed, it is quite difficult to obtain them in bulk. We had this high on our TODO-list, and allocated multiple months of full-time work for it. However, recently an incredible, amazing, and talented volunteer reached out to us, telling us they had done all this work already — at great expense. They shared the full collection with us, without expecting anything in return, except the guarantee of long-term preservation. Truly remarkable. They agreed to ask for help in this way to get the collection OCR'ed.
  </p>

  <p>
    The collection is 7,543,702 files. This is more than Library Genesis non-fiction (about 5.3 million). Total file size is about 359TB (326TiB) in its current form.
  </p>

  <p>
    We’re open to other proposals and ideas. Just contact us. Check out Anna’s Archive for more information about our collections, preservation efforts, and how you can help. Thanks!
  </p>
  
  <p>
    - Anna and the team (<a href="https://twitter.com/AnnaArchivist">X</a>, <a href="https://www.reddit.com/r/Annas_Archive/">Reddit</a>, <a href="https://t.me/annasarchiveorg">Telegram</a>)
  </p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Grok (163 pts)]]></title>
            <link>https://twitter.com/xai/status/1721027348970238035</link>
            <guid>38148396</guid>
            <pubDate>Sun, 05 Nov 2023 05:02:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/xai/status/1721027348970238035">https://twitter.com/xai/status/1721027348970238035</a>, See on <a href="https://news.ycombinator.com/item?id=38148396">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="ScriptLoadFailure"><form action="" method="GET"><div><p><span>Something went wrong, but don’t fret — let’s give it another shot.</span></p><br></div></form></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The world nearly adopted a calendar with 13 months of 28 days (101 pts)]]></title>
            <link>https://www.washingtonpost.com/history/2023/11/04/battle-sabbath-13-month-calendar/</link>
            <guid>38147981</guid>
            <pubDate>Sun, 05 Nov 2023 03:53:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.washingtonpost.com/history/2023/11/04/battle-sabbath-13-month-calendar/">https://www.washingtonpost.com/history/2023/11/04/battle-sabbath-13-month-calendar/</a>, See on <a href="https://news.ycombinator.com/item?id=38147981">Hacker News</a></p>
Couldn't get https://www.washingtonpost.com/history/2023/11/04/battle-sabbath-13-month-calendar/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Topic: Discord Stealer (111 pts)]]></title>
            <link>https://github.com/topics/discord-stealer</link>
            <guid>38147459</guid>
            <pubDate>Sun, 05 Nov 2023 02:26:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/topics/discord-stealer">https://github.com/topics/discord-stealer</a>, See on <a href="https://news.ycombinator.com/item?id=38147459">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <div data-hpc="">
          
  <h2>
    Here are
    39 public repositories
    matching this topic...
  </h2>



  
<article>
    <a data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;REPOSITORY_IMAGE&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:452259635,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="758bc119dd80efc477aa80d18d37b280ba9995c861dd64543359c3ae8e8a4c07" data-turbo="false" href="https://github.com/Blank-c/Blank-Grabber" data-view-component="true">
      <img loading="lazy" src="https://repository-images.githubusercontent.com/452259635/f9057d17-2234-4b26-a71c-4ce57a5e25f9" alt="Blank-Grabber">
</a>

  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-452259635" aria-current="true" href="https://github.com/Blank-c/Blank-Grabber" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:452259635,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="1087de29d847484e007a502c35915065d29dabb34d8d28a8eab459f219147bac" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-452259635" href="https://github.com/Blank-c/Blank-Grabber/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:452259635,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e1b27294c6b22bb14d6512dcb29679b340d5ef974d80ea24eb93dfbe36be36f3" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-452259635" href="https://github.com/Blank-c/Blank-Grabber/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:452259635,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2101990bf70d1d11aaf660de1dbf021ef44fb9e642ea4d3b8819bc010501ed1a" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>The most powerful stealer written in Python 3 and packed with a lot of features.</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-08-06T06:26:16Z">Aug 6, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-382146713" aria-current="true" href="https://github.com/venaxyt/Token-Grabber-Advanced" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:382146713,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="fb33f50b3ca792df8389dd1b4c4702a962a7320aa4f304b95812a0fa070b693e" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-382146713" href="https://github.com/venaxyt/Token-Grabber-Advanced/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:382146713,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="2e1599f4947b97b5e44943d3255be5fb0583ae3c2431db7ee1fc0a0d0d7cdc5a" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-382146713" href="https://github.com/venaxyt/Token-Grabber-Advanced/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:382146713,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="0df40c35a0091bb1d9d7ad41f275b4db12dbdb431dc06de1fcbdaba813eb0c7f" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>This is an advanced Discord token grabber which send you through a Discord webhook all account informations of the victim including new features (bio / banner...)</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2022-12-28T19:40:42Z">Dec 28, 2022</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>
    <a data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;REPOSITORY_IMAGE&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:639006234,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e94fe1f3459208ae483980fb2137bbadf010523d3ca182cb12297b34c0c91cb5" data-turbo="false" href="https://github.com/blxstealer/BLX-Stealer" data-view-component="true">
      <img loading="lazy" src="https://repository-images.githubusercontent.com/639006234/210d080b-f4aa-4446-87d5-17eb83a446e1" alt="BLX-Stealer">
</a>

  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-639006234" aria-current="true" href="https://github.com/blxstealer/BLX-Stealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:639006234,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="1abd93fcf2bdf604a912fec81d8b963f49320071a2d87bc022f1092b914a739f" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-639006234" href="https://github.com/blxstealer/BLX-Stealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:639006234,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="ffadc24d753e62efdb065942d8bbe5f3ac543e6acb261ea2b4639a4ac1cedac2" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-639006234" href="https://github.com/blxstealer/BLX-Stealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:639006234,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="bb0a7f545a90d37a2e685613392e0f61c7b238ede553f772e97aa3f395e79f2e" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>[ROBLOX INFO UPDATE] [ALL ERRORS FIXED](v2.9)Grab token, passwords, cookies, interesting files and more. And have injection.</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-11-05T09:57:39Z">Nov 5, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-618254832" aria-current="true" href="https://github.com/Blank-c/Umbral-Stealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:618254832,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="6f0edc8e7c38517f222b57a96e2d22420d058a7c1c888cb680aad46031d109f7" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-618254832" href="https://github.com/Blank-c/Umbral-Stealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:618254832,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="be91e65a09cc6e9cd96acf1937066e5fd104d649a9730b5cc483934b5e4e4e7c" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-618254832" href="https://github.com/Blank-c/Umbral-Stealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:618254832,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="8257ee10d72c6692d23debfc483a3041e8a28f7a5d1372dd373ccbe6eccb4dfe" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>Umbral Stealer is a fast, lightweight stealer written in C#. The collected data is transferred through discord webhooks.</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-06-26T17:39:42Z">Jun 26, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">C#</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-604821976" aria-current="true" href="https://github.com/Lawxsz/make-u-own-stealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:604821976,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="7ae9cb385e4a010114623e8d949bdb738d34dfac25675ede3e244d083d268e27" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-604821976" href="https://github.com/Lawxsz/make-u-own-stealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:604821976,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="52f70eae7501f2446b2f828ac15a4e153739a3ee0518ddc12599f1797fdb02b3" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-604821976" href="https://github.com/Lawxsz/make-u-own-stealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:604821976,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="833535798fd77d58122f2ffd45cdef8e27e2e93a66b8ca3f35ec7ffaed7cd22d" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>Make u own stealer, steam, exodus, metamask, discord, passwords, cards etc! (This is a shit code, only for scripts basic not for PROFESSIONAL SOFTWARES)</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-09-18T15:41:07Z">Sep 18, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>
    <a data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;REPOSITORY_IMAGE&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:552993773,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="40ca77b2ce040fd0a8db1fdb0f9bd1a8b1013d7cc805ca21e12780d47aca60e7" data-turbo="false" href="https://github.com/gumbobr0t/Hazard-Token-Grabber-v2" data-view-component="true">
      <img loading="lazy" src="https://repository-images.githubusercontent.com/552993773/206ddf81-e3e5-45ee-a121-385864d60305" alt="Hazard-Token-Grabber-v2">
</a>

  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-552993773" aria-current="true" href="https://github.com/gumbobr0t/Hazard-Token-Grabber-v2" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:552993773,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="adb191863f8e507b9024dd5ddd2dfb22f7e8013d4dd67a28666297c2eb0878b6" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-552993773" href="https://github.com/gumbobr0t/Hazard-Token-Grabber-v2/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:552993773,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="7f49ce85782f7dfa371da309cba845b5c22a0fb5d663de518c6a13e845328f37" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-552993773" href="https://github.com/gumbobr0t/Hazard-Token-Grabber-v2/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:552993773,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="dcd27db833f81b773ed3d64b8a3729e3d44ea9b47f622df9856a4afdc07a152e" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>Amazing, fast &amp; easy to use discord token stealer.</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-10-15T13:10:56Z">Oct 15, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-420686687" aria-current="true" href="https://github.com/KanekiWeb/Powerfull-Token-Stealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:420686687,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="ca546d1dbbacd5f79233d759f0293a57f1bb77ffe38730a2bdaf09ddcc268599" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-420686687" href="https://github.com/KanekiWeb/Powerfull-Token-Stealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:420686687,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="06406cf3297bc1da2fa512cdc919706eb2675d68cc9bfd24f9a12cf9956ce88f" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-420686687" href="https://github.com/KanekiWeb/Powerfull-Token-Stealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:420686687,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="07c2406fcacb6c1096fab3731180111b4586860f5237b59015734d3e9cba9d51" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>🐲 Powerfull Discord Token Stealer made in python</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2022-01-22T20:58:02Z">Jan 22, 2022</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-594157369" aria-current="true" href="https://github.com/Inplex-sys/BlackCap-Grabber-NoDualHook" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:594157369,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="629405b0d7342bbf35f985094f2595717c9443c5f42df421e22c3de01d4bb670" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-594157369" href="https://github.com/Inplex-sys/BlackCap-Grabber-NoDualHook/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:594157369,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="1e597f050e35faa4ff2bf8c8bad778029e9d36c1697e7375b963a42b648122f7" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-594157369" href="https://github.com/Inplex-sys/BlackCap-Grabber-NoDualHook/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:594157369,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="03a63fced3cf4b6ad69ecabce6a49a8edd0c31b29b9b820398fb0d418ccd64a9" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>The BlackCap Grabber without dual webhook stealer</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-03-26T13:11:21Z">Mar 26, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-661036696" aria-current="true" href="https://github.com/Phxnt0m1/Phxnt0mWare-Grabber" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:661036696,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e69967cabab59328f392cd6967dd7430abe84f005475f9c98cf18ff1dcd7cc18" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-661036696" href="https://github.com/Phxnt0m1/Phxnt0mWare-Grabber/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:661036696,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="f1ea9bf3d6e5aed3902773a697665acbfb3c66add482515f7ea4aac769666fb6" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-661036696" href="https://github.com/Phxnt0m1/Phxnt0mWare-Grabber/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:661036696,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="fe03e0c0f8968c30e939dcb660ff65ae59a6fd48cf79fac0c93a30ab52ea0a98" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>The most powerful Discord Grabber/stealer written in Python 3 and packed with a lot of features.</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-09-12T14:39:01Z">Sep 12, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-576022476" aria-current="true" href="https://github.com/Jeff53978/Python-Trojan" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:576022476,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="231e3336e21c9c1f9fd0ae1494f71ca326da2c7c02e4515796d9793d40623ab5" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-576022476" href="https://github.com/Jeff53978/Python-Trojan/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:576022476,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="82379b116a873ec2a6b0bdbdb92c68eac879ab9d65ff08ef4d708979ce50c04a" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-576022476" href="https://github.com/Jeff53978/Python-Trojan/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:576022476,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="34328e4ec1db1dcc1b7dc21003f62f97c1e0b86ba67264eacaee886e3e17186d" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>A Python Trojan that uses Discord as a C2 server, can extract Discord Tokens, Passwords (chrome, edge, opera, etc) and control the computer.</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-05-07T14:40:56Z">May 7, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-633378950" aria-current="true" href="https://github.com/TheCuteOwl/Trap-Stealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:633378950,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="605a65e5a720f8a1b36f1b09b18a6bb726d7e16f9aabda31a488c840a441a1f5" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-633378950" href="https://github.com/TheCuteOwl/Trap-Stealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:633378950,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="1d8ee1636de6b781d74a9cdabf713fc7ad2ce3232e3f2aba61a534b96b817e23" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-633378950" href="https://github.com/TheCuteOwl/Trap-Stealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:633378950,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c4134ddb22241f4e85bc02e465169f60c4f162046b940fd1503da087dfdb01db" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>Here's a new Discord stealer with many features and completely FUD (Fully Undetected).</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-11-04T10:42:28Z">Nov 4, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>
    <a data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;REPOSITORY_IMAGE&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:661310422,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="3a511d73523ff9805e3784fd12d58c7b67c08af6adbeb4a1721ea9557028b85d" data-turbo="false" href="https://github.com/0x77ff/Byte-Stealer" data-view-component="true">
      <img loading="lazy" src="https://repository-images.githubusercontent.com/661310422/9afa18fd-601e-4963-9686-10dfde99e750" alt="Byte-Stealer">
</a>

  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-661310422" aria-current="true" href="https://github.com/0x77ff/Byte-Stealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:661310422,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="aa31bb2406c1fc0dce035890a9f2b8c72e40b8e0e4c6eb82d90f54df2f26d6b7" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-661310422" href="https://github.com/0x77ff/Byte-Stealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:661310422,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="3182b9cac9a743caf3a32e61aac933e2d409add6f89d0c4dbf1751a3afd5d28a" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-661310422" href="https://github.com/0x77ff/Byte-Stealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:661310422,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="4036d72028fdc550d2b1e399baf2b2561cff28e097261ed0c0ac97bcadd68228" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
      <li data-view-component="true">
  <a id="discussions-tab-661310422" href="https://github.com/0x77ff/Byte-Stealer/discussions" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_DISCUSSIONS&quot;,&quot;click_visual_representation&quot;:&quot;DISCUSSIONS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:661310422,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="3cdc9b1cf4688d821bf6662d4208b989153264f6448a7f3c7aed3499d6106bc9" data-turbo="false" data-view-component="true">
    
               Discussions

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>Powerful Token Logger script that can steal all types of Data and sends out via discord webhook. This includes Roblox, Steam, browser History, IP, location and much more!</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-11-03T17:22:35Z">Nov 3, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-517018888" aria-current="true" href="https://github.com/DedInc/DiscordTokenGrabber" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:517018888,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="ebf69b781bbae6c009f17477f470d1947ff00e7e20dc9fc291973d7b3c09d631" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-517018888" href="https://github.com/DedInc/DiscordTokenGrabber/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:517018888,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c227ab80753ac2a89cf536954067adf9e7733c5d5456e01f354e9debadb1ccb6" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-517018888" href="https://github.com/DedInc/DiscordTokenGrabber/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:517018888,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e2679b36e800dca7171a77948366c61bf284eca72b67f9e79f1491d465d5bbc8" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>The most powerful discord stealer with a lot of features written in Java.</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-11-04T08:08:30Z">Nov 4, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Java</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-521997548" aria-current="true" href="https://github.com/WikiGT/Pirate-Stealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:521997548,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="ff574fd5d25433235fe6db70bd6470fda417b85f30410d214c1fb86ed8a68c4e" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-521997548" href="https://github.com/WikiGT/Pirate-Stealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:521997548,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="d42279dc3cca068c0c405f6d41698aa7f7f04856629c4d6c730404b1bd8f260c" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-521997548" href="https://github.com/WikiGT/Pirate-Stealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:521997548,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c63071e58084e0a7093596ca7675235932b0606c1c1198d390a3b42350c277d5" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>Discord Password + Token Stealer</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2022-08-06T17:12:44Z">Aug 6, 2022</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">JavaScript</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-663436264" aria-current="true" href="https://github.com/Mwos77/mwosstealer77" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:663436264,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e9001d71e6f5293c7beee35b3aaee6e9580950bff1799541b4e1f0b3e126cdf2" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-663436264" href="https://github.com/Mwos77/mwosstealer77/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:663436264,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="0097835278541eb9f5d1216a8cb46c0934b456160924f036787f75d7a734acfa" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-663436264" href="https://github.com/Mwos77/mwosstealer77/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:663436264,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c29c05ebd08d28698541ffbd29851bd8ae3a7a2c90bab4efa20e48c1cb17914b" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>A discord token grabber, crypto wallet stealer, cookie stealer, password stealer, file stealer etc</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-07-31T22:42:08Z">Jul 31, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-694736736" aria-current="true" href="https://github.com/Shinyenigma/Millenium-stealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:694736736,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="af0a6a7bbcffdf1a0479107b630df2e8fefa6b0dda6f33fdd3396b447ccad6c4" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-694736736" href="https://github.com/Shinyenigma/Millenium-stealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:694736736,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="cb79f07c6a912580143a38cce95491b8c2d33fb4aca494e733b284966564fb4b" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-694736736" href="https://github.com/Shinyenigma/Millenium-stealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:694736736,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="050a2e96ffe90b28a2313a98d7d12286bdc6effeee9b6d4f84a82da47550d5a0" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>A stealer version of Millenium RAT, logs will be also sent to Telegram. ✨The price in 2023 is 10$✨</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-09-23T15:29:16Z">Sep 23, 2023</relative-time>
          </li>

      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-473829612" aria-current="true" href="https://github.com/Shade3421/HookStealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:473829612,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="5f1edc774801a212de892129738e3e90db2418138e50f601c937a025a20cb789" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-473829612" href="https://github.com/Shade3421/HookStealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:473829612,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c942c6ef5c9cd0b7004bbb4920740559311e2f805d784ea5251dcb28c6f88ccc" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-473829612" href="https://github.com/Shade3421/HookStealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:473829612,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="a69a633cbce5d2231b5acf55f5ae945ed063dee96c387cb1a3e4f9dcea2c8975" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>A small webhook stealer written in python its a fake builder that has you input a webhook and that webhook will be sent to your webhook</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2022-03-25T20:18:47Z">Mar 25, 2022</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>
    <a data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;REPOSITORY_IMAGE&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:676446094,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="de549c281189903681db24786958442e8905914bc4bb0e3c0aa5d0283dd6e3f5" data-turbo="false" href="https://github.com/skochwashere/skochgrabber" data-view-component="true">
      <img loading="lazy" src="https://repository-images.githubusercontent.com/676446094/cf7c45be-38ed-4b11-a0be-0a972f8add70" alt="skochgrabber">
</a>

  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-676446094" aria-current="true" href="https://github.com/skochwashere/skochgrabber" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:676446094,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="14c0341f2ff39276f18851d31895f0ab67a75107e99d3f64ce50aab59f2502e2" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-676446094" href="https://github.com/skochwashere/skochgrabber/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:676446094,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="63a991ba74cc6f76d799486f7762d3dabe82292bf5dbd4ddad2b1088a2a9e706" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-676446094" href="https://github.com/skochwashere/skochgrabber/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:676446094,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="949033860babd89829023184acb1488c8e5108b5760697b16875c89cad44cef3" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>SkochGrabber is a powerful all-in-one stealer used to steal data from your victims.</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-08-23T19:36:00Z">Aug 23, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-672786730" aria-current="true" href="https://github.com/WiredZXZ/Ethical-Stealer" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:672786730,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="9a5ad18c13c7ab68b17efa1cbbe49a5698639905fc12bb43eb1d5d52ca926562" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-672786730" href="https://github.com/WiredZXZ/Ethical-Stealer/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:672786730,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="3434210e5ae1604b2bc73c120b5b5c75136b46768b2b31d3c1bd4978d22748d8" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-672786730" href="https://github.com/WiredZXZ/Ethical-Stealer/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:672786730,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="44dd7d179cfb0e987c78c4401810aafe9a94967bdb874d30fb0881276c5eb63f" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>Best Discord Token Recovery Tool With Injection + More Sites</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-07-31T08:41:35Z">Jul 31, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>

  
<article>


  

  <nav aria-label="Repository menu" data-view-component="true">
  

  <ul data-view-component="true">
      <li data-view-component="true">
  <a id="code-tab-609538660" aria-current="true" href="https://github.com/SkilledDC/token-grabber" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY&quot;,&quot;click_visual_representation&quot;:&quot;CODE_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:609538660,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="6f4633f773422fc10436f9caf4dd6d0e26801850440c9054695a21f11f86ef1a" data-turbo="false" data-view-component="true">
    
             Code

    
</a></li>
      <li data-view-component="true">
  <a id="issues-tab-609538660" href="https://github.com/SkilledDC/token-grabber/issues" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_ISSUES&quot;,&quot;click_visual_representation&quot;:&quot;ISSUES_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:609538660,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="bab88f90f9476862ec31eb5b02606c532dd8ece8864b56bdbf3ecb81b0356c48" data-turbo="false" data-view-component="true">
    
             Issues

    
</a></li>
      <li data-view-component="true">
  <a id="pull-requests-tab-609538660" href="https://github.com/SkilledDC/token-grabber/pulls" data-hydro-click="{&quot;event_type&quot;:&quot;explore.click&quot;,&quot;payload&quot;:{&quot;click_context&quot;:&quot;REPOSITORY_CARD&quot;,&quot;click_target&quot;:&quot;REPOSITORY_PULL_REQUESTS&quot;,&quot;click_visual_representation&quot;:&quot;PULL_REQUESTS_TAB&quot;,&quot;actor_id&quot;:null,&quot;record_id&quot;:609538660,&quot;originating_url&quot;:&quot;https://github.com/topics/discord-stealer&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="b8829ae96bf9d5e8af1f4f746c2bdc52bd7fb3e898d759ab40e8edc426c95d35" data-turbo="false" data-view-component="true">
    
             Pull requests

    
</a></li>
</ul>
  
</nav>
  <div>
      <p>A Powerfull Fully Undetect Token Stealer / Token Grabber, allow to steal discord new password / a2f codes / email / credit card / anti delete, steal browsers chromium based Passwords / Cookies / History, Can also steal steam / metamask / exodus / minecraft login / roblox cookies, with anti debug</p>

      

    <div>
      <ul>
          <li>
            Updated
            <relative-time datetime="2023-03-04T13:38:03Z">Mar 4, 2023</relative-time>
          </li>

          <li>
            <span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span>

          </li>
      </ul>
    </div>
  </div>
</article>



  <!-- '"` --><!-- </textarea></xmp> -->

      </div>

      <div>



          <div>
            <h2>
              Improve this page
            </h2>

            <p>
              Add a description, image, and links to the
              <span>discord-stealer</span>
              topic page so that developers can more easily learn about it.
            </p>

            <p>
              <a href="https://github.com/github/explore/tree/master/CONTRIBUTING.md?source=add-description-discord-stealer" data-ga-click="Explore, add description, text:add description">
                Curate this topic
                
              </a>
            </p>
          </div>

          <div>
            <h2>
              Add this topic to your repo
            </h2>

            <p>
              To associate your repository with the
              <span>discord-stealer</span>
              topic, visit your repo's landing page and select "manage topics."
            </p>

            <p>
              <a href="https://docs.github.com/en/articles/classifying-your-repository-with-topics">
                Learn more
                
              </a>
            </p>
          </div>
      </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Daylight saving time can seriously affect your health (114 pts)]]></title>
            <link>https://apnews.com/article/daylight-saving-2023-fall-back-a3738d5c74301b8068825927c49fc6b4</link>
            <guid>38146837</guid>
            <pubDate>Sun, 05 Nov 2023 00:47:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://apnews.com/article/daylight-saving-2023-fall-back-a3738d5c74301b8068825927c49fc6b4">https://apnews.com/article/daylight-saving-2023-fall-back-a3738d5c74301b8068825927c49fc6b4</a>, See on <a href="https://news.ycombinator.com/item?id=38146837">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                        <p>CHICAGO (AP) — Brunch dates and flag football games might be a little easier to get to this Sunday, when phones grace early-risers with an extra hour of rest before alarm clocks go off.</p><p>The downside: Next week across most of the U.S., the sun will set well before many folks step foot out of the office, leaving them to run errands or take walks in utter darkness. Come Nov. 5, daylight saving time is out and standard time is in, and will last until March 10.</p><p>No need to wait till the midnight hour to prepare for the time change that clocks in early Sunday, when 2 a.m. becomes 1 a.m. Before bed beckons Saturday night, rewind the clock on the microwave, oven, car, or any other device not yet clever enough to make the leap on its own. </p>
    

<p>Besides scheduling stumbles and sleep habit disruptions, experts say the twice-yearly ritual can have <span><a href="https://apnews.com/article/health-science-us-news-accidents-weekend-reads-0316d6f8d11a41b3a32135770879cdf5" target="_blank" rel="noopener">more serious effects on human health</a></span>.</p>



<p>Many Americans are already sleep-deprived, and a change in time messes with sleep schedules even more, says Dr. Phyllis Zee, a sleep researcher at Northwestern Medicine in Chicago, although she says “falling back” and gaining an extra hour is generally easier on the body than “springing forward” and losing one.</p>
<p>Chronic sleep deprivation can increase levels of stress hormones that boost heart rate and blood pressure, and of chemicals that trigger inflammation, research suggests.</p><p>“Just that one hour can change the amount of sleep you get, the quality of sleep that you get,” Zee said. Off-kilter sleep can affect people’s ability to multitask, stay alert, and even maintain their balance, making them more prone to accidents.</p>
    

<p>Molly Hart, spokeswoman for AAA’s Auto Club Group, warned that there may be an uptick in accidents on the road following the time change.</p><p>“With daylight savings coming to an end, what people really need to be focused on is their driving now in the afternoon when it’s darker earlier,” and when they may be feeling drowsy, she said.</p><p>Hawaii, American Samoa, Guam, Puerto Rico, the U.S. Virgin Islands and most of Arizona do not observe daylight saving time.</p><p>Some members of Congress have pushed to end the back-and-forth and make daylight saving time permanent.</p><div data-module-tracksubscribe="" data-align-center="">
    
    
    
    
    <h2 data-mb-5="">
        Aside from sleep habit disruptions, experts say daylight saving time can have more serious effects on human health.
    </h2>
    
    
    <p>AP correspondent Donna Warder reports.</p>
    
</div>
    

<p>The U.S. Senate in March 2022 passed a bipartisan bill named the <span><a href="https://apnews.com/article/biden-united-states-congress-749d458d09882c6e6479559bc0327bde" target="_blank" rel="noopener">Sunshine Protection Act</a></span>, but it stalled in the House. The bill was re-introduced by Sen. Marco Rubio in March of this year, then referred to committee, where it has remained idle.</p><h2>___</h2><p>Savage is a corps member for the Associated Press/Report for America Statehouse News Initiative. <span><a href="https://www.reportforamerica.org/" target="_blank" rel="noopener">Report for America</a></span> is a nonprofit national service program that places journalists in local newsrooms to report on undercovered issues.</p>
                                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Soda additive linked to thyroid toxicity may finally get banned by FDA (117 pts)]]></title>
            <link>https://arstechnica.com/health/2023/11/50-years-later-fda-proposes-banning-a-food-additive-it-said-is-not-safe/</link>
            <guid>38146696</guid>
            <pubDate>Sun, 05 Nov 2023 00:26:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/health/2023/11/50-years-later-fda-proposes-banning-a-food-additive-it-said-is-not-safe/">https://arstechnica.com/health/2023/11/50-years-later-fda-proposes-banning-a-food-additive-it-said-is-not-safe/</a>, See on <a href="https://news.ycombinator.com/item?id=38146696">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <header>
            <h4>
      About time    —
</h4>
            
            <h2 itemprop="description">BVO has largely been phased out of big-name sodas and was recently banned in CA.</h2>
                    </header>
        <div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2023/11/sundrop-800x467.jpeg" alt="Sundrop is among the citrus soft drinks that still contains BVO.">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2023/11/sundrop.jpeg" data-height="1400" data-width="2400">Enlarge</a> <span>/</span> Sundrop is among the citrus soft drinks that still contains BVO.</p></figcaption>  </figure>

  




<!-- cache hit 519:single/related:a26a8ad51dde2af730762031c47606ed --><!-- empty -->
<p>The Food and Drug Administration may finally ban a food additive used in citrusy drinks that the agency determined over 50 years ago could not be considered generally safe. The agency <a href="https://www.federalregister.gov/documents/2023/11/03/2023-24084/revocation-of-authorization-for-use-of-brominated-vegetable-oil-in-food#print">proposed a ban on the additive Thursday</a>.</p>
<p>The additive is brominated vegetable oil (BVO), which is a flavoring emulsifier and stabilizer that has been used to keep citrus flavoring from separating and floating to the top of soft drinks since the 1920s. It was previously used in big brand-name beverages such as Mountain Dew and Gatorade but has been removed amid toxicity concerns in recent years. Since at least 2014, PepsiCo and Coca-Cola have been phasing out BVO from their drinks, though it can still be found in some store-brand sodas and regional drinks, including <a href="https://www.kdpproductfacts.com/product/a0e3h000003LK9KAAW/sun-drop-citrus-flavored-soda-20-fl-oz-us?redirect=false">the citrus soda Sun Drop</a>.
</p><p>BVO is already banned in Europe, Japan, Australia, and New Zealand. In October of this year, California banned BVO, along with <a href="https://arstechnica.com/health/2023/10/common-red-food-dye-banned-in-calif-30-years-after-fda-found-cancer-risk-in-rats/">other problematic food additives, including red dye No. 3</a>. (While reporting California's ban on red dye No. 3, Ars also reported that the FDA planned to ban BVO.)</p>
<p>The FDA's proposed ban on BVO is a long time coming. Toxicity concerns have dogged BVO for over 50 years. The brominated oil accumulates in fat, the liver, heart, and brain over time, and there are long-standing concerns of thyroid toxicity, developmental neurotoxicity, and reproductive toxicity.</p>
<p>In January 1970, the FDA revoked BVO's status as GRAS, or "Generally Recognized As Safe." At that time, manufacturers were using BVO at a level of up to 150 parts per million (ppm) in beverages. In response, the additive industry petitioned the FDA to keep allowing the use of BVO, but at a lower limit of 15 ppm. The FDA was still not convinced it was safe and called for additional long-term safety studies. But, it didn't outright reject the request—instead, the agency allowed the use of BVO at the lower limit while the safety studies were being conducted, citing "an adequate margin of safety" at the reduced level.</p>                                            
                                                        
<h2>Not so fast or nimble</h2>
<p>At first, the authorization to use BVO at 15 ppm was only on an interim basis—a three-year term as the agency awaited more data. But, in 1974, still waiting for more data, the interim basis became an "indefinite period," which is ongoing.</p>
<p>In a 2014 review of BVO, the FDA recognized the "unresolved safety questions" and designed rodent studies to address them, which were eventually run by the National Center for Toxicological Research (NCTR). While neurotoxicity and reproductive toxicity were among the lingering questions, the NCTR studies only looked at bioaccumulation and thyroid toxicity, noting that if these showed toxicity, it would be enough to revoke the authorization of BVO. The studies did show toxicity.</p>
<p><a href="https://www.sciencedirect.com/science/article/abs/pii/S0278691522003350">The rat experiments</a>, published in 2022, used levels of BVO that mimicked dietary exposure of humans at the 15 ppm limit. In feeding trials, researchers found abnormalities in the rats' thyroids, alterations in their hormone signaling, and accumulation of brominated fatty acids in the heart, liver, and fat of all animals fed BVO.</p>
<p>"[W]e can no longer conclude that there is a reasonable certainty of no harm from the use of BVO as a stabilizer for flavoring oils in fruit-flavored beverages," the FDA said <a href="https://www.federalregister.gov/documents/2023/11/03/2023-24084/revocation-of-authorization-for-use-of-brominated-vegetable-oil-in-food#print">in its proposal to revoke authorization</a>.</p>
<p>In <a href="https://www.fda.gov/news-events/press-announcements/fda-proposes-ban-food-additive-continues-assessments-additional-chemicals">a separate statement</a>, James Jones, the FDA's Deputy Commissioner for Human Foods, noted that these types of safety reviews take time, but seemed to acknowledge the agency's extremely slow process. He pointed to a proposed internal restructuring at the FDA that will "include the creation of the Office of Food Chemical Safety, Dietary Supplements and Innovation where we intend to develop a faster and more nimble process for evaluating chemicals in the food supply."</p>
<p>Jones also noted that the FDA is currently reviewing red dye No. 3, and a decision on potentially banning that additive—as was already done in California —is "forthcoming."</p>

                                                </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My experience taking Tesla to court about FSD (128 pts)]]></title>
            <link>https://teslamotorsclub.com/tmc/threads/my-experience-taking-tesla-to-court-about-fsd.315086/</link>
            <guid>38146676</guid>
            <pubDate>Sun, 05 Nov 2023 00:23:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://teslamotorsclub.com/tmc/threads/my-experience-taking-tesla-to-court-about-fsd.315086/">https://teslamotorsclub.com/tmc/threads/my-experience-taking-tesla-to-court-about-fsd.315086/</a>, See on <a href="https://news.ycombinator.com/item?id=38146676">Hacker News</a></p>
Couldn't get https://teslamotorsclub.com/tmc/threads/my-experience-taking-tesla-to-court-about-fsd.315086/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Tesla strike widens as Swedish union expands blockade (134 pts)]]></title>
            <link>https://www.thelocal.se/20231103/tesla-strike-widens-as-swedish-union-expands-blockade</link>
            <guid>38146339</guid>
            <pubDate>Sat, 04 Nov 2023 23:30:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thelocal.se/20231103/tesla-strike-widens-as-swedish-union-expands-blockade">https://www.thelocal.se/20231103/tesla-strike-widens-as-swedish-union-expands-blockade</a>, See on <a href="https://news.ycombinator.com/item?id=38146339">Hacker News</a></p>
Couldn't get https://www.thelocal.se/20231103/tesla-strike-widens-as-swedish-union-expands-blockade: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[SARS-CoV-2 Infection Affects Energy Stores in the Body, Causing Organ Failure (172 pts)]]></title>
            <link>https://news.unchealthcare.org/2023/10/researchers-show-sars-cov-2-infection-affects-energy-stores-in-the-body-causing-organ-failure/</link>
            <guid>38146122</guid>
            <pubDate>Sat, 04 Nov 2023 23:02:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.unchealthcare.org/2023/10/researchers-show-sars-cov-2-infection-affects-energy-stores-in-the-body-causing-organ-failure/">https://news.unchealthcare.org/2023/10/researchers-show-sars-cov-2-infection-affects-energy-stores-in-the-body-causing-organ-failure/</a>, See on <a href="https://news.ycombinator.com/item?id=38146122">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <p>An international research team, including Jonathan C. Schisler, PhD, in the UNC School of Medicine, has found how SARS-CoV-2 causes widespread “energy outages” throughout major organs, and how these effects contribute to debilitating long COVID symptoms.
</p><hr>
<figure id="32732"><a href="https://news.unchealthcare.org/wp-content/uploads/sites/1159/2023/10/jonathan-schisler-250x375-1.jpg" data-slb-active="1" data-slb-asset="471996825" data-slb-internal="0" data-slb-group="32729"><img width="200" height="300" src="https://news.unchealthcare.org/wp-content/uploads/sites/1159/2023/10/jonathan-schisler-250x375-1-200x300.jpg" alt="" decoding="async" srcset="https://news.unchealthcare.org/wp-content/uploads/sites/1159/2023/10/jonathan-schisler-250x375-1-200x300.jpg 200w, https://news.unchealthcare.org/wp-content/uploads/sites/1159/2023/10/jonathan-schisler-250x375-1.jpg 250w" sizes="(max-width: 200px) 100vw, 200px"></a><figcaption>Jonathan C. Schisler, PhD</figcaption></figure>
<p>The lungs were once at the forefront of SARS-Cov-2 research, but as reports of organ failure and other serious complications poured in, scientists set out to discover how and why the respiratory virus was causing serious damage to the body’s major organs, including the lungs.</p>
<p>An interdisciplinary COVID-19 International Research Team (COV-IRT), which includes UNC School of Medicine’s <a href="https://www.med.unc.edu/pharm/directory/jonathan-c-schisler-phd/">Jonathan C. Schisler, PhD</a>, found that SARS-CoV-2 alters mitochondria on a genetic level, leading to widespread “energy outages” throughout the body and its major organs. Their findings, <a href="https://www.science.org/doi/full/10.1126/scitranslmed.abq1533">published in</a> <em>Science Translational Medicine,</em> explain how these effects contribute to long COVID symptoms and point to new therapeutic targets.</p>
<p>“We found that at peak infection time, there are distinct changes in different regions of the brain, including is a large decrease in mitochondrial genes in the cerebellum, the part of the brain that controls our muscles, balance, cognition, and emotion” said Schisler, assistant professor of pharmacology and member of the UNC McAllister Heart Institute. “The lung is the primary site of infection, but molecular signals are being transmitted affecting the entire body, with the heart, kidney, and liver being more affected than others, even long after the virus is gone.”</p>
<p>Every cell in our bodies is equipped with biological power stations known as mitochondria, which are especially important for maintaining the function of energy-demanding organs, such as the heart, brain, and lungs. Mitochondria require genes from their own genome (mitochondrial DNA) and nuclear DNA (nDNA) to create energy. Together, they instruct the mitochondria to convert oxygen molecules into cellular energy called adenosine triphosphate (ATP).</p>
<p>Using nasal swabs and autopsy tissues from affected patients and animal models, researchers found that the virus blocks specific genes that use oxygen to create ATP, forcing the body to deplete finite energy reserves in the body. Without an energy source, cells throughout the body begin to starve, with the cells powering the brain and the heart suffering the most.</p>
<p>To keep the body functioning, cardiac and neural cells can resort to consuming their cellular parts, including their mitochondria. Eventually, the cells are deprived of their vital elements and initiate a form of programmed cell death called necroptosis. Unlike other forms of cellular death, necroptosis causes a cascade of ill effects, including a robust inflammatory response, which releases pro-inflammatory cells called cytokines throughout the body as the cells rupture. Uncontrolled necroptosis further enhances sepsis and organ failure.</p>
<p>Schisler says the ensuing cell death and inflammation may explain why patients with long COVID are likely to have persisting cardiovascular, cognitive, and inflammatory side effects after the initial infection has run its course.</p>
<p>“If we can start to appreciate and understand how each organ system adapts in the long-term to viral infection, and if we can discover the biology behind why people respond differently to SARS-CoV-2, we will be better positioned to combat chronic, long COVID symptoms that might be affecting cells in the heart, or the immune cells, or the neurons in our brain,” said Schisler.</p>
<p>Drawing on <a href="https://pubmed.ncbi.nlm.nih.gov/34624208/">past research</a>, the scientists know that a specific microRNA, a small piece of RNA that circulates throughout the body, increases in number during severe respiratory infections. This particular microRNA, which can affect mitochondrial gene expression in numerous cells and tissues, could be a new therapeutic target against SARS-CoV-2.</p>
<p>The new findings also highlight new ways to address the mitochondrial dysfunction that occurs during COVID infection. Diet, exercise, natural compounds, or a combination of the three, may be able to stimulate mitochondrial function, but whether or not they are effective for patients with long COVID is yet to be known.</p>
<p>Moving forward, the research team will explore how long mitochondrial dysfunction lasts in the body, especially in cases of long-COVID, and how mitochondrial function can be restored.</p>
<p><em>Media contact:&nbsp;</em><a href="mailto:kendall.daniels@unchealth.unc.edu"><em>Kendall Daniels</em></a><em>, Communications Specialist, UNC Health | UNC School of Medicine</em></p>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[New Microsoft Exchange zero-days allow RCE, data theft attacks (150 pts)]]></title>
            <link>https://www.bleepingcomputer.com/news/microsoft/new-microsoft-exchange-zero-days-allow-rce-data-theft-attacks/</link>
            <guid>38145461</guid>
            <pubDate>Sat, 04 Nov 2023 21:43:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bleepingcomputer.com/news/microsoft/new-microsoft-exchange-zero-days-allow-rce-data-theft-attacks/">https://www.bleepingcomputer.com/news/microsoft/new-microsoft-exchange-zero-days-allow-rce-data-theft-attacks/</a>, See on <a href="https://news.ycombinator.com/item?id=38145461">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="Microsoft Exchange surrounded by fire" height="800" src="https://www.bleepstatic.com/content/hl-images/2021/03/10/Exchange1.jpg" width="1600"></p>
<p>Microsoft Exchange is impacted by four zero-day vulnerabilities that attackers can exploit remotely to execute arbitrary code or disclose sensitive information on affected installations.</p>
<p>The zero-day vulnerabilities were disclosed by Trend Micro's Zero Day Initiative (ZDI) yesterday, who reported them to Microsoft on September 7th and 8th, 2023.</p>
<p>Despite Microsoft acknowledging the reports, its security engineers decided the flaws weren't severe enough to guarantee immediate servicing, postponing the fixes for later.</p>
<p>ZDI disagreed with this response and decided to publish the flaws under its own tracking IDs to warn Exchange admins about the security risks.</p>
<p>A summary of the flaws can be found below:</p>
<ul><li><a href="https://www.zerodayinitiative.com/advisories/ZDI-23-1578/" target="_blank" rel="nofollow noopener"><strong>ZDI-23-1578</strong></a> – A remote code execution (RCE) flaw in the 'ChainedSerializationBinder' class, where user data isn't adequately validated, allowing attackers to deserialize untrusted data. Successful exploitation enables an attacker to execute arbitrary code as 'SYSTEM,' the highest level of privileges on Windows.</li>
<li><a href="https://www.zerodayinitiative.com/advisories/ZDI-23-1579/" target="_blank" rel="nofollow noopener"><strong>ZDI-23-1579</strong></a> – Located in the 'DownloadDataFromUri' method, this flaw is due to insufficient validation of a URI before resource access. Attackers can exploit it to access sensitive information from Exchange servers.</li>
<li><a href="https://www.zerodayinitiative.com/advisories/ZDI-23-1580/" target="_blank" rel="nofollow noopener"><strong>ZDI-23-1580</strong></a> – This vulnerability, in the 'DownloadDataFromOfficeMarketPlace' method, also stems from improper URI validation, potentially leading to unauthorized information disclosure.</li>
<li><a href="https://www.zerodayinitiative.com/advisories/ZDI-23-1581/" target="_blank" rel="nofollow noopener"><strong>ZDI-23-1581</strong></a> – Present in the CreateAttachmentFromUri method, this flaw resembles the previous bugs with inadequate URI validation, again, risking sensitive data exposure.</li>
</ul><p>All these vulnerabilities require authentication for exploitation, which reduces their severity CVSS rating to between 7.1 and 7.5. Furthermore, requiring authentication is a mitigation factor and possibly why Microsoft did not prioritize the fixing of the bugs.</p>
<p>It should be noted, though, that cybercriminals have many ways to obtain Exchange credentials, including brute-forcing weak passwords, performing phishing attacks, purchasing them, or acquiring them from info-stealer logs.</p>
<p>That said, the above zero-days shouldn't be treated as unimportant, especially ZDI-23-1578 (RCE), which can result in complete system compromise.</p>
<p>ZDI suggests that the only salient mitigation strategy is to restrict interaction with Exchange apps. However, this can be unacceptably disruptive for many businesses and organizations using the product.</p>
<p>We also suggest implementing multi-factor authentication to prevent cybercriminals from accessing Exchange instances even when account credentials have been compromised.</p>
<hr><p><em>Update 11/4</em> - A Microsoft spokesperson responded to BleepingComputer's request for a comment with the following statement:</p>
<blockquote>
<p>We appreciate the work of this finder submitting these issues under coordinated vulnerability disclosure, and we’re committed to taking the necessary steps to help protect customers.</p>
<p>We’ve reviewed these reports and have found that they have either already been addressed, or do not meet the bar for immediate servicing under our <a href="https://www.microsoft.com/en-us/msrc/olsbugbar" target="_blank" rel="nofollow noopener">severity classification guidelines</a> and we will evaluate addressing them in future product versions and updates as appropriate.&nbsp;- a Microsoft spokesperson&nbsp;</p>
</blockquote>
<p>Further Microsoft provided&nbsp;the below additional context on each of the discovered flaws: &nbsp;</p>
<ul><li>Regarding ZDI-23-1578: Customers who have applied the August Security Updates are already protected.</li>
<li>Regarding ZDI-23-1581: The technique described requires an attacker to have prior access to email credentials, and no evidence was presented that it can be leveraged to gain elevation of privilege.</li>
<li>Regarding ZDI-23-1579: The technique described requires an attacker to have prior access to email credentials.</li>
<li>Regarding ZDI-23-1580: The technique described requires an attacker to have prior access to email credentials, and no evidence was presented that it can be leveraged to access sensitive customer information.</li>
</ul>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The cottage industry of YouTube obituary pirates (126 pts)]]></title>
            <link>https://www.wired.com/story/youtube-obituary-pirates/</link>
            <guid>38145054</guid>
            <pubDate>Sat, 04 Nov 2023 20:58:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/youtube-obituary-pirates/">https://www.wired.com/story/youtube-obituary-pirates/</a>, See on <a href="https://news.ycombinator.com/item?id=38145054">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="ArticlePageChunks"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p><span>A few weeks</span> ago, a friend of mine found out that a childhood classmate had died unexpectedly. They hadn’t stayed in touch, but he was sad and curious about what had happened, so he did what people do when they hear that someone they know has passed away: Googled her obituary. What he found was odd—so much so that he texted to ask if I’d ever heard of such a thing. Along with pages hosting her official obit, he saw 10 separate YouTube videos of different people casually reciting information about her death.</p><p>He’s now part of a group united by an unsettling but increasingly commonplace experience. People who lose somebody, whether it’s a dearly cherished family member or a long-lost acquaintance, must now navigate a slimy cottage industry of profiteers trying to hijack their attention. Instead of finding important funeral details or where to write a remembrance or send flowers, they are confronted by a flood of low-budget videos crudely summarizing the death notices of the person they’ve lost.</p><p><a href="https://www.wired.com/story/morbid-war-online-obituaries/">Obituary pirating</a>, where people scrape and republish obituaries from funeral homes and websites like Legacy.com, has been an ethically dubious business for years. Piracy websites are often skilled enough at search engine optimization to rise to the top of search results, and they use the resulting traffic to charge a premium for digital ads that appear next to text lifted wholesale from funeral homes, local newspapers, and other authorized obituary publishers. Occasionally, these pirate sites go a step further, manipulating bereaved people into <a data-offer-url="https://thebao.ca/notice-to-the-consumer-beware-of-online-obituary-piracy/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://thebao.ca/notice-to-the-consumer-beware-of-online-obituary-piracy/&quot;}" href="https://thebao.ca/notice-to-the-consumer-beware-of-online-obituary-piracy/" rel="nofollow noopener" target="_blank">buying sympathy gifts</a> like candles or flowers and pocketing the money.</p><p>The flood of YouTube obituary videos is a janky update on this practice. Some of these channels upload dozens of death notice summaries every hour, abandoning any pretense of looking like an official source of information in an effort to churn out as many videos as they can.</p><p><span>Although text-based obituary</span> pirating has been a scourge on the industry for years, these videos are a <a data-offer-url="https://www.marketingbrew.com/stories/2023/04/25/why-are-people-reading-obituaries-on-youtube" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.marketingbrew.com/stories/2023/04/25/why-are-people-reading-obituaries-on-youtube&quot;}" href="https://www.marketingbrew.com/stories/2023/04/25/why-are-people-reading-obituaries-on-youtube" rel="nofollow noopener" target="_blank">more recent phenomenon</a>. “This is a new one for me,” says Jessica Koth, director of public relations for the National Funeral Directors Association. “These videos are not sanctioned or authorized by the funeral home or family of the person who died. I would imagine they would be quite upsetting to the families involved.”</p><p>Unhappy posts about the practice abound on Reddit, where for the past few years people have complained about how tasteless it is and wondered why it is happening and whether they can do anything to stop it. “These people are monetizing our loved ones’ deaths,” says one such message.</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>“It’s predatory toward people who are heavily grieving,” says another. “If there’s nothing that can be done about this, that’s extremely sad.”</p><p>The more prolific channels upload new videos every few minutes. Many look nearly identical and feature men sitting alone and speaking directly to the camera. They often appear to be lounging at home. (It’s hard to verify exactly where they are; I reached out to the proprietors of several accounts, but none responded.) Others narrate obituaries over corny slideshows of candles and photos of the deceased sourced from social media. Their subscriber numbers are modest, making it all even more puzzling; on the higher end, channels will have a few thousand subscribers and millions of overall views. The highest follower count I found was slightly over 26,000; the page with the highest views had a grand total of around 1.7 million.</p><p>Sometimes these obituary YouTubers promote products in the video description, like a $225 vitamin C cream for sale on Amazon. Sometimes they just list strings of SEO-baiting keywords, like “death,” “cause of death,” “die,” “RIP,” and “what happened.” While each channel differs from the next in small ways, there’s a unifying aesthetic—everything looks rushed and careless, and there’s no hint of emotion or acknowledgement that they’re discussing someone’s greatest tragedy.</p><p>“The audio is crappy, they’ve got fans on,” funeral marketing consultant Robin Heppell says. “It’s not professionally done.”</p><p>That’s because the business model focuses on quantity over quality. Many of the videos have no views at all; when they do, they rarely crack double digits. The success or failure of individual videos isn’t important, as long as they accumulate enough views in the aggregate.</p><p>Despite their shoddiness, the obituary YouTube channels <em>are</em> sometimes amassing enough followers and views to meet YouTube’s Partner Program requirements and start making money off advertisements. (YouTube did not respond to requests for comment.)</p><p>Some of these YouTubers openly describe their projects as money-making ventures, like Quoddos Taunsvi, a Pakistan-based vlogger who <a href="https://www.youtube.com/@quddostaunsvi2300/about">brags</a> that following his videos will bring riches: “surely you will earn thounsands $ [sic] per month.” Others make glancing attempts to defend what they do. One channel includes a disclaimer about how its videos are protected by the fair use doctrine. According to intellectual property lawyer Bhamati Viswanathan, this is likely true. “Bummer for the families, but I don’t see what they could do other than appeal to the creators on grounds of taste, sensitivity, basic kindness,” she says.</p><p>The obituary pirates aren’t the only group explicitly trying to ramp up engagement on death-announcement content. <em>Editor &amp; Publisher</em> magazine, for example, hosted a <a href="https://www.youtube.com/watch?v=B2ogAXtuKoM">webinar</a> last year called “Optimizing obituaries to drive traffic and increase revenue.” Newspapers take out <a data-offer-url="https://ipublishmedia.com/biggest-surprise-targeted-obits-facebook-love/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://ipublishmedia.com/biggest-surprise-targeted-obits-facebook-love/&quot;}" href="https://ipublishmedia.com/biggest-surprise-targeted-obits-facebook-love/" rel="nofollow noopener" target="_blank">targeted ads</a> on Facebook specifically to draw more eyes to obituaries. But if local papers presumably have the community’s interests in mind when they share death notices, those reading obits on YouTube seem to be in it solely for the clicks.</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>While some YouTubers exclusively post obituary content, others intersperse obituary readings with summaries of other news. One of these channels, Event Click, recently posted photos of an orangutan throwing a possum from its enclosure in Australia’s Perth Zoo. “I would presume it did not survive the fall,” says a robotic voice narrating the video. Before I could watch that video, I had to watch an ad from Etsy. (WIRED reached out to several companies whose ads appeared before obituary videos for comment, including BetterHelp, 1-800-Flowers, and Etsy. As of this writing, none have responded.)</p><p>Anjali Bal, a marketing professor at Babson College in Massachusetts, finds these videos “morbid and weird” and views the business strategy as ultimately short-sighted. They play on a surge of interest in keywords related to recent deaths, pumping out low-effort content in an attempt to capitalize on this temporary flow of web traffic. “In the short term it boosts the page,” she says. “In the long term these things are uncomfortable for the consumer and will not lead to long-term engagement.”</p><p><span>This genre, while</span> bizarre, does have analogs, albeit ones that seem far more aligned with the public interest. Short-form video is an increasingly central source of news, including videos that repackage original reporting from elsewhere for viewers with shorter attention spans. This isn’t always a bad thing; a TikToker named Kelsey Russell, for instance, has gained an audience by <a data-offer-url="https://embedded.substack.com/p/gen-z-loves-the-newspaper-on-tiktok" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://embedded.substack.com/p/gen-z-loves-the-newspaper-on-tiktok&quot;}" href="https://embedded.substack.com/p/gen-z-loves-the-newspaper-on-tiktok" rel="nofollow noopener" target="_blank">recapping</a> &nbsp;pieces from <em>The New York Times</em> for a younger generation. While the YouTube obituary videos lack Russell’s panache or thoughtfulness, the most generous reading is that they too recap information that audiences are seeking out in an easily-digestible form.</p><p>The rise of this type of video is also directly connected to a broad and enduring cultural fascination with mortality. Obituaries are big business because people are captivated by death; this is one reason serial-killer content has turned into such a reliably popular genre. “Reading obituaries seems like a budget version of the true crime format,” says Josh Cohen, founder of the creator-economy news website TubeFilter. As Cohen points out, YouTube is filled with people copying what works. “There’s tons of knockoffs,” he says.</p><p>In the past, obituary pirates have <a href="https://www.cbc.ca/news/canada/newfoundland-labrador/afterlife-obituary-class-action-lawsuit-1.5119601">been punished</a> for their misdeeds. In 2019, for example, a Canadian website called Afterlife that scraped and republished obituaries was ordered to pay $20 million (CDN) in restitution to grieving families. In that case, the class action plaintiffs successfully argued that lifting the obituaries and accompanying photos they’d put online to honor their loved ones was copyright infringement. But in more recent examples, the YouTuber obituary pirates tend to summarize information they’ve found online, rather than repeating it verbatim. While distasteful, it’s not illegal to callously recount the details of other people’s misfortune. (If it were, several prominent true-crime podcasters would certainly be in jail.)</p><p>It seems unlikely that this trend will die down as long as there’s money to be made, even if it’s a modest sum—and the rise of AI tools may make the situation even more infuriating. Last week, Microsoft’s MSN news site was roundly castigated for an incoherent and <a data-offer-url="https://searchengineland.com/microsoft-brandon-hunter-useless-ai-obituary-432008" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://searchengineland.com/microsoft-brandon-hunter-useless-ai-obituary-432008&quot;}" href="https://searchengineland.com/microsoft-brandon-hunter-useless-ai-obituary-432008" rel="nofollow noopener" target="_blank">oddly hostile</a> obituary for former NBA player Brandon Hunter; critics assumed the garbled article was written by AI, as the company had <a href="https://www.theguardian.com/technology/2020/may/30/microsoft-sacks-journalists-to-replace-them-with-robots">laid off</a> human staffers in favor of algorithmically generated content three years earlier. (Microsoft never confirmed whether the offending story was AI-generated, but it was removed nonetheless.)</p><p>My friend’s experience struck him as strange and crass enough to ask a tech reporter—me—if I’d ever heard of it. But what is viewed as creepy now may look quaint in the future. Considering how the obituary pirates on YouTube prioritize speed and volume above coherence and dignity, it’d be more surprising if they didn’t embrace artificial intelligence in their quest to profit off curiosity and heartache.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bevy 0.12 (316 pts)]]></title>
            <link>https://bevyengine.org/news/bevy-0-12/</link>
            <guid>38144417</guid>
            <pubDate>Sat, 04 Nov 2023 19:39:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bevyengine.org/news/bevy-0-12/">https://bevyengine.org/news/bevy-0-12/</a>, See on <a href="https://news.ycombinator.com/item?id=38144417">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p><img src="https://bevyengine.org/news/bevy-0-12/cover.gif"></p>
    
    
  </div><div><p>Thanks to <strong>185</strong> contributors, <strong>567</strong> pull requests, community reviewers, and our <a href="https://bevyengine.org/community/donate"><strong>generous sponsors</strong></a>, we're happy to announce the <strong>Bevy 0.12</strong> release on <a href="https://crates.io/crates/bevy">crates.io</a>!</p>
<p>For those who don't know, Bevy is a refreshingly simple data-driven game engine built in Rust. You can check out our <a href="https://bevyengine.org/learn/book/getting-started/">Quick Start Guide</a> to try it today. It's free and open source forever! You can grab the full <a href="https://github.com/bevyengine/bevy">source code</a> on GitHub. Check out <a href="https://bevyengine.org/assets">Bevy Assets</a> for a collection of community-developed plugins, games, and learning resources.</p>
<p>To update an existing Bevy App or Plugin to <strong>Bevy 0.12</strong>, check out our <a href="https://bevyengine.org/learn/migration-guides/0.11-0.12/">0.11 to 0.12 Migration Guide</a>.</p>
<p>Since our last release a few months ago we've added a <em>ton</em> of new features, bug fixes, and quality of life tweaks, but here are some of the highlights:</p>
<ul>
<li><strong>Deferred Rendering</strong>: (Optional) support for rendering in a Deferred style, which complements Bevy's existing Forward+ renderer by adding support for new effects and different performance tradeoffs. Bevy is now a "hybrid" renderer, meaning you can use both at the same time!</li>
<li><strong>Bevy Asset V2</strong>: A brand new asset system that adds support for asset preprocessing, asset configuration (via .meta files), multiple asset sources, recursive dependency load tracking, and more!</li>
<li><strong>PCF Shadow Filtering</strong>: Bevy now has smoother shadows thanks to Percentage-Closer Filtering.</li>
<li><strong>StandardMaterial Light Transmission</strong>: Bevy's PBR material now supports light transmission, making it possible to simulate materials like glass, water, plastic, foliage, paper, wax, marble, etc.</li>
<li><strong>Material Extensions</strong>: Materials can now build on other materials. You can now easily write shaders that build on existing materials, such as Bevy's PBR StandardMaterial.</li>
<li><strong>Rusty Shader Imports</strong>: Bevy's granular shader import system now uses Rust-style imports, expanding the capabilities and usability of the import system.</li>
<li><strong>Suspend and Resume on Android</strong>: Bevy now supports suspend and resume events on Android, which was the last big missing piece in our Android story. Bevy now supports Android!</li>
<li><strong>Automatic Batching and Instancing of Draw Commands</strong>: Draw commands are now automatically batched / instanced when possible, yielding significant render performance wins.</li>
<li><strong>Renderer Optimizations</strong>: Bevy's renderer dataflow has been reworked to squeeze out more performance and prepare the way for future GPU-driven rendering.</li>
<li><strong>One Shot Systems</strong>: ECS Systems can now be run on-demand from other systems!</li>
<li><strong>UI Materials</strong>: Add custom material shaders to Bevy UI nodes.</li>
</ul>
<h2 id="deferred-rendering">Deferred Rendering
<a href="#deferred-rendering">#</a>
</h2>

<p>The two most popular "rendering styles" are:</p>
<ul>
<li><strong>Forward Rendering</strong>: do all material/lighting calculations in a single render pass
<ul>
<li><strong>Pros</strong>: Simpler to work with. Works on / performs better on more hardware. Supports MSAA. Handles transparency nicely.</li>
<li><strong>Cons</strong>: Lighting is more expensive / fewer lights supported in a scene, some rendering effects are impossible (or harder) without a prepass</li>
</ul>
</li>
<li><strong>Deferred Rendering</strong>: do one or more pre-passes that collect relevant information about a scene, then do material/lighting calculations in <em>screen space</em> in a final pass after that.
<ul>
<li><strong>Pros</strong>: Enables some rendering effects that are not possible in forward rendering. This is especially important for GI techniques, cuts down on shading cost by only shading visible fragments, can support more lights in a scene</li>
<li><strong>Cons</strong>: More complicated to work with. Requires doing prepasses, which can be more expensive than an equivalent forward renderer in some situations (although the reverse can also be true), uses more texture bandwidth (which can be prohibitive on some devices), doesn't support MSAA, transparency is harder / less straightforward.</li>
</ul>
</li>
</ul>
<p>Bevy's renderer has historically been a "forward renderer". More specifically, it is a <a href="https://bevyengine.org/news/bevy-0-7/#unlimited-point-lights">Clustered Forward / Forward+</a> renderer, which means we break the view frustum up into clusters and assign lights to those clusters, allowing us to render many more lights than a traditional forward renderer.</p>
<p>However, as Bevy has grown, it has slowly moved into "hybrid renderer" territory. In previous releases, we added a <a href="https://bevyengine.org/news/bevy-0-10/#depth-and-normal-prepass">Depth and Normal Prepass</a> to enable <a href="https://bevyengine.org/news/bevy-0-11/#temporal-anti-aliasing">TAA</a>, <a href="https://bevyengine.org/news/bevy-0-11/#screen-space-ambient-occlusion">SSAO</a>, and <a href="https://bevyengine.org/news/bevy-0-10/#shadow-mapping-using-prepass-shaders">Alpha Texture Shadow Maps</a>. We also added a Motion Vector Prepass to enable TAA.</p>
<p>In <strong>Bevy 0.12</strong> we added optional support for Deferred Rendering (building on the existing prepass work). Each material can choose whether it will go through the forward or deferred path, and this can be configured per-material-instance. Bevy also has a new <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/struct.DefaultOpaqueRendererMethod.html"><code>DefaultOpaqueRendererMethod</code></a> resource, which configures the global default. This is set to "forward" by default. The global default can be overridden per-material.</p>
<p>Lets break down the components of this deferred render:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/deferred.png" alt="deferred"></p>
<p>When deferred is enabled for the PBR <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/struct.StandardMaterial.html"><code>StandardMaterial</code></a>, the deferred prepass packs PBR information into the Gbuffer, which can be broken up into:</p>
<p><strong>Base Color</strong>
<img src="https://bevyengine.org/news/bevy-0-12/base_color.png" alt="base color"></p>
<p><strong>Depth</strong>
<img src="https://bevyengine.org/news/bevy-0-12/depth.png" alt="depth"></p>
<p><strong>Normals</strong>
<img src="https://bevyengine.org/news/bevy-0-12/normals.png" alt="normals"></p>
<p><strong>Perceptual Roughness</strong>
<img src="https://bevyengine.org/news/bevy-0-12/perceptual_roughness.png" alt="perceptual roughness"></p>
<p><strong>Metallic</strong>
<img src="https://bevyengine.org/news/bevy-0-12/metallic.png" alt="metallic"></p>
<p>The deferred prepass also produces a "deferred lighting pass ID" texture, which determines what lighting shader to run for the fragment:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/deferred_pass2.png" alt="lighting pass ID texture"></p>
<p>These are passed into the final deferred lighting shader.</p>
<p>Note that the cube in front of the flight helmet model and the ground plane are using forward rendering, which is why they are black in both of the deferred lighting textures above. This illustrates that you can use both forward and deferred materials in the same scene!</p>
<p>Note that for most use cases, we recommend using forward by default, unless a feature explicitly needs deferred or your rendering conditions benefit from deferred style. Forward has the fewest surprises and will work better on more devices.</p>
<h2 id="pcf-shadow-filtering">PCF Shadow Filtering
<a href="#pcf-shadow-filtering">#</a>
</h2>
<p>authors: @superdump (Rob Swain), @JMS55</p>
<p>Shadow aliasing is a very common problem in 3D apps:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/no_pcf.png" alt="no pcf"></p>
<p>Those "jagged lines" in the shadow are the result of the shadow map being "too small" to accurately represent the shadow from this perspective. The shadow map above is stored in a 512x512 texture, which is a lower resolution than most people will use for most of their shadows. This was selected to show a "bad" case of jaggies. Note that Bevy defaults to 2048x2048 shadowmaps.</p>
<p>One "solution" is to bump up the resolution. Here is what it looks like with a 4096x4096 shadow map.</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/no_pcf_high.png" alt="no pcf high resolution"></p>
<p>Looking better! However this still isn't a perfect solution. Large shadowmaps aren't feasible on all hardware. They are significantly more expensive. And even if you can afford super high resolution shadows, you can still encounter this issue if you place an object in the wrong place, or point your light in the wrong direction. You can use Bevy's <a href="https://bevyengine.org/news/bevy-0-10/#cascaded-shadow-maps">Cascaded Shadow Maps</a> (which are enabled by default) to cover a larger area, with higher detail close to the camera and less detail farther away. However even under these conditions, you will still probably encounter these aliasing issues.</p>
<p><strong>Bevy 0.12</strong> introduces <strong>PCF Shadow Filtering</strong> (Percentage-Closer Filtering), which is a popular technique that takes multiple samples from the shadow map and compares with an interpolated mesh surface depth-projected into the frame of reference of the light. It then calculates the percentage of samples in the depth buffer that are closer to the light than the mesh surface. In short, this creates a "blur" effect that improves shadow quality, which is especially evident when a given shadow doesn't have enough "shadow map detail".</p>
<p><strong>Bevy 0.12</strong>'s default PCF approach is the <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/enum.ShadowFilteringMethod.html#variant.Castano13"><code>ShadowMapFilter::Castano13</code></a> method by Ignacio Castaño (used in The Witness). Here it is with a 512x512 shadow map:</p>
<p><b>Drag this image to compare (Castano)</b></p>
<p><img alt="PCF On" src="https://bevyengine.org/news/bevy-0-12/pcf_castano.png">
  <img alt="PCF Off" src="https://bevyengine.org/news/bevy-0-12/no_pcf.png">
</p>
<p>Much better!</p>
<p>We also implemented the <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/enum.ShadowFilteringMethod.html#variant.Jimenez14"><code>ShadowMapFilter::Jimenez14</code></a> method by Jorge Jimenez (used in Call of Duty Advanced Warfare). This can be slightly cheaper than Castano, but it can flicker. It benefits from <a href="https://bevyengine.org/news/bevy-0-11/#temporal-anti-aliasing">Temporal Anti-Aliasing (TAA)</a> which can reduce the flickering. It can also blend shadow cascades a bit more smoothly than Castano.</p>
<p><b>Drag this image to compare (Jimenez)</b></p>
<p><img alt="PCF On" src="https://bevyengine.org/news/bevy-0-12/pcf_jimenez.png">
  <img alt="PCF Off" src="https://bevyengine.org/news/bevy-0-12/no_pcf.png">
</p>
<h2 id="standardmaterial-light-transmission"><code>StandardMaterial</code> Light Transmission
<a href="#standardmaterial-light-transmission">#</a>
</h2>
<p>author: Marco Buono (@coreh)</p>
<p>The <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/struct.StandardMaterial.html"><code>StandardMaterial</code></a> now supports a number of light transmission-related properties:</p>
<ul>
<li><code>specular_transmission</code></li>
<li><code>diffuse_transmission</code></li>
<li><code>thickness</code></li>
<li><code>ior</code></li>
<li><code>attenuation_color</code></li>
<li><code>attenuation_distance</code></li>
</ul>
<p>These allow you to more realistically represent a wide variety of physical materials, including <strong>clear and frosted glass, water, plastic, foliage, paper, wax, marble, porcelain and more</strong>.</p>
<p>Diffuse transmission is an inexpensive addition to the PBR lighting model, while specular transmission is a somewhat more resource-intensive screen-space effect, that can accurately model refraction and blur effects.</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/transmission.jpg" alt="transmission"></p>
<p>
    Different light transmission properties and their interactions with existing PBR properties.
</p>
<p>To complement the new transmission properties, a new <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/struct.TransmittedShadowReceiver.html"><code>TransmittedShadowReceiver</code></a> component has been introduced, which can be added to entities with diffuse transmissive materials to receive shadows cast from the opposite side of the mesh. This is most useful for rendering thin, two-sided translucent objects like tree leaves or paper.</p>
<p>Additionally, two extra fields have been added to the <a href="https://docs.rs/bevy/0.12.0/bevy/core_pipeline/core_3d/struct.Camera3d.html"><code>Camera3d</code></a> component: <code>screen_space_specular_transmission_quality</code> and <code>screen_space_specular_transmission_steps</code>. These are used to control the quality of the screen-space specular transmission effect (number of taps), and how many “layers of transparency” are supported when multiple transmissive objects are in front of each other.</p>
<blockquote>
<p><strong>Important:</strong> Each additional “layer of transparency” incurs in a texture copy behind the scenes, adding to the bandwidth cost, so it's recommended to keep this value as low as possible.</p>
</blockquote>
<p>Finally, importer support for the following glTF extensions has been added:</p>
<ul>
<li><code>KHR_materials_transmission</code></li>
<li><code>KHR_materials_ior</code></li>
<li><code>KHR_materials_volume</code></li>
</ul>
<p><a href="https://www.youtube.com/watch?v=t1XdxZKZ-us">Check out this video</a> to see it in action!</p>
<h3 id="compatibility">Compatibility
<a href="#compatibility">#</a>
</h3>
<p>Both specular and diffuse transmission are compatible with all supported platforms, including mobile and Web.</p>
<p>The optional <code>pbr_transmission_textures</code> Cargo feature allows using textures to modulate the <code>specular_transmission</code>, <code>diffuse_transmission</code> and <code>thickness</code> properties. It's disabled by default in order to reduce the number of texture bindings used by the standard material. (These are
severely constrained on lower-end platforms and older GPUs!)</p>
<p><a href="https://docs.rs/bevy/0.12.0/bevy/core_pipeline/prepass/struct.DepthPrepass.html"><code>DepthPrepass</code></a> and TAA can greatly improve the quality of the screen-space specular transmission effect, and are recommended to be used with it, on the platforms where they are supported.</p>
<h3 id="implementation-details">Implementation Details
<a href="#implementation-details">#</a>
</h3>
<p>Specular transmission is implemented via a new <code>Transmissive3d</code> screen space refraction phase, which joins the existing <code>Opaque3d</code>, <code>AlphaMask3d</code> and <code>Transparent3d</code> phases. During this phase, one or more snapshots of the main texture are taken, which are used as “backgrounds” for the refraction effects.</p>
<p>Each fragment's surface normal and IOR used along with the view direction to calculate a refracted ray. (Via Snell's law.)
This ray is then propagated through the mesh's volume (by a distance controlled by the <code>thickness</code> property), producing an exit point.
The “background” texture is then sampled at that point. Perceptual roughness is used along with interleaved gradient noise and multiple spiral taps, to produce a blur effect.</p>
<p>Diffuse transmission is implemented via a second, reversed and displaced fully-diffuse Lambertian lobe, which is added to the existing PBR lighting calculations. This is a simple and relatively cheap approximation, but works reasonably well.</p>
<h2 id="bevy-asset-v2">Bevy Asset V2
<a href="#bevy-asset-v2">#</a>
</h2>
<p>authors: @cart</p>
<p>Asset pipelines are a central part of the gamedev process. Bevy's old asset system was suitable for some classes of app, but it had a number of limitations that prevented it from serving the needs of other classes, especially higher end 3D apps.</p>
<p>Bevy Asset V2 is a completely new asset system that learns from the best parts of Bevy Asset V1 while adding support for a number of important scenarios: <strong>Asset Importing/Preprocessing</strong>, <strong>Asset Meta Files</strong>, <strong>Multiple Asset Sources</strong>, <strong>Recursive Asset Dependency Load Events</strong>, <strong>Async Asset I/O</strong>, <strong>Faster and More Featureful Asset Handles</strong>, and more!</p>
<p>Most existing user-facing asset code will either require no changes at all, or minimal changes. Custom <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.AssetLoader.html"><code>AssetLoader</code></a> or <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/trait.AssetReader.html"><code>AssetReader</code></a> code will need to change slightly, but generally the changes should be very minimal. Bevy Asset V2 (despite being a completely new implementation) largely just expands what Bevy is capable of.</p>
<h3 id="asset-preprocessing">Asset Preprocessing
<a href="#asset-preprocessing">#</a>
</h3>
<p><img src="https://bevyengine.org/news/bevy-0-12/image_process.png" alt="image process diagram"></p>
<p>Asset preprocessing is the ability to take an input asset of a given type, process it in some way (generally during development time), and then use the result as the final asset in your application. Think of it as an "asset compiler".</p>
<p>This enables a number of scenarios:</p>
<ul>
<li><strong>Reduce Work In Released Apps</strong>: Many assets aren't <em>composed</em> in their ideal form for release. Scenes might be defined in a human-readable text format that is slower to load. Images might be defined in formats that require more work to decode and upload to the GPU, or take up more space on the GPU when compared to GPU-friendly formats (ex: PNG images vs Basis Universal). Preprocessing enables developers to convert to release-optimal formats ahead of time, making apps start up faster, take up fewer resources, and perform better. It also enables moving computation work that <em>would</em> have been done at runtime to development time. For example, generating mipmaps for images.</li>
<li><strong>Compression</strong>: Minimize the disk space and/or bandwidth that an asset takes up in deployed apps</li>
<li><strong>Transformation</strong>: Some "asset source files" aren't in the right format by default. You can have an asset of type <code>A</code> and transform it into type <code>B</code>.</li>
</ul>
<p>If you are building an app that tests the limits of your hardware with optimal formats ... or you just want to cut down on startup / loading times, asset preprocessing is for you.</p>
<p>For an in-depth technical breakdown of the implementation we chose, check out the <a href="https://github.com/bevyengine/bevy/pull/8624">Bevy Asset V2 pull request</a>.</p>
<h3 id="enabling-pre-processing">Enabling Pre-Processing
<a href="#enabling-pre-processing">#</a>
</h3>
<p>To enable asset pre-processing, just configure your <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetPlugin.html"><code>AssetPlugin</code></a> like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span>app<span>.</span><span>add_plugins</span><span><span>(</span>DefaultPlugins<span>.</span><span>set</span><span><span>(</span>
    AssetPlugin <span><span>{</span>
        mode<span>:</span> <span>AssetMode<span>::</span></span>Processed<span>,</span>
        <span>..</span><span>default</span><span><span>(</span></span><span><span>)</span></span>
    </span><span><span>}</span></span>
</span><span><span>)</span></span></span><span><span>)</span></span>
</span></code></pre>
<p>This will configure the asset system to look for assets in the <code>imported_assets</code> folder instead of the <code>assets</code> "source folder". During development, enable the <code>asset_processor</code> cargo feature flag like this:</p>
<pre data-lang="sh"><code data-lang="sh"><span><span><span>cargo</span></span><span> run<span><span> --</span>features</span> bevy/asset_processor</span>
</span></code></pre>
<p>This will start the <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/struct.AssetProcessor.html"><code>AssetProcessor</code></a> in parallel with your app. It will run until all assets are read from their source (defaults to the <code>assets</code> folder), processed, and the results have been written to their destination (defaults to the <code>imported_assets</code> folder). This pairs with asset hot-reloading. If you make a change, this will be detected by the <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/struct.AssetProcessor.html"><code>AssetProcessor</code></a>, the asset will be reprocessed, and the result will be hot-reloaded in your app.</p>
<h3 id="should-you-enable-pre-processing-today">Should You Enable Pre-Processing Today?
<a href="#should-you-enable-pre-processing-today">#</a>
</h3>
<p>In future Bevy releases we will recommended enabling processing for the majority of apps. We don't <em>yet</em> recommend it for most use cases for a few reasons:</p>
<ol>
<li>Most of our built-in assets don't have processors implemented for them yet. The <a href="https://docs.rs/bevy/0.12.0/bevy/render/texture/struct.CompressedImageSaver.html"><code>CompressedImageSaver</code></a> is the only built-in processor and it has a bare-minimum set of features.</li>
<li>We have not implemented "asset migrations" yet. Whenever an asset changes its settings format (which is used in meta files), we need to be able to automatically migrate existing asset meta files to the new version.</li>
<li>As people adopt processing, we expect some flux as we respond to feedback.</li>
</ol>
<h3 id="incremental-and-dependency-aware">Incremental and Dependency Aware
<a href="#incremental-and-dependency-aware">#</a>
</h3>
<p><strong>Bevy Asset V2</strong> will only process assets that have changed. To accomplish this, it computes and stores hashes of each asset source file:</p>
<pre data-lang="rust"><code data-lang="rust"><span>hash<span>:</span> <span><span>(</span><span>132</span><span>,</span> <span>61</span><span>,</span> <span>201</span><span>,</span> <span>41</span><span>,</span> <span>85</span><span>,</span> <span>80</span><span>,</span> <span>72</span><span>,</span> <span>189</span><span>,</span> <span>132</span><span>,</span> <span>81</span><span>,</span> <span>252</span><span>,</span> <span>156</span><span>,</span> <span>4</span><span>,</span> <span>227</span><span>,</span> <span>196</span><span>,</span> <span>207</span></span><span><span>)</span></span><span>,</span>
</span></code></pre>
<p>It also tracks the asset dependencies used when processing an asset. If a dependency has changed, the dependant asset will also be re-processed!</p>
<h3 id="transactional-and-reliable">Transactional and Reliable
<a href="#transactional-and-reliable">#</a>
</h3>
<p><strong>Bevy Asset V2</strong> uses write-ahead logging (a technique commonly used by databases) to recover from crashes / forced exists. Whenever possible it avoids full-reprocessing and only reprocesses incomplete transactions.</p>
<p>The <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/struct.AssetProcessor.html"><code>AssetProcessor</code></a> can close (either intentionally or unintentionally) at any point in time and it will pick up right where it left off!</p>
<p>If a Bevy App asks to load an asset that is currently being processed (or re-processed), the load will asynchronously wait until both the processed asset and its meta file have been written. This ensures that a loaded asset file and meta file always "match" for a given load.</p>
<h3 id="asset-meta-files">Asset Meta Files
<a href="#asset-meta-files">#</a>
</h3>
<p>Assets now support (optional) <code>.meta</code> files. This enables configuring things like:</p>
<ul>
<li><strong>The asset "action"</strong>
<ul>
<li>This configures how Bevy's asset system should handle the asset:
<ul>
<li><code>Load</code>: Load the asset without processing</li>
<li><code>Process</code>: Pre-process the asset prior to loading</li>
<li><code>Ignore</code>: Do not process or load the asset</li>
</ul>
</li>
</ul>
</li>
<li><strong><a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.AssetLoader.html"><code>AssetLoader</code></a> settings</strong>
<ul>
<li>You can use meta files to set any <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.AssetLoader.html"><code>AssetLoader</code></a> you want</li>
<li>Configure loader settings like "how to filter an image", "adjusting the up axis in 3D scenes", etc</li>
</ul>
</li>
<li><strong><a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/trait.Process.html"><code>Process</code></a> settings</strong> (if using the <code>Process</code> action)
<ul>
<li>You can use meta files to set any <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/trait.Process.html"><code>Process</code></a> implementation you want</li>
<li>Configure processor settings like "what type of compression to use", "whether or not to generate mipmaps", etc</li>
</ul>
</li>
</ul>
<p>A meta file for an unprocessed image looks like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>(</span>
    meta_format_version<span>:</span> <span><span>"</span>1.0<span>"</span></span><span>,</span>
    asset<span>:</span> Load<span><span>(</span>
        loader<span>:</span> <span><span>"</span>bevy_render::texture::image_loader::ImageLoader<span>"</span></span><span>,</span>
        settings<span>:</span> <span><span>(</span>
            format<span>:</span> FromExtension<span>,</span>
            is_srgb<span>:</span> <span>true</span><span>,</span>
            sampler<span>:</span> <span>Default</span><span>,</span>
        </span><span><span>)</span></span><span>,</span>
    </span><span><span>)</span></span><span>,</span>
</span><span><span>)</span></span>
</span></code></pre>
<p>A meta file for an image configured to be processed looks like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>(</span>
    meta_format_version<span>:</span> <span><span>"</span>1.0<span>"</span></span><span>,</span>
    asset<span>:</span> Process<span><span>(</span>
        processor<span>:</span> <span><span>"</span>bevy_asset::processor::process::LoadAndSave&lt;bevy_render::texture::image_loader::ImageLoader, bevy_render::texture::compressed_image_saver::CompressedImageSaver&gt;<span>"</span></span><span>,</span>
        settings<span>:</span> <span><span>(</span>
            loader_settings<span>:</span> <span><span>(</span>
                format<span>:</span> FromExtension<span>,</span>
                is_srgb<span>:</span> <span>true</span><span>,</span>
                sampler<span>:</span> <span>Default</span><span>,</span>
            </span><span><span>)</span></span><span>,</span>
            saver_settings<span>:</span> <span><span>(</span></span><span><span>)</span></span><span>,</span>
        </span><span><span>)</span></span><span>,</span>
    </span><span><span>)</span></span><span>,</span>
</span><span><span>)</span></span>
</span></code></pre>
<p>If the asset processor is enabled, meta files will be automatically generated for assets.</p>
<p>The final "output" metadata for the processed image looks like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>(</span>
    meta_format_version<span>:</span> <span><span>"</span>1.0<span>"</span></span><span>,</span>
    processed_info<span>:</span> <span>Some</span><span><span>(</span><span><span>(</span>
        hash<span>:</span> <span><span>(</span><span>132</span><span>,</span> <span>61</span><span>,</span> <span>201</span><span>,</span> <span>41</span><span>,</span> <span>85</span><span>,</span> <span>80</span><span>,</span> <span>72</span><span>,</span> <span>189</span><span>,</span> <span>132</span><span>,</span> <span>81</span><span>,</span> <span>252</span><span>,</span> <span>156</span><span>,</span> <span>4</span><span>,</span> <span>227</span><span>,</span> <span>196</span><span>,</span> <span>207</span></span><span><span>)</span></span><span>,</span>
        full_hash<span>:</span> <span><span>(</span><span>81</span><span>,</span> <span>90</span><span>,</span> <span>244</span><span>,</span> <span>190</span><span>,</span> <span>16</span><span>,</span> <span>134</span><span>,</span> <span>202</span><span>,</span> <span>154</span><span>,</span> <span>3</span><span>,</span> <span>211</span><span>,</span> <span>78</span><span>,</span> <span>199</span><span>,</span> <span>216</span><span>,</span> <span>21</span><span>,</span> <span>132</span><span>,</span> <span>216</span></span><span><span>)</span></span><span>,</span>
        process_dependencies<span>:</span> <span><span>[</span><span>]</span></span><span>,</span>
    </span><span><span>)</span></span></span><span><span>)</span></span><span>,</span>
    asset<span>:</span> Load<span><span>(</span>
        loader<span>:</span> <span><span>"</span>bevy_render::texture::image_loader::ImageLoader<span>"</span></span><span>,</span>
        settings<span>:</span> <span><span>(</span>
            format<span>:</span> Format<span><span>(</span>Basis</span><span><span>)</span></span><span>,</span>
            is_srgb<span>:</span> <span>true</span><span>,</span>
            sampler<span>:</span> <span>Default</span><span>,</span>
        </span><span><span>)</span></span><span>,</span>
    </span><span><span>)</span></span><span>,</span>
</span><span><span>)</span></span>
</span></code></pre>
<p>This is what is written to the <code>imported_assets</code> folder.</p>
<p>Note that the <code>Process</code> asset mode has changed to <code>Load</code>. This is because in the released app, we will load the final processed image "normally" like any other image asset. Note that in this case, the input and the output asset <em>both</em> use <a href="https://docs.rs/bevy/0.12.0/bevy/render/texture/struct.ImageLoader.html"><code>ImageLoader</code></a>. However the processed asset <em>can</em> use a different loader if the context demands it. Also note the addition of the <code>processed_info</code> metadata, which is used to determine if an asset needs to be reprocessed.</p>
<p>The final processed asset and metadata files can be viewed and interacted with like any other file. However they are intended to be read-only. Configuration should happen on the <em>source asset</em>, not the <em>final processed asset</em>.</p>
<h3 id="compressedimagesaver"><code>CompressedImageSaver</code>
<a href="#compressedimagesaver">#</a>
</h3>
<p><img src="https://bevyengine.org/news/bevy-0-12/processed_sponza.png" alt="processed sponza"></p>
<p>Sponza scene with textures processed into Basis Universal (with mipmaps) using Bevy Asset V2</p>
<p><strong>Bevy 0.12</strong> ships with a barebones <a href="https://docs.rs/bevy/0.12.0/bevy/render/texture/struct.CompressedImageSaver.html"><code>CompressedImageSaver</code></a> that writes images to <a href="https://github.com/BinomialLLC/basis_universal">Basis Universal</a> (a GPU-friendly image interchange format) and generates <a href="https://en.wikipedia.org/wiki/Mipmap">mipmaps</a>. Mipmaps reduce aliasing artifacts when sampling images from different distances. This fills an important gap, as Bevy previously had no way to generate mipmaps on its own (it relied on external tooling). This can be enabled with the <code>basis-universal</code> cargo feature.</p>
<h3 id="preprocessing-is-optional">Preprocessing is Optional!
<a href="#preprocessing-is-optional">#</a>
</h3>
<p>Despite eventually (<a href="https://bevyengine.org/news/bevy-0-12/#should-you-enable-pre-processing-today">in future Bevy releases</a>) recommending that most people enable asset processing, we also acknowledge that Bevy is used in a variety of applications. Asset processing introduces additional complexity and workflow changes that some people will not want!</p>
<p>This is why Bevy offers two asset modes:</p>
<ul>
<li><a href="https://docs.rs/bevy/0.12.0/bevy/asset/enum.AssetMode.html"><code>AssetMode::Unprocessed</code></a>: Assets will be loaded directly from the asset source folder (defaults to <code>assets</code>) without any preprocessing. They are assumed to be in their "final format". This is the mode/workflow Bevy users are currently used to.</li>
<li><a href="https://docs.rs/bevy/0.12.0/bevy/asset/enum.AssetMode.html"><code>AssetMode::Processed</code></a>: Assets will be pre-processed at development time. They will be read from their source folder (defaults to <code>assets</code>) and then written to their destination folder (defaults to <code>imported_assets</code>).</li>
</ul>
<p>To enable this, Bevy uses a novel approach to assets: the difference between a processed and unprocessed asset is perspective. They both use the same <code>.meta</code> format and they use the same <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.AssetLoader.html"><code>AssetLoader</code></a> interface.</p>
<p>A <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/trait.Process.html"><code>Process</code></a> implementation can be defined using arbitrary logic, but we heavily encourage using the <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/struct.LoadAndSave.html"><code>LoadAndSave</code></a> <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/trait.Process.html"><code>Process</code></a> implementation. <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/struct.LoadAndSave.html"><code>LoadAndSave</code></a> takes any <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.AssetLoader.html"><code>AssetLoader</code></a> and passes the results to an <a href="https://docs.rs/bevy/0.12.0/bevy/asset/saver/trait.AssetSaver.html"><code>AssetSaver</code></a>.</p>
<p>That means if you already have an <a href="https://docs.rs/bevy/0.12.0/bevy/render/texture/struct.ImageLoader.html"><code>ImageLoader</code></a>, which loads images, all you need to do is write some <code>ImageSaver</code> which will write the image in some optimized format. This both saves development work and makes it easy to support both processed and unprocessed scenarios.</p>
<h3 id="built-to-run-anywhere">Built To Run Anywhere
<a href="#built-to-run-anywhere">#</a>
</h3>
<p>Unlike many other asset processors in the gamedev space, Bevy Asset V2's <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/struct.AssetProcessor.html"><code>AssetProcessor</code></a> is intentionally architected to run on any platform. It doesn't use platform-limited databases or require the ability/permission to run a networked server. It can be deployed alongside a released app if your application logic requires processing at runtime.</p>
<p>One notable exception: we still need to make a few changes before it can run on the web, but it was built with web support in mind.</p>
<h3 id="recursive-asset-dependency-load-events">Recursive Asset Dependency Load Events
<a href="#recursive-asset-dependency-load-events">#</a>
</h3>
<p>The <a href="https://docs.rs/bevy/0.12.0/bevy/asset/enum.AssetEvent.html"><code>AssetEvent</code></a> enum now has an <a href="https://docs.rs/bevy/0.12.0/bevy/asset/enum.AssetEvent.html"><code>AssetEvent::LoadedWithDependencies</code></a> variant. This is emitted when an <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.Asset.html"><code>Asset</code></a>, its dependencies, and all descendant / recursive dependencies have loaded.</p>
<p>This makes it easy to wait until an <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.Asset.html"><code>Asset</code></a> is "fully loaded" before doing something.</p>
<h3 id="multiple-asset-sources">Multiple Asset Sources
<a href="#multiple-asset-sources">#</a>
</h3>
<p>It is now possible to register more than one <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/struct.AssetSource.html"><code>AssetSource</code></a> (which replaces the old monolithic "asset provider" system).</p>
<p>Loading from the "default" <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/struct.AssetSource.html"><code>AssetSource</code></a> looks exactly like it does in previous Bevy versions:</p>
<pre data-lang="rust"><code data-lang="rust"><span>sprite<span>.</span>texture <span>=</span> assets<span>.</span><span>load</span><span><span>(</span><span><span>"</span>path/to/sprite.png<span>"</span></span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>But in <strong>Bevy 0.12</strong> you can now register named <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/struct.AssetSource.html"><code>AssetSource</code></a> entries. For example you could register a <code>remote</code> <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/struct.AssetSource.html"><code>AssetSource</code></a> that loads assets from an HTTP server:</p>
<pre data-lang="rust"><code data-lang="rust"><span>sprite<span>.</span>texture <span>=</span> assets<span>.</span><span>load</span><span><span>(</span><span><span>"</span>remote://path/to/sprite.png<span>"</span></span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>Features like hot-reloading, meta files, and asset processing are supported across all sources.</p>
<p>You can register a new <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/struct.AssetSource.html"><code>AssetSource</code></a> like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> reads assets from the "other" folder, rather than the default "assets" folder
</span>app<span>.</span><span>register_asset_source</span><span><span>(</span>
    <span><span>//</span> This is the "name" of the new source, used in asset paths.
</span>    <span><span>//</span> Ex: "other://path/to/sprite.png"
</span>    <span><span>"</span>other<span>"</span></span><span>,</span>
    <span><span>//</span> This is a repeatable source builder. You can configure readers, writers,
</span>    <span><span>//</span> processed readers, processed writers, asset watchers, etc.
</span>    <span>AssetSource<span>::</span></span>build<span><span>(</span></span><span><span>)</span></span>
        <span>.</span><span>with_reader</span><span><span>(</span><span><span><span>|</span></span></span><span><span><span>|</span></span> </span><span><span>Box</span><span><span>::</span></span>new<span><span>(</span><span>FileAssetReader<span>::</span></span>new<span><span>(</span><span><span>"</span>other<span>"</span></span></span><span><span>)</span></span></span><span><span>)</span></span></span></span><span><span>)</span></span>
    </span><span><span>)</span></span>
)
</span></code></pre>
<h3 id="embedded-assets">Embedded Assets
<a href="#embedded-assets">#</a>
</h3>
<p>One of the features motivating <strong>Multiple Asset Sources</strong> was improving our "embedded-in-binary" asset loading. The old <code>load_internal_asset!</code> approach had a number of issues (see the relevant section in <a href="https://github.com/bevyengine/bevy/pull/9885">this PR</a>).</p>
<p>The old system looked like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span>pub</span> <span>const</span> <span>MESH_SHADER_HANDLE</span><span>:</span> <span>Handle<span>&lt;</span>Shader<span>&gt;</span></span> <span>=</span> <span>Handle<span>::</span></span>weak_from_u128<span><span>(</span><span>3252377289100772450</span></span><span><span>)</span></span><span>;</span>

<span>load_internal_asset!</span><span><span>(</span>app<span>,</span> <span>MESH_SHADER_HANDLE</span><span>,</span> <span><span>"</span>mesh.wgsl<span>"</span></span><span>,</span> <span>Shader<span>::</span></span>from_wgsl</span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>This required a lot of boilerplate and didn't integrate cleanly with the rest of the asset system. The <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetServer.html"><code>AssetServer</code></a> was not aware of these assets, hot-reloading required a special-cased second <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetServer.html"><code>AssetServer</code></a>, and you couldn't load assets using an <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.AssetLoader.html"><code>AssetLoader</code></a> (they had to be constructed in memory). Not ideal!</p>
<p>To prove out the <strong>Multiple Asset Sources</strong> implementation, we built a new <code>embedded</code> <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/struct.AssetSource.html"><code>AssetSource</code></a>, which replaces the old <code>load_interal_asset!</code> system with something that naturally fits into the asset system:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> Called in `crates/bevy_pbr/src/render/mesh.rs`
</span><span>embedded_asset!</span><span><span>(</span>app<span>,</span> <span><span>"</span>mesh.wgsl<span>"</span></span></span><span><span>)</span></span><span>;</span>

<span><span>//</span> later in the app
</span><span>let</span> shader<span>:</span> <span>Handle<span>&lt;</span>Shader<span>&gt;</span></span> <span>=</span> asset_server<span>.</span><span>load</span><span><span>(</span><span><span>"</span>embedded://bevy_pbr/render/mesh.wgsl<span>"</span></span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>That is a lot less boilerplate than the old approach!</p>
<p>And because the <code>embedded</code> source is just like any other asset source, it can support hot-reloading cleanly ... unlike the old system. To hot-reload assets embedded in the binary (ex: to get live updates on a shader you have embedded in the binary), just enable the new <code>embedded_watcher</code> cargo feature.</p>
<p>Much better!</p>
<h3 id="extendable">Extendable
<a href="#extendable">#</a>
</h3>
<p>Almost everything in <strong>Bevy Asset V2</strong> can be extended with trait impls:</p>
<ul>
<li><strong><a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.Asset.html"><code>Asset</code></a></strong>: Define new asset types</li>
<li><strong><a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/trait.AssetReader.html"><code>AssetReader</code></a></strong>: Define custom <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/struct.AssetSource.html"><code>AssetSource</code></a> read logic</li>
<li><strong><a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/trait.AssetWriter.html"><code>AssetWriter</code></a></strong>: Define custom <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/struct.AssetSource.html"><code>AssetSource</code></a> write logic</li>
<li><strong><a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/trait.AssetWatcher.html"><code>AssetWatcher</code></a></strong>: Define custom <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/struct.AssetSource.html"><code>AssetSource</code></a> watching / hot-reloading logic</li>
<li><strong><a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.AssetLoader.html"><code>AssetLoader</code></a></strong>: Define custom load logic for a given <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.Asset.html"><code>Asset</code></a> type</li>
<li><strong><a href="https://docs.rs/bevy/0.12.0/bevy/asset/saver/trait.AssetSaver.html"><code>AssetSaver</code></a></strong>: Define custom save logic for a given <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.Asset.html"><code>Asset</code></a> type</li>
<li><strong><a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/trait.Process.html"><code>Process</code></a></strong>: Define fully bespoke processor logic (or use the more opinionated <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/struct.LoadAndSave.html"><code>LoadAndSave</code></a> <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/trait.Process.html"><code>Process</code></a> impl)</li>
</ul>
<h3 id="async-asset-i-o">Async Asset I/O
<a href="#async-asset-i-o">#</a>
</h3>
<p>The new <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/trait.AssetReader.html"><code>AssetReader</code></a> and <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/trait.AssetWriter.html"><code>AssetWriter</code></a> APIs are async! This means naturally async backends (like networked APIs) can directly call <code>await</code> on futures.</p>
<p>The filesystem impls (such as <a href="https://docs.rs/bevy/0.12.0/bevy/asset/io/file/struct.FileAssetReader.html"><code>FileAssetReader</code></a>) offload file IO to a separate thread and the future resolves when the file operation has finished.</p>
<h3 id="improved-hot-reloading-workflow">Improved Hot-Reloading Workflow
<a href="#improved-hot-reloading-workflow">#</a>
</h3>
<p>Previous versions of Bevy required manually enabling asset hot-reloading in your app code (in addition to enabling the <code>filesystem_watcher</code> cargo feature):</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> Enabling hot reloading in old versions of Bevy
</span>app<span>.</span><span>add_plugins</span><span><span>(</span>DefaultPlugins<span>.</span><span>set</span><span><span>(</span><span>AssetPlugin<span>::</span></span>default<span><span>(</span></span><span><span>)</span></span><span>.</span><span>watch_for_changes</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span></span><span><span>)</span></span>
</span></code></pre>
<p>This was suboptimal because released versions of apps generally don't want filesystem watching enabled.</p>
<p>In <strong>Bevy 0.12</strong> we've improved this workflow by making the new <code>file_watcher</code> cargo feature enable file watching in your app by default. During development, just run your app with the feature enabled:</p>
<pre data-lang="sh"><code data-lang="sh"><span><span><span>cargo</span></span><span> run<span><span> --</span>features</span> bevy/file_watcher</span>
</span></code></pre>
<p>When releasing, just omit that feature. No code changes required!</p>
<pre data-lang="sh"><code data-lang="sh"><span><span><span>cargo</span></span><span> build<span><span> --</span>release</span></span>
</span></code></pre>
<h3 id="better-asset-handles">Better Asset Handles
<a href="#better-asset-handles">#</a>
</h3>
<p>Asset handles now use a single <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc</code></a> at their core to manage the lifetime of an asset. This simplifies the internals significantly and also enables us to make more asset information available directly from handles.</p>
<p>Notably, in <strong>Bevy 0.12</strong> we use this to provide direct <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetPath.html"><code>AssetPath</code></a> access from the <a href="https://docs.rs/bevy/0.12.0/bevy/asset/enum.Handle.html"><code>Handle</code></a>:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> Previous version of Bevy
</span><span>let</span> path <span>=</span> asset_server<span>.</span><span>get_handle_path</span><span><span>(</span><span>&amp;</span>handle</span><span><span>)</span></span><span>;</span>

<span><span>//</span> Bevy 0.12
</span><span>let</span> path <span>=</span> handle<span>.</span><span>path</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>Handles now also use a smaller / cheaper-to-look-up <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetIndex.html"><code>AssetIndex</code></a> internally, which uses generational indices to look up assets in dense storage.</p>
<h3 id="true-copy-on-write-asset-paths">True Copy-on-Write Asset Paths
<a href="#true-copy-on-write-asset-paths">#</a>
</h3>
<p>The <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetServer.html"><code>AssetServer</code></a> and <a href="https://docs.rs/bevy/0.12.0/bevy/asset/processor/struct.AssetProcessor.html"><code>AssetProcessor</code></a> do a lot of <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetPath.html"><code>AssetPath</code></a> cloning (across many threads). In previous versions of Bevy, <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetPath.html"><code>AssetPath</code></a> was backed by Rust's <a href="https://doc.rust-lang.org/std/borrow/enum.Cow.html"><code>Cow</code></a> type. However in Rust, cloning an "owned" <a href="https://doc.rust-lang.org/std/borrow/enum.Cow.html"><code>Cow</code></a> results in a clone of the internal value. This is <em>not</em> the "clone on write" behavior we want for <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetPath.html"><code>AssetPath</code></a>. We use <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetPath.html"><code>AssetPath</code></a> across threads, so we <em>need</em> to start with an "owned" value.</p>
<p>To prevent all of this cloning and re-allocating of strings, we've built our own <a href="https://docs.rs/bevy/0.12.0/bevy/utils/enum.CowArc.html"><code>CowArc</code></a> type, which <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetPath.html"><code>AssetPath</code></a> uses internally. It has two tricks up its sleeve:</p>
<ol>
<li>The "owned" variant is an <code>Arc&lt;str&gt;</code>, which we can cheaply clone without reallocating the string.</li>
<li>Almost <em>all</em> <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetPath.html"><code>AssetPath</code></a> values defined in code come from a <code>&amp;'static str</code>. We've created a special <a href="https://docs.rs/bevy/0.12.0/bevy/utils/enum.CowArc.html#variant.Static"><code>CowArc::Static</code></a> variant that retains this static-ness, meaning we do <em>zero</em> allocations even when turning a borrow into an "owned <a href="https://docs.rs/bevy/0.12.0/bevy/asset/struct.AssetPath.html"><code>AssetPath</code></a>".</li>
</ol>
<h2 id="suspend-and-resume-on-android">Suspend and Resume on Android
<a href="#suspend-and-resume-on-android">#</a>
</h2>
<p>authors: @mockersf</p>
<p>On Android, applications no longer crash on suspend. Instead, they are paused, and no systems
will run until the application is resumed.</p>
<p>This resolves the last "big" showstopper for Android apps! Bevy now supports Android!</p>

<p>Background tasks working in other threads, like playing audio, won't be stopped. When the
application will be suspended, a <a href="https://docs.rs/bevy/0.12.0/bevy/window/enum.Lifetime.html"><code>Lifetime</code></a> event <code>ApplicationLifetime::Suspended</code> is sent,
corresponding to the <a href="https://developer.android.com/reference/android/app/Activity#onStop()"><code>onStop()</code></a> callback. You should take care to pause tasks that shouldn't
run in the background, and resume them when receiving the <code>ApplicationLifetime::Resumed</code> event
(corresponding to the <a href="https://developer.android.com/reference/android/app/Activity#onRestart()"><code>onRestart()</code></a> callback).</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span><span>fn</span> </span><span>handle_lifetime_events</span></span><span><span><span>(</span>
    <span>mut</span> <span>lifetime_events</span><span>:</span> <span>EventReader<span>&lt;</span>ApplicationLifetime<span>&gt;</span></span>,
    <span>music_controller</span><span>:</span> <span>Query<span>&lt;</span><span>&amp;</span>AudioSink<span>&gt;</span></span>,
</span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    <span>for</span> event <span>in</span> lifetime_events<span>.</span><span>read</span><span><span>(</span></span><span><span>)</span></span> <span><span>{</span>
        <span>match</span> event <span><span>{</span>
            <span><span>//</span> Upon receiving the `Suspended` event, the application has 1 frame before it is paused
</span>            <span><span>//</span> As audio happens in an independent thread, it needs to be stopped
</span>            <span>ApplicationLifetime<span>::</span></span>Suspended <span>=&gt;</span> music_controller<span>.</span><span>single</span><span><span>(</span></span><span><span>)</span></span><span>.</span><span>pause</span><span><span>(</span></span><span><span>)</span></span><span>,</span>
            <span><span>//</span> On `Resumed``, audio can continue playing
</span>            <span>ApplicationLifetime<span>::</span></span>Resumed <span>=&gt;</span> music_controller<span>.</span><span>single</span><span><span>(</span></span><span><span>)</span></span><span>.</span><span>play</span><span><span>(</span></span><span><span>)</span></span><span>,</span>
            <span><span>//</span> `Started` is the only other event for now, more to come in the next Bevy version
</span>            <span>_</span> <span>=&gt;</span> <span><span>(</span></span><span><span>)</span></span><span>,</span>
        </span><span><span>}</span></span>
    </span><span><span>}</span></span>
</span><span><span>}</span></span></span>
</span></code></pre>
<h2 id="material-extensions">Material Extensions
<a href="#material-extensions">#</a>
</h2>
<p>authors: @robtfm</p>
<p>Bevy has a powerful shader import system, allowing modular (and granular) shader code reuse. In previous versions of Bevy, this meant that in theory, you could import Bevy's PBR shader logic and use it in your own shaders. However in practice this was challenging, as you had to re-wire everything up yourself, which required intimate knowledge of the base material. For complicated materials like Bevy's PBR <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/struct.StandardMaterial.html"><code>StandardMaterial</code></a>, this was full of boilerplate, resulted in code duplication, and was prone to errors.</p>
<p>In <strong>Bevy 0.12</strong>, we've built a <strong>Material Extensions</strong> system, which enables defining new materials that build on existing materials:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/material_extension.png" alt="material extension"></p>
<p>This is accomplished via a new <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/struct.ExtendedMaterial.html"><code>ExtendedMaterial</code></a> type:</p>
<pre data-lang="rust"><code data-lang="rust"><span>app<span>.</span><span>add_plugin</span><span><span>(</span>
    <span>MaterialPlugin<span>::</span></span><span><span>&lt;</span><span>ExtendedMaterial<span>&lt;</span>StandardMaterial, QuantizedMaterial<span>&gt;</span></span><span>&gt;</span></span><span><span>::</span></span>default<span><span>(</span></span><span><span>)</span></span>
</span><span><span>)</span></span><span>;</span>

<span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>Asset<span>,</span> AsBindGroup<span>,</span> TypePath<span>,</span> Debug<span>,</span> Clone</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>struct</span> </span><span><span>QuantizedMaterial</span> </span><span><span><span>{</span>
    <span><span>//</span> Start at a high binding number to ensure bindings don't conflict
</span>    <span><span>//</span> with the base material
</span>    <span><span>#</span><span>[</span><span>uniform</span><span><span><span>(</span></span></span><span><span>100</span></span><span><span><span>)</span></span></span><span>]</span></span>
    <span>quantize_steps</span><span>:</span> <span>u32</span>,
</span><span><span>}</span></span></span>

<span><span>impl</span> </span><span>MaterialExtension <span>for</span></span><span> <span>QuantizedMaterial</span> </span><span><span><span>{</span>
    <span><span><span>fn</span> </span><span>fragment_shader</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> ShaderRef</span> </span><span><span><span>{</span>
        <span><span>"</span>quantized_material.wgsl<span>"</span></span><span>.</span><span>into</span><span><span>(</span></span><span><span>)</span></span>
    </span><span><span>}</span></span></span>
</span><span><span>}</span></span></span>

<span>let</span> material <span>=</span> <span>ExtendedMaterial<span>&lt;</span>StandardMaterial, QuantizedMaterial<span>&gt;</span></span> <span><span>{</span>
    base<span>:</span> <span>StandardMaterial<span>::</span></span>from<span><span>(</span><span>Color<span>::</span></span>rgb<span><span>(</span><span>0.</span><span>1</span><span>,</span> <span>0.</span><span>1</span><span>,</span> <span>0.</span><span>8</span></span><span><span>)</span></span></span><span><span>)</span></span><span>,</span>
    extension<span>:</span> QuantizedMaterial <span><span>{</span> quantize_steps<span>:</span> <span>2</span> </span><span><span>}</span></span><span>,</span>
</span><span><span>}</span></span><span>;</span>
</span></code></pre>
<p>We also paired this with some <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/struct.StandardMaterial.html"><code>StandardMaterial</code></a> shader refactors to make it much easier to pick and choose which parts you want:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> quantized_material.wgsl
</span>
<span><span>struct</span> </span><span><span>QuantizedMaterial</span> </span><span><span><span>{</span>
    <span>quantize_steps</span><span>:</span> <span>u32</span>,
</span><span><span>}</span></span></span>

<span>@</span><span>group</span><span><span>(</span><span>1</span></span><span><span>)</span></span> <span>@</span><span>binding</span><span><span>(</span><span>100</span></span><span><span>)</span></span>
<span>var<span>&lt;</span>uniform<span>&gt;</span></span> my_extended_material<span>:</span> QuantizedMaterial<span>;</span>

<span>@</span>fragment
<span><span><span>fn</span> </span><span>fragment</span></span><span><span><span>(</span>
    <span>input</span><span>:</span> VertexOutput,
    @builtin<span><span>(</span></span><span><span>front_facing</span></span><span><span>)</span></span> <span>is_front</span><span>:</span> <span>bool</span>,
</span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> FragmentOutput</span> </span><span><span><span>{</span>
    <span><span>//</span> Generate a PbrInput struct from the StandardMaterial bindings
</span>    var pbr_input <span>=</span> <span>pbr_input_from_standard_material</span><span><span>(</span>input<span>,</span> is_front</span><span><span>)</span></span><span>;</span>

    <span><span>//</span> Alpha discard
</span>    pbr_input<span>.</span>material<span>.</span>base_color <span>=</span> <span>alpha_discard</span><span><span>(</span>
        pbr_input<span>.</span>material<span>,</span>
        pbr_input<span>.</span>material<span>.</span>base_color
    </span><span><span>)</span></span><span>;</span>

    var out<span>:</span> FragmentOutput<span>;</span>

    <span><span>//</span> Apply lighting
</span>    out<span>.</span>color <span>=</span> <span>apply_pbr_lighting</span><span><span>(</span>pbr_input</span><span><span>)</span></span><span>;</span>

    <span><span>//</span> Our "quantize" effect
</span>    out<span>.</span>color <span>=</span> <span>vec4<span>&lt;</span><span>f32</span><span>&gt;</span></span><span><span>(</span><span>vec4<span>&lt;</span><span>u32</span><span>&gt;</span></span><span><span>(</span>out<span>.</span>color <span>*</span> <span>f32</span><span><span>(</span>my_extended_material<span>.</span>quantize_steps</span><span><span>)</span></span></span><span><span>)</span></span></span><span><span>)</span></span> <span>/</span> <span>f32</span><span><span>(</span>my_extended_material<span>.</span>quantize_steps</span><span><span>)</span></span><span>;</span>

    <span><span>//</span> Apply in-shader post processing.
</span>    <span><span>//</span> Ex: fog, alpha-premultiply, etc. For non-hdr cameras: tonemapping and debanding
</span>    out<span>.</span>color <span>=</span> <span>main_pass_post_lighting_processing</span><span><span>(</span>pbr_input<span>,</span> out<span>.</span>color</span><span><span>)</span></span><span>;</span>

    <span>return</span> out<span>;</span>
</span><span><span>}</span></span></span>
</span></code></pre>
<p>This <em>vastly</em> simplifies writing custom PBR materials, making it accessible to pretty much everyone!</p>
<h2 id="automatic-batching-and-instancing-of-draw-commands">Automatic Batching and Instancing of Draw Commands
<a href="#automatic-batching-and-instancing-of-draw-commands">#</a>
</h2>
<p>authors: @superdump (Rob Swain)</p>
<p><strong>Bevy 0.12</strong> now automatically batches/instances draw commands where possible. This cuts down the number of draw calls, which yields significant performance wins!</p>
<p>This required a number of architectural changes, including how we store and access per-entity mesh data (more on this later).</p>
<p>Here are some benches of the old unbatched approach (0.11) to the new batched approach (0.12):</p>
<h3 id="2d-mesh-bevymark-frames-per-second-more-is-better">2D Mesh Bevymark (frames per second, more is better)
<a href="#2d-mesh-bevymark-frames-per-second-more-is-better">#</a>
</h3>
<p>This renders 160,000 entities with textured quad meshes (160 groups of 1,000 entities each, each group sharing a material). This means we can batch each group, resulting in only 160 instanced draw calls when batching is enabled.</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/0.12-2DMeshes.svg" alt="0.12-2DMeshes"></p>
<p>Tested on an M1 Max, limiting the BatchedUniformBuffer batch size to 1 versus how it works in 0.12.</p>
<h3 id="3d-mesh-many-cubes-frames-per-second-more-is-better">3D Mesh "Many Cubes" (frames per second, more is better)
<a href="#3d-mesh-many-cubes-frames-per-second-more-is-better">#</a>
</h3>
<p>This renders 160,000 cubes, of which ~11,700 are visible in the view. These are drawn using a single instanced draw of all visible cubes which enables up to <strong>100% increase in frame rate (2x)</strong>!</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/0.12-3DMeshes.svg" alt="0.12-3DMeshes"></p>
<p>Tested on an M1 Max, limiting the BatchedUniformBuffer batch size to 1 versus how it works in 0.12.</p>
<p>These performance benefits can be leveraged on all platforms, including WebGL2!</p>
<h3 id="what-can-be-batched">What can be batched?
<a href="#what-can-be-batched">#</a>
</h3>
<p>Batching/Instancing can only happen for GPU data that doesn't require "rebinding" (binding is making data available to shaders / pipelines, which incurs a runtime cost). This means if something like a pipeline (shaders), bind group (shader-accessible bound data), vertex / index buffer (mesh) is different, it cannot be batched.</p>
<p>From a high level, currently entities with the same material and mesh can be batched.</p>
<p>We are investigating ways to make more data accessible without rebinds, such as bindless textures, combining meshes into larger buffers, etc.</p>
<h3 id="opting-out">Opting Out
<a href="#opting-out">#</a>
</h3>
<p>If you would like to opt out an entity from automatic batching, you can add the new <a href="https://docs.rs/bevy/0.12.0/bevy/render/batching/struct.NoAutomaticBatching.html"><code>NoAutomaticBatching</code></a> component to it.</p>
<p>This is generally for cases where you are doing custom, non-standard renderer features that don't play nicely with batching's assumptions. For example, it assumes view bindings are constant across draws and that Bevy's-built-in entity batching logic is used.</p>
<h2 id="the-road-to-gpu-driven-rendering">The Road to GPU-driven Rendering
<a href="#the-road-to-gpu-driven-rendering">#</a>
</h2>
<p>authors: @superdump (Rob Swain), @james-j-obrien, @JMS55, @inodentry, @robtfm, @nicopap, @teoxoy, @IceSentry, @Elabajaba</p>
<p>Bevy's renderer performance for 2D and 3D meshes can improve a lot. There are bottlenecks on both the CPU and GPU side, which can be lessened to give significantly higher frame rates. As always with Bevy, we want to make the most of the platforms you use, from the constraints of WebGL2 and mobile devices, to the highest-end native discrete graphics cards. A solid foundation can support all of this.</p>
<p>In <strong>Bevy 0.12</strong> we have started reworking rendering data structures, data flow, and draw patterns to unlock new optimizations. This enabled the <strong>Automatic Batching and Instancing</strong> we landed in <strong>Bevy 0.12</strong> and also helps pave the way for other significant wins in the future, such as GPU-driven rendering. We aren't quite ready for GPU-driven rendering, but we've started down that path in <strong>Bevy 0.12</strong>!</p>
<h3 id="what-are-cpu-and-gpu-driven-rendering">What are CPU and GPU-driven rendering?
<a href="#what-are-cpu-and-gpu-driven-rendering">#</a>
</h3>
<p>CPU-driven rendering is where draw commands are created on the CPU. In Bevy this means "in Rust code", more specifically in render graph nodes. This is how Bevy currently kicks off draws.</p>
<p>In GPU-driven rendering, the draw commands are encoded on the GPU by <a href="https://www.khronos.org/opengl/wiki/Compute_Shader">compute shaders</a>. This leverages GPU parallelism, and unlocks more advanced culling optimizations that are infeasible to do on the CPU, among many other methods that bring large performance benefits.</p>
<h3 id="what-needs-to-change">What needs to change?
<a href="#what-needs-to-change">#</a>
</h3>
<p>Historically Bevy's general GPU data pattern has been to bind each piece of data per-entity and issue a draw call per-entity. In some cases we did store data in uniform buffers in "array style" and accessed with dynamic offsets, but this still resulted in rebinding at each offset.</p>
<p>All of this rebinding has performance implications, both on the CPU and the GPU. On the CPU, it means encoding draw commands has many more steps to process, taking more time than necessary. On the GPU (and in the graphics API), it means many more rebinds and separate draw commands.</p>
<p>Avoiding rebinding is both a big performance benefit for CPU-driven rendering and is necessary to enable GPU-driven rendering.</p>
<p>To avoid rebinds, the general data pattern we are aiming for is:</p>
<ul>
<li>For each data type (meshes, materials, transforms, textures), create a single array (or a small number of arrays) containing all of the items of that data type</li>
<li>Bind these arrays a small number of times (ideally once), avoiding per-entity/per-draw rebinds</li>
</ul>
<p>In <strong>Bevy 0.12</strong> we've started this process in earnest! We've made a number of architectural changes that are already yielding fruit. Thanks to these changes, we can now <a href="https://bevyengine.org/news/bevy-0-12/#automatic-batching-and-instancing-of-draw-commands">automatically batch and instance draws</a> for entities with the exact same mesh and material. And as we progress further down this path, we can batch/instance across a wider variety of cases, cutting out more and more CPU work until eventually we are "fully GPU-driven".</p>
<h3 id="reorder-render-sets">Reorder Render Sets
<a href="#reorder-render-sets">#</a>
</h3>
<p>authors: @superdump (Rob Swain), @james-j-obrien, @inodentry</p>
<p>The order of draws needs to be known for some methods of instanced draws so that the data can be laid out, and looked up in order. For example, when per-instance data is stored in an instance-rate vertex buffer.</p>
<p>The render set order before <strong>Bevy 0.12</strong> caused some problems with this as data had to be prepared (written to the GPU) before knowing the draw order. Not ideal when our plan is to have an ordered list of entity data on the GPU! The previous order of sets was:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/RenderSets-0.11.svg" alt="RenderSets-0.11"></p>
<p>This caused friction (and suboptimal instancing) in a number of current (and planned) renderer features. Most notably in previous versions of Bevy, it caused these problems for sprite batching.</p>
<p>The new render set order in 0.12 is:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/RenderSets-0.12.svg" alt="RenderSets-0.12"></p>
<p><code>PrepareAssets</code> was introduced because we only want to queue entities for drawing if their assets have been prepared. Per-frame data preparation still happens in the <code>Prepare</code> set, specifically in its <code>PrepareResources</code> subset. That is now after <code>Queue</code> and <code>Sort</code>, so the order of draws is known. This also made a lot more sense for batching, as it is now known at the point of batching whether an entity that is of another type in the render phase needs to be drawn. Bind groups now have a clear subset where they should be created ... <code>PrepareBindGroups</code>.</p>
<h3 id="batcheduniformbuffer-and-gpuarraybuffer">BatchedUniformBuffer and GpuArrayBuffer
<a href="#batcheduniformbuffer-and-gpuarraybuffer">#</a>
</h3>
<p>OK, so we need to put many pieces of data of the same type into buffers in a way that we can bind them as few times as possible and draw multiple instances from them. How can we do that?</p>
<p>In previous versions of Bevy, per-instance <code>MeshUniform</code> data is stored in a uniform buffer with each instance's data aligned to a dynamic offset. When drawing each mesh entity, we update the dynamic offset, which can be close in cost to rebinding. It looks like this:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/DynamicUniformBuffer.svg" alt="DynamicUniformBuffer"></p>
<p>Red arrows are 'rebinds' to update the dynamic offset, blue boxes are instance data, orange boxes are padding for dynamic offset alignment, which is a requirement of GPUs and graphics APIs.</p>
<p>Instance-rate vertex buffers are one way, but they are very constrained to having a specific order. They are/may be suitable for per-instance data like mesh entity transforms, but they can't be used for material data. The other main options are uniform buffers, storage buffers, and data textures.</p>
<p>WebGL2 does not support storage buffers, only uniform buffers. Uniform buffers have a minimum guaranteed size per binding of 16kB on WebGL2. Storage buffers, where available, have a minimum guaranteed size of 128MB.</p>
<p>Data textures are far more awkward for structured data. And on platforms that don't support linear data layouts, they will perform worse.</p>
<p>Given these constraints, we want to use storage buffers on platforms where they are supported, and we want to use uniform buffers on platforms where they are not supported (ex: WebGL 2).</p>
<h4 id="batcheduniformbuffer">BatchedUniformBuffer
<a href="#batcheduniformbuffer">#</a>
</h4>
<p>authors: @superdump (Rob Swain), @JMS55, @teoxoy, @robtfm, @konsolas</p>
<p>For uniform buffers, we have to assume that on WebGL2 we may only be able to access 16kB of data at a time. Taking an example, <code>MeshUniform</code> requires 144 bytes per instance, which means we can have a batch of 113 instances per 16kB binding. If we want to draw more than 113 entities in total, we need a way of managing a uniform buffer of data that can be bound at a dynamic offset per batch of instances. This is what <code>BatchedUniformBuffer</code> is designed to solve.</p>
<p><code>BatchedUniformBuffer</code> looks like this:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/BatchedUniformBuffer.svg" alt="BatchedUniformBuffer"></p>
<p>Red arrows are 'rebinds' to update the dynamic offset, blue boxes are instance data, orange boxes are padding for dynamic offset alignment.</p>
<p>Notice how the instance data can be packed much more tightly, fitting the same amount of used data in less space. Also, we only need to update the dynamic offset of the binding for each batch.</p>
<h4 id="gpuarraybuffer">GpuArrayBuffer
<a href="#gpuarraybuffer">#</a>
</h4>
<p>authors: @superdump (Rob Swain), @JMS55, @IceSentry, @mockersf</p>
<p>Given that we need to support both uniform and storage buffers for a given data type, this increases the level of complexity required to implement new low-level renderer features (both in Rust code and in shaders). When confronted with this complexity, some developers might choose instead only use storage buffers (effectively dropping support for WebGL 2).</p>
<p>To make it as easy as possible to support both storage types, we developed <a href="https://docs.rs/bevy/0.12.0/bevy/render/render_resource/enum.GpuArrayBuffer.html"><code>GpuArrayBuffer</code></a>. This is a generic collection of <code>T</code> values that abstracts over <code>BatchedUniformBuffer</code> and <a href="https://docs.rs/bevy/0.12.0/bevy/render/render_resource/struct.StorageBuffer.html"><code>StorageBuffer</code></a>. It will use the right storage for the current platform / GPU.</p>
<p>The data in a <a href="https://docs.rs/bevy/0.12.0/bevy/render/render_resource/struct.StorageBuffer.html"><code>StorageBuffer</code></a> looks like this:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/StorageBuffer.svg" alt="StorageBuffer"></p>
<p>Red arrows are 'rebinds', blue boxes are instance data.</p>
<p>All the instance data can be placed directly one after the other, and we only have to bind once. There is no need for any dynamic offset binding, so there is no need for any padding for alignment.</p>
<p><a href="https://gist.github.com/cart/3a9f190bd5e789a7d42317c28843ffca">Check out this annotated code example</a> that illustrates using <a href="https://docs.rs/bevy/0.12.0/bevy/render/render_resource/enum.GpuArrayBuffer.html"><code>GpuArrayBuffer</code></a> to support both uniform and storage buffer bindings.</p>
<h3 id="2d-3d-mesh-entities-using-gpuarraybuffer">2D / 3D Mesh Entities using GpuArrayBuffer
<a href="#2d-3d-mesh-entities-using-gpuarraybuffer">#</a>
</h3>
<p>authors: @superdump (Rob Swain), @robtfm, @Elabajaba</p>
<p>The 2D and 3D mesh entity rendering was migrated to use <a href="https://docs.rs/bevy/0.12.0/bevy/render/render_resource/enum.GpuArrayBuffer.html"><code>GpuArrayBuffer</code></a> for the mesh uniform data.</p>
<p>Just avoiding the rebinding of the mesh uniform data buffer gives about a 6% increase in frame rates!</p>
<h2 id="entityhashmap-renderer-optimization">EntityHashMap Renderer Optimization
<a href="#entityhashmap-renderer-optimization">#</a>
</h2>
<p>authors: @superdump (Rob Swain), @robtfm, @pcwalton, @jancespivo, @SkiFire13, @nicopap</p>
<p>Since <strong>Bevy 0.6</strong>, Bevy's renderer has extracted data from the "main world" into a separate "render world". This enables <a href="https://bevyengine.org/news/bevy-0-6/#pipelined-rendering-extract-prepare-queue-render">Pipelined Rendering</a>, which renders frame N in the render app, while the main app simulates frame N+1.</p>
<p>Part of the design involves clearing the render world of all entities between frames. This enables consistent Entity mapping between the main and render worlds while still being able to spawn new entities in the render world that don't exist in the main world.</p>
<p>Unfortunately, this ECS usage pattern also incurred some significant performance problems. To get good "linear iteration read performance", we wanted to use "table storage" (Bevy's default ECS storage model). However in the renderer, entities are cleared and respawned each frame, components are inserted across many systems and different parts of the render app schedule. This resulted in a lot of "archetype moves" as new components were inserted from various renderer contexts. When an entity moves to a new archetype, all of its "table storage" components are copied into the new archetype's table. This can be expensive across many archetype moves and/or large table moves.</p>
<p>This was unfortunately leaving a lot of performance on the table. Many ideas were discussed over a long period for how to improve this.</p>
<h3 id="the-path-forward">The Path Forward
<a href="#the-path-forward">#</a>
</h3>
<p>The main two paths forward were:</p>
<ol>
<li>Persist render world entities and their component data across frames</li>
<li>Stop using entity table storage for storing component data in the render world</li>
</ol>
<p>We have decided to explore option (2) for <strong>Bevy 0.12</strong> as persisting entities involves solving other problems that have no simple and satisfactory answers (ex: how do we keep the worlds perfectly in sync without leaking data). We may find those answers eventually, but for now we chose the path of least resistance!</p>
<p>We landed on using <code>HashMap&lt;Entity, T&gt;</code> with an optimized hash function designed by @SkiFire13, and inspired by <a href="https://github.com/rust-lang/rustc-hash"><code>rustc-hash</code></a>. This is exposed as <a href="https://docs.rs/bevy/0.12.0/bevy/utils/type.EntityHashMap.html"><code>EntityHashMap</code></a> and is the new way to store component data in the render world.</p>
<p>This <a href="https://github.com/bevyengine/bevy/pull/9903">yielded significant performance wins</a>.</p>
<h3 id="usage">Usage
<a href="#usage">#</a>
</h3>
<p>The easiest way to use it is to use the new <a href="https://docs.rs/bevy/0.12.0/bevy/render/extract_instances/struct.ExtractInstancesPlugin.html"><code>ExtractInstancesPlugin</code></a>. This wil extract all entities matching a query, or only those that are visible, extracting multiple components at once into one target type.</p>
<p>It is a good idea to group component data that will be accessed together into one target type to avoid having to do multiple lookups.</p>
<p>To extract two components from visible entities:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>struct</span> </span><span><span>MyType</span> </span><span><span><span>{</span>
    <span>a</span><span>:</span> ComponentA,
    <span>b</span><span>:</span> ComponentB,
</span><span><span>}</span></span></span>

<span><span>impl</span> </span><span>ExtractInstance <span>for</span></span><span> <span>MyType</span> </span><span><span><span>{</span>
    <span>type</span> <span>Query</span> <span>=</span> <span><span>(</span><span>Read<span>&lt;</span>ComponentA<span>&gt;</span></span><span>,</span> <span>Read<span>&lt;</span>ComponentB<span>&gt;</span></span></span><span><span>)</span></span><span>;</span>
    <span>type</span> <span>Filter</span> <span>=</span> <span><span>(</span></span><span><span>)</span></span><span>;</span>

    <span><span><span>fn</span> </span><span>extract</span></span><span><span><span>(</span><span><span>(</span></span><span><span>a</span><span>,</span> <span>b</span></span><span><span>)</span></span>: <span>QueryItem<span>&lt;</span>'<span>_</span>, <span><span><span>Self</span><span>::</span></span></span>Query<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span><span>Option</span><span>&lt;</span><span>Self</span><span>&gt;</span></span></span> </span><span><span><span>{</span>
        <span>Some</span><span><span>(</span>MyType <span><span>{</span>
          a<span>:</span> a<span>.</span><span>clone</span><span><span>(</span></span><span><span>)</span></span><span>,</span>
          b<span>:</span> b<span>.</span><span>clone</span><span><span>(</span></span><span><span>)</span></span><span>,</span>
        </span><span><span>}</span></span></span><span><span>)</span></span>
    </span><span><span>}</span></span></span>
</span><span><span>}</span></span></span>

app<span>.</span><span>add_plugins</span><span><span>(</span><span>ExtractInstancesPlugin<span>::</span></span><span><span>&lt;</span>MyType<span>&gt;</span></span><span><span>::</span></span>extract_visible<span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<h2 id="sprite-instancing">Sprite Instancing
<a href="#sprite-instancing">#</a>
</h2>
<p>authors: @superdump (Rob Swain)</p>
<p>In previous versions of Bevy, Sprites were rendered by generating a vertex buffer containing 4 vertices per sprite with position, UV, and possibly color data. This has proven to be very effective. However, having to split batches of sprites into multiple draws because they use a different color is suboptimal.</p>
<p>Sprite rendering now uses an instance-rate vertex buffer to store the per-instance data. Instance-rate vertex buffers are stepped when the instance index changes, rather than when the vertex index changes. The new buffer contains an affine transformation matrix that enables translation, scaling, and rotation in one transform. It contains per-instance color, and UV offset and scale.</p>
<p>This retains all the functionality of the previous method, enables the additional flexibility of any sprite being able to have a color tint and all still be drawn in the same batch, and uses a total of 80 bytes per sprite, versus 144 bytes previously.</p>
<p>This resulted in a performance improvement of up to <strong>40%</strong> versus the previous method!</p>
<h2 id="rusty-shader-imports">Rusty Shader Imports
<a href="#rusty-shader-imports">#</a>
</h2>
<p>authors: @robtfm</p>
<p>Bevy shaders now use Rust-like shader imports:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> old
</span><span>#</span>import <span>bevy_pbr<span>::</span></span>forward_io VertexOutput

<span><span>//</span> new
</span><span>#</span>import <span>bevy_pbr<span>::</span></span><span>forward_io<span>::</span></span>VertexOutput
</span></code></pre>
<p>Like Rust imports, you can use curly braces to import multiple items. Multi-level nesting is also now supported!</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> old
</span><span>#</span>import <span>bevy_pbr<span>::</span></span>pbr_functions alpha_discard<span>,</span> apply_pbr_lighting 
<span>#</span>import bevy_pbr                mesh_bindings

<span><span>//</span> new
</span><span>#</span>import <span>bevy_pbr<span>::</span></span><span><span>{</span>
    <span>pbr_functions<span>::</span></span><span><span>{</span>alpha_discard<span>,</span> apply_pbr_lighting</span><span><span>}</span></span><span>,</span> 
    mesh_bindings<span>,</span>
</span><span><span>}</span></span>
</span></code></pre>
<p>Like Rust modules, you can now import partial paths:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span>#</span>import <span>part<span>::</span></span><span>of<span>::</span></span>path

<span><span>//</span> later in the shader
</span><span>path<span>::</span></span><span>remainder<span>::</span></span>function<span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>You can also now use fully qualified paths without importing:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span>bevy_pbr<span>::</span></span><span>pbr_functions<span>::</span></span>pbr<span><span>(</span></span><span><span>)</span></span>
</span></code></pre>
<p>Rusty Imports remove a number of "API weirdness" gotchas from the old system and expand the capabilities of the import system. And by reusing Rust syntax and semantics, we remove the need for Bevy users to learn a new system.</p>
<h2 id="gltf-emissive-strength">glTF Emissive Strength
<a href="#gltf-emissive-strength">#</a>
</h2>
<p>authors: @JMS55</p>
<p>Bevy now reads and uses the <code>KHR_materials_emissive_strength</code> glTF material extension when loading glTF assets. This adds support for emissive materials when importing glTF from programs like Blender. Each of these cubes has increasing emissive strength:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/gltf_emissive.png" alt="gltf emissive"></p>
<h2 id="import-second-uv-map-in-gltf-files">Import Second UV Map In glTF Files
<a href="#import-second-uv-map-in-gltf-files">#</a>
</h2>
<p>authors: @pcwalton</p>
<p><strong>Bevy 0.12</strong> now imports the second UV map (<code>TEXCOORD1</code> or <code>UV1</code>) if it is defined in glTF files and exposes it to shaders. Conventionally this is often used for lightmap UVs. This was an often requested feature and it unlocks lightmapping scenarios (both in custom user shaders and in future Bevy releases).</p>
<h2 id="wireframe-improvements">Wireframe Improvements
<a href="#wireframe-improvements">#</a>
</h2>
<p>authors: @IceSentry</p>
<p>The wireframes now use Bevy's <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/trait.Material.html"><code>Material</code></a> abstraction. This means it will automatically use the new batching and instancing features while being easier to maintain. This change also made it easier to add support for colored wireframe. You can configure the color globally or per mesh using the <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/wireframe/struct.WireframeColor.html"><code>WireframeColor</code></a> component. It's also now possible to disable wireframe rendering by using the <a href="https://docs.rs/bevy/0.12.0/bevy/pbr/wireframe/struct.NoWireframe.html"><code>NoWireframe</code></a> component.</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/wireframe.png" alt="wireframe"></p>
<h2 id="external-renderer-context">External Renderer Context
<a href="#external-renderer-context">#</a>
</h2>
<p>authors: @awtterpip</p>
<p>Historically Bevy's <a href="https://docs.rs/bevy/0.12.0/bevy/render/struct.RenderPlugin.html"><code>RenderPlugin</code></a> has been fully responsible for initializing the <a href="https://github.com/gfx-rs/wgpu"><code>wgpu</code></a> render context. However some 3rd party Bevy Plugins, such as this work-in-progress <a href="https://github.com/awtterpip/bevy_openxr"><code>bevy_openxr</code></a> plugin, require more control over renderer initialization.</p>
<p>Therefore in <strong>Bevy 0.12</strong>, we've made it possible to pass in the <a href="https://github.com/gfx-rs/wgpu"><code>wgpu</code></a> render context at startup. This means the 3rd party <a href="https://github.com/awtterpip/bevy_openxr/"><code>bevy_openxr</code></a> plugin can be a "normal" Bevy plugin without needing to fork Bevy!</p>
<p>Here is a quick video of Bevy VR, courtesy of <a href="https://github.com/awtterpip/bevy_openxr/"><code>bevy_openxr</code></a>!</p>

<h2 id="bind-group-ergonomics">Bind Group Ergonomics
<a href="#bind-group-ergonomics">#</a>
</h2>
<p>authors: @robtfm, @JMS55</p>
<p>When defining "bind groups" for low-level renderer features, we use the following API api:</p>
<pre data-lang="rust"><code data-lang="rust"><span>render_device<span>.</span><span>create_bind_group</span><span><span>(</span>
    <span><span>"</span>my_bind_group<span>"</span></span><span>,</span>
    <span>&amp;</span>my_layout<span>,</span>
    <span>&amp;</span><span><span>[</span>
        BindGroupEntry <span><span>{</span>
            binding<span>:</span> <span>0</span><span>,</span>
            resource<span>:</span> <span>BindingResource<span>::</span></span>Sampler<span><span>(</span><span>&amp;</span>my_sampler</span><span><span>)</span></span><span>,</span>
        </span><span><span>}</span></span><span>,</span>
        BindGroupEntry <span><span>{</span>
            binding<span>:</span> <span>1</span><span>,</span>
            resource<span>:</span> my_uniform<span>,</span>
        </span><span><span>}</span></span><span>,</span>
    <span>]</span></span><span>,</span>
</span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>This works reasonably well, but for large numbers of bind groups, the <code>BindGroupEntry</code> boilerplate makes it harder than necessary to read and write everything (and keep the indices up to date).</p>
<p><strong>Bevy 0.12</strong> adds additional options:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> Sets the indices automatically using the index of the tuple item
</span>render_device<span>.</span><span>create_bind_group</span><span><span>(</span>
    <span><span>"</span>my_bind_group<span>"</span></span><span>,</span>
    <span>&amp;</span>my_layout<span>,</span>
    <span>&amp;</span><span>BindGroupEntries<span>::</span></span>sequential<span><span>(</span><span><span>(</span><span>&amp;</span>my_sampler<span>,</span> my_uniform</span><span><span>)</span></span></span><span><span>)</span></span><span>,</span>
</span><span><span>)</span></span><span>;</span>
</span></code></pre>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> Manually sets the indices, but without the BindGroupEntry boilerplate!
</span>render_device<span>.</span><span>create_bind_group</span><span><span>(</span>
    <span><span>"</span>my_bind_group<span>"</span></span><span>,</span>
    <span>&amp;</span>my_layout<span>,</span>
    <span>&amp;</span><span>BindGroupEntries<span>::</span></span>with_indexes<span><span>(</span><span><span>(</span>
        <span><span>(</span><span>2</span><span>,</span> <span>&amp;</span>my_sampler</span><span><span>)</span></span><span>,</span>
        <span><span>(</span><span>3</span><span>,</span> my_uniform</span><span><span>)</span></span><span>,</span>
    </span><span><span>)</span></span></span><span><span>)</span></span><span>,</span>
</span><span><span>)</span></span><span>;</span>
</span></code></pre>
<h2 id="one-shot-systems">One-Shot Systems
<a href="#one-shot-systems">#</a>
</h2>
<p>authors: @alice-i-cecile @pascualex, @Trashtalk217, @Zeenobit</p>
<p>Ordinarily, systems run once per frame, as part of a schedule.
But this isn't always the right fit.
Maybe you're responding to a very rare event like in a complex turn-based game, or simply don't want to clutter your schedule with a new system for every single button.
One-shot systems flip that logic on its head, and provide you the ability to run arbitrary logic on demand, using the powerful and familiar system syntax.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>Resource<span>,</span> Default<span>,</span> Debug</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>struct</span> </span><span><span>Counter</span></span><span><span><span>(</span><span>u8</span></span><span>)</span></span><span>;</span>

<span><span><span>fn</span> </span><span>increment</span></span><span><span><span>(</span><span>mut</span> <span>counter</span><span>:</span> <span>ResMut<span>&lt;</span>Counter<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    counter<span>.</span><span>0</span> <span>+=</span> <span>1</span><span>;</span>
    <span>println!</span><span><span>(</span></span><span><span><span>"</span><span>{}</span><span>"</span></span></span><span><span>,</span> counter<span>.</span><span>0</span><span>)</span></span><span>;</span>
</span><span><span>}</span></span></span>

<span><span><span>fn</span> </span><span>foo</span></span><span><span><span>(</span><span>world</span><span>:</span> <span>&amp;</span><span>mut</span> World</span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    world<span>.</span><span>init_resource<span>::</span></span><span><span>&lt;</span>Counter<span>&gt;</span></span><span><span>(</span></span><span><span>)</span></span><span>;</span>
    <span>let</span> id <span>=</span> world<span>.</span><span>register_system</span><span><span>(</span>increment</span><span><span>)</span></span><span>;</span>
    <span>let</span> <span>_</span> <span>=</span> world<span>.</span><span>run_system</span><span><span>(</span>id</span><span><span>)</span></span><span>;</span> <span><span>//</span> prints 1
</span>    <span>let</span> <span>_</span> <span>=</span> world<span>.</span><span>run_system</span><span><span>(</span>id</span><span><span>)</span></span><span>;</span> <span><span>//</span> prints 2
</span></span><span><span>}</span></span></span>
</span></code></pre>
<p>There are three simple steps to using one-shot systems: register a system, store its <code>SystemId</code>, and then use either exclusive world access or commands to run the corresponding system.</p>
<p>A lot becomes possible with just that, however <code>SystemId</code>s really start showing their power, when they're wrapped into components.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span>use</span> <span>bevy<span>::</span></span><span>ecs<span>::</span></span><span>system<span>::</span></span>SystemId<span>;</span>

<span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>Component</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>struct</span> </span><span><span>Callback</span></span><span><span><span>(</span>SystemId</span><span>)</span></span><span>;</span>

<span><span>//</span> calling all callbacks!
</span><span><span><span>fn</span> </span><span>call_all</span></span><span><span><span>(</span><span>query</span><span>:</span> <span>Query<span>&lt;</span><span>&amp;</span>Callback<span>&gt;</span></span>, <span>mut</span> <span>commands</span><span>:</span> Commands</span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    <span>for</span> callback <span>in</span> query<span>.</span><span>iter</span><span><span>(</span></span><span><span>)</span></span> <span><span>{</span>
        commands<span>.</span><span>run_system</span><span><span>(</span>callback<span>.</span><span>0</span></span><span><span>)</span></span><span>;</span>
    </span><span><span>}</span></span>
</span><span><span>}</span></span></span>
</span></code></pre>
<p>One-shot systems can then be attached to UI elements, like buttons, actions in an RPG, or any other entity. You might even feel inspired to implement the Bevy scheduling graph with one-shot systems and <a href="https://docs.rs/aery/latest/aery/"><code>aery</code></a> (let us know how that goes, by the way).</p>
<p>One-shot systems are very flexible.
They can be nested, so you can call <code>run_system</code> from within a one-shot system.
It's possible to have multiple instances of one system registered at a time, each with their own <code>Local</code> variables and cached system state.
It also plays nice with asset-driven workflows: recording a mapping from a string to an identifier in a serialized callback is much nicer than trying to do so with Rust functions!</p>
<p>Still, one-shot systems are not without their limitations.
Currently, exclusive systems and systems designed for system piping (with either an <code>In</code> parameter or a return type) can't be used at all.
You also can't call a one-shot systems from itself, recursion isn't possible.
Lastly, one-shot systems are always evaluated sequentially, rather than in parallel.
While this reduces both complexity and overhead, for certain workloads this can be meaningfully slower than using a schedule with a parallel executor.</p>
<p>However, when you're just prototyping or writing a unit test, it can be a real hassle: two whole functions and some weird identifier?
For these situations, you can use the <code>World::run_system_once</code> method.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span>use</span> <span>bevy<span>::</span></span><span>ecs<span>::</span></span><span>system<span>::</span></span>RunSystemOnce<span>;</span>

<span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>Resource<span>,</span> Default<span>,</span> Debug</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>struct</span> </span><span><span>Counter</span></span><span><span><span>(</span><span>u8</span></span><span>)</span></span><span>;</span>

<span><span><span>fn</span> </span><span>increment</span></span><span><span><span>(</span><span>mut</span> <span>counter</span><span>:</span> <span>ResMut<span>&lt;</span>Counter<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    counter<span>.</span><span>0</span> <span>+=</span> <span>1</span><span>;</span>
    <span>println!</span><span><span>(</span></span><span><span><span>"</span><span>{}</span><span>"</span></span></span><span><span>,</span> counter<span>.</span><span>0</span><span>)</span></span><span>;</span>
</span><span><span>}</span></span></span>

<span>let</span> <span>mut</span> world <span>=</span> <span>World<span>::</span></span>new<span><span>(</span></span><span><span>)</span></span><span>;</span>
world<span>.</span><span>init_resource<span>::</span></span><span><span>&lt;</span>Counter<span>&gt;</span></span><span><span>(</span></span><span><span>)</span></span><span>;</span>
world<span>.</span><span>run_system_once</span><span><span>(</span>increment</span><span><span>)</span></span><span>;</span> <span><span>//</span> prints 1
</span>world<span>.</span><span>run_system_once</span><span><span>(</span>increment</span><span><span>)</span></span><span>;</span> <span><span>//</span> prints 2
</span></span></code></pre>
<p>This is great for unit testing systems and queries, and it's both lower overhead and simpler to use. However, there is one caveat. Some systems have state, either in the form of <code>Local</code> arguments, change detection, or <code>EventReader</code>s. This state isn't saved between two <code>run_system_once</code> calls, creating odd behavior. The <code>Local</code>s reset every run, while change detection will <em>always</em> detect data as added/changed. Be careful and you'll be alright.</p>
<h2 id="system-map">system.map
<a href="#system-map">#</a>
</h2>
<p>authors: @JoJoJet</p>
<p><strong>Bevy 0.12</strong> adds a new <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/system/trait.IntoSystem.html#method.map"><code>system.map()</code></a> function, which is a cheaper and more ergonomic alternative to <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/system/trait.IntoSystem.html#method.pipe"><code>system.pipe()</code></a>.</p>
<p>Unlike <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/system/trait.IntoSystem.html#method.pipe"><code>system.pipe()</code></a>, <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/system/trait.IntoSystem.html#method.map"><code>system.map()</code></a> just takes a normal closure (instead of another system) that accepts the output of the system as its parameter:</p>
<pre data-lang="rust"><code data-lang="rust"><span>app<span>.</span><span>add_systems</span><span><span>(</span>Update<span>,</span> my_system<span>.</span><span>map</span><span><span>(</span>error</span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>

<span><span><span>fn</span> </span><span>my_system</span></span><span><span><span>(</span><span>res</span><span>:</span> <span>Res<span>&lt;</span>T<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span><span>Result</span><span>&lt;</span><span>(</span><span>)</span>, <span>Err</span><span>&gt;</span></span></span> </span><span><span><span>{</span>
    <span><span>//</span> do something that might fail here
</span></span><span><span>}</span></span></span>

<span><span>//</span> An adapter that logs errors 
</span><span><span><span>pub</span> <span>fn</span> </span><span>error</span></span><span><span>&lt;</span>E<span>:</span> Debug<span>&gt;</span></span><span><span><span>(</span><span>result</span><span>:</span> <span><span>Result</span><span>&lt;</span><span>(</span><span>)</span>, E<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    <span>if</span> <span>let</span> <span>Err</span><span><span>(</span>warn</span><span><span>)</span></span> <span>=</span> result <span><span>{</span>
        <span>error!</span><span><span>(</span><span><span>"</span>{:?}<span>"</span></span><span>,</span> warn</span><span><span>)</span></span><span>;</span>
    </span><span><span>}</span></span>
</span><span><span>}</span></span></span>
</span></code></pre>
<p>Bevy provides built in <code>error</code>, <code>warn</code>, <code>debug</code>, and <code>info</code> adapters that can be used with <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/system/trait.IntoSystem.html#method.map"><code>system.map()</code></a> to log errors at each of these levels.</p>
<h2 id="simplify-parallel-iteration-method">Simplify Parallel Iteration Method
<a href="#simplify-parallel-iteration-method">#</a>
</h2>
<p>authors: @JoJoJet</p>
<p><strong>Bevy 0.12</strong> makes the parallel Query iterator <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/query/struct.QueryParIter.html#method.for_each"><code>for_each()</code></a> compatible with both mutable and immutable queries, reducing API surface and removing the need to write <code>mut</code> twice:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> Before:
</span>query<span>.</span><span>par_iter_mut</span><span><span>(</span></span><span><span>)</span></span><span>.</span><span>for_each_mut</span><span><span>(</span><span><span><span>|</span></span></span><span><span><span>x</span><span>|</span></span> </span><span><span>...</span></span></span><span><span>)</span></span><span>;</span>

<span><span>//</span> After:
</span>query<span>.</span><span>par_iter_mut</span><span><span>(</span></span><span><span>)</span></span><span>.</span><span>for_each</span><span><span>(</span><span><span><span>|</span></span></span><span><span><span>x</span><span>|</span></span> </span><span><span>...</span></span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<h2 id="disjoint-mutable-world-access-via-entitymut">Disjoint Mutable World Access Via EntityMut
<a href="#disjoint-mutable-world-access-via-entitymut">#</a>
</h2>
<p>authors: @JoJoJet</p>
<p><strong>Bevy 0.12</strong> supports safely accessing multiple <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/world/struct.EntityMut.html"><code>EntityMut</code></a> values at once, meaning you can mutate multiple entities (with access to <em>all of their components</em>) at the same time.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span>let</span> <span><span>[</span>entity1<span>,</span> entity2<span>]</span></span> <span>=</span> world<span>.</span><span>many_entities_mut</span><span><span>(</span><span><span>[</span>id1<span>,</span> id2<span>]</span></span></span><span><span>)</span></span><span>;</span>
<span>*</span>entity1<span>.</span><span>get_mut<span>::</span></span><span><span>&lt;</span>Transform<span>&gt;</span></span><span><span>(</span></span><span><span>)</span></span><span>.</span><span>unwrap</span><span><span>(</span></span><span><span>)</span></span> <span>=</span> <span>*</span>entity2<span>.</span><span>get<span>::</span></span><span><span>&lt;</span>Transform<span>&gt;</span></span><span><span>(</span></span><span><span>)</span></span><span>.</span><span>unwrap</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>This also works in queries:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> This would not have been expressible in previous Bevy versions
</span><span><span>//</span> Now it is totally valid!
</span><span><span><span>fn</span> </span><span>system</span></span><span><span><span>(</span><span>q1</span><span>:</span> <span>Query<span>&lt;</span><span>&amp;</span><span>mut</span> A<span>&gt;</span></span>, <span>q2</span><span>:</span> <span>Query<span>&lt;</span>EntityMut, <span>Without<span>&lt;</span>A<span>&gt;</span></span><span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span><span><span>}</span></span></span>
</span></code></pre>
<p>You can now mutably iterate all entities and access arbitrary components within them:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span>for</span> <span>mut</span> entity <span>in</span> world<span>.</span><span>iter_entities_mut</span><span><span>(</span></span><span><span>)</span></span> <span><span>{</span>
    <span>let</span> <span>mut</span> transform <span>=</span> entity<span>.</span><span>get_mut<span>::</span></span><span><span>&lt;</span>Transform<span>&gt;</span></span><span><span>(</span></span><span><span>)</span></span><span>.</span><span>unwrap</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
    transform<span>.</span>translation<span>.</span>x <span>+=</span> <span>2.</span><span>0</span><span>;</span>
</span><span><span>}</span></span>
</span></code></pre>
<p>This required reducing the access scope of <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/world/struct.EntityMut.html"><code>EntityMut</code></a> to <em>only</em> the entity it accesses (previously it had escape hatches that allowed direct <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/world/struct.World.html"><code>World</code></a> access). Use <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/world/struct.EntityWorldMut.html"><code>EntityWorldMut</code></a> for an equivalent to the old "global access" approach.</p>
<h2 id="unified-configure-sets-api">Unified configure_sets API
<a href="#unified-configure-sets-api">#</a>
</h2>
<p>authors: @geieredgar</p>
<p>Bevy's <a href="https://bevyengine.org/news/bevy-0-11/#schedule-first-ecs-apis">Schedule-First API</a> introduced in <strong>Bevy 0.11</strong> unified most of the ECS scheduler API surface under a single <code>add_systems</code> API. However, we didn't do a unified API for <code>configure_sets</code>, meaning there were two different APIs:</p>
<pre data-lang="rust"><code data-lang="rust"><span>app<span>.</span><span>configure_set</span><span><span>(</span>Update<span>,</span> A<span>.</span><span>after</span><span><span>(</span>B</span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
app<span>.</span><span>configure_sets</span><span><span>(</span>Update<span>,</span> <span><span>(</span>A<span>.</span><span>after</span><span><span>(</span>B</span><span><span>)</span></span><span>,</span> B<span>.</span><span>after</span><span><span>(</span>C</span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
</span></span></code></pre>
<p>In <strong>Bevy 0.12</strong>, we have unified these under a single API to align with the patterns we've used elsewhere and cut down on unnecessary API surface:</p>
<pre data-lang="rust"><code data-lang="rust"><span>app<span>.</span><span>configure_sets</span><span><span>(</span>Update<span>,</span> A<span>.</span><span>after</span><span><span>(</span>B</span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
app<span>.</span><span>configure_sets</span><span><span>(</span>Update<span>,</span> <span><span>(</span>A<span>.</span><span>after</span><span><span>(</span>B</span><span><span>)</span></span><span>,</span> B<span>.</span><span>after</span><span><span>(</span>C</span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
</span></span></code></pre>
<h2 id="ui-materials">UI Materials
<a href="#ui-materials">#</a>
</h2>
<p>authors: @MarkusTheOrt</p>
<p>Bevy's material system has been brought to Bevy UI thanks to the new <a href="https://docs.rs/bevy/0.12.0/bevy/ui/trait.UiMaterial.html"><code>UiMaterial</code></a>:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/ui_material.png" alt="ui material"></p>
<p>This "circle" UI Node is drawn with a custom shader:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span>#</span>import <span>bevy_ui<span>::</span></span><span>ui_vertex_output<span>::</span></span>UiVertexOutput

<span><span>struct</span> </span><span><span>CircleMaterial</span> </span><span><span><span>{</span>
    @location(0) <span>color</span><span>:</span> <span>vec4<span>&lt;</span><span>f32</span><span>&gt;</span></span>
</span><span><span>}</span></span></span>

<span>@</span><span>group</span><span><span>(</span><span>1</span></span><span><span>)</span></span> <span>@</span><span>binding</span><span><span>(</span><span>0</span></span><span><span>)</span></span>
<span>var<span>&lt;</span>uniform<span>&gt;</span></span> input<span>:</span> CircleMaterial<span>;</span>

<span>@</span>fragment
<span><span><span>fn</span> </span><span>fragment</span></span><span><span><span>(</span><span>in</span><span>:</span> UiVertexOutput</span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> </span></span><span>@</span><span>location</span><span><span>(</span><span>0</span></span><span><span>)</span></span> <span>vec4<span>&lt;</span><span>f32</span><span>&gt;</span></span> <span><span>{</span>
    <span>let</span> uv <span>=</span> <span>in</span><span>.</span>uv <span>*</span> <span>2.</span><span>0</span> <span>-</span> <span>1.</span><span>0</span><span>;</span>
    <span>let</span> alpha <span>=</span> <span>1.</span><span>0</span> <span>-</span> <span>pow</span><span><span>(</span><span>sqrt</span><span><span>(</span><span>dot</span><span><span>(</span>uv<span>,</span> uv</span><span><span>)</span></span></span><span><span>)</span></span><span>,</span> <span>100.</span><span>0</span></span><span><span>)</span></span><span>;</span>
    <span>return</span> <span>vec4<span>&lt;</span><span>f32</span><span>&gt;</span></span><span><span>(</span>input<span>.</span>color<span>.</span>rgb<span>,</span> alpha</span><span><span>)</span></span><span>;</span>
</span><span><span>}</span></span>
</span></code></pre>
<p>And just like other Bevy material types, it is simple to set up in code!</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>AsBindGroup<span>,</span> Asset<span>,</span> TypePath<span>,</span> Debug<span>,</span> Clone</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>struct</span> </span><span><span>CircleMaterial</span> </span><span><span><span>{</span>
    <span><span>#</span><span>[</span><span>uniform</span><span><span><span>(</span></span></span><span><span>0</span></span><span><span><span>)</span></span></span><span>]</span></span>
    <span>color</span><span>:</span> Vec4,
</span><span><span>}</span></span></span>

<span><span>impl</span> </span><span>UiMaterial <span>for</span></span><span> <span>CircleMaterial</span> </span><span><span><span>{</span>
    <span><span><span>fn</span> </span><span>fragment_shader</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> ShaderRef</span> </span><span><span><span>{</span>
        <span><span>"</span>shaders/circle_shader.wgsl<span>"</span></span><span>.</span><span>into</span><span><span>(</span></span><span><span>)</span></span>
    </span><span><span>}</span></span></span>
</span><span><span>}</span></span></span>

<span><span>//</span> Register the material plugin in your App
</span>app<span>.</span><span>add_plugins</span><span><span>(</span><span>UiMaterialPlugin<span>::</span></span><span><span>&lt;</span>CircleMaterial<span>&gt;</span></span><span><span>::</span></span>default<span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span>

<span><span>//</span> Later in your app, spawn the UI node with your material!
</span>commands<span>.</span><span>spawn</span><span><span>(</span>MaterialNodeBundle <span><span>{</span>
    style<span>:</span> Style <span><span>{</span>
        position_type<span>:</span> <span>PositionType<span>::</span></span>Absolute<span>,</span>
        width<span>:</span> <span>Val<span>::</span></span>Px<span><span>(</span><span>250.</span><span>0</span></span><span><span>)</span></span><span>,</span>
        height<span>:</span> <span>Val<span>::</span></span>Px<span><span>(</span><span>250.</span><span>0</span></span><span><span>)</span></span><span>,</span>
        <span>..</span><span>default</span><span><span>(</span></span><span><span>)</span></span>
    </span><span><span>}</span></span><span>,</span>
    material<span>:</span> materials<span>.</span><span>add</span><span><span>(</span>CircleMaterial <span><span>{</span>
        color<span>:</span> <span>Color<span>::</span></span>rgb<span><span>(</span><span>0.</span><span>0</span><span>,</span> <span>1.</span><span>0</span><span>,</span> <span>0.</span><span>58</span></span><span><span>)</span></span><span>.</span><span>into</span><span><span>(</span></span><span><span>)</span></span><span>,</span>
    </span><span><span>}</span></span></span><span><span>)</span></span><span>,</span>
    <span>..</span><span>default</span><span><span>(</span></span><span><span>)</span></span>
</span><span><span>}</span></span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<h2 id="ui-node-outlines">UI Node Outlines
<a href="#ui-node-outlines">#</a>
</h2>
<p>authors: @ickshonpe</p>
<p>Bevy's UI nodes now support outlines "outside the borders" of UI nodes via the new <a href="https://docs.rs/bevy/0.12.0/bevy/ui/struct.Outline.html"><code>Outline</code></a> component. <a href="https://docs.rs/bevy/0.12.0/bevy/ui/struct.Outline.html"><code>Outline</code></a> does not occupy any space in the layout. This is different than <a href="https://docs.rs/bevy/0.12.0/bevy/ui/struct.Style.html"><code>Style::border</code></a>, which exists "as part of" the node in the layout:</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/ui_outlines.png" alt="ui outlines"></p>
<pre data-lang="rust"><code data-lang="rust"><span>commands<span>.</span><span>spawn</span><span><span>(</span><span><span>(</span>
    <span>NodeBundle<span>::</span></span>default<span><span>(</span></span><span><span>)</span></span><span>,</span>
    Outline <span><span>{</span>
        width<span>:</span> <span>Val<span>::</span></span>Px<span><span>(</span><span>6.</span></span><span><span>)</span></span><span>,</span>
        offset<span>:</span> <span>Val<span>::</span></span>Px<span><span>(</span><span>6.</span></span><span><span>)</span></span><span>,</span>
        color<span>:</span> <span>Color<span>::</span></span><span>WHITE</span><span>,</span>
    </span><span><span>}</span></span><span>,</span>
</span><span><span>)</span></span></span><span><span>)</span></span>
</span></code></pre>
<h2 id="unified-time">Unified <code>Time</code>
<a href="#unified-time">#</a>
</h2>
<p>authors: @nakedible @maniwani @alice-i-cecile</p>
<p>Bevy 0.12 brings two major quality of life improvements to <a href="https://docs.rs/bevy/0.12.0/bevy/app/struct.FixedUpdate.html"><code>FixedUpdate</code></a>.</p>
<ul>
<li><a href="https://docs.rs/bevy/0.12.0/bevy/time/struct.Time.html"><code>Time</code></a> now returns the contextually correct values for systems running in <a href="https://docs.rs/bevy/0.12.0/bevy/app/struct.FixedUpdate.html"><code>FixedUpdate</code></a>. (As such, <code>FixedTime</code> has been removed.)</li>
<li><a href="https://docs.rs/bevy/0.12.0/bevy/app/struct.FixedUpdate.html"><code>FixedUpdate</code></a> can no longer snowball into a "death spiral" (where the app freezes because <a href="https://docs.rs/bevy/0.12.0/bevy/app/struct.FixedUpdate.html"><code>FixedUpdate</code></a> steps are enqueued faster than it can run them).</li>
</ul>
<p>The <a href="https://docs.rs/bevy/0.12.0/bevy/app/struct.FixedUpdate.html"><code>FixedUpdate</code></a> schedule and its companion <code>FixedTime</code> resource were introduced in Bevy 0.10, and it soon became apparent that <code>FixedTime</code> was lacking. Its methods were different from <a href="https://docs.rs/bevy/0.12.0/bevy/time/struct.Time.html"><code>Time</code></a> and it didn't even track "total time elapsed" like <a href="https://docs.rs/bevy/0.12.0/bevy/time/struct.Time.html"><code>Time</code></a> did, to name a few examples. Having two different "time" APIs also meant you had to write systems to specifically support "fixed timestep" or "variable timestep" and not both. It was desirable to not have this split as it can lead to incompatibilities between plugins down the road (which is sometimes the case with plugins in other game engines).</p>
<p>Now, you can just write systems that read <a href="https://docs.rs/bevy/0.12.0/bevy/time/struct.Time.html"><code>Time</code></a> and schedule them in either context.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> This system will see a constant delta time if scheduled in `FixedUpdate` or
</span><span><span>//</span> a variable delta time if scheduled in `Update`.
</span><span><span><span>fn</span> </span><span>integrate_velocity</span></span><span><span><span>(</span>
    <span>mut</span> <span>query</span><span>:</span> <span>Query<span>&lt;</span><span>(</span><span>&amp;</span><span>mut</span> Transfrom, <span>&amp;</span>Velocity<span>)</span><span>&gt;</span></span>,
    <span>time</span><span>:</span> <span>Res<span>&lt;</span>Time<span>&gt;</span></span>,
</span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    <span>for</span> <span><span>(</span><span>mut</span> transform<span>,</span> velocity</span><span><span>)</span></span> <span>in</span> <span>&amp;</span><span>mut</span> query <span><span>{</span>
        transform<span>.</span>translation<span>.</span>x <span>+=</span> velocity<span>.</span>x <span>*</span> time<span>.</span><span>delta_seconds</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
        transform<span>.</span>translation<span>.</span>y <span>+=</span> velocity<span>.</span>y <span>*</span> time<span>.</span><span>delta_seconds</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
    </span><span><span>}</span></span>
</span><span><span>}</span></span></span>
</span></code></pre>
<p>Most systems should continue to use <a href="https://docs.rs/bevy/0.12.0/bevy/time/struct.Time.html"><code>Time</code></a>, but behind the scenes, the methods from previous APIs have been refactored into four clocks:</p>
<ul>
<li><code>Time&lt;Real&gt;</code></li>
<li><code>Time&lt;Virtual&gt;</code></li>
<li><code>Time&lt;Fixed&gt;</code></li>
<li><code>Time&lt;()&gt;</code></li>
</ul>
<p><code>Time&lt;Real&gt;</code> measures the true, unedited frame and app durations. For diagnostics/profiling, use that one. It's also used to derive the others. <code>Time&lt;Virtual&gt;</code> can be sped up, slowed down, and paused, and <code>Time&lt;Fixed&gt;</code> chases <code>Time&lt;Virtual&gt;</code> in fixed increments. Lastly, <code>Time&lt;()&gt;</code> is automatically overwritten with the current value of <code>Time&lt;Fixed&gt;</code> or <code>Time&lt;Virtual&gt;</code> upon entering or exiting <code>FixedUpdate</code>. When a system borrows <code>Time</code>, it actually borrows <code>Time&lt;()&gt;</code>.</p>
<p>Try the new <a href="https://github.com/bevyengine/bevy/blob/main/examples/time/time.rs">time example</a> to get a better feel for these resources.</p>
<p>The fix for the windup problem was limiting how much <code>Time&lt;Virtual&gt;</code> can advance from a single frame. This then limits how many times <a href="https://docs.rs/bevy/0.12.0/bevy/app/struct.FixedUpdate.html"><code>FixedUpdate</code></a> can be queued for the next frame, and so things like frame lag or your computer waking up from a long sleep can no longer cause a death spiral. So now, the app won't freeze, but things happening in <a href="https://docs.rs/bevy/0.12.0/bevy/app/struct.FixedUpdate.html"><code>FixedUpdate</code></a> will appear to slow down since it'll be running at a temporarily reduced rate.</p>
<h2 id="imageloader-settings">ImageLoader Settings
<a href="#imageloader-settings">#</a>
</h2>
<p>authors: @cart, @Kanabenki</p>
<p>To take advantage of the new <a href="https://docs.rs/bevy/0.12.0/bevy/asset/trait.AssetLoader.html"><code>AssetLoader</code></a> settings in <strong>Bevy Asset V2</strong>, we've added <a href="https://docs.rs/bevy/0.12.0/bevy/render/texture/struct.ImageLoaderSettings.html"><code>ImageLoaderSettings</code></a> to  <a href="https://docs.rs/bevy/0.12.0/bevy/render/texture/struct.ImageLoader.html"><code>ImageLoader</code></a>.</p>
<p>This means that you can now configure the sampler, SRGB-ness, and the format, on a per-image basis. These are the defaults, as they appear in <strong>Bevy Asset V2</strong> meta files:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>(</span>
    format<span>:</span> FromExtension<span>,</span>
    is_srgb<span>:</span> <span>true</span><span>,</span>
    sampler<span>:</span> <span>Default</span><span>,</span>
</span><span><span>)</span></span>
</span></code></pre>
<p>When set to <code>Default</code>, the image will use whatever is configured in <a href="https://docs.rs/bevy/0.12.0/bevy/render/prelude/struct.ImagePlugin.html#structfield.default_sampler"><code>ImagePlugin::default_sampler</code></a>.</p>
<p>However, you can set these values to whatever you want!</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>(</span>
    format<span>:</span> Format<span><span>(</span>Basis</span><span><span>)</span></span><span>,</span>
    is_srgb<span>:</span> <span>true</span><span>,</span>
    sampler<span>:</span> Descriptor<span><span>(</span><span><span>(</span>
        label<span>:</span> <span>None</span><span>,</span>
        address_mode_u<span>:</span> ClampToEdge<span>,</span>
        address_mode_v<span>:</span> ClampToEdge<span>,</span>
        address_mode_w<span>:</span> ClampToEdge<span>,</span>
        mag_filter<span>:</span> Nearest<span>,</span>
        min_filter<span>:</span> Nearest<span>,</span>
        mipmap_filter<span>:</span> Nearest<span>,</span>
        lod_min_clamp<span>:</span> <span>0.</span><span>0</span><span>,</span>
        lod_max_clamp<span>:</span> <span>32.</span><span>0</span><span>,</span>
        compare<span>:</span> <span>None</span><span>,</span>
        anisotropy_clamp<span>:</span> <span>1</span><span>,</span>
        border_color<span>:</span> <span>None</span><span>,</span>
    </span><span><span>)</span></span></span><span><span>)</span></span><span>,</span>
</span><span><span>)</span></span>
</span></code></pre>
<h2 id="gamepadbuttoninput">GamepadButtonInput
<a href="#gamepadbuttoninput">#</a>
</h2>
<p>authors: @bravely-beep</p>
<p>Bevy generally provides two ways to handle input of a given type:</p>
<ul>
<li>Events: receive a stream of input events in the order they occur</li>
<li>The <a href="https://docs.rs/bevy/0.12.0/bevy/input/struct.Input.html"><code>Input</code></a> Resource: read the <em>current</em> state of the input</li>
</ul>
<p>One notable exception was <a href="https://docs.rs/bevy/0.12.0/bevy/input/gamepad/struct.GamepadButton.html"><code>GamepadButton</code></a>, which was only available via the <a href="https://docs.rs/bevy/0.12.0/bevy/input/struct.Input.html"><code>Input</code></a> resource. <strong>Bevy 0.12</strong> adds a new <a href="https://docs.rs/bevy/0.12.0/bevy/input/gamepad/struct.GamepadButtonInput.html"><code>GamepadButtonInput</code></a> event, filling this gap.</p>
<h2 id="sceneinstanceready-event">SceneInstanceReady Event
<a href="#sceneinstanceready-event">#</a>
</h2>
<p>authors: @Shatur</p>
<p><strong>Bevy 0.12</strong> adds a new <a href="https://docs.rs/bevy/0.12.0/bevy/scene/struct.SceneInstanceReady.html"><code>SceneInstanceReady</code></a> event, which makes it easy to listen for a specific scene instance to be ready. "Ready" in this case means "fully spawned as an entity".</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>Resource</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>struct</span> </span><span><span>MyScene</span></span><span><span><span>(</span>Entity</span><span>)</span></span><span>;</span>

<span><span><span>fn</span> </span><span>setup</span></span><span><span><span>(</span><span>mut</span> <span>commands</span><span>:</span> Commands, <span>assets</span><span>:</span> <span>Res<span>&lt;</span>AssetServer<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    <span>let</span> scene <span>=</span> SceneBundle <span><span>{</span>
        scene<span>:</span> assets<span>.</span><span>load</span><span><span>(</span><span><span>"</span>some.gltf#MyScene<span>"</span></span></span><span><span>)</span></span><span>,</span>
        <span>..</span><span>default</span><span><span>(</span></span><span><span>)</span></span>
    </span><span><span>}</span></span><span>;</span>
    <span>let</span> entity <span>=</span> commands<span>.</span><span>spawn</span><span><span>(</span>scene</span><span><span>)</span></span><span>.</span><span>id</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
    commands<span>.</span><span>insert_resource</span><span><span>(</span>MyScene<span><span>(</span>entity</span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
</span><span><span>}</span></span></span>

<span><span><span>fn</span> </span><span>system</span></span><span><span><span>(</span><span>mut</span> <span>events</span><span>:</span> <span>EventReader<span>&lt;</span>SceneInstanceReady<span>&gt;</span></span>, <span>my_scene</span><span>:</span> <span>Res<span>&lt;</span>MyScene<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    <span>for</span> event <span>in</span> events<span>.</span><span>read</span><span><span>(</span></span><span><span>)</span></span> <span><span>{</span>
        <span>if</span> event<span>.</span>parent <span>==</span> my_scene<span>.</span><span>0</span> <span><span>{</span>
            <span><span>//</span> the scene instance is "ready"
</span>        </span><span><span>}</span></span>
    </span><span><span>}</span></span>
</span><span><span>}</span></span></span>
</span></code></pre>
<h2 id="split-computed-visibility">Split Computed Visibility
<a href="#split-computed-visibility">#</a>
</h2>
<p>authors: @JoJoJet</p>
<p>The <code>ComputedVisibility</code> component has now been split into <a href="https://docs.rs/bevy/0.12.0/bevy/render/view/struct.InheritedVisibility.html"><code>InheritedVisibility</code></a> (visible in the hierarchy) and <a href="https://docs.rs/bevy/0.12.0/bevy/render/view/struct.ViewVisibility.html"><code>ViewVisibility</code></a> (visible from a view), making it possible to use Bevy's built-in change detection on both sets of data separately.</p>
<h2 id="reflectbundle">ReflectBundle
<a href="#reflectbundle">#</a>
</h2>
<p>authors: @Shatur</p>
<p>Bevy now supports "Bundle reflection" via <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/reflect/struct.ReflectBundle.html"><code>ReflectBundle</code></a>:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>Bundle<span>,</span> Reflect</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>#</span><span>[</span><span>reflect</span><span><span><span>(</span></span></span><span><span>Bundle</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>struct</span> </span><span><span>SpriteBundle</span> </span><span><span><span>{</span>
    <span>image</span><span>:</span> <span>Handle<span>&lt;</span>Image<span>&gt;</span></span>,
    <span><span>//</span> other components here
</span></span><span><span>}</span></span></span>
</span></code></pre>
<p>This makes it possible to create and interact with ECS bundles using Bevy Reflect, meaning you can do these operations dynamically at runtime. This is useful for scripting and asset scenarios.</p>
<h2 id="reflect-commands">Reflect Commands
<a href="#reflect-commands">#</a>
</h2>
<p>authors: @NoahShomette</p>
<p>It is now possible to insert and remove reflect components from an entity in a normal system via new functions on <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/system/struct.Commands.html"><code>Commands</code></a>!</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>Component<span>,</span> Reflect<span>,</span> Default</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>#</span><span>[</span><span>reflect</span><span><span><span>(</span></span></span><span><span>Component</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>struct</span> </span><span><span>Component</span></span><span><span><span>(</span><span>u32</span></span><span>)</span></span><span>;</span>

<span><span><span>fn</span> </span><span>reflect_commands</span></span><span><span><span>(</span><span>mut</span> <span>commands</span><span>:</span> Commands</span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    <span>let</span> boxed_reflect_component<span>:</span> <span><span>Box</span><span>&lt;</span>dyn Reflect<span>&gt;</span></span> <span>=</span> <span>Box</span><span><span>::</span></span>new<span><span>(</span>Component<span><span>(</span><span>916</span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>

    <span>let</span> entity <span>=</span> commands
        <span>.</span><span>spawn_empty</span><span><span>(</span></span><span><span>)</span></span>
        <span>.</span><span>insert_reflect</span><span><span>(</span>boxed_reflect_component<span>.</span><span>clone_value</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>.</span><span>id</span><span><span>(</span></span><span><span>)</span></span><span>;</span>

    commands<span>.</span><span>entity</span><span><span>(</span>entity</span><span><span>)</span></span><span>.</span><span>remove_reflect</span><span><span>(</span>boxed_reflect_component<span>.</span><span>type_name</span><span><span>(</span></span><span><span>)</span></span><span>.</span><span>to_owned</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>

</span><span><span>}</span></span></span>
</span></code></pre>
<p>The above commands use the <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/reflect/struct.AppTypeRegistry.html"><code>AppTypeRegistry</code></a> by default. If you use a different TypeRegistry then you can use the ...<code>with_registry</code> commands instead.</p>
<pre data-lang="rust"><code data-lang="rust"><span> <span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>Resource</span></span><span><span><span>)</span></span></span><span>]</span></span>
 <span><span>struct</span> </span><span><span>TypeRegistryResource</span> </span><span><span><span>{</span>
     <span>type_registry</span><span>:</span> TypeRegistry,
 </span><span><span>}</span></span></span>

 <span><span>impl</span> </span><span><span><span>AsRef</span><span>&lt;</span>TypeRegistry<span>&gt;</span></span> <span>for</span></span><span> <span>TypeRegistryResource</span> </span><span><span><span>{</span>
     <span><span><span>fn</span> </span><span>as_ref</span></span><span><span><span>(</span><span>&amp;</span><span>self</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>&amp;</span>TypeRegistry</span> </span><span><span><span>{</span>
         <span>&amp;</span><span>self</span><span>.</span>type_registry
     </span><span><span>}</span></span></span>
 </span><span><span>}</span></span></span>

 <span><span><span>fn</span> </span><span>reflect_commands_with_registry</span></span><span><span><span>(</span><span>mut</span> <span>commands</span><span>:</span> Commands</span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    <span>let</span> boxed_reflect_component<span>:</span> <span><span>Box</span><span>&lt;</span>dyn Reflect<span>&gt;</span></span> <span>=</span> <span>Box</span><span><span>::</span></span>new<span><span>(</span>Component<span><span>(</span><span>916</span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>

    <span>let</span> entity <span>=</span> commands
        <span>.</span><span>spawn_empty</span><span><span>(</span></span><span><span>)</span></span>
        <span>.</span><span>insert_reflect_with_registry<span>::</span></span><span><span>&lt;</span>TypeRegistryResource<span>&gt;</span></span><span><span>(</span>boxed_reflect_component<span>.</span><span>clone_value</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>.</span><span>id</span><span><span>(</span></span><span><span>)</span></span><span>;</span>

    commands<span>.</span><span>entity</span><span><span>(</span>entity</span><span><span>)</span></span><span>.</span><span>remove_reflect_with_registry<span>::</span></span><span><span>&lt;</span>TypeRegistryResource<span>&gt;</span></span><span><span>(</span>boxed_reflect_component<span>.</span><span>type_name</span><span><span>(</span></span><span><span>)</span></span><span>.</span><span>to_owned</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>

</span><span><span>}</span></span></span>
</span></code></pre>
<p>See <a href="https://docs.rs/bevy/0.12.0/bevy/ecs/reflect/trait.ReflectCommandExt.html"><code>ReflectCommandExt</code></a> for more examples and documentation</p>
<h2 id="limit-background-fps">Limit Background FPS
<a href="#limit-background-fps">#</a>
</h2>
<p>authors: @maniwani</p>
<p>If an app has no window in focus, Bevy will now limit its update rate (to 60Hz by default).</p>
<p>Before, many Bevy apps running on desktop operating systems (particularly macOS) would see spikes in CPU usage whenever their windows were minimized or completely covered, even with VSync enabled. The reason for this is that many desktop window managers ignore VSync for windows that aren't visible. As VSync normally limits how often an app updates, that speed limit vanishes while it's effectively disabled.</p>
<p>Now, apps running in the background will sleep in between updates to limit their FPS.</p>
<p>The one caveat is that most operating systems will not report if a window is visible, only if it has focus. So the throttle is based on focus, not visibility. 60Hz was then chosen as the default to maintain high FPS in cases where the window is not focused but still visible.</p>
<h2 id="animationplayer-api-improvements"><code>AnimationPlayer</code> API Improvements
<a href="#animationplayer-api-improvements">#</a>
</h2>
<p>authors: @devinleamy</p>
<p>The <code>AnimationPlayer</code> now has new methods for controlling playback, and utilities for checking
if an animation is playing or completed, and getting its <code>AnimationClip</code> handle.</p>
<p><code>set_elapsed</code> and has been removed in favor of <code>seek_to</code>. <code>elapsed</code> now
returns the actual elapsed time and is not affected by the animation speed. <code>stop_repeating</code> have been removed
in favor of <code>set_repeat(RepeatAnimation::Never)</code>.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span>let</span> <span>mut</span> player <span>=</span> q_animation_player<span>.</span><span>single_mut</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
<span><span>//</span> Check if an animation is complete.
</span><span>if</span> player<span>.</span><span>is_finished</span><span><span>(</span></span><span><span>)</span></span> <span><span>{</span>
    <span><span>//</span> Set the playback mode.
</span>    player<span>.</span><span>set_repeat</span><span><span>(</span><span>RepeatAnimation<span>::</span></span>Forever</span><span><span>)</span></span><span>;</span>
    player<span>.</span><span>set_repeat</span><span><span>(</span><span>RepeatAnimation<span>::</span></span>Never</span><span><span>)</span></span><span>;</span>
    player<span>.</span><span>set_repeat</span><span><span>(</span><span>RepeatAnimation<span>::</span></span>Count<span><span>(</span><span>4</span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
</span><span><span>}</span></span>
<span><span>//</span> Get a handle to the playing AnimationClip.
</span><span>let</span> clip_handle <span>=</span> player<span>.</span><span>animation_clip</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
<span><span>//</span> Seek to 1s in the current clip.
</span>player<span>.</span><span>seek_to</span><span><span>(</span><span>1.</span><span>0</span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<h2 id="ignore-ambiguous-components-and-resources">Ignore Ambiguous Components and Resources
<a href="#ignore-ambiguous-components-and-resources">#</a>
</h2>
<p>authors: @hymm</p>
<p>Ambiguity Reporting is an optional feature of Bevy's scheduler. When enabled it reports conflicts between systems that modify the same data, but are not ordered in relation to each other. While some reported conflicts can cause subtle bugs, many do not. Bevy has a couple existing methods and two new ones for ignoring these.</p>
<p>The existing APIs: <code>ambiguous_with</code>, which ignores conflicts between specific sets, and <code>ambiguous_with_all</code>, which ignores all conflicts with the set it's applied to. In addition, there are now 2 new APIs that let you ignore conflicts on a type of data, <code>allow_ambiguous_component</code> and <code>allow_ambiguous_resource</code>. These ignore all conflicts between systems on that specific type, component or resource, in a world.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>#</span><span>[</span><span>derive</span><span><span><span>(</span></span></span><span><span>Resource</span></span><span><span><span>)</span></span></span><span>]</span></span>
<span><span>struct</span> </span><span><span>R</span></span><span>;</span>

<span><span>//</span> These systems are ambiguous on R
</span><span><span><span>fn</span> </span><span>system_1</span></span><span><span><span>(</span><span>_</span>: <span>ResMut<span>&lt;</span>R<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span></span><span><span>}</span></span></span>
<span><span><span>fn</span> </span><span>system_2</span></span><span><span><span>(</span><span>_</span>: <span>Res<span>&lt;</span>R<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span></span><span><span>}</span></span></span>

<span>let</span> <span>mut</span> app <span>=</span> <span>App<span>::</span></span>new<span><span>(</span></span><span><span>)</span></span><span>;</span>
app<span>.</span><span>configure_schedules</span><span><span>(</span>ScheduleBuildSettings <span><span>{</span>
  ambiguity_detection<span>:</span> <span>LogLevel<span>::</span></span>Error<span>,</span>
  <span>..</span><span>default</span><span><span>(</span></span><span><span>)</span></span>
</span><span><span>}</span></span></span><span><span>)</span></span><span>;</span>
app<span>.</span><span>insert_resource</span><span><span>(</span>R</span><span><span>)</span></span><span>;</span>

app<span>.</span><span>add_systems</span><span><span>(</span>Update<span>,</span> <span><span>(</span> system_1<span>,</span> system_2 </span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
app<span>.</span><span>allow_ambiguous_resource<span>::</span></span><span><span>&lt;</span>R<span>&gt;</span></span><span><span>(</span></span><span><span>)</span></span><span>;</span>

<span><span>//</span> Running the app does not error.
</span>app<span>.</span><span>update</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>Bevy is now using this to ignore conflicts between the <code>Assets&lt;T&gt;</code> resources. Most of these ambiguities are modifying different assets and thus do not matter.</p>
<h2 id="spatial-audio-api-ergonomics">Spatial Audio API Ergonomics
<a href="#spatial-audio-api-ergonomics">#</a>
</h2>
<p>authors: @rparrett, @hymm, @mockersf</p>
<p>A simple "stereo" (non-HRTF) spatial audio implementation was heroically <a href="https://bevyengine.org/news/bevy-0-10/#spatial-audio">put together</a> at the last minute for Bevy 0.10, but the implementation was somewhat bare-bones and not very user-friendly. Users needed to write their own systems to update audio sinks with emitter and listener positions.</p>
<p>Now users can just add a <code>TransformBundle</code> to their <code>AudioBundle</code>s and Bevy will take care of the rest!</p>
<pre data-lang="rust"><code data-lang="rust"><span>commands<span>.</span><span>spawn</span><span><span>(</span><span><span>(</span>
    <span>TransformBundle<span>::</span></span>default<span><span>(</span></span><span><span>)</span></span><span>,</span>
    AudioBundle <span><span>{</span>
        source<span>:</span> asset_server<span>.</span><span>load</span><span><span>(</span><span><span>"</span>sounds/bonk.ogg<span>"</span></span></span><span><span>)</span></span><span>,</span>
        settings<span>:</span> <span>PlaybackSettings<span>::</span></span><span>DESPAWN</span><span>.</span><span>with_spatial</span><span><span>(</span><span>true</span></span><span><span>)</span></span><span>,</span>
    </span><span><span>}</span></span><span>,</span>
</span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<h2 id="pitch-audio-source">Pitch Audio Source
<a href="#pitch-audio-source">#</a>
</h2>
<p>authors: @basilefff</p>
<p>Audio can now be played by pitch, which is useful to debug audio issues, to use as a placeholder, or for programmatic audio.</p>
<p>A <code>Pitch</code> audio source can be created from its frequency and its duration, and then be used as a source in a <code>PitchBundle</code>.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span><span>fn</span> </span><span>play_pitch</span></span><span><span><span>(</span>
    <span>mut</span> <span>pitch_assets</span><span>:</span> <span>ResMut<span>&lt;</span><span>Assets<span>&lt;</span>Pitch<span>&gt;</span></span><span>&gt;</span></span>,
    <span>mut</span> <span>commands</span><span>:</span> Commands,
</span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
    <span><span>//</span> This is a A for 1 second
</span>    <span>let</span> pitch_handle <span>=</span> pitch_assets<span>.</span><span>add</span><span><span>(</span><span>Pitch<span>::</span></span>new<span><span>(</span><span>440.</span><span>0</span><span>,</span> <span>Duration<span>::</span></span>new<span><span>(</span><span>1</span><span>,</span> <span>0</span></span><span><span>)</span></span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
    <span><span>//</span> Play it now
</span>    commands<span>.</span><span>spawn</span><span><span>(</span>PitchBundle <span><span>{</span>
        source<span>:</span> pitch_handle<span>,</span>
        <span>..</span><span>default</span><span><span>(</span></span><span><span>)</span></span>
    </span><span><span>}</span></span></span><span><span>)</span></span><span>;</span>
</span><span><span>}</span></span></span>
</span></code></pre>
<p>Audio is generated at the given frequency using a <a href="https://en.wikipedia.org/wiki/Sine_wave#Audio_example">sine wave</a>. More complex sounds can be created by playing several pitch audio sources at the same time, like chords or hamonics.</p>
<h2 id="added-hsl-methods-to-color-struct">Added HSL methods to <code>Color</code> struct
<a href="#added-hsl-methods-to-color-struct">#</a>
</h2>
<p>authors: @idedary</p>
<p>You can now use <code>h()</code>, <code>s()</code>, <code>l()</code> together with their <code>set_h()</code>, <code>set_s()</code>, <code>set_l()</code> and <code>with_h()</code>, <code>with_s()</code>, <code>with_l()</code> variants to manipulate <em>Hue</em>, <em>Saturation</em> and <em>Lightness</em> values of a <code>Color</code> struct without cloning. Previously you could do that with only RGBA values.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> Returns HSL component values
</span><span>let</span> color <span>=</span> <span>Color<span>::</span></span><span>ORANGE</span><span>;</span>
<span>let</span> hue <span>=</span> color<span>.</span><span>h</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
<span><span>//</span> ...
</span>
<span><span>//</span> Changes the HSL component values
</span><span>let</span> <span>mut</span> color <span>=</span> <span>Color<span>::</span></span><span>PINK</span><span>;</span>
color<span>.</span><span>set_s</span><span><span>(</span><span>0.</span><span>5</span></span><span><span>)</span></span><span>;</span>
<span><span>//</span> ...
</span>
<span><span>//</span> Modifies existing colors and returns them
</span><span>let</span> color <span>=</span> <span>Color<span>::</span></span><span>VIOLET</span><span>.</span><span>with_l</span><span><span>(</span><span>0.</span><span>7</span></span><span><span>)</span></span><span>;</span>
<span><span>//</span> ...
</span></span></code></pre>
<h2 id="reduced-tracing-overhead">Reduced Tracing Overhead
<a href="#reduced-tracing-overhead">#</a>
</h2>
<p>authors: @hymm, @james7132</p>
<p>Bevy uses the <a href="https://crates.io/crates/tracing">tracing</a> library to measure system running time (among other things). This is useful for determining where bottlenecks in frame time are and measuring performance improvements. These traces can be visualized using the <a href="https://github.com/wolfpld/tracy">tracy</a> tool. However, using tracing's spans has a significant overhead to it. A large part of the per-span overhead is due to allocating the string description of the span. By caching the spans for systems, commands, and parallel iteration, we have significantly reduced the CPU time overhead when using tracing. In the PR that introduced system span caching, our "many foxes" stress test went from 5.35&nbsp;ms to 4.54&nbsp;ms. In the PR that added caching for the parallel iteration spans, our "many cubes" stress test went from 8.89&nbsp;ms to 6.8&nbsp;ms.</p>
<p><img src="https://bevyengine.org/news/bevy-0-12/tracing-overhead-reduction.png" alt="tracing overhead"></p>
<h2 id="accesskit-integration-improvements">AccessKit Integration Improvements
<a href="#accesskit-integration-improvements">#</a>
</h2>
<p>authors: @ndarilek</p>
<p>Bevy 0.10's <a href="https://accesskit.dev/">AccessKit</a> integration made it incredibly easy for the engine to take the lead and push updates to the accessibility tree. But as any good dance partner knows, sometimes it's best not to lead but to follow.</p>
<p>This release adds the <code>ManageAccessibilityUpdates</code> resource which, when set to <code>false</code>, stops the engine from updating the tree on its own. This paves the way for third-party UIs with Bevy and AccessKit integration to send updates directly to Bevy. When the UI is ready to return control, <code>ManageAccessibilityUpdates</code> is set to <code>true</code> Bevy picks up where it left off and starts sending updates again.</p>
<p>AccessKit itself was also simplified, and this release capitalizes on that to shrink the surface area of our integration. If you're curious about how things work internally or want to help, the <code>bevy_a11y</code> crate is now more approachable than ever.</p>
<h2 id="typepath-migration">TypePath Migration
<a href="#typepath-migration">#</a>
</h2>
<p>authors: @soqb</p>
<p>As a followup to the introduction of <a href="https://bevyengine.org/news/bevy-0-11/#stable-typepath">Stable TypePath</a> in <strong>Bevy 0.11</strong>, Bevy Reflect now uses <a href="https://docs.rs/bevy/0.12.0/bevy/reflect/trait.TypePath.html"><code>TypePath</code></a> instead of <a href="https://doc.rust-lang.org/std/any/fn.type_name.html"><code>type_name</code></a>. A reflected type's <a href="https://docs.rs/bevy/0.12.0/bevy/reflect/trait.TypePath.html"><code>TypePath</code></a> is now accessible via <a href="https://docs.rs/bevy/0.12.0/bevy/reflect/enum.TypeInfo.html"><code>TypeInfo</code></a> and <a href="https://docs.rs/bevy/0.12.0/bevy/reflect/trait.DynamicTypePath.html"><code>DynamicTypePath</code></a> and <a href="https://doc.rust-lang.org/std/any/fn.type_name.html"><code>type_name</code></a> methods have been removed.</p>
<h2 id="improved-bevymark-example">Improved bevymark Example
<a href="#improved-bevymark-example">#</a>
</h2>
<p>authors: @superdump (Rob Swain), @IceSentry</p>
<p>The bevymark example needed to be improved to enable benchmarking the batching / instanced draw changes. Modes were added to:</p>
<ul>
<li>draw 2D quad meshes instead of sprites: <code>--mode mesh2d</code></li>
<li>vary the per-instance color data instead of only varying the colour per wave of birds: <code>--vary-per-instance</code></li>
<li>generate a number of material / sprite textures and randomly choose from them either per wave or per instance depending on the vary per instance setting: <code>--material-texture-count 10</code></li>
<li>spawn the birds in random z order (new default), or in draw order: <code>--ordered-z</code></li>
</ul>
<p>This allows benchmarking of different situations for batching / instancing in the next section.</p>
<h2 id="ci-improvements">CI Improvements
<a href="#ci-improvements">#</a>
</h2>
<p>authors: @ameknite, @mockersf</p>
<p>To help ensure examples are reusable outside of the Bevy repository, CI will now fail if an example
uses an import from <code>bevy_internal</code> instead of <code>bevy</code>.</p>
<p>Additionally, the daily mobile check job now builds on more iOS and Android devices:</p>
<ul>
<li>iPhone 13 on iOS 15</li>
<li>iPhone 14 on iOS 16</li>
<li>iPhone 15 on iOS 17</li>
<li>Xiaomi Redmi Note 11 on Android 11</li>
<li>Google Pixel 6 on Android 12</li>
<li>Samsung Galaxy S23 on Android 13</li>
<li>Google Pixel 8 on Android 14</li>
</ul>

<p>authors: @mockersf</p>
<p>The example showcase tool can now build all examples for WebGL2 or WebGPU. This is used to update
the website with all Wasm-compatible examples, which you can find
<a href="https://bevyengine.org/examples/">here</a> for WebGL2, or
<a href="https://bevyengine.org/examples-webgpu/">here</a> for WebGPU.</p>
<p>It is now also capable of capturing a screenshot while running all examples:</p>
<pre data-lang="sh"><code data-lang="sh"><span><span><span>cargo</span></span><span> run<span><span> -</span>p</span> example-showcase<span> --</span></span><span> run --screenshot</span>
</span></code></pre>
<p>Some options are available to help with the execution, you can check them with <code>--help</code>.</p>
<p>Those screenshots are displayed on the example pages on the website, and can be used to check that
a PR didn't introduce a visible regression.</p>
<h2 id="example-execution-in-ci">Example execution in CI
<a href="#example-execution-in-ci">#</a>
</h2>
<p>authors: @mockersf, @rparrett</p>
<p>All examples are now executed in CI on Windows with DX12, and on Linux with Vulkan. When possible,
a screenshot is taken and compared to the last execution. If an example crashes, the log is saved.
The mobile example is also executed on the same devices as the daily mobile check job.</p>
<p>A report of all those executions is built and available
<a href="https://thebevyflock.github.io/bevy-example-runner/">here</a>.</p>
<p><a href="https://thebevyflock.github.io/bevy-example-runner/"><img src="https://bevyengine.org/news/bevy-0-12/example-report.png" alt="Example Report"></a></p>
<p>If you want to help sponsor tests on more platforms, get in touch!</p>
<h2 id="what-s-next"><a name="what-s-next"></a>What's Next?
<a href="#what-s-next">#</a>
</h2>
<p>We have plenty of work in progress! Some of this will likely land in <strong>Bevy 0.13</strong>.</p>
<p>Check out the <a href="https://github.com/bevyengine/bevy/milestone/17"><strong>Bevy 0.13 Milestone</strong></a> for an up-to-date list of current work being considered for <strong>Bevy 0.13</strong>.</p>
<ul>
<li><strong>Bevy Scene and UI Evolution</strong>: We are hard at work building out a new Scene and UI system for Bevy. We're experimenting with a brand new <a href="https://github.com/bevyengine/bevy/discussions/9538">holistic Scene / UI system</a> that will hopefully serve as the foundation for the Bevy Editor and make defining scenes in Bevy much more flexible, capabable, and ergonomic.</li>
<li><strong>More Batching/Instancing Improvements</strong>: Put skinned mesh data into storage buffers to enable instanced drawing of skinned mesh entities with the same mesh/skin/material. Put material data in the new GpuArrayBuffer to enable batching of draws of entities with the same mesh, material type, and textures, but different material data.</li>
<li><strong>GPU-Driven Rendering</strong>: We plan on driving rendering via the GPU by creating draw calls in compute shaders (on platforms that support it). We have <a href="https://github.com/bevyengine/bevy/pull/10164">experiments using meshlets</a> and plan to explore other approaches as well. This will involve putting textures into bindless texture arrays and putting meshes in one big buffer to avoid rebinds.</li>
<li><strong>Exposure Settings</strong>: Control <a href="https://github.com/bevyengine/bevy/pull/8407">camera exposure settings</a> to change the feel and mood of your renders!</li>
<li><strong>GPU Picking</strong>: <a href="https://github.com/bevyengine/bevy/pull/8784">Efficiently select objects</a> with pixel perfect accuracy on the GPU!</li>
<li><strong>Per-Object Motion Blur</strong>: <a href="https://github.com/bevyengine/bevy/pull/9924">Blur objects as they move</a> using their motion vectors</li>
<li><strong>UI Node Border Radius and Shadows</strong>: Support for <a href="https://github.com/bevyengine/bevy/pull/8973">border radius and shadows</a> in Bevy UI</li>
<li><strong>System Stepping</strong>: Debug your app by <a href="https://github.com/bevyengine/bevy/pull/8453">running systems step by step</a> for a given frame</li>
<li><strong>Automatic Sync Points</strong>: Support for <a href="https://github.com/bevyengine/bevy/pull/9822">automatically inserting sync points</a> between systems with dependencies, removing the need for manual insertion and resolving a common source of errors.</li>
<li><strong>Lightmap Support</strong>: Support for <a href="https://github.com/bevyengine/bevy/pull/10231">rendering pre-baked lightmaps</a></li>
</ul>
<h2 id="support-bevy">Support Bevy
<a href="#support-bevy">#</a>
</h2>
<p>Sponsorships help make our work on Bevy sustainable. If you believe in Bevy's mission, consider <a href="https://bevyengine.org/community/donate">sponsoring us</a> ... every bit helps!</p>
<p><a href="https://bevyengine.org/community/donate">Donate <img src="https://bevyengine.org/assets/heart.svg" alt="heart icon"></a></p>
<h2 id="contributors">Contributors
<a href="#contributors">#</a>
</h2>
<p>Bevy is made by a <a href="https://bevyengine.org/community/people/">large group of people</a>. A huge thanks to the 185 contributors that made this release (and associated docs) possible! In random order:</p>
<ul>
<li>@100-TomatoJuice</li>
<li>@525c1e21-bd67-4735-ac99-b4b0e5262290</li>
<li>@66OJ66</li>
<li>@A-Walrus</li>
<li>@Aceeri</li>
<li>@aevyrie</li>
<li>@aleksa2808</li>
<li>@alexmadeathing</li>
<li>@alice-i-cecile</li>
<li>@ameknite</li>
<li>@anarelion</li>
<li>@arendjr</li>
<li>@arsmilitaris</li>
<li>@awtterpip</li>
<li>@basilefff</li>
<li>@BeastLe9enD</li>
<li>@BrandonDyer64</li>
<li>@bravely-beep</li>
<li>@Braymatter</li>
<li>@bushrat011899</li>
<li>@Cactus-man</li>
<li>@cart</li>
<li>@cBournhonesque</li>
<li>@cbournhonesque-sc</li>
<li>@cevans-uk</li>
<li>@CGMossa</li>
<li>@ChristopherBiscardi</li>
<li>@ClayenKitten</li>
<li>@CleanCut</li>
<li>@coreh</li>
<li>@Cptn-Sherman</li>
<li>@CrumbsTrace</li>
<li>@cyqsimon</li>
<li>@d-bucur</li>
<li>@danchia</li>
<li>@denshika</li>
<li>@devil-ira</li>
<li>@DevinLeamy</li>
<li>@DGriffin91</li>
<li>@djeedai</li>
<li>@dmyyy</li>
<li>@doonv</li>
<li>@Dot32IsCool</li>
<li>@Dworv</li>
<li>@Elabajaba</li>
<li>@EmiOnGit</li>
<li>@ethereumdegen</li>
<li>@Feilkin</li>
<li>@fgrust</li>
<li>@FlippinBerger</li>
<li>@flisky</li>
<li>@floppyhammer</li>
<li>@floreal</li>
<li>@fornwall</li>
<li>@gardengim</li>
<li>@geieredgar</li>
<li>@GitGhillie</li>
<li>@HaNaK0</li>
<li>@hate</li>
<li>@hesiod</li>
<li>@hmeine</li>
<li>@horazont</li>
<li>@hymm</li>
<li>@IceSentry</li>
<li>@ickk</li>
<li>@ickshonpe</li>
<li>@IDEDARY</li>
<li>@iiYese</li>
<li>@ItsDoot</li>
<li>@jakobhellermann</li>
<li>@james-j-obrien</li>
<li>@james7132</li>
<li>@jancespivo</li>
<li>@jfaz1</li>
<li>@jimmcnulty41</li>
<li>@JMS55</li>
<li>@jnhyatt</li>
<li>@johanhelsing</li>
<li>@JoJoJet</li>
<li>@jpsikstus</li>
<li>@kamirr</li>
<li>@Kanabenki</li>
<li>@killercup</li>
<li>@konsolas</li>
<li>@kshitijaucharmal</li>
<li>@lewiszlw</li>
<li>@louis-le-cam</li>
<li>@Malax</li>
<li>@MalekiRe</li>
<li>@mamekoro</li>
<li>@ManevilleF</li>
<li>@maniwani</li>
<li>@MarkusTheOrt</li>
<li>@mattdm</li>
<li>@maxheyer</li>
<li>@mdickopp</li>
<li>@miketwenty1</li>
<li>@MinerSebas</li>
<li>@MJohnson459</li>
<li>@mnmaita</li>
<li>@mockersf</li>
<li>@MrGunflame</li>
<li>@MrGVSV</li>
<li>@nakedible</li>
<li>@ndarilek</li>
<li>@Neo-Zhixing</li>
<li>@nickrart</li>
<li>@nicoburns</li>
<li>@nicopap</li>
<li>@NiklasEi</li>
<li>@Nilirad</li>
<li>@NiseVoid</li>
<li>@NoahShomette</li>
<li>@nxsaken</li>
<li>@okwilkins</li>
<li>@OneFourth</li>
<li>@opstic</li>
<li>@ottah</li>
<li>@pablo-lua</li>
<li>@papow65</li>
<li>@pascualex</li>
<li>@paul-hansen</li>
<li>@pcwalton</li>
<li>@photex</li>
<li>@Pixelstormer</li>
<li>@PortalRising</li>
<li>@ptxmac</li>
<li>@Quicksticks-oss</li>
<li>@rafalh</li>
<li>@raffaeleragni</li>
<li>@RCoder01</li>
<li>@rdrpenguin04</li>
<li>@regnarock</li>
<li>@ricky26</li>
<li>@rj00a</li>
<li>@rlidwka</li>
<li>@robojeb</li>
<li>@robtfm</li>
<li>@rodolphito</li>
<li>@rparrett</li>
<li>@ryand67</li>
<li>@s-puig</li>
<li>@sadikkuzu</li>
<li>@sebosp</li>
<li>@SecretPocketCat</li>
<li>@Selene-Amanita</li>
<li>@Serverator</li>
<li>@ShadowMitia</li>
<li>@Shatur</li>
<li>@SIGSTACKFAULT</li>
<li>@SkiFire13</li>
<li>@skindstrom</li>
<li>@SludgePhD</li>
<li>@softmoth</li>
<li>@soqb</li>
<li>@SpecificProtagonist</li>
<li>@st0rmbtw</li>
<li>@StaffEngineer</li>
<li>@stepancheg</li>
<li>@superdump</li>
<li>@suravshresth</li>
<li>@SykikXO</li>
<li>@tadeohepperle</li>
<li>@tbillington</li>
<li>@teoxoy</li>
<li>@Testare</li>
<li>@tguichaoua</li>
<li>@TimJentzsch</li>
<li>@tormeh</li>
<li>@torsteingrindvik</li>
<li>@Trashtalk217</li>
<li>@tsujp</li>
<li>@Unarmed</li>
<li>@urben1680</li>
<li>@viridia</li>
<li>@VitalyAnkh</li>
<li>@Vrixyz</li>
<li>@wackbyte</li>
<li>@waywardmonkeys</li>
<li>@Wcubed</li>
<li>@wpederzoli</li>
<li>@ycysdf</li>
<li>@yrns</li>
<li>@ZacHarroldC5</li>
<li>@Zeenobit</li>
</ul>
<h2 id="full-changelog">Full Changelog
<a href="#full-changelog">#</a>
</h2>
<h3 id="a-ecs-a-diagnostics">A-ECS + A-Diagnostics
<a href="#a-ecs-a-diagnostics">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9950">Cache parallel iteration spans</a></li>
</ul>
<h3 id="a-ecs-a-scenes">A-ECS + A-Scenes
<a href="#a-ecs-a-scenes">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/10001">Make builder types take and return <code>Self</code></a></li>
</ul>
<h3 id="a-scenes">A-Scenes
<a href="#a-scenes">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9260">Move scene spawner systems to SpawnScene schedule</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9313">Add <code>SceneInstanceReady</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9451">Add <code>SpawnScene</code> to prelude</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9949">Finish documenting <code>bevy_scene</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9984">Only attempt to copy resources that still exist from scenes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10161">Correct Scene loader error description</a></li>
</ul>
<h3 id="a-tasks-a-diagnostics">A-Tasks + A-Diagnostics
<a href="#a-tasks-a-diagnostics">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9348">Fix doc warning in bevy_tasks</a></li>
</ul>
<h3 id="a-tasks">A-Tasks
<a href="#a-tasks">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/8750">elaborate on TaskPool and bevy tasks</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9485">Remove Resource and add Debug to TaskPoolOptions</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9851">Fix clippy lint in single_threaded_task_pool</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9881">Remove dependecies from bevy_tasks' README</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9626">Allow using async_io::block_on in bevy_tasks</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10026">add test for nested scopes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10008">Global TaskPool API improvements</a></li>
</ul>
<h3 id="a-audio-a-windowing">A-Audio + A-Windowing
<a href="#a-audio-a-windowing">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/10158">Application lifetime events (suspend audio on Android)</a></li>
</ul>
<h3 id="a-animation-a-transform">A-Animation + A-Transform
<a href="#a-animation-a-transform">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/8603">Add system parameter for computing up-to-date <code>GlobalTransform</code>s</a></li>
</ul>
<h3 id="a-transform">A-Transform
<a href="#a-transform">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9081">Update <code>GlobalTransform</code> on insertion</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9518">Add <code>Without&lt;Parent&gt;</code> filter to <code>sync_simple_transforms</code>' orphaned entities query</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9845">Fix ambiguities in transform example</a></li>
</ul>
<h3 id="a-app">A-App
<a href="#a-app">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9174">Add <code>track_caller</code> to <code>App::add_plugins</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9421">Remove redundant check for <code>AppExit</code> events in <code>ScheduleRunnerPlugin</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10173">fix typos in crates/bevy_app/src/app.rs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10173">fix typos in crates/bevy_app/src/app.rs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10195">fix run-once runners</a></li>
</ul>
<h3 id="a-ecs-a-app">A-ECS + A-App
<a href="#a-ecs-a-app">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9514">Add configure_schedules to App and Schedules to apply <code>ScheduleBuildSettings</code> to all schedules</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/7728">Only run event systems if they have tangible work to do</a></li>
</ul>
<h3 id="a-rendering-a-gizmos">A-Rendering + A-Gizmos
<a href="#a-rendering-a-gizmos">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9129">Fix gizmo draw order in 2D</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9067">Fix gizmo line width issue when using perspective</a></li>
</ul>
<h3 id="a-rendering-a-diagnostics">A-Rendering + A-Diagnostics
<a href="#a-rendering-a-diagnostics">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9484">Include note of common profiling issue</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9596">Enhance many_cubes stress test use cases</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9360">GLTF loader: handle warning NODE_SKINNED_MESH_WITHOUT_SKIN</a></li>
</ul>
<h3 id="a-rendering-a-reflection">A-Rendering + A-Reflection
<a href="#a-rendering-a-reflection">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9222">Register <code>AlphaMode</code> type</a></li>
</ul>
<h3 id="a-windowing">A-Windowing
<a href="#a-windowing">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9083">Add option to toggle window control buttons</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9301">Fixed: Default window is now "App" instead of "Bevy App"</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9173">improve documentation relating to <code>WindowPlugin</code> and <code>Window</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/7609">Improve <code>bevy_winit</code> documentation</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/7611">Change <code>WinitPlugin</code> defaults to limit game update rate when window is not visible</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9355">User controlled window visibility</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8855">Check cursor position for out of bounds of the window</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9697">Fix doc link in transparent_window example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9692">Wait before making window visible</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9684">don't create windows on winit StartCause::Init event</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9933">Fix the doc warning attribute and document remaining items for <code>bevy_window</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9991">Revert "macOS Sonoma (14.0) / Xcode 15.0 — Compatibility Fixes + Docs…</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9991">Revert "macOS Sonoma (14.0) / Xcode 15.0 — Compatibility Fixes + Docs…</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10020">Allow Bevy to start from non-main threads on supported platforms</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9826">Prevent black frames during startup</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10289">Slightly improve <code>CursorIcon</code> doc.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10358">Fix typo in window.rs</a></li>
</ul>
<h3 id="a-gizmos">A-Gizmos
<a href="#a-gizmos">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9175">Replace AHash with a good sequence for entity AABB colors</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9166">gizmo plugin lag bugfix</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9183">Clarify immediate mode in <code>Gizmos</code> documentation</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9101">Fix crash when drawing line gizmo with less than 2 vertices</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10074">Document that gizmo <code>depth_bias</code> has no effect in 2D</a></li>
</ul>
<h3 id="a-utils">A-Utils
<a href="#a-utils">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9587">change 'collapse_type_name' to retain enum types</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9551">bevy_derive: Fix <code>#[deref]</code> breaking other attributes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9638">Move default docs</a></li>
</ul>
<h3 id="a-rendering-a-assets">A-Rendering + A-Assets
<a href="#a-rendering-a-assets">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9992">Import the second UV map if present in glTF files.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10030">fix custom shader imports</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9982">Add <code>ImageSamplerDescriptor</code> as an image loader setting</a></li>
</ul>
<h3 id="a-ecs">A-ECS
<a href="#a-ecs">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9204">Add the Has world query to bevy_ecs::prelude</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8854">Simplify parallel iteration methods</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8246">Fix safety invariants for <code>WorldQuery::fetch</code> and simplify cloning</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9293">Derive debug for ManualEventIterator</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9291">Add <code>EntityMap::clear</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9312">Add a paragraph to the lifetimeless module doc</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9269">opt-out <code>multi-threaded</code> feature flag</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9253">Fix <code>ambiguous_with</code> breaking run conditions</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9366">Add <code>RunSystem</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9418">Add <code>replace_if_neq</code> to <code>DetectChangesMut</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9385">Adding <code>Copy, Clone, Debug</code> to derived traits of <code>ExecutorKind</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9431">Fix incorrect documentation link in <code>DetectChangesMut</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9460">Implement <code>Debug</code> for <code>UnsafeWorldCell</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9581">Relax In/Out bounds on impl Debug for dyn System</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9588">Improve various <code>Debug</code> implementations</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9576">Make <code>run_if_inner</code> public and rename to <code>run_if_dyn</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9579">Refactor build_schedule and related errors</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8526">Add <code>system.map(...)</code> for transforming the output of a system</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9306">Reorganize <code>Events</code> and <code>EventSequence</code> code</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9461">Replaced EntityMap with HashMap</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9577">clean up configure_set(s) erroring</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9589">Relax more <code>Sync</code> bounds on <code>Local</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9592">Rename <code>ManualEventIterator</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9604">Replaced <code>EntityCommand</code> Implementation for <code>FnOnce</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9542">Add a variant of <code>Events::update</code> that returns the removed events</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9600">Move schedule name into <code>Schedule</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9617">port old ambiguity tests over</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9631">Refactor <code>EventReader::iter</code> to <code>read</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9648">fix ambiguity reporting</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9650">Fix anonymous set name stack overflow</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9463">Fix unsoundness in <code>QueryState::is_empty</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9659">Add panicking helpers for getting components from <code>Query</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9247">Replace <code>IntoSystemSetConfig</code> with <code>IntoSystemSetConfigs</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9686">Moved <code>get_component(_unchecked_mut)</code> from <code>Query</code> to <code>QueryState</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9744">Fix naming on "tick" Column and ComponentSparseSet methods</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9749">Clarify a comment in Option WorldQuery impl</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9801">Return a boolean from <code>set_if_neq</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9778">Rename RemovedComponents::iter/iter_with_id to read/read_with_id</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9833">Remove some old references to CoreSet</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9835">Use single threaded executor for archetype benches</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9839">docs: Improve some <code>ComponentId</code> doc cross-linking.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8963">One Shot Systems</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9836">Add mutual exclusion safety info on filter_fetch</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9844">add try_insert to entity commands</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9464">Improve codegen for world validation</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9958">docs: Use intradoc links for method references.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9945">Remove States::variants and remove enum-only restriction its derive</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9912"><code>as_deref_mut()</code> method for Mut-like types</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9959">refactor: Change <code>Option&lt;With&lt;T&gt;&gt;</code> query params to <code>Has&lt;T&gt;</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9741">Hide <code>UnsafeWorldCell::unsafe_world</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9825">Add a public API to ArchetypeGeneration/Id</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9895">Ignore ambiguous components or resources</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10124">Use chain in breakout example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10211"><code>ParamSet</code>s containing non-send parameters should also be non-send</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/7762">Replace all labels with interned labels</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10294">Fix outdated comment referencing CoreSet</a></li>
</ul>
<h3 id="a-rendering-a-math">A-Rendering + A-Math
<a href="#a-rendering-a-math">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9705">derive Clone/Copy/Debug trio for shape::Cylinder</a></li>
</ul>
<h3 id="a-ui">A-UI
<a href="#a-ui">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9133">Fix for vertical text bounds and alignment</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9099">UI extraction order fix</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9259">Update text example using default font</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9295">bevy_ui: fix doc formatting for some Style fields</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9285">Remove the <code>With&lt;Parent&gt;</code> query filter from <code>bevy_ui::render::extract_uinode_borders</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9345">Fix incorrent doc comment for the set method of <code>ContentSize</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9344">Improved text widget doc comments</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9346">Change the default for the <code>measure_func</code> field of <code>ContentSize</code> to None.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9406">Unnecessary line in game_menu example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9444">Change <code>UiScale</code> to a tuple struct</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9481">Remove unnecessary doc string</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9529">Add some missing pub in ui_node</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9479">UI examples clean up</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9548"><code>round_ties_up</code> fix</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9539">fix incorrect docs for <code>JustifyItems</code> and <code>JustifySelf</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9566">Added <code>Val::ZERO</code> Constant</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9111">Cleanup some bevy_text pipeline.rs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9486">Make <code>GridPlacement</code>'s fields non-zero and add accessor functions.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9609">Remove <code>Val</code>'s <code>try_*</code> arithmetic methods</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9404">UI node bundle comment fix</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9621">Do not panic on non-UI child of UI entity</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9568">Rename <code>Val</code> <code>evaluate</code> to <code>resolve</code> and implement viewport variant support</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9640">Change <code>Urect::width</code> &amp; <code>Urect::height</code> to be const</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/7794"><code>TextLayoutInfo::size</code> should hold the drawn size of the text, and not a scaled value.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8856"><code>impl From&lt;String&gt;</code> and <code>From&lt;&amp;str&gt;</code> for <code>TextSection</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9733">Remove z-axis scaling in <code>extract_text2d_sprite</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9739">Fix doc comments for align items</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9781">Add tests to <code>bevy_ui::Layout</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9795">examples: Remove unused doc comments.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9785">Add missing <code>bevy_text</code> feature attribute to <code>TextBundle</code> from impl</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9818">Move <code>Val</code> into <code>geometry</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9820">Derive Serialize and Deserialize for UiRect</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9753"><code>ContentSize</code> replacement fix</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9784">Round UI coordinates after scaling</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9637">Have a separate implicit viewport node per root node + make viewport node <code>Display::Grid</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9879">Rename <code>num_font_atlases</code>  to <code>len</code>.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9935">Fix documentation for ui node Style</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9951"><code>text_wrap_debug</code> scale factor commandline args</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9923">Store both the rounded and unrounded node size in Node</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9989">Various accessibility API updates.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9931">UI node outlines</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10044">Implement serialize and deserialize for some UI types</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10189">Tidy up UI node docs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10230">Remove unused import warning when default_font feature is disabled</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10271">Fix crash with certain right-aligned text</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9873">Add some more docs for bevy_text.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10295">Implement <code>Neg</code> for <code>Val</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10297"><code>normalize</code> method for <code>Rect</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10345">don't Implement <code>Display</code> for <code>Val</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10252">[bevy_text] Document what happens when font is not specified</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10303">Update UI alignment docs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9853">Add stack index to <code>Node</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10345">don't Implement <code>Display</code> for <code>Val</code></a></li>
</ul>
<h3 id="a-animation">A-Animation
<a href="#a-animation">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9162">Fix doc typo</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9392">Expose <code>animation_clip</code> paths</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9338">animations: convert skinning weights from unorm8x4 to float32x4</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9002">API updates to the AnimationPlayer</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9351">only take up to the max number of joints</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9407">check root node for animations</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9927">Fix morph interpolation</a></li>
</ul>
<h3 id="a-pointers">A-Pointers
<a href="#a-pointers">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9068">Put <code>#[repr(transparent)]</code> attr to bevy_ptr types</a></li>
</ul>
<h3 id="a-assets-a-reflection">A-Assets + A-Reflection
<a href="#a-assets-a-reflection">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/8768">reflect: <code>TypePath</code> part 2</a></li>
</ul>
<h3 id="a-rendering-a-hierarchy">A-Rendering + A-Hierarchy
<a href="#a-rendering-a-hierarchy">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/10275">default inherited visibility when parent has invalid components</a></li>
</ul>
<h3 id="a-ecs-a-tasks">A-ECS + A-Tasks
<a href="#a-ecs-a-tasks">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9814">Round up for the batch size to improve par_iter performance</a></li>
</ul>
<h3 id="a-reflection-a-utils">A-Reflection + A-Utils
<a href="#a-reflection-a-utils">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9956">Moved <code>fq_std</code> from <code>bevy_reflect_derive</code> to <code>bevy_macro_utils</code></a></li>
</ul>
<h3 id="a-reflection-a-math">A-Reflection + A-Math
<a href="#a-reflection-a-math">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9191">Add reflect impls to IRect and URect</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9281">Implement reflect trait on new glam types (I64Vec and U64Vec)</a></li>
</ul>
<h3 id="a-hierarchy">A-Hierarchy
<a href="#a-hierarchy">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/8980">Prevent setting parent as itself</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9871">Add as_slice to parent</a></li>
</ul>
<h3 id="a-input">A-Input
<a href="#a-input">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9446">input: allow multiple gamepad inputs to be registered for one button in one frame</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9468">Bevy Input Docs : lib.rs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9469">Bevy Input Docs : gamepad.rs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9008">Add <code>GamepadButtonInput</code> event</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9467">Bevy Input Docs : the modules</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10010">Finish documenting <code>bevy_gilrs</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10090">Change <code>AxisSettings</code> livezone default</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9913">docs: Update input_toggle_active example</a></li>
</ul>
<h3 id="a-input-a-windowing">A-Input + A-Windowing
<a href="#a-input-a-windowing">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9456">Fix <code>Window::set_cursor_position</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9657">Change <code>Window::physical_cursor_position</code> to use the physical size of the window</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9662">Fix check that cursor position is within window bounds</a></li>
</ul>
<h3 id="a-ecs-a-reflection">A-ECS + A-Reflection
<a href="#a-ecs-a-reflection">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/8895">implement insert and remove reflected entity commands</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9419">Allow disjoint mutable world access via <code>EntityMut</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9742">Implement <code>Reflect</code> for <code>State&lt;S&gt;</code> and <code>NextState&lt;S&gt;</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9812"><code>#[derive(Clone)]</code> on <code>Component{Info,Descriptor}</code></a></li>
</ul>
<h3 id="a-math">A-Math
<a href="#a-math">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9159">Rename bevy_math::rects conversion methods</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9387">Add glam swizzles traits to prelude</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9554">Rename <code>Bezier</code> to <code>CubicBezier</code> for clarity</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9630">Add a method to compute a bounding box enclosing a set of points</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10206">re-export <code>debug_glam_assert</code> feature</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10299">Add <code>Cubic</code> prefix to all cubic curve generators</a></li>
</ul>
<h3 id="a-build-system">A-Build-System
<a href="#a-build-system">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9252">only check for bans if the dependency tree changed</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9372">Slightly better message when contributor modifies examples template</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9489">switch CI jobs between windows and linux for example execution</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9612">Check for bevy_internal imports in CI</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9665">Fix running examples on linux in CI</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9759">Bump actions/checkout from 2 to 4</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9794">doc: Remove reference to <code>clippy::manual-strip</code>.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9872">Only run some workflows on the bevy repo (not forks)</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9936">run mobile tests on more devices / OS versions</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9796">Allow <code>clippy::type_complexity</code> in more places.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9220">hacks for running (and screenshotting) the examples in CI on a github runner</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10151">make CI less failing on cargo deny bans</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10148">add test on Android 14 / Pixel 8</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10286">Use <code>clippy::doc_markdown</code> more.</a></li>
</ul>
<h3 id="a-diagnostics">A-Diagnostics
<a href="#a-diagnostics">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9390">Cache System Tracing Spans</a></li>
</ul>
<h3 id="a-rendering-a-animation">A-Rendering + A-Animation
<a href="#a-rendering-a-animation">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9846">Use a seeded rng for custom_skinned_mesh example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9899">Move skin code to a separate module</a></li>
</ul>
<h3 id="a-core">A-Core
<a href="#a-core">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/10111">Change visibility of <code>bevy::core::update_frame_count</code> to <code>pub</code></a></li>
</ul>
<h3 id="a-reflection">A-Reflection
<a href="#a-reflection">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9102">Fix typo in NamedTypePathDef</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8887">Refactor <code>path</code> module of <code>bevy_reflect</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9048">Refactor parsing in bevy_reflect path module</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9322">bevy_reflect: Fix combined field attributes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9140">bevy_reflect: Opt-out attribute for <code>TypePath</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9364">Add reflect path parsing benchmark</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9373">Make it so <code>ParsedPath</code> can be passed to GetPath</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9371">Make the reflect path parser utf-8-unaware</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9165">bevy_scene: Add <code>ReflectBundle</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9743">Fix comment in scene example <code>FromResources</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9807">Remove TypeRegistry re-export rename</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9748">Provide getters for fields of ReflectFromPtr</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9963">Add TypePath to the prelude</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9315">Improve TypeUuid's derive macro error messages</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10068">Migrate <code>Quat</code> reflection strategy from "value" to "struct"</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10103">bevy_reflect: Fix dynamic type serialization</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/7575">bevy_reflect: Fix ignored/skipped field order</a></li>
</ul>
<h3 id="a-rendering-a-assets-a-reflection">A-Rendering + A-Assets + A-Reflection
<a href="#a-rendering-a-assets-a-reflection">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9779">Implement <code>Reflect</code> for <code>Mesh</code></a></li>
</ul>
<h3 id="a-ecs-a-time">A-ECS + A-Time
<a href="#a-ecs-a-time">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/10179">add on_real_time_timer run condition</a></li>
</ul>
<h3 id="a-ecs-a-hierarchy">A-ECS + A-Hierarchy
<a href="#a-ecs-a-hierarchy">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/10311">Added 'clear_children' and 'replace_children' methods to BuildWorldChildren to be consistent with BuildChildren.</a></li>
</ul>
<h3 id="a-audio">A-Audio
<a href="#a-audio">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9225">Added Pitch as an alternative sound source</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9332">update documentation on AudioSink</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9336">audio sinks don't need their custom drop anymore</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9480">Clarify what happens when setting the audio volume</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9800">More ergonomic spatial audio</a></li>
</ul>
<h3 id="a-rendering-a-ui">A-Rendering + A-UI
<a href="#a-rendering-a-ui">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9103">Remove out-of-date paragraph in <code>Style::border</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9237">Revert "Fix UI corruption for AMD gpus with Vulkan (#9169)"</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9237">Revert "Fix UI corruption for AMD gpus with Vulkan (#9169)"</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9712"><code>many_buttons</code> enhancements</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10078">Fix UI borders</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9610">UI batching Fix</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9506">Add UI Materials</a></li>
</ul>
<h3 id="a-ecs-a-reflection-a-pointers">A-ECS + A-Reflection + A-Pointers
<a href="#a-ecs-a-reflection-a-pointers">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9194">add <code>MutUntyped::map_unchanged</code></a></li>
</ul>
<h3 id="no-area-label">No area label
<a href="#no-area-label">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9090">Fix typos throughout the project</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9106">Bump Version after Release</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9144">fix <code>clippy::default_constructed_unit_structs</code> and trybuild errors</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9128">delete code deprecated in 0.11</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9142">Drain <code>ExtractedUiNodes</code> in <code>prepare_uinodes</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9168">example showcase - pagination and can build for WebGL2</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9193">example showcase: switch default api to webgpu</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9207">Add some more helpful errors to BevyManifest when it doesn't find Cargo.toml</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9219">Fix path reference to contributors example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9223">replace parens with square brackets when referencing _mut on <code>Query</code> docs #9200</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9229">use AutoNoVsync in stress tests</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9249">bevy_render: Remove direct dep on wgpu-hal.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9276">Fixed typo in line 322</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9326">custom_material.vert: gl_InstanceIndex includes gl_BaseInstance</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9329">fix typo in a link - Mesh docs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9320">Improve font size related docs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9399">Fix gamepad viewer being marked as a non-wasm example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9154">Rustdoc: Scrape examples</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9388">enable multithreading on benches</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9370">webgl feature renamed to webgl2</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9427">Example Comment Typo Fix</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9448">Fix shader_instancing example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9436">Update tracy-client requirement from 0.15 to 0.16</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9547">fix bevy imports. windows_settings.rs example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9562">Fix CI for Rust 1.72</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9598">Swap TransparentUi to use a stable sort</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9619">Replace uses of <code>entity.insert</code> with tuple bundles in <code>game_menu</code> example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9583">Remove <code>IntoIterator</code> impl for <code>&amp;mut EventReader</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9629">remove VecSwizzles imports</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9653">Fix erronenous glam version</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9646">Fixing some doc comments</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9675">Explicitly make instance_index vertex output @interpolate(flat)</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9672">Fix some nightly warnings</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9666">Use default resolution for viewport_debug example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9704">Refer to "macOS", not "macOS X".</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9720">Remove useless single tuples and trailing commas</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10012">Fix some warnings shown in nightly</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9769">Fix animate_scale scaling z value in text2d example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9803">"serialize" feature no longer enables the optional "bevy_scene" feature if it's not enabled from elsewhere</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9823">fix deprecation warning in bench</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9829">don't enable filesystem_watcher when building for WebGPU</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9840">Improve doc formatting.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9834">Fix the <code>clippy::explicit_iter_loop</code> lint</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9842">Wslg docs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9909">skybox.wgsl: Fix precision issues</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9922">Fix typos.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9900">Add link to <code>Text2dBundle</code> in <code>TextBundle</code> docs.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9934">Fix some typos</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9965">Fix typos</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9545">Replaced <code>parking_lot</code> with <code>std::sync</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9824">Add inline(never) to bench systems</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9937">Android: handle suspend / resume</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10012">Fix some warnings shown in nightly</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10035">Updates for rust 1.73</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9282">Improve selection of iOS device in mobile example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10058">Update toml_edit requirement from 0.19 to 0.20</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10070">foxes shouldn't march in sync</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10092">Fix tonemapping test patten</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10079">Removed <code>once_cell</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10163">Improve WebGPU unstable flags docs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10184">shadow_biases: Support different PCF methods</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10185">shadow_biases: Support moving the light position and resetting biases</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10238">Update async-io requirement from 1.13.0 to 2.0.0</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10264">few fmt tweaks</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10240">Derive Error for more error types</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10356">Allow AccessKit to react to WindowEvents before they reach the engine</a></li>
</ul>
<h3 id="a-rendering-a-build-system">A-Rendering + A-Build-System
<a href="#a-rendering-a-build-system">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9331">Improve execution of examples in CI</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10150">make deferred_rendering simpler to render for CI</a></li>
</ul>
<h3 id="a-meta">A-Meta
<a href="#a-meta">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9516">Remove the bevy_dylib feature</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9993">add and fix shields in Readmes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10171">Added section for contributing and links for issues and PRs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10174">Fix orphaned contributing paragraph</a></li>
</ul>
<h3 id="a-assets-a-animation">A-Assets + A-Animation
<a href="#a-assets-a-animation">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9867">Handle empty morph weights when loading gltf</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9998">Finish documenting <code>bevy_gltf</code></a></li>
</ul>
<h3 id="a-editor-a-diagnostics">A-Editor + A-Diagnostics
<a href="#a-editor-a-diagnostics">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9679">Add <code>DiagnosticsStore::iter_mut</code></a></li>
</ul>
<h3 id="a-time">A-Time
<a href="#a-time">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9290">Fix timers.rs documentation</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9428">Add missing documentation to <code>bevy_time</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9939">Clarify behaviour of <code>Timer::finished()</code> for repeating timers</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9981">ignore time channel error</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8964">Unify <code>FixedTime</code> and <code>Time</code> while fixing several problems</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10145">Time: demote delta time clamping warning to debug</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10152">fix typo in time.rs example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10204">Example time api</a></li>
</ul>
<h3 id="a-rendering-a-ecs">A-Rendering + A-ECS
<a href="#a-rendering-a-ecs">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9092">Update <code>Camera</code>'s <code>Frustum</code> only when its <code>GlobalTransform</code> or <code>CameraProjection</code> changed</a></li>
</ul>
<h3 id="a-ui-a-reflection">A-UI + A-Reflection
<a href="#a-ui-a-reflection">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9677">bevy_ui: reflect missing types</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9919">register <code>TextLayoutInfo</code> and <code>TextFlags</code> type.</a></li>
</ul>
<h3 id="a-build-system-a-assets">A-Build-System + A-Assets
<a href="#a-build-system-a-assets">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9737">Increase iteration count for asset tests</a></li>
</ul>
<h3 id="a-rendering">A-Rendering
<a href="#a-rendering">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9093">Clarify that wgpu is based on the webGPU API</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9085">Return URect instead of (UVec2, UVec2) in Camera::physical_viewport_rect</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9186">fix module name for AssetPath shaders</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8204">Add GpuArrayBuffer and BatchedUniformBuffer</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9230">Update <code>bevy_window::PresentMode</code> to mirror <code>wgpu::PresentMode</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9052">Stop using unwrap in the pipelined rendering thread</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9158">Fix panic whilst loading UASTC encoded ktx2 textures</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9288">Document <code>ClearColorConfig</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9254">Use GpuArrayBuffer for MeshUniform</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9297">Update docs for scaling_mode field of Orthographic projection</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9311">Fix shader_material_glsl example after #9254</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9061">Improve <code>Mesh</code> documentation</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9084">Include tone_mapping fn in tonemapping_test_patterns</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9310">Extend the default render range of 2D camera</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8841">Document when Camera::viewport_to_world and related methods return None</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9343">include toplevel shader-associated defs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9361">Fix post_processing example on webgl2</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9127">use ViewNodeRunner in the post_processing example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9383">Work around naga/wgpu WGSL instance_index -&gt; GLSL gl_InstanceID bug on WebGL2</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9155">Fix non-visible motion vector text in shader prepass example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9396">Use bevy crates imports instead of bevy internal. post_processing example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9327">Make Anchor Copy</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9394">Move window.rs to window/mod.rs in bevy_render</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9416">Reduce the size of MeshUniform to improve performance</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9462">Fix temporal jitter bug</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9470">Fix gizmo lines deforming or disappearing when partially behind the camera</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9482">Make WgpuSettings::default() check WGPU_POWER_PREF</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9505">fix wireframe after MeshUniform size reduction</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9513">fix shader_material_glsl example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9201">[RAINBOW EFFECT] Added methods to get HSL components from Color</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9555">ktx2: Fix Rgb8 -&gt; Rgba8Unorm conversion</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9236">Reorder render sets, refactor bevy_sprite to take advantage</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9136">Improve documentation relating to <code>Frustum</code> and <code>HalfSpace</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9878">Revert "Update defaults for OrthographicProjection (#9537)"</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9613">Remove unused regex dep from bevy_render</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9497">Split <code>ComputedVisibility</code> into two components to allow for accurate change detection and speed up visibility propagation</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9597">Use instancing for sprites</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9674">Enhance bevymark</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9669">Remove redundant math in tonemapping.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9673">Improve <code>SpatialBundle</code> docs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9565">Cache depth texture based on usage</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9699">warn and min for different vertex count</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9611">default 16bit rgb/rgba textures to unorm instead of uint</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10031">Fix TextureAtlasBuilder padding</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/7179">Add example for <code>Camera::viewport_to_world</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9734">Fix wireframe for skinned/morphed meshes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8862">generate indices for Mikktspace</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8859">invert face culling for negatively scaled gltf nodes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9830">renderer init: create a detached task only on wasm, block otherwise</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9850">Cleanup <code>visibility</code> module</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9849">Use a single line for of large binding lists</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9861">Fix a typo in <code>DirectionalLightBundle</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9878">Revert "Update defaults for OrthographicProjection (#9537)"</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9870">Refactor rendering systems to use <code>let-else</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9882">Use radsort for Transparent2d PhaseItem sorting</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9685">Automatic batching/instancing of draw commands</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9865">Directly copy data into uniform buffers</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9925">Allow other plugins to create renderer resources</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9903">Use EntityHashMap&lt;Entity, T&gt; for render world entity storage for better performance</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9966">Parallelize extract_meshes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9990">Fix comment grammar</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/7328">Allow overriding global wireframe setting.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10022">wireframes: workaround for DX12</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10023">Alternate wireframe override api</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10031">Fix TextureAtlasBuilder padding</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9941">fix example mesh2d_manual</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8006">PCF For DirectionalLight/SpotLight Shadows</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10002">Refactor the render instance logic in #9903 so that it's easier for other components to adopt.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10051">Fix 2d_shapes and general 2D mesh instancing</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10053">fix webgl2 crash</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9614">fix orthographic cluster aabb for spotlight culling</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10056">Add consuming builder methods for more ergonomic <code>Mesh</code> creation</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9302">wgpu 0.17</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/5314">use <code>Material</code> for wireframes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10080">Extract common wireframe filters in type alias</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9258">Deferred Renderer</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/5303">Configurable colors for wireframe</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10065">chore: Renamed RenderInstance trait to ExtractInstance</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10105">pbr shader cleanup</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10100">Fix text2d view-visibility</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10109">Allow optional extraction of resources from the main world</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10117">ssao use unlit_color instead of white</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10128">Fix missing explicit lifetime name for copy_deferred_lighting_id name</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10132">Fixed mod.rs in rendering to support Radeon Cards</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9025">Explain usage of prepass shaders in docs for <code>Material</code> trait</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10142">Better link for prepare_windows docs</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10143">Improve linking within <code>RenderSet</code> docs.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10144">Fix unlit missing parameters</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10136"><code>*_PREPASS</code> Shader Def Cleanup</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10160">check for any prepass phase</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/7820">allow extensions to StandardMaterial</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10168">array_texture example: use new name of pbr function</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10191">chore: use ExtractComponent derive macro for EnvironmentMapLight and FogSettings</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10156">Variable <code>MeshPipeline</code> View Bind Group Layout</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10180">update shader imports</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9694">Bind group entries</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10222">Detect cubemap for dds textures</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10178">Fix alignment on ios simulator</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10221">Add convenient methods for Image</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10182">Use “specular occlusion” term to consistently extinguish fresnel on Ambient and Environment Map lights</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10226">Fix fog color being inaccurate</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10227">Replace all usages of texture_descritor.size.* with the helper methods</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9726">View Transformations</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10249">fix deferred example fog values</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10251">WebGL2: fix import path for unpack_unorm3x4_plus_unorm_20_</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9847">Use wildcard imports in bevy_pbr</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10259">Make mesh attr vertex count mismatch warn more readable</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10254">Image Sampler Improvements</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10276">Fix sampling of diffuse env map texture with non-uniform control flow</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10253">Log a warning when the <code>tonemapping_luts</code> feature is disabled but required for the selected tonemapper.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10200">Smaller TAA fixes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10270">Truncate attribute buffer data rather than attribute buffers</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10304">Fix deferred lighting pass values not all working on M1 in WebGL2</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10306">Add frustum to shader View</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10326">Fix handling of <code>double_sided</code> for normal maps</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10310">Add helper function to determine if color is transparent</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8015"><code>StandardMaterial</code> Light Transmission</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10330">double sided normals: fix apply_normal_mapping calls</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10196">Combine visibility queries in check_visibility_system</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10341">Make VERTEX_COLORS usable in prepass shader, if available</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10223">allow DeferredPrepass to work without other prepass markers</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10346">Increase default normal bias to avoid common artifacts</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9226">Make <code>DirectionalLight</code> <code>Cascades</code> computation generic over <code>CameraProjection</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10339">Update default <code>ClearColor</code> to better match Bevy's branding</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10360">Fix gizmo crash when prepass enabled</a></li>
</ul>
<h3 id="a-build-system-a-meta">A-Build-System + A-Meta
<a href="#a-build-system-a-meta">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9994">Fixed: README.md</a></li>
</ul>
<h3 id="a-assets">A-Assets
<a href="#a-assets">#</a>
</h3>
<ul>
<li><a href="https://github.com/bevyengine/bevy/pull/9105">doc(asset): fix asset trait example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9120">Add <code>GltfLoader::new</code>.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9132">impl <code>From&lt;&amp;AssetPath&gt;</code> for <code>HandleId</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9429">allow asset loader pre-registration</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9453">fix asset loader preregistration for multiple assets</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9493">Fix point light radius</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9553">Add support for KHR_materials_emissive_strength</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9490">Fix panic when using <code>.load_folder()</code> with absolute paths</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/8624">Bevy Asset V2</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9716">create imported asset directory if needed</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9729">Copy on Write AssetPaths</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9756">Asset v2: Asset path serialization fix</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9767">don't ignore some EventKind::Modify</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9752">Manual "Reflect Value" AssetPath impl to fix dynamic linking</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9961">Fix unused variable warning for simple AssetV2 derives</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9974">Remove monkey.gltf</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9757">Update notify-debouncer-full requirement from 0.2.0 to 0.3.1</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10003">Removed <code>anyhow</code></a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9885">Multiple Asset Sources</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10119">Make loading warning for no file ext more descriptive</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10121">Fix load_folder for non-default Asset Sources</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10123">only set up processed source if asset plugin is not unprocessed</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9736">Hot reload labeled assets whose source asset is not loaded</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9751">Return an error when loading non-existent labels</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10197">remove unused import on android</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10202">Log an error when registering an AssetSource after AssetPlugin has been built</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10186">Add note about asset source register order</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10194">Add <code>asset_processor</code> feature and remove AssetMode::ProcessedDev</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10217">Implement source into Display for AssetPath</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10208">assets: use blake3 instead of md5</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10262">Reduce noise in asset processing example</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9528">Adding AssetPath::resolve() method.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/9804">Assets: fix first hot reloading</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10198">Non-blocking load_untyped using a wrapper asset</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10210">Reuse and hot reload folder handles</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10279">Additional AssetPath unit tests.</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10352">Corrected incorrect doc comment on read_asset_bytes</a></li>
<li><a href="https://github.com/bevyengine/bevy/pull/10312">support file operations in single threaded context</a></li>
</ul>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NewPipe – The lightweight YouTube experience for Android (606 pts)]]></title>
            <link>https://newpipe.net/</link>
            <guid>38144400</guid>
            <pubDate>Sat, 04 Nov 2023 19:38:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newpipe.net/">https://newpipe.net/</a>, See on <a href="https://news.ycombinator.com/item?id=38144400">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                
                
                
                <div id="services">
                    <h3>Supported Services</h3>
                    <div>
                        <div id="service-youtube">
                            <p>YouTube</p>
                            <p>
                                YouTube is one of the most popular video and live streaming platforms, including music, news, gaming and much more.
                            </p>
                            <p><a href="https://youtube.com/">visit service website</a>
                        </p></div>

                        <div id="service-peertube">
                            <!--<div class="service-logo"><img src="/img/peertube-brand.png" alt="PeerTube" class="img-responsive"/></div>-->
                            <p>PeerTube</p>
                            <p>
                                PeerTube is a decentralized video platform.<br>
                                Any PeerTube instance can be added to NewPipe.
                            </p>
                            <p><a href="https://joinpeertube.org/">visit service website</a>
                        </p></div>

                        

                        <div id="service-bandcamp">
                            <!--<div class="service-logo"></div>-->
                            <p>Bandcamp</p>
                            <p>
                                Bandcamp is an artist-friendly platform for sharing music.<br>
                                It offers user-friendly DRM-free downloads.
                            </p>
                            <p><a href="https://bandcamp.com/">visit service website</a>
                        </p></div>

                        

                        

                        
                    </div>
                </div>

                

                <!-- User Voices -->
                <div id="user-voices">
                    <h3>What other people think</h3>
                    <div id="user-voices-carousel" data-ride="carousel" data-interval="6000">

                        <!-- Wrapper for slides -->
                        <div role="listbox">
                            
                            <div>
                                
                                <p>
                                    <a href="https://newpipe.net/blog/pinned/NewPipe-needs-feedback/#isso-12">
                                        Neil Simpson
                                    </a>
                                </p>
                                <p>Such a great app - it is probably the app I use most on my phone!</p>
                            </div>
                            
                            <div>
                                
                                <p>
                                    <a href="https://newpipe.net/blog/pinned/NewPipe-needs-feedback/#isso-16">
                                        Arthur Reeder
                                    </a>
                                </p>
                                <p>NewPipe is one of the best applications on mobile today.</p>
                            </div>
                        </div>

                        <!-- Indicators -->
                        <ol>
                            <li data-target="#user-voices-carousel" data-slide-to="0"></li>
                            <li data-target="#user-voices-carousel" data-slide-to="1"></li>
                            <li data-target="#user-voices-carousel" data-slide-to="2"></li>
                            <li data-target="#user-voices-carousel" data-slide-to="3"></li>
                        </ol>

                        <!-- Controls: not displayed but needed to get preventJumpingPage() working
                             Pausing the Carousel won't work without controls. Don't ask me why :)
                         -->
                        <p><a href="#user-voices-carousel" role="button" data-slide="prev">
                            
                            <span>Previous</span>
                        </a>
                        <a href="#user-voices-carousel" role="button" data-slide="next">
                            
                            <span>Next</span>
                        </a>

                    </p></div>
                </div>

                <!-- Download -->
                <p id="download">
                    <h3>Get NewPipe</h3>
                </p>

                <div id="download1">
                        <div id="download1-direct-download">
                                <p><img src="https://newpipe.net/img/logo_app.svg" alt="NewPipe icon" loading="lazy">
                                </p>
                                <p>
                                    Android 5+
                                </p>
                                
                            </div>
                        <div id="download1-apk-info">
                                <p>
                                    <h4>APK Info</h4>
                                </p>
                                <div>
                                    <p>Hash sum: <span data-newpipe-api="flavors.newpipe.hash_type">hashing algorithm not available</span>
                                        <code data-newpipe-api="flavors.newpipe.hash">hash sum not available</code>
                                    </p>
                                    <p>
                                    Signing key:
                                        <code>B0:2E:90:7C:1C:D6:FC:57:C3:35:F0:88:D0:8F:50:5F:94:E4:D2:15</code>
                                    </p>
                                </div>
                            </div>
                        <div id="download1-release-highlights">
                                <p>
                                    <h4>Release Highlights</h4>
                                </p>
                                <div id="download-info-changelog">
                                        <ul>
    <li>Support for searching for playlists and channels on PeerTube</li>
    <li>Subscriber count below channel name on video details page</li>
    <li>Copy hashtags/URLs in the video description with long pressing now</li>
    <li>New Appearance settings: Card view for videos in lists</li>
    <li>Handle duplicate streams on playlist creation</li>
    <li>UI improvements</li>
    <li>Multiple fixes</li>
</ul>
                                        <p><a href="https://newpipe.net/blog/pinned/release/newpipe-0.25.0+1/">Blog post</a></p>
                                    </div>
                            </div>
                        <div id="download1-fdroid-newpipe-repo">
                                    <p><a href="https://archive.newpipe.net/fdroid/repo/?fingerprint=E2402C78F9B97C6C89E97DB914A2751FDA1D02FE2039CC0897A462BDB57E7501">
                                            <img src="https://newpipe.net/img/fdroid-repo-qrcode.svg" alt="Link to our F-Droid repo">
                                        </a>
                                    </p>
                                </div>
                        <div id="download1-fdroid">
                            <p><a href="https://f-droid.org/"><img src="https://newpipe.net/img/fdroid-logo.svg" alt="F-Droid logo"> F-Droid</a> is a trusted catalogue of Free and Open Source applications for Android.</p>
                            <p>Install the F-Droid app to get notified about updates. It enables you to download and update them too.</p>
                            <div>
                                <p>If you install NewPipe via the default F-Droid repo, updates for NewPipe might take their time to arrive for you. If you want to use our own repository, check out the next item in this slideshow.</p>
                                <p><a href="https://f-droid.org/packages/org.schabi.newpipe/" target="_blank">
                                    <img src="https://newpipe.net/img/f-droid.svg" alt="get it on F-Droid">
                                </a>
                            </p></div>
                            <p><a href="https://f-droid.org/en/about/#terms-etc">F-Droid respects your privacy. They don’t track you, or your device.</a><br>
                                We would like to thank them for providing their services in this way.
                            </p>
                        </div>
                        <div id="download1-installation-help">
                                <p>
                                    <h4>Need help?</h4>
                                </p>
                                <div id="download-info-help">
                                        <ul>
                                            <li>Did you enable unknown sources?</li>
                                            <li>Do you have problems updating?</li>
                                        </ul>
                                        <p>
                                            <!--<a href="#" class="button button-small action grey">Read more</a>-->
                                            <a href="https://newpipe.net/FAQ/install/">First steps</a>
                                        </p>
                                    </div>
                            </div>
                    </div>

                <!-- disabled until we have enough tutorials and FAQs
                <div class="col-xs-12">
                    <h3 class="title">Get Started</h3>
                </div>

                <div class="col-xs-12 tile tile-bordered" id="get-started">
                    <div class="row">
                        <div class="col-xs-12">
                            <h4>Try our tutorials and read the FAQ</h4>
                        </div>
                    </div>
                    <div class="row is-flex">
                        <div class="col-xs-12 col-md-4">
                            <div class="content">
                                Set up NewPipe to work best with your conditions.
                            </div>
                        </div>
                        <a class="col-xs-12 col-md-4" href="#"><i class="fa fa-caret-right"></i> First steps</a>
                        <div class="col-xs-12 col-md-4">
                            <div class="content">
                                Are you low on mobile data and have no WiFi?<br>We show you how to save data with NewPipe
                            </div>
                        </div>
                        <a class="col-xs-12 col-md-4" href="#"><i class="fa fa-caret-right"></i> Save Data</a>
                        <div class="col-xs-12 col-md-4">
                            <div class="content">
                                NewPipe has a bunch of hidden features.<br>Don't believe us?<br>Check it out!
                            </div>
                        </div>
                        <a class="col-xs-12 col-md-4" href="#"><i class="fa fa-caret-right"></i> Learn more</a>
                    </div>
                    <div class="row text-center border-none">
                        <a class="col-xs-6" href="#">
                            <i class="fa fa-chevron-right"></i> Tutorials
                        </a>
                        <a class="col-xs-6" href="#">
                            <i class="fa fa-chevron-right"></i> FAQ
                        </a>
                    </div>
                </div>
                -->

                <!-- Open Source -->
                

                <div id="tile-opensource">
                    <p><a href="https://github.com/TeamNewPipe/NewPipe">
                            <img src="https://newpipe.net/img/newpipe_on_github.svg" alt="NewPipe on GitHub" loading="lazy">
                        </a>
                    </p>
                    <div>
                        <h4>NewPipe is free and open source</h4>

                        <p><strong>Your advantages</strong></p>
                        <ul>
                            <li>Quick help when you have a problem (nobody's ever had one)</li>
                            <li>Dozens of people bring NewPipe forward and translate it into <a href="https://hosted.weblate.org/engage/NewPipe/"><span data-newpipe-api="stats.translations">60+</span>&nbsp;languages</a>.</li>
                            <li>You can check the source code on <a href="https://github.com/TeamNewPipe/NewPipe">GitHub</a> and contribute to NewPipe.</li>
                            <li>NewPipe is covered by the <a href="https://github.com/TeamNewPipe/NewPipe/blob/master/LICENSE">GPL&nbsp;3.0&nbsp;license</a>.</li>
                            <li>Get NewPipe from <a href="https://f-droid.org/packages/org.schabi.newpipe/">F-Droid</a> and discover more FOSS apps.</li>
                            <li>NewPipe is available for free</li>
                        </ul>
                        <p>
                            <a href="https://github.com/TeamNewPipe/NewPipe/blob/dev/.github/CONTRIBUTING.md#newpipe-contribution-guidelines">Contribute</a>
                            <a href="https://github.com/TeamNewPipe/NewPipe/"><i></i> <span data-newpipe-api="stats.stargazers">25k</span></a>
                            <a href="https://hosted.weblate.org/engage/NewPipe/">Translate</a>
                            <a href="https://github.com/TeamNewPipe/website/">Improve this site</a>
                        </p>
                    </div>
                </div>

                

                <!-- Support -->

                <p>
                    <h3>Support NewPipe</h3>
                </p>
                <div id="tile-free">
                    <h4>Why NewPipe is free</h4>
                    <ul>
                        <li>We love what we are doing</li>
                        <li>NewPipe is powered by a growing community</li>
                        <li>Our goal is to make the internet a more free (libre) place and open it for everyone</li>
                        <li>Your donations cover a majority of our costs</li>
                        <li>F-Droid, Weblate, Sentry and other companies offer their services to open source projects for free</li>
                    </ul>
                </div>
                <div id="tile-like-np">
                    <h4>Like the idea?</h4>
                    <p>We hope so! But don't forget, a lot of time and energy goes into this, and we share it with you.</p>
                    <p>We offer you ways to support our work by donations - so we can get some <strong>extra snacks during work!</strong></p>
                </div>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI and Open Source in 2023 (112 pts)]]></title>
            <link>https://magazine.sebastianraschka.com/p/ai-and-open-source-in-2023</link>
            <guid>38143984</guid>
            <pubDate>Sat, 04 Nov 2023 18:50:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://magazine.sebastianraschka.com/p/ai-and-open-source-in-2023">https://magazine.sebastianraschka.com/p/ai-and-open-source-in-2023</a>, See on <a href="https://news.ycombinator.com/item?id=38143984">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p>We are slowly but steadily approaching the end of 2023. I thought this was a good time to write a brief recap of the major developments in the AI research, industry, and open-source space that happened in 2023.&nbsp;</p><p><span>Of course, this article is only a glimpse of the most relevant topics that are on the top of my mind. I recommend checking out the monthly </span><em>Research Highlights</em><span> and </span><em>Ahead of AI #4-12</em><span> issues in the </span><a href="https://magazine.sebastianraschka.com/archive" rel="">Archive</a><span> for additional coverage.</span></p><p>This year, we have yet to see any fundamentally new technology or methodology on the AI product side. Rather, this year was largely focused on doubling down on what has worked last year:</p><ul><li><p><span>ChatGPT with GPT 3.5 was upgraded to </span><a href="https://openai.com/research/gpt-4" rel="">GPT 4</a></p></li><li><p><span>DALL-E 2 was upgraded to </span><a href="https://openai.com/dall-e-3" rel="">DALL-E 3</a></p></li><li><p><span>Stable Diffusion 2.0 was upgraded to </span><a href="https://stability.ai/blog/stable-diffusion-sdxl-1-announcement" rel="">Stable Diffusion XL</a></p></li><li><p>...</p></li></ul><p><span>An </span><a href="https://www.reddit.com/r/LocalLLaMA/comments/14wbmio/gpt4_details_leaked/" rel="">interesting rumor was</a><span> that GPT-4 is a mixture of experts (MoE) models consisting of 16 submodules. Each of these 16 submodules is rumored to have 111 billion parameters (for reference, GPT-3 has 175 billion parameters).&nbsp;</span></p><p><span>The fact that GPT-4 is an MoE is probably true, even though we don't know for sure yet. One trend is that industry researchers share less and less information in their papers than they used to. For example, while </span><a href="https://arxiv.org/abs/2305.10435" rel="">GPT-1</a><span>, </span><a href="https://paperswithcode.com/paper/language-models-are-unsupervised-multitask" rel="">GPT-2</a><span>, </span><a href="https://arxiv.org/abs/2005.14165" rel="">GPT-3</a><span>, and </span><a href="https://arxiv.org/abs/2203.02155" rel="">InstructGPT</a><span> papers disclosed the architecture and training details, the GPT-4 architecture is a closely guarded secret. Or to provide another example: while Meta AI's first </span><a href="https://arxiv.org/abs/2302.13971" rel="">Llama paper</a><span> detailed the training dataset that was used to train the models, the </span><a href="https://arxiv.org/abs/2307.09288" rel="">Llama 2 model</a><span> keeps this information private. On that note Stanford introduced the </span><a href="https://hai.stanford.edu/news/introducing-foundation-model-transparency-index" rel="">The Foundation Model Transparency Index</a><span> last week, according to which Llama 2 leads at 54%, and GPT-4 ranks third at 48%.</span></p><p>Of course, it may be unreasonable to demand that companies share their trade secrets. It's still an interesting trend worth mentioning because it looks like we'll continue on this route in 2024.</p><p><span>Regarding scaling, another trend this year was scaling the input context length. For example, one of the main selling points of the GPT-4 competitor </span><a href="https://www.anthropic.com/index/claude-2" rel="">Claude 2</a><span> is that it supports up to 100k input tokens (GPT-4 is currently limited to 32k tokens), which makes it particularly attractive for generating summaries of long documents. The fact that it supports PDF inputs makes it especially useful in practice.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg" width="1456" height="1071" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1071,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5e7fdbd3-5cdb-4607-aab3-dda7e60a8fb3_1600x1177.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>Using </span><a href="https://www.anthropic.com/index/claude-2" rel="">Claude 2</a><span> to generate a summary of a PDF document</span></figcaption></figure></div><p><span>As I recall, the open-source community was heavily focused on </span><a href="https://arxiv.org/abs/2112.10752" rel="">latent diffusion models</a><span> (such as </span><a href="https://github.com/CompVis/stable-diffusion" rel="">Stable Diffusion</a><span>) and other computer vision models last year. Diffusion models and computer vision remain as relevant as ever. However, an even bigger focus of the open-source and research communities was on LLMs this year.</span></p><p><span>The explosion of open-source (or rather openly available) LLMs is partly owed to the release of the first pretrained </span><a href="https://arxiv.org/abs/2302.13971" rel="">Llama</a><span> model by Meta, which, despite its restrictive license, inspired a lot of researchers and practitioners: </span><a href="https://crfm.stanford.edu/2023/03/13/alpaca.html" rel="">Alpaca</a><span>, </span><a href="https://lmsys.org/blog/2023-03-30-vicuna/" rel="">Vicuna</a><span>, </span><a href="https://arxiv.org/abs/2303.16199" rel="">Llama-Adapter</a><span>, </span><a href="https://github.com/Lightning-AI/lit-llama" rel="">Lit-Llama</a><span>, just to name a few.</span></p><p><span>A few months later, </span><a href="https://arxiv.org/abs/2307.09288" rel="">Llama 2</a><span>, which I covered in more detail in </span><a href="https://magazine.sebastianraschka.com/p/ahead-of-ai-11-new-foundation-models" rel="">Ahead of AI #11: New Foundation Models</a><span>, largely replaced Llama 1 as a more capable base model and even came with finetuned versions.</span></p><p><span>However, most open-source LLMs are still pure text models, even though methods such as the </span><a href="https://arxiv.org/abs/2303.16199" rel="">Llama-Adapter v1</a><span> and </span><a href="https://arxiv.org/abs/2304.15010" rel="">Llama-Adapter v2</a><span> finetuning methods promise to turn existing LLMs into multimodal LLMs.&nbsp;</span></p><p><span>The one noteworthy exception is the </span><a href="https://www.adept.ai/blog/fuyu-8b" rel="">Fuyu-8B model</a><span>, which was released only a few days ago on October 17th.&nbsp;</span></p><p><span>It's noteworthy that Fuyu passes the input patches directly into a linear projection (or embedding layer) to learn its own image patch embeddings rather than relying on an additional pretrained image encoder like other models and methods do (examples include </span><a href="https://github.com/haotian-liu/LLaVA" rel="">LLaVA</a><span> and </span><a href="https://github.com/Vision-CAIR/MiniGPT-4" rel="">MiniGPT-V</a><span>. This greatly simplifies the architecture and training setup.</span></p><p>Besides the few multimodal attempts mentioned above, the largest research focus is still on matching GPT-4 text performance with smaller models in the &lt;100 B parameter range, which is likely due to hardware resource costs and constraints, limited data access, and requirements for shorter development time (due to the pressure to publish, most researchers can't afford to spend years on training a single model).&nbsp;</p><p>However, the next breakthrough in open-source LLMs does not have to come from scaling models to larger sizes. It will be interesting to see if MoE approaches can lift open-source models to new heights in 2024.</p><p><span>Interestingly, on the research front, we also saw a few alternatives to transformer-based LLMs in 2023, including the recurrent </span><a href="https://arxiv.org/abs/2305.13048" rel="">RWKV</a><span> LLM and the convolutional </span><a href="https://arxiv.org/abs/2306.15794" rel="">Hyena</a><span> LLM, that aim to improve efficiency. However, transformer-based LLMs are still the current state of the art.</span></p><p>Overall, open source has had a very active year with many breakthroughs and advancements. It's one of the areas where the whole is greater than the sum of its parts. Hence, it saddens me that some individuals are actively lobbying against open-source AI. But I hope we can keep the positive momentum in building more efficient solutions and alternatives rather than just becoming more dependent on ChatGPT-like products released by big tech companies.</p><p><span>To end this section on a positive note, thanks to the open source and research communities, we saw small and efficient models that we can run on a single GPU, like the </span><a href="https://arxiv.org/abs/2309.05463" rel="">1.3B parameter phi1.5</a><span>, </span><a href="https://mistral.ai/" rel="">7B Mistral</a><span>, and </span><a href="https://news.ycombinator.com/item?id=37891848" rel="">7B Zephyr</a><span> come closer to the performance of the large proprietary models, which is an exciting trend that I hope will continue in 2024.</span></p><p><span>I see open-source AI as the primary path forward for developing efficient and custom LLM solutions, including finetuned LLMs based on our personal or domain-specific data for various applications. if you follow me on social media, you probably saw me talking about and tinkering with </span><a href="https://github.com/Lightning-AI/lit-gpt" rel="">Lit-GPT</a><span>, which is an LLM open-source repository that I actively contribute to. But while I am a big proponent of open-source, I am also a big fan of well-designed products.</span></p><p>Since ChatGPT was released, we have seen LLMs being used for pretty much everything. Readers of this article have probably already used ChatGPT, so I don't have to explain that LLMs can indeed be useful for certain tasks.&nbsp;</p><p>The key is that we use them for the "right" things. For instance, I probably don't want to ask ChatGPT about the store hours of my favorite grocery store. However, one of my favorite use cases is fixing my grammar or helping me brainstorm with rephrasing my sentences and paragraphs. Bigger picture-wise, what underlies LLMs is the promise of increased productivity, which you probably also already experienced.</p><p><span>Besides LLMs for regular text, Microsoft's and GitHub's </span><a href="https://github.com/features/copilot" rel="">Copilot coding assistant</a><span> is also maturing, and more and more people are starting to use it. Earlier this year, a report by </span><a href="https://ark-invest.com/home-thank-you-big-ideas-2023/" rel="">Ark-Invest</a><span> estimated that code assistants reduce the time to complete a coding task by ~55%.</span></p><p>Whether it's more or less than 55% is debatable, but if you have used a code assistant before, you notice that these can be super helpful and make tedious coding-related tasks easier.</p><p>One thing is certain: coding assistants are here to stay, and they will probably only get better over time. Will they replace human programmers? I hope not. But they will undoubtedly make existing programmers more productive.</p><p>What does that mean for StackOverflow? The State of AI report includes a chart that shows the website traffic of StackOverflow compared to GitHub, which might be related to the increasing adoption of Copilot. However, I believe even ChatGPT/GPT-4 is already very helpful for coding-related tasks. I suspect that ChatGPT is also partly (or even largely) responsible for the decline in StackOverflow traffic.</p><p><strong>Hallucination</strong></p><p><span>The same problem still plagues LLMs as in 2022: they can create toxic content and tend to hallucinate. Throughout the year, I discussed several methods to address this, including reinforcement learning with human feedback (RLHF) and Nvidia's </span><a href="https://github.com/NVIDIA/NeMo-Guardrails" rel="">NeMO Guardrails</a><span>. However, these methods remain bandaids that are either too strict or not strict enough.&nbsp;</span></p><p>So far, there is no method (or even idea for a method) to address this issue 100% reliably and in a way that doesn't diminish the positive capabilities of LLMs. In my opinion, it all comes down to how we use an LLM: Don't use LLMs for everything, use a calculator for math, regard LLMs as your writing companion and double-check its outputs, and so forth.&nbsp;</p><p>Also, for specific business applications, it might be worthwhile exploring retrieval augmented augmentation (RAG) systems as a compromise. In RAG, we retrieve relevant document passages from a corpus and then condition the LLM-based text generation on the retrieved content. This approach enables models to pull in external information from databases and documents versus memorizing all knowledge.</p><p><strong>Copyrights</strong></p><p><span>More urgent problems are the copyright debates around AI. </span><a href="https://en.wikipedia.org/wiki/Fair_use" rel="">According to Wikipedia</a><span>, "The copyright status of LLMs trained on copyrighted material is not yet fully understood." And overall, it seems that many rules are still being drafted and amended. I am hoping that the rules, whatever they are, will be clear so that AI researchers and practitioners can adjust and act accordingly. (I wrote more about AI and copyright debates </span><a href="https://magazine.sebastianraschka.com/i/136352403/llms-and-copyright-laws" rel="">here</a><span>.)</span></p><p><strong>Evaluation</strong></p><p><span>An issue plaguing academic research is that the popular benchmarks and leaderboards are considered semi-broken because the test sets may have leaked and have become LLM training data. This has become a concern with phi-1.5 and Mistral, as I discussed in my </span><a href="https://magazine.sebastianraschka.com/p/ahead-of-ai-12-llm-businesses" rel="">previous article</a><span>.</span></p><p>A popular but less easy way to automate LLM evaluation is to ask humans for their preferences. Alternatively, many papers also rely on GPT-4 as the second-best way.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png" width="585" height="233.83928571428572" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:582,&quot;width&quot;:1456,&quot;resizeWidth&quot;:585,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e16eab4-6d9c-4a90-8171-487eb65c4fe7_1530x612.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>An example using human and GPT-4 preference evaluation from the </span><a href="https://arxiv.org/abs/2305.11206" rel="">LIMA paper</a></figcaption></figure></div><p><strong>Revenue</strong></p><p><span>Generative AI is currently still in an exploratory stage. Of course, we all experienced that text and image generators can be helpful for specific applications. However, whether they can generate a positive cash flow for companies is still a hotly debated topic due to the expensive hosting and runtime costs. For example, </span><a href="https://futurism.com/the-byte/openai-losing-money-chatgpt" rel="">it was reported that OpenAI had a $540 million loss</a><span> last year. On the other hand, </span><a href="https://fortune.com/2023/08/30/chatgpt-creator-openai-earnings-80-million-a-month-1-billion-annual-revenue-540-million-loss-sam-altman/#:~:text=ChatGPT%20creator%20OpenAI%20is%20reportedly,million%20loss%20from%20last%20year" rel="">recent reports say</a><span> that OpenAI is now earning $80 million each month, which could offset or exceed its operating costs.</span></p><p><strong>Fake Imagery</strong></p><p>One of the bigger issues related to generative AI, which is particularly apparent on social media platforms at the moment, is the creation of fake images and videos. Fake images and videos have always been a problem, and similar to how software like Photoshop lowered the barrier to entry for fake content, AI is taking this to the next level.&nbsp;</p><p>Other AI systems are designed to detect AI-generated content, but these are neither reliable for text nor images or videos. The only way to somewhat curb and combat these issues is to rely on trustworthy experts. Similar to how we do not take medical or legal advice from random forums or websites on the internet, we probably also shouldn't be trusting images and videos from random accounts on the internet without double-checking.&nbsp;</p><p><strong>Dataset Bottlenecks</strong></p><p>Related to the copyright debate mentioned earlier, many companies (including Twitter/X and Reddit) closed their free API access to increase revenue but also to prevent scrapers from collecting the platforms' data for AI training.</p><p>I've come across numerous advertisements from companies specializing in dataset-related tasks. Although AI may regrettably lead to the automation of certain job roles, it appears to be simultaneously generating new opportunities.</p><p><span>One of the best ways to contribute to open-source LLM progress may be in building a platform to crowdsource datasets. With this, I mean writing, collecting, and curating datasets that have explicit permission for LLM training.</span><br></p><p><span>When the Llama 2 model suite was released, I was excited to see that it included models that were finetuned for chat. Using reinforcement learning with human feedback (RLHF), Meta AI increased both the helpfulness and harmlessness of their models -- If you are interested in a more detailed explanation, I have a whole article dedicated to RLHF </span><a href="https://magazine.sebastianraschka.com/p/llm-training-rlhf-and-its-alternatives" rel="">here</a><span>.</span></p><p>I always thought of RLHF as a really interesting and promising approach, but besides InstructGPT, ChatGPT, and Llama 2, it was not widely used. Hence, I was surprised to find a chart on the rising popularity of RLHF. I certainly didn't expect it because it's still not widely used.</p><p>Since RLHF is a bit complicated and tricky to implement, most open-source projects are still focused on supervised finetuning for instruction finetuning.</p><p><span>A recent alternative to RLHF is Direct Preference Optimization (DPO). </span><a href="https://arxiv.org/abs/2305.18290" rel="">In the corresponding paper</a><span>, the researchers show that the cross entropy loss for fitting the reward model in RLHF can be used directly to finetune the LLM. According to their benchmarks, it's more efficient to use DPO and often also preferred over RLHF/PPO regarding response quality.</span></p><p><span>DPO does not seem to be widely used yet. However, to my excitement, two weeks ago, we got the first openly available LLM trained via </span><a href="https://huggingface.co/HuggingFaceH4/zephyr-7b-alpha" rel="">DPO via Lewis Tunstall and colleagues</a><span>, which seems to outperform the bigger Llama-2 70b Chat model trained via RLHF:</span></p><p>However, it's worth noting that RLHF is not explicitly used to optimize benchmark performance; its primary optimization goals are "helpfulness" and "harmlessness" as assessed by human users, which is not captured here.</p><p><span>Last week, I gave a talk at </span><a href="https://www.packtpub.com/conference/put-gen-ai-to-work" rel="">Packt's generative AI conference</a><span> a few weeks ago, highlighting that one of the most prominent use cases for text models remains classification. For example, think of common tasks such as email spam classification, document categorization, classifying customer reviews, and labeling toxic speech on social media.</span></p><p><span>In my experience, it's possible to get really good classification performance with "small" LLMs, such as </span><a href="https://arxiv.org/abs/1910.01108" rel="">DistilBERT</a><span>, using only a single GPU.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png" width="627" height="322.9739010989011" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:750,&quot;width&quot;:1456,&quot;resizeWidth&quot;:627,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b565e40-1ba4-4956-95cc-ad0929dbcaab_1600x824.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>Excerpt from </span><a href="https://www.packtpub.com/conference/put-gen-ai-to-work" rel="">my talk</a><span> showing that you can finetune small LLMs as text classifiers</span></figcaption></figure></div><p><span>I posted text classification with small LLMs as an exercise in Unit 8 of my</span><a href="https://lightning.ai/pages/courses/deep-learning-fundamentals/" rel=""> Deep Learning Fundamentals class</a><span> this year, where </span><a href="https://github.com/Lightning-AI/dl-fundamentals/discussions/41" rel="">Sylvain Payot even achieved &gt;96% prediction accuracy</a><span> on the IMDB movie review dataset by finetuning an off-the-shelf available Roberta model. (For reference, the best</span><a href="https://github.com/rasbt/machine-learning-book/blob/main/ch08/logistic-regression-bag-of-words/log-reg.ipynb" rel=""> classic machine learning-based bag-of-words model</a><span> I trained on that dataset achieved only 89% accuracy).</span></p><p><span>Now, that being said, I haven't seen any new major work or trends on LLMs for classification yet. Most practitioners still use BERT-based encoder models or encoder-decoder models like </span><a href="https://arxiv.org/abs/2210.11416" rel="">FLAN-T5</a><span>, which came out in 2022. That could be because these architectures still work surprisingly and satisfactorily well.</span></p><p><span>In 2022, I wrote </span><a href="https://sebastianraschka.com/blog/2022/deep-learning-for-tabular-data.html" rel="">A Short Chronology Of Deep Learning For Tabular Data</a><span>, covering many interesting deep learning-based approaches to tabular data. However, similar to LLMs for classification mentioned above, there haven't been that many developments on the tabular dataset front either, or I have just been too busy to notice.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png" width="1456" height="709" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:709,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffbbec8b2-780f-4c52-805e-f9a7c729bec3_1600x779.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>An example of a tabular dataset for reference</figcaption></figure></div><p><span>In 2022, Grinsztajn et al. wrote a paper on </span><a href="https://arxiv.org/abs/2207.08815" rel="">Why do tree-based models still outperform deep learning on tabular data?</a><span> I believe the main takeaway that tree-based models (random forests and XGBoost) outperform deep learning methods for tabular data on small- and medium-sized datasets (10k training examples) is still true.&nbsp;</span></p><p><span>On that note, after being around for almost 10 years, XGBoost came out with a big </span><a href="https://github.com/dmlc/xgboost/releases/tag/v2.0.0" rel="">2.0 release</a><span> that featured better memory efficiency, support for large datasets that don't fit into memory, multi-target trees, and more.</span></p><p>While this year has been very focused on LLMs, there have been many developments on the computer vision front. Since this article is already very long, I won't cover the latest computer vision research. However, I have a standalone article on the State of Computer Vision Research 2023 from my attendance at CVPR 2023 this summer:</p><p>Besides research, computer vision-related AI has been inspiring new products and experiences that have been maturing this year.&nbsp;</p><p><span>For example, when I attended the </span><a href="https://www.scipy2023.scipy.org/" rel="">SciPy conference</a><span> in Austin this summer, I saw the first truly driverless Waymo cars roaming the streets.&nbsp;</span></p><p>And from a trip to the movie theater, I also saw AI usage is becoming increasingly popular in the movie industry. A recent example is the de-aging of Harrison Ford in "Indiana Jones 5", where the filmmakers trained an AI using old archive material of the actor.</p><p><span>Then, there are generative AI capabilities that are now firmly integrated into popular software products. A recent example is </span><a href="https://www.adobe.com/sensei/generative-ai/firefly.html" rel="">Adobe's Firefly 2</a><span>.</span><br></p><p><span>Predictions are always the most speculative and challenging aspect. Last year, I predicted that we would see more applications of LLMs in domains beyond text or code. One such example was </span><a href="https://arxiv.org/abs/2306.15794" rel="">HyenaDNA</a><span>, an LLM for DNA. Another was </span><a href="https://www.nature.com/articles/s41586-023-06139-9" rel="">Geneformer</a><span>, a transformer pretrained on 30 million single-cell transcriptomes designed to facilitate predictions in network biology.</span></p><p>In 2024, LLMs will increasingly transform STEM research outside of computer science.</p><p><span>Another emerging trend is the development of custom AI chips by various companies, driven by GPU scarcity due to high demand. Google will double-down on its </span><a href="https://cloud.google.com/blog/products/compute/announcing-cloud-tpu-v5e-and-a3-gpus-in-ga" rel="">TPU hardware</a><span>, Amazon has introduced its </span><a href="https://aws.amazon.com/machine-learning/trainium/" rel="">Trainium chips</a><span>, and AMD might be closing the gap with NVIDIA. And now, </span><a href="https://www.theinformation.com/articles/microsoft-to-debut-ai-chip-next-month-that-could-cut-nvidia-gpu-costs" rel="">Microsoft</a><span> and </span><a href="https://arstechnica.com/information-technology/2023/10/openai-may-jump-into-ai-hardware-amid-high-costs-supply-constraints/" rel="">OpenAI</a><span> also started developing their own custom AI chips. The challenge will be ensuring full and robust support for this hardware within major deep learning frameworks.</span></p><p><span>On the open-source front, we still lag behind the largest closed-source models. Currently, the largest openly available model is </span><a href="https://huggingface.co/blog/falcon-180b" rel="">Falcon 180B</a><span>. This might not be too concerning because most people lack access to the extensive hardware resources required to handle these models anyway. Instead of bigger models, I'm more eager to see more open-source MoE models consisting of multiple smaller submodules, which I discussed earlier in this article.</span></p><p><span>I'm also optimistic about witnessing increased efforts in crowdsourced datasets and the rise of </span><a href="https://arxiv.org/abs/2305.18290" rel="">DPO</a><span> as a replacement for supervised fine-tuning in state-of-the-art open-source models.</span><br></p><p><span>This summer, I released a digital draft of my new book, "Machine Learning Q and AI," on Leanpub. I'm excited to announce that the print version is now available for </span><a href="https://nostarch.com/machine-learning-and-ai-beyond-basics" rel="">preorder from No Starch Press</a><span> and </span><a href="https://www.amazon.com/Machine-Learning-AI-Beyond-Basics/dp/1718503768" rel="">Amazon</a><span>. I chose to partner with No Starch Press because, having read some of their previous books, I truly appreciate their high-quality prints.</span></p><p><span>The book has been thoroughly edited and refined—virtually no sentence has been left untouched. It will be released under a new title, "</span><a href="https://nostarch.com/machine-learning-and-ai-beyond-basics" rel="">Machine Learning and AI Beyond the Basics</a><span>."</span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scrcpy 2.2 adds Android camera mirroring (125 pts)]]></title>
            <link>https://github.com/Genymobile/scrcpy/releases/tag/v2.2</link>
            <guid>38143818</guid>
            <pubDate>Sat, 04 Nov 2023 18:30:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Genymobile/scrcpy/releases/tag/v2.2">https://github.com/Genymobile/scrcpy/releases/tag/v2.2</a>, See on <a href="https://news.ycombinator.com/item?id=38143818">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pjax="true" data-test-selector="body-content" data-view-component="true"><p><strong>scrcpy v2.2</strong></p>
<p>Changes since v2.1.1:</p>
<ul>
<li>Add option to mirror camera (<a data-error-text="Failed to load title" data-id="353530370" data-permission-text="Title is private" data-url="https://github.com/Genymobile/scrcpy/issues/241" data-hovercard-type="issue" data-hovercard-url="/Genymobile/scrcpy/issues/241/hovercard" href="https://github.com/Genymobile/scrcpy/issues/241">#241</a>, <a data-error-text="Failed to load title" data-id="1834387459" data-permission-text="Title is private" data-url="https://github.com/Genymobile/scrcpy/issues/4213" data-hovercard-type="pull_request" data-hovercard-url="/Genymobile/scrcpy/pull/4213/hovercard" href="https://github.com/Genymobile/scrcpy/pull/4213">#4213</a>)</li>
<li>Add --pause-on-exit (<a data-error-text="Failed to load title" data-id="1781395854" data-permission-text="Title is private" data-url="https://github.com/Genymobile/scrcpy/issues/4130" data-hovercard-type="pull_request" data-hovercard-url="/Genymobile/scrcpy/pull/4130/hovercard" href="https://github.com/Genymobile/scrcpy/pull/4130">#4130</a>)</li>
<li>Rename --display (deprecated) to --display-id</li>
<li>Fix device disconnection detection with --no-video (<a data-error-text="Failed to load title" data-id="1830788093" data-permission-text="Title is private" data-url="https://github.com/Genymobile/scrcpy/issues/4207" data-hovercard-type="issue" data-hovercard-url="/Genymobile/scrcpy/issues/4207/hovercard" href="https://github.com/Genymobile/scrcpy/issues/4207">#4207</a>)</li>
<li>Accept --turn-screen-off without video playback (<a data-error-text="Failed to load title" data-id="1811462469" data-permission-text="Title is private" data-url="https://github.com/Genymobile/scrcpy/issues/4175" data-hovercard-type="issue" data-hovercard-url="/Genymobile/scrcpy/issues/4175/hovercard" href="https://github.com/Genymobile/scrcpy/issues/4175">#4175</a>)</li>
<li>Upgrade SDL to 2.28.4 in Windows releases</li>
<li>Upgrade platform-tools to 34.0.5 (adb) in Windows releases</li>
<li>Various technical fixes</li>
</ul>
<hr>
<h2>Highlights</h2>
<h2>Camera capture</h2>
<p>The previous minor version introduced <code>--audio-source=mic</code> to transmit the microphone instead of the device audio output.</p>
<p>This new version introduces <code>--video-source=camera</code> to mirror the device camera instead of the device screen.</p>
<p>A bunch of new options have been added:</p>
<ul>
<li><code>--list-cameras</code></li>
<li><code>--list-camera-sizes</code></li>
<li><code>--camera-id=</code></li>
<li><code>--camera-facing=</code></li>
<li><code>--camera-ar=</code></li>
<li><code>--camera-size=</code></li>
<li><code>--camera-fps=</code></li>
<li><code>--camera-high-speed</code></li>
</ul>
<p>For example:</p>
<div data-snippet-clipboard-copy-content="scrcpy --video-source=camera --camera-facing=front --camera-size=1920x1080"><pre><code>scrcpy --video-source=camera --camera-facing=front --camera-size=1920x1080
</code></pre></div>
<p>Check the <a href="https://github.com/Genymobile/scrcpy/blob/master/doc/camera.md">camera</a> documentation for more details.</p>
<h2>Android 14</h2>
<p>Since the last scrcpy version, Android 14 has been released.</p>
<p>Unfortunately, several scrcpy features have been broken by changes in this new Android version:</p>
<ul>
<li><a href="https://github.com/Genymobile/scrcpy/blob/master/doc/device.md#turn-screen-off"><code>--turn-screen-off</code></a> (<a data-error-text="Failed to load title" data-id="1672071055" data-permission-text="Title is private" data-url="https://github.com/Genymobile/scrcpy/issues/3927" data-hovercard-type="issue" data-hovercard-url="/Genymobile/scrcpy/issues/3927/hovercard" href="https://github.com/Genymobile/scrcpy/issues/3927">#3927</a>): some internal functions have been removed, without replacement that scrcpy could use (it seems it also impacts the feature in Android Studio)</li>
<li><a href="https://github.com/Genymobile/scrcpy/blob/master/doc/video.md#rotation"><code>--lock-video-orientation</code></a> (not window <code>--rotation</code>, which is independent) (<a data-error-text="Failed to load title" data-id="1714833039" data-permission-text="Title is private" data-url="https://github.com/Genymobile/scrcpy/issues/4011" data-hovercard-type="issue" data-hovercard-url="/Genymobile/scrcpy/issues/4011/hovercard" href="https://github.com/Genymobile/scrcpy/issues/4011">#4011</a>): some function parameters are now ignored</li>
<li><a href="https://github.com/Genymobile/scrcpy/blob/master/doc/video.md#crop"><code>--crop</code></a> (also <a data-error-text="Failed to load title" data-id="1714833039" data-permission-text="Title is private" data-url="https://github.com/Genymobile/scrcpy/issues/4011" data-hovercard-type="issue" data-hovercard-url="/Genymobile/scrcpy/issues/4011/hovercard" href="https://github.com/Genymobile/scrcpy/issues/4011">#4011</a>): some function parameters are now ignored</li>
</ul>
<p>Reported to Google/Android: <a href="https://issuetracker.google.com/issues/303565669" rel="nofollow">issue 303565669</a></p>
<hr>
<ul>
<li>Twitter: <a href="https://twitter.com/scrcpy_app" rel="nofollow"><code>@scrcpy_app</code></a></li>
<li>Reddit: <a href="https://www.reddit.com/r/scrcpy" rel="nofollow"><code>r/scrcpy</code></a></li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Software that supports your body should always respect your freedom (266 pts)]]></title>
            <link>https://www.fsf.org/blogs/community/software-that-supports-your-body-should-always-respect-your-freedom</link>
            <guid>38143180</guid>
            <pubDate>Sat, 04 Nov 2023 17:26:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.fsf.org/blogs/community/software-that-supports-your-body-should-always-respect-your-freedom">https://www.fsf.org/blogs/community/software-that-supports-your-body-should-always-respect-your-freedom</a>, See on <a href="https://news.ycombinator.com/item?id=38143180">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="viewlet-below-content-title">
  

  
    <p>
  

  <span>
    —
    <span>
      Published on
    </span>
    Nov 03, 2023 01:05 PM
  </span>

  

  

  

  


</p></div><p>
                   Software that controls your body should always respect your freedom.
This article is a recap of scandals of medical devices, like hearing
aids, insulin pumps, bionic eyes, and pacemakers, and what we can
learn from them. It's astonishing: you wouldn't expect these devices
to be run by software in such a way that they can leave you completely
helpless.
                </p><div id="content-core">
            <p>In July, users of the proprietary software app LibreLink, who live in
the UK and use Apple devices, found that the app they depend on to
monitor their blood sugar was not working anymore <a href="https://appleinsider.com/articles/23/07/14/glucose-monitoring-app-glitch-exposes-vulnerabilities-in-digital-health-tools">after the developer
Abbott pushed an updated for the app</a>. Monitoring glucose levels
helps people with diabetes to see when their glucose level is too low
or too high, which is a critical part of treatment.</p>
<p>"This equipment is supposed to save your life," David Burchell, who
has type 1 diabetes, told the <a href="https://www.bbc.com/news/technology-66203549">BBC</a>. "And basically it broke, just
showing a white screen, and I had a panic. ... I was left without an
active test, other than the fingerprint testing. Pricking your finger
a hundred times a week is a nightmare."</p>
<p>Burchell deleted the app and tried to reinstall it to fix the problem
but said, "when trying to redownload it, they'd taken it off the app
store so I couldn't download it [again]." Despite what its name may
suggest, there is nothing <em>libre</em> about the LibreLink app. It's
proprietary software, which means users must depend on the company to
keep it running and to distribute it. With <a href="https://www.fsf.org/about/what-is-free-software">free software</a>,
Burchell would have had the <a href="https://www.gnu.org/philosophy/free-sw.html">freedom to run, copy, distribute, study,
change, and improve the software</a> himself, or he could have leaned
on a community of developers and users to share and fix the software,
<em>and</em> the old version of the software would have been available to
revert the update.</p>
<p>Two months later, with Apple's update to iOS 17, users of the
FreeStyle LibreLink and Libre 2 apps had reason again to fear that the
software they rely on wouldn't work after updating their iPhones. This
time, users all over the world were affected. In September, <a href="https://www.freestyle.abbott/content/dam/adc/freestyle/countries/ca-en/files/ios17%20update%20email_ConsumerEN.pdf">Abbott
warned Apple users</a>: "As part of the upcoming iOS 17 release, Apple
is introducing StandBy Mode and Assistive Access Mode ... this release
may impact your experience with the FreeStyle Libre 2 app, the
FreeStyle LibreLink app, or the FreeStyle LibreLinkUp app. We
recommend that you disable automatic operating system updates on the
smartphone using the mentioned apps." This warning was made because
StandBy Mode would sometimes prohibit time-sensitive notifications
such as glucose alarms, and the Assistive Access Mode would impact
sensor activation and alarm setting modification in the app.</p>
<p>It wasn't the first time, unfortunately, that an iOS update has left
users of medical aids <em>to their own devices.</em> After updating their
iPhones to iOS 15.4 in the spring of 2022, some users of hearing aids
that connect to their phone via Bluetooth experienced problems pairing
their hearing aids to the app on their phone. A user who goes by the
pseudonym Bushness, for example, had the bass and treble sliders of
the Resound brand hearing aid randomly bouncing up and down after
updating the phone to iOS 15.4. Bushness discussed the issue with both
Resound and Apple. The user tried various trouble shooting techniques
but could not solve the issue. At some point, Bushness turned to the
Apple forum for help, but nobody could recommend anything the person
had not tried already. Bushness writes, <a href="https://discussions.apple.com/thread/253770006">"Somehow I hoped maybe the
community had found something everyone else had missed."</a> If
Resound had instead chosen <a href="https://www.fsf.org/about/what-is-free-software">to free their software</a>, however, then
this would probably have been the case. But with proprietary software,
nobody outside of the companies can look into the code and determine
what's wrong. Proprietary software leaves the community powerless.</p>
<p>"It is only in the last few years that we have seen firmware updates
pushed out to hearing aids. At this stage, many of the hearing aid
brands provide occasional software updates to their hearing aids. It
appears to primarily happen with Bluetooth hearing aids, the so-called
'Made For iPhone' hearing devices. The hearing aid brands don't
necessarily tell us what the updates actually consist of, but they
appear to be pushed out around the time that there are changes to
iPhone operating systems. I would imagine that there probably is a
direct relationship. ... Every time Apple changes its iPhones, there
are connection issues with hearing aids," writes hearing aid blogger
<a href="https://www.hearingaidknow.com/question/do-hearing-aids-need-to-be-updated">Goeffrey Cooling</a>.</p>
<p>Resound eventually solved the issue Bushness and others were
experiencing after the iOS 15.4 update. But it took weeks, and that
illustrates how much users are at the mercy of the manufacturers when
the hardware they need to go through daily life requires proprietary
software in order to function.</p>
<p>What would happen if any of the Bluetooth hearing aids manufacturers
decided not to provide updates for models of which the warranty
expired? Well, if the software on these hearing aids were free (as in
freedom), then the free software community could help keep it
updated. But owners of medical aids that run proprietary software may
be disappointed to find out that they must throw their devices away
and buy a new pair, even if the hardware is otherwise still working
well.</p>
<p>And a scenario where a company abandons service or updates to its
users is not merely theoretical. This is the bitter reality faced by
users of eye implants produced by Second Sight Medical Products since
the company decided to <a href="https://rss.com/podcasts/l0wl1f3podcast/399912/">abandon the technology</a> in 2020 when facing
the prospect of bankruptcy. <a href="https://spectrum.ieee.org/bionic-eye-obsolete">Terry Byland,</a> whose sight has been
dependent on the first-generation Argus implant since 2004, says of
his experience, "As long as nothing goes wrong, I'm fine. But if
something does go wrong with it, well, I'm screwed. Because there's no
way of getting it fixed." That's what also happened to <a href="https://spectrum.ieee.org/bionic-eye-obsolete">Barbara
Campbell</a>, whose retinal implant suddenly stopped working when she
was on a subway. This horrifying fate does not need to be a given for
people like Terry and Barbara. If medical aid companies distributing
software decided to release the software's source code under a free
license such as the <a href="https://www.gnu.org/licenses/gpl-3.0.en.html">GNU General Public License v3.0 or later</a>,
then third party developers could help those people, but they haven't.
It seems that, when the going gets tough, they'd rather leave their
customers helpless.</p>
<p>Medical aids that run proprietary software not only leave you at the
mercy of the companies when it comes to bugs and updates, but also
when it comes to cybersecurity. Some governments are trying to fix
safety problems with medical devices that run proprietary software by
issuing laws like the <a href="https://www.congress.gov/bill/117th-congress/house-bill/7084/text?r=1&amp;s=1"><em>PATCH Act</em></a>, which requires manufacturers
applying for approval for their devices with the US Food and Drug
Administration "to demonstrate a reasonable assurance of safety and
effectiveness throughout the lifecycle of the cyber device." The goal
is to prevent scandals like those that happened in <a href="https://www.wired.com/story/medtronic-insulin-pump-hack-app/">2019</a> and
<a href="https://www.theverge.com/2021/10/6/22712808/medtronic-recall-insulin-pump-controller-cybersecurity-hack">2021</a>, when it turned out that <a href="https://cyberscoop.com/medtronic-defibrillators-security-dhs-advisory/">pacemakers</a> and <a href="https://www.fda.gov/news-events/press-announcements/fda-warns-patients-and-health-care-providers-about-potential-cybersecurity-concerns-certain">insulin
pumps made by Medtronic</a> had vulnerabilities that exposed them to
attacks. One of the major problems with proprietary software is that
you have to trust the manufacturer to detect, communicate, and fix
bugs like these. Legislation won't cure this shortcoming. With free
software, you will most probably find someone who will try to crack
the device and detect any vulnerability.</p>
<p><a href="https://www.fsf.org/about/what-is-free-software">Free software</a> in medical aids helps the patient, the environment,
and the healthcare system. After all, the software in hearing aids,
insulin pumps and pacemakers controls parts of our body. We should be
allowed to control it. Software in medical aids has to respect our
freedom! Free software can make the medical device last longer. The
free software community can fix bugs and provide updates so that
patients are not left at the mercy of the companies. Then, patients
can <a href="https://www.fsf.org/campaigns/fight-to-repair">choose to repair</a> their device instead of throwing it
away. Last but not least, long-time support can save the healthcare
system <em>and its patients</em> lots of money.</p>
<p>Luckily, there is free software for hearing devices, such as the
software developed by the <a href="https://shop.tympan.org/">Tympan project</a>. The Open Community
Platform for Hearing Aid Algorithm Research project, funded by the US
National Institutes of Health, even developed a platform for real-time
audio signal processing called <a href="http://www.openmha.org/">openMHA</a>, licensed under <a href="https://www.gnu.org/licenses/agpl-3.0.html">GNU
Affero General Public License v3.0</a>, to improve assistive hearing
systems. Other medical aids, like an insulin pump, can also be run
with free software thanks to projects like <a href="https://openaps.org/what-is-openaps/">OpenAPS</a>.
Unfortunately, there is still a lack of free software for pacemakers.
This area offers an opportunity for the free software community to
contribute.</p>
<h2>Take action!</h2>
<p>It's up to us advocates of free software to inform the people around
us of the issues with proprietary software in medical aids. Let's
encourage our friends, parents, and grandparents to ask their doctor
about the software in their medical devices and to choose and insist
upon free software over proprietary software. You could start by
sharing this article with the people who are near and dear to you.</p>
<h2>Share your story</h2>
<p>We understand that medical aids could be a sensitive topic, but if you
would still like to share your story we invite you to email us at
<a href="mailto:campaigns@fsf.org">campaigns@fsf.org</a> and share the following with us:</p>
<ul>
<li>why you use a medical aid with free software; </li>
<li>your frustration with medical aids that run proprietary software; and/or </li>
<li>how free software medical aids should improve to make your life easier.</li>
</ul>
<p>Please specify in your email whether we may publish parts of your
story, which we can do anonymously if you choose.</p>
<p>And if you don't mind talking about your experience with medical aids
openly <a href="https://www.fsf.org/blogs/community/call-for-sessions-extended-until-november-17">submit a session</a> for <a href="https://libreplanet.org/2024/">LibrePlanet 2024</a>.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I need more USB power (164 pts)]]></title>
            <link>https://atomic14.substack.com/p/i-need-more-usb-power</link>
            <guid>38142606</guid>
            <pubDate>Sat, 04 Nov 2023 16:36:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://atomic14.substack.com/p/i-need-more-usb-power">https://atomic14.substack.com/p/i-need-more-usb-power</a>, See on <a href="https://news.ycombinator.com/item?id=38142606">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h4 translated="">Discover more from atomic14</h4><p>This is a newsletter for the Atomic14 blog - https://blog.atomic14.com and YouTube Channel - https://www.youtube.com/@atomic14

Sign up to get notified when new content is published so that you never miss out!</p> </div><div dir="auto"><p>You can watch the video here:</p><div id="youtube2-H_0zSbzLJ6g" data-attrs="{&quot;videoId&quot;:&quot;H_0zSbzLJ6g&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/H_0zSbzLJ6g?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p><span>I seem to have been accumulating a whole bunch of USB powered devices. I’ve got the </span><a href="https://youtu.be/eHrgdIJnAF0" rel="nofollow ugc noopener">mini hotplate</a><span>, a small power supply, and two USB soldering irons!</span></p><p>The mini hotplate takes 20 volts and uses around 60W when it’s heating up.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg" width="819" height="986" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:986,&quot;width&quot;:819,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:130066,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F99a1a768-1c77-448c-9137-371eaec1ecd9_819x986.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>The power supply also wants 20 volts.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg" width="1309" height="795" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:795,&quot;width&quot;:1309,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:179761,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62b6c129-eb46-4191-90f8-1bd249f5cd32_1309x795.jpeg 1456w" sizes="100vw"></picture></div></a></figure></div><p>And one of the soldering irons is limited to 12 volts, and the other will use 20 volts.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg" width="1456" height="244" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:244,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:132364,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04358e94-6a1e-4cee-8c1c-1331feb03679_2276x381.jpeg 1456w" sizes="100vw"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg" width="1456" height="312" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:312,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:107911,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fee016c9c-518a-4955-9502-a7b8cb2177b1_1797x385.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>It’s not a massive problem, but I do only have one 65W USB-C supply coming into workbench. I want more, I want much much more!</p><p><span>There don’t seem to be any powered USB-C hubs, so I went shopping on AliExpress and eventually came across this nice </span><a href="https://s.click.aliexpress.com/e/_DFuFbd5" rel="nofollow ugc noopener">board</a><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg" width="1456" height="1456" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:4234359,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c44bf0c-e32c-45d4-9ea0-045d6603cbbd_3840x3840.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>This has four standard USB sockets on the top which all support QC2 and QC3</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg" width="892" height="454" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:454,&quot;width&quot;:892,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:99768,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0e711edc-73c6-4952-8600-ca354025e528_892x454.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>And it’s got four USB-C sockets on the bottom:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg" width="1456" height="1740" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/add92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1740,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:3073372,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fadd92ad4-5288-422f-9526-b4b571b8a917_2854x3411.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>These support pretty much all the protocols you can think of!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg" width="878" height="532" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:532,&quot;width&quot;:878,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:100737,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F43b59ca3-cf1c-4f3f-a7ef-cbfedbaf8db1_878x532.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Testing out how much current the board can deliver gives us a great result - it can easily do 65 watts!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg" width="1456" height="819" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:500269,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dd65da9-757e-4d27-a941-8dfd5f760669_2560x1440.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>For those of you who are interested in what’s on the board, I’ve tried to capture the IC numbers in this picture:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg" width="1456" height="1456" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:3985243,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F811d9072-b20c-4a5e-b62c-41f4c9938b68_3840x3840.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>There’s a datasheet here for the chip here: https://cdn.hackaday.io/files/1765587553857472/SW3518.pdf (it’s all in Chinese though!).</p><p>It’s pretty good though - I’ve now got 4 USB-C supplies on my bench, all of them capable of 65W of power.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Othello Is Solved (570 pts)]]></title>
            <link>https://arxiv.org/abs/2310.19387</link>
            <guid>38141366</guid>
            <pubDate>Sat, 04 Nov 2023 14:35:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2310.19387">https://arxiv.org/abs/2310.19387</a>, See on <a href="https://news.ycombinator.com/item?id=38141366">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="labstabs"><p>
    <label for="tabone">Bibliographic Tools</label></p><div>
      <h2>Bibliographic and Citation Tools</h2>
      <div>
          <p><label>
              
              <span></span>
              <span>Bibliographic Explorer Toggle</span>
            </label>
          </p>
          
        </div>
        
        
        
    </div>


    <p>
    <label for="tabtwo">Code, Data, Media</label></p><div>
      <h2>Code, Data and Media Associated with this Article</h2>
      
      
      
      
      
      
    </div>


      <p>
      <label for="labstabs-demos-input" id="labstabs-demos-label">Demos</label></p><div>
        <h2>Demos</h2>
        
        
        
      </div>
      <p>
      <label for="tabfour">Related Papers</label></p><div>
        <h2>Recommenders and Search Tools</h2>
        
        
        
        
        
        
      </div>

      <p>
      <label for="tabfive">
        About arXivLabs
      </label></p><div>
            <h2>arXivLabs: experimental projects with community collaborators</h2>
            <p>arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.</p>
            <p>Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.</p>
            <p>Have an idea for a project that will add value for arXiv's community? <a href="https://info.arxiv.org/labs/index.html"><strong>Learn more about arXivLabs</strong></a>.</p>
          </div>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Always paste without formatting on macOS (200 pts)]]></title>
            <link>https://scottswezey.com/always-paste-without-formatting-macos/</link>
            <guid>38141320</guid>
            <pubDate>Sat, 04 Nov 2023 14:31:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://scottswezey.com/always-paste-without-formatting-macos/">https://scottswezey.com/always-paste-without-formatting-macos/</a>, See on <a href="https://news.ycombinator.com/item?id=38141320">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="site-main">
<article>
<header>


<p>When copying and pasting on a Mac, most applications will retain the formatting of whatever you copied. Use this trick to paste unformatted text.</p>

<figure>
<img srcset="https://scottswezey.com/content/images/size/w300/2022/09/macos-keyboard-shortcuts-paste-unformatted.png 300w,
                            https://scottswezey.com/content/images/size/w600/2022/09/macos-keyboard-shortcuts-paste-unformatted.png 600w,
                            https://scottswezey.com/content/images/size/w1000/2022/09/macos-keyboard-shortcuts-paste-unformatted.png 1000w,
                            https://scottswezey.com/content/images/size/w2000/2022/09/macos-keyboard-shortcuts-paste-unformatted.png 2000w" sizes="(min-width: 1400px) 1400px, 92vw" src="https://scottswezey.com/content/images/size/w2000/2022/09/macos-keyboard-shortcuts-paste-unformatted.png" alt="Always paste without formatting on macOS">
</figure>
</header>
<section>
<p>When copying and pasting on a Mac, most applications will retain the formatting of whatever you copied. If that bugs you as much as it bugs me, try this trick to switch up the default to pasting unformatted text. Or more accurately, having the pasted text ignore its own formatting and match the text where it's pasted.</p><ol><li>Open the <code>System Preferences</code> app.</li><li>Go to <code>Keyboard &gt; Shortcuts</code>.</li><li>Click on <code>App Shortcuts</code>.</li><li>Add a new shortcut.</li><li>Choose <strong><code>All Applications</code></strong> for the Application, and type <code><strong>Paste and Match Style</strong></code>. Enter <code><strong>⌘V</strong></code> for the Keyboard Shortcut. Click <code>Add</code>.</li></ol><p>Next time you copy/paste, the copied text will fit in with the style of wherever it's &nbsp;pasted. Cool.</p>
</section>

</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In KDE, the Desktop Cube is back (189 pts)]]></title>
            <link>https://www.phoronix.com/news/KDE-Wayland-Color-Mgmt</link>
            <guid>38141173</guid>
            <pubDate>Sat, 04 Nov 2023 14:13:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/news/KDE-Wayland-Color-Mgmt">https://www.phoronix.com/news/KDE-Wayland-Color-Mgmt</a>, See on <a href="https://news.ycombinator.com/item?id=38141173">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="KDE" src="https://www.phoronix.com/assets/categories/kde.webp" width="100" height="100"></p><p>
KDE developer Nate Graham is out with his usual weekly recap highlighting all of the interesting accomplishments for this open-source desktop for the past week. But with not having posted last weekend, this edition highlights the many achievements made by the KDE camp over the past two weeks.
</p><p>
There's been a lot happening in the KDE world as the developers prepare to wrap up October. Some of the latest KDE highlights include:
</p><p>
- KDE Plasma Wayland now supports per-screen color management. Assigning ICC color profiles to each screen will now work correctly under KDE on Wayland. 
</p><p>
- The KDE Desktop Cube effect has returned via the kdeplasma-addons repository. Here's the screenshot shared by Nate that will surely bring back Compiz/Beryl memories for long-time Linux users:
</p><p><img src="https://www.phoronix.net/image.php?id=2023&amp;image=kde_desktop_cube" alt="KDE Desktop Cube"></p>
<p>- Many small UI improvements to KDE Discover.
</p><p>
- KFontView now works as expected on Wayland.
</p><p>
- KRunner's "Recent Documents" runner is enjoying more than twice the performance as previously.
</p><p>
- Fixing a case where when logging into Plasma Wayland it would cause KWin to crash immediately and return to the log-in screen.
</p><p>
- Fixing the most common crash in Plasma that could happen when closing notifications.
</p><p>
- Many other bug fixes.
</p><p>
More details on these KDE changes via <a href="https://pointieststick.com/2023/10/27/these-past-2-weeks-in-kde-wayland-color-management-the-desktop-cube-returns-and-optional-shadows-in-spectacle/">Nate's blog</a>.</p></div></div>]]></description>
        </item>
    </channel>
</rss>