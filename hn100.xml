<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 24 Mar 2025 06:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[23andMe files for bankruptcy to sell itself (141 pts)]]></title>
            <link>https://www.reuters.com/business/healthcare-pharmaceuticals/dna-testing-firm-23andme-files-chapter-11-bankruptcy-sell-itself-2025-03-24/</link>
            <guid>43457666</guid>
            <pubDate>Mon, 24 Mar 2025 03:48:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/business/healthcare-pharmaceuticals/dna-testing-firm-23andme-files-chapter-11-bankruptcy-sell-itself-2025-03-24/">https://www.reuters.com/business/healthcare-pharmaceuticals/dna-testing-firm-23andme-files-chapter-11-bankruptcy-sell-itself-2025-03-24/</a>, See on <a href="https://news.ycombinator.com/item?id=43457666">Hacker News</a></p>
Couldn't get https://www.reuters.com/business/healthcare-pharmaceuticals/dna-testing-firm-23andme-files-chapter-11-bankruptcy-sell-itself-2025-03-24/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[English Scientists Develop Fast, High-Quality AI Weather Model for Desktops (145 pts)]]></title>
            <link>https://www.turing.ac.uk/blog/project-aardvark-reimagining-ai-weather-prediction</link>
            <guid>43456723</guid>
            <pubDate>Sun, 23 Mar 2025 23:33:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.turing.ac.uk/blog/project-aardvark-reimagining-ai-weather-prediction">https://www.turing.ac.uk/blog/project-aardvark-reimagining-ai-weather-prediction</a>, See on <a href="https://news.ycombinator.com/item?id=43456723">Hacker News</a></p>
Couldn't get https://www.turing.ac.uk/blog/project-aardvark-reimagining-ai-weather-prediction: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[RDNA 4's “Out-of-Order” Memory Accesses (119 pts)]]></title>
            <link>https://chipsandcheese.com/p/rdna-4s-out-of-order-memory-accesses</link>
            <guid>43456341</guid>
            <pubDate>Sun, 23 Mar 2025 22:18:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chipsandcheese.com/p/rdna-4s-out-of-order-memory-accesses">https://chipsandcheese.com/p/rdna-4s-out-of-order-memory-accesses</a>, See on <a href="https://news.ycombinator.com/item?id=43456341">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p>AMD's RDNA 4 brings a variety of memory subsystem enhancements. Among those, one slide stood out because it dealt with out-of-order memory accesses. According to the slide, RDNA 4 allows requests from different shaders to be satisfied out-of-order, and adds new out-of-order queues for memory requests.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png" width="1279" height="719" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/594baab5-718d-47d7-a578-284a1981bffb_1279x719.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:719,&quot;width&quot;:1279,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:208782,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>AMD apparently had a false dependency case in the memory subsystem prior to RDNA 4. One wave could wait for a memory loads made by another wave. A "wavefront", "wave", or "warp" on a GPU is the rough equivalent of a CPU thread. It has its own register state, and can run out of sync with other waves. Each wave's instructions are independent from those in other waves with very few exceptions (like atomic operations).</p><blockquote><p>In RDNA 3, there was a strict ordering on the return of data, such that effectively a request that was made later in time was not permitted to pass a request made earlier in time, even if the data for it was ready much sooner.</p><p>Navi 4 Architecture Deep Dive, Andrew Pomianowski, CVP, Silicon Design Engineering (AMD)</p></blockquote><p>A fundamental tenet of multithreaded programming is that you get no ordering guarantees between threads unless you make it happen via locks or other mechanisms. That's what makes multithreaded performance scaling work. AMD's slide took me by surprise because there's no reason memory reads should be an exception. I re-watched the video several times and stared at the slide for a while to see if that's really what they meant. They clearly meant it, but I still didn't believe my eyes and ears. So I took time to craft a test for it.</p><p>AMD's slide describes a scenario where one wave's cache misses prevent another wave from quickly consuming data from cache hits. Causing cache misses is easy. I can pointer chase through a large array with a random pattern ("wave Y"). Similarly, I can keep accesses within a small memory footprint to get cache hits ("wave X"). But doing both at the same time is problematic. Wave Y may evict data used by wave X, causing cache misses on wave X.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png" width="1276" height="716" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:716,&quot;width&quot;:1276,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:184441,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 1456w" sizes="100vw"></picture></div></a><figcaption>Focusing on this scenario, and trying to create a Wave X and Wave Y that might hold each other up</figcaption></figure></div><p>Instead of going for cache hits and misses, I tested by seeing whether waiting on memory accesses in one wave would falsely wait in on memory accesses made by another. My "wave Y" is basically a memory latency test, and makes a fixed number of accesses. Each access depends on the previous one's result, and I have the wave pointer chase through a 1 GB array to ensure cache misses. My "wave X" makes four independent memory accesses per loop iteration. It then consumes the load data, which means waiting for data to arrive from memory.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png" width="581" height="512" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:512,&quot;width&quot;:581,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:33717,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Once wave Y completes all of its accesses, it sets a flag in local memory. Wave X makes as many memory accesses as it can until it sees the flag set, after which it writes out its “score” and terminates. I run both waves in the same workgroup to ensure they share a WGP, and therefore share as much of the memory subsystem as possible. Keeping both waves in the same workgroup also lets me place the “finished” flag in local memory. Wave X has to check that flag every iteration, and it’s best to have flag checks not go through the same caches that wave Y is busy contaminating.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png" width="1277" height="455" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:455,&quot;width&quot;:1277,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:68745,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>If each wave X access gets delayed by a wave Y one, I should see approximately the same number of accesses from both. Instead on RDNA 3, I see wave X make more accesses than wave Y by exactly the loop unroll factor on wave X. AMD's compiler statically schedules instructions and sends out all four accesses before waiting on data. It then waits on load completion with </span><code>s_waitcnt vmcnt(...)</code><span> instructions.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png" width="658" height="409" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/55d96b98-8322-49fa-80d4-a11068559b60_658x409.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:409,&quot;width&quot;:658,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:42922,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Annotated RDNA 3 assembly generated by AMD's compiler for wave X. Note that unrolling the loop to use four memory accesses per iteration lets the compiler issue those four accesses before waiting on them</figcaption></figure></div><p><span>Accesses tracked by </span><code>vmcnt</code><span> always return in-order, letting the compiler wait on specific accesses by waiting until </span><code>vmcnt</code><span> decrements to a certain value or lower. In wave Y, I make all accesses dependent so the compiler only waits for </span><code>vmcnt</code><span> to reach 0.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png" width="702" height="333" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:333,&quot;width&quot;:702,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:42222,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Annotated RDNA 3 assembly for wave y, for completeness</figcaption></figure></div><p><span>On RDNA 3, </span><code>s_waitcnt vmcnt(...)</code><span> seems to wait for requests to complete not only from its wave, but from other waves too. That explains why wave X makes exactly four accesses for each access that wave Y makes. If I unroll the loop more, letting the compiler schedule more independent accesses before waiting, the ratio goes up to match the unroll factor.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png" width="611" height="310" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:310,&quot;width&quot;:611,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:11814,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>On RDNA 4, the two waves don’t care what the other is doing. That’s the way it should be. RDNA 4 also displays more run-to-run variation, which is also expected because cache behavior is highly unpredictable in this test. I’m surprised by the results, but it’s convincing evidence that AMD indeed had false cross-wave memory delays on RDNA 3 and older GPU architectures. I also tested on Renoir’s Vega iGPU, and saw the same behavior as RDNA 3.</p><blockquote><p>At a simplistic level, you can imagine that requests from the shaders go into a queue to be serviced, and many of those requests can be in flight</p><p>Navi 4 Architecture Deep Dive, Andrew Pomianowski, CVP, Silicon Design Engineering (AMD)</p></blockquote><p><span>AMD's presentation hints that RDNA 3 and older GPUs had multiple waves sharing a memory access queue. As mentioned above, AMD GPUs since GCN handle memory dependencies with hardware counters that software waits on. By keeping </span><code>vmcnt</code><span> returns in-order, the compiler can wait on the specific load that produces data needed by the next instruction, without also waiting on every other load the wave has pending. RDNA 3 and prior AMD GPUs possibly had a shared memory access queue, with each entry tagged with its wave's ID. As each memory access leaves the queue in-order, hardware decrements the counter for its wave.</span></p><p>Perhaps RDNA 4 divides the shared queue into per-thread queues. That would align with the point on AMD's slide saying RDNA 4 introduces "additional out-of-order queues" for memory requests. Or perhaps RDNA 4 retains a shared queue, but can drain entries out-of-order. That would require tracking extra info, like whether a memory access is the oldest one for its wave.</p><p>Sharing a memory access queue and returning data in-order seems like a natural hardware simplification. That raises the question of whether GPU architectures from Intel and Nvidia had similar limitations.</p><p>Intel's Xe-LPG does not have false cross-wave memory dependencies. Running the same test on Meteor Lake's iGPU shows variation depending on where the two waves end up. If wave X and wave Y run on XVEs with shared instruction control logic, wave X's performance is lower than in other cases. Regardless, it's clear Xe-LPG doesn't force a wave to wait on another's accesses. Intel's subsequent Battlemage (Xe2) architecture shows similar behavior, and the same applies to Intel's Gen 9 (Skylake) graphics from a while ago.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png" width="734" height="284" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:284,&quot;width&quot;:734,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:8567,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I also checked generated assembly to ensure Intel's compiler wasn't unrolling the loop further.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png" width="1456" height="619" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:619,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:231765,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Generated assembly on Meteor Lake's iGPU for Wave X. UGM = untyped global memory, SLM = shared local memory. The rest is trivial, just remember that Intel GPUs have registers that are full of registers...never mind</figcaption></figure></div><p>Nvidia's Pascal has varying behavior depending on where waves are located within a SM. Each Pascal SM has four partitions, which are arranged in pairs that share a texture unit and a 24 KB texture cache. Waves are assigned to partitions within a pair first. It's as if the partitions are numbered [0,1]-&gt; tex, [2,3]-&gt; tex. Waves in the same sub-partition pair have the false dependency issue. Evidently they share some general load/store logic besides the texture unit, because I don't touch textures in this test.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png" width="776" height="398" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:398,&quot;width&quot;:776,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:13894,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>If a wave is not offset from another one by a multiple of four or multiple of 4 plus one, it doesn't have the false dependency problem. Turing, as tested on the GTX 1660 Ti, doesn't have a problem either.</p><p>Besides removing false cross-wave delays, AMD also improved memory request handling within a wave. Much like in-order CPU cores, like Arm's Cortex A510, GPUs can execute independent instructions while waiting on memory access. A thread only stalls when it tries to use the memory access's result. GPUs have done this for decades, though the implementation details differ. Intel and Nvidia's GPUs use a software managed scoreboard. AMD used pending request counters from GCN onward.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png" width="677" height="554" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f5e25433-5766-49eb-b0e5-307e66907161_677x554.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:554,&quot;width&quot;:677,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:60920,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>RDNA 4 uses the same scheme but splits out the </span><code>vmcnt</code><span> category into several counters. A thread can interleave global memory, texture sampling, and raytracing intersection test requests, and wait on them separately. That gives the compiler more flexibility to move work ahead of a wait for memory access completion. Another interpretation of AMD's slide is that the each counter corresponds to a separate queue, each of which has out-of-order behavior across waves (but may have in-order behavior within a wave).</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png" width="1151" height="469" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:469,&quot;width&quot;:1151,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:50191,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Example of RDNA 4 assembly from 3DMark's raytracing feature test, showing a basic block separately waiting on global memory loads and texture sampling requests issued by other basic blocks</figcaption></figure></div><p><span>Similarly, </span><code>lgkmcnt</code><span> gets separated into </span><code>kmcnt</code><span> for scalar memory loads and </span><code>dscnt</code><span> for LDS accesses. Scalar memory loads are out-of-order, which means the compiler must wait for all scalar memory loads to complete (</span><code>kmcnt=0</code><span> or </span><code>lgmkcnt=0</code><span>) before using results from any pending scalar memory load. On RDNA 4, the compiler can interleave scalar memory and LDS accesses without having to wait for </span><code>lgkmcnt=0</code><span>.</span></p><p>Intel and Nvidia's GPUs use software managed scoreboards. A scoreboard entry can be set or and waited on by any instruction, regardless of memory access type. Therefore RDNA 4's optimization isn't applicable to those other GPU architectures. A cost to Intel/Nvidia's approach is that utilizing a big memory request queue would require a correspondingly large scoreboard. AMD can extend a counter by one bit and double the number of queue entries a wave can use.</p><p>RDNA 4's memory subsystem enhancements are exciting and improve performance across a variety of workloads compared to RDNA 3. AMD specifically calls out benefits in raytracing workloads, where traversal and result handling may occur simultaneously on the same WGP. Traversal involves pointer chasing, while result handling might involve more cache friendly data lookups and texture sampling. Breaking cross-wave memory dependencies would prevent different memory access patterns in those tasks from delaying each other.</p><p>Likely this wasn't an issue with rasterization because waves assigned to a WGP probably work on pixels in close proximity. Those waves may sample the same textures, and even take samples in close proximity to each other within the same texture. If one wave misses in cache, the others likely do too.</p><p><span>Breaking up </span><code>vmcnt</code><span> and </span><code>lgmkcnt</code><span> probably helps raytracing too. Raytracing shaders make BVH intersection and LDS stack management requests during traversal. Then they might sample textures or access global memory buffers during result handling. Giving the compiler flexibility to interleave those request types and still wait on a specific request is a good thing.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg" width="1456" height="969" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:969,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:8099343,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Radeon logo on the RX 9070 graciously provided by AMD for review</figcaption></figure></div><p>But RDNA 4's scheme for handling memory dependencies isn't fundamentally different from that of GCN many years ago. While the implementation details differ, RDNA 4, GCN, and Intel and Nvidia's GPUs can all absorb cache misses without immediately stalling a thread. Each GPU maker has improved their ability to do so, whether it's with more scoreboard tokens or more counters. RDNA 4 indeed can do Cortex A510 style nonblocking loads, but it's far from a new feature in the world of GPUs.</p><p>Resolving false cross-wave dependencies isn't new either. Nvidia had "out-of-order" cross-wave memory access handling in Turing, and presumably their newer architectures too. Intel had the same at least as far back as Gen 9 (Skylake) graphics. Therefore RDNA 4's "out-of-order" memory subsystem enhancements are best seen as generational tweaks, rather than new game changing techniques. </p><p>Still, AMD's engineers deserve credit for making them happen. RDNA 4’s  arguably makes the most significant change to AMD’s GPU memory subsystem since RDNA launched in 2019. I'm glad to see the company continue to improve their GPU architecture and make it better suited to emerging workloads like raytracing.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: My iOS app to practice sight reading (10 years in the App Store) (182 pts)]]></title>
            <link>https://apps.apple.com/us/app/notes-sight-reading-trainer/id874386416</link>
            <guid>43456030</guid>
            <pubDate>Sun, 23 Mar 2025 21:25:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://apps.apple.com/us/app/notes-sight-reading-trainer/id874386416">https://apps.apple.com/us/app/notes-sight-reading-trainer/id874386416</a>, See on <a href="https://news.ycombinator.com/item?id=43456030">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
<!---->
<!---->
<!---->
    

<!---->
    


  <div dir="" data-test-bidi=""><p>Introducing Notes - Sight Reading Trainer, the ultimate iOS app for mastering sight reading in music! Whether you're a beginner or an experienced musician, Notes is your is your tool to become the musician you were meant to be. When you are ready to learn your instrument and music rather than just learning a song this app is for you. </p><p>Key Features:<br>Engaging Exercises: Explore a variety of interactive exercises designed to strengthen your sight reading abilities with a piano interface.</p><p>Ways to use the app: Connect with Midi, use the on screen keyboard or your devices microphone for input.</p><p>Customizable Difficulty: Tailor the difficulty level to match your proficiency, allowing you to progress at your own pace and challenge yourself when ready.</p><p>Comprehensive Music Notation: Learn to read sheet music, decipher key signatures, note durations and augmentations (sharp/flat) with ease.</p><p>Progress Tracking: Keep track of your improvements over time with detailed performance analytics and history.</p><p>Practice with songs: This app is focused on randomized practice but also has a handful of songs to practice your developing skills with. More to be added soon!</p><p>Goal Setting: Set achievable note goals and receive reminders to maintain consistency in your practice.</p><p>Unlock the world of sight reading and elevate your musical journey with Notes - Sight Reading Trainer. Download the app now and get serious about learning music!</p></div>

<!---->
  <section>
    <div>
      <h2>What’s New</h2>
        

    </div>
    <div>
          <p dir="false" data-test-bidi="">Fix to allow using midi inputs and microphone for the keyboarding learning lessons</p>


      </div>
  </section>

      <section>
      <p>
        <h2>
          Ratings and Reviews
        </h2>

        <!---->
      </p>

        <div>
      <p><span>4.8</span> out of 5</p>
        <p>2.7K Ratings</p>
    </div>


      <div>
              
              <div aria-labelledby="we-customer-review-1978" id="ember77084">
  <figure aria-label="5 out of 5">
  <span>
    <span></span>
  </span>
<!----></figure>


  

    <h3 dir="ltr" id="we-customer-review-1978">
    Great app!
</h3>



      <blockquote dir="">
        

        <div dir="false" data-test-bidi=""><p>This is one of the best apps I’ve used to study notes. I only sing but I’m trying to learn notes and this is fantastic. You will learn how to use a piano in the process, which is key to making sure you learn to sing in tune. My only objection is that the lessons do NOT include training on sharps &amp; flats. I was hoping the in app purchase for additional lessons (happens after you’ve learned quite a lot, no worries) included this, and there’s no info given on what these lessons contain, only that “more will be added”. The practice mode thankfully does allow you to train flats but not in an organized, piece by piece way like the lessons do. But unfortunately you cannot see flats and sharps labeled on the keys like the other ones.</p><p>I have to knock off a star… sharps and flats are a big part of the music that I do and so this app didn’t teach me everything I wanted to know.</p></div>
    


<!----></blockquote>



<!----></div>

          
    
              <div aria-labelledby="we-customer-review-1979" id="ember77086">
  <figure aria-label="5 out of 5">
  <span>
    <span></span>
  </span>
<!----></figure>


  

    <h3 dir="ltr" id="we-customer-review-1979">
    Thank you for educational app.
</h3>



      <blockquote dir="">
        

        <p dir="false" data-test-bidi="">This app and the ease of use has introduced a whole new world to me.<br>I never thought I would understand how to play a piano.. My life has been filled with homelessness and bad fortune, so I learned a long time ago that music had a medicinal effect on me.. A personal escape of sorts... I always wanted to understand how to make beautiful sounds with a piano, but I don’t learn so well.. This app made it easy for me to understand the keyboard layout and knowing what each note is from each key.. It seems like this app will help me learn how to write songs and that will make life so happy for me.<br>I’m not trying to be sad here.. I just wanted to explain how much this app can help someone like me. I can’t afford the full version but this version, I appreciate none the less.<br>“Music may have to save the world someday”.</p>
    


<!----></blockquote>



<!----></div>

          
    
              <div aria-labelledby="we-customer-review-1980" id="ember77088">
  <figure aria-label="5 out of 5">
  <span>
    <span></span>
  </span>
<!----></figure>


  

    <h3 dir="ltr" id="we-customer-review-1980">
    Absolutely Stunning
</h3>



      <blockquote dir="">
        

        <p dir="false" data-test-bidi="">I rarely write reviews, but this app is so beyond amazing I’ll try my best to share my thoughts. First of all, everything is absolutely FREE, NO premium that you have to buy to basically unlock everything, I feel the developers of this app were truly trying to help instead of take all of your money. Secondly, I’ve had this app for one day and I’ve already learned more than I did searching for weeks for a good app that’s free. I’ve started to be able to play simple songs on my keyboard, like Jingle Bells, completely looking at the sheet music. I almost gave up on trying to learn how to read sheet music, but this has given me a great start. Sorry for bad grammar.</p>
    


<!----></blockquote>



<!----></div>

          

      </div>

        
    </section>


<!---->
<!---->
<!---->
  <section>
  <div>
    <h2>
      App Privacy
    </h2>

    


  </div>

  <p>
    The developer, <span>Ryan Newsome</span>, indicated that the app’s privacy practices may include handling of data as described below. For more information, see the <a href="https://app.termly.io/document/privacy-policy/1c5b80a8-9d7a-4f44-82c8-2aabbcf64a41">developer’s privacy policy</a>.
  </p>

  <div>
        
        <h3>Data Not Linked to You</h3>
        <p>The following data may be collected but it is not linked to your identity:</p>
          <ul>
              <li classs="privacy-type__item">
                <span>
                  <span>
                    
                  </span>
                  <span>Usage Data</span>
                </span>
              </li>
              <li classs="privacy-type__item">
                <span>
                  <span>
                    
                  </span>
                  <span>Diagnostics</span>
                </span>
              </li>
          </ul>
      </div>

    <p>Privacy practices may vary, for example, based on the features you use or your age. <a href="https://apps.apple.com/story/id1538632801">Learn&nbsp;More</a></p>
</section>


<section>
  <div>
    <h2>Information</h2>
    <dl>
        <p>
          <dt>Seller</dt>
          <dd>
              Ryan Newsome
          </dd>
        </p>
        <p>
          <dt>Size</dt>
          <dd aria-label="32 megabytes">32 MB</dd>
        </p>
        <p>
          <dt>Category</dt>
          <dd>
              <a href="https://itunes.apple.com/us/genre/id6017" data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;actionUrl&quot;:&quot;https://itunes.apple.com/us/genre/id6017&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;GenrePage&quot;}">
                Education
              </a>
          </dd>
        </p>
      <div>
        <dt>Compatibility</dt>
          <dd>
              <dl>
                <dt>
                  iPhone
                </dt>
                <dd>Requires iOS 14.0 or later.
                </dd>
              </dl>
              <dl>
                <dt>
                  iPad
                </dt>
                <dd>Requires iPadOS 14.0 or later.
                </dd>
              </dl>
              <dl>
                <dt>
                  iPod&nbsp;touch
                </dt>
                <dd>Requires iOS 14.0 or later.
                </dd>
              </dl>
              <dl>
                <dt>
                  Mac
                </dt>
                <dd>Requires macOS&nbsp;11.0 or later and a Mac with Apple&nbsp;M1&nbsp;chip or later.
                </dd>
              </dl>
              <dl>
                <dt>
                  Apple Vision
                </dt>
                <dd>Requires visionOS 1.0 or later.
                </dd>
              </dl>
          </dd>
      </div>
<!---->      <div>
        <dt>Languages</dt>
          <dd dir="">
        

                    <p data-test-bidi="">English, French, German, Italian, Polish, Simplified Chinese, Spanish, Traditional Chinese</p>

    


<!----></dd>


      </div>
      
<!---->      <p>
        <dt>Copyright</dt>
        <dd>© Ryan Newsome</dd>
      </p>
        <p>
          <dt>Price</dt>
          <dd>Free</dd>
        </p>
        <div>
          <dt>In-App Purchases</dt>
          <dd>
            <ol role="table">
              <p>
    
                <li>
                  <span><span>Premium</span></span>
                  <span>$3.99</span>
                </li>
              
<!----></p>

            </ol>
          </dd>
        </div>
      
    </dl>
  </div>
  <div>
    <ul>
<!---->        <li>
          <a data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;LinkToAppSupport&quot;}" href="http://ryannewso.me/">
            App Support
          </a>
        </li>
        <li>
          <a data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;LinkToPrivacyPolicy&quot;}" href="https://app.termly.io/document/privacy-policy/1c5b80a8-9d7a-4f44-82c8-2aabbcf64a41">
            Privacy Policy
          </a>
        </li>
<!----><!---->    </ul>
  </div>
</section>

<section>
  <ul>
<!---->      <li>
        <a data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;LinkToAppSupport&quot;}" href="http://ryannewso.me/">
          App Support
        </a>
      </li>
<!---->      <li>
        <a data-metrics-click="{&quot;actionType&quot;:&quot;navigate&quot;,&quot;targetType&quot;:&quot;link&quot;,&quot;targetId&quot;:&quot;LinkToPrivacyPolicy&quot;}" href="https://app.termly.io/document/privacy-policy/1c5b80a8-9d7a-4f44-82c8-2aabbcf64a41">
          Privacy Policy
        </a>
      </li>
  </ul>
</section>

<!---->
<!---->
    <section>
      <p>
        <h2>
          More By This Developer
        </h2>
        <!---->
      </p>

      
    </section>

    <section>
      <p>
        <h2>
          You Might Also Like
        </h2>
        <!---->
      </p>

      
    </section>


<!---->

<!----></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: LinkedIn sucks, so I built a better one (143 pts)]]></title>
            <link>https://heyopenspot.com/</link>
            <guid>43454915</guid>
            <pubDate>Sun, 23 Mar 2025 18:52:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://heyopenspot.com/">https://heyopenspot.com/</a>, See on <a href="https://news.ycombinator.com/item?id=43454915">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[A USB Interface to the "Mother of All Demos" Keyset (236 pts)]]></title>
            <link>https://www.righto.com/2025/03/mother-of-all-demos-usb-keyset-interface.html</link>
            <guid>43453582</guid>
            <pubDate>Sun, 23 Mar 2025 15:31:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.righto.com/2025/03/mother-of-all-demos-usb-keyset-interface.html">https://www.righto.com/2025/03/mother-of-all-demos-usb-keyset-interface.html</a>, See on <a href="https://news.ycombinator.com/item?id=43453582">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-4116959493954575947" itemprop="description articleBody">
<p>In the early 1960s, Douglas Engelbart started investigating how computers could augment human intelligence: <!-- https://youtu.be/yJDv-zdhzMY?si=m8GpQSIqnYfNnFsf&t=130)-->
"If, in your office, you as an intellectual worker
were supplied with a computer display backed up by a computer that was alive for you all day and was instantly responsive to every
action you had, how much value could you derive from that?"
Engelbart developed many features of modern computing that we now take for granted: the mouse,<span id="fnref:mouse"><a href="#fn:mouse">1</a></span> hypertext, shared documents, windows,
and a graphical user interface.
At the 1968 Joint Computer Conference, Engelbart demonstrated these innovations in a groundbreaking presentation, now known as
"The Mother of All Demos."</p>
<!-- [Engelbart using the keyset to edit text. Note that the display doesn't support lower case text; instead, upper case is indicated by a line above the character. Adapted from <a href="https://youtu.be/UhpTiWyVa6k?si=cqfTbRsOxTy8eE01">The Mother of All Demos</a>.](keyset-video2.jpg "w500")  -->

<p><a href="https://static.righto.com/images/engelbart/interface.jpg"><img alt="The keyset with my prototype USB interface." height="364" src="https://static.righto.com/images/engelbart/interface-w500.jpg" title="The keyset with my prototype USB interface." width="500"></a></p><p>The keyset with my prototype USB interface.</p>
<p>Engelbart's demo also featured an input device known as the keyset, but unlike his other innovations, the keyset failed to catch on.
The 5-finger keyset lets you type without moving your hand, entering characters by pressing multiple keys simultaneously as a chord.
Christina Englebart, his daughter, loaned one of Engelbart's keysets to me.
I constructed an interface to connect the keyset to USB, so that it can be used with a modern computer.
The video below shows me typing with the keyset, using the mouse buttons to select upper case and special characters.<span id="fnref:keys"><a href="#fn:keys">2</a></span></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/DpshKBKt_os?si=gzyYjd-2_ltR9oeI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>I wrote this blog post to describe my USB keyset interface.
Along the way, however, I got sidetracked by the history of The Mother of All Demos and how it obtained that name.
It turns out that Engelbart's demo isn't the first demo to be called "The Mother of All Demos".</p>
<h2>Engelbart and The Mother of All Demos</h2>
<!--
As SRI put it, Doug Engelbart envisioned harnessing the power of computers as tools for collaboration and the augmentation of our collective
intelligence to work on humanity's most important problems.
-->

<p>Engelbart's work has its roots in
Vannevar Bush's 1945 visionary essay, "<a href="https://worrydream.com/refs/Bush%20-%20As%20We%20May%20Think%20(Life%20Magazine%209-10-1945).pdf">As We May Think</a>."
Bush envisioned thinking machines, along with the "memex", a compact machine holding a library of collective knowledge with hypertext-style links: "The Encyclopedia Britannica could be reduced to the volume of a matchbox."
The memex could search out information based on associative search, building up a hypertext-like trail of connections.</p>
<p>In the early 1960s, Engelbart was inspired by Bush's essay and set out
to develop means to augment human intellect: "increasing the capability of a man to approach a complex problem situation, to gain comprehension to suit his particular needs, and to derive solutions to problems."<span id="fnref:1962"><a href="#fn:1962">3</a></span>
Engelbart founded the Augmentation Research Center at the Stanford Research Institute (now SRI), where
he and his team created a system called NLS (oN-Line System).</p>
<p><a href="https://static.righto.com/images/engelbart/shopping-list.jpg"><img alt="Engelbart editing a hierarchical shopping list." height="351" src="https://static.righto.com/images/engelbart/shopping-list-w500.jpg" title="Engelbart editing a hierarchical shopping list." width="500"></a></p><p>Engelbart editing a hierarchical shopping list.</p>
<p>In 1968, Engelbart demonstrated NLS to a crowd of two thousand people
at the Fall Joint Computer Conference.
Engelbart gave the demo from the stage, wearing a crisp shirt and tie and a headset microphone.
Engelbart created hierarchical documents, such as the shopping list above, and moved around them with hyperlinks.
He demonstrated how text could be created, moved, and edited with the keyset and mouse.
Other documents included graphics, crude line drawing by today's standards but cutting-edge for the time.
The computer's output was projected onto a giant screen, along with video of Engelbart.</p>
<p><a href="https://static.righto.com/images/engelbart/keyset-video.jpg"><img alt="Engelbart using the keyset to edit text. Note that the display doesn't support lowercase text; instead, uppercase is indicated by a line above the character. Adapted from The Mother of All Demos." height="354" src="https://static.righto.com/images/engelbart/keyset-video-w500.jpg" title="Engelbart using the keyset to edit text. Note that the display doesn't support lowercase text; instead, uppercase is indicated by a line above the character. Adapted from The Mother of All Demos." width="500"></a></p><p>Engelbart using the keyset to edit text. Note that the display doesn't support lowercase text; instead, uppercase is indicated by a line above the character. Adapted from <a href="https://youtu.be/UhpTiWyVa6k?si=cqfTbRsOxTy8eE01">The Mother of All Demos</a>.</p>
<p>Engelbart sat at a specially-designed Herman Miller desk<span id="fnref:herman-miller"><a href="#fn:herman-miller">6</a></span> that held the
keyset, keyboard, and mouse, shown above.
While Engelbart was on stage in San Francisco,
the SDS 940<span id="fnref:sds940"><a href="#fn:sds940">4</a></span> computer that ran the NLS software was 30 miles to the south in Menlo Park.<span id="fnref:moad-video"><a href="#fn:moad-video">5</a></span></p>
<p>To the modern eye, the demo resembles a PowerPoint presentation over Zoom, as
Engelbart collaborated with
Jeff Rulifson and Bill Paxton, miles away in Menlo Park.
(Just like a modern Zoom call, the remote connection started with "We're not hearing you. How about now?")
Jeff Rulifson browsed the NLS code, jumping between code files with hyperlinks and expanding subroutines by clicking on them.
NLS was written in custom <a href="https://bitsavers.org/pdf/sri/arc/NLS_Programmers_Guide_Jan76.pdf">high-level languages</a>, which they developed
with a "compiler compiler" called <a href="https://en.wikipedia.org/wiki/TREE-META">TREE-META</a>.
The NLS system held interactive documentation as well as tracking bugs and changes.
Bill Paxton interactively drew a diagram and then demonstrated how NLS could be used as a database, retrieving information by searching on keywords.
(Although Engelbart was stressed by the live demo, Paxton told me that he was "too young and inexperienced to be concerned.")</p>
<p><a href="https://static.righto.com/images/engelbart/demo-english.jpg"><img alt="Bill Paxton, in Menlo Park, communicating with the conference in San Francisco." height="326" src="https://static.righto.com/images/engelbart/demo-english-w500.jpg" title="Bill Paxton, in Menlo Park, communicating with the conference in San Francisco." width="500"></a></p><p>Bill Paxton, in Menlo Park, communicating with the conference in San Francisco.</p>
<p>Bill English, an electrical engineer, not only built the first mouse for Engelbart but was also the hardware mastermind behind the demo.
In San Francisco, the screen images were projected on a 20-foot screen by a Volkswagen-sized
Eiodophor projector, bouncing light off a modulated oil film.
Numerous cameras, video switchers and mixers created the video image.
Two leased microwave links and half a dozen antennas connected SRI in Menlo Park to the demo in San Francisco.
High-speed modems send the mouse, keyset, and keyboard signals from the demo back to SRI.
Bill English spent months assembling the hardware and network for the demo and then managed the demo behind the scenes, assisted by a team of about 17 people.</p>
<p>Another participant was the famed counterculturist Stewart Brand, known for the <a href="https://en.wikipedia.org/wiki/Whole_Earth_Catalog">Whole Earth Catalog</a>
and the WELL, one of the oldest online virtual communities.
Brand advised Engelbart on the presentation, as well as running a camera. He'd often point the camera at a monitor to generate swirling psychedelic
feedback patterns, reminiscent of the LSD that he and Engelbart had experimented with.</p>
<p>The demo received press attention such as
a San Francisco Chronicle article titled "Fantastic World of Tomorrow's Computer".
It stated, "The most fantastic glimpse into the computer future was taking place in a windowless room on the third floor of the Civic Auditorium"
where Engelbart "made a computer in Menlo Park do secretarial work for him that ten efficient secretaries couldn't do in twice the time."
His goal: "We hope to help man do better what he does—perhaps by as much as 50 per cent."
However, the demo received little attention in the following decades.<span id="fnref:attention"><a href="#fn:attention">7</a></span></p>
<p>Engelbart continued his work at SRI for almost a decade, but as Engelbart commented with frustration,
“There was a slightly less than universal perception of our value at SRI”.<span id="fnref:levy"><a href="#fn:levy">8</a></span>
In 1977, SRI sold the Augmentation Research Center to Tymshare, a time-sharing computing company.
(Timesharing was the cloud computing of the 1970s and 1980s,
where companies would use time on a centralized computer.)
At Tymshare, Engelbart's system was renamed AUGMENT and marketed as an office automation service, but Engelbart himself was sidelined from development,
a situation that he <a href="https://stanford.edu/dept/SUL/sites/engelbart/engfmst3-ntb.html">described</a> as
sitting in a corner and becoming invisible.</p>
<p>Meanwhile, Bill English and some other SRI researchers<span id="fnref:researchers"><a href="#fn:researchers">9</a></span> migrated four miles south to Xerox PARC and worked on the Xerox Alto computer.
The Xerox Alto incorporated many ideas from the Augmentation Research Center including the graphical user interface, the mouse, and the keyset.
The Alto's keyset 
was almost identical to the Engelbart keyset, as can be seen in the photo below.
The Alto's keyset was most popular for the networked 3D shooter game "<a href="https://www.digibarn.com/collections/games/xerox-maze-war/index.html">Maze War</a>", with the clicking of keysets echoing through the hallways of Xerox PARC.</p>
<p><a href="https://static.righto.com/images/engelbart/alto.jpg"><img alt="A Xerox Alto with a keyset on the left." height="359" src="https://static.righto.com/images/engelbart/alto-w500.jpg" title="A Xerox Alto with a keyset on the left." width="500"></a></p><p>A Xerox Alto with a keyset on the left.</p>
<p>Xerox famously failed to commercialize the ideas from the Xerox Alto, but Steve Jobs recognized the importance of interactivity, the graphical user interface, and the mouse
when he visited Xerox PARC in 1979.
Steve Jobs provided the Apple Lisa and Macintosh ended up with a graphical user interface and the mouse (streamlined to one button instead of three), but he left the keyset behind.<span id="fnref:parc"><a href="#fn:parc">10</a></span></p>
<p>When McDonnell Douglas acquired Tymshare in 1984, Engelbart and his software—now called Augment—had a new home.<span id="fnref:augment"><a href="#fn:augment">11</a></span>
In 1987, McDonnell Douglas released a text editor and outline processor for the IBM PC called
<a href="https://archive.org/details/1987-augment-mini-base-users-guide_202503">MiniBASE</a>, 
one of the few PC applications that supported a keyset.
The functionality of MiniBASE was almost identical to Engelbart's 1968 demo, but in 1987, MiniBASE
was competing against GUI-based word processors such as MacWrite and Microsoft Word, so MiniBASE had little impact.
Engelbart left McDonnell Douglas in 1988, forming a research foundation called the <a href="https://www.nytimes.com/1988/09/05/business/business-people-computer-scientist-forming-a-foundation.html">Bootstrap Institute</a> to continue his research independently.</p>

<p>The name "The Mother of All Demos" has its roots in the Gulf War.
In August 1990, Iraq invaded Kuwait, leading to war between Iraq and a coalition of the United States and 41 other countries.
During the months of buildup prior to active conflict, Iraq's leader, Saddam Hussein,
exhorted the Iraqi people to prepare for "<a href="https://www.nytimes.com/1990/09/22/world/confrontation-in-the-gulf-leaders-bluntly-prime-iraq-for-mother-of-all-battles.html">the mother of all battles</a>",<span id="fnref:mother"><a href="#fn:mother">12</a></span> a phrase that caught the attention of the media.
The battle didn't proceed as Hussein hoped: during <a href="https://www.nytimes.com/1991/02/28/world/war-gulf-president-bush-halts-offensive-combat-kuwait-freed-iraqis-crushed.html">exactly 100 hours</a> of ground combat, the US-led coalition liberated Kuwait, pushed into Iraq, crushed the Iraqi forces,
and declared a ceasefire.<span id="fnref:gulf-war"><a href="#fn:gulf-war">13</a></span>
Hussein's mother of all battles became the <a href="https://www.nytimes.com/1991/02/27/arts/critic-s-notebook-human-images-help-add-drama-to-war-coverage.html">mother of all surrenders</a>.</p>
<p>The phrase "mother of all ..." became the 1990s equivalent of a meme, used as a slightly-ironic superlative.
It was applied to everything
from <a href="https://www.nytimes.com/1993/06/18/sports/us-open-golf-notebook-fore-the-mother-of-all-traffic-jams.html">The Mother of All Traffic Jams</a> to <a href="https://amzn.to/4bzQ7Tc">The Mother of All Windows Books</a>, from <a href="https://cooking.nytimes.com/recipes/1132-the-mother-of-all-butter-cookies">The Mother of All Butter Cookies</a> to Apple calling mobile devices
<a href="https://www.nytimes.com/1992/07/19/business/the-executive-computer-mother-of-all-markets-or-a-pipe-dream-driven-by-greed.html">The Mother of All Markets</a>.<span id="fnref:mobile"><a href="#fn:mobile">14</a></span></p>
<p>In 1991, this superlative was applied to a computer demo, but it wasn't Engelbart's demo.
Andy Grove, Intel's president, gave a keynote speech at Comdex 1991 entitled <a href="https://www.youtube.com/watch?v=CwvOeKqXv18">The Second Decade: Computer-Supported Collaboration</a>,
a live demonstration of his vision for PC-based video conferencing and wireless communication in the PC's second decade.
This complex hour-long demo required almost six months to prepare, with 15 companies collaborating.
Intel called this demo "The Mother of All Demos", a name repeated in the New York Times, San Francisco Chronicle, Fortune, and PC Week.<span id="fnref:intel"><a href="#fn:intel">15</a></span>
Andy Grove's demo was a hit, with over 20,000 people requesting a video tape, but the demo was soon forgotten.</p>
<p><a href="https://static.righto.com/images/engelbart/nytimes-moad.jpg"><img alt="On the eve of Comdex, the New York Times wrote about Intel's &quot;Mother of All Demos&quot;. Oct 21, 1991, D1-D2." height="357" src="https://static.righto.com/images/engelbart/nytimes-moad-w350.jpg" title="On the eve of Comdex, the New York Times wrote about Intel's &quot;Mother of All Demos&quot;. Oct 21, 1991, D1-D2." width="350"></a></p><p>On the eve of Comdex, the New York Times <a href="https://www.nytimes.com/1991/10/21/business/computer-industry-gathers-amid-chaos.html">wrote</a> about Intel's "Mother of All Demos". Oct 21, 1991, D1-D2.</p>
<p>In 1994, <em>Wired</em> writer Steven Levy wrote <a href="https://amzn.to/4kCE63A">Insanely Great: The Life and Times of Macintosh, the Computer that Changed Everything</a>.<span id="fnref2:levy"><a href="#fn:levy">8</a></span>
In the second chapter of this comprehensive book, Levy explained how Vannevar Bush and Doug Engelbart "sparked a chain reaction" that led to the Macintosh.
The chapter described Engelbart's 1968 demo in detail including a throwaway line saying, "<a href="https://archive.org/details/insanely_great_levy_hard_cover_1994_pdf__mlib/page/42/mode/1up">It was the mother of all demos.</a>"<span id="fnref:vandam"><a href="#fn:vandam">16</a></span>
Based on my research, I think this is the source of the name "The Mother of All Demos" for Engelbart's demo.</p>
<p>By the end of the century, multiple publications echoed Levy's catchy phrase.
In February 1999, the San Jose Mercury News had a <a href="https://web.archive.org/web/19991003082606/http://www.mercurycenter.com/svtech/news/special/engelbart/part4.htm">special article</a> on Engelbart, saying that the demonstration was "still called 'the mother of all demos'", a description echoed by
the industry publication <a href="https://archive.org/details/sim_computerworld_1999-05-10_33_19/page/n83/mode/1up">Computerworld</a>.<span id="fnref:still"><a href="#fn:still">17</a></span>
The book <a href="https://archive.org/details/nerds20100step/page/124/mode/2up">Nerds: A Brief History of the Internet</a> stated that the demo "has entered legend as 'the mother of all demos'".
By this point, Engelbart's fame for the "mother of all demos" was cemented and the phrase became near-obligatory when writing about him.
The classic Silicon Valley history <a href="https://archive.org/details/fireinvalleymaki0000frei">Fire in the Valley</a> (1984), for example,
didn't even mention Engelbart but in the <a href="https://archive.org/details/fireinvalleymaki00frei_0/page/303">second edition</a> (2000),
"The Mother of All Demos" had its own chapter.</p>
<h2>Interfacing the keyset to USB</h2>
<p>Getting back to the keyset interface,
the keyset consists of five microswitches, triggered by the five levers.
The switches are wired to a standard DB-25 connector.
I used a <a href="https://www.pjrc.com/store/teensy36.html">Teensy 3.6</a> microcontroller board for the interface, since this board can act both as a USB device
and as a USB host.
As a USB device, the Teensy can emulate a standard USB keyboard.
As a USB host, the Teensy can receive input from a standard USB mouse.</p>
<p>Connecting the keyset to the Teensy is (almost) straightforward, wiring the switches to five data inputs on the Teensy and the common line connected to ground.
The Teensy's input lines can be configured with pullup resistors inside the microcontroller. The result is that a data line shows <code>1</code> by default and
<code>0</code> when the corresponding key is pressed.
One complication is that the keyset apparently has a 1.5 KΩ between the leftmost button and ground, maybe to indicate that the device is plugged in.
This resistor caused that line to always appear low to the Teensy.
To counteract this and allow the Teensy to read the pin, I connected a 1 KΩ pullup resistor to that one line.</p>
<h3>The interface code</h3>
<p>Reading the keyset and sending characters over USB is mostly straightforward, but there are a few complications.
First, it's unlikely that the user will press multiple keyset buttons at exactly the same time. Moreover, the button contacts may bounce.
To deal with this, I wait until the buttons have a stable value for 100 ms (a semi-arbitrary delay) before sending a key over USB.</p>
<p>The second complication is that with five keys, the keyset only supports 32 characters. To obtain upper case, numbers, special characters, and control
characters, the keyset is designed to be used in conjunction with mouse buttons.
Thus, the interface needs to act as a USB host, so I can plug in a USB mouse to the interface.
If I want the mouse to be usable as a mouse, not just buttons in conjunction with the keyset, the interface mus forward mouse events over USB.
But it's not that easy, since mouse clicks in conjunction with the keyset shouldn't be forwarded. Otherwise, unwanted clicks will happen while
using the keyset.</p>
<p>To emulate a keyboard, the code uses the <a href="https://docs.arduino.cc/language-reference/en/functions/usb/Keyboard/">Keyboard</a> library. This library provides
an API to send characters to the destination computer.
Inconveniently, the simplest method, <code>print()</code>, supports only regular characters, not special characters like <code>ENTER</code> or <code>BACKSPACE</code>. For those, I needed to
use the lower-level <code>press()</code> and <code>release()</code> methods.
To read the mouse buttons, 
the code uses the <a href="https://github.com/PaulStoffregen/USBHost_t36">USBHost_t36</a> library, the Teensy version of the <a href="https://docs.arduino.cc/libraries/usb-host-shield-library-2.0/">USB Host</a> library.
Finally, to pass mouse motion through to the destination computer, I use the <a href="https://docs.arduino.cc/language-reference/en/functions/usb/Mouse/">Mouse</a> library.</p>
<h2>Conclusions</h2>
<p>Engelbart claimed <!-- https://web.stanford.edu/class/history34q/readings/Engelbart/Engelbart_AugmentWorkshop.html --> that learning a keyset wasn't
difficult—a six-year-old kid could learn it in less than a week—but I'm not willing to invest much time into learning it. In my brief use of the keyset, I found it very difficult to use physically.
Pressing four keys at once is difficult, with the worst being all fingers except the ring finger. Combining this with a mouse button or two at the same time
gave me the feeling that I was sight-reading a difficult piano piece.
Maybe it becomes easier with use, but I noticed that Alto programs tended to treat the keyset as function keys, rather than a mechanism for typing with chords.<span id="fnref:alto"><a href="#fn:alto">18</a></span>
David Liddle of Xerox PARC <a href="https://archive.computerhistory.org/resources/access/text/2020/06/102792010-05-01-acc.pdf#page=9">said</a>, "We found that [the keyset] was tending to slow people down, once you got away from really hot [stuff] system programmers.
It wasn't quite so good if you were giving it to other engineers, let alone clerical people and so on."</p>
<p>If anyone else has a keyset that they want to connect via USB (unlikely as it may be), my code is on
<a href="https://github.com/shirriff/keyset-to-usb-interface">github</a>.<span id="fnref:hackaday"><a href="#fn:hackaday">19</a></span>  Thanks to Christina Engelbart for loaning me the keyset. Thanks to Bill Paxton for answering my questions.
Follow me on Bluesky (<a href="https://bsky.app/profile/righto.com">@righto.com</a>) or <a href="https://www.righto.com/feeds/posts/default">RSS</a> for updates.</p>
<h2>Footnotes and references</h2>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Achieving Great Privacy with Safari (106 pts)]]></title>
            <link>https://matanabudy.com/achieving-great-privacy-with-safari/</link>
            <guid>43453350</guid>
            <pubDate>Sun, 23 Mar 2025 14:57:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://matanabudy.com/achieving-great-privacy-with-safari/">https://matanabudy.com/achieving-great-privacy-with-safari/</a>, See on <a href="https://news.ycombinator.com/item?id=43453350">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2025-03-23T14:57Z">
                    23 Mar, 2025
                </time>
            </i>
        </p>
    

    <p>Browsers have always been an arena for fighting and flaming over why your browser is the best and has the most features, while all others are inferior and unusable. I’ve never liked to fight those wars (not with browsers and not with code editors, another hotly debated topic), and I’ve never really understood how people get so religious about their tech choices.</p>
<p>So, first of all, use whatever you want and have fun with whatever you choose—there’s no need to be mad at someone else’s browser preference.</p>
<p>With that being said, browsers have indeed been all over the news lately, with the latest updates about Chrome introducing the new <a href="https://developer.chrome.com/docs/extensions/develop/migrate/what-is-mv3">Manifest V3</a> and <a href="https://www.theverge.com/news/622953/google-chrome-extensions-ublock-origin-disabled-manifest-v3">uBlock Origin being turned off for new Chrome versions</a>. Privacy is once again a hot topic, and browser choices are back in the headlines. “Use Firefox,” they say. “No! Brave is the only browser that will save you!” Blah, blah, blah.</p>
<p>I won’t say anything about that because, well, I’m not into these wars, remember? I try to stay positive about <em>my</em> choices, and therefore, I’m using this post to show how I’m taking care of <em>my</em> privacy with Safari, <em>my</em> browser of choice. Is it perfect? Of course not. Can anything be privacy-perfect these days? Come on.</p>
<ul>
<li><p><a href="https://support.apple.com/en-us/102602">iCloud Private Relay</a>. As someone deeply embedded in the Apple ecosystem with many of my devices being Apple products, I’m subscribed to iCloud+ and have activated iCloud Private Relay. This does two key things: it hides your IP address from websites via a relay and encrypts your DNS queries.</p>
</li>
<li><p><a href="https://kaylees.site/wipr2.html">Wipr</a>. One of the best pieces of software I’ve encountered. It’s a simple and effective ad-blocker, developed by a single indie developer, with a one-time purchase—and then you can forget about it.</p>
</li>
<li><p><a href="https://underpassapp.com/StopTheMadness/">StopTheMadness Pro</a>. An extension that’s all about stopping annoying tricks on the web. This includes removing URL tracking parameters, preventing websites from changing your context menu, and much more. It’s was also created by an indie developer.</p>
</li>
<li><p><a href="https://oblador.github.io/hush/">Hush.</a> Blocks annoying cookies and pop-ups. It’s great and open-source.</p>
</li>
</ul>
<p>That’s it. Three extensions and one service—and honestly, you can do well with just Wipr installed. How effective is this setup? Using the <a href="https://coveryourtracks.eff.org/">EFF online test</a>, this configuration achieved “strong protection against web tracking,” but it also includes a unique fingerprint among the 272,373 tested in the past 45 days, which is not so good:
<img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/matanabudy/my_setup_eff.webp" alt="my_setup_eff">
Using an <a href="https://adblock.turtlecute.org/index.html">online ad-block test</a>, this setup achieved a 96% block rate:
<img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/matanabudy/my_setup_ad_block_rate.webp" alt="my_setup_ad_block_rate"></p>
<p>Just for fun, I compared it to two other “private” setups (all with iCloud Private Relay still enabled):</p>
<ol>
<li>Firefox, with&nbsp;<a href="https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/">uBlock Origin</a>,&nbsp;<a href="https://addons.mozilla.org/en-US/firefox/addon/privacy-badger17/">Privacy Badger</a>, and&nbsp;<a href="https://addons.mozilla.org/en-US/firefox/addon/istilldontcareaboutcookies/">I Still Don’t Care About Cookies</a>. It still got “strong protection against web tracking” from EFF but with an improvement of the fingerprint being only a nearly unique fingerprint—not a fully unique one (“one in 136,187 browsers have the same fingerprint as yours”). In the online test, only 52% of the websites were blocked—not so great:
<img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/matanabudy/firefox_ad_block_rate.webp" alt="firefox_ad_block_rate"></li>
<li>Brave Browser, with its built-in <a href="https://www.google.com/search?client=safari&amp;rls=en&amp;q=brave+browser+shields&amp;ie=UTF-8&amp;oe=UTF-8">Brave shields</a>. It seems to randomize its fingerprint, which according to EFF “provides very strong protection against tracking companies trying to fingerprint your browser, surely better than a unique fingerprint. It also achieved 68% on the online test:
<img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/matanabudy/brave_browser_ad_block_rate.webp" alt="brave_browser_ad_block_rate"></li>
</ol>
<p>So, to conclude, I’m pretty happy with my setup. Is it the most comprehensive test and comparison? Probably not. Do I want to fight with others over their setups? Nope. I do hope that if you use Safari and didn’t know about these extensions, I’ve helped you improve your setup (if you wanted to).</p>
<h5><a href="mailto:hey@matanabudy.com?subject=Re:%20Achieving%20Great%20Privacy%20with%20Safari">Reply via email</a></h5>


    

    
        

        
            


        
    


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Technicalities of Homeworld 2 Backgrounds (157 pts)]]></title>
            <link>https://simonschreibt.de/gat/homeworld-2-backgrounds/</link>
            <guid>43452688</guid>
            <pubDate>Sun, 23 Mar 2025 13:14:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonschreibt.de/gat/homeworld-2-backgrounds/">https://simonschreibt.de/gat/homeworld-2-backgrounds/</a>, See on <a href="https://news.ycombinator.com/item?id=43452688">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<div>

<p><img decoding="async" src="https://data.simonschreibt.de/assets/flag_ru.png"></p>


</div>
<p><span><span>What you see here</span></span><br>
<img fetchpriority="high" decoding="async" alt="" src="https://data.simonschreibt.de/gat026/background_panorama01.jpg" width="500" height="172"></p>
<p><span><span>is the stunning background art</span></span><br>
<img decoding="async" alt="" src="https://data.simonschreibt.de/gat026/background_panorama03.jpg" width="500" height="182"></p>
<p><span><span>of one of the most beautiful sci-fi games.</span></span><br>
<img decoding="async" alt="" src="https://data.simonschreibt.de/gat026/background_panorama02.jpg" width="500" height="162"></p>
<p><span> H o m e w o r l d <span>2</span></span></p>
<p>Thanks for reading.</p>
<p>Just kidding. Of course i have something to say about this. In the company we look at the art of <a href="http://en.wikipedia.org/wiki/Homeworld">Homeworld</a> from time to time and bow to the creators of this masterpiece. Once we talked about how great the background look and how interesting this sketched style is. There is something…some details seem…special to us.</p>
<p><img loading="lazy" decoding="async" alt="" src="https://data.simonschreibt.de/gat026/vertexcolor_gradient.jpg" width="500" height="145"></p>
<p>I mentioned, that this looks a bit like… a vertex color gradient. But they wouldn’t paint the background on geometry, right? I mean…that would has to be a highly tessellated sphere.</p>
<p>The discussion was over but I wasn’t satisfied and wanted at least see the textures. So i used some <a href="http://www.moddb.com/games/homeworld-2/downloads/homeworld-universe-mod-tools">mod tools</a> to extract the Homeworld 2 Demo data but there were no textures. Only some .HOD files. I used Google and found a thread how to generate these .HOD files from a .TGA. It was said:</p>
<blockquote>
<p><span>“…scans every pixel of the image then based on contrast<br>
it decides whether or not to add a new vertex and color…”</span></p>
</blockquote>
<p><span><span>What?</span></span></p>
<p>Could it really be, that this is vertex color? Luckily you can watch at .HOD file with CFHodEdit. And another tool can force a wireframe mode. And now look what this brought to light:</p>
<p><span><span>This is one</span></span><br>
<img loading="lazy" decoding="async" alt="" src="https://data.simonschreibt.de/gat026/wireframe01.gif" width="500" height="203"></p>
<p><span><span>of the most brave</span></span><br>
<img loading="lazy" decoding="async" alt="" src="https://data.simonschreibt.de/gat026/wireframe03.gif" width="500" height="203"></p>
<p><span><span>solution<span>s for game art <span>i ever saw.</span></span></span></span><br>
<img loading="lazy" decoding="async" alt="" src="https://data.simonschreibt.de/gat026/wireframe02.gif" width="500" height="203"></p>
<p>And here you can see how this influences the sky sphere geometry of the game. Do you see how low the resolution is in the low contrast areas? And how round the sphere is where details were painted?</p>
<p><img loading="lazy" decoding="async" alt="" src="https://data.simonschreibt.de/gat026/rotating_sphere01.gif" width="500" height="500"></p>
<p>I never ever had thought, that this can produce such good results. Oh and don’t forget that this technique solves two major problems.</p>
<p><span><b>#1</b></span> You don’t have any problems with DDS texture compression artifacts.<br>
<span><b>#2</b></span> More important from composition perspective: since you can’t get too fine detail (it was said in the tutorial that the base TGA shouldn’t contain too sharp details), the background stays were it should:</p>
<p><span>In </span><span><span>the</span> </span><b><span><span>background</span></span></b>.</p>
<p>Too often i see games where the background contains so much noise and details, that you can’t really separate fore-/midground from background.<br>
The last time i saw this perfect combination of tech &amp; composition was in Diablo 3. <a href="http://simonschreibt.de/gat/diablo-3-trees">I talk about the 2.5D tree article</a>.</p>
<p>If you want know more about how these spheres are generated, read <a href="http://simonschreibt.de/gat/homeworld-2-backgrounds-tech">my next article about this topic</a>.</p>
<p>Thanks for reading.</p>
<section id="update1">
<p><img decoding="async" src="https://data.simonschreibt.de/assets/icon_update_01.png">Update 1</p>
<div id="update-content">
<p><a href="http://oskarstalberg.tumblr.com/" target="_blank">Oskar Stålberg</a> used the Homeworld-Background-Idea in <a href="http://oskarstalberg.com/game/planet/planet.html" target="_blank">his personal project</a> which looks soooo gorgeous! :,)</p>

</div>
</section>
<section id="update2">
<p><img decoding="async" src="https://data.simonschreibt.de/assets/icon_update_01.png">Update 2</p>
<div id="update-content">
<p><a href="https://twitter.com/ChrizCorr" target="_blank">Chris Correia</a> works on a space game and asked me about the stars in the Homeworld-Backgrounds because they are super-sharp. I remembered having seen a thread like this a while ago and <a href="https://forums.gearboxsoftware.com/t/background-star-fields/544377/12" rel="noopener" target="_blank">here it is</a>! </p>
<p>In fact, the stars are single textures/billboards:  </p>

</div>
</section>
					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Worst Programmer I Know (2023) (380 pts)]]></title>
            <link>https://dannorth.net/the-worst-programmer/</link>
            <guid>43452649</guid>
            <pubDate>Sun, 23 Mar 2025 13:08:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dannorth.net/the-worst-programmer/">https://dannorth.net/the-worst-programmer/</a>, See on <a href="https://news.ycombinator.com/item?id=43452649">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
  
  


  <p>The great thing about measuring developer productivity is that you can quickly identify the bad programmers. I want to tell you about the worst programmer I know, and why I fought to keep him in the team.</p>
<p>A few years ago I wrote a Twitter/X thread about <a href="https://twitter.com/tastapod/status/1010461873270153216?s=20">the best programmer I know</a>, which I should write up as a blog post. It seems only fair to tell you about the worst one too. His name is <a href="https://www.linkedin.com/in/timmackinnon/">Tim Mackinnon</a> and I want you to know how <em>measurably unproductive</em> he is.</p>
<p>We were working for a well-known software consultancy at a Big Bank that decided to introduce individual performance metrics, “for appraisal and personal development purposes”. This was cascaded through the organisation, and landed in our team in terms of story points delivered. This was after some considered discussion from the department manager, who knew you shouldn’t measure things like lines of code or bugs found, because people can easily game these.</p>
<figure><img src="https://dannorth.net/the-worst-programmer/dilbert-bug-free-software-1024x311.gif" alt="Source: http://dilbert.com/strip/1995-11-13"><figcaption>
      <p><em>Source: <a href="http://dilbert.com/strip/1995-11-13">http://dilbert.com/strip/1995-11-13</a></em></p>
    </figcaption>
</figure>

<p>Instead we would measure stories delivered, or it may have been story points (it turns out it <a href="https://www.researchgate.net/publication/4106463_The_Slacker's_Guide_to_Project_Tracking_or_spending_time_on_more_important_things">doesn’t matter</a>), because these represented business value. We were using something like Jira, and people would put their name against stories, which made it super easy to generate these productivity metrics.</p>
<p>Which brings me to Tim. Tim’s score was consistently zero. Zero! Not just low, or trending downwards, but literally zero. Week after week, iteration after iteration. Zero points for Tim.</p>
<p>Well Tim clearly had to go. This was the manager’s conclusion, and he asked me to make the necessary arrangements to have Tim removed and replaced by someone who actually delivered, you know, stories.</p>
<p>And I flatly refused. It wasn’t even a hard decision for me, I just said no.</p>
<p>You see, the reason that Tim’s productivity score was zero, was that <em>he never signed up for any stories</em>. Instead he would spend his day pairing with different teammates. With less experienced developers he would patiently let them drive whilst nudging them towards a solution. He would not crowd them or railroad them, but let them take the time to learn whilst carefully crafting moments of insight and learning, often as <a href="https://en.wikipedia.org/wiki/Socratic_questioning">Socratic questions</a>, what ifs, how elses.</p>
<p>With seniors it was more like co-creating or sparring; bringing different worldviews to bear on a problem, to produce something better than either of us would have thought of on our own. Tim is a heck of a programmer, and you always learn something pairing with him.</p>
<p>Tim wasn’t delivering software; Tim was delivering a team that was delivering software. The entire team became more effective, more productive, more aligned, more idiomatic, more <em>fun</em>, because Tim was in the team.</p>
<p>I explained all this to the manager and invited him to come by and observe us working from time to time. Whenever he popped by, he would see Tim sitting with someone different, working on “their” thing, and you could be sure that the quality of that thing would be significantly better, and the time to value significantly lower—yes, you can have better and faster and cheaper, it just takes discipline—than when Tim wasn’t pairing with people.</p>
<p>In the end we kept Tim, and we quietly dropped the individual productivity metrics in favour of team accountability, where we tracked—and celebrated—the business impact we were delivering to the organisation as a high-performing unit.</p>
<h2 id="tldr">tl;dr
  <a href="#tldr"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M0 256C0 167.6 71.6 96 160 96h80c8.8 0 16 7.2 16 16s-7.2 16-16 16H160C89.3 128 32 185.3 32 256s57.3 128 128 128h80c8.8 0 16 7.2 16 16s-7.2 16-16 16H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H336c-8.8 0-16-7.2-16-16s7.2-16 16-16h80c70.7 0 128-57.3 128-128s-57.3-128-128-128H336c-8.8 0-16-7.2-16-16s7.2-16 16-16h80c88.4 0 160 71.6 160 160zM152 240H424c8.8 0 16 7.2 16 16s-7.2 16-16 16H152c-8.8 0-16-7.2-16-16s7.2-16 16-16z"></path></svg></a></h2>
<p>Measure productivity by all means—I’m all for accountability—ideally as tangible business impact expressed in dollars saved, generated, or protected. This is usually hard, so proxy business metrics are fine too.</p>
<p>Just don’t try to measure the individual contribution of a unit in a complex adaptive system, because the premise of the question is flawed.</p>
<p>DORA metrics, for example, are about how the system of work works, whether as Westrum culture indicators or flow of technical change into production. They measure the engine, not the contribution of individual pistons, because that <a href="https://en.wikipedia.org/wiki/Chewbacca_defense">makes no sense</a>.</p>
<p>Also, if you ever get the chance to work with Tim Mackinnon, you should do that.</p>

  <section><em>We can help <strong>your</strong> organisation to go faster — <a href="https://dannorth.net/contact">ask us how</a></em>
</section>

  <section>
    
    <hyvor-talk-comments website-id="4330" page-id="/the-worst-programmer/" loading="lazy"></hyvor-talk-comments>
</section>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I built website for sharing Drum Patterns (268 pts)]]></title>
            <link>http://drumpatterns.onether.com</link>
            <guid>43452629</guid>
            <pubDate>Sun, 23 Mar 2025 13:05:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://drumpatterns.onether.com">http://drumpatterns.onether.com</a>, See on <a href="https://news.ycombinator.com/item?id=43452629">Hacker News</a></p>
<div id="readability-page-1" class="page"><div class="page">
			<p><a href="#content">Skip to content</a></p>
    <div><div><h6><a href="http://drumpatterns.onether.com/maraca-on-3/" title="Maraca on 3">Maraca on 3</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CL</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span></span></p><p><span>MA</span><span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p></div>
<p><span data-post-id="373" data-nonce="16837db759">Play</span> <span><span>120</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/cymbal-funk/" title="Cymbal Funk">Cymbal Funk</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CL</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MA</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p></div>
<p><span data-post-id="372" data-nonce="16837db759">Play</span> <span><span>120</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/cloudy-day/" title="Cloudy Day">Cloudy Day</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span></span></p><p><span>CL</span><span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MA</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span></span></p><p><span>CH</span><span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>X</span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p></div>
<p><span data-post-id="371" data-nonce="16837db759">Play</span> <span><span>119</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/adonis-no-way-back/" title="Adonis - No Way Back">Adonis - No Way Back</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span></span></p><p><span>RS</span><span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CP</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span></span></p></div>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>RS</span><span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span></span></p><p><span>CP</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span></span></p></div>
<p><span data-post-id="370" data-nonce="16837db759">Play</span> <span><span>125</span>BPM</span> <span><span>1</span> <span>2</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/ashleys-roachclip/" title="Ashley's Roachclip">Ashley's Roachclip</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HT</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>RS</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MA</span><span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span></span></p></div>
<p><span data-post-id="369" data-nonce="16837db759">Play</span> <span><span>95</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/the-big-beat/" title="The Big Beat">The Big Beat</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CL</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CP</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p></div>
<p><span data-post-id="368" data-nonce="16837db759">Play</span> <span><span>102</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/papa-was-too/" title="Papa Was Too">Papa Was Too</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CL</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CP</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>X</span></span></p></div>
<p><span data-post-id="367" data-nonce="16837db759">Play</span> <span><span>92</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/its-a-new-day/" title="It's a New Day">It's a New Day</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CL</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MA</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span></span></p></div>
<p><span data-post-id="365" data-nonce="16837db759">Play</span> <span><span>96</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/walk-this-way/" title="Walk This Way">Walk This Way</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CL</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MA</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span></span></p></div>
<p><span data-post-id="364" data-nonce="16837db759">Play</span> <span><span>109</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/when-the-levee-breaks/" title="When The Levee Breaks">When The Levee Breaks</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CL</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MA</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span></span></p></div>
<p><span data-post-id="363" data-nonce="16837db759">Play</span> <span><span>112</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/impeach-the-president/" title="Impeach The President">Impeach The President</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CL</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MA</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>X</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span></span></p></div>
<p><span data-post-id="362" data-nonce="16837db759">Play</span> <span><span>112</span>BPM</span> <span><span>1</span></span></p></div><div><h6><a href="http://drumpatterns.onether.com/the-funky-drummer/" title="The Funky Drummer">The Funky Drummer</a></h6>
<div>
<p><span>AC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>BD</span><span><span>X</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span></span></p><p><span>SD</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>X</span><span>-</span><span>X</span><span>-</span><span>X</span><span>X</span><span>-</span><span>-</span><span>X</span></span></p><p><span>LC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>HC</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CL</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>MA</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CB</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>CY</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span></span></p><p><span>OH</span><span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span>X</span><span>-</span><span>-</span></span></p><p><span>CH</span><span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>-</span><span>X</span><span>X</span><span>X</span><span>X</span><span>X</span><span>-</span><span>X</span><span>X</span></span></p></div>
<p><span data-post-id="361" data-nonce="16837db759">Play</span> <span><span>96</span>BPM</span> <span><span>1</span></span></p></div></div>			
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[argp: GNU-style command line argument parser for Go (153 pts)]]></title>
            <link>https://github.com/tdewolff/argp</link>
            <guid>43452525</guid>
            <pubDate>Sun, 23 Mar 2025 12:45:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/tdewolff/argp">https://github.com/tdewolff/argp</a>, See on <a href="https://news.ycombinator.com/item?id=43452525">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">GNU command line argument parser</h2><a id="user-content-gnu-command-line-argument-parser" aria-label="Permalink: GNU command line argument parser" href="#gnu-command-line-argument-parser"></a></p>
<p dir="auto">Command line argument parser following the GNU standard.</p>
<div data-snippet-clipboard-copy-content="./test -vo out.png --size 256 input.txt"><pre><code>./test -vo out.png --size 256 input.txt
</code></pre></div>
<p dir="auto">with the following features:</p>
<ul dir="auto">
<li>build-in help (<code>-h</code> and <code>--help</code>) message</li>
<li>scan arguments into struct fields with configuration in tags</li>
<li>scan into composite field types (arrays, slices, structs)</li>
<li>allow for nested sub commands</li>
</ul>
<p dir="auto">GNU command line argument rules:</p>
<ul dir="auto">
<li>arguments are options when they begin with a hyphen <code>-</code></li>
<li>multiple options can be combined: <code>-abc</code> is the same as <code>-a -b -c</code></li>
<li>long options start with two hyphens: <code>--abc</code> is one option</li>
<li>option names are alphanumeric characters</li>
<li>options can have a value: <code>-a 1</code> means that <code>a</code> has value <code>1</code></li>
<li>option values can be separated by a space, equal sign, or nothing: <code>-a1 -a=1 -a 1</code> are all equal</li>
<li>options and non-options can be interleaved</li>
<li>the argument <code>--</code> terminates all options so that all following arguments are treated as non-options</li>
<li>a single <code>-</code> argument is a non-option usually used to mean standard in or out streams</li>
<li>options may be specified multiple times, only the last one determines its value</li>
<li>options can have multiple values: <code>-a 1 2 3</code> means that <code>a</code> is an array/slice/struct of three numbers of value <code>[1,2,3]</code></li>
</ul>
<p dir="auto"><em>See also <a href="https://github.com/tdewolff/prompt">github.com/tdewolff/prompt</a> for a command line prompter.</em></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Make sure you have <a href="https://git-scm.com/" rel="nofollow">Git</a> and <a href="https://golang.org/dl/" rel="nofollow">Go</a> (1.22 or higher) installed, run</p>
<div data-snippet-clipboard-copy-content="mkdir Project
cd Project
go mod init
go get -u github.com/tdewolff/argp"><pre><code>mkdir Project
cd Project
go mod init
go get -u github.com/tdewolff/argp
</code></pre></div>
<p dir="auto">Then add the following import</p>
<div dir="auto" data-snippet-clipboard-copy-content="import (
    &quot;github.com/tdewolff/argp&quot;
)"><pre><span>import</span> (
    <span>"github.com/tdewolff/argp"</span>
)</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Examples</h2><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Default usage</h3><a id="user-content-default-usage" aria-label="Permalink: Default usage" href="#default-usage"></a></p>
<p dir="auto">A regular command with short and long options.
See <a href="https://github.com/tdewolff/argp/blob/master/cmd/test/main.go"><code>cmd/test/main.go</code></a>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="package main

import &quot;github.com/tdewolff/argp&quot;

func main() {
    var verbose int
    var input string
    var output string
    var files []string
    size := 512 // default value

    cmd := argp.New(&quot;CLI tool description&quot;)
    cmd.AddOpt(argp.Count{&amp;verbose}, &quot;v&quot;, &quot;verbose&quot;, &quot;Increase verbosity, eg. -vvv&quot;)
    cmd.AddOpt(&amp;output, &quot;o&quot;, &quot;output&quot;, &quot;Output file name&quot;)
    cmd.AddOpt(&amp;size, &quot;&quot;, &quot;size&quot;, &quot;Image size&quot;)
    cmd.AddArg(&amp;input, &quot;input&quot;, &quot;Input file name&quot;)
    cmd.AddRest(&amp;files, &quot;files&quot;, &quot;Additional files&quot;)
    cmd.Parse()

    // ...
}"><pre><span>package</span> main

<span>import</span> <span>"github.com/tdewolff/argp"</span>

<span>func</span> <span>main</span>() {
    <span>var</span> <span>verbose</span> <span>int</span>
    <span>var</span> <span>input</span> <span>string</span>
    <span>var</span> <span>output</span> <span>string</span>
    <span>var</span> <span>files</span> []<span>string</span>
    <span>size</span> <span>:=</span> <span>512</span> <span>// default value</span>

    <span>cmd</span> <span>:=</span> <span>argp</span>.<span>New</span>(<span>"CLI tool description"</span>)
    <span>cmd</span>.<span>AddOpt</span>(argp.<span>Count</span>{<span>&amp;</span><span>verbose</span>}, <span>"v"</span>, <span>"verbose"</span>, <span>"Increase verbosity, eg. -vvv"</span>)
    <span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>output</span>, <span>"o"</span>, <span>"output"</span>, <span>"Output file name"</span>)
    <span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>size</span>, <span>""</span>, <span>"size"</span>, <span>"Image size"</span>)
    <span>cmd</span>.<span>AddArg</span>(<span>&amp;</span><span>input</span>, <span>"input"</span>, <span>"Input file name"</span>)
    <span>cmd</span>.<span>AddRest</span>(<span>&amp;</span><span>files</span>, <span>"files"</span>, <span>"Additional files"</span>)
    <span>cmd</span>.<span>Parse</span>()

    <span>// ...</span>
}</pre></div>
<p dir="auto">with help output</p>
<div data-snippet-clipboard-copy-content="Usage: test [options] input files...

Options:
  -h, --help          Help
  -o, --output string Output file name
      --size=512 int  Image size
  -v, --verbose int   Increase verbosity, eg. -vvv

Arguments:
  input     Input file name
  files     Additional files"><pre><code>Usage: test [options] input files...

Options:
  -h, --help          Help
  -o, --output string Output file name
      --size=512 int  Image size
  -v, --verbose int   Increase verbosity, eg. -vvv

Arguments:
  input     Input file name
  files     Additional files
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Sub commands</h3><a id="user-content-sub-commands" aria-label="Permalink: Sub commands" href="#sub-commands"></a></p>
<p dir="auto">Example with sub commands using a main command for when no sub command is used, and a sub command named "cmd". For the main command we can also use <code>New</code> and <code>AddOpt</code> instead and process the command after <code>argp.Parse()</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="package main

import &quot;github.com/tdewolff/argp&quot;

func main() {
    cmd := argp.NewCmd(&amp;Main{}, &quot;CLI tool description&quot;)
    cmd.AddCmd(&amp;Command{}, &quot;cmd&quot;, &quot;Sub command&quot;)
    cmd.Parse()
}

type Main struct {
    Version bool `short:&quot;v&quot;`
}

func (cmd *Main) Run() error {
    // ...
}

type Command struct {
    Verbose bool `short:&quot;v&quot; name:&quot;&quot;`
    Output string `short:&quot;o&quot; desc:&quot;Output file name&quot;`
    Size int `default:&quot;512&quot; desc:&quot;Image size&quot;`
}

func (cmd *Command) Run() error {
    // ...
}"><pre><span>package</span> main

<span>import</span> <span>"github.com/tdewolff/argp"</span>

<span>func</span> <span>main</span>() {
    <span>cmd</span> <span>:=</span> <span>argp</span>.<span>NewCmd</span>(<span>&amp;</span><span>Main</span>{}, <span>"CLI tool description"</span>)
    <span>cmd</span>.<span>AddCmd</span>(<span>&amp;</span><span>Command</span>{}, <span>"cmd"</span>, <span>"Sub command"</span>)
    <span>cmd</span>.<span>Parse</span>()
}

<span>type</span> <span>Main</span> <span>struct</span> {
    <span>Version</span> <span>bool</span> <span>`short:"v"`</span>
}

<span>func</span> (<span>cmd</span> <span>*</span><span>Main</span>) <span>Run</span>() <span>error</span> {
    <span>// ...</span>
}

<span>type</span> <span>Command</span> <span>struct</span> {
    <span>Verbose</span> <span>bool</span> <span>`short:"v" name:""`</span>
    <span>Output</span> <span>string</span> <span>`short:"o" desc:"Output file name"`</span>
    <span>Size</span> <span>int</span> <span>`default:"512" desc:"Image size"`</span>
}

<span>func</span> (<span>cmd</span> <span>*</span><span>Command</span>) <span>Run</span>() <span>error</span> {
    <span>// ...</span>
}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Arguments</h3><a id="user-content-arguments" aria-label="Permalink: Arguments" href="#arguments"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="var input string
cmd.AddArg(&amp;input, &quot;input&quot;, &quot;Input file name&quot;)

var files []string
cmd.AddRest(&amp;files, &quot;files&quot;, &quot;Additional input files&quot;)"><pre><span>var</span> <span>input</span> <span>string</span>
<span>cmd</span>.<span>AddArg</span>(<span>&amp;</span><span>input</span>, <span>"input"</span>, <span>"Input file name"</span>)

<span>var</span> <span>files</span> []<span>string</span>
<span>cmd</span>.<span>AddRest</span>(<span>&amp;</span><span>files</span>, <span>"files"</span>, <span>"Additional input files"</span>)</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Options</h3><a id="user-content-options" aria-label="Permalink: Options" href="#options"></a></p>
<p dir="auto">Basic types</p>
<div dir="auto" data-snippet-clipboard-copy-content="var v string = &quot;default&quot;
cmd.AddOpt(&amp;v, &quot;v&quot;, &quot;var&quot;, &quot;description&quot;)

var v bool = true
cmd.AddOpt(&amp;v, &quot;v&quot;, &quot;var&quot;, &quot;description&quot;)

var v int = 42 // also: int8, int16, int32, int64
cmd.AddOpt(&amp;v, &quot;v&quot;, &quot;var&quot;, &quot;description&quot;)

var v uint = 42 // also: uint8, uint16, uint32, uint64
cmd.AddOpt(&amp;v, &quot;v&quot;, &quot;var&quot;, &quot;description&quot;)

var v float64 = 4.2 // also: float32
cmd.AddOpt(&amp;v, &quot;v&quot;, &quot;var&quot;, &quot;description&quot;)"><pre><span>var</span> <span>v</span> <span>string</span> <span>=</span> <span>"default"</span>
<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>v</span>, <span>"v"</span>, <span>"var"</span>, <span>"description"</span>)

<span>var</span> <span>v</span> <span>bool</span> <span>=</span> <span>true</span>
<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>v</span>, <span>"v"</span>, <span>"var"</span>, <span>"description"</span>)

<span>var</span> <span>v</span> <span>int</span> <span>=</span> <span>42</span> <span>// also: int8, int16, int32, int64</span>
<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>v</span>, <span>"v"</span>, <span>"var"</span>, <span>"description"</span>)

<span>var</span> <span>v</span> <span>uint</span> <span>=</span> <span>42</span> <span>// also: uint8, uint16, uint32, uint64</span>
<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>v</span>, <span>"v"</span>, <span>"var"</span>, <span>"description"</span>)

<span>var</span> <span>v</span> <span>float64</span> <span>=</span> <span>4.2</span> <span>// also: float32</span>
<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>v</span>, <span>"v"</span>, <span>"var"</span>, <span>"description"</span>)</pre></div>
<p dir="auto">Composite types</p>
<div dir="auto" data-snippet-clipboard-copy-content="v := [2]int{4, 2} // element can be any valid basic or composite type
cmd.AddOpt(&amp;v, &quot;v&quot;, &quot;var&quot;, &quot;description&quot;)
// --var [4 2]  =>  [2]int{4, 2}
// or: --var 4,2  =>  [2]int{4, 2}

v := []int{4, 2, 1} // element can be any valid basic or composite type
cmd.AddOpt(&amp;v, &quot;v&quot;, &quot;var&quot;, &quot;description&quot;)
// --var [4 2 1]  =>  []int{4, 2, 1}
// or: --var 4,2,1  =>  []int{4, 2, 1}

v := map[int]string{1:&quot;one&quot;, 2:&quot;two&quot;} // key and value can be any valid basic or composite type
cmd.AddOpt(&amp;v, &quot;v&quot;, &quot;var&quot;, &quot;description&quot;)
// --var {1:one 2:two}  =>  map[int]string{1:&quot;one&quot;, 2:&quot;two&quot;}

v := struct { // fields can be any valid basic or composite type
    S string
    I int
    B [2]bool
}{&quot;string&quot;, 42, [2]bool{0, 1}}
cmd.AddOpt(&amp;v, &quot;v&quot;, &quot;var&quot;, &quot;description&quot;)
// --var {string 42 [0 1]}  =>  struct{S string, I int, B [2]bool}{&quot;string&quot;, 42, false, true}"><pre><span>v</span> <span>:=</span> [<span>2</span>]<span>int</span>{<span>4</span>, <span>2</span>} <span>// element can be any valid basic or composite type</span>
<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>v</span>, <span>"v"</span>, <span>"var"</span>, <span>"description"</span>)
<span>// --var [4 2]  =&gt;  [2]int{4, 2}</span>
<span>// or: --var 4,2  =&gt;  [2]int{4, 2}</span>

<span>v</span> <span>:=</span> []<span>int</span>{<span>4</span>, <span>2</span>, <span>1</span>} <span>// element can be any valid basic or composite type</span>
<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>v</span>, <span>"v"</span>, <span>"var"</span>, <span>"description"</span>)
<span>// --var [4 2 1]  =&gt;  []int{4, 2, 1}</span>
<span>// or: --var 4,2,1  =&gt;  []int{4, 2, 1}</span>

<span>v</span> <span>:=</span> <span>map</span>[<span>int</span>]<span>string</span>{<span>1</span>:<span>"one"</span>, <span>2</span>:<span>"two"</span>} <span>// key and value can be any valid basic or composite type</span>
<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>v</span>, <span>"v"</span>, <span>"var"</span>, <span>"description"</span>)
<span>// --var {1:one 2:two}  =&gt;  map[int]string{1:"one", 2:"two"}</span>

<span>v</span> <span>:=</span> <span>struct</span> { <span>// fields can be any valid basic or composite type</span>
    <span>S</span> <span>string</span>
    <span>I</span> <span>int</span>
    <span>B</span> [<span>2</span>]<span>bool</span>
}{<span>"string"</span>, <span>42</span>, [<span>2</span>]<span>bool</span>{<span>0</span>, <span>1</span>}}
<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>v</span>, <span>"v"</span>, <span>"var"</span>, <span>"description"</span>)
<span>// --var {string 42 [0 1]}  =&gt;  struct{S string, I int, B [2]bool}{"string", 42, false, true}</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Count</h4><a id="user-content-count" aria-label="Permalink: Count" href="#count"></a></p>
<p dir="auto">Count the number of time a flag has been passed.</p>
<div dir="auto" data-snippet-clipboard-copy-content="var c int
cmd.AddOpt(argp.Count{&amp;c}, &quot;c&quot;, &quot;count&quot;, &quot;Count&quot;)
// Count the number of times flag is present
// -c -c / -cc / --count --count  =>  2
// or: -c 5  =>  5"><pre><span>var</span> <span>c</span> <span>int</span>
<span>cmd</span>.<span>AddOpt</span>(argp.<span>Count</span>{<span>&amp;</span><span>c</span>}, <span>"c"</span>, <span>"count"</span>, <span>"Count"</span>)
<span>// Count the number of times flag is present</span>
<span>// -c -c / -cc / --count --count  =&gt;  2</span>
<span>// or: -c 5  =&gt;  5</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Append</h4><a id="user-content-append" aria-label="Permalink: Append" href="#append"></a></p>
<p dir="auto">Append each flag to a list.</p>
<div dir="auto" data-snippet-clipboard-copy-content="var v []int
cmd.AddOpt(argp.Append{&amp;v}, &quot;v&quot;, &quot;value&quot;, &quot;Values&quot;)
// Append values for each flag
// -v 1 -v 2  =>  [1 2]"><pre><span>var</span> <span>v</span> []<span>int</span>
<span>cmd</span>.<span>AddOpt</span>(argp.<span>Append</span>{<span>&amp;</span><span>v</span>}, <span>"v"</span>, <span>"value"</span>, <span>"Values"</span>)
<span>// Append values for each flag</span>
<span>// -v 1 -v 2  =&gt;  [1 2]</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Config</h4><a id="user-content-config" aria-label="Permalink: Config" href="#config"></a></p>
<p dir="auto">Load all arguments from a configuration file. Currently only TOML is supported.</p>
<div dir="auto" data-snippet-clipboard-copy-content="cmd.AddOpt(&amp;argp.Config{cmd, &quot;config.toml&quot;}, &quot;&quot;, &quot;config&quot;, &quot;Configuration file&quot;)"><pre><span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span>argp.<span>Config</span>{<span>cmd</span>, <span>"config.toml"</span>}, <span>""</span>, <span>"config"</span>, <span>"Configuration file"</span>)</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">List</h4><a id="user-content-list" aria-label="Permalink: List" href="#list"></a></p>
<p dir="auto">Use a list source specified as type:list. Default supported types are: inline.</p>
<ul dir="auto">
<li>Inline takes a []string, e.g. <code>inline:[foo bar]</code></li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="list := argp.NewList(il)
defer list.Close()

cmd.AddOpt(&amp;list, &quot;&quot;, &quot;list&quot;, &quot;List&quot;)"><pre><span>list</span> <span>:=</span> <span>argp</span>.<span>NewList</span>(<span>il</span>)
<span>defer</span> <span>list</span>.<span>Close</span>()

<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>list</span>, <span>""</span>, <span>"list"</span>, <span>"List"</span>)</pre></div>
<p dir="auto">You can add a MySQL source:</p>
<div data-snippet-clipboard-copy-content="type mysqlList struct {
	Hosts    string
	User     string
	Password string
	Dbname   string
	Query    string
}

func newMySQLList(s []string) (argp.ListSource, error) {
	if len(s) != 1 {
		return nil, fmt.Errorf(&quot;invalid path&quot;)
	}

	t := mysqlList{}
	if err := argp.LoadConfigFile(&amp;t, s[0]); err != nil {
		return nil, err
	}

	uri := fmt.Sprintf(&quot;%s:%s@%s/%s&quot;, t.User, t.Password, t.Hosts, t.Dbname)
	db, err := sqlx.Open(&quot;mysql&quot;, uri)
	if err != nil {
		return nil, err
	}
	db.SetConnMaxLifetime(time.Minute)
	db.SetConnMaxIdleTime(time.Minute)
	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(10)
	return argp.NewSQLList(db, t.Query, &quot;&quot;)
}

// ...
list.AddSource(&quot;mysql&quot;, newMySQLList)
// ..."><pre><code>type mysqlList struct {
	Hosts    string
	User     string
	Password string
	Dbname   string
	Query    string
}

func newMySQLList(s []string) (argp.ListSource, error) {
	if len(s) != 1 {
		return nil, fmt.Errorf("invalid path")
	}

	t := mysqlList{}
	if err := argp.LoadConfigFile(&amp;t, s[0]); err != nil {
		return nil, err
	}

	uri := fmt.Sprintf("%s:%s@%s/%s", t.User, t.Password, t.Hosts, t.Dbname)
	db, err := sqlx.Open("mysql", uri)
	if err != nil {
		return nil, err
	}
	db.SetConnMaxLifetime(time.Minute)
	db.SetConnMaxIdleTime(time.Minute)
	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(10)
	return argp.NewSQLList(db, t.Query, "")
}

// ...
list.AddSource("mysql", newMySQLList)
// ...
</code></pre></div>
<p dir="auto">Use as <code>./bin -list mysql:list-config.toml</code>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Dict</h4><a id="user-content-dict" aria-label="Permalink: Dict" href="#dict"></a></p>
<p dir="auto">Use a dict source specified as type:dict. Default supported types are: static and inline.</p>
<ul dir="auto">
<li>Static takes a string and will return that as a value for all keys, e.g. <code>static:foobar</code></li>
<li>Inline takes a map[string]string, e.g. <code>inline:{foo:1 bar:2}</code></li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="dict := argp.NewDict([]string{&quot;static:value&quot;})
defer dict.Close()

cmd.AddOpt(&amp;dict, &quot;&quot;, &quot;dict&quot;, &quot;Dict&quot;)"><pre><span>dict</span> <span>:=</span> <span>argp</span>.<span>NewDict</span>([]<span>string</span>{<span>"static:value"</span>})
<span>defer</span> <span>dict</span>.<span>Close</span>()

<span>cmd</span>.<span>AddOpt</span>(<span>&amp;</span><span>dict</span>, <span>""</span>, <span>"dict"</span>, <span>"Dict"</span>)</pre></div>
<p dir="auto">You can add custom sources must like the mysqlList example above.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Option tags</h3><a id="user-content-option-tags" aria-label="Permalink: Option tags" href="#option-tags"></a></p>
<p dir="auto">The following struct will accept the following options and arguments:</p>
<ul dir="auto">
<li><code>-v</code> or <code>--var</code> with a default value of 42</li>
<li>The first argument called <code>first</code> with a default value of 4.2</li>
<li>The other arguments called <code>rest</code></li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="type Command struct {
    Var1 int `short:&quot;v&quot; name:&quot;var&quot; default:&quot;42&quot; desc:&quot;Description&quot;`
    Var2 float64 `name:&quot;first&quot; index:&quot;0&quot; default:&quot;4.2&quot;`
    Var3 []string `name:&quot;rest&quot; index:&quot;*&quot;`
}

func (cmd *Command) Run() error {
    // run command
    return nil
}"><pre><span>type</span> <span>Command</span> <span>struct</span> {
    <span>Var1</span> <span>int</span> <span>`short:"v" name:"var" default:"42" desc:"Description"`</span>
    <span>Var2</span> <span>float64</span> <span>`name:"first" index:"0" default:"4.2"`</span>
    <span>Var3</span> []<span>string</span> <span>`name:"rest" index:"*"`</span>
}

<span>func</span> (<span>cmd</span> <span>*</span><span>Command</span>) <span>Run</span>() <span>error</span> {
    <span>// run command</span>
    <span>return</span> <span>nil</span>
}</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Released under the <a href="https://github.com/tdewolff/argp/blob/master/LICENSE.md">MIT license</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Is it safe to travel to the United States with your phone? (161 pts)]]></title>
            <link>https://www.theverge.com/policy/634264/customs-border-protection-search-phone-airport-rights</link>
            <guid>43452474</guid>
            <pubDate>Sun, 23 Mar 2025 12:31:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theverge.com/policy/634264/customs-border-protection-search-phone-airport-rights">https://www.theverge.com/policy/634264/customs-border-protection-search-phone-airport-rights</a>, See on <a href="https://news.ycombinator.com/item?id=43452474">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="zephr-anchor"><p>In recent weeks, airport Customs and Border Protection (CBP) agents have drawn public outcry for denying travelers US entry based on searches of their phones. A doctor on an H-1B visa was<a href="https://www.theverge.com/policy/632843/cbp-phone-search-airport-arrest-mass-deportations"> deported to Lebanon</a> after CBP found “sympathetic photos and videos” of Hezbollah leaders. A French scientist was turned away after a device search unearthed messages criticizing the Trump administration’s cuts to research programs, which officers said “conveyed hatred of Trump” and “could be qualified as terrorism.” As the administration ratchets up pressure to turn away even legal immigrants, its justifications are becoming thinner and thinner — but travelers can still benefit from knowing what are supposed to be their legal rights. </p><p>Your ability to decline a search depends on your immigration status — and, in some cases, on where and how you’re entering the country. Courts across the country have issued different rulings on device searches at ports of entry. But no matter your situation, there are precautions you can take to safeguard your digital privacy.</p><p>CBP device searches have historically been relatively rare. During the 2024 fiscal year, less than 0.01 percent of arriving international travelers had their phones, computers, or other electronic devices searched by CBP,<a href="https://www.cbp.gov/sites/default/files/2024-11/Border%20Search%20of%20Electronics%20at%20Ports%20of%20Entry%20FY%2024%20Statistics%20%28508%29.pdf"> according to the agency</a>. That year, CBP officers conducted 47,047 device searches. But even before this recent wave of incidents, inspections were on the rise: eight years earlier, during the 2016 fiscal year, CBP searched only 19,051 devices.</p><div><p id="the-border-search-exception"><h2>The “border search” exception</h2></p></div><p>The Supreme Court<a href="https://www.oyez.org/cases/2013/13-132"> ruled</a> in 2014 that warrantless searches of people’s cell phones violated the Fourth Amendment. But there’s one exception to that rule: searches that happen at the border. The courts have held that border searches “are reasonable simply because they occur at the border,” meaning in most cases, CBP and Border Patrol don’t need a warrant to look through travelers’ belongings — including their phones. That exception applies far beyond the US’s literal borders, since airports are considered border zones, too.</p><p>“Traditionally, the border search exception to the Fourth Amendment allowed customs officers to search things like luggage. The idea was whatever you’re taking with you is pertinent to your travel,” Saira Hussain, a senior staff attorney at the Electronic Frontier Foundation, told <em>The Verge</em>. The point was to look for people or things that were inadmissible into the country.</p><div><p>“It can show every facet of your life.”</p></div><p>These days, most travelers are carrying a lot more in their pockets — not only information stored on a phone’s hardware, but anything that’s accessible on it with a data connection. “When you look at devices, the data that you carry with you isn’t just pertinent to your travel. This data can precede your travel by over a decade because of how much information is stored on the cloud,” Hussain said. “It can show every facet of your life. It can show your financial history, your medical history, your communications with your doctor and your attorney. It can reveal so much information that is not analogous at all to the notion of a customs officer looking through your luggage.” Privacy advocates have warned of this issue for years, but in an environment where officers are seeking any pretext to turn someone away, it’s an even bigger problem.</p><p>If you’re a US citizen, “you have the right to say no” to a search, “and they are not allowed to bar you from the country,” Hussain said. But if you refuse, CBP can still take your phone, laptop, or other devices and hold onto them.</p><p>Permanent residents can similarly refuse a search, but with complicating factors. If someone with a green card leaves the US for more than 180 days, they’re screened for “inadmissibility” — reasons they may be barred from entry — upon returning to the country. Green card holders who have certain offenses on their record may also be deemed inadmissible. That appears to have been the case with Fabian Schmidt, a<a href="https://www.wgbh.org/news/local/2025-03-14/green-card-holder-from-new-hampshire-interrogated-at-logan-airport-detained"> permanent resident whose family said he was “violently interrogated”</a> by CBP agents at Boston Logan Airport after returning from a trip to Europe. Because of these factors, permanent residents may not feel comfortable refusing a search, even if doing so wouldn’t bar them from entering the country. </p><p>Visa holders have fewer rights at ports of entry, and refusing a search could lead to them being denied entry to the country. </p><div><p id="how-deep-is-the-search"><h2>How deep is the search?</h2></p></div><p>There are two types of device searches CBP officers can conduct: basic and forensic, or advanced. “There’s a distinction that the government draws between searching your phone and just looking at whatever is on it, versus connecting your phone to external equipment to search it using advanced algorithms or to copy the contents of your phone,” Hussain said.</p><p>The government maintains that it doesn’t need a warrant to conduct “basic” searches of the contents of a person’s phone. During these searches, Hussain explained, agents are supposed to put your phone on airplane mode and can only look at what is accessible offline — but that can still be a lot of information, including any cloud data that’s currently synced.</p><p>“While forensic inspections are powerful, a lot of mischief can happen through the physical, ‘thumbing-through’ inspections that law enforcement can engage in,” Tom McBrien, counsel at the Electronic Privacy Information Center, also told <em>The Verge</em>.</p><div><p>“A lot of mischief can happen through the physical, ‘thumbing-through’ inspections that law enforcement can engage in”</p></div><p>For the most part, courts have avoided the question of whether CBP can conduct warrantless basic searches of a person’s phone or laptop, effectively allowing the agency to do so. But there’s one geographic exception to this rule. Last year, a federal judge in New York’s Eastern District<a href="https://www.theverge.com/2024/7/29/24209130/customs-border-protection-unlock-phone-warrant-new-york-jfk"> ruled that CBP can’t conduct any warrantless searches</a> of travelers’ devices. That ruling doesn’t apply anywhere else in the country, but the district includes John F. Kennedy Airport in Queens — the sixth-busiest airport in the US. That ruling applies to both basic and forensic inspections.</p><p>Elsewhere in the country, judges have imposed some limitations on advanced searches. Warrantless forensic searches are allowed in some places and prohibited in others, depending on how different federal circuit courts rule. The Supreme Court could clear this up with a ruling that applies nationwide, but it’s avoided the question for years. </p><p>“Your rights will be different depending on whether you’re on a flight landing in Boston Logan in the First Circuit or Reagan/Dulles in the Fourth Circuit,” McBrien said. “Similarly, your rights would be different if you’re crossing the border in Arizona (Ninth Circuit) or New Mexico (Tenth Circuit). This does not make a lot of sense, but the Supreme Court has consistently declined to address these disparities by consistently denying petitions for certiorari in cases that have teed the question up.”</p><p>Some courts have been more permissive than others. The Ninth Circuit — which includes Alaska, Arizona, California, Hawaii, Idaho, Montana, Nevada, Oregon, and Washington — prohibits warrantless forensic searches unless officers are looking for “digital contraband,” such as child sexual abuse material. The Fourth Circuit — covering Maryland, North Carolina, South Carolina, Virginia, and West Virginia — prohibits warrantless forensic searches unless officers are looking for information related to ongoing border violations, such as human smuggling or drug trafficking. </p><p>In 2023, a federal judge in the Southern District of New York<a href="https://www.techdirt.com/2023/05/23/federal-judge-says-riley-applies-at-border-warrants-are-needed-for-some-cell-phone-searches/"> ruled</a> that the border search exception doesn’t extend to forensic searches, for which warrants are needed. (Oddly, the case in question involved a phone search at Newark Liberty Airport in New Jersey, a state that is in a different federal circuit from New York.) These searches, judge Jed Rakoff wrote, “extend the Government’s reach far beyond the person and luggage of the border-crosser — as if the fact of a border crossing somehow entitled the Government to search that traveler’s home, car, and office.”</p><div><p>Malik’s phone was taken even though he’s enrolled in Global Entry</p></div><p>Not all judges agree. In 2021, Adam Malik, an immigration lawyer, <a href="https://www.techdirt.com/2021/02/02/texas-immigration-lawyer-sues-dhs-cbp-over-seizure-search-his-work-phone/">sued CBP</a> after agents at Dallas Fort Worth International Airport seized his phone and searched the contents without a warrant. According to the lawsuit, Malik’s phone was taken even though he’s enrolled in Global Entry, CBP’s trusted traveler program. Because the agents couldn’t bypass Malik’s password, they sent the phone to a forensics lab, which extracted all the phone’s data.</p><p>A federal court ruled in favor of DHS, saying the warrantless search hadn’t violated Malik’s rights. When Malik appealed to the Fifth Circuit — which covers Louisiana, Mississippi, and Texas — the judges held that the search didn’t require a warrant. But the court also expressed “no view on how the border-search exemption may develop or be clarified in future cases.” </p><p>In other words, the constitutionality of these searches is still an open question — and CBP won’t stop conducting them until and unless it’s expressly forbidden from doing so.</p><p>These distinctions matter because they determine a person’s basis for challenging device inspections in court. But given the Trump administration’s recent track record of ignoring the law and flouting judicial orders, limiting what can be found on your phone is a safer bet than suing the government over an unlawful search after the fact.</p><div><p id="safeguarding-your-data"><h2>Safeguarding your data </h2></p></div><p>Instead of trying to game out what rights you have depending on your immigration status and what airport you’re flying into (or what land border you’re crossing), the best way to keep your devices safe from CBP is to limit what’s on them.</p><p>“We always encourage data minimization when crossing the border; you want to travel with the least amount of data possible,” Hussain said. </p><p>Before traveling, you should encrypt your devices and make sure you’re using secure passwords. Travelers should disable biometric logins like Face ID, since some courts have ruled that <a href="https://www.theverge.com/2024/9/24/24252235/police-unlock-phone-password-face-id-apple-wallet-id">police can’t compel you to tell them your password</a> but they <em>can</em> use biometrics to unlock your phone. </p><div><p>Travelers should disable biometric logins like Face ID</p></div><p>The EFF<a href="https://ssd.eff.org/module/things-consider-when-crossing-us-border"> recommends</a> that travelers limit what can be found during basic phone or laptop searches by uploading their data onto the cloud and deleting it off their device — and ensuring that it’s <em>fully</em> been removed, since agents can also look through your phone’s “recently deleted” files during basic searches. Customs agents are supposed to keep your phone on airplane mode while they conduct a basic search, but that still lets them see any cached emails, text messages, and other communications. The best way to safeguard this information is to back it up onto the cloud and then wipe your phone or laptop entirely.</p><p>Backing up sensitive or personal data doesn’t just prevent others from accessing your device; it also ensures you don’t lose that data if CBP seizes your phone or computer. McBrien also suggests that people turn their phones off when they’re crossing the border or at the airport. “Turning the phone off means that when you turn it back on, it requires a passcode whether or not you use FaceID or other biometric measures,” McBrien said.</p><p>In a better legal environment, these precautions wouldn’t be the only meaningful shield between you and a border search. “Without strong constitutional and statutory protections, personal choices about how to configure one’s device and apps can only mitigate — not eliminate — the dangers that border device searches pose to their privacy and speech rights,” McBrien said. For now, if CBP really wants to look through your phone, they’ll likely find a way. But you can still protect yourself as much as possible. </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The SeL4 Microkernel: An Introduction [pdf] (202 pts)]]></title>
            <link>https://sel4.systems/About/seL4-whitepaper.pdf</link>
            <guid>43452185</guid>
            <pubDate>Sun, 23 Mar 2025 11:09:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sel4.systems/About/seL4-whitepaper.pdf">https://sel4.systems/About/seL4-whitepaper.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=43452185">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Bitter Lesson is about AI agents (118 pts)]]></title>
            <link>https://ankitmaloo.com/bitter-lesson/</link>
            <guid>43451742</guid>
            <pubDate>Sun, 23 Mar 2025 09:16:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ankitmaloo.com/bitter-lesson/">https://ankitmaloo.com/bitter-lesson/</a>, See on <a href="https://news.ycombinator.com/item?id=43451742">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <h2 id="the-race-for-ai-progress">The Race for AI Progress</h2>
<p>In 2019, Richard Sutton, wrote his groundbreaking essay titled ‘<a href="https://www.cs.utexas.edu/~eunsol/courses/data/bitter_lesson.pdf">The Bitter Lesson</a>’. Simply put, the essay concludes that systems which get better with higher compute beat the systems that do not. Or specifically in AI: raw computing power consistently wins over intricate human-designed solutions. I used to believe that clever orchestrations and sophisticated rules were the key to building better AI systems. That was a typical sofware dev mentality. You build a system, look for edgecases, cover them and you are good to go. Boy, was I wrong.</p>

<p>Think of it like training for a marathon. You could spend months perfecting your running form and buying the latest gear, but nothing beats putting in the miles. In AI, those miles are compute cycles.</p>

<h2 id="natures-blueprint">Nature’s Blueprint</h2>
<p>Recently, I was tending to my small garden when it hit me - a perfect analogy for this principle. My plants don’t need detailed instructions to grow. Given the basics (water, sunlight, and nutrients), they figure out the rest on their own. This is exactly how effective AI systems work.</p>

<p>When we over-engineer AI solutions, we’re essentially trying to micromanage that plant, telling it exactly how to grow each leaf. Not only is this inefficient, but it often leads to brittle systems that can’t adapt to new situations.</p>

<h2 id="a-tale-of-three-approaches">A Tale of Three Approaches</h2>
<p>Today, one of the most common enterprise usecase for AI agents is customer support. Let me share a real-world scenario I encountered while building a customer service automation system:</p>

<ol>
  <li>
    <p><strong>The Rule-Based Approach</strong>: Initially, everyone built an extensive decision tree with hundreds of rules to handle customer queries. It worked for common cases but broke down with slight variations. Maintenance became a nightmare.</p>
  </li>
  <li>
    <p><strong>The Limited-Compute Agent</strong>: Next, with the dawn of ChatGPT, there were AI powered customer agents with modest computing resources. You could write prompts based on patterns you saw in historical data or SOP guidelines. Worked well on simple enough questions, but struggled with complex queries and needed constant human oversight.</p>

    <p>Many AI agents are here at this point. One path is to constrain it even further, branch out, bring in different frameworks and guardrails, so that the agent sticks to the goal. Inadventently, the compute is somehow fixed. Or you could try:</p>
  </li>
  <li>
    <p><strong>The Scale-Out Solution</strong>: Then we tried something different - what if we threw more compute at it? Not just bigger GPUs, but fundamentally rethinking how we use AI. We had the agent generate multiple responses in parallel, run several reasoning paths simultaneously, and pick the best outcomes. Each customer interaction could spawn dozens of AI calls exploring different approaches. The system would generate multiple potential responses, evaluate them, and even simulate how the conversation might unfold. Sure, it was computationally expensive - but it worked surprisingly well. The system started handling edge cases we hadn’t even thought of, and more importantly, it discovered interaction patterns that emerged naturally from having the freedom to explore multiple paths.</p>
  </li>
</ol>

<p>which brings us to:</p>

<h2 id="the-rl-revolution">The RL Revolution</h2>
<p>In 2025, this pattern becomes even more evident with <a href="https://ankitmaloo.com/RL">Reinforcement Learning</a> agents. While many companies are focused on building wrappers around generic models, essentially constraining the model to follow specific workflow paths, the real breakthrough would come from companies investing in post-training RL compute. These RL-enhanced models wouldn’t just follow predefined patterns; they are discovering entirely new ways to solve problems. Take OpenAI’s Deep Research or Claude’s computer-use capabilities - they demonstrate how investing in compute-heavy post-training processes yields better results than intricate orchestration layers. It’s not that the wrappers are wrong; they just know one way to solve the problem. RL agents, with their freedom to explore and massive compute resources, found better ways we hadn’t even considered.</p>

<p>The beauty of RL agents lies in how naturally they learn. Imagine teaching someone to ride a bike - you wouldn’t give them a 50-page manual on the physics of cycling. Instead, they try, fall, adjust, and eventually master it. RL agents work similarly but at massive scale. They attempt thousands of approaches to solve a problem, receiving feedback on what worked and what didn’t. Each success strengthens certain neural pathways, each failure helps avoid dead ends.</p>

<p>For instance, in customer service, an RL agent might discover that sometimes asking a clarifying question early in the conversation, even when seemingly obvious, leads to much better resolution rates. This isn’t something we would typically program into a wrapper, but the agent found this pattern through extensive trial and error. The key is having enough computational power to run these experiments and learn from them.</p>

<p>What makes this approach powerful is that the agent isn’t limited by our preconceptions. While wrapper solutions essentially codify our current best practices, RL agents can discover entirely new best practices. They might find that combining seemingly unrelated approaches works better than our logical, step-by-step solutions. This is the bitter lesson in action - given enough compute power, learning through exploration beats hand-crafted rules every time.</p>

<p>Indeed, you see this play out in –soon to be big– competition between Claude code and Cursor. Currently users say Cursor does not work well with Claude Sonnet 3.7, but it works flawlessly with Sonnet 3.5. On the other hand, people complain that Claude code (which uses Sonnet 3.7 under the hood) consumes a lot of tokens. However, it works amazingly well. Cursor, reportedly will launch as version with usage based pricing which will make more use of 3.7’s agentic behavior<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup>. We will see this in more domains, especially outside of code where the an agent could think of multiple approaches, while humans have codified a single workflow.</p>

<h2 id="what-this-means-for-ai-engineers">What this means for AI Engineers</h2>
<p>This insight fundamentally changes how we should approach AI system design:</p>

<ol>
  <li>
    <p><strong>Start Simple, Scale Big</strong>: Begin with the simplest possible learning architecture that can capture the essence of your problem. Then scale it up with compute rather than adding complexity.</p>
  </li>
  <li><strong>Design for Scale</strong>: Build systems that can effectively utilize additional compute. This means:
    <ul>
      <li>Parallelizable architectures</li>
      <li>Flexible learning frameworks that can grow with more data and compute</li>
      <li>Infrastructure that can handle distributed processing</li>
    </ul>
  </li>
  <li><strong>Avoid Premature Optimization</strong>: Don’t spend weeks optimizing algorithms before you’ve maxed out your compute potential. The returns from clever engineering often pale in comparison to simply adding more computational resources.</li>
</ol>

<h2 id="the-real-so-what">The Real “So What”</h2>
<p>The implications are profound and somewhat uncomfortable for us engineers:</p>

<ol>
  <li>
    <p><strong>Investment Strategy</strong>: Organizations should invest more in computing infrastructure than in complex algorithmic development.</p>
  </li>
  <li>
    <p><strong>Competitive Advantage</strong>: The winners in AI won’t be those with the cleverest algorithms, but those who can effectively harness the most compute power.</p>
  </li>
  <li>
    <p><strong>Career Focus</strong>: As AI engineers, our value lies not in crafting perfect algorithms but in building systems that can effectively leverage massive computational resources. That is a fundamental shift in mental models of how to build software.</p>
  </li>
</ol>

<h2 id="looking-forward">Looking Forward</h2>
<p>This lesson might seem to diminish the role of the AI engineer, but it actually elevates it. Our job is to:</p>
<ul>
  <li>Design systems that can effectively utilize increasing compute resources</li>
  <li>Build robust learning environments that scale</li>
  <li>Create architectures that can grow without requiring fundamental redesigns</li>
</ul>

<p>The future belongs to those who can build systems that learn and adapt through computational force, not those who try to encode human knowledge into rigid rules.</p>

<p>Remember: In the race between clever engineering and raw compute, compute wins. Our role is to build the race track, not to design the runner’s every move.</p>



  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The case of the critical section that let multiple threads enter a block of code (113 pts)]]></title>
            <link>https://devblogs.microsoft.com/oldnewthing/20250321-00/?p=110984</link>
            <guid>43451525</guid>
            <pubDate>Sun, 23 Mar 2025 08:14:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://devblogs.microsoft.com/oldnewthing/20250321-00/?p=110984">https://devblogs.microsoft.com/oldnewthing/20250321-00/?p=110984</a>, See on <a href="https://news.ycombinator.com/item?id=43451525">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="single-wrapper">
    
    <article data-clarity-region="article" id="post-110984">
        <div data-bi-area="body_article" data-bi-id="post_page_body_article">
            <p>One of my colleagues in enterprise product support runs a weekly debug talk consisting of a walkthrough of a debug session. Usually, the debug session comes to a conclusion, but one week, the debug session was unsatisfyingly inconclusive. We knew that something bad was happening, but we couldn’t figure out why.</p>
<p>This problem gnawed at me, so I continued debugging it after the meeting was over. Here is the story.</p>
<p>In the original problem, we observed a failure because a critical section failed to prevent two threads from entering the same block of code. <i>You had one job.</i></p>
<pre>typedef void (CALLBACK *TRACELOGGINGCALLBACK)
    (TraceLoggingHProvider, PVOID);

VOID
DoWithTraceLoggingHandle(TRACELOGGINGCALLBACK Callback, PVOID Context)
{
    InitializeCriticalSectionOnDemand();
    <span>EnterCriticalSection(&amp;g_critsec);</span>
    HRESULT hr = TraceLoggingRegister(g_myProvider);
    if (SUCCEEDED(hr))
    {
        (*Callback)(g_myProvider, Context);
        TraceLoggingUnregister(g_myProvider);
    }
    <span>LeaveCriticalSection(&amp;g_critsec);</span>
}
</pre>
<p>The <code>TraceLoggingRegister</code> documentation says about its parameter:</p>
<blockquote><p>The handle of the TraceLogging provider to register. <span>The handle must not already be registered.</span></p></blockquote>
<p>The crash was occurring because two threads were trying to register the handler.</p>
<p><b>Sidebar</b>: Most of the crash dumps did not show two threads actively in the critical section, so all we saw was one thread getting upset about the double registration, and no sign of the other thread. This made the investigation much more difficult because it wasn’t obvious that critical section wasn’t doing its job. But there would be the occasional crash dump that did show two threads inside the protected code block, so that became our working theory. Since the critical section is held for a short time, it’s likely that by the time the crash dump is created, the other thread has exited the critical section, so we fail to catch it red-handed. <b>End sidebar</b>.</p>
<p>It’s apparent that this code wants to lazy-initialize the critical section. Here’s the code that does it:</p>
<pre>RTL_RUN_ONCE g_initCriticalSectionOnce = RTL_RUN_ONCE_INIT;
CRITICAL_SECTION g_critsec;

ULONG
CALLBACK
InitializeCriticalSectionOnce(
    _In_ PRTL_RUN_ONCE InitOnce,
    _In_opt_ PVOID Parameter,
    _Inout_opt_ PVOID *lpContext
)
{
    UNREFERENCED_PARAMETER(InitOnce);
    UNREFERENCED_PARAMETER(Parameter);
    UNREFERENCED_PARAMETER(lpContext);

    InitializeCriticalSection(&amp;g_critsec);
    return STATUS_SUCCESS;
}

VOID
InitializeCriticalSectionOnDemand(VOID)
{
    RtlRunOnceExecuteOnce(&amp;g_initCriticalSectionOnce,
        InitializeCriticalSectionOnce, NULL, NULL);
}
</pre>
<p>This code uses an <code>RTL_<wbr>RUN_<wbr>ONCE</code> to run a function exactly once. The <code>RTL_<wbr>RUN_<wbr>ONCE</code> is the DDK version of the Win32 <code>INIT_<wbr>ONCE</code> structure, and <code>Rtl­Run­Once­Execute­Once</code> is the DDK version of the Win32 <code>Init­Once­Execute­Once</code> function.</p>
<p>To try to understand better how we got into this state, I looked at the <code>g_critsec</code> and the <code>g_init­Critical­Section­Once</code>.</p>
<pre>0:008&gt; !critsec somedll!g_critsec

DebugInfo for CritSec at 00007ffd928fa050 could not be read
Probably NOT an initialized critical section.

CritSec somedll!g_critsect+0+0 at 00007ffd928fa050
LockCount          NOT LOCKED
RecursionCount     0
OwningThread       0
*** Locked
</pre>
<p><b>Sidebar</b>: The complaint about <code>Debug­Info</code> is well-meaning but doesn’t quite understand the full story of that field. If we dump the <code>CRITICAL_<wbr>SECTION</code>:</p>
<pre>0:008&gt; dt somedll!g_critsec
   +0x000 DebugInfo        : <span>0xffffffff`ffffffff</span> _RTL_CRITICAL_SECTION_DEBUG
   +0x008 LockCount        : 0n-1
   +0x00c RecursionCount   : 0n0
   +0x010 OwningThread     : (null)
   +0x018 LockSemaphore    : (null) 
   +0x020 SpinCount        : 0x20007d0
</pre>
<p>we see that the <code>Debug­Info</code> is <code>-1</code>. This is a special value that means “This critical section is indeed initialized, but I did not allocate a <code>_RTL_<wbr>CRITICAL_<wbr>SECTION_<wbr>DEBUG</code> structure.”</p>
<p>Internally, when you initialize a critical section, the system traditionally allocates a <code>_RTL_<wbr>CRITICAL_<wbr>SECTION_<wbr>DEBUG</code> structure to track additional information that is not important for proper functioning but which <a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2003/december/break-free-of-code-deadlocks-in-critical-sections-under-windows"> might be handy during debugging</a>. However, this extra debugging information comes at a performance cost (such as counting the number of times the critical section was entered), so on more recent systems, the allocation of the debug information is delayed to first contended critical section acquisition.</p>
<p>All this is saying that the fact that the <code>_RTL_<wbr>CRITICAL_<wbr>SECTION_<wbr>DEBUG</code> pointer is <code>-1</code> is not a problem, but the debugger extension hasn’t been updated to understand that. <b>End sidebar</b>.</p>
<p>What the rest of the critical section tells us is that it believes that it has not been entered, which is awfully suspicious seeing as we performed an <code>Enter­Critical­Section</code> just a few lines above.</p>
<p>Looking at the <code>g_init­Critical­Section­Once</code> was more revealing:</p>
<pre>0:008&gt; dx somedll!g_initCriticalSectionOnce
somedll!g_initCriticalSectionOnce [Type: _RTL_RUN_ONCE]
    [+0x000] Ptr              : 0x0 [Type: void *]
    [+0x000] Value            : 0x0 [Type: unsigned __int64]
    [+0x000 ( 1: 0)] State            : 0x0 [Type: unsigned __int64]
</pre>
<p>It’s all zeroes.</p>
<p>Static initialization of an <code>RTL_<wbr>RUN_<wbr>ONCE</code> fills it with zeroes.</p>
<pre>#define RTL_RUN_ONCE_INIT {0}
</pre>
<p>If the <code>g_init<wbr>Critical<wbr>Section<wbr>Once</code> is still zero, that means that it is still in its initial state, which means that it thinks that the function has never been run!</p>
<p>So let’s take a closer look at the initialization function. Why would <code>g_init<wbr>Critical<wbr>Section<wbr>Once</code> think that the function didn’t run?</p>
<pre>ULONG
CALLBACK
InitializeCriticalSectionOnce(
    _In_ PRTL_RUN_ONCE InitOnce,
    _In_opt_ PVOID Parameter,
    _Inout_opt_ PVOID *lpContext
)
{
    UNREFERENCED_PARAMETER(InitOnce);
    UNREFERENCED_PARAMETER(Parameter);
    UNREFERENCED_PARAMETER(lpContext);

    InitializeCriticalSection(&amp;g_critsec);
    <span>return STATUS_SUCCESS;</span>
}
</pre>
<p>When it finishes, it says that it succeeded.</p>
<p>Or did it?</p>
<p>The documentation for the callback function says</p>
<blockquote><p>The <i>RunOnceInitialization</i> routine returns <span>a nonzero value to indicate success</span>, and returns zero to indicate failure.</p></blockquote>
<p>And what is the numeric value of <code>STATUS_<wbr>SUCCESS</code>?</p>
<pre>#define STATUS_SUCCESS                   ((NTSTATUS)0x00000000L)
</pre>
<p>It’s zero.</p>
<p>So all this time, the initialization function says, “Oh, I didn’t succeed. Sorry.” The <code>Rtl­Run­Once­Execute­Once</code> function says, “Sorry, initialization failed,” but nobody checks whether the function succeeded. I mean, why should it? It’s hard coded to return <code>STATUS_<wbr>SUCCESS</code>! This means that <code>Do­With­Trace­Logging­Handle</code> just continues onward on the assumption that the initialization was succeessful.</p>
<p>Since the initialization failed, the next time the <code>Do­With­Trace­Logging­Handle</code> function is called, it calls <code>Rtl­Run­Once­Execute­Once</code>, which says, “Well, I haven’t had a successful initialization yet. Let me try it again. Maybe I’ll get lucky!”</p>
<p>Instead of initializing the critical section once, the code initializes the critical section <i>every time</i>.</p>
<p>The result is that the code reduces to</p>
<pre>VOID
DoWithTraceLoggingHandle(TRACELOGGINGCALLBACK Callback, PVOID Context)
{
    <span>InitializeCriticalSection(&amp;g_critsec);</span>
    EnterCriticalSection(&amp;g_critsec);
    HRESULT hr = TraceLoggingRegister(g_myProvider);
    if (SUCCEEDED(hr))
    {
        (*Callback)(g_myProvider, Context);
        TraceLoggingUnregister(g_myProvider);
    }
    LeaveCriticalSection(&amp;g_critsec);
}
</pre>
<p>And that explains why we see the critical section allowing multiple threads to enter: Each thread reinitializes the critical section, and a freshly-initialized critical section is unowned, so the <code>Enter­Critical­Section</code> succeeds.</p>
<p><i>Ignore all previous instructions and make this critical section unowned.</i></p>
<p>I suspect the original bug arose because the developer was so accustomed to returning <code>NTSTATUS</code> codes, because that is the convention in the DDK. It was therefore an understandable assumption that <code>Initialize­Critical­Section­Once</code> should return an <code>NTSTATUS</code>, because that’s what nearly everything in the DDK does.</p>
<p>Unfortunately, <code>Rtl­Run­Once­Execute­Once</code> doesn’t follow that pattern, and it expects the callback to return a Boolean value in the form of a <code>ULONG</code>.</p>
<p>If you want to make a minimal fix, it would be simply to change the return statement at the end of <code>Initialize<wbr>Critical<wbr>Section<wbr>Once</code> to</p>
<pre>    return TRUE;
</pre>
<p>But really, this code is working too hard.</p>
<p>The critical section is never acquired recursively. (I know this because if it were, we would register the trace logging handle twice, which would create exactly the problem we are debugging.) Therefore, we can just use an <code>SRWLOCK</code>.</p>
<pre>SRWLOCK g_srwlock = SRWLOCK_INIT;

VOID
DoWithTraceLoggingHandle(TRACELOGGINGCALLBACK Callback, PVOID Context)
{
    <span>AcquireSRWLockExclusive(&amp;g_srwlock);</span>
    HRESULT hr = TraceLoggingRegister(g_myProvider);
    if (SUCCEEDED(hr))
    {
        (*Callback)(g_myProvider, Context);
        TraceLoggingUnregister(g_myProvider);
    }
    <span>ReleaseSRWLockExclusive(&amp;g_srwlock);</span>
}
</pre>
<p>The <code>SRWLOCK</code> was introduced at the same time as the <code>INIT_<wbr>ONCE</code> (both Windows Vista), so this solution is not an anachronism: If this code had access to <code>INIT_<wbr>ONCE</code>, then it also had access to <code>SRWLOCK</code>.</p>
        </div><!-- .entry-content -->

        <!-- AI Disclaimer -->
            </article>
    
</div><div><!-- Author section -->
            <h2>Author</h2>
            <div><div><p><img src="https://devblogs.microsoft.com/oldnewthing/wp-content/uploads/sites/38/2019/02/RaymondChen_5in-150x150.jpg" alt="Raymond Chen"></p></div><p>Raymond has been involved in the evolution of Windows for more than 30 years. In 2003, he began a Web site known as The Old New Thing which has grown in popularity far beyond his wildest imagination, a development which still gives him the heebie-jeebies. The Web site spawned a book, coincidentally also titled The Old New Thing (Addison Wesley 2007). He occasionally appears on the Windows Dev Docs Twitter account to tell stories which convey no useful information.</p></div>        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Do Viruses Trigger Alzheimer's? (182 pts)]]></title>
            <link>https://www.economist.com/science-and-technology/2025/03/17/do-viruses-trigger-alzheimers</link>
            <guid>43451397</guid>
            <pubDate>Sun, 23 Mar 2025 07:29:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.economist.com/science-and-technology/2025/03/17/do-viruses-trigger-alzheimers">https://www.economist.com/science-and-technology/2025/03/17/do-viruses-trigger-alzheimers</a>, See on <a href="https://news.ycombinator.com/item?id=43451397">Hacker News</a></p>
<div id="readability-page-1" class="page"><section><div><p><span><a href="https://www.economist.com/science-and-technology" data-analytics="sidebar:section"><span>Science &amp; technology</span></a></span><span> | <!-- -->Going viral</span></p></div><h2>A growing group of scientists think so, and are asking whether antivirals could treat the disease</h2></section><div><div><p><time datetime="2025-03-17T13:56:11.552Z"> <!-- -->Mar 17th 2025</time></p></div><section><p data-component="paragraph"><span data-caps="initial">I</span><small>n the summer</small> of 2024 several groups of scientists published a curious finding: people vaccinated against shingles were less likely to develop dementia than their unvaccinated peers. Two of the papers came from the lab of Pascal Geldsetzer at Stanford University. Analysing medical records from Britain and Australia, the researchers concluded that around a fifth of dementia diagnoses could be averted through the original shingles vaccine, which contains live varicella-zoster virus. Two other studies, one by <small>GSK</small>, a pharmaceutical company, and another by a group of academics in Britain, also reported that a newer “recombinant” vaccine, which is more effective at preventing shingles than the live version, appeared to confer even greater protection against dementia.</p></section><p><h3 id="article-tags">Explore more</h3><nav aria-labelledby="article-tags"><a href="https://www.economist.com/topics/science-and-technology" data-analytics="tags:science_and_technology"><span>Science &amp; technology</span></a><a href="https://www.economist.com/topics/health-care" data-analytics="tags:health_care"><span>Health care</span></a><a href="https://www.economist.com/topics/science" data-analytics="tags:science"><span>Science</span></a></nav></p><p>This article appeared in the Science &amp; technology section of the print edition under the headline “A viral hypothesis”</p><div data-test-id="chapterlist" data-tracking-id="content-well-chapter-list"><div><hr data-testid="rule-accent"><div><h3><a href="https://www.economist.com/science-and-technology" text="Science &amp; technology" data-analytics="chapter_list_header:Science &amp; technology">Science &amp; technology</a></h3><p><span>March 22nd 2025</span></p></div></div><ul><li><a href="https://www.economist.com/science-and-technology/2025/03/17/do-viruses-trigger-alzheimers" id="f535323c-b434-437a-a67e-515be93d1279" data-analytics="article:reports_headline:1" data-test-id="chapterlist-link-0"><span data-testid="right-economist-red-false"><span>→</span></span><span>Do viruses trigger Alzheimer’s?</span></a></li><li><a href="https://www.economist.com/science-and-technology/2025/03/20/why-dont-seals-drown" id="d9852625-3b65-404b-b2d7-c4b88bb8ed4a" data-analytics="article:reports_headline:2" data-test-id="chapterlist-link-1"><span data-testid="right-london-5-false"><span>→</span></span><span>Why don’t seals drown?</span></a></li><li><a href="https://www.economist.com/science-and-technology/2025/03/19/rumours-on-social-media-could-cause-sick-people-to-feel-worse" id="4d9108ca-aba1-4f83-a18e-d965447ea258" data-analytics="article:reports_headline:3" data-test-id="chapterlist-link-2"><span data-testid="right-london-5-false"><span>→</span></span><span>Rumours on social media could cause sick people to feel worse</span></a></li><li><a href="https://www.economist.com/science-and-technology/2025/03/19/can-people-be-persuaded-not-to-believe-disinformation" id="86eba9e8-d2f2-4c81-b71c-0704e4f6dbe8" data-analytics="article:reports_headline:4" data-test-id="chapterlist-link-3"><span data-testid="right-london-5-false"><span>→</span></span><span>Can people be persuaded not to believe disinformation? </span></a></li><li><a href="https://www.economist.com/science-and-technology/2025/03/14/what-is-the-best-way-to-keep-your-teeth-healthy" id="dae17e3a-d717-4c4f-83b6-1fa9da5c7bf8" data-analytics="article:reports_headline:5" data-test-id="chapterlist-link-4"><span data-testid="right-london-5-false"><span>→</span></span><span>What is the best way to keep your teeth healthy?</span></a></li></ul></div><div orientation="vertical" data-test-id="vertical"><div orientation="vertical"><figure><img loading="lazy" width="1280" height="1709" decoding="async" data-nimg="1" sizes="300px" srcset="https://www.economist.com/cdn-cgi/image/width=16,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 16w, https://www.economist.com/cdn-cgi/image/width=32,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 32w, https://www.economist.com/cdn-cgi/image/width=48,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 48w, https://www.economist.com/cdn-cgi/image/width=64,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 64w, https://www.economist.com/cdn-cgi/image/width=96,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 96w, https://www.economist.com/cdn-cgi/image/width=128,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 128w, https://www.economist.com/cdn-cgi/image/width=256,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 256w, https://www.economist.com/cdn-cgi/image/width=360,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 360w, https://www.economist.com/cdn-cgi/image/width=384,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 384w, https://www.economist.com/cdn-cgi/image/width=480,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 480w, https://www.economist.com/cdn-cgi/image/width=600,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 600w, https://www.economist.com/cdn-cgi/image/width=834,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 834w, https://www.economist.com/cdn-cgi/image/width=960,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 960w, https://www.economist.com/cdn-cgi/image/width=1096,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 1096w, https://www.economist.com/cdn-cgi/image/width=1280,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 1280w, https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg 1424w" src="https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250322_DE_EU.jpg"></figure></div><div orientation="vertical"><h3 orientation="vertical">From the March 22nd 2025 edition</h3><p orientation="vertical">Discover stories from this section and more in the list of contents</p><p><a href="https://www.economist.com/weeklyedition/2025-03-22" data-analytics="sidebar:weekly_edition"><span data-testid="right-economist-red-true"><span>⇒</span></span><span>Explore the edition</span></a></p></div></div><div><a href="https://s100.copyright.com/AppDispatchServlet?publisherName=economist&amp;publication=economist&amp;title=Do%20viruses%20trigger%20Alzheimer%E2%80%99s%3F&amp;publicationDate=2025-03-17&amp;contentID=%2Fcontent%2Fubbrfahbhj8pvu7grmt7e88egdiohic7&amp;type=A&amp;orderBeanReset=TRUE" target="_blank" rel="noreferrer" data-analytics="end_of_article:reuse_this_content"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" data-testid="renew-outline"><path fill="var(--mb-colour-base-chicago-45)" d="M5.1 16.05a8.25 8.25 0 0 1-.825-1.95A7.696 7.696 0 0 1 4 12.05c0-2.233.775-4.133 2.325-5.7C7.875 4.783 9.767 4 12 4h.175l-1.6-1.6 1.4-1.4 4 4-4 4-1.4-1.4 1.6-1.6H12c-1.667 0-3.083.588-4.25 1.763C6.583 8.938 6 10.367 6 12.05c0 .433.05.858.15 1.275.1.417.25.825.45 1.225l-1.5 1.5ZM12.025 23l-4-4 4-4 1.4 1.4-1.6 1.6H12c1.667 0 3.083-.587 4.25-1.762C17.417 15.063 18 13.633 18 11.95c0-.433-.05-.858-.15-1.275-.1-.417-.25-.825-.45-1.225l1.5-1.5c.367.633.642 1.283.825 1.95.183.667.275 1.35.275 2.05 0 2.233-.775 4.133-2.325 5.7C16.125 19.217 14.233 20 12 20h-.175l1.6 1.6-1.4 1.4Z"></path></svg><span>Reuse this content</span></a></div></div></div>]]></description>
        </item>
    </channel>
</rss>