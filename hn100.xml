<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 20 Jan 2025 01:30:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[FrontierMath was funded by OpenAI (162 pts)]]></title>
            <link>https://www.lesswrong.com/posts/cu2E8wgmbdZbqeWqb/meemi-s-shortform</link>
            <guid>42763231</guid>
            <pubDate>Sun, 19 Jan 2025 23:27:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lesswrong.com/posts/cu2E8wgmbdZbqeWqb/meemi-s-shortform">https://www.lesswrong.com/posts/cu2E8wgmbdZbqeWqb/meemi-s-shortform</a>, See on <a href="https://news.ycombinator.com/item?id=42763231">Hacker News</a></p>
Couldn't get https://www.lesswrong.com/posts/cu2E8wgmbdZbqeWqb/meemi-s-shortform: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[It's time to make computing personal again (151 pts)]]></title>
            <link>https://www.vintagecomputing.com/index.php/archives/3292/the-pc-is-dead-its-time-to-make-computing-personal-again</link>
            <guid>42763095</guid>
            <pubDate>Sun, 19 Jan 2025 23:11:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.vintagecomputing.com/index.php/archives/3292/the-pc-is-dead-its-time-to-make-computing-personal-again">https://www.vintagecomputing.com/index.php/archives/3292/the-pc-is-dead-its-time-to-make-computing-personal-again</a>, See on <a href="https://news.ycombinator.com/item?id=42763095">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p><em>How surveillance capitalism and DRM turned home tech from friend to foe.</em></p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/choke_hero_4.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/choke_hero_4-450x253.jpg" alt="An illustration of Darth Vader choking someone on a retro TV set." width="450" height="253"></a></p>
<p>For a while—in the ’80s, ’90s, and early 2000s—it <a href="https://www2.itif.org/2017-why-so-sad.pdf">felt like</a> nerds were making the world a better place. Now, it feels like the most successful tech companies are making it worse.</p>
<p>Internet surveillance, the <a href="https://www.npr.org/2022/09/09/1121295499/facebook-twitter-youtube-instagram-tiktok-social-media">algorithmic polarization</a> of social media, <a href="http://<a href=" https:="" techcrunch.com="" 2018="" 10="" 15="" sneaky-subscriptions-are-plaguing-the-app-store="" "="">predatory app stores</a>, and extractive business models have eroded the freedoms the personal computer once promised, effectively ending the PC era for most tech consumers.</p>
<p>The “personal computer” was <a href="https://en.wikipedia.org/wiki/Computer_Lib/Dream_Machines">once a radical idea</a>—a computer an individual could own and control completely. The concept emerged in the early 1970s when microprocessors made it economical and practical for a person to own their very own computer, in contrast to the rise of data processing mainframes in the 1950s and 60s.</p>
<p>At its core, the PC movement was about a kind of tech liberty—–which I’ll define as the freedom to explore new ideas, control your own creative works, and make mistakes without punishment.</p>
<p>The personal computer era bloomed in the late 1970s and continued into the 1980s and 90s. But over the past decade in particular, the Internet and <a href="https://en.wikipedia.org/wiki/Digital_rights_management">digital rights management</a> (DRM) have been steadily pulling that control away from us and putting it into the hands of huge corporations. We need to take back control of our digital lives and make computing personal again.</p>
<p>Don’t get me wrong: I’m not calling the tech industry evil. I’m a huge fan of technology. The industry is full of great people, and this is not a personal attack on anyone. I just think runaway market forces and a handful of <a href="https://www.theatlantic.com/technology/archive/2013/03/the-copyright-rule-we-need-to-repeal-if-we-want-to-preserve-our-cultural-heritage/274049/">poorly-crafted US laws</a> like section 1201 of the DMCA have put all of us onto the wrong track (more on that below).</p>
<p>To some extent, tech companies were always predatory. To some extent, all companies are predatory. It’s a matter of degrees. But I believe there’s a fundamental truth that we’ve charted a deeply unhealthy path ahead with consumer technology at the moment.</p>
<p>Tech critic Ed Zitron calls this phenomenon “<a href="https://www.wheresyoured.at/the-rot-economy/">The Rot Economy</a>,” where companies are more obsessed with continuous growth than with providing useful products. “Our economy isn’t one that produces things to be used, but things that increase usage,” Zitron <a href="https://www.wheresyoured.at/the-anti-economy/">wrote</a> in another piece, bringing focus to ideas I’ve been mulling for the past half-decade.</p>
<p>This post started as a 2022 <a href="https://x.com/benjedwards/status/1541029918783311873">Twitter thread</a>, and I’ve offered to write editorials about my frustrations with increasingly predatory tech business practices since 2020 for my last two employers, but both declined to publish them. I understand why. These are uncomfortable truths to face. But if you love technology like I do, we have to accept what we’re doing wrong if we are going to make it better.</p>

<h3>Learning From the Past</h3>
<p>While consumer and computer tech today is more powerful than ever before—and in some ways far more convenient—some of the structural ways we used to interface with technology companies were arguably healthier in the past.</p>
<p>For example, which part of the Apple II was predatory? It promised productivity, education, and entertainment. You could program it yourself, <a href="https://www.howtogeek.com/809799/45-years-later-the-apple-ii-still-has-lessons-to-teach-us/">repair or expand it</a> without restriction. No subscriptions, <a href="https://arstechnica.com/information-technology/2022/08/a-new-jailbreak-for-john-deere-tractors-rides-the-right-to-repair-wave/">no hardware DRM</a> (though there was software <a href="https://www.vintagecomputing.com/index.php/archives/174/old-school-copy-protection-schemes">copy protection</a>), no tracking. No need for <a href="https://appleinsider.com/articles/22/03/08/apple-given-an-f-by-us-pirg-for-difficult-iphone-repairs">special tools</a> to repair it either. In fact, Apple <a href="https://mirrors.apple2.org.za/ftp.apple.asimov.net/documentation/hardware/io/Apple%20II%20Hobby%20and%20Prototyping%20Board%20Manual.pdf">openly encouraged</a> experimentation.</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/apple_II.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/apple_II-450x345.jpg" alt="A man in a kitchen using an Apple II from a 1977 advertisement." width="450" height="345"></a></p>
<p>Further, what percentage of your income had to go towards annual <a href="https://variety.com/2023/digital/news/apple-one-billion-paid-subscriptions-services-earnings-june-2023-1235686807/">software subscriptions</a> on a 20th century Windows PC (like this Sony VAIO)? You bought an application and you owned an indefinite license to use it. If there was an upgrade, you bought that too. And if you liked an older version of the software, you could keep using it without having it vanish in an automatic update.</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/sony_vaio2.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/sony_vaio2-450x339.jpg" alt="A Sony VAIO computer." width="450" height="339"></a></p>
<p>How many Nintendo Entertainment System games sustained themselves with <a href="https://appleinsider.com/articles/20/12/13/kid-spends-16k-on-in-app-purchases-for-ipad-game-sonic-forces">in-app purchases</a> and <a href="https://www.reddit.com/r/Games/comments/znpaau/i_worked_in_the_mobile_industry_for_10_years_loot/">microtransactions</a>? What more did the console ask of you after you bought a cartridge? Maybe to buy another one later if it was fun?</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/nesfamily_large_crop.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/nesfamily_large_crop-450x284.jpg" alt="An image from the NES box of a family playing the NES game console together." width="450" height="284"></a></p>
<p>Which part of this TV set kept track of everything you watched and then <a href="https://www.nytimes.com/2018/07/05/business/media/tv-viewer-tracking.html">secretly sold the data to advertisers</a>?</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/crt_tv_starwars.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/crt_tv_starwars-450x301.jpg" alt="A photo of Darth Vader choking someone on a retro TV set." width="450" height="301"></a></p>
<p>Which part of Windows 95 <a href="https://arstechnica.com/information-technology/2017/03/microsoft-put-gross-ads-in-windows-explorer-and-i-dont-have-the-energy-to-be-angry/">fed you ads</a> without your consent and <a href="https://www.extremetech.com/computing/342941-windows-11-collects-an-awful-lot-of-telemetry-about-your-pc">kept track of everything you did</a> remotely so Microsoft could <a href="https://www.zdnet.com/article/is-windows-10-telemetry-a-threat-to-your-personal-privacy/">keep stats</a> on it? And which part of <em>Solitaire</em> demanded a <a href="https://www.howtogeek.com/122145/what-happened-to-solitaire-and-minesweeper-in-windows-8/">monthly subscription</a> to play? (And which part <a href="https://arstechnica.com/gadgets/2024/05/microsofts-new-recall-feature-will-record-everything-you-do-on-your-pc/">attempted to record</a> literally everything you do on your computer?)</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/windows95_screen.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/windows95_screen-450x338.jpg" alt="A screenshot of Windows 95 with Solitaire on the screen." width="450" height="338"></a></p>
<p>Which part of Amazon.com in 2000 tried to get you to buy millions of <a href="https://nymag.com/intelligencer/2023/01/why-does-it-feel-like-amazon-is-making-itself-worse.html">no-name</a> <a href="https://www.nytimes.com/wirecutter/blog/amazon-counterfeit-fake-products/">counterfeit</a> and <a href="https://www.npr.org/2020/01/14/796296810/how-amazons-counterfeit-products-threaten-safety">dangerous</a> goods propped up by <a href="https://www.msn.com/en-us/news/technology/it-e2-80-99s-not-your-imagination-shopping-on-amazon-has-gotten-worse/ar-AA14sg4o">stealth advertising</a> and <a href="https://www.wired.com/story/how-to-spot-fake-reviews-amazon/">fake reviews</a>? In its early years, Amazon arguably succeeded through good selection, fair prices on reputable brands, and the wisdom of the crowd through <a href="https://www.google.com/books/edition/Marketing_on_the_Internet_and_the_implic/hRF9AQAAQBAJ?hl=en&amp;gbpv=1&amp;dq=amazon+customer+reviews&amp;pg=PA17&amp;printsec=frontcover">authentic customer reviews</a>.</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/amazon_2000.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/amazon_2000-450x266.jpg" alt="A screenshot of Amazon.com in 2000." width="450" height="266"></a></p>
<p>Which part of this Motorola StarTAC cellular phone kept track of your every move and <a href="https://www.zdnet.com/article/us-cell-carriers-selling-access-to-real-time-location-data/">sold the information</a>, behind your back, to private data brokers? And which part included <a href="https://www.consumerreports.org/consumer-rights/people-want-to-get-phones-appliances-fixed-but-often-cant-a1117945195/">sealed-in batteries</a> that would ruin the entire phone if they went bad?</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/motorola_startac.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/motorola_startac-450x250.jpg" alt="Photos of the Motorola StarTAC phone." width="450" height="250"></a></p>
<p>Which part of this BBS used automated algorithms that <a href="https://twitter.com/Bolverk15/status/1669045514472398849?s=20">intentionally fed</a> its users inflammatory and <a href="https://www.scientificamerican.com/article/information-overload-helps-fake-news-spread-and-social-media-knows-it/">false information</a> to <a href="https://time.com/6127981/addictive-algorithms-2022-facebook-instagram/">drive engagement</a> for profit? (The users themselves provided the flames.)</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/cave_bbs_screenshot.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/cave_bbs_screenshot-450x338.jpg" alt="A screenshot of The Cave BBS main menu." width="450" height="338"></a></p>
<p>Which part of Google in the 1990s and early 2000s blanketed its results with <a href="https://www.reddit.com/r/google/comments/yz3e85/google_shows_more_ads_than_results_now/">deceptive ads</a> or made you <a href="https://boingboing.net/2022/01/03/tip-add-reddit-to-search-queries-on-to-get-authentic-human-results-untainted-by-seo.html">add “Reddit”</a> to every search to get good results that weren’t overwhelmed by SEO-seeking filler content?</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/google_search_1998.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/google_search_1998-450x294.jpg" alt="A screenshot of Google Search in 1998." width="450" height="294"></a></p>
<p>Which part of this VHS tape disappeared or became unplayable if the publisher suddenly <a href="https://www.theguardian.com/tv-and-radio/2023/jun/28/why-are-movies-and-tv-shows-disappearing-from-streaming-services">decided</a> it didn’t like it anymore—or didn’t want to <a href="https://www.npr.org/2023/03/17/1164146728/why-are-dozens-of-tv-shows-disappearing-from-streaming-platforms-like-hbo-max">pay the writers and actors</a> residual fees?</p>
<p><a href="https://www.vintagecomputing.com/wp-content/uploads/2024/04/batman_tape_2.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/04/batman_tape_2-450x272.jpg" alt="A VHS tape that says &quot;Batman&quot; on it." width="450" height="272"></a></p>
<h2>The Extractive Model</h2>
<p><a href="https://en.wikipedia.org/wiki/Open-pit_mining#/media/File:Twincreeksblast.jpg"><img src="https://www.vintagecomputing.com/wp-content/uploads/2024/06/strip_mining.jpg" alt="Strip Mining Wikipedia photo by Geomartin" width="420"></a></p>
<p>Americans have allowed runaway business models, empowered by tech, to subvert privacy and individual liberty on the road to making money. Our default tech business model has become extractive, like part of a strip-mining operation. Consumers—and now <a href="https://arstechnica.com/information-technology/2022/09/have-ai-image-generators-assimilated-your-art-new-tool-lets-you-check/">creative works</a> (used for training AI)—are treated as a natural resource to be milked and exploited.</p>
<p>The extractive model may end up being self-destructive for the tech industry itself. In the physical world, resource extraction needs limits and regulations to be sustainable. It can be wildly profitable until a resource becomes over-harvested, or the harvesting process corrupts the environment that lets the industry exist in the first place.</p>
<p>There’s also the drive to lock consumers into an ecosystem, powered by DRM. You should buy tech products and get direct value fairly, not unleash a secret vampire to track you, manipulate you, and attempt to extract money from you forever. Just because companies have unlocked this “everything as a service” endless money hack does not mean they should do it.</p>
<p>And there’s another problem. Very soon, we might be <a href="https://www.fastcompany.com/90549441/how-to-prevent-deepfakes">threatening the continuity of history itself</a> with technologies that pollute the historical record with AI-generated noise. It sounds dramatic, but that could eventually undermine the shared cultural bonds that hold cultural groups together.</p>
<p>That’s important because history is what makes this type of criticism possible. History is how we know if we’re being abused because we can rely on written records of people who came before (even 15 minutes ago) and make comparisons. If technology takes history away from us, there may be no hope of recovery.</p>
<h2>How We Can Reclaim Control</h2>
<p><img src="https://www.vintagecomputing.com/wp-content/images/pcworld/ibm_pc_30_small.jpg" alt="Benj's IBM PC 5150"></p>
<p>Every generation <a href="https://twitter.com/paulisci/status/1669113362058444800?s=20">looks back</a> and says, “Things used to be better,” whether they are accurate or not.</p>
<p>But I’m not suggesting we live in the past. It is possible to learn from history and integrate the best of today’s technology with fair business practices that are more sustainable and healthy for everyone in the long run.</p>
<p>In the short term, we can do things like support open projects like Linux, support non-predatory and open source software, and run apps and store data locally as much as possible. But some bigger structural changes are necessary if we really want to launch the era of Personal Computer 2.0.</p>
<p>I’ve shown this editorial to friends, and some people felt that I did not emphasize the benefits of current technology enough. But I argue that my criticism is less about the actual technology and more about how we use it—and how companies make money from it.</p>
<p>Since I originally wrote my thoughts in a <a href="https://x.com/benjedwards/status/1541029918783311873?s=20">viral Twitter thread</a> in June 2022, others have expanded on these ideas with far more eloquence. Five months after my thread, Cory Doctorow wrote <a href="https://doctorow.medium.com/social-quitting-1ce85b67b456">his first</a> post on “enshittification,” a hallmark piece identifying a tendency for online platforms to decay over time.</p>
<p>A common thread between many of the issues hinted at above and in both Doctorow and Zitron’s work has been the rise of the ubiquitous Internet, which has allowed content owners and device makers to keep an eye on (and influence) consumer habits remotely, pulling our strings like puppeteers and putting a drip feed on our wallets.</p>
<p>Additionally, <a href="https://en.wikipedia.org/wiki/Anti-circumvention">section 1201</a> of the <a href="https://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act">DMCA</a> made it illegal to circumvent DRM, allowing manufacturers to lock down platforms in a way that challenges the traditional concept of ownership, enables predatory app stores, and <a href="https://www.theatlantic.com/technology/archive/2013/03/the-copyright-rule-we-need-to-repeal-if-we-want-to-preserve-our-cultural-heritage/274049/">threatens our cultural history</a>.</p>
<p>We need <a href="https://www.reuters.com/legal/legalindustry/us-data-privacy-laws-enter-new-era-2023-2023-01-12/">comprehensive privacy legislation</a> in the United States that enshrines individual privacy as a fundamental right. We need <a href="https://www.repair.org/stand-up">Right to Repair legislation</a> that puts control of our devices back into our hands—and also DRM reform, especially <a href="https://www.theatlantic.com/technology/archive/2013/03/the-copyright-rule-we-need-to-repeal-if-we-want-to-preserve-our-cultural-heritage/274049/">repealing Section 1201 of the DMCA</a> so we can control the goods we own and historians can preserve our cultural heritage without <a href="https://www.technologizer.com/2012/01/23/why-history-needs-software-piracy/">the need for piracy</a>.</p>
<p><a href="http://www.theatlantic.com/technology/archive/13/03/the-copyright-rule-we-need-to-repeal-if-we-want-to-preserve-our-cultural-heritage/274049/" target="_blank"><img src="https://www.vintagecomputing.com/wp-content/mickeymouse_small.jpg" alt="Mickey Mouse Copyright Blur"></a></p>
<p>Tech monopolies must be held to account, the outsized influence of some tech billionaires must be held in check, and competition must be allowed to thrive. We may also need to consider the protection of both consumers themselves and human-created works (including our history) as part of a conservation effort before extractive models permanently pollute our shared cultural resources.</p>
<p>The way the political winds are blowing right now in the US, significant legal reform seems unlikely for now. Things may need to get much worse before they get better. But the kind of extractive lock-in we’re seeing with technology is fundamentally incompatible with freedom in my opinion, so something needs to change if we still value the kind of personal liberty the PC once promised—that freedom to explore, create, and make mistakes without surveillance or punishment.</p>
<p>Sure, things will never be perfect in the United States. Profits will always be chased, and there will be collateral damage. And yes, some parts of technology today are better than ever (computing power, screen resolutions, and bandwidth to name a few).</p>
<p>The Internet has brought amazing things, including Wikipedia, The Internet Archive, multiplayer online gaming, <em>VC&amp;G</em>, and work-from-home jobs. But the urge to exploit users to the maximum extent through digital locks and surveillance should be held in check so that we can earnestly and honestly make the tech industry a beacon of optimism once more.</p>
<p>The stakes are higher now than they were in the 1970s. There is no “logging off,” nearly everyone has a smartphone in their pocket, and the digital world increasingly overlaps with every aspect of our lives. That means digital freedom is now equivalent to actual legal and personal freedom, and we must be allowed to control our own destinies.</p>
<p>Whether through purposeful reform or the eventual collapse of digital strip mining, I believe the personal computer will eventually rise again—–along with our chance to reclaim control of our digital lives.</p>
	
				
				

				<p>

Tags: <a href="https://www.vintagecomputing.com/index.php/archives/tag/apple-ii" rel="tag">Apple II</a>, <a href="https://www.vintagecomputing.com/index.php/archives/tag/benj-edwards" rel="tag">Benj Edwards</a>, <a href="https://www.vintagecomputing.com/index.php/archives/tag/cory-doctorow" rel="tag">Cory Doctorow</a>, <a href="https://www.vintagecomputing.com/index.php/archives/tag/drm" rel="tag">DRM</a>, <a href="https://www.vintagecomputing.com/index.php/archives/tag/ed-zitron" rel="tag">Ed Zitron</a>, <a href="https://www.vintagecomputing.com/index.php/archives/tag/privacy" rel="tag">privacy</a>, <a href="https://www.vintagecomputing.com/index.php/archives/tag/surveillance" rel="tag">surveillance</a>, <a href="https://www.vintagecomputing.com/index.php/archives/tag/tech-history" rel="tag">tech history</a>, <a href="https://www.vintagecomputing.com/index.php/archives/tag/technology" rel="tag">technology</a><br>
				</p>

				

				<p>
					<small>
						This entry was posted
						 
						on Friday, January 17th, 2025 at 8:17 pm						and is filed under <a href="https://www.vintagecomputing.com/index.php/archives/category/everything-else/news-current-events" rel="category tag">News &amp; Current Events</a>, <a href="https://www.vintagecomputing.com/index.php/archives/category/retrogaming" rel="category tag">Retrogaming</a>, <a href="https://www.vintagecomputing.com/index.php/archives/category/everything-else/technology-commentary" rel="category tag">Technology Commentary</a>, <a href="https://www.vintagecomputing.com/index.php/archives/category/computers" rel="category tag">Vintage Computing</a>.
						You can follow any responses to this entry through the <a href="https://www.vintagecomputing.com/index.php/archives/3292/the-pc-is-dead-its-time-to-make-computing-personal-again/feed">RSS 2.0</a> feed. 
						
													You can skip to the end and leave a response. Pinging is currently not allowed.
			
												
					</small>
				</p>
	
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Please don't force dark mode (201 pts)]]></title>
            <link>https://iamvishnu.com/posts/please-dont-force-dark-mode</link>
            <guid>42762054</guid>
            <pubDate>Sun, 19 Jan 2025 21:27:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://iamvishnu.com/posts/please-dont-force-dark-mode">https://iamvishnu.com/posts/please-dont-force-dark-mode</a>, See on <a href="https://news.ycombinator.com/item?id=42762054">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <blockquote>
  <p>Dear website designers,</p>

  <p>Please don’t force dark mode on your users. If dark mode is a characteristic of your brand, please ensure you choose a comfortable contrast ratio for the text.</p>
</blockquote>

<p>I regularly see many websites including personal blogs that are designed exclusively in dark mode. I find this incredibly frustrating as I can’t even read a single paragraph on these sites before my eyes start watering. While dark mode can be beneficial on some occasions, forcing it on users is a terrible user experience.</p>

<h2 id="my-eyes-my-eyes-">My Eyes! My Eyes! 😵‍💫</h2>

<p>Reading in dark mode doesn’t just mess with my eyes while I’m at it — it sticks around afterward too. Every time I finish a long article, I end up seeing horizontal stripes everywhere I look, like my eyes just won’t let it go.</p>

<p><strong>This is what my eyes see before reading a dark-mode article:</strong>
<img src="https://iamvishnu.com/images/dark-mode/before-reading-dark-mode.jpeg" alt="what I see before reading dark mode - a normal sight"></p>

<p><strong>And this is what my eyes see after reading a full-length dark-mode article:</strong>
<img src="https://iamvishnu.com/images/dark-mode/after-reading-dark-mode.jpeg" alt="what I see after reading in dark mode - full of horizontal stripes everywhere for a considerable amount of time"></p>

<h2 id="whats-the-real-problem-with-the-dark-mode">What’s the real problem with the dark mode?</h2>

<p>The real problem is the <strong>contrast ratio</strong> between the text and the background when using dark mode.</p>

<p>For example, pure white text on a pitch black background can strain my eyes and be very difficult to read. The contrast ratio of this combination is <strong>21:1.</strong> Here’s an example paragraph:</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>

<p>However, light gray text on a dark gray background is easy on my eyes. Here the background is <code>#666</code> and the text is <code>#E0E0E0</code> which creates a contrast ratio of <strong>4.34:1</strong>.</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>

<p>In summary, higher contrast ratios in dark mode cause discomfort for my eyes. But when I say ‘higher’, just how high can it go?</p>

<h2 id="isnt-there-a-guidelines-for-this">Isn’t there a guidelines for this?</h2>

<p>The Web Content Accessibility Guidelines (WCAG) version 2.1 recommends a <strong>minimum</strong> contrast ratio of <strong>4.5:1</strong> for normal texts <a href="https://www.w3.org/TR/WCAG21/#contrast-minimum">(SC 1.4.3)</a> <strong>but not a maximum.</strong> The current guidelines makes pure white text on pitch black background completely accessible, even if the contrast ratio is an unbearable 21:1. But the more comfortable contrast ratio of 4.34:1 from the above example fails according to the guidelines. That means, currently, there are no standards or guidelines that address contrast ratios in dark mode.</p>

<p>Upcoming WCAG 3.0 adds a new exploratory requirement for <a href="https://www.w3.org/TR/wcag-3.0/#maximum-text-contrast">“Maximum text contrast”</a> and I hope the working committee will address the issue of high contrast text in dark mode and provide suitable recommendations.</p>

<p>Until then, if I must read an important article that forces dark mode, I will use the browser’s developer tools to override the CSS and invert the colors until a better solution is available. I don’t want to use a plugin just for this.</p>

<hr>

<p>That being said, I absolutely enjoy dark mode when…:</p>
<ul>
  <li>…reading on an OLED screen in a unlit room, for example reading articles on my phone before bedtime. Dark mode works best on LED-type displays when used in dark environments.</li>
  <li>…writing code. Almost every IDE has a dark mode with very comfortable contrast ratio out of the box.</li>
  <li>…the website has comfortable contrast ratio in the dark mode.</li>
</ul>


  </div>

</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Escape the walled garden and algorithm black boxes with RSS feeds (226 pts)]]></title>
            <link>https://www.johnwalker.nl/posts/escape-the-walled-garden-with-rss</link>
            <guid>42761219</guid>
            <pubDate>Sun, 19 Jan 2025 20:07:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.johnwalker.nl/posts/escape-the-walled-garden-with-rss">https://www.johnwalker.nl/posts/escape-the-walled-garden-with-rss</a>, See on <a href="https://news.ycombinator.com/item?id=42761219">Hacker News</a></p>
Couldn't get https://www.johnwalker.nl/posts/escape-the-walled-garden-with-rss: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Why is Git Autocorrect too fast for Formula One drivers? (168 pts)]]></title>
            <link>https://blog.gitbutler.com/why-is-git-autocorrect-too-fast-for-formula-one-drivers/</link>
            <guid>42760620</guid>
            <pubDate>Sun, 19 Jan 2025 19:20:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.gitbutler.com/why-is-git-autocorrect-too-fast-for-formula-one-drivers/">https://blog.gitbutler.com/why-is-git-autocorrect-too-fast-for-formula-one-drivers/</a>, See on <a href="https://news.ycombinator.com/item?id=42760620">Hacker News</a></p>
Couldn't get https://blog.gitbutler.com/why-is-git-autocorrect-too-fast-for-formula-one-drivers/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Using your Apple device as an access card in unsupported systems (153 pts)]]></title>
            <link>https://github.com/kormax/apple-device-as-access-card</link>
            <guid>42759557</guid>
            <pubDate>Sun, 19 Jan 2025 18:01:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/kormax/apple-device-as-access-card">https://github.com/kormax/apple-device-as-access-card</a>, See on <a href="https://news.ycombinator.com/item?id=42759557">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Using your Apple device as an access card in unsupported systems</h2><a id="user-content-using-your-apple-device-as-an-access-card-in-unsupported-systems" aria-label="Permalink: Using your Apple device as an access card in unsupported systems" href="#using-your-apple-device-as-an-access-card-in-unsupported-systems"></a></p>
<p dir="auto">
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/IPHONE.STATIC.UID.DEMO.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/IPHONE.STATIC.UID.DEMO.webp" alt="![Static UID demo]" width="250px"></a>
</p>  
<sub> Pay attention to the UID value </sub>
<p dir="auto"><h2 tabindex="-1" dir="auto">Overview</h2><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">This repository describes general status on the topic and a possible solution to allow you to use your device as an access card in UID-based access systems (<strong>without cloning, consent on behalf of maintainer will be required</strong>).<br>
In case you've already tried researching this topic, feel free to skip the <strong>Introduction</strong> section straight to <strong>The Solution</strong>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Introduction</h2><a id="user-content-introduction" aria-label="Permalink: Introduction" href="#introduction"></a></p>
<p dir="auto">Many people have been beating their heads against the wall trying to use their Apple device as an access card.</p>
<p dir="auto">Sadly, due to closed NFC and Wallet ecosystem, such a thing is not possibe to do on your own without any explicit support on the behalf of Apple and access system provider.<br>
Thankfuly, as of now this market request is starting to be fulfilled by the likes of Google, Apple with cooperation of access system manufacturers and providers like HID, Brivo, Salto, WaveLynx, Nedap, Kisi, Assa Abloy, but ubiquitous support is far from reality, moreover those official solutions require manual approval, incur additional (in some cases absolutely cuckoo $$$) fees.</p>
<p dir="auto">The search for a potential bypass had lead some people into the topics of <a href="https://github.com/kormax/apple-vas">VAS</a>, <a href="http://github.com/kormax/apple-enhanced-contactless-polling">ECP</a> and HCE API (which actually exists in IOS, but is private, used by VAS), but those solutions don't work with existing reader infrastructures.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">The solution</h2><a id="user-content-the-solution" aria-label="Permalink: The solution" href="#the-solution"></a></p>
<p dir="auto">May be deemed more elegant than some people could expect.<br>
It lies in one of the Chinese transit card brands, called "China T-Union", that is officially supported by Apple Wallet.</p>
<p dir="auto">
<a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/WALLET.INFO.TUNION.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/WALLET.INFO.TUNION.webp" alt="![T-Union card in wallet]" width="250px"></a>
</p>  
<p dir="auto">At first look there's nothing special about this card type, it has the same charachteristics as any transit card in Wallet:</p>
<ul dir="auto">
<li>It has a viewable balance;</li>
<li>It has configurable express mode;</li>
<li>It can be freely moved between devices.</li>
</ul>
<p dir="auto">What makes this card powerful, lies in the way it changes how NFC behaves on your device when it's set as a default transit card:</p>
<ul dir="auto">
<li>Your device stops randomizing the UID on each tap;</li>
<li>Your device begins responding to all NFC readers as if they were express-transit enabled, just like on Android;</li>
<li>Also this card does not change its serial number and UID when moving to other devices, unlike most other ones.</li>
</ul>
<p dir="auto">All those properties are unique to this card type and cannot be replicated with any other card type, and coincidentally <strong>they make it ideal for usage in access systems that use the UID of the card as the only means of authentication</strong>.</p>
<p dir="auto">Now, it's time to talk about the downsides. This is a point that might break the hopes for a lot of people:</p>
<ul dir="auto">
<li>Thing is, UID-only authentication is deemed <strong>very unsecure</strong>, and thus is uncommon in real-life installations. Some installations allow UID auth in a fallback/compatability mode, which is more common.</li>
<li>You cannot control the UID of the card that will be generated for you, this means that you'll still need to ask permission of the system owner to add your UID into it, a chance of getting a collision would be too little and too expensive to verify.</li>
</ul>
<p dir="auto">Following systems are known to have UID-based authentication:</p>
<ul dir="auto">
<li><a href="https://wiki.ui.com/2-0/docs/ua-nfc-cards" rel="nofollow">UniFi Access</a> with the "UniFi Access Credentials Only" setting disabled;</li>
<li>[Needs expanding].</li>
</ul>
<p dir="auto">In case the stars align in your case, a next question would be how to aquire such a card. Next section tries to answer that question.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">The solution for solution</h2><a id="user-content-the-solution-for-solution" aria-label="Permalink: The solution for solution" href="#the-solution-for-solution"></a></p>
<p dir="auto">China T-Union cards are quite hard to get, as if you've tried adding one straight from Wallet, you've probably encountered an error message telling you that you have to have a Chinese UnionPay card. Emphasis on Chinese, as global variants aren't accepted too.</p>
<p dir="auto">To overcome this problem, you have to have following prerequisites:</p>
<ul dir="auto">
<li><a href="https://en.wikipedia.org/wiki/Biometric_passport" rel="nofollow">A Biometric travel document</a>;</li>
<li>A valid Mastercard or Visa.</li>
</ul>
<p dir="auto">(NOTE) Google says that many people are having issues with SMS verification, so this method might not be working now. In this case the only thing left is to wait for this issue to resolve.</p>
<p dir="auto">If you have everything, follow the next steps:</p>
<ol dir="auto">
<li>
<p dir="auto">Install the AliPay app;</p>
</li>
<li>
<p dir="auto">Register inside the AliPay app:</p>
<ul dir="auto">
<li>Verify your mobile phone;</li>
<li>When asked, set up the PIN. <strong>Warning</strong> it is very important not to forget any of the codes, as you'll irreversibly lose access to your account;</li>
</ul>
</li>
<li>
<p dir="auto">Verify your identity:</p>
<ol dir="auto">
<li>Select "Account" tab;</li>
<li>Tap on the profile avatar;</li>
<li>Select "My Namecard";</li>
<li>Press "Verify identity";</li>
<li>Choose "Complete verification".</li>
</ol>
<p dir="auto">After that, you'll be presented with a couple of possible age verification methods.<br>
Depending on your country one of them may work for you.</p>
 <p dir="auto">
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/ALIPAY.IDENTITY.VERIFICATION.SELECT.METHOD.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/ALIPAY.IDENTITY.VERIFICATION.SELECT.METHOD.webp" alt="![Age verification method selection]" width="200px"></a>
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/ALIPAY.IDENTITY.VERIFICATION.READ.DOCUMENT.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/ALIPAY.IDENTITY.VERIFICATION.READ.DOCUMENT.webp" alt="![Scanning a biometric pasport]" width="200px"></a>
 </p> 
 <sub>Thanks to @ihrapsa for providing images and directions for this step</sub>
</li>
<li>
<p dir="auto">On the main page, tap on a search bar, search for "NFC". An icon with "NFC" should appear, tap on it;</p>
 <p dir="auto">
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/ALIPAY.SEARCH.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/ALIPAY.SEARCH.webp" alt="![Searching for NFC in AliPay]" width="200px"></a>
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/ALIPAY.SEARCH.NFC.ENTRY.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/ALIPAY.SEARCH.NFC.ENTRY.webp" alt="![Searching for NFC in AliPay]" width="200px"></a>
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/ALIPAY.SEARCH.NFC.RESULTS.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/ALIPAY.SEARCH.NFC.RESULTS.webp" alt="![NFC search results in AliPay]" width="200px"></a>
 </p>  
</li>
<li>
<p dir="auto">Follow the onboarding screens. In case you're unsure about the UI elements, make a screenshot and feed it into a translator app;</p>
 <p dir="auto">
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/ALIPAY.NFC.ONBOARDING.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/ALIPAY.NFC.ONBOARDING.webp" alt="![Onboarding screen]" width="200px"></a>
 </p>  
</li>
<li>
<p dir="auto">When reaching the screen with card selection, choose any. Beware that some have different minimum topup amounts.</p>
 <p dir="auto">
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/ALIPAY.NFC.SELECTION.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/ALIPAY.NFC.SELECTION.webp" alt="![Selecting a card]" width="200px"></a>
 </p>  
</li>
<li>
<p dir="auto">After selection, choose topup amount, pay for a card. Go to the next screen;</p>
 <p dir="auto">
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/ALIPAY.NFC.PURCHASE.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/ALIPAY.NFC.PURCHASE.webp" alt="![Selecting a card]" width="200px"></a>
 </p>  
</li>
<li>
<p dir="auto">Apple Wallet UI should appear, inviting you to provision the new card. Follow the steps as usual.</p>
 <p dir="auto">
 <a target="_blank" rel="noopener noreferrer" href="https://github.com/kormax/apple-device-as-access-card/blob/main/assets/WALLET.PROVISIONING.TUNION.webp"><img src="https://github.com/kormax/apple-device-as-access-card/raw/main/assets/WALLET.PROVISIONING.TUNION.webp" alt="![Provisioning T-Union card into wallet]" width="250px"></a>
 </p>  
</li>
</ol>
<p dir="auto">Having done all these steps, you should have a magic card in your Wallet. Use as you see fit. Good luck!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Notes</h2><a id="user-content-notes" aria-label="Permalink: Notes" href="#notes"></a></p>
<ul dir="auto">
<li>If you find any mistakes/typos or have extra information to add, feel free to raise an issue or create a pull request.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">References</h2><a id="user-content-references" aria-label="Permalink: References" href="#references"></a></p>
<ul dir="auto">
<li>Resources that helped with research:
<ul dir="auto">
<li>Access systems that support the lifehack:
<ul dir="auto">
<li><a href="https://wiki.ui.com/2-0/docs/ua-nfc-cards" rel="nofollow">UniFi Access</a> - with the "UniFi Access Credentials Only" setting disabled;</li>
</ul>
</li>
<li>Officially supported access systems:
<ul dir="auto">
<li><a href="https://campaigns.hidglobal.com/employee-badge" rel="nofollow">HID</a>;</li>
<li><a href="https://www.brivo.com/applewallet/" rel="nofollow">Brivo</a>;</li>
<li><a href="https://www.wavelynxtech.com/credentials/apple-wallet" rel="nofollow">WaveLynx</a>;</li>
<li><a href="https://support.saltosystems.com/nebula/user-guide/keyholder/apple-wallet-keys/" rel="nofollow">Salto</a>;</li>
<li><a href="https://www.assaabloyglobalsolutions.com/en/hospitality-solutions/mobile-access-for-hospitality/apple-wallet" rel="nofollow">Assa Abloy</a>;</li>
<li><a href="https://www.nedapsecurity.com/news-blog/nedap-teams-up-with-apple-access-badge-in-apple-wallet-coming-soon/" rel="nofollow">Nedap</a>;</li>
<li><a href="https://www.getkisi.com/guides/apple-wallet-access" rel="nofollow">Kisi</a>.</li>
</ul>
</li>
<li>Other links:
<ul dir="auto">
<li><a href="https://en.wikipedia.org/wiki/Biometric_passport" rel="nofollow">Biometric documents</a>.</li>
</ul>
</li>
</ul>
</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[TikTok says it is restoring service for U.S. users (490 pts)]]></title>
            <link>https://www.nbcnews.com/tech/tech-news/tiktok-says-restoring-service-us-users-rcna188320</link>
            <guid>42759336</guid>
            <pubDate>Sun, 19 Jan 2025 17:42:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nbcnews.com/tech/tech-news/tiktok-says-restoring-service-us-users-rcna188320">https://www.nbcnews.com/tech/tech-news/tiktok-says-restoring-service-us-users-rcna188320</a>, See on <a href="https://news.ycombinator.com/item?id=42759336">Hacker News</a></p>
Couldn't get https://www.nbcnews.com/tech/tech-news/tiktok-says-restoring-service-us-users-rcna188320: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Lenovo has removed the TrackPoint nub from new ThinkPad laptops (103 pts)]]></title>
            <link>https://www.pcworld.com/article/2566195/lenovo-has-removed-its-iconic-trackpoint-nub-from-new-thinkpad-laptops.html</link>
            <guid>42758570</guid>
            <pubDate>Sun, 19 Jan 2025 16:39:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.pcworld.com/article/2566195/lenovo-has-removed-its-iconic-trackpoint-nub-from-new-thinkpad-laptops.html">https://www.pcworld.com/article/2566195/lenovo-has-removed-its-iconic-trackpoint-nub-from-new-thinkpad-laptops.html</a>, See on <a href="https://news.ycombinator.com/item?id=42758570">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="link_wrapped_content">




<p>For more than three decades, the TrackPoint’s iconic red rubbery nub has been a staple of IBM and Lenovo ThinkPad laptops. But now, no longer. Lenovo has removed its famous TrackPoint from its latest ThinkPad laptops, calling it time for a change.</p>



<p>Does that mean the TrackPoint is dead? No, thankfully. It will still appear in the other ThinkPads made by Lenovo, said a company spokesman. But for the 14- and 15-inch ThinkPad X9 Aura Editions launched at CES 2025 in Las Vegas, the TrackPoint has been removed entirely.</p>



<p>The idea is that certain laptops — let’s say the Dell XPS — have managed to transcend the consumer, prosumer, and small business markets, and the TrackPoint is a legacy design, according to Lenovo. “That doesn’t resonate with all demographics, so to speak,” said the company’s spokesman. “That was cutting-edge technology at one time. But clearly, it’s a touchpad world.”</p>



<p>In the past, Lenovo had defended the TrackPoint as a reason to avoid using the trackpad itself. The TrackPoint debuted with the IBM ThinkPad 700, which launched in 1992. Then, in a 2017 TechRadar <a href="https://go.skimresources.com/?id=111346X1569483&amp;xs=1&amp;url=https://www.techradar.com/news/why-the-thinkpad-trackpoint-still-a-thing-according-to-lenovos-chief-designer&amp;xcust=2-1-2566195-1-0-0-0-0&amp;sref=https://www.pcworld.com/article/2566195/lenovo-has-removed-its-iconic-trackpoint-nub-from-new-thinkpad-laptops.html" rel="nofollow" data-subtag="2-1-2566195-1-0-0-0-0" data-domain-name="techradar" target="_blank">interview</a>, Lenovo’s chief design officer David Hill described the TrackPoint as a way for a user to access a pointing device without the need for the user’s hands to leave the keyboard’s home row.</p>

		
			
			


<figure><p>
<iframe title="Is A ThinkPad A ThinkPad Without The Nub?" width="500" height="281" src="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" data-src="https://www.youtube.com/embed/nHIu-ezVKRs?feature=oembed"></iframe>
</p></figure>



<p>But he also foreshadowed Lenovo’s choice to remove the TrackPoint, too. “It’s a little bit like an automatic transmission versus a stick shift. If you know how to drive a stick, you don’t want an automatic transmission,” Hill said back then in the interview. “If you don’t drive a stick shift, you’re not going to buy a car that’s got one.”</p>



<h2 id="features-and-specs-for-lenovos-new-thinkpad-aura-editions">Features and specs for Lenovo’s new ThinkPad Aura Editions</h2>



<p>Lenovo’s new ThinkPad X9 14 Aura Edition ($1,399 and up, shipping in Feb. 2025) and the ThinkPad X9 15 Aura Edition ($1,549 and up, shipping in Feb. 2025 as well) are both laptops built around the vPro versions of the Intel Core Series 2 “Lunar Lake” mobile processor. Neither ships with discrete graphics, relying on Intel’s Arc Xe integrated GPU.</p>


<div><figure data-wp-context="{&quot;uploadedSrc&quot;:false,&quot;figureClassNames&quot;:&quot;wp-block-image size-large&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-2568494&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:&quot;none&quot;,&quot;targetHeight&quot;:&quot;none&quot;,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: Lenovo ThinkPad Aura 14&quot;,&quot;alt&quot;:&quot;Lenovo ThinkPad Aura 14&quot;}" data-wp-interactive="core/image"><img decoding="async" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://b2c-contenthub.com/wp-content/uploads/2025/01/20250105_132931.jpg?quality=50&amp;strip=all&amp;w=1200" alt="Lenovo ThinkPad Aura 14" width="1200" height="900" loading="lazy"></figure><p>Mark Hachman / IDG</p></div>



<p>However, it’s lovely to see that Lenovo is moving premium display technologies mainstream. The 14-inch offers a choice between a 1920×1200 400-nit 60Hz OLED or a 14-inch 2880×1800 500-nit 120Hz OLED. The 15-inch model offers just the latter option, with an average HDR600 capability on top. Up to 32GB of LPDDR5X memory and 2TB of a PCIe Gen 4 SSD are also included.</p>



<p>These are Thunderbolt 4 laptops with two ports, as Intel doesn’t offer integrated Thunderbolt 5 solutions quite yet. Underneath the laptop is what Lenovo calls an “engine hub” that houses the critical components, with the Thunderbolt ports sprouting from both sides. Lenovo says that this engine hub will be serviceable by a trained repairperson. Wi-Fi 7 is also included and the laptop is also MIL-SPEC 810H qualified.</p>


<div><figure data-wp-context="{&quot;uploadedSrc&quot;:false,&quot;figureClassNames&quot;:&quot;wp-block-image size-large&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-2566206&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:&quot;none&quot;,&quot;targetHeight&quot;:&quot;none&quot;,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: Lenovo ThinkPad X9 Aura Edition&quot;,&quot;alt&quot;:&quot;Lenovo ThinkPad X9 Aura Edition&quot;}" data-wp-interactive="core/image"><img decoding="async" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://b2c-contenthub.com/wp-content/uploads/2024/12/16_ThinkPad_x9_14_Front_facing_B_C_cover.png?w=1200" alt="Lenovo ThinkPad X9 Aura Edition" width="1200" height="1200" loading="lazy"></figure><p>Lenovo</p></div>



<p>Lenovo isn’t specifying battery life quite yet, though with a battery-sipping Lunar Lake processor inside, it should be fantastic. The 14-inch model includes a 55Wh customer-replaceable battery, for a total weight of 2.74 pounds. The 15-inch includes a whopping 80Wh battery, for a total weight of 3.19 pounds. Lenovo used over 50 percent recycled aluminum in the aluminum chassis and various levels of recaptured plastics in other components.</p>



<p>By contrast, the similar <a href="https://www.pcworld.com/article/2493146/asus-zenbook-s-14-review.html">Asus ZenBook S 14</a> includes a Lunar Lake processor alongside a 72Wh battery and a 14-inch 2880×1800 touchscreen 120Hz OLED, which yielded over 17 hours of simulated work in <a href="https://www.pcworld.com/article/2236466/how-we-test-laptops-pcworld.html">our laptop battery tests</a>.</p>



<h2 id="lenovos-ai-now-adds-smart-modes">Lenovo’s AI Now adds smart modes</h2>



<p>We’re always on the lookout for applications that can take advantage of localized AI. With the Aura Edition laptops, Lenovo has provided two sets of such features: the Lenovo Aura Edition features on the one hand, and what Lenovo is calling Lenovo AI Now on the other.</p>


<div><figure data-wp-context="{&quot;uploadedSrc&quot;:false,&quot;figureClassNames&quot;:&quot;wp-block-image size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-2566208&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:&quot;none&quot;,&quot;targetHeight&quot;:&quot;none&quot;,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: lenovo ces 2025 ai now &quot;,&quot;alt&quot;:&quot;lenovo ces 2025 ai now &quot;}" data-wp-interactive="core/image"><img decoding="async" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://b2c-contenthub.com/wp-content/uploads/2024/12/lenovo-ces-2025-ai-now_1.png" alt="lenovo ces 2025 ai now " width="720" height="500" loading="lazy"><figcaption>Lenovo’s AI Now offers both local and cloud-based AI.</figcaption></figure><p>Lenovo</p></div>



<p>Lenovo Aura Edition includes “smart modes” that allow users to switch between optimized device configurations like “Attention,” “Power,” and “Wellness.” They sound like they’re designed a bit like the optional Windows configurations, emphasizing entertainment, for example. Smart Care connects users to device diagnostics and 24/7 live agent support. Smart Share is a Lenovo-branded version of <a href="https://www.pcworld.com/article/2168557/intel-beefs-up-intel-unison-app-with-cross-platform-controls.html">Intel’s Unison technology</a> for sharing information between Android and iOS devices.</p>



<p>Lenovo AI Now is an optional LLM that’s based on Meta’s Llama 3.0, which processes all data locally using the <a href="https://www.pcworld.com/article/2457268/what-the-heck-is-an-npu-anyway-everything-you-need-to-know.html">integrated Lunar Lake NPU</a>. Lenovo also promises new features coming soon: multilingual support, searching across the PC as well as the tablet, plus improved capabilities to extract data from documents, images, or even portions of the two.</p>


<div><figure data-wp-context="{&quot;uploadedSrc&quot;:false,&quot;figureClassNames&quot;:&quot;wp-block-image size-large&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-2566209&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:&quot;none&quot;,&quot;targetHeight&quot;:&quot;none&quot;,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: 10 65W USB C Travel Dock Floating left&quot;,&quot;alt&quot;:&quot;10 65W USB C Travel Dock Floating left&quot;}" data-wp-interactive="core/image"><img decoding="async" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://b2c-contenthub.com/wp-content/uploads/2024/12/10_65W_USB_C_Travel_Dock_Floating_left.png?w=1200" alt="10 65W USB C Travel Dock Floating left" width="1200" height="1200" loading="lazy"><figcaption>Lenovo’s USB-C travel dock.</figcaption></figure><p>Lenovo</p></div>



<p>Lenovo also promises new peripherals to go along with the new laptops, including $49 TWS Earbuds (X9 Edition) with Bluetooth 5.3; a 65W GaN Nano Adapter; a $99 X9 Charging GaN Dock with a 4K60 HDMI port, SD card reader, and USB-A/C ports; and a $59.99 X9 Edition of a wireless mouse that includes a dedicated AI Now button. The earbuds and adapter are available now and the dock will ship in June 2025.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Build a tiny CA for your homelab with a Raspberry Pi (128 pts)]]></title>
            <link>https://smallstep.com/blog/build-a-tiny-ca-with-raspberry-pi-yubikey/</link>
            <guid>42758070</guid>
            <pubDate>Sun, 19 Jan 2025 15:50:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://smallstep.com/blog/build-a-tiny-ca-with-raspberry-pi-yubikey/">https://smallstep.com/blog/build-a-tiny-ca-with-raspberry-pi-yubikey/</a>, See on <a href="https://news.ycombinator.com/item?id=42758070">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><time datetime="{updatedAt}">Updated on: <!-- -->January 19, 2025</time><p><img src="https://smallstep.imgix.net/tiny_ca_4ab20bb2d1.png?auto=format%2Ccompress&amp;fit=max&amp;q=50" alt="tiny-ca.png"></p>
<p><strong>TL;DR</strong> In this tutorial, we're going to build a tiny, standalone, online Certificate Authority (CA) that will mint TLS certificates and is secured with a YubiKey. It will be an internal ACME server on our local network (ACME is the same protocol used by <a href="https://letsencrypt.org/" target="_blank" rel="nofollow noopener noreferrer">Let's Encrypt</a>). The YubiKey will securely store the CA private keys and sign certificates, acting as a cheap alternative to a Hardware Security Module (HSM). We'll also use an open-source True Random Number Generator, called <a href="https://www.crowdsupply.com/13-37/infinite-noise-trng/" target="_blank" rel="nofollow noopener noreferrer">Infinite Noise TRNG</a>, to spice up the Linux entropy pool.</p>

<ul>
<li>Because end-to-end TLS is great and you should easily be able to run TLS wherever you need it. Especially in your homelab. Internal networks are no longer perceived as a safe zone where unencrypted traffic is okay. But you need certificates.</li>
<li>Because TLS client authentication is becoming <a href="https://smallstep.com/hello-mtls" target="_blank" rel="nofollow noopener noreferrer">more widely supported in different services</a>, and it's a lot better than passwords. But you need certificates.</li>
<li>Because the ACME protocol (used by Let's Encrypt) can easily be deployed internally, so you can automate renewal and never have to think about your certificates.</li>
<li>Because maybe you've done the 'self-signed certificate' rigmarole with OpenSSL a dozen times already. Might as well formalize things and get your devices to trust a CA that you can use wherever you need it.</li>
<li>Because setting up a simple CA is a great learning experience.</li>
<li>Still not convinced? Spin up a free hosted homelab CA using our <a href="https://smallstep.com/certificate-manager" target="_blank" rel="nofollow noopener noreferrer">Certificate Manager offering</a> instead.</li>
</ul>
<h3 id="tiny-ca-specs">Tiny CA Specs<a href="#tiny-ca-specs"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<ul>
<li><a href="https://www.adafruit.com/product/4292" target="_blank" rel="nofollow noopener noreferrer">Raspberry Pi 4 Model B 2GB</a> + microSD card</li>
<li>Any YubiKey that supports the <a href="https://developers.yubico.com/yubico-piv-tool/YubiKey_PIV_introduction.html" target="_blank" rel="nofollow noopener noreferrer">Personal Identity Verification (PIV)</a> application, for CA signing operations.
I'm using a <a href="https://www.yubico.com/product/yubikey-5-nfc/" target="_blank" rel="nofollow noopener noreferrer">YubiKey 5 NFC</a>.</li>
<li>Optional: <a href="https://www.crowdsupply.com/13-37/infinite-noise-trng/" target="_blank" rel="nofollow noopener noreferrer">Infinite Noise TRNG</a> for outboard random number generation.</li>
<li>A USB thumb drive—or a second YubiKey—for storing an offline backup of our CA</li>
<li>We'll be running the <a href="https://github.com/smallstep/certificates" target="_blank" rel="nofollow noopener noreferrer"><code>step-ca</code></a> open-source online Certificate Authority.</li>
<li>Total cost: Around US$100</li>
</ul>
<h2 id="part-1-system-setup">Part 1: System Setup<a href="#part-1-system-setup"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h2>
<h3 id="basic-os--networking-setup">Basic OS &amp; Networking Setup<a href="#basic-os--networking-setup"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<ul>
<li>On your laptop, burn the <a href="https://cdimage.ubuntu.com/releases/22.10/release/" target="_blank" rel="nofollow noopener noreferrer">Ubuntu 22.10 Server</a> <a href="https://cdimage.ubuntu.com/releases/22.10/release/ubuntu-22.10-preinstalled-server-arm64+raspi.img.xz" target="_blank" rel="nofollow noopener noreferrer">64-bit ARM pre-installed server image</a> onto the microSD card using the <a href="https://www.raspberrypi.org/software/" target="_blank" rel="nofollow noopener noreferrer">Raspberry Pi Imager</a>.</li>
<li>Fire up the Raspberry Pi, plug it into your network, and find its initial IP address.
You can run <code>arp -na | grep -e "b8:27:eb" -e "dc:a6:32" -e "e4:5f:01"</code> to discover Raspberry Pi devices on the local network.</li>
<li>Login via SSH (username and password will be <code>ubuntu</code>), and change the password.</li>
<li>Set the hostname via <code>hostnamectl set-hostname tinyca</code></li>
<li>Set the timezone using <code>timedatectl set-timezone America/Los_Angeles</code> (or whatever your timezone is; <code>timedatectl list-timezones</code> will list them all)</li>
<li>Be sure NTP is working. Check status with <code>timedatectl</code>— make sure "NTP Service" is "active". If not, you can add some NTP servers to <code>/etc/systemd/timesyncd.conf</code> and run <code>systemctl restart systemd-timesyncd</code>.</li>
<li>You'll need the machine to have a DNS name (for me it's <code>tinyca.internal</code>) and/or a static IP on your network.</li>
</ul>
<p>Now that you have good time synchronization and a stable hostname, we can proceed.</p>
<h3 id="install-prerequisite-ykman">Install prerequisite: <code>ykman</code><a href="#install-prerequisite-ykman"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p>Now, insert your YubiKey. Let's install the <code>yubikey-manager</code> (and dependency <code>pcscd</code>) and make sure you can connect to the YubiKey:</p>
<pre><section><code><pre>$ sudo apt update
$ sudo apt install -y yubikey-manager
$ ykman info
Device type: YubiKey 5 NFC
Serial number: 13910388
Firmware version: 5.2.7
Form factor: Keychain (USB-A)
Enabled USB interfaces: OTP+FIDO+CCID
NFC interface is enabled.
</pre></code></section></pre>
<h3 id="install-prerequisite-go">Install prerequisite: Go<a href="#install-prerequisite-go"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p>You'll need Go in order to build the <code>step-ca</code> server.</p>
<pre><section><code><pre>$ cd
$ curl -LO https://go.dev/dl/go1.20.1.linux-arm64.tar.gz
$ sudo tar -C /usr/local -xzf go1.20.1.linux-arm64.tar.gz
$ echo "export PATH=\$PATH:/usr/local/go/bin" &gt;&gt; .profile
$ source .profile
$ go version
go version go1.20.1 linux/arm64
</pre></code></section></pre>
<h3 id="build-and-install-step-ca-and-step">Build and install <code>step-ca</code> and <code>step</code><a href="#build-and-install-step-ca-and-step"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p>You'll need to install both <code>step-ca</code> (the CA server software) and <code>step</code> (the command used to configure and control <code>step-ca</code>).</p>
<p>First, download <a href="https://github.com/smallstep/certificates/releases/latest" target="_blank" rel="nofollow noopener noreferrer">the source for <code>step-ca</code></a> and <a href="https://smallstep.com/docs/step-ca/configuration#yubikey" target="_blank" rel="nofollow noopener noreferrer">build it with experimental YubiKey support enabled</a>:</p>
<pre><section><code><pre>$ curl -LO https://github.com/smallstep/certificates/releases/download/v0.23.2/step-ca_0.23.2.tar.gz
$ mkdir step-ca
$ tar -xvzf step-ca_0.23.2.tar.gz -C step-ca
$ cd step-ca
</pre></code></section></pre>
<p>Now build <code>step-ca</code>. This will take some time on a Raspberry Pi, so be patient:</p>
<pre><section><code><pre>$ sudo apt-get install -y libpcsclite-dev gcc make pkg-config
$ make bootstrap
$ make build GOFLAGS=""
....
Build Complete!
$ sudo cp bin/step-ca /usr/local/bin
$ sudo setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/step-ca
$ step-ca version
Smallstep CA/0.23.2 (linux/arm64)
Release Date: 2023-02-16 22:25 UTC
</pre></code></section></pre>
<p>Now <a href="https://github.com/smallstep/cli/releases/latest" target="_blank" rel="nofollow noopener noreferrer">install <code>step</code></a> from a prebuilt binary:</p>
<pre><section><code><pre>$ cd
$ curl -LO https://github.com/smallstep/cli/releases/download/v0.23.2/step_linux_0.23.2_arm64.tar.gz
$ tar xvzf step_linux_0.23.2_arm64.tar.gz
$ sudo cp step_0.23.2/bin/step /usr/local/bin
$ step version
Smallstep CLI/0.23.2 (linux/arm64)
Release Date: 2023-02-07T00:53:54Z
</pre></code></section></pre>
<h3 id="optional-but--set-up-the-outboard-random-number-generator">Optional, but 🔥: Set up the outboard random number generator<a href="#optional-but--set-up-the-outboard-random-number-generator"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p><a href="https://www.crowdsupply.com/13-37/infinite-noise-trng" target="_blank" rel="nofollow noopener noreferrer">Infinite Noise TRNG</a> is an open-source USB True Random Number Generator. It uses a "modular entropy multiplier" architecture to generate a <em>lot</em> of random data quickly. For this setup, a daemon will continuously feed entropy into Linux's system entropy pool by writing to <code>/dev/random</code>.</p>
<blockquote>
<p><strong>But will this lovely new entropy generator actually be used by the CA?</strong> I needed to answer two questions here:</p>
<ol>
<li>How does the CA generate random numbers? I had to dig around a little to confirm this. <code>step-ca</code> uses Go's <code>crypto/rand</code> for all of its key generation, and <code>cyrpto/rand</code> uses <code>/dev/urandom</code> as its random data source on Linux systems.</li>
<li>Does the entropy created via writing to <code>/dev/random</code> actually affects what is read from <code>/dev/urandom</code>? It does—because Linux has only one entropy pool, shared by <code>/dev/random</code> and <code>/dev/urandom</code>.</li>
</ol>
<p>We also need to confirm that the outboard TRNG is actually generating high quality noise. We'll do that in a minute.
You'll need to <a href="https://github.com/13-37-org/infnoise/releases" target="_blank" rel="nofollow noopener noreferrer">compile the driver from source</a>, because there's no pre-built <code>arm64</code> package available.</p>
</blockquote>
<pre><section><code><pre>$ curl -LO https://github.com/leetronics/infnoise/archive/refs/tags/0.3.3.tar.gz
$ tar xvzf 0.3.3.tar.gz
$ cd infnoise-0.3.3/software
$ sudo apt-get install -y libftdi-dev libusb-dev
$ make -f Makefile.linux
$ sudo make -f Makefile.linux install
install -d /usr/local/sbin
install -m 0755 infnoise /usr/local/sbin/
install -d /usr/local/lib/udev/rules.d/
install -m 0644 init_scripts/75-infnoise.rules /usr/local/lib/udev/rules.d/
install -d /usr/local/lib/systemd/system
install -m 0644 init_scripts/infnoise.service /usr/local/lib/systemd/system
$ infnoise --version
GIT VERSION -
GIT COMMIT  -
GIT DATE    -
</pre></code></section></pre>
<p>Now, plug in the TRNG and restart your system.</p>
<pre><section><code><pre>$ sudo reboot
</pre></code></section></pre>
<p>After a restart, you should see that the driver has started up. It will start and stop based on whether the TRNG is present.</p>
<pre><section><code><pre>$ systemctl status infnoise
● infnoise.service - Wayward Geek InfNoise TRNG driver
     Loaded: loaded (/usr/local/lib/systemd/system/infnoise.service; disabled; preset: enabled)
     Active: active (running) since Thu 2023-02-16 14:43:02 PST; 1min 44s ago
    Process: 655 ExecStart=/usr/local/sbin/infnoise --dev-random --daemon --pidfile /var/run/infnoise.pid (code=e&gt;
   Main PID: 661 (infnoise)
      Tasks: 1 (limit: 2082)
     Memory: 700.0K
        CPU: 162ms
     CGroup: /system.slice/infnoise.service
             └─661 /usr/local/sbin/infnoise --dev-random --daemon --pidfile /var/run/infnoise.pid

Feb 16 14:43:02 tinyca systemd[1]: Starting Wayward Geek InfNoise TRNG driver...
Feb 16 14:43:02 tinyca systemd[1]: Started Wayward Geek InfNoise TRNG driver.
</pre></code></section></pre>
<p>Finally, let's run a health check to make sure the TRNG is ready for use:</p>
<pre><section><code><pre>$ infnoise --debug --no-output
Generated 1048576 bits.  OK to use data.  Estimated entropy per bit: 0.878415, estimated K: 1.838354
num1s:50.466260%, even misfires:0.119403%, odd misfires:0.156459%
^C
</pre></code></section></pre>
<p>Entropy is written to <code>/dev/random</code> by <code>infnoise.service</code> every second. You're all set on randomness! Now that you have more than enough entropy, you're ready to generate your CA keys.</p>
<h2 id="part-2-creating-your-pki">Part 2: Creating Your PKI<a href="#part-2-creating-your-pki"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h2>
<p>Now you'll create your root and intermediate CA certificates and keys, and store them securely on the YubiKey.</p>
<p>Ideally, your Raspberry Pi should be kept offline for this section. Disconnect the Ethernet cable, and connect directly to the device via HDMI and a keyboard.</p>
<h3 id="prepare-a-usb-thumb-drive-for-storing-the-private-keys">Prepare a USB thumb drive for storing the private keys<a href="#prepare-a-usb-thumb-drive-for-storing-the-private-keys"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p>You can't just have your CA private keys live <em>only</em> on the YubiKey. You'll want at least one backup of them, in case the YubiKey breaks!</p>
<p>Insert a USB thumb drive. You'll generate the keys directly on this drive, so that they never touch the Pi's microSD card. First, find the device name of your USB drive:</p>
<pre><section><code><pre>$ sudo fdisk -l
...
Disk /dev/sda: 14.91 GiB, 16005464064 bytes, 31260672 sectors
Disk model: Cruzer Fit
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
...
</pre></code></section></pre>
<p>In this case, the drive is <code>/dev/sda</code>. Let's initialize it with a single <code>ext4</code> partition:</p>
<pre><section><code><pre>$ sudo fdisk /dev/sda
Welcome to fdisk (util-linux 2.36).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.
Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (1-4, default 1):
First sector (2048-31260671, default 2048):
Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-31260671, default 31260671):
Created a new partition 1 of type 'Linux' and of size 14.9 GiB.
Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.
$ sudo mkfs.ext4 /dev/sda1 -v
mke2fs 1.45.6 (20-Mar-2020)
fs_types for mke2fs.conf resolution: 'ext4'
Filesystem label=
OS type: Linux
...
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done
</pre></code></section></pre>
<h3 id="generate-your-pki-on-the-thumb-drive">Generate your PKI on the thumb drive<a href="#generate-your-pki-on-the-thumb-drive"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p>Great, now you're ready to create your Public Key Infrastructure (PKI). Specifically, you'll be creating CA keys and certificates.</p>
<blockquote>
<p><strong>Tiny CA PKI Highlights</strong>:</p>
<ul>
<li>Tiny CA has a root CA key and certificate, and an intermediate CA key and certificate.</li>
<li>The root CA key signs the Intermediate CA certificate.</li>
<li>The root CA certificate is self-signed (signed with the root CA key)</li>
<li>The intermediate CA key will sign all of your TLS certificates.</li>
<li>By default, <code>step-ca</code> issues certificates with a 24-hour lifetime. I hope this default will compel you to <a href="https://smallstep.com/docs/step-ca/renewal" target="_blank" rel="nofollow noopener noreferrer">set up automated renewal</a> on your clients. And you can always increase the TLS certificate duration in the CA configuration, if you want something a bit more relaxed.</li>
<li>If a device is configured to trust your root CA, it will trust certificates you create with <code>step-ca</code>.</li>
<li>You can throw away the root CA key if you never need another intermediate.</li>
<li>Need a refresher on X.509 certificates? See our post, <a href="https://smallstep.com/blog/everything-pki/" target="_blank" rel="nofollow noopener noreferrer">Everything you should know about certificates and PKI but are too afraid to ask</a>.
Use a strong password when prompted, and save your password separately, offline, somewhere super duper safe.</li>
</ul>
</blockquote>
<pre><section><code><pre>$ sudo mount /dev/sda1 /mnt
$ cd /mnt
$ sudo mkdir ca
$ sudo chown ubuntu:ubuntu ca
$ export STEPPATH=/mnt/ca
$ step ca init --pki --name="Tiny" --deployment-type standalone
✔ What do you want your password to be? [leave empty and we'll generate one]: ...
Generating root certificate...
all done!
Generating intermediate certificate...
all done!
✔ Root certificate: /mnt/ca/certs/root_ca.crt
✔ Root private key: /mnt/ca/secrets/root_ca_key
✔ Root fingerprint: d6b3b9ef79a42aeeabcd5580b2b516458ddb25d1af4ea7ff0845e624ec1bb609
✔ Intermediate certificate: /mnt/ca/certs/intermediate_ca.crt
✔ Intermediate private key: /mnt/ca/secrets/intermediate_ca_key
FEEDBACK 😍 🍻
      The step utility is not instrumented for usage statistics. It does not
      phone home. But your feedback is extremely valuable. Any information you
      can provide regarding how you’re using `step` helps. Please send us a
      sentence or two, good or bad: feedback@smallstep.com or join
      https://github.com/smallstep/certificates/discussions.
</pre></code></section></pre>
<p>Don't forget to give your CA a cute name! It will appear on all of your certificates. Hold onto your root fingerprint, too; you'll need it to bootstrap your clients later.</p>
<h3 id="import-the-ca-into-the-yubikey">Import the CA into the YubiKey<a href="#import-the-ca-into-the-yubikey"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p>Now, let's import our PKI to the YubiKey.</p>
<pre><section><code><pre>$ sudo systemctl enable pcscd
$ sudo systemctl start pcscd
$ ykman piv certificates import 9a /mnt/ca/certs/root_ca.crt
Successfully imported a new certificate.
$ ykman piv keys import 9a /mnt/ca/secrets/root_ca_key
Enter PEM pass phrase: ...
Successfully imported a new private key.
$ ykman piv certificates import 9c /mnt/ca/certs/intermediate_ca.crt
Successfully imported a new certificate.
$ ykman piv keys import 9c /mnt/ca/secrets/intermediate_ca_key
Enter PEM pass phrase: ...
Successfully imported a new private key.
$ ykman piv info
PIV version: 5.2.7
PIN tries remaining: 3
CHUID:	3019d4e739da739ced39ce739d836858210842108421c84210c3eb34104610300df33f7fd273e44f17361ce7c4350832303330303130313e00fe00
CCC: 	No data available.
Slot 9a:
	Algorithm:	ECCP256
	Subject DN:	CN=Tiny CA Root CA
	Issuer DN:	CN=Tiny CA Root CA
	Serial:		280998571002718115143415195266043025218
	Fingerprint:	d6b3b9ef79a42aeeabcd5580b2b516458ddb25d1af4ea7ff0845e624ec1bb609
	Not before:	2020-12-08 20:12:15
	Not after:	2030-12-08 20:12:15
Slot 9c:
	Algorithm:	ECCP256
	Subject DN:	CN=Tiny CA Intermediate CA
	Issuer DN:	CN=Tiny CA Root CA
	Serial:		38398140468675846143165983044297636289
	Fingerprint:	fa21279c114ef44be899cb41e830b920faa6ce2c0ec5bc4f1c9310194e5837d2
	Not before:	2020-12-08 20:12:15
	Not after:	2030-12-08 20:12:15
</pre></code></section></pre>
<p>OK! Now you'll copy out the CA certificate files, leave the private keys on the USB stick, and continue creating your CA.</p>
<pre><section><code><pre>$ sudo cp /mnt/ca/certs/intermediate_ca.crt /mnt/ca/certs/root_ca.crt /root
$ cd
$ sudo umount /mnt
</pre></code></section></pre>
<p>Finally, reconnect your CA to your local network to continue the setup.</p>
<h2 id="part-3-configuring-your-ca">Part 3: Configuring Your CA<a href="#part-3-configuring-your-ca"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h2>
<p>You're going to re-run <code>step ca init</code> now, but <em>you're not going to use the certificates or keys that it generates</em>.
You're just doing this to create the configuration files.
The password you choose when prompted will be your <em>admin provisioner password</em>.
Anyone with this password will be able to administer your CA and get any certificate from it,
using the <code>step ca certificate</code> subcommand.</p>
<p>Don't use your root CA password for your provisioner,
but pick something strong and store it somewhere safe.</p>
<pre><section><code><pre>$ sudo useradd step
$ sudo passwd -l step
$ sudo mkdir /etc/step-ca
$ export STEPPATH=/etc/step-ca
$ sudo --preserve-env step ca init --name="Tiny CA" \
    --dns="tinyca.internal,10.20.30.42" --address=":443" \
    --provisioner="you@example.com" \
    --deployment-type standalone \
    --remote-management
Choose a password for your CA keys and first provisioner.
✔ [leave empty and we'll generate one]:

Generating root certificate... done!
Generating intermediate certificate... done!

✔ Root certificate: /etc/step-ca/certs/root_ca.crt
✔ Root private key: /etc/step-ca/secrets/root_ca_key
✔ Root fingerprint: 60440dc6ef5b923810b22f85a907f307badb58314c5fdc2231a3c1a892d6c275
✔ Intermediate certificate: /etc/step-ca/certs/intermediate_ca.crt
✔ Intermediate private key: /etc/step-ca/secrets/intermediate_ca_key
✔ Database folder: /etc/step-ca/db
✔ Default configuration: /etc/step-ca/config/defaults.json
✔ Certificate Authority configuration: /etc/step-ca/config/ca.json
✔ Admin provisioner: you@example.com (JWK)
✔ Super admin subject: step

Your PKI is ready to go. To generate certificates for individual services see 'step help ca'.
</pre></code></section></pre>
<p>Next, let's get your certificates in place.</p>
<pre><section><code><pre>$ sudo mv /root/root_ca.crt /root/intermediate_ca.crt /etc/step-ca/certs
$ sudo rm -rf /etc/step-ca/secrets
</pre></code></section></pre>
<p>Next, you'll need to configure <code>step-ca</code> to use your YubiKey to sign certificates, using the intermediate key on the YubiKey. Notice that the default YubiKey PIN (<code>123456</code>) is shown here, too.</p>
<blockquote>
<p>You should change your YubiKey PIN, PUK, and management key if you haven't already! <a href="https://developers.yubico.com/PIV/Guides/Device_setup.html" target="_blank" rel="nofollow noopener noreferrer">Learn how in this guide.</a>
Now edit the file <code>/etc/step-ca/config/ca.json</code>. You'll want the top of the file to look like this:</p>
</blockquote>
<pre><section><code><pre><span>{</span>
        <span>"root"</span><span>:</span> <span>"/etc/step-ca/certs/root_ca.crt"</span><span>,</span>
        <span>"federatedRoots"</span><span>:</span> <span>[</span><span>]</span><span>,</span>
        <span>"crt"</span><span>:</span> <span>"/etc/step-ca/certs/intermediate_ca.crt"</span><span>,</span>
        <span>"key"</span><span>:</span> <span>"yubikey:slot-id=9c"</span><span>,</span>
        <span>"kms"</span><span>:</span> <span>{</span>
            <span>"type"</span><span>:</span> <span>"yubikey"</span><span>,</span>
            <span>"pin"</span><span>:</span> <span>"123456"</span>
        <span>}</span><span>,</span>
        <span>"address"</span><span>:</span> <span>":443"</span><span>,</span>
...
</pre></code></section></pre>
<p>Now you'll start up the CA and make sure it's running properly:</p>
<pre><section><code><pre>$ sudo chown -R step:step /etc/step-ca
$ sudo -u step step-ca /etc/step-ca/config/ca.json
2020/12/08 14:17:06 Serving HTTPS on :443 ...
</pre></code></section></pre>
<p>In another window, you'll generate a test certificate for localhost.
This is where you'll need the CA fingerprint, which is displayed when you start up the CA. Run:</p>
<pre><section><code><pre>$ step ca bootstrap --ca-url "https://tinyca.internal" --fingerprint d6b3b9ef79a42aeeabcd5580b2b516458ddb25d1af4ea7ff0845e624ec1bb609
The root certificate has been saved in /home/ubuntu/.step/certs/root_ca.crt.
Your configuration has been saved in /home/ubuntu/.step/config/defaults.json.
$ step ca certificate "localhost" localhost.crt localhost.key
✔ Provisioner: you@example.com (JWK) [kid: izgi9tn1YWbVnY_rmIUKzE-Dn-XIuKz-_J1dnnKeDRA]
✔ Please enter the password to decrypt the provisioner key:
✔ CA: https://tinyca.internal:443
✔ Certificate: localhost.crt
✔ Private Key: localhost.key
$ step certificate inspect localhost.crt --short
X.509v3 TLS Certificate (ECDSA P-256) [Serial: 2903...3061]
  Subject:     localhost
  Issuer:      Tiny Intermediate CA
  Provisioner: you@example.com [ID: izgi...eDRA]
  Valid from:  2023-02-16T23:03:52Z
          to:  2023-02-17T23:04:52Z
</pre></code></section></pre>
<p>Great! You just signed your first X.509 TLS leaf certificate using the YubiKey and <code>step-ca</code>.</p>
<p>When you ask the CA to issue a leaf certificate for a TLS endpoint, you'll get a certificate file and a (locally-generated) private key file.  The certificate file will contain both the intermediate CA certificate and the leaf certificate you requested. This way, a device which trusts your root CA can verify the chain of trust from the root to the intermediate, and from the intermediate to the leaf.</p>
<p>Finally, you'll add an ACME provisioner, which will turn your Tiny CA into a tiny Let's Encrypt!</p>
<pre><section><code><pre>$ step ca provisioner add acme --type acme --admin-name step
No admin credentials found. You must login to execute admin commands.
✔ Provisioner: you@example.com (JWK) [kid: izgi9tn1YWbVnY_rmIUKzE-Dn-XIuKz-_J1dnnKeDRA]
Please enter the password to decrypt the provisioner key:
</pre></code></section></pre>
<p>Sign in with your admin password, and your new new ACME provisioner will be created.</p>
<p>You can now shut down the <code>step-ca</code> process you started in the other terminal window.</p>
<h3 id="configure-systemd-to-start-the-ca">Configure <code>systemd</code> to start the CA<a href="#configure-systemd-to-start-the-ca"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p>In this section you'll set up a systemd service for <code>step-ca</code> so it starts when the system starts up.
You'll also configure systemd to stop the CA when the YubiKey is removed, and restart it when the YubiKey is reinserted.
First, you need to tell <a href="https://wiki.archlinux.org/index.php/Udev" target="_blank" rel="nofollow noopener noreferrer">udev</a> about your YubiKey by adding some udev rules, which will help make the YubiKey visible to systemd as a device.</p>
<pre><section><code><pre>$ sudo tee /etc/udev/rules.d/75-yubikey.rules &gt; /dev/null &lt;&lt; EOF
ACTION=="add", SUBSYSTEM=="usb", ENV{PRODUCT}=="1050/407/*", TAG+="systemd", SYMLINK+="yubikey"
ACTION=="remove", SUBSYSTEM=="usb", ENV{PRODUCT}=="1050/407/*", TAG+="systemd"
EOF
$ sudo udevadm control --reload-rules
</pre></code></section></pre>
<p>Here, the format of the <code>ENV{PRODUCT}</code> value is <code>{vendorId}/{productId}/*</code>. Yubico's vendor ID is <code>1050</code>, and <code>407</code> is the product ID for the YubiKey 5 NFC. If you're using a different YubiKey, <a href="https://devicehunt.com/view/type/usb/vendor/1050" target="_blank" rel="nofollow noopener noreferrer">you can find your model number here</a>.</p>
<p>Now you'll <a href="https://smallstep.com/docs/step-ca/certificate-authority-server-production#running-step-ca-as-a-daemon" target="_blank" rel="nofollow noopener noreferrer">set up the CA as a systemd service</a> that will:</p>
<ul>
<li>run on system startup, when the YubiKey is inserted</li>
<li>stop when the YubiKey is removed</li>
<li>start again when the YubiKey is reinserted</li>
</ul>
<pre><section><code><pre>$ sudo tee /etc/systemd/system/step-ca.service &gt; /dev/null &lt;&lt; EOF
[Unit]
Description=step-ca
BindsTo=dev-yubikey.device
After=dev-yubikey.device
[Service]
User=step
Group=step
ExecStart=/bin/sh -c '/usr/local/bin/step-ca /etc/step-ca/config/ca.json'
Type=simple
Restart=on-failure
RestartSec=10
[Install]
WantedBy=multi-user.target
EOF
$ sudo mkdir /etc/systemd/system/dev-yubikey.device.wants
$ sudo ln -s /etc/systemd/system/step-ca.service /etc/systemd/system/dev-yubikey.device.wants/
$ sudo systemctl daemon-reload
$ sudo systemctl enable step-ca
</pre></code></section></pre>
<p>Now insert the YubiKey and the service should start:</p>
<pre><section><code><pre>$ sudo systemctl status step-ca
● step-ca.service - step-ca
     Loaded: loaded (/etc/systemd/system/step-ca.service; enabled; vendor preset: enabled)
     Active: active (running) since Tue 2020-12-08 14:27:02 PST; 3s ago
   Main PID: 3269 (sh)
      Tasks: 9 (limit: 2099)
     CGroup: /system.slice/step-ca.service
             ├─3269 /bin/sh -c /usr/local/bin/step-ca /etc/step-ca/config/ca.json
             └─3270 /usr/local/bin/step-ca /etc/step-ca/config/ca.json
Dec 08 14:27:02 tinyca systemd[1]: Started step-ca.
Dec 08 14:27:02 tinyca sh[3270]: 2020/12/08 14:27:02 Serving HTTPS on :443 ...
</pre></code></section></pre>
<p>Now restart your system and ensure that the CA starts up automatically.</p>
<p>Test out removing the YubiKey, and you should see that the CA stops.</p>
<p>Reinsert it, and the CA should start up again.</p>
<h3 id="finally-turn-on-the-firewall-and-disable-ssh-access">Finally, turn on the firewall and disable SSH access<a href="#finally-turn-on-the-firewall-and-disable-ssh-access"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p>Your tiny CA will be most secure without any SSH access at all. The only open port will be 443, for the CA. For maintenance, you'll need to plug in a keyboard and a display.</p>
<pre><section><code><pre>$ sudo tee /etc/ufw/applications.d/step-ca-server &gt; /dev/null &lt;&lt; EOF
[step-ca]
title=Smallstep CA
description=step-ca is an online X.509 and SSH Certificate Authority
ports=443/tcp
EOF
$ sudo ufw allow step-ca
$ sudo ufw enable
Command may disrupt existing ssh connections. Proceed with operation (y|n)? y
Firewall is active and enabled on system startup
</pre></code></section></pre>
<h3 id="using-your-ca">Using Your CA<a href="#using-your-ca"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h3>
<p>You did it! Your CA is up and running.</p>
<h4 id="bootstrapping-a-new-device-into-your-pki">Bootstrapping a new device into your PKI<a href="#bootstrapping-a-new-device-into-your-pki"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h4>
<p>When you run <a href="https://smallstep.com/docs/step-cli/reference/ca/bootstrap" target="_blank" rel="nofollow noopener noreferrer"><code>step ca bootstrap</code></a> (as above) on a new device,
the root certificate <code>root_ca.crt</code> is downloaded from the CA.
If you run <code>step ca bootstrap --install --ca-url=https://your.ca --fingerprint=your-ca-fingerprint</code>,
it will install the root certificate into your device's trust store.</p>
<p>You can also use the <code>step</code> command for easy installation of your root CA certificate (<a href="https://smallstep.com/docs/step-cli/reference/certificate/install" target="_blank" rel="nofollow noopener noreferrer"><code>step certificate install</code></a>),
for ACME enrollment (<code>step ca certificate example.com example.crt example.key --provisioner acme</code>)
and for renewal of any certificate that hasn't yet expired (<code>step ca renew example.crt example.key</code>).</p>
<p>For mobile devices, you can usually install a certificate by sending it to yourself via Bluetooth or AirDrop, or as an email attachment. Make sure the certificate isn't just installed, but actually trusted by the device. This usually involves a couple of confirmation steps on the device.</p>
<h4 id="use-acme">Use ACME!<a href="#use-acme"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h4>
<p>With the ACME provisioner, you can use software like <a href="https://certbot.eff.org/" target="_blank" rel="nofollow noopener noreferrer">Certbot</a> or <a href="https://go-acme.github.io/lego/usage/cli/" target="_blank" rel="nofollow noopener noreferrer">LEGO CLI</a> to easily get and renew certificates for any endpoint. Our tutorials on <a href="https://smallstep.com/docs/tutorials/acme-challenge" target="_blank" rel="nofollow noopener noreferrer">running a private ACME server</a> and <a href="https://smallstep.com/docs/tutorials/acme-protocol-acme-clients" target="_blank" rel="nofollow noopener noreferrer">configuring popular ACME clients to use a private ACME server</a> will show you how to get ACME certificates from your CA using the most common ACME clients and ACME-supporting services.</p>
<h4 id="automating-certificate-renewal">Automating certificate renewal<a href="#automating-certificate-renewal"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h4>
<p>Because certificates from your CA have a 24-hour lifetime, you'll want to renew them every 16ish hours.
Our <a href="https://smallstep.com/docs/step-ca/renewal" target="_blank" rel="nofollow noopener noreferrer">renewal documentation</a> has a few options
for setting up renewal on your clients.</p>
<h4 id="further-reading">Further Reading<a href="#further-reading"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg></a></h4>
<p>Now that you have an internal CA, here's a few useful resources:</p>
<ul>
<li>To get more familiar with the <code>step</code> command and how it interfaces with your CA, try out some of the examples in <a href="https://smallstep.com/docs/step-ca/basic-certificate-authority-operations" target="_blank" rel="nofollow noopener noreferrer">Basic Certificate Authority Operations</a>.</li>
<li><a href="https://smallstep.com/hello-mtls" target="_blank" rel="nofollow noopener noreferrer">Hello mTLS</a> shows you how to get mutual TLS authentication configured for several common services and programming languages, using the <code>step</code> command.</li>
<li>There's also a lot to learn about the different provisioners you can add to your CA to suit your workflows.
See <a href="https://smallstep.com/docs/step-ca/configuration" target="_blank" rel="nofollow noopener noreferrer">Configuring <code>step-ca</code></a>.</li>
<li>Bonus: Want to use SSH certificates?
You can turn your tiny CA into an SSH CA, and use certificates and single sign-on for your SSH hosts.
We have a <a href="https://smallstep.com/blog/diy-single-sign-on-for-ssh/" target="_blank" rel="nofollow noopener noreferrer">blog post</a> and <a href="https://www.youtube.com/watch?v=ZhxLRlcNUM4" target="_blank" rel="nofollow noopener noreferrer">video walk-through</a> that describes how to set it up.</li>
</ul>
<div><p>Carl Tashian (<a href="https://tashian.com/">Website</a>, <a href="https://www.linkedin.com/in/tashian/">LinkedIn</a>) is an engineer, writer, exec coach, and startup all-rounder. He's currently an Offroad Engineer at Smallstep. He co-founded and built the engineering team at Trove, and he wrote the code that opens your Zipcar. He lives in San Francisco with his wife Siobhan and he loves to play the modular synthesizer 🎛️🎚️</p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Fuzzing Book (162 pts)]]></title>
            <link>https://www.fuzzingbook.org/</link>
            <guid>42756286</guid>
            <pubDate>Sun, 19 Jan 2025 11:57:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.fuzzingbook.org/">https://www.fuzzingbook.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42756286">Hacker News</a></p>
Couldn't get https://www.fuzzingbook.org/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[“The Traitors”, a reality TV show, offers a useful economics lesson (121 pts)]]></title>
            <link>https://www.economist.com/finance-and-economics/2025/01/16/the-traitors-a-reality-tv-show-offers-a-useful-economics-lesson</link>
            <guid>42755251</guid>
            <pubDate>Sun, 19 Jan 2025 08:56:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.economist.com/finance-and-economics/2025/01/16/the-traitors-a-reality-tv-show-offers-a-useful-economics-lesson">https://www.economist.com/finance-and-economics/2025/01/16/the-traitors-a-reality-tv-show-offers-a-useful-economics-lesson</a>, See on <a href="https://news.ycombinator.com/item?id=42755251">Hacker News</a></p>
<div id="readability-page-1" class="page"><section><h2>It is a finite, sequential, incomplete information game</h2></section><div><section data-body-id="cp2"><p data-component="paragraph"><span data-caps="initial">C</span><small>laudia Winkleman</small>, a television presenter with a helmet of shiny hair, is not a typical economics teacher. Yet students should consider her game show. Those learning outside Britain may opt for any of the 20 or so versions of “The Traitors” screened elsewhere, including a popular American option that has featured celebrities such as Deontay Wilder, a boxing great, and John Bercow, a disgraced British parliamentarian. The game, which involves lying and betrayal, is a chance to study both the theory and reality of game theory, as well as to watch the panic on the face of someone who, having decided a fake Welsh accent would make them more trustworthy, comes across a native Welsh speaker.</p></section><p><h3 id="article-tags">Explore more</h3><nav aria-labelledby="article-tags"><a href="https://www.economist.com/topics/finance" data-analytics="tags:finance"><span>Finance</span></a><a href="https://www.economist.com/topics/free-exchange" data-analytics="tags:free_exchange"><span>Free exchange</span></a></nav></p><p>This article appeared in the Finance &amp; economics section of the print edition under the headline “All fun and games”</p><div data-tracking-id="content-well-chapter-list"><h2><a href="https://www.economist.com/finance-and-economics">Finance &amp; economics</a> <span>January 18th 2025</span></h2><ul><li><a href="https://www.economist.com/finance-and-economics/2025/01/12/why-global-bond-markets-are-convulsing"><span>Why global bond markets are convulsing  </span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/01/15/will-donald-trump-unleash-wall-street"><span>Will Donald Trump unleash Wall Street?</span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/01/13/iran-is-vulnerable-to-a-trumpian-all-out-economic-assault"><span>Iran is vulnerable to a Trumpian all-out economic assault</span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/01/16/ethiopia-gets-a-stockmarket-now-it-just-needs-some-firms-to-list"><span>Ethiopia gets a stockmarket. Now it just needs some firms to list</span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/01/16/are-big-cities-overrated"><span>Are big cities overrated?</span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/01/16/why-catastrophe-bonds-are-failing-to-cover-disaster-damage"><span>Why catastrophe bonds are failing to cover disaster damage&nbsp;</span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/01/16/the-traitors-a-reality-tv-show-offers-a-useful-economics-lesson"><span>“The Traitors”, a reality TV show, offers a useful economics lesson</span></a></li></ul></div><div orientation="vertical" data-test-id="vertical"><div orientation="vertical"><figure><img loading="lazy" width="1280" height="1709" decoding="async" data-nimg="1" sizes="300px" srcset="https://www.economist.com/cdn-cgi/image/width=16,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 16w, https://www.economist.com/cdn-cgi/image/width=32,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 32w, https://www.economist.com/cdn-cgi/image/width=48,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 48w, https://www.economist.com/cdn-cgi/image/width=64,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 64w, https://www.economist.com/cdn-cgi/image/width=96,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 96w, https://www.economist.com/cdn-cgi/image/width=128,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 128w, https://www.economist.com/cdn-cgi/image/width=256,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 256w, https://www.economist.com/cdn-cgi/image/width=360,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 360w, https://www.economist.com/cdn-cgi/image/width=384,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 384w, https://www.economist.com/cdn-cgi/image/width=480,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 480w, https://www.economist.com/cdn-cgi/image/width=600,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 600w, https://www.economist.com/cdn-cgi/image/width=834,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 834w, https://www.economist.com/cdn-cgi/image/width=960,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 960w, https://www.economist.com/cdn-cgi/image/width=1096,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 1096w, https://www.economist.com/cdn-cgi/image/width=1280,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 1280w, https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg 1424w" src="https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250118_DE_EU.jpg"></figure></div><div orientation="vertical"><h3 orientation="vertical">From the January 18th 2025 edition</h3><p orientation="vertical">Discover stories from this section and more in the list of contents</p><p><a href="https://www.economist.com/weeklyedition/2025-01-18" data-analytics="sidebar:weekly_edition"><span>Explore the edition</span></a></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[About availability of TikTok and ByteDance Ltd. apps in the United States (106 pts)]]></title>
            <link>https://support.apple.com/en-us/121596</link>
            <guid>42754130</guid>
            <pubDate>Sun, 19 Jan 2025 05:57:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://support.apple.com/en-us/121596">https://support.apple.com/en-us/121596</a>, See on <a href="https://news.ycombinator.com/item?id=42754130">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content" role="main">
                                
                                
                                
                                    
                                        
                                        
                                    

                                    

                                
                                    
                                        
                                        
                                    

                                    

                                
                                    
                                        <p>Apple is obligated to follow the laws in the jurisdictions where it operates. Pursuant to the Protecting Americans from Foreign Adversary Controlled Applications Act, apps developed by ByteDance Ltd. and its subsidiaries — including TikTok, CapCut, Lemon8, and others — will no longer be available for download or updates on the App Store for users in the United States starting January 19, 2025.</p>
                                        
                                    

                                    

                                
                                    
                                        <p>The following are some of the apps developed by ByteDance Ltd. and its subsidiaries that are affected:</p>
                                        
                                    

                                    

                                
                                    
                                        <ul><li><p>TikTok</p></li><li><p>TikTok Studio</p></li><li><p>TikTok Shop Seller Center</p></li><li><p>CapCut</p></li><li><p>Lemon8</p></li><li><p>Hypic</p></li><li><p>Lark - Team Collaboration</p></li><li><p>Lark - Rooms Display</p></li><li><p>Lark Rooms Controller</p></li><li><p>Gauth: AI Study Companion</p></li><li><p>MARVEL SNAP</p></li></ul>
                                        
                                    

                                    

                                
                                    
                                        
                                        
                                    

                                    

                                
                                    
                                        <p>If you already have these apps installed on your device, they will remain on your device. But they can’t be redownloaded if deleted or restored if you move to a new device. In-app purchases and new subscriptions are no longer possible.</p>
                                        
                                    

                                    

                                
                                    
                                        <p>Users in the United States won’t receive updates for these apps, which could potentially impact performance, security, and compatibility with future versions of iOS and iPadOS, and some app functions might become limited or stop working since the app can’t receive updates.</p>
                                        
                                    

                                    

                                
                                    
                                        
                                        
                                    

                                    

                                
                                    
                                        <p>ByteDance’s apps remain available for download in all other countries and regions where they are available.</p>
                                        
                                    

                                    

                                
                                    
                                        <p>Users visiting from outside the United States with their Apple Account set to a country or region that is not the United States are unable to download, update, or make in-app purchases and new subscriptions inside ByteDance Ltd. apps while within the land or maritime borders of the United States.</p>
                                        
                                    

                                    

                                
                                    
                                        <p>After leaving the United States, you’ll have access to all functionality.</p>
                                        
                                    

                                    

                                
                                    
                                        
                                        
                                    

                                    

                                
                                    
                                        <ul><li><p>If you already have a subscription to TikTok, CapCut, or another ByteDance Ltd. app, you can still <a href="https://support.apple.com/en-us/118428">cancel your subscription</a>.</p></li><li><p>For any other questions about TikTok or other ByteDance Ltd. apps, contact the developer on the web.</p></li></ul>
                                        
                                    

                                    

                                
                                   
                                
                                   

                                
                                    
                                        
                                        <p><span>Published Date:</span>&nbsp;<time datetime="January" 19,="" 2025itemprop="datePublished">January 19, 2025</time>
                                        </p>
                                        
                                    
                                

                                
                            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Haskell: A Great Procedural Language (224 pts)]]></title>
            <link>https://entropicthoughts.com/haskell-procedural-programming</link>
            <guid>42754098</guid>
            <pubDate>Sun, 19 Jan 2025 05:50:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://entropicthoughts.com/haskell-procedural-programming">https://entropicthoughts.com/haskell-procedural-programming</a>, See on <a href="https://news.ycombinator.com/item?id=42754098">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                <div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#side-effects-as-first-class-values">Side effects as first class values</a></li>
<li><a href="#de-mystifying-do-blocks">De-mystifying do blocks</a></li>
<li><a href="#functions-that-operate-on-side-effects">Functions that operate on side effects</a></li>
<li><a href="#leaning-into-the-first-classiness-of-effects">Leaning into the first classiness of effects</a></li>
<li><a href="#things-you-never-need-to-care-about">Things you never need to care about</a></li>
<li><a href="#appendix-a--avoiding-success-and-uselessness">Appendix A: Avoiding success and uselessness</a></li>
<li><a href="#appendix-b--why-fmap-maps-over-both-side-effects-and-lists">Appendix B: Why fmap maps over both side effects and lists</a></li>
<li><a href="#appendix-c--foldable-and-traversable">Appendix C: Foldable and Traversable</a></li>
</ul>
</div>
</div>

<p>
There are many catchphrases about Haskell.
</p>

<ul>
<li>Haskell is useless.</li>
<li>Haskell aims to avoid success at all costs.</li>
<li>Haskell is the best procedural language in the world.</li>
</ul>

<p>
These sound like dismissals or absurdities from the outside, but once you learn
what they really mean, they take on a new light. In this article, I want to
explain the third. (See the appendix if you are curious about the first two.)
</p>

<p>
This article really, really tried to become a monad <abbr>i/o</abbr> tutorial, but I think
I stopped it in time.<label for="fn.1">1</label><span><sup>1</sup> By that I mean I had to rewrite it twice and delete
large chunks of monad <abbr>i/o</abbr> tutorial material.</span> Here, we are going to jump right
in and focus on the interesting stuff.
</p>
<section id="outline-container-side-effects-as-first-class-values">
<h2 id="side-effects-as-first-class-values">Side effects as first class values</h2>
<div id="text-orgd4b0318">
<p>
Effectful computations in Haskell are first class values. This means we can
store them in variables or data structures for later use. There is a Haskell
function
</p>

<p><label>In[1]:</label></p><div>
<pre><span>randomRIO</span> <span>::</span> (<span>Int</span>, <span>Int</span>) <span>-&gt;</span> <span>IO</span> <span>Int</span>
</pre>
</div>

<p>
which, when given two integers as arguments, picks a random integer between
them. We can put calls to this function into a list, like so:
</p>

<p><label>In[2]:</label></p><div>
<pre><span>some_dice</span> <span>=</span> [ randomRIO(1, 6), randomRIO(1, 6) ]
</pre>
</div>

<p>
This is a list of two calls to <code>randomRIO</code>. What surprises non-Haskellers is
that when this list is created, no random numbers are generated. Coming from
other programming languages, we are used to side effects (such as random
generation) being executed directly when the side effectful function is
called.<label for="fn.2">2</label><span><sup>2</sup> You may think Haskell is different here due to laziness, but that’s
also not true. Even if we put these calls into a strict data structure, no
randomness would happen.</span>
</p>

<p>
We can add more random generation to the list:
</p>

<p><label>In[3]:</label></p><div>
<pre><span>more_dice</span> <span>=</span> some_dice <span>&lt;&gt;</span> [ randomRIO(1, 6) ]
</pre>
</div>

<p>
and still no random numbers will be generated. We can go ahead and manipulate
this list in all sorts of ways, and <i>still</i> no random numbers would be
generated.
</p>

<p>
To be clear, the <code>randomRIO</code> function could well be called<label for="fn.3">3</label><span><sup>3</sup> Whether this
actually happens is a question of lazy evaluation, optimisation, etc.</span>, and when
it is called it returns a value of type <code>IO Int</code>. It’s just that this value <i>is
not an integer</i>. If anything, we can think of it as a set of instructions for
eventually, somehow, getting an integer. It’s not an actual integer. It’s an
object encapsulating a side effect. When this side effect object executes, it
will produce a random integer, but the object itself just describes the
computation, it is not an integer.
</p>

<p>
In other words, in Haskell, it is not enough to call a side effectful function
to execute its side effects. When we call the side effectful function, it
produces an object encapsulating the side effect, and this object can be
executed in the future to produce the result of the side effect.<label for="fn.4">4</label><span><sup>4</sup> Readers
familiar with JavaScript promises will recognise this concept. Indeed,
promises are modeled after side effects in Haskell.</span>
</p>

<p>
The common way we teach beginners to do execute side effect objects is by
calling them from a <code>do</code> block, using the special <code>&lt;-</code> assignment operator to
extract their result. As a first approximation, we can think of the following
code as the way to force side effects to execute.
</p>

<p><label>In[4]:</label></p><div>
<pre><span>dice_print</span> <span>=</span> <span>do</span>
  side <span>&lt;-</span> randomRIO(1, 6)
  printf <span>"It landed on %d\n"</span> side
</pre>
</div>

<p>
We can imagine that the <code>&lt;-</code> arrow executes the side effect object returned by
<code>randomRIO</code> and captures the value it produces. Similarly, the side effect
object returned by <code>printf</code> gets executed, but we don’t capture the result; we
don’t care about the value produced by it, we only care about the side effect
itself.
</p>

<p>
The lie-to-children here is that we pretend the <code>do</code> block is magical and that
when it executes, it also executes side effects of functions called in it. This
mental model will take the beginner a long way, but at some point, one will want
to break free of it. That is when Haskell starts to really shine as a procedural
language.
</p>

<p>
This article features another lie-to-children: it will have type signatures
specialised to <code>IO a</code> and <code>[a]</code>. All the functions I mention are more generic
than I’m letting on.
</p>

<ul>
<li>Anywhere this article says <code>IO a</code> it will work with any type of side effect
(like <code>Maybe a</code>, <code>Rand g a</code>, <code>StateT s m a</code>, etc.)</li>
<li>Anywhere this article says <code>[a]</code> it probably also works with other
collection/container types (like <code>Maybe a</code>, <code>Array i a</code>, <code>HashMap k a</code>, <code>Tree
  a</code>, etc.)</li>
</ul>

<p>
The reason this article uses more direct type signatures is to hopefully be
readable also to someone who does not use Haskell.<label for="fn.5">5</label><span><sup>5</sup> If the reader has never
seen <abbr>ml</abbr> style syntax before, I think the most important thing to know is that
function calls aren’t written like <code>isInfixOf("llo", "hello, world\n")</code> but
rather with spaces, as in <code>isInfixOf "llo" "hello, world\n"</code>.</span>
</p>
</div>
</section>
<section id="outline-container-de-mystifying-do-blocks">
<h2 id="de-mystifying-do-blocks">De-mystifying do blocks</h2>
<p>
In order to drive the point home, we’ll start by seeing what it is the <code>do</code>
block actually does, because it’s not magic at all. In fact, every do block can
be converted to just two operators. If you
already know this, skip ahead to the next section.
</p>
<div id="outline-container-then">
<h2 id="then">then</h2>
<div id="text-orgef76d50">
<p>
If we want to combine two side effects into one, we can use the <code>*&gt;</code> operator,
which is pronounced <i>then</i> or <i>sequence right</i>. It takes two side effect objects
and creates a new side effect object that executes both when itself is executed.
The value produced by this new composite object is going to be the value
produced by the second object its constructed from. In that sense, the <code>*&gt;</code>
operator is a lot like the comma operator in C: it chains together statements,
and returns the result of the last.
</p>

<p><label>In[5]:</label></p><div>
<pre>(<span>*&gt;</span>) <span>::</span> <span>IO</span> a <span>-&gt;</span> <span>IO</span> b <span>-&gt;</span> <span>IO</span> b
</pre>
</div>

<p>
For example, here we combine two print statements into a single side effectful
function.
</p>

<p><label>In[6]:</label></p><div>
<pre><span>greeting</span> <span>::</span> <span>IO</span> <span>()</span>
<span>greeting</span> <span>=</span>
  putStr <span>"hello, "</span> <span>*&gt;</span> putStrLn <span>"world"</span>
</pre>
</div>

<p>
This is a single side effect object called <code>greeting</code>, but its execution will
involve the execution of two separate print statements.
</p>

<p>
We teach beginners to write this as
</p>

<p><label>In[7]:</label></p><div>
<pre><span>greeting</span> <span>=</span> <span>do</span>
  putStr <span>"hello, "</span>
  putStrLn <span>"world"</span>
</pre>
</div>

<p>
which is the exact same thing, although arguably easier to read. The interesting
thing is the implication for how we look at <code>do</code> blocks. It turns out they may
not be magical at all; maybe they are just inserting implicit commas, i.e. a
pretty way of taking multiple side effect objects and combining them into a
single, bigger, side effect object.
</p>
</div>
</div>
<div id="outline-container-bind">
<h2 id="bind">bind</h2>
<div id="text-org642d69b">
<p>
The one thing we cannot do with <code>*&gt;</code> is take the result from the left-hand side
effect and use it to influence the right-hand side function call, because the
<code>*&gt;</code> operator discards the first result before executing the second effect –
just like the comma operator in C. The die throwing code we saw previously,
</p>

<p><label>In[8]:</label></p><div>
<pre><span>dice_print</span> <span>=</span> <span>do</span>
  side <span>&lt;-</span> randomRIO(1, 6)
  printf <span>"It landed on %d\n"</span> side
</pre>
</div>

<p>
cannot be implemented with just <code>*&gt;</code>. We need the additional operator <code>&gt;&gt;=</code>
which takes a side effect object and plugs the value it produces into another
side effectful function.<label for="fn.6">6</label><span><sup>6</sup> This operator is widely known as <i>bind</i>.</span>
</p>

<p><label>In[9]:</label></p><div>
<pre>(<span>&gt;&gt;=</span>) <span>::</span> <span>IO</span> a <span>-&gt;</span> (a <span>-&gt;</span> <span>IO</span> b) <span>-&gt;</span> <span>IO</span> b
</pre>
</div>

<p>
Using this operator, we could write the above do block as
</p>

<p><label>In[10]:</label></p><div>
<pre><span>print_side</span> <span>::</span> <span>Int</span> <span>-&gt;</span> <span>IO</span> <span>()</span>
<span>print_side</span> side <span>=</span>
  printf <span>"It landed on %d\n"</span> side

<span>dice_print</span> <span>::</span> <span>IO</span> <span>()</span>
<span>dice_print</span> <span>=</span>
  randomRIO(1, 6) <span>&gt;&gt;=</span> print_side
</pre>
</div>

<p>
and this would take the result of executing the side effect of <code>randomRIO</code> and
plugging it into another side effectful function, namely <code>print_side</code>.
</p>
</div>
</div>
<div id="outline-container-two-operators-are-all-of-do-blocks">
<h2 id="two-operators-are-all-of-do-blocks">Two operators are all of do blocks</h2>
<div id="text-org71d7321">
<p>
This illustrates that <code>do</code> blocks are built from only two operators. If we stick
with <code>do</code> blocks for all side effects, we will never learn why Haskell is the
greatest procedural programming language in the world, because we are limiting
ourselves to just two operators for dealing with side effects.
</p>

<p>
Let’s lift our gaze and see what happens when we look beyond those. There are
more functions for dealing with side effects.
</p>
</div>
</div>
</section>
<section id="outline-container-functions-that-operate-on-side-effects">
<h2 id="functions-that-operate-on-side-effects">Functions that operate on side effects</h2>
<p>
We’ll start with the basics and work our way up.
</p>
<div id="outline-container-pure">
<h2 id="pure">pure</h2>
<div id="text-orgc2ed192">
<p>
If we want to construct a new side effect object that always produces a
specific value, we can use the function <code>pure</code>.
</p>

<p><label>In[11]:</label></p>

<p>
For example, this creates a side effect object that always produces the integer 4.
</p>

<p><label>In[12]:</label></p><div>
<pre><span>loaded_die</span> <span>::</span> <span>IO</span> <span>Int</span>
<span>loaded_die</span> <span>=</span>
  <span>-- </span><span>Chosen by fair dice roll.</span>
  <span>-- </span><span>Guaranteed to be random.</span>
  pure 4
</pre>
</div>

<p>
Creating side effect objects that always produce a known value might not seem
very useful, but it comes up all the time when bridging the worlds of pure code
and side effects.
</p>
</div>
</div>
<div id="outline-container-fmap">
<h2 id="fmap">fmap</h2>
<div id="text-orgd7cf409">
<p>
One of the most used functions when working with side effects in Haskell is
<code>fmap</code>.
</p>

<p><label>In[13]:</label></p><div>
<pre><span>fmap</span> <span>::</span> (a <span>-&gt;</span> b) <span>-&gt;</span> <span>IO</span> a <span>-&gt;</span> <span>IO</span> b
</pre>
</div>

<p>
This takes a pure function, and a side effect object, and returns a new side effect
object that is similar to the one it got, except the value produced will be
transformed by the function first.
Transforming the results of side effects is
so common that <code>fmap</code> has an operator alias: <code>&lt;$&gt;</code>. For example, to get the
length of the path to the user’s home directory, we can do
</p>

<p><label>In[14]:</label></p><div>
<pre><span>path_length</span> <span>::</span> <span>IO</span> <span>Int</span>
<span>path_length</span> <span>=</span> length <span>&lt;$&gt;</span> getEnv <span>"HOME"</span>
<span>-- </span><span>equivalent to</span>
<span>-- </span><span>path_length = fmap length (getEnv "HOME")</span>
</pre>
</div>

<p>
This creates a new side effect object which will produce the result of applying
the <code>length</code> function to the result of the side effect of <code>getEnv</code>.
</p>
</div>
</div>
<div id="outline-container-lifta2--lifta3---">
<h2 id="lifta2--lifta3---">liftA2, liftA3, …</h2>
<div id="text-org7e05c97">
<p>
Where <code>fmap</code> allows us to transform the value produced by a single side effect,
sometimes we need to create a side effect object that produces something based
on multiple other side effects.
This is where <code>liftA2</code> and friends come in.
</p>

<p><label>In[15]:</label></p><div>
<pre><span>liftA2</span> <span>::</span> (a <span>-&gt;</span> b <span>-&gt;</span> c)      <span>-&gt;</span> <span>IO</span> a <span>-&gt;</span> <span>IO</span> b <span>-&gt;</span> <span>IO</span> c
<span>liftA3</span> <span>::</span> (a <span>-&gt;</span> b <span>-&gt;</span> c <span>-&gt;</span> d) <span>-&gt;</span> <span>IO</span> a <span>-&gt;</span> <span>IO</span> b <span>-&gt;</span> <span>IO</span> c <span>-&gt;</span> <span>IO</span> d
</pre>
</div>

<p>
These can be thought of like fmap, except they don’t transform the result of
just one side effect, but they combine the results of multiple side effects with
one function, and create a new side effect object that produces the return value
of that function.
This is also common enough that it can be written with two
operators: the <code>&lt;$&gt;</code> we already saw for the first argument, and then <code>&lt;*&gt;</code> for
the rest of the arguments. To check if a user’s home directory contains the user
name, we do
</p>

<p><label>In[16]:</label></p><div>
<pre><span>home_username</span> <span>::</span> <span>IO</span> <span>Bool</span>
<span>home_username</span> <span>=</span> isInfixOf <span>&lt;$&gt;</span> getEnv <span>"LOGNAME"</span> <span>&lt;*&gt;</span> getEnv <span>"HOME"</span>
<span>-- </span><span>equivalent to</span>
<span>-- </span><span>home_username = liftA2 isInfixOf (getEnv "LOGNAME") (getEnv "HOME")</span>
</pre>
</div>

<p>
This has created a new side effect object that will produce true if <code>$LOGNAME</code>
is a part of <code>$HOME</code>, and false otherwise.
</p>
</div>
</div>
<div id="outline-container-intermission--what-s-the-point-">
<h2 id="intermission--what-s-the-point-">Intermission: what’s the point?</h2>
<div id="text-org88fd136">
<p>
I am raving ecstatic about this. Combining the results of side effects through
<code>liftA2</code> and friends is such a fundamental technique that the favicon of this
website is a stylised version of the <code>&lt;*&gt;</code> operator.
</p>

<p>
But the reader may understandably be a little underwhelmed. It seems like we
have only learned to do in Haskell what we can do in Python and every other
programming language already. All popular programming languages let us use the
results of side effects as arguments to other functions. There are already two
reasons we should care about Haskell, though, even before we see what’s to come.
These are refactorability and discipline.
</p>



<p>
Biggest benefit is probably refactorability. We might have the following code
that throws two dice and sums them up:
</p>

<p><label>In[17]:</label></p><div>
<pre><span>sum_dice</span> <span>::</span> <span>IO</span> <span>Int</span>
<span>sum_dice</span> <span>=</span>
  liftA2 (<span>+</span>) (randomRIO(1,6)) (randomRIO(1,6))
</pre>
</div>

<p>
and we think the repetition is annoying, so we put the actual die-tossing code
into a variable.
</p>

<p><label>In[18]:</label></p><div>
<pre><span>sum_dice</span> <span>::</span> <span>IO</span> <span>Int</span>
<span>sum_dice</span> <span>=</span>
  <span>let</span>
    toss_die <span>=</span> randomRIO(1,6)
  <span>in</span>
    liftA2 (<span>+</span>) toss_die toss_die
</pre>
</div>

<p>
If we did this in Python, we would accidentally store the <i>result</i> of the die
toss in the <code>toss_dice</code> variable! If the die lands on 3, we will compute 3+3,
rather than the intention of summing two different tosses. With the way side
effects are first class values in Haskell, we are always free to blindly (!)
extract code into a variable name, and this will never change how the code
runs.<label for="fn.7">7</label><span><sup>7</sup> This is called <i>equational reasoning</i> and it’s incredibly powerful and one of
the things that make Haskell such a strong enterprise language, and so nice to
work with procedural code in.</span>
</p>

<p>
A second benefit is that by being structured in how we allow side effects to
affect subsequent computation, we have a lower risk of accidentally introducing
side effects where they were not intended. We also have greater control over
what can affect what, reducing the risk of interaction bugs.
</p>

<p>
The reader might, for example, argue that the previous refactoring example works
just fine in Python, by using an anonymous function as a faux side effect object:
</p>

<p><label>In[19]:</label></p><div>
<pre><span>def</span> <span>sum_dice</span>():
    <span>toss_die</span> = <span>lambda</span>: random.randint(1, 7)
    <span>return</span> toss_die() + toss_die()
</pre>
</div>

<p>
but this (a) requires being careful in refactoring, (b) does not prevent
accidentally triggering the side effect where it was not intended, and (c)
requires a language feature (<i>sequence points</i>) to disambiguate in which order
side effects get executed. With Haskell, we just don’t have to care. We can rest
easy in knowing that the compiler and libraries have our backs.
</p>
</div>
</div>
<div id="outline-container-sequencea">
<h2 id="sequencea">sequenceA</h2>
<div id="text-org0d35ca6">
<p>
We are starting to see the benefits of side effects as first class values, so
let’s shift to a higher gear. We have seen that Haskell allows us to store side
effect objects in variables without accidentally executing their effects. The
next step is storing these side effect objects in data structures.
</p>

<p>
We could, for example, create a list of three different ways to get the username
of the currently logged in user.
</p>

<p><label>In[20]:</label></p><div>
<pre><span>getting_usernames</span> <span>::</span> [<span>IO</span> (<span>Maybe</span> <span>String</span>)]
<span>getting_usernames</span> <span>=</span> [lookupEnv <span>"USER"</span>, lookupEnv <span>"LOGNAME"</span>, lookupEnv <span>"SUDO_USER"</span>]
</pre>
</div>

<p>
This list cannot be executed for its side effects directly, because the list
itself is not a side effect – it’s a list of side effects. There are library
functions to deal with this, though. One is
</p>

<p><label>In[21]:</label></p><div>
<pre><span>sequenceA</span> <span>::</span> [<span>IO</span> a] <span>-&gt;</span> <span>IO</span> [a]
</pre>
</div>

<p>
This is what we need in this case: it takes a list of side effect objects and
creates a new side effect object that executes all the side effects of the list,
and then produces a list of all the values produced by those side effects. To
make a side effect that produces a list of candidate usernames, we define
</p>

<p><label>In[22]:</label></p><div>
<pre><span>actual_usernames</span> <span>::</span> <span>IO</span> [<span>Maybe</span> <span>String</span>]
<span>actual_usernames</span> <span>=</span> sequenceA getting_usernames
</pre>
</div>

<p>
If we execute this side effect and print the result (either by connecting it up
with <code>print</code> using the <code>&gt;&gt;=</code> operator, or in a <code>do</code> block), then on my system we
get the result
</p>

<p><label>Out[1]:</label></p><pre>[Just "kqr", Just "kqr", Nothing]
</pre>


<p>
Sometimes we have a list of side effects but we don’t care about the value they
produce. This might be the case if we have collected a bunch of log statements
from a pure function. We want to execute their side effects (the actual logging
action) but we don’t care about what the log function itself returns (it is
usually a void or unit-type value.)
</p>

<p><label>In[23]:</label></p><div>
<pre><span>log_statements</span> <span>::</span> [<span>IO</span> <span>()</span>]
<span>log_statements</span> <span>=</span> [
    log <span>Info</span> <span>"Creating user"</span>,
    log <span>Warn</span> <span>"User already found"</span>
    log <span>Info</span> <span>"Updating user"</span>
]
</pre>
</div>

<p>
As a reminder: these function calls to the <code>log</code> function do not cause anything
to be logged. The <code>log</code> function returns a side effect object that, when
executed, makes the logging happen. The <code>log_statements</code> variable contains a
list of such side effect objects – it is not itself a side effect object.
</p>

<p>
To execute these, we can again combine the side effects in the list into one
side effect object with <code>sequenceA</code>. When we do so, we get a side effect object
that produces the value <code>[(), (), ()]</code>. To get the code to type check, we may
have to discard this value. We already know how to do this, because discarding
values is what the <code>*&gt;</code> operator does.
</p>

<p><label>In[24]:</label></p><div>
<pre><span>execute_logged</span> <span>::</span> <span>IO</span> <span>()</span>
<span>execute_logged</span> <span>=</span>
  sequenceA log_statements <span>*&gt;</span> pure <span>()</span>
</pre>
</div>

<p>
When the side effect of <code>execute_logged</code> runs, it will run the side effects of
the log statements and then discard the dummy values produced in the process.
</p>

<p>
Remember that loaded die from before? Now we can check that it indeed always
returns the same number. First we create a list by repeating the same
side effect object an infinite number of times.
</p>

<p><label>In[25]:</label></p><div>
<pre><span>many_loaded_dice</span> <span>::</span> [<span>IO</span> <span>Int</span>]
<span>many_loaded_dice</span> <span>=</span>
  repeat loaded_die
</pre>
</div>

<p>
Then we construct a side effect object that executes the first few of these and
keeps the values they produced.
</p>

<p><label>In[26]:</label></p><div>
<pre><span>some_thrown_dice</span> <span>::</span> <span>IO</span> [<span>Int</span>]
<span>some_thrown_dice</span> <span>=</span>
  sequenceA (take 20 many_loaded_dice)
</pre>
</div>

<p>
If we connect this up with a print (again, <code>do</code> block or the <code>&gt;&gt;=</code>
operator) and execute it, we get
</p>

<p><label>Out[2]:</label></p><pre>[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
</pre>


<p>
We could do the same thing with a better die:
</p>

<p><label>In[27]:</label></p><div>
<pre><span>many_good_dice</span> <span>::</span> [<span>IO</span> <span>Int</span>]
<span>many_good_dice</span> <span>=</span>
  repeat (randomRIO (1,6))

<span>some_thrown_dice</span> <span>::</span> <span>IO</span> [<span>Int</span>]
<span>some_thrown_dice</span> <span>=</span>
  sequenceA (take 20 many_good_dice)
</pre>
</div>

<p>
If we print this once, we get
</p>

<p><label>Out[3]:</label></p><pre>[2,1,4,1,3,2,2,2,1,4,6,4,1,4,6,4,5,3,4,6]
</pre>


<p>
If we print it again, we might get
</p>

<p><label>Out[4]:</label></p><pre>[4,5,3,2,4,2,5,4,6,1,1,5,1,3,6,4,4,5,1,4]
</pre>


<p>
Even though we constructed the list by repeating <i>the same</i> side effect object,
we get a fresh set of random numbers every time the composite side effect object
is executed. This is additional proof that what we store in the list is not the
result of the side effect, but the side effect itself.
</p>

<p>
But also note what we did. We used list functions (<code>repeat</code>, <code>take 20</code>) to
manipulate a data structure of side effect objects as if they were regular
values – because they are! Then we used a side effect manipulation function
(<code>sequenceA</code>) to combine the side effects in the list into one new side effect
object that executes all of them. This is a kind of meta programming, except
it’s not using a special macro language but performed at the level of regular
values.
</p>
</div>
</div>
<div id="outline-container-interlude--convenience-functions">
<h2 id="interlude--convenience-functions">Interlude: convenience functions</h2>
<div id="text-org4d4d886">
<p>
The Haskell standard libraries also contain a few convenience functions to do
what we have done above except easier. For example, when we discarded the value
produced by a side effect, we used <code>object *&gt; pure ()</code>. This exists as a
shortcut function called <code>void</code>:
</p>

<p><label>In[28]:</label></p>

<p>
We could wrap the call in this instead:
</p>

<p><label>In[29]:</label></p><div>
<pre><span>execute_logged</span> <span>::</span> <span>IO</span> <span>()</span>
<span>execute_logged</span> <span>=</span>
  void (sequenceA log_statements)
</pre>
</div>

<p>
But there is an even more convenient way to do it. Many of the functions I will
show have a variant that ends with underscore. These variants throw away the
result. So we could instead have written
</p>

<p><label>In[30]:</label></p><div>
<pre><span>execute_logged</span> <span>::</span> <span>IO</span> <span>()</span>
<span>execute_logged</span> <span>=</span>
  sequenceA_ log_statements
</pre>
</div>

<p>
and this would run the effects and throw away the results. One benefit of using
this variant is that it actually works with slightly more collection types than
the one without underscore but the drawback is, of course, that we don’t get the
results produced, only the side effects.<label for="fn.8">8</label><span><sup>8</sup> See the appendix for more details.</span>
</p>

<p>
Separately, we used list manipulation functions <code>repeat</code> and <code>take 20</code> to create
an appropriately-sized list of side effect objects, and then executed it with
<code>sequenceA</code>. This specific combination is common enough to exist as a library
function
</p>

<p><label>In[31]:</label></p><div>
<pre><span>replicateM</span> <span>::</span> <span>Int</span> <span>-&gt;</span> <span>IO</span> a <span>-&gt;</span> <span>IO</span> [a]
</pre>
</div>

<p>
With this, we can draw 20 loaded dice quite succinctly.
</p>

<p><label>In[32]:</label></p><div>
<pre><span>some_thrown_dice</span> <span>::</span> <span>IO</span> [<span>Int</span>]
<span>some_thrown_dice</span> <span>=</span>
  replicateM 20 loaded_die
</pre>
</div>

<p>
This also exist as a result-discarding variant that runs a side effect object
\(n\) times but does not collect the values produced by the side effect.
</p>

<p><label>In[33]:</label></p><div>
<pre><span>replicateM_</span> <span>::</span> <span>Int</span> <span>-&gt;</span> <span>IO</span> a <span>-&gt;</span> <span>IO</span> <span>()</span>
</pre>
</div>

<p>
Back when I was in university I had a coursemate who had just learned
programming and found the following joke very funny:
</p>

<blockquote>
<p>
Teacher: Write “I will not cheat again” 500 times on the blackboard. That should
get you to learn your lesson.
</p>

<p>
Student: <code>for (int counter = 0; counter &lt; 500; counter++) {
System.out.println("I will not cheat again."); }</code>
</p>
</blockquote>

<p>
I didn’t find it funny – I found it sad. Is this really the type of low-level
programming we are teaching students? Here’s how it should go.
</p>

<blockquote>
<p>
Teacher: Write “I will not cheat again” 500 times on the blackboard. That should
get you to learn your lesson.
</p>

<p>
Student: <code>replicateM_ 500 (putStrLn "I will not cheat again.")</code>
</p>
</blockquote>

<p>
As a programmer, I do not want to babysit my computer and instruct it in exactly
how to count to perform a side effect 500 times. I just want to tell it to
perform the side effect 500 times and the standard libraries should know what
the detailed steps are.
</p>

<p>
Anyway, let’s get back to the good stuff. Now we’re going into advanced
techniques.
</p>
</div>
</div>
<div id="outline-container-traverse">
<h2 id="traverse">traverse</h2>
<div id="text-org1ebf799">
<p>
In a previous example, we had code that amounted to
</p>

<p><label>In[34]:</label></p><div>
<pre><span>usernames</span> <span>::</span> <span>IO</span> [<span>Maybe</span> <span>String</span>]
<span>usernames</span> <span>=</span>
  sequenceA [lookupEnv <span>"USER"</span>, lookupEnv <span>"LOGNAME"</span>, lookupEnv <span>"SUDO_USER"</span>]
</pre>
</div>

<p>
This contains some duplication, namely the application of <code>lookupEnv</code> to each of
the strings. We could write this instead as
</p>

<p><label>In[35]:</label></p><div>
<pre><span>usernames</span> <span>::</span> <span>IO</span> [<span>Maybe</span> <span>String</span>]
<span>usernames</span> <span>=</span>
  sequenceA (fmap lookupEnv [<span>"USER"</span>, <span>"LOGNAME"</span>, <span>"SUDO_USER"</span>])
</pre>
</div>

<p>
relying on the fact that <code>fmap</code> works on lists as well<label for="fn.9">9</label><span><sup>9</sup> For a brief
explanation of this, see the appendix.</span>, but there is a more efficient way to
express this, though, and it’s using the function
</p>

<p><label>In[36]:</label></p><div>
<pre><span>traverse</span> <span>::</span> (a <span>-&gt;</span> <span>IO</span> b) <span>-&gt;</span> [a] <span>-&gt;</span> <span>IO</span> [b]
</pre>
</div>

<p>
which constructs a side effect object that produces the result of applying a
side effectful function to each element in a collection. The above side effect
object could then be constructed as
</p>

<p><label>In[37]:</label></p><div>
<pre><span>usernames</span> <span>::</span> <span>IO</span> [<span>Maybe</span> <span>String</span>]
<span>usernames</span> <span>=</span>
  traverse lookupEnv [<span>"USER"</span>, <span>"LOGNAME"</span>, <span>"SUDO_USER"</span>]
</pre>
</div>

<p>
This is a fairly fundamental operation, and we can define e.g. <code>sequenceA</code> in
terms of <code>traverse</code>:
</p>

<p><label>In[38]:</label></p><div>
<pre><span>sequenceA</span> <span>::</span> [<span>IO</span> a] <span>-&gt;</span> <span>IO</span> [a]
<span>sequenceA</span> <span>=</span> traverse identity
</pre>
</div>

<p>
where <code>identity</code> is the identity function that returns its argument unchanged.
</p>

<p>
As with <code>sequenceA</code>, there exists an underscored version of <code>traverse</code> that
throws away the values produced by the side effect, for cases where we are only
interested in the side effect itself.
</p>

<p><label>In[39]:</label></p><div>
<pre><span>traverse_</span> <span>::</span> (a <span>-&gt;</span> <span>IO</span> b) <span>-&gt;</span> [a] <span>-&gt;</span> <span>IO</span> <span>()</span>
</pre>
</div>

<p>
We can use this e.g. to create a side effect object that emits several log
messages when it executes.
</p>

<p><label>In[40]:</label></p><div>
<pre><span>mass_log</span> <span>::</span> <span>IO</span> <span>()</span>
<span>mass_log</span> <span>=</span>
  traverse_ (log <span>Info</span>) [
    <span>"System startup in experimental mode."</span>
    <span>"This means it will attempt to divine in which order to run startup scripts."</span>
    <span>"The startup procedure may crash if things are performed in the wrong order."</span>
    <span>"Please see the manual for more details."</span>
  ]
</pre>
</div>
</div>
</div>
<div id="outline-container-for">
<h2 id="for">for</h2>
<div id="text-orga458cb5">
<p>
We have learned that when we have a collection of things, and we want to perform
some side effectful work for each of those things, we use <code>traverse</code>. However,
when we call <code>traverse</code> we have to give the function first, and the collection
second. Sometimes it’s convenient to be able to pass the arguments the other way
around, and for this, we have an alias called <code>for</code> that is exactly like
<code>traverse</code> except with its arguments swapped around. In other words, this takes
a collection as its first argument, and the scare-quotes “loop body” last.
</p>

<p><label>In[41]:</label></p><div>
<pre><span>for</span> <span>::</span> [a] <span>-&gt;</span> (a <span>-&gt;</span> <span>IO</span> b) <span>-&gt;</span> <span>IO</span> [b]
</pre>
</div>

<p>
As with <code>traverse</code>, it exists in an underscored version that throws away the
values produced by the side effect.
</p>

<p><label>In[42]:</label></p><div>
<pre><span>for_</span> <span>::</span> [a] <span>-&gt;</span> (a <span>-&gt;</span> <span>IO</span> b) <span>-&gt;</span> <span>IO</span> <span>()</span>
</pre>
</div>

<p>
This swapped-parameters version of <code>traverse</code> is convenient whenever we need
something that resembles a for loop in other languages. The general pattern of
the Haskell <code>for</code> loop is
</p>

<p><label>In[43]:</label></p><div>
<pre><span>for</span> collection <span>$</span> <span>\</span>item <span>-&gt;</span> <span>do</span>
  things
</pre>
</div>

<p>
This, again, highlights how side-effects-as-first-class-values lets us do meta
programming. The <code>for</code> loop is not syntax. There is nothing (other than side
effects) built into the language supporting this construct. It is made entirely
from library functions.
</p>

<p>
My imagination is running dry, so we will use a convoluted example to illustrate
this. We are trying to break weak cryptography, and we have a list of numbers
for which we want to get the largest prime factor of each. This is a pure
function (no side effects) at its core, but we know factorisation is expensive,
and we suspect we will receive the same numbers repeatedly, so we will cache the
results of the computation. Once we involve the cache, the function becomes side
effectful. Here’s a first draft of such a function.
</p>

<p><label>In[44]:</label></p><div>
<pre><span>factorise</span> <span>::</span> [<span>Int</span>] <span>-&gt;</span> <span>IO</span> [(<span>Int</span>, <span>Maybe</span> <span>Int</span>)]
<span>factorise</span> numbers <span>=</span> <span>do</span>
  <span>-- </span><span>Create a mutable variable with an empty dictionary.</span>
  cache <span>&lt;-</span> newIORef M.empty
  <span>-- </span><span>Loop through all numbers we received.</span>
  for numbers <span>$</span> <span>\</span>n <span>-&gt;</span> <span>do</span>
    <span>-- </span><span>Get what's in the cache for this number.</span>
    cached <span>&lt;-</span> M.lookup n <span>&lt;$&gt;</span> readIORef cache

    factor <span>&lt;-</span> <span>case</span> cached <span>of</span>
      <span>-- </span><span>If the cache contained the factor for n, use it</span>
      <span>-- </span><span>as it is.</span>
      <span>Just</span> f <span>-&gt;</span> pure f
      <span>-- </span><span>If the cache did not contain the factor, compute</span>
      <span>-- </span><span>it fresh and cache it.</span>
      <span>Nothing</span> <span>-&gt;</span> <span>do</span>
        <span>let</span> f <span>=</span> greatest_factor n
        modifyIORef cache (M.insert n f)
        pure f

    <span>-- </span><span>If the greatest factor is the number itself, it is</span>
    <span>-- </span><span>prime. Otherwise, it can be divided by factor.</span>
    <span>if</span> factor <span>==</span> n <span>then</span>
      pure (n, <span>Nothing</span>)
    <span>else</span>
      pure (n, <span>Just</span> factor)
</pre>
</div>

<p>
This seems rather … procedural. Even though we get all the nice guarantees of
working with side effectful functions in Haskell, the code itself reads like any
other procedural language would. With Haskell, we get the best of both worlds.
</p>
</div>
</div>
</section>
<section id="outline-container-leaning-into-the-first-classiness-of-effects">
<h2 id="leaning-into-the-first-classiness-of-effects">Leaning into the first classiness of effects</h2>
<div id="text-orge387ca8">
<p>
We can really lean into this and simplify the code further, though.
</p>

<ul>
<li>We create the helper function <code>caching_compute</code> which computes the
greatest factor of a number, inserts it into the cache, and then returns the
computed factor. This allows us to replace the big pattern match with a call
to the <code>maybe</code> function. This works because – you guessed it – side effects
are first class values in Haskell.</li>
<li>We reduce duplication in the last few lines, by recognising that the first
part of the return tuple is always the number we started with, and the second
is either <code>Just factor</code> or <code>Nothing</code> based on a condition.</li>
</ul>

<p><label>In[45]:</label></p><div>
<pre><span>factorise</span> <span>::</span> [<span>Int</span>] <span>-&gt;</span> <span>IO</span> [(<span>Int</span>, <span>Maybe</span> <span>Int</span>)]
<span>factorise</span> numbers <span>=</span>
  <span>let</span>
    caching_compute cache n <span>=</span> <span>do</span>
      <span>let</span> computed_factor <span>=</span> greatest_factor n
      <span>-- </span><span>Cache the computed factor and return it.</span>
      modifyIORef cache (M.insert n computed_factor)
      pure computed_factor
  <span>in</span> <span>do</span>
    cache <span>&lt;-</span> newIORef M.empty
    for numbers <span>$</span> <span>\</span>n <span>-&gt;</span> <span>do</span>
      <span>-- </span><span>Get the cached factor if it exists, otherwise compute it.</span>
      cached <span>&lt;-</span> M.lookup n <span>&lt;$&gt;</span> readIORef cache
      factor <span>&lt;-</span> maybe (caching_compute cache n) pure cached
      <span>-- </span><span>Return n along with a Maybe value containing the factor</span>
      <span>-- </span><span>if the number is composite.</span>
      pure (n, guard (factor <span>/=</span> n) <span>$&gt;</span> factor)
</pre>
</div>

<p>
We’ll note that we don’t actually perform any side effect other than keep a
mutable variable around. There is a special type of side effect object designed
for keeping a mutable variable around, and it’s called <code>State</code>.<label for="fn.10">10</label><span><sup>10</sup> <code>State</code> is
actually just one of many options, depending on what guarantees one wants around
backtracking, multithreading, atomicity, etc. Notably, <code>State</code> is not the
highest-performance alternative, but in our case the factorisation is what takes
time, not state management.</span> We can switch to that type of mutable state instead
of <code>IO</code>, to make it harder to accidentally launch missiles from this function.
</p>

<p>
This will make the <code>cache</code> variable the implicit target of our mutation
(<code>modify</code> and <code>gets</code>), and it will also allow for streaming results. That means
we can plug an infinite list into this function, and it will keep emitting
results one element at a time.<label for="fn.11">11</label><span><sup>11</sup> This depends a little on our choice of data
structure for the cache as well as the type of side effect object we choose for
keeping the mutable variable around. Some combinations will not allow streaming
results, and they tend to have better behaviour and performance characteristics
for finite inputs.</span>
</p>

<p><label>In[46]:</label></p><div>
<pre><span>type</span> <span>FactorCache</span> <span>=</span> <span>M.Map</span> <span>Int</span> <span>Int</span>

<span>factorise</span> <span>::</span> [<span>Int</span>] <span>-&gt;</span> <span>State</span> <span>FactorCache</span> [(<span>Int</span>, <span>Maybe</span> <span>Int</span>)]
<span>factorise</span> numbers <span>=</span>
  for numbers <span>$</span> <span>\</span>n <span>-&gt;</span>
    <span>let</span>
      <span>-- </span><span>Rely on laziness to not compute this value other than</span>
      <span>-- </span><span>where it is used, which is only when the cache is dry.</span>
      computed <span>=</span> greatest_factor n
    <span>in</span> <span>do</span>
      cached <span>&lt;-</span> gets (M.lookup n)
      factor <span>&lt;-</span> maybe (modify (M.insert n computed) <span>$&gt;</span> computed)
        pure cached
      pure (n, guard (factor <span>/=</span> n) <span>$&gt;</span> factor)
</pre>
</div>

<p>
Since we are no longer using <code>IO</code>, we cannot extract the result from this side
effectful function the way we are used to. Instead, can convert its result to a
pure value with the <code>evalState</code> function, seeding the state with an empty
dictionary:
</p>

<p><label>In[47]:</label></p><div>
<pre><span>factored</span> <span>::</span> [(<span>Int</span>, <span>Maybe</span> <span>Int</span>)]
<span>factored</span> <span>=</span> evalState (factorise some_numbers) M.empty
</pre>
</div>

<p>
The result here is a pure, streaming list, meaning we can feed this function an
infinite sequence of numbers and it will keep categorising them – although it
will go faster and faster as its cache fills up.
</p>

<p>
This also illustrates another reason to go for something like <code>State</code> rather
than <code>IO</code>: we can guarantee that any side effects executed as part of a <code>State</code>
object are only visible within that <code>State</code> object, which in turn means we can
convert the side effectful function to a pure function. Haskell is happy to let
us have side effects inside pure functions – as long as we can prove to the
compiler that the side effects will not affect anything outside of those
functions.<label for="fn.12">12</label><span><sup>12</sup> There are many of these specialised side effect types in Haskell
which we can use to get local side effects but which look pure from the
outside.</span>
</p>

<p>
Since <code>numbers</code> is given as an argument to this function and then immediately
used as an argument to <code>for</code>, I’d be tempted at this point to actually go back
to <code>traverse</code> and eta reduce, resulting in the following definition.
</p>

<p><label>In[48]:</label></p><div>
<pre><span>factorise</span> <span>::</span> [<span>Int</span>] <span>-&gt;</span> <span>State</span> <span>FactorCache</span> [(<span>Int</span>, <span>Maybe</span> <span>Int</span>)]
<span>factorise</span> <span>=</span> traverse <span>$</span> <span>\</span>n <span>-&gt;</span>
  <span>let</span>
    computed <span>=</span> greatest_factor n
  <span>in</span> <span>do</span>
    cached <span>&lt;-</span> gets (M.lookup n)
    factor <span>&lt;-</span> maybe (modify (M.insert n computed) <span>$&gt;</span> computed)
      pure cached
    pure (n, guard (factor <span>/=</span> n) <span>$&gt;</span> factor)
</pre>
</div>

<p>
This no longer looks anything like procedural code in other languages. This is
procedural on a higher level: it’s defining a stateful traversal. A stateful
traversal is a distinctly procedural operation, but most other procedural
languages don’t have support for defining stateful traversals. Haskell does,
because Haskell is the greatest procedural language in the world.
</p>
</div>
</section>
<section id="outline-container-things-you-never-need-to-care-about">
<h2 id="things-you-never-need-to-care-about">Things you never need to care about</h2>
<div id="text-org6e7b6ae">
<p>
There are some historic functions you might run across in this context. You
never need these, and you can almost always translate them into their modern,
better equivalents.
</p>

<ul>
<li><code>&gt;&gt;</code> is an old name for <code>*&gt;</code>.</li>
<li><code>return</code> is an old name for <code>pure</code>.</li>
<li><code>map</code> and <code>liftM</code> are old names for <code>fmap</code>.</li>
<li><code>liftM2</code>, <code>liftM3</code>, etc. are old names for <code>liftA2</code>, <code>liftA3</code>, etc.</li>
<li><code>ap</code> is an old name for the <code>&lt;*&gt;</code> operator.</li>
<li><code>msum</code> is an old name for <code>asum</code>.</li>
<li><code>sequence</code> and <code>sequence_</code> are old names for <code>sequenceA</code> and <code>sequenceA_</code>.</li>
<li><code>mapM</code> and <code>mapM_</code> are old names for <code>traverse</code> and <code>traverse_</code>.</li>
<li><code>forM</code> and <code>forM_</code> are old names for <code>for</code> and <code>for_</code>.</li>
</ul>

<p>
Back in the dark ages of the 1990s, we thought monads were the greatest thing
since sorting machines for punch cards. It turns out it is possible extract a
highly useful subset of monads, called <i>applicative functors</i>, and they are
responsible for many of the cool things we did with monads. These old names
generally come from the time before we learned about applicative functors.
</p>
</div>
</section>
<section id="outline-container-appendix-a--avoiding-success-and-uselessness">
<h2 id="appendix-a--avoiding-success-and-uselessness">Appendix A: Avoiding success and uselessness</h2>
<div id="text-org1320073">
<p>
It is sometimes said the Haskell community is ready to do anything to avoid
success. This is a misreading of “avoid success at all costs”. What the phrase
really means is that some languages are ready to sacrifice their values to
become more successful – they aim for success at all costs – and Haskell does
not. It prefers to stick to its values rather than chucking them out for a
moment of fame.
</p>

<p>
“Haskell is useless” was said in a discussion on how different programming
languages approach giving authority to the programmer. At the time it was said,
the popular approach to programming language design was to assume that the
programmer was always right, good, and should be given maximum authority over
their code.<label for="fn.13">13</label><span><sup>13</sup> Think <abbr>php</abbr>, Ruby, Python 2, JavaScript.</span> It has long been
recognised that this sort of freedom often leads to programmers shooting
themselves in the foot, so languages restrict this flexibility by adding
prohibitions into their design. The idea is “you are allowed to do everything
except X, Y, Z.” Some examples:
</p>

<ul>
<li>In C, we can no longer jump to abitrary addresses like we could in
assembly.<label for="fn.14">14</label><span><sup>14</sup> Popular C compilers do have support for this, but it’s not in
the language standard.</span></li>
<li>In Ada, we can no longer think of a pointer as a trenchcoated integer.</li>
<li>In Java, we are no longer allowed to manually deallocate memory.</li>
<li>In Python 3, we can no longer treat a sequence of bytes as text.</li>
</ul>

<p>
With every generation, more restrictions are piled onto previous ones, making
the language safer, but also less powerful – or, some would say, less useful.
</p>

<p>
Haskell approached this from the other direction. It started by saying no to
arbitrary side effects: when computing a return value, a function is only
allowed to rely on its arguments, nothing else. Functions cannot read from the
system environment, and certainly not write to it. This eliminates a large class
of safety problems, but it also makes the language completely useless for almost
everything practical.
</p>

<p>
Then Haskell went on and found a way to allow code to describe side effects
without actually executing them in such a way that they can be executed in the
right order by an external runtime, and Haskell gained some usefulness. This is
in contrast to other languages that started out useful but lost some of their
usefulness with time, in the name of safety: Haskell started out useless, but
has since gained usefulness.
</p>
</div>
</section>
<section id="outline-container-appendix-b--why-fmap-maps-over-both-side-effects-and-lists">
<h2 id="appendix-b--why-fmap-maps-over-both-side-effects-and-lists">Appendix B: Why fmap maps over both side effects and lists</h2>
<div id="text-org78141c3">
<p>
We have already seen that
</p>

<p><label>In[49]:</label></p><div>
<pre><span>fmap</span> <span>::</span> (a <span>-&gt;</span> b) <span>-&gt;</span> <span>IO</span> a <span>-&gt;</span> <span>IO</span> b
</pre>
</div>

<p>
but it is <i>equally true</i> that
</p>

<p><label>In[50]:</label></p><div>
<pre><span>fmap</span> <span>::</span> (a <span>-&gt;</span> b) <span>-&gt;</span> [a] <span>-&gt;</span> [b]
</pre>
</div>

<p>
I.e. <code>fmap</code> can take a pure function and apply it to all elements of a list.
</p>

<p>
The way it works is that <code>fmap</code> is not written to work specifically with side
effects, or lists, or anything else. It is written to work against anything that
is a functor. Its most general type signature is actually
</p>

<p><label>In[51]:</label></p><div>
<pre><span>fmap</span> <span>::</span> <span>Functor</span> f <span>=&gt;</span> (a <span>-&gt;</span> b) <span>-&gt;</span> f a <span>-&gt;</span> f b
</pre>
</div>

<p>
The name <i>functor</i> is a bit nondescriptive, but we can think of it as the name
for all types that support being “mapped over”, in some sense.
</p>

<ul>
<li>Mapping over a side effect object means transforming the result it produces.</li>
<li>Mapping over a list means transforming each element of the list.</li>
<li>Mapping over a nullable value means transforming the value of it, if it exists,
otherwise doing nothing.</li>
</ul>

<p>
Lists, side effect objects, and nullable values are, therefore, functors. Thus,
they all support the <code>fmap</code> operation.
</p>
</div>
</section>
<section id="outline-container-appendix-c--foldable-and-traversable">
<h2 id="appendix-c--foldable-and-traversable">Appendix C: Foldable and Traversable</h2>
<div id="text-orga432767">
<p>
The result-preserving variants of the functions we’ve discussed – <code>sequenceA</code>,
<code>traverse</code>, etc. – guarantee that the data structure produced by side effect
they create will have the same shape as the original data structure we passed
in. This is easy e.g. in the case of a list, because given the same number of
items, the list has the same shape regardless of what we put into it. However,
for some data structures, this is a more severe requirement. Typical examples
are sets and search trees: their structure depends on their contents. When we
<code>traverse</code> a search tree and construct a new search tree with the values
produced by the side effect, we might end up getting a completely different tree
shape than what we started from.
</p>

<p>
In contrast, if we are not interested in getting back the values produced by
side effects, we don’t need to be able to reconstruct the same data structure we
started with. All that takes is being able to iterate the elements of the data
structure, and this can be supported by more data structures – including sets
and search trees. This is why <code>sequenceA_</code>, <code>traverse_</code>, and friends can work
with more collection types.
</p>

<p>
One hack if we want the values produced by the side effect, but do not care
about the structure, is to first convert the collection to a list (this only
requires being able to iterate the collection) and then call <code>traverse</code> on that
list. Then we have retained the results, but lost the original structure of the
collection. Such is life if we work with structures that do not support traversal.
</p>

<p>
The technical names here are <i>foldable</i> (can produce elements one at a time in a
specified order) and <i>traversable</i> (can reconstruct its structure even when
given new elements.) All traversables are foldable, but not all foldables are
traversable.
</p>
</div>
</section>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The "35-cent" Commodore 64 softmodem (107 pts)]]></title>
            <link>http://oldvcr.blogspot.com/2025/01/the-35-cent-commodore-64-softmodem.html</link>
            <guid>42754057</guid>
            <pubDate>Sun, 19 Jan 2025 05:42:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://oldvcr.blogspot.com/2025/01/the-35-cent-commodore-64-softmodem.html">http://oldvcr.blogspot.com/2025/01/the-35-cent-commodore-64-softmodem.html</a>, See on <a href="https://news.ycombinator.com/item?id=42754057">Hacker News</a></p>
Couldn't get http://oldvcr.blogspot.com/2025/01/the-35-cent-commodore-64-softmodem.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Forgejo: A self-hosted lightweight software forge (342 pts)]]></title>
            <link>https://forgejo.org/</link>
            <guid>42753523</guid>
            <pubDate>Sun, 19 Jan 2025 04:15:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://forgejo.org/">https://forgejo.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42753523">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>  <div> <hgroup>  <p>
Beyond coding.
<span>We forge.</span> </p> </hgroup> <div> <picture> <source srcset="
								https://forgejo.org/_astro/mascot-dark.1omhhgvT_1wP5Ng.webp 407w,
								https://forgejo.org/_astro/mascot-dark.1omhhgvT_FT0Ui.webp 814w,
								https://forgejo.org/_astro/mascot-dark.1omhhgvT_1RR3an.webp 1629w,
							" type="image/webp" sizes="(max-width: 767px) 407px, (max-width: 1479px) 814px, 1629px"> <source srcset="
								https://forgejo.org/_astro/mascot-dark.1omhhgvT_Z1a8nnm.png 407w,
								https://forgejo.org/_astro/mascot-dark.1omhhgvT_Z214sgk.png 814w,
								https://forgejo.org/_astro/mascot-dark.1omhhgvT_ZAasCY.png 1629w,
							" type="image/png" sizes="(max-width: 767px) 407px, (max-width: 1479px) 814px, 1629px"> <img src="https://forgejo.org/_astro/mascot-dark.1omhhgvT_Zm0N2n.webp" alt="" loading="eager" width="1629" height="1273" decoding="async"> </picture> </div> <div> <p> <span>Forgejo</span>
is a self-hosted lightweight software forge.<br>
Easy to install and low maintenance, it just does the job.
</p> <p>
Brought to you by an inclusive community under the umbrella of
<a href="https://docs.codeberg.org/getting-started/what-is-codeberg/#what-is-codeberg-e.v.%3F">Codeberg e.V.</a>, a democratic non-profit organization, Forgejo can be trusted to be exclusively Free Software. You can
						create an account on
<a href="https://codeberg.org/">Codeberg</a>
and
<a href="https://codeberg.org/forgejo-contrib/delightful-forgejo#public-instances">other instances</a>
or download it to self-host your own. It focuses on security, scaling, federation and privacy. Learn more about
<a href="https://forgejo.org/compare/">how it compares with other forges</a>.
</p>  </div> </div> <div id="features"> <div> <!-- <p class="text-base mb-4 text-primary-600 dark:text-steel-200 font-semibold tracking-wide uppercase">
				Highlights
			</p> --> <h2>
Forge great software with Forgejo
</h2> <p>
Take back control of your software development process, self-host your projects and get everyone involved in
				delivering quality software on the same page.
</p> </div> <div> <div> <div> <h3> Simple software project management </h3> <p><strong>Ease of use</strong> is important to get things done efficiently. Forgejo’s user experience is designed for <strong>collaboration</strong> and <strong>productivity</strong>.</p> </div><div> <h3> Self-hosted alternative to GitHub </h3> <p><strong>Liberate your software</strong> from proprietary shackles. Forgejo offers a familiar environment to GitHub users, allowing smooth transition to a <strong>platform you own</strong>.</p> </div><div> <h3> Easy to install and maintain </h3> <p>Hosting your own software forge does not require expert skills. With Forgejo you can control your server with <strong>minimal effort</strong>.</p> </div> </div><div> <div> <h3> Lightweight and performant </h3> <p>With a <strong>rich feature set</strong>, Forgejo still has a <strong>low server profile</strong> and requires <strong>an order of magnitude less resources</strong> than other forges.</p> </div><div> <h3> Guaranteed 100% Free Software </h3> <p>Forgejo will always be <strong>Free and Open Source Software</strong>. Furthermore we exclusively use Free Software for our own project development.</p> </div><div> <h3> Beyond coding, we forge ahead </h3> <p>An exciting future awaits. We will innovate the Software Forge and enable <strong>collaborative</strong> software development facilitated by <strong>decentralized</strong> platforms.</p> </div> </div> </div> </div> <div> <h2>
Get Involved
</h2> <p> <strong>
Forgejo consists of motivated people, and we are looking forward to
<a href="https://forgejo.org/docs/next/contributor/">your contribution</a> </strong>.<br>
Feel free to help in the domains of
<a href="https://forgejo.org/docs/next/contributor/localization/">localization</a>,
<a href="https://codeberg.org/forgejo/forgejo/issues">code, federation, releases management</a>,
<a href="https://codeberg.org/forgejo/user-research/">user research</a>,
<a href="https://codeberg.org/forgejo/design">UX and usability</a>,
<a href="https://codeberg.org/forgejo/code-of-conduct/issues">community management</a>,
<a href="https://codeberg.org/forgejo/docs/issues">documentation</a>,
<a href="https://codeberg.org/forgejo/website/issues">web design</a>,
<a href="https://codeberg.org/forgejo/governance/issues">governance</a> and more.
</p> <p> <a href="https://codeberg.org/forgejo/forgejo" target="_blank" rel="noopener"> <svg width="1em" height="1em" viewBox="0 0 24 24" data-icon="tabler:git-merge">  <use xlink:href="#ai:tabler:git-merge"></use>  </svg> Contribute on Codeberg
</a> <a href="https://liberapay.com/forgejo" target="_blank" rel="noopener"> <svg width="1em" height="1em" viewBox="0 0 24 24" data-icon="mdi:heart">  <symbol id="ai:mdi:heart"><path fill="currentColor" d="m12 21.35l-1.45-1.32C5.4 15.36 2 12.27 2 8.5C2 5.41 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.08C13.09 3.81 14.76 3 16.5 3C19.58 3 22 5.41 22 8.5c0 3.77-3.4 6.86-8.55 11.53z"></path></symbol><use xlink:href="#ai:mdi:heart"></use>  </svg> Donate
</a> </p> </div>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[TikTok goes dark in the US (1151 pts)]]></title>
            <link>https://techcrunch.com/2025/01/18/tiktok-goes-dark-in-the-u-s/</link>
            <guid>42753396</guid>
            <pubDate>Sun, 19 Jan 2025 03:51:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2025/01/18/tiktok-goes-dark-in-the-u-s/">https://techcrunch.com/2025/01/18/tiktok-goes-dark-in-the-u-s/</a>, See on <a href="https://news.ycombinator.com/item?id=42753396">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
		<div>
			<div>
<p id="speakable-summary">TikTok has gone dark in the U.S., the result of a federal law that bans the popular short-form video app for millions of Americans — at least for now.</p>

<p>TikTok users began receiving a message about the ban around 10:30 p.m. Eastern. As of Saturday evening, the app was also no longer available in the Apple or Google Play app store.</p>







<p>“Sorry, TikTok isn’t available right now,” the message reads. “A law banning TikTok has been enacted in the U.S. Unfortunately, that means you can’t use TikTok for now.”</p>

<p>The message also suggests this may only be a temporary disappearance. Tiktok credits President-elect Donald Trump for indicating “he will work with us on a solution to reinstate TikTok once he takes office,” with users urged to “stay tuned!”</p>

<figure><img loading="lazy" decoding="async" width="1796" height="1264" src="https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?w=680" alt="" srcset="https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png 1796w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=150,106 150w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=300,211 300w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=768,541 768w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=680,479 680w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=1200,845 1200w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=1280,901 1280w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=430,303 430w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=720,507 720w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=900,633 900w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=800,563 800w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=1536,1081 1536w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=668,470 668w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=533,375 533w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=877,617 877w, https://techcrunch.com/wp-content/uploads/2025/01/Screenshot-2025-01-18-at-8.44.16PM.png?resize=708,498 708w" sizes="auto, (max-width: 1796px) 100vw, 1796px"></figure>

<p>The company warned earlier this week the app’s disappearance was imminent, <a href="https://techcrunch.com/2025/01/18/tiktok-says-it-will-go-dark-sunday-unless-biden-offers-definitive-statement/">saying Friday that it would “go dark”</a> unless President Joe Biden’s administration made a “definitive statement” that it wouldn’t enforce the ban.</p>

<p>Biden signed the law in April, requiring TikTok’s owner ByteDance to sell the app or see it banned in the United States, due to concerns over potential Chinese surveillance and propaganda. And while efforts to force ByteDance to divest go back to Trump’s first administration, he has taken a very different tone recently. Trump <a href="https://techcrunch.com/2024/12/28/trump-asks-supreme-court-to-pause-imminent-tiktok-ban/">asked the Supreme Court to delay the ban</a> and said he would <a rel="nofollow" href="https://www.nbcnews.com/politics/donald-trump/trump-likely-give-tiktok-90-day-extension-avoid-ban-rcna188258">“most likely”</a> give the company a 90-day extension.</p>

<p>And while the Supreme Court issued a ruling <a href="https://techcrunch.com/2025/01/17/supreme-court-upholds-tiktok-ban/">upholding the law Friday</a>, the Biden administration seemed inclined to<a href="https://techcrunch.com/2025/01/18/tiktok-says-it-will-go-dark-sunday-unless-biden-offers-definitive-statement/"> leave the app’s fate in the hands of the next president</a>. White House Press Secretary Karine Jean-Pierre noted that with Sunday being Biden’s last day in office, “actions to implement the law simply must fall to the next Administration.” Deputy Attorney General Lisa Monaco issuing a similar statement that “the next phase of this effort — implementing and ensuring compliance with the law after it goes into effect on January 19 — will be a process that plays out over time.”</p>


<p>TikTok, however, suggested that this was not enough to assurance for “critical service providers” to continue listing or hosting the app in the US, unless the Biden administration made the aforementioned “definitive statement.” Jean-Pierre called TikTok’s response “a stunt” and claimed there’s “no reason for TikTok or other companies to take actions in the next few days before the Trump administration takes office on Monday.”</p>

<p>Stunt or not, TikTok is gone for now.</p>
</div>

			

			


			
			
			

			




			
			
			

			



			
<div>
			
<div>
	
	
	
	

	
<div>
	<p>
		Kyle Wiggers is a senior reporter at TechCrunch with a special interest in artificial intelligence. His writing has appeared in VentureBeat and Digital Trends, as well as a range of gadget blogs including Android Police, Android Authority, Droid-Life, and XDA-Developers. He lives in Brooklyn with his partner, a piano educator, and dabbles in piano himself. occasionally — if mostly unsuccessfully.	</p>
</div>


	
	<p>
		<a data-ctatext="View Bio" data-destinationlink="https://techcrunch.com/author/kyle-wiggers/" data-event="button" href="https://techcrunch.com/author/kyle-wiggers/">View Bio <svg style="width: 1em;" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path fill="var(--c-svg, currentColor)" d="M16.5 12 9 19.5l-1.05-1.05L14.4 12 7.95 5.55 9 4.5z"></path></svg></a>
	</p>
	
</div>
			
<div>
	
	
	
	

	
<div>
	<p>Anthony Ha is TechCrunch’s weekend editor. Previously, he worked as a tech reporter at Adweek, a senior editor at VentureBeat, a local government reporter at the Hollister Free Lance, and vice president of content at a VC firm. He lives in New York City.	</p>
</div>


	
	<p>
		<a data-ctatext="View Bio" data-destinationlink="https://techcrunch.com/author/anthony-ha/" data-event="button" href="https://techcrunch.com/author/anthony-ha/">View Bio <svg style="width: 1em;" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path fill="var(--c-svg, currentColor)" d="M16.5 12 9 19.5l-1.05-1.05L14.4 12 7.95 5.55 9 4.5z"></path></svg></a>
	</p>
	
</div>
	</div>


			


		</div>
		

		
		<div id="wp-block-techcrunch-most-popular-posts__heading">
<h2 id="h-most-popular">Most Popular</h2>

</div>
		
	</div><div>
		<div>
	<div>
		<div>
			<h3>Newsletters</h3>
			
		</div>
		<p>Subscribe for the industry’s biggest tech news</p>
	</div>
	<form method="POST" action="/">
		
	</form>
	
</div>


		
		<h2>Related</h2>
		

		
		
		

		
		<div>

<h2>Latest in Social</h2>




</div>
		

	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Yek: Serialize your code repo (or part of it) to feed into any LLM (177 pts)]]></title>
            <link>https://github.com/bodo-run/yek</link>
            <guid>42753302</guid>
            <pubDate>Sun, 19 Jan 2025 03:24:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/bodo-run/yek">https://github.com/bodo-run/yek</a>, See on <a href="https://news.ycombinator.com/item?id=42753302">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto"><code>yek</code></h2><a id="user-content-yek" aria-label="Permalink: yek" href="#yek"></a></p>
<p dir="auto">A <a href="#performance">fast</a> Rust based tool to read text-based files in a repository or directory, chunk them, and serialize them for LLM consumption. By default, the tool:</p>
<ul dir="auto">
<li>Uses <code>.gitignore</code> rules to skip unwanted files.</li>
<li>Uses the Git history to infer what files are important.</li>
<li>Infers additional ignore patterns (binary, large, etc.).</li>
<li>Splits content into chunks based on either approximate "token" count or byte size.</li>
<li>Automatically detects if output is being piped and streams content instead of writing to files.</li>
<li>Supports processing multiple directories in a single command.</li>
<li>Configurable via a <code>yek.toml</code> file.</li>
</ul>
<p dir="auto">Yek (<a href="https://fa.wikipedia.org/wiki/%DB%B1" rel="nofollow">يک</a>) means "One" in Farsi/Persian.</p>
<p dir="auto">Consider having a simple repo like this:</p>
<div data-snippet-clipboard-copy-content=".
├── README.md
├── src
│   ├── main.rs
│   └── utils.rs
└── tests
    └── test.rs"><pre><code>.
├── README.md
├── src
│   ├── main.rs
│   └── utils.rs
└── tests
    └── test.rs
</code></pre></div>
<p dir="auto">Running <code>yek</code> in this directory will produce a single file and write it to the temp directory with the following content:</p>
<div dir="auto" data-snippet-clipboard-copy-content=">>>> README.md
... content of README.md ...
>>>> tests/test.rs
... content of tests/test.rs ...
>>>> src/utils.rs
... content of src/utils.rs ...
>>>> src/main.rs
... rest of the file ..."><pre>&gt;&gt;&gt;&gt; README.md
... content of README.md ...
&gt;&gt;&gt;&gt; tests/test.rs
... content of tests/test.rs ...
&gt;&gt;&gt;&gt; src/utils.rs
... content of src/utils.rs ...
&gt;&gt;&gt;&gt; src/main.rs
... rest of the file ...</pre></div>
<blockquote>
<p dir="auto"><code>yek</code> will prioritize more important files to come last in the output. This is useful for LLM consumption.</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">For Unix-like systems (macOS, Linux):</p>

<div dir="auto" data-snippet-clipboard-copy-content="curl -fsSL https://bodo.run/yek.sh | bash"><pre>curl -fsSL https://bodo.run/yek.sh <span>|</span> bash</pre></div>

<p dir="auto">For Windows (PowerShell):</p>

<div dir="auto" data-snippet-clipboard-copy-content="irm https://bodo.run/yek.ps1 | iex"><pre>irm https:<span>//</span>bodo.run<span>/</span>yek.ps1 <span>|</span> iex</pre></div>

<p dir="auto"><h3 tabindex="-1" dir="auto">From Source</h3><a id="user-content-from-source" aria-label="Permalink: From Source" href="#from-source"></a></p>
<ol dir="auto">
<li><a href="https://www.rust-lang.org/tools/install" rel="nofollow">Install Rust</a>.</li>
<li>Clone this repository.</li>
<li>Run <code>make macos</code> or <code>make linux</code> to build for your platform (both run <code>cargo build --release</code>).</li>
<li>Add to your PATH:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="export PATH=$(pwd)/target/release:$PATH"><pre><span>export</span> PATH=<span><span>$(</span>pwd<span>)</span></span>/target/release:<span>$PATH</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><code>yek</code> has sensible defaults, you can simply run <code>yek</code> in a directory to serialize the entire repository. It will serialize all files in the repository into chunks of 10MB by default. The file will be written to the temp directory and file path will be printed to the console.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Examples</h3><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto">Process current directory and write to temp directory:</p>

<p dir="auto">Pipe output to clipboard (macOS):</p>

<p dir="auto">Cap the max size to 128K tokens and only process the <code>src</code> directory:</p>
<div dir="auto" data-snippet-clipboard-copy-content="yek --max-size 128K --tokens src/"><pre>yek --max-size 128K --tokens src/</pre></div>
<p dir="auto">Cap the max size to 100KB and only process the <code>src</code> directory, writing to a specific directory:</p>
<div dir="auto" data-snippet-clipboard-copy-content="yek --max-size 100KB --output-dir /tmp/yek src/"><pre>yek --max-size 100KB --output-dir /tmp/yek src/</pre></div>
<p dir="auto">Process multiple directories:</p>

<p dir="auto">Process multiple repositories:</p>
<div dir="auto" data-snippet-clipboard-copy-content="yek ~/code/project1 ~/code/project2"><pre>yek <span>~</span>/code/project1 <span>~</span>/code/project2</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Help</h3><a id="user-content-help" aria-label="Permalink: Help" href="#help"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="yek --help

Repository content chunker and serializer for LLM consumption

Usage: yek [OPTIONS] [directories]...

Arguments:
  [directories]...  Directories to process [default: .]

Options:
      --max-size <max-size>      Maximum size per chunk (e.g. '10MB', '128KB', '1GB') [default: 10MB]
      --tokens                   Count size in tokens instead of bytes
      --debug                    Enable debug output
      --output-dir <output-dir>  Output directory for chunks
  -h, --help                     Print help
  -V, --version                  Print version"><pre>yek --help

Repository content chunker and serializer <span>for</span> LLM consumption

Usage: yek [OPTIONS] [directories]...

Arguments:
  [directories]...  Directories to process [default: .]

Options:
      --max-size <span>&lt;</span>max-size<span>&gt;</span>      Maximum size per chunk (e.g. <span><span>'</span>10MB<span>'</span></span>, <span><span>'</span>128KB<span>'</span></span>, <span><span>'</span>1GB<span>'</span></span>) [default: 10MB]
      --tokens                   Count size <span>in</span> tokens instead of bytes
      --debug                    Enable debug output
      --output-dir <span>&lt;</span>output-dir<span>&gt;</span>  Output directory <span>for</span> chunks
  -h, --help                     Print <span>help</span>
  -V, --version                  Print version</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Configuration File</h2><a id="user-content-configuration-file" aria-label="Permalink: Configuration File" href="#configuration-file"></a></p>
<p dir="auto">You can place a file called <code>yek.toml</code> at your project root or pass a custom path via <code>--config</code>. The configuration file allows you to:</p>
<ol dir="auto">
<li>Add custom ignore patterns</li>
<li>Define file priority rules for processing order</li>
<li>Add additional binary file extensions to ignore (extends the built-in list)</li>
<li>Configure Git-based priority boost</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Example <code>yek.toml</code></h3><a id="user-content-example-yektoml" aria-label="Permalink: Example yek.toml" href="#example-yektoml"></a></p>
<p dir="auto">This is optional, you can configure the <code>yek.toml</code> file at the root of your project.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Add patterns to ignore (in addition to .gitignore)
[ignore_patterns]
patterns = [
  &quot;node_modules/&quot;,
  &quot;\\.next/&quot;,
  &quot;my_custom_folder/&quot;
]

# Configure Git-based priority boost (optional)
git_boost_max = 50  # Maximum score boost based on Git history (default: 100)

# Define priority rules for processing order
# Higher scores are processed first
[[priority_rules]]
score = 100
patterns = [&quot;^src/lib/&quot;]

[[priority_rules]]
score = 90
patterns = [&quot;^src/&quot;]

[[priority_rules]]
score = 80
patterns = [&quot;^docs/&quot;]

# Add additional binary file extensions to ignore
# These extend the built-in list (.jpg, .png, .exe, etc.)
binary_extensions = [
  &quot;.blend&quot;,  # Blender files
  &quot;.fbx&quot;,    # 3D model files
  &quot;.max&quot;,    # 3ds Max files
  &quot;.psd&quot;,    # Photoshop files
]"><pre><span><span>#</span> Add patterns to ignore (in addition to .gitignore)</span>
[<span>ignore_patterns</span>]
<span>patterns</span> = [
  <span><span>"</span>node_modules/<span>"</span></span>,
  <span><span>"</span><span>\\</span>.next/<span>"</span></span>,
  <span><span>"</span>my_custom_folder/<span>"</span></span>
]

<span><span>#</span> Configure Git-based priority boost (optional)</span>
<span>git_boost_max</span> = <span>50</span>  <span><span>#</span> Maximum score boost based on Git history (default: 100)</span>

<span><span>#</span> Define priority rules for processing order</span>
<span><span>#</span> Higher scores are processed first</span>
[[<span>priority_rules</span>]]
<span>score</span> = <span>100</span>
<span>patterns</span> = [<span><span>"</span>^src/lib/<span>"</span></span>]

[[<span>priority_rules</span>]]
<span>score</span> = <span>90</span>
<span>patterns</span> = [<span><span>"</span>^src/<span>"</span></span>]

[[<span>priority_rules</span>]]
<span>score</span> = <span>80</span>
<span>patterns</span> = [<span><span>"</span>^docs/<span>"</span></span>]

<span><span>#</span> Add additional binary file extensions to ignore</span>
<span><span>#</span> These extend the built-in list (.jpg, .png, .exe, etc.)</span>
<span>binary_extensions</span> = [
  <span><span>"</span>.blend<span>"</span></span>,  <span><span>#</span> Blender files</span>
  <span><span>"</span>.fbx<span>"</span></span>,    <span><span>#</span> 3D model files</span>
  <span><span>"</span>.max<span>"</span></span>,    <span><span>#</span> 3ds Max files</span>
  <span><span>"</span>.psd<span>"</span></span>,    <span><span>#</span> Photoshop files</span>
]</pre></div>
<p dir="auto">All configuration keys are optional. By default:</p>
<ul dir="auto">
<li>No extra ignore patterns</li>
<li>All files have equal priority (score: 1)</li>
<li>Git-based priority boost maximum is 100</li>
<li>Common binary file extensions are ignored (.jpg, .png, .exe, etc. - see source for full list)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Performance</h2><a id="user-content-performance" aria-label="Permalink: Performance" href="#performance"></a></p>
<p dir="auto"><code>yek</code> is fast. It's written in Rust and does many things in parallel to speed up processing.</p>
<p dir="auto">Here is a benchmark comparing it to <a href="https://github.com/jxnl/repomix">Repomix</a> serializing the <a href="https://github.com/vercel/next.js">Next.js</a> project:</p>
<div dir="auto" data-snippet-clipboard-copy-content="time yek
Executed in    5.19 secs    fish           external
   usr time    2.85 secs   54.00 micros    2.85 secs
   sys time    6.31 secs  629.00 micros    6.31 secs"><pre><span>time</span> yek
Executed <span>in</span>    5.19 secs    fish           external
   usr <span>time</span>    2.85 secs   54.00 micros    2.85 secs
   sys <span>time</span>    6.31 secs  629.00 micros    6.31 secs</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="time repomix
Executed in   22.24 mins    fish           external
   usr time   21.99 mins    0.18 millis   21.99 mins
   sys time    0.23 mins    1.72 millis    0.23 mins"><pre><span>time</span> repomix
Executed <span>in</span>   22.24 mins    fish           external
   usr <span>time</span>   21.99 mins    0.18 millis   21.99 mins
   sys <span>time</span>    0.23 mins    1.72 millis    0.23 mins</pre></div>
<p dir="auto"><code>yek</code> is <strong>230x faster</strong> than <code>repomix</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Roadmap</h2><a id="user-content-roadmap" aria-label="Permalink: Roadmap" href="#roadmap"></a></p>
<p dir="auto">See <a href="https://github.com/bodo-run/yek/issues?q=type:%22Feature%22">proposed features</a>. I am open to accepting new feature requests. Please write a detailed proposal to discuss new features.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">MIT</p>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>