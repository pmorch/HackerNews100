<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Wed, 16 Apr 2025 14:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[CVE Foundation Launched to Secure the Future of the CVE Program (198 pts)]]></title>
            <link>https://www.thecvefoundation.org/home</link>
            <guid>43704430</guid>
            <pubDate>Wed, 16 Apr 2025 12:16:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thecvefoundation.org/home">https://www.thecvefoundation.org/home</a>, See on <a href="https://news.ycombinator.com/item?id=43704430">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="h.5b4fa98fdb17b73_3" jscontroller="sGwD4d" jsaction="zXBUYb:zTPCnb;zQF9Uc:Qxe3nd;" jsname="F57UId" tabindex="-1"><p dir="ltr"><span>FOR IMMEDIATE RELEASE</span></p><p dir="ltr"><span>April 16, 2025</span></p><p dir="ltr"><span>CVE Foundation Launched to Secure the Future of the CVE Program</span></p><p dir="ltr"><span>[Bremerton, Washington]</span><span> – The CVE Foundation has been formally established to ensure the long-term viability, stability, and independence of the Common Vulnerabilities and Exposures (CVE) Program, a critical pillar of the global cybersecurity infrastructure for 25 years.</span></p><p dir="ltr"><span>Since its inception, the CVE Program has operated as a U.S. government-funded initiative, with oversight and management provided under contract. While this structure has supported the program’s growth, it has also raised longstanding concerns among members of the CVE Board about the sustainability and neutrality of a globally relied-upon resource being tied to a single government sponsor.</span></p><p dir="ltr"><span>This concern has become urgent following an April 15, 2025 letter from MITRE notifying the CVE Board that the U.S. government does not intend to renew its contract for managing the program. While we had hoped this day would not come, we have been preparing for this possibility.</span></p><p dir="ltr"><span>In response, a coalition of longtime, active CVE Board members have spent the past year developing a strategy to transition CVE to a dedicated, non-profit foundation. The new CVE Foundation will focus solely on continuing the mission of delivering high-quality vulnerability identification and maintaining the integrity and availability of CVE data for defenders worldwide.</span></p><p dir="ltr"><span>“CVE, as a cornerstone of the global cybersecurity ecosystem, is too important to be vulnerable itself,” said Kent Landfield, an officer of the Foundation. “Cybersecurity professionals around the globe rely on CVE identifiers and data as part of their daily work—from security tools and advisories to threat intelligence and response. Without CVE, defenders are at a massive disadvantage against global cyber threats.”</span></p><p dir="ltr"><span>The formation of the CVE Foundation marks a major step toward eliminating a single point of failure in the vulnerability management ecosystem and ensuring the CVE Program remains a globally trusted, community-driven initiative. For the international cybersecurity community, this move represents an opportunity to establish governance that reflects the global nature of today’s threat landscape.</span></p><p dir="ltr"><span>Over the coming days, the Foundation will release more information about its structure, transition planning, and opportunities for involvement from the broader community.</span></p><p dir="ltr"><span>For updates or inquiries, contact: </span><a href="mailto:info@thecvefoundation.org" target="_blank"><span>info@thecvefoundation.org</span></a><span>.</span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[European Union Vulnerability Database (EUVD) (191 pts)]]></title>
            <link>https://euvd.enisa.europa.eu/</link>
            <guid>43703949</guid>
            <pubDate>Wed, 16 Apr 2025 11:19:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://euvd.enisa.europa.eu/">https://euvd.enisa.europa.eu/</a>, See on <a href="https://news.ycombinator.com/item?id=43703949">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Anonymous Release 10TB Leaked Data Exposing Kremlin Assets, Russian Businesses (186 pts)]]></title>
            <link>https://trendsnewsline.com/2025/04/15/anonymous-leaks-10tb-of-data-on-russia-shocking-revelations/</link>
            <guid>43703812</guid>
            <pubDate>Wed, 16 Apr 2025 10:59:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://trendsnewsline.com/2025/04/15/anonymous-leaks-10tb-of-data-on-russia-shocking-revelations/">https://trendsnewsline.com/2025/04/15/anonymous-leaks-10tb-of-data-on-russia-shocking-revelations/</a>, See on <a href="https://news.ycombinator.com/item?id=43703812">Hacker News</a></p>
Couldn't get https://trendsnewsline.com/2025/04/15/anonymous-leaks-10tb-of-data-on-russia-shocking-revelations/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Markov Chain Monte Carlo Without All the Bullshit (2015) (173 pts)]]></title>
            <link>https://www.jeremykun.com/2015/04/06/markov-chain-monte-carlo-without-all-the-bullshit/</link>
            <guid>43700633</guid>
            <pubDate>Wed, 16 Apr 2025 02:01:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jeremykun.com/2015/04/06/markov-chain-monte-carlo-without-all-the-bullshit/">https://www.jeremykun.com/2015/04/06/markov-chain-monte-carlo-without-all-the-bullshit/</a>, See on <a href="https://news.ycombinator.com/item?id=43700633">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>This article was ported from my old Wordpress blog <a href="https://jeremykun.wordpress.com/2015/04/06/markov-chain-monte-carlo-without-all-the-bullshit/">here,</a> If you see any issues with the rendering or layout, please <a href="mailto:mathintersectprogramming@gmail.com">send me an email</a>.</p><div itemprop="articleBody" id="content"><p>I have a little secret: I don’t like the terminology, notation, and style of writing in statistics. I find it unnecessarily complicated. This shows up when trying to read about Markov Chain Monte Carlo methods. Take, for example, the abstract to the Markov Chain Monte Carlo article in the <a href="https://doi.org/10.1002/0470011815.b2a14021" rel="external">Encyclopedia of Biostatistics.</a></p><blockquote><p>Markov chain Monte Carlo (MCMC) is a technique for estimating by simulation the expectation of a statistic in a complex model. Successive random selections form a Markov chain, the stationary distribution of which is the target distribution. It is particularly useful for the evaluation of posterior distributions in complex Bayesian models. In the Metropolis–Hastings algorithm, items are selected from an arbitrary “proposal” distribution and are retained or not according to an acceptance rule. The Gibbs sampler is a special case in which the proposal distributions are conditional distributions of single components of a vector parameter. Various special cases and applications are considered.</p></blockquote><p>I can only vaguely understand what the author is saying here (and really only because I know ahead of time what MCMC is). There are certainly references to more advanced things than what I’m going to cover in this post. But it seems very difficult to find an explanation of Markov Chain Monte Carlo <em>without</em> superfluous jargon. The “bullshit” here is the implicit claim of an author that such jargon is needed. Maybe it is to explain advanced applications (like attempts to do “inference in Bayesian networks”), but it is certainly not needed to define or analyze the basic ideas.</p><p>So to counter, here’s my own explanation of Markov Chain Monte Carlo, inspired by the treatment of <a href="http://web.archive.org/web/20150204160331/http://research.microsoft.com/en-US/people/kannan/book-no-solutions-aug-21-2014.pdf" rel="external">John Hopcroft and Ravi Kannan</a>.</p><h2 id="the-problem-is-drawing-from-a-distribution">The Problem is Drawing from a Distribution</h2><p>Markov Chain Monte Carlo is a technique to solve the problem of <em>sampling from a complicated distribution.</em> Let me explain by the following imaginary scenario. Say I have a magic box which can estimate probabilities of baby names very well. I can give it a string like “Malcolm” and it will tell me the exact probability $ p_{\textup{Malcolm}}$ that you will choose this name for your next child. So there’s a distribution $ D$ over all names, it’s very specific to your preferences, and for the sake of argument say this distribution is fixed and you don’t get to tamper with it.</p><p>Now comes the problem: I want to <em>efficiently draw</em> a name from this distribution $ D$. This is the problem that Markov Chain Monte Carlo aims to solve. Why is it a problem? Because I have no idea what process you use to pick a name, so I can’t simulate that process myself. Here’s another method you could try: generate a name $ x$ uniformly at random, ask the machine for $ p_x$, and then flip a biased coin with probability $ p_x$ and use $ x$ if the coin lands heads. The problem with this is that there are exponentially many names! The variable here is the number of bits needed to write down a name $ n = |x|$. So either the probabilities $ p_x$ will be exponentially small and I’ll be flipping for a very long time to get a single name, or else there will only be a few names with nonzero probability and it will take me exponentially many draws to find them. Inefficiency is the death of me.</p><p>So this is a serious problem! Let’s restate it formally just to be clear.</p><p><strong>Definition (The sampling problem):</strong> Let $ D$ be a distribution over a finite set $ X$. You are given black-box access to the probability distribution function $ p(x)$ which outputs the probability of drawing $ x \in X$ according to $ D$. Design an efficient randomized algorithm $ A$ which outputs an element of $ X$ so that the probability of outputting $ x$ is approximately $ p(x)$. More generally, output a sample of elements from $ X$ drawn according to $ p(x)$.</p><p>Assume that $ A$ has access to only fair random coins, though this allows one to efficiently simulate flipping a <a href="https://www.jeremykun.com/2014/02/12/simulating-a-biased-coin-with-a-fair-coin/" title="Simulating a Biased Coin with a Fair Coin">biased coin of any desired probability</a>.</p><p>Notice that with such an algorithm we’d be able to do things like estimate the expected value of some random variable $ f : X \to \mathbb{R}$. We could take a large sample $ S \subset X$ via the solution to the sampling problem, and then compute the average value of $ f$ on that sample. This is what a Monte Carlo method does when sampling is easy. In fact, the Markov Chain solution to the sampling problem will allow us to do the sampling <em>and</em> the estimation of $ \mathbb{E}(f)$ in one fell swoop if you want.</p><p>But the core problem is really a sampling problem, and “Markov Chain Monte Carlo” would be more accurately called the “Markov Chain Sampling Method.” So let’s see why a Markov Chain could possibly help us.</p><h2 id="random-walks-the-markov-chain-part-of-mcmc">Random Walks, the “Markov Chain” part of MCMC</h2><p>Markov Chain is essentially a fancy term for a random walk on a graph.</p><p>You give me a directed graph $ G = (V,E)$, and for each edge $ e = (u,v) \in E$ you give me a number $ p_{u,v} \in [0,1]$. In order to make a random walk make sense, the $ p_{u,v}$ need to satisfy the following constraint:</p><p>For any vertex $ x \in V$, the set all values $ p_{x,y}$ on outgoing edges $ (x,y)$ must sum to 1, i.e. form a probability distribution.</p><p>If this is satisfied then we can take a random walk on $ G$ according to the probabilities as follows: start at some vertex $ x_0$. Then pick an outgoing edge at random according to the probabilities on the outgoing edges, and follow it to $ x_1$. Repeat if possible.</p><p>I say “if possible” because an arbitrary graph will not necessarily have any outgoing edges from a given vertex. We’ll need to impose some additional conditions on the graph in order to apply random walks to Markov Chain Monte Carlo, but in any case the idea of randomly walking is well-defined, and we call the whole object $ (V,E, \{ p_e \}_{e \in E})$ a <em>Markov chain.</em></p><p>Here is an example where the vertices in the graph correspond to emotional states.</p><figure><img src="https://www.jeremykun.com/img/2015/markov01.gif" width="646px"><figcaption><h4>An example Markov chain</h4></figcaption></figure><p>In statistics land, they take the “state” interpretation of a random walk very seriously. They call the edge probabilities “state-to-state transitions.” The main theorem we need to do anything useful with Markov chains is the stationary distribution theorem (sometimes called the “Fundamental Theorem of Markov Chains,” and for good reason). What it says intuitively is that for a very long random walk, the probability that you end at some vertex $ v$ is independent of where you started! All of these probabilities taken together is called the <em>stationary distribution</em> of the random walk, and it is uniquely determined by the Markov chain.</p><p>However, for the reasons we stated above (“if possible”), the stationary distribution theorem is not true of every Markov chain. The main property we need is that the graph $ G$ is <em>strongly connected.</em> Recall that a directed graph is called connected if, when you ignore direction, there is a path from every vertex to every other vertex. It is called <em>strongly connected</em> if you still get paths everywhere when considering direction. If we additionally require the stupid edge-case-catcher that no edge can have zero probability, then strong connectivity (of one component of a graph) is equivalent to the following property:</p><p>For every vertex $ v \in V(G)$, an infinite random walk started at $ v$ will return to $ v$ with probability 1.</p><p>In fact it will return infinitely often. This property is called the <em>persistence</em> of the state $ v$ by statisticians. I dislike this term because it appears to describe a property of a vertex, when to me it describes a property of the connected component containing that vertex. In any case, since in Markov Chain Monte Carlo we’ll be picking the graph to walk on (spoiler!) we will ensure the graph is strongly connected by design.</p><p>Finally, in order to describe the stationary distribution in a more familiar manner (using linear algebra), we will write the transition probabilities as a matrix $ A$ where entry $ a_{j,i} = p_{(i,j)}$ if there is an edge $ (i,j) \in E$ and zero otherwise. Here the rows and columns correspond to vertices of $ G$, and each <em>column</em> $ i$ forms the probability distribution of going from state $ i$ to some other state in one step of the random walk. Note $ A$ is the transpose of the weighted adjacency matrix of the directed weighted graph $ G$ where the weights are the transition probabilities (the reason I do it this way is because matrix-vector multiplication will have the matrix on the left instead of the right; see below).</p><p>This matrix allows me to describe things nicely using the language of linear algebra. In particular if you give me a basis vector $ e_i$ interpreted as “the random walk currently at vertex $ i$,” then $ Ae_i$ gives a vector whose $ j$-th coordinate is the probability that the random walk would be at vertex $ j$ after one more step in the random walk. Likewise, if you give me a probability distribution $ q$ over the vertices, then $ Aq$ gives a probability vector interpreted as follows:</p><p>If a random walk is in state $ i$ with probability $ q_i$, then the $ j$-th entry of $ Aq$ is the probability that after one more step in the random walk you get to vertex $ j$.</p><p>Interpreted this way, the stationary distribution is a probability distribution $ \pi$ such that $ A \pi = \pi$, in other words $ \pi$ is an eigenvector of $ A$ with eigenvalue 1.</p><p>A quick side note for avid readers of this blog: this analysis of a random walk is exactly what we did back in the early days of this blog when we studied <a href="https://www.jeremykun.com/2011/06/12/googles-pagerank-introduction/" title="Google’s PageRank – Introduction">the PageRank algorithm</a> for ranking webpages. There we called the matrix $ A$ “a web matrix,” did random walks on it, and found a special eigenvalue whose eigenvector was a “stationary distribution” that we used to rank web pages (this used something called the <a href="https://en.wikipedia.org/wiki/Perron%E2%80%93Frobenius_theorem" rel="external">Perron-Frobenius theorem</a>, which says a random-walk matrix has that special eigenvector). There we described an algorithm to actually find that eigenvector by iteratively multiplying $ A$. The following theorem is essentially a variant of this algorithm but works under weaker conditions; for the web matrix we added additional “fake” edges that give the needed stronger conditions.</p><p><strong>Theorem:</strong> Let $ G$ be a strongly connected graph with associated edge probabilities $ \{ p_e \}_e \in E$ forming a Markov chain. For a probability vector $ x_0$, define $ x_{t+1} = Ax_t$ for all $ t \geq 1$, and let $ v_t$ be the long-term average $ v_t = \frac1t \sum_{s=1}^t x_s$. Then:</p><ol><li>There is a unique probability vector $ \pi$ with $ A \pi = \pi$.</li><li>For all $ x_0$, the limit $ \lim_{t \to \infty} v_t = \pi$.</li></ol><p><em>Proof.</em> Since $ v_t$ is a probability vector we just want to show that $ |Av_t – v_t| \to 0$ as $ t \to \infty$. Indeed, we can expand this quantity as</p><p>$$\displaystyle \begin{aligned} Av_t – v_t &amp;=\frac1t (Ax_0 + Ax_1 + \dots + Ax_{t-1}) – \frac1t (x_0 + \dots + x_{t-1}) \\\ &amp;= \frac1t (x_t – x_0) \end{aligned}$$</p><p>But $ x_t, x_0$ are unit vectors, so their difference is at most 2, meaning $ |Av_t – v_t| \leq \frac2t \to 0$. Now it’s clear that this does not depend on $ v_0$. For uniqueness we will cop out and appeal to the Perron-Frobenius theorem that says any matrix of this form has a unique such (normalized) eigenvector.</p><p>$$\square$$</p><p>One additional remark is that, in addition to computing the stationary distribution by actually computing this average or using an eigensolver, one can analytically solve for it as the inverse of a particular matrix. Define $ B = A-I_n$, where $ I_n$ is the $ n \times n$ identity matrix. Let $ C$ be $ B$ with a row of ones appended to the bottom and the topmost row removed. Then one can show (quite opaquely) that the last column of $ C^{-1}$ is $ \pi$. We leave this as an exercise to the reader, because I’m pretty sure nobody uses this method in practice.</p><p>One final remark is about why we need to take an average over all our $ x_t$ in the theorem above. There is an extra technical condition one can add to strong connectivity, called <em>aperiodicity</em>, which allows one to beef up the theorem so that $ x_t$ itself converges to the stationary distribution. Rigorously, aperiodicity is the property that, regardless of where you start your random walk, after some sufficiently large number of steps $ n$ the random walk has a positive probability of being at every vertex at every subsequent step. As an example of a graph where aperiodicity fails: an undirected cycle on an even number of vertices. In that case there will only be a positive probability of being at certain vertices every <em>other</em> step, and averaging those two long term sequences gives the actual stationary distribution.</p><figure><img src="https://www.jeremykun.com/img/2015/screen-shot-2015-04-07-at-6-55-39-pm.png" width="377px"><figcaption><h4>Image source: Wikipedia</h4></figcaption></figure><p>One way to guarantee that your Markov chain is aperiodic is to ensure there is a positive probability of staying at any vertex. I.e., that your graph has a self-loop. This is what we’ll do in the next section.</p><h2 id="constructing-a-graph-to-walk-on">Constructing a graph to walk on</h2><p>Recall that the problem we’re trying to solve is to draw from a distribution over a finite set $ X$ with probability function $ p(x)$. The MCMC method is to construct a Markov chain whose stationary distribution is exactly $ p$, even when you just have black-box access to evaluating $ p$. That is, you (implicitly) pick a graph $ G$ and (implicitly) choose transition probabilities for the edges to make the stationary distribution $ p$. Then you take a long enough random walk on $ G$ and output the $ x$ corresponding to whatever state you land on.</p><p>The easy part is coming up with a graph that has the right stationary distribution (in fact, “most” graphs will work). The hard part is to come up with a graph where you can prove that the convergence of a random walk to the stationary distribution is fast in comparison to the size of $ X$. Such a proof is beyond the scope of this post, but the “right” choice of a graph is not hard to understand.</p><p>The one we’ll pick for this post is called the <strong>Metropolis-Hastings</strong> algorithm. The input is your black-box access to $ p(x)$, and the output is a set of rules that implicitly define a random walk on a graph whose vertex set is $ X$.</p><p>It works as follows: you pick some way to put $ X$ on a lattice, so that each state corresponds to some vector in $ \{ 0,1, \dots, n\}^d$. Then you add (two-way directed) edges to all neighboring lattice points. For $ n=5, d=2$ it would look like this:</p><figure><a href="https://www.jeremykun.com/img/2015/2dlattice.jpg"><img src="https://www.jeremykun.com/img/2015/2dlattice.jpg" width="195px"></a><figcaption><h4>Image credit http://www.ams.org/samplings/feature-column/fcarc-taxi</h4></figcaption></figure><p>And for $ d=3, n \in \{2,3\}$ it would look like this:</p><figure><a href="https://www.jeremykun.com/img/2015/lattice.gif"><img src="https://www.jeremykun.com/img/2015/lattice.gif" width="343px"></a><figcaption><h4>lattice</h4></figcaption></figure><p>You have to be careful here to ensure the vertices you choose for $ X$ are not disconnected, but in many applications $ X$ is naturally already a lattice.</p><p>Now we have to describe the transition probabilities. Let $ r$ be the maximum degree of a vertex in this lattice ($ r=2d$). Suppose we’re at vertex $ i$ and we want to know where to go next. We do the following:</p><ol><li>Pick neighbor $ j$ with probability $ 1/r$ (there is some chance to stay at $ i$).</li><li>If you picked neighbor $ j$ and $ p(j) \geq p(i)$ then deterministically go to $ j$.</li><li>Otherwise, $ p(j) &lt; p(i)$, and you go to $ j$ with probability $ p(j) / p(i)$.</li></ol><p>We can state the probability weight $ p_{i,j}$ on edge $ (i,j)$ more compactly as</p><p>$$\displaystyle p_{i,j} = \frac1r \min(1, p(j) / p(i)) \\\ p_{i,i} = 1 – \sum_{(i,j) \in E(G); j \neq i} p_{i,j}$$</p><p>It is easy to check that this is indeed a probability distribution for each vertex $ i$. So we just have to show that $ p(x)$ is the stationary distribution for this random walk.</p><p>Here’s a fact to do that: if a probability distribution $ v$ with entries $ v(x)$ for each $ x \in X$ has the property that $ v(x)p_{x,y} = v(y)p_{y,x}$ for all $ x,y \in X$, the $ v$ is the stationary distribution. To prove it, fix $ x$ and take the sum of both sides of that equation over all $ y$. The result is exactly the equation $ v(x) = \sum_{y} v(y)p_{y,x}$, which is the same as $ v = Av$. Since the stationary distribution is the unique vector satisfying this equation, $ v$ has to be it.</p><p>Doing this with out chosen $ p(i)$ is easy, since $ p(i)p_{i,j}$ and $ p(i)p_{j,i}$ are both equal to $ \frac1r \min(p(i), p(j))$ by applying a tiny bit of algebra to the definition. So we’re done! One can just randomly walk according to these probabilities and get a sample.</p><h2 id="last-words">Last words</h2><p>The last thing I want to say about MCMC is to show that you can estimate the expected value of a function $ \mathbb{E}(f)$ simultaneously while random-walking through your Metropolis-Hastings graph (or any graph whose stationary distribution is $ p(x)$). By definition the expected value of $ f$ is $ \sum_x f(x) p(x)$.</p><p>Now what we can do is compute the average value of $ f(x)$ just among those states we’ve visited during our random walk. With a little bit of extra work you can show that this quantity will converge to the true expected value of $ f$ at about the same time that the random walk converges to the stationary distribution. (Here the “about” means we’re off by a constant factor depending on $ f$). In order to prove this you need some extra tools I’m too lazy to write about in this post, but the point is that it works.</p><p>The reason I did not start by describing MCMC in terms of estimating the expected value of a function is because the core problem is a sampling problem. Moreover, there are many applications of MCMC that need nothing more than a sample. For example, MCMC can be used to estimate the volume of an arbitrary (maybe high dimensional) convex set. See <a href="http://www.cs.berkeley.edu/~sinclair/cs294/n1.pdf" rel="external">these lecture notes</a> of Alistair Sinclair for more.</p><p>If demand is popular enough, I could implement the Metropolis-Hastings algorithm in code (it wouldn’t be industry-strength, but perhaps illuminating? I’m not so sure…).</p><p>Until next time!</p><hr><hr></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[CVE program faces swift end after DHS fails to renew contract (1626 pts)]]></title>
            <link>https://www.csoonline.com/article/3963190/cve-program-faces-swift-end-after-dhs-fails-to-renew-contract-leaving-security-flaw-tracking-in-limbo.html</link>
            <guid>43700607</guid>
            <pubDate>Wed, 16 Apr 2025 01:57:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.csoonline.com/article/3963190/cve-program-faces-swift-end-after-dhs-fails-to-renew-contract-leaving-security-flaw-tracking-in-limbo.html">https://www.csoonline.com/article/3963190/cve-program-faces-swift-end-after-dhs-fails-to-renew-contract-leaving-security-flaw-tracking-in-limbo.html</a>, See on <a href="https://news.ycombinator.com/item?id=43700607">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
					<p><span>News Analysis</span></p><p><span>Apr 15, 2025</span><span>6 mins</span></p><p><span><span>Government</span></span><span><span>Threat and Vulnerability Management</span></span></p></div><article id="post-3963190">
	<div>
			<div>
						<div>
			<h2>
				MITRE’s 25-year-old Common Vulnerabilities and Exposures (CVE) program will end April 16 after DHS did not renew its funding contract for reasons unspecified. Experts say ending the program, which served as the crux for most cybersecurity defense programs, is a tragedy.			</h2>
			
		</div>					
						<div id="remove_no_follow">
		<div>




<p>In a stunning development that demolishes a cornerstone of cybersecurity defense, nonprofit R&amp;D organization MITRE said that its contract with the Department of Homeland Security (DHS) to maintain the Common Vulnerabilities and Exposures (CVE) database, which organizes computer vulnerabilities, will expire at midnight on April 16.</p>



<p>Yosry Barsoum, vice president and director of the Center for Securing the Homeland at MITRE, wrote in a missive to the CVE board, “On Wednesday, April 16, 2025, funding for MITRE to develop, operate, and modernize the Common Vulnerabilities and Exposures (CVE®) Program and related programs, such as the Common Weakness Enumeration (CWE™) Program, will expire. The government continues to make considerable efforts to support MITRE’s role in the program, and MITRE remains committed to CVE as a global resource.”</p>



<h2 id="end-of-cve-program-seen-as-tragic">End of CVE program seen as ‘tragic’</h2>



<p>Sasha Romanosky, senior policy researcher at the Rand Corporation, branded the end to the CVE program as “tragic,” a sentiment echoed by many cybersecurity and CVE experts reached for comment.</p>
</div>
							
							<div>


<p>“CVE naming and assignment to software packages and versions are the foundation upon which the software vulnerability ecosystem is based,” Romanosky said. “Without it, we can’t track newly discovered vulnerabilities. We can’t score their severity or predict their exploitation. And we certainly wouldn’t be able to make the best decisions regarding patching them.”</p>

		

			


<p>Ben Edwards, principal research scientist at Bitsight, told CSO, “My reaction is sadness and disappointment. This is a valuable resource that should absolutely be funded, and not renewing the contract is a mistake.”</p>



<p>He added “I am hopeful any interruption is brief and that if the contract fails to be renewed, other stakeholders within the ecosystem can pick up where MITRE left off. The federated framework and openness of the system make this possible, but it’ll be a rocky road if operations do need to shift to another entity.”</p>
</div>
							
							<div>


<h2 id="mitres-cve-program-foundational-to-cybersecurity">MITRE’s CVE program foundational to cybersecurity</h2>



<p>MITRE’s <a href="https://www.cve.org/">CVE program</a> is a foundational pillar of the global cybersecurity ecosystem and is the de facto standard for identifying vulnerabilities and guiding defenders’ vulnerability management programs. It provides foundational data to vendor products across vulnerability management, cyber threat intelligence, security information, event management, and endpoint detection and response.</p>



<p>Although the National Institute of Standards and Technology (NIST) enriches the MITRE CVE records with additional information through its <a href="https://www.nist.gov/itl/nvd">National Vulnerability Database</a> (NVD), and CISA has helped enrich MITRE’s CVE records with its “<a href="https://www.cisa.gov/news-events/news/unlocking-vulnrichment-enriching-cve-data">vulnrichment</a>” program <a href="https://www.csoonline.com/article/2106228/backlogs-at-national-vulnerability-database-prompt-action-from-nist-and-cisa.html">due to funding shortfalls in the NVD program</a>, MITRE is the originator of the <a href="https://www.csoonline.com/article/562175/what-is-cve-its-definition-and-purpose.html">CVE records</a> and serves at the primary source for identifying security flaws.</p>



<p>“If MITRE’s funding goes away, it causes an immediate cascading effect that will impact vulnerability management on a global scale,” Brian Martin, vulnerability historian, CSO of the Security Errata project, and former CVE board member, <a href="https://www.linkedin.com/feed/update/urn:li:activity:7318000614334943232/">wrote</a> on LinkedIn.</p>
</div>
							
							<div>


<p>“First, the federated model and CVE Numbering Authorities (CNA) can no longer assign IDs and send info to MITRE for quick publication. Second, all of that is the foundation for the National Vulnerability Database (NVD), which is already beyond struggling, with a backlog of over 30,000 vulnerabilities and the recent announcement of over 80,000 ‘deferred’ (meaning will not be fully analyzed by their current standards).”</p>



<p>Martin added, “Third, every company that maintains ‘their own vulnerability database’ that is essentially lipstick on the CVE pig will have to find alternate sources of intelligence. Fourth, national vulnerability databases like China’s and Russia’s, among others, will largely dry up (Russia more than China). Fourth [sic], hundreds, if not thousands, of National / Regional CERTs around the world, no longer have that source of free vulnerability intelligence. Fifth [sic], every company in the world that relied on CVE/NVD for vulnerability intelligence is going to experience swift and sharp pains to their vulnerability management program.”</p>



<h2 id="why-is-the-contract-ending">Why is the contract ending?</h2>



<p>It’s unclear what led to DHS’s decision to end the contract after 25 years of funding <a href="https://cyberscoop.com/cve-program-history-mitre-nist-1999-2024/">the highly regarded</a> program. The Trump administration, primarily through Elon Musk’s Department of Government Efficiency initiative, has been slashing government spending across the board, particularly at the Cybersecurity and Infrastructure Security Agency (CISA), through which DHS funds the MITRE CVE program.</p>
</div>
							
							<div>


<p>Although CISA has already been through two funding cuts, press reports suggest that nearly 40% of the agency’s staff, or around 1,300 employees, <a href="https://therecord.media/trump-administration-planning-workforce-cuts-at-cisa">are still slated</a> for termination. However, sources say that compared to the budget cuts made elsewhere in the federal government, the expense of running the CVE program are minor and “won’t break the bank.”</p>



<h2 id="what-happens-next">What happens next?</h2>



<p>Sources close to the CVE program say that starting at midnight on April 16, MITRE will no longer add records to its CVE database. However, historical CVE records will be <a href="https://github.com/CVEProject">available on GitHub</a>.</p>



<p>The real question is whether a private sector alternative to MITRE’s program emerges.</p>
</div>
							
							<div>


<p>“It’s difficult to speculate on what services could be impacted reading the note from MITRE,” Patrick Garrity, a security researcher at threat intelligence firm Vulncheck, told CSO. “The current vulnerability ecosystem is fragile after seeing NIST NVD’s failure last year, and any impacts to the CVE Program could have detrimental impacts on defenders and the security community. VulnCheck remains committed to helping fill any gaps that might arise.”</p>



<p>Garrity <a href="https://www.linkedin.com/feed/update/urn:li:activity:7318000766122618881/">posted on LinkedIn</a>, “Given the current uncertainty surrounding which services at MITRE or within the CVE Program may be affected, VulnCheck has proactively reserved 1,000 CVEs for 2025,” adding that Vulncheck “will continue to provide CVE assignments to the community in the days and weeks ahead.”</p>



<p>A CISA spokesperson told CSO, “CISA is the primary sponsor for the Common Vulnerabilities and Exposure (CVE) program, which is used by government and industry alike to disclose, catalog, and share information on&nbsp;technology vulnerabilities that can put the nation’s critical infrastructure at risk.&nbsp; Although CISA’s contract with the MITRE Corporation will lapse after April 16, we are&nbsp;urgently&nbsp;working to&nbsp;mitigate impact and to maintain CVE services&nbsp;on which global stakeholders rely.”</p>
</div>
							
							</div>					</div>

			<!--right side bar-->
			<div id="rightrail-wrapper">
					<p>
				SUBSCRIBE TO OUR NEWSLETTER			</p>
							<h3>
				From our editors straight to your inbox			</h3>
							<p>
				Get started by entering your email address below.			</p>
				
	</div>
			<!--right side bar ends here-->

		</div>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Homeland Security funding for CVE program expires (140 pts)]]></title>
            <link>https://www.theregister.com/2025/04/16/homeland_security_funding_for_cve/</link>
            <guid>43700258</guid>
            <pubDate>Wed, 16 Apr 2025 01:05:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2025/04/16/homeland_security_funding_for_cve/">https://www.theregister.com/2025/04/16/homeland_security_funding_for_cve/</a>, See on <a href="https://news.ycombinator.com/item?id=43700258">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>US government funding for the world's CVE program – the centralized Common Vulnerabilities and Exposures database of product security flaws – ends Wednesday.</p>
<p>The 25-year-old CVE program plays a huge role in vulnerability management. It is responsible overseeing the assignment and organizing of unique CVE ID numbers, such as <a target="_blank" rel="nofollow" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160">CVE-2014-0160</a> and <a target="_blank" rel="nofollow" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5754">CVE-2017-5754</a>, for specific vulnerabilities, in this case OpenSSL's <a target="_blank" href="https://www.theregister.com/2014/04/09/heartbleed_explained/">Heartbleed</a> and Intel's <a target="_blank" href="https://www.theregister.com/2018/01/02/intel_cpu_design_flaw/">Meltdown</a>, so that when referring to particular flaws and patches, everyone is agreed on exactly what we're all talking about.</p>
<p>It is used by companies big and small, developers, researchers, the public sector, and more as the primary system for identifying and squashing bugs. When multiple people find the same hole, CVEs are useful for ensuring everyone is working toward that one specific issue.</p>
<blockquote>

<p>CVE is a cornerstone of cybersecurity, and any gaps in CVE support will put our critical infrastructure and national security at unacceptable risk</p>
</blockquote>
<p>While the whole world's vulnerability management efforts aren't going to descend into chaos overnight, there is a concern that in a month or two they may. The lack of US government funding means that, unless someone else steps in to fill the gap, this standardized system for naming and tracking vulnerabilities may falter or shut down, new CVEs may no longer be published, and the <a target="_blank" rel="nofollow" href="https://cve.mitre.org/">program's website</a> may go offline.</p>
<p>Not-for-profit outfit MITRE has a contract with the US Department of Homeland Security to operate the CVE program, and on Tuesday the group confirmed this arrangement has not been renewed. This comes as the Trump administration scours around the federal government for costs to trim.</p>

    

<p>"On Wednesday, April 16, funding for MITRE to develop, operate, and modernize the Common Vulnerabilities and Exposures Program and related programs, such as the Common Weakness Enumeration Program, will expire," Yosry Barsoum, MITRE's vice president and director at the Center for Securing the Homeland, told <em>The Register</em>.&nbsp;</p>

        


        

<p>"The government continues to make considerable efforts to support MITRE's role in the program and MITRE remains committed to CVE as a global resource," Barsoum added.</p>
<p>The Common Weakness Enumeration program is a centrally managed <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/">database</a> of bug types.</p>

        

<p>The expiration came to light after a letter sent to CVE program board members was <a target="_blank" href="https://bsky.app/profile/tib3rius.bsky.social/post/3lmulrbygoe2g" rel="nofollow">leaked</a> on Bluesky. In that memo, Barsoum confided:</p>

<p>Historical CVE records will at least remain <a target="_blank" href="https://github.com/CVEProject" rel="nofollow">available at GitHub</a>.</p>
<p>"CVE is a cornerstone of cybersecurity, and any gaps in CVE support will put our critical infrastructure and national security at unacceptable risk," Luta Security founder and CEO Katie Moussouris, who pioneered Microsoft's vulnerability disclosure program, told <em>The Register</em>.</p>
<p>"All industries worldwide depend on the CVE program to keep their heads above water when it comes to managing threats, so an abrupt halt like this would be like depriving the cybersecurity industry of oxygen and expecting it to spontaneously sprout gills," Moussouris said.</p>
<p>It basically works like this: When an individual researcher or an organization discovers a new bug in some product, a CVE program partner — there are currently <a href="https://www.cve.org/PartnerInformation/ListofPartners" rel="nofollow">a few hundred across 40 countries</a> — is asked to assess the vulnerability report and <a target="_blank" rel="nofollow" href="https://blog.httpcs.com/en/cve-en/">assign</a> a unique CVE identifier for the flaw if and as necessary.</p>

        

<p>The program is <a target="_blank" rel="nofollow" href="https://www.cisa.gov/known-exploited-vulnerabilities#:~:text=The%20CVE%20Program%20is%20sponsored,catalog%20publicly%20disclosed%20cybersecurity%20vulnerabilities.">sponsored</a>, and largely <a target="_blank" rel="nofollow" href="https://www.usaspending.gov/award/CONT_AWD_70RCSJ23FR0000015_7001_70RSAT20D00000001_7001">funded</a> by the Cybersecurity and Infrastructure Security Agency, aka CISA, under the umbrella of the US Department of Homeland Security.</p>
<p>"I can say that, having been in this industry for longer than CVEs themselves, it won't be good," Dustin Childs, head of threat awareness at Trend Micro's Zero Day Initiative, told <em>The Register</em>.</p>
<blockquote>

<p>I can say that, having been in this industry for longer than CVEs themselves, it won't be good</p>
</blockquote>
<p>"Before CVEs, each company referred to vulnerabilities using their own vernacular," he added. "Customers were confused about whether they were protected or impacted from a particular bug. And was a time when there were much fewer companies and infinitely fewer bugs."</p>
<p>To put this in perspective: More than <a target="_blank" rel="nofollow" href="https://jerrygamblin.com/2025/01/05/2024-cve-data-review//">40,000 new CVEs</a> were published last year.</p>
<p>"If MITRE were to lose funding for the CVE, we can expect considerable confusion again until someone else picks up the flag," Childs continued, noting that this would require some sort of industry consortium —&nbsp;but nothing along those lines currently exists.</p>
<p>"Vulnerability management will become a mess as enterprises struggle to confirm they are in compliance with regulations and directives," he said. "Let's hope this is resolved quickly."</p>
<ul>

<li><a href="https://www.theregister.com/2016/03/18/mitre_rolls_out_new_federated_faster_cve_system_after_iregi_reveal/">MITRE rolls out new CVE system after <i>Reg</i> reveal</a></li>

<li><a href="https://www.theregister.com/2016/05/25/mitre_fighter_deploys_name_logo_website_combo_in_cve_plea/">MITRE fighter says CVE delays are no laughing matter, names bug ROFL in branding protest</a></li>

<li><a href="https://www.theregister.com/2024/10/02/cve_pileup_nvd_missed_deadline/">NIST's security flaw database still backlogged with 17K+ unprocessed bugs. Not great</a></li>

<li><a href="https://www.theregister.com/2025/04/14/swalwell_cisa_cuts/">Cyber congressman demands answers before CISA gets cut down to size</a></li>

<li><a href="https://www.theregister.com/2025/04/08/cisa_cuts_threat_intel/">As CISA braces for more cuts, threat intel sharing takes a hit</a></li>
</ul>
<p>VulnCheck, a private vulnerability intel company that is also a CVE Naming Authority, aka CNA, on Tuesday said it has proactively <a target="_blank" rel="nofollow" href="https://www.linkedin.com/feed/update/urn:li:activity:7318000766122618881/">reserved</a> 1,000 CVEs for 2025.&nbsp;</p>
<p>Still, this only preserves the functionality of the program for a couple months at best.&nbsp;</p>
<blockquote>

<p>The security industry needs to step in to fill the void</p>
</blockquote>
<p>"MITRE, as a CNA, issues between 300-600 CVEs each month, so by reserving 1,000 hypothetically, we can assign a CVE to vulnerabilities for 1-2 months as long as the core service continues," Patrick Garrity, security researcher at VulnCheck, told <em>The Register</em>.&nbsp;&nbsp;</p>
<p>"The CVE program is a critical resource globally used by nearly every organization in the world, so the implications of a pause will have downstream implications for security tooling, security teams, and every organization that cares about security," he added.</p>
<p>"It would be terrible to see government funding for the CVE program go away, but we also believe that this is a time when the security industry needs to step in to fill the void." ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How dairy robots are changing work for cows and farmers (191 pts)]]></title>
            <link>https://spectrum.ieee.org/lely-dairy-robots</link>
            <guid>43699188</guid>
            <pubDate>Tue, 15 Apr 2025 22:26:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spectrum.ieee.org/lely-dairy-robots">https://spectrum.ieee.org/lely-dairy-robots</a>, See on <a href="https://news.ycombinator.com/item?id=43699188">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>Robots are taking over much of the daily manual labor at dairy farms, including milking, feeding, cleaning, and more. It makes dairy farmers’ lives easier, and makes the cows happier, too.</p><div data-headline="How Dairy Robots Are Changing Work for Cows (and Farmers)"><p><em>
		“Mooooo.”
		</em></p><p><strong>This dairy barn is</strong> full of cows, as you might expect. <a href="https://www.youtube.com/watch?v=g-zYshsAg1E" rel="noopener noreferrer" target="_blank">Cows are being milked</a>, <a href="https://www.youtube.com/watch?v=wm_Iul30Sx0" rel="noopener noreferrer" target="_blank">cows are being fed</a>, <a href="https://www.youtube.com/watch?v=yCJxN_3nnEc" rel="noopener noreferrer" target="_blank">cows are being cleaned up after</a>, and a few very happy cows are even getting <a href="https://www.youtube.com/watch?v=vq1j4ImZxcw" rel="noopener noreferrer" target="_blank">vigorously scratched behind the ears</a>. “I wonder where the farmer is,” remarks my guide, Jan Jacobs. Jacobs doesn’t seem especially worried, though—the several hundred cows in this barn are being well cared for by a small fleet of fully <a href="https://spectrum.ieee.org/tag/autonomous-robots">autonomous robots</a>, and the farmer might not be back for hours. The robots will let him know if anything goes wrong.
</p><p>
	At one of the milking robots, several cows are lined up, nose to tail, politely waiting their turn. The cows can get milked by robot whenever they like, which typically means
	<a href="https://www.lely.com/us/solutions/organic-grazing/faq/" rel="noopener noreferrer" target="_blank"> more frequently than the twice a day</a> at a traditional dairy farm. Not only is getting milked more often more comfortable for the cows, <a href="https://www.lely.com/us/solutions/organic-grazing/production/" rel="noopener noreferrer" target="_blank">cows also produce about 10 percent more milk</a> when the milking schedule is completely up to them.
</p><p>
	“There’s a direct correlation between stress and milk production,” Jacobs says. “Which is nice, because robots make cows happier and therefore, they give more milk, which helps us sell more robots.”
</p><p><a href="https://www.linkedin.com/in/jan-jacobs-59296828/" rel="noopener noreferrer" target="_blank">Jan Jacobs</a> is the human-robot interaction design lead for <a href="https://www.lely.com/us/" rel="noopener noreferrer" target="_blank">Lely</a>, a maker of agricultural machinery. Founded in 1948 in Maassluis, <a href="https://spectrum.ieee.org/tag/netherlands">Netherlands</a>, Lely deployed its first Astronaut milking robot in the early 1990s. The company has since developed other robotic systems that assist with cleaning, feeding, and cow comfort, and the Astronaut milking robot is on its <a href="https://www.lely.com/media/lely-centers-files/brochures/published/astronaut_a5_brochure_e_en.pdf" rel="noopener noreferrer" target="_blank">fifth generation</a>. Lely is now focused entirely on robots for dairy farms, with around 135,000 of them deployed around the world.
</p><h2>Essential Jobs on Dairy Farms</h2><p><span>The weather outside the barn is miserable. It’s late fall in the Netherlands, and a cold rain is gusting in from the sea, which is probably why the cows have quite sensibly decided to stay indoors and why the farmer is still nowhere to be found. Lely requires that dairy farmers who adopt its robots commit to letting their cows move freely between milking, feeding, and resting, as well as inside and outside the barn, at their own pace. “We believe that free cow traffic is a core part of the future of farming,” Jacobs says as we watch one cow stroll away from the milking robot while another takes its place. This is possible only when the farm operates on the cows’ schedule rather than a human’s.</span></p><p>
	A conventional dairy farm relies heavily on human labor. Lely estimates that repetitive daily tasks represent about a third of the average workday of a dairy farmer. In the morning, the cows are milked for the first time. Most dairy cows must be milked at least twice a day or they’ll become uncomfortable, and so the herd will line up on their own. Traditional milking parlors are designed to maximize human milking efficiency. A milking carousel, for instance, slowly rotates cows as they’re milked so that the dairy worker doesn’t have to move between stalls.
</p><p><img alt="Cows entering and exiting a Lely Astronaut milking robot in a modern dairy farm setting." data-rm-shortcode-id="c207a725fbda29ab8e49e44a3e9aaf98" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/cows-entering-and-exiting-a-lely-astronaut-milking-robot-in-a-modern-dairy-farm-setting.jpg?id=59764532&amp;width=980" height="2250" id="3fad0" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/cows-entering-and-exiting-a-lely-astronaut-milking-robot-in-a-modern-dairy-farm-setting.jpg?id=59764532&amp;width=980" width="3600"></p><p><img alt="Automated cow milking machine in a dairy farm, cow in position being milked." data-rm-shortcode-id="4e3ab2f9a50553c4dad2c678fb747a85" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/automated-cow-milking-machine-in-a-dairy-farm-cow-in-position-being-milked.jpg?id=59759842&amp;width=980" height="2438" id="fc35f" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/automated-cow-milking-machine-in-a-dairy-farm-cow-in-position-being-milked.jpg?id=59759842&amp;width=980" width="3900"><small placeholder="Add Photo Caption...">“We were spending 6 hours a day milking,” explains dairy farmer Josie Rozum, whose 120-cow herd at Takes Dairy Farm uses a pair of Astronaut A5 milking robots. “Now that the robots are handling all of that, we can focus more on animal care and comfort.”</small><small placeholder="add photo credit...">Lely</small></p><p>
	An experienced human using well-optimized equipment can attach a milking machine to a cow 
	<a href="https://www.vet.cornell.edu/animal-health-diagnostic-center/programs/quality-milk-production-services/services/parlor-efficiency" rel="noopener noreferrer" target="_blank">in just 20 to 30 seconds</a>. The actual milking takes only a few minutes, but with the average small dairy farm in North America providing a home for <a href="https://hoards.com/article-34810-familiar-dairy-industry-trends-continue.html" rel="noopener noreferrer" target="_blank">several hundred cows</a>, milking typically represents a time commitment of <a href="https://www.sciencedirect.com/science/article/pii/S0022030222003228#fig2" rel="noopener noreferrer" target="_blank">4 to 6 hours per day</a>.
</p><p>
	There are other jobs that must be done every day at a dairy. 
	<a href="https://www.dairyherd.com/news/education/how-often-should-you-push-feed" rel="noopener noreferrer" target="_blank">Cows are happier with continuous access to food</a>, which means feeding them several times a day. <a href="https://www.americandairy.com/dairy-diary/what-do-dairy-cows-eat/" rel="noopener noreferrer" target="_blank">The feed is a mix of roughage (hay), silage (grass), and grain</a>. The cows will eat all of this, but they prefer the grain, and so it’s common to see cows sorting their food by grabbing a mouthful and throwing it up into the air. The lighter roughage and silage flies farther than the grain does, leaving the cow with a pile of the tastier stuff as the rest gets tossed out of reach. This makes “<a href="https://www.dairyherd.com/news/education/how-often-should-you-push-feed" rel="noopener noreferrer" target="_blank">feed pushing</a>” necessary to shove the rest of the feed back within reach of the cow.
</p><p>
	And of course there’s manure. A dairy cow produces an average of 
	<a href="https://thedairylandinitiative.vetmed.wisc.edu/home/housing-module/adult-cow-housing/manure-management/" rel="noopener noreferrer" target="_blank">68 kilograms of manure a day</a>. All that manure has to be collected and the barn floors regularly cleaned.
</p><h2>Dairy <a href="https://spectrum.ieee.org/tag/industry-4-0">Industry 4.0</a></h2><p>
	The amount of labor needed to operate a dairy meant that until the early 1900s, 
	<a href="https://youtu.be/sjmflKg-v2o?t=1049" rel="noopener noreferrer" target="_blank">most family farms could support only about eight cows</a>. The introduction of the first milking machines, called <a href="https://www.surgemilker.com/history.html" rel="noopener noreferrer" target="_blank">bucket milkers</a>, helped farmers milk 10 cows per hour instead of 4 by the mid-1920s. <a href="https://spectrum.ieee.org/tag/rural-electrification">Rural electrification</a> furthered dairy <a href="https://spectrum.ieee.org/tag/automation">automation</a> starting in the 1950s, and since then, both farm size and milk production have increased steadily. In the 1930s, a good dairy cow <a href="https://youtu.be/sjmflKg-v2o?t=1631" rel="noopener noreferrer" target="_blank">produced 3,600 kilograms of milk per year</a>. <a href="https://downloads.usda.library.cornell.edu/usda-esmis/files/h989r321c/mg74sh83p/nc582h285/mkpr0225.pdf" rel="noopener noreferrer" target="_blank">Today, it’s almost 11,000 kilograms</a>, and Lely believes that robots are what will enable small dairy farms to continue to scale sustainably.
</p><p><span data-rm-shortcode-id="3d0c2a865a4f6909e8ce591fab31c88e"><iframe frameborder="0" height="auto" type="lazy-iframe" scrolling="no" data-runner-src="https://www.youtube.com/embed/g-zYshsAg1E?rel=0" width="100%"></iframe></span><small placeholder="Add Photo Credit...">Lely</small></p><p><span>But dairy robots are expensive. A milking robot can cost </span><a href="https://dairy.unl.edu/automatic-milking-systems-good-bad-and-unknown/" target="_blank">several hundred thousand dollars</a><span>, plus an additional </span><a href="https://www.lelycentermidatlantic.com/index.php/2022/02/01/how-much-does-it-cost-to-operate-a-lely-robot/" target="_blank">US $5,000 to $10,000 per year in operating costs</a><span>. The Astronaut A5, Lely’s latest milking robot, uses a laser-guided <a href="https://spectrum.ieee.org/tag/robot-arm">robot arm</a> to clean the cow’s udder before attaching teat cups one at a time. While the cow munches on treats, the Astronaut monitors her milk output, collecting data on 32 parameters, including indicators of the quality of the milk and the health of the cow. When milking is complete, the robot cleans the udder again, and the cow is free to leave as the robot steam cleans itself in preparation for the next cow.</span></p><p><a href="https://www.lely.com/gb/centers/midlands/what-cost-milking-robot/" rel="noopener noreferrer" target="_blank">Lely argues</a> that although the initial cost is higher than that of a traditional milking parlor, the robots pay for themselves over time through higher milk production (due primarily to increased milking frequency) and lower labor costs. Lely’s other robots can also save on labor. The Vector mobile robot handles continuous feeding and feed pushing, and the Discovery Collector is a robotic manure vacuum that keeps the floors clean.
</p><p><img alt="Automated feeding robot is loaded with food by a small overhead crane before it leaves to deliver feed to cows inside a modern barn." data-rm-shortcode-id="9883c894cc153fca40c2315735e6c5f1" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/automated-feeding-robot-is-loaded-with-food-by-a-small-overhead-crane-before-it-leaves-to-deliver-feed-to-cows-inside-a-modern-b.jpg?id=59764133&amp;width=980" height="2777" id="eb199" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/automated-feeding-robot-is-loaded-with-food-by-a-small-overhead-crane-before-it-leaves-to-deliver-feed-to-cows-inside-a-modern-b.jpg?id=59764133&amp;width=980" width="4500"><small placeholder="Add Photo Caption...">At Takes Dairy Farm, Rozum and her family used to spend several hours per day managing food for the cows. “The feeding robot is another amazing piece of the puzzle for our farm that allows us to focus on other things.”</small><small placeholder="Add Photo Credit...">Takes Family Farm</small></p><p>
	For most dairy farmers, though, making more money is not the main reason to get a robot, explains 
	<a href="https://ansci.umn.edu/people/marcia-endres" rel="noopener noreferrer" target="_blank">Marcia Endres</a>, a professor in the department of animal science at the University of Minnesota. Endres specializes in dairy-cattle management, behavior, and welfare, and studies dairy robot adoption. “When we first started doing research on this about 12 years ago, most of the farms that were installing robots were smaller farms that did not want to hire employees,” Endres says. “They wanted to do the work just with family labor, but they also wanted to have more flexibility with their time. They wanted a better lifestyle.”
</p><p>
	Flexibility was key for the Takes family, who 
	<a href="https://youtu.be/vZY8TbBoDd0?t=147" rel="noopener noreferrer" target="_blank">added Lely robots to their dairy farm</a> in Ely, Iowa, four years ago. “When we had our old milking parlor, everything that we did as a family was always scheduled around milking,” says Josie Rozum, who manages the farm and a creamery along with her parents—Dan and Debbie Takes—and three brothers. “With the robots, we can prioritize our personal life a little bit more—we can spend time together on Christmas morning and know that the cows are still getting milked.”
</p><p><a href="https://www.dananddebbies.com/about/the-farm/" rel="noopener noreferrer" target="_blank">Takes Family Dairy Farm</a>’s 120-cow herd is milked by a pair of Astronaut A5 robots, with a Vector and three Discovery Collectors for feeding and cleaning. “They’ve become a crucial part of the team,” explains Rozum. “It would be challenging for us to find outside help, and the robots keep things running smoothly.” The robots also add sustainability to small dairy farms, and not just in the short term. “Growing up on the farm, we experienced the hard work, and we saw what that commitment did to our parents,” Rozum explains. “It’s a very tough lifestyle. Having the robots take over a little bit of that has made dairy farming more appealing to our generation.”
</p><p><span data-rm-shortcode-id="c22f75ac2236f457c18ecd55f872ca53"><iframe frameborder="0" height="auto" type="lazy-iframe" scrolling="no" data-runner-src="https://www.youtube.com/embed/vZY8TbBoDd0?rel=0&amp;start=147" width="100%"></iframe></span><small placeholder="Add Photo Credit...">Takes Dairy Farm</small></p><p>
	Of the 25,000 dairy farms in the <a href="https://spectrum.ieee.org/tag/united-states">United States</a>, Endres estimates about 10 percent have robots. This is 
	<a href="https://www.gminsights.com/industry-analysis/milking-robots-market" rel="noopener noreferrer" target="_blank">about a third of the adoption rate in Europe</a>, <a href="https://ec.europa.eu/eurostat/statistics-explained/index.php?title=Farms_and_farmland_in_the_European_Union_-_statistics" rel="noopener noreferrer" target="_blank">where farms tend to be smaller</a>, so the cost of implementing the robots is lower. Endres says that over the last five years, she’s seen a shift toward robot adoption at larger farms with over 500 cows, due primarily to labor shortages. “These larger dairies are having difficulty finding employees who want to milk cows—it’s a very tedious job. And the robot is always consistent. The farmers tell me, ‘My robot never calls in sick, and never shows up drunk.’ ”
</p><p>
	Endres is skeptical of Lely’s claim that its robots are responsible for increased milk production. “There is no research that proves that cows will be more productive just because of robots,” she says. It may be true that farms that add robots do see increased milk production, she adds, but it’s difficult to measure the direct effect that the robots have. “I have many dairies that I work with where they have both a robotic milking system and a conventional milking system, and if they are managing their cows well, there isn’t a lot of difference in milk production.”
</p><p><img alt="Cow using an automated brush for grooming inside a modern barn." data-rm-shortcode-id="9106b1e71ad19d377f43b164221e0a40" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/cow-using-an-automated-brush-for-grooming-inside-a-modern-barn.jpg?id=59759835&amp;width=980" height="3375" id="3f0b4" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/cow-using-an-automated-brush-for-grooming-inside-a-modern-barn.jpg?id=59759835&amp;width=980" width="4500"><small placeholder="Add Photo Caption...">The Lely Luna cow brush helps to keep cows’ skin healthy. It’s also relaxing and enjoyable, so cows will brush themselves several times a day.</small><small placeholder="Add Photo Credit...">Lely</small></p><p>
	The robots do seem to improve the cows’ lives, however. “Welfare is not just productivity and health—it’s also the affective state, the ability to have a more natural life,” Endres says. “Again, it’s hard to measure, but I think that on most of these robot farms, their affective state is improved.” The cows’ relationship with humans changes too, comments Endres. When the cows no longer associate humans with being told where to go and what to do all the time, they’re 
	<a href="https://youtu.be/sjmflKg-v2o?t=2633" rel="noopener noreferrer" target="_blank">much more relaxed and friendly</a> toward people they meet. Rozum agrees. “We’ve noticed a tremendous change in our cows’ demeanor. They’re more calm and relaxed, just doing their thing in the barn. They’re much more comfortable when they can choose what to do.”
</p><h2>Cows Versus Robots</h2><p>
	Cows are curious and clever <a href="https://spectrum.ieee.org/tag/animals">animals</a>, and have the same instinct that humans have when confronted with a new robot: They want to play with it. Because of this, Lely has had to cow-proof its robots, modifying their design and <a href="https://spectrum.ieee.org/tag/programming">programming</a> so that the machines can function autonomously around cows. Like many <a href="https://spectrum.ieee.org/tag/mobile-robots">mobile robots</a>, Lely’s dairy robots include contact-sensing bumpers that will pause the robot’s motion if it runs into something. On the Vector feeding robot, Lely product engineer 
	<a href="https://www.linkedin.com/in/beltman42/" rel="noopener noreferrer" target="_blank">René Beltman</a> tells me, they had to add a software option to disable the bumper. “The cows learned that, ‘oh, if I just push the bumper, then the robot will stop and put down more feed in my area for me to eat.’ It was a free buffet. So you don’t want the cows to end up controlling the robot.” Emergency stop buttons had to be relocated so that they couldn’t be pressed by questing cow tongues.
</p><p>
	There’s also a social component to cow-robot interaction. Within their herd, cows have a well-established hierarchy, and the robots need to work within this hierarchy to do their jobs. For example, a cow won’t move out of the way if it thinks that another cow is lower in the hierarchy than it is, and it will treat a robot the same way. The engineers had to figure out how the Discovery Collector could drive back and forth to vacuum up manure without getting blocked by cows. “In our early tests, we’d use sensors to have the robot stop to avoid running into any of the cows,” explains Jacobs. “But that meant that the robot became the weakest one in the hierarchy, and it would just end up crying in the corner because the cows wouldn’t move for it. So now, it doesn’t stop.”
</p><p><img alt="Cows resting in pens with a robot cleaning the floor in a modern barn setting." data-rm-shortcode-id="270244739bf55a596082710523ed2eed" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/cows-resting-in-pens-with-a-robot-cleaning-the-floor-in-a-modern-barn-setting.jpg?id=59759837&amp;width=980" height="2102" id="c9d2c" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/cows-resting-in-pens-with-a-robot-cleaning-the-floor-in-a-modern-barn-setting.jpg?id=59759837&amp;width=980" width="3363"><small placeholder="Add Photo Caption...">One of the dirtiest jobs on a dairy farm is handled by the Discovery Collector, an autonomous manure vacuum. The robot relies on wheel odometry and <a href="https://spectrum.ieee.org/tag/ultrasonic-sensors">ultrasonic sensors</a> for navigation because it’s usually covered in manure.</small><small placeholder="Add Photo Credit...">Evan Ackerman</small></p><p>
	“We make the robot drive slower for the first week, when it’s being introduced to a new herd,” adds Beltman. “That gives the cows time to figure out that the robot is at the top of the hierarchy.”
</p><p>
	Besides maintaining their dominance at the top of the herd, the current generation of Lely robots doesn’t interact much with the cows, but that’s changing, Jacobs tells me. Right now, when a robot is driving through the barn, it makes a beeping sound to let the cows know it’s coming. Lely is looking into how to make these sounds more enjoyable for the cows. “This was a recent revelation for me,” Jacobs says. ”We’re not just designing interactions for humans. The cows are our users, too.”
</p><h2>Human-Robot Interaction</h2><p>
	Last year, Jacobs and researchers from <a href="https://spectrum.ieee.org/tag/delft-university-of-technology">Delft University of Technology</a>, in the Netherlands, 
	<a href="https://ieeexplore.ieee.org/document/10660792" rel="noopener noreferrer" target="_blank">presented a paper</a> at the IEEE Human-Robot Interaction (<a href="https://spectrum.ieee.org/tag/hri">HRI</a>) Conference exploring this concept of robot behavior development on working dairy farms. The researchers visited robotic dairies, interviewed dairy farmers, and held workshops within Lely to establish a robot code of conduct—a guide that Lely’s designers and engineers use when considering how their robots should look, sound, and act, for the benefit of both humans and cows. On the engineering side, this includes practical things like colors and patterns for lights and different types of sounds so that information is communicated consistently across platforms.
</p><p>
	But there’s much more nuance to making a robot seem “reliable” or “friendly” to the end user, since such things are not only difficult to define but also difficult to implement in a way that’s appropriate for dairy farmers, who prioritize functionality.
</p><p>
	Jacobs doesn’t want his robots to try to be anyone’s friend—not the cow’s, and not the farmer’s. “The robot is an employee, and it should have a professional relationship,” he says. “So the robot might say ‘Hi,’ but it wouldn’t say, ‘How are you feeling today?’ ” What’s more important is that the robots are trustworthy. For Jacobs, instilling trust is simple: “You cannot gain trust by doing tricks. If your robot is reliable and predictable, people will trust it.”
</p><p><img alt="Automated milking machine attached to cow's udders, with cow standing on a slotted floor." data-rm-shortcode-id="4bec6c118f690770f5c6ecec2f377e4e" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/automated-milking-machine-attached-to-cow-s-udders-with-cow-standing-on-a-slotted-floor.jpg?id=59759840&amp;width=980" height="2700" id="cf5f5" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/automated-milking-machine-attached-to-cow-s-udders-with-cow-standing-on-a-slotted-floor.jpg?id=59759840&amp;width=980" width="3600"><small placeholder="Add Photo Caption...">The electrically driven, pneumatically balanced <a href="https://spectrum.ieee.org/tag/robotic-arm">robotic arm</a> that the Lely Astronaut uses to milk cows is designed to withstand accidental (or intentional) kicks.</small><small placeholder="Add Photo Credit...">Lely</small></p><p>
	The real challenge, Jacobs explains, is that Lely is largely on its own when it comes to finding the best way of integrating its robots into the daily lives of people who may have never thought they’d have robot employees. “There’s not that much knowledge in the robot world about how to approach these problems,” Jacobs says. “We’re working with almost 20,000 farmers who have a bigger robot workforce than a human workforce. They’re robot managers. And I don’t know that there necessarily are other companies that have a customer base of normal people who have strategic dependence on robots for their livelihood. That is where we are now.”
</p><h2>From Dairy Farmers to Robot Managers</h2><p><span>With the additional time and flexibility that the robots enable, some dairy farmers have been able to diversify. On our way back to Lely’s headquarters, we stop at </span><a href="https://boerderijhetlansingerland.nl/melkveebedrijf/" target="_blank">Farm Het Lansingerland</a><span>, owned by a Lely customer who has added a small restaurant and farm shop to his dairy. Large windows look into the barn so that restaurant patrons can watch the robots at work, caring for the cows that produce the cheese that’s on the menu. A self-guided tour takes you right up next to an Astronaut A5 milking robot, while signs on the floor warn of Vector feeding robots on the move. “This farmer couldn’t expand—this was as many cows as he’s allowed to have here,” Jacobs explains to me over cheese sandwiches. “So, he needs to have additional income streams. That’s why he started these other things. And the robots were essential for that.”</span></p><p>
	The farmer is an early adopter—someone who’s excited about the technology and actively interested in the robots themselves. But most of Lely’s tens of thousands of customers just want a reliable robotic employee, not a science project. “We help the farmer to prepare not just the environment for the robots, but also the mind,” explains Jacobs. “It’s a complete shift in their way of working.”
</p><p>
	Besides managing the robots, the farmer must also learn to manage the massive amount of data that the robots generate about the cows. “The amount of data we get from the robots is a game changer,” says Rozum. “We can track milk production, health, and cow habits in real time. But it’s overwhelming. You could spend all day just sitting at the computer, looking at data and not get anything else done. It took us probably a year to really learn how to use it.”
</p><p>
	The most significant advantages to farmers come from using the data for long-term optimization, says the University of Minnesota’s Endres. “In a conventional barn, the cows are treated as a group,” she says. “But the robots are collecting data about individual animals, which lets us manage them as individuals.” By combining data from a milking robot and a feeding robot, for example, farmers can close the loop, correlating when and how the cows are fed with their milk production. Lely is doing its best to simplify this type of decision making, says Jacobs. “You need to understand what the data means, and then you need to present it to the farmer in an actionable way.”
</p><div id="rebelltitem1" data-id="1" data-reload-ads="false" data-is-image="True" data-href="https://spectrum.ieee.org/lely-dairy-robots/a-robotic-dairy" data-basename="a-robotic-dairy" data-post-id="2671643574" data-published-at="1743515326" data-use-pagination="False"><h3 data-role="headline">
            
                A Robotic Dairy
            
            
        </h3><p><img id="15c0e" data-rm-shortcode-id="523f4b6812182dc0756edd9f83d8e771" data-rm-shortcode-name="rebelmouse-image" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/illustration-of-an-automated-dairy-farm-with-milking-machines-feed-dispensers-and-cows-in-various-areas.png?id=59771554&amp;width=980" data-runner-src="https://spectrum.ieee.org/media-library/illustration-of-an-automated-dairy-farm-with-milking-machines-feed-dispensers-and-cows-in-various-areas.png?id=59771554&amp;width=980" width="3238" height="2134" alt="Illustration of an automated dairy farm with milking machines, feed dispensers, and cows in various areas."><small><p>Chris Philpot</p></small></p><h3>
All dairy farms are different, and farms that decide to give robots a try will often start with just one or two. A highly roboticized dairy barn might look something like this illustration, with a team of many different robots working together to keep the cows comfortable and happy.
</h3><p>
	A: One Astronaut A5 robot can milk up to 60 cows. After the Astronaut cleans the teats, a laser sensor guides a robotic arm to attach the teat cups. Milking takes just a few minutes.
</p><p>
	B: In the feed <a href="https://spectrum.ieee.org/tag/kitchen">kitchen</a>, the Vector robot recharges itself while different ingredients are loaded into its hopper and mixed together. Mixtures can be customized for different groups of cows.
</p><p>
	C: The Vector robot dispenses freshly mixed food in small batches throughout the day. A laser measures the height of leftover food to make sure that the cows are getting the right amounts.
</p><p>
	D: The Discovery Collector is a mop and vacuum for cow manure. It navigates the barn autonomously and returns to its docking station to remove waste, refill water, and wirelessly recharge.</p><p>
	E: As it milks, the Astronaut is collecting a huge amount of data—32 different parameters per teat. If it detects an issue, the farmer is notified, helping to catch health problems early.</p><p>
	F: Automated gates control meadow access and will keep a cow inside if she’s due to be milked soon. Cows are identified using <a href="https://spectrum.ieee.org/tag/rfid">RFID</a> collars, which also track their behavior and health.
</p></div><h2>A Sensible Future for Dairy Robots</h2><p>
	After lunch, we stop by Lely headquarters, where bright red life-size cow statues guard the entrance and all of the conference rooms are dairy themed. We get comfortable in Butter, and I ask Jacobs and Beltman what the future holds for their dairy robots.
</p><p>
	In the near term, Lely is focused on making its existing robots more capable. Its latest 
	<a href="https://www.lely.com/us/press/2024/09/10/lely-introduces-autonomous-feed-pushing-robot-for/" rel="noopener noreferrer" target="_blank">feed-pushing robot</a> is equipped with <a href="https://spectrum.ieee.org/tag/lidar">lidar</a> and <a href="https://spectrum.ieee.org/tag/stereo-cameras">stereo cameras</a>, which allow it to autonomously navigate around large farms without needing to follow a metal strip bolted to the ground. A new <a href="https://www.lely.com/us/press/2024/09/10/lely-zeta-the-start-of-a-new-chapter-in-dairy-farm/" rel="noopener noreferrer" target="_blank">overhead camera system</a> will leverage AI to recognize individual cows and track their behavior, while also providing farmers with an enormous new dataset that could allow Lely’s systems to help farmers make more nuanced decisions about cow welfare. The potential of AI is what Jacobs seems most excited about, although he’s cautious as well. “With AI, we’re suddenly going to take away an entirely different level of work. So, we’re thinking about doing research into the meaningfulness of work, to make sure that the things that we do with AI are the things that farmers <em><em>want</em></em> us to do with AI.”
</p><p>
	“The idea of AI is very intriguing,” comments Rozum. “I think AI could help to simplify things for farmers. It would be a tool, a resource. But we know our cows best, and a farmer’s judgment has to be there too. There’s just some component of dairy farming that you cannot take the human out of. Robots are not going to be successful on a farm unless you have good farmers.”
</p><p>
	Lely is aware of this and knows that its robots have to find the right balance between being helpful, and taking over. “We want to make sure not to take away the kinds of interactions that give dairy farmers joy in their work,” says Beltman. “Like feeding calves—every farmer likes to feed the calves.” Lely does sell an 
	<a href="https://www.lely.com/us/solutions/feeding/calm/" rel="noopener noreferrer" target="_blank">automated calf feeder</a> that many dairy farmers buy, which illustrates the point: What’s the best way of designing robots to give humans the flexibility to do the work that they enjoy?
</p><p>
	“This is where <a href="https://spectrum.ieee.org/topic/robotics/">robotics</a> is going,” Jacobs tells me as he gives me a lift to the train station. “As a human, you could have two other humans and six robots, and that’s your company.” Many industries, he says, look to robots with the objective of minimizing human involvement as much as possible so that the robots can generate the maximum amount of value for whoever happens to be in charge.
</p><p>
	Dairy farms are different. Perhaps that’s because the person buying the robot is the person who most directly benefits from it. But I wonder if the concern over automation of jobs would be mitigated if more companies chose to emphasize the sustainability and joy of work equally with profit. Automation doesn’t have to be zero-sum—if implemented thoughtfully, perhaps robots can make work easier, more efficient, and more fun, too.
</p><p>
	Jacobs certainly thinks so. “That’s my utopia,” he says. “And we’re working in the right direction.”
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What the hell is a target triple? (153 pts)]]></title>
            <link>https://mcyoung.xyz/2025/04/14/target-triples/</link>
            <guid>43696756</guid>
            <pubDate>Tue, 15 Apr 2025 18:35:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mcyoung.xyz/2025/04/14/target-triples/">https://mcyoung.xyz/2025/04/14/target-triples/</a>, See on <a href="https://news.ycombinator.com/item?id=43696756">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <p><em>Cross-compiling</em> is taking a computer program and compiling it for a machine that isn’t the one hosting the compilation. Although historically compilers would only compile for the host machine, this is considered an anachronism: all serious native compilers are now cross-compilers.</p> <p>After all, you don’t want to be building your iPhone app on literal iPhone hardware.</p> <p>Many different compilers have different mechanisms for classifying and identifying <em>targets</em>. A target is a platform that the compiler can produce executable code for. However, due to the runaway popularity of LLVM, virtually all compilers now use <em>target triples</em>. You may have already encountered one, such as the venerable <code>x86_64-unknown-linux</code>, or the evil <code>x86_64-pc-windows</code>. This system is convoluted and <em>almost</em> self-consistent.</p> <p>But what is a target triple, and where did they come from?</p> <h2 id="stupid-gcc-conventions"><a href="#stupid-gcc-conventions">Stupid GCC Conventions</a></h2> <p>So if you go poking around the <a href="https://wiki.osdev.org/Target_Triplet">Target Triplet</a> page on OSDev, you will learn both true and false things about target triples, because this page is about GCC, not native compilers in general.</p> <blockquote> <p>Generally, there is no “ground truth” for what a target triple is. There isn’t some standards body that assigns these names. But as we’ll see, LLVM is the trendsetter.</p> </blockquote> <p>If you run the following command you can learn the target triple for your machine:</p> <div><figure><pre><code data-lang="console"><span>$</span><span> </span>gcc <span>-dumpmachine</span>
<span>x86_64-linux-gnu</span></code></pre></figure></div> <p>Now if you’re at all familiar with any system that makes pervasive use of target triples, you will know that this is <em>not a target triple</em>, because this target’s name is <code>x86_64-unknown-linux-gnu</code>, which is what both <code>clang</code> and <code>rustc</code> call-</p> <div><figure><pre><code data-lang="console"><span>$</span><span> </span>clang <span>-dumpmachine</span>
<span>x86_64-pc-linux-gnu
</span><span>$</span><span> </span>rustc <span>-vV</span> | <span>grep </span>host
<span>host: x86_64-unknown-linux-gnu</span></code></pre></figure></div> <p>Oh no.</p> <p>Well, GCC is missing the the <code>pc</code> or <code>unknown</code> component, and that’s specifically a GCC thing; it allows omitting parts of the triple in such a way that is unambiguous. And they are a GCC invention, so perhaps it’s best to start by assessing GCC’s beliefs.</p> <p>According to GCC, a target triple is a string of the form <code>&lt;machine&gt;-&lt;vendor&gt;-&lt;os&gt;</code>. The “machine” part unambiguously identifies the architecture of the system. Practically speaking, this is the assembly language that the compiler will output at the end. The “vendor” part is essentially irrelevant, and mostly is of benefit for sorting related operating systems together. Finally, the “os” part identifies the operating system that this code is being compiled for. The main thing this identifies for a compiler is the executable format: COFF/PE for Windows, Mach-O for Apple’s operating systems, ELF for Linux and friends, and so on (this, however, is an oversimplification).</p> <p>But you may notice that <code>x86_64-unknown-linux-gnu</code> has an extra, fourth entry<sup id="fnref:quad" role="doc-noteref"><a href="#fn:quad" rel="footnote">1</a></sup>, which plays many roles but is most often called the target’s “ABI”. For <code>linux</code>, it identifies the target’s libc, which has consequences for code generation of some language features, such as thread locals and unwinding. It is optional, since many targets only have one ABI.</p> <h3 id="cross-compiling-with-gcc"><a href="#cross-compiling-with-gcc">Cross Compiling with GCC</a></h3> <p>A critical piece of history here is to understand the really stupid way in which GCC does cross compiling. Traditionally, each GCC binary would be built for <em>one</em> target triple. The full name of a GCC binary would include the triple, so when cross-compiling, you would compile with <code>x86_64-unknown-linux-gcc</code>, link with <code>x86_64-unknown-linux-ld</code>, and so on (here, <code>gcc</code> is not the fourth ABI component of a triple; it’s just one of the tools in the <code>x86_64-unknown-linux</code> toolchain).</p> <p>Nobody with a brain does this<sup id="fnref:toolchain" role="doc-noteref"><a href="#fn:toolchain" rel="footnote">2</a></sup>. LLVM and all cross compilers that follow it instead put all of the backends in one binary, and use a compiler flag like <code>--target</code> to select the backend.</p> <p>But regardless, this is where target triples come from, and why they look the way they look: they began as prefixes for the names of binaries in <code>autoconf</code> scripts.</p> <p>But GCC is ancient technology. In the 21st century, LLVM rules all native compilers.</p> <h2 id="names-in-the-ancient-language"><a href="#names-in-the-ancient-language">Names in the Ancient Language</a></h2> <p>LLVM’s target triple list is the one that should be regarded as “most official”, for a few reasons:</p> <ol> <li> <p>Inertia. Everyone and their mother uses LLVM as a middleend and backend, so its naming conventions bubble up into language frontends like <code>clang</code>, <code>rustc</code> <code>swiftc</code>, <code>icc</code>, and <code>nvcc</code>.</p> </li> <li> <p>Upstream work by silicon and operating system vendors. LLVM is what people get hired to work on for the most part, not GCC, so its platform-specific conventions often reflect the preferences of vendors.</p> </li> </ol> <p>These are in no small part because Apple, Google, and Nvidia have armies of compiler engineers contributing to LLVM.</p> <p>The sources for “official” target triples are many. Generally, I would describe a target triple as “official” when:</p> <ol> <li> <p>A major compiler (so, <code>clang</code> or <code>rustc</code>) uses it. Rust does a way better job than LLVM of documenting their targets, so I prefer to give it deference. You can find Rust’s official triples <a href="https://doc.rust-lang.org/rustc/platform-support.html">here</a>.</p> </li> <li> <p>A platform developer (e.g., a hardware manufacturer, OS vendor) distributes a toolchain with a target triple in the <code>arch-vendor-os</code> format.</p> </li> </ol> <p>So, what are the names in class (1)? LLVM does not really go out of its way to provide such a list. But we gotta start somewhere, so source-diving it is.</p> <p>We can dig into <a href="https://llvm.org/doxygen/Triple_8cpp_source.html"><code>Triple.cpp</code></a> in LLVM’s target triple parser. It lists all of the names LLVM recognizes for each part of a triple. Looking at <code>Triple::parseArch()</code>, we have the following names, including many, many aliases. The first item on the right column is LLVM’s preferred name for the architecture, as indicated by <code>Triple::getArchTypeName()</code>.</p> <table> <thead> <tr> <th>Architecture</th> <th>Possible Names</th> </tr> </thead> <tbody> <tr> <td><a href="https://en.wikipedia.org/wiki/X86">Intel x86</a> (32-bit)</td> <td><code>i386</code>, <code>i486</code>, <code>i586</code>, <code>i686</code>, <code>i786</code>, <code>i886</code>, <code>i986</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/X86">Intel x86</a> (64-bit)</td> <td><code>x86_64</code>, <code>amd64</code>, <code>x86_86h</code><sup id="fnref:x86_86h" role="doc-noteref"><a href="#fn:x86_86h" rel="footnote">3</a></sup></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/ARM_architecture_family">ARM</a> (32-bit)</td> <td><code>arm</code>, <code>xscale</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/ARM_architecture_family">ARM</a> (32-bit, big-endian)</td> <td><code>armeb</code>, <code>xscaleeb</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/ARM_architecture_family">ARM</a> (64-bit)</td> <td><code>aarch64</code>, <code>aarch64e</code>, <code>aarch64ec</code>, <code>arm64</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/ARM_architecture_family">ARM</a> (64-bit, big-endian)</td> <td><code>aarch64_be</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/ARM_architecture_family">ARM</a> (64-bit, ILP32<sup id="fnref:ilp32" role="doc-noteref"><a href="#fn:ilp32" rel="footnote">4</a></sup>)</td> <td><code>aarch64_32</code>, <code>arm64_32</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/ARM_architecture_family#Thumb">ARM Thumb</a></td> <td><code>thumb</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/ARM_architecture_family#Thumb">ARM Thumb</a> (big-endian)</td> <td><code>thumbeb</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/PowerPC">IBM PowerPC</a><sup id="fnref:power" role="doc-noteref"><a href="#fn:power" rel="footnote">5</a></sup> (32-bit)</td> <td><code>powerpc</code>, <code>powerpcspe</code>, <code>ppc</code>, <code>ppc32</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/PowerPC">IBM PowerPC</a> (little-endian)</td> <td><code>powerpcle</code>, <code>ppcle</code>, <code>ppc32le</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/PowerPC">IBM PowerPC</a> (64-bit)</td> <td><code>powerpc64</code>, <code>ppu</code>, <code>ppc64</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/PowerPC">IBM PowerPC</a> (64-bit, little-endian)</td> <td><code>powerpc64le</code>, <code>ppc64le</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/MIPS_architecture">MIPS</a> (32-bit)</td> <td><code>mips</code>, <code>mipseb</code>, <code>mipsallegrex</code>, <code>mipsisa32r6</code>, <code>mipsr6</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/MIPS_architecture">MIPS</a> (32-bit, little-endian)</td> <td><code>mipsel</code>, <code>mipsallegrexel</code>, <code>mipsisa32r6el</code>, <code>mipsr6el</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/MIPS_architecture">MIPS</a> (64-bit)</td> <td><code>mips64</code>, <code>mips64eb</code>, <code>mipsn32</code>, <code>mipsisa64r6</code>, <code>mips64r6</code>, <code>mipsn32r6</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/MIPS_architecture">MIPS</a> (64-bit, little-endian)</td> <td><code>mips64el</code>, <code>mipsn32el</code>, <code>mipsisa64r6el</code>, <code>mips64r6el</code>, <code>mipsn32r6el</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/RISC-V">RISC-V</a> (32-bit)</td> <td><code>riscv32</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/RISC-V">RISC-V</a> (64-bit)</td> <td><code>riscv64</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Z/Architecture">IBM z/Architecture</a></td> <td><code>s390x</code><sup id="fnref:s390x" role="doc-noteref"><a href="#fn:s390x" rel="footnote">6</a></sup>, <code>systemz</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/SPARC">SPARC</a></td> <td><code>sparc</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/SPARC">SPARC</a> (little-endian)</td> <td><code>sparcel</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/SPARC">SPARC</a> (64-bit)</td> <td><code>sparcv6</code>, <code>sparc64</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/WebAssembly">WebAssembly</a> (32-bit)</td> <td><code>wasm32</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/WebAssembly">WebAssembly</a> (64-bit)</td> <td><code>wasm64</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Loongson">Loongson</a> (32-bit)</td> <td><code>loongarch32</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Loongson">Loongson</a> (64-bit)</td> <td><code>loongarch64</code></td> </tr> </tbody> <tbody> <tr> <td><a href="https://en.wikipedia.org/wiki/Radeon_HD_2000_series">Radeon R600</a></td> <td><code>r600</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Graphics_Core_Next">AMD GCN</a></td> <td><code>amdgcn</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Qualcomm_Hexagon">Qualcomm Hexagon</a></td> <td><code>hexagon</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Parallel_Thread_Execution">Nvidia PTX</a><sup id="fnref:ptx" role="doc-noteref"><a href="#fn:ptx" rel="footnote">7</a></sup> (32-bit)</td> <td><code>nvptx</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Parallel_Thread_Execution">Nvidia PTX</a> (64-bit)</td> <td><code>nvptx64</code></td> </tr> <tr> <td>AMD IL<sup id="fnref:amdil" role="doc-noteref"><a href="#fn:amdil" rel="footnote">8</a></sup> (32-bit)</td> <td><code>amdil</code></td> </tr> <tr> <td>AMD IL (64-bit)</td> <td><code>amdil64</code></td> </tr> <tr> <td>Direct-X IL</td> <td><code>dxil</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Heterogeneous_System_Architecture">HSAIL</a> (32-bit)</td> <td><code>hsail</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Heterogeneous_System_Architecture">HSAIL</a> (64-bit)</td> <td><code>hsail64</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Standard_Portable_Intermediate_Representation">Khronos SPIR</a> (32-bit)</td> <td><code>spir</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Standard_Portable_Intermediate_Representation">Khronos SPIR</a> (64-bit)</td> <td><code>spir64</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Standard_Portable_Intermediate_Representation">Khronos SPIR-V</a></td> <td><code>spirv</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Standard_Portable_Intermediate_Representation">Khronos SPIR-V</a> (32-bit)</td> <td><code>spirv32</code>, …</td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Standard_Portable_Intermediate_Representation">Khronos SPIR-V</a> (64-bit)</td> <td><code>spirv64</code>, …</td> </tr> <tr> <td><a href="https://developer.android.com/guide/topics/renderscript/compute">Android RenderScript</a> (32-bit)</td> <td><code>renderscript32</code></td> </tr> <tr> <td><a href="https://developer.android.com/guide/topics/renderscript/compute">Android RenderScript</a> (64-bit)</td> <td><code>renderscript64</code></td> </tr> <tr> <td><a href="https://en.wikichip.org/wiki/movidius/microarchitectures/shave_v2.0">Movidius SHAVE</a></td> <td><code>shave</code></td> </tr> </tbody> <tbody> <tr> <td><a href="https://en.wikipedia.org/wiki/AVR_microcontrollers">Atmel AVR</a></td> <td><code>avr</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Motorola_68000_series">Motorola 68k</a></td> <td><code>m68k</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/ARC_(processor)">Argonaut ARC</a></td> <td><code>arc</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/TI_MSP430">Texas Instruments MSP430</a></td> <td><code>msp430</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Tensilica">Tensilica Xtensa</a></td> <td><code>xtensa</code></td> </tr> <tr> <td><a href="https://c-sky.github.io/">C-SKY</a></td> <td><code>csky</code></td> </tr> <tr> <td><a href="https://github.com/cpc/openasip">OpenASIP</a></td> <td><code>tce</code></td> </tr> <tr> <td><a href="https://github.com/cpc/openasip">OpenASIP</a> (little-endian)</td> <td><code>tcele</code></td> </tr> <tr> <td><a href="https://q3k.org/lanai.html">Myracom Lanai</a></td> <td><code>lanai</code></td> </tr> <tr> <td>XMOS xCore</td> <td><code>xcore</code></td> </tr> <tr> <td>Kalimba<sup id="fnref:idk" role="doc-noteref"><a href="#fn:idk" rel="footnote">9</a></sup></td> <td><code>kalimba</code></td> </tr> <tr> <td>VE<sup id="fnref:idk:1" role="doc-noteref"><a href="#fn:idk" rel="footnote">9</a></sup></td> <td><code>ve</code></td> </tr> </tbody> </table> <p>Here we begin to see that target triples are not a neat system. They are <em>hell</em>. Where a list of architecture names contains a “…”, it means that LLVM accepts many more names.</p> <p>The problem is that architectures often have <em>versions</em> and <em>features</em>, which subtly change how the compiler generates code. For example, when compiling for an <code>x86_64</code>, we may want to specify that we want AVX512 instructions to be used. On LLVM, you might do that with <code>-mattr=+avx512</code>. Every architecture has a subtly-different way of doing this, because every architecture had a <em>different GCC</em>! Each variant of GCC would put different things behind <code>-mXXX</code> flags (<code>-m</code> for “machine”), meaning that the interface is not actually that uniform. The meanings of <code>-march</code>, <code>-mcpu</code>, <code>-mtune</code>, and <code>-mattr</code> thus vary wildly for this reason.</p> <p>Because LLVM is supposed to replace GCC (for the most part), it replicates a lot of this wacky behavior.</p> <p>So uh, we gotta talk about 32-bit ARM architecture names.</p> <h3 id="armtargetparsercpp"><a href="#armtargetparsercpp"><code>ARMTargetParser.cpp</code></a></h3> <p>There is a hellish file in LLVM dedicated to parsing ARM architecture names. Although members of the ARM family have many configurable features (which you can discover with <code>llc -march aarch64 -mattr help</code><sup id="fnref:llc" role="doc-noteref"><a href="#fn:llc" rel="footnote">10</a></sup>), the name of the architecture is somewhat meaningful, and can hav many options, mostly relating to the many versions of ARM that exist.</p> <p>How bad is it? Well, we can look at all of the various ARM targets that <code>rustc</code> supports with <code>rustc --print target-list</code>:</p> <div><figure><pre><code data-lang="console"><span>$</span><span> </span>rustc <span>--print</span> target-list | <span>grep</span> <span>-P</span> <span>'arm|aarch|thumb'</span> <span>\</span>
<span>  | cut -d- -f1 | sort | uniq
aarch64
aarch64_be
arm
arm64_32
arm64e
arm64ec
armeb
armebv7r
armv4t
armv5te
armv6
armv6k
armv7
armv7a
armv7k
armv7r
armv7s
armv8r
thumbv4t
thumbv5te
thumbv6m
thumbv7a
thumbv7em
thumbv7m
thumbv7neon
thumbv8m.base
thumbv8m.main</span></code></pre></figure></div> <p>Most of these are 32-bit ARM versions, with profile information attached. These correspond to the names given <a href="https://en.wikipedia.org/wiki/ARM_architecture_family#Cores">here</a>. Why does ARM stick version numbers in the architecture name, instead of using <code>-mcpu</code> like you would on x86 (e.g. <code>-mcpu alderlake</code>)? I have no idea, because ARM is not my strong suit. It’s likely because of how early ARM support was added to GCC.</p> <p>Internally, LLVM calls these “subarchitectures”, although ARM gets special handling because there’s so many variants. SPIR-V, Direct X, and MIPS all have subarchitectures, so you might see something like <code>dxilv1.7</code> if you’re having a bad day.</p> <p>Of course, LLVM’s ARM support also sports some naughty subarchitectures not part of this system, with naughty made up names.</p> <ul> <li> <p><code>arm64e</code> is an Apple thing, which is an enhancement of <code>aarch64</code> present on some Apple hardware, which adds their own flavor of <a href="https://developer.apple.com/documentation/security/preparing-your-app-to-work-with-pointer-authentication">pointer authentication</a> and some other features.</p> </li> <li> <p><code>arm64ec</code> is a completely unrelated Microsoft invention that is essentially “<code>aarch64</code> but with an <code>x86_64</code>-ey ABI” to make <code>x86_64</code> emulation on what would otherwise be <code>aarch64-pc-windows-msvc</code> target somewhat more amenable.</p> </li> </ul> <blockquote> <p>Why the Windows people invented a whole other ABI instead of making things clean and simple like Apple did with Rosetta on ARM MacBooks? I have no idea, but <a href="http://www.emulators.com/docs/abc_arm64ec_explained.htm">http://www.emulators.com/docs/abc_arm64ec_explained.htm</a> contains various excuses, none of which I am impressed by. My read is that their compiler org was just worse at life than Apple’s, which is not surprising, since Apple does compilers better than anyone else in the business.</p> </blockquote> <p>Actually, since we’re on the topic of the names of architectures, I have a few things I need to straighten out.</p> <h3 id="made-up-names-of-architectures"><a href="#made-up-names-of-architectures">Made Up Names of Architectures</a></h3> <p>x86 and ARM both seem to attract a lot of people making up nicknames for them, which leads to a lot of confusion in:</p> <ol> <li> <p>What the “real” name is.</p> </li> <li> <p>What name a particular toolchain wants.</p> </li> <li> <p>What name you should use in your own cosmopolitan tooling.</p> </li> </ol> <p>Let’s talk about the incorrect names people like to make up for them. Please consider the following a relatively normative reference on what people call these architectures, based on my own experience with many tools.</p> <p>When we say “x86” unqualified, in 2025, we almost always mean <code>x86_64</code>, because 32-bit x86 is dead. If you need to talk about 32-bit x86, you should either say “32-bit x86”, “protected mode”<sup id="fnref:x86-modes" role="doc-noteref"><a href="#fn:x86-modes" rel="footnote">11</a></sup>, or “i386” (the first Intel microarchitecture that implemented protected mode)<sup id="fnref:i386" role="doc-noteref"><a href="#fn:i386" rel="footnote">12</a></sup>. You should not call it <code>x86_32</code> or just <code>x86</code>.</p> <p>You might also call it IA-32 for Intel Architecture 32, (or <code>ia32</code>), but nobody calls it that and you risk confusing people with <code>ia64</code>, or IA-64, the official name of Intel’s failed general-purpose VLIW architecture, <a href="https://en.wikipedia.org/wiki/Itanium">Itanium</a>, which is in no way compatible with x86. <code>ia64</code> was what GCC and LLVM named Itanium triples with. Itanium support was drowned in a bathtub during the Obama administration, so it’s not really relevant anymore. Rust has never had official Itanium support.</p> <p>32-bit x86 is <em>extremely not</em> called “x32”; this is what Linux used to call its x86 ILP32<sup id="fnref:ilp32:1" role="doc-noteref"><a href="#fn:ilp32" rel="footnote">4</a></sup> variant before it was removed (which, following the ARM names, would have been called <code>x86_6432</code>).</p> <p>There are also many ficticious names for 64-bit x86, which you should avoid unless you want the younger generation to make fun of you. <code>amd64</code> refers to AMD’s original implementation of long mode in their K8 microarchitecture, first shipped in their <a href="https://en.wikipedia.org/wiki/Athlon_64">Athlon 64</a> product. AMD still makes the best x86 chips (I am writing this on a machine socketed with a Zen2 Threadripper), sure, but calling it <code>amd64</code> is silly and also looks a lot like <code>arm64</code>, and I am honestly kinda annoyed at how much Go code I’ve seen with files named <code>fast_arm64.s</code> and <code>fast_amd64.s</code>. Debian also uses <code>amd64</code>/<code>arm64</code>, which makes browsing packages kind of annoying.</p> <p>On that topic, you should <em>absolutely not</em> call 64-bit mode <code>k8</code>, after the AMD K8. Nobody except for weird computer taxonomists like me know what that is. But Bazel calls it that, and it’s really irritating<sup id="fnref:piii" role="doc-noteref"><a href="#fn:piii" rel="footnote">13</a></sup>.</p> <p>You should also not call it <code>x64</code>. Although LLVM does accept <code>amd64</code> for historical purposes, no one calls it <code>x64</code> except for Microsoft. And even though it is fairly prevalent on Windows, I absolutely give my gamedev friends a hard time when they write <code>x64</code>.</p> <p>On the ARM side, well. Arm<sup id="fnref:arm-holdings" role="doc-noteref"><a href="#fn:arm-holdings" rel="footnote">14</a></sup> has a bad habit of not using consistent naming for 64-bit ARM, since they used both AArch64 and ARM64 for it. However, in compiler land, <code>aarch64</code> appears to be somewhat more popular.</p> <p>You should also probably stick to the LLVM names for the various architectures, instead of picking your favorite Arm Cortex name (like <code>cortex_m0</code>).</p> <h2 id="vendors-and-operating-systems"><a href="#vendors-and-operating-systems">Vendors and Operating Systems</a></h2> <p>The worst is over. Let’s now move onto examinining the rest of the triple: the platform vendor, and the operating system.</p> <p>The vendor is intended to identify who is responsible for the ABI definition for that target. Although provides little to no value to the compiler itself, but it does help to sort related targets together. Sort of.</p> <p>Returning to <code>llvm::Triple</code>, we can examine <code>Triple::VendorType</code>. Vendors almost always correspond to companies which develop operating systems or other platforms that code runs on, with some exceptions.</p> <p>We can also get the vendors that <code>rustc</code> knows about with a handy dandy command:</p> <div><figure><pre><code data-lang="console"><span>rustc --print target-list | grep -P '\w+-\w+-' | cut -d- -f2 | sort | uniq</span></code></pre></figure></div> <p>The result is this. This is just a representative list; I have left off a few that are not going to be especially recognizeable.</p> <table> <thead> <tr> <th>Vendor</th> <th>Name</th> <th>Example Triple</th> </tr> </thead> <tbody> <tr> <td>Vendor Unknown<sup id="fnref:unknown" role="doc-noteref"><a href="#fn:unknown" rel="footnote">15</a></sup></td> <td><code>unknown</code></td> <td><code>x86_64-unknown-linux</code></td> </tr> <tr> <td>“PC”</td> <td><code>pc</code></td> <td><code>x86_64-pc-windows-msvc</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/AMD">Advanced Micro Devices Inc.</a></td> <td><code>amd</code></td> <td><code>amdgcn-amd-gfx906</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Apple_Inc.">Apple Inc.</a></td> <td><code>apple</code></td> <td><code>aarch64-apple-ios-sim</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Intel">Intel Corporation</a></td> <td><code>intel</code></td> <td><code>i386-intel-elfiamcu</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/IBM">IBM Corporation</a></td> <td><code>ibm</code></td> <td><code>powerpc64-ibm-aix</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Mesa_(computer_graphics)">Mesa3D Project</a></td> <td><code>mesa</code></td> <td><code>amdgcn-mesa-mesa3d</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/MIPS_Technologies">MIPS Technologies LLC</a></td> <td><code>mti</code></td> <td><code>mips-mti-none-elf</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Nintendo">Nintendo</a></td> <td><code>nintendo</code></td> <td><code>armv6k-nintendo-3ds</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Nvidia">Nvidia Corporation</a></td> <td><code>nvidia</code></td> <td><code>nvptx64-nvidia-cuda</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Sony_Interactive_Entertainment">Sony Interactive Entertainment</a></td> <td><code>scei</code>, <code>sie</code>, <code>sony</code></td> <td><code>x86_64-sie-ps5</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Sun_Microsystems">Sun Microsystems</a></td> <td><code>sun</code></td> <td><code>sparcv9-sun-solaris</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/SUSE_S.A.">SUSE S. A.</a></td> <td><code>suse</code></td> <td><code>aarch64-suse-linux</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Red_Hat">Red Hat, Inc</a></td> <td><code>redhat</code></td> <td><code>x86_64-redhat-linux</code></td> </tr> <tr> <td><a href="https://en.wikipedia.org/wiki/Universal_Windows_Platform">Universal Windows Platform</a></td> <td><code>uwp</code></td> <td><code>aarch64-uwp-windows-msvc</code></td> </tr> </tbody> </table> <p>Most vendors are the names of organizations that produce hardware or operating systems. For example <code>suse</code> and <code>redhat</code> are used for those organizations’ Linux distributions, as a funny branding thing. Some vendors are projects, like the <code>mesa</code> vendor used with the Mesa3D OpenGL implementation’s triples.</p> <p>The <code>unknown</code> vendor is used for cases where the vendor is not specified or just not important. For example, the canonical Linux triple is <code>x86_64-unknown-linux</code>… although one could argue it should be <code>x86_64-torvalds-linux</code>. It is not uncommon for companies that sell/distribute Linux distributions to have their own target triples, as do SUSE and sometimes RedHat. Notably, there are no triples with a <code>google</code> vendor, even though <code>aarch64-linux-android</code> and <code>aarch64-unknown-fuchsia</code> should really be called <code>aarch64-google-linux-android</code> and <code>aarch64-google-fuchsia</code>. The target triple system begins to show cracks here.</p> <p>The <code>pc</code> vendor is a bit weirder, and is mostly used by Windows targets. The standard Windows target is <code>x86_64-pc-windows-msvc</code>, but really it should have been <code>x86_64-microsoft-windows-msvc</code>. This is likely complicated by the fact that there is also a <code>x86_64-pc-windows-gnu</code> triple, which is for <a href="https://en.wikipedia.org/wiki/MinGW">MinGW</a> code. This platform, despite running on Windows, is not provided by Microsoft, so it would probably make more sense to be called <code>x86_64-unknown-windows-gnu</code>.</p> <p>But not all Windows targets are <code>pc</code>! <a href="https://en.wikipedia.org/wiki/Universal_Windows_Platform">UWP</a> apps use a different triple, that replaces the <code>pc</code> with <code>uwp</code>. <code>rustc</code> provides targets for Windows 7 backports that use a <code>win7</code> “vendor”.</p> <h3 id="beyond-operating-systems"><a href="#beyond-operating-systems">Beyond Operating Systems</a></h3> <p>The third (or sometimes second, ugh) component of a triple is the operating system, or just “system”, since it’s much more general than that. The main thing that compilers get from this component relates to generating code to interact with the operating system (e.g. SEH on Windows) and various details related to linking, such as object file format and relocations.</p> <p>It’s also used for setting defines like <code>__linux__</code> in C, which user code can use to determine what to do based on the target.</p> <p>We’ve seen <code>linux</code> and <code>windows</code>, but you may have also seen <code>x86_64-apple-darwin</code>. <em>Darwin?</em></p> <p>The operating system formerly known as Mac OS X (now macOS<sup id="fnref:macos" role="doc-noteref"><a href="#fn:macos" rel="footnote">16</a></sup>) is a POSIX operating system. The POSIX substrate that all the Apple-specific things are built on top of is called Darwin. <a href="https://en.wikipedia.org/wiki/Darwin_(operating_system)">Darwin</a> is a free and open source operating system based on Mach, a research kernel whose name survives in Mach-O, the object file format used by all Apple products.</p> <p>All of the little doodads Apple sells use the actual official names of their OSes, like <code>aarch64-apple-ios</code>. For, you know, iOS. On your iPhone. Built with Xcode on your iMac.</p> <p><code>none</code> is a common value for this entry, which usually means a free-standing environment with no operating system. The object file format is usually specified in the fourth entry of the triple, so you might see something like <code>riscv32imc-unknown-none-elf</code>.</p> <p>Sometimes the triple refers not to an operating system, but to a complete hardware product. This is common with game console triples, which have “operating system” names like <code>ps4</code>, <code>psvita</code>, <code>3ds</code>, and <code>switch</code>. (Both Sony and Nintendo use LLVM as the basis for their internal toolchains; the Xbox toolchain is just MSVC).</p> <h2 id="abi-abi"><a href="#abi-abi">ABI! ABI!</a></h2> <p>The fourth entry of the triple (and I repeat myself, yes, it’s still a triple) represents the binary interface for the target, when it is ambiguous.</p> <p>For example, Apple targets never have this, because on an Apple platform, you just shut up and use <code>CoreFoundation.framework</code> as your libc. Except this isn’t true, because of things like <code>x86_64-apple-ios-sim</code>, the iOS simulator running on an x86 host.</p> <p>On the other hand, Windows targets will usually specify <code>-msvc</code> or <code>-gnu</code>, to indicate whether they are built to match MSVC’s ABI or MinGW. Linux targets will usually specify the libc vendor in this position: <code>-gnu</code> for glibc, <code>-musl</code> for musl, <code>-newlib</code> for newlib, and so on.</p> <p>This doesn’t just influence the calling convention; it also influences how language features, such as thread locals and dynamic linking, are handled. This usually requires coordination with the target libc.</p> <p>On ARM free-standing (<code>armxxx-unknown-none</code>) targets, <code>-eabi</code> specifies the ARM EABI, which is a standard embeded ABI for ARM. <code>-eabihf</code> is similar, but indicates that no soft float support is necessary (<code>hf</code> stands for hardfloat). (Note that Rust does not include a vendor with these architectures, so they’re more like <code>armv7r-none-eabi</code>).</p> <p>A lot of jankier targets use the ABI portion to specify the object file, such as the aforementioned <code>riscv32imc-unknown-none-elf</code>.</p> <h2 id="wasm-targets"><a href="#wasm-targets">WASM Targets</a></h2> <p>One last thing to note are the various WebAssembly targets, which completely ignore all of the above conventions. Their triples often only have two components (they are still called triples, hopefully I’ve made that clear by now). Rust is a little bit more on the forefront here than <code>clang</code> (and anyways I don’t want to get into Emscripten) so I’ll stick to what’s going on in <code>rustc</code>.</p> <p>There’s a few variants. <code>wasm32-unknown-unknown</code> (here using <code>unknown</code> instead of <code>none</code> as the system, oops) is a completely bare WebAssebly runtime where none of the standard library that needs to interact with the outside world works. This is essentially for building WebAssembly modules to deploy in a browser.</p> <p>There are also the WASI targets, which provide a standard ABI for talking to the host operating system. These are less meant for browsers and more for people who are using WASI as a security boundary. These have names like <code>wasm32-wasip1</code>, which, unusually, lack a vendor! A “more correct” formulation would have been <code>wasm32-unknown-wasip1</code>.</p> <h2 id="aside-on-go"><a href="#aside-on-go">Aside on Go</a></h2> <p>Go does the correct thing and distributes a cross compiler. This is well and good.</p> <p>Unfortunately, they decided to be different and special and do not use the target triple system for naming their targets. Instead, you set the <code>GOARCH</code> and <code>GOOS</code> environment variables before invoking <code>gc</code>. This will sometimes be shown printed with a slash between, such as <code>linux/amd64</code>.</p> <p>Thankfully, they at least provide documentation for a relevant internal package <a href="https://pkg.go.dev/internal/platform">here</a>, which offers the names of various <code>GOARCH</code> and <code>GOOS</code> values.</p> <p>They use completely different names from everyone else for a few things, which is guaranteed to trip you up. They use call the 32- and 64-bit variants of x86 <code>386</code> (note the lack of leading <code>i</code>) and <code>amd64</code>. They call 64-bit ARM <code>arm64</code>, instead of <code>aarch64</code>. They call little-endian MIPSes <code>mipsle</code> instead of <code>mipsel</code>.</p> <p>They also call 32-bit WebAssembly <code>wasm</code> instead of <code>wasm32</code>, which is a bit silly, and they use <code>js/wasm</code> as their equivalent of <code>wasm32-unknown-unknown</code>, which is <em>very</em> silly.</p> <p>Android is treated as its own operating system, <code>android</code>, rather than being <code>linux</code> with a particular ABI; their system also can’t account for ABI variants in general, since Go originally wanted to not have to link any system libraries, something that does not actually work.</p> <p>If you are building a new toolchain, don’t be clever by inventing a cute target triple convention. All you’ll do is annoy people who need to work with a lot of different toolchains by being different and special.</p> <h2 id="inventing-your-own-triples"><a href="#inventing-your-own-triples">Inventing Your Own Triples</a></h2> <p>Realistically, you probably shouldn’t. But if you must, you should probably figure out what you want out of the triple.</p> <p>Odds are there isn’t anything interesting to put in the vendor field, so you will avoid people a lot of pain by picking <code>unknown</code>. Just include a vendor to avoid pain for people in the future.</p> <p>You should also avoid inventing a new name for an existing architecture. Don’t name your hobby operating system’s triple <code>amd64-unknown-whatever</code>, please. And you definitely don’t want to have an ABI component. One ABI is enough.</p> <p>If you’re inventing a triple for a free-standing environment, but want to specify something about the hardware configuration, you’re probably gonna want to use <code>-none-&lt;abi&gt;</code> for your system. For some firmware use-cases, though, the system entry is a better place, such as for the UEFI triples. Although, I have unforunately seen both <code>x86_64-unknown-uefi</code> and <code>x86_64-pc-none-uefi</code> in the wild.</p> <p>And most imporantly: this sytem was built up organically. Disabuse yourself now of the idea that the system is consistent and that target triples are easy to parse. Trying to parse them will make you very sad.</p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I speak at Harvard as it faces its biggest crisis since 1636 (104 pts)]]></title>
            <link>https://scottaaronson.blog/?p=8805</link>
            <guid>43696010</guid>
            <pubDate>Tue, 15 Apr 2025 17:35:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://scottaaronson.blog/?p=8805">https://scottaaronson.blog/?p=8805</a>, See on <a href="https://news.ycombinator.com/item?id=43696010">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-8805">
				
<p>Every week, I tell myself I won’t do yet another post about the asteroid striking American academia, and then every week events force my hand otherwise.</p>



<p>No one on earth—<em>certainly</em> no one who reads this blog—could call me blasé about the issue of antisemitism at US universities.  I’ve blasted the takeover of entire departments and unrelated student clubs and campus common areas by the dogmatic belief that the State of Israel (and <em>only</em> Israel, among all nations on earth) should be eradicated, by the use of that belief as a litmus test for entry.  Since October 7, I’ve dealt with comments and emails pretty much every day calling me a genocidal Judeofascist Zionist.</p>



<p>So I hope it means something when I say: <em>today I salute Harvard for standing up to the Trump administration</em>. And I’ll say so in person, when I visit Harvard’s math department later this week to give the <a href="https://cmsa.fas.harvard.edu/event/yip-2025/">Fifth Annual Yip Lecture</a>, on “How Much Math Is Knowable?”  The more depressing the news, I find, the more my thoughts turn to the same questions that bothered Euclid and Archimedes and Leibniz and Russell and Turing.  Actually, what the hell, why don’t I share the abstract for this talk?</p>



<blockquote>
<p>Theoretical computer science has over the years sought more and more refined answers to the question of which mathematical&nbsp;truths are knowable by finite beings like ourselves,&nbsp;bounded in time and space and subject to physical laws.&nbsp; I’ll tell a story that starts with Gödel’s Incompleteness Theorem and Turing’s discovery of uncomputability.&nbsp; I’ll then introduce the spectacular Busy Beaver function, which grows faster than any computable function.&nbsp; Work by me and Yedidia, along with recent improvements by O’Rear and Riebel, has shown that the value of BB(745) is independent of the axioms of set theory; on the other end, an international collaboration proved last year that BB(5) = 47,176,870.&nbsp; I’ll speculate on whether BB(6) will ever be known,&nbsp;by us or our AI successors.&nbsp; I’ll next discuss the P≠NP conjecture and what it&nbsp;does and doesn’t mean for the limits of machine&nbsp;intelligence.&nbsp; As my own specialty is quantum computing,&nbsp;I’ll summarize what we know about how scalable quantum computers, assuming we get&nbsp;them,&nbsp;will expand the&nbsp;boundary of what’s mathematically knowable.&nbsp; I’ll end by talking about hypothetical models even beyond quantum computers, which might expand the boundary of knowability still&nbsp;further, if one is able (for example) to jump into a black hole, create a closed timelike curve, or project oneself onto the holographic boundary of the universe.</p>
</blockquote>



<p>Now back to the depressing news.  What makes me take Harvard’s side is the experience of Columbia. Columbia had already been moving in the right direction on fighting antisemitism, and on enforcing its rules against disruption, before the government even got involved.  Then, once the government <em>did</em> take away funding and present its ultimatum—completely outside the process specified in Title VI law—Columbia’s administration quickly agreed to everything asked, to howls of outrage from the left-leaning faculty. Yet <strong>despite its total capitulation,</strong> the government has <em>continued</em> to hold Columbia’s medical research and other science funding hostage, while inventing a never-ending list of additional demands, whose apparent endpoint is that Columbia submit to state ideological control like a university in Russia or Iran.</p>



<p>By taking this scorched-earth route, the government has effectively telegraphed to all the <em>other</em> universities, as clearly as possible: “actually, we don’t care what you do or don’t do on antisemitism. We just want to destroy you, and antisemitism was our best available pretext, the place where you’d most obviously fallen short of your ideals. But we’re not really trying to cure a sick patient, or force the patient to adopt better health habits: we’re trying to shoot, disembowel, and dismember the patient. That being the case, you might as well fight us and go down with dignity!”</p>



<p>No wonder that my distinguished Harvard friends (and past <em>Shtetl-Optimized</em> guest bloggers) <a href="https://x.com/sapinker/status/1911984035263393798">Steven Pinker</a> and <a href="https://x.com/boazbaraktcs/status/1911841870625558742">Boaz Barak</a>—not exactly known as anti-Zionist woke radicals—have come out in favor of Harvard fighting this in court.  So has Harvard’s past president <a href="https://x.com/LHSummers/status/1911839522058367129">Larry Summers</a>, who’s welcome to guest-blog here as well.  They all understand that events have given us no choice but to fight Trump as if there were no antisemitism, even while we continue to fight antisemitism as if there were no Trump.</p>

		
				
				<p>
					<small>
						This entry was posted
												on Tuesday, April 15th, 2025 at 12:22 pm						and is filed under <a href="https://scottaaronson.blog/?cat=42" rel="category">Obviously I'm Not Defending Aaronson</a>, <a href="https://scottaaronson.blog/?cat=8" rel="category">The Fate of Humanity</a>.
						You can follow any responses to this entry through the <a href="https://scottaaronson.blog/?feed=rss2&amp;p=8805">RSS 2.0</a> feed.

													You can <a href="#respond">leave a response</a>, or <a href="https://scottaaronson.blog/wp-trackback.php?p=8805" rel="trackback">trackback</a> from your own site.

						
					</small>
				</p>

			</div><p>You can use rich HTML in comments!  You can also use basic TeX, by enclosing it within <span>$$ $$</span> for displayed equations or <span>\( \)</span> for inline equations.</p><p>
	After two decades of mostly-open comments, in July 2024 <i>Shtetl-Optimized</i> transitioned to the following policy:
	
</p><p>All comments are treated, by default, as personal missives to me, Scott Aaronson---with no expectation either that they'll appear on the blog or that I'll reply to them.

</p><p>At my leisure and discretion, and in consultation with the <a href="https://scottaaronson.blog/?p=6576"><i>Shtetl-Optimized</i> Committee of Guardians</a>, I'll put on the blog a curated selection of comments that I judge to be particularly interesting or to move the topic forward, and I'll do my best to answer those.  But it will be more like Letters to the Editor.  Anyone who feels unjustly censored is welcome to the rest of the Internet.

</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The case of the UI thread that hung in a kernel call (135 pts)]]></title>
            <link>https://devblogs.microsoft.com/oldnewthing/20250411-00/?p=111066</link>
            <guid>43695723</guid>
            <pubDate>Tue, 15 Apr 2025 17:13:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://devblogs.microsoft.com/oldnewthing/20250411-00/?p=111066">https://devblogs.microsoft.com/oldnewthing/20250411-00/?p=111066</a>, See on <a href="https://news.ycombinator.com/item?id=43695723">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="single-wrapper">
    
    <article data-clarity-region="article" id="post-111066">
        <div data-bi-area="body_article" data-bi-id="post_page_body_article">
            <p>A customer asked for help with a longstanding but low-frequency hang that they have never been able to figure out. From what they could tell, their UI thread was calling into the kernel, and the call simply hung for no apparent reason. Unfortunately, the kernel dump couldn’t show a stack from user mode because the stack had been paged out. (Which makes sense, because a hung thread isn’t using its stack, so once the system is under some memory pressure, that stack gets paged out.)</p>
<pre>0: kd&gt; !thread 0xffffd18b976ec080 7
THREAD ffffd18b976ec080  Cid 79a0.7f18  Teb: 0000003d7ca28000
    Win32Thread: ffffd18b89a8f170 WAIT: (Suspended) KernelMode Non-Alertable
SuspendCount 1
    ffffd18b976ec360  NotificationEvent
Not impersonating
DeviceMap                 ffffad897944d640
Owning Process            ffffd18bcf9ec080       Image:         contoso.exe
Attached Process          N/A            Image:         N/A
Wait Start TickCount      14112735       Ticks: 1235580 (0:05:21:45.937)
Context Switch Count      1442664        IdealProcessor: 2             
UserTime                  00:02:46.015
KernelTime                00:01:11.515

 nt!KiSwapContext+0x76
 nt!KiSwapThread+0x928
 nt!KiCommitThreadWait+0x370
 nt!KeWaitForSingleObject+0x7a4
 nt!KiSchedulerApc+0xec
 nt!KiDeliverApc+0x5f9
 nt!KiCheckForKernelApcDelivery+0x34
 nt!MiUnlockAndDereferenceVad+0x8d
 nt!MmProtectVirtualMemory+0x312
 nt!NtProtectVirtualMemory+0x1d9
 nt!KiSystemServiceCopyEnd+0x25 (TrapFrame @ ffff8707`a9bef3a0)
 ntdll!ZwProtectVirtualMemory+0x14
 [end of stack trace]
</pre>
<p>Although we couldn’t see what the code was doing in user mode, there was something unusual in the information that was present.</p>
<p>Observe that the offending thread is <i>Suspended</i>. And it appears to have been suspended for over five hours.</p>
<pre>THREAD ffffd18b976ec080  Cid 79a0.7f18  Teb: 0000003d7ca28000
    Win32Thread: ffffd18b89a8f170 WAIT: (<span>Suspended</span>) KernelMode Non-Alertable
SuspendCount 1
    ffffd18b976ec360  NotificationEvent
Not impersonating
DeviceMap                 ffffad897944d640
Owning Process            ffffd18bcf9ec080       Image:         contoso.exe
Attached Process          N/A            Image:         N/A
Wait Start TickCount      14112735       Ticks: 1235580 (<span>0:05:21:45.937</span>)
</pre>
<p>Naturally, a suspended UI thread is going to manifest itself as a hang.</p>
<p>Functions like <code>Suspend­Thread</code> exist primarily for debuggers to use, so we asked them if they had a debugger attached to the process when they captured the kernel dump. They said that they did not.</p>
<p>So who suspended the thread, and why?</p>
<p>The customer then realized that they had a watchdog thread which monitors the UI thread for responsiveness, and every so often, it suspends the UI thread, captures a stack trace, and then resumes the UI thread. And in the dump file, they were able to observe their watchdog thread in the middle of its stack trace capturing code. But why was the stack trace capture taking five hours?</p>
<p>The stack of the watchdog thread looks like this:</p>
<pre>ntdll!ZwWaitForAlertByThreadId(void)+0x14
ntdll!RtlpAcquireSRWLockSharedContended+0x15a
ntdll!RtlpxLookupFunctionTable+0x180
ntdll!RtlLookupFunctionEntry+0x4d
contoso!GetStackTrace+0x72
contoso!GetStackTraceOfUIThread+0x127
...
</pre>
<p>Okay, so we see that the watchdog thread is trying to get a stack trace of the UI thread, but it’s hung inside <code>Rtl­Lookup­Function­Entry</code> which is waiting for a lock.</p>
<p>You know who I bet holds the lock?</p>
<p>The UI thread.</p>
<p>Which is suspended.</p>
<p>The UI thread is probably trying to dispatch an exception, which means that it is walking the stack looking for an exception handler. But in the middle of this search, it got suspended by the watchdog thread. Then the watchdog thread tries to walk the stack of the UI thread, but it can’t do that yet because the function table is locked by the UI thread’s stack walk.</p>
<p>This is a practical exam for a previous discussion: <a title="Why you should never suspend a thread" href="https://devblogs.microsoft.com/oldnewthing/20031209-00/?p=41573"> Why you should never suspend a thread</a>.</p>
<p>Specifically, the title should say “Why you should never suspend a thread <i>in your own process</i>.” Suspending a thread in your own process runs the risk that the thread you suspended was in possession of some resource that the rest of the program needs. In particular, it might possess a resource that is needed by the code which has responsible for eventually resuming the thread. Since it is suspended, it will never get a chance to release those resources, and you end up with a deadlock between the suspended thread and the thread whose job it is to resume that thread.</p>
<p>If you want to suspend a thread and capture stacks from it, you’ll have to do it from another process, so that you don’t deadlock with the thread you suspended.¹</p>
<p><b>Bonus chatter</b>: In this kernel stack, you can see evidence that <a title="The SuspendThread function suspends a thread, but it does so asynchronously" href="https://devblogs.microsoft.com/oldnewthing/20150205-00/?p=44743"> the <code>Suspend­Thread</code> operates asynchronously</a>. When the watchdog thread calls <code>Suspend­Thread</code> to suspend the UI thread, the UI thread was in the kernel, in the middle of changing memory protections. The thread does not suspend immediately, but rather waits for the kernel to finish its work, and then before returning to user mode, the kernel does a <code>Check­For­Kernel­Apc­Delivery</code> to see if there were any requests waiting. It picks up the request to suspend, and that is when the thread actually suspends.²</p>
<p><b>Bonus bonus chatter</b>: “What if the kernel delayed suspending a thread if it held any user-mode locks? Wouldn’t that avoid this problem?” First of all, how would the kernel even know whether a thread held any user-mode locks? There is no reliable signature for a user-mode lock. After all, you can make a user-mode lock out of any byte of memory by using it as a spin lock. Second, even if the kernel somehow could figure out whether a thread held a user-mode lock, you don’t want that to block thread suspension, because that would let a program make itself un-suspendable! Just call <code>AcquireSRWLockShared(some_global_srwlock)</code> and never call the corresponding <code>Release</code> function. Congratulations, the thread perpetually owns the global lock in shared mode and would therefore now be immune from suspension.</p>
<p>¹ Of course, this also requires that the code that does the suspending does not wait on cross-process resources like semaphores, mutexes, or file locks, because those might be held by the suspended thread.</p>
<p>² The kernel doesn’t suspend the thread immediately because it might be in possession of internal kernel locks, and suspending a thread while it owns a kernel lock (such as the lock that synchronizes access to the page tables) would result in the kernel itself deadlocking!</p>
        </div><!-- .entry-content -->

        <!-- AI Disclaimer -->
            </article>
    
</div><div><!-- Author section -->
            <h2>Author</h2>
            <div><div><p><img src="https://devblogs.microsoft.com/oldnewthing/wp-content/uploads/sites/38/2019/02/RaymondChen_5in-150x150.jpg" alt="Raymond Chen"></p></div><p>Raymond has been involved in the evolution of Windows for more than 30 years. In 2003, he began a Web site known as The Old New Thing which has grown in popularity far beyond his wildest imagination, a development which still gives him the heebie-jeebies. The Web site spawned a book, coincidentally also titled The Old New Thing (Addison Wesley 2007). He occasionally appears on the Windows Dev Docs Twitter account to tell stories which convey no useful information.</p></div>        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[It's easier than ever to de-censor videos (361 pts)]]></title>
            <link>https://www.jeffgeerling.com/blog/2025/its-easier-ever-de-censor-videos</link>
            <guid>43695701</guid>
            <pubDate>Tue, 15 Apr 2025 17:12:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jeffgeerling.com/blog/2025/its-easier-ever-de-censor-videos">https://www.jeffgeerling.com/blog/2025/its-easier-ever-de-censor-videos</a>, See on <a href="https://news.ycombinator.com/item?id=43695701">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Last month I asked people to <a href="https://youtu.be/gaV-O6NPWrI?t=297">hack part of my YouTube video</a>, specifically to de-pixelate the contents of a folder I had pixelated starting at the 4:57 mark.</p>

<p>
<video controls="">
  <source src="https://www.jeffgeerling.com/sites/default/files/depixelate-original-video-ezgif.com-mute-video.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>
</p>

<p>For years, people have used the censor tool to blur or pixelate out parts of videos where there's sensitive information. And for years, every time I've used it, I get a few comments from people saying that's not a safe way to censor information.</p>

<p>So is that true?</p>

<p>I wanted to find out, so I put a message saying I'd send fifty bucks to anyone who could tell me what it said under the pixelation. And you know what? Less than a day later, <em>three</em> people solved it, using three slightly different techniques—scary!</p>

<p>This blog post is a lightly edited transcript of the following video:</p>

<div>
<p><iframe src="https://www.youtube.com/embed/acKYYwcxpGk" frameborder="0" allowfullscreen=""></iframe></p>
</div>

<h2>How did they do it?</h2>

<p>But how did they do it? I asked each of them, and they were more than happy to share. For most of us who like reverse-engineering or tinkering, it's fun to share the craft. And even more fun when it's <em>sanctioned</em> fun. Add on a little monetary reward, and that's just icing on the cake.</p>

<p>GitHub user KoKuToru was kind enough to share <a href="https://github.com/KoKuToru/de-pixelate_gaV-O6NPWrI">an entire GitHub repo</a> with the process and the code, along with two different ways that user tried to depixlate my footage.</p>

<p>First a <a href="https://github.com/KoKuToru/de-pixelate_gaV-O6NPWrI/tree/master/v1">brute-force attempt</a> to extract aligned images of just the window, with some code using TensorFlow to extract pixel data and aggregate it into a somewhat-fuzzy (but almost clear enough to read) picture:</p>

<p>
<video controls="">
  <source src="https://www.jeffgeerling.com/sites/default/files/depixelate-v1-result.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>
</p>

<p>The idea here is the pixelation is kind of like shutters over a picture. As you move the image beneath, you can peek into different parts of the picture. As long as you have a solid frame of reference, like the window that stays the same size, you can 'accumulate' pixel data from the picture underneath.</p>

<p>Due to the slight error in selecting the window by hand, the final result was slightly blotchy. For the second attempt, GIMP was used to get a better window selection algorithm with ffmpeg, and with a slight bit more data (more frames extracted), a perfectly legible result:</p>

<p>
<video controls="">
  <source src="https://www.jeffgeerling.com/sites/default/files/depixelate-v2-result.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>
</p>

<h2>Any way to prevent it?</h2>

<p>Blurring or pixelating video, especially <em>moving</em> video, may lead to similar results as you saw here. Years ago it would've required a supercomputer and a PhD to do this stuff. But today, between AI assistance with the trickier bits of coding, and how fast neural networks run on computers, it's easier and faster than ever to de-pixelate video!</p>

<p>If there's one thing computers are good at, it's finding order in seeming chaos, like how modern tools can <a href="https://www.youtube.com/watch?v=7msuhEq1Vz4">pull a clean voice out of a horrible recording</a>.</p>

<p>The more motion in the video, the more data points the reverse engineering has to play with. And thus, the better the confidence in the results.</p>

<p>If I <em>hadn't</em> moved around my Finder window in the video, I don't think it would've worked. You might get a couple letters right, but it would be very low confidence.</p>

<p>Moving forward, if I <em>do</em> have sensitive data to hide, I'll place a pure-color mask over the area, instead of a blur or pixelation effect.</p>

<p>Intuitively, blur might do better than pixelation... but that might just be my own monkey brain talking. I'd love to hear more in the comments if you've dealt with that kind of image processing in the past.</p>

<p>It's amazing what people can do with a neural network, ingenuity, and time.</p>

<p>I guess the moral of the story is <em>if you don't want people to read censored data... don't post it online</em>.</p>

<p>tl;dr - check out <a href="https://github.com/KoKuToru/de-pixelate_gaV-O6NPWrI/tree/master/v1">KoKoToru's de-pixelate GitHub repo for all the details on how it was done</a>.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Clolog (248 pts)]]></title>
            <link>https://github.com/bobschrag/clolog</link>
            <guid>43695620</guid>
            <pubDate>Tue, 15 Apr 2025 17:04:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/bobschrag/clolog">https://github.com/bobschrag/clolog</a>, See on <a href="https://news.ycombinator.com/item?id=43695620">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">clolog</h2><a id="user-content-clolog" aria-label="Permalink: clolog" href="#clolog"></a></p>
<p dir="auto">Full-featured logic programming (AKA "Prolog") embedded in/callable
from and supporting calls to Clojure.  In the spirit of LogLisp, Lisp
Machine Prolog, and Franz Inc.'s Allegro Prolog, with some extra
goodies.  Emphasis on expressive power and execution transparency,
supporting rapid prototyping, proof-of-concept development, and
outer-loop reasoning (i.e., not real fast, so far).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Highlights, with examples</h2><a id="user-content-highlights-with-examples" aria-label="Permalink: Highlights, with examples" href="#highlights-with-examples"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Clojure-based, Lispy (i.e., homoiconic) syntax, e.g., ...</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="(do 
    ;; Set up, clear knowledge base.
    (initialize-prolog)
    ;; Create unit assertion.    
    (<- (has-subtype vertebrate mammal)) 
    ;; Execute query.
    (? ?x ; Answer template
       (has-subtype vertebrate ?x) ; Goal.
       )
    )
  [mammal] ; Answer(s) in vector (perhaps empty)."><pre>(<span>do</span> 
    <span><span>;</span>; Set up, clear knowledge base.</span>
    (<span>initialize-prolog</span>)
    <span><span>;</span>; Create unit assertion.    </span>
    (<span>&lt;-</span> (<span>has-subtype</span> vertebrate mammal)) 
    <span><span>;</span>; Execute query.</span>
    (<span>?</span> ?x <span><span>;</span> Answer template</span>
       (<span>has-subtype</span> vertebrate ?x) <span><span>;</span> Goal.</span>
       )
    )
  [mammal] <span><span>;</span> Answer(s) in vector (perhaps empty).</span></pre></div>
</li>
<li>
<p dir="auto"><strong>Logical variable- ("?var")-containing Clojure seqs (so, lists) and
vectors as "complex" terms---in assertion statements and answer templates</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (? (?a ?b)
     (same [?a 2] [1 ?b]))
[(1 2)]"><pre>&gt; (<span>?</span> (<span>?a</span> ?b)
     (<span>same</span> [?a <span>2</span>] [<span>1</span> ?b]))
[(<span>1</span> <span>2</span>)]</pre></div>
</li>
<li>
<p dir="auto"><strong>Clojure calling predicates</strong></p>
<ul dir="auto">
<li>
<p dir="auto">Truthiness check: <code>truthy?</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (? true (truthy? (+ 1 2)))
[true]"><pre>&gt; (<span>?</span> <span>true</span> (<span>truthy?</span> (<span>+</span> <span>1</span> <span>2</span>)))
[<span>true</span>]</pre></div>
</li>
<li>
<p dir="auto">?var-bearing term unification: <code>evals-from?</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (? ?x (evals-from? ?x (+ 1 2)))
[3]"><pre>&gt; (<span>?</span> ?x (<span>evals-from?</span> ?x (<span>+</span> <span>1</span> <span>2</span>)))
[<span>3</span>]</pre></div>
</li>
<li>
<p dir="auto">Side effect: <code>do</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (? nil (do (println &quot;Hello&quot;)))
Hello
[nil]"><pre>&gt; (<span>?</span> <span>nil</span> (<span>do</span> (<span>println</span> <span><span>"</span>Hello<span>"</span></span>)))
Hello
[<span>nil</span>]</pre></div>
</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Access to ?var bindings in Clojure calls---even within quoted
expressions</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (<-- (male laban))
      (? ?y (male ?x) (evals-from? ?y (list '?x))))
[(laban)]"><pre>&gt; (<span>do</span> (<span>&lt;--</span> (<span>male</span> laban))
      (<span>?</span> ?y (<span>male</span> ?x) (<span>evals-from?</span> ?y (<span>list</span> '?x))))
[(<span>laban</span>)]</pre></div>
</li>
<li>
<p dir="auto"><strong>Negation as failure: <code>not</code></strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog) ; Clear knowledge base.
      (? :nothing (not (Huh?))))
[:nothing]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>) <span><span>;</span> Clear knowledge base.</span>
      (<span>?</span> <span>:nothing</span> (<span>not</span> (<span>Huh?</span>))))
[<span>:nothing</span>]</pre></div>
</li>
<li>
<p dir="auto"><strong>Facilitated access to Clojure values (<code>evals-from?</code> shorthand
<code>-&gt;?</code>) in goals with Clojure-calling predicates</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (binding [*leash* true]
    (? true (same (->? (+ 0 1)) 1)))
0. Processing query: ((same (->? (+ 0 1)) 1))
 Applied ->? transform
 (evals-from?): Entering (evals-from? ??-0:0 (+ 0 1))
 (evals-from?): Succeeded (evals-from? 1 (+ 0 1))
 (same): Entering (same 1 1)
 (same): Succeeded (same 1 1)
Recorded answer: true
Answer limit reached. ; Because answer template `true` has no ?vars.
[true]"><pre>&gt; (<span>binding</span> [*leash* <span>true</span>]
    (<span>?</span> <span>true</span> (<span>same</span> (<span>-&gt;?</span> (<span>+</span> <span>0</span> <span>1</span>)) <span>1</span>)))
<span>0.</span> Processing query: ((<span>same</span> (<span>-&gt;?</span> (<span>+</span> <span>0</span> <span>1</span>)) <span>1</span>))
 Applied -&gt;? transform
 (<span>evals-from?</span>): Entering (<span>evals-from?</span> ??-0:0 (<span>+</span> <span>0</span> <span>1</span>))
 (<span>evals-from?</span>): Succeeded (<span>evals-from?</span> <span>1</span> (<span>+</span> <span>0</span> <span>1</span>))
 (<span>same</span>): Entering (<span>same</span> <span>1</span> <span>1</span>)
 (<span>same</span>): Succeeded (<span>same</span> <span>1</span> <span>1</span>)
Recorded answer: <span>true</span>
Answer limit reached. <span><span>;</span> Because answer template `true` has no ?vars.</span>
[<span>true</span>]</pre></div>
</li>
<li>
<p dir="auto"><strong>Built-in term [non-]matching predicates: <code>same</code>, <code>different</code></strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (? (?a ?b)
     (same [?a 2] [1 ?b]))
[(1 2)]

> (? (?a ?b)
     (different [?a 2] [1 ?b]))
[]"><pre>&gt; (<span>?</span> (<span>?a</span> ?b)
     (<span>same</span> [?a <span>2</span>] [<span>1</span> ?b]))
[(<span>1</span> <span>2</span>)]

&gt; (<span>?</span> (<span>?a</span> ?b)
     (<span>different</span> [?a <span>2</span>] [<span>1</span> ?b]))
[]</pre></div>
</li>
<li>
<p dir="auto"><strong>Built-in term inspection predicates: <code>var</code>, <code>ground</code></strong></p>

<div dir="auto" data-snippet-clipboard-copy-content="> (? ?x (same ?x 1) (ground ?x))
[1]"><pre>&gt; (<span>?</span> ?x (<span>same</span> ?x <span>1</span>) (<span>ground</span> ?x))
[<span>1</span>]</pre></div>
</li>
<li>
<p dir="auto"><strong>Built-in unconditional predicates: <code>true</code>, <code>false</code></strong></p>


</li>
<li>
<p dir="auto"><strong>Nestable built-in logical operators: <code>and</code>, <code>or</code>, <code>not</code>, <code>if</code></strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (? ?x (and (if (false)
               (same ?x :succeed)
               (same ?x :fail))
             (evals-from? ?x :fail)
         (or (true) (false))))
[:fail]"><pre>&gt; (<span>?</span> ?x (<span>and</span> (<span>if</span> (<span>false</span>)
               (<span>same</span> ?x <span>:succeed</span>)
               (<span>same</span> ?x <span>:fail</span>))
             (<span>evals-from?</span> ?x <span>:fail</span>)
         (<span>or</span> (<span>true</span>) (<span>false</span>))))
[<span>:fail</span>]</pre></div>
</li>
<li>
<p dir="auto"><strong>"Cut" operator: <code>first</code></strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- (sister laban rebecca))
      (<- (sister rachel leah))
      (? [?sibling ?sister]
         (first (sister ?sibling ?sister))))
 [[laban rebecca]]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> (<span>sister</span> laban rebecca))
      (<span>&lt;-</span> (<span>sister</span> rachel leah))
      (<span>?</span> [?sibling ?sister]
         (<span>first</span> (<span>sister</span> ?sibling ?sister))))
 [[laban rebecca]]</pre></div>
</li>
<li>
<p dir="auto"><strong>User-custom predicate transforms, supporting (e.g.)
varieties of <code>if</code>, <code>cond</code>, <code>optional</code></strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (create-predicate-transform '((if% ?if ?then ?else)
                              (if (first ?if) ?then ?else)))"><pre>&gt; (<span>create-predicate-transform</span> '((<span>if%</span> ?if ?then ?else)
                              (<span>if</span> (<span>first</span> ?if) ?then ?else)))</pre></div>
</li>
<li>
<p dir="auto"><strong>Full leashing of predicates, including operators</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (binding [*leash* true]
    (? [?sibling ?sister ?x] 
      (if% (sister ?sibling ?sister)
           (evals-from? ?x true)
           (evals-from? ?x false))))
0. Processing query: ((if% (sister ?sibling ?sister) (evals-from? ?x true) (evals-from? ?x false)))
 (if%): Applying logic transform (if% ?if ?then ?else)
 (if): Entering (if (first (sister ?sibling:0 ?sister:0)) (evals-from? ?x:0 true) (evals-from? ?x:0 false))
 (if): Checking 'if' condition (if (first (sister ?sibling:0 ?sister:0)) (evals-from? ?x:0 true) (evals-from? ?x:0 false))
  (if first): Entering first (first (sister ?sibling:0 ?sister:0))
   1. Entering &quot;sister/2&quot;: (sister ?sibling:0 ?sister:0)
   1. Matched head (sister laban rebecca): (sister laban rebecca)
   1. Succeeded &quot;sister/2&quot;: (sister laban rebecca)
  (if first): Succeeded, cutting (first (sister laban rebecca))
 (if): Taking 'then' branch of (if (first (sister laban rebecca)) (evals-from? ?x:0 true) (evals-from? ?x:0 false))
  (if evals-from?): Entering (evals-from? ?x:0 true)
  (if evals-from?): Succeeded (evals-from? true true)
 (if): Succeeded (if (first (sister laban rebecca)) (evals-from? true true) (evals-from? true false))
Recorded answer: [laban rebecca true]
  (if first): Failed (first (sister ?sibling:0 ?sister:0))
 (if): Failed (if (first (sister ?sibling:0 ?sister:0)) (evals-from? ?x:0 true) (evals-from? ?x:0 false))
0. Exhausted query: ((if% (sister ?sibling ?sister) (evals-from? ?x true) (evals-from? ?x false)))
[[laban rebecca true]]"><pre>&gt; (<span>binding</span> [*leash* <span>true</span>]
    (<span>?</span> [?sibling ?sister ?x] 
      (<span>if%</span> (<span>sister</span> ?sibling ?sister)
           (<span>evals-from?</span> ?x <span>true</span>)
           (<span>evals-from?</span> ?x <span>false</span>))))
<span>0.</span> Processing query: ((<span>if%</span> (<span>sister</span> ?sibling ?sister) (<span>evals-from?</span> ?x <span>true</span>) (<span>evals-from?</span> ?x <span>false</span>)))
 (<span>if%</span>): Applying logic transform (<span>if%</span> ?if ?then ?else)
 (<span>if</span>): Entering (<span>if</span> (<span>first</span> (<span>sister</span> ?sibling:0 ?sister:0)) (<span>evals-from?</span> ?x:0 <span>true</span>) (<span>evals-from?</span> ?x:0 <span>false</span>))
 (<span>if</span>): Checking 'if' condition (<span>if</span> (<span>first</span> (<span>sister</span> ?sibling:0 ?sister:0)) (<span>evals-from?</span> ?x:0 <span>true</span>) (<span>evals-from?</span> ?x:0 <span>false</span>))
  (<span>if</span> first): Entering first (<span>first</span> (<span>sister</span> ?sibling:0 ?sister:0))
   <span>1.</span> Entering <span><span>"</span>sister/2<span>"</span></span>: (<span>sister</span> ?sibling:0 ?sister:0)
   <span>1.</span> Matched head (<span>sister</span> laban rebecca): (<span>sister</span> laban rebecca)
   <span>1.</span> Succeeded <span><span>"</span>sister/2<span>"</span></span>: (<span>sister</span> laban rebecca)
  (<span>if</span> first): Succeeded, cutting (<span>first</span> (<span>sister</span> laban rebecca))
 (<span>if</span>): Taking 'then' branch of (<span>if</span> (<span>first</span> (<span>sister</span> laban rebecca)) (<span>evals-from?</span> ?x:0 <span>true</span>) (<span>evals-from?</span> ?x:0 <span>false</span>))
  (<span>if</span> evals-from?): Entering (<span>evals-from?</span> ?x:0 <span>true</span>)
  (<span>if</span> evals-from?): Succeeded (<span>evals-from?</span> <span>true</span> <span>true</span>)
 (<span>if</span>): Succeeded (<span>if</span> (<span>first</span> (<span>sister</span> laban rebecca)) (<span>evals-from?</span> <span>true</span> <span>true</span>) (<span>evals-from?</span> <span>true</span> <span>false</span>))
Recorded answer: [laban rebecca <span>true</span>]
  (<span>if</span> first): Failed (<span>first</span> (<span>sister</span> ?sibling:0 ?sister:0))
 (<span>if</span>): Failed (<span>if</span> (<span>first</span> (<span>sister</span> ?sibling:0 ?sister:0)) (<span>evals-from?</span> ?x:0 <span>true</span>) (<span>evals-from?</span> ?x:0 <span>false</span>))
<span>0.</span> Exhausted query: ((<span>if%</span> (<span>sister</span> ?sibling ?sister) (<span>evals-from?</span> ?x <span>true</span>) (<span>evals-from?</span> ?x <span>false</span>)))
[[laban rebecca <span>true</span>]]</pre></div>
</li>
<li>
<p dir="auto"><strong>Symbols interpreted as logic terms or predicates, regardless of their Clojure values</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (<- (false true))
      (? ?x (false ?x)))
[true]

> (do (<- (neg? 3))
      (? true (neg? 3)))
[true]"><pre>&gt; (<span>do</span> (<span>&lt;-</span> (<span>false</span> <span>true</span>))
      (<span>?</span> ?x (<span>false</span> ?x)))
[<span>true</span>]

&gt; (<span>do</span> (<span>&lt;-</span> (<span>neg?</span> <span>3</span>))
      (<span>?</span> <span>true</span> (<span>neg?</span> <span>3</span>)))
[<span>true</span>]</pre></div>
</li>
<li>
<p dir="auto"><strong>Arbitrary Clojure things as terms or predicates, e.g., ...</strong></p>
<ul dir="auto">
<li>
<p dir="auto">Strings (supporting, e.g., RDF URIs)</p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (<- (&quot;false&quot; true))
      (? ?x (&quot;false&quot; ?x)))
[true]"><pre>&gt; (<span>do</span> (<span>&lt;-</span> (<span>"false"</span> <span>true</span>))
      (<span>?</span> ?x (<span>"false"</span> ?x)))
[<span>true</span>]</pre></div>
</li>
<li>
<p dir="auto">Numbers</p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (<- (3 neg?))
      (? ?x (3 ?x)))
[neg?]"><pre>&gt; (<span>do</span> (<span>&lt;-</span> (<span>3</span> neg?))
      (<span>?</span> ?x (<span>3</span> ?x)))
[neg?]</pre></div>
</li>
<li>
<p dir="auto">Complex terms</p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- ([treasure] (buried ?x)))
  (? ?r ([treasure] ?r)))
[(buried ?unbound-0)]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> ([treasure] (<span>buried</span> ?x)))
  (<span>?</span> ?r ([treasure] ?r)))
[(<span>buried</span> ?unbound-0)]</pre></div>
</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Predicates that are ?var-bearing complex terms</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- ([treasure chest] (buried ?x)))
  (? [?r ?thing] ([treasure ?thing] ?r)))
[[(buried ?unbound-0) chest]]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> ([treasure chest] (<span>buried</span> ?x)))
  (<span>?</span> [?r ?thing] ([treasure ?thing] ?r)))
[[(<span>buried</span> ?unbound-0) chest]]</pre></div>
</li>
<li>
<p dir="auto"><strong>Predicates that are ?vars</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- (male jacob))
  (? ?pred (?pred jacob)))
[male]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> (<span>male</span> jacob))
  (<span>?</span> ?pred (<span>?pred</span> jacob)))
[male]</pre></div>
</li>
<li>
<p dir="auto"><strong>Variadic (variable-tail/arity) predicates and complex terms</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- (variadic))
      (<- (variadic 1))
      (<- (variadic 1 2))
      (? ?rest (variadic &amp; ?rest)))
[() (1) (1 2)]

> (do (initialize-prolog)
      (<- (variadic-term [1]))
      (<- (variadic-term [1 2]))
  (? ?rest (variadic-term [1 &amp; ?rest])))
[[] [2]]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> (<span>variadic</span>))
      (<span>&lt;-</span> (<span>variadic</span> <span>1</span>))
      (<span>&lt;-</span> (<span>variadic</span> <span>1</span> <span>2</span>))
      (<span>?</span> ?rest (<span>variadic</span> &amp; ?rest)))
[() (<span>1</span>) (<span>1</span> <span>2</span>)]

&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> (<span>variadic-term</span> [<span>1</span>]))
      (<span>&lt;-</span> (<span>variadic-term</span> [<span>1</span> <span>2</span>]))
  (<span>?</span> ?rest (<span>variadic-term</span> [<span>1</span> &amp; ?rest])))
[[] [<span>2</span>]]</pre></div>
</li>
<li>
<p dir="auto"><strong>Goals that are ?vars</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- (male jacob))
  (? ?goal ?goal)) ; Tell me everything you can prove.
[(male jacob)]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> (<span>male</span> jacob))
  (<span>?</span> ?goal ?goal)) <span><span>;</span> Tell me everything you can prove.</span>
[(<span>male</span> jacob)]</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- (male jacob))
  (? ?goal (unasserted) ?goal)) ; ...with what you know so far.
[]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> (<span>male</span> jacob))
  (<span>?</span> ?goal (<span>unasserted</span>) ?goal)) <span><span>;</span> ...with what you know so far.</span>
[]</pre></div>
</li>
<li>
<p dir="auto"><strong>Anonymous ?vars</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- (sister laban rebecca))
      (<- (sister rachel leah))
      (? true (sister ?_person ?_person)))
[true]

> (? true (sister ? ?))
[true]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> (<span>sister</span> laban rebecca))
      (<span>&lt;-</span> (<span>sister</span> rachel leah))
      (<span>?</span> <span>true</span> (<span>sister</span> ?_person ?_person)))
[<span>true</span>]

&gt; (<span>?</span> <span>true</span> (<span>sister</span> ? ?))
[<span>true</span>]</pre></div>
</li>
<li>
<p dir="auto"><strong>Suppression of answers that are (under ?var renaming) duplicates</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- (male laban))
  (<- (male jacob))
  (binding [*leash* true]
        (? ?x (or (male ?x) (male ?x)))))
0. Processing query: ((or (male ?x) (male ?x)))
 (or): Entering (or (male ?x:0) (male ?x:0))
  1. Entering &quot;male/1&quot;: (male laban)
  1. Matched head (male laban): (male laban)
  1. Succeeded &quot;male/1&quot;: (male laban)
Recorded answer: laban
  1. Backtracking into &quot;male/1&quot;: (male ?x:0)
  1. Succeeded &quot;male/1&quot;: (male jacob)
Recorded answer: jacob
  1. Backtracking into &quot;male/1&quot;: (male ?x:0)
  1. Failed &quot;male/1&quot;: (male ?x:0)
 (or): Backtracking into (or (male ?x:0) (male ?x:0))
  1. Entering &quot;male/1&quot;: (male laban)
  1. Matched head (male laban): (male laban)
  1. Succeeded &quot;male/1&quot;: (male laban)
Duplicate answer (not recorded): laban
  1. Backtracking into &quot;male/1&quot;: (male ?x:0)
  1. Succeeded &quot;male/1&quot;: (male jacob)
Duplicate answer (not recorded): jacob
  1. Backtracking into &quot;male/1&quot;: (male ?x:0)
  1. Failed &quot;male/1&quot;: (male ?x:0)
 (or): Failed (or (male ?x:0) (male ?x:0))
0. Exhausted query: ((or (male ?x) (male ?x)))
[laban jacob]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> (<span>male</span> laban))
  (<span>&lt;-</span> (<span>male</span> jacob))
  (<span>binding</span> [*leash* <span>true</span>]
        (<span>?</span> ?x (<span>or</span> (<span>male</span> ?x) (<span>male</span> ?x)))))
<span>0.</span> Processing query: ((<span>or</span> (<span>male</span> ?x) (<span>male</span> ?x)))
 (<span>or</span>): Entering (<span>or</span> (<span>male</span> ?x:0) (<span>male</span> ?x:0))
  <span>1.</span> Entering <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> laban)
  <span>1.</span> Matched head (<span>male</span> laban): (<span>male</span> laban)
  <span>1.</span> Succeeded <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> laban)
Recorded answer: laban
  <span>1.</span> Backtracking into <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> ?x:0)
  <span>1.</span> Succeeded <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> jacob)
Recorded answer: jacob
  <span>1.</span> Backtracking into <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> ?x:0)
  <span>1.</span> Failed <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> ?x:0)
 (<span>or</span>): Backtracking into (<span>or</span> (<span>male</span> ?x:0) (<span>male</span> ?x:0))
  <span>1.</span> Entering <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> laban)
  <span>1.</span> Matched head (<span>male</span> laban): (<span>male</span> laban)
  <span>1.</span> Succeeded <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> laban)
Duplicate answer (<span>not</span> recorded): laban
  <span>1.</span> Backtracking into <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> ?x:0)
  <span>1.</span> Succeeded <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> jacob)
Duplicate answer (<span>not</span> recorded): jacob
  <span>1.</span> Backtracking into <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> ?x:0)
  <span>1.</span> Failed <span><span>"</span>male/1<span>"</span></span>: (<span>male</span> ?x:0)
 (<span>or</span>): Failed (<span>or</span> (<span>male</span> ?x:0) (<span>male</span> ?x:0))
<span>0.</span> Exhausted query: ((<span>or</span> (<span>male</span> ?x) (<span>male</span> ?x)))
[laban jacob]</pre></div>
</li>
<li>
<p dir="auto"><strong>Optional suppression of answers subsumed by other answers</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
      (<- (sister laban rebecca))
      (<- (sister ?x ?y))
      (binding [*leash* true]
        (? [?x ?y] (sister ?x ?y))))
0. Processing query: ((sister ?x ?y))
 1. Entering &quot;sister/2&quot;: (sister laban rebecca)
 1. Matched head (sister laban rebecca): (sister laban rebecca)
 1. Succeeded &quot;sister/2&quot;: (sister laban rebecca)
Recorded answer: [laban rebecca]
 1. Backtracking into &quot;sister/2&quot;: (sister ?x:0 ?y:0)
 1. Succeeded &quot;sister/2&quot;: (sister ?x:0 ?y:0)
Recorded subsuming answer (discarded 1 subsumed answer(s)):  [?x ?y]
 1. Backtracking into &quot;sister/2&quot;: (sister ?x:0 ?y:0)
 1. Failed &quot;sister/2&quot;: (sister ?x:0 ?y:0)
0. Exhausted query: ((sister ?x ?y))
[[?x ?y]]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
      (<span>&lt;-</span> (<span>sister</span> laban rebecca))
      (<span>&lt;-</span> (<span>sister</span> ?x ?y))
      (<span>binding</span> [*leash* <span>true</span>]
        (<span>?</span> [?x ?y] (<span>sister</span> ?x ?y))))
<span>0.</span> Processing query: ((<span>sister</span> ?x ?y))
 <span>1.</span> Entering <span><span>"</span>sister/2<span>"</span></span>: (<span>sister</span> laban rebecca)
 <span>1.</span> Matched head (<span>sister</span> laban rebecca): (<span>sister</span> laban rebecca)
 <span>1.</span> Succeeded <span><span>"</span>sister/2<span>"</span></span>: (<span>sister</span> laban rebecca)
Recorded answer: [laban rebecca]
 <span>1.</span> Backtracking into <span><span>"</span>sister/2<span>"</span></span>: (<span>sister</span> ?x:0 ?y:0)
 <span>1.</span> Succeeded <span><span>"</span>sister/2<span>"</span></span>: (<span>sister</span> ?x:0 ?y:0)
Recorded subsuming answer (<span>discarded</span> <span>1</span> subsumed answer(<span>s</span>)):  [?x ?y]
 <span>1.</span> Backtracking into <span><span>"</span>sister/2<span>"</span></span>: (<span>sister</span> ?x:0 ?y:0)
 <span>1.</span> Failed <span><span>"</span>sister/2<span>"</span></span>: (<span>sister</span> ?x:0 ?y:0)
<span>0.</span> Exhausted query: ((<span>sister</span> ?x ?y))
[[?x ?y]]</pre></div>
</li>
<li>
<p dir="auto"><strong>Failure (i.e., not system error) when no assertions have been
defined for a called logic predicate and arity</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="> (do (initialize-prolog)
               (binding [*leash* true]
                 (? answer (undefined ?arity-1))))
0. Processing query: ((undefined ?arity-1))
 1. Entering &quot;undefined/1&quot;: (undefined ?arity-1:0)
 1. Failed &quot;undefined/1&quot;: (undefined ?arity-1:0)
0. Exhausted query: ((undefined ?arity-1))
[]"><pre>&gt; (<span>do</span> (<span>initialize-prolog</span>)
               (<span>binding</span> [*leash* <span>true</span>]
                 (<span>?</span> answer (<span>undefined</span> ?arity-1))))
<span>0.</span> Processing query: ((<span>undefined</span> ?arity-1))
 <span>1.</span> Entering <span><span>"</span>undefined/1<span>"</span></span>: (<span>undefined</span> ?arity-1:0)
 <span>1.</span> Failed <span><span>"</span>undefined/1<span>"</span></span>: (<span>undefined</span> ?arity-1:0)
<span>0.</span> Exhausted query: ((<span>undefined</span> ?arity-1))
[]</pre></div>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Grammar</h2><a id="user-content-grammar" aria-label="Permalink: Grammar" href="#grammar"></a></p>
<p dir="auto">In production rules below, ...</p>
<ul dir="auto">
<li>Angle brackets surround a grammar &lt;element&gt;.</li>
<li>&lt;element&gt;+ denotes one or more of &lt;element&gt;.</li>
<li>&lt;element&gt;* denotes zero or more of &lt;element&gt;.</li>
<li>":-" separates rules' left- and right-hand sides.</li>
<li>"|" separates right-hand sides' alternatives.</li>
</ul>
<p dir="auto">&lt;assertion&gt;: <code>(</code>&lt;head-statement&gt;+ &lt;body-statement&gt;*<code>)</code></p>
<p dir="auto">&lt;head-statement&gt; :- &lt;statement&gt;</p>
<p dir="auto">&lt;body-statement&gt; :- &lt;statement&gt;</p>
<p dir="auto">&lt;statement&gt; :- &lt;fixed-arity-statement&gt; | &lt;variable-arity-statement&gt;</p>
<p dir="auto">&lt;fixed-arity-statement&gt; :- <code>(</code>&lt;predicate&gt;+ &lt;argument-term&gt;*<code>)</code></p>
<p dir="auto">&lt;argument-term&gt; :- &lt;term&gt;</p>
<p dir="auto">&lt;variable-arity-statement&gt; :- <code>(</code>&lt;predicate&gt;+ &lt;term&gt;* <code>&amp;</code> &lt;?var&gt;<code>)</code></p>
<p dir="auto">&lt;predicate&gt; :- &lt;special-predicate&gt; | &lt;assertion-predicate&gt;</p>
<p dir="auto">&lt;special-predicate&gt; :- &lt;built-in-predicate&gt; | &lt;transform-predicate&gt;</p>
<p dir="auto">&lt;built-in-predicate&gt; :- &lt;operator&gt; | &lt;Clojure-calling-predicate&gt; | <code>same</code> | <code>different</code> | <code>var</code> | <code>ground</code> | <code>true</code> | <code>false</code></p>
<p dir="auto">&lt;operator&gt; :- <code>and</code> | <code>or</code> | <code>if</code> | <code>not</code> | <code>first</code></p>
<p dir="auto">&lt;Clojure-calling-predicate&gt; :- <code>truthy?</code> | <code>evals-from?</code> | <code>do</code></p>
<p dir="auto">&lt;transform-predicate&gt;: A predicate constant registered using <code>create-predicate-transform</code></p>
<p dir="auto">&lt;assertion-predicate&gt;: A predicate all of whose assertions (if any) are from calls to one of the <code>&lt;-</code>... macros or <code>assert&lt;-</code>... functions</p>
<p dir="auto">&lt;term&gt; :- &lt;transparent-term&gt; | &lt;opaque-term&gt;</p>
<p dir="auto">&lt;transparent-term&gt; :- &lt;?var&gt; | &lt;complex-term&gt;</p>
<p dir="auto">&lt;complex-term&gt; :- &lt;fixed-artiy-complex-term&gt; | &lt;variable-arity-complex-term&gt;</p>
<p dir="auto">&lt;fixed-arity-complex-term&gt; :- <code>(</code>&lt;term&gt;*<code>)</code> | <code>[</code>&lt;term&gt;*<code>]</code></p>
<p dir="auto">&lt;variable-arity-complex-term&gt; :- <code>(</code>&lt;term&gt;* <code>&amp;</code> &lt;?var&gt;<code>)</code> | <code>[</code>&lt;term&gt;* <code>&amp;</code> &lt;?var&gt;<code>]</code></p>
<p dir="auto">&lt;opaque-term&gt; :- Any Clojure value supporting Clojure <code>=</code> (so, not a regex) that is not a transparent term</p>
<p dir="auto">&lt;?var&gt; :- &lt;binding-?var&gt; | &lt;anonymous-?var&gt;</p>
<p dir="auto">&lt;anonymous-?var&gt; :- <code>?</code> | &lt;<code>_</code>-anonymous-?var&gt;</p>
<p dir="auto">&lt;<code>_</code>-anonymous-?var&gt;: Symbol whose name begins with <code>"?_"</code></p>
<p dir="auto">&lt;constant&gt;: An opaque term or a ?var-free complex term</p>
<p dir="auto">&lt;answer-template&gt; :- &lt;term&gt;</p>
<p dir="auto">Note:</p>
<ul dir="auto">
<li>
<p dir="auto">All predicates are terms.</p>
</li>
<li>
<p dir="auto">All ?vars are symbols.</p>
</li>
<li>
<p dir="auto">Statements and assertions, being lists, are terms.</p>
</li>
<li>
<p dir="auto">The arguments of operators are statements.  See our Built-in predicates
section.</p>
</li>
<li>
<p dir="auto">Outside of Clojure-calling predicates' Clojure form arguments:
Symbols appearing in statements are taken at face value, not evaluated.
A symbol used in Prolog otherwise has no relationship to its value
(or the lack thereof) in Clojure.</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Additional terminology and conventions</h2><a id="user-content-additional-terminology-and-conventions" aria-label="Permalink: Additional terminology and conventions" href="#additional-terminology-and-conventions"></a></p>
<p dir="auto">Considering for the moment only assertion (not special) predicates,
logic programming <strong>search</strong> processes (or <strong>calls</strong>), in turn from
left to right, each <strong>goal</strong> in an (implicitly) conjunctive <strong>query</strong>
by...</p>
<ul dir="auto">
<li>
<p dir="auto">Identifying assertions whose head statement matches the goal</p>
</li>
<li>
<p dir="auto">Prepending a matching assertion's body statements (AKA the assertion's
<strong>goals</strong>) to the query's remaining goals, after applying the
match's ?var bindings to each such goal</p>
</li>
<li>
<p dir="auto">Processing remaining goals, recursively, ...</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Backtracking</strong> to remaining matching assertions, when matching a
given assertion <strong>fails</strong></p>
</li>
<li>
<p dir="auto">When no goals remain, <strong>succeed</strong> by...</p>
<ul dir="auto">
<li>
<p dir="auto">Recording an <strong>answer</strong> that realizes the query's <strong>answer
template</strong> according to ?var matches made along the search path</p>
</li>
<li>
<p dir="auto">Backtracking to search for any additional answers.</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p dir="auto">Search generally proceeds depth-first and from left to right.</p>
<p dir="auto">We <strong>match</strong> two statements or transparent terms by associating their
respective terms and ?vars, position by position, with consistent
matching for non-anonymous ?vars.  In matching (AKA "unification"),
...</p>
<ul dir="auto">
<li>
<p dir="auto">A ?var matches a ?var, a transparent term, or a constant.</p>
</li>
<li>
<p dir="auto">Constants match equal (Clojure <code>=</code>) constants.</p>
</li>
<li>
<p dir="auto">Complex terms match recursively.</p>
</li>
<li>
<p dir="auto">A <strong>tail ?var</strong> (last in a statement or complex term, and preceded by
<code>&amp;</code>) matches the (possibly empty) seq or vector of terms remaining in
the parallel traversal of its opposing complex term.</p>
</li>
</ul>
<p dir="auto">One term <strong>subsumes</strong> another if the two terms match and---considering
?var occurrences---the former is at least as general as the latter.</p>
<p dir="auto">A <strong>ground</strong> term has no ?vars (none outside of any opaque included
terms, where they are not treated as ?vars).</p>
<p dir="auto">Here---and in leash (execution tracing) reports---the notation
&lt;predicate&gt;/&lt;integer&gt; (e.g., <code>sibling/2</code>) refers to the
&lt;integer&gt; arity of &lt;predicate&gt;.</p>
<p dir="auto">By convention, we take the first argument of a 2-ary statement to be the
predicate's <strong>subject</strong>, the second to be its <strong>object</strong>.  Thus, in
<code>(brother Jane John)</code>, we take <code>Jane</code> to be the subject (or agent),
<code>John</code> to be the object (or patient).  ("A brother of Jane is John.")</p>
<p dir="auto">A <strong>unit</strong> assertion has only a head statement, no body statements.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">API</h2><a id="user-content-api" aria-label="Permalink: API" href="#api"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Initialization</h3><a id="user-content-initialization" aria-label="Permalink: Initialization" href="#initialization"></a></p>
<p dir="auto">Clear the knowledge base and any existing special predicate
transforms, then execute the transform definitions in function
<code>create-predicate-transforms</code>.</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Knowledge base and predicate transform contexts</h3><a id="user-content-knowledge-base-and-predicate-transform-contexts" aria-label="Permalink: Knowledge base and predicate transform contexts" href="#knowledge-base-and-predicate-transform-contexts"></a></p>
<p dir="auto">Bind <code>*assertions*</code> and/or <code>*predicate-transforms*</code>, per their doc
strings, to set up contexts for different knowledge bases and/or
transform definitions.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Creating assertions---macros and functions</h3><a id="user-content-creating-assertions---macros-and-functions" aria-label="Permalink: Creating assertions---macros and functions" href="#creating-assertions---macros-and-functions"></a></p>
<p dir="auto">We provide four assertion creation functions and four corresponding
macros.  The macros, which don't require quoting arguments, so are
simpler to use at the REPL or from top level in a file, take their
statement arguments at top-level.  The functions take theirs in a list.</p>
<p dir="auto">An assertion's head statement...</p>
<ul dir="auto">
<li>
<p dir="auto">May not be a ?var.</p>
</li>
<li>
<p dir="auto">May be variadic, but must require arity &gt;= 1 (i.e., must not start
with <code>&amp;</code>).</p>
</li>
<li>
<p dir="auto">Must not have a built-in special predicate in its predicate
position.  We don't flag assertions to transform predicates;
however, once a predicate has been used on the left-hand side of a
transform's defining production rule, we refrain from exercising
same-predicate assertions.</p>
</li>
</ul>
<p dir="auto">See the functions' doc strings for other fine points.</p>
<p dir="auto">The following forms have equivalent effect: Add the assertion with
head statement <code>(sibling ?x ?y)</code> and lone goal statement <code>(brother ?x ?y)</code>
to the knowledge base.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(<- (sibling ?x ?y) (brother ?x ?y)) ; Macro.

(assert<- '((sibling ?x ?y) (brother ?x ?y))) ; Function."><pre>(<span>&lt;-</span> (<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y)) <span><span>;</span> Macro.</span>

(<span>assert&lt;-</span> '((<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y))) <span><span>;</span> Function.</span></pre></div>
<p dir="auto">The following place their constant-predicate, fixed-arity assertion
first for consideration in search.  We provide no explicit control
over the order in which (less conventional) assertions with variadic,
variable, or non-ground complex head statement predicates are examined
during backtracking search.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(<-0 (sibling ?x ?y) (brother ?x ?y)) ; Macro.

(assert<-0 '((sibling ?x ?y) (brother ?x ?y))) ; Function."><pre>(<span>&lt;-0</span> (<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y)) <span><span>;</span> Macro.</span>

(<span>assert&lt;-0</span> '((<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y))) <span><span>;</span> Function.</span></pre></div>
<p dir="auto">The following clear <code>sibling/2</code> before making their assertion.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(<-- (sibling ?x ?y) (brother ?x ?y)) ; Macro.

(assert<-- '((sibling ?x ?y) (brother ?x ?y))) ; Function."><pre>(<span>&lt;--</span> (<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y)) <span><span>;</span> Macro.</span>

(<span>assert&lt;--</span> '((<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y))) <span><span>;</span> Function.</span></pre></div>
<p dir="auto">The following clear the entire knowledge base of all but special
transforms before making their assertion.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(<--- (sibling ?x ?y) (brother ?x ?y)) ; Macro.

(assert<--- '((sibling ?x ?y) (brother ?x ?y))) ; Function."><pre>(<span>&lt;---</span> (<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y)) <span><span>;</span> Macro.</span>

(<span>assert&lt;---</span> '((<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y))) <span><span>;</span> Function.</span></pre></div>
<p dir="auto">The following---when employed systematically---avoid
subsumed-subsuming assertion pairs in the knowledge base, by declining
to add would-be-subsumed assertions and by retracting subsumed
assertions.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(<-_ (sibling ?x ?y) (brother ?x ?y)) ; Macro.

(assert<-_ '((sibling ?x ?y) (brother ?x ?y))) ; Function."><pre>(<span>&lt;-_</span> (<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y)) <span><span>;</span> Macro.</span>

(<span>assert&lt;-_</span> '((<span>sibling</span> ?x ?y) (<span>brother</span> ?x ?y))) <span><span>;</span> Function.</span></pre></div>
<p dir="auto">We retrieve assertions once upon calling a predicate, and assertion or
retraction operations otherwise relevant to that predicate will be
reflected during the call.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Retrieving assertions</h3><a id="user-content-retrieving-assertions" aria-label="Permalink: Retrieving assertions" href="#retrieving-assertions"></a></p>
<p dir="auto">We provide three functions for retrieving assertions by matching their
heads against a statement pattern.  Each returns a vector containing the
knowledge base's assertions whose head statements exhibit the function's
required relationship to <code>statement-pattern</code>.</p>
<p dir="auto">Get assertions whose head matches <code>statement-pattern</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(get-matching-head-assertions statement-pattern)"><pre>(<span>get-matching-head-assertions</span> statement-pattern)</pre></div>
<p dir="auto">Get assertions whose head is subsumed by <code>statement-pattern</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(get-subsumed-head-assertions statement-pattern)"><pre>(<span>get-subsumed-head-assertions</span> statement-pattern)</pre></div>
<p dir="auto">Get assertions whose head subsumes <code>statement-pattern</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(get-subsuming-head-assertions statement-pattern)"><pre>(<span>get-subsuming-head-assertions</span> statement-pattern)</pre></div>
<p dir="auto">We provide two similar functions that match assertions against a
full assertion pattern.</p>
<p dir="auto">Get assertions entirely subsumed by <code>assertion-pattern</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(get-subsumed-assertions assertion-pattern)"><pre>(<span>get-subsumed-assertions</span> assertion-pattern)</pre></div>
<p dir="auto">Get assertions entirely subsuming <code>assertion-pattern</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(get-subsuming-assertions assertion-pattern)"><pre>(<span>get-subsuming-assertions</span> assertion-pattern)</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Retracting assertions</h3><a id="user-content-retracting-assertions" aria-label="Permalink: Retracting assertions" href="#retracting-assertions"></a></p>
<p dir="auto">We provide two functions, and two corresponding macros, for retracting
assertions by matching their head statements against a pattern and
one function to retract assertions entirely matching an assertion pattern.</p>
<p dir="auto">The following have equivalent effect.  As in the assertion retrieval
functions, <code>statement-pattern</code> refers to assertions' head statements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(retract-subsumed-head-assertions statement-pattern)

(--- statement-pattern)"><pre>(<span>retract-subsumed-head-assertions</span> statement-pattern)

(<span>---</span> statement-pattern)</pre></div>
<p dir="auto">The following have equivalent effect.  Here, <code>assertion</code> must be equal
(Clojure <code>=</code>, including equal ?var symbols) to an assertion in the
knowledge base, for the latter to be retracted.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(retract-specific-assertion assertion) ; Function.

(-- statement-pattern) ; Macro."><pre>(<span>retract-specific-assertion</span> assertion) <span><span>;</span> Function.</span>

(<span>--</span> statement-pattern) <span><span>;</span> Macro.</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="(retract-subsumed-assertions '((?pred deceased-person)))"><pre>(<span>retract-subsumed-assertions</span> '((<span>?pred</span> deceased-person)))</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Querying</h2><a id="user-content-querying" aria-label="Permalink: Querying" href="#querying"></a></p>
<p dir="auto">The following macro and function are equivalent---except that the
macro does not support keyword arguments (instead, bind the
default-value globals).  With a truthy limit, terminate search upon
having recorded so many answers.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(? answer-template &amp; goals) ; Macro.

(query answer-template goals ; Function.
       :limit *answer-count-limit*
       :discard-subsumed *discard-subsumed-answers*)"><pre>(<span>?</span> answer-template &amp; goals) <span><span>;</span> Macro.</span>

(<span>query</span> answer-template goals <span><span>;</span> Function.</span>
       <span>:limit</span> *answer-count-limit*
       <span>:discard-subsumed</span> *discard-subsumed-answers*)</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Leashing</h2><a id="user-content-leashing" aria-label="Permalink: Leashing" href="#leashing"></a></p>
<p dir="auto">For now, leashing is an all-or-nothing proposition.  Perform any query
with <code>*leash*</code> bound truthy, for goal-by-goal reports describing
execution.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(binding [*leash* true]
  ;; Query form(s) in here.
  )"><pre>(<span>binding</span> [*leash* <span>true</span>]
  <span><span>;</span>; Query form(s) in here.</span>
  )</pre></div>
<p dir="auto">As demonstrated in our Highlights section and in
<code>test/prolog/leash-tests.txt</code>, leashing reports...</p>
<ul dir="auto">
<li>Entry into and success or failure of goals</li>
<li>Backtracking into...
<ul dir="auto">
<li>Remaining matching assertions of goals with assertion predicates</li>
<li>Remaining disjuncts (remaining alternatives goals) of <code>or</code> goals</li>
</ul>
</li>
<li><code>first</code> operator-induced cuts</li>
<li>Application of predicate transforms</li>
<li>The discovery of answers and their disposition</li>
<li>Search termination upon reaching an answer count limit.</li>
</ul>
<p dir="auto">Leashing also...</p>
<ul dir="auto">
<li>Indexes reports per depth of assertion nesting</li>
<li>Indicates the nesting of built-in predicates for the current assertion</li>
<li>Left-pads reports per nesting of assertion and built-in predicate goals.</li>
</ul>
<p dir="auto">When <code>*pprint-leash-statements*</code> is truthy, ...<code>"Entering"</code>, ...</p>
<ul dir="auto">
<li><code>"Matched head"</code> leash reports are omitted.</li>
<li><code>"Succeeded"</code>, and <code>"Failed"</code> leash reports pprint (vs. print)
statement content, starting on a new line, with indentation, as in...</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="clolog.core> (binding [*leash* true
                       *pprint-leash-statements* true]
               (query '[?h ?w ?z] '((zebra ?h ?w ?z)) :limit 1))
0. Processing query: ((zebra ?h ?w ?z))
 1. Entering `zebra`/3:
    (zebra ?h:0 ?w:0 ?z:0)

  1. (same): Entering...
             (same
              ?h:0
              ((house norwegian ?anon-0:1 ?anon-1:1 ?anon-2:1 ?anon-3:1)
               ?anon-4:1
               (house ?anon-5:1 ?anon-6:1 ?anon-7:1 milk ?anon-8:1)
               ?anon-9:1
               ?anon-10:1))

  1. (same): Succeeded...
             (same
              ((house norwegian ?anon-0:1 ?anon-1:1 ?anon-2:1 ?anon-3:1)
               ?anon-4:1
               (house ?anon-5:1 ?anon-6:1 ?anon-7:1 milk ?anon-8:1)
               ?anon-9:1
               ?anon-10:1)
              ((house norwegian ?anon-0:1 ?anon-1:1 ?anon-2:1 ?anon-3:1)
               ?anon-4:1
               (house ?anon-5:1 ?anon-6:1 ?anon-7:1 milk ?anon-8:1)
               ?anon-9:1
               ?anon-10:1))

  2. Entering `member`/2:
     (member
      (house englishman ?anon-11:1 ?anon-12:1 ?anon-13:1 red)
      ((house norwegian ?anon-0:1 ?anon-1:1 ?anon-2:1 ?anon-3:1)
       ?anon-4:1
       (house ?anon-5:1 ?anon-6:1 ?anon-7:1 milk ?anon-8:1)
       ?anon-9:1
       ?anon-10:1))"><pre>clolog.core&gt; (<span>binding</span> [*leash* <span>true</span>
                       *pprint-leash-statements* <span>true</span>]
               (<span>query</span> '[?h ?w ?z] '((<span>zebra</span> ?h ?w ?z)) <span>:limit</span> <span>1</span>))
<span>0.</span> Processing query: ((<span>zebra</span> ?h ?w ?z))
 <span>1.</span> Entering `zebra`/<span>3</span>:
    (<span>zebra</span> ?h:0 ?w:0 ?z:0)

  <span>1.</span> (<span>same</span>): Entering...
             (<span>same</span>
              ?h:0
              ((<span>house</span> norwegian ?anon-0:1 ?anon-1:1 ?anon-2:1 ?anon-3:1)
               ?anon-4:1
               (<span>house</span> ?anon-5:1 ?anon-6:1 ?anon-7:1 milk ?anon-8:1)
               ?anon-9:1
               ?anon-10:1))

  <span>1.</span> (<span>same</span>): Succeeded...
             (<span>same</span>
              ((<span>house</span> norwegian ?anon-0:1 ?anon-1:1 ?anon-2:1 ?anon-3:1)
               ?anon-4:1
               (<span>house</span> ?anon-5:1 ?anon-6:1 ?anon-7:1 milk ?anon-8:1)
               ?anon-9:1
               ?anon-10:1)
              ((<span>house</span> norwegian ?anon-0:1 ?anon-1:1 ?anon-2:1 ?anon-3:1)
               ?anon-4:1
               (<span>house</span> ?anon-5:1 ?anon-6:1 ?anon-7:1 milk ?anon-8:1)
               ?anon-9:1
               ?anon-10:1))

  <span>2.</span> Entering `member`/<span>2</span>:
     (<span>member</span>
      (<span>house</span> englishman ?anon-11:1 ?anon-12:1 ?anon-13:1 red)
      ((<span>house</span> norwegian ?anon-0:1 ?anon-1:1 ?anon-2:1 ?anon-3:1)
       ?anon-4:1
       (<span>house</span> ?anon-5:1 ?anon-6:1 ?anon-7:1 milk ?anon-8:1)
       ?anon-9:1
       ?anon-10:1))</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Built-in predicates</h2><a id="user-content-built-in-predicates" aria-label="Permalink: Built-in predicates" href="#built-in-predicates"></a></p>
<p dir="auto">We support the following built-in predicates.  We borrow some notation
from our Grammar section and allow ourselves to introduce types via
obvious naming (e.g., a &lt;condition-statement&gt; is a
&lt;statement&gt;---distinguished merely by its role/argument position in the
built-in predicate <code>if</code>).  We invoke the exclued middle: If a goal
does not succeed, then it fails.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>(and</code> &lt;statement&gt;*<code>)</code> succeeds if, proceeding from left to right,
every conjunct statement succeeds.</p>
</li>
<li>
<p dir="auto"><code>(or</code> &lt;statement&gt;*<code>)</code> succeeds if, proceeding from left to
right, some disjunct statement succeeds (and remaining disjuncts are
ignored).  Backtracking will explore first alternative ways to
satisfy a failing statement, then subsequent statements.</p>
</li>
<li>
<p dir="auto"><code>(if</code> &lt;condition-statement&gt; &lt;then-statement&gt; &lt;else-statement&gt;<code>)</code>
succeeds if either:</p>
<ul dir="auto">
<li>
<p dir="auto">The condition statement succeeds and the then statement succeeds (in which
case we do not examine the else statement under the bindings for
the condition statement's ?vars)</p>
</li>
<li>
<p dir="auto">The condition statement fails and the else statement succeeds (in which
case we do not examine <code>then-statement</code>).</p>
</li>
</ul>
<p dir="auto">Backtracking will explore alternative ways to satisfy the argument
statements.</p>
</li>
<li>
<p dir="auto"><code>(not</code> &lt;statement&gt;<code>)</code> succeeds if the wrapped statement fails.</p>
</li>
<li>
<p dir="auto"><code>(first</code> &lt;statement&gt;<code>)</code> succeeds if the argument statement succeeds.  This
form (AKA Prolog "cut") skips backtracking to explore other ways of
satisfying the statement, upon its first success.</p>
</li>
<li>
<p dir="auto"><code>(same</code> &lt;term&gt; &lt;term&gt;<code>)</code> succeeds if the two terms match.</p>
</li>
<li>
<p dir="auto"><code>(true)</code> succeeds unconditionally.</p>
</li>
<li>
<p dir="auto"><code>(false)</code> fails unconditionally.</p>
</li>
<li>
<p dir="auto"><code>(var</code> &lt;term&gt;<code>)</code> succeeds if the argument term is a ?var.</p>
</li>
<li>
<p dir="auto"><code>(ground \&lt;term\&gt;)</code> succeeds if the argument term is ground.</p>
</li>
<li>
<p dir="auto"><code>(truthy?</code> &lt;form&gt;<code>)</code> succeeds if the argument form is ground and
the result of its evaluation (in Clojure) is truthy.</p>
</li>
<li>
<p dir="auto"><code>(evals-from?</code> &lt;term&gt; &lt;form&gt;<code>)</code> succeeds if the argument form is
ground and the result of its evaluation (in Clojure) matches the
argument term (often a ?var).</p>
</li>
<li>
<p dir="auto"><code>(do</code> &lt;form&gt;*<code>)</code> succeeds if the whole <code>do</code> expression is ground,
evaluating it (in Clojure) for side effect, only.</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Creating special transforms</h2><a id="user-content-creating-special-transforms" aria-label="Permalink: Creating special transforms" href="#creating-special-transforms"></a></p>
<p dir="auto">The function call below---performed by <code>initialize-prolog</code>---seeds
Clolog with some transforms for predicates we have found useful in
other Lisp-based Prologs.  As we intend this facility to support
customization, you may wish to copy our version of
<code>create-predicate-transforms</code> and edit it to your liking.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(create-predicate-transforms)"><pre>(<span>create-predicate-transforms</span>)</pre></div>
<p dir="auto"><code>create-predicate-transforms</code> includes calls to
<code>create-predicate-transform</code>.  Each call is a production rule.  During
search, a goal matching <code>source-statement</code> is transformed---via
de-referencing---into <code>target-statement</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="(create-predicate-transform source-statement target-statement)"><pre>(<span>create-predicate-transform</span> source-statement target-statement)</pre></div>
<p dir="auto">The execution machinery for transform predicates applies the first
matching transform irrevocably, with no backtracking in case of
failure.  Compared to an assertion predicate defined using using one
assertion per transform and the same statements in each
transform-assertion pair, it is as if the transform predicate's goal
always were wrapped with <code>first</code>.  We consider predicate transforms to
be "macros" for Prolog, affording us cleaner leashing than would
similar assertion predicates.  Assertion predicatess more verbose
leashing may nonetheless be helpful in prototyping and debugging
prospective transforms.  It may help to call
<code>create-predicate-transforms</code> with optional argument <code>debugging?</code>
truthy---and either disregard any effects resulting from backtracking
into prospective transform predicates ultimately intended or (as in
<code>tests/clolog/core_tests.clj</code>) avoid backtracking by limiting the
count of answers found.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Potential future enhancements</h2><a id="user-content-potential-future-enhancements" aria-label="Permalink: Potential future enhancements" href="#potential-future-enhancements"></a></p>
<p dir="auto">We might pursue some of the following ideas towards increasing
expressivity/leashing, robustness/scale, and efficiency, given
motivating use cases.</p>
<ul dir="auto">
<li>
<p dir="auto">Potential enhancements to expressiveness and leashing:</p>
<ul dir="auto">
<li>
<p dir="auto">Accommodate non-ground Clojure expressions in Clojure-calling
forms---in case a called form would use these in crafting
subsequent goal (e.g.).</p>
</li>
<li>
<p dir="auto">Make the local/lexical environment accessible within called
Clojure forms.</p>
</li>
<li>
<p dir="auto">Support RDF, RDFS, selected aspects of OWL (e.g., inverses,
functional dependencies).</p>
</li>
<li>
<p dir="auto">Selective leashing, considering (e.g.) predicate, arity,
report type (e.g., answer disposition).</p>
</li>
<li>
<p dir="auto">Selective detail in leashing, e.g., re <code>if</code> subgoals</p>
</li>
<li>
<p dir="auto">Greater precision in leash report prefixes for n-ary operators
<code>and</code>, <code>or</code> (e.g., indexing potentially like-predicate conjuncts,
disjuncts).</p>
</li>
</ul>
</li>
<li>
<p dir="auto">Potential enhancements to robustness and scale</p>
<ul dir="auto">
<li>
<p dir="auto">Error-check user/application inputs more pervasively.</p>
</li>
<li>
<p dir="auto">Support Prolog stack limits, breakpoints, stepping/debugger
integration.</p>
</li>
<li>
<p dir="auto">Support database integration---access to unit ground assertions.</p>
</li>
</ul>
</li>
<li>
<p dir="auto">Potential efficiency enhancements</p>
<ul dir="auto">
<li>
<p dir="auto">Perform further indexing, including trie-based indexing.</p>
</li>
<li>
<p dir="auto">Qualify seq/vector matching with early check for compatible
lengths of candidate-matching seqs and vectors.</p>
</li>
<li>
<p dir="auto">Decline to explore alternative satisfactions of a ground goal.</p>
</li>
<li>
<p dir="auto">Skirt search branches that cannot instantiate an answer template
?var.</p>
</li>
<li>
<p dir="auto">Support parallelism and/or laziness.</p>
</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Copyright © 2023 Robert Carl Schrag</p>
<p dir="auto">This program and the accompanying materials are made available under
the terms of the Eclipse Public License 2.0 which is available at
<a href="http://www.eclipse.org/legal/epl-2.0" rel="nofollow">http://www.eclipse.org/legal/epl-2.0</a>.</p>
<p dir="auto">This Source Code may also be made available under the following
Secondary Licenses when the conditions for such availability set forth
in the Eclipse Public License, v. 2.0 are satisfied: GNU General
Public License as published by the Free Software Foundation, either
version 2 of the License, or (at your option) any later version, with
the GNU Classpath Exception which is available at
<a href="https://www.gnu.org/software/classpath/license.html" rel="nofollow">https://www.gnu.org/software/classpath/license.html</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Generate videos in Gemini and Whisk with Veo 2 (330 pts)]]></title>
            <link>https://blog.google/products/gemini/video-generation/</link>
            <guid>43695592</guid>
            <pubDate>Tue, 15 Apr 2025 17:02:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.google/products/gemini/video-generation/">https://blog.google/products/gemini/video-generation/</a>, See on <a href="https://news.ycombinator.com/item?id=43695592">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>

    
    





    

    
      

<div data-analytics-module="{
    &quot;module_name&quot;: &quot;Hero Menu&quot;,
    &quot;section_header&quot;: &quot;Generate videos in Gemini and Whisk with Veo 2&quot;
  }">
  
  <div>
      <div>
          
            <p>Apr 15, 2025</p>
          
          
            <p data-reading-time-render="">[[read-time]] min read</p>
          
        </div>
      
        <p>
          Transform text-based prompts into high-resolution eight-second videos, accessible to Gemini Advanced subscribers. Plus, Google One AI Premium subscribers can use Whisk Animate to turn images into eight-second animated clips.
        </p>
      
    </div>
  
  <div>
  <p>Olivia Sturman</p>
  
    <p>
      Product Manager, Google Labs
    </p>
  
  
</div>
</div>

    

    
      <div>
      <p>
        <video aria-label="Video showcasing how you can generate videos in Gemini" autoplay="" loop="" muted="" playsinline="" poster="https://storage.googleapis.com/gweb-uniblog-publish-prod/original_images/GenerateVideos_Static1_1920x1080.png" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/original_videos/Sized_Gemini_VEO_HeroVideo_16x9_Youtube_v04_1.mp4" type="video/mp4">
          Sorry, your browser doesn't support embedded videos, but don't worry, you can
            <a href="https://storage.googleapis.com/gweb-uniblog-publish-prod/original_videos/Sized_Gemini_VEO_HeroVideo_16x9_Youtube_v04_1.mp4">download it</a>
            and watch it with your favorite video player!
        </video>
      </p>
      
    </div>

    

    
    <div data-reading-time="true" data-component="uni-article-body">

            
              





<uni-article-speakable page-title="Generate videos in Gemini and Whisk with Veo 2" listen-to-article="Listen to article" data-date-modified="2025-04-15T17:00:02.675540+00:00" data-tracking-ids="G-HGNBTNCHCQ,G-6NKTLKV14N" data-voice-list="en.ioh-pngnat:Cyan,en.usb-pngnat:Lime" data-script-src="https://www.gstatic.com/readaloud/player/web/api/js/api.js"></uni-article-speakable>

            

            
            
<!--article text-->

  
    <div data-component="uni-article-paragraph" role="presentation" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;Generate videos in Gemini and Whisk with Veo 2&quot;
         }"><p data-block-key="hzfux">Starting today, Gemini Advanced users can generate and share videos using our state-of-the-art video model, <a href="https://blog.google/technology/google-labs/video-image-generation-update-december-2024/">Veo 2</a>. In Gemini, you can now translate text-based prompts into dynamic videos. Google Labs is also making Veo 2 available through <a href="http://labs.google/whisk">Whisk</a>, a generative AI experiment that allows you to create new images using both text and image prompts, and now animate them into videos.</p><h2 data-block-key="6uggf">How to create videos with Gemini</h2><p data-block-key="emffm">Veo 2 represents a <a href="https://deepmind.google/technologies/veo/veo-2/">leap forward</a> in video generation, designed to produce high-resolution, detailed videos with cinematic realism. By better understanding real-world physics and human motion, it delivers fluid character movement, lifelike scenes and finer visual details across diverse subjects and styles.</p><p data-block-key="4v3c0">To generate videos, select Veo 2 from the model dropdown
<a data-ga4-analytics-superscript-click="" data-target="inline text" href="#footnote-1" id="footnote-source-1"><sup>1</sup></a>
 in Gemini. This feature creates an eight-second video clip at 720p resolution, delivered as an MP4 file in a 16:9 landscape format. There is a monthly limit on how many videos you can create, but we will notify you as you approach it.</p><p data-block-key="ebedu"><a href="https://gemini.google/overview/video-generation/">Creating videos</a> with Gemini is simple: just describe the scene you want to create — whether it's a short story, a visual concept, or a specific scene — and Gemini will bring your ideas to life. The more detailed your description, the more control you have over the final video. This opens up a world of fun creative possibilities, letting your imagination go wild to picture unreal combinations, explore varied visual styles from realism to fantasy, or quickly narrate short visual ideas.</p><p data-block-key="c6t8m">One of the best parts of creating is sharing with others. Sharing your video on mobile is easy: simply tap the share button to quickly upload engaging short videos to platforms like TikTok and YouTube Shorts.</p></div>
  

  
    








<uni-image-carousel section-header="Generate videos in Gemini and Whisk with Veo 2" images="[
    
      {
        
          &quot;src&quot;: [&quot; https://storage.googleapis.com/gweb-uniblog-publish-prod/original_videos/Gemini_Generated_Video__37_aDEwjss.mp4 &quot;],
        
        &quot;alt&quot;: &quot;Animation of two figures in white exosuits casting light in a cave&quot;,
        &quot;isVideo&quot;: true,
        &quot;videoTitle&quot;: &quot;Gemini 1&quot;
      },
    
      {
        
          &quot;src&quot;: [&quot; https://storage.googleapis.com/gweb-uniblog-publish-prod/original_videos/Mouse_Reads_Video_Generated.mp4 &quot;],
        
        &quot;alt&quot;: &quot;Animation of an adorable mouse reading a book&quot;,
        &quot;isVideo&quot;: true,
        &quot;videoTitle&quot;: &quot;Gemini 2&quot;
      },
    
      {
        
          &quot;src&quot;: [&quot; https://storage.googleapis.com/gweb-uniblog-publish-prod/original_videos/Gemini_Generated_Video__13.mp4 &quot;],
        
        &quot;alt&quot;: &quot;Animation of cliffs on a beach&quot;,
        &quot;isVideo&quot;: true,
        &quot;videoTitle&quot;: &quot;pacific view&quot;
      },
    
      {
        
          &quot;src&quot;: [&quot; https://storage.googleapis.com/gweb-uniblog-publish-prod/original_videos/KR_Veo2_4.mp4 &quot;],
        
        &quot;alt&quot;: &quot;Animation of pixelated ice cream melting&quot;,
        &quot;isVideo&quot;: true,
        &quot;videoTitle&quot;: &quot;KR_Veo2_4.mp4&quot;
      }
    
  ]">
  
    
      <div slot="caption-slot-0">
        <p data-block-key="27cbd">Prompt: A wide, slow-panning shot of an enormous glacial cavern, bathed in eerie twilight. Pale cyan light filters from above, illuminating frozen candy figures within the ice walls. Two figures in white exosuits, their helmet lights casting beams, trudge through the center. Capture the cavern's scale and stillness.</p>
      </div>
    
  
    
      <div slot="caption-slot-1">
        <p data-block-key="b8xgg">Prompt: An animated shot of a tiny mouse with oversized glasses, reading a book by the light of a glowing mushroom in a cozy forest den.</p>
      </div>
    
  
    
      <div slot="caption-slot-2">
        <p data-block-key="b8xgg">Prompt: Aerial shot of a grassy cliff onto a sandy beach where waves crash against the shore, a prominent sea stack rises from the ocean near the beach, bathed in the warm, golden light of either sunrise or sunset, capturing the serene beauty of the Pacific coastline.</p>
      </div>
    
  
    
      <div slot="caption-slot-3">
        <p data-block-key="b8xgg">Prompt: Time-lapse of a voxel-style ice cream melting under a clear blue sky. The pink, grey, and white scoops slowly lose their shape, dripping down the yellow, blocky cone held by a large, voxel hand with a blue sleeve. Focus on the melting process, highlighting the changing texture and form of the voxel elements as the ice cream deforms and drips, creating a colorful, pixelated melt against the vibrant blue backdrop.</p>
      </div>
    
  
</uni-image-carousel>

  

  
    <div data-component="uni-article-paragraph" role="presentation" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;Generate videos in Gemini and Whisk with Veo 2&quot;
         }">
        <p data-block-key="be4dh">Video generation is now rolling out to Gemini Advanced subscribers globally on web and mobile, starting today and continuing over the next few weeks. This feature is available in all languages Gemini supports. Try it out today at <a href="http://gemini.google.com/">gemini.google.com</a>.</p>
      </div>
  

  
    <div data-component="uni-article-paragraph" role="presentation" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;Generate videos in Gemini and Whisk with Veo 2&quot;
         }"><h2 data-block-key="be4dh">How Whisk Animate brings your images to life</h2><p data-block-key="qrhp"><a href="https://blog.google/technology/google-labs/whisk/">Introduced in December</a>, Whisk is a Google Labs experiment that helps you quickly explore and visualize new ideas using both text and image prompts. Today, you can animate your creations with Whisk Animate.</p><p data-block-key="2bhtn">Whisk Animate lets you turn your images into vivid eight-second videos using Veo 2. It’s available for Google One AI Premium subscribers globally starting today. Subscribers can try it at <a href="http://labs.google/whisk">labs.google/whisk</a>.</p></div>
  

  
    
  
    


  <uni-youtube-player-article index="5" thumbnail-alt="Video of Whisk Animate" video-id="2yYDI-p5aGs" video-type="video">
  </uni-youtube-player-article>


  


  

  
    <div data-component="uni-article-paragraph" role="presentation" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;Generate videos in Gemini and Whisk with Veo 2&quot;
         }"><h2 data-block-key="be4dh">How we approach safety</h2><p data-block-key="94fmg">We’ve taken important steps to make video generation a safe experience. This includes extensive <a href="https://blog.google/technology/safety-security/googles-ai-red-team-the-ethical-hackers-making-ai-safer/">red teaming</a> and evaluation aimed at preventing the generation of content that violates our <a href="https://gemini.google/policy-guidelines/">policies</a>. Additionally, all videos generated with Veo 2 are marked with <a href="https://deepmind.google/technologies/synthid/">SynthID</a>, a digital watermark embedded in each frame, which indicates the videos are AI-generated.</p><p data-block-key="a9rsg">Gemini's outputs are primarily determined by user prompts and like any generative AI tool, there may be instances where it generates content that some individuals find objectionable. We’ll continue to listen to your feedback through the thumbs up/down buttons and make ongoing improvements. For more details, you can <a href="https://gemini.google/our-approach/">read about our approach on our website</a>.</p><p data-block-key="2dv5b">We hope you enjoy making videos in the Gemini app and Whisk as <a href="https://one.google.com/about/ai-premium/">Google One AI Premium subscribers</a>.</p></div>
  

  
    

  
    





<div role="form" data-component="uni-subscribe" data-analytics-module="{
    &quot;module_name&quot;: &quot;Newsletter&quot;,
    &quot;section_header&quot;: &quot;Get more stories from Google in your inbox.&quot;
  }">
    
    
    <div id="newsletter-form--form">
      <form data-method="POST" data-action="https://services.google.com/fb/submissions/thekeywordnewsletterprodv2/">
        <h2 id="subscribe_box_label">
          <span>Get more stories from Google in your inbox.</span>
          
        </h2>
        
      </form>
    </div>
    
    <div>
      <div>
        <p tabindex="-1" role="status" aria-live="off" aria-atomic="false">
          Done. Just one step more.
        </p>
        <p>
          Check your inbox to confirm your subscription.
        </p>
        <p>You are already subscribed to our newsletter.</p>
      </div>
      <p>
        You can also subscribe with a
        
        
      </p>
    </div>
  </div>

  

  


            
            

            
              




            
          </div>
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Benn Jordan's AI poison pill and the weird world of adversarial noise (115 pts)]]></title>
            <link>https://cdm.link/benn-jordan-ai-poison-pill/</link>
            <guid>43695401</guid>
            <pubDate>Tue, 15 Apr 2025 16:47:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cdm.link/benn-jordan-ai-poison-pill/">https://cdm.link/benn-jordan-ai-poison-pill/</a>, See on <a href="https://news.ycombinator.com/item?id=43695401">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    	  
<p>Benn Jordan’s latest video proposes a way to fight back when generative AI music services rip off music for their data sets. It’s not ready for prime time yet, but it does offer a window into the wild, wonderful world of adversarial noise poisoning attacks.</p>



<p>Now, if you run in circles like mine, you’ve already gotten, “Hey, have you seen this new Benn Jordan video?” already, and I suspect gotten as far as watching it, but here you go:</p>



<figure><p>
<iframe title="The Art Of Poison-Pilling Music Files" width="500" height="281" src="https://www.youtube.com/embed/xMYm2d9bmEA?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p></figure>



<p>Benn’s approaches should have some real legs. There are two reasons to be optimistic. One, this family of techniques works on audio, so it <strong>covers the so-called “<a href="https://en.wikipedia.org/wiki/Analog_hole">analog loophole</a>“</strong>: it functions <em>anywhere</em> sound is heard. Two, there’s a potential to use <strong><em>different</em> methods</strong>, thus obfuscating the results. You can also validate the results, meaning these could be updated if services react.</p>



<p>It’s funny; when I spoke to Roland’s Paul McCabe about that company’s AI initiatives, I suggested a speculative design where you could press a button and block a performance from being trained. Benn actually went directly to the data science researchers to find out how that could be done – even in a live instrumental performance. So yes, this is possible. (Of course, you count as a CDM reader if your favorite music in the entire video is the targeted pressure wave attack at 22:00. The real AI attack would be inaudible to humans, not audible as it is here but – that’s my kind of music.) </p>



<p>Most important of all, though: <strong>these methods reveal how training sets and generative audio relate</strong>. Like Benn, I have interest in generative sound, algorithmic music, machine learning. It’s not about being pro- or anti-AI like this is a sport. We’re talking about the critical examination of a technology that is sucking up a huge amount of resources and reshaping the world around us. What these techniques do – even if the generative models find ways to circumvent them – is reveal something about how the technology works. It busts some of the mythmaking at a time when the world needs transparency, not another Wizard of Oz trick. </p>



<p>The big gotcha – spoiler alert – is that this requires <strong>high-end GPUs and a massive amount of electricity and time</strong> to pull off. Computation doesn’t magically consume less power on its own, either – least of all with semiconductor trade wars looming. But now that the idea is out there, the challenge would be devising a more efficient method; this at least works as a proof of concept.</p>



<p>In short, I’m for it. And I do expect a fear of training will stop some people from sending music to streaming services. It’s not hard to envision, as Benn does, a world where distributors license this technology to give producers added peace of mind. Remember in the early 2000s when we worried about protecting music from human fans? Now we’re protecting it from generative AI.</p>



<p>It’s worth watching the video, though, because the whole world of adversarial noise gets fascinating – and is a way to imagine hacking increasing AI and surveillance. So this is all about more than just the Poisonify concept (though that’s already essential).</p>



<h3>Into the data science</h3>



<p>Here’s more on the harmony cloaking tools developed at University of Tennessee Knoxville:</p>



<p><a href="https://eu.knoxnews.com/story/news/education/2024/12/10/harmonycloak-university-of-tennessee-stops-ai-from-using-copyrighted-music/76338974007/">You can’t hear it, but University of Tennessee tool ‘cloaks’ songs to protect music from AI</a> [<em>Knoxville News</em>]</p>



<p>The site/paper also has a survey:</p>



<p><a href="https://mosis.eecs.utk.edu/harmonycloak.html">HarmonyCloak: Making Music Unlearnable for Generative AI</a></p>



<p>The instrument classification attack, as far as I know, is novel. </p>



<p>Even if it didn’t find its market in digital distribution and DSPs, as Benn notes in the video, the AI detection algorithm research Benn did also remains compelling:</p>



<p><a href="https://musictech.com/news/music/benn-jordan-detect-ai-music/">Benn Jordan has made an algorithm that can detect if music has been made by AI or not</a></p>



<p>You’ll find a lot on adversarial noise, in different contexts – because that can be a method of training neural network classifiers and a way of attacking those systems. (There’s “friendly” and “unfriendly,” basically – even though I know that conflicts with what the word “adversarial” normally means. Think of it as “I’m challenging you to a game of chess to teach you something” versus “I’m challenging you to a game of chess to <em>mind control you</em>.” Sort of.)</p>



<p>And this stuff is moving <em>fast</em>. Here’s Los Alamos National Laboratory, the folks who have never been associated with anything other than friendly uses of science and technology:</p>



<p><a href="https://www.lanl.gov/media/news/0305-ai-adversarial-attacks">New AI defense method shields models from adversarial attacks</a></p>



<p>Or some 2022 proceedings of the International Conference of Neural Information Processing Systems:</p>



<p><a href="https://dl.acm.org/doi/10.5555/3600270.3601138">Friendly noise against adversarial noise:&nbsp;a powerful defense against data poisoning attacks</a></p>



<p>2020 and IBM Watson: [PDF]</p>



<p><a href="https://openaccess.thecvf.com/content_CVPRW_2020/papers/w47/Agarwal_Noise_Is_Inside_Me_Generating_Adversarial_Perturbations_With_Noise_Derived_CVPRW_2020_paper.pdf">Noise is Inside Me! Generating Adversarial Perturbations with Noise Derived from Natural Filters</a></p>



<p>Targeted pressure wave attacks as discussed in the video are being deployed against machines, but they’re also known for use in sonic weapons against humans. That’s likely what was causing serious neurological symptoms in pulsed microwave energy in Cuba, the <a href="https://www.nbcnews.com/news/all/havana-syndrome-likely-caused-microwave-energy-government-study-finds-n1250094">so-called “Havana Syndrome”</a> – <a href="https://www.nationaldefensemagazine.org/articles/2018/9/6/exclusive-doctors-reveal-details-of-neuroweapon-attacks-in-havana">sound as a neuro-weapon</a>.</p>



<p>But as for using sound against machines, here you go:</p>



<p><a href="https://hal.science/hal-03878176/file/Adversarial_attacks_by_random_noises.pdf">Neural Adversarial Attacks with Random Noises</a></p>



<p>And the same broader category of mechanisms that can be used to attack can be used in training:</p>



<p><a href="https://arxiv.org/abs/2109.09901">Modeling Adversarial Noise for Adversarial Training</a></p>



<p><a href="https://arxiv.org/abs/2212.05337">Targeted Adversarial Attacks on Deep Reinforcement Learning Policies via Model Checking</a></p>



<p>An actual data scientist might have some better ideas; I just play one on TV.</p>



<p>Anyway, yes, my idea of fun is making music, I really don’t find genAI music to be fun, but I do also enjoy imagining generating unheard musics by rewiring machine listening to categorize things incorrectly. </p>



<p>And, I mean, obviously we need to do some kind of music compilation of (audible) adversarial noise attacks, though I guess we should be careful how we distribute it. I think I’m only interested in a malfunctioning Alexa, so this might convince me to try to buy someone’s older model just to mess with it. I … also liked the screwed-up musical results better.</p>



<p>If that meandering discourse put you to sleep, here, let me wake you up again with rage.</p>



<p>Here’s the clip that inspired the image at top; it’s a quote from Suno.ai founder Mikey Shulman:</p>







<p>Oh, sorry, that is the text as spoken with an AI-generated version of Anakin Skywalker’s voice. (I was just <a href="https://youtu.be/miVu_LOC0G0?si=-3B196q8P5-PExT5">inspired by this conversation</a>; the sentence construction seemed similar.) Here is the original clip in context, in which he also says people don’t like running (again, maybe suggesting a Darth Vader sort of solution):</p>



<blockquote data-media-max-width="560"><p lang="en" dir="ltr">“It’s not really enjoyable to make music now… it takes a lot of time, it takes a lot of practice, you have to get really good at an instrument or really good at a piece of production software. I think the majority of people don’t enjoy the majority of time they spend making… <a href="https://t.co/zkv73Bhmi9">pic.twitter.com/zkv73Bhmi9</a></p>— Mike Patti (@mpatti) <a href="https://twitter.com/mpatti/status/1878147029764911131?ref_src=twsrc%5Etfw">January 11, 2025</a></blockquote> 

        
    	  
    	  <div><p>Tags: <a href="https://cdm.link/tag/adversarial-noise/" rel="tag">adversarial noise</a>, <a href="https://cdm.link/tag/ai/" rel="tag">AI</a>, <a href="https://cdm.link/tag/ai-weapons/" rel="tag">AI weapons</a>, <a href="https://cdm.link/tag/artists/" rel="tag">artists</a>, <a href="https://cdm.link/tag/benn-jordan/" rel="tag">Benn Jordan</a>, <a href="https://cdm.link/tag/business/" rel="tag">business</a>, <a href="https://cdm.link/tag/darth-vader/" rel="tag">Darth Vader</a>, <a href="https://cdm.link/tag/data-science/" rel="tag">data science</a>, <a href="https://cdm.link/tag/data-sets/" rel="tag">data sets</a>, <a href="https://cdm.link/tag/genai/" rel="tag">genAI</a>, <a href="https://cdm.link/tag/generative-ai/" rel="tag">generative AI</a>, <a href="https://cdm.link/tag/hacks/" rel="tag">hacks</a>, <a href="https://cdm.link/tag/machine-learning-2/" rel="tag">machine learning</a>, <a href="https://cdm.link/tag/opinion/" rel="tag">opinion</a>, <a href="https://cdm.link/tag/poison-pills/" rel="tag">poison pills</a>, <a href="https://cdm.link/tag/streaming/" rel="tag">streaming</a>, <a href="https://cdm.link/tag/the-flashbulb/" rel="tag">The Flashbulb</a></p></div>
    	  
    		      		
    						
				
				
				        
                          
                  	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI is building a social network? (269 pts)]]></title>
            <link>https://www.theverge.com/openai/648130/openai-social-network-x-competitor</link>
            <guid>43694877</guid>
            <pubDate>Tue, 15 Apr 2025 16:08:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theverge.com/openai/648130/openai-social-network-x-competitor">https://www.theverge.com/openai/648130/openai-social-network-x-competitor</a>, See on <a href="https://news.ycombinator.com/item?id=43694877">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="zephr-anchor"><p>OpenAI is working on its own X-like social network, according to multiple sources familiar with the matter.</p><p>While the project is still in early stages, we’re told there’s an internal prototype focused on <a href="https://www.theverge.com/openai/636529/images-chatgpt-openai-studio-ghibli-copyright">ChatGPT’s image generation</a> that has a social feed. CEO Sam Altman has been privately asking outsiders for feedback about the project, our sources say. It’s unclear if OpenAI’s plan is to release the social network as a separate app or integrate it into ChatGPT, which became the <a href="https://techcrunch.com/2025/04/11/chatgpt-became-the-most-downloaded-app-globally-in-march/">most downloaded app</a> globally last month. An OpenAI spokesperson didn’t respond in time for publication.</p><p>Launching a social network in or around ChatGPT would likely increase Altman’s already-bitter rivalry with Elon Musk. In February, after Musk made <a href="https://www.theverge.com/news/609685/elon-musk-openai-purchase-offer">an unsolicited offer to purchase</a> OpenAI for $97.4 billion, Altman <a href="https://x.com/sama/status/1889059531625464090?lang=en">responded</a>: “no thank you but we will buy twitter for $9.74 billion if you want.”</p><p>Entering the social media market also puts OpenAI on more of a collision course with Meta, which we’re told is planning to add a social feed to its coming standalone app for its AI assistant. When reports of Meta building a rival to the ChatGPT app first surfaced a couple of months ago, Altman <a href="https://x.com/sama/status/1895230925753233763">shot back on X</a> again by saying, “ok fine maybe we’ll do a social app.”</p><p>A social app would also give OpenAI its own unique, real-time data that X and Meta already have to help train their AI models. Musk’s Grok surfaces content from X in its results (Musk recently went so far as <a href="https://www.theverge.com/news/638933/elon-musk-x-xai-acquisition">to merge X and xAI</a> into the same company), while Meta trains Llama on its vast trove of user data.</p><p>One idea behind the OpenAI social prototype is to have AI help people share better content. “The Grok integration with X has made everyone jealous,” says someone working at another big AI lab. “Especially how people create viral tweets by getting it to say something stupid.”</p><p>OpenAI has a lot going on, of course, and it’s unclear if its early-stage social media project will ever see the light of day. But its existence inside OpenAI shows how the company is thinking about expansion at a time when expectations for its future growth are sky high.</p><div><p id="do-you-work-at-openai"><h2><strong>Do you work at OpenAI?</strong></h2></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[JSX over the Wire (221 pts)]]></title>
            <link>https://overreacted.io/jsx-over-the-wire/</link>
            <guid>43694681</guid>
            <pubDate>Tue, 15 Apr 2025 15:56:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://overreacted.io/jsx-over-the-wire/">https://overreacted.io/jsx-over-the-wire/</a>, See on <a href="https://news.ycombinator.com/item?id=43694681">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Suppose you have an API route that returns some data as JSON:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/api/likes/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postId</span><span> </span><span>=</span><span> req</span><span>.</span><span>params</span><span>.</span><span>postId</span><span>;</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>const </span><span>json</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>friendLikes</span><span>:</span><span> friendLikes</span><span>,</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>json</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>You also have a React component that needs that data:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>LikeButton</span><span>(</span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  friendLikes</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>let </span><span>buttonText</span><span> </span><span>=</span><span> </span><span>'</span><span>Like</span><span>'</span><span>;</span></span>
<span data-line=""><span>  </span><span>if</span><span> </span><span>(</span><span>totalLikeCount </span><span>&gt;</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>// e.g. "Liked by You, Alice, and 13 others"</span></span>
<span data-line=""><span>    buttonText </span><span>=</span><span> </span><span>formatLikeText</span><span>(</span><span>totalLikeCount</span><span>,</span><span> isLikedByUser</span><span>,</span><span> friendLikes</span><span>);</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>button</span><span> className={</span><span>isLikedByUser</span><span> ? </span><span>'</span><span>liked</span><span>'</span><span> : </span><span>''</span><span>}&gt;</span></span>
<span data-line=""><span>      </span><span>{</span><span>buttonText</span><span>}</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>button</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>How do you get that data into that component?</p>
<p>You could pass it from a parent component using some data fetching library:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>PostLikeButton</span><span>(</span><span>{ postId }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>json</span><span>,</span><span> </span><span>isLoading</span><span>] </span><span>=</span><span> </span><span>useData</span><span>(</span><span>`/api/likes/</span><span>${</span><span>postId</span><span>}</span><span>`</span><span>);</span></span>
<span data-line=""><span>  </span><span>// ...</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>LikeButton</span></span>
<span data-line=""><span>      totalLikeCount={</span><span>json</span><span>.</span><span>totalLikeCount</span><span>}</span></span>
<span data-line=""><span>      isLikedByUser={</span><span>json</span><span>.</span><span>isLikedByUser</span><span>}</span></span>
<span data-line=""><span>      friendLikes={</span><span>json</span><span>.</span><span>friendLikes</span><span>}</span></span>
<span data-line=""><span>    /&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>That’s one way of thinking about it.</p>
<p>But have another look at your API:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/api/likes/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postId</span><span> </span><span>=</span><span> req</span><span>.</span><span>params</span><span>.</span><span>postId</span><span>;</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>const </span><span>json</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>friendLikes</span><span>:</span><span> friendLikes</span><span>,</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>json</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>Do these lines remind you of anything?</p>
<p>Props. <em>You’re passing props.</em> You just didn’t specify <em>where to</em>.</p>
<p>But you already know their final destination—<code>LikeButton</code>.</p>
<p>Why not just fill that in?</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/api/likes/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postId</span><span> </span><span>=</span><span> req</span><span>.</span><span>params</span><span>.</span><span>postId</span><span>;</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>const </span><span>json</span><span> </span><span>=</span><span> </span><span>(</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>&lt;</span><span>LikeButton</span></span>
<span data-line=""><span>      totalLikeCount={</span><span>post</span><span>.</span><span>totalLikeCount</span><span>}</span></span>
<span data-line=""><span>      isLikedByUser={</span><span>post</span><span>.</span><span>isLikedByUser</span><span>}</span></span>
<span data-line=""><span>      friendLikes={</span><span>friendLikes</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>    /&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>json</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>Now the “parent component” of <code>LikeButton</code> is the <em>API itself</em>.</p>
<p>Wait, what?</p>
<p>Weird, I know. We’re going to worry about whether it’s a good idea later. But for now, notice how this inverts the relationship between components and the API. This is sometimes known as the Hollywood Principle: “Don’t call me, I’ll call you.”</p>
<p>Your components don’t call your API.</p>
<p>Instead, your API <em>returns</em> your components.</p>
<p>Why would you ever want to do that?</p>
<hr>
<ul>
<li><a href="#part-1-json-as-components">Part 1: JSON as Components</a></li>
<li><a href="#part-2-components-as-json">Part 2: Components as JSON</a></li>
<li><a href="#part-3-jsx-over-the-wire">Part 3: JSX Over The Wire</a></li>
</ul>
<hr>
<h2 id="part-1-json-as-components"><a target="_self" href="#part-1-json-as-components">Part 1: JSON as Components</a></h2>
<h3 id="model-view-viewmodel"><a target="_self" href="#model-view-viewmodel">Model, View, ViewModel</a></h3>
<p>There is a fundamental tension between how we want to <em>store</em> information and how we want to <em>display</em> it. We generally want to store more things than we display.</p>
<p>For example, consider a Like button on a Post. When we store Likes for a given Post, we might want to represent them as a table of <code>Like</code> rows like this:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> Like </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>  createdAt</span><span>:</span><span> </span><span>string</span><span>,</span><span> </span><span>// Timestamp</span></span>
<span data-line=""><span>  likedById</span><span>:</span><span> </span><span>number</span><span>,</span><span> </span><span>// User ID</span></span>
<span data-line=""><span>  postId</span><span>:</span><span> </span><span>number</span><span>     </span><span>// Post ID</span></span>
<span data-line=""><span>};</span></span></code></pre></div>
<p>Let’s call this kind of data a “Model”. It represents the raw shape of the data.</p>

<p>So our Likes database table might contain data of that shape:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>[{</span></span>
<span data-line=""><span>  createdAt</span><span>:</span><span> </span><span>'</span><span>2025-04-13T02:04:41.668Z</span><span>'</span><span>,</span></span>
<span data-line=""><span>  likedById</span><span>:</span><span> </span><span>123</span><span>,</span></span>
<span data-line=""><span>  postId</span><span>:</span><span> </span><span>1001</span></span>
<span data-line=""><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>  createdAt</span><span>:</span><span> </span><span>'</span><span>2025-04-13T02:04:42.668Z</span><span>'</span><span>,</span></span>
<span data-line=""><span>  likedById</span><span>:</span><span> </span><span>456</span><span>,</span></span>
<span data-line=""><span>  postId</span><span>:</span><span> </span><span>1001</span></span>
<span data-line=""><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>  createdAt</span><span>:</span><span> </span><span>'</span><span>2025-04-13T02:04:43.668Z</span><span>'</span><span>,</span></span>
<span data-line=""><span>  likedById</span><span>:</span><span> </span><span>789</span><span>,</span></span>
<span data-line=""><span>  postId</span><span>:</span><span> </span><span>1002</span></span>
<span data-line=""><span>},</span><span> </span><span>/* ... */</span><span>]</span></span></code></pre></div>
<p>However, what we want to <em>display</em> to the user is different.</p>
<p>What we want to display is the <em>number of Likes</em> for that Post, whether the <em>user has already liked it</em>, and the names of <em>their friends who also liked it</em>. For example, the Like button could appear pressed in (which means that you already liked this post) and say “You, Alice, and 13 others liked this.” Or “Alice, Bob, and 12 others liked this.”</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> LikeButtonProps </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>  totalLikeCount</span><span>:</span><span> </span><span>number</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser</span><span>:</span><span> </span><span>boolean</span><span>,</span></span>
<span data-line=""><span>  friendLikes</span><span>:</span><span> </span><span>string</span><span>[]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Let’s call this kind of data a “ViewModel”.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> ViewModel </span><span>=</span><span> </span><span>LikeButtonProps</span><span>;</span></span></code></pre></div>
<p>A ViewModel represents data in a way that is directly consumable by the UI (i.e the <em>view</em>). It is often significantly different from the raw Model. In our example:</p>
<ul>
<li>ViewModel’s <code>totalLikeCount</code> is aggregated from individual <code>Like</code> models.</li>
<li>ViewModel’s <code>isLikedByUser</code> is personalized and depends on the user.</li>
<li>ViewModel’s <code>friendLikes</code> is both aggregated and personalized. To calculate it, you’d have to takes the Likes for this post, filter them down to likes from friends, and get the first few friends’ names (which are likely stored in a different table).</li>
</ul>
<p>Clearly, Models will need to turn into ViewModels at some point. The question is <em>where</em> and <em>when</em> this happens in the code, and how that code evolves over time.</p>
<hr>
<h3 id="rest-and-json-api"><a target="_self" href="#rest-and-json-api">REST and JSON API</a></h3>
<p>The most common way to solve this problem is to expose some kind of a JSON API that the client can hit to assemble the ViewModel. There are different ways to design such an API, but the most common way is what’s usually known as REST.</p>
<p>The typical way to approach REST (<a target="_blank" href="https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/">let’s say we’ve never read this article</a>) is to pick some “Resources”—such as a Post, or a Like—and provide JSON API endpoints that list, create, update, and delete such Resources. Naturally, REST does not specify anything about how you should <em>shape</em> these Resources so there’s a lot of flexibility.</p>
<p>Often, you might start by returning the shape of the Model:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>// GET /api/post/123</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>  title: </span><span>'</span><span>My Post</span><span>'</span><span>,</span></span>
<span data-line=""><span>  content: </span><span>'</span><span>Hello world...</span><span>'</span><span>,</span></span>
<span data-line=""><span>  authorId: </span><span>123</span><span>,</span></span>
<span data-line=""><span>  createdAt: </span><span>'</span><span>2025-04-13T02:04:40.668Z</span><span>'</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>So far so good. But how would you incorporate Likes into this? Maybe <code>totalLikeCount</code> and <code>isLikedByUser</code> could be a part of the Post Resource:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>// GET /api/post/123</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>  title: </span><span>'</span><span>My Post</span><span>'</span><span>,</span></span>
<span data-line=""><span>  content: </span><span>'</span><span>Hello world...</span><span>'</span><span>,</span></span>
<span data-line=""><span>  authorId: </span><span>123</span><span>,</span></span>
<span data-line=""><span>  createdAt: </span><span>'</span><span>2025-04-13T02:04:40.668Z</span><span>'</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  totalLikeCount: </span><span>13</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  isLikedByUser: </span><span>true</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Now, should <code>friendLikes</code> also go there? We need this information on the client.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>// GET /api/post/123</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>  title: </span><span>'</span><span>My Post</span><span>'</span><span>,</span></span>
<span data-line=""><span>  authorId: </span><span>123</span><span>,</span></span>
<span data-line=""><span>  content: </span><span>'</span><span>Hello world...</span><span>'</span><span>,</span></span>
<span data-line=""><span>  createdAt: </span><span>'</span><span>2025-04-13T02:04:40.668Z</span><span>'</span><span>,</span></span>
<span data-line=""><span>  totalLikeCount: </span><span>13</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser: </span><span>true</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  friendLikes: </span><span>[</span><span>'</span><span>Alice</span><span>'</span><span>,</span><span> </span><span>'</span><span>Bob</span><span>'</span><span>]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Or are we starting to abuse the notion of a Post by adding too much stuff to it? Okay, how about this, maybe we could offer a separate endpoint for a Post’s Likes:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line="" data-highlighted-line=""><span>// GET /api/post/123/likes</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>  totalCount: </span><span>13</span><span>,</span></span>
<span data-line=""><span>  likes: </span><span>[{</span></span>
<span data-line=""><span>    createdAt</span><span>:</span><span> </span><span>'</span><span>2025-04-13T02:04:41.668Z</span><span>'</span><span>,</span></span>
<span data-line=""><span>    likedById</span><span>:</span><span> </span><span>123</span><span>,</span></span>
<span data-line=""><span>  </span><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>    createdAt</span><span>:</span><span> </span><span>'</span><span>2025-04-13T02:04:42.668Z</span><span>'</span><span>,</span></span>
<span data-line=""><span>    likedById</span><span>:</span><span> </span><span>768</span><span>,</span></span>
<span data-line=""><span>  </span><span>},</span><span> </span><span>/* ... */</span><span>]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>So a Post’s Like becomes its own “Resource”.</p>
<p>That’s nice in theory but we’re going to need to know the likers’ names, and we don’t want to make a request for each Like. So we need to “expand” the users here:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>// GET /api/post/123/likes</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>  totalCount: </span><span>13</span><span>,</span></span>
<span data-line=""><span>  likes: </span><span>[{</span></span>
<span data-line=""><span>    createdAt</span><span>:</span><span> </span><span>'</span><span>2025-04-13T02:04:41.668Z</span><span>'</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    likedBy</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      id</span><span>:</span><span> </span><span>123</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      firstName</span><span>:</span><span> </span><span>'</span><span>Alice</span><span>'</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      lastName</span><span>:</span><span> </span><span>'</span><span>Lovelace</span><span>'</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>    createdAt</span><span>:</span><span> </span><span>'</span><span>2025-04-13T02:04:42.668Z</span><span>'</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    likedBy</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      id</span><span>:</span><span> </span><span>768</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      firstName</span><span>:</span><span> </span><span>'</span><span>Bob</span><span>'</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      lastName</span><span>:</span><span> </span><span>'</span><span>Babbage</span><span>'</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>}]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>We also “forgot” which of these Likes are from friends. Should we solve this by having a separate <code>/api/post/123/friend-likes</code> endpoint? Or should we order by friends first and include <code>isFriend</code> into the <code>likes</code> array items so we can disambiguate friends from other likes? Or should we add <code>?filter=friends</code>?</p>
<p>Or should we include the friend likes directly into the Post to avoid two API calls?</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>// GET /api/post/123</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>  title: </span><span>'</span><span>My Post</span><span>'</span><span>,</span></span>
<span data-line=""><span>  authorId: </span><span>123</span><span>,</span></span>
<span data-line=""><span>  content: </span><span>'</span><span>Hello world...</span><span>'</span><span>,</span></span>
<span data-line=""><span>  createdAt: </span><span>'</span><span>2025-04-13T02:04:40.668Z</span><span>'</span><span>,</span></span>
<span data-line=""><span>  totalLikeCount: </span><span>13</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser: </span><span>true</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  friendLikes: </span><span>[{</span></span>
<span data-line="" data-highlighted-line=""><span>    createdAt</span><span>:</span><span> </span><span>'</span><span>2025-04-13T02:04:41.668Z</span><span>'</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    likedBy</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      id</span><span>:</span><span> </span><span>123</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      firstName</span><span>:</span><span> </span><span>'</span><span>Alice</span><span>'</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      lastName</span><span>:</span><span> </span><span>'</span><span>Lovelace</span><span>'</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>},</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    createdAt</span><span>:</span><span> </span><span>'</span><span>2025-04-13T02:04:42.668Z</span><span>'</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    likedBy</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      id</span><span>:</span><span> </span><span>768</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      firstName</span><span>:</span><span> </span><span>'</span><span>Bob</span><span>'</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      lastName</span><span>:</span><span> </span><span>'</span><span>Babbage</span><span>'</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>}]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>This seems useful but what if <code>/api/post/123</code> gets called from other screens that don’t need this information—and you’d rather not slow them down? Maybe there could be an opt-in like <code>/api/post/123?expand=friendLikes</code>?</p>
<p>Anyway, the point I’m trying to make here is not that it’s <em>impossible</em> to design a good REST API. The vast majority of apps I’ve seen works this way so it’s at the very least doable. But anyone who designed one and then worked on it for more than a few months knows the drill. <em>Evolving REST endpoints is a pain in the ass.</em></p>
<p>It usually goes like this:</p>
<ol>
<li>Initially, you have to decide how to structure the JSON output. None of the options are <em>cleary better</em> than the rest; mostly you’re just guessing how the app will evolve.</li>
<li>The initial decisions tend to settle down after a few back-and-forth iterations… until the next UI redesign which causes ViewModels to have slightly different shapes. The already existing REST endpoints don’t quite cover the new needs.</li>
<li>It’s possible to add new REST API endpoints, but at some point you’re not really “supposed to” add more because you already defined all the possible Resources. For example, if <code>/posts/123</code> exists, you likely won’t add another “get post” API.</li>
<li>Now you’re running into issues with calculating and sending either <em>not enough</em> or <em>too much</em> data. You either aggressively “expand” fields in the existing Resources or come up with an elaborate set of conventions for doing it on-demand.</li>
<li>Some ViewModels are only needed by a subset of screens but they’re always included in the response because that’s easier than making them configurable.</li>
<li>Some screens resort to cobbling their ViewModels together from multiple API calls because no single response contains all the necessary information anymore.</li>
<li>Then the design and the functionality of your product changes again. <em>Repeat.</em></li>
</ol>
<p>There’s clearly some fundamental tension here, but what is causing it?</p>
<p>First, note how the shape of the ViewModels is determined by the UI. It’s not a reflection of some platonic idea of a Like; rather, it’s dictated by the design. We want to show “You, Ann, and 13 others liked this”, <em>therefore</em> we need these fields:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> LikeButtonProps </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>  totalLikeCount</span><span>:</span><span> </span><span>number</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser</span><span>:</span><span> </span><span>boolean</span><span>,</span></span>
<span data-line=""><span>  friendLikes</span><span>:</span><span> </span><span>string</span><span>[]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>If this screen’s design or functionality changes (for example, if you want to show the avatars of your friends who liked the post), the ViewModel will change as well:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> LikeButtonProps </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>  totalLikeCount</span><span>:</span><span> </span><span>number</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser</span><span>:</span><span> </span><span>boolean</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  friendLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    firstName</span><span>:</span><span> </span><span>string</span></span>
<span data-line="" data-highlighted-line=""><span>    avatar</span><span>:</span><span> </span><span>string</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>}[]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>But here’s the rub.</p>
<p>REST (or, rather, how REST is broadly used) encourages you to think in terms of Resources rather than Models <em>or</em> ViewModels. At first, your Resources start out as mirroring Models. But a single Model rarely has enough data for a screen, so you develop ad-hoc conventions for nesting Models in a Resource. However, including <em>all</em> the relevant Models (e.g. all Likes of a Post) is often impossible or impractical, so you start adding ViewModel-ish fields like <code>friendLikes</code> to your Resources.</p>
<p>But putting ViewModels in Resources also doesn’t work very well. ViewModels are not abstract concepts like “a post”; each ViewModel describes a <em>specific piece of UI</em>. As a result, the shape of your “Post” Resource grows to encompass the needs of every screen displaying a post. But those needs also <em>change over time,</em> so the “Post” Resource’s shape is at best a compromise between what different screens need now, and at worst a fossilized record of everything they’ve ever needed in the past.</p>
<p>Let me put this more bluntly:</p>
<p><strong>REST Resources don’t have a firm grounding in the reality.</strong> Their shapes are not sufficiently constrained—we’re making up concepts mostly out of thin air. Unlike Models, they’re not grounded in the reality of how the data is stored. And unlike ViewModels, they’re not grounded in the reality of how the data is presented. Unfortunately, nudging them in either direction only makes things worse.</p>
<p>If you keep REST Resources close to the Models, you’ll hurt the user experience. Now things that could be fetched in a single request would require a couple or, god forbid, N calls. This is especially noticeable in products from companies where the backend team “hands off” a REST API to the frontend team and takes no feedback. The API may look simple and elegant but it is completely impractical to consume.</p>
<p>On the other hand, if you nudge REST Resources to stay closer to the ViewModels, you’re hurting maintainability. ViewModels are fickle! Most ViewModels are going to change the next time the corresponding piece of UI is redesigned. But changing the shape of REST Resources is hard—the same Resources are being fetched by many screens. As a result, their shape gradually drifts away from the needs of the current ViewModels, and becomes difficult to evolve. There’s a reason the backend teams often resist adding UI-specific fields to the response: they’ll likely get stale!</p>
<p>This doesn’t necessarily mean that REST itself, as it’s broadly understood, is broken. It can be very nice to use when the Resources are well-defined and their fields are well-chosen. But this often goes against the client’s needs, which is to get all the data <em>for a particular screen</em>. There’s something missing in the middle.</p>
<p>We need a translation layer.</p>
<hr>
<h3 id="api-for-viewmodels"><a target="_self" href="#api-for-viewmodels">API for ViewModels</a></h3>
<p>There is a way to resolve this tension.</p>
<p>You have some latitude with how exactly you could approach it but the main idea is that your client should be able to request <em>all data for a specific screen at once</em>.</p>
<p>It’s such a simple idea!</p>
<p>Instead of requesting “canonical” REST Resources from the client such as:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="bash" data-theme="default"><code data-language="bash" data-theme="default"><span data-line=""><span>GET</span><span> </span><span>/data/post/123</span><span>       </span><span># Get Post Resource</span></span>
<span data-line=""><span>GET</span><span> </span><span>/data/post/123/likes</span><span> </span><span># Get Post Likes Resource</span></span></code></pre></div>
<p>you request a ViewModel for <em>a specific screen</em> (i.e. a route):</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="bash" data-theme="default"><code data-language="bash" data-theme="default"><span data-line=""><span>GET</span><span> </span><span>/screens/post-details/123</span><span> </span><span># Get ViewModel for the PostDetails screen</span></span></code></pre></div>
<p>This data would include <em>everything</em> that screen needs.</p>
<p>The difference is subtle but profound. You’re no longer trying to define a universal canonical shape of a <em>Post</em>. Rather, you send whatever data the <em>PostDetails screen</em> needs in order to display its components <em>today</em>. If the PostDetails screen gets deleted, this endpoint gets deleted too. If a different screen wants to display some related information (for example, a PostLikedBy popup), it will gets its own route:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="bash" data-theme="default"><code data-language="bash" data-theme="default"><span data-line=""><span>GET</span><span> </span><span>/screens/post-details/123</span><span> </span><span># Get ViewModel for the PostDetails screen</span></span>
<span data-line="" data-highlighted-line=""><span>GET</span><span> </span><span>/screens/post-liked-by/123</span><span> </span><span># Get ViewModel for the PostLikedBy screen</span></span></code></pre></div>
<p>Okay, but how does this help?</p>
<p>This avoids the trap of “ungrounded” abstraction. The ViewModel interface for every screen precisely specifies the shape of the server response. If you need to change it or fine-tune it, you can do that without affecting any other screens.</p>
<p>For example, a <code>PostDetails</code> screen ViewModel might look like this:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> PostDetailsViewModel </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>  postTitle</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>  postContent</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>  postAuthor</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>    name</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>    avatar</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>    id</span><span>:</span><span> </span><span>number</span></span>
<span data-line=""><span>  </span><span>},</span></span>
<span data-line=""><span>  friendLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>    totalLikeCount</span><span>:</span><span> </span><span>number</span><span>,</span></span>
<span data-line=""><span>    isLikedByUser</span><span>:</span><span> </span><span>boolean</span><span>,</span></span>
<span data-line=""><span>    friendLikes</span><span>:</span><span> </span><span>string</span><span>[]</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>};</span></span></code></pre></div>
<p>So that’s what the server would return for <code>/screens/post-details/123</code>. Later, if you want to display avatars of friend likes, you’d just add it to <em>that</em> ViewModel:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> PostDetailsViewModel </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>  postTitle</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>  postContent</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>  postAuthor</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>    name</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>    avatar</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>    id</span><span>:</span><span> </span><span>number</span></span>
<span data-line=""><span>  </span><span>},</span></span>
<span data-line=""><span>  friendLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>    totalLikeCount</span><span>:</span><span> </span><span>number</span><span>,</span></span>
<span data-line=""><span>    isLikedByUser</span><span>:</span><span> </span><span>boolean</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    friendLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      firstName</span><span>:</span><span> </span><span>string</span></span>
<span data-line="" data-highlighted-line=""><span>      avatar</span><span>:</span><span> </span><span>string</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}[]</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Note that you’d only have to update <em>that screen’s endpoint</em>. You’re no longer forced to balance what one screen needs with what another screen needs. There are no questions like “which Resource does this field belong to?”, or whether it should be “expanded”. If some screen needs more data than others, you can just include more data in <em>that</em> screen’s response—it doesn’t have to be generic or configurable. <strong>The shape of the server response is exactly determined by each screen’s needs.</strong></p>
<p>This <em>does</em> solve the stated problems with REST.</p>
<p>It also introduces a few novel questions:</p>
<ol>
<li>There’s going to be <em>a lot</em> more endpoints than with REST Resources—an endpoint per screen. How will these endpoints be structured and kept maintainable?</li>
<li>How do you reuse code between the endpoints? Presumably there would be a lot of duplicated data access and other business logic between those endpoints.</li>
<li>How do you convince the backend team to pivot from their REST APIs to this?</li>
</ol>
<p>The last question is probably the first we need to resolve. The backend team will likely have very warranted reservations about this approach. At the very least, if this approach proves terrible, it would be good to have a way to migrate back.</p>
<p>Luckily, there’s no need to throw anything away.</p>
<hr>
<h3 id="backend-for-frontend"><a target="_self" href="#backend-for-frontend">Backend For Frontend</a></h3>
<p>Instead or <em>replacing</em> your existing REST API, you can add a new <em>layer</em> in front of it:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line="" data-highlighted-line=""><span>// You're adding new screen-specific endpoints...</span></span>
<span data-line="" data-highlighted-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>// ...which call your existing REST API here</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>fetch</span><span>(</span><span>`/api/post/</span><span>${</span><span>postId</span><span>}</span><span>`</span><span>).</span><span>then</span><span>(</span><span>r </span><span>=&gt;</span><span> </span><span>r</span><span>.</span><span>json</span><span>()),</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>fetch</span><span>(</span><span>`/api/post/</span><span>${</span><span>postId</span><span>}</span><span>/friend-likes`</span><span>).</span><span>then</span><span>(</span><span>r </span><span>=&gt;</span><span> </span><span>r</span><span>.</span><span>json</span><span>()),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line=""><span>    </span><span>postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>),</span></span>
<span data-line=""><span>    </span><span>postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line=""><span>    </span><span>postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>      totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line=""><span>      isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line=""><span>      friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>This is not a new idea. Such a layer is often called BFF, or <em>Backend for Frontend.</em> In this case, the job of the BFF is to adapt your REST API to returning ViewModels.</p>
<p><strong>If some screen needs more data, a BFF lets you serve more data to it without changing your entire data model. It keeps screen-specific changes scoped. Crucially, it lets you deliver all the data any screen needs in a single roundtrip.</strong></p>
<p>The BFF doesn’t have to be written in the same language as your REST API. For reasons we’ll get into later, it’s advantageous to write BFF in the same language as your frontend code. You can think of it as <em>a piece of the frontend that happens to run on the server</em>. It’s like the frontend’s “ambassador” to the server. It “adapts” the REST responses into the shape that each screen of the frontend UI actually wants.</p>
<p>Although you can get some of the benefits of BFF with client-only per-route loaders like <a target="_blank" href="https://reactrouter.com/start/framework/data-loading#client-data-loading"><code>clientLoader</code> in React Router</a>, there’s a lot you unlock by actually deploying this layer on the server close to where the REST endpoints are deployed.</p>
<p>For example, even if you <em>do</em> have to make several REST API requests serially one after another to load all the necessary data for a screen, the latency between the BFF and your REST API would be much lower than when making multiple serial requests from the client. If your REST API responses are fast on the internal network, you can cut down literal seconds of what used to be client/sever waterfalls without actually parallelizing the (sometimes inevitable) serial calls.</p>
<p>A BFF also lets you apply data transformations <em>before</em> sending data to the client, which can significantly improve performance on low-end client devices. You can even go as far as to cache or persist some computations on the disk, even <em>between</em> different users, since you have access to the disk—and to server caches like Redis. In that sense, a BFF lets a frontend team have <em>their very own little slice of the server</em>.</p>
<p>Importantly, a BFF gives you a way to experiment with alternatives to your REST APIs without affecting the client application. For example, if your REST API has no other consumers, you can turn it into an internal microservice and avoid exposing it to the world. Moreover, you could turn it into a <em>data access layer</em> rather than an HTTP service, and simply <em>import</em> that data access layer in-process from your BFF:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line="" data-highlighted-line=""><span>import</span><span> </span><span>{</span><span> getPost</span><span>,</span><span> getFriendLikes </span><span>}</span><span> </span><span>from</span><span> </span><span>'</span><span>@your-company/data-layer</span><span>'</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postId</span><span> </span><span>=</span><span> req</span><span>.</span><span>params</span><span>.</span><span>postId</span><span>;</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>// Reads from an ORM and applies business logic.</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line=""><span>    </span><span>postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>),</span></span>
<span data-line=""><span>    </span><span>postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line=""><span>    </span><span>postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>      totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line=""><span>      isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line=""><span>      friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>(Of course, this part only works if you can write lower-level backend logic in JS.)</p>
<p>This can help you avoid problems like loading the same information many times from the database (no <code>fetch</code> calls means database reads can be batched). It also lets you “drop down” the abstraction level when needed—for example, to run a fine-tuned stored database procedure that isn’t neatly exposed over the REST API.</p>
<p>There’s a lot to like about the BFF pattern. It solves quite a few problems but it also raises new questions. For example, how do you organize its code? If each screen is essentially its own API method, how do you avoid duplication of code? And how do you keep your BFF synchronized with data requirements of the front-end side?</p>
<p>Let’s try to make some progress on answering those.</p>
<hr>
<h3 id="composable-bff"><a target="_self" href="#composable-bff">Composable BFF</a></h3>
<p>Suppose you’re adding a new <code>PostList</code> screen. It’s going to render <em>an array</em> of <code>&lt;PostDetails&gt;</code> components, each of which needs the same data as before:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> PostDetailsViewModel </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>  postTitle</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>  postContent</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>  postAuthor</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>    name</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>    avatar</span><span>:</span><span> </span><span>string</span><span>,</span></span>
<span data-line=""><span>    id</span><span>:</span><span> </span><span>number</span></span>
<span data-line=""><span>  </span><span>},</span></span>
<span data-line=""><span>  friendLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>    totalLikeCount</span><span>:</span><span> </span><span>number</span><span>,</span></span>
<span data-line=""><span>    isLikedByUser</span><span>:</span><span> </span><span>boolean</span><span>,</span></span>
<span data-line=""><span>    friendLikes</span><span>:</span><span> </span><span>string</span><span>[]</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>};</span></span></code></pre></div>
<p>So the ViewModel for <code>PostList</code> contains an array of <code>PostDetailsViewModel</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> PostListViewModel </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>  posts</span><span>:</span><span> </span><span>PostDetailsViewModel</span><span>[]</span></span>
<span data-line=""><span>};</span></span></code></pre></div>
<p>How would you load the data for <code>PostList</code>?</p>
<p>Your first inclination may be to make a series of requests from the client to the existing <code>/screen/post-details/:postId</code> endpoint which already knows how to prepare a ViewModel for a single post. We just need to call it for every post.</p>
<p>But wait, this defeats the entire purpose of the BFF! Making many requests for a single screen is inefficient and is precisely the kind of compromise that we’ve been trying to avoid. <strong>Instead, we’ll add a new BFF endpoint for the new screen.</strong></p>
<p>The new endpoint might initially look like this:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>import</span><span> </span><span>{</span><span> getPost</span><span>,</span><span> getFriendLikes</span><span>,</span><span> getRecentPostIds </span><span>}</span><span> </span><span>from</span><span> </span><span>'</span><span>@your-company/data-layer</span><span>'</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postId</span><span> </span><span>=</span><span> req</span><span>.</span><span>params</span><span>.</span><span>postId</span><span>;</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line=""><span>    </span><span>postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>),</span></span>
<span data-line=""><span>    </span><span>postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line=""><span>    </span><span>postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>      totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line=""><span>      isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line=""><span>      friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span>
<span data-line=""> </span>
<span data-line="" data-highlighted-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-list</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>// Grab the recent post IDs</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>const </span><span>postIds</span><span> </span><span>=</span><span> await </span><span>getRecentPostIds</span><span>();</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>// For each post ID, load the data in parallel</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>posts</span><span>:</span><span> </span><span>await</span><span> </span><span>Promise</span><span>.</span><span>all</span><span>(</span><span>postIds</span><span>.</span><span>map</span><span>(</span><span>async</span><span> postId </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>]);</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>const </span><span>postDetailsViewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>          totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>          isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>          friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>};</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>return</span><span> postDetailsViewModel</span><span>;</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}))</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>};</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line="" data-highlighted-line=""><span>});</span></span></code></pre></div>
<p>However, note that there’s significant code duplication between the endpoints:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>import</span><span> </span><span>{</span><span> getPost</span><span>,</span><span> getFriendLikes</span><span>,</span><span> getRecentPostIds </span><span>}</span><span> </span><span>from</span><span> </span><span>'</span><span>@your-company/data-layer</span><span>'</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postId</span><span> </span><span>=</span><span> req</span><span>.</span><span>params</span><span>.</span><span>postId</span><span>;</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-list</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postIds</span><span> </span><span>=</span><span> await </span><span>getRecentPostIds</span><span>();</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>posts</span><span>:</span><span> </span><span>await</span><span> </span><span>Promise</span><span>.</span><span>all</span><span>(</span><span>postIds</span><span>.</span><span>map</span><span>(</span><span>async</span><span> postId </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>]);</span></span>
<span data-line=""><span>      </span><span>const </span><span>postDetailsViewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>          totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>          isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>          friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>}</span></span>
<span data-line=""><span>      </span><span>};</span></span>
<span data-line=""><span>      </span><span>return</span><span> postDetailsViewModel</span><span>;</span></span>
<span data-line=""><span>    </span><span>}))</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>It’s almost like there is a notion of “<code>PostDetails</code> ViewModel” begging to be extracted. This should not be surprising—both screens render the same <code>&lt;PostDetails&gt;</code> component, so they need similar code to load the data for it.</p>
<hr>

<p>Let’s extract a <code>PostDetailsViewModel</code> function:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>import</span><span> </span><span>{</span><span> getPost</span><span>,</span><span> getFriendLikes</span><span>,</span><span> getRecentPostIds </span><span>}</span><span> </span><span>from</span><span> </span><span>'</span><span>@your-company/data-layer</span><span>'</span><span>;</span></span>
<span data-line=""> </span>
<span data-line="" data-highlighted-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{ postId }</span><span>)</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>]);</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>    postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>};</span></span>
<span data-line="" data-highlighted-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postId</span><span> </span><span>=</span><span> req</span><span>.</span><span>params</span><span>.</span><span>postId</span><span>;</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> await </span><span>PostDetailsViewModel</span><span>({</span><span> </span><span>postId </span><span>});</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-list</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postIds</span><span> </span><span>=</span><span> await </span><span>getRecentPostIds</span><span>();</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>posts</span><span>:</span><span> </span><span>await</span><span> </span><span>Promise</span><span>.</span><span>all</span><span>(</span><span>postIds</span><span>.</span><span>map</span><span>(</span><span>postId </span><span>=&gt;</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>PostDetailsViewModel</span><span>({</span><span> postId </span><span>})</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>))</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>This makes our BFF endpoints significantly simpler.</p>
<p>In fact, we can go a bit further. Look at this part of <code>PostDetailsViewModel</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{ postId }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line=""><span>    postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line=""><span>    postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>),</span></span>
<span data-line=""><span>    postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>We know that the purpose of the <code>postLikes</code> field is to eventually become props for the <code>LikeButton</code> component—i.e. this field is <code>LikeButton</code>’s ViewModel:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>LikeButton</span><span>(</span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  friendLikes</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>// ...</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>So let’s extract the logic preparing these props into <code>LikeButtonViewModel</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>import</span><span> </span><span>{</span><span> getPost</span><span>,</span><span> getFriendLikes</span><span>,</span><span> getRecentPostIds </span><span>}</span><span> </span><span>from</span><span> </span><span>'</span><span>@your-company/data-layer</span><span>'</span><span>;</span></span>
<span data-line=""> </span>
<span data-line="" data-highlighted-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span><span>{ postId }</span><span>)</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>]);</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{ postId }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>postLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span><span> </span><span>// It's fine to getPost() here again. Our data layer deduplicates calls via an in-memory cache.</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>LikeButtonViewModel</span><span>({</span><span> postId </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line=""><span>    postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line=""><span>    postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>),</span></span>
<span data-line=""><span>    postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    postLikes</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Now we have a tree of functions that load data as JSON—our ViewModels.</p>
<p>Depending on your background, this might remind you of a few other things. It might remind you of composing Redux reducers out of smaller reducers. It might also remind you of composing GraphQL fragments out of smaller fragments. Or it might remind you of composing React components from other React components.</p>
<p>Although the code style is a little verbose now, there is something oddly satisfying in breaking apart a screen’s ViewModel into smaller ViewModels. It feels similar to writing a React component tree, except that we’re decomposing a backend API. It’s like <em>the data has its own shape but it roughly lines up with your React component tree</em>.</p>
<p>Let’s see what happens when the UI needs to evolve.</p>
<hr>
<h3 id="evolving-a-viewmodel"><a target="_self" href="#evolving-a-viewmodel">Evolving a ViewModel</a></h3>
<p>Suppose the UI design changes, and we want to display friends’ avatars too:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>type</span><span> LikeButtonProps </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>  totalLikeCount</span><span>:</span><span> </span><span>number</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser</span><span>:</span><span> </span><span>boolean</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  friendLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    firstName</span><span>:</span><span> </span><span>string</span></span>
<span data-line="" data-highlighted-line=""><span>    avatar</span><span>:</span><span> </span><span>string</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>}[]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Assuming we use TypeScript, we’ll immediately get a type error in the ViewModel:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span></span>
<span data-line=""><span>  { postId } </span><span>:</span><span> </span><span>{</span><span> postId</span><span>:</span><span> </span><span>number</span><span> </span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>)</span><span> </span><span>:</span><span> </span><span>LikeButtonProps</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line=""><span>    totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line=""><span>    isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>// 🔴 Type 'string[]' is not assignable to type '{ firstName: string; avatar: string; }[]'.</span></span>
<span data-line="" data-highlighted-line=""><span>    friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>)</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Let’s fix it:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span></span>
<span data-line=""><span>  { postId } </span><span>:</span><span> </span><span>{</span><span> postId</span><span>:</span><span> </span><span>number</span><span> </span><span>}</span></span>
<span data-line=""><span>)</span><span> </span><span>:</span><span> </span><span>LikeButtonProps</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line=""><span>    totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line=""><span>    isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>({</span></span>
<span data-line="" data-highlighted-line=""><span>      firstName</span><span>:</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      avatar</span><span>:</span><span> </span><span>l</span><span>.</span><span>avatar</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}))</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Now the BFF response for every screen that includes a <code>LikeButton</code> ViewModel will use the new <code>friendLikes</code> format, which is exactly what the <code>LikeButton</code> React component wants. There are no further changes to make—<em>it just works</em>. We <em>know</em> that it works because <code>LikeButtonViewModel</code> is the only place generating props for a <code>LikeButton</code>, no matter which screen we’re requesting from the BFF. (For now assume that this is true; we’re still yet to decide how exactly to tie them.)</p>
<p>I’d like to call attention to the previous fact because this is quite profound.</p>
<p>When was the last time you could clearly trace the correspondence between a deeply nested piece of server code generating a fragment of data, and a deeply nested piece of the client code consuming that data? We’re clearly onto <em>something</em>.</p>
<hr>
<h3 id="viewmodel-parameters"><a target="_self" href="#viewmodel-parameters">ViewModel Parameters</a></h3>
<p>You might have noticed that ViewModel functions can take parameters. Importantly, these parameters can be specified by the “parent” ViewModel functions and plumbed down—so the client doesn’t need to be aware of them.</p>
<p>For example, suppose you wanted to make the Post List page only display the first paragraph of every post’s content. Let’s add a parameter to its ViewModel:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  truncateContent</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>postLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>LikeButtonViewModel</span><span>({</span><span> postId </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line=""><span>    postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>,</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      maxParagraphs</span><span>:</span><span> truncateContent </span><span>?</span><span> </span><span>1</span><span> </span><span>:</span><span> </span><span>undefined</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}),</span></span>
<span data-line=""><span>    postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line=""><span>    postLikes</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postId</span><span> </span><span>=</span><span> req</span><span>.</span><span>params</span><span>.</span><span>postId</span><span>;</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> await </span><span>PostDetailsViewModel</span><span>({</span></span>
<span data-line=""><span>    </span><span>postId</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>truncateContent</span><span>:</span><span> </span><span>false</span></span>
<span data-line=""><span>  </span><span>});</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-list</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postIds</span><span> </span><span>=</span><span> await </span><span>getRecentPostIds</span><span>();</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>posts</span><span>:</span><span> </span><span>await</span><span> </span><span>Promise</span><span>.</span><span>all</span><span>(</span><span>postIds</span><span>.</span><span>map</span><span>(</span><span>postId </span><span>=&gt;</span></span>
<span data-line=""><span>      </span><span>PostDetailsViewModel</span><span>({</span></span>
<span data-line=""><span>        postId</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        truncateContent</span><span>:</span><span> </span><span>true</span></span>
<span data-line=""><span>      </span><span>})</span></span>
<span data-line=""><span>    </span><span>))</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>The JSON response for the <code>post-details</code> endpoint still includes the entire posts, but the <code>post-list</code> JSON endpoint will now only serve their abridged summaries. This is a <em>view model</em> concern, and now we have a natural place to express it in code.</p>
<hr>
<h3 id="plumbing-viewmodel-parameters"><a target="_self" href="#plumbing-viewmodel-parameters">Plumbing ViewModel Parameters</a></h3>
<p>Next, suppose you wanted to include avatars only on the Details screen. Let’s edit <code>LikeButtonViewModel</code> to take and respect an <code>includeAvatars</code> parameter:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line=""><span>    totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line=""><span>    isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line=""><span>    friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>({</span></span>
<span data-line=""><span>      firstName</span><span>:</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      avatar</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>l</span><span>.</span><span>avatar </span><span>:</span><span> </span><span>null</span><span>,</span></span>
<span data-line=""><span>    </span><span>}))</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Now you can plumb it down all the way from the BFF endpoints:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  truncateContent</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>postLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>LikeButtonViewModel</span><span>({</span><span> postId</span><span>,</span><span> includeAvatars </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line=""><span>    postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line=""><span>    postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>,</span><span> </span><span>{</span></span>
<span data-line=""><span>      maxParagraphs</span><span>:</span><span> truncateContent </span><span>?</span><span> </span><span>1</span><span> </span><span>:</span><span> </span><span>undefined</span></span>
<span data-line=""><span>    </span><span>}),</span></span>
<span data-line=""><span>    postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line=""><span>    postLikes</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postId</span><span> </span><span>=</span><span> req</span><span>.</span><span>params</span><span>.</span><span>postId</span><span>;</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> await </span><span>PostDetailsViewModel</span><span>({</span></span>
<span data-line=""><span>    </span><span>postId</span><span>,</span></span>
<span data-line=""><span>    </span><span>truncateContent</span><span>:</span><span> </span><span>false</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>includeAvatars</span><span>:</span><span> </span><span>true</span></span>
<span data-line=""><span>  </span><span>});</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span>
<span data-line=""> </span>
<span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/screen/post-list</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postIds</span><span> </span><span>=</span><span> await </span><span>getRecentPostIds</span><span>();</span></span>
<span data-line=""><span>  </span><span>const </span><span>viewModel</span><span> </span><span>=</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>posts</span><span>:</span><span> </span><span>await</span><span> </span><span>Promise</span><span>.</span><span>all</span><span>(</span><span>postIds</span><span>.</span><span>map</span><span>(</span><span>postId </span><span>=&gt;</span></span>
<span data-line=""><span>      </span><span>PostDetailsViewModel</span><span>({</span></span>
<span data-line=""><span>        postId</span><span>,</span></span>
<span data-line=""><span>        truncateContent</span><span>:</span><span> </span><span>true</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        includeAvatars</span><span>:</span><span> </span><span>false</span></span>
<span data-line=""><span>      </span><span>})</span></span>
<span data-line=""><span>    </span><span>))</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>viewModel</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>Again, the client doesn’t pass ad-hoc parameters like <code>?includeAvatars=true</code> to the server to ensure that the avatars are included in the JSON response. Instead, the <code>post-list</code> BFF endpoint itself <em>knows</em> a Post List shouldn’t include avatars, so it can pass <code>includeAvatars: false</code> to <code>PostDetailsViewModel</code>, which plumbs it down to <code>LikeButtonViewModel</code>. The client code doesn’t need to be aware of the server logic at all—all it cares about is that it gets the props that it wants.</p>
<p>For the case when we <em>do</em> show avatars of friends, we might want to show five rather than two. We can make that change directly in <code>LikeButtonViewModel</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>5</span><span> </span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line=""><span>    totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line=""><span>    isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line=""><span>    friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>({</span></span>
<span data-line=""><span>      firstName</span><span>:</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>,</span></span>
<span data-line=""><span>      avatar</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>l</span><span>.</span><span>avatar </span><span>:</span><span> </span><span>null</span><span>,</span></span>
<span data-line=""><span>    </span><span>}))</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Since the <code>LikeButtonViewModel</code> function exists solely to generate the <code>LikeButton</code> props, adding more presentational logic here feels natural. It’s a <em>view</em> model, right? If another view <em>wanted</em> to show a different number of avatars, it could do that. Unlike with REST, there is no canonical notion of a “post”—so any UI can specify <em>exactly</em> the data it needs, from a screen all the way down to a button.</p>
<p>Our ViewModels evolve in the exact lockstep with the needs of the client.</p>
<hr>
<h3 id="composing-viewmodels"><a target="_self" href="#composing-viewmodels">Composing ViewModels</a></h3>
<p>Something interesting is taking shape. We’ve started to split our BFF endpoints into units of reusable logic, and we’ve found that these units let us encapsulate <em>data loading</em> in a similar way as we’ve been encapsulating the <em>user interface</em>. If you squint at ViewModels, you might even see some parallels to components.</p>
<p>And yet the end result of the ViewModel tree is not a UI tree—it’s just JSON.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>// GET /screen/post-list</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>  </span><span>/* Begin screen/post-list ViewModel */</span></span>
<span data-line=""><span>  posts: </span><span>[{</span></span>
<span data-line=""><span>    </span><span>/* Begin PostDetailsViewModel */</span></span>
<span data-line=""><span>    postTitle</span><span>:</span><span> </span><span>"</span><span>JSX Over The Wire</span><span>"</span><span>,</span></span>
<span data-line=""><span>    postAuthor</span><span>:</span><span> </span><span>"</span><span>Dan</span><span>"</span><span>,</span></span>
<span data-line=""><span>    postContent</span><span>:</span><span> </span><span>"</span><span>Suppose you have an API route that returns some data as JSON.</span><span>"</span><span>,</span></span>
<span data-line=""><span>    postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>      </span><span>/* Begin LikeButtonViewModel */</span></span>
<span data-line=""><span>      totalLikeCount</span><span>:</span><span> </span><span>8</span><span>,</span></span>
<span data-line=""><span>      isLikedByUser</span><span>:</span><span> </span><span>false</span><span>,</span></span>
<span data-line=""><span>      friendLikes</span><span>:</span><span> </span><span>[{</span></span>
<span data-line=""><span>        firstName</span><span>:</span><span> </span><span>"</span><span>Alice</span><span>"</span></span>
<span data-line=""><span>      </span><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>        firstName</span><span>:</span><span> </span><span>"</span><span>Bob</span><span>"</span></span>
<span data-line=""><span>      </span><span>}]</span></span>
<span data-line=""><span>      </span><span>/* End LikeButtonViewModel */</span></span>
<span data-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>    </span><span>/* End PostDetailsViewModel */</span></span>
<span data-line=""><span>  </span><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>/* Begin PostDetailsViewModel */</span></span>
<span data-line=""><span>    postTitle</span><span>:</span><span> </span><span>"</span><span>React for Two Computers</span><span>"</span><span>,</span></span>
<span data-line=""><span>    postAuthor</span><span>:</span><span> </span><span>"</span><span>Dan</span><span>"</span><span>,</span></span>
<span data-line=""><span>    postContent</span><span>:</span><span> </span><span>"</span><span>I’ve been trying to write this post at least a dozen times.</span><span>"</span><span>,</span></span>
<span data-line=""><span>    postLikes</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>      </span><span>/* Begin LikeButtonViewModel */</span></span>
<span data-line=""><span>      totalLikeCount</span><span>:</span><span> </span><span>13</span><span>,</span></span>
<span data-line=""><span>      isLikedByUser</span><span>:</span><span> </span><span>true</span><span>,</span></span>
<span data-line=""><span>      friendLikes</span><span>:</span><span> </span><span>[{</span></span>
<span data-line=""><span>        firstName</span><span>:</span><span> </span><span>"</span><span>Bob</span><span>"</span></span>
<span data-line=""><span>      </span><span>}]</span></span>
<span data-line=""><span>      </span><span>/* End LikeButtonViewModel */</span></span>
<span data-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>    </span><span>/* End PostDetailsViewModel */</span></span>
<span data-line=""><span>  </span><span>}]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>But what should we <em>do</em> with that JSON?</p>
<p>In the end, <em>somehow</em> we want the props generated by <code>LikeButtonViewModel</code> to end up in the <code>LikeButton</code> component. Likewise, <em>somehow</em> we want the props generated by <code>PostDetailsViewModel</code> to get to the <code>PostDetails</code> component. We don’t want to generate a huge ViewModel tree of JSON just to manually plumb every piece of it down exactly to the component that needs that ViewModel’s data.</p>
<p>We’re building two parallel hierarchies in the two worlds.</p>
<p>But these worlds are not connected yet.</p>
<p>Something is missing.</p>
<hr>
<h3 id="recap-json-as-components"><a target="_self" href="#recap-json-as-components">Recap: JSON as Components</a></h3>
<ul>
<li>For any UI, the data begins its life as Models and ends its life as ViewModels. The transformation between Models and ViewModels has to happen somewhere.</li>
<li>The shape of ViewModels is fully dictated by the design of our user interface. This means that they will evolve over time together with our designs. Also, different screens need different ViewModels aggregated from the same underlying Models.</li>
<li>Modeling data from the server as REST Resources creates a tension. If REST Resources are close to raw Models, it may require multiple roundtrips and complex ad-hoc conventions to obtain the necessary ViewModels for a screen. If REST Resources are close to ViewModels, they get too coupled to the initial screens they were designed to represent, and don’t evolve together with the needs of the client.</li>
<li>We can resolve this tension by creating another layer—a <em>Backend For Frontend</em> (BFF). The job of the BFF is to translate the needs of the client (“give me data for this screen”) to REST calls on the backend. A BFF can also evolve beyond being a facade for REST, and instead load data directly using an in-process data layer.</li>
<li>Since the BFF’s job is to return all the data needed for each screen as a piece of JSON, it is natural to split up the data loading logic into reusable units. A screen’s ViewModel can be decomposed into a tree of ViewModels, corresponding to the pieces of server data that different components will want to receive on the client. These individual ViewModels can then be recombined and composed together.</li>
<li>These ViewModel functions can pass information to each other. This lets us customize the JSON we’re sending depending on the screen. Unlike with REST, we’re no longer trying to design canonical shapes like a “a post object” used throughout all responses. At any point, we can diverge and serve different ViewModels for the same information to different screens—whatever <em>they</em> want. These ViewModels are <em>view</em> models. They can—should?—have presentation logic.</li>
<li>We’re beginning to realize that ViewModels form a very similar structure to React components. <em>ViewModels are like components, but for generating JSON</em>. However, we still haven’t figured out how to actually <em>pass</em> the JSON they’re generating on the server to the components that need it on the client. It’s also annoying to deal with two parallel hierarchies. We’re onto something, but we’re missing something.</li>
</ul>
<p>What are we missing?</p>
<hr>
<h2 id="part-2-components-as-json"><a target="_self" href="#part-2-components-as-json">Part 2: Components as JSON</a></h2>
<h3 id="html-ssi-and-cgi"><a target="_self" href="#html-ssi-and-cgi">HTML, SSI, and CGI</a></h3>
<p>JSON, MVVM, BFF, what the hell was that?!</p>
<p>What an incredibly overengineered way to make a website. These React complexity peddlers are <em>so</em> out of touch. If only they knew the <em>history</em>.</p>
<p>Back in <em>my</em> days, we’d just write a bit of HTML and call it a day.</p>
<p>My <code>index.html</code> homepage would look like this:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>html</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>body</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>h1</span><span>&gt;</span><span>Welcome to my blog!</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>h2</span><span>&gt;</span><span>Latest posts</span><span>&lt;/</span><span>h2</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>h3</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>a</span><span> href=</span><span>"</span><span>/jsx-over-the-wire.html</span><span>"</span><span>&gt;</span></span>
<span data-line=""><span>        JSX Over The Wire</span></span>
<span data-line=""><span>      </span><span>&lt;/</span><span>a</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>h3</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>      Suppose you have an API route that returns some data as JSON. [...]</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>h3</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>a</span><span> href=</span><span>"</span><span>/jsx-over-the-wire.html</span><span>"</span><span>&gt;</span></span>
<span data-line=""><span>        React for Two Computers</span></span>
<span data-line=""><span>      </span><span>&lt;/</span><span>a</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>h3</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>      I’ve been trying to write this post at least a dozen times. [...]</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>    ...</span></span>
<span data-line=""><span>  </span><span>&lt;/</span><span>body</span><span>&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>html</span><span>&gt;</span></span></code></pre></div>
<p>Then my <code>jsx-over-the-wire.html</code> post details page would look like this:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>html</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>body</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>h1</span><span>&gt;</span><span>JSX Over The Wire</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>      Suppose you have an API route that returns some data as JSON.</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>    ...</span></span>
<span data-line=""><span>  </span><span>&lt;/</span><span>body</span><span>&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>html</span><span>&gt;</span></span></code></pre></div>
<p>I’d put these files on a box with Apache and that would be it!</p>
<p>Now suppose I wanted to add a footer to all my pages. That couldn’t be easier. First, let me create a file called <code>includes/footer.html</code> with my footer:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>marquee</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>a</span><span> href=</span><span>"</span><span>/</span><span>"</span><span>&gt;</span><span>overreacted</span><span>&lt;/</span><span>a</span><span>&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>marquee</span><span>&gt;</span></span></code></pre></div>
<p>Now I can include my footer on any page with <a target="_blank" href="https://en.wikipedia.org/wiki/Server_Side_Includes">Server-Side Includes  (SSI)</a>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>html</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>body</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>h1</span><span>&gt;</span><span>Welcome to my blog!</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>h2</span><span>&gt;</span><span>Latest posts</span><span>&lt;/</span><span>h2</span><span>&gt;</span></span>
<span data-line=""><span>    ...</span></span>
<span data-line="" data-highlighted-line=""><span>    &lt;!--#include virtual="/includes/footer.html" --&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;/</span><span>body</span><span>&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>html</span><span>&gt;</span></span></code></pre></div>
<p>In fact, I don’t want to copy and paste the first paragraph of each blog post into my <code>index.html</code> file so I might use SSI together with <a target="_blank" href="https://en.wikipedia.org/wiki/Common_Gateway_Interface">CGI</a> to <em>generate</em> my index page:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>html</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>body</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>h1</span><span>&gt;</span><span>Welcome to my blog!</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>h2</span><span>&gt;</span><span>Latest posts</span><span>&lt;/</span><span>h2</span><span>&gt;</span></span>
<span data-line="" data-highlighted-line=""><span>    &lt;!--#include virtual="/cgi-bin/post-details.cgi?jsx-over-the-wire&amp;truncateContent=true" --&gt;</span></span>
<span data-line="" data-highlighted-line=""><span>    &lt;!--#include virtual="/cgi-bin/post-details.cgi?react-for-two-computers&amp;truncateContent=true" --&gt;</span></span>
<span data-line=""><span>    &lt;!--#include virtual="/includes/footer.html" --&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;/</span><span>body</span><span>&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>html</span><span>&gt;</span></span></code></pre></div>
<p>Likewise, the details page will delegate to the same <code>post-details.cgi</code> script:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>html</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>body</span><span>&gt;</span></span>
<span data-line="" data-highlighted-line=""><span>    &lt;!--#include virtual="/cgi-bin/post-details.cgi?jsx-over-the-wire&amp;truncateContent=false" --&gt;</span></span>
<span data-line=""><span>    &lt;!--#include virtual="/includes/footer.html" --&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;/</span><span>body</span><span>&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>html</span><span>&gt;</span></span></code></pre></div>
<p>Finally, the <code>post-details.cgi</code> script might talk to the database:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="bash" data-theme="default"><code data-language="bash" data-theme="default"><span data-line=""><span>#!/bin/sh</span></span>
<span data-line=""><span>echo</span><span> </span><span>"</span><span>Content-type: text/html</span><span>"</span></span>
<span data-line=""><span>echo</span><span> </span><span>""</span></span>
<span data-line=""> </span>
<span data-line=""><span>POST_ID</span><span>=</span><span>"$(</span><span>echo</span><span> "</span><span>$QUERY_STRING</span><span>" | </span><span>cut</span><span> </span><span>-d</span><span>'</span><span>&amp;</span><span>' </span><span>-f1</span><span> | </span><span>tr</span><span> </span><span>-cd</span><span> '</span><span>[:alnum:]._-</span><span>')"</span></span>
<span data-line=""><span>TRUNCATE</span><span>=</span><span>"$(</span><span>echo</span><span> "</span><span>$QUERY_STRING</span><span>" | </span><span>grep</span><span> </span><span>-c</span><span> "</span><span>truncateContent=true</span><span>")"</span></span>
<span data-line=""> </span>
<span data-line=""><span>TITLE</span><span>=</span><span>$(</span><span>mysql</span><span> </span><span>-u</span><span> admin </span><span>-p</span><span>'</span><span>password</span><span>' </span><span>-D</span><span> blog </span><span>--skip-column-names</span><span> </span><span>-e</span><span> </span><span>\</span></span>
<span data-line=""><span>  "</span><span>SELECT title FROM posts WHERE url='</span><span>$POST_ID</span><span>'</span><span>")</span></span>
<span data-line=""><span>CONTENT</span><span>=</span><span>$(</span><span>mysql</span><span> </span><span>-u</span><span> admin </span><span>-p</span><span>'</span><span>password</span><span>' </span><span>-D</span><span> blog </span><span>--skip-column-names</span><span> </span><span>-e</span><span> </span><span>\</span></span>
<span data-line=""><span>  "</span><span>SELECT content FROM posts WHERE url='</span><span>$POST_ID</span><span>'</span><span>")</span></span>
<span data-line=""> </span>
<span data-line=""><span>if</span><span> [ </span><span>"</span><span>$TRUNCATE</span><span>"</span><span> </span><span>=</span><span> </span><span>"</span><span>1</span><span>"</span><span> ]</span><span>;</span><span> </span><span>then</span></span>
<span data-line=""><span>  FIRST_PARAGRAPH</span><span>=</span><span>"$(</span><span>printf</span><span> "</span><span>%s</span><span>" "</span><span>$CONTENT</span><span>" | </span><span>sed</span><span> '</span><span>/^$/q</span><span>')"</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>&lt;h3&gt;&lt;a href=</span><span>\"</span><span>/</span><span>$POST_ID</span><span>.html</span><span>\"</span><span>&gt;</span><span>$TITLE</span><span>&lt;/a&gt;&lt;/h3&gt;</span><span>"</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>&lt;p&gt;</span><span>$FIRST_PARAGRAPH</span><span> [...]&lt;/p&gt;</span><span>"</span></span>
<span data-line=""><span>else</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>&lt;h1&gt;</span><span>$TITLE</span><span>&lt;/h1&gt;</span><span>"</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>&lt;p&gt;</span><span>"</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>$CONTENT</span><span>"</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>&lt;/p&gt;</span><span>"</span></span>
<span data-line=""><span>fi</span></span></code></pre></div>
<p>We’re in the <em>nineties</em>, okay?</p>
<p>So far everything is very simple, even if a bit tedious to write. What we have here is a server that returns <em>all the data necessary for any given screen in one roundtrip</em>.</p>
<p><em>(Hmm…)</em></p>
<p>Of course, different screens may need the same data, and we don’t want to duplicate the logic. Luckily, we can <em>reuse dynamic includes</em> such as <code>post-details.cgi</code>. We can <em>even pass parameters</em> to them like <code>truncateContent</code>.</p>
<p>The most annoying thing about this code is that working in Bash is really not for the faint-hearted (i.e. not for me). Let’s see if we can improve on that part.</p>
<hr>
<h3 id="php-and-xhp"><a target="_self" href="#php-and-xhp">PHP and XHP</a></h3>
<p>We could translate this entire example to old school PHP, which gives us better control flow, function calls, variables, and so on. However, I want to skip ahead.</p>
<p>No, not to the modern PHP MVC frameworks.</p>
<p>I want to skip ahead to <a target="_blank" href="https://codebeforethehorse.tumblr.com/post/3096387855/an-introduction-to-xhp">XHP</a>.</p>
<p>You see, the problem with the early PHP programs was that they relied on string manipulation of HTML. In that sense the PHP version doesn’t improve by much:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="php" data-theme="default"><code data-language="php" data-theme="default"><span data-line=""><span>if</span><span> (</span><span>$truncate</span><span>) {</span></span>
<span data-line=""><span>  </span><span>$splitContent</span><span> </span><span>=</span><span> </span><span>explode</span><span>(</span><span>"</span><span>\n\n</span><span>"</span><span>,</span><span> </span><span>$</span><span>content</span><span>);</span></span>
<span data-line=""><span>  </span><span>$firstParagraph</span><span> </span><span>=</span><span> </span><span>$splitContent</span><span>[</span><span>0</span><span>];</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>&lt;h3&gt;&lt;a href=</span><span>\"</span><span>/</span><span>$postId</span><span>.php</span><span>\"</span><span>&gt;</span><span>$title</span><span>&lt;/a&gt;&lt;/h3&gt;</span><span>"</span><span>;</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>&lt;p&gt;</span><span>$firstParagraph</span><span> [...]&lt;/p&gt;</span><span>"</span><span>;</span></span>
<span data-line=""><span>} </span><span>else</span><span> {</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>&lt;h1&gt;</span><span>$title</span><span>&lt;/h1&gt;</span><span>"</span><span>;</span></span>
<span data-line=""><span>  </span><span>echo</span><span> </span><span>"</span><span>&lt;p&gt;</span><span>$content</span><span>&lt;/p&gt;</span><span>"</span><span>;</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Manipulating HTML as strings leads to code that’s tangled, insecure, and difficult to maintain. Most people in the web development community took that as a signal to embrace <a target="_blank" href="https://guides.rubyonrails.org/layouts_and_rendering.html">Rails-style MVC</a> where all the HTML was safely moved out of the code into separate files called <em>templates</em> (and all the data fetching moved to <em>controllers</em>).</p>
<p>However, that’s not what happened at Facebook.</p>
<p>At Facebook, they had a different idea.</p>
<p>The problem with PHP, said Facebook engineers, was not the manipulation of markup <em>per se</em>. What was bad is <em>unprincipled</em> manipulation of markup, i.e. treating markup as a plain string. Markup has a certain <em>shape</em> to it—stuff contained in other stuff. What we need is a way to build and manipulate that markup without accidentally destroying its contents or interpolating unsafe content into it:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="php" data-theme="default"><code data-language="php" data-theme="default"><span data-line=""><span>if</span><span> (</span><span>$truncate</span><span>) {</span></span>
<span data-line=""><span>  </span><span>$splitContent</span><span> </span><span>=</span><span> </span><span>explode</span><span>(</span><span>"</span><span>\n\n</span><span>"</span><span>,</span><span> </span><span>$</span><span>content</span><span>);</span></span>
<span data-line=""><span>  </span><span>$firstParagraph</span><span> </span><span>=</span><span> </span><span>$splitContent</span><span>[</span><span>0</span><span>];</span></span>
<span data-line=""><span>  </span><span>echo</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>h3</span><span>&gt;&lt;</span><span>a</span><span> </span><span>href</span><span>=</span><span>{</span><span>"</span><span>/{</span><span>$postId</span><span>}.php</span><span>"</span><span>}</span><span>&gt;</span><span>{</span><span>$title</span><span>}</span><span>&lt;/</span><span>a</span><span>&gt;&lt;/</span><span>h3</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>p</span><span>&gt;</span><span>{</span><span>$firstParagraph</span><span>} </span><span>[...]&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>x</span><span>:</span><span>frag</span><span>&gt;;</span></span>
<span data-line=""><span>} </span><span>else</span><span> {</span></span>
<span data-line=""><span>  </span><span>echo</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>h1</span><span>&gt;</span><span>{</span><span>$title</span><span>}</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>p</span><span>&gt;</span><span>{</span><span>$content</span><span>}</span><span>&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>x</span><span>:</span><span>frag</span><span>&gt;;</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>These tags are not strings of HTML! They’re <em>objects</em> than can be <em>turned</em> into HTML.</p>
<p>Now that we’ve moved markup <em>into</em> our code in a maintainable way, we can create our own abstractions. For example, we can define our own <code>&lt;ui:post-details&gt;</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="php" data-theme="default"><code data-language="php" data-theme="default"><span data-line="" data-highlighted-line=""><span>class</span><span> </span><span>:</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>details</span><span> </span><span>extends</span><span> </span><span>:</span><span>x</span><span>:</span><span>element</span><span> {</span></span>
<span data-line=""><span>  </span><span>protected</span><span> </span><span>function</span><span> </span><span>render</span><span>():</span><span> </span><span>XHPRoot</span><span> {</span></span>
<span data-line=""><span>    </span><span>if</span><span> (</span><span>$this</span><span>-&gt;:</span><span>truncateContent</span><span>) {</span></span>
<span data-line=""><span>      </span><span>$splitContent</span><span> </span><span>=</span><span> </span><span>explode</span><span>(</span><span>"</span><span>\n\n</span><span>"</span><span>,</span><span> </span><span>$</span><span>this</span><span>-&gt;:</span><span>content</span><span>);</span></span>
<span data-line=""><span>      </span><span>$firstParagraph</span><span> </span><span>=</span><span> </span><span>$splitContent</span><span>[</span><span>0</span><span>];</span></span>
<span data-line=""><span>      </span><span>return</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span>
<span data-line=""><span>          </span><span>&lt;</span><span>h3</span><span>&gt;&lt;</span><span>a</span><span> </span><span>href</span><span>=</span><span>{</span><span>"</span><span>/{</span><span>$postId</span><span>}.php</span><span>"</span><span>}</span><span>&gt;</span><span>{</span><span>$this</span><span>-&gt;:</span><span>title</span><span>}</span><span>&lt;/</span><span>a</span><span>&gt;&lt;/</span><span>h3</span><span>&gt;</span></span>
<span data-line=""><span>          </span><span>&lt;</span><span>p</span><span>&gt;</span><span>{</span><span>$firstParagraph</span><span>} </span><span>[...]&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;/</span><span>x</span><span>:</span><span>frag</span><span>&gt;;</span></span>
<span data-line=""><span>    } </span><span>else</span><span> {</span></span>
<span data-line=""><span>      </span><span>return</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span>
<span data-line=""><span>          </span><span>&lt;</span><span>h1</span><span>&gt;</span><span>{</span><span>$this</span><span>-&gt;:</span><span>title</span><span>}</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>          </span><span>&lt;</span><span>p</span><span>&gt;</span><span>{</span><span>$this</span><span>-&gt;:</span><span>content</span><span>}</span><span>&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;/</span><span>x</span><span>:</span><span>frag</span><span>&gt;;</span></span>
<span data-line=""><span>    }</span></span>
<span data-line=""><span>  }</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>And then we can render it to the page:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="php" data-theme="default"><code data-language="php" data-theme="default"><span data-line=""><span>echo</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>details</span></span>
<span data-line=""><span>    </span><span>postId</span><span>=</span><span>"</span><span>jsx-over-the-wire</span><span>"</span></span>
<span data-line=""><span>    </span><span>truncateContent</span><span>=</span><span>{true}</span></span>
<span data-line=""><span>    </span><span>title</span><span>=</span><span>"</span><span>JSX Over The Wire</span><span>"</span></span>
<span data-line=""><span>    </span><span>content</span><span>=</span><span>"</span><span>Suppose you have an API route that returns some data...</span><span>"</span></span>
<span data-line=""><span>  </span><span>/&gt;;</span></span></code></pre></div>
<p>In fact, we can build an entire web application this way. Tags render other tags, which render other tags, and so on. By eschewing the Rails-style MVC model, we’ve accidentally discovered a much older principle: function composition.</p>
<p>One downside of XHP is that it isn’t very well-suited to client interactivity. Since XHP executes on a server that emits HTML, the most that you can do relatively seamlessly is to replace <em>parts</em> of an existing markup with the newly generated HTML markup from the server by updating <code>innerHTML</code> of some DOM node.</p>
<p>Replacing <code>innerHTML</code> wasn’t working out particularly well—especially for the highly interative Ads product—which made an engineer (who was not me, by the way) wonder whether it’s possible to run an XHP-style “tags render other tags” paradigm directly on the client computer without losing state between the re-renders. As you might gave guessed, this led to the <a target="_blank" href="https://legacy.reactjs.org/blog/2016/09/28/our-first-50000-stars.html#archeology">invention of JSX and React.</a></p>
<p>Who cares about React though?</p>
<p>We’re here to shill XHP.</p>
<hr>
<h3 id="async-xhp"><a target="_self" href="#async-xhp">Async XHP</a></h3>
<p>Earlier, <code>&lt;ui:post-details&gt;</code> got <code>title</code> and <code>content</code> from the calling code:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="php" data-theme="default"><code data-language="php" data-theme="default"><span data-line=""><span>echo</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>details</span></span>
<span data-line=""><span>    </span><span>postId</span><span>=</span><span>"</span><span>jsx-over-the-wire</span><span>"</span></span>
<span data-line=""><span>    </span><span>truncateContent</span><span>=</span><span>{true}</span></span>
<span data-line=""><span>    </span><span>title</span><span>=</span><span>"</span><span>JSX Over The Wire</span><span>"</span></span>
<span data-line=""><span>    </span><span>content</span><span>=</span><span>"</span><span>Suppose you have an API route that returns some data...</span><span>"</span></span>
<span data-line=""><span>  </span><span>/&gt;;</span></span></code></pre></div>
<p>It was not reading <code>title</code> or <code>content</code> on its own—after all, reading them from a database is (ideally) an <em>asynchronous</em> operation, while XHP tags are synchronous.</p>
<p><em>Were.</em></p>
<p>At some point, engineers at Facebook realized that XHP tags would be a lot more powerful if they could load their own data. <a target="_blank" href="https://hhvm.github.io/xhp-lib/2015/06/01/new-features-in-depth.html#asynchronous-xhp-rendering">Async XHP tags</a> were born:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="php" data-theme="default"><code data-language="php" data-theme="default"><span data-line=""><span>class</span><span> </span><span>:</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>details</span><span> </span><span>extends</span><span> </span><span>:</span><span>x</span><span>:</span><span>element</span><span> {</span></span>
<span data-line=""><span>  </span><span>use</span><span> </span><span>XHPAsync</span><span>;</span></span>
<span data-line=""> </span>
<span data-line="" data-highlighted-line=""><span>  </span><span>protected</span><span> </span><span>async</span><span> </span><span>function</span><span> </span><span>asyncRender</span><span>(</span><span>): Awaitable&lt;XHPRoot&gt; {</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>$post</span><span> </span><span>=</span><span> </span><span>await</span><span> </span><span>loadPost</span><span>(</span><span>$this</span><span>-&gt;:</span><span>postId</span><span>);</span></span>
<span data-line=""><span>    </span><span>$title</span><span> </span><span>=</span><span> </span><span>$post</span><span>-&gt;</span><span>title</span><span>;</span></span>
<span data-line=""><span>    </span><span>$content</span><span> </span><span>=</span><span> </span><span>$post</span><span>-&gt;</span><span>content</span><span>;</span></span>
<span data-line=""><span>    </span><span>// ...</span></span>
<span data-line=""><span>  }</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Now the <code>&lt;ui:post-details&gt;</code> can <em>load its own data</em> based on <code>postId</code> alone:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="php" data-theme="default"><code data-language="php" data-theme="default"><span data-line=""><span>class</span><span> </span><span>:</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>list</span><span> </span><span>extends</span><span> </span><span>:</span><span>x</span><span>:</span><span>element</span><span> {</span></span>
<span data-line=""><span>  </span><span>protected</span><span> </span><span>function</span><span> </span><span>render</span><span>():</span><span> </span><span>XHPRoot</span><span> {</span></span>
<span data-line=""><span>    </span><span>return</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>details</span></span>
<span data-line="" data-highlighted-line=""><span>          </span><span>postId</span><span>=</span><span>"</span><span>jsx-over-the-wire</span><span>"</span></span>
<span data-line=""><span>          </span><span>truncateContent</span><span>=</span><span>{true}</span></span>
<span data-line=""><span>        </span><span>/&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>details</span></span>
<span data-line="" data-highlighted-line=""><span>          </span><span>postId</span><span>=</span><span>"</span><span>react-for-two-computers</span><span>"</span></span>
<span data-line=""><span>          </span><span>truncateContent</span><span>=</span><span>{true}</span></span>
<span data-line=""><span>        </span><span>/&gt;</span></span>
<span data-line=""><span>        </span><span>...</span></span>
<span data-line=""><span>      </span><span>&lt;/</span><span>x</span><span>:</span><span>frag</span><span>&gt;;</span></span>
<span data-line=""><span>  }</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>This approach lets you write the entire UI as <em>asynchronous</em> tags rendering other <em>asynchronous</em> tags—until the final HTML is generated. It’s a powerful way to think about UI and data. It lets you write self-contained components that load their own data, and then plug those components anywhere in the tree with a one-liner. And since XHP tags run on the server, the entire screen is resolved <em>in a single roundtrip</em>.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="php" data-theme="default"><code data-language="php" data-theme="default"><span data-line=""><span>&lt;</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>list</span><span> </span><span>/&gt;</span><span> </span><span>// An entire page of HTML</span></span></code></pre></div>
<p><strong>I need to emphasize this again. Async XHP allowed <em>self-contained components that load their own data</em> — but! — <em>displaying a screen took a single client/server roundtrip.</em> There aren’t many UI frameworks that satisfy both of these points.</strong></p>
<p>If you’re making a similar framework, there’s a few details you should think about:</p>
<ol>
<li>You want the siblings to be resolved in parallel. For example, the two <code>&lt;ui:post-details&gt;</code> above should <code>loadPost</code> around the same time. Async XHP did this.</li>
<li>You also need some way to <em>unblock</em> the rest of the page if a particular branch of the tree is taking too long. Facebook had a <a target="_blank" href="https://engineering.fb.com/2010/06/04/web/bigpipe-pipelining-web-pages-for-high-performance/">BigPipe  “pagelet”</a> system that flushes the tree “in parts” with explicitly designed loading states acting as the seams.</li>
<li>Ideally, you want a data access layer that’s able to batch reads and share an in-memory cache across different parts of the request. This ensures that even if tags deeper in the tree start “fetching” later than their parents, you’re utilizing both CPU and IO well—there are always some tags to render while waiting for the DB.</li>
</ol>
<p>Overall, async XHP was an incredibly productive mental model to work with—as long as your app was not very interactive. Unfortunately, for highly interactive apps, emitting HTML is not enough. You <em>need</em> to be able to navigate, handle mutations, and refresh content without losing the client-side state. Since XHP targeted HTML, it was a poor fit for rich interfaces, and React gradually took over.</p>
<p><strong>Still, as interfaces were being converted to React, there was a noticeable loss in conceptual simplicity. The UI and the <em>data that it needs</em>—two things that are so naturally described together—were being pulled apart into separate codebases.</strong></p>
<p>GraphQL with <a target="_blank" href="https://relay.dev/">Relay</a> were somewhat bridging that gap and contributed some very important innovations, but using them never felt <em>as direct</em> as writing async XHP.</p>
<hr>
<h3 id="native-templates"><a target="_self" href="#native-templates">Native Templates</a></h3>
<p>XHP had an unlikely comeback at Facebook.</p>
<p>The mental model it offered was so productive that people didn’t just want to write web interfaces with it. They also wanted to make <em>native apps</em> with it.</p>
<p>Think about it.</p>
<p>This piece of XHP is an <em>object:</em></p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>h1</span><span>&gt;{</span><span>$this</span><span>-&gt;</span><span>:title</span><span>}&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>p</span><span>&gt;{</span><span>$this</span><span>-&gt;</span><span>:content</span><span>}&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span></code></pre></div>
<p>Yes, it <em>can</em> be turned into a piece of HTML:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>h1</span><span>&gt;</span><span>JSX Over The Wire</span><span>&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>&lt;</span><span>p</span><span>&gt;</span><span>Suppose you have an API route that returns some data as JSON</span><span>&lt;/</span><span>p</span><span>&gt;</span></span></code></pre></div>
<p>But it could also be turned into another representation, such as JSON:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line=""><span>  type: </span><span>'</span><span>x:frag</span><span>'</span><span>,</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    children: </span><span>[{</span></span>
<span data-line=""><span>      type</span><span>:</span><span> </span><span>'</span><span>h1</span><span>'</span><span>,</span></span>
<span data-line=""><span>      props</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>        children</span><span>:</span><span> </span><span>'</span><span>JSX Over The Wire</span><span>'</span></span>
<span data-line=""><span>      </span><span>}</span></span>
<span data-line=""><span>    </span><span>},</span></span>
<span data-line=""><span>    </span><span>{</span></span>
<span data-line=""><span>      type</span><span>:</span><span> </span><span>'</span><span>p</span><span>'</span><span>,</span></span>
<span data-line=""><span>      props</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>        children</span><span>:</span><span> </span><span>'</span><span>Suppose you have an API route that returns some data as JSON</span><span>'</span></span>
<span data-line=""><span>      </span><span>}</span></span>
<span data-line=""><span>    </span><span>}]</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>There’s nothing that <em>actually</em> constrains you to the primitives available in HTML. For example, <code>&lt;ui:post-details&gt;</code> could have been emitting <a target="_blank" href="https://developer.apple.com/documentation/uikit/uitextview">iOS views</a> instead:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>&lt;</span><span>ios</span><span>:</span><span>UITextView</span><span>&gt;{</span><span>$this</span><span>-&gt;</span><span>:title</span><span>}&lt;/</span><span>ios</span><span>:</span><span>UITextView</span><span>&gt;</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>&lt;</span><span>ios</span><span>:</span><span>UITextView</span><span>&gt;{</span><span>$this</span><span>-&gt;</span><span>:content</span><span>}&lt;/</span><span>ios</span><span>:</span><span>UITextView</span><span>&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span></code></pre></div>
<p>These tags could be transported as JSON over the network to a native iOS app that would read that JSON and construct a native iOS view hierarchy from these tags.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line=""><span>  type: </span><span>'</span><span>x:frag</span><span>'</span><span>,</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    children: </span><span>[{</span></span>
<span data-line="" data-highlighted-line=""><span>      type</span><span>:</span><span> </span><span>'</span><span>ios:UITextView</span><span>'</span><span>,</span></span>
<span data-line=""><span>      props</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>        children</span><span>:</span><span> </span><span>'</span><span>JSX Over The Wire</span><span>'</span></span>
<span data-line=""><span>      </span><span>}</span></span>
<span data-line=""><span>    </span><span>},</span></span>
<span data-line=""><span>    </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      type</span><span>:</span><span> </span><span>'</span><span>ios:UITextView</span><span>'</span><span>,</span></span>
<span data-line=""><span>      props</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>        children</span><span>:</span><span> </span><span>'</span><span>Suppose you have an API route that returns some data as JSON</span><span>'</span></span>
<span data-line=""><span>      </span><span>}</span></span>
<span data-line=""><span>    </span><span>}]</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Meanwhile, on the server, you can define your own tags that render those tags:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>class</span><span> :</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>list</span><span> </span><span>extends</span><span> :x:element </span><span>{</span></span>
<span data-line=""><span>  </span><span>protected</span><span> </span><span>function</span><span> </span><span>render</span><span>():</span><span> </span><span>XHPRoot</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>return</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>ui:post-details</span></span>
<span data-line=""><span>          postId=</span><span>"</span><span>jsx-over-the-wire</span><span>"</span></span>
<span data-line=""><span>          truncateContent={</span><span>true</span><span>}</span></span>
<span data-line=""><span>        /&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>ui:post-details</span></span>
<span data-line=""><span>          postId=</span><span>"</span><span>react-for-two-computers</span><span>"</span></span>
<span data-line=""><span>          truncateContent={</span><span>true</span><span>}</span></span>
<span data-line=""><span>        /&gt;</span></span>
<span data-line=""><span>        ...</span></span>
<span data-line=""><span>      </span><span>&lt;/</span><span>x</span><span>:</span><span>frag</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>In other words, you’d have a server endpoint that returns <em>the entire data that any particular screen needs in a single roundtrip</em>. Where the “data” is the native UI.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="php" data-theme="default"><code data-language="php" data-theme="default"><span data-line=""><span>&lt;</span><span>ui</span><span>:</span><span>post</span><span>-</span><span>list</span><span> </span><span>/&gt;</span><span> </span><span>// A screen of iOS components</span></span></code></pre></div>
<p>You might think this wouldn’t work because a native app can’t rely on a backend in the critical path. However, that’s a misunderstanding of the approach. All you need to ensure is that you <em>request more UI</em> in the same situations as <em>when you would make an API call,</em> and not more often. You’ll also want to have a fallback UI (like a spinner) available instantly <em>just like when making an API call.</em> In fact, you can even bundle the JSON for some of the initial screens directly within your app’s binary.</p>
<p>In practice, system components like <code>ios:UITextView</code> are a bit too low-level to be good primitives for this kind of format. You really want to have a good “palette” of highly interactive primitives since you want <em>some</em> interactions to “skip the server” and be entirely local. For example, you might implement an <code>ios:ColorPicker</code> primitive in the native code so that it follows your finger’s movement, but <em>persist</em> the chosen color using a call to the API that will serve you the next screen as JSON.</p>
<p>Also, if you made the primitives platform-agnostic (which Facebook did), you could use the same server codebase to assemble screens for both iOS and Android:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>nt:flexbox</span><span> flex-direction=</span><span>"</span><span>column</span><span>"</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>nt:text</span><span> font-size={</span><span>24</span><span>} font-weight={</span><span>FontWeight</span><span>::</span><span>BOLD</span><span>}&gt;</span></span>
<span data-line=""><span>    </span><span>{</span><span>$this</span><span>-&gt;</span><span>:title</span><span>}</span></span>
<span data-line=""><span>  </span><span>&lt;/</span><span>nt:text</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>nt:text</span><span> font-size={</span><span>18</span><span>}&gt;</span></span>
<span data-line=""><span>    </span><span>{</span><span>$this</span><span>-&gt;</span><span>:content</span><span>}</span></span>
<span data-line=""><span>  </span><span>&lt;/</span><span>nt:text</span><span>&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>nt:flexbox</span><span>&gt;</span></span></code></pre></div>
<p>Okay, returning an entire screen as JSON, has anyone done this before?</p>
<hr>
<h3 id="sdui"><a target="_self" href="#sdui">SDUI</a></h3>
<p>This is not a novel idea.</p>
<p>This is not even a controversial idea.</p>
<p>You’ve heard of HTML, right? This is like HTML, but with <em>your</em> design system. Imagine an API endpoint that returns some UI as JSON. Let’s use the JSX syntax:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/app/profile/:personId</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>person</span><span>,</span><span> </span><span>featureFlags</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>findPerson</span><span>(</span><span>req</span><span>.</span><span>params</span><span>.</span><span>personId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFeatureFlags</span><span>(</span><span>req</span><span>.</span><span>user</span><span>.</span><span>id</span><span>)</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""> </span>
<span data-line=""><span>  </span><span>const </span><span>json</span><span> </span><span>=</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>Page</span><span> title={</span><span>`</span><span>${</span><span>person</span><span>.</span><span>firstName</span><span>}</span><span>'s Profile`</span><span>}&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>Header</span><span>&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>Avatar</span><span> src={</span><span>person</span><span>.</span><span>avatarUrl</span><span>} /&gt;</span></span>
<span data-line=""><span>        </span><span>{</span><span>person</span><span>.</span><span>isPremium </span><span>&amp;&amp;</span><span> </span><span>&lt;</span><span>PremiumBadge</span><span> /&gt;}</span></span>
<span data-line=""><span>      </span><span>&lt;/</span><span>Header</span><span>&gt;</span></span>
<span data-line=""> </span>
<span data-line=""><span>      </span><span>&lt;</span><span>Layout</span><span> columns={</span><span>featureFlags</span><span>.</span><span>includes</span><span>(</span><span>'</span><span>TWO_COL_LAYOUT</span><span>'</span><span>) ? </span><span>2</span><span> : </span><span>1</span><span>}&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>Panel</span><span> title=</span><span>"</span><span>User Info</span><span>"</span><span>&gt;</span></span>
<span data-line=""><span>          </span><span>&lt;</span><span>UserDetails</span><span> user={</span><span>person</span><span>} /&gt;</span></span>
<span data-line=""><span>          </span><span>{</span><span>req</span><span>.</span><span>user</span><span>.</span><span>id </span><span>===</span><span> </span><span>person</span><span>.</span><span>id </span><span>&amp;&amp;</span><span> </span><span>&lt;</span><span>EditButton</span><span> /&gt;}</span></span>
<span data-line=""><span>        </span><span>&lt;/</span><span>Panel</span><span>&gt;</span></span>
<span data-line=""> </span>
<span data-line=""><span>        </span><span>&lt;</span><span>Panel</span><span> title=</span><span>"</span><span>Activity</span><span>"</span><span>&gt;</span></span>
<span data-line=""><span>          </span><span>&lt;</span><span>ActivityFeed</span><span> userId={</span><span>person</span><span>.</span><span>id</span><span>} limit={</span><span>3</span><span>} /&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;/</span><span>Panel</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;/</span><span>Layout</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>Page</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""> </span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>json</span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>But since you’re essentially coding an API endpoint, you can do anything <em>your API</em> can do—check the feature flags, run server-only logic, read from the data layer.</p>
<p>Again, this is not a new idea.</p>
<p>In fact, it’s how many of the top native apps are built. <a target="_blank" href="https://github.com/novitae/igbloks/tree/main/KNOWLEDGES">Instagram does this</a>, <a target="_blank" href="https://medium.com/airbnb-engineering/a-deep-dive-into-airbnbs-server-driven-ui-system-842244c5f5">Airbnb does this</a>, <a target="_blank" href="https://www.reddit.com/r/androiddev/comments/1046xel/comment/j35yr8c/">Uber does this</a>, <a target="_blank" href="https://www.infoq.com/news/2023/09/reddit-feed-server-driven-ui/">Reddit does this</a>, etc. These companies use in-house frameworks that implement this pattern. Many web developers are completely unaware of this pattern which is ironic because the pattern is incredibly “webby”.</p>
<p>In the native sphere, the pattern is known as “SDUI”—<em>“server driven UI”</em>. This sounds fancy but essentially it’s just JSON endpoints that return UI trees:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>// /app/profile/123</span></span>
<span data-line=""><span>{</span></span>
<span data-line=""><span>  type: </span><span>"</span><span>Page</span><span>"</span><span>,</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    title: </span><span>"</span><span>Jae's Profile</span><span>"</span><span>,</span></span>
<span data-line=""><span>    children: </span><span>[{</span></span>
<span data-line=""><span>      type</span><span>:</span><span> </span><span>"</span><span>Header</span><span>"</span><span>,</span></span>
<span data-line=""><span>      props</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>        children</span><span>:</span><span> </span><span>[{</span></span>
<span data-line=""><span>          type</span><span>:</span><span> </span><span>"</span><span>Avatar</span><span>"</span><span>,</span></span>
<span data-line=""><span>          props</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>            src</span><span>:</span><span> </span><span>"</span><span>https://example.com/avatar.jpg</span><span>"</span></span>
<span data-line=""><span>          </span><span>}</span></span>
<span data-line=""><span>        </span><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>          type</span><span>:</span><span> </span><span>"</span><span>PremiumBadge</span><span>"</span><span>,</span></span>
<span data-line=""><span>          props</span><span>:</span><span> </span><span>{},</span></span>
<span data-line=""><span>        </span><span>}]</span></span>
<span data-line=""><span>      </span><span>}</span></span>
<span data-line=""><span>    </span><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>      type</span><span>:</span><span> </span><span>"</span><span>Layout</span><span>"</span><span>,</span></span>
<span data-line=""><span>      props</span><span>:</span><span> </span><span>{</span></span>
<span data-line=""><span>        columns</span><span>:</span><span> </span><span>2</span><span>,</span></span>
<span data-line=""><span>        children</span><span>:</span><span> </span><span>[</span></span>
<span data-line=""><span>          </span><span>// ...</span></span>
<span data-line=""><span>        </span><span>]</span></span>
<span data-line=""><span>      </span><span>}</span></span>
<span data-line=""><span>    </span><span>}]</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Then, on the native side, you have some concrete implementations of those primitives—<code>Page</code>, <code>Header</code>, <code>Avatar</code>, <code>PremiumBadge</code>, <code>Layout</code>, and so on.</p>
<p>Ultimately, this feels like <em>passing props</em> from the server to the client.</p>
<p>So if we ever find ourselves in a situation where we have a bunch of data prepared on the server, and we need to find a good way to pass pieces of that data to a bunch of functions declared on the client, a format like this might turn out to be handy.</p>
<p>Let’s keep that in mind.</p>
<hr>
<h3 id="recap-components-as-json"><a target="_self" href="#recap-components-as-json">Recap: Components as JSON</a></h3>
<ul>
<li>From the beginning of time, making web apps involved responding to request for a specific screen with all the data needed for that screen. (HTML is data, too.)</li>
<li>From the beginning of time, people looked for ways to make the generation of that “data” dynamic, to split it into reusable logic, and to pass parameters to that logic.</li>
<li>In the early days of the web, it was common to compose HTML by string manipulation. Unfortunately, it was easy to mess up and led to many issues.</li>
<li>This led many in the web community to banish markup to templates. But at Facebook, XHP proposed another approach: markup that produces objects.</li>
<li>It turns out that making markup a first-class coding primitive naturally leads to tags “returning” other tags—instead of MVC, we got functional composition.</li>
<li>XHP evolved into Async XHP, which allowed to keep the logic for rendering some UI close to the logic for loading the data it needs. This was extremely powerful.</li>
<li>Unfortunately, producing HTML as the primary output format is a dead end for interactive applications. You can’t “refresh” HTML in-place without blowing away the state, and state is important.</li>
<li>However, nothing actually constraints us to HTML. If tags are objects, they can be sent as JSON. Many of the most successful <em>native</em> apps are built this paradigm. (And if you need HTML, you can always turn JSON <em>into</em> HTML later on.)</li>
<li>Returning a tag of client primitives as a JSON tree is a nice way to represent “passing props” to the client.</li>
</ul>
<hr>
<h2 id="part-3-jsx-over-the-wire"><a target="_self" href="#part-3-jsx-over-the-wire">Part 3: JSX Over The Wire</a></h2>
<h3 id="what-were-building"><a target="_self" href="#what-were-building">What We’re Building</a></h3>
<p>So far, we’ve explored two separates lines of thought:</p>
<ul>
<li>Directly calling REST APIs from the client layer <a href="#rest-and-json-api">ignores the realities</a> of how user interfaces evolve. We can solve this by <a href="#api-for-viewmodels">adding a new backend layer</a> that assembles the data on the server according to what each screen <em>needs</em>. This layer <a href="#extracting-a-viewmodel">can be split into functions</a> that each specify how to load data for a particular <em>part</em> of the screen. Then these functions can be <a href="#composing-viewmodels">composed together</a>. However, we’re not sure how to actually <em>tie</em> those functions to the components whose props they are preparing.</li>
<li>We can also <a href="#html-ssi-and-cgi">start from plain HTML</a> and “server includes”. If we avoid early MVC-ification and instead explore treating markup as objects, we’ll <a href="#php-and-xhp">eventually invent</a> the concept of <a href="#async-xhp">asynchronous tags</a> that load their own data and return more tags. This approach is very powerful because it lets us build self-contained components without causing multiple client/server roundtrips for fetching a single screen. Emitting HTML <em>as the only target format</em> is a dead end, but as proven by many top native applications using this approach, <a href="#native-templates">emitting JSON</a> retains all the benefits. All you need is a <a href="#sdui">set of client-side primitives</a> that can be composed from the server.</li>
</ul>
<p>It turns out that these are two different ways to talk about the same thing. Ultimately, all we want is a system with these five properties:</p>
<h4 id="dans-async-ui-framework-checklist"><a target="_self" href="#dans-async-ui-framework-checklist">Dan’s Async UI Framework Checklist</a></h4>
<ol>
<li>Our system lets us split a user interface into rich, interactive components.</li>
<li>Components should have a <em>direct connection</em> with the logic that specifies how <em>their</em> server data is computed. If a component receives some information from the server, you should be a single Ctrl+Click or “Find All References” away from every place on the server where <em>that particular component’s</em> props are being calculated. It should be straightforward to change which data is received by which component.</li>
<li>There should be a way to make pieces of UI truly self-contained—including their server data dependencies and corresponding server logic. You should be able to nest a piece of UI inside another piece of UI without worrying what data it needs.</li>
<li>A navigation to a new screen should be possible to complete in one client/server roundtrip. Even if you have hundreds of components that each want to load some data, from the client’s perspective, a screen should arrive as a single response. In fact, we’d like our system to <em>stand in the way</em> of creating client/server waterfalls.</li>
<li>We’d like our system to fully support rich interactivity. This means that, even if some parts of it run on the server, it is <em>unacceptable</em> to require full-page refreshes on navigation or after a mutation. In fact, the system should support in-place refreshing of server data directly within an interactive tree. A component should be able to “receive new props” from the server without losing any client state.</li>
</ol>
<p>Do you know any such systems? (Try scoring the frameworks you know.)</p>
<p>If not, let’s invent one right now.</p>
<hr>
<h3 id="viewmodels-revisited"><a target="_self" href="#viewmodels-revisited">ViewModels, Revisited</a></h3>
<p>Let’s get back to <a href="#plumbing-viewmodel-parameters">the last version</a> of <code>LikeButtonViewModel</code> from earlier:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>5</span><span> </span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>    totalLikeCount</span><span>:</span><span> </span><span>post</span><span>.</span><span>totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    isLikedByUser</span><span>:</span><span> </span><span>post</span><span>.</span><span>isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    friendLikes</span><span>:</span><span> </span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l </span><span>=&gt;</span><span> </span><span>({</span></span>
<span data-line="" data-highlighted-line=""><span>      firstName</span><span>:</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      avatar</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>l</span><span>.</span><span>avatar </span><span>:</span><span> </span><span>null</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}))</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>This function is a <em>slice of the backend</em> that prepares the props for the <code>LikeButton</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line=""><span>  totalLikeCount: </span><span>8</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser: </span><span>false</span><span>,</span></span>
<span data-line=""><span>  friendLikes: </span><span>[{</span></span>
<span data-line=""><span>    firstName</span><span>:</span><span> </span><span>'</span><span>Alice</span><span>'</span><span>,</span></span>
<span data-line=""><span>    avatar</span><span>:</span><span> </span><span>'</span><span>https://example.com/alice.jpg</span><span>'</span></span>
<span data-line=""><span>  </span><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>    firstName</span><span>:</span><span> </span><span>'</span><span>Bob</span><span>'</span><span>,</span></span>
<span data-line=""><span>    avatar</span><span>:</span><span> </span><span>'</span><span>https://example.com/bob.jpg</span><span>'</span></span>
<span data-line=""><span>  </span><span>}]</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Eventually we were hoping that the <code>LikeButton</code> will receive these props:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>LikeButton</span><span>(</span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  friendLikes</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>// ...</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>However, we haven’t come up with any mechanism to connect the two sides yet. Who’s gonna pass the JSON returned by the <code>LikeButtonViewModel</code> to the <code>LikeButton</code> component? How do we tie the ViewModels to their components?</p>
<p>What if we took a page out of <a href="#sdui">SDUI</a> and expressed that by returning a <em>tag</em>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>5</span><span> </span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>&lt;</span><span>LikeButton</span></span>
<span data-line=""><span>      totalLikeCount={</span><span>post</span><span>.</span><span>totalLikeCount</span><span>}</span></span>
<span data-line=""><span>      isLikedByUser={</span><span>post</span><span>.</span><span>isLikedByUser</span><span>}</span></span>
<span data-line=""><span>      friendLikes={</span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l</span><span> </span><span>=&gt;</span><span> ({</span></span>
<span data-line=""><span>        </span><span>firstName</span><span>:</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>,</span></span>
<span data-line=""><span>        </span><span>avatar</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>l</span><span>.</span><span>avatar </span><span>:</span><span> </span><span>null</span><span>,</span></span>
<span data-line=""><span>      }))}</span></span>
<span data-line="" data-highlighted-line=""><span>    /&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>As <a href="#sdui">we know</a> from earlier, we can represent this JSX as a tree of JSON. In fact, it’s almost like the original JSON, but now it specifies the receiving component:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  type: </span><span>"</span><span>LikeButton</span><span>"</span><span>,</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    totalLikeCount: </span><span>8</span><span>,</span></span>
<span data-line=""><span>    isLikedByUser: </span><span>false</span><span>,</span></span>
<span data-line=""><span>    friendLikes: </span><span>[{</span></span>
<span data-line=""><span>      firstName</span><span>:</span><span> </span><span>'</span><span>Alice</span><span>'</span><span>,</span></span>
<span data-line=""><span>      avatar</span><span>:</span><span> </span><span>'</span><span>https://example.com/alice.jpg</span><span>'</span></span>
<span data-line=""><span>    </span><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>      firstName</span><span>:</span><span> </span><span>'</span><span>Bob</span><span>'</span><span>,</span></span>
<span data-line=""><span>      avatar</span><span>:</span><span> </span><span>'</span><span>https://example.com/bob.jpg</span><span>'</span></span>
<span data-line=""><span>    </span><span>}]</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Then React on the client would <em>know</em> to pass these props to the <code>LikeButton</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line="" data-highlighted-line=""><span>function</span><span> </span><span>LikeButton</span><span>(</span><span>{</span></span>
<span data-line=""><span>  totalLikeCount</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser</span><span>,</span></span>
<span data-line=""><span>  friendLikes</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>// ...</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>And so we’ve finally stitched the ViewModel and its component together!</p>
<p>We’ve tied the code <em>generating</em> the props with the code <em>consuming</em> those props. Now our ViewModel and our component are a Ctrl+Click away from each other. Since JSX expressions are typechecked, we also get full typechecking for free.</p>
<p>Have a look at the complete picture:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>5</span><span> </span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>&lt;</span><span>LikeButton</span></span>
<span data-line="" data-highlighted-line=""><span>      totalLikeCount={</span><span>post</span><span>.</span><span>totalLikeCount</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>      isLikedByUser={</span><span>post</span><span>.</span><span>isLikedByUser</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>      friendLikes={</span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l</span><span> </span><span>=&gt;</span><span> ({</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>firstName</span><span>:</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>avatar</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>l</span><span>.</span><span>avatar </span><span>:</span><span> </span><span>null</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      }))}</span></span>
<span data-line="" data-highlighted-line=""><span>    /&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line="" data-highlighted-line=""><span>function</span><span> </span><span>LikeButton</span><span>(</span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  totalLikeCount</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  isLikedByUser</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  friendLikes</span></span>
<span data-line="" data-highlighted-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>let </span><span>buttonText</span><span> </span><span>=</span><span> </span><span>'</span><span>Like</span><span>'</span><span>;</span></span>
<span data-line=""><span>  </span><span>if</span><span> </span><span>(</span><span>totalLikeCount </span><span>&gt;</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>// e.g. "Liked by You, Alice, and 13 others"</span></span>
<span data-line=""><span>    buttonText </span><span>=</span><span> </span><span>formatLikeText</span><span>(</span><span>totalLikeCount</span><span>,</span><span> isLikedByUser</span><span>,</span><span> friendLikes</span><span>);</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>button</span><span> className={</span><span>isLikedByUser</span><span> ? </span><span>'</span><span>liked</span><span>'</span><span> : </span><span>''</span><span>}&gt;</span></span>
<span data-line=""><span>      </span><span>{</span><span>buttonText</span><span>}</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>button</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Our ViewModel is just like an <a href="#async-xhp">Async XHP</a> tag, passing some information to our own <code>&lt;LikeButton&gt;</code> primitive that lives on client (just like in <a href="#sdui">SDUI</a>). Together, they represent a self-contained piece of UI that knows how to load its own data.</p>
<p>Let’s do this again with another ViewModel.</p>
<hr>
<h3 id="lets-do-this-again"><a target="_self" href="#lets-do-this-again">Let’s Do This Again</a></h3>
<p>Now let’s revisit the <code>PostDetailsViewModel</code> from <a href="#composing-viewmodels">this section</a>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  truncateContent</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>postLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>LikeButtonViewModel</span><span>({</span><span> postId</span><span>,</span><span> includeAvatars </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>{</span></span>
<span data-line=""><span>    postTitle</span><span>:</span><span> </span><span>post</span><span>.</span><span>title</span><span>,</span></span>
<span data-line=""><span>    postContent</span><span>:</span><span> </span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>,</span><span> </span><span>{</span></span>
<span data-line=""><span>      maxParagraphs</span><span>:</span><span> truncateContent </span><span>?</span><span> </span><span>1</span><span> </span><span>:</span><span> </span><span>undefined</span></span>
<span data-line=""><span>    </span><span>}),</span></span>
<span data-line=""><span>    postAuthor</span><span>:</span><span> </span><span>post</span><span>.</span><span>author</span><span>,</span></span>
<span data-line=""><span>    postLikes</span></span>
<span data-line=""><span>  </span><span>};</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>We’ve never explicitly written it down, but suppose that there was a matching <code>PostDetails</code> component that can take that JSON and actually render the post:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>PostDetails</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postTitle</span><span>,</span></span>
<span data-line=""><span>  postContent</span><span>,</span></span>
<span data-line=""><span>  postAuthor</span><span>,</span></span>
<span data-line=""><span>  postLikes</span><span>,</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>// ...</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Let’s connect them together.</p>
<p>First, let’s change <code>PostDetailsViewModel</code> to return a <code>PostDetails</code> <em>tag:</em></p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  truncateContent</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>postLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>    </span><span>LikeButtonViewModel</span><span>({</span><span> postId</span><span>,</span><span> includeAvatars </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>&lt;</span><span>PostDetails</span></span>
<span data-line=""><span>      postTitle={</span><span>post</span><span>.</span><span>title</span><span>}</span></span>
<span data-line=""><span>      postContent={</span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>, {</span></span>
<span data-line=""><span>        </span><span>maxParagraphs</span><span>:</span><span> truncateContent </span><span>?</span><span> </span><span>1</span><span> </span><span>:</span><span> </span><span>undefined</span></span>
<span data-line=""><span>      </span><span>})}</span></span>
<span data-line=""><span>      postAuthor={</span><span>post</span><span>.</span><span>author</span><span>}</span></span>
<span data-line=""><span>      postLikes={</span><span>postLikes</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>    /&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Now the JSON it returns will be wrapped into a <code>PostDetails</code> JSX element:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  type: </span><span>"</span><span>PostDetails</span><span>"</span><span>,</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    postTitle: </span><span>"</span><span>JSX Over The Wire</span><span>"</span><span>,</span></span>
<span data-line=""><span>    postAuthor: </span><span>"</span><span>Dan</span><span>"</span><span>,</span></span>
<span data-line=""><span>    postContent: </span><span>"</span><span>Suppose you have an API route that returns some data as JSON.</span><span>"</span><span>,</span></span>
<span data-line=""><span>    postLikes: </span><span>{</span></span>
<span data-line=""><span>      type: </span><span>"</span><span>LikeButton</span><span>"</span><span>,</span></span>
<span data-line=""><span>      props: </span><span>{</span></span>
<span data-line=""><span>        totalLikeCount: </span><span>8</span><span>,</span></span>
<span data-line=""><span>        isLikedByUser: </span><span>false</span><span>,</span></span>
<span data-line=""><span>        friendLikes: </span><span>[{</span></span>
<span data-line=""><span>          firstName</span><span>:</span><span> </span><span>"</span><span>Alice</span><span>"</span></span>
<span data-line=""><span>        </span><span>},</span><span> </span><span>{</span></span>
<span data-line=""><span>          firstName</span><span>:</span><span> </span><span>"</span><span>Bob</span><span>"</span></span>
<span data-line=""><span>        </span><span>}]</span></span>
<span data-line=""><span>      </span><span>}</span></span>
<span data-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>On the client, React will take these props and pass them to <code>PostDetails</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>PostDetails</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postTitle</span><span>,</span></span>
<span data-line=""><span>  postContent</span><span>,</span></span>
<span data-line=""><span>  postAuthor</span><span>,</span></span>
<span data-line=""><span>  postLikes</span><span>,</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>article</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>h1</span><span>&gt;{</span><span>postTitle</span><span>}&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>div</span><span> dangerouslySetInnerHTML={{ </span><span>__html</span><span>:</span><span> postContent </span><span>}} /&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>p</span><span>&gt;</span><span>by </span><span>{</span><span>postAuthor</span><span>.</span><span>name</span><span>}&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>section</span><span>&gt;</span></span>
<span data-line=""><span>        </span><span>{</span><span>postLikes</span><span>}</span></span>
<span data-line=""><span>      </span><span>&lt;/</span><span>section</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>article</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>And that connects the ViewModel with its component!</p>
<hr>
<h3 id="composing-viewmodels-revisited"><a target="_self" href="#composing-viewmodels-revisited">Composing ViewModels, Revisited</a></h3>
<p>Notice how <code>postLikes</code> in the last example is rendered directly into UI:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>section</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>{</span><span>postLikes</span><span>}</span></span>
<span data-line=""><span>&lt;/</span><span>section</span><span>&gt;</span></span></code></pre></div>
<p>We can do this because it’s the <code>&lt;LikeButton&gt;</code> with its props already preconfigured by <code>LikeButtonViewModel</code>. It was right here in the JSON:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line=""><span>  type: </span><span>"</span><span>PostDetails</span><span>"</span><span>,</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    </span><span>// ...</span></span>
<span data-line=""><span>    postLikes: </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      type: </span><span>"</span><span>LikeButton</span><span>"</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      props: </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>        totalLikeCount: </span><span>8</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>// ...</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>}</span></span>
<span data-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>You might recall that we obtained it by calling <code>LikeButtonViewModel</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  truncateContent</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>post</span><span>,</span><span> </span><span>postLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>    </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>LikeButtonViewModel</span><span>({</span><span> postId</span><span>,</span><span> includeAvatars </span><span>}),</span></span>
<span data-line=""><span>  </span><span>]);</span></span>
<span data-line=""><span>  </span><span>// ...</span></span></code></pre></div>
<p>However, having ViewModels manually call other ViewModels inside <code>Promise.all</code> quickly gets very tedious. So we’ll adopt a new convention. Let’s assume that a ViewModel can embed <em>another</em> ViewModel by returning a JSX tag.</p>
<p>This will let us clean up the code quite a bit:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  truncateContent</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>const </span><span>post</span><span> </span><span>=</span><span> await </span><span>getPost</span><span>(</span><span>postId</span><span>);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>PostDetails</span></span>
<span data-line=""><span>      postTitle={</span><span>post</span><span>.</span><span>title</span><span>}</span></span>
<span data-line=""><span>      postContent={</span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>, {</span></span>
<span data-line=""><span>        </span><span>maxParagraphs</span><span>:</span><span> truncateContent </span><span>?</span><span> </span><span>1</span><span> </span><span>:</span><span> </span><span>undefined</span></span>
<span data-line=""><span>      </span><span>})}</span></span>
<span data-line=""><span>      postAuthor={</span><span>post</span><span>.</span><span>author</span><span>}</span></span>
<span data-line=""><span>      postLikes={</span></span>
<span data-line="" data-highlighted-line=""><span>        &lt;</span><span>LikeButtonViewModel</span></span>
<span data-line="" data-highlighted-line=""><span>          postId={</span><span>postId</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>          includeAvatars={</span><span>includeAvatars</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>        /&gt;</span></span>
<span data-line=""><span>      }</span><span>}</span></span>
<span data-line=""><span>    /&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>After this change, calling <code>PostDetailsViewModel</code> will return “unfinished” JSON:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line=""><span>  type: </span><span>"</span><span>PostDetails</span><span>"</span><span>,</span><span> </span><span>// ✅ This is a component on the client</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    postTitle: </span><span>"</span><span>JSX Over The Wire</span><span>"</span><span>,</span></span>
<span data-line=""><span>    </span><span>// ...</span></span>
<span data-line="" data-highlighted-line=""><span>    postLikes: </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      type: LikeButtonViewModel</span><span>,</span><span> </span><span>// 🟡 We haven't run this ViewModel yet</span></span>
<span data-line="" data-highlighted-line=""><span>      props: </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>        postId: </span><span>"</span><span>jsx-over-the-wire</span><span>"</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        includeAvatars: </span><span>false</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>The code responsible for sending JSON to the client will see that it’s a ViewModel (so it still needs to run!), and will call <code>LikeButtonViewModel</code> to get more JSON:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line=""><span>  type: </span><span>"</span><span>PostDetails</span><span>"</span><span>,</span><span> </span><span>// ✅ This is a component on the client</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    postTitle: </span><span>"</span><span>JSX Over The Wire</span><span>"</span><span>,</span></span>
<span data-line=""><span>    </span><span>// ...</span></span>
<span data-line="" data-highlighted-line=""><span>    postLikes: </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>      type: </span><span>"</span><span>LikeButton</span><span>"</span><span>,</span><span> </span><span>// ✅ This is a component on the client</span></span>
<span data-line="" data-highlighted-line=""><span>      props: </span><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>        totalLikeCount: </span><span>8</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>// ...</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>ViewModels will get recursively unfolded as they each contribute their part of the JSON. This might remind you of how <a href="#php-and-xhp">XHP tags can recursively render other XHP tags</a>. The final JSON will be turned on the client into a React component tree.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>&lt;</span><span>PostDetails</span></span>
<span data-line=""><span>  postTitle=</span><span>"</span><span>JSX Over The Wire</span><span>"</span></span>
<span data-line=""><span>  </span><span>// ...</span></span>
<span data-line=""><span>&gt;</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>LikeButton</span></span>
<span data-line=""><span>    totalLikeCount={</span><span>8</span><span>}</span></span>
<span data-line=""><span>    </span><span>// ...</span></span>
<span data-line=""><span>  /&gt;</span></span>
<span data-line=""><span>&lt;/</span><span>PostDetails</span><span>&gt;</span></span></code></pre></div>
<hr>
<h3 id="the-data-always-flows-down"><a target="_self" href="#the-data-always-flows-down">The Data Always Flows Down</a></h3>
<p>To make the JSX look slightly nicer, we can also rename <code>postLikes</code> to <code>children</code>. This will let us nest <code>LikeButtonViewModel</code> as a JSX child of <code>PostDetails</code>.</p>
<p>Here’s the entire code so far. Notice how the data flows down:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  truncateContent</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>post</span><span> </span><span>=</span><span> await </span><span>getPost</span><span>(</span><span>postId</span><span>);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>PostDetails</span></span>
<span data-line=""><span>      postTitle={</span><span>post</span><span>.</span><span>title</span><span>}</span></span>
<span data-line=""><span>      postContent={</span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>, {</span></span>
<span data-line=""><span>        </span><span>maxParagraphs</span><span>:</span><span> truncateContent </span><span>?</span><span> </span><span>1</span><span> </span><span>:</span><span> </span><span>undefined</span></span>
<span data-line=""><span>      </span><span>})}</span></span>
<span data-line=""><span>      postAuthor={</span><span>post</span><span>.</span><span>author</span><span>}</span></span>
<span data-line=""><span>    &gt;</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>&lt;</span><span>LikeButtonViewModel</span></span>
<span data-line="" data-highlighted-line=""><span>        postId={</span><span>postId</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>        includeAvatars={</span><span>includeAvatars</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>      /&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>PostDetails</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>  </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>  </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>5</span><span> </span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>]);</span></span>
<span data-line=""><span>return</span><span> </span><span>(</span></span>
<span data-line="" data-highlighted-line=""><span>  </span><span>&lt;</span><span>LikeButton</span></span>
<span data-line="" data-highlighted-line=""><span>    totalLikeCount={</span><span>post</span><span>.</span><span>totalLikeCount</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>    isLikedByUser={</span><span>post</span><span>.</span><span>isLikedByUser</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>    friendLikes={</span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l</span><span> </span><span>=&gt;</span><span> ({</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>firstName</span><span>:</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>      </span><span>avatar</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>l</span><span>.</span><span>avatar </span><span>:</span><span> </span><span>null</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>    }))}</span></span>
<span data-line=""><span>  /&gt;</span></span>
<span data-line=""><span>);</span></span></code></pre></div>
<p>All of the server logic above will execute while generating the JSON. This includes both <code>getPost</code>, <code>parseMarkdown</code>, and <code>getFriendLikes</code>. The response will contain the data <em>for the entire screen</em>, satisfying one of our <a href="#dans-async-ui-framework-checklist">key requirements</a>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line=""><span>  type: </span><span>"</span><span>PostDetails</span><span>"</span><span>,</span><span> </span><span>// ✅ This is a component on the client</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    postTitle: </span><span>"</span><span>JSX Over The Wire</span><span>"</span><span>,</span></span>
<span data-line=""><span>    </span><span>// ...</span></span>
<span data-line=""><span>    postLikes: </span><span>{</span></span>
<span data-line=""><span>      type: </span><span>"</span><span>LikeButton</span><span>"</span><span>,</span><span> </span><span>// ✅ This is a component on the client</span></span>
<span data-line=""><span>      props: </span><span>{</span></span>
<span data-line=""><span>        totalLikeCount: </span><span>8</span><span>,</span></span>
<span data-line=""><span>        </span><span>// ...</span></span>
<span data-line=""><span>      </span><span>}</span></span>
<span data-line=""><span>    </span><span>}</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>From the client’s perspective, everything will appear precomputed:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>PostDetails</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postTitle</span><span>,</span></span>
<span data-line=""><span>  postContent</span><span>,</span></span>
<span data-line=""><span>  postAuthor</span><span>,</span></span>
<span data-line="" data-highlighted-line=""><span>  children</span><span>,</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>article</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>h1</span><span>&gt;{</span><span>postTitle</span><span>}&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>div</span><span> dangerouslySetInnerHTML={{ </span><span>__html</span><span>:</span><span> postContent </span><span>}} /&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>p</span><span>&gt;</span><span>by </span><span>{</span><span>postAuthor</span><span>.</span><span>name</span><span>}&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>section</span><span>&gt;</span></span>
<span data-line="" data-highlighted-line=""><span>        </span><span>{</span><span>children</span><span>}</span></span>
<span data-line=""><span>      </span><span>&lt;/</span><span>section</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>article</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>function</span><span> </span><span>LikeButton</span><span>(</span><span>{ totalLikeCount</span><span>,</span><span> isLikedByUser</span><span>,</span><span> friendLikes }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>// ...</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>In particular, by the time <code>PostDetails</code> runs, the <code>children</code> it receives will be the <code>&lt;LikeButton&gt;</code> tag itself with predefined props. The ViewModels configure the props for the client. <strong>This is why on the client, all the props are “already there”.</strong></p>
<p>Spend some time with the code above and make sure it sinks in.</p>
<p>Yes, this <em>is</em> weird.</p>
<p>It is also glorious.</p>
<p>What we found is a way to compose tags across client-server boundaries where the server parts can be freely wrapped in the client parts, the client parts can be freely wrapped in the server parts, and not only do they <em>just work</em>—we’re also performing the data loading for all of the server parts in <em>a single roundtrip.</em></p>
<p>In fact, this approach satisfies every point on <a href="#dans-async-ui-framework-checklist">my checklist.</a></p>
<p>Now let’s tidy it up and clean up some loose ends.</p>
<hr>
<h3 id="a-router-viewmodel"><a target="_self" href="#a-router-viewmodel">A Router ViewModel</a></h3>
<p>As we refactor our ViewModels to use JSX (for the JSX-sceptical readers—the point here isn’t just the syntax, although the syntax is nice—but <a href="https://overreacted.io/react-as-a-ui-runtime/#lazy-evaluation">lazy evaluation</a>), we might realize that we don’t actually need separate Express routes for every screen.</p>
<p>Instead, we might want to do something like this:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/*</span><span>'</span><span>,</span><span> </span><span>async</span><span> </span><span>(</span><span>req</span><span>,</span><span> res</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>url</span><span> </span><span>=</span><span> req</span><span>.</span><span>url</span></span>
<span data-line=""><span>  </span><span>const </span><span>json</span><span> </span><span>=</span><span> await </span><span>toJSON</span><span>(&lt;</span><span>RouterViewModel</span><span> url={</span><span>url</span><span>} /&gt;);</span><span> </span><span>// Evaluate JSX</span></span>
<span data-line=""><span>  </span><span>res</span><span>.</span><span>json</span><span>(</span><span>json</span><span>);</span></span>
<span data-line=""><span>});</span></span></code></pre></div>
<p>Then we’d have a Router ViewModel that matches screens to routes:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>RouterViewModel</span><span>(</span><span>{ url }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>let </span><span>route</span><span>;</span></span>
<span data-line=""><span>  </span><span>if</span><span> </span><span>(</span><span>matchRoute</span><span>(</span><span>url</span><span>,</span><span> </span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>))</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>const {</span><span>postId</span><span>} </span><span>=</span><span> </span><span>parseRoute</span><span>(</span><span>url</span><span>,</span><span> </span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>);</span></span>
<span data-line=""><span>    route </span><span>=</span><span> </span><span>&lt;</span><span>PostDetailsRouteViewModel</span><span> postId={</span><span>postId</span><span>} /&gt;;</span></span>
<span data-line=""><span>  </span><span>}</span><span> </span><span>else</span><span> </span><span>if</span><span> </span><span>(</span><span>matchRoute</span><span>(</span><span>url</span><span>,</span><span> </span><span>'</span><span>/screen/post-list</span><span>'</span><span>))</span><span> </span><span>{</span></span>
<span data-line=""><span>    route </span><span>=</span><span> </span><span>&lt;</span><span>PostDetailsRouteViewModel</span><span> /&gt;;</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>  </span><span>return</span><span> route</span><span>;</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>And then each route would also be a ViewModel:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsRouteViewModel</span><span>(</span><span>{ postId }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>&lt;</span><span>PostDetailsViewModel</span><span> postId={</span><span>postId</span><span>} /&gt;</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostListRouteViewModel</span><span>(</span><span>{ postId }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postIds</span><span> </span><span>=</span><span> await </span><span>getRecentPostIds</span><span>();</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;&gt;</span></span>
<span data-line=""><span>      </span><span>{</span><span>postIds</span><span>.</span><span>map</span><span>(</span><span>postId </span><span>=&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>PostDetailsViewModel</span><span> key={</span><span>postId</span><span>} postId={</span><span>postId</span><span>} /&gt;</span></span>
<span data-line=""><span>      </span><span>)}</span></span>
<span data-line=""><span>    </span><span>&lt;/&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>On the server, it’s ViewModels all the way down.</p>
<p>This might seem superfluous at this point. But moving the routing logic <em>into</em> the ViewModel world would let <code>RouterViewModel</code> wrap its output into a client-side <code>&lt;Router&gt;</code> that could re-request the JSON when you navigate to another screen.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>RouterViewModel</span><span>(</span><span>{ url }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>let </span><span>route</span><span>;</span></span>
<span data-line=""><span>  </span><span>if</span><span> </span><span>(</span><span>matchRoute</span><span>(</span><span>url</span><span>,</span><span> </span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>))</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>const {</span><span>postId</span><span>} </span><span>=</span><span> </span><span>parseRoute</span><span>(</span><span>url</span><span>,</span><span> </span><span>'</span><span>/screen/post-details/:postId</span><span>'</span><span>);</span></span>
<span data-line=""><span>    route </span><span>=</span><span> </span><span>&lt;</span><span>PostDetailsRouteViewModel</span><span> postId={</span><span>postId</span><span>} /&gt;;</span></span>
<span data-line=""><span>  </span><span>}</span><span> </span><span>else</span><span> </span><span>if</span><span> </span><span>(</span><span>matchRoute</span><span>(</span><span>url</span><span>,</span><span> </span><span>'</span><span>/screen/post-list</span><span>'</span><span>))</span><span> </span><span>{</span></span>
<span data-line=""><span>    route </span><span>=</span><span> </span><span>&lt;</span><span>PostDetailsRouteViewModel</span><span> /&gt;;</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>&lt;</span><span>Router</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>{</span><span>route</span><span>}</span></span>
<span data-line="" data-highlighted-line=""><span>    </span><span>&lt;/</span><span>Router</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>function</span><span> </span><span>Router</span><span>(</span><span>{ children }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const [</span><span>tree</span><span>,</span><span> </span><span>setTree</span><span>] </span><span>=</span><span> </span><span>useState</span><span>(</span><span>children</span><span>);</span></span>
<span data-line=""><span>  </span><span>// ... maybe add some logic here later ...</span></span>
<span data-line=""><span>  </span><span>return</span><span> tree</span><span>;</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>This could also let us—if we wanted to—implement a more granular router that can split the path into segments, prepare the ViewModels for each segment in parallel when it receives a request, and even re-request individual segments on navigation. This way, we would no longer have to re-request the entire page whenever we need to go to another screen. Of course, we wouldn’t want to implement this kind of logic <em>within</em> the app. Ideally, a framework would do this.</p>
<hr>
<h3 id="server-and-client-components"><a target="_self" href="#server-and-client-components">Server and Client Components</a></h3>
<p>We can drop the pretense now—we’re describing React Server Components:</p>
<ul>
<li>Our “ViewModels” are Server Components.</li>
<li>Our “Components” are Client Components.</li>
</ul>
<p>There are good reasons to call both of them Components. Although in the first part of this post, Server Components <a href="#composable-bff">began their journey as ViewModels</a>, their lineage can be equally convincingly traced back to <a href="#async-xhp">Async XHP tags</a>. Since they no longer have to return JSON objects, and because in practice you’ll often import the same components from both “sides”, it makes sense to say Components. (In fact, in my incomplete example, all Client Components could be moved to the Server.)</p>
<p>In this post, we haven’t discussed the actual mechanism “connecting” the module systems of Server and Client worlds. This will be a topic for another post, but in short, when you <code>import</code> something from a module with <code>'use client'</code>, you don’t get the real thing—you just get a <em>reference</em> which describes <em>how to load</em> it.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line="" data-highlighted-line=""><span>import</span><span> </span><span>{</span><span> LikeButton </span><span>}</span><span> </span><span>from</span><span> </span><span>'</span><span>./LikeButton</span><span>'</span><span>;</span></span>
<span data-line=""> </span>
<span data-line="" data-highlighted-line=""><span>console</span><span>.</span><span>log</span><span>(</span><span>LikeButton</span><span>);</span></span>
<span data-line="" data-highlighted-line=""><span>// "src/LikeButton.js#LikeButton"</span></span>
<span data-line=""> </span>
<span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>LikeButtonViewModel</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>  </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>  </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>5</span><span> </span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>]);</span></span>
<span data-line=""><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>LikeButton</span></span>
<span data-line=""><span>    totalLikeCount={</span><span>post</span><span>.</span><span>totalLikeCount</span><span>}</span></span>
<span data-line=""><span>    isLikedByUser={</span><span>post</span><span>.</span><span>isLikedByUser</span><span>}</span></span>
<span data-line=""><span>    friendLikes={</span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l</span><span> </span><span>=&gt;</span><span> ({</span></span>
<span data-line=""><span>      </span><span>firstName</span><span>:</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>,</span></span>
<span data-line=""><span>      </span><span>avatar</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>l</span><span>.</span><span>avatar </span><span>:</span><span> </span><span>null</span><span>,</span></span>
<span data-line=""><span>    }))}</span></span>
<span data-line=""><span>  /&gt;</span></span>
<span data-line=""><span>);</span></span></code></pre></div>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line="" data-highlighted-line=""><span>'</span><span>use client</span><span>'</span><span>;</span></span>
<span data-line=""> </span>
<span data-line="" data-highlighted-line=""><span>export</span><span> </span><span>function</span><span> </span><span>LikeButton</span><span>(</span><span>{</span></span>
<span data-line=""><span>  totalLikeCount</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser</span><span>,</span></span>
<span data-line=""><span>  friendLikes</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>let </span><span>buttonText</span><span> </span><span>=</span><span> </span><span>'</span><span>Like</span><span>'</span><span>;</span></span>
<span data-line=""><span>  </span><span>if</span><span> </span><span>(</span><span>totalLikeCount </span><span>&gt;</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>    </span><span>// e.g. "Liked by You, Alice, and 13 others"</span></span>
<span data-line=""><span>    buttonText </span><span>=</span><span> </span><span>formatLikeText</span><span>(</span><span>totalLikeCount</span><span>,</span><span> isLikedByUser</span><span>,</span><span> friendLikes</span><span>);</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>button</span><span> className={</span><span>isLikedByUser</span><span> ? </span><span>'</span><span>liked</span><span>'</span><span> : </span><span>''</span><span>}&gt;</span></span>
<span data-line=""><span>      </span><span>{</span><span>buttonText</span><span>}</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>button</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>So the generated JSON will contain an instruction for loading the <code>LikeButton</code>:</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>{</span></span>
<span data-line="" data-highlighted-line=""><span>  type: </span><span>"</span><span>src/LikeButton.js#LikeButton</span><span>"</span><span>,</span><span> </span><span>// ✅ This is a Client Component</span></span>
<span data-line=""><span>  props: </span><span>{</span></span>
<span data-line=""><span>    totalLikeCount: </span><span>8</span><span>,</span></span>
<span data-line=""><span>    </span><span>// ...</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>React will read that instruction and load it as a <code>&lt;script&gt;</code> tag (or read it from the bundler cache). The format is bundler-specific, which explains why React Server Components requires a bundler integration. (<a target="_blank" href="https://parceljs.org/recipes/rsc/">Parcel just released theirs</a> which isn’t tied to a framework, so it’s perfect if you want to play with how RSC works.)</p>
<p>It’s important that React Server Components emit JSON rather than HTML:</p>
<ul>
<li>Server tree can be refetched in-place without losing state. (React will just do its “virtual DOM” thing, i.e. apply the new props to the already existing components.)</li>
<li>You can target other platforms than web. (Here’s a <a target="_blank" href="https://www.youtube.com/watch?v=djhEgxQf3Kw">cool demo</a>.)</li>
<li>You can still turn that JSON into HTML by executing all the Client Components within it! That’s not <em>required</em> by RSC, but it is definitely doable. That’s why “Client” components may run on the “server”—to output HTML, you’d run both “sides”.</li>
</ul>
<p>To conclude this post, I’ll say the following. I know that React Server Components have not been everyone’s cup of tea. It twists your brain but I think it twists it in a good way. I’ll be posting more about why I’m excited about RSC and will try to distill some of these explanations into shorter posts. But in the meantime, I hope that this post provided some historical background on the <em>motivation</em> behind RSC, <a href="#dans-async-ui-framework-checklist">what it can do</a>, as well as how you could arrive at RSC through your own thinking.</p>
<p>(By the way, if you enjoy more philosophical and whimsical longreads, check out my <a href="https://overreacted.io/react-for-two-computers/">last post</a> which arrives at RSC from the first principles without any history.)</p>
<hr>
<h3 id="recap-jsx-over-the-wire"><a target="_self" href="#recap-jsx-over-the-wire">Recap: JSX Over The Wire</a></h3>
<ul>
<li>React Server Components solve the <a href="#recap-json-as-components">problems outlined in the first part</a> by using <a href="#recap-components-as-json">techniques outlined in the second part</a>. In particular, they let you “componentize” the UI-specific parts of your API and ensure they evolve together with your UI.</li>
<li>This means that there is a direct connection between your components and the server code that prepares their props. You can always “Find All References” to find from where on the server the data is flowing into each of your components.</li>
<li>Because React Server Components emit JSON, they don’t “blow away” the state of the page on refetches. Your components can receive fresh props from the server.</li>
<li>React Server Components emit JSON, but that JSON can <em>also</em> be (optionally) turned to HTML for first render. It’s easy to make HTML out of JSON, but not the inverse.</li>
<li>React Server Components let you create self-contained pieces of UI that take care of preparing their own server data. However, all this preparation occurs within a single roundtrip. Although your code is modular, their execution is coalesced.</li>
<li>RSC is mindbending, I won’t lie. Sometimes you have to think inside-out. But personally, I think RSC is awesome. The tooling is still evolving but I’m excited for its future. I hope to see more technologies thoughtfully blending the boundaries.</li>
</ul>
<hr>
<h3 id="final-code-slightly-edited"><a target="_self" href="#final-code-slightly-edited">Final Code, Slightly Edited</a></h3>
<p>While this isn’t a <em>runnable</em> application (I bet <em>you</em> could get there with <a target="_blank" href="https://nextjs.org/">Next</a> or <a target="_blank" href="https://parceljs.org/recipes/rsc/">Parcel</a>) and might contain mistakes, here’s the complete code example. I’ve done a few renames to drop the “ViewModel” terminology so it looks more idiomatic.</p>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>import</span><span> </span><span>{</span><span> PostDetails</span><span>,</span><span> LikeButton </span><span>}</span><span> </span><span>from</span><span> </span><span>'</span><span>./client</span><span>'</span><span>;</span></span>
<span data-line=""> </span>
<span data-line=""><span>export</span><span> </span><span>async</span><span> </span><span>function</span><span> </span><span>PostDetailsRoute</span><span>(</span><span>{ postId }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>&lt;</span><span>Post</span><span> postId={</span><span>postId</span><span>} /&gt;</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>export</span><span> </span><span>async</span><span> </span><span>function</span><span> </span><span>PostListRoute</span><span>(</span><span>{ postId }</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>postIds</span><span> </span><span>=</span><span> await </span><span>getRecentPostIds</span><span>();</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;&gt;</span></span>
<span data-line=""><span>      </span><span>{</span><span>postIds</span><span>.</span><span>map</span><span>(</span><span>postId </span><span>=&gt;</span></span>
<span data-line=""><span>        </span><span>&lt;</span><span>Post</span><span> key={</span><span>postId</span><span>} postId={</span><span>postId</span><span>} /&gt;</span></span>
<span data-line=""><span>      </span><span>)}</span></span>
<span data-line=""><span>    </span><span>&lt;/&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>Post</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  truncateContent</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>const </span><span>post</span><span> </span><span>=</span><span> await </span><span>getPost</span><span>(</span><span>postId</span><span>);</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>PostLayout</span></span>
<span data-line=""><span>      postTitle={</span><span>post</span><span>.</span><span>title</span><span>}</span></span>
<span data-line=""><span>      postContent={</span><span>parseMarkdown</span><span>(</span><span>post</span><span>.</span><span>content</span><span>, {</span></span>
<span data-line=""><span>        </span><span>maxParagraphs</span><span>:</span><span> truncateContent </span><span>?</span><span> </span><span>1</span><span> </span><span>:</span><span> </span><span>undefined</span></span>
<span data-line=""><span>      </span><span>})}</span></span>
<span data-line=""><span>      postAuthor={</span><span>post</span><span>.</span><span>author</span><span>}</span></span>
<span data-line=""><span>    &gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>PostLikeButton</span></span>
<span data-line=""><span>        postId={</span><span>postId</span><span>}</span></span>
<span data-line=""><span>        includeAvatars={</span><span>includeAvatars</span><span>}</span></span>
<span data-line=""><span>      /&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>PostLayout</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>async</span><span> </span><span>function</span><span> </span><span>PostLikeButton</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postId</span><span>,</span></span>
<span data-line=""><span>  includeAvatars</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>const [</span><span>post</span><span>,</span><span> </span><span>friendLikes</span><span>] </span><span>=</span><span> await </span><span>Promise</span><span>.</span><span>all</span><span>([</span></span>
<span data-line=""><span>  </span><span>getPost</span><span>(</span><span>postId</span><span>),</span></span>
<span data-line=""><span>  </span><span>getFriendLikes</span><span>(</span><span>postId</span><span>,</span><span> </span><span>{</span><span> limit</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>5</span><span> </span><span>:</span><span> </span><span>2</span><span> </span><span>}),</span></span>
<span data-line=""><span>]);</span></span>
<span data-line=""><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>  </span><span>&lt;</span><span>LikeButton</span></span>
<span data-line=""><span>    totalLikeCount={</span><span>post</span><span>.</span><span>totalLikeCount</span><span>}</span></span>
<span data-line=""><span>    isLikedByUser={</span><span>post</span><span>.</span><span>isLikedByUser</span><span>}</span></span>
<span data-line=""><span>    friendLikes={</span><span>friendLikes</span><span>.</span><span>likes</span><span>.</span><span>map</span><span>(</span><span>l</span><span> </span><span>=&gt;</span><span> ({</span></span>
<span data-line=""><span>      </span><span>firstName</span><span>:</span><span> </span><span>l</span><span>.</span><span>firstName</span><span>,</span></span>
<span data-line=""><span>      </span><span>avatar</span><span>:</span><span> includeAvatars </span><span>?</span><span> </span><span>l</span><span>.</span><span>avatar </span><span>:</span><span> </span><span>null</span><span>,</span></span>
<span data-line=""><span>    }))}</span></span>
<span data-line=""><span>  /&gt;</span></span>
<span data-line=""><span>);</span></span></code></pre></div>
<div data-rehype-pretty-code-fragment=""><pre tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default"><span data-line=""><span>export</span><span> </span><span>function</span><span> </span><span>PostLayout</span><span>(</span><span>{</span></span>
<span data-line=""><span>  postTitle</span><span>,</span></span>
<span data-line=""><span>  postContent</span><span>,</span></span>
<span data-line=""><span>  postAuthor</span><span>,</span></span>
<span data-line=""><span>  children</span><span>,</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>article</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>h1</span><span>&gt;{</span><span>postTitle</span><span>}&lt;/</span><span>h1</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>div</span><span> dangerouslySetInnerHTML={{ </span><span>__html</span><span>:</span><span> postContent </span><span>}} /&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>p</span><span>&gt;</span><span>by </span><span>{</span><span>postAuthor</span><span>.</span><span>name</span><span>}&lt;/</span><span>p</span><span>&gt;</span></span>
<span data-line=""><span>      </span><span>&lt;</span><span>section</span><span>&gt;</span></span>
<span data-line=""><span>        </span><span>{</span><span>children</span><span>}</span></span>
<span data-line=""><span>      </span><span>&lt;/</span><span>section</span><span>&gt;</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>article</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span>
<span data-line=""> </span>
<span data-line=""><span>export</span><span> </span><span>function</span><span> </span><span>LikeButton</span><span>(</span><span>{</span></span>
<span data-line=""><span>  totalLikeCount</span><span>,</span></span>
<span data-line=""><span>  isLikedByUser</span><span>,</span></span>
<span data-line=""><span>  friendLikes</span></span>
<span data-line=""><span>}</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>  </span><span>let </span><span>buttonText</span><span> </span><span>=</span><span> </span><span>'</span><span>Like</span><span>'</span><span>;</span></span>
<span data-line=""><span>  </span><span>if</span><span> </span><span>(</span><span>totalLikeCount </span><span>&gt;</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span></span>
<span data-line=""><span>    buttonText </span><span>=</span><span> </span><span>formatLikeText</span><span>(</span><span>totalLikeCount</span><span>,</span><span> isLikedByUser</span><span>,</span><span> friendLikes</span><span>);</span></span>
<span data-line=""><span>  </span><span>}</span></span>
<span data-line=""><span>  </span><span>return</span><span> </span><span>(</span></span>
<span data-line=""><span>    </span><span>&lt;</span><span>button</span><span> className={</span><span>isLikedByUser</span><span> ? </span><span>'</span><span>liked</span><span>'</span><span> : </span><span>''</span><span>}&gt;</span></span>
<span data-line=""><span>      </span><span>{</span><span>buttonText</span><span>}</span></span>
<span data-line=""><span>    </span><span>&lt;/</span><span>button</span><span>&gt;</span></span>
<span data-line=""><span>  </span><span>);</span></span>
<span data-line=""><span>}</span></span></code></pre></div>
<p>Happy stitching!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[TLS certificate lifetimes will officially reduce to 47 days (123 pts)]]></title>
            <link>https://www.digicert.com/blog/tls-certificate-lifetimes-will-officially-reduce-to-47-days</link>
            <guid>43693900</guid>
            <pubDate>Tue, 15 Apr 2025 15:09:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.digicert.com/blog/tls-certificate-lifetimes-will-officially-reduce-to-47-days">https://www.digicert.com/blog/tls-certificate-lifetimes-will-officially-reduce-to-47-days</a>, See on <a href="https://news.ycombinator.com/item?id=43693900">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	 	  
	 	  
	 	  <p><img src="https://www.digicert.com/content/dam/digicert/images/about/blog/blog-article/47-day-blog-hero.png">
	 	  </p>	  
	 </div><div>
	    <p>The CA/Browser Forum has officially <a href="https://groups.google.com/a/groups.cabforum.org/g/servercert-wg/c/bvWh5RN6tYI" target="_blank">voted to amend the TLS Baseline Requirements</a> to set a schedule for shortening both the lifetime of TLS certificates and the reusability of CA-validated information in certificates. The first user impacts of the ballot take place in March 2026.</p>
<p>The ballot was long debated in the <a href="https://www.digicert.com/faq/compliance/what-is-the-certification-authority-browser-forum">CA/Browser Forum</a> and went through several versions, incorporating feedback from <a href="https://www.digicert.com/blog/what-is-a-certificate-authority">certificate authorities</a> and their customers. The voting period ended on April 11, 2025, closing one hotly contested chapter and allowing the certificate world to plan for what comes next.</p>
<h4><span>The new TLS certificate lifetime schedule</span></h4>
<p>The new ballot targets certificate validity of 47 days, making automation essential. Prior to this <a href="https://www.digicert.com/blog/new-certificate-lifetime-proposed-by-apple">proposal by Apple</a>, Google promoted a 90-day maximum lifetime, but they voted in favor of Apple’s proposal almost immediately after the voting period began.</p>
<p>Here’s the schedule:</p>
<ul>
<li><p>The maximum certificate lifetime is going down:</p>
<ul>
<li>From today until March 15, 2026, the maximum lifetime for a <a href="https://www.digicert.com/tls-ssl/tls-ssl-certificates">TLS certificate</a> is 398 days.</li>
<li>As of March 15, 2026, the maximum lifetime for a TLS certificate will be 200 days.</li>
<li>As of March 15, 2027, the maximum lifetime for a TLS certificate will be 100 days.</li>
<li>As of March 15, 2029, the maximum lifetime for a TLS certificate will be 47 days.</li>
</ul>

</li>
<li><p>The maximum period during which domain and <a href="https://www.digicert.com/faq/dns/what-is-my-ip-address">IP address</a> validation information may be reused is going down:</p>
<ul>
<li>From today until March 15, 2026, the maximum period during which domain validation information may be reused is 398 days.</li>
<li>As of March 15, 2026, the maximum period during which domain validation information may be reused is 200 days.</li>
<li>As of March 15, 2027, the maximum period during which domain validation information may be reused is 100 days.</li>
<li>As of March 15, 2029, the maximum period during which domain validation information may be reused is 10 days.</li>
</ul>
</li>
<li><p>As of March 15, 2026, validations of Subject Identity Information (SII) can only be reused for 398 days, down from 825. SII is the company name and other information found in an <a href="https://www.digicert.com/difference-between-dv-ov-and-ev-ssl-certificates">OV (Organization Validated) or EV (Extended Validation) certificate</a>, i.e., everything but the domain name or IP address protected by the certificate. This does not affect DV (Domain Validated) certificates, which have no SII.</p>

</li>
</ul>

	    
	</div><div>
	    <h4><span>Why 47 Days?</span></h4>
<p>47 days might seem like an arbitrary number, but it’s a simple cascade:</p>
<ul>
<li>200 days = 6 maximal month (184 days) + 1/2 30-day month (15 days) + 1 day wiggle room</li>
<li>100 days = 3 maximal month (92 days) + ~1/4 30-day month (7 days) + 1 day wiggle room</li>
<li>47 days = 1 maximal month (31 days) + 1/2 30-day month (15 days) + 1 day wiggle room</li>
</ul>
<h4><span>Apple’s justification for the change</span></h4>
<p>In the ballot, Apple makes many arguments in favor of the moves, one of which is most worth calling out. They state that the CA/B Forum has been telling the world for years, by steadily shortening maximum lifetimes, that automation is essentially mandatory for effective <a href="https://www.digicert.com/tls-ssl/certcentral-tls-ssl-manager">certificate lifecycle</a> management.</p>
<p>The ballot argues that shorter lifetimes are necessary for many reasons, the most prominent being this: The information in certificates is becoming steadily less trustworthy over time, a problem that can only be mitigated by frequently revalidating the information.</p>
<p>The ballot also argues that the revocation system using CRLs and OCSP is unreliable. Indeed, browsers often ignore these features. The ballot has a long section on the failings of the certificate revocation system. Shorter lifetimes mitigate the effects of using potentially revoked certificates. In 2023, CA/B Forum took this philosophy to another level by approving short-lived certificates, which expire within 7 days, and which do not require CRL or OCSP support.</p>
<h4><span>Clearing up confusion about the new rules</span></h4>
<p>Two points about the new rules are likely to cause confusion:</p>
<ol>
<li>The three years for the rule changes are 2026, 2027, and 2029, but the gap between the second set of years is two years long.</li>
<li>As of March 15, 2029, the maximum lifetime for a TLS certificate will be 47 days, but the maximum period during which domain validation information may be reused is <b>only 10 days</b>. Manual revalidation will still technically be possible, but doing so would be a recipe for failure and outages.</li>
</ol>
<p>As a certificate authority, one of the most common questions we hear from customers is whether they’ll be charged more to replace certificates more frequently. The answer is no. Cost is based on an annual subscription, and what we’ve learned is that, once users <a href="https://www.digicert.com/trust-lifecycle-manager">adopt automation</a>, they often voluntarily move to more rapid certificate replacement cycles.</p>
<p>For this reason, and because even the 2027 changes to 100-day certificates will make manual procedures untenable, we expect rapid adoption of automation long before the 2029 changes.</p>
<p>Apple’s statement about automated certificate lifecycle management is indisputable, but it’s something we’ve been long preparing for. DigiCert offers multiple automation solutions through&nbsp;<a href="https://www.digicert.com/trust-lifecycle-manager">Trust Lifecycle Manager</a>&nbsp;and&nbsp;<a href="https://www.digicert.com/tls-ssl/certcentral-tls-ssl-manager">CertCentral</a>, including support for ACME.&nbsp;DigiCert’s ACME allows automation of DV, OV, and EV certificates and includes support for ACME Renewal Information (ARI).</p>
<p><a href="https://www.digicert.com/contact-us">Get in touch</a> for more information on how you can make the best use of automation.</p>
<h4><span>The latest developments in digital trust</span></h4>
<p>Want to learn more about topics like <a href="https://www.digicert.com/blog/category/certificate-management">certificate management</a>, <a href="https://www.digicert.com/blog/category/automation">automation</a>, and <a href="https://www.digicert.com/blog/category/tls-ssl">TLS/SSL</a>? Subscribe to the <a href="https://www.digicert.com/blog">DigiCert blog</a> to ensure you never miss a story.</p>

	    
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Doge Is Far Short of Its Goal, and Still Overstating Its Progress (117 pts)]]></title>
            <link>https://www.nytimes.com/2025/04/13/us/politics/doge-contracts-savings.html</link>
            <guid>43693584</guid>
            <pubDate>Tue, 15 Apr 2025 14:50:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2025/04/13/us/politics/doge-contracts-savings.html">https://www.nytimes.com/2025/04/13/us/politics/doge-contracts-savings.html</a>, See on <a href="https://news.ycombinator.com/item?id=43693584">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2025/04/13/us/politics/doge-contracts-savings.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[ICE Agents Realize They Arrested Wrong Teen, Say 'Take Him Anyway' (162 pts)]]></title>
            <link>https://www.newsweek.com/merwil-gutierrez-ice-wrong-teen-el-salvador-2059783</link>
            <guid>43693531</guid>
            <pubDate>Tue, 15 Apr 2025 14:47:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newsweek.com/merwil-gutierrez-ice-wrong-teen-el-salvador-2059783">https://www.newsweek.com/merwil-gutierrez-ice-wrong-teen-el-salvador-2059783</a>, See on <a href="https://news.ycombinator.com/item?id=43693531">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Federal immigration authorities apprehended a 19-year-old in New York despite realizing he was not the intended target.</p><p>The young man, Merwil Gutiérrez, was later deported to El Salvador's notorious super prison, despite his family's insistence that he has no gang ties or criminal history.</p><p>His father, Wilmer Gutiérrez, is now searching for answers after his son was snatched by Immigration and Customs Enforcement (<a href="https://www.newsweek.com/topic/ice" data-sys="1">ICE</a>) agents.</p><p>"The officers grabbed him and two other boys right at the entrance to our building. One said, 'No, he's not the one,' like they were looking for someone else. But the other said, 'Take him anyway,'" Wilmer told <em>Documented, "</em>an independent, nonprofit newsroom dedicated to reporting for immigrant communities in New York City."</p><figure><div>
<picture width="1200" height="800"><source type="image/webp" media="(min-width: 992px)" srcset="https://d.newsweek.com/en/full/2627197/cecot.webp?w=790&amp;f=11c86a37ac0fdc5231227790fab2d18f 1x"><source type="image/jpeg" media="(min-width: 992px)" srcset="https://d.newsweek.com/en/full/2627197/cecot.jpg?w=790&amp;f=11c86a37ac0fdc5231227790fab2d18f 1x"><source type="image/webp" media="(min-width: 768px)" srcset="https://d.newsweek.com/en/full/2627197/cecot.webp?w=900&amp;f=0a36197be5923039d06e7e286e9f3e75 1x"><source type="image/jpeg" media="(min-width: 768px)" srcset="https://d.newsweek.com/en/full/2627197/cecot.jpg?w=900&amp;f=0a36197be5923039d06e7e286e9f3e75 1x"><source type="image/webp" media="(min-width: 481px)" srcset="https://d.newsweek.com/en/full/2627197/cecot.webp?w=790&amp;f=11c86a37ac0fdc5231227790fab2d18f 1x"><source type="image/jpeg" media="(min-width: 481px)" srcset="https://d.newsweek.com/en/full/2627197/cecot.jpg?w=790&amp;f=11c86a37ac0fdc5231227790fab2d18f 1x"><source type="image/webp" media="(min-width: 0px)" srcset="https://d.newsweek.com/en/full/2627197/cecot.webp?w=450&amp;f=fc07c3695b9f62ca2b32a9b1e3252929 1x"><source type="image/jpeg" media="(min-width: 0px)" srcset="https://d.newsweek.com/en/full/2627197/cecot.jpg?w=450&amp;f=fc07c3695b9f62ca2b32a9b1e3252929 1x"><source type="image/webp" srcset="https://d.newsweek.com/en/full/2627197/cecot.webp?w=1200&amp;f=365a7123f1b2ea961c3a5d887e1d968b"><img loading="lazy" id="i2627197" src="https://d.newsweek.com/en/full/2627197/cecot.jpg?w=1200&amp;f=365a7123f1b2ea961c3a5d887e1d968b" alt="CECOT" width="1200" height="800"></picture></div><figcaption>
<span id="short-cap-description">Inmates remain in a cell at the Counter-Terrorism Confinement Centre (CECOT) mega-prison, where hundreds of members of the MS-13 and 18 Street gangs are being held, in Tecoluca, El Salvador on January 27, 2025. </span>

<span>Marvin Recinos/Getty</span>
</figcaption>  </figure><h2><strong>Why It Matters</strong></h2><p>El Salvador's President Nayib Bukele responded Monday to questions about the deportation of Kilmar Abrego Garcia, stating that he lacked the authority to return individuals sent by the U.S. to the Terrorism Confinement Center (CECOT).</p><p>This remark came amid growing criticism of the government's handling of due process, opponents accusing the administration of bypassing legal safeguards in its treatment of deportees. Critics argue that Garcia's deportation reflects a broader pattern of disregarding constitutional rights, sparking concerns over the erosion of legal protections in the country's justice system.</p><p>President <a href="https://www.newsweek.com/topic/donald-trump" target="_blank" rel="noopener">Donald Trump</a> has pledged to conduct the largest deportation operation in American history as his administration looks to remove millions of undocumented immigrants. The White House has said anyone living in the country unlawfully is considered a "criminal" by the federal government. Since the beginning of Trump's second term, thousands of migrants have been arrested.</p><h2><strong>What To Know</strong></h2><p>Gutiérrez, who fled instability in Venezuela and was pursuing an asylum case in the U.S, was detained in the Bronx by ICE agents conducting a targeted operation.</p><p>According to his father, the agents initially acknowledged he was not the individual they were seeking—but chose to detain him anyway.</p><p>Just days later, Gutiérrez was deported to El Salvador, where he was transferred to a high security prison known for housing members of violent gangs, including the transnational criminal group <em>Tren de Aragua</em>.</p><p>His family and attorneys say he has no criminal record, no gang affiliations, and "not even a tattoo," which authorities often use to profile alleged gang members.</p><p>Wilmer Gutiérrez last spoke to his son on March 16 during a brief call allowed by police. He had spent days searching for information, visiting police stations and courthouses, only to be told there was no record of his son.</p><p>During the call, Merwil Gutiérrez said he was being held in Pennsylvania and expected to be transferred to Texas before returning to Venezuela. That transfer never happened.</p><p>Wilmer Gutiérrez later discovered through a news report that his son had been deported to El Salvador under the Alien Enemies Act of 1798. Videos circulating online showed detainees in harsh conditions, their heads shaved and marched to cells.</p><p>"I could have understood if he'd been sent back to Venezuela," he said. "But why to a foreign country he's never even been to?"</p><p>In May 2023, Wilmer Gutiérrez left Venezuela with his son Merwil and nephew Luis, traveling through Colombia and the Darién Gap into Panama. The monthlong journey eventually brought them to Ciudad Juárez, Mexico, where they applied for Temporary Protected Status (TPS) through the CBP One app. While waiting for their immigration appointment, they took temporary jobs and slept near the border to keep their place in line.</p><p>Before leaving Venezuela, Wilmer had lived in Los Teques, near Caracas, working for the state oil company PDVSA and later running a cellphone repair business. However ongoing political instability and a collapsing economy made it increasingly difficult to support his family, including his three children and his mother, who was battling cancer.</p><h2><strong>What People Are Saying</strong></h2><p><strong>William Parra, an immigration attorney from Inmigración Al Día said:</strong> "Merwil was detained for hanging out with friends and was at the wrong place at the wrong time. ICE was not looking for him, nor is there any evidence whatsoever that Merwil was in any gang."</p><p><strong>Aaron Reichlin-Melnick, senior fellow at the American Immigration Council said in a post on X, formerly Twitter</strong>: "19-year-old Merwil Gutierrez was grabbed off the street in New York City days before he was sent to El Salvador. His family insists he has no connection to <a href="https://www.newsweek.com/topic/tren-de-aragua" data-sys="1">Tren de Aragua</a>. He doesn't even have any tattoos."</p><h2><strong>What Happens Next</strong></h2><p>Gutiérrez's legal team is calling for immediate diplomatic intervention to secure his release and safe return.</p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to Win an Argument with a Toddler (661 pts)]]></title>
            <link>https://seths.blog/2025/04/how-to-win-an-argument-with-a-toddler/</link>
            <guid>43693402</guid>
            <pubDate>Tue, 15 Apr 2025 14:38:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://seths.blog/2025/04/how-to-win-an-argument-with-a-toddler/">https://seths.blog/2025/04/how-to-win-an-argument-with-a-toddler/</a>, See on <a href="https://news.ycombinator.com/item?id=43693402">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						
			
<p>You can’t.</p>



<p>That’s because toddlers don’t understand what an argument is and aren’t interesting in having one.</p>



<p>Toddlers (which includes defensive bureaucrats, bullies, flat earthers, folks committed to a specific agenda and radio talk show hosts) may indicate that they’d like to have an <a href="https://youtu.be/ohDB5gbtaEQ?si=AvfXoVSSSAzU04WW">argument</a>, but they’re actually engaging in connection, noise, play acting or a chance to earn status. It can be fun to be in opposition, to harangue or even to use power to change someone’s position.</p>



<p>An argument, though, is an exchange of ideas that ought to surface insight and lead to a conclusion.</p>



<p>If you’re regularly having arguments with well-informed people of goodwill, you will probably ‘lose’ half of them–changing your mind based on what you’ve learned. <em>If you’re not changing your mind, it’s likely you’re not actually having an argument</em> (or you’re hanging out with the wrong people.) While it can be fun to change someone else’s position, it’s also a gift to learn enough to change ours.</p>



<p>The toddler puts on a show of having an argument, but they are holding a tantrum in reserve. If they ‘win’ the argument, no tantrum is needed. If they lose, they can tell themselves that they tried but the other person deserved the tantrum because they didn’t listen.</p>



<p>“Tell me about other strongly-held positions you’ve changed as the result of a discussion like this one…” is a direct way to start a conversation about the argument you’re proposing to have. “What sort of information would make it likely you could see this in a different way?”</p>



<p>It probably doesn’t pay to argue over things we have chosen to believe as part of our identity.</p>
			

			

		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Philosophy Major Snatched by ICE During Citizenship Interview (135 pts)]]></title>
            <link>https://dailynous.com/2025/04/15/philosophy-major-snatched-by-ice-during-citizenship-interview/</link>
            <guid>43693375</guid>
            <pubDate>Tue, 15 Apr 2025 14:36:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dailynous.com/2025/04/15/philosophy-major-snatched-by-ice-during-citizenship-interview/">https://dailynous.com/2025/04/15/philosophy-major-snatched-by-ice-during-citizenship-interview/</a>, See on <a href="https://news.ycombinator.com/item?id=43693375">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>			<article>

				
<header>
				
			
	
	<hr>
			
	</header><!-- .article__header -->
				<section>
					<p>Mohsen Mahdawi, a philosophy major at Columbia University who is due to graduate later this semester, was attending a US citizenship application interview in Vermont on Monday when Immigration and Customs Enforcement (ICE) agents wearing hoods and masks took him from the building, put him into an unmarked car, and drove off.<span id="more-53466"></span></p>
<p><img fetchpriority="high" decoding="async" src="https://dailynous.com/wp-content/uploads/2025/04/mahdawi-mohsen.png" alt="" width="690" height="649" srcset="https://dailynous.com/wp-content/uploads/2025/04/mahdawi-mohsen.png 1672w, https://dailynous.com/wp-content/uploads/2025/04/mahdawi-mohsen-300x282.png 300w, https://dailynous.com/wp-content/uploads/2025/04/mahdawi-mohsen-1024x963.png 1024w, https://dailynous.com/wp-content/uploads/2025/04/mahdawi-mohsen-768x723.png 768w, https://dailynous.com/wp-content/uploads/2025/04/mahdawi-mohsen-1536x1445.png 1536w, https://dailynous.com/wp-content/uploads/2025/04/mahdawi-mohsen-400x376.png 400w" sizes="(max-width: 690px) 100vw, 690px"></p>
<p>His current whereabouts are “unknown”, said his lawyer, according to the <a href="https://www.bbc.com/news/articles/cwy0332y7xzo" target="_blank" rel="noopener">BBC</a>.</p>
<p>Mahdawi is a green card holder. According to the BBC:</p>
<p><em>His lawyer, Luna Droubi, said: “The Trump administration detained Mohsen Mahdawi in direct retaliation for his advocacy on behalf of Palestinians and because of his identity as a Palestinian.</em></p>
<p><em>“His detention is an attempt to silence those who speak out against the atrocities in Gaza. It is also unconstitutional.”</em></p>
<p><em>The attorney applied to a federal court for a temporary restraining order to prevent US immigration authorities moving Mr Mahdawi out of Vermont or expelling him from the US.</em></p>
<p><em>Judge William Sessions, an Obama appointee, quickly granted that order.</em></p>
<p><em>The court filing says Mr Mahdawi was born in a refugee camp in the West Bank and moved to the US in 2014.</em></p>
<p><em>It describes the philosophy major as a committed Buddhist who believes in “non-violence and empathy as a central tenet of his religion”.</em></p>
<p>Mahdawi was interviewed last year by&nbsp;<em>60 Minutes&nbsp;</em>about the student protests at Columbia regarding Israel’s response to Hamas’s attack on October 7th, 2023. In the interview he says:</p>
<p><em>To be anti-Semitic is unjust. And the fight for the freedom of Palestine and the fight against anti-Semitism go hand in hand, because injustice anywhere is a threat to justice everywhere.</em></p>
<p>A clip of the interview is below.</p>
<p><iframe title="YouTube video player" src="https://www.youtube.com/embed/grj328-hlhA?si=Ij16DfujLKKlXHQm" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>(via Shen-Yi Liao)</p>
<hr>
<p><strong>UPDATE:&nbsp;</strong>A reader passed along the public Facebook post of <a href="https://history.ucla.edu/person/david-myers/" target="_blank" rel="noopener">David Myers</a>, professor of history, holder of the Sady and Ludwig Kahn Chair in Jewish History, and former director of the Center for Jewish Studies at UCLA:</p>
<div dir="auto">
<p><em>Coming off of two days of Passover, I was horrified to discover that my friend, Columbia student Mohsen Mahdawi, was arrested. I met Mohsen at a meeting in late spring 2024 and have been in touch with him ever since. He is a remarkable and humane person who experienced the worst of Israel’s occupation as a young kid in the Jenin refugee camp, took up arms as a teenager, and then decided to foreswear the path of armed struggle for non-violence. He became an activist in the Palestinian solidarity movement at Columbia, all the while believing in the importance of engaging with and talking to those with whom he disagreed. Let’s be clear: Mohsen was arrested not because he was a supporter of violence or a threat to national security but FOR THE CRIME OF BEING PALESTINIAN. His commitment to non-violence was not always popular with some in the Palestinian solidarity movement, and his fierce criticism of the occupation led others to us accuse him–quite scandalously–of being antisemitic. But he had the courage of his convictions, rooted in his core belief in the dignity of all human life.</em></p>
<p><em>His arrest is a profound miscarriage of justice–and in line with the scandalous harassment, arrest, and deportation of others who have dared to express support for the principle of Palestinian liberation. He is indeed a political prisoner of a rogue regime that is descending ever further into authoritarianism. If this is the kind of person they deem a threat, there is no end to their perfidy. Those who care about the rule of law, freedom of expression, and support for the cause of justice in Israel-Palestine cannot remain silent.</em></p>
<p>Professor Myers’ post is <a href="https://www.facebook.com/david.myers.31586" target="_blank" rel="noopener">here</a>.</p>
</div>
				</section>
				<!-- .article__content -->
				
<!-- .article__footer -->

    
    
    
    
    
			</article>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Hacking the Postgres Wire Protocol (212 pts)]]></title>
            <link>https://pgdog.dev/blog/hacking-postgres-wire-protocol</link>
            <guid>43693326</guid>
            <pubDate>Tue, 15 Apr 2025 14:33:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pgdog.dev/blog/hacking-postgres-wire-protocol">https://pgdog.dev/blog/hacking-postgres-wire-protocol</a>, See on <a href="https://news.ycombinator.com/item?id=43693326">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
        <p><strong>Apr 14th, 2025</strong><br>Lev Kokotov</p>
       <p>PgDog is a network proxy and it can see every byte sent between Postgres and the clients. It understands SQL and can infer where queries should go, without requiring changes to application code.</p>

<p>In this article, we discuss how we handle the Postgres wire protocol and manipulate it to serve queries to multiple databases at the same time.</p>

<h3 id="protocol-basics">Protocol basics</h3>

<p>Postgres has two ways to send queries over the network:</p>

<ul>
  <li>Simple protocol</li>
  <li>Extended protocol</li>
</ul>

<p>The simple protocol is called like that on purpose: it’s very simple. It has just one message, called <code>Query</code> which contains everything the server needs to execute it:</p>

<div><pre><code>'Q' | \x00\x00\x00&amp; | SELECT * FROM users WHERE id = 25\0
</code></pre></div>

<p>Postgres messages have a standard format. Each message starts with a single ASCII letter (1 byte), identifying the message type. It’s followed by a 32-bit signed integer, indicating the length of the payload, in bytes, with 4 bytes added for itself. The payload is unique for each message.</p>

<p>To route a query, PgDog needs to understand two things:</p>

<ul>
  <li>Does the query read or write data?</li>
  <li>Does it contain a sharding key, and if so, what is it’s value?</li>
</ul>

<p>To make this work, we need some help. To answer the first question, we could, theoretically, just look at the first word, and if it’s a “SELECT”, assume read intent. While this would work in most cases, we’ll miss some obvious ones, like CTEs.</p>

<p>The tricky part is finding the sharding key. For this, we need to actually interpret the query using a tool that understands SQL syntax. That’s called a parser, and luckily the Rust ecosystem already has a great library, called <code>pg_query</code>. The parser produces an Abstract Syntax Tree, a data structure we can read to find what we need:</p>

<div><pre><code><span>let</span> <span>ast</span> <span>=</span> <span>pg_query</span><span>::</span><span>parse</span><span>(</span><span>"SELECT * FROM users WHERE id = 25"</span><span>);</span>
</code></pre></div>

<p><code>pg_query</code> is special. It doesn’t actually implement parsing SQL. It works by extracting C source code directly from Postgres and wraps it with a nice Rust interface. This allows PgDog to understand <em>all</em> queries that Postgres can.</p>

<p>PgDog is all about sharding Postgres. Once we locate the sharding key in a query, we have to figure out what to do with it. Let’s do a quick detour into Postgres partitions.</p>

<h5 id="the-sharding-function">The sharding function</h5>

<p>Picking the right sharding function is critical. It’s not something you can easily change later. One thing I learned from doing this at Instacart: pick a sharding function which is available in multiple places. Let me explain.</p>

<p>In the real world, whatever you build, won’t be the <em>only</em> way to ingest or read data to/from your system. Either you don’t want to touch production (yet) or you just need to move some things around ad-hoc, you want engineers to be able to pre-process data in advance and have multiple ways to talk to your system.</p>

<p>For this reason, PgDog doesn’t implement a custom sharding function. It’s using the hashing function used in Postgres declarative partitions:</p>

<div><pre><code><span>CREATE</span> <span>TABLE</span> <span>users</span> <span>(</span><span>id</span> <span>BIGINT</span><span>,</span> <span>email</span> <span>VARCHAR</span><span>)</span>
<span>PARTITION</span> <span>BY</span> <span>HASH</span><span>(</span><span>id</span><span>);</span>
</code></pre></div>

<p>If you know the number of shards, you can create the same number of data partitions and just COPY data into the table. If you’re using FOREIGN tables with <code>postgres_fdw</code>, you can interact with your sharded database directly.</p>

<p>To make this work in PgDog, we took a page from the <code>pg_query</code> playbook. We could have implemented the function ourselves, but it’s much better to just take the code from Postgres and wrap it with a Rust interface.</p>

<p>Rust makes this pretty easy. Using the <code>cc</code> (C/C++ compiler) library and by copy/pasting some code, we have a working FFI interface to <code>hashfn.c</code> straight out of the Postgres source code tree. All we need is the right data to pass in, and apply the modulo operation to get the shard number.</p>



<p>Our example has only one filter: <code>id = 25</code>. This is the simplest case, but it’s also the most common one. Getting this value from SQL, using <code>pg_query</code>, is straightforward. Once we have it, we can pass it to the sharding function and we have a shard number.</p>

<center>
  <img src="https://pgdog.dev/assets/images/wire-protocol-query.jpg" width="100%" height="auto" alt="Extended protocol">
</center>

<p>UPDATE and DELETE queries work the same way. They all have (an optional) WHERE-clause, and if it has a filter with our sharding key, we can handle it. If it doesn’t, the query is sent to all shards (more on that below).</p>

<p>More complex examples, like <code>IN (1, 2, 3)</code> or <code>id != 25</code> can be handled as well. For the former, we can hash all values and route the query to the matching shards. For the latter, we send the query to all shards. Some cases of course won’t work, e.g., <code>WHERE id &lt; 25</code>. That’s too many values to hash and this query will hit all shards anyway.</p>

<p>INSERT statements are a bit more interesting and come in two variants:</p>



<p>The first one specifies the column order, so we can just extract the sharding key directly. The second doesn’t, so we have to fetch the schema from Postgres and infer the column order. This is slightly more involved, but still a solvable problem. Not something we’re handling yet, but it’s on the roadmap.</p>

<p>ORMs like Rails and Django tend to be explicit and provide fully-qualified columns and table names for all queries. This makes our job easier, but we can’t always rely on everyone using an ORM and we certainly don’t want to impose arbitrary limitations on our users.</p>

<p>Simple protocol is simple, but things get more interesting if the client uses prepared statements and the extended protocol.</p>

<h5 id="extended-protocol">Extended protocol</h5>

<p>The extended protocol has several messages. For our purposes, we are interested in just two:</p>

<ul>
  <li><code>Parse</code> which has the query and parameter placeholders</li>
  <li><code>Bind</code> which contains the parameter values</li>
</ul>

<p>Separating the two allows Postgres to parse the query once and execute it multiple times with different parameters. This is great for query performance and to avoid SQL injection attacks, but it requires us to do a couple extra steps to get what we need:</p>

<center>
  <img src="https://pgdog.dev/assets/images/wire-protocol-bind.jpeg" width="100%" height="auto" alt="Extended protocol">
</center>

<p>If prepared statements are used, clients typically send one <code>Parse</code> message per query. PgDog parses it and stores the AST in its memory cache. The statements are disambiguated at the global level, so even if multiple clients send the same one, they are evaluated only once.</p>

<p>This optimization is critical to make this fast in production. Parsing SQL isn’t free and we only do it when we have to. The message itself is saved in a memory buffer, while PgDog waits for the actual parameter values to arrive.</p>

<p><code>Bind</code> message(s) follow for each execution of the statement. If the statement is anonymous (unnamed), we only get one <code>Bind</code> message. In either case, we know where the sharding key is located, based on the numbered parameters in the query.</p>

<p>With the sharding key hashed, we can forward both messages to a Postgres server connection and begin executing the query.</p>

<p>Both simple and extended protocols require PgDog to build an internal state of the connection and keep track of messages that flow through. As long as we keep the protocol in sync, we can manipulate what Postgres receives and what messages are sent back to the client. This becomes relevant when we start talking to multiple servers at once.</p>

<h3 id="cross-shard-queries">Cross-shard queries</h3>

<p>Postgres query response contains multiple messages. They are, in order of appearance:</p>

<ul>
  <li><code>RowDescription</code>, which contains column names and their data types</li>
  <li><code>DataRow</code> has the actual values, with one message for each row in the result set</li>
  <li><code>CommandComplete</code> indicates the query finished running and how many rows were affected</li>
  <li><code>ReadyForQuery</code> indicates the server is ready for the next query</li>
</ul>

<center>
  <img src="https://pgdog.dev/assets/images/wire-protocol-response.jpg" width="100%" height="auto" alt="Extended protocol">
</center>

<p>Since PgDog is an independent proxy, Postgres servers have no idea they are executing a multi-shard query. Each server connection will return all of these messages in that order. However, except the <code>DataRow</code> message, the client expects only one message of each kind.</p>

<p>Each message in this pipeline is handled differently. For <code>RowDescription</code>, only the last one is returned. All shards are expected to have the same schema, so these messages should be identical between shards. If they are not, the data types must be compatible, e.g., VARCHAR and TEXT.</p>

<p>There are a few more nuances here. For example, if databases have custom data types created by extensions, like pgvector or PostGIS, their OIDs won’t match across different Postgres databases, and we need to make sure clients are only aware of one set. If text encoding is used (it is, by default), mixing BIGINT and INTEGER can work, although I wouldn’t recommend it. While languages like Ruby and Python don’t distinguish between the two, languages like Rust and Java definitely do.</p>

<p><code>DataRow</code> messages are handled in two possible ways. If the query has an ORDER BY clause, the messages are buffered. Once all of them are received, they are sorted accordingly and returned in the right order to the client. If the rows aren’t ordered, PgDog sends them to the client immediately, in whatever order it receives them from the servers.</p>

<center>
  <img src="https://pgdog.dev/assets/images/wire-protocol-sorting.jpg" width="100%" height="auto" alt="Extended protocol">
</center>

<p>This is where the understanding of SQL starts to take shape. Extracting column values is great, but we need to do more to make sure the query is executed correctly. PgDog isn’t a full coordinator yet, but more features are added every week.</p>

<p><code>CommandComplete</code> message is rewritten to reflect the correct row count. We do this by parsing its contents and summing the number of rows across all messages we received from all shards. <code>ReadyForQuery</code> is forwarded as-is (only the last message) and the cross-shard query is complete.</p>

<p>Protocol manipulation works on both sides of the conversation. PgDog doesn’t stop at manipulating server messages. It goes further and can modify client messages to create a powerful cross-shard data ingestion pipeline.</p>

<h3 id="distributed-copy">Distributed COPY</h3>

<p>The fastest way to write data into Postgres is to use COPY. It’s a special command that can read CSV, text or binary data and write it directly into a table. It can be used to bulk ingest records and to move data between DBs.</p>

<div><pre><code><span>COPY</span> <span>users</span> <span>(</span><span>id</span><span>,</span> <span>email</span><span>)</span> <span>FROM</span> <span>STDIN</span> <span>CSV</span> <span>HEADER</span><span>;</span>
</code></pre></div>

<pre><code>id,email
65,<a href="https://pgdog.dev/cdn-cgi/l/email-protection" data-cfemail="94fcfdd4e4f3f0fbf3baf0f1e2">[email&nbsp;protected]</a>
25,<a href="https://pgdog.dev/cdn-cgi/l/email-protection" data-cfemail="f8949d8eb8889f9c979fd69c9d8e">[email&nbsp;protected]</a>
</code></pre>

<p>Postgres clients send this command using two messages:</p>

<ul>
  <li><code>Query</code> to send the COPY command itself</li>
  <li>A series of <code>CopyData</code> messages that contain the actual rows</li>
</ul>

<p>In a sharded database, this command requires special handling. For each row, PgDog extracts the sharding key, hashes it, and routes it to the right server:</p>

<center>
  <img src="https://pgdog.dev/assets/images/wire-protocol-copy.jpg" width="100%" height="auto" alt="Extended protocol">
</center>

<p>Clients typically send data in chunks, irrespective of encoding boundaries. For example, each <code>CopyData</code> message created by <em>psql</em> is 4096 bytes long and can break CSV records. To make this work, PgDog handles partial CSV records and streaming binary data by buffering one complete row at a time. <code>CopyData</code> messages coming out of PgDog always contain one single and complete row.</p>

<h5 id="performance">Performance</h5>

<p>Distributed COPY, in theory, can linearly scale ingestion speeds for sharded Postgres. With each new shard, the speed of ingestion should increase by <em>1/N</em> where <em>N</em> is the number of shards. Since PgDog is using Tokio and multiple threads, it’s possible to run it on a machine with multiple CPUs and parallelize the hashing and manipulation of data rows. A single ingestion pipeline can push gigabytes of data per second into Postgres, while maintaining schema and data integrity.</p>

<h3 id="next-steps">Next steps</h3>

<p>PgDog is just getting started. While it can manipulate the frontend/backend wire protocol used by clients and Postgres servers, we are going further and applying the same technique to manipulate logical replication streams.</p>

<p>Since PgDog does all this at the network layer, it can run anywhere including managed clouds like AWS RDS, and works with Postgres clones like Aurora, AlloyDB and Cockroach.</p>

<p>If this is interesting, <a href="https://pgdog.dev/cdn-cgi/l/email-protection#4b23220b3b2c2f242c652f2e3d">get in touch</a>! We are looking for early adopters and design partners. We always appreciate <a href="https://github.com/pgdogdev/pgdog">a star</a> on GitHub.</p>

    </div></div>]]></description>
        </item>
    </channel>
</rss>