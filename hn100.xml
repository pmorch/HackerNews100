<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 02 Sep 2024 15:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Show HN: Defrag the Game (162 pts)]]></title>
            <link>https://defrag-game.com</link>
            <guid>41424371</guid>
            <pubDate>Mon, 02 Sep 2024 11:08:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://defrag-game.com">https://defrag-game.com</a>, See on <a href="https://news.ycombinator.com/item?id=41424371">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><span>Choose a drive to defrag:</span></p><div><div><p><span>Drive C</span></p><p><span>Size: 1KB</span><span>(Easy)</span></p></div><div><p><span>Drive D</span></p><p><span>Size: 128Kb</span><span>(Normal)</span></p></div><div><p><span>Drive E</span></p><p><span>Size: 1MB</span><span>(Hard)</span></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Upgrading a Toshiba NAS HDD Firmware on Linux (107 pts)]]></title>
            <link>https://syscall.eu/blog/2024/08/28/toshiba_hdd_firmware/</link>
            <guid>41423577</guid>
            <pubDate>Mon, 02 Sep 2024 08:20:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://syscall.eu/blog/2024/08/28/toshiba_hdd_firmware/">https://syscall.eu/blog/2024/08/28/toshiba_hdd_firmware/</a>, See on <a href="https://news.ycombinator.com/item?id=41423577">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <h2>Upgrading a Toshiba NAS HDD firmware on Linux</h2>
  <p><span>28 Aug 2024</span></p><h2 id="tldr">TL;DR</h2>

<p>I reversed the firmware updater of my Toshiba HDD to be able to update it on Linux.
The following commands <strong>should</strong> work, <strong>USE AT YOUR OWN RISK</strong>:</p>

<div><pre><code>$ wget https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/ISFw.dat
$ grep -C2 MODELNAME ISFw.dat
 # ^
 #&nbsp;|___ identify the right filename here
$ wget https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/sk060202.ftd
# hdparm --fwdownload-mode3 sk060202.ftd /dev/sdX
</code></pre></div>

<h2 id="context">Context</h2>

<p>I bought a Toshiba HDWG480 HDD for my NAS. <code>hdparm -I /dev/XXX</code> gives the following output:</p>

<div><pre><code>ATA device, with non-removable media
        Model Number:       TOSHIBA HDWG480
        Serial Number:      3430A00RFR0H
        Firmware Revision:  0601
        Transport:          Serial, ATA8-AST, SATA 1.0a, SATA II Extensions, SATA Rev 2.5, SATA Rev 2.6, SATA Rev 3.0
Standards:
        Used: unknown (minor revision code 0x006d)
        Supported: 10 9 8 7 6 5
        Likely used: 10
[...]
</code></pre></div>

<p>As usual, I wanted to check if any firmware update is available. Toshiba’s <a href="https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/en.htm">dedicated webpage</a> lists version <code>0602</code> as available for my model.</p>

<p>Unfortunately, as expected, there’s no firmware update process provided for Linux users, only an “Internal Storage Firmware Update Utility” is provided for Windows.</p>

<p>Update files are not provided either.</p>

<h3 id="goals">Goals</h3>

<p>So, our goals are:</p>

<ul>
  <li>understand where the updater gets its update files from</li>
  <li>reverse engineer the flashing process itself to reimplement it on Linux</li>
</ul>

<h2 id="reversing-the-windows-updater">Reversing the Windows Updater</h2>

<h3 id="intro">Intro</h3>

<p>Running the <a href="https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/exe/InternalStorageFwUpdateUtility_1.20.0410.exe">installer</a><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup> with Wine works perfectly, resulting in the following files being installed under <code>Program Files (x86)</code>:</p>

<div><pre><code>  18312 ISFw.exe:        PE32 executable (native) Intel 80386, for MS Windows, 4 sections
2434952 TosISFw.exe:     PE32 executable (GUI) Intel 80386, for MS Windows, 5 sections
2172296 TosISFwSvc.exe:  PE32 executable (GUI) Intel 80386, for MS Windows, 5 sections
2362248 TosISFwTray.exe: PE32 executable (GUI) Intel 80386, for MS Windows, 5 sections
</code></pre></div>

<p>A quick look (filename, imports) hints at the following goals for each program:</p>

<ul>
  <li><code>ISFW.exe</code> is a driver (<code>DriverEntry</code> export), probably in charge of effectively flashing the update.</li>
  <li><code>TosISFw.exe</code> is the GUI</li>
  <li><code>TosISFwSvc.exe</code> is the userland service (as the service related imports show)</li>
  <li><code>TosISFwTray.exe</code> most probably handles a tray icon</li>
</ul>

<h3 id="finding-the-update-files">Finding the update files</h3>

<p>The obvious move is too grep for URLs in the various installed binaries. Unfortunately, it leads nowhere apart from URLs related to the digital signatures. However, grepping for <code>HttpOpenRequest</code>, an API often used by Windows programs to download files, gives two results: <code>TosISFw.exe</code> and <code>TosISFwSvc.exe</code>.</p>

<p>Let’s look at <code>TosISFwSvc.exe</code> which is smaller and let’s see if we can find the URL by checking the xrefs.</p>

<p>The call is in the function at 0x00401040, and looks like this:</p>

<div><pre><code><span>v15</span> <span>=</span> <span>HttpOpenRequestW</span><span>(</span><span>v14</span><span>,</span> <span>L"GET"</span><span>,</span> <span>&amp;</span><span>v36</span><span>[(</span><span>_DWORD</span><span>)</span><span>lpBuffer</span><span>],</span> <span>0</span><span>,</span> <span>(</span><span>LPCWSTR</span><span>)</span><span>szReferrer</span><span>,</span> <span>0</span><span>,</span> <span>0x84000000</span><span>,</span> <span>0</span><span>);</span>
</code></pre></div>

<p>the function is obviously a “download” helper, as all the API calls show. Let’s rename it <code>dlfile</code>. There are only two Xrefs to dlfile:</p>

<div><pre><code><span>if</span> <span>(</span> <span>!</span><span>RegOpenKeyExW</span><span>(</span>
        <span>HKEY_LOCAL_MACHINE</span><span>,</span>
        <span>L"SYSTEM</span><span>\\</span><span>CurrentControlSet</span><span>\\</span><span>Services</span><span>\\</span><span>TosISFwSvc"</span><span>,</span>
        <span>0</span><span>,</span>
        <span>0x20019u</span><span>,</span>
        <span>&amp;</span><span>phkResult</span><span>)</span>
  <span>&amp;&amp;</span> <span>readregstring</span><span>((</span><span>LPBYTE</span><span>)</span><span>&amp;</span><span>String</span><span>,</span> <span>&amp;</span><span>phkResult</span><span>,</span> <span>L"FwURL"</span><span>)</span>
  <span>&amp;&amp;</span> <span>lstrlenW</span><span>(</span><span>&amp;</span><span>String</span><span>)</span> <span>)</span>
<span>{</span>
  <span>sub_401000</span><span>();</span>
  <span>LOBYTE</span><span>(</span><span>v47</span><span>)</span> <span>=</span> <span>2</span><span>;</span>
  <span>if</span> <span>(</span> <span>dlfile</span><span>(</span><span>&amp;</span><span>String</span><span>,</span> <span>(</span><span>int</span><span>)</span><span>v38</span><span>)</span> <span>)</span>


<span>[...]</span>

<span>sub_4052E0</span><span>(</span><span>&amp;</span><span>lpValueName</span><span>,</span> <span>L"%s%d"</span><span>,</span> <span>L"URL"</span><span>,</span> <span>phkResult</span><span>);</span>
<span>v25</span> <span>=</span> <span>0</span><span>;</span>
<span>if</span> <span>(</span> <span>!</span><span>RegOpenKeyExW</span><span>(</span>
        <span>HKEY_LOCAL_MACHINE</span><span>,</span>
        <span>L"SYSTEM</span><span>\\</span><span>CurrentControlSet</span><span>\\</span><span>Services</span><span>\\</span><span>TosISFwSvc"</span><span>,</span>
        <span>0</span><span>,</span>
        <span>0x20019u</span><span>,</span>
        <span>&amp;</span><span>v25</span><span>)</span>
  <span>&amp;&amp;</span> <span>readregstring</span><span>((</span><span>LPBYTE</span><span>)</span><span>&amp;</span><span>String</span><span>,</span> <span>&amp;</span><span>v25</span><span>,</span> <span>lpValueName</span><span>)</span>
  <span>&amp;&amp;</span> <span>lstrlenW</span><span>(</span><span>&amp;</span><span>String</span><span>)</span>
  <span>&amp;&amp;</span> <span>dlfile</span><span>(</span><span>&amp;</span><span>String</span><span>,</span> <span>(</span><span>int</span><span>)</span><span>v36</span><span>)</span> <span>)</span>
</code></pre></div>

<p>The first one gives us our answer: the URL is stored in the registry. It’s actually written by the InstallShield setup.</p>

<p><a href="https://syscall.eu/blog/public/toshiba/regedit.png"><img src="https://syscall.eu/blog/public/toshiba/regedit.png" alt="disk"></a></p>

<p>The value is <code>http://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/ISFw.dat</code></p>

<h3 id="parsing-the-update-file">Parsing the update file</h3>

<p>The file is an ini file, which is trivial to read and parse:</p>

<div><pre><code><span>[VERS]</span>
<span>VERSION</span><span>=</span><span>"20240513"</span>
<span>[Firmware]</span>
<span>0000</span><span>=</span><span>qa060378.ftd</span>
<span>0000model</span><span>=</span><span>"TOSHIBA HDWG21E"</span>
<span>0000rev</span><span>=</span><span>"0603"</span>
<span>0000rev0000</span><span>=</span><span>"0601"</span>
<span>0000native</span><span>=</span><span>0</span>
<span>0000option</span><span>=</span><span>0</span>
<span>0001</span><span>=</span><span>qa060378.ftd</span>
<span>0001model</span><span>=</span><span>"TOSHIBA HDWG21C"</span>
<span>0001rev</span><span>=</span><span>"0603"</span>
<span>0001rev0000</span><span>=</span><span>"0601"</span>
<span>0001native</span><span>=</span><span>0</span>
<span>0001option</span><span>=</span><span>0</span>
<span>[...]</span>
<span>0008</span><span>=</span><span>sk060202.ftd</span>
<span>0008model</span><span>=</span><span>"TOSHIBA HDWG480 "</span>
<span>0008rev</span><span>=</span><span>"0602"</span>
<span>0008rev0000</span><span>=</span><span>"0601"</span>
<span>0008native</span><span>=</span><span>0</span>
<span>0008option</span><span>=</span><span>0</span>
<span>[...]</span>
<span>; 905CBD24
</span></code></pre></div>

<p>in my case, the drive is number 8. What’s interesting is the checksum at the end. It’s the CRC32 of the file, minus the last 10 bytes, which can be easily checked with the <code>slice</code> and <code>crc32</code> tools of my hacking Swiss army knife <a href="https://github.com/trou/rsbkb">rsbkb</a>:</p>

<div><pre><code>$ slice -- ISFw.dat 0 -10 | crc32
905cbd24
</code></pre></div>

<p>Now obviously, let’s try to download the relevant file:</p>

<div><pre><code>$ wget https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/sk060202.ftd
Resolving www.canvio.jp (www.canvio.jp)... 23.72.248.205, 23.72.248.202
Connecting to www.canvio.jp (www.canvio.jp)|23.72.248.205|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1171456 (1.1M)
[...]
</code></pre></div>

<p>Just for fun we can check if <a href="https://github.com/trou/cpu_rec_rs"><code>cpu_rec_rs</code></a> can identify any code in the binary:</p>

<div><pre><code><span>$</span><span> </span>~/tools/cpu_rec_rs/cpu_rec_rs sk060202.ftd
<span>Loading corpus from "/home/trou/tools/cpu_rec_rs/cpu_rec_corpus/*.corpus"
-------------------------------------------------
    File     |   Range    | Detected Architecture
-------------------------------------------------
sk060202.ftd | Whole file | ARMhf
-------------------------------------------------
</span></code></pre></div>

<p>So the firmware is probably running on an ARM SoC (it is).</p>

<h3 id="understanding-the-update-process">Understanding the update process</h3>

<p>Now, how is the file sent to the drive to actually perform the update? Recall that we have 4 binaries and we saw the <code>ISFW.exe</code> is actually a driver.</p>

<p>The <code>DriverEntry</code> function is actually extremely simple:</p>

<div><pre><code><span>NTSTATUS</span> <span>__stdcall</span> <span>DriverEntry</span><span>(</span><span>PDRIVER_OBJECT</span> <span>DriverObject</span><span>,</span> <span>PUNICODE_STRING</span> <span>RegistryPath</span><span>)</span>
<span>{</span>
  <span>int</span> <span>v2</span><span>;</span> <span>// eax</span>

  <span>readregistry</span><span>();</span>
  <span>v2</span> <span>=</span> <span>flashfirmware</span><span>();</span>
  <span>sub_1001812</span><span>(</span><span>v2</span> <span>%</span> <span>100</span> <span>==</span> <span>0</span><span>,</span> <span>1</span><span>,</span> <span>v2</span><span>);</span>
  <span>return</span> <span>NtTerminateProcess</span><span>((</span><span>HANDLE</span><span>)</span><span>0xFFFFFFFF</span><span>,</span> <span>0</span><span>);</span>
<span>}</span>
</code></pre></div>

<p>I’ve already renamed <code>readregistry</code> and <code>flashfirmware</code> as the functions are easy to identify:</p>

<div><pre><code><span>char</span> <span>readregistry</span><span>()</span>
<span>{</span>
  <span>[...]</span>
  <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>DestinationString</span><span>,</span> <span>L"</span><span>\\</span><span>REGISTRY</span><span>\\</span><span>MACHINE</span><span>\\</span><span>SYSTEM</span><span>\\</span><span>CurrentControlSet</span><span>\\</span><span>Services</span><span>\\</span><span>TosISFwSvc"</span><span>);</span>
  <span>[...]</span>
  <span>if</span> <span>(</span> <span>NtOpenKey</span><span>(</span><span>&amp;</span><span>KeyHandle</span><span>,</span> <span>0x20019u</span><span>,</span> <span>&amp;</span><span>ObjectAttributes</span><span>)</span> <span>&gt;=</span> <span>0</span> <span>)</span>
  <span>{</span>
    <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_Serial"</span><span>);</span>
    <span>if</span> <span>(</span> <span>NtQueryValueKey</span><span>(</span><span>KeyHandle</span><span>,</span> <span>&amp;</span><span>ValueName</span><span>,</span> <span>KeyValuePartialInformation</span><span>,</span> <span>KeyValueInformation</span><span>,</span> <span>0x800u</span><span>,</span> <span>&amp;</span><span>ResultLength</span><span>)</span> <span>&gt;=</span> <span>0</span> <span>)</span>
    <span>{</span>
      <span>memcpy</span><span>(</span><span>&amp;</span><span>fwserial</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
       <span>[...]</span>
       <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_CurRev"</span><span>);</span>
       <span>memcpy</span><span>(</span><span>&amp;</span><span>fw_cur</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
        <span>[...]</span>
        <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_NewRev"</span><span>);</span>
        <span>memcpy</span><span>(</span><span>fw_new</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
          <span>[...]</span>
          <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_Model"</span><span>);</span>
          <span>memcpy</span><span>(</span><span>fw_model</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
            <span>[...]</span>
            <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_FWFile"</span><span>);</span>
            <span>wmemcpy</span><span>(</span><span>path</span><span>,</span> <span>L"</span><span>\\</span><span>??</span><span>\\</span><span>"</span><span>,</span> <span>4</span><span>);</span>
            <span>memcpy</span><span>(</span><span>&amp;</span><span>path</span> <span>+</span> <span>4</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
  <span>[...]</span>
<span>}</span>
</code></pre></div>

<p>Registry values (set by <code>TosISFwSvc.exe</code>) are read and copied into global variables, which I renamed according the registry value name.</p>

<p>Here’s the start of <code>flashfirmware</code>:</p>

<div><pre><code><span>int</span> <span>flashfirmware</span><span>()</span>
<span>{</span>
  <span>[...]</span>
  <span>Handle</span> <span>=</span> <span>0</span><span>;</span>
  <span>fwdata</span> <span>=</span> <span>0</span><span>;</span>
  <span>fwsize</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>&amp;</span><span>drivedata</span><span>,</span> <span>0</span><span>,</span> <span>sizeof</span><span>(</span><span>drivedata</span><span>));</span>
  <span>printf</span><span>(</span><span>L"%s Firmware: %s -&gt; %s</span><span>\n</span><span>"</span><span>,</span> <span>fw_model</span><span>,</span> <span>&amp;</span><span>fw_cur</span><span>,</span> <span>fw_new</span><span>);</span>
  <span>printf</span><span>(</span><span>L"DO NOT TURN OFF THE PC WHILE ANY FIRMWARE UPDATE IS RUNNING.</span><span>\n</span><span>"</span><span>);</span>
  <span>printf</span><span>(</span>
    <span>L"Your device may become unusable if you do this and Toshiba is not </span><span>\n</span><span>"</span>
     <span>"responsible for any damage, including any necessary replacement of </span><span>\n</span><span>"</span>
     <span>"the unit, caused by your doing so.</span><span>\n</span><span>"</span><span>);</span>
  <span>HeapHandle</span> <span>=</span> <span>RtlCreateHeap</span><span>(</span><span>2u</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>);</span>
  <span>if</span> <span>(</span> <span>HeapHandle</span> <span>)</span>
  <span>{</span>
    <span>status</span> <span>=</span> <span>readfile</span><span>(</span><span>&amp;</span><span>path</span><span>,</span> <span>&amp;</span><span>fwdata</span><span>,</span> <span>&amp;</span><span>fwsize</span><span>);</span>
    <span>if</span> <span>(</span> <span>!</span><span>(</span><span>status</span> <span>%</span> <span>100</span><span>)</span> <span>)</span>
    <span>{</span>
      <span>Handle</span> <span>=</span> <span>verifydisk</span><span>(</span><span>&amp;</span><span>fwserial</span><span>,</span> <span>&amp;</span><span>fw_cur</span><span>,</span> <span>fw_model</span><span>,</span> <span>&amp;</span><span>drivedata</span><span>);</span>
<span>[...]</span>
</code></pre></div>

<p><code>verifydisk</code> is very important, yet relatively simple (with everything already renamed):</p>

<div><pre><code><span>HANDLE</span> <span>__stdcall</span> <span>verifydisk</span><span>(</span><span>PCWSTR</span> <span>serial</span><span>,</span> <span>PCWSTR</span> <span>cur</span><span>,</span> <span>WCHAR</span> <span>*</span><span>model</span><span>,</span> <span>IDENTIFY_DEVICE_DATA</span> <span>*</span><span>devdata</span><span>)</span>
<span>{</span>
  <span>HANDLE</span> <span>hdl</span><span>;</span> <span>// edi</span>
  <span>UNICODE_STRING</span> <span>cur_</span><span>;</span> <span>// [esp+10h] [ebp-104h] BYREF</span>
  <span>struct</span> <span>_UNICODE_STRING</span> <span>serial_</span><span>;</span> <span>// [esp+18h] [ebp-FCh] BYREF</span>
  <span>UNICODE_STRING</span> <span>model_from_drive_u</span><span>;</span> <span>// [esp+20h] [ebp-F4h] BYREF</span>
  <span>UNICODE_STRING</span> <span>serial_from_drive_u</span><span>;</span> <span>// [esp+28h] [ebp-ECh] BYREF</span>
  <span>UNICODE_STRING</span> <span>model_</span><span>;</span> <span>// [esp+30h] [ebp-E4h] BYREF</span>
  <span>UNICODE_STRING</span> <span>fwrev_from_drive_u</span><span>;</span> <span>// [esp+38h] [ebp-DCh] BYREF</span>
  <span>DWORD</span> <span>*</span><span>drivenumber</span><span>;</span> <span>// [esp+40h] [ebp-D4h]</span>
  <span>HANDLE</span> <span>hdl_</span><span>;</span> <span>// [esp+44h] [ebp-D0h]</span>
  <span>char</span> <span>v14</span><span>;</span> <span>// [esp+4Bh] [ebp-C9h] BYREF</span>
  <span>WCHAR</span> <span>model_from_drive</span><span>[</span><span>50</span><span>];</span> <span>// [esp+4Ch] [ebp-C8h] BYREF</span>
  <span>WCHAR</span> <span>serial_from_drive</span><span>[</span><span>30</span><span>];</span> <span>// [esp+B0h] [ebp-64h] BYREF</span>
  <span>WCHAR</span> <span>fwrev_from_drive</span><span>[</span><span>18</span><span>];</span> <span>// [esp+ECh] [ebp-28h] BYREF</span>

  <span>[...]</span>
  <span>for</span> <span>(</span> <span>drivenumber</span> <span>=</span> <span>0</span><span>;</span> <span>(</span><span>unsigned</span> <span>int</span><span>)</span><span>drivenumber</span> <span>&lt;</span> <span>0x20</span><span>;</span> <span>drivenumber</span> <span>=</span> <span>(</span><span>DWORD</span> <span>*</span><span>)((</span><span>char</span> <span>*</span><span>)</span><span>drivenumber</span> <span>+</span> <span>1</span><span>)</span> <span>)</span>
  <span>{</span>
    <span>[...]</span>
    <span>hdl</span> <span>=</span> <span>opendrive</span><span>((</span><span>char</span><span>)</span><span>drivenumber</span><span>);</span>
    <span>if</span> <span>(</span> <span>!</span><span>hdl</span> <span>)</span>
      <span>break</span><span>;</span>
    <span>if</span> <span>(</span> <span>!</span><span>getdevprop</span><span>(</span><span>hdl</span><span>,</span> <span>&amp;</span><span>bustype</span><span>)</span> <span>||</span> <span>bustype</span> <span>==</span> <span>BusTypeUsb</span> <span>)</span> <span>{</span>
      <span>NtClose</span><span>(</span><span>hdl</span><span>);</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>if</span> <span>(</span> <span>get_IDENTIFY_DEVICE_DATA</span><span>(</span><span>hdl_</span><span>,</span> <span>devdata</span><span>,</span> <span>0x200u</span><span>)</span> <span>)</span> <span>{</span>
        <span>get_drive_serial</span><span>(</span><span>devdata</span><span>,</span> <span>serial_from_drive</span><span>,</span> <span>30</span><span>,</span> <span>1</span><span>);</span>
        <span>get_drive_fw_rev</span><span>(</span><span>devdata</span><span>,</span> <span>fwrev_from_drive</span><span>,</span> <span>18</span><span>,</span> <span>1</span><span>);</span>
        <span>get_drive_model</span><span>(</span><span>devdata</span><span>,</span> <span>model_from_drive</span><span>,</span> <span>50</span><span>,</span> <span>1</span><span>);</span>
        <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>serial_from_drive_u</span><span>,</span> <span>serial_from_drive</span><span>);</span>
        <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>fwrev_from_drive_u</span><span>,</span> <span>fwrev_from_drive</span><span>);</span>
        <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>model_from_drive_u</span><span>,</span> <span>model_from_drive</span><span>);</span>
        <span>if</span> <span>(</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>serial_</span><span>,</span> <span>&amp;</span><span>serial_from_drive_u</span><span>,</span> <span>0</span><span>)</span> <span>)</span>
        <span>{</span>
          <span>if</span> <span>(</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>cur_</span><span>,</span> <span>&amp;</span><span>fwrev_from_drive_u</span><span>,</span> <span>0</span><span>)</span>
            <span>&amp;&amp;</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>model_</span><span>,</span> <span>&amp;</span><span>model_from_drive_u</span><span>,</span> <span>0</span><span>)</span> <span>)</span>
          <span>{</span>
            <span>return</span> <span>hdl_</span><span>;</span>
          <span>}</span>
        <span>}</span>
      <span>}</span>
      <span>NtClose</span><span>(</span><span>hdl_</span><span>);</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>0</span><span>;</span>
<span>}</span>
</code></pre></div>

<h3 id="interacting-with-the-drive">Interacting with the drive</h3>

<h4 id="verifying-the-drive-type">Verifying the drive type</h4>

<p>Let’s dive into the <code>opendrive</code> and <code>getdevprop</code> functions:</p>

<div><pre><code><span>HANDLE</span> <span>__stdcall</span> <span>opendrive</span><span>(</span><span>char</span> <span>Args</span><span>)</span>
<span>{</span>
  <span>[...]</span>
  <span>HANDLE</span> <span>FileHandle</span><span>;</span> <span>// [esp+30h] [ebp-88h] BYREF</span>
  <span>WCHAR</span> <span>SourceString</span><span>[</span><span>64</span><span>];</span> <span>// [esp+34h] [ebp-84h] BYREF</span>

  <span>DestinationString</span><span>.</span><span>Length</span> <span>=</span> <span>0</span><span>;</span>
  <span>*</span><span>(</span><span>_DWORD</span> <span>*</span><span>)</span><span>&amp;</span><span>DestinationString</span><span>.</span><span>MaximumLength</span> <span>=</span> <span>0</span><span>;</span>
  <span>HIWORD</span><span>(</span><span>DestinationString</span><span>.</span><span>Buffer</span><span>)</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>SourceString</span><span>,</span> <span>0</span><span>,</span> <span>sizeof</span><span>(</span><span>SourceString</span><span>));</span>
  <span>FileHandle</span> <span>=</span> <span>0</span><span>;</span>
  <span>wsprintf</span><span>(</span><span>SourceString</span><span>,</span> <span>64</span><span>,</span> <span>(</span><span>wchar_t</span> <span>*</span><span>)</span><span>L"</span><span>\\</span><span>??</span><span>\\</span><span>PhysicalDrive%u"</span><span>,</span> <span>Args</span><span>);</span>
  <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>DestinationString</span><span>,</span> <span>SourceString</span><span>);</span>
  <span>[...]</span>
  <span>NtOpenFile</span><span>(</span><span>&amp;</span><span>FileHandle</span><span>,</span> <span>0x100003u</span><span>,</span> <span>&amp;</span><span>ObjectAttributes</span><span>,</span> <span>&amp;</span><span>IoStatusBlock</span><span>,</span> <span>3u</span><span>,</span> <span>0x20u</span><span>);</span>
  <span>return</span> <span>FileHandle</span><span>;</span>
<span>}</span>

<span>char</span> <span>__stdcall</span> <span>getdevprop</span><span>(</span><span>HANDLE</span> <span>hdl</span><span>,</span> <span>char</span> <span>*</span><span>bustype</span><span>)</span>
<span>{</span>
  <span>char</span> <span>tmp</span><span>;</span> <span>// al</span>
  <span>struct</span> <span>_IO_STATUS_BLOCK</span> <span>IoStatusBlock</span><span>;</span> <span>// [esp+Ch] [ebp-1018h] BYREF</span>
  <span>char</span> <span>*</span><span>bustype_</span><span>;</span> <span>// [esp+14h] [ebp-1010h]</span>
  <span>HANDLE</span> <span>FileHandle</span><span>;</span> <span>// [esp+18h] [ebp-100Ch]</span>
  <span>char</span> <span>retvalue</span><span>;</span> <span>// [esp+1Fh] [ebp-1005h]</span>
  <span>STORAGE_DEVICE_DESCRIPTOR</span> <span>InputBuffer</span><span>;</span> <span>// [esp+20h] [ebp-1004h] BYREF</span>

  <span>FileHandle</span> <span>=</span> <span>hdl</span><span>;</span>
  <span>bustype_</span> <span>=</span> <span>bustype</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Status</span> <span>=</span> <span>0</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Information</span> <span>=</span> <span>0</span><span>;</span>
  <span>retvalue</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0</span><span>,</span> <span>0x1000u</span><span>);</span>
  <span>if</span> <span>(</span> <span>NtDeviceIoControlFile</span><span>(</span> <span>hdl</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>&amp;</span><span>IoStatusBlock</span><span>,</span>
        <span>IOCTL_STORAGE_QUERY_PROPERTY</span><span>,</span>
         <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x1000u</span><span>,</span> <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x1000u</span><span>)</span> <span>&lt;</span> <span>0</span> <span>)</span> <span>{</span>
    <span>tmp</span> <span>=</span> <span>0</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>tmp</span> <span>=</span> <span>InputBuffer</span><span>.</span><span>BusType</span><span>;</span>
    <span>retvalue</span> <span>=</span> <span>1</span><span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span> <span>bustype_</span> <span>)</span>
    <span>*</span><span>bustype_</span> <span>=</span> <span>tmp</span><span>;</span>
  <span>return</span> <span>retvalue</span><span>;</span>
<span>}</span>
</code></pre></div>

<p><code>opendrive</code> returns a handle on a given <code>PhysicalDrive</code>, which is then used by <code>getdevprop</code>’s <a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntdeviceiocontrolfile"><code>NtDeviceIoControlFile</code></a>.
Using IDA’s “standard enums”, I remapped <code>0x2D1400</code> to its readable definition: <a href="https://learn.microsoft.com/en-us/windows/win32/api/winioctl/ni-winioctl-ioctl_storage_query_property"><code>IOCTL_STORAGE_QUERY_PROPERTY</code></a>.</p>

<p>As <code>InputBuffer</code> is set to 0 before the call, the returned data is a <code>STORAGE_DEVICE_DESCRIPTOR</code> structure, which is used by <code>verifydisk</code> to verify if the drive is connected through USB (<code>BusTypeUsb</code>) and bails out if that’s the case.</p>

<h4 id="verifying-the-drive-model">Verifying the drive model</h4>

<p><code>get_IDENTIFY_DEVICE_DATA</code> is then called by <code>verifydisk</code>:</p>

<div><pre><code><span>char</span> <span>__stdcall</span> <span>get_IDENTIFY_DEVICE_DATA</span><span>(</span><span>HANDLE</span> <span>hdl</span><span>,</span> <span>void</span> <span>*</span><span>buff</span><span>,</span> <span>size_t</span> <span>Size</span><span>)</span>
<span>{</span>
  <span>struct</span> <span>_IO_STATUS_BLOCK</span> <span>IoStatusBlock</span><span>;</span> <span>// [esp+Ch] [ebp-3Ch] BYREF</span>
  <span>HANDLE</span> <span>FileHandle</span><span>;</span> <span>// [esp+14h] [ebp-34h]</span>
  <span>char</span> <span>v6</span><span>;</span> <span>// [esp+1Bh] [ebp-2Dh]</span>
  <span>ATA_PASS_THROUGH_DIRECT</span> <span>InputBuffer</span><span>;</span> <span>// [esp+1Ch] [ebp-2Ch] BYREF</span>

  <span>FileHandle</span> <span>=</span> <span>hdl</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Status</span> <span>=</span> <span>0</span><span>;</span>
  <span>v6</span> <span>=</span> <span>0</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Information</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>buff</span><span>,</span> <span>0</span><span>,</span> <span>Size</span><span>);</span>
  <span>memset</span><span>(</span><span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0</span><span>,</span> <span>sizeof</span><span>(</span><span>InputBuffer</span><span>));</span>
  <span>InputBuffer</span><span>.</span><span>Length</span> <span>=</span> <span>0x28</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>AtaFlags</span> <span>=</span> <span>ATA_FLAGS_DRDY_REQUIRED</span><span>|</span><span>ATA_FLAGS_DATA_IN</span><span>|</span><span>ATA_FLAGS_NO_MULTIPLE</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>DataTransferLength</span> <span>=</span> <span>Size</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>TimeOutValue</span> <span>=</span> <span>10</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>DataBuffer</span> <span>=</span> <span>buff</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Command</span><span>]</span> <span>=</span> <span>0xEC</span><span>;</span>
  <span>if</span> <span>(</span> <span>NtDeviceIoControlFile</span><span>(</span><span>hdl</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>&amp;</span><span>IoStatusBlock</span><span>,</span>
         <span>IOCTL_ATA_PASS_THROUGH_DIRECT</span><span>,</span>
         <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x28u</span><span>,</span> <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x28u</span><span>)</span> <span>&gt;=</span> <span>0</span>
    <span>&amp;&amp;</span> <span>(</span><span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Status</span><span>]</span> <span>&amp;</span> <span>9</span><span>)</span> <span>==</span> <span>0</span> <span>)</span>
  <span>{</span>
    <span>return</span> <span>1</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>v6</span><span>;</span>
<span>}</span>
</code></pre></div>

<p><code>NtDeviceIoControlFile</code> is now used with <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddscsi/ni-ntddscsi-ioctl_ata_pass_through_direct"><code>IOCTL_ATA_PASS_THROUGH_DIRECT</code></a>, which as the name implies, sends a raw ATA command to the drive. Actually understanding the request is a bit complex as the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddscsi/ns-ntddscsi-_ata_pass_through_direct"><code>ATA_PASS_THROUGH_DIRECT</code></a> structure specifies both data buffers and “registers” through the <code>CurrentTaskFile</code> field.</p>

<p><code>CurrentTaskFile</code> is an array used to index 8 registers, both as input and output. Using the documentation, we can create two enums to use in IDA:</p>

<div><pre><code><span>enum</span> <span>ATA_INPUT_REGISTERS</span> <span>:</span> <span>__int32</span>
<span>{</span>
  <span>reg_Features</span> <span>=</span> <span>0x0</span><span>,</span>
  <span>reg_Sector_Count_in</span> <span>=</span> <span>0x1</span><span>,</span>
  <span>reg_Sector_Number_in</span> <span>=</span> <span>0x2</span><span>,</span>
  <span>reg_Cylinder_Low_in</span> <span>=</span> <span>0x3</span><span>,</span>
  <span>reg_Cylinder_High_in</span> <span>=</span> <span>0x4</span><span>,</span>
  <span>reg_Device_Head_in</span> <span>=</span> <span>0x5</span><span>,</span>
  <span>reg_Command</span> <span>=</span> <span>0x6</span><span>,</span>
  <span>reg_Reserved</span> <span>=</span> <span>0x7</span><span>,</span>
<span>};</span>

<span>enum</span> <span>ATA_OUTPUT_REGISTERS</span> <span>:</span> <span>__int32</span>
<span>{</span>
  <span>reg_Error</span> <span>=</span> <span>0x0</span><span>,</span>
  <span>reg_Sector_Count_out</span> <span>=</span> <span>0x1</span><span>,</span>
  <span>reg_Sector_Number_out</span> <span>=</span> <span>0x2</span><span>,</span>
  <span>reg_Cylinder_Low_out</span> <span>=</span> <span>0x3</span><span>,</span>
  <span>reg_Cylinder_High_out</span> <span>=</span> <span>0x4</span><span>,</span>
  <span>reg_Device_Head_out</span> <span>=</span> <span>0x5</span><span>,</span>
  <span>reg_Status</span> <span>=</span> <span>0x6</span><span>,</span>
  <span>reg_Reserved_out</span> <span>=</span> <span>0x7</span><span>,</span>
<span>};</span>
</code></pre></div>

<p>So the command here is <code>0xEC</code>. The ATA/ATAPI command set specification, found <a href="https://read.seas.harvard.edu/cs161/2024/pdf/ata-atapi-8.pdf">here</a>, describes the <code>IDENTIFY DEVICE – ECh, PIO Data-In</code> command, which returns a <em>lot</em> of data. Thankfully, Microsoft gives us the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ata/ns-ata-_identify_device_data"><code>IDENTIFY_DEVICE_DATA</code></a> structure which has everything.</p>

<p>The following code then verify we have the “right” drive by comparing the serial, model and firmware version from the returned data to the ones stored in the registry.</p>

<div><pre><code><span>int</span> <span>__stdcall</span> <span>get_drive_serial</span><span>(</span><span>IDENTIFY_DEVICE_DATA</span> <span>*</span><span>drivedata</span><span>,</span> <span>wchar_t</span> <span>*</span><span>dest</span><span>,</span> <span>int</span> <span>destlen</span><span>,</span> <span>char</span> <span>stripflag</span><span>)</span>
<span>{</span>
  <span>return</span> <span>(</span><span>int</span><span>)</span><span>getdrive_data_string</span><span>(</span> <span>drivedata</span><span>,</span> <span>dest</span><span>,</span> <span>destlen</span><span>,</span>
                <span>offsetof</span><span>(</span><span>IDENTIFY_DEVICE_DATA</span><span>,</span> <span>SerialNumber</span><span>),</span> <span>20</span><span>,</span>
                <span>stripflag</span><span>);</span>
<span>}</span>

  <span>[...]</span>
  <span>get_drive_serial</span><span>(</span><span>devdata</span><span>,</span> <span>serial_from_drive</span><span>,</span> <span>30</span><span>,</span> <span>1</span><span>);</span>
  <span>[...]</span>
  <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>serial_from_drive_u</span><span>,</span> <span>serial_from_drive</span><span>);</span>
  <span>[...]</span>
  <span>if</span> <span>(</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>serial_</span><span>,</span> <span>&amp;</span><span>serial_from_drive_u</span><span>,</span> <span>0</span><span>)</span> <span>)</span>
        <span>{</span>
          <span>if</span> <span>(</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>cur_</span><span>,</span> <span>&amp;</span><span>fwrev_from_drive_u</span><span>,</span> <span>0</span><span>)</span>
            <span>&amp;&amp;</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>model_</span><span>,</span> <span>&amp;</span><span>model_from_drive_u</span><span>,</span> <span>0</span><span>)</span> <span>)</span>
</code></pre></div>

<h4 id="actually-sending-the-firmware-file">Actually sending the firmware file</h4>

<p>Once the driver has identified and verified the disk is actually flashable, it proceeds with the actual update:</p>

<div><pre><code><span>[...]</span>
      <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>=</span> <span>drivedata</span><span>.</span><span>MaxBlocksPerDownloadMicrocodeMode03</span><span>;</span>
      <span>if</span> <span>(</span> <span>!</span><span>drivedata</span><span>.</span><span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>||</span> <span>drivedata</span><span>.</span><span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>==</span> <span>0xFFFF</span> <span>)</span> <span>{</span>
        <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>=</span> <span>128</span><span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span> <span>drivedata</span><span>.</span><span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>&gt;=</span> <span>0x80u</span> <span>)</span> <span>{</span>
        <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>=</span> <span>128</span><span>;</span>
      <span>}</span>
      <span>if</span> <span>(</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>&gt;=</span> <span>drivedata</span><span>.</span><span>MinBlocksPerDownloadMicrocodeMode03</span>
        <span>&amp;&amp;</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>)</span> <span>{</span>
        <span>fwblocks</span> <span>=</span> <span>fwsize</span> <span>&gt;&gt;</span> <span>9</span><span>;</span>
        <span>fwblocks2</span> <span>=</span> <span>fwsize</span> <span>&gt;&gt;</span> <span>9</span><span>;</span>
        <span>v1</span> <span>=</span> <span>60</span><span>;</span>
        <span>do</span> <span>{</span>
          <span>printprogress</span><span>();</span>
          <span>wait</span><span>((</span><span>LARGE_INTEGER</span><span>)</span><span>500LL</span><span>);</span>
          <span>--</span><span>v1</span><span>;</span>
        <span>}</span> <span>while</span> <span>(</span> <span>v1</span> <span>);</span>
        <span>for</span> <span>(</span> <span>fwsize</span> <span>=</span> <span>0</span><span>;</span> <span>(</span><span>int</span><span>)</span><span>fwsize</span> <span>&lt;</span> <span>30</span><span>;</span> <span>++</span><span>fwsize</span> <span>)</span> <span>{</span>
          <span>currentblock</span> <span>=</span> <span>0</span><span>;</span>
          <span>status</span> <span>=</span> <span>6000</span><span>;</span>
          <span>if</span> <span>(</span> <span>fwblocks</span> <span>)</span> <span>{</span>
            <span>fwdata1</span> <span>=</span> <span>fwdata</span><span>;</span>
            <span>MaxBytesPerDL</span> <span>=</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>&lt;&lt;</span> <span>9</span><span>;</span>
            <span>while</span> <span>(</span> <span>1</span> <span>)</span> <span>{</span>
              <span>printprogress</span><span>();</span>
              <span>blocks_to_flash</span> <span>=</span> <span>fwblocks2</span> <span>-</span> <span>currentblock</span><span>;</span>
              <span>if</span> <span>(</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>&lt;</span> <span>fwblocks2</span> <span>-</span> <span>currentblock</span> <span>)</span>
                <span>blocks_to_flash</span> <span>=</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span><span>;</span>
              <span>if</span> <span>(</span> <span>!</span><span>ATA_CMD_DOWNLOAD_MICRO</span><span>(</span><span>Handle</span><span>,</span> <span>currentblock</span><span>,</span> <span>blocks_to_flash</span><span>,</span> <span>fwdata1</span><span>)</span> <span>)</span>
                <span>break</span><span>;</span>
              <span>currentblock</span> <span>+=</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span><span>;</span>
              <span>fwdata1</span> <span>+=</span> <span>MaxBytesPerDL</span><span>;</span>
              <span>if</span> <span>(</span> <span>currentblock</span> <span>&gt;=</span> <span>fwblocks2</span> <span>)</span>
                <span>goto</span> <span>LABEL_25</span><span>;</span>
            <span>}</span>
            <span>status</span> <span>=</span> <span>6009</span><span>;</span>
<span>LABEL_25:</span>
            <span>fwblocks</span> <span>=</span> <span>fwblocks2</span><span>;</span>
          <span>}</span>
          <span>if</span> <span>(</span> <span>!</span><span>(</span><span>status</span> <span>%</span> <span>100</span><span>)</span> <span>)</span>
            <span>break</span><span>;</span>
          <span>v5</span> <span>=</span> <span>2</span><span>;</span>
          <span>do</span> <span>{</span>
            <span>printprogress</span><span>();</span>
            <span>wait</span><span>((</span><span>LARGE_INTEGER</span><span>)</span><span>500LL</span><span>);</span>
            <span>--</span><span>v5</span><span>;</span>
          <span>}</span> <span>while</span> <span>(</span> <span>v5</span> <span>);</span>
        <span>}</span>
        <span>if</span> <span>(</span> <span>!</span><span>(</span><span>status</span> <span>%</span> <span>100</span><span>)</span> <span>)</span>
        <span>{</span>
          <span>if</span> <span>(</span> <span>get_IDENTIFY_DEVICE_DATA</span><span>(</span><span>Handle</span><span>,</span> <span>&amp;</span><span>drivedata</span><span>,</span> <span>0x200u</span><span>)</span> <span>)</span> <span>{</span>
            <span>get_drive_fw_rev</span><span>(</span><span>&amp;</span><span>drivedata</span><span>,</span> <span>newfwrev</span><span>,</span> <span>18</span><span>,</span> <span>1</span><span>);</span>
            <span>if</span> <span>(</span> <span>wcsncmp</span><span>(</span><span>fw_new</span><span>,</span> <span>newfwrev</span><span>,</span> <span>wcslen</span><span>(</span><span>fw_new</span><span>))</span> <span>)</span>
              <span>status</span> <span>=</span> <span>6011</span><span>;</span>
          <span>}</span> <span>else</span> <span>{</span>
            <span>status</span> <span>=</span> <span>6010</span><span>;</span>
          <span>}</span>
        <span>}</span>
      <span>}</span> <span>else</span> <span>{</span>
<span>LABEL_35:</span>
        <span>status</span> <span>=</span> <span>6006</span><span>;</span>
      <span>}</span>
  <span>[...]</span>
  <span>if</span> <span>(</span> <span>status</span> <span>%</span> <span>100</span> <span>)</span>
    <span>printf</span><span>(</span><span>L"Update Failed.      </span><span>\n</span><span>"</span><span>);</span>
  <span>else</span>
    <span>printf</span><span>(</span><span>L"Update Succeeded.   </span><span>\n</span><span>"</span><span>);</span>
</code></pre></div>

<p>As you can see, the updater verifies an interesting field from the drive information data: <code>MaxBlocksPerDownloadMicrocodeMode03</code>. Let’s check what this means.</p>

<h3 id="sending-ata-firmware-update-commands">Sending ATA firmware update commands</h3>

<h4 id="documentation">Documentation</h4>

<p>The following excerpt from the ATA command set describes the meaning of the field:</p>

<div><pre><code>A.11.5.3.4 DM MAXIMUM TRANSFER SIZE field
If:
a) the value of the DM MAXIMUM TRANSFER SIZE field (see table A.30) is greater than zero;
b) the value of the DM MAXIMUM TRANSFER SIZE field is less than FFFFh;
c) the DOWNLOAD MICROCODE SUPPORTED bit (see A.11.5.2.20) is set to one or the DOWNLOAD MICROCODE DMA SUPPORTED bit (see A.11.5.2.6) is set to one; and
d) the DM OFFSETS DEFERRED SUPPORTED bit (see A.11.5.3.1) is set to one, or the DM OFFSETS IMMEDIATE
SUPPORTED bit (see A.11.5.3.3) is set to one, then the DM MAXIMUM TRANSFER SIZE field indicates the maximum number of 512-byte data blocks permitted by a DOWNLOAD MICROCODE command (see 7.7) or a DOWNLOAD MICROCODE DMA command (see 7.8) that specifies a subcommand of:
a) Download with offsets and save microcode for immediate and future use (i.e., 03h); or
b) Download with offsets and save microcode for future use (i.e., 0Eh).
Otherwise, no maximum is indicated (i.e., there is no maximum number of 512-byte data blocks).
The IDENTIFY DEVICE data contains a copy of the DM MAXIMUM TRANSFER SIZE field (see IDENTIFY DEVICE
data word 235 in table 45).
</code></pre></div>

<p>Of course, we want to check this <code>DOWNLOAD MICROCODE</code> command:</p>

<div><pre><code>The DOWNLOAD MICROCODE command allows the host to alter the device’s microcode. The data transferred
using the DOWNLOAD MICROCODE command and the DOWNLOAD MICROCODE DMA command is vendor
specific.
[...]
Downloading and activating microcode involves the following steps:
1) download: the host transfers updated microcode data to the device in one or more DOWNLOAD
MICROCODE commands or DOWNLOAD MICROCODE DMA commands;
2) save: after receiving the complete updated microcode data, if specified by the download microcode
mode, then the device shall save the updated microcode data to nonvolatile storage; and
3) activate: the device begins using the saved or deferred microcode data for the first time after an event
specified by the download microcode mode and the saved or deferred microcode data becomes the
active microcode data.

The BLOCK COUNT field specifies the number of 512-byte data blocks that shall be transferred. The BLOCK COUNT
field is specified in the COUNT field and the LBA field (see table 37).
</code></pre></div>

<p><code>DOWNLOAD</code> Subcommands actually define the update behavior:</p>

<p><a href="https://syscall.eu/blog/public/toshiba/download_subcommands.png"><img src="https://syscall.eu/blog/public/toshiba/download_subcommands.png" alt="disk"></a></p>

<h3 id="actual-code">Actual code</h3>

<div><pre><code><span>char</span> <span>ATA_CMD_DOWNLOAD_MICRO</span><span>(</span><span>HANDLE</span> <span>FileHandle</span><span>,</span> <span>__int16</span> <span>currentblock</span><span>,</span> <span>int</span> <span>blocks_to_flash</span><span>,</span> <span>void</span> <span>*</span><span>fwdata</span><span>)</span>
<span>{</span>
  <span>struct</span> <span>_IO_STATUS_BLOCK</span> <span>IoStatusBlock</span><span>;</span> <span>// [esp+Ch] [ebp-38h] BYREF</span>
  <span>char</span> <span>v6</span><span>;</span> <span>// [esp+17h] [ebp-2Dh]</span>
  <span>ATA_PASS_THROUGH_DIRECT</span> <span>InputBuffer</span><span>;</span> <span>// [esp+18h] [ebp-2Ch] BYREF</span>

  <span>IoStatusBlock</span><span>.</span><span>Status</span> <span>=</span> <span>0</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Information</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0</span><span>,</span> <span>sizeof</span><span>(</span><span>InputBuffer</span><span>));</span>
  <span>InputBuffer</span><span>.</span><span>Length</span> <span>=</span> <span>0x28</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>AtaFlags</span> <span>=</span> <span>ATA_FLAGS_DRDY_REQUIRED</span><span>|</span><span>ATA_FLAGS_DATA_OUT</span><span>|</span><span>ATA_FLAGS_NO_MULTIPLE</span><span>;</span>
  <span>*</span><span>(</span><span>_WORD</span> <span>*</span><span>)</span><span>&amp;</span><span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Sector_Count_in</span><span>]</span> <span>=</span> <span>blocks_to_flash</span><span>;</span><span>// BLOCK COUNT</span>
  <span>*</span><span>(</span><span>_WORD</span> <span>*</span><span>)</span><span>&amp;</span><span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Cylinder_Low_in</span><span>]</span> <span>=</span> <span>currentblock</span><span>;</span><span>// BUFFER OFFSET</span>
  <span>v6</span> <span>=</span> <span>0</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>DataTransferLength</span> <span>=</span> <span>blocks_to_flash</span> <span>&lt;&lt;</span> <span>9</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>TimeOutValue</span> <span>=</span> <span>70</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>DataBuffer</span> <span>=</span> <span>fwdata</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Features</span><span>]</span> <span>=</span> <span>3</span><span>;</span><span>// mode 3</span>
  <span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Device_Head_in</span><span>]</span> <span>=</span> <span>0xE0</span><span>;</span><span>// OBSOLETE7|N/A|OBSOLETE5</span>
  <span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Command</span><span>]</span> <span>=</span> <span>IDE_COMMAND_DOWNLOAD_MICROCODE</span><span>;</span>
  <span>if</span> <span>(</span> <span>NtDeviceIoControlFile</span><span>(</span><span>FileHandle</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>&amp;</span><span>IoStatusBlock</span><span>,</span>
         <span>IOCTL_ATA_PASS_THROUGH_DIRECT</span><span>,</span>
         <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x28u</span><span>,</span> <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x28u</span><span>)</span> <span>&gt;=</span> <span>0</span>
    <span>&amp;&amp;</span> <span>(</span><span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>6</span><span>]</span> <span>&amp;</span> <span>9</span><span>)</span> <span>==</span> <span>0</span> <span>)</span><span>// status</span>
  <span>{</span>
    <span>return</span> <span>1</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>v6</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>As you can see, the <code>ATA_CMD_DOWNLOAD_MICRO</code> just follows the specification. The only weird point is the <code>Device</code> register, which is basically obsolete, but is set to <code>0xE0</code>.
Just to be sure, I checked <code>hdparm</code> source code to see the value set in the command, and indeed, they also set it to <code>0xE0</code>, so it’s probably legacy cruft:</p>

<div><pre><code><span>enum</span> <span>{</span>
	<span>ATA_USING_LBA</span>		<span>=</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>6</span><span>),</span>
	<span>ATA_STAT_DRQ</span>		<span>=</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>3</span><span>),</span>
	<span>ATA_STAT_ERR</span>		<span>=</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>0</span><span>),</span>
<span>};</span>

    <span>[...]</span>
	<span>r</span><span>-&gt;</span><span>lob</span><span>.</span><span>dev</span>   <span>=</span> <span>0xa0</span> <span>|</span> <span>ATA_USING_LBA</span><span>;</span>
</code></pre></div>

<h3 id="conclusion">Conclusion</h3>

<p>So basically, the updater does:</p>

<ul>
  <li>download the list of updates</li>
  <li>check if a drive matches, set registry values</li>
  <li>the driver takes over and:
    <ul>
      <li>checks if the drive is not connected through USB</li>
      <li>verifies it’s the actual drive specified in the registry using the <code>IDENTIFY DEVICE</code> command</li>
      <li>loops and sends the firmware update, 128 512-bytes chunks at a time, using the <code>DOWNLOAD MICROCODE</code> command</li>
      <li>verifies the drive was updated using the <code>IDENTIFY DEVICE</code> command</li>
    </ul>
  </li>
</ul>

<h4 id="actually-doing-the-update">Actually doing the update</h4>

<p>YOLO, I tried on my main NAS drive:</p>

<div><pre><code><span># hdparm -I /dev/sdb | grep Firmware
</span>	<span>Firmware</span> <span>Revision</span><span>:</span>  <span>0601</span>
<span># hdparm --fwdownload-mode3 sk060202.ftd --yes-i-know-what-i-am-doing --please-destroy-my-drive /dev/sdb
</span><span>/</span><span>dev</span><span>/</span><span>sdb</span><span>:</span>
<span>fwdownload</span><span>:</span> <span>xfer_mode</span><span>=</span><span>3</span> <span>min</span><span>=</span><span>1</span> <span>max</span><span>=</span><span>4224</span> <span>size</span><span>=</span><span>512</span>
<spanspan>
<span>.</span> <span>Done</span><span>.</span>
<span># hdparm -I /dev/sdb | grep Firmware
</span>	<span>Firmware</span> <span>Revision</span><span>:</span>  <span>0602</span>
</code></pre></div>

<p><strong>\o/</strong></p>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Telephone Line Rural Outside Plant (105 pts)]]></title>
            <link>http://cityinfrastructure.com/single.php?d=RuralOutsidePlant&amp;t=Rural%20Outside%20Plant</link>
            <guid>41423303</guid>
            <pubDate>Mon, 02 Sep 2024 07:21:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://cityinfrastructure.com/single.php?d=RuralOutsidePlant&#x26;t=Rural%20Outside%20Plant">http://cityinfrastructure.com/single.php?d=RuralOutsidePlant&#x26;t=Rural%20Outside%20Plant</a>, See on <a href="https://news.ycombinator.com/item?id=41423303">Hacker News</a></p>
<div id="readability-page-1" class="page">

<br><br>
<span size="-1" color="888888"><br> <a name="1">1</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/OutsidePlant.png" alt="OutsidePlant.png                      ">
</p>
Another section of this web site talked about outside plant, which is the telephone company's term for the cabling and other equipment which connects your home telephone to their Central Office.
<p>This diagram shows an overview, and below are some pictures and descriptions of how outside plant is different for rural areas.
</p><div><p>The main differences are that the Central Offices are typically smaller, and the cable distances are much greater.</p><p><span size="-1" color="888888"><br> <a name="2">2</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3005.jpg" alt="DSCN3005.jpg                          ">
</p>
Here is a typical Central Office. Note it is only one storey, but is still well-kept, and mostly windowless.<span size="-1" color="888888"><br> <a name="3">3</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3008.jpg" alt="DSCN3008.jpg                          ">
</p>
Around back are some air conditioners, technician's trucks, and even a small aluminum motor boat (the technicians working in this area often have to run telephone lines to islands). Also, at the right are some Jumpered Wire Interfaces (JWI), which split the high pair count cables from the Central Office (such as 1,200 pairs) to smaller cables (such as 200 pairs) for distribution to terminals and people's houses.<span size="-1" color="888888"><br> <a name="4">4</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2859.jpg" alt="DSCN2859.jpg                          ">
</p>
Here's another Central Office. This one has a few meters of unused 1,200-pair feeder cable in front (much more attractive than plastic pink flamingos).<span size="-1" color="888888"><br> <a name="5">5</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2852.jpg" alt="DSCN2852.jpg                          ">
</p>
Around back, no security cameras, but there is good lighting, and of course, air conditioners.<span size="-1" color="888888"><br> <a name="6">6</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2853.jpg" alt="DSCN2853.jpg                          ">
</p>
The front door has a mechanical push-button lock, and a discrete sign.<span size="-1" color="888888"><br> <a name="7">7</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2854-1200-pair-PIC.jpg" alt="DSCN2854-1200-pair-PIC.jpg            ">
</p>
Here's a close-up of the 1,200 pair cable. It is about 4 cm in diameter.<span size="-1" color="888888"><br> <a name="8">8</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2858.jpg" alt="DSCN2858.jpg                          ">
</p>
The feeder cables coming out of the Central Office are all buried, but within a few meters of the building, they surface to come be run up a utility pole. Note the ancient lead-covered splice enclosure.<span size="-1" color="888888"><br> <a name="9">9</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2857.jpg" alt="DSCN2857.jpg                          ">
</p>
Here's the top of that utility pole. These cables carry everything that this Central Office does (this is what is called a “single point of failure” – one car accident, and there's a lot of people with no phone service).
<div><p>There's another lead closure at the top-left.</p><p><span size="-1" color="888888"><br> <a name="10">10</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2856.jpg" alt="DSCN2856.jpg                          ">
</p>
As shown in the close-up of the 1,200-pair feeder cable above, cable construction is to have twisted pairs covered by a thick plastic protective jacket. After enough sun and flexing in the wind, the cable jacket can develop leaks, which could allow water to seep in between the cable pairs. This would change the electrical characteristics of the cable, and cause many problems (such as cross-talk between telephone lines and distorted signals). Therefore paper insulated cable (these cables will all be more than 40 years old) and sometimes newer cable) are pressurized with air, typically less than 9 pounds per square inch (for comparison, automobile tires typically have a pressure of more than 30 pounds per square inch). This provides several benefits:
<ul><li>Rather than water seeping into the cable, air will leak out, and this keeps the cable dry.</li>
<li>The flow of air through the cable will dry and remove any moisture that does get into the cable.</li> 
<li>By measuring the pressure along test points in the cable, and graphing this, a technician can determine approximately where the cable jacket is bad (the pressure will be lower where the air leaks out).</li></ul>
<div><p>I'm sure you've seen the little packages of <b>dessicant</b> (which look like restaurant coffee sugar packets) of that often come (along with a warning not to eat it) with electronic and other products which have been shipped from overseas. This stuff is a chemical that likes to absorb water (from the damp ocean crossing), so the moisture won't damage the goods. Similarly, there is a need to ensure that the air used to pressurize the cable is dry, and this blue crystalline material is dessicant, and does just that. The air compressor (or “bottled gas”, where the air comes from a compressed air tank) would be in the Central Office, and feeds the black hose, so the air passes through the dessicant, and the hose continues up the utility pole to pressurize the cables father along.</p><p><span size="-1" color="888888"><br> <a name="11">11</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2855.jpg" alt="DSCN2855.jpg                          ">
</p>
Here's a close-up of the dessicant canister. It reminds technicians to:
<ul><li>Change the desiccant when it turns pink.</li>
<li>That the maximum pressure allowed is 25 pounds per square inch (automobile tires typically have a pressure of 28 to 40 pounds per square inch).</li>
<li>And to be gentle with it.</li></ul>
This device is made by Jameson Corporation, and is model J-100-8.<span size="-1" color="888888"><br> <a name="12">12</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3431.jpg" alt="DSCN3431.jpg">
</p>
Here is a new air pipe (in an urban location) from a central office, waiting to be connected through to a cable vault farther down the road.<span size="-1" color="888888"><br> <a name="13">13</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3436.jpg" alt="DSCN3436.jpg">
</p>
This air pipe is made by Superior Essex. Their catalogue page is <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/SuperiorEssexAirPipe.pdf" target="_blank">here</a>. It shows that this type of pipe is typically installed in ducts (underground plastic conduits), the pipe has an outside diameter of 18 mm, and has a 4 mil (about the thickness of paper) aluminum tape inside the pipe (since the plastic used would otherwise allow water vapour to pass through the pipe wall (it is important to keep the air dry).<span size="-1" color="888888"><br> <a name="14">14</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3422.jpg" alt="DSCN3422.jpg">
</p>
To split a feeder cable into smaller cables (to each go in different directions) a splice enclosure is needed. Here is a really old lead one (on top), and a newer plastic (and openable) one below it.
<p>Cables with a lead splice closure are old enough that the wires are likely paper insulated (as the bundle of spliced wires is covered in a protective and insulating cloth before the lead closure is sealed with solder, plastic insulated wires can also be enclosed in lead closures, without damage when the lead is sealed with solder).
</p><p>Due to the difficulty of opening and resealing the lead closures, and the health concerns for technicians working with the lead, telephone companies are working at removing this type of closure.
</p><p>Modern buried telephone cables are generally <b>grease filled</b>: when the cable is manufactured, a gel is injected to fill the interstitial spaces between the twisted pairs, so water cannot seep in. In contrast, aerial cables are generally <b>dry</b>, and do not have this gunk.
</p><p>Attached to the lead splice cover is a pressure transducer to enable remote monitoring of the pressure in the cable.
</p><p>A web page for a typical outside plant pressure transducer made by TX Technology Corporation is <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/Type100F_PressureTransducers.pdf" target="_blank">here</a>. This points out that the transducer is designed to measure pressures from 0 to 9.5 pounds per square inch, and has a corresponding output from 100 kΩ to 3,820 kΩ. More detailed information is <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/TX_Technology_PressureTransducerInstallation.pdf" target="_blank">here</a>. It points out that the transducer has a water-tight screw cap (with a knurled edge for finger tightening, and a little ball-chain so it won't be lost if dropped) a which can be removed to set the zero-pressure point for the transducer, according to the altitude at which it is installed.
</p><p>The flexible cable hanging down is the electrical signal from the transducer, and is connected to a pair of wires in the lower cable so the pressure at this location can be remotely monitored at the central office. Because most central office activities (such as changing the telephone line features which subscribers receive and trouble-shooting problems) can now be done remotely, most central offices are not normally staffed. Therefore, the system (at the nearest central office) which monitors all the remote pressure transducers will usually be itself monitored remotely.
</p><div><p>When pressurized cable is spliced to dry or greased-filled cable, a <b>plug</b> must be poured into the end of the pressurized cable, so the air does not leak out.</p><p><span size="-1" color="888888"><br> <a name="15">15</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3036.jpg" alt="DSCN3036.jpg                          ">
</p>
Now we get to a really interesting part. As you drive along rural roads, you'll see what appear to be paint cans, each with a this cable coming out the top. If you're really bored, you may also notice that they are exactly 6,000 feet apart (that would be 1.14 miles, and 1.83 km).
<p>Just as you can walk slowly through water, but cannot easily run (since water is more viscous than air), higher-frequency electrical signals are attenuated (made quieter) more than lower-frequency signals.
</p><p>In urban areas, there are generally enough customers within a 5 km radius of Central Offices to justify building a Central Office, and in 5 km of cable, the signals are not distorted too much. In rural areas, customers are farther apart, and the cable runs to customers are longer. The capacitance of the cable (which is analogous to the greater viscosity of water) would attenuate the high-frequency signals (distorting the sound), so inductors (which counter-act the capacitance) are connected to each pair of wires.
</p><div><p>Since the capacitance is spread-out along the length of the cable, the inductance also has to be distributed along the cable. A popular scheme is called <b>H88</b>: the “H” refers to a distance of 6,000 feet between inductors, and the “88” refers to the inductance value of 88 mH (milliHenrys).</p><p><span size="-1" color="888888"><br> <a name="16">16</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3025.jpg" alt="DSCN3025.jpg                          ">
</p>
As you might have guessed, these therefore are not paint cans, but are the enclosures for the loading coils. If there is a 600-pair cable, then you need 600 loading coils (these look something like little spools of thread), and you need to attach each to the feeder cable.
<div><p>Here there are three old loading coils (two large, and one smaller metal enclosure mounted on the utility pole), and one newer black plastic loading coil enclosure attached (with stainless steel straps) to the cable at the left. A splice enclosure allows the cable from the loading coil enclosures to be spliced to the feeder cable</p><p><span size="-1" color="888888"><br> <a name="17">17</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3026.jpg" alt="DSCN3026.jpg                          ">
</p>
Here's a close-up of those big old loading coil enclosures.<span size="-1" color="888888"><br> <a name="18">18</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3027.jpg" alt="DSCN3027.jpg                          ">
</p>
As more cables are installed, more loading coils are needed. Here's the newest loading coil (cute, isn't it).<span size="-1" color="888888"><br> <a name="19">19</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3030.jpg" alt="DSCN3030.jpg                          ">
</p>
That's it for the loading coils, but on the very next utility pole (and this does generally happen, it will be on a directly adjacent utility pole, as the spacing is also 6,000 feet, likely to simplify installation), there's something else. Rather than being up high, these are generally a waist-height.<span size="-1" color="888888"><br> <a name="20">20</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3028%203M%20Closure.jpg" alt="DSCN3028 3M Closure.jpg               ">
</p>
So we have the feeder cables running along, and a 3M splice enclosure bringing a few of the twisted pairs in the cable down the utility pole ...<span size="-1" color="888888"><br> <a name="21">21</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3029.jpg" alt="DSCN3029.jpg                          ">
</p>
Down to these, which are <b>T1 repeaters</b>. Rather than the analogue signals carried by telephone lines, a T1 is a digital signal which carries data at 1,544,000 bits/s (on the exact same type of twisted pairs as the voice telephone lines). There are many advantages to T1 signals, including being able to carry 24 conversations over two twisted pairs, not gathering cumulative noise along the length of the cable run, and being able to carry (somewhat) high-speed data. But, the problem is that the signal needs to be amplified periodically – every 6,000 feet in fact. The amplifier is actually called a repeater, since it outputs a binary signal (which has only two states, on or off).<span size="-1" color="888888"><br> <a name="22">22</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3031.jpg" alt="DSCN3031.jpg                          ">
</p>
This is the older of the two. The feeder cable is pressurized, and so is the cable coming down to this repeater enclosure, and in fact, the repeater enclosure is pressurized as well. At the base of the white enclosure, you can see the clamp (with padlock) which provides the air-tight seal. Since there are active electronics in this enclosure, and they can't have cooling fans (since it is an air-tight enclosure), these enclosures are always white to reflect the sunlight (and some of the heat) as these bake in the summer sun.<span size="-1" color="888888"><br> <a name="23">23</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3035.jpg" alt="DSCN3035.jpg                          ">
</p>
Here's the newer enclosure, it is an HRE-458 HiGain Remote Therm-O-Nator Enclosure from ADC DSL Systems, Inc. Some documentation for it is <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/2409_ADC_HRE-458.pdf" target="_blank">here</a>, and it can hold up to ten cards, such as this <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/ADC_HiGain_HDU-409_HDSL_Extender,UserManual.pdf" target="_blank">HDSL line extender</a> which extends the range of two full-duplex 784 kbits/s DSL connections by up to 12,000' using two 24 gauge copper twisted pairs.
<div><p>The enclosure has heat sink fins on top (since heat rises, this will be where it gets the hottest). These help cool the enclosure by providing more surface area, so it can radiate more heat.</p><p><span size="-1" color="888888"><br> <a name="24">24</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3034.jpg" alt="DSCN3034.jpg                          ">
</p>
Here's a look at the bottom, showing the cable entry, and also a pressure relief valve to release the pressure before opening the enclosure. Another opening allows the pressure to be measures. The thinner black wire is to ground the enclosure, so goes to a metal stake driven into the ground.</div>]]></description>
        </item>
        <item>
            <title><![CDATA[1M Users (575 pts)]]></title>
            <link>https://blog.spacehey.com/entry?id=1245177</link>
            <guid>41422311</guid>
            <pubDate>Mon, 02 Sep 2024 03:13:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.spacehey.com/entry?id=1245177">https://blog.spacehey.com/entry?id=1245177</a>, See on <a href="https://news.ycombinator.com/item?id=41422311">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
      <p>Hello everyone - it's been a while!</p><p>I was super busy with 
university and my mandatory internship in a software company for the 
past 6 months, so I haven't posted in a while. But that doesn't mean 
that I was inactive - I spent nearly every evening and every weekend 
working on SpaceHey. I didn't develop any new ground-breaking features, 
but instead I focused on improving the overall SpaceHey experience - 
making it smoother, more stable, easier to use and safer.</p><p>But before I get into the details, let's have a look at a huge milestone first: SpaceHey hit 1 Million registered users!! That's crazy!!<br></p><h2>1 Million users</h2><p>I
 launched SpaceHey at the end of 2020 - I had just graduated high-school,
 and the world was on Covid lockdown. I made SpaceHey, so my generation 
could experience the early days of social media - without a feed, likes 
and whatnot - but instead with colorful, customizable profiles, bulletins and forums. I didn't plan to create anything <i>big</i> - I just had some fun creating this site and improving my coding skills at the same time.</p><p>Still, three and a half years later - SpaceHey has indeed become <i>big</i>.
 One million people is an incredibly huge number of people - it's&nbsp; simply crazy! If someone would've told my 18-year-old self in 2020, I 
would've never believed them. And yet - here we are. I am so incredibly 
thankful for all the support over the past three and a half years - the 
friends I made along the way and the lessons I've learned - both in 
running a community as big as this one as well as the technical challenges that came along.</p><p>One
 million people from all over the world have used SpaceHey so far - an 
independently run platform that does not track you and does not show 
you personalized feeds nor ads. My mission is not to become another big 
social network like <i>Facebook</i> or <i>Twitter</i> (I don't think 
I'll ever call it "X") - but rather trying to be different. More 
personal, more fun to use, and more humane. And I'm proud to say that 
this mission is still very much alive - no matter if there were 500 
users or 1,000,000.<br></p><p>If you like SpaceHey and want to support the platform, you can support me <a href="https://spacehey.com/support" target="_self" rel="ugc">here</a>, and there is also a special #1 Million Merch drop available <a href="https://shop.spacehey.com/" target="_self" rel="ugc">here</a>
 to support SpaceHey. Your support - no matter if it's a donation or a 
Merch order - is what keeps SpaceHey running: thank you!!<br></p><h2>Improving SpaceHey</h2><p>I've
 stopped myself from working on any new features in the past months, but
 rather improve the existing ones and make SpaceHey overall a bit 
smoother. It wasn't easy - but I think it was worth it. You may have 
already noticed less downtime and less App crashes in the past weeks - 
and there are some more improvements coming soon.</p><p>I'm now also 
starting to work on some new features again - which is super fun - and I can't 
wait to share more with you soon (T8 👀) - so stay tuned!<br></p><h2>Keeping SpaceHey safe</h2><p>Another
 big topic I worked on in the past months is safety. As more and more 
people joined SpaceHey, the bots and spammers also increased. Spam, 
hate speech, and other kinds of harmful content has no place on SpaceHey -
 that's why a solution was needed, and eventually found.<br></p><p>The 
solution isn't actually one solution - but a combination of multiple. On
 the one hand, I've implemented more ways to prevent spam in the first 
place - and on the other hand, I've developed more ways to combat 
existing spam. I've expanded the <a href="https://spacehey.com/modapplication" target="_self" rel="ugc">volunteer moderation team</a> and improved the ways the team can discover spam, react to <a href="https://spacehey.com/report" target="_self" rel="ugc">reports</a>
 and keep track of rule violations. I am immensely thankful to the 
volunteers helping me, and I think we are on a great path to keep 
SpaceHey safe.</p><p>If you come across harmful content on SpaceHey, 
please click the "Report" icon next to it, and we'll check it. Thank you
 for doing your part!<br></p><h2>The next steps</h2><p>I am super 
thrilled to keep working on SpaceHey - there are so many awesome, 
talented and fun people here. I can't wait to keep improving the site 
and the App and keep working on some great new features in the near 
future. I am super happy to have you all here, and I hope you are 
enjoying this journey as much as I do!<br></p><h2>Thank you!</h2><p>Last but not least, a <b>huge thank you</b> to every single one of you - you are the people who make SpaceHey what it is - you make it awesome. Thank you so, so much!<br></p><p>Have an awesome day &amp; thank you for using SpaceHey!<br><i>An</i><br></p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How the Oldest Company in the World Survived Nearly 1,500 Years (173 pts)]]></title>
            <link>https://www.openculture.com/2024/08/how-the-oldest-company-in-the-world-has-survived-nearly-1500-years.html</link>
            <guid>41422126</guid>
            <pubDate>Mon, 02 Sep 2024 02:25:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.openculture.com/2024/08/how-the-oldest-company-in-the-world-has-survived-nearly-1500-years.html">https://www.openculture.com/2024/08/how-the-oldest-company-in-the-world-has-survived-nearly-1500-years.html</a>, See on <a href="https://news.ycombinator.com/item?id=41422126">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<p><img loading="lazy" fetchpriority="high" decoding="async" src="https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda.png" alt="" width="1380" height="1080" srcset="https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda.png 1380w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-360x282.png 360w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-1024x801.png 1024w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-240x188.png 240w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-768x601.png 768w" sizes="(max-width: 1380px) 100vw, 1380px" data-old-src="https://www.openculture.com/wp-content/plugins/native-lazyload/assets/images/placeholder.svg" data-src="https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda.png" data-srcset="https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda.png 1380w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-360x282.png 360w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-1024x801.png 1024w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-240x188.png 240w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-768x601.png 768w"></p>
<p><small><em><a href="https://en.wikipedia.org/wiki/Kong%C5%8D_Gumi#/media/File:Shitenn%C5%8D-ji_main_hall_and_pagoda.png">Image from New York Pub­lic Library, via Wiki­me­dia Com­mons</a></em></small></p>
<p>If you vis­it Osa­ka, you’ll be urged to see two old build­ings in par­tic­u­lar: Osa­ka Cas­tle and Shiten­nō-ji (above), Japan’s first Bud­dhist tem­ple. In behold­ing both, you’ll behold the work of con­struc­tion firm <a href="https://en.wikipedia.org/wiki/Kong%C5%8D_Gumi">Kongō Gumi</a> (金剛組), the old­est con­tin­u­ous­ly run com­pa­ny in the world. It was with the build­ing of Shiten­nō-ji, com­mis­sioned by Prince Shō­toku Taishi in the year 578, that brought it into exis­tence in the first place. Back then, “Japan was pre­dom­i­nant­ly Shin­to and had no <em>miyadaiku</em> (car­pen­ters trained in the art of build­ing Bud­dhist tem­ples),” <a href="https://worksthatwork.com/3/kongo-gumi">writes Irene Her­rera at <em>Works that Work</em></a><em>,</em> “so the prince hired three skilled men from Baek­je, a Bud­dhist state in what is now Korea,” among them a cer­tain Kongō Shiget­su.</p>
<p>There­after, Kongō Gumi con­tin­ued to oper­ate inde­pen­dent­ly for more than 1,400 years, run by 40 gen­er­a­tions of Kongō Shiget­su’s descen­dants. By the time Toy­oto­mi Hideyoshi had the com­pa­ny build Osa­ka Cas­tle in 1583, it had been estab­lished for near­ly a mil­len­ni­um. In the cen­turies since, “the cas­tle has been destroyed repeat­ed­ly by fire and light­ning,” Her­rera writes. “Kongō Gumi pros­pered because of these major recon­struc­tions, which pro­vid­ed them with plen­ty of work.” Through­out most of its long his­to­ry, an even stead­ier busi­ness came from their spe­cial­ty of build­ing Bud­dhist tem­ples, at least until seri­ous chal­lenges to that busi­ness mod­el arose in the twen­ti­eth cen­tu­ry.</p>
<div>
<p><span><iframe title="YouTube video player" type="text/html" width="640" height="505" src="//www.youtube.com/embed/IiNJik3gfZ0?wmode=transparent&amp;fs=1&amp;hl=en&amp;showsearch=0&amp;rel=0&amp;theme=dark" frameborder="0" allowfullscreen="" loading="lazy"></iframe></span>
	</p>
</div>

<p>“World War II brought sig­nif­i­cant changes to Japan, and the demand for tem­ple con­struc­tion waned,” <a href="https://www.toki.tokyo/blogt/2023/8/9/kong-gumi-co-ltd-the-enduring-legacy-of-japans-oldest-company">says the tourism com­pa­ny Toki</a>. “Sens­ing the shift­ing tides of the time, the com­pa­ny made a strate­gic deci­sion to piv­ot its exper­tise towards a new endeav­or: the craft­ing of coffins.” Gov­ern­men­tal per­mis­sion was arranged by the wid­ow of Kongō Haruichi, Kongō Gumi’s 37th leader, who’d tak­en his own life out of finan­cial despair inflict­ed by the Shōwa Depres­sion of the nine­teen-twen­ties. Here time at the head of the com­pa­ny illus­trates its long-held will­ing­ness to grant lead­er­ship duties not just to first sons, but to fam­i­ly mem­bers best suit­ed to do the job; for that rea­son, the his­to­ry of the Kongō clan involves many sons-in-law delib­er­ate­ly sought out for that pur­pose.</p>
<div>
<p><span><iframe title="YouTube video player" type="text/html" width="640" height="505" src="//www.youtube.com/embed/jnmGgHUWdFg?wmode=transparent&amp;fs=1&amp;hl=en&amp;showsearch=0&amp;rel=0&amp;theme=dark" frameborder="0" allowfullscreen="" loading="lazy"></iframe></span>
	</p>
</div>

<p>The com­bined forces of the decline of Bud­dhism and the pop­ping of Japan’s real-estate bub­ble in the nineties even­tu­al­ly forced Kongō Gumi to become a sub­sidiary of Taka­mat­su Con­struc­tion Group in Jan­u­ary 2006. “The cur­rent Kongō Gumi work­force has only one mem­ber of the Kongō fam­i­ly,” <a href="https://asia.nikkei.com/Business/Companies/Japan-s-oldest-company-defies-time-with-merit-based-succession">the Nikkei Asia report­ed in 2020</a>, “a daugh­ter of the 40th head of the fam­i­ly” who “now serves as the 41st head.” But its <em>miyadaiku</em> — dis­tinc­tive­ly orga­nized into eight inde­pen­dent <em>kumi</em>, or groups — con­tin­ue to do the work they always have, with ever-more-refined ver­sions of the tra­di­tion­al tools and tech­niques they’ve been using for near­ly a mil­len­ni­um and a half. Kongō Gumi con­tin­ues to receive inter­na­tion­al atten­tion for main­tain­ing its high lev­el of crafts­man­ship, but view­ers of Amer­i­can TV dra­ma in recent years will also appre­ci­ate that its hav­ing solved the prob­lem of suc­ces­sion.</p>
<p><strong>Relat­ed Con­tent:</strong></p>
<p><a href="https://www.openculture.com/2020/12/japans-1300-year-old-hotel.html">Why Japan Has the Old­est Busi­ness­es in the World?: Hōshi, a 1300-Year-Old Hotel, Offers Clues</a></p>
<p><a href="https://www.openculture.com/2021/09/building-without-nails-the-genius-of-japanese-carpentry.html#google_vignette">Build­ing With­out Nails: The Genius of Japan­ese Car­pen­try</a></p>
<p><a href="https://www.openculture.com/2018/04/hoshi-a-short-documentary-on-the-1300-year-old-hotel-run-by-the-same-japanese-family-for-46-generations.html">Hōshi: A Short Doc­u­men­tary on the 1300-Year-Old Hotel Run by the Same Japan­ese Fam­i­ly for 46 Gen­er­a­tions</a></p>
<p><a href="https://www.openculture.com/2017/02/japanese-priest-tries-to-revive-buddhism-by-bringing-techno-music-into-the-temple.html">Japan­ese Priest Tries to Revive Bud­dhism by Bring­ing Tech­no Music into the Tem­ple: Attend a Psy­che­del­ic 23-Minute Ser­vice</a></p>
<p><a href="https://www.openculture.com/2023/03/a-visit-to-the-worlds-oldest-hotel-japans-nisiyama-onsen-keiunkan-established-in-705-ad.html">A Vis­it to the World’s Old­est Hotel, Japan’s Nisiya­ma Onsen Keiunkan, Estab­lished in 705 AD</a></p>
<p><a href="https://www.openculture.com/2020/03/see-how-traditional-japanese-carpenters-can-build-a-whole-building-using-no-nails-or-wood.html">See How Tra­di­tion­al Japan­ese Car­pen­ters Can Build a Whole Build­ing Using No Nails or Screws</a></p>
<p><em>Based in Seoul,&nbsp;</em><em><a href="http://blog.colinmarshall.org/">Col­in</a></em><em><a href="http://blog.colinmarshall.org/">&nbsp;M</a></em><em><a href="http://blog.colinmarshall.org/">a</a></em><em><a href="http://blog.colinmarshall.org/">rshall</a>&nbsp;writes and broad­cas</em><em>ts on cities, lan­guage, and cul­ture. His projects include the Sub­stack newslet­ter</em>&nbsp;<a href="https://colinmarshall.substack.com/">Books on Cities</a><em>&nbsp;and the book&nbsp;</em>The State­less City: a Walk through 21st-Cen­tu­ry Los Ange­les.&nbsp;<em>Fol­low him on Twit­ter at&nbsp;<a href="https://twitter.com/#%21/colinmarshall">@colinm</a></em><em><a href="https://twitter.com/#%21/colinmarshall">a</a></em><em><a href="https://twitter.com/#%21/colinmarshall">rshall</a>&nbsp;or on&nbsp;<a href="https://www.facebook.com/colinmarshallessayist">Face­book</a>.</em></p>
<br>		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OrbStack: The fast, light, and easy way to run Docker containers and Linux (196 pts)]]></title>
            <link>https://orbstack.dev/</link>
            <guid>41421846</guid>
            <pubDate>Mon, 02 Sep 2024 01:35:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://orbstack.dev/">https://orbstack.dev/</a>, See on <a href="https://news.ycombinator.com/item?id=41421846">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><nav data-headlessui-state=""></nav><section id="hero"><div><a href="https://orbstack.dev/blog/dynamic-memory"></a><p>Say&nbsp;goodbye to slow, clunky <span>containers and&nbsp;VMs</span></p><p>OrbStack is the fast, light, and easy way to run Docker containers and Linux. Develop at lightspeed with our Docker&nbsp;Desktop alternative.</p></div><p><img alt="OrbStack running a Compose project with domain names, image files open in Finder, and an Arch Linux machine" loading="lazy" width="900" height="900" decoding="async" data-nimg="1" srcset="https://orbstack.dev/_next/image?url=%2Fimg%2Fhero.png&amp;w=1080&amp;q=75 1x, https://orbstack.dev/_next/image?url=%2Fimg%2Fhero.png&amp;w=1920&amp;q=75 2x" src="https://orbstack.dev/_next/image?url=%2Fimg%2Fhero.png&amp;w=1920&amp;q=75"></p></section><section id="companies"><h2>Loved by developers at</h2></section><section id="features"><p>No more battery drain or complicated VMs. OrbStack respects your machine, with powerful capabilities. No compromises.</p><div><div><h3>Lightning fast</h3><p>Starts in seconds with turbocharged networking, smooth Rosetta x86 emulation, VirtioFS file sharing, and other optimizations for some workloads.</p></div><div><h3>Light as a feather</h3><p>Keep it breezy with low CPU and disk usage, minimal memory consumption, and a native Swift app. Battery drain is a thing of the past.</p></div><div><h3>Effortless integration</h3><p>Enjoy seamless containers, plus CLI integration, file sharing, and remote SSH editing with Linux machines.</p></div><div><h3>Unbelievably simple</h3><p><a href="https://orbstack.dev/docs/compare/docker-desktop">Drop-in replacement</a> for Docker Desktop. Easily get started with Linux machines in 1 minute with the simple, yet powerful, app and command line.</p></div><div><h3>Endlessly capable</h3><p>Run containers, Kubernetes, and Linux distros all with robust integration. Manage containers &amp; machines from anywhere with the menu bar app.</p></div><div><h3>Robust connectivity</h3><p>Connect between containers and machines, and use IPv6 painlessly. VPNs and DNS become friends, not foes.</p></div></div></section><section id="demos"><h2>See the <span>magic</span></h2><p>Embark on a seamless journey towards better development, within a matter of seconds.</p></section><div><div><h3>Containers like they’re native</h3><p>Build images quickly and enjoy fast, reliable networking and file sharing. Bind mounts and port forwards just work. Debug containers easily with access to volumes. Run x86 containers with Rosetta. Compose and other tools included.</p></div><div><h3>Linux machines without the fuss</h3><p>Run full-blown Linux machines with your favorite distro. Work seamlessly with Visual Studio Code (or your favorite editor) and SSH agent forwarding. Run Intel machines on Apple Silicon with Rosetta.</p></div><div><h3>First-class command line integration</h3><p>Live in the terminal? We think our native app is great, but everything can be done from the command line. Run commands and copy files between Mac and Linux with ease. Send notifications and open files and links from Linux.</p></div><div><div><p><img alt="OrbStack virtual machine service in Activity Monitor, using 0.1% CPU" loading="lazy" width="800" height="800" decoding="async" data-nimg="1" srcset="https://orbstack.dev/_next/image?url=%2Fimg%2Fcpu-boxed.png&amp;w=828&amp;q=75 1x, https://orbstack.dev/_next/image?url=%2Fimg%2Fcpu-boxed.png&amp;w=1920&amp;q=75 2x" src="https://orbstack.dev/_next/image?url=%2Fimg%2Fcpu-boxed.png&amp;w=1920&amp;q=75"></p></div><h3>Light as a feather</h3><p>With less than 0.1% background CPU usage on Apple Silicon, OrbStack sips power and stays out of your way. Less than 10 MB of disk space is used out of the box. You’ll never notice it’s running.</p></div></div><section id="benchmarks"><h2>Feel the <span>difference</span></h2><p>Skip the wait and leave your charger behind with OrbStack's unmatched performance and efficiency.</p><div data-state="active" data-orientation="horizontal" role="tabpanel" aria-labelledby="radix-:R6lplm:-trigger-tab-perf-edx" id="radix-:R6lplm:-content-tab-perf-edx" tabindex="0" dir="ltr"><p><span>Time to provision development environment (lower is better)</span></p></div></section><section id="detailed-features"><h2>Packed with <span>helpful</span> features</h2><p>No matter the use case, OrbStack has you covered with features that simplify your workflow and help you move faster.</p><div><p>Instant startup</p><p>Fast network</p><p>Local domain names</p><p>Seamless integration</p><p>Linux machines</p><p>Rosetta x86 emulation</p><p>Optimized for Apple Silicon</p><p>Low CPU usage</p><p>Dynamic disk</p><p>Native Swift app</p><p>SSH agent forwarding</p><p>File sharing</p><p>2-way CLI integration</p><p>15 Linux distros</p><p>SSH</p><p>Remote VS Code</p><p>VPN-friendly</p><p>IPv6</p><p>ICMP</p><p>Ping</p><p>Traceroute</p><p>Low initial memory usage</p><p>Accurate clock</p><p>Works without admin</p><p>Bind mounts</p><p>Volume files on Mac</p><p>Image files on Mac</p><p>Host networking</p><p>eBPF support</p><p>Native UI</p><p>Menu bar app</p><p>Quick global actions</p><p>Kubernetes</p></div></section><section id="testimonials"><h2>See what people say</h2></section><section id="faq"><h2>Frequently asked questions</h2></section><section id="end"><h2>Ready to love containers again?</h2><a href="https://orbstack.dev/download">Get OrbStack</a></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tbsp – treesitter-based source processing language (175 pts)]]></title>
            <link>https://git.peppe.rs/languages/tbsp/</link>
            <guid>41421650</guid>
            <pubDate>Mon, 02 Sep 2024 01:04:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://git.peppe.rs/languages/tbsp/">https://git.peppe.rs/languages/tbsp/</a>, See on <a href="https://news.ycombinator.com/item?id=41421650">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><table summary="repository info"><tbody><tr><th>Branch</th><th>Commit message</th><th>Author</th><th colspan="2">Age</th></tr>
<tr><td><a href="https://git.peppe.rs/languages/tbsp/log/">master</a></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/">add lists and index exprs</a></td><td>Akshay</td><td colspan="2"><span title="2024-08-23 23:00:52 +0100">9 days</span></td></tr>
<tr><td colspan="5">&nbsp;</td></tr><tr><td colspan="5">&nbsp;</td></tr><tr><th>Age</th><th>Commit message</th><th>Author</th><th>Files</th><th>Lines</th></tr>
<tr><td><span title="2024-08-23 23:00:52 +0100">9 days</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=1702f955a4546828cd535be6cecad57b90128de8">add lists and index exprs</a><span><a href="https://git.peppe.rs/languages/tbsp/commit/?id=1702f955a4546828cd535be6cecad57b90128de8">HEAD</a><a href="https://git.peppe.rs/languages/tbsp/log/">master</a></span></td><td>Akshay</td><td>3</td><td><span>-13</span>/<span>+229</span></td></tr>
<tr><td><span title="2024-08-08 22:19:14 +0100">2024-08-08</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=32de8bd5dac80a2c09e7106144cab5a8e16accc4">store nodes as usize</a></td><td>Akshay</td><td>4</td><td><span>-82</span>/<span>+170</span></td></tr>
<tr><td><span title="2024-08-05 21:52:22 +0100">2024-08-05</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=3ad5ba1f6d3f4c5944bbf29a7d761c93cf3740e3">add string::substr</a></td><td>Akshay</td><td>3</td><td><span>-12</span>/<span>+150</span></td></tr>
<tr><td><span title="2024-07-14 21:00:26 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=ba102d6162d046f7ed7b139355e81da0c9f89acb">add usage and roadmap to readme</a></td><td>Akshay</td><td>1</td><td><span>-0</span>/<span>+56</span></td></tr>
<tr><td><span title="2024-07-14 19:39:41 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=52ea89604e1bc2f7b38698e38ee256218e879a08">fix link to tree-viz</a></td><td>Akshay</td><td>1</td><td><span>-1</span>/<span>+1</span></td></tr>
<tr><td><span title="2024-07-14 14:00:55 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=58b651418ee59eb576595718439352f244b23ddc">add readme</a></td><td>Akshay</td><td>2</td><td><span>-1</span>/<span>+149</span></td></tr>
<tr><td><span title="2024-07-14 13:01:23 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=9ad06d721c1e481c82b4f43df819d76e35757282">add examples</a></td><td>Akshay</td><td>8</td><td><span>-0</span>/<span>+260</span></td></tr>
<tr><td><span title="2024-07-14 13:00:51 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=83b537bb860643ebdabc43ab47cb8645da8a2e6d">rename: trawk -&gt; tbsp</a></td><td>Akshay</td><td>4</td><td><span>-155</span>/<span>+307</span></td></tr>
<tr><td><span title="2024-07-14 10:16:15 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=7ae7e42eb1eb981483cc4183368bec4932b8f1c2">add trawk cli</a></td><td>Akshay</td><td>6</td><td><span>-71</span>/<span>+297</span></td></tr>
<tr><td><span title="2024-07-13 18:32:41 +0100">2024-07-13</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=8eb38033e0c615983c4490354dad4abb00031042">init trawk</a></td><td>Akshay</td><td>8</td><td><span>-0</span>/<span>+1862</span></td></tr>
<tr><td colspan="5">&nbsp;</td></tr><tr><th colspan="5">Clone</th></tr>
<tr><td colspan="5"><a rel="vcs-git" href="https://git.peppe.rs/languages/tbsp" title="tbsp Git repository">https://git.peppe.rs/languages/tbsp</a></td></tr>
</tbody></table></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Extreme Pi Boot Optimization (427 pts)]]></title>
            <link>https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/</link>
            <guid>41420597</guid>
            <pubDate>Sun, 01 Sep 2024 21:36:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/">https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/</a>, See on <a href="https://news.ycombinator.com/item?id=41420597">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>🚀 3.5 sec to Linux userspace code</p><h3 id="motivation">Motivation<a href="#motivation" aria-label="Heading self-link"></a></h3><p>A while ago, the <a href="https://kittenlabs.de/solarcampi/">SolarCamPi</a> project, a off-grid solar-powered WiFi camera, was built.</p><p>In this project, a Raspberry Pi Zero 2 W is being booted into Linux, a picture is taken, WiFi connectivity is established and the Pi is shut down again (to save power).
This repeats every couple of minutes to always deliver a fresh image to a cloud service.</p><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/IMG_4607.jpg" width="49%" alt="Weatherproof enclosure, with 7.2Ah lead-gel battery and SolarCamPi inside"> <img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/IMG_4629.jpg" width="49%" alt="Mast, with solar panel, WiFi antenna and SolarCamPi enclosure mounted to it, in nature"></p><p>Each second the Pi Zero is powered up uses valuable electricity, which is a scarce resource in a solar-powered device (at least in West European winters…).<br>The user space application (server connection, picture upload, etc.) was already optimized as best as possible.<br>The electronics setup was also specifically designed to use as little power as possible while asleep.</p><p>There a 2 possible ways to reduce total energy consumption further:</p><ul><li>decrease power consumption / current</li><li>decrease time spent running</li></ul><p>However, in some situations a balance needs to be found between the two.
For example: Disabling CPU turbo just to save some current consumption is a bad choice, because the resulting extra time will use more energy than just getting the job done quickly and shutting off.
We want the least area under the graph (of current vs. time) possible.</p><h3 id="hardware-setup">Hardware setup<a href="#hardware-setup" aria-label="Heading self-link"></a></h3><p>Having a short cycle time between making a change and actually seeing it run is critical when optimizing embedded boot processes.
Swapping SD cards, messing with card readers and power supplies while working is distracting and annoying.</p><p>In order to avoid this, a number of useful tools exist:</p><ul><li><a href="https://www.nordicsemi.com/Products/Development-hardware/Power-Profiler-Kit-2" target="_blank">Nordic Power Profiler Kit II</a></li><li><a href="https://github.com/linux-automation/usbsdmux" target="_blank">USB-SD-Mux Fast</a></li><li>USB-UART converter</li></ul><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/featured-DSC01414.jpg" width="80%" alt="Hardware setup, Raspberry Pi Zero 2 W, USB-SD-Mux and PPK2"></p><h5 id="power-profiler-kit">Power Profiler Kit<a href="#power-profiler-kit" aria-label="Heading self-link"></a></h5><p>The Power Profiler Kit II (now called PPK) can supply power to a device-under-test (DUT) and will measure it accurately over time.
You can enable/disable the DUT, see the power consumption at any point and also see the status of 8 digital inputs!
We’ll connect one of the digital inputs to a GPIO pin on the Raspberry Pi.</p><p>This way, the first action of “our application” (aka the finish line) will be to toggle the GPIO pin.
We then just have to measure the time between power-up and GPIO toggle.</p><h5 id="usb-sd-mux">USB-SD-Mux<a href="#usb-sd-mux" aria-label="Heading self-link"></a></h5><p>The USB-SD-Mux is a very useful tool for hardware hackers - it’s an interposer between a microSD card and a DUT with a USB-C interface.
A computer can “steal” the microSD card from the DUT, rewrite its contents and then plug the microSD card back into the DUT, without ever having to touch the device.</p><p>This makes the workflow of testing changes <em>much</em> easier and faster by avoiding unplugging the card, plugging it into a microSD reader, flashing it, plugging the card back into the DUT, etc. It can even be used to automate the reset or power of the DUT with on-board GPIOs.</p><h5 id="usb-uart-converter">USB-UART converter<a href="#usb-uart-converter" aria-label="Heading self-link"></a></h5><p>Some form of UART interface is pretty much required. These changes will break system boot, WiFi connectivity, etc. at some point and without a UART console we would be flying blind. A standard CP2102, FTDI, etc. will work well.</p><h3 id="measurement--test-setup">Measurement / Test setup<a href="#measurement--test-setup" aria-label="Heading self-link"></a></h3><p>On a clean Debian 12 (bookworm) arm64 Lite image, the <code>/boot/firmware/cmdline.txt</code> file was modified to include <code>init=/init.sh</code>.
This means that the kernel will execute the script at <code>/init.sh</code> as the very first thing in userspace (before running systemd or anything else).</p><p>Such an <code>init.sh</code> script might look like this:</p><div><pre tabindex="0"><code data-lang="bash"><span><span><span>#!/bin/bash
</span></span></span><span><span><span></span>
</span></span><span><span>gpioset <span>0</span> <span>4</span><span>=</span><span>0</span>
</span></span><span><span>sleep <span>1</span>
</span></span><span><span>gpioset <span>0</span> <span>4</span><span>=</span><span>1</span>
</span></span><span><span>sleep <span>1</span>
</span></span><span><span>gpioset <span>0</span> <span>4</span><span>=</span><span>0</span>
</span></span><span><span>
</span></span><span><span><span>exec</span> /sbin/init
</span></span></code></pre></div><p>which will toggle the GPIO4 and then resume normal boot by replacing itself with <code>/sbin/init</code> (aka systemd).</p><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/debian12-lite-arm64-initsh.png" alt="Power Profiler screenshot, showing GPIO4 going low after about 12s"></p><p>In this screenshot from Nordic’s Power Profiler software, you can see the current consumption of the Raspberry Pi (at 5V) while booting.
After about 12 seconds, digital input 0 is going low, showing that our <code>init.sh</code> was executed.</p><p>In doing so, a total charge of 1.90 coulomb (coulomb and ampere-seconds are equivalent) was used.<br>Calculating <code>1.9As * 5.0V</code> comes out to <code>9.5Ws</code> energy usage for this boot process.</p><p>For reference: A single AA-alkaline battery can deliver about 13500 Ws of energy.</p><h3 id="reducing-current">Reducing current<a href="#reducing-current" aria-label="Heading self-link"></a></h3><p>Let’s get the easy part out of the way first and reduce the operating current as much as possible.</p><h5 id="disabling-hdmi">Disabling HDMI<a href="#disabling-hdmi" aria-label="Heading self-link"></a></h5><p>We can disable the HDMI encoder entirely. Disabling the GPU is not possible, because we need it to encode our camera data.
If your application doesn’t require camera/GPU support, try disabling the GPU entirely.</p><p>This reduces the current consumption from 136.7mA down to 122.6mA (over 10%!).</p><p>Relevant config.txt parameters:</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># disable HDMI (saves power)</span>
</span></span><span><span><span>dtoverlay</span><span>=</span><span>vc4-kms-v3d,nohdmi</span>
</span></span><span><span><span>max_framebuffers</span><span>=</span><span>1</span>
</span></span><span><span><span>disable_fw_kms_setup</span><span>=</span><span>1</span>
</span></span><span><span><span>disable_overscan</span><span>=</span><span>1</span>
</span></span><span><span>
</span></span><span><span><span># disable composite video output</span>
</span></span><span><span><span>enable_tvout</span><span>=</span><span>0</span>
</span></span></code></pre></div><h5 id="disabling-activity-led">Disabling Activity LED<a href="#disabling-activity-led" aria-label="Heading self-link"></a></h5><p>Just by disabling the activity LED, we can save 2mA (122.6mA down to 120.6mA).</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span>dtparam</span><span>=</span><span>act_led_trigger=none</span>
</span></span><span><span><span>dtparam</span><span>=</span><span>act_led_activelow=on</span>
</span></span></code></pre></div><h5 id="disabling-camera-led">Disabling Camera LED<a href="#disabling-camera-led" aria-label="Heading self-link"></a></h5><p>Repeat the same for the camera LED (if present). It will also reduce the chance of the LED reflecting back into the image.</p><h4 id="turbo-tweaking">Turbo tweaking<a href="#turbo-tweaking" aria-label="Heading self-link"></a></h4><p>As mentioned before, saving current while wasting time might not be ideal.</p><p>With our current changes, the Pi can boot while using 1.62As.
<img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/turbo-defaults.png" alt="Power Profiler screenshot, showing a total current usage of 1.62C/As"></p><div><pre tabindex="0"><code data-lang="ini"><span><span><span>force_turbo</span><span>=</span><span>0</span>
</span></span><span><span><span>initial_turbo</span><span>=</span><span>10</span>
</span></span><span><span><span>arm_boost</span><span>=</span><span>0</span>
</span></span></code></pre></div><p>Without forced turbo mode, 1.58As were used:
<img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/turbo-disabled.png" alt="Power Profiler screenshot, showing a total current usage of 1.58C/As"></p><p>For some, unknown reason, disabling the turbo/boost mode also inverts the default state of GPIO4 (thus I’ve switched the polarity in init.sh).</p><h3 id="reducing-time">Reducing time<a href="#reducing-time" aria-label="Heading self-link"></a></h3><p>The ~13% reduction in current is helpful, but there’s still a long way to go.</p><p>The Pi takes 8s (while consuming ~1As) before the first line of Linux output appears on the console.<br>Luckily, there a number of ways to get more info about those 8 seconds.</p><h4 id="debug-boot">Debug boot<a href="#debug-boot" aria-label="Heading self-link"></a></h4><p>In the boot process of the Raspberry Pi family, the GPU initializes first.<br>It talks to the SD card and looks for a <code>bootcode.bin</code> file (Pi 4 and newer use an EEPROM instead).</p><p>We can modify this bootcode.bin to <a href="https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#bootcode-bin-uart-enable" target="_blank">enable detailed UART logging</a>:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>sed -i -e <span>"s/BOOT_UART=0/BOOT_UART=1/"</span> /boot/firmware/bootcode.bin
</span></span></code></pre></div><p><strong>Backup the original bootcode.bin first, this process is potentially destructive.</strong></p><p>Rebooting with <code>BOOT_UART</code> enabled gives us loads of nice information:</p><pre tabindex="0"><code>Raspberry Pi Bootcode

Found SD card, config.txt = 1, start.elf = 1, recovery.elf = 0, timeout = 0
Read File: config.txt, 1322 (bytes)

Raspberry Pi Bootcode
Read File: config.txt, 1322
Read File: start.elf, 2981376 (bytes)
Read File: fixup.dat, 7303 (bytes)
MESS:00:00:01.295242:0: brfs: File read: /mfs/sd/config.txt
MESS:00:00:01.300131:0: brfs: File read: 1322 bytes
MESS:00:00:01.335680:0: HDMI0:EDID error reading EDID block 0 attempt 0
[..]
MESS:00:00:01.392537:0: HDMI0:EDID error reading EDID block 0 attempt 9
MESS:00:00:01.398632:0: HDMI0:EDID giving up on reading EDID block 0
MESS:00:00:01.406335:0: brfs: File read: /mfs/sd/config.txt
MESS:00:00:01.411272:0: gpioman: gpioman_get_pin_num: pin LEDS_PWR_OK not defined
MESS:00:00:01.918176:0: gpioman: gpioman_get_pin_num: pin LEDS_PWR_OK not defined
MESS:00:00:01.923999:0: *** Restart logging
MESS:00:00:01.927872:0: brfs: File read: 1322 bytes
MESS:00:00:01.933328:0: hdmi: HDMI0:EDID error reading EDID block 0 attempt 0
[..]
MESS:00:00:01.995436:0: hdmi: HDMI0:EDID error reading EDID block 0 attempt 9
MESS:00:00:02.002052:0: hdmi: HDMI0:EDID giving up on reading EDID block 0
MESS:00:00:02.007955:0: hdmi: HDMI0:EDID error reading EDID block 0 attempt 0
[..]
MESS:00:00:02.070610:0: hdmi: HDMI0:EDID error reading EDID block 0 attempt 9
MESS:00:00:02.077225:0: hdmi: HDMI0:EDID giving up on reading EDID block 0
MESS:00:00:02.082840:0: hdmi: HDMI:hdmi_get_state is deprecated, use hdmi_get_display_state instead
MESS:00:00:02.091586:0: HDMI0: hdmi_pixel_encoding: 162000000
MESS:00:00:02.799203:0: brfs: File read: /mfs/sd/initramfs8
MESS:00:00:02.803082:0: Loaded 'initramfs8' to 0x0 size 0xb0898e
MESS:00:00:02.821799:0: initramfs loaded to 0x1b4e7000 (size 0xb0898e)
MESS:00:00:02.836318:0: dtb_file 'bcm2710-rpi-zero-2-w.dtb'
MESS:00:00:02.840194:0: brfs: File read: 11569550 bytes
MESS:00:00:02.849171:0: brfs: File read: /mfs/sd/bcm2710-rpi-zero-2-w.dtb
MESS:00:00:02.854262:0: Loaded 'bcm2710-rpi-zero-2-w.dtb' to 0x100 size 0x8258
MESS:00:00:02.876038:0: brfs: File read: 33368 bytes
MESS:00:00:02.892755:0: brfs: File read: /mfs/sd/overlays/overlay_map.dtb
MESS:00:00:02.927145:0: brfs: File read: 5255 bytes
MESS:00:00:02.933541:0: brfs: File read: /mfs/sd/config.txt
MESS:00:00:02.937568:0: dtparam: audio=on
MESS:00:00:02.948005:0: brfs: File read: 1322 bytes
MESS:00:00:02.971952:0: brfs: File read: /mfs/sd/overlays/vc4-kms-v3d.dtbo
MESS:00:00:03.023016:0: Loaded overlay 'vc4-kms-v3d'
MESS:00:00:03.026278:0: dtparam: nohdmi=true
MESS:00:00:03.031105:0: dtparam: act_led_trigger=none
MESS:00:00:03.048180:0: dtparam: act_led_activelow=on
MESS:00:00:03.149316:0: brfs: File read: 2760 bytes
MESS:00:00:03.154502:0: brfs: File read: /mfs/sd/cmdline.txt
MESS:00:00:03.158504:0: Read command line from file 'cmdline.txt':
MESS:00:00:03.164369:0: 'console=serial0,115200 console=tty1 root=PARTUUID=26bbce6b-02 rootfstype=ext4 fsck.repair=yes rootwait cfg80211.ieee80211_regdom=DE init=/init.sh'
MESS:00:00:03.195926:0: gpioman: gpioman_get_pin_num: pin EMMC_ENABLE not defined
MESS:00:00:03.269361:0: brfs: File read: 146 bytes
MESS:00:00:03.812401:0: brfs: File read: /mfs/sd/kernel8.img
MESS:00:00:03.816343:0: Loaded 'kernel8.img' to 0x200000 size 0x8d8bd7
MESS:00:00:05.364579:0: Device tree loaded to 0x1b4de900 (size 0x8605)
MESS:00:00:05.370571:0: uart: Set PL011 baud rate to 103448.300000 Hz
MESS:00:00:05.377080:0: uart: Baud rate change done...
MESS:00:00:05.380495:0: uart: Baud rate[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034]
</code></pre><h3 id="disabling-hdmi-probing">Disabling HDMI probing<a href="#disabling-hdmi-probing" aria-label="Heading self-link"></a></h3><p>The bootloader spends a lot of time trying to auto-detect video parameters for a possibly attached HDMI monitor.<br>We don’t have HDMI (it’s disabled anyway, remember?), so it doesn’t make much sense to wait for an I2C response with EDID (resolution, frame rate, etc.) information.</p><p>By simply hardcoding an EDID string, we can disable any probing:</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># don't try to read HDMI eeprom</span>
</span></span><span><span><span>hdmi_blanking</span><span>=</span><span>2</span>
</span></span><span><span><span>hdmi_ignore_edid</span><span>=</span><span>0xa5000080</span>
</span></span><span><span><span>hdmi_ignore_cec_init</span><span>=</span><span>1</span>
</span></span><span><span><span>hdmi_ignore_cec</span><span>=</span><span>1</span>
</span></span></code></pre></div><h3 id="disable-hat-poe-and-lcd-probing">Disable HAT, PoE and LCD probing<a href="#disable-hat-poe-and-lcd-probing" aria-label="Heading self-link"></a></h3><p>The boot process will additionally try to detect I2C EEPROMs on HATs, will try to detect a PoE hat (which needs a fan) and some other things.
We can safely disable those:</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># all these options cause a wait for an I2C bus response, we don't need any of them, so let's disable them.</span>
</span></span><span><span><span>force_eeprom_read</span><span>=</span><span>0</span>
</span></span><span><span><span>disable_poe_fan</span><span>=</span><span>1</span>
</span></span><span><span><span>ignore_lcd</span><span>=</span><span>1</span>
</span></span><span><span><span>disable_touchscreen</span><span>=</span><span>1</span>
</span></span><span><span><span>disable_fw_kms_setup</span><span>=</span><span>1</span>
</span></span></code></pre></div><h3 id="disable-camera--display-probing">Disable camera &amp; display probing<a href="#disable-camera--display-probing" aria-label="Heading self-link"></a></h3><p>Probing for an attached MIPI camera or display will also take some time.
We know which camera is attached (HQ Camera, IMX477 in this case), so let’s hardcode this:</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># no autodetection for anything (will wait for I2C answers)</span>
</span></span><span><span><span>camera_auto_detect</span><span>=</span><span>0</span>
</span></span><span><span><span>display_auto_detect</span><span>=</span><span>0</span>
</span></span><span><span>
</span></span><span><span><span># load HQ camera IMX477 sensor manually</span>
</span></span><span><span><span>dtoverlay</span><span>=</span><span>imx477</span>
</span></span></code></pre></div><h3 id="disabling-initramfs">Disabling initramfs<a href="#disabling-initramfs" aria-label="Heading self-link"></a></h3><p>The above changes brought the (self reported) boot time from 5.38s down to 4.75s.<br>We can disable the initramfs entirely by removing <code>auto_initramfs=1</code>.</p><p>Savings depend on the size of the initramfs of course, but this brings us down to 4.47s.</p><h3 id="tested-with-no-significant-difference">Tested, with no significant difference<a href="#tested-with-no-significant-difference" aria-label="Heading self-link"></a></h3><p>Overclocking the SD peripheral to 100 MHz is often recommended online but did not create a measurable difference in boot performance.</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># not recommended! data corruption risk!</span>
</span></span><span><span><span>dtoverlay</span><span>=</span><span>sdtweak,overclock_50=100</span>
</span></span></code></pre></div><p>Operating the SD peripheral at such high speeds also risks data corruption (on write accesses), which is very undesirable in remote IoT devices.</p><h3 id="kernel-load">Kernel load<a href="#kernel-load" aria-label="Heading self-link"></a></h3><p>At this point, loading the kernel is one of the slowest operations:</p><pre tabindex="0"><code>MESS:00:00:03.816343:0: Loaded 'kernel8.img' to 0x200000 size 0x8d8bd7
MESS:00:00:05.364579:0: Device tree loaded to 0x1b4de900 (size 0x8605)
</code></pre><p>Loading 9276375 Bytes takes about 1.54s -&gt; about 6 MiB/s transfer speed.</p><p>This load is being done by the GPU (!) with the internal, proprietary VideoCoreIV processor.<br>It’s possible that the loader code is just inefficient and slow, it’s also possible that it is using very conservative settings.<br>Sadly, it’s a black box and we can’t touch registers or mess with the parameters in any other useful way.</p><p>I haven’t found a good way to optimize this yet, so a smaller kernel is needed.</p><p>Overclocking the GPU processor core is theoretically possible with</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># Overclock GPU VideoCore IV processor (not recommended!)</span>
</span></span><span><span><span>core_freq_min</span><span>=</span><span>500</span>
</span></span><span><span><span>core_freq</span><span>=</span><span>550</span>
</span></span></code></pre></div><p>which does lead to a 20% reduction in kernel load time. The side effects (reliability, etc.) of this are unknown.</p><h3 id="buildroot--custom-kernel">Buildroot / Custom kernel<a href="#buildroot--custom-kernel" aria-label="Heading self-link"></a></h3><p>It’s time to migrate the system from Raspbian/Debian to a custom built Buildroot distro (especially to get the custom kernel).</p><p>Using buildroot 2024.02.1, a very stripped down system was configured.<br>Native aarch64 toolchain, still with full glibc and the Raspberry Pi userland tools (like camera utilities).</p><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/buildroot-menuconfig.png" alt="Buildroot ncurses menuconfig screenshot"></p><p>The kernel was configured:</p><ul><li>without sound support</li><li>without most of the block device &amp; filesystem drivers (except SD/MMC and ext4)</li><li>without RAID support</li><li>without USB support</li><li>without HID support</li><li>without DVB support</li><li>without video &amp; framebuffer support (HDMI is disabled anyway)</li><li>without advanced networking features (tunnels, bridging, firewalling, etc.)</li><li>uncompressed (not Gzip)</li><li>modules uncompressed (not Gzip)</li></ul><p>In testing, having both the kernel and the modules uncompressed results in a net-positive energy result (even if more time is spent in the GPU loading the kernel).
Decompressing Gzip takes a lot of energy (and effectively involves another relocation step).</p><p>A security feature called KASLR was also disabled.<br>KASLR randomizes the load address of the kernel in memory, making it harder to write exploit code (because the memory location of the kernel is unknown).
This requires the kernel to be re-located after it has been loaded by the GPU.</p><p>In our usecase, the network attack surface is very limited, so KASLR can be disabled (all application software runs as root anyway).
Mitigations for speculative execution vulnurabilies like Spectre were also disabled.</p><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/buildroot-linux-menuconfig.png" alt="Linux 6.6.26 menuconfig screenshot"></p><p>The resulting kernel is 8.5MiB (uncompressed) in size, 4.1MiB compressed as Gzip (which isn’t used here, just for comparison).<br>The original Raspbian kernel was 25 MiB (uncompressed), 8.9 MiB compressed as Gzip.</p><h3 id="final-result">Final result<a href="#final-result" aria-label="Heading self-link"></a></h3><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/buildroot-kernel.png" alt="Power Profiler screenshot, showing GPIO4 going low after 3.4s"></p><p><strong>We can now boot into a Linux user space program in less than 3.5s!</strong><br>~400ms is spent in the Linux kernel (difference between pin 0 and pin 1)</p><p>Total energy consumption: <strong>0.364 As * 5.0 V = 1.82 Ws</strong><br>We reduced the energy required by a factor of 5 (compared to stock Debian at 9.5 Ws until user space).</p><h3 id="links">Links<a href="#links" aria-label="Heading self-link"></a></h3><ul><li><a href="https://github.com/Manawyrm/SolarCamPi-Buildroot/blob/v2/buildroot/board/raspberrypi0w/config.txt" target="_blank">SolarCamPi config.txt</a>: Complete config.txt</li><li><a href="https://github.com/Manawyrm/SolarCamPi-Buildroot/blob/v2/buildroot/configs/linux_solarcampi_defconfig" target="_blank">SolarCamPi Linux kernel defconfig</a>: Stripped down kernel config</li><li><a href="https://github.com/Manawyrm/SolarCamPi-Buildroot/tree/v2" target="_blank">SolarCamPi-Buildroot (v2 branch)</a>: Full Buildroot tree (work-in-progress!)</li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Americans' love affair with big cars is killing them (232 pts)]]></title>
            <link>https://www.economist.com/interactive/united-states/2024/08/31/americans-love-affair-with-big-cars-is-killing-them</link>
            <guid>41418562</guid>
            <pubDate>Sun, 01 Sep 2024 17:18:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.economist.com/interactive/united-states/2024/08/31/americans-love-affair-with-big-cars-is-killing-them">https://www.economist.com/interactive/united-states/2024/08/31/americans-love-affair-with-big-cars-is-killing-them</a>, See on <a href="https://news.ycombinator.com/item?id=41418562">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>    <main>   <div><p><body-text><!-- HTML_TAG_START --><span data-caps="initial">W</span><small>itnesses said</small> the driver showed no signs of slowing down. On June 3rd Nicole Louthain and her six-year-old daughter were stopped at a red light in Grand Forks, North Dakota when they were struck from behind by Travis Bell. Such crashes are not uncommon—around 10,000 rear-end collisions occur in America every day. What made this one noteworthy was that the vehicles involved were so unevenly matched. Ms Louthain was driving a Ford Focus, a compact car weighing around 3,000lb (1,360kg), whereas Mr Bell was in a 7,000lb Ram 3500 “heavy duty” pickup. Alas, the disparity proved deadly. Although Mr Bell was not harmed, Ms Louthain suffered serious injuries. (Court documents later showed that Mr Bell had been drinking.) Her daughter Katarina was air-lifted to a nearby hospital where she died two days later.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->The crash in Grand Forks helps to illustrate a sad truth about America’s roads. For all the safety features available in cars today to help them avoid crashes, when they happen they are still often determined by the laws of physics. When two vehicles collide, it is usually the heavier one that prevails. This advantage has changed little over time. Thirty years ago when a passenger car crashed with a <a href="https://www.economist.com/united-states/2023/04/20/rural-americans-are-importing-tiny-japanese-pickup-trucks">pickup truck</a> or sport-utility vehicle (<small>SUV</small>), the driver of the car was roughly four times as likely to die; today this driver dies around three times as often. Critics say this is too high a price to pay for roomier interiors and more powerful engines. Carmakers insist they are giving consumers what they want. An analysis by <i>The Economist</i> shows that weight remains a critical factor in car crashes in America. Reining in <a href="https://www.economist.com/the-economist-explains/2024/03/11/why-american-cars-are-so-big">the heaviest vehicles</a> would save lives.<!-- HTML_TAG_END --> </body-text> </p> </div> <figure><ai2sveltewrap> </ai2sveltewrap>  </figure><div><p><body-text><!-- HTML_TAG_START -->Mismatches between big and small cars on America’s roads are not new. In the 1960s the 1,400lb Mini Cooper shared the road with the 5,000lb Cadillac Fleetwood and the 5,500lb Lincoln Continental. But whereas today heavier vehicles attract the bulk of the criticism, back then it was lighter ones that drew scrutiny. Indeed many cars of the time were woefully unsafe. In 1969 America’s National Highway Safety Bureau conducted crash tests on a Subaru 360 and a King Midget, two sub-1,000lb “mini-cars”. When pitted against vehicles twice their size, the tiny cars crumpled like soda cans.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->Over the years policymakers struggled to solve this mismatch, or “incompatibility”, problem. Often, they made things worse. When Congress set fuel-efficiency standards in the wake of the oil shocks of the 1970s, cars were swiftly downsized. Within ten years cars shed 1,000lb; trucks dropped 500lb. Although these changes saved motorists money at the pump, they also led to more traffic fatalities. A paper published in 1989 by researchers at the Brookings Institution and the Harvard School of Public Health estimated that the shift towards smaller, lighter cars in the 1970s and 1980s boosted fatalities by 14-27%. A report released in 2002 by America’s National Research Council concluded that the downsizing of America’s fleet led to thousands of unnecessary deaths.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->As cars got bigger, regulators shifted their focus from the lightest vehicles to the heaviest ones. The impetus for this was the rise of <small>SUV</small>s. Between 1990 and 2005 the market share of such vehicles in America grew from 6% to 26%, pushing up the weight of an average new car from 3,400lb to nearly 4,100lb. As suburban soccer moms traded in their station wagons for Ford Expeditions, many felt safer. And they were right. “One of the reasons the roads are much safer is because vehicles... [are] bigger and they’re heavier than they were,” Adrian Lund of the Insurance Institute for Highway Safety (<small>IIHS</small>), an industry research organisation, told conference-goers in 2011. The Competitive Enterprise Institute, a think-tank, even advocated supersizing America’s fleet to improve safety, writing in the <i>Wall Street Journal</i> that large vehicles are “the solution, not the problem”.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->But researchers quickly learned that the extra protection provided by heavier vehicles comes at the expense of others on the road. In a paper published in 2004 Michelle White of the University of California, San Diego estimated that for every deadly crash avoided by an <small>SUV</small> or pickup truck, there were an additional 4.3 among other drivers, pedestrians and cyclists. Another paper in 2012 by Shanjun Li of Resources for the Future, a think-tank, estimated that when a car crashes with an <small>SUV</small> or pickup, rather than another car, the driver’s fatality rate increased by 31%. In 2014 Michael Anderson and Maximilian Auffhammer of the University of California, Berkeley estimated that when two cars crash, a 1,000lb increase in the weight of one vehicle raised the fatality rate in the other by 47%.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->Researchers also found that the safety benefits of vehicle weight suffer from diminishing returns. This means that, once vehicles reach a certain weight, packing on more pounds provides little additional safety, while inflicting more harm on others. “At some point heavy vehicles cost more lives…than they save,” wrote Brian O’Neill and Sergey Kyrychenko of the <small>IIHS</small> in 2004. This makes intuitive sense, says Mr Anderson of Berkeley. “Once you outweigh the other guy by a factor of two times, is adding 200 pounds more really going to make a difference for you? Probably not. But it’ll make sure that he gets completely destroyed.”<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->So how big is too big? At what point do the costs of the heaviest vehicles—measured in lives lost—vastly exceed their benefits? To answer this question, <i>The Economist</i> compiled ten years’ worth of crash data from more than a dozen states. Like the data compiled by Messrs Anderson and Auffhammer, our figures come from reports filed by police officers, who are tasked with recording information about car crashes when called to the scene. Although all states collect such data, we focus on those that collect the most detailed figures and share them with researchers. The resulting dataset, which covers more than a third of America’s population, provides us with a sample that is both big and representative.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->In total, our dataset includes millions of crashes across 14 states between 2013 and 2023. Although accident reports vary from state to state, most of the crashes in our database include information about the location of the crash, the number of cars involved, each passenger’s age and gender, whether they were wearing seatbelts and the types of injuries that they suffered. To obtain the curb weight of each vehicle, we collected the vehicle identification numbers (<small>VINs</small>) included in each crash report, and then matched them to vehicle specs data from VinAudit, an auto-data provider. Combining these data yielded roughly 10m crashes. After dropping observations with missing data, we were left with around 7.5m two-vehicle crashes involving more than 15m cars.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->What do these data tell us about the relationship between vehicle weight and road safety?<!-- HTML_TAG_END --> </body-text> </p> </div> <div><p><body-text><!-- HTML_TAG_START -->The heaviest 1% of vehicles in our dataset—those weighing around 6,800lb—suffer 4.1 “own-car deaths” per 10,000 crashes, on average, compared with around 6.6 for cars in the middle of our sample weighing 3,500lb, and 15.8 for the lightest 1% of vehicles weighing just 2,300lb. But heavy cars are also far more dangerous to other drivers. The heaviest vehicles in our data were responsible for 37 “partner-car deaths” per 10,000 crashes, on average, compared with 5.7 for median-weight cars and 2.6 for the lightest cars.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->To estimate this relationship more precisely, and control for potential sources of bias, we conducted a regression analysis of our sample of 7.5m two-vehicle crashes. We found that getting into a crash with a vehicle that is 1,000lb heavier is associated with a 0.06-percentage-point increase in the probability of suffering a fatality, even after controlling for the curb weight of one’s own car, the age and gender of the driver, the population density of the crash location and whether the passengers were wearing seatbelts. Given that the probability of suffering a fatality in a two-vehicle crash is 0.09%, on average, this suggests that getting hit by an additional 1,000lbs of steel and aluminium—roughly the difference between a Toyota Camry and a Ford Explorer—boosts the likelihood of death by 66%.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->As for the weight at which the social costs of driving a heavier vehicle exceed the benefits, the evidence is clear. Vehicles in the top 10% of our sample—those weighing at least 5,000lb—are involved in roughly 26 deaths per 10,000 crashes, on average, including 5.9 in their own car and 20.2 in partner vehicles. For vehicles in the next-heaviest 10% of our sample—those weighing between 4,500lb and 5,000lb—the equivalent figures are 5.4 and 10.3 deaths per 10,000 crashes. A back-of-the-envelope estimate suggests that if the heaviest tenth of vehicles in America’s fleet were downsized to this lighter weight class, road fatalities in multi-car crashes—which totaled 19,081 in 2023—could be reduced by 12%, or 2,300, without sacrificing the safety of any cars involved.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->Given these figures, you might expect carmakers to be slamming the brakes on production of their heaviest <small>SUV</small>s and pickups. In fact, they are pressing on the accelerator. Official figures from the Environmental Protection Agency show that the average new car in America weighs more than 4,400lb (compared with 3,300lb in the European Union and 2,600lb in Japan). In 2023 vehicles weighing more than 5,000lb accounted for a whopping 31% of new cars, up from 22% five years earlier.<!-- HTML_TAG_END --> </body-text> </p> </div> <figure><ai2sveltewrap> </ai2sveltewrap>  </figure><div><p><body-text><!-- HTML_TAG_START -->It would be easy to blame car-buyers for this trend but Mr Anderson says that Americans looking for a new car face a cold-war-style “arms race”. “As you see the vehicle fleet around you getting heavier, then you want to protect yourself rationally by buying a bigger and heavier car.” Such rational individual decisions have led to a suboptimal outcome for society as a whole.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->When asked to comment on <i>The Economist</i>’s findings, representatives from the big three car manufacturers pointed to safety features that help drivers avoid crashes, rather than those that make them less deadly. “Vehicle weight doesn’t solely determine crash performance,” Mike Levine, a Ford spokesman, wrote in an email, highlighting crash-avoidance technologies such as automatic emergency braking and front and rear “brake assist”. General Motors pointed out that carmakers have improved the compatibility of their vehicles over the years, citing a voluntary deal struck by manufacturers in 2003, more than twenty years ago. Stellantis (whose biggest shareholder part-owns <i>The Economist</i>’s parent company) declined to comment except to say that the company’s vehicles “meet or exceed all applicable federal safety standards”.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->Regulators are ill-equipped to fix the problem. America’s tax system subsidises heavier vehicles by setting more lenient fuel-efficiency standards for light trucks, and allowing bosses who purchase heavy-duty vehicles for business purposes to deduct part of the cost from their taxable income. The National Highway Traffic Safety Administration (<small>NHTSA</small>), America’s top auto-safety agency, uses a five-star rating system to score crash performance, but only takes account of the safety of the occupants of the vehicle in question, not that of other drivers. “Our rating system reflects a bias towards the occupant,” explains Laura Sandt of the Highway Safety Research Centre at the University of North Carolina, “it is not designed to rate the car in terms of its holistic safety effects.” The <small>NHTSA</small> declined to comment on <i>The Economist</i>’s findings.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->There are signs that Americans may be wising up. A survey conducted last year by YouGov, a pollster, found that 41% of Americans think that <small>SUV</small>s and pickup trucks have become too big; 49% said such vehicles are more dangerous for other cars and 50% said they endanger cyclists and pedestrians. Researchers are raising the alarm. Since 1989 the <small>IIHS</small> has regularly published the driver-fatality rates of popular car models. In 2023, for the first time, the group also estimated the rate at which cars kill drivers in other vehicles. Policymakers are starting to take notice too. “I’m concerned about the increased risk of severe injury and death for all road users from heavier curb weights,” Jennifer Homendy, chair of the National Transportation Safety Board, said in a speech last year.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->But the odds that carmakers curb their heaviest, most dangerous vehicles are slim. American car-buyers value safety, but mainly for themselves, not society as a whole. And although regulators are tasked with protecting consumers, they rarely do so at the expense of choice, no matter how deadly the consequences. “There may be a certain point where you say, ‘You know what, passenger vehicles shouldn't be weighing this much,’” says Raul Arbelaez of the <small>IIHS</small>’s Vehicle Research Centre. “But it would, politically, be really hard to gain any momentum on that.” Finally the shift towards <a href="https://www.economist.com/business/2024/04/07/think-tesla-is-in-trouble-pity-even-more-its-wannabe-ev-rivals">electric power</a> is likely to increase their weight further, as battery-powered vehicles tend to be heavier than their internal-combustion equivalents.<!-- HTML_TAG_END --> </body-text> </p> </div><div><p><body-text><!-- HTML_TAG_START -->“Manufacturers are playing by the book,” says Mark Chung of the National Safety Council, a non-profit. “They’re making a business decision, and it’s a rational decision. Unless they’re forced to think differently, they’re not going to. So I think this is where our federal partners really need to step up.”<span data-ornament="ufinish">■</span><!-- HTML_TAG_END --> </body-text> </p> </div><div><p>Sources: </p><body-text><!-- HTML_TAG_START -->State governments; VinAudit; <i>The Economist</i><!-- HTML_TAG_END --> </body-text> </div>  </main>  
			
			
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple and Nvidia in talks to invest in ChatGPT (124 pts)]]></title>
            <link>https://www.businesstoday.in/technology/news/story/apple-nvidia-in-talks-to-invest-in-chatgpt-maker-openai-potentially-valuing-company-over-100-billion-443624-2024-08-30</link>
            <guid>41418302</guid>
            <pubDate>Sun, 01 Sep 2024 16:46:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.businesstoday.in/technology/news/story/apple-nvidia-in-talks-to-invest-in-chatgpt-maker-openai-potentially-valuing-company-over-100-billion-443624-2024-08-30">https://www.businesstoday.in/technology/news/story/apple-nvidia-in-talks-to-invest-in-chatgpt-maker-openai-potentially-valuing-company-over-100-billion-443624-2024-08-30</a>, See on <a href="https://news.ycombinator.com/item?id=41418302">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="descriptionStoryId"><p>Apple and Nvidia are reportedly in talks to invest in OpenAI, the company behind ChatGPT, as part of a new fundraising round. This round could potentially value OpenAI at over $100 billion, according to media reports.</p>

<p>The Wall Street Journal reported that Apple is exploring the possibility of joining the funding round, while Bloomberg News indicated Nvidia’s potential involvement. This comes after news that Thrive Capital, a venture capital firm, is planning to invest around $1 billion in OpenAI, leading the current fundraising efforts.</p><div><h4>Related Articles</h4><div><ul><li><a target="_blank" title="OpenAI launches fine-tuning for GPT-4o, unlocking enhanced performance and customisation" href="https://www.businesstoday.in/technology/news/story/openai-launches-fine-tuning-for-gpt-4o-unlocking-enhanced-performance-and-customisation-442518-2024-08-22">OpenAI launches fine-tuning for GPT-4o, unlocking enhanced performance and customisation</a></li><li><a target="_blank" title="Ex-Google CEO thinks company's ‘work-life balance’ mentality is why it is losing AI race to startups like OpenAI" href="https://www.businesstoday.in/technology/news/story/ex-google-ceo-thinks-companys-work-life-balance-mentality-is-why-it-is-losing-ai-race-to-startups-like-openai-441535-2024-08-14">Ex-Google CEO thinks company's ‘work-life balance’ mentality is why it is losing AI race to startups like OpenAI</a></li></ul></div></div>

<p>OpenAI has become increasingly integral to Apple’s AI strategy. In June, Apple introduced OpenAI’s chatbot, ChatGPT, to its devices under the initiative called “Apple Intelligence.” Additionally, Apple is reportedly set to gain an observer role on OpenAI’s board, highlighting the deepening relationship between the two companies.</p>

<p>Microsoft, OpenAI’s largest investor with over $10 billion already committed, is also expected to participate in this new funding round. However, the specific amounts that Apple, Nvidia, and Microsoft are planning to invest have not been disclosed.</p>

<p>OpenAI’s rising valuation is a result of the intense competition in the AI sector, which intensified after the launch of ChatGPT in late 2022. This launch spurred companies across various industries to pour billions into AI technology to stay competitive. Earlier this year, OpenAI was valued at $80 billion following a tender offer led by Thrive Capital, where the firm sold existing shares.<br>
&nbsp;</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Pentium as a Navajo Weaving (389 pts)]]></title>
            <link>https://www.righto.com/2024/08/pentium-navajo-fairchild-shiprock.html</link>
            <guid>41418301</guid>
            <pubDate>Sun, 01 Sep 2024 16:46:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.righto.com/2024/08/pentium-navajo-fairchild-shiprock.html">https://www.righto.com/2024/08/pentium-navajo-fairchild-shiprock.html</a>, See on <a href="https://news.ycombinator.com/item?id=41418301">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-1847189222202375114" itemprop="description articleBody">
<p>Hurrying through the National Gallery of Art five minutes before closing, I passed a Navajo weaving with a complex abstract
pattern.
Suddenly, I realized the pattern was strangely familiar, so I stopped and looked closely.
The design turned out to be an image of Intel's Pentium chip, the start of the long-lived Pentium family.<span id="fnref:pentium"><a href="#fn:pentium">1</a></span>
The weaver, Marilou Schultz, created the artwork in 1994 using traditional materials and techniques.
The rug was commissioned by Intel as a gift to <a href="https://archive.org/details/ERIC_ED409127/page/n2/mode/1up">AISES</a> (American Indian Science &amp; Engineering Society) and
is currently part of an art exhibition—<a href="https://www.nga.gov/exhibitions/2024/woven-histories-textiles-modern-abstraction.html">Woven Histories: Textiles and Modern Abstraction</a>—focusing on the intersection between abstract art and woven textiles.</p>
<p><a href="https://static.righto.com/images/pentium-rug/pentium-rug.jpg"><img alt="&quot;Replica of a Chip&quot;, created by Marilou Schultz, 1994. Wool. Photo taken at the National Gallery of Art, 2024." height="560" src="https://static.righto.com/images/pentium-rug/pentium-rug-w500.jpg" title="&quot;Replica of a Chip&quot;, created by Marilou Schultz, 1994. Wool. Photo taken at the National Gallery of Art, 2024." width="500"></a></p><p>"Replica of a Chip", created by Marilou Schultz, 1994. Wool. Photo taken at the National Gallery of Art, 2024.</p>
<p>I talked with Marilou Schultz, a Navajo/Diné weaver and math teacher, to learn more about the artwork.
Schultz learned weaving as a child—part of four generations of weavers—carding the wool, spinning it into yarn, and then weaving it.
For the Intel project, she worked from a photograph of the die, marking it into 64 sections along each side so the die pattern could be
accurately transferred to the weaving.
Schultz used the "raised outline" technique, which gives a three-dimensional effect along borders.
One of the interesting characteristics of the Pentium from the weaving perspective is its lack of symmetry, unlike traditional rugs.
The Pentium weaving was colored with traditional plant dyes;
the cream regions are the natural color of the
wool from the long-horned Navajo-Churro sheep.<span id="fnref:sheep"><a href="#fn:sheep">2</a></span>
The yarn in the weaving is a bit finer than the yarn typically used for knitting.
Weaving was a slow process, with a day's work extending the rug by 1" to 1.5".</p>
<p>The Pentium die photo below shows the patterns and structures on the surface of the fingernail-sized silicon die, over
three million tiny transistors.
The weaving is a remarkably accurate representation of the die,
reproducing the processor's complex designs.
However, I noticed that the weaving was a mirror image of the physical Pentium die; I had to flip the rug image below to make them match.
I asked Ms. Schultz if this was an artistic decision and she explained that she wove the rug to match the photograph.
There is no specific front or back to a Navajo weaving because the design is similar on both sides,<span id="fnref:sides"><a href="#fn:sides">3</a></span>
so the gallery picked an arbitrary side to display.
Unfortunately, they picked the wrong side, resulting in a backward die image. This probably bothers nobody but me, but I
hope the gallery will correct this in future exhibits.
For the remainder of this article, I will mirror the rug to match the physical die.</p>
<p><a href="https://static.righto.com/images/pentium-rug/comparison.jpg"><img alt="Comparison of the Pentium weaving (flipped vertically) with a Pentium die photo. Original die photo from Intel." height="330" src="https://static.righto.com/images/pentium-rug/comparison-w600.jpg" title="Comparison of the Pentium weaving (flipped vertically) with a Pentium die photo. Original die photo from Intel." width="600"></a></p><p>Comparison of the Pentium weaving (flipped vertically) with a Pentium die photo. Original die photo from <a href="https://en.wikichip.org/wiki/File:pentium_die_shot.png">Intel</a>.</p>
<p>The rug is accurate enough that each region can be marked with its corresponding function in the real chip, as shown below.
Starting in the center, the section labeled "integer execution units" is the heart of the processor, performing
arithmetic operations and other functions on integer numbers.
The Pentium is a 32-bit processor, so the integer execution unit is a vertical rectangle, 32 bits wide.
The horizontal lines correspond to different types of circuitry such as adders, multipliers, shifters, and registers.
To the right, the "floating point unit" performs more complex arithmetic operations on floating-point numbers, 
numbers with a fractional part that are used in applications such as spreadsheets and CAD drawings.
Like the integer execution unit, the floating point unit has horizontal stripes corresponding to different functions.
Floating-point numbers are represented with more bits, so the stripes are wider.</p>
<p><a href="https://static.righto.com/images/pentium-rug/p54c-rug-floorplan2.jpg"><img alt="The Pentium weaving, flipped and marked with the chip floorplan." height="640" src="https://static.righto.com/images/pentium-rug/p54c-rug-floorplan2-w600.jpg" title="The Pentium weaving, flipped and marked with the chip floorplan." width="600"></a></p><p>The Pentium weaving, flipped and marked with the chip floorplan.</p>
<p>At the top, the "instruction fetch" section fetches the machine instructions that make up the software.
The "instruction decode" section analyzes each instruction to determine what operations to perform.
Simple operations, such as addition, are performed directly by the integer execution unit.
Complicated instructions (a hallmark of Intel's processors) are broken down into
smaller steps by the "complex instruction support" circuitry, with the steps held in the "microcode ROM".
The "branch prediction logic" improves performance when the processor must make a decision for a branch instruction.</p>
<p>The code and data caches provide a substantial performance boost.
The problem is that the processor is considerably faster than the computer's RAM memory, so the processor can end up sitting idle until program
code or data is provided by memory.
The solution is the cache, a small, fast memory that holds bytes that the processor is likely to need.
The Pentium processor had a small cache by modern standards, holding 8 kilobytes of code and 8 kilobytes of data.
(In comparison, modern processors have multiple caches, with hundreds of kilobytes in the fastest cache and megabytes in a slower
cache.)
Cache memories are built from an array of memory storage elements in a structured grid,
visible in the rug as uniform pink rectangles.
The TLB (Translation Lookaside Buffer) assists the cache.
Finally, the "bus interface logic" connects the processor to the computer's bus, providing access to memory and peripheral
devices.
Around the edges of the physical chip, tiny bond pads provide the connections between the silicon chip and the integrated circuit package.
In the weaving, these tiny pads have been abstracted into small black rectangles.</p>
<p>The weaving is accurate enough to determine that it represents a specific Pentium variant, called P54C.
The motivation for the P54C was that
the original Pentium chips (called P5) were not as fast as hoped and ran hot.
Intel fixed this by using a more advanced manufacturing process, reducing the feature size from 800 to 600 nanometers
and running the chip at 3.3 volts instead of 5 volts.
Intel also modified the chip so that when parts of the chip were idle, the clock signal could be stopped to
save power. (This is the "clock driver" circuitry at the top of the weaving.)
Finally, Intel added multiprocessor logic (adding 200,000 more transistors), allowing two processors to work together more
easily. 
The improved Pentium chip was smaller, faster, and used less power. This variant was called the P54C (for reasons I haven't
been able to determine).
The "multiprocessor logic" is visible in the Pentium rug, showing that it is the P54C Pentium (right) and not the P5 Pentium (left).</p>
<p><a href="https://static.righto.com/images/pentium-rug/pentiums.jpg"><img alt="The Pentium P5 on the left and the P54C on the right, showing the difference in die and package sizes. If you look closely, the P5 die on the left lacks the &quot;multiprocessor logic&quot; in the weaving, showing that the weaving is the P54C. I clipped the pins on the P5 to fit it under a microscope." height="270" src="https://static.righto.com/images/pentium-rug/pentiums-w600.jpg" title="The Pentium P5 on the left and the P54C on the right, showing the difference in die and package sizes. If you look closely, the P5 die on the left lacks the &quot;multiprocessor logic&quot; in the weaving, showing that the weaving is the P54C. I clipped the pins on the P5 to fit it under a microscope." width="600"></a></p><p>The Pentium P5 on the left and the P54C on the right, showing the difference in die and package sizes. If you look closely, the P5 die on the left lacks the "multiprocessor logic" in the weaving, showing that the weaving is the P54C. I clipped the pins on the P5 to fit it under a microscope.</p>
<p>Intel's connection with New Mexico started in 1980 when Intel opened a chip fabrication plant (fab) in Rio Rancho, a suburb north of Albuquerque.
At the time, this plant, Fab 7, was Intel's largest and produced <a href="https://archive.org/details/intelinsidenewme0000unse/page/11/mode/1up">70%</a> of Intel's profits.
Intel steadily grew the New Mexico facility, adding Fab 9 and then Fab 11, which <a href="https://www.nytimes.com/1995/12/03/business/suiting-up-for-america-s-high-tech-future.html">opened</a> in September 1995, building Pentium and Pentium Pro chips in a <a href="https://www.nytimes.com/1995/12/03/business/suiting-up-for-america-s-high-tech-future.html">140-step</a> manufacturing process.
Intel's investment in Rio Rancho has continued with a $4 billion project <a href="https://www.intel.com/content/www/us/en/newsroom/news/updates-intel-10-largest-construction-projects.html#gs.di125l">underway</a> for Fab 9 and Fab 11x.
Intel has been criticized for environmental issues in New Mexico, detailed in the book
<a href="https://archive.org/details/intelinsidenewme0000unse">Intel inside New Mexico: A case study of environmental and economic injustice</a>.
Intel, however, claims a <a href="https://download.intel.com/newsroom/2024/manufacturing/Intel-in-NM-Sustainability-Fact-Sheet.pdf">sustainable future</a> in New Mexico, restoring watersheds, using 100% renewable electricity, and recycling construction waste.</p>
<!--
Intel has continued to support Native American communities through scholarships and the [Next Generation of Native
American Coders program](https://woc.aises.org/content/intel-and-aises-history-engagement).
-->

<h2>Fairchild and Shiprock</h2>
<p>Marilou Schultz is currently creating another weaving based on an integrated circuit, shown below.
Although this chip, the Fairchild 9040, 
is much more obscure than the Pentium, it has important historical symbolism,
as it was built by Navajo workers at a plant on Navajo land.</p>
<p><a href="https://static.righto.com/images/pentium-rug/fairchild-rug.jpg"><img alt="Marilou Schultz's current weaving project. Photo provided by the artist." height="558" src="https://static.righto.com/images/pentium-rug/fairchild-rug-w400.jpg" title="Marilou Schultz's current weaving project. Photo provided by the artist." width="400"></a></p><p>Marilou Schultz's current weaving project. Photo provided by the artist.</p>
<p>In 1965, Fairchild started producing semiconductors in Shiprock, New Mexico, 
about 200 miles northwest of Intel's future facility.
Fairchild produced a <a href="https://archive.computerhistory.org/resources/access/text/2017/01/102770254-05-01-acc.pdf">brochure</a> in 1969 to commemorate the opening of a new plant. Two of the photos in that brochure compared a traditional Navajo weaving to the pattern of a chip, which happened to be the 9040.
Although Fairchild's Shiprock project started optimistically, it was suddenly
shut down a decade later after an armed takeover.
I'll discuss the complicated history of Fairchild in Shiprock and then describe the 9040 chip in more detail.</p>
<p><a href="https://static.righto.com/images/pentium-rug/rug-ic.jpg"><img alt="A Navajo rug and the die of a Fairchild 9040 integrated circuit. Images from Fairchild's commemorative brochure on the opening of a new plant at Shiprock." height="347" src="https://static.righto.com/images/pentium-rug/rug-ic-w600.jpg" title="A Navajo rug and the die of a Fairchild 9040 integrated circuit. Images from Fairchild's commemorative brochure on the opening of a new plant at Shiprock." width="600"></a></p><p>A Navajo rug and the die of a Fairchild 9040 integrated circuit. Images from Fairchild's <a href="https://archive.computerhistory.org/resources/access/text/2017/01/102770254-05-01-acc.pdf">commemorative brochure</a> on the opening of a new plant at Shiprock.</p>
<p>The story of Fairchild starts with William Shockley, who invented the junction transistor at Bell Labs, won the Nobel prize, and founded
Shockley Semiconductor Laboratory in 1957 to build transistors.
Unfortunately, although Shockley was brilliant,
he was said to be <a href="https://www.npr.org/2006/07/21/5573656/electronics-pioneer-william-shockleys-legacy">the worst manager in the history of electronics</a>, not to mention a notorious eugenicist and racist later in life.
Eight of his top employees—called the "traitorous eight"—left Shockley's company in 1957 to found Fairchild Semiconductor.
(The traitorous eight included Gordon Moore and Robert Noyce who ended up founding Intel in 1968).
Noyce (co-)invented the integrated circuit in 1959 and Fairchild soon became a top semiconductor manufacturer, famous
for its foundational role in Silicon Valley.</p>
<p>The Shiprock project was part of an attempt in the 1960s to improve the economic situation of the Navajo through industrial development.
The Navajo had suffered a century of oppression including forced deportation from their land through the Long Walk (1864-1866).
The Navajo were suffering from 65% unemployment, a per-capita income of $300, and a lack
of basics such as roads, electricity, running water, and health care.
The Bureau of Indian Affairs was now trying to encourage economic
self-sufficiency by funding industrial projects on Indian land.<span id="fnref:economy"><a href="#fn:economy">4</a></span>
Navajo Tribal Chairman Raymond Nakai viewed industrialization as the only answer.
Called "<a href="https://books.google.com/books?id=aP4QyAXsnmkC&amp;lpg=PP1&amp;pg=PA228#v=onepage&amp;q&amp;f=false">the first modern Navajo political leader</a>", Nakai <a href="https://books.google.com/books?id=0y-8OOtshbAC&amp;pg=PA7#v=onepage&amp;q&amp;f=false">stated</a>,
"There are some would-be leaders of the tribe calling for the banishment of industry from the reservation and a return to the life of a century ago! But, it would not solve the problems. There is not sufficient grazing land on the reservation to support the population so industry must be brought in."
Finally, Fairchild was trying to escape the high cost of Silicon Valley labor by opening plants in low-cost locations such as Maine, Australia, and Hong Kong. <!-- https://archive.computerhistory.org/resources/access/text/2017/03/102770842-05-01-acc.pdf --></p>
<p>These factors led 
Fairchild to open a manufacturing facility on Navajo land in Shiprock, New Mexico.
The project started in 1965 with 50 Navajo workers in the Shiprock Community Center manufacturing transistors,
rapidly increasing to <a href="https://www.bia.gov/as-ia/opa/online-press-release/electronics-industry-expanding-navajo-reservation">366 Navajo workers</a>.</p>
<p><a href="https://static.righto.com/images/pentium-rug/shiprock.jpg"><img alt="Fairchild's manufacturing plant in Shiprock, NM, named after the Shiprock rock formation in the background. The formation is called Tsé Bitʼaʼí in Navajo.
    From The Industrialization of a 'Sleeping Giant', Commerce Today, January 25, 1971." height="283" src="https://static.righto.com/images/pentium-rug/shiprock-w500.jpg" title="Fairchild's manufacturing plant in Shiprock, NM, named after the Shiprock rock formation in the background. The formation is called Tsé Bitʼaʼí in Navajo.
    From The Industrialization of a 'Sleeping Giant', Commerce Today, January 25, 1971." width="500"></a></p><p>Fairchild's manufacturing plant in Shiprock, NM, named after the Shiprock rock formation in the background. The formation is called <i>Tsé Bitʼaʼí</i> in Navajo.
    From <a href="https://books.google.com/books?id=GddHAQAAIAAJ&amp;newbks=1&amp;newbks_redir=0&amp;pg=RA7-PA17#v=onepage&amp;q&amp;f=false">The Industrialization of a 'Sleeping Giant'</a>, Commerce Today, January 25, 1971.</p>
<p>By 1967, Robert Noyce, group vice-president of Fairchild, regarded the Shiprock plant as successful.
He <a href="https://bitsavers.org/magazines/Computers_And_Automation/196704.pdf">explained</a> that Fairchild
was motivated both by low labor costs and by social benefits, saying, "Probably nobody would
ever admit it, but I feel sure the Indians are the most underprivileged ethnic group in the United States."
Two years later, Lester Hogan, Fairchild's president,
<a href="https://www.worldradiohistory.com/Archive-Electronics/60s/69/Electronics-1969-03-17.pdf#page=55">stated</a>,
"I thought the Shiprock plant was one of Bob Noyce's philanthropies until I went there," but he was so impressed that
he decided to expand the plant.
Hogan also directed Fairchild to help build hundreds of houses for workers; since a traditional Navajo dwelling is called a hogan,
the houses were dubbed <a href="https://archive.computerhistory.org/resources/access/text/2021/08/102710155-05-01-acc.pdf">Hogan's hogans</a>.</p>
<p><a href="https://static.righto.com/images/pentium-rug/102785007-03-15-acc.jpg"><img alt="Workers in Fairchild's Shiprock plan, 1966. Photo by Jack Grimes. Photo courtesy of Computer History Museum, Henry Mahler collection of Fairchild Semiconductor photographs." height="399" src="https://static.righto.com/images/pentium-rug/102785007-03-15-acc-w500.jpg" title="Workers in Fairchild's Shiprock plan, 1966. Photo by Jack Grimes. Photo courtesy of Computer History Museum, Henry Mahler collection of Fairchild Semiconductor photographs." width="500"></a></p>
<p>In 1969, Fairchild opened its new facility at Shiprock and produced the <a href="https://www.computerhistory.org/collections/catalog/102770254">commemorative brochure</a> mentioned earlier.
As well as showing the striking visual similarity between the designs of traditional Navajo weavings and modern integrated circuits,
it stated that "Weaving, like all Navajo arts, is done with unique imagination and craftsmanship" and described
the "blending of innate Navajo skill and [Fairchild] Semiconductor's precision assembly techniques."
Fairchild later said that "rug weaving, for instance, provides an inherent
ability to recognize complex patterns, a skill which makes memorizing integrated circuit patterns a minimal problem."<span id="fnref:ncio"><a href="#fn:ncio">7</a></span></p>
<p>However, in <a href="https://lisanakamura.net/wp-content/uploads/2011/01/indigenous-circuits-nakamura-aq.pdf">Indigenous Circuits: Navajo Women and the Racialization of Early Electronic Manufacture</a>,
digital media theorist Lisa Nakamura critiques this language as
a process by which "electronics assembly work became both gendered and identified with specific racialized qualities".<span id="fnref:racialization"><a href="#fn:racialization">5</a></span>
Nakamura points out how "Navajo
women’s affinity for electronics manufacture [was described] as both reflecting and satisfying
an intrinsic gendered and racialized drive toward intricacy, detail, and quality."</p>
<p><a href="https://static.righto.com/images/pentium-rug/shiprock-plant.jpg"><img alt="Fairchild's Shiprock plant, 1966. From the patterns on the floor, this photo may show the time period when Fairchild set up manufacturing in the school gymnasium. Photo by Jack Grimes. Photo courtesy of Computer History Museum, Henry Mahler collection of Fairchild Semiconductor photographs." height="400" src="https://static.righto.com/images/pentium-rug/shiprock-plant-w500.jpg" title="Fairchild's Shiprock plant, 1966. From the patterns on the floor, this photo may show the time period when Fairchild set up manufacturing in the school gymnasium. Photo by Jack Grimes. Photo courtesy of Computer History Museum, Henry Mahler collection of Fairchild Semiconductor photographs." width="500"></a></p><p>Fairchild's Shiprock plant, 1966. From the patterns on the floor, this photo may show the time period when Fairchild set up manufacturing in the school gymnasium. Photo by Jack Grimes. Photo courtesy of Computer History Museum, <a href="https://www.computerhistory.org/collections/catalog/102785007">Henry Mahler collection of Fairchild Semiconductor photographs</a>.</p>
<p>At Shiprock, Fairchild employed 1200 workers,<span id="fnref:workers"><a href="#fn:workers">6</a></span> and all but 24 were Navajo, making Fairchild the nation's largest
non-government employer of American Indians. Of the 33 production supervisors, 30 were Navajo.
This project had extensive government involvement from the Bureau of Indian Affairs and the U.S. Public Health Service,
while the Economic Development Administration made business loans to Fairchild,
the Labor Department had job training programs, and Housing and Urban Development built housing at Shiprock<span id="fnref2:ncio"><a href="#fn:ncio">7</a></span>.</p>
<p>The Shiprock plant was considered a major success story at a meeting of the National Council on Indian Opportunity in 1971.<span id="fnref3:ncio"><a href="#fn:ncio">7</a></span>
US Vice President Agnew called the economic deprivation and
40-80% unemployment on Indian reservations "a problem of staggering magnitude" and encouraged more industrial development.
Fairchild President Hogan stated that "Fairchild's program at Shiprock has been one of the most rewarding in the history of our company, from the standpoint of a sound business as well as social responsibility."
He said that at first the plant was considered the "Shiprock experiment", but the plant
was "now among the most productive and efficient of any Fairchild operation in the world."
Peter MacDonald, Chairman of the Navajo Tribal Council and a World War II Navajo <a href="https://en.wikipedia.org/wiki/Code_talker">code talker</a>, discussed the extreme poverty and unemployment on the Navajo reservation, along with "inadequate housing,
inadequate health care and the lack of viable economic activities."
He referred to Fairchild as "one of the best arrangements we have ever had" providing not only employment but also supporting
housing through a non-profit.</p>
<p><a href="https://static.righto.com/images/pentium-rug/national-geographic.jpg"><img alt="Navajo workers using microscopes in Fairchild's Shiprock plant. From &quot;The Navajo Nation Looks Ahead&quot;, National Geographic, December 1972." height="407" src="https://static.righto.com/images/pentium-rug/national-geographic-w500.jpg" title="Navajo workers using microscopes in Fairchild's Shiprock plant. From &quot;The Navajo Nation Looks Ahead&quot;, National Geographic, December 1972." width="500"></a></p><p>Navajo workers using microscopes in Fairchild's Shiprock plant. From "The Navajo Nation Looks Ahead", National Geographic, December 1972.</p>
<p>In December 1972, National Geographic highlighted the Shiprock plant as "weaving for the Space Age", stating that the Fairchild plant was the tribe's most
successful economic project with Shiprock booming due to the 4.5-million-dollar annual payroll. The article states: "Though the plant runs happily today, it was at first a battleground of warring
cultures."
A new manager, Paul Driscoll, realized that strict "white man's rules" were counterproductive.
For instance, many employees couldn't phone in if they would be absent, as they didn't have telephones.
Another issue was the language barrier since many workers spoke only Navajo, not English.
So when technical words didn't exist in Navajo, substitutes were found: "aluminum" became "shiny metal".
Driscoll also realized that Fairchild needed to adapt to traditional nine-day religious ceremonies.
Soon the monthly turnover rate dropped from 12% to under 1%, better than Fairchild's other plants.</p>
<p>Unfortunately, the Fairchild-Navajo manufacturing partnership soon met a dramatic end.
In 1975, the semiconductor industry was suffering from the ongoing US recession. Fairchild was especially hard hit,
<a href="https://archive.computerhistory.org/resources/access/text/2023/07/102710181-05-01-acc.pdf#page=24">losing money</a> on its integrated circuits, and it shed over <a href="https://archive.computerhistory.org/resources/access/text/2023/07/102710181-05-01-acc.pdf#page=21">8000 employees</a> between 1973 and 1975.<span id="fnref:fairchild"><a href="#fn:fairchild">8</a></span>
At the Shiprock plant, Fairchild laid off<span id="fnref:laid-off"><a href="#fn:laid-off">9</a></span> 140 Navajo employees in February 1975, angering the community.
A group of 20 Indians armed with high-power rifles
<a href="https://www.nytimes.com/1975/03/02/archives/indians-vow-to-stay-in-fairchild-plant.html">took over</a> the plant, demanding that
Fairchild rehire the employees.
Fairchild portrayed the occupiers, part of the AIM (American Indian Movement), as an "<a href="https://archive.computerhistory.org/resources/access/text/2017/02/102770538-05-01-acc.pdf">outside group—representing neither employees, tribal authorities nor the community</a>."
Peter MacDonald, chairman of the Navajo Nation, agreed with the AIM on many points but viewed the AIM occupiers as "foolish" with "little sense of Navajo history" and "no sense of the need for an Indian nation to grow" (<a href="https://archive.org/details/lastwarriorpeter0000macd/page/320/mode/1up">source</a>).
MacDonald negotiated with the occupiers and the occupation <a href="https://www.nytimes.com/1975/03/04/archives/40-indians-accept-amnesty-and-end-plant-occupation.html">ended</a> peacefully a week later, with <a href="https://www.nytimes.com/1975/03/04/archives/40-indians-accept-amnesty-and-end-plant-occupation.html">unconditional amnesty</a> granted to the occupiers.<span id="fnref:aim"><a href="#fn:aim">10</a></span>
However, concerned about future disruptions, Fairchild <a href="https://www.nytimes.com/1975/03/13/archives/plant-that-indians-seized-is-now-shut.html">permanently closed</a> the Shiprock plant and <a href="https://archive.computerhistory.org/resources/access/text/2015/07/102658280-05-01-acc.pdf#page=6">transferred</a> production to Southeast Asia.</p>
<p><a href="https://static.righto.com/images/pentium-rug/occupy.jpg"><img alt="An article entitled &quot;Navajos Occupy Plant&quot;. Contrary to the title, MacDonald stated that many of the occupiers were from other tribes and were not acting in the best interest of the Navajo. From Workers' Power, the biweekly newspaper of the International Socialists, March 13-26, 1975." height="481" src="https://static.righto.com/images/pentium-rug/occupy-w500.jpg" title="An article entitled &quot;Navajos Occupy Plant&quot;. Contrary to the title, MacDonald stated that many of the occupiers were from other tribes and were not acting in the best interest of the Navajo. From Workers' Power, the biweekly newspaper of the International Socialists, March 13-26, 1975." width="500"></a></p><p>An article entitled "Navajos Occupy Plant". Contrary to the title, MacDonald stated that many of the occupiers were from other tribes and were not acting in the best interest of the Navajo. From <a href="https://www.marxists.org/history/etol/newspape/workerspower/wp116.pdf">Workers' Power</a>, the biweekly newspaper of the International Socialists, March 13-26, 1975.</p>
<p>For the most part, the Fairchild plant was viewed as a success prior to its occupation and closure.
Navajo leader MacDonald looked back on the Fairchild plant as "a cooperative effort that was succeeding for everyone" (<a href="https://archive.org/details/lastwarriorpeter0000macd/page/318/mode/1up">link</a>).
Alice Funston, a Navajo forewoman at Shiprock said, "Fairchild has not only helped women get ahead, it has been good
for the entire Indian community in Shiprock."<span id="fnref:funston"><a href="#fn:funston">11</a></span>
On the other hand,
Fairchild general manager Charles Sporck had a negative view looking back:
"It [Shiprock] never worked out. We were really screwing up the whole societal structure of the Indian tribe.
You know, the women were making money and the guys were drinking it up.
We had a very major negative impact upon the Navajo tribe."<span id="fnref:sporck"><a href="#fn:sporck">12</a></span></p>
<p>Despite the stereotypes in Sporck's comments, he touches on important gender issues, both at Fairchild and in the electronics
industry as a whole.
Fairchild had long recognized the lack of jobs for men at Shiprock, despite attempts to create roles for men. In 1971, Fairchild President Hogan stated that
since "semiconductor assembly operation require a great amount of detail work with tiny components, [it] lends itself to
female workers. As a result, there are nearly three times as many Navajo women employed by Fairchild as men."<span id="fnref4:ncio"><a href="#fn:ncio">7</a></span></p>
<p>The role of women in fabricating and assembling electronics is often not recognized.
A <a href="https://fraser.stlouisfed.org/files/docs/publications/bls/bls_1363_1963.pdf#page=43">1963 report</a> on electronics manufacturing
estimated that women workers made up
41 percent of total employment in electronics manufacturing, largely in gendered roles.
The report suggested that 
microminiaturization of semiconductors gave women an advantage over men in assembly and production-line work;
women made up over 70% of semiconductor production-line workers, with
90-99% of inspecting and testing jobs.
and 90-100% of assembler jobs.
Women were largely locked out of non-production jobs;
although women held a few technician and drafting roles, the percentage of woman engineers was too low to measure.</p>
<p>The defense contractor General Dynamics also had Navajo plants, but with more success than Fairchild.
General Dynamics opened a Navajo Nation plant in Fort Defiance, Arizona in <a href="https://www.andrews.edu/~tidwell/bsad560/Navajo">1967</a> to make <a href="https://www.bia.gov/as-ia/opa/online-press-release/missile-parts-plant-set-navajo-area">missiles for the Navy</a>.
At the plant's opening, Navajo Tribal Chairman Raymond Nakai pushed for industrialization, <a href="https://archive.library.nau.edu/digital/collection/cpa/id/37191">stating</a>
that it was in "industrialization and the money and the jobs engendered thereby that the future of
the Navajo people will lie."
The plant started with 30 employees, growing to 224 by the end of 1969, but then dropping to 99 in 1971 due to
a <a href="https://books.google.com/books?id=0y-8OOtshbAC&amp;pg=PA196#v=onepage&amp;q&amp;f=false">slowdown in the electronics industry</a>.
General Dynamics opened another Navajo plant near Farmington NM in <a href="https://www.nytimes.com/1988/06/09/business/company-news-navajos-to-build-plant-for-dynamics.html">1988</a>.
Due to the <a href="https://books.google.com/books?id=DkIrAQAAIAAJ&amp;pg=PA231">end of the Cold War</a>,
Hughes acquired General Dynamics' missile business in 1991 before being
acquired by General Motors in 1985 and <a href="https://www.nytimes.com/1997/01/17/business/gm-to-sell-a-hughes-unit-to-raytheon.html">sold to Raytheon in 1997</a>.
The Fort Defiance facility was <a href="https://www.nhonews.com/opinion/ft-defiance-factory-to-close/article_4690c724-8082-5627-bdac-c001940e160b.html">closed in 2002</a> when its parent company, Delphi Automotive Systems, moved out of the military wiring business.
The Farmington plant remains open, now <a href="https://www.dws.state.nm.us/Portals/0/DM/Raytheon_Dine_Facility.pdf">Raytheon Diné</a>, building
components for <a href="https://raytheon.mediaroom.com/2017-04-24-Raytheon-completes-new-5-million-warehouse-at-Dine-facility-near-Farmington">Tomahawk, Javelin, and AMRAMM missiles</a>.</p>
<!-- formerly Stinger 
https://books.google.com/books?id=jqCSmD9riiAC&pg=PA41&dq=Packard-Hughes+Interconnect+Fort+Defiance&hl=en&newbks=1&newbks_redir=0&sa=X&ved=2ahUKEwivzPX-7I6IAxU55ckDHWzALbAQuwV6BAgLEAc#v=onepage&q=Packard-Hughes%20Interconnect%20Fort%20Defiance&f=false
-->

<p><a href="https://static.righto.com/images/pentium-rug/general-dynamics.jpg"><img alt="Navajo workers at the General Dynamics plant in Fort Defiance, AZ. From the 1965 General Dynamics film &quot;The Navajo moves into the electronic age&quot;. From American Indian Film Gallery." height="446" src="https://static.righto.com/images/pentium-rug/general-dynamics-w500.jpg" title="Navajo workers at the General Dynamics plant in Fort Defiance, AZ. From the 1965 General Dynamics film &quot;The Navajo moves into the electronic age&quot;. From American Indian Film Gallery." width="500"></a></p><p>Navajo workers at the General Dynamics plant in Fort Defiance, AZ. From the 1965 General Dynamics film "The Navajo moves into the electronic age". From <a href="https://aifg.arizona.edu/film/navajo-moves-electronic-age">American Indian Film Gallery</a>.</p>
<h2>Inside the Fairchild 9040 integrated circuit</h2>
<p>The integrated circuit die image in
Fairchild's commemorative brochure has an exceptionally striking design and color scheme.
It's clear why this chip brings weaving to mind.
Studying the die photo of the 9040 carefully reveals some interesting characteristics of integrated circuit design, so
I will go into some detail.</p>
<p><a href="https://static.righto.com/images/pentium-rug/9040.jpg"><img alt="Die photo of the Fairchild 9040 flip-flop. From the commemorative brochure." height="500" src="https://static.righto.com/images/pentium-rug/9040-w500.jpg" title="Die photo of the Fairchild 9040 flip-flop. From the commemorative brochure." width="500"></a></p><p>Die photo of the Fairchild 9040 flip-flop. From the commemorative brochure.</p>
<p>The chip was fabricated from a tiny square of silicon, which appears purple in the photograph.
Different regions of the silicon die were treated (doped) with impurities to change the properties of the silicon and thus create
electronic devices. These doped regions appear as green or blue lines.
The white lines are the metal layer on top of the silicon, connecting the components. The 13 metal rectangles
around the border are the bond pads.
The chip was packaged in an unusual 13-pin flat-pack, as shown below.
Each of the 13 bond pads above was connected by a tiny wire to one
of the 13 external pins.</p>
<p><a href="https://static.righto.com/images/pentium-rug/flatpack.jpg"><img alt="The Fairchild 9040 packaged in a 13-pin flatpack integrated circuit. The chip was also available in a 14-pin DIP, a standard way of packaging chips. Photo from the commemorative brochure." height="97" src="https://static.righto.com/images/pentium-rug/flatpack-w250.jpg" title="The Fairchild 9040 packaged in a 13-pin flatpack integrated circuit. The chip was also available in a 14-pin DIP, a standard way of packaging chips. Photo from the commemorative brochure." width="250"></a></p><p>The Fairchild 9040 packaged in a 13-pin flatpack integrated circuit. The chip was also available in a 14-pin DIP, a standard way of packaging chips. Photo from the commemorative brochure.</p>
<p>The Fairchild 9040 was introduced in the mid-1960s as part of Fairchild's Micrologic family, a set of high-performance
integrated circuits that were designed to work together.<span id="fnref:dtl"><a href="#fn:dtl">13</a></span>
The 9040 chip was a "flip-flop", a circuit capable of storing a single bit, a 0 or 1. Flip-flops can be combined to
form counters, counting the number of pulses, for instance.</p>
<p>The most dramatic patterns on the chip are the intricate serpentine blue lines.
Each line forms a resistor, controlling the flow of electricity by impeding its path.
The lines must be long to provide the desired resistance, so they wind back and forth to fit into the available space.
Each end of a resistor is connected to the metal layer, wiring it to another part of the circuit.
Most of the die is occupied by resistors, which is a disadvantage of this type of circuit. Modern integrated circuits
use a different type of circuitry (CMOS), which is much more compact, partly because it doesn't need bulky resistors.</p>
<p><a href="https://static.righto.com/images/pentium-rug/resistors.jpg"><img alt="Resistors in the 9040 die." height="241" src="https://static.righto.com/images/pentium-rug/resistors-w500.jpg" title="Resistors in the 9040 die." width="500"></a></p><p>Resistors in the 9040 die.</p>
<p>Transistors are the main component of an integrated circuit. These tiny devices act as switches, turning signals on and off.
The photo below shows one of the transistors in the 9040.
It consists of three layers of silicon, with metal wiring connected to each layer. Note the blue region in the middle,
surrounded by a slightly darker purple region; these color changes indicate that the silicon has been doped to change
its properties.
The green region surrounding the transistor provides isolation between this transistor and the other circuitry, so
the transistors don't interfere with each other.
The chip also has many diodes, which look similar to transistors except a diode has two connections.</p>
<p><a href="https://static.righto.com/images/pentium-rug/transistor.jpg"><img alt="A transistor in the 9040 die. The three contacts are called the base, emitter, and collector." height="135" src="https://static.righto.com/images/pentium-rug/transistor-w200.jpg" title="A transistor in the 9040 die. The three contacts are called the base, emitter, and collector." width="200"></a></p><p>A transistor in the 9040 die. The three contacts are called the base, emitter, and collector.</p>
<p>These transistors with their three layers of silicon are a type known as bipolar. 
Modern computers use a different type of transistor, metal-oxide-semiconductor (MOS), which is much more compact and
efficient. 
One of Fairchild's major failures was staying with bipolar transistors too long, rather than moving to MOS.<span id="fnref:mos"><a href="#fn:mos">14</a></span>
In a sense, the photo of the 9040 die shows the seeds of Fairchild's failure.</p>
<p>The 9040 chip was constructed on a completely different scale from the Pentium, showing the rapid progress of the IC industry.
The 9040 contains just 16 transistors, while the Pentium contains 3.3 million transistors.
Thus, individual transistors can be seen in the 9040 image, while only large-scale functional blocks are visible in the Pentium.
This increasing transistor count illustrates the exponential growth
in integrated circuit capacity between the 9040 in the mid-1960s and the Pentium in 1993.
This growth pattern, with the number of transistors doubling about every two years, is known as Moore's law, since it
was first observed in 1965 by Gordon Moore (one of Fairchild's "traitorous eight", who later started Intel).</p>
<p>The schematic below shows the circuitry inside the 9040 chip, with its
16 transistors, 16 diodes, and 22 resistors.
The symmetry of the 9040 die photo makes it appealing, and that symmetry is reflected in the circuit below, with the left side and
the right side mirror images.
The idea behind a flip-flop is that it can hold either a 0 or a 1. In the chip, this is implemented by turning on the
right side of the chip to hold a 0, or the left side to hold a 1. If one side of the chip is on, it forces the other side
off, accomplished by the X-like crossings of signals in the center.<span id="fnref:schematic"><a href="#fn:schematic">15</a></span>
Thus, the symmetry is not arbitrary, but is critical to the operation of the circuit.</p>
<p><a href="https://static.righto.com/images/pentium-rug/schematic.jpg"><img alt="Schematic of the Fairchild 9040 flip-flop chip. From Fairchild 1970 Data Catalog." height="498" src="https://static.righto.com/images/pentium-rug/schematic-w600.jpg" title="Schematic of the Fairchild 9040 flip-flop chip. From Fairchild 1970 Data Catalog." width="600"></a></p>
<p>Despite the obscurity of the 9040, multiple 9040 chips are currently on the Moon.
The chip was
used in the Apollo Lunar Surface Experiments Package (ALSEP),<span id="fnref:apollo"><a href="#fn:apollo">16</a></span>
in particular, the Active Seismic Experiment on Apollo 14 and 16. This experiment detonated small explosives on the Moon
and measured the resulting seismic waves.
The photo below is a detail from a blueprint<span id="fnref:alsep"><a href="#fn:alsep">17</a></span>
that shows three of the nineteen 9040 flip-flops (labeled "FF") as well as two 9041 logic gates, a chip in the same family
as the 9040.</p>
<p><a href="https://static.righto.com/images/pentium-rug/ase.jpg"><img alt="Detail from Logic Schematic Type B Board No.4 ASE." height="261" src="https://static.righto.com/images/pentium-rug/ase-w400.jpg" title="Detail from Logic Schematic Type B Board No.4 ASE." width="400"></a></p><p>Detail from Logic Schematic Type B Board No.4 ASE.</p>
<h2>Conclusions</h2>
<p>The similarities between Navajo weavings and the patterns in integrated circuits have been described since the 1960s.
Marilou Schultz's weavings of integrated circuits make these visual metaphors into concrete works of art.
Although the Woven Histories exhibit at the National Gallery of Art is no longer on display,
the exhibit will be at the National Gallery of Canada (Ottawa) starting November 8, 2024, and the Museum of Modern Art (New York)
starting April 20, 2025
(full dates <a href="https://www.nga.gov/press/exhibitions/exhibitions-2024/5415.html">here</a>).
If you're in the area, I recommend viewing the exhibit, but don't make my mistake: leave more than
five minutes to see it!</p>
<p>Many thanks to Marilou Schultz for discussing her art with me.
For more on her art, see <a href="https://www.youtube.com/watch?v=lyVDvYURpqo">A Conversation with Marilou Schultz</a> on YouTube.<span id="fnref:amd"><a href="#fn:amd">18</a></span>
Follow me on Mastodon as <a href="https://oldbytes.space/@kenshirriff">@<span data-cfemail="c9a2aca7baa1a0bbbba0afaf89a6a5adabb0bdacbae7bab9a8aaac">[email&nbsp;protected]</span></a>
or <a href="https://www.righto.com/feeds/posts/default">RSS</a> for updates.</p>
<h2>Notes and references</h2>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Using the moiré effect to show different arrows to each observer (2018) (157 pts)]]></title>
            <link>https://www.popularmechanics.com/technology/infrastructure/a19091534/inogon-leading-mark-moire-effect-light/</link>
            <guid>41417997</guid>
            <pubDate>Sun, 01 Sep 2024 16:06:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.popularmechanics.com/technology/infrastructure/a19091534/inogon-leading-mark-moire-effect-light/">https://www.popularmechanics.com/technology/infrastructure/a19091534/inogon-leading-mark-moire-effect-light/</a>, See on <a href="https://news.ycombinator.com/item?id=41417997">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-journey-body="standard-article"><p data-journey-content="true" data-node-id="0">Imagine you're in charge of guiding ships into a harbor and you want to use a sign to direct them all to one specific point, perhaps a dock or a channel. How might you make a single signal light that always points to the right direction depending on the angle you look at it, to the right if you're too far left, and to the left if you're too far right? </p><p data-journey-content="true" data-node-id="1">Here in 2018, your mind might go to location tracking or some other high tech solution, but in 1982, some clever engineers had already figured out an answer with no electronics required. Well, other than a light. <a href="https://www.youtube.com/watch?v=d99_h30swtM" target="_blank" data-vars-ga-outbound-link="https://www.youtube.com/watch?v=d99_h30swtM" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="Tom Scott explains">Tom Scott explains</a>: </p><p data-journey-content="true" data-node-id="3">The Inogon Leading Mark makes use of what's called the moiré effect, that strange type of distortion you see when looking at a series of overlapping, not-quite-parallel lines. You may be familiar with it as a form of digital image artifacting, a strange jaggy cloudiness that can appear in certain images or video, like <a href="https://www.youtube.com/watch?v=jXEgnRWRJfg" target="_blank" data-vars-ga-outbound-link="https://www.youtube.com/watch?v=jXEgnRWRJfg" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="a clip of a striped shirt">a clip of a striped shirt</a>. <br></p><p data-journey-content="true" data-node-id="5">If you use this phenomenon cleverly, however,  you can create an image that can change depending on the angle its viewed from. In the case of the Inogon light, it will always display an arrow or series of arrows (sometimes strange, distorted ones) pointed in the direction you want them to go. It's like an optical illusion that's good for more than <a href="https://www.popularmechanics.com/science/a14400798/optical-illusion-new/" target="_blank" data-vars-ga-outbound-link="https://www.popularmechanics.com/science/a14400798/optical-illusion-new/" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="just blowing your mind">just blowing your mind</a>.</p><p data-journey-content="true" data-node-id="6">Source: <a href="https://www.youtube.com/watch?v=d99_h30swtM" target="_blank" data-vars-ga-outbound-link="https://www.youtube.com/watch?v=d99_h30swtM" data-vars-ga-ux-element="Hyperlink" data-vars-ga-call-to-action="Tom Scott">Tom Scott</a><br></p></div></div>]]></description>
        </item>
    </channel>
</rss>