<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 09 Aug 2024 16:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Jake Seliger has died (222 pts)]]></title>
            <link>https://marginalrevolution.com/marginalrevolution/2024/08/jake-seliger-is-dead.html</link>
            <guid>41201555</guid>
            <pubDate>Fri, 09 Aug 2024 13:19:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://marginalrevolution.com/marginalrevolution/2024/08/jake-seliger-is-dead.html">https://marginalrevolution.com/marginalrevolution/2024/08/jake-seliger-is-dead.html</a>, See on <a href="https://news.ycombinator.com/item?id=41201555">Hacker News</a></p>
Couldn't get https://marginalrevolution.com/marginalrevolution/2024/08/jake-seliger-is-dead.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[OTranscribe: A free and open tool for transcribing audio interviews (286 pts)]]></title>
            <link>https://otranscribe.com/</link>
            <guid>41199567</guid>
            <pubDate>Fri, 09 Aug 2024 07:31:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://otranscribe.com/">https://otranscribe.com/</a>, See on <a href="https://news.ycombinator.com/item?id=41199567">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="textbox" contenteditable="true">
        <p data-l10n-id="d-txt1">Enter your transcript here...</p>
        
        
        <p data-l10n-id="d-txt2">Protips:</p>
        
        <p data-l10n-id="d-txt3">- <em>Ctrl+I</em> adds <em>italic</em> formatting and <b>Ctrl+B</b> adds <b>bold</b> formatting.</p>
        <p data-l10n-id="d-txt4">- Press ESC to play/pause, and Ctrl+J to insert the current timestamp.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sonic Pi: Ruby as a Composition Tool (157 pts)]]></title>
            <link>https://bhmt.dev/blog/sonic_pi/</link>
            <guid>41198491</guid>
            <pubDate>Fri, 09 Aug 2024 03:08:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bhmt.dev/blog/sonic_pi/">https://bhmt.dev/blog/sonic_pi/</a>, See on <a href="https://news.ycombinator.com/item?id=41198491">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <p>Like the blip of an intro on the front page says, my degree was originally in music. My running joke as a web dev is that neither has meaningfully required me to count past 32. And while my main concentration was vocals, I've since realized I should probably <em>stop</em> strictly calling this a nontechnical field, because my actual major was recording — even if I <em>did</em> primarily branch out into this for the sake of tracking my own material.</p>
<p>That last part fell off for a <em>few</em> reasons. First of all, I pretty quickly fell into tech work just by happenstance, and it happened to take. I also didn't have the space or resources or skillset to realistically amass a <em>lot</em> of different instruments. (Or other audio equipment.) I did pick up bass competently enough after a peer-pressure-induced lark, which happened to stick after picking up Scott Pilgrim (that was a joke... <a href="https://www.youtube.com/watch?v=RtDhGuEGgyc">it was FLCL</a>), and I picked up piano in the course of my major enough to passably self-accompany, but six-string guitars elude me about as much as consistently organizing with a group of other people who play things.</p>
<p>But I also mostly learned to <em>track</em> live instruments, and the small, disorganized experiments I took at electronic music never stuck. Something about a whole other set of overwhelm around picking synths up as <em>instruments,</em> I guess, even if I'm pretty familiar with audio workstations conceptually. But more recently, after a series of constraints that put all the instruments I <em>do</em> have into storage, I've taken a dive back into what was <em>also</em> one of my first attempts to learn how to code: <a href="https://sonic-pi.org/">Sonic Pi</a>. Ironically enough, as I've started making better sense of the language that underpins it, I've also started feeling some of my prior knowledge around audio engineering click in new and different ways.</p>
<p>Sonic Pi, created by Sam Aaron, is a <em>very</em> different beast from most audio applications: it's a software synth controlled entirely through code. It comes with its own control language (a <em>domain-specific language</em>, or DSL) that extends Ruby to map various music and audio concepts onto it. So for instance, you'll find note names as symbols, like <code>:c4</code>, corresponding to their equivalent MIDI codes. You'll find <code>chord</code> and <code>scale</code> constructors that take notes and chord/scale structures as arguments, such as <code>chord(:d3, :maj7)</code>. There's a <code>play</code> that's used in conjunction with Ruby's native <code>sleep</code> (sort of... more on that in a second), and a <code>play_pattern_timed</code> that abridges this for you by taking a list of notes and a time interval. (Quarter/half/etc notes are just plain numbers here, and hopefully don't require more explanation.)</p>
<p>The goal of this project was to track one demo. Compose one instrumental backing, purely by writing code, without the use of anything this this tool didn't come with out of the box. Because I could <em>use</em> MIDI, or external samples, but then I'm back to rabbit-holing about other audio tools.</p>
<p>I did accomplish this, but it's a little long for this piece, so for now let's do something simpler. (And a little less depressing. Besides, my mic was missing for a while during that same storage shuffle, so I never got around to tracking vocals for that anyway.)</p>
<p>If you install the app itself, you can follow along by copy-pasting the code below. (Note that for length I won't be repeating everything, so at points that I mention I'm reusing sections, or for persistent values like bpm or synth settings, just scroll up.) <em>Also</em> out of the box, you get a detailed set of documentation for the language as well as a series of tutorials.</p>
<pre><code><span># bpm defaults to 60, but we can change this</span>
<span># other time values will scale accordingly,</span>
<span># including the time interval going into `sleep`</span>
use_bpm <span>70</span>
  use_synth <span>:pulse</span> <span># this defaults to a sine wave</span>

play <span>:c2</span>
sleep <span>0.25</span>
play <span>:d2</span>
sleep <span>0.25</span>
play <span>:e2</span>
sleep <span>0.25</span>
play <span>:g2</span>
sleep <span>0.25</span>

<span># these are mostly equivalent, except that this</span>
<span>#  also sets a `sustain` of 0.25 to each note</span>
<span># (more on options in a second)</span>
play_pattern_timed [ <span>:c3</span>, <span>:d3</span>, <span>:e3</span>, <span>:g3</span> ], <span>0.25</span>
</code></pre>
<p>Of course, I can also just demonstrate the audio itself:</p>
<p>(Note: Some examples below won't be full blocks of code, or just don't demonstrate audible changes, so I won't be doing this for <em>all</em> of them.)</p>
<p>Since this is built on top of plain Ruby, we can abridge this, and make it more flexible so we're not repeating a lot of code.</p>
<p>We'll define the whole sequence here:</p>
<pre><code>
<span>def</span> <span>arpeggiate</span> <span>do</span> root, is_minor = <span>false</span>
  <span># ascending sequence</span>
  <span># repeat the same pattern,</span>
  <span>#  at different octaves</span>
  <span>4</span>.times <span>do</span>
    <span># modify the third based on the optional second argument</span>
    <span>#  we'll use this later</span>
    third = <span>4</span>
    third -= <span>1</span> <span>if</span> is_minor
    <span># Ruby supports trailing conditional statements. in addition to</span>
    <span>#  `if`, you can also check if the condition is *false*</span>
    <span>#  using `unless`</span>

    sequence = [ <span>0</span>, <span>2</span>, third, <span>7</span> ].map { |<span>note</span>| root + note }
    
    play_pattern_timed sequence, <span>0.25</span>

    <span># move the root of the sequence up one octave</span>
    root += <span>12</span>
  <span>end</span>

  <span># descending sequence</span>
  <span># the same pattern, in reverse</span>
  <span>4</span>.times <span>do</span>
    third = <span>8</span>
    third += <span>1</span> <span>if</span> is_minor
    
    sequence = [ <span>0</span>, <span>5</span>, third, <span>10</span> ].map { |<span>note</span>| root - note }

    play_pattern_timed sequence, <span>0.25</span>

    root -= <span>12</span>
  <span>end</span>
<span>end</span>

</code></pre>
<p>And we can then can run through this same pattern several times, at different starting points:</p>
<pre><code>in_thread <span>do</span>
  <span># define synth tones</span>
  <span># you can pass additional options into `play` </span>
  <span>#  or `play_pattern_timed` directly, but you </span>
  <span>#  can also set them as defaults up front</span>
  <span># (amp indicates volume level, but there are of course more)</span>
  use_synth <span>:pulse</span>
  use_synth_defaults <span>amp:</span> <span>0.1</span>

  <span>2</span>.times <span>do</span>
    <span># parentheses are optional for functions in Ruby</span>
    <span># `play 60` is the same as `play(60)`</span>
    <span># but in some cases you may need clearer separation</span>
    <span>#  like `play chord(:a3, maj7)`</span>
    arpeggiate(<span>:c3</span>)
    arpeggiate(<span>:a2</span>, <span>:min</span>)
  <span>end</span>

  arpeggiate(<span>:f2</span>)
  arpeggiate(<span>:g2</span>)
  arpeggiate(<span>:ab2</span>)
  arpeggiate(<span>:bb2</span>)
<span>end</span> 
</code></pre>
<p>You might be wondering about that <code>in_thread do</code> block.</p>
<p>Sonic Pi also uses loops to run code in parallel. So by wrapping the above in one, we can run two separate "instruments" in parallel.</p>
<p>We could <em>also</em>, say...</p>
<pre><code>
in_thread <span>do</span>
  <span># ...the block from earlier?</span>
<span>end</span>

in_thread <span>do</span>
  use_synth <span>:saw</span>
  use_synth_defaults <span>amp:</span> <span>0.2</span>

  melody = [
    <span>:c5</span>, <span>:b4</span>, <span>:d5</span>,
    <span>:c5</span>,
    <span>:c5</span>, <span>:b4</span>, <span>:d5</span>,
    <span>:d5</span>, <span>:e5</span>, <span>:c5</span>,
    <span>:a4</span>, <span>:g4</span>, <span>:a4</span>,
    <span>:b4</span>, <span>:c5</span>, <span>:d5</span>, <span>:g5</span>,
    <span>:f5</span>, <span>:eb5</span>, <span>:d5</span>, <span>:c5</span>,
    <span>:g5</span>, <span>:f5</span>, <span>:eb5</span>, <span>:d5</span>,
  ]
  
  <span># play_pattern_timed can also take a list of time intervals</span>
  <span># you can also build that list out of smaller lists</span>
  
  rhythm_a = [ <span>4</span>, <span>2</span>, <span>2</span> ]

  
  <span># the math operations here operate on the list's length — multiplying</span>
  <span>#  a list will extend its length and wrap its contents</span>
  <span># so `[1] * 2` gives you `[1, 1]` and so on</span>
  <span># (this is also equivalent to `Array.new(1, 2)`)</span>
  <span># `play_pattern_timed doesn't take nested arrays...  </span>
  rhythm = [
    rhythm_a,
    <span>8</span>,
    rhythm_a,
    [<span>0.5</span>] * <span>2</span>, <span>7</span>,
    rhythm_a,
    <span>3</span>, <span>1</span>, [<span>2</span>] * <span>2</span>,
    [ <span>1</span>, [<span>0.5</span>] * <span>2</span>, <span>6</span> ] * <span>2</span>
  ].flatten
  <span># ...*but*, by using `flatten`, we can spread its contents</span>
  <span>#  into a single layer</span>
  
  play_pattern_timed melody, rhythm
in_thread <span>do</span>
</code></pre>
<p>We could layer these in a couple of different ways to get a "choir" here. You can manually specify chords to play, but you might not have <em>every part</em> of one in a single section, or might want them spread out in specific ways. In that case, you could construct layered notes manually using <code>ring</code> and then just pass them into one list:</p>
<pre><code>choir = [
  ring(<span>:c5</span>, <span>:e5</span>), ring(<span>:c5</span>, <span>:e5</span>), ring(<span>:d5</span>, <span>:f5</span>)
  ring(<span>:c5</span>, <span>:e5</span>)
  <span># ...and so on</span>
]

<span># play_pattern_timed choir, [ 4, 2, 2, 8 ]</span>

<span># as a side note, the `flatten` trick above wouldn't work here</span>
<span>#  because `ring`s are also lists, so they'd also get merged</span>
<span># while `flatten` does allow you to specify depth, your</span>
<span>#  patterns might not be uniform enough for that</span>
<span># instead, you can also spread out a single list's contents</span>
<span>#  (or splat, I guess, as the operator is called in Ruby)</span>
<span>#  into its parent by adding a leading `*`, such as:</span>
<span>#  `[ *[ ring(:c5, :e5) ] * 4, *[ ring(:b4, :d5) ] * 2 ]`</span>
<span>#  which would produce a single list of 6 rings</span>
</code></pre>
<p>But real choirs don't all sing in singular rhythmic patterns, and this doesn't need to either. We can also nest threads, to share parts across different voices.</p>
<p>&lt;!—</p>
<pre><code>  <span># effects also run in similar blocks. Signal flow starts at the deepest layer,</span>
  <span>#  and effects chains run from inner layers out.</span>
  <span># mix represents the level of blend between wet and dry signal —</span>
  <span>#  that is, signal *with* the effect, and signal *without* it</span>
  with_fx <span>:reverb</span>, <span>mix:</span> <span>0.2</span> <span>do</span>
    <span># so if I added another one here, it would run before the reverb</span>
    <span># with_fx :echo do</span>
</code></pre>
<p>—&gt;</p>
<pre><code>in_thread <span>do</span>
  use_synth <span>:saw</span>
  
  <span># using the outer scope that the depeer levels can access,</span>
  <span>#  we can construct shared rhythmic or melodic sections</span>

  rhythm_a = [ <span>2</span>, <span>1</span>, <span>1</span> ]

  <span># we could also wrap the whole group in a single effect</span>
  <span>#  in a similar fashion to buses on a DAW</span>
  <span># however, deeper grouping than that is pretty manual;</span>
  <span>#  there's no routing to speak of, and scopes limit</span>
  <span>#  you to working in a mostly top-down fashion</span>
  <span># you can duplicate these things to a reasonable degree,</span>
  <span>#  but I'd personally recommend treating it as less</span>
  <span>#  of a production tool and more of an instrument</span>

    <span># soprano</span>
    in_thread <span>do</span>
      use_synth_defaults <span>amp:</span> <span>0.25</span>
        
      melody = [
        <span>:c5</span>, <span>:b4</span>, <span>:d5</span>,
        <span>:c5</span>, <span>#...</span>
      ]

      <span># here we can take the pieces from above</span>
      <span>#  and construct a variation that exists</span>
      <span>#  only inside this block</span>
      rhythm = [
        rhythm_a, <span>#...</span>
      ].flatten
        
    <span>end</span>

    <span># alto</span>
    in_thread <span>do</span>
      use_synth_defaults <span>amp:</span> <span>0.2</span>

      <span># each block has its own scope, so they can each</span>
      <span>#  use these same variable names</span>
      <span># because neither can directly access the other</span>
      melody = [
        <span>:c5</span>, <span>:b4</span>, <span>:d5</span>,
        <span>:c5</span>, <span>#...</span>
      ]
        
      <span># you can assemble a different pattern here, using pieces</span>
      <span>#  from the outer layer</span>
      
      <span># you could also construct longer ones outside — like, say:</span>
      <span>#  `rhythm_a = [rhythm_a1, rhythm_a2].flatten`</span>
      <span>#  and then modify them using list operations</span>
      <span>#  but I'm not going to get too deep into that here</span>

      <span># the important part is:</span>
      <span>#  we can keep referencing the pieces used in the</span>
      <span>#  outer scope, while still being able to reuse *names*</span>
      <span>#  in each inner scope</span>
      rhythm = [
        rhythm_a <span>#...</span>
      ].flatten
    <span>end</span>
  <span>end</span>
<span>end</span>

</code></pre>
<p>We <em>could</em> give them different voicings with distinct rhythmic patterns. But the source piece (the Prelude, from Final Fantasy) has numerous arrangements that don't always add that much complexity to its layers, so we don't have to do that <em>here</em>.</p>
<p>So let's go back to the rings. Since <code>play_pattern_timed</code> adds a <code>sustain</code> value, we <em>could</em> set that manually. It would look like:</p>
<pre><code><span># amp applies to the total volume of this synth — each individual</span>
<span>#  note will be quieter if you're playing multiple layers together</span>
use_synth_defaults <span>release:</span> <span>0.2</span>, <span>amp:</span> <span>0.2</span>

<span># these rings have to be nested, because if not, `play_pattern_timed`</span>
<span>#  will see the underlying list and play the notes in a sequence</span>
<span>#  instead of together</span>
play_pattern_timed [ring(<span>:c5</span>, <span>:e5</span>)], <span>4</span>, <span>sustain:</span> <span>3.8</span>
play_pattern_timed [ring(<span>:b4</span>, <span>:d5</span>)], <span>2</span>, <span>sustain:</span> <span>1.8</span>
play_pattern_timed [ring(<span>:d5</span>, <span>:f5</span>)], <span>2</span>, <span>sustain:</span> <span>1.8</span>
play_pattern_timed [ring(<span>:c5</span>, <span>:e5</span>)], <span>8</span>, <span>sustain:</span> <span>7.8</span>

<span># ...and so on</span>

<span># this *could* be:</span>

<span># play ring(notes), sustain: length</span>
<span># sleep length</span>

<span># but we don't *need* that if we're overriding sustain anyway</span>

</code></pre>
<p>But that's kind of verbose, and manually handling the offsetting is kind of a pain in the ass, and we can define a function for this.</p>
<p>Before I get to that, though, let me explain some of these parameters above a little more. This is called an <em>envelope</em> — specifically an ADSR (Attack, Decay, Sustain, Release) envelope — and it refers to how the volume levels of a sound are shaped. The Sonic Pi docs have more detail on this, but to give you a simplified explanation of each:</p>
<p><em>Attack</em> is the initial "strike" of a sound, and represents the time that it takes to reach its initial peak, coming from 0. Quick examples would be like the pluck of a guitar string, or the hammer of a piano. Slower ones would be the press of an accordion, or a bowed string that's slowly increasing in volume.</p>
<p><em>Decay</em> is the time the sound takes to leave that peak. Think when you're holding down a piano key or a guitar string <em>after</em> it's first hit. The note is continuing, but it still has a slow fade to it. The sound won't just continue indefinitely, even if you're still <em>holding</em> the key that made it ring out.</p>
<p><em>Sustain</em> is the time a sound is held at a stable level, <em>without</em> the fadeout that makes a decay. Examples of sustain include a string being bowed at a consistent volume, or vocals that are being held.</p>
<p><em>Release</em> is the time between letting go of the sound and it actually going silent. A piano key that you hit <em>without</em> holding it will still ring out for a brief moment. A vocalist may still let out a short exhale after letting go of a note. And so on.</p>
<p>Not every sound has every one of these. Synths, for instance, are generated tones that don't necessarily have any initial build or lingering trail to them. Other, more natural instruments will have these things (or not) in different proportions depending on how you play them. Here, we're simulating a choir section, but the goal isn't really to make it lifelike, so the only real aim is to make sure it's holding for the correct time and has a <em>little</em> bit of separation between chords.</p>
<p>All of that being said, back to the function at hand. We can take the notes that make each chord and define shorthand for them, because</p>
<pre><code><span>def</span> <span>choral_rings</span> notes, sus
  offset = sus &lt; <span>1</span> ? <span>0.1</span> : <span>0.2</span>
  
  <span># remember the `*` splat operator I mentioned before?</span>
  <span># you can also use it to spread lists out into arguments</span>
  play ring(*notes), <span>sustain:</span> sus - offset, <span>release:</span> offset
  sleep sus
<span>end</span>
</code></pre>
<p>Going further, we can make all of this loop indefinitely, like an <em>actual</em> video game, with <code>live_loop</code>.</p>
<p>Sonic Pi is largely built for live performance — the code inside a <code>live_loop</code> will run until you tell the program to stop. You can alter the contents as it's playing, and by rerunning the start command, the loop will update the on the next run.</p>
<p>To do this, you'd replace the outer <code>in_thread</code> loops with <code>live_loop :some_unique_name</code>. This gets a little more complex when we're talking about effects chains — they're recreated each time the loop runs, so it's cheaper on resources to run the effects outside the <code>live_loop</code> block, especially as you stack them. But we're not here to get deep into audio or software engineering right now. We're here to make blips blip.</p>
<p>&lt;!— (TORYAH!) —&gt;</p>
<pre><code>live_loop <span>:harp</span> <span>do</span>
  <span># the same blocks...</span>
<span>end</span>

live_loop <span>:choir</span> <span>do</span>
  <span># ...we just wrote</span>

  <span># to make it game-accurate, only play this every</span>
  <span>#  *other* time the other loop runs:</span>
  
  <span># sleep 64</span>
<span>end</span>
</code></pre>
<p>Ultimately, the whole thing looks like this:</p>
<pre><code>
use_bpm <span>75</span>

<span>def</span> <span>arpeggiate</span> note, is_minor = <span>false</span>
  <span># there's probably a cleaner way to reverse this</span>
  <span># and the map operation *could* be nested</span>
  <span># but for illustrative purposes, this is fine</span>
  
  ascending_three = is_minor ? note + <span>3</span> : note + <span>4</span>
  
  ascending = [note, note + <span>2</span>, ascending_three, note + <span>7</span>]
  ascending_arp = [
    *ascending,
    *ascending.map { |<span>note</span>| note + <span>12</span> },
    *ascending.map { |<span>note</span>| note + <span>24</span> },
    *ascending.map { |<span>note</span>| note + <span>36</span> }
  ]
  
  top = note + <span>48</span>
  descending_three = is_minor ? top - <span>9</span> : top - <span>8</span>
  
  descending = [top, top - <span>5</span>, descending_three, top - <span>10</span>]
  
  descending_arp = [
    *descending,
    *descending.map { |<span>note</span>| note - <span>12</span> },
    *descending.map { |<span>note</span>| note - <span>24</span> },
    *descending.map { |<span>note</span>| note - <span>36</span> }
  ]
  
  <span># unlike the version above, this just outputs a value</span>
  <span>#  to then be played in the next block, instead of playing</span>
  <span>#  them directly within the function</span>
  <span># Ruby supports implicit returns — you can simply declare</span>
  <span>#  the value you want from the function on its last line,</span>
  <span>#  without needing to specify as much</span>
  [*ascending_arp, *descending_arp]

  <span># this is equivalent:</span>
  <span># return [*ascending_arp, *descending_arp]</span>
<span>end</span>

arp_c = arpeggiate <span>:c3</span>
arp_a = arpeggiate <span>:a2</span>, <span>true</span>
arp_f = arpeggiate <span>:f2</span>
arp_g = arpeggiate <span>:g2</span>
arp_ab = arpeggiate <span>:ab2</span>
arp_bb = arpeggiate <span>:bb2</span>

live_loop <span>:harp</span> <span>do</span>
  use_synth <span>:square</span> <span># ha</span>
  use_synth_defaults <span>amp:</span> <span>0.15</span>
  
  <span>2</span>.times <span>do</span>
    play_pattern_timed (arp_c), <span>0.25</span>
    play_pattern_timed (arp_a), <span>0.25</span>
  <span>end</span>
  play_pattern_timed (arp_f), <span>0.25</span>
  play_pattern_timed (arp_g), <span>0.25</span>
  play_pattern_timed (arp_ab), <span>0.25</span>
  play_pattern_timed (arp_bb), <span>0.25</span>
<span>end</span>

<span>def</span> <span>choral_rings</span> notes, sus
  offset = sus &lt; <span>1</span> ? <span>0.1</span> : <span>0.2</span>
  
  play ring(*notes), <span>sustain:</span> sus - offset, <span>release:</span> offset
  sleep sus
<span>end</span>

live_loop <span>:choir</span> <span>do</span>
  use_synth <span>:saw</span>
  use_synth_defaults <span>amp:</span> <span>0.35</span>
  
  sleep <span>64</span>
  
  with_fx <span>:reverb</span>, <span>mix:</span> <span>0.75</span> <span>do</span>
    choral_rings [<span>:c5</span>, <span>:e5</span>], <span>4</span>
    choral_rings [<span>:b4</span>, <span>:d5</span>], <span>2</span>
    choral_rings [<span>:d5</span>, <span>:f5</span>], <span>2</span>
    choral_rings [<span>:c5</span>, <span>:e5</span>], <span>8</span>
    
    choral_rings [<span>:c5</span>, <span>:e5</span>], <span>4</span>
    choral_rings [<span>:b4</span>, <span>:d5</span>], <span>2</span>
    choral_rings [<span>:d5</span>, <span>:f5</span>], <span>2</span>
    choral_rings [<span>:d5</span>, <span>:f5</span>], <span>0.5</span>
    choral_rings [<span>:e5</span>, <span>:g5</span>], <span>0.5</span>
    choral_rings [<span>:c5</span>, <span>:e5</span>], <span>7</span>
    
    choral_rings [<span>:a4</span>, <span>:c5</span>], <span>4</span>
    choral_rings [<span>:g4</span>, <span>:b4</span>], <span>2</span>
    choral_rings [<span>:a4</span>, <span>:c5</span>], <span>2</span>
    choral_rings [<span>:b4</span>, <span>:d5</span>], <span>3</span>
    choral_rings [<span>:c5</span>, <span>:e5</span>], <span>1</span>
    choral_rings [<span>:d5</span>, <span>:f5</span>], <span>2</span>
    choral_rings [<span>:b4</span>, <span>:g5</span>], <span>2</span>
    
    choral_rings [<span>:d5</span>, <span>:f5</span>], <span>1</span>
    choral_rings [<span>:c5</span>, <span>:eb5</span>], <span>0.5</span>
    choral_rings [<span>:bb4</span>, <span>:d5</span>], <span>0.5</span>
    choral_rings [<span>:ab4</span>, <span>:c5</span>], <span>6</span>
    
    choral_rings [<span>:eb5</span>, <span>:g5</span>], <span>1</span>
    choral_rings [<span>:d5</span>, <span>:f5</span>], <span>0.5</span>
    choral_rings [<span>:c5</span>, <span>:eb5</span>], <span>0.5</span>
    choral_rings [<span>:bb4</span>, <span>:d5</span>], <span>6</span>
  <span>end</span>
<span>end</span>

</code></pre>
<p>And sounds like this.</p>
<p>As much as tech work is usually discussed in terms of computer <em>science</em> (and as much as I've had ex bosses neg me for my major in college), programming is also art. And it's not even just art when you're using it to purposely do something creative — such as generating audio like this, or something more visual like designing layouts using CSS. What's understated is that writing code is a creative act, much like writing anything else. See, you're not <em>just</em> talking to a machine in the most optimized fashion possible. You're <em>also</em> talking to other people. And even talking to yourself. (You're <em>not</em> crazy though — you're just a little unwell.) Code is ultimately text, and organized text at that. Ultimately, it's <em>read</em> and not just written — so writing <em>good</em> code is about writing code that can be understood at a glance, whether that's to other people, or to you in six months.</p>
<p>But once in a while though, the art of it really <em>is</em> the point in itself.</p>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SQLite FTS5 Extension (121 pts)]]></title>
            <link>https://www.sqlite.org/fts5.html</link>
            <guid>41198422</guid>
            <pubDate>Fri, 09 Aug 2024 02:49:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.sqlite.org/fts5.html">https://www.sqlite.org/fts5.html</a>, See on <a href="https://news.ycombinator.com/item?id=41198422">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>







<h2 id="overview_of_fts5"><span>1. </span>Overview of FTS5</h2>

<p>FTS5 is an SQLite <a href="https://www.sqlite.org/c3ref/module.html">virtual table module</a> that provides
<a href="https://en.wikipedia.org/wiki/Full_text_search">full-text search</a>
functionality to database applications. In their most elementary form,
full-text search engines allow the user to efficiently search a large
collection of documents for the subset that contain one or more instances of a
search term. The search functionality provided to world wide web users by
<a href="https://www.google.com/">Google</a> is, among other things, a full-text search
engine, as it allows users to search for all documents on the web that contain,
for example, the term "fts5".

</p><p>To use FTS5, the user creates an FTS5 virtual table with one or more
columns. For example:

</p><div><pre>CREATE VIRTUAL TABLE email USING fts5(sender, title, body);
</pre></div>

<p>It is an error to add types, constraints or <a href="https://www.sqlite.org/lang_createtable.html#primkeyconst">PRIMARY KEY</a> declarations to
a CREATE VIRTUAL TABLE statement used to create an FTS5 table. Once created,
an FTS5 table may be populated using <a href="https://www.sqlite.org/lang_insert.html">INSERT</a>, <a href="https://www.sqlite.org/lang_update.html">UPDATE</a> or <a href="https://www.sqlite.org/lang_delete.html">DELETE</a> statements
like any other table. Like any other table with no PRIMARY KEY declaration, an
FTS5 table has an implicit INTEGER PRIMARY KEY field named rowid.

</p><p>Not shown in the example above is that there are also
<a href="https://www.sqlite.org/fts5.html#fts5_table_creation_and_initialization">various options</a> that may be provided to FTS5 as
part of the CREATE VIRTUAL TABLE statement to configure various aspects of the
new table. These may be used to modify the way in which the FTS5 table extracts
terms from documents and queries, to create extra indexes on disk to speed up
prefix queries, or to create an FTS5 table that acts as an index on content
stored elsewhere.

</p><p>Once populated, there are three ways to execute a full-text query against
the contents of an FTS5 table:

</p><ul><li> Using a MATCH operator in the WHERE clause of a SELECT statement, or
    </li><li> Using an equals ("=") operator in the WHERE clause of a SELECT statement, or
    </li><li> using the <a href="https://www.sqlite.org/vtab.html#tabfunc2">table-valued function</a> syntax.
</li></ul>

<p>If using the MATCH or = operators, the expression to the left of the MATCH
   operator is usually the name of the FTS5 table (the exception is when
   <a href="https://www.sqlite.org/fts5.html#fts5_column_filters">specifying a column-filter</a>). The expression on the right
   must be a text value specifying the term to search for. For the table-valued
   function syntax, the term to search for is specified as the first table argument.
   For example:

</p><div><pre><i>-- Query for all rows that contain at least once instance of the term</i>
<i>-- "fts5" (in any column). The following three queries are equivalent.</i>
SELECT * FROM email WHERE email MATCH 'fts5';
SELECT * FROM email WHERE email = 'fts5';
SELECT * FROM email('fts5');
</pre></div>

<p> By default, FTS5 full-text searches are case-independent. Like any other
SQL query that does not contain an ORDER BY clause, the example above returns
results in an arbitrary order. To sort results by relevance (most to least
relevant), an ORDER BY may be added to a full-text query as follows:

</p><div><pre><i>-- Query for all rows that contain at least once instance of the term</i>
<i>-- "fts5" (in any column). Return results in order from best to worst</i>
<i>-- match.  </i>
SELECT * FROM email WHERE email MATCH 'fts5' ORDER BY rank;
</pre></div>

<p> As well as the column values and rowid of a matching row, an application
may use <a href="https://www.sqlite.org/fts5.html#_auxiliary_functions_">FTS5 auxiliary functions</a> to retrieve extra information regarding
the matched row. For example, an auxiliary function may be used to retrieve
a copy of a column value for a matched row with all instances of the matched
term surrounded by html &lt;b&gt;&lt;/b&gt; tags. Auxiliary functions are
invoked in the same way as SQLite <a href="https://www.sqlite.org/lang_corefunc.html">scalar functions</a>, except that the name
of the FTS5 table is specified as the first argument. For example:

</p><div><pre><i>-- Query for rows that match "fts5". Return a copy of the "body" column</i>
<i>-- of each row with the matches surrounded by &lt;b&gt;&lt;/b&gt; tags.</i>
SELECT highlight(email, 2, '&lt;b&gt;', '&lt;/b&gt;') FROM email('fts5');
</pre></div>

<p>A description of the available auxiliary functions, and more details
regarding configuration of the special "rank" column, are
<a href="https://www.sqlite.org/fts5.html#_auxiliary_functions_">available below</a>. <a href="https://www.sqlite.org/fts5.html#custom_auxiliary_functions">Custom auxiliary functions</a> may also be implemented in C and registered with
FTS5, just as custom SQL functions may be registered with the SQLite core.

</p><p> As well as searching for all rows that contain a term, FTS5 allows
the user to search for rows that contain:

</p><ul>
  <li> any terms that begin with a specified prefix,
  </li><li> "phrases" - sequences of terms or prefix terms that must feature in a
       document for it to match the query,
  </li><li> sets of terms, prefix terms or phrases that appear within a specified
       proximity of each other (these are called "NEAR queries"), or
  </li><li> boolean combinations of any of the above.
</li></ul>

<p> Such advanced searches are requested by providing a more complicated
FTS5 query string as the text to the right of the MATCH operator (or =
operator, or as the first argument to a table-valued function syntax). The
full query syntax is <a href="https://www.sqlite.org/fts5.html#full_text_query_syntax">described here</a>.

</p><h2 tags="FTS5 building" id="compiling_and_using_fts5"><span>2. </span>Compiling and Using FTS5</h2>

<h2 id="building_fts5_as_part_of_sqlite"><span>2.1. </span>Building FTS5 as part of SQLite</h2>

<p>As of <a href="https://www.sqlite.org/releaselog/3_9_0.html">version 3.9.0</a> (2015-10-14),
FTS5 is included as part of the SQLite <a href="https://www.sqlite.org/amalgamation.html">amalgamation</a>.
If using one of the two autoconf build system, FTS5 is
enabled by specifying the "--enable-fts5" option when running the configure
script.  (FTS5 is currently disabled by default for the
source-tree configure script and enabled by default for
the amalgamation configure script, but these defaults might
change in the future.)

</p><p>Or, if sqlite3.c is compiled using some other build system, by arranging for
the SQLITE_ENABLE_FTS5 pre-processor symbol to be defined.

</p><h2 id="building_a_loadable_extension"><span>2.2. </span>Building a Loadable Extension</h2>

<p>Alternatively, FTS5 may be built as a loadable extension.

</p><p>The canonical FTS5 source code consists of a series of *.c and other files
in the "ext/fts5" directory of the SQLite source tree. A build process reduces
this to just two files - "fts5.c" and "fts5.h" - which may be used to build an
SQLite loadable extension.

</p><ol>
  <li> Obtain the latest SQLite code from fossil.
  </li><li> Create a Makefile as described in <a href="https://www.sqlite.org/howtocompile.html">How To Compile SQLite</a>.
  </li><li> Build the "fts5.c" target. Which also creates fts5.h.
</li></ol>

<div><pre>$ wget -c https://www.sqlite.org/src/tarball/SQLite-trunk.tgz?uuid=trunk -O SQLite-trunk.tgz
.... output ...
$ tar -xzf SQLite-trunk.tgz
$ cd SQLite-trunk
$ ./configure &amp;&amp; make fts5.c
... lots of output ...
$ ls fts5.[ch]
fts5.c        fts5.h
</pre></div>

<p>
  The code in "fts5.c" may then be compiled into a loadable extension or
  statically linked into an application as described in
  <a href="https://www.sqlite.org/loadext.html#build">Compiling Loadable Extensions</a>. There are two entry points defined, both
  of which do the same thing:

</p><ul>
  <li> sqlite3_fts_init
  </li><li> sqlite3_fts5_init
</li></ul>

<p>
  The other file, "fts5.h", is not required to compile the FTS5 extension.
  It is used by applications that implement <a href="https://www.sqlite.org/fts5.html#extending_fts5">custom FTS5 tokenizers or auxiliary functions</a>.

</p><h2 tags="FTS5 query syntax" id="full_text_query_syntax"><span>3. </span>Full-text Query Syntax</h2>

<p>
The following block contains a summary of the FTS query syntax in BNF form.
A detailed explanation follows.

</p><div><pre>&lt;phrase&gt;    := string [*]
&lt;phrase&gt;    := &lt;phrase&gt; + &lt;phrase&gt;
&lt;neargroup&gt; := NEAR ( &lt;phrase&gt; &lt;phrase&gt; ... [, N] )
&lt;query&gt;     := [ [-] &lt;colspec&gt; :] [^] &lt;phrase&gt;
&lt;query&gt;     := [ [-] &lt;colspec&gt; :] &lt;neargroup&gt;
&lt;query&gt;     := [ [-] &lt;colspec&gt; :] ( &lt;query&gt; )
&lt;query&gt;     := &lt;query&gt; AND &lt;query&gt;
&lt;query&gt;     := &lt;query&gt; OR &lt;query&gt;
&lt;query&gt;     := &lt;query&gt; NOT &lt;query&gt;
&lt;colspec&gt;   := colname
&lt;colspec&gt;   := { colname1 colname2 ... }
</pre></div>

<h2 tags="FTS5 Strings" id="fts5_strings"><span>3.1. </span>FTS5 Strings</h2>
<p>
Within an FTS expression a <b>string</b> may be specified in one of two ways:

</p><ul>
  <li> <p>By enclosing it in double quotes ("). Within a string, any embedded
       double quote characters may be escaped SQL-style - by adding a second
       double-quote character.

  </p></li><li> <p>As an FTS5 bareword that is not "AND", "OR" or "NOT" (case sensitive).
       An FTS5 bareword is a string of one or more consecutive characters that
       are all either:

       </p><ul>
         <li> Non-ASCII range characters (i.e. unicode codepoints greater
              than 127), or
         </li><li> One of the 52 upper and lower case ASCII characters, or
         </li><li> One of the 10 decimal digit ASCII characters, or
         </li><li> The underscore character (unicode codepoint 96).
         </li><li> The substitute character (unicode codepoint 26).
       </li></ul>

       Strings that include any other characters must be quoted. Characters
       that are not currently allowed in barewords, are not quote characters and
       do not currently serve any special purpose in FTS5 query expressions may
       at some point in the future be allowed in barewords or used to implement
       new query functionality. This means that queries that are currently
       syntax errors because they include such a character outside of a quoted
       string may be interpreted differently by some future version of FTS5.
</li></ul>

<h2 tags="FTS5 Phrases" id="fts5_phrases"><span>3.2. </span>FTS5 Phrases</h2>
<p>
Each string in an fts5 query is parsed ("tokenized") by the 
<a href="https://www.sqlite.org/fts5.html#tokenizers">tokenizer</a> and a list of zero or more <b>tokens</b>, or
terms, extracted. For example, the default tokenizer tokenizes the string "alpha
beta gamma" to three separate tokens - "alpha", "beta" and "gamma" - in that
order.

</p><p>
FTS queries are made up of <b>phrases</b>. A phrase is an ordered list of
one or more tokens. The tokens from each string in the query each make up a
single phrase. Two phrases can be concatenated into a single large phrase
using the "+" operator. For example, assuming the tokenizer module being used
tokenizes the input "one.two.three" to three separate tokens, the following
four queries all specify the same phrase:

</p><div><pre>... MATCH '"one two three"'
... MATCH 'one + two + three'
... MATCH '"one two" + three'
... MATCH 'one.two.three'
</pre></div>

<p>
A phrase matches a document if the document contains at least one sub-sequence
of tokens that matches the sequence of tokens that make up the phrase.

</p><h2 tags="FTS5 prefix queries" id="fts5_prefix_queries"><span>3.3. </span>FTS5 Prefix Queries</h2>
<p>
If a "*" character follows a string within an FTS expression, then the final
token extracted from the string is marked as a <b>prefix token</b>. As you
might expect, a prefix token matches any document token of which it is a
prefix. For example, the first two queries in the following block will match
any document that contains the token "one" immediately followed by the token
"two" and then any token that begins with "thr".

</p><div><pre>... MATCH '"one two thr" * '
... MATCH 'one + two + thr*'
... MATCH '"one two thr*"'      <b>-- May not work as expected!</b>
</pre></div>

<p>The final query in the block above may not work as expected. Because the
"*" character is inside the double-quotes, it will be passed to the tokenizer,
which will likely discard it (or perhaps, depending on the specific tokenizer
in use, include it as part of the final token) instead of recognizing it as
a special FTS character.

<a name="carrotq"></a>

</p><h2 tags="FTS5 initial token queries" id="fts5_initial_token_queries"><span>3.4. </span>FTS5 Initial Token Queries</h2>
<p>
If a "^" character appears immediately before a phrase that is not part of a
NEAR query, then that phrase only matches a document only if it starts at the
first token in a column. The "^" syntax may be combined with a
<a href="https://www.sqlite.org/fts5.html#fts5_column_filters">column filter</a>, but may not be inserted into the middle of
a phrase.

</p><div><pre>... MATCH '^one'              <i>-- first token in any column must be "one"</i>
... MATCH '^ one + two'       <i>-- phrase "one two" must appear at start of a column</i>
... MATCH '^ "one two"'       <i>-- same as previous </i>
... MATCH 'a : ^two'          <i>-- first token of column "a" must be "two"</i>
... MATCH 'NEAR(^one, two)'   <b>-- syntax error! </b>
... MATCH 'one + ^two'        <b>-- syntax error! </b>
... MATCH '"^one two"'        <b>-- May not work as expected!</b>
</pre></div>

<h2 tags="FTS5 NEAR queries" id="fts5_near_queries"><span>3.5. </span>FTS5 NEAR Queries</h2>

<p>Two or more phrases may be grouped into a <b>NEAR group</b>. A NEAR group
is specified by the token "NEAR" (case sensitive) followed by an open
parenthesis character, followed by two or more whitespace separated phrases, optionally followed by a comma and the numeric parameter <i>N</i>, followed by
a close parenthesis. For example:

</p><div><pre>... MATCH 'NEAR("one two" "three four", 10)'
... MATCH 'NEAR("one two" thr* + four)'
</pre></div>

<p>If no <i>N</i> parameter is supplied, it defaults to 10. A NEAR group
matches a document if the document contains at least one clump of tokens that:

</p><ol>
  <li> contains at least one instance of each phrase, and
  </li><li> for which the number of tokens between the end of the first phrase
       and the beginning of the last phrase in the clump is less than or equal to <i>N</i>.
</li></ol>

<p>For example:

</p><div><pre>CREATE VIRTUAL TABLE f USING fts5(x);
INSERT INTO f(rowid, x) VALUES(1, 'A B C D x x x E F x');

... MATCH 'NEAR(e d, 4)';                      <i>-- Matches!</i>
... MATCH 'NEAR(e d, 3)';                      <i>-- Matches!</i>
... MATCH 'NEAR(e d, 2)';                      <i>-- Does not match!</i>

... MATCH 'NEAR("c d" "e f", 3)';              <i>-- Matches!</i>
... MATCH 'NEAR("c"   "e f", 3)';              <i>-- Does not match!</i>

... MATCH 'NEAR(a d e, 6)';                    <i>-- Matches!</i>
... MATCH 'NEAR(a d e, 5)';                    <i>-- Does not match!</i>

... MATCH 'NEAR("a b c d" "b c" "e f", 4)';    <i>-- Matches!</i>
... MATCH 'NEAR("a b c d" "b c" "e f", 3)';    <i>-- Does not match!</i>
</pre></div>

<h2 tags="FTS5 column filters" id="fts5_column_filters"><span>3.6. </span>FTS5 Column Filters</h2>

<p>
A single phrase or NEAR group may be restricted to matching text within a
specified column of the FTS table by prefixing it with the column name
followed by a colon character. Or to a set of columns by prefixing it
with a whitespace separated list of column names enclosed in parenthesis
("curly brackets") followed by a colon character. Column names may be specified
using either of the two forms described for strings above. Unlike strings that
are part of phrases, column names are not passed to the tokenizer module.
Column names are case-insensitive in the usual way for SQLite column names -
upper/lower case equivalence is understood for ASCII-range characters only.

</p><div><pre>... MATCH 'colname : NEAR("one two" "three four", 10)'
... MATCH '"colname" : one + two + three'

... MATCH '{col1 col2} : NEAR("one two" "three four", 10)'
... MATCH '{col2 col1 col3} : one + two + three'
</pre></div>

<p>
If a column filter specification is preceded by a "-" character, then
it is interpreted as a list of column not to match against. For example:

</p><div><pre><i>-- Search for matches in all columns except "colname"</i>
... MATCH '- colname : NEAR("one two" "three four", 10)'

<i>-- Search for matches in all columns except "col1", "col2" and "col3"</i>
... MATCH '- {col2 col1 col3} : one + two + three'
</pre></div>

<p>
Column filter specifications may also be applied to arbitrary expressions
enclosed in parenthesis. In this case the column filter applies to all
phrases within the expression. Nested column filter operations may only
further restrict the subset of columns matched, they can not be used to
re-enable filtered columns. For example:

</p><div><pre><i>-- The following are equivalent:</i>
... MATCH '{a b} : ( {b c} : "hello" AND "world" )'
... MATCH '(b : "hello") AND ({a b} : "world")'
</pre></div>

<p>
Finally, a column filter for a single column may be specified by using
the column name as the LHS of a MATCH operator (instead of the usual
table name). For example:

</p><div><pre><i>-- Given the following table</i>
CREATE VIRTUAL TABLE ft USING fts5(a, b, c);

<i>-- The following are equivalent</i>
SELECT * FROM ft WHERE b MATCH 'uvw AND xyz';
SELECT * FROM ft WHERE ft MATCH 'b : (uvw AND xyz)';

<i>-- This query cannot match any rows (since all columns are filtered out): </i>
SELECT * FROM ft WHERE b MATCH 'a : xyz';
</pre></div>

<h2 tags="FTS5 boolean operators" id="fts5_boolean_operators"><span>3.7. </span>FTS5 Boolean Operators</h2>

<p>
Phrases and NEAR groups may be arranged into expressions using <b>boolean
operators</b>. In order of precedence, from highest (tightest grouping) to
lowest (loosest grouping), the operators are:

</p><table striped="1">
  <tbody><tr><th>Operator </th><th>Function

  </th></tr><tr><td><code>&lt;query1&gt; NOT &lt;query2&gt;</code>
      </td><td>Matches if query1 matches and query2 does not match.

  </td></tr><tr><td><code>&lt;query1&gt; AND &lt;query2&gt;</code>
      </td><td>Matches if both query1 and query2 match.

  </td></tr><tr><td><code>&lt;query1&gt; OR &lt;query2&gt;</code>
      </td><td>Matches if either query1 or query2 match.

</td></tr></tbody></table>

<p>
Parenthesis may be used to group expressions in order to modify operator
precedence in the usual ways. For example:

</p><div><pre><i>-- Because NOT groups more tightly than OR, either of the following may</i>
<i>-- be used to match all documents that contain the token "two" but not</i>
<i>-- "three", or contain the token "one".  </i>
... MATCH 'one OR two NOT three'
... MATCH 'one OR (two NOT three)'

<i>-- Matches documents that contain at least one instance of either "one"</i>
<i>-- or "two", but do not contain any instances of token "three".</i>
... MATCH '(one OR two) NOT three'
</pre></div>

<p>
Phrases and NEAR groups may also be connected by <b>implicit AND operators</b>.
For simplicity, these are not shown in the BNF grammar above. Essentially, any
sequence of phrases or NEAR groups (including those restricted to matching
specified columns) separated only by whitespace are handled as if there were an
implicit AND operator between each pair of phrases or NEAR groups. Implicit
AND operators are never inserted after or before an expression enclosed in
parenthesis. Implicit AND operators group more tightly than all other
operators, including NOT. For example:

</p><div><pre>... MATCH 'one two three'         <i>-- 'one AND two AND three'</i>
... MATCH 'three "one two"'       <i>-- 'three AND "one two"'</i>
... MATCH 'NEAR(one two) three'   <i>-- 'NEAR(one two) AND three'</i>
... MATCH 'one OR two three'      <i>-- 'one OR two AND three'</i>
... MATCH 'one NOT two three'     <i>-- 'one NOT (two AND three)'</i>

... MATCH '(one OR two) three'    <i>-- Syntax error!</i>
... MATCH 'func(one two)'         <i>-- Syntax error!</i>
</pre></div>

<h2 tags="FTS5 CREATE TABLE Options" id="fts5_table_creation_and_initialization"><span>4. </span>FTS5 Table Creation and Initialization</h2>

<p>Each argument specified as part of a "CREATE VIRTUAL TABLE ... USING fts5
..." statement is either a column declaration or a configuration option. A
<b>column declaration</b> consists of one or more whitespace separated FTS5
barewords or string literals quoted in any manner acceptable to SQLite.

</p><p>The first string or bareword in a column declaration is the column name. It
is an error to attempt to name an fts5 table column "rowid" or "rank", or to
assign the same name to a column as is used by the table itself. This is not
supported.

</p><p>Each subsequent string or bareword in a column declaration is a column
option that modifies the behaviour of that column. Column options are
case-independent. Unlike the SQLite core, FTS5 considers unrecognized column
options to be errors. Currently, the only option recognized is
<a href="https://www.sqlite.org/fts5.html#the_unindexed_column_option">"UNINDEXED" (see below)</a>.

</p><p>A <b>configuration option</b> consists of an FTS5 bareword - the option name -
followed by an "=" character, followed by the option value. The option value is
specified using either a single FTS5 bareword or a string literal, again quoted
in any manner acceptable to the SQLite core. For example:

</p><div><pre>CREATE VIRTUAL TABLE mail USING fts5(sender, title, body, tokenize = 'porter ascii');
</pre></div>

<p> There are currently the following configuration options:

</p><ul>
  <li> The "tokenize" option, used to configure a <a href="https://www.sqlite.org/fts5.html#tokenizers">custom tokenizer</a>.
  </li><li> The "prefix" option, used to add <a href="https://www.sqlite.org/fts5.html#prefix_indexes">prefix indexes</a>
       to an FTS5 table.
  </li><li> The "content" option, used to make the FTS5 table an
       <a href="https://www.sqlite.org/fts5.html#external_content_and_contentless_tables">external content or contentless table</a>.
  </li><li> The "content_rowid" option, used to set the rowid field of an
       <a href="https://www.sqlite.org/fts5.html#external_content_tables">external content table</a>.
  </li><li> The <a href="https://www.sqlite.org/fts5.html#the_columnsize_option">"columnsize" option</a>, used to configure
       whether or not the size in tokens of each value in the FTS5 table is
       stored separately within the database.
  </li><li> The <a href="https://www.sqlite.org/fts5.html#the_detail_option">"detail" option</a>. This option may be used
       to reduce the size of the FTS index on disk by omitting some information
       from it.
</li></ul>

<h2 tags="unindexed" id="the_unindexed_column_option"><span>4.1. </span>The UNINDEXED column option</h2>

<p>The contents of columns qualified with the UNINDEXED column option are not
added to the FTS index. This means that for the purposes of MATCH queries and
<a href="https://www.sqlite.org/fts5.html#_auxiliary_functions_">FTS5 auxiliary functions</a>, the column contains no matchable tokens.

</p><p>For example, to avoid adding the contents of the "uuid" field to the FTS
index:
</p><div><pre>CREATE VIRTUAL TABLE customers USING fts5(name, addr, uuid UNINDEXED);
</pre></div>

<h2 tags="FTS5 prefix indexes" id="prefix_indexes"><span>4.2. </span>Prefix Indexes</h2>

<p> By default, FTS5 maintains a single index recording the location of each
token instance within the document set. This means that querying for complete
tokens is fast, as it requires a single lookup, but querying for a prefix
token can be slow, as it requires a range scan. For example, to query for
the prefix token "abc*" requires a range scan of all tokens greater than
or equal to "abc" and less than "abd".

</p><p> A prefix index is a separate index that records the location of all
instances of prefix tokens of a certain length in characters used to speed
up queries for prefix tokens. For example, optimizing a query for prefix
token "abc*" requires a prefix index of three-character prefixes.

</p><p> To add prefix indexes to an FTS5 table, the "prefix" option is set to
either a single positive integer or a text value containing a white-space
separated list of one or more positive integer values. A prefix index is
created for each integer specified. If more than one "prefix" option is
specified as part of a single CREATE VIRTUAL TABLE statement, all apply.

</p><div><pre><i>-- Two ways to create an FTS5 table that maintains prefix indexes for
-- two and three character prefix tokens.</i>
CREATE VIRTUAL TABLE ft USING fts5(a, b, prefix='2 3');
CREATE VIRTUAL TABLE ft USING fts5(a, b, prefix=2, prefix=3);
</pre></div>

<h2 tags="FTS5 tokenizers" id="tokenizers"><span>4.3. </span>Tokenizers</h2>

<p> The CREATE VIRTUAL TABLE "tokenize" option is used to configure the
specific tokenizer used by the FTS5 table. The option argument must be either
an FTS5 bareword, or an SQL text literal. The text of the argument is itself
treated as a white-space series of one or more FTS5 barewords or SQL text
literals. The first of these is the name of the tokenizer to use. The second
and subsequent list elements, if they exist, are arguments passed to the
tokenizer implementation.

</p><p> Unlike option values and column names, SQL text literals intended as
tokenizers must be quoted using single quote characters. For example:

</p><div><pre><i>-- The following are all equivalent</i>
CREATE VIRTUAL TABLE t1 USING fts5(x, tokenize = 'porter ascii');
CREATE VIRTUAL TABLE t1 USING fts5(x, tokenize = "porter ascii");
CREATE VIRTUAL TABLE t1 USING fts5(x, tokenize = "'porter' 'ascii'");
CREATE VIRTUAL TABLE t1 USING fts5(x, tokenize = '''porter'' ''ascii''');

<i>-- But this will fail:</i>
CREATE VIRTUAL TABLE t1 USING fts5(x, tokenize = '"porter" "ascii"');

<i>-- This will fail too:</i>
CREATE VIRTUAL TABLE t1 USING fts5(x, tokenize = 'porter' 'ascii');
</pre></div>


<p>
FTS5 features four built-in tokenizer modules, described in subsequent
sections:

</p><ul>
  <li> The <b>unicode61</b> tokenizer, based on the Unicode 6.1 standard. This
       is the default.

  </li><li> The <b>ascii</b> tokenizer, which assumes all characters outside of
  the ASCII codepoint range (0-127) are to be treated as token characters.

  </li><li> The <b>porter</b> tokenizer, which implements the
<a href="https://tartarus.org/martin/PorterStemmer" ="1"="">porter stemming algorithm</a>.

  </li><li> The <b>trigram</b> tokenizer, which treats each contiguous sequence of
  three characters as a token, allowing FTS5 to support more general substring matching.
</li></ul>

<p> It is also possible to create custom tokenizers for FTS5. The API for doing so is <a href="https://www.sqlite.org/fts5.html#custom_tokenizers">described here</a>.

</p><h3 id="unicode61_tokenizer"><span>4.3.1. </span>Unicode61 Tokenizer</h3>

<p> The unicode tokenizer classifies all unicode characters as either
"separator" or "token" characters. By default all space and punctuation
characters, as defined by Unicode 6.1, are considered separators, and all
other characters as token characters. More specifically, all unicode
characters assigned to a
<a href="https://en.wikipedia.org/wiki/Unicode_character_property#General_Category">
general category</a> beginning with "L" or "N" (letters and numbers,
specifically) or to category "Co" ("other, private use") are considered tokens.
All other characters are separators.

</p><p>Each contiguous run of one or more token characters is considered to be a
token. The tokenizer is case-insensitive according to the rules defined by
Unicode 6.1.

</p><p> By default, diacritics are removed from all Latin script characters. This
means, for example, that "A", "a", "À", "à", "Â" and "â"
are all considered to be equivalent.

</p><p> Any arguments following "unicode61" in the token specification are treated
as a list of alternating option names and values. Unicode61 supports the
following options:

</p><table striped="1">
  <tbody><tr><th> Option </th><th> Usage
  </th></tr><tr><td> remove_diacritics
  </td><td>This option should be set to "0", "1" or "2". The default value is "1".
  If it is set to "1" or "2", then diacritics are removed from Latin script
  characters as described above. However, if it is set to "1", then diacritics
  are not removed in the fairly uncommon case where a single unicode codepoint
  is used to represent a character with more that one diacritic. For example,
  diacritics are not removed from codepoint 0x1ED9 ("LATIN SMALL LETTER O WITH
  CIRCUMFLEX AND DOT BELOW"). This is technically a bug, but cannot be fixed
  without creating backwards compatibility problems. If this option is set to
  "2", then diacritics are correctly removed from all Latin characters.

  </td></tr><tr><td> categories
  </td><td>This option may be used to modify the set of Unicode general categories
  that are considered to correspond to token characters. The argument must
  consist of a space separated list of two-character general category
  abbreviations (e.g. "Lu" or "Nd"), or of the same with the second character
  replaced with an asterisk ("*"), interpreted as a glob pattern. The default
  value is "L* N* Co".

  </td></tr><tr><td> tokenchars
  </td><td> This option is used to specify additional unicode characters that
  should be considered token characters, even if they are white-space or
  punctuation characters according to Unicode 6.1. All characters in the
  string that this option is set to are considered token characters.

  </td></tr><tr><td> separators
  </td><td> This option is used to specify additional unicode characters that
  should be considered as separator characters, even if they are token
  characters according to Unicode 6.1. All characters in the string that
  this option is set to are considered separators.
</td></tr></tbody></table>

<p> For example:

</p><div><pre><i>-- Create an FTS5 table that does not remove diacritics from Latin
-- script characters, and that considers hyphens and underscore characters
-- to be part of tokens. </i>
CREATE VIRTUAL TABLE ft USING fts5(a, b,
    tokenize = "unicode61 remove_diacritics 0 tokenchars '-_'"
);
</pre></div>

<p> or:

</p><div><pre><i>-- Create an FTS5 table that, as well as the default token character classes,</i>
<i>-- considers characters in class "Mn" to be token characters.</i>
CREATE VIRTUAL TABLE ft USING fts5(a, b,
    tokenize = "unicode61 categories 'L* N* Co Mn'"
);
</pre></div>

<p> The fts5 unicode61 tokenizer is byte-for-byte compatible with the fts3/4
unicode61 tokenizer.

</p><h3 id="ascii_tokenizer"><span>4.3.2. </span>Ascii Tokenizer</h3>

<p> The Ascii tokenizer is similar to the Unicode61 tokenizer, except that:

</p><ul>
  <li> All non-ASCII characters (those with codepoints greater than 127) are
  always considered token characters. If any non-ASCII characters are specified
  as part of the separators option, they are ignored.

  </li><li> Case-folding is only performed for ASCII characters. So while "A" and
  "a" are considered to be equivalent, "Ã" and "ã" are distinct.

  </li><li> The remove_diacritics option is not supported.
</li></ul>

<p> For example:

</p><div><pre><i>-- Create an FTS5 table that uses the ascii tokenizer, but does not
-- consider numeric characters to be part of tokens.</i>
CREATE VIRTUAL TABLE ft USING fts5(a, b,
    tokenize = "ascii separators '0123456789'"
);
</pre></div>

<h3 id="porter_tokenizer"><span>4.3.3. </span>Porter Tokenizer</h3>

<p> The porter tokenizer is a wrapper tokenizer. It takes the output of some
other tokenizer and applies the
<a href="https://tartarus.org/martin/PorterStemmer/">porter stemming algorithm</a>
to each token before it returns it to FTS5. This allows search terms like
"correction" to match similar words such as "corrected" or "correcting". The
porter stemmer algorithm is designed for use with English language terms
only - using it with other languages may or may not improve search utility.

</p><p> By default, the porter tokenizer operates as a wrapper around the default
tokenizer (unicode61). Or, if one or more extra arguments are added to the
"tokenize" option following "porter", they are treated as a specification for
the underlying tokenizer that the porter stemmer uses. For example:

</p><div><pre><i>-- Two ways to create an FTS5 table that uses the porter tokenizer to
-- stem the output of the default tokenizer (unicode61). </i>
CREATE VIRTUAL TABLE t1 USING fts5(x, tokenize = porter);
CREATE VIRTUAL TABLE t1 USING fts5(x, tokenize = 'porter unicode61');

<i>-- A porter tokenizer used to stem the output of the unicode61 tokenizer,
-- with diacritics removed before stemming.</i>
CREATE VIRTUAL TABLE t1 USING fts5(x, tokenize = 'porter unicode61 remove_diacritics 1');
</pre></div>

<h3 id="the_trigram_tokenizer"><span>4.3.4. </span>The Trigram Tokenizer</h3>

<p>
The trigram tokenizer extends FTS5 to support substring
matching in general, instead of the usual token matching. When using the
trigram tokenizer, a query or phrase token may match any sequence of characters
within a row, not just a complete token. For example:

</p><div><pre>CREATE VIRTUAL TABLE tri USING fts5(a, tokenize="trigram");
INSERT INTO tri VALUES('abcdefghij KLMNOPQRST uvwxyz');

<i>-- The following queries all match the single row in the table</i>
SELECT * FROM tri('cdefg');
SELECT * FROM tri('cdefg AND pqr');
SELECT * FROM tri('"hij klm" NOT stuv');
</pre></div>

<p>
The trigram tokenizer supports the following options: 

</p><table striped="1">
  <tbody><tr><th> Option </th><th> Usage
  </th></tr><tr><td> case_sensitive
      </td><td> This value may be set to 1 or 0 (the default). If it is set to 1,
      then matching is case sensitive. Otherwise, if this option is set to
      0, matching is case insensitive.

  </td></tr><tr><td> remove_diacritics
      </td><td> This value may also be set to 1 or 0 (the default). It may only
      be set to 1 if the case_sensitive options is set to 0 - setting both
      options to 1 is an error. If this option is set, then diacritics are
      removed from the text before matching (e.g. so that "á" matches "a").
</td></tr></tbody></table>

<div><pre><i>-- A case-sensitive trigram index</i>
CREATE VIRTUAL TABLE tri USING fts5(a, tokenize="trigram case_sensitive 1");
</pre></div>

<p>
Unless the remove_diacritics option is set, FTS5 tables that use the trigram
tokenizer also support indexed GLOB and LIKE pattern matching. For example:

</p><div><pre>SELECT * FROM tri WHERE a LIKE '%cdefg%';
SELECT * FROM tri WHERE a GLOB '*ij klm*xyz';
</pre></div>

<p>
If an FTS5 trigram tokenizer is created with the case_sensitive option set to 1,
it may only index GLOB queries, not LIKE.

</p><p>
Notes:

</p><ul>
  <li> Substrings consisting of fewer than 3 unicode characters do not match any
       rows when used with a full-text query. If a LIKE or GLOB pattern does not
       contain at least one sequence of non-wildcard unicode characters, FTS5
       falls back to a linear scan of the entire table.

  </li><li> If the FTS5 table is created with the detail=none or detail=column option
       specified, full-text queries may not contain any tokens longer than 3
       unicode characters. LIKE and GLOB pattern matching may be slightly slower,
       but still works. If the index is to be used only for LIKE and/or GLOB
       pattern matching, these options are worth experimenting with to reduce
       the index size.

  </li><li> The index cannot be used to optimize LIKE patterns if the LIKE operator
       has an ESCAPE clause.
</li></ul>

<h2 tags="FTS5 content option" id="external_content_and_contentless_tables"><span>4.4. </span>External Content and Contentless Tables</h2>

<p>
Normally, when a row is inserted into an FTS5 table, in addition to building
the index, FTS5 makes a copy of the original row content.
When column values are requested from the FTS5 table by the user or by an
auxiliary function implementation, those values are
read from that private copy of the content.  The "content" option may be used
to create an FTS5 table that stores only FTS full-text index entries.
Because the column values themselves are usually much larger than the
associated full-text index entries, this can save significant database space.

</p><p>
There are two ways to use the "content" option:
</p><ul>
  <li> By setting it to an empty string to create a contentless FTS5 table. In
       this case FTS5 assumes that the original column values are unavailable
       to it when processing queries. Full-text queries and some auxiliary
       functions can still be used, but no column values apart from the rowid
       may be read from the table.

  </li><li> By setting it to the name of a database object (table, virtual table or
       view) that may be queried by FTS5 at any time to retrieve the column
       values. This is known as an "external content" table. In this case all
       FTS5 functionality may be used, but it is the responsibility of the user
       to ensure that the contents of the full-text index are consistent with
       the named database object. If they are not, query results may be
       unpredictable.
</li></ul>

<h3 tags="FTS5 contentless tables" id="contentless_tables"><span>4.4.1. </span>Contentless Tables</h3>

<p> A contentless FTS5 table is created by setting the "content" option to
an empty string. For example:

</p><div><pre>CREATE VIRTUAL TABLE f1 USING fts5(a, b, c, content='');
</pre></div>

<p> Contentless FTS5 tables do not support UPDATE or DELETE statements, or
INSERT statements that do not supply a non-NULL value for the rowid field.
Contentless tables do not support REPLACE conflict handling. REPLACE
and INSERT OR REPLACE statements are treated as regular INSERT statements.
Rows may be deleted from a contentless table using an <a href="https://www.sqlite.org/fts5.html#the_delete_command">FTS5 delete command</a>.

</p><p> Attempting to read any column value except the rowid from a contentless
FTS5 table returns an SQL NULL value.

<a name="clssdeltab"></a>

</p><h3 tags="FTS5 contentless-delete tables" id="contentless_delete_tables"><span>4.4.2. </span>Contentless-Delete Tables</h3>

<p>As of version 3.43.0, also available are contentless-delete tables.
A contentless-delete table is created by setting the content option to an
empty string and also setting the contentless_delete option to 1. For example:

</p><div><pre>CREATE VIRTUAL TABLE f1 USING fts5(a, b, c, content='', contentless_delete=1);
</pre></div>

<p>A contentless-delete table differs from a contentless table in that:

</p><ul>
  <li> Contentless-delete tables support both DELETE and "INSERT OR REPLACE
       INTO" statements.
  </li><li> Contentless-delete tables support UPDATE statements, but only if new
       values are supplied for all user-defined columns of the fts5 table.
  </li><li> Contentless-delete tables do <b>not</b> support the 
       <a href="https://www.sqlite.org/fts5.html#the_delete_command">FTS5 delete command</a>.
</li></ul>

<div><pre><i>-- Supported UPDATE statement:</i>
UPDATE f1 SET a=?, b=?, c=? WHERE rowid=?;

<i>-- This UPDATE is not supported, as it does not supply a new value</i>
<i>-- for column "c".</i>
UPDATE f1 SET a=?, b=? WHERE rowid=?;
</pre></div>

<p> Unless backwards compatibility is required, new code should prefer
contentless-delete tables to contentless tables.

</p><h3 tags="FTS5 external content tables" id="external_content_tables"><span>4.4.3. </span>External Content Tables</h3>

<p> An external content FTS5 table is created by setting the content
option to the name of a table, virtual table or view (hereafter the "content
table") within the same database. Whenever column values are required by
FTS5, it queries the content table as follows, with the rowid of the row
for which values are required bound to the SQL variable:

</p><div><pre>SELECT &lt;content_rowid&gt;, &lt;cols&gt; FROM &lt;content&gt; WHERE &lt;content_rowid&gt; = ?;
</pre></div>

<p> In the above, &lt;content&gt; is replaced by the name of the content table.
By default, &lt;content_rowid&gt; is replaced by the literal text "rowid". Or,
if the "content_rowid" option is set within the CREATE VIRTUAL TABLE statement,
by the value of that option. &lt;cols&gt; is replaced by a comma-separated list
of the FTS5 table column names. For example:

</p><div><pre><i>-- If the database schema is: </i>
CREATE TABLE tbl (a, b, c, d INTEGER PRIMARY KEY);
CREATE VIRTUAL TABLE fts USING fts5(a, c, content=tbl, content_rowid=d);

<i>-- Fts5 may issue queries such as:</i>
SELECT d, a, c FROM tbl WHERE d = ?;
</pre></div>

<p> The content table may also be queried as follows:

</p><div><pre>SELECT &lt;content_rowid&gt;, &lt;cols&gt; FROM &lt;content&gt; ORDER BY &lt;content_rowid&gt; ASC;
SELECT &lt;content_rowid&gt;, &lt;cols&gt; FROM &lt;content&gt; ORDER BY &lt;content_rowid&gt; DESC;
</pre></div>

<p> It is still the responsibility of the user to ensure that the contents of
an external content FTS5 table are kept up to date with the content table.
One way to do this is with triggers. For example:

</p><div><pre><i>-- Create a table. And an external content fts5 table to index it.</i>
CREATE TABLE tbl(a INTEGER PRIMARY KEY, b, c);
CREATE VIRTUAL TABLE fts_idx USING fts5(b, c, content='tbl', content_rowid='a');

<i>-- Triggers to keep the FTS index up to date.</i>
CREATE TRIGGER tbl_ai AFTER INSERT ON tbl BEGIN
  INSERT INTO fts_idx(rowid, b, c) VALUES (new.a, new.b, new.c);
END;
CREATE TRIGGER tbl_ad AFTER DELETE ON tbl BEGIN
  INSERT INTO fts_idx(fts_idx, rowid, b, c) VALUES('delete', old.a, old.b, old.c);
END;
CREATE TRIGGER tbl_au AFTER UPDATE ON tbl BEGIN
  INSERT INTO fts_idx(fts_idx, rowid, b, c) VALUES('delete', old.a, old.b, old.c);
  INSERT INTO fts_idx(rowid, b, c) VALUES (new.a, new.b, new.c);
END;
</pre></div>

<p> Like contentless tables, external content tables do not support REPLACE
conflict handling. Any operations that specify REPLACE conflict handling are
handled using ABORT.

</p><h3 tags="FTS5 external content pitfalls" id="external_content_table_pitfalls"><span>4.4.4. </span>External Content Table Pitfalls</h3>

<p>
It is the responsibility of the user to ensure that an FTS5 external content
table (one with a non-empty content= option) is kept consistent with the
content table itself (the table named by the content= option). If these are
allowed to become inconsistent, then the results of queries against the FTS5
table may become unintuitive and appear inconsistent.

</p><p>
In these situations, the apparently inconsistent results produced by queries
against the FTS5 external content table may be understood as follows:

</p><ul>
  <li><p> If the query does not use the full-text index - does not contain a 
  MATCH operator or equivalent table-valued function syntax - then the
  query is effectively passed through to the external content table. In
  this case the contents of the FTS index have no effect on the results
  of the query.

  </p></li><li><p> If the query does use the full text index, then the FTS5 module
  queries it for the set of rowid values corresponding to documents that match
  the query. For each such rowid, it then runs a query similar to the following
  to retrieve any required column values, where '?' is replaced by the rowid
  value, and &lt;content&gt; and &lt;content_rowid&gt; by the values specified
  for the content= and content_rowid= options:
</p></li></ul>

<div><pre>SELECT &lt;content_rowid&gt;, &lt;cols&gt; FROM &lt;content&gt; WHERE &lt;content_rowid&gt; = ?;
</pre></div>

<p>
For example, if a database is created using the following script:

</p><div><pre><i>-- Create and populate a table. </i>
CREATE TABLE tbl(a INTEGER PRIMARY KEY, t TEXT);
INSERT INTO tbl VALUES(1, 'all that glitters');
INSERT INTO tbl VALUES(2, 'is not gold');

<i>-- Create an external content FTS5 table </i>
CREATE VIRTUAL TABLE ft USING fts5(t, content='tbl', content_rowid='a');
</pre></div>

<p>then the content table contains two rows, but the FTS index contains no
entries corresponding to them. In this case the following queries will return
inconsistent results as follows:

</p><div><pre><i>-- Returns 2 rows.  Because the query does not use the FTS index, it is</i>
<i>-- effectively executed against table 'tbl' directly, and so returns</i>
<i>-- both rows.</i>
SELECT * FROM t1;

<i>-- Returns 0 rows.  This query does use the FTS index, which currently</i>
<i>-- contains no entries. So it returns 0 rows.</i>
SELECT rowid, t FROM t1('gold')
</pre></div>

<p>
Alternatively, if the database were created and populated as follows:

</p><div><pre><i>-- Create and populate a table. </i>
CREATE TABLE tbl(a INTEGER PRIMARY KEY, t TEXT);

<i>-- Create an external content FTS5 table </i>
CREATE VIRTUAL TABLE ft USING fts5(t, content='tbl', content_rowid='a');
INSERT INTO ft(rowid, t) VALUES(1, 'all that glitters');
INSERT INTO ft(rowid, t) VALUES(2, 'is not gold');
</pre></div>

<p>then the content table is empty, but the FTS index contains entries for
6 different tokens. In this case the following queries will return
inconsistent results as follows:

</p><div><pre><i>-- Returns 0 rows.  Since it does not use the FTS index, the query is</i>
<i>-- passed directly through to table 'tbl', which contains no data.</i>
SELECT * FROM t1;

<i>-- Returns 1 row. The "rowid" field of the returned row is 2, and</i>
<i>-- the "t" field set to NULL. "t" is set to NULL because when the external</i>
<i>-- content table "tbl" was queried for the data associated with the row</i>
<i>-- with a=2 ("a" is the content_rowid column), none could be found.</i>
SELECT rowid, t FROM t1('gold')
</pre></div>

<p>As described in the previous section, triggers on the content table are
a good way to ensure that an FTS5 external content table is kept consistent.
However, triggers are only fired when rows are inserted, updated or deleted
in the content table. This means that if, for example, a database is created
as follows:

</p><div><pre><i>-- Create and populate a table. </i>
CREATE TABLE tbl(a INTEGER PRIMARY KEY, t TEXT);
INSERT INTO tbl VALUES(1, 'all that glitters');
INSERT INTO tbl VALUES(2, 'is not gold');

<i>-- Create an external content FTS5 table </i>
CREATE VIRTUAL TABLE ft USING fts5(t, content='tbl', content_rowid='a');

<i>-- Create triggers to keep the FTS5 table up to date</i>
CREATE TRIGGER tbl_ai AFTER INSERT ON tbl BEGIN
  INSERT INTO ft(rowid, t) VALUES (new.a, new.t);
END;
&lt;similar triggers for update + delete&gt;
</pre></div>

<p>then the content table and external content FTS5 table are inconsistent, as
creating the triggers does not copy existing rows from the content table
into the FTS index. The triggers are only able to ensure that updates made to
the content table after they are created are reflected in the FTS index.

</p><p>In this, and any other situation where the FTS index and its content table
have become inconsistent, the <a href="#the_rebuild_command">'rebuild'</a>
command may be used to completely discard the contents of the FTS index and
rebuild it based on the current contents of the content table.

</p><h2 tags="FTS5 columnsize option" id="the_columnsize_option"><span>4.5. </span>The Columnsize Option</h2>

<p>Normally, FTS5 maintains a special backing table within the database that
stores the size of each column value in tokens inserted into the main FTS5
table in a separate table. This backing table is used by the
<a href="#xColumnSize">xColumnSize</a><a> API function, which is in turn used by
the built-in </a><a href="https://www.sqlite.org/fts5.html#the_bm25_function">bm25 ranking function</a> (and is likely to be useful
to other ranking functions as well).

</p><p>In order to save space, this backing table may be omitted by setting the
columnsize option to zero. For example:

</p><div><pre><i>-- A table without the xColumnSize() values stored on disk:</i>
CREATE VIRTUAL TABLE ft USING fts5(a, b, c, columnsize=0);

<i>-- Three equivalent ways of creating a table that does store the</i>
<i>-- xColumnSize() values on disk:</i>
CREATE VIRTUAL TABLE ft USING fts5(a, b, c);
CREATE VIRTUAL TABLE ft USING fts5(a, b, c, columnsize=1);
CREATE VIRTUAL TABLE ft USING fts5(a, b, columnsize='1', c);
</pre></div>

<p> It is an error to set the columnsize option to any value other than
0 or 1.

</p><p> If an FTS5 table is configured with columnsize=0 but is not a
<a href="https://www.sqlite.org/fts5.html#contentless_tables">contentless table</a>, the xColumnSize API function
still works, but runs much more slowly. In this case, instead of reading
the value to return directly from the database, it reads the text value
itself and count the tokens within it on demand.

</p><p>Or, if the table is also a <a href="https://www.sqlite.org/fts5.html#contentless_tables">contentless table</a>,
then the following apply:

</p><ul>
  <li> <p>The xColumnSize API always returns -1. There is no way to determine
       the number of tokens in a value stored within a contentless FTS5 table
       configured with columnsize=0.

  </p></li><li> <p>Each inserted row must be accompanied by an explicitly specified rowid
       value. If a contentless table is configured with columnsize=0,
       attempting to insert a NULL value into the rowid is an SQLITE_MISMATCH
       error.

  </p></li><li> <p>All queries on the table must be full-text queries. In other words,
       they must use the MATCH or = operator with the table-name column as the
       left-hand operand, or else use the table-valued function syntax. Any
       query that is not a full-text query results in an error.
</p></li></ul>

<p> The name of the table in which the xColumnSize values are stored
(unless columnsize=0 is specified) is "&lt;name&gt;_docsize", where
&lt;name&gt; is the name of the FTS5 table itself. The
<a href="https://www.sqlite.org/download.html">sqlite3_analyzer</a>
tool may be used on an existing database in order to determine how much
space might be saved by recreating an FTS5 table using columnsize=0.

</p><h2 tags="FTS5 detail option" id="the_detail_option"><span>4.6. </span>The Detail Option</h2>

<p> For each term in a document, the FTS index maintained by FTS5
stores the rowid of the document, the column number of the column that contains
the term and the offset of the term within the column value. The "detail"
option may be used to omit some of this information. This reduces the space
that the index consumes within the database file, but also reduces the
capability and efficiency of the system.

</p><p> The detail option may be set to "full" (the default value), "column" or
"none". For example:

</p><div><pre><i>-- The following two lines are equivalent (because the default value</i>
<i>-- of "detail" is "full". </i>
CREATE VIRTUAL TABLE ft1 USING fts5(a, b, c);
CREATE VIRTUAL TABLE ft1 USING fts5(a, b, c, detail=full);

CREATE VIRTUAL TABLE ft2 USING fts5(a, b, c, detail=column);
CREATE VIRTUAL TABLE ft3 USING fts5(a, b, c, detail=none);
</pre></div>

<p>If the detail option is set to <b>column</b>, then for each term the FTS
index records the rowid and column number only, omitting the term offset
information. This results in the following restrictions:

</p><ul>
  <li> NEAR queries are not available.
  </li><li> Phrase queries are not available.
  </li><li> Assuming the table is not also a
  <a href="https://www.sqlite.org/fts5.html#contentless_tables">contentless table</a>, the
  <a href="#xInstCount">xInstCount</a>, <a href="#xInst">xInst</a>,
  <a href="#xPhraseFirst">xPhraseFirst</a> and <a href="#xPhraseNext">xPhraseNext</a>
  are slower than usual. This is because instead of reading the required data
  directly from the FTS index they have to load and tokenize the document text
  on demand.
  </li><li> If the table is also a contentless table, the xInstCount, xInst,
  xPhraseFirst and xPhraseNext APIs behave as if the current row contains no
  phrase matches at all (i.e. xInstCount() returns 0).
</li></ul>

<p>If the detail option is set to <b>none</b>, then for each term the FTS
index records just the rowid is stored. Both column and offset information
are omitted. As well as the restrictions itemized above for detail=column
mode, this imposes the following extra limitations:

</p><ul>
  <li> Column filter queries are not available.
  </li><li> Assuming the table is not also a contentless table, the
  <a href="#xPhraseFirstColumn">xPhraseFirstColumn</a> and
  <a href="#xPhraseNextColumn">xPhraseNextColumn</a> are slower than usual.

  </li><li> If the table is also a contentless table, the xPhraseFirstColumn and
  xPhraseNextColumn APIs behave as if the current row contains no phrase
  matches at all (i.e. xPhraseFirstColumn() sets the iterator to EOF).
</li></ul>

<p> In one test that indexed a large set of emails (1636 MiB on disk), the FTS
index was 743 MiB on disk with detail=full, 340 MiB with detail=column and 134
MiB with detail=none.

</p><h2 tags="FTS5 tokendata option" id="the_tokendata_option"><span>4.7. </span>The Tokendata Option</h2>

<p>This option is only useful to applications that implement 
<a href="#custom_tokenizers">custom tokenizers</a>. Usually, tokenizers may
return tokens that consist of any sequence of bytes, including 0x00 bytes.
However, if the table specifies the tokendata=1 option, then fts5 ignores
the first 0x00 byte and any trailing data in the token for the purposes
of matching. It still stores the entire token as returned by the tokenizer,
but it is ignored by the fts5 core.

</p><p>The full version of the token, including any 0x00 byte and trailing data,
is available to <a href="#custom_auxiliary_functions">custom auxiliary 
functions</a> via the <a href="#xQueryToken">xQueryToken</a> and 
<a href="#xInstToken">xInstToken</a> APIs. 

</p><p>This may be useful for ranking functions. A custom tokenizer may
add extra data to some document tokens allowing a ranking function to give
more weight to hits of some tokens (e.g. those in document headings).

</p><p>Alternatively, the combination of a custom tokenizer and a custom auxiliary
function may be used to implement 
<a href="https://www.unicode.org/reports/tr10/tr10-41.html#Asymmetric_Search">
asymmetric search</a>. The tokenizer could (say) for each document token return
the case-normalized and unmarked version of the token, followed by an 0x00
byte, followed by the full text of the token from the document. When queried,
fts5 would provide results as if all characters in the query were
case-normalized and unmarked. The custom auxiliary function could then be used
in the WHERE clause of the query to filter out any rows that do not match based
on secondary or tertiary markings in the document or query terms.

</p><h2 tags="FTS5 auxiliary functions" id="_auxiliary_functions_"><span>5. </span> Auxiliary Functions </h2>

<p> Auxiliary functions are similar to <a href="https://www.sqlite.org/lang_corefunc.html">SQL scalar functions</a>,
except that they may only be used within full-text queries (those that use
the MATCH operator, or LIKE/GLOB with the trigram tokenizer) on an FTS5 table.
Their results are calculated based not only on the arguments passed to them,
but also on the current match and matched row. For example, an auxiliary
function may return a numeric value indicating the accuracy of the match (see
the <a href="https://www.sqlite.org/fts5.html#the_bm25_function">bm25()</a> function), or a fragment of text from the matched row
that contains one or more instances of the search terms (see the <a href="https://www.sqlite.org/fts5.html#the_snippet_function">snippet()</a> function).

</p><p>To invoke an auxiliary function, the name of the FTS5 table should be
specified as the first argument. Other arguments may follow the first,
depending on the specific auxiliary function being invoked. For example, to
invoke the "highlight" function:

</p><div><pre>SELECT highlight(email, 2, '&lt;b&gt;', '&lt;/b&gt;') FROM email WHERE email MATCH 'fts5'
</pre></div>

<p>The built-in auxiliary functions provided as part of FTS5 are described in
the following section. Applications may also implement
<a href="https://www.sqlite.org/fts5.html#custom_auxiliary_functions">custom auxiliary functions in C</a>.

</p><h2 id="built_in_auxiliary_functions"><span>5.1. </span>Built-in Auxiliary Functions</h2>

<p> FTS5 provides three built-in auxiliary functions:

</p><ul>
  <li> The <a href="https://www.sqlite.org/fts5.html#the_bm25_function">bm25() auxiliary function</a> returns a real value
       reflecting the accuracy of the current match. Better matches are
       assigned numerically lower values.

  </li><li> The <a href="https://www.sqlite.org/fts5.html#the_highlight_function">highlight() auxiliary function</a> returns a copy
       of the text from one of the columns of the current match with each
       instance of a queried term within the result surrounded by specified
       markup (for example "&lt;b&gt;" and "&lt;/b&gt;").

  </li><li> The <a href="https://www.sqlite.org/fts5.html#the_snippet_function">snippet() auxiliary function</a> selects a short
       fragment of text from one of the columns of the matched row and returns
       it with each instance of a queried term surrounded by markup in
       the same manner as the highlight() function. The fragment of text is
       selected so as to maximize the number of distinct queried terms it
       contains. Higher weight is given to snippets that occur at the start
       of a column value, or that immediately follow "." or ":" characters
       in the text.
</li></ul>

<h3 tags="FTS5 bm25" id="the_bm25_function"><span>5.1.1. </span>The bm25() function</h3>

<p> The built-in auxiliary function bm25() returns a real value indicating
how well the current row matches the full-text query. The better the match,
the numerically smaller the value returned. A query such as the following may
be used to return matches in order from best to worst match:

</p><div><pre>SELECT * FROM fts WHERE fts MATCH ? ORDER BY bm25(fts)
</pre></div>

<p> In order to calculate a documents score, the full-text query is separated
    into its component phrases. The bm25 score for document <i>D</i> and
    query <i>Q</i> is then calculated as follows:

</p><p> <img src="https://www.sqlite.org/images/fts5_formula1.png">

</p><p> In the above, <i>nPhrase</i> is the number of phrases in the query.
    <i>|D|</i> is the number of tokens in the current document, and
    <i>avgdl</i> is the average number of tokens in all documents within the
    FTS5 table.  <i>k<sub>1</sub></i> and <i>b</i> are both constants,
    hard-coded at 1.2 and 0.75 respectively.

</p><p> The "-1" term at the start of the formula is not found in most
implementations of the BM25 algorithm. Without it, a better match is assigned
a numerically higher BM25 score. Since the default sorting order is
"ascending", this means that appending "ORDER BY bm25(fts)" to a query would
cause results to be returned in order from worst to best. The "DESC" keyword
would be required in order to return the best matches first. In order to
avoid this pitfall, the FTS5 implementation of BM25 multiplies the result
by -1 before returning it, ensuring that better matches are assigned
numerically lower scores.

</p><p> <i>IDF(q<sub>i</sub>)</i> is the inverse-document-frequency of query
    phrase <i>i</i>. It is calculated as follows, where <i>N</i> is the total
    number of rows in the FTS5 table and <i>n(q<sub>i</sub>)</i> is the total
    number of rows that contain at least one instance of phrase <i>i</i>:

</p><p> <img src="https://www.sqlite.org/images/fts5_formula2.png">

</p><p> Finally, <i>f(q<sub>i</sub>,D)</i> is the phrase frequency of phrase
<i>i</i>. By default, this is simply the number of occurrences of the phrase
within the current row. However, by passing extra real value arguments to
the bm25() SQL function, each column of the table may be assigned a different
weight and the phrase frequency calculated as follows:

</p><p> <img src="https://www.sqlite.org/images/fts5_formula3.png">

</p><p> where <i>w<sub>c</sub></i> is the weight assigned to column <i>c</i> and
<i>n(q<sub>i</sub>,c)</i> is the number of occurrences of phrase <i>i</i> in
column <i>c</i> of the current row. The first argument passed to bm25()
following the table name is the weight assigned to the leftmost column of
the FTS5 table. The second is the weight assigned to the second leftmost
column, and so on. If there are not enough arguments for all table columns,
remaining columns are assigned a weight of 1.0. If there are too many
trailing arguments, the extras are ignored. For example:

</p><div><pre><i>-- Assuming the following schema:</i>
CREATE VIRTUAL TABLE email USING fts5(sender, title, body);

<i>-- Return results in bm25 order, with each phrase hit in the "sender"</i>
<i>-- column considered the equal of 10 hits in the "body" column, and</i>
<i>-- each hit in the "title" column considered as valuable as 5 hits in</i>
<i>-- the "body" column.</i>
SELECT * FROM email WHERE email MATCH ? ORDER BY bm25(email, 10.0, 5.0);
</pre></div>

<p>Refer to wikipedia for
<a href="https://en.wikipedia.org/wiki/Okapi_BM25">more information regarding
BM25</a> and its variants.

</p><h3 tags="FTS5 highlight" id="the_highlight_function"><span>5.1.2. </span>The highlight() function</h3>

<p> The highlight() function returns a copy of the text from a specified
column of the current row with extra markup text inserted to mark the start
and end of phrase matches.

</p><p>The highlight() must be invoked with exactly three arguments following
the table name. To be interpreted as follows:

</p><ol>
  <li> An integer indicating the index of the FTS table column to read the
       text from. Columns are numbered from left to right starting at zero.

  </li><li> The text to insert before each phrase match.

  </li><li> The text to insert after each phrase match.
</li></ol>

<p>For example:

</p><div><pre><i>-- Return a copy of the text from the leftmost column of the current</i>
<i>-- row, with phrase matches marked using html "b" tags.</i>
SELECT highlight(fts, 0, '&lt;b&gt;', '&lt;/b&gt;') FROM fts WHERE fts MATCH ?
</pre></div>

<p>In cases where two or more phrase instances overlap (share one or more
tokens in common), a single open and close marker is inserted for each set
of overlapping phrases. For example:

</p><div><pre><i>-- Assuming this:</i>
CREATE VIRTUAL TABLE ft USING fts5(a);
INSERT INTO ft VALUES('a b c x c d e');
INSERT INTO ft VALUES('a b c c d e');
INSERT INTO ft VALUES('a b c d e');

<i>-- The following SELECT statement returns these three rows:</i>
<i>--   '[a b c] x [c d e]'</i>
<i>--   '[a b c] [c d e]'</i>
<i>--   '[a b c d e]'</i>
SELECT highlight(ft, 0, '[', ']') FROM ft WHERE ft MATCH 'a+b+c AND c+d+e';
</pre></div>

<h3 tags="FTS5 snippet" id="the_snippet_function"><span>5.1.3. </span>The snippet() function</h3>

<p>The snippet() function is similar to highlight(), except that instead of
returning entire column values, it automatically selects and extracts a
short fragment of document text to process and return. The snippet() function
must be passed five parameters following the table name argument:

</p><ol>
  <li> An integer indicating the index of the FTS table column to select
       the returned text from. Columns are numbered from left to right
       starting at zero. A negative value indicates that the column should
       be automatically selected.

  </li><li> The text to insert before each phrase match within the returned text.

  </li><li> The text to insert after each phrase match within the returned text.

  </li><li> The text to add to the start or end of the selected text to indicate
       that the returned text does not occur at the start or end of its column,
       respectively.

  </li><li> The maximum number of tokens in the returned text. This must be greater
       than zero and equal to or less than 64.
</li></ol>

<h2 tags="auxiliary function mapping" id="sorting_by_auxiliary_function_results"><span>5.2. </span>Sorting by Auxiliary Function Results</h2>

<p> All FTS5 tables feature a special hidden column named "rank". If the
current query is not a full-text query (i.e. if it does not include a MATCH
operator), the value of the "rank" column is always NULL. Otherwise, in a
full-text query, column rank contains by default the same value as would be
returned by executing the bm25() auxiliary function with no trailing
arguments.

</p><p> The difference between reading from the rank column and using the bm25()
function directly within the query is only significant when sorting by the
returned value. In this case, using "rank" is faster than using bm25().

</p><div><pre><i>-- The following queries are logically equivalent. But the second may</i>
<i>-- be faster, particularly if the caller abandons the query before</i>
<i>-- all rows have been returned (or if the queries were modified to </i>
<i>-- include LIMIT clauses).</i>
SELECT * FROM fts WHERE fts MATCH ? ORDER BY bm25(fts);
SELECT * FROM fts WHERE fts MATCH ? ORDER BY rank;
</pre></div>

<p> Instead of using bm25() with no trailing arguments, the specific auxiliary
function mapped to the rank column may be configured either on a per-query
basis, or by setting a different persistent default for the FTS table.

</p><p> In order to change the mapping of the rank column for a single query,
a term similar to either of the following is added to the WHERE clause of a
query:

</p><div><pre>rank MATCH 'auxiliary-function-name(arg1, arg2, ...)'
rank = 'auxiliary-function-name(arg1, arg2, ...)'
</pre></div>

<p> The right-hand-side of the MATCH or = operator must be a constant
expression that evaluates to a string consisting of the auxiliary function to
invoke, followed by zero or more comma separated arguments within parenthesis.
Arguments must be SQL literals. For example:

</p><div><pre><i>-- The following queries are logically equivalent. But the second may</i>
<i>-- be faster. See above. </i>
SELECT * FROM fts WHERE fts MATCH ? ORDER BY bm25(fts, 10.0, 5.0);
SELECT * FROM fts WHERE fts MATCH ? AND rank MATCH 'bm25(10.0, 5.0)' ORDER BY rank;
</pre></div>

<p> The table-valued function syntax may also be used to specify an alternative
ranking function. In this case the text describing the ranking function should
be specified as the second table-valued function argument. The following three
queries are equivalent:

</p><div><pre>SELECT * FROM fts WHERE fts MATCH ? AND rank MATCH 'bm25(10.0, 5.0)' ORDER BY rank;
SELECT * FROM fts WHERE fts = ? AND rank = 'bm25(10.0, 5.0)' ORDER BY rank;
SELECT * FROM fts WHERE fts(?, 'bm25(10.0, 5.0)') ORDER BY rank;
</pre></div>

<p> The default mapping of the rank column for a table may be modified
using the <a href="https://www.sqlite.org/fts5.html#the_rank_configuration_option">FTS5 rank configuration option</a>.

</p><h2 id="special_insert_commands"><span>6. </span>Special INSERT Commands</h2>

<h2 tags="FTS5 automerge option" id="the_automerge_configuration_option"><span>6.1. </span>The 'automerge' Configuration Option</h2>

<p>
  Instead of using a single data structure on disk to store the full-text
  index, FTS5 uses a series of b-trees. Each time a new transaction is
  committed, a new b-tree containing the contents of the committed transaction
  is written into the database file. When the full-text index is queried, each
  b-tree must be queried individually and the results merged before being
  returned to the user.

</p><p>
  In order to prevent the number of b-trees in the database from becoming too
  large (slowing down queries), smaller b-trees are periodically merged into
  single larger b-trees containing the same data. By default, this happens
  automatically within INSERT, UPDATE or DELETE statements that modify the
  full-text index. The 'automerge' parameter determines how many smaller
  b-trees are merged together at a time. Setting it to a small value can
  speed up queries (as they have to query and merge the results from fewer
  b-trees), but can also slow down writing to the database (as each INSERT,
  UPDATE or DELETE statement has to do more work as part of the automatic
  merging process).

</p><p>
  Each of the b-trees that make up the full-text index is assigned to a "level"
  based on its size. Level-0 b-trees are the smallest, as they contain the
  contents of a single transaction. Higher level b-trees are the result of
  merging two or more level-0 b-trees together and so they are larger. FTS5
  begins to merge b-trees together once there exist <i>M</i> or more b-trees
  with the same level, where <i>M</i> is the value of the 'automerge'
  parameter.

</p><p>
  The maximum allowed value for the 'automerge' parameter is 16. The default
  value is 4. Setting the 'automerge' parameter to 0 disables the automatic
  incremental merging of b-trees altogether.

</p><div><pre>INSERT INTO ft(ft, rank) VALUES('automerge', 8);
</pre></div>

<h2 id="the_crisismerge_configuration_option"><span>6.2. </span>The 'crisismerge' Configuration Option</h2>

<p>The 'crisismerge' option is similar to 'automerge', in that it determines
how and how often the component b-trees that make up the full-text index are
merged together. Once there exist <i>C</i> or more b-trees on a single level
within the full-text index, where <i>C</i> is the value of the 'crisismerge'
option, all b-trees on the level are immediately merged into a single b-tree.

</p><p>The difference between this option and the 'automerge' option is that when
the 'automerge' limit is reached FTS5 only begins to merge the b-trees
together. Most of the work is performed as part of subsequent INSERT,
UPDATE or DELETE operations. Whereas when the 'crisismerge' limit is reached,
the offending b-trees are all merged immediately. This means that an INSERT,
UPDATE or DELETE that triggers a crisis-merge may take a long time to
complete.

</p><p>The default 'crisismerge' value is 16. There is no maximum limit. Attempting
to set the 'crisismerge' parameter to a value of 0 or 1 is equivalent to
setting it to the default value (16). It is an error to attempt to set the
'crisismerge' option to a negative value.

</p><div><pre>INSERT INTO ft(ft, rank) VALUES('crisismerge', 16);
</pre></div>

<h2 tags="FTS5 delete command" id="the_delete_command"><span>6.3. </span>The 'delete' Command</h2>

<p> This command is only available with <a href="https://www.sqlite.org/fts5.html#external_content_tables">external content</a> and <a href="https://www.sqlite.org/fts5.html#contentless_tables">contentless</a> tables. It
is used to delete the index entries associated with a single row from the
full-text index. This command and the <a href="https://www.sqlite.org/fts5.html#the_delete_all_command">delete-all</a>
command are the only ways to remove entries from the full-text index of a
contentless table.

</p><p> In order to use this command to delete a row, the text value 'delete'
must be inserted into the special column with the same name as the table.
The rowid of the row to delete is inserted into the rowid column. The
values inserted into the other columns must match the values currently
stored in the table. For example:

</p><div><pre><i>-- Insert a row with rowid=14 into the fts5 table.</i>
INSERT INTO ft(rowid, a, b, c) VALUES(14, $a, $b, $c);

<i>-- Remove the same row from the fts5 table.</i>
INSERT INTO ft(ft, rowid, a, b, c) VALUES('delete', 14, $a, $b, $c);
</pre></div>

<p> If the values "inserted" into the text columns as part of a 'delete'
command are not the same as those currently stored within the table, the
results may be unpredictable.

</p><p> The reason for this is easy to understand: When a document is inserted
into the FTS5 table, an entry is added to the full-text index to record the
position of each token within the new document. When a document is removed,
the original data is required in order to determine the set of entries that
need to be removed from the full-text index. So if the data supplied to FTS5
when a row is deleted using this command is different from that used to
determine the set of token instances when it was inserted, some full-text
index entries may not be correctly deleted, or FTS5 may try to remove index
entries that do not exist. This can leave the full-text index in an
unpredictable state, making future query results unreliable.

</p><h2 tags="FTS5 delete-all command" id="the_delete_all_command"><span>6.4. </span>The 'delete-all' Command</h2>

<p> This command is only available with <a href="https://www.sqlite.org/fts5.html#external_content_tables">external content</a> and <a href="https://www.sqlite.org/fts5.html#contentless_tables">contentless</a> tables (including
<a href="https://www.sqlite.org/fts5.html#contentless_delete_tables">contentless-delete</a> tables. It deletes all
entries from the full-text index.

</p><div><pre>INSERT INTO ft(ft) VALUES('delete-all');
</pre></div>

<h2 tags="deletemerge" id="the_deletemerge_configuration_option"><span>6.5. </span>The 'deletemerge' Configuration Option</h2>

<p> The 'deletemerge' option is only used by 
<a href="https://www.sqlite.org/fts5.html#contentless_delete_tables">contentless-delete</a> tables. 

</p><p> When a row is deleted from a contentless-delete table, the entries
associated with its tokens are not immediately removed from the FTS index.
Instead, a "tombstone" marker containing the rowid of the deleted row is
attached to the b-tree that contains the row's FTS index entries. When the
b-tree is queried, any query result rows for which there exist tombstone
markers are omitted from the results. When the b-tree is merged with other
b-trees, both the deleted rows and their tombstone markers are discarded.

</p><p> This option specifies a minimum percentage of rows in a b-tree that must
have tombstone markers before the b-tree is made eligible for merging -
either by <a href="#the_automerge_configuration_option">automatic</a> merges or
explicit user <a href="https://www.sqlite.org/the_merge_command">'merge'</a> commands - even if it
does not meet the usual criteria as determined by the 'automerge' and 
<a href="#the_usermerge_configuration_option">'usermerge'</a> options.

</p><p> For example, to specify that FTS5 should consider merging a component
b-tree after 15% of its rows have associated tombstone markers:

</p><div><pre>INSERT INTO ft(ft, rank) VALUES('deletemerge', 15);
</pre></div>

<p> The default value of this option is 10. Attempting to set it to less than 
zero restores the default value. Setting this option to 0 or to greater than
100 ensures that b-trees are never made eligible for merging due to tombstone
markers.

</p><h2 id="the_integrity_check_command"><span>6.6. </span>The 'integrity-check' Command</h2>

<p> This command is used to verify that the full-text index is internally
consistent, and, optionally, that it is consistent with any
<a href="https://www.sqlite.org/fts5.html#external_content_tables">external content</a> table.

</p><p>The integrity-check command is invoked by inserting the text value
'integrity-check' into the special column with the same name as the FTS5
table. If a value is supplied for the "rank" column, it must be either
0 or 1. For example:

</p><div><pre>INSERT INTO ft(ft) VALUES('integrity-check');
INSERT INTO ft(ft, rank) VALUES('integrity-check', 0);
INSERT INTO ft(ft, rank) VALUES('integrity-check', 1);
</pre></div>

<p>The three forms above are equivalent for all FTS tables that are
not external content tables. They check that the index data structures are
not corrupt, and, if the FTS table is not contentless, that the contents of
the index match the contents of the table itself.

</p><p>For an external content table, the contents of the index are only
compared to the contents of the external content table if the value
specified for the rank column is 1.

</p><p>In all cases, if any discrepancies are found, the command fails
with an <a href="https://www.sqlite.org/rescode.html#corrupt_vtab">SQLITE_CORRUPT_VTAB</a> error.

</p><h2 tags="FTS5 merge command" id="the_merge_command"><span>6.7. </span>The 'merge' Command</h2>

<div><pre>INSERT INTO ft(ft, rank) VALUES('merge', 500);
</pre></div>

<p> This command merges b-tree structures together until roughly N pages
of merged data have been written to the database, where N is the absolute
value of the parameter specified as part of the 'merge' command. The size of
each page is as configured by the <a href="https://www.sqlite.org/fts5.html#the_pgsz_configuration_option">FTS5 pgsz option</a>.

</p><p> If the parameter is a positive value, B-tree structures are only eligible
for merging if one of the following is true:

</p><ul>
  <li> There are U or more such b-trees on a
       single level (see the documentation for the <a href="https://www.sqlite.org/fts5.html#the_automerge_configuration_option">FTS5 automerge option</a>
       for an explanation of b-tree levels), where U is the value assigned
       to the <a href="https://www.sqlite.org/fts5.html#the_usermerge_configuration_option">FTS5 usermerge option</a> option.
  </li><li> A merge has already been started (perhaps by a 'merge' command that
       specified a negative parameter).
</li></ul>

<p> It is possible to tell whether or not the 'merge' command found any
b-trees to merge together by checking the value returned by the
<a href="https://www.sqlite.org/c3ref/total_changes.html">sqlite3_total_changes()</a> API before and after the command is executed. If
the difference between the two values is 2 or greater, then work was performed.
If the difference is less than 2, then the 'merge' command was a no-op. In this
case there is no reason to execute the same 'merge' command again, at least
until after the FTS table is next updated.

</p><p> If the parameter is negative, and there are B-tree structures on more than
one level within the FTS index, all B-tree structures are assigned to the same
level before the merge operation is commenced. Additionally, if the parameter
is negative, the value of the usermerge configuration option is not
respected - as few as two b-trees from the same level may be merged together.

</p><p> The above means that executing the 'merge' command with a negative
parameter until the before and after difference in the return value of
<a href="https://www.sqlite.org/c3ref/total_changes.html">sqlite3_total_changes()</a> is less than two optimizes the FTS index in the
same way as the <a href="https://www.sqlite.org/fts5.html#the_optimize_command">FTS5 optimize command</a>. However, if a new b-tree is added
to the FTS index while this process is ongoing, FTS5 will move the new
b-tree to the same level as the existing b-trees and restart the merge. To
avoid this, only the first call to 'merge' should specify a negative parameter.
Each subsequent call to 'merge' should specify a positive value so that the
merge started by the first call is run to completion even if new b-trees are
added to the FTS index.

</p><h2 tags="FTS5 optimize command" id="the_optimize_command"><span>6.8. </span>The 'optimize' Command</h2>

<p>This command merges all individual b-trees that currently make up the
full-text index into a single large b-tree structure. This ensures that the
full-text index consumes the minimum space within the database and is in the
fastest form to query.

</p><p>Refer to the documentation for the <a href="https://www.sqlite.org/fts5.html#the_automerge_configuration_option">FTS5 automerge option</a> for more details
regarding the relationship between the full-text index and its component
b-trees.

</p><div><pre>INSERT INTO ft(ft) VALUES('optimize');
</pre></div>

<p>Because it reorganizes the entire FTS index, the optimize command can
take a long time to run. The <a href="https://www.sqlite.org/fts5.html#the_merge_command">FTS5 merge command</a> can be used to divide
the work of optimizing the FTS index into multiple steps. To do this:

</p><ul>
  <li> Invoke the 'merge' command once with the parameter set to -N, then
  </li><li> Invoke the 'merge' command zero or more times with the parameter set to N.
</li></ul>

<p>where N is the number of pages of data to merge within each invocation of
the merge command. The application should stop invoking merge when the
difference in the value returned by the sqlite3_total_changes() function before
and after the merge command drops to below two. The merge commands may be
issued as part of the same or separate transactions, and by the same or
different database clients. Refer to the documentation for the
<a href="https://www.sqlite.org/fts5.html#the_merge_command">merge command</a> for further details.

</p><h2 tags="FTS5 pgsz option" id="the_pgsz_configuration_option"><span>6.9. </span>The 'pgsz' Configuration Option</h2>

<p> This command is used to set the persistent "pgsz" option.

</p><p> The full-text index maintained by FTS5 is stored as a series of fixed-size
blobs in a database table. It is not strictly necessary for all blobs that make
up a full-text index to be the same size. The pgsz option determines the size
of all blobs created by subsequent index writers. The default value is 1000.

</p><div><pre>INSERT INTO ft(ft, rank) VALUES('pgsz', 4072);
</pre></div>

<h2 tags="FTS5 rank configuration option" id="the_rank_configuration_option"><span>6.10. </span>The 'rank' Configuration Option</h2>

<p> This command is used to set the persistent "rank" option.

</p><p> The rank option is used to change the default auxiliary function mapping
for the rank column. The option should be set to a text value in the same
format as described for <a href="https://www.sqlite.org/fts5.html#sorting_by_auxiliary_function_results">"rank MATCH ?"</a> terms
above. For example:

</p><div><pre>INSERT INTO ft(ft, rank) VALUES('rank', 'bm25(10.0, 5.0)');
</pre></div>

<h2 tags="FTS5 rebuild command" id="the_rebuild_command"><span>6.11. </span>The 'rebuild' Command</h2>

<p> This command first deletes the entire full-text index, then rebuilds it
based on the contents of the table or <a href="https://www.sqlite.org/fts5.html#external_content_tables">content
table</a>.  It is not available with <a href="https://www.sqlite.org/fts5.html#contentless_tables">contentless
tables</a>.

</p><div><pre>INSERT INTO ft(ft) VALUES('rebuild');
</pre></div>

<h2 tags="FTS5 secure-delete command" id="the_secure_delete_configuration_option"><span>6.12. </span>The 'secure-delete' Configuration Option</h2>

<p> This command is used to set the persistent boolean "secure-delete" option.
For example:

</p><div><pre>INSERT INTO ft(ft, rank) VALUES('secure-delete', 1);
</pre></div>

<p> Normally, when an entry in an fts5 table is updated or deleted, instead
of removing entries from the full-text index, delete-keys are added to the <a href="#the_automerge_configuration_option">new b-tree</a> created by the
transaction. This is efficient, but it means that the old full-text index
entries remain in the database file until they are eventually removed
by merge operations on the full-text index. Anyone with access to the
database can use these entries to trivially reconstruct the contents of
deleted FTS5 table rows. However, if the 'secure-delete' option is set
to 1, then full-text entries are actually removed from the database when
existing FTS5 table rows are updated or deleted. This is slower, but
it prevents old full-text entries from being used to reconstruct deleted
table rows.

</p><p> This option ensures that old full-text entries are not available to
attackers with SQL access to the database. To also ensure that they may
not be recovered by attackers with access to the SQLite database file 
itself, the application must also enable the SQLite core secure-delete
option with a command like <a href="https://www.sqlite.org/pragma.html#pragma_secure_delete">
"PRAGMA secure_delete = 1"</a>.

</p><p> <b>Warning:</b> Once one or more table rows have been updated or
deleted with this option set, the FTS5 table may no longer be read or
written by any version of FTS5 earlier than 3.42.0 (the first version
in which this option was available). Attempting to do so results in
an error, with an error message like "invalid fts5 file format (found 5,
expected 4) - run 'rebuild'". The FTS5 file format may be reverted, so
that it may be read by earlier versions of FTS5, by running the 
<a href="#the_rebuild_command">'rebuild' command</a> on the table using 
version 3.42.0 or later.

</p><p>The default value of the secure-delete option is 0.

</p><h2 tags="FTS5 usermerge option" id="the_usermerge_configuration_option"><span>6.13. </span>The 'usermerge' Configuration Option</h2>

<p> This command is used to set the persistent "usermerge" option.

</p><p> The usermerge option is similar to the automerge and crisismerge options.
It is the minimum number of b-tree segments that will be merged together by
a 'merge' command with a positive parameter. For example:

</p><div><pre>INSERT INTO ft(ft, rank) VALUES('usermerge', 4);
</pre></div>

<p> The default value of the usermerge option is 4. The minimum allowed value
is 2, and the maximum 16.

</p><h2 tags="Extending FTS5" id="extending_fts5"><span>7. </span>Extending FTS5</h2>

<p>FTS5 features APIs allowing it to be extended by:

</p><ul>
  <li> Adding new auxiliary functions implemented in C, and
  </li><li> Adding new tokenizers, also implemented in C.
</li></ul>

<p> The built-in tokenizers and auxiliary functions described in this
document are all implemented using the publicly available API described
below.

</p><p> Before a new auxiliary function or tokenizer implementation may be
registered with FTS5, an application must obtain a pointer to the "fts5_api"
structure. There is one fts5_api structure for each database connection with
which the FTS5 extension is registered. To obtain the pointer, the application
invokes the SQL user-defined function fts5() with a single argument.  That
argument must be set to a pointer to a pointer to an fts5_api object
using the <a href="https://www.sqlite.org/c3ref/bind_blob.html">sqlite3_bind_pointer()</a> interface.
The following example code demonstrates the technique:

</p><div><pre><i>/*
** Return a pointer to the fts5_api pointer for database connection db.
** If an error occurs, return NULL and leave an error in the database
** handle (accessible using sqlite3_errcode()/errmsg()).
*/</i>
fts5_api *fts5_api_from_db(sqlite3 *db){
  fts5_api *pRet = 0;
  sqlite3_stmt *pStmt = 0;

  if( SQLITE_OK==sqlite3_prepare(db, "SELECT fts5(?1)", -1, &amp;pStmt, 0) ){
    sqlite3_bind_pointer(pStmt, 1, (void*)&amp;pRet, "fts5_api_ptr", NULL);
    sqlite3_step(pStmt);
  }
  sqlite3_finalize(pStmt);
  return pRet;
}
</pre></div>

<p><b>Backwards Compatibility Warning:</b>
Prior to SQLite version 3.20.0 (2017-08-01), the fts5() worked slightly
differently.  Older applications that extend FTS5 must be revised to use
the new technique shown above.

</p><p> The fts5_api structure is defined as follows. It exposes three methods,
one each for registering new auxiliary functions and tokenizers, and one for
retrieving existing tokenizer. The latter is intended to facilitate the
implementation of "tokenizer wrappers" similar to the built-in
porter tokenizer.

</p><div><pre>typedef struct fts5_api fts5_api;
struct fts5_api {
  int iVersion;                   <i>/* Currently always set to 2 */</i>

  <i>/* Create a new tokenizer */</i>
  int (*xCreateTokenizer)(
    fts5_api *pApi,
    const char *zName,
    void *pUserData,
    fts5_tokenizer *pTokenizer,
    void (*xDestroy)(void*)
  );

  <i>/* Find an existing tokenizer */</i>
  int (*xFindTokenizer)(
    fts5_api *pApi,
    const char *zName,
    void **ppUserData,
    fts5_tokenizer *pTokenizer
  );

  <i>/* Create a new auxiliary function */</i>
  int (*xCreateFunction)(
    fts5_api *pApi,
    const char *zName,
    void *pUserData,
    fts5_extension_function xFunction,
    void (*xDestroy)(void*)
  );
};
</pre></div>

<p> To invoke a method of the fts5_api object, the fts5_api pointer itself
should be passed as the methods first argument followed by the other, method
specific, arguments. For example:

</p><div><pre>rc = pFts5Api-&gt;xCreateTokenizer(pFts5Api, ... other args ...);
</pre></div>

<p> The fts5_api structure methods are described individually in the following
sections.

</p><h2 tags="custom tokenizers" id="custom_tokenizers"><span>7.1. </span>Custom Tokenizers</h2>

<p> To create a custom tokenizer, an application must implement three
functions: a tokenizer constructor (xCreate), a destructor (xDelete) and a
function to do the actual tokenization (xTokenize). The type of each
function is as for the member variables of the fts5_tokenizer struct:

</p><div><pre>typedef struct Fts5Tokenizer Fts5Tokenizer;
typedef struct fts5_tokenizer fts5_tokenizer;
struct fts5_tokenizer {
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);
  void (*xDelete)(Fts5Tokenizer*);
  int (*xTokenize)(Fts5Tokenizer*, 
      void *pCtx,
      int flags,            <i>/* Mask of FTS5_TOKENIZE_* flags */</i>
      const char *pText, int nText, 
      int (*xToken)(
        void *pCtx,         <i>/* Copy of 2nd argument to xTokenize() */</i>
        int tflags,         <i>/* Mask of FTS5_TOKEN_* flags */</i>
        const char *pToken, <i>/* Pointer to buffer containing token */</i>
        int nToken,         <i>/* Size of token in bytes */</i>
        int iStart,         <i>/* Byte offset of token within input text */</i>
        int iEnd            <i>/* Byte offset of end of token within input text */</i>
      )
  );
};

<i>/* Flags that may be passed as the third argument to xTokenize() */</i>
#define FTS5_TOKENIZE_QUERY     0x0001
#define FTS5_TOKENIZE_PREFIX    0x0002
#define FTS5_TOKENIZE_DOCUMENT  0x0004
#define FTS5_TOKENIZE_AUX       0x0008

<i>/* Flags that may be passed by the tokenizer implementation back to FTS5
** as the third argument to the supplied xToken callback. */</i>
#define FTS5_TOKEN_COLOCATED    0x0001      <i>/* Same position as prev. token */</i>
</pre></div>

<p> The implementation is registered with the FTS5 module by calling the
xCreateTokenizer() method of the fts5_api object. If there is already a
tokenizer with the same name, it is replaced.  If a non-NULL xDestroy parameter
is passed to xCreateTokenizer(), it is invoked with a copy of the pUserData
pointer passed as the only argument when the database handle is closed or when
the tokenizer is replaced.

</p><p> If successful, xCreateTokenizer() returns SQLITE_OK. Otherwise, it
returns an SQLite error code. In this case the xDestroy function is <b>not</b>
invoked.

</p><p> When an FTS5 table uses the custom tokenizer, the FTS5 core calls xCreate()
once to create a tokenizer, then xTokenize() zero or more times to tokenize
strings, then xDelete() to free any resources allocated by xCreate(). More
specifically:

</p><dl>
<dt><b>xCreate:</b></dt><dd><p>
   This function is used to allocate and initialize a tokenizer instance.
   A tokenizer instance is required to actually tokenize text.
</p><p>
   The first argument passed to this function is a copy of the (void*)
   pointer provided by the application when the fts5_tokenizer object
   was registered with FTS5 (the third argument to xCreateTokenizer()). 
   The second and third arguments are an array of nul-terminated strings
   containing the tokenizer arguments, if any, specified following the
   tokenizer name as part of the CREATE VIRTUAL TABLE statement used
   to create the FTS5 table.
</p><p>
   The final argument is an output variable. If successful, (*ppOut) 
   should be set to point to the new tokenizer handle and SQLITE_OK
   returned. If an error occurs, some value other than SQLITE_OK should
   be returned. In this case, fts5 assumes that the final value of *ppOut 
   is undefined.
</p></dd><dt><b> xDelete:</b></dt><dd><p>
   This function is invoked to delete a tokenizer handle previously
   allocated using xCreate(). Fts5 guarantees that this function will
   be invoked exactly once for each successful call to xCreate().
</p></dd><dt><b> xTokenize:</b></dt><dd><p>
   This function is expected to tokenize the nText byte string indicated 
   by argument pText. pText may or may not be nul-terminated. The first
   argument passed to this function is a pointer to an Fts5Tokenizer object
   returned by an earlier call to xCreate().
</p><p>
   The second argument indicates the reason that FTS5 is requesting
   tokenization of the supplied text. This is always one of the following
   four values:
</p><ul><li> <b>FTS5_TOKENIZE_DOCUMENT</b> - A document is being inserted into
            or removed from the FTS table. The tokenizer is being invoked to
            determine the set of tokens to add to (or delete from) the
            FTS index.
</li><li> <b>FTS5_TOKENIZE_QUERY</b> - A MATCH query is being executed 
            against the FTS index. The tokenizer is being called to tokenize 
            a bareword or quoted string specified as part of the query.
</li><li> <b>(FTS5_TOKENIZE_QUERY | FTS5_TOKENIZE_PREFIX)</b> - Same as
            FTS5_TOKENIZE_QUERY, except that the bareword or quoted string is
            followed by a "*" character, indicating that the last token
            returned by the tokenizer will be treated as a token prefix.
</li><li> <b>FTS5_TOKENIZE_AUX</b> - The tokenizer is being invoked to 
            satisfy an fts5_api.xTokenize() request made by an auxiliary
            function. Or an fts5_api.xColumnSize() request made by the same
            on a columnsize=0 database.  
   </li></ul>
<p>
   For each token in the input string, the supplied callback xToken() must
   be invoked. The first argument to it should be a copy of the pointer
   passed as the second argument to xTokenize(). The third and fourth
   arguments are a pointer to a buffer containing the token text, and the
   size of the token in bytes. The 4th and 5th arguments are the byte offsets
   of the first byte of and first byte immediately following the text from
   which the token is derived within the input.
</p><p>
   The second argument passed to the xToken() callback ("tflags") should
   normally be set to 0. The exception is if the tokenizer supports 
   synonyms. In this case see the discussion below for details.
</p><p>
   FTS5 assumes the xToken() callback is invoked for each token in the 
   order that they occur within the input text.
</p><p>
   If an xToken() callback returns any value other than SQLITE_OK, then
   the tokenization should be abandoned and the xTokenize() method should
   immediately return a copy of the xToken() return value. Or, if the
   input buffer is exhausted, xTokenize() should return SQLITE_OK. Finally,
   if an error occurs with the xTokenize() implementation itself, it
   may abandon the tokenization and return any error code other than
   SQLITE_OK or SQLITE_DONE.
</p></dd></dl><h3 id="synonym_support"><span>7.1.1. </span>Synonym Support</h3>
<p>
   Custom tokenizers may also support synonyms. Consider a case in which a
   user wishes to query for a phrase such as "first place". Using the 
   built-in tokenizers, the FTS5 query 'first + place' will match instances
   of "first place" within the document set, but not alternative forms
   such as "1st place". In some applications, it would be better to match
   all instances of "first place" or "1st place" regardless of which form
   the user specified in the MATCH query text.
</p><p>
   There are several ways to approach this in FTS5:
</p><ol><li> By mapping all synonyms to a single token. In this case, using
            the above example, this means that the tokenizer returns the
            same token for inputs "first" and "1st". Say that token is in
            fact "first", so that when the user inserts the document "I won
            1st place" entries are added to the index for tokens "i", "won",
            "first" and "place". If the user then queries for '1st + place',
            the tokenizer substitutes "first" for "1st" and the query works
            as expected.
</li><li> By querying the index for all synonyms of each query term
            separately. In this case, when tokenizing query text, the
            tokenizer may provide multiple synonyms for a single term 
            within the document. FTS5 then queries the index for each 
            synonym individually. For example, faced with the query:

<p>
            the tokenizer offers both "1st" and "first" as synonyms for the
            first token in the MATCH query and FTS5 effectively runs a query 
            similar to:
</p><div><pre>... MATCH '(first OR 1st) place'
</pre></div>
<p>
            except that, for the purposes of auxiliary functions, the query
            still appears to contain just two phrases - "(first OR 1st)" 
            being treated as a single phrase.
</p></li><li> By adding multiple synonyms for a single term to the FTS index.
            Using this method, when tokenizing document text, the tokenizer
            provides multiple synonyms for each token. So that when a 
            document such as "I won first place" is tokenized, entries are
            added to the FTS index for "i", "won", "first", "1st" and
            "place".
<p>
            This way, even if the tokenizer does not provide synonyms
            when tokenizing query text (it should not - to do so would be
            inefficient), it doesn't matter if the user queries for 
            'first + place' or '1st + place', as there are entries in the
            FTS index corresponding to both forms of the first token.
   </p></li></ol>
<p>
   Whether it is parsing document or query text, any call to xToken that
   specifies a <i>tflags</i> argument with the FTS5_TOKEN_COLOCATED bit
   is considered to supply a synonym for the previous token. For example,
   when parsing the document "I won first place", a tokenizer that supports
   synonyms would call xToken() 5 times, as follows:
</p><div><pre>xToken(pCtx, 0, "i",                      1,  0,  1);
xToken(pCtx, 0, "won",                    3,  2,  5);
xToken(pCtx, 0, "first",                  5,  6, 11);
xToken(pCtx, FTS5_TOKEN_COLOCATED, "1st", 3,  6, 11);
xToken(pCtx, 0, "place",                  5, 12, 17);
</pre></div>
<p>
   It is an error to specify the FTS5_TOKEN_COLOCATED flag the first time
   xToken() is called. Multiple synonyms may be specified for a single token
   by making multiple calls to xToken(FTS5_TOKEN_COLOCATED) in sequence. 
   There is no limit to the number of synonyms that may be provided for a
   single token.
</p><p>
   In many cases, method (1) above is the best approach. It does not add 
   extra data to the FTS index or require FTS5 to query for multiple terms,
   so it is efficient in terms of disk space and query speed. However, it
   does not support prefix queries very well. If, as suggested above, the
   token "first" is substituted for "1st" by the tokenizer, then the query:
</p>
<p>
   will not match documents that contain the token "1st" (as the tokenizer
   will probably not map "1s" to any prefix of "first").
</p><p>
   For full prefix support, method (3) may be preferred. In this case, 
   because the index contains entries for both "first" and "1st", prefix
   queries such as 'fi*' or '1s*' will match correctly. However, because
   extra entries are added to the FTS index, this method uses more space
   within the database.
</p><p>
   Method (2) offers a midpoint between (1) and (3). Using this method,
   a query such as '1s*' will match documents that contain the literal 
   token "1st", but not "first" (assuming the tokenizer is not able to
   provide synonyms for prefixes). However, a non-prefix query like '1st'
   will match against "1st" and "first". This method does not require
   extra disk space, as no extra entries are added to the FTS index. 
   On the other hand, it may require more CPU cycles to run MATCH queries,
   as separate queries of the FTS index are required for each synonym.
</p><p>
   When using methods (2) or (3), it is important that the tokenizer only
   provide synonyms when tokenizing document text (method (3)) or query
   text (method (2)), not both. Doing so will not cause any errors, but is
   inefficient.



</p><h2 tags="FTS5 custom auxiliary functions" id="custom_auxiliary_functions"><span>7.2. </span>Custom Auxiliary Functions</h2>

<p> Implementing a custom auxiliary function is similar to implementing a
<a href="https://www.sqlite.org/appfunc.html">scalar SQL function</a>. The implementation
should be a C function of type fts5_extension_function, defined as follows:

</p><div><pre>typedef struct Fts5ExtensionApi Fts5ExtensionApi;
typedef struct Fts5Context Fts5Context;
typedef struct Fts5PhraseIter Fts5PhraseIter;

typedef void (*fts5_extension_function)(
  const Fts5ExtensionApi *pApi,   <i>/* API offered by current FTS version */</i>
  Fts5Context *pFts,              <i>/* First arg to pass to pApi functions */</i>
  sqlite3_context *pCtx,          <i>/* Context for returning result/error */</i>
  int nVal,                       <i>/* Number of values in apVal[] array */</i>
  sqlite3_value **apVal           <i>/* Array of trailing arguments */</i>
);
</pre></div>

<p> The implementation is registered with the FTS5 module by calling the
xCreateFunction() method of the fts5_api object. If there is already an
auxiliary function with the same name, it is replaced by the new function.
If a non-NULL xDestroy parameter is passed to xCreateFunction(), it is invoked
with a copy of the pUserData pointer passed as the only argument when the
database handle is closed or when the registered auxiliary function is
replaced.

</p><p> If successful, xCreateFunction() returns SQLITE_OK. Otherwise, it
returns an SQLite error code. In this case the xDestroy function is <b>not</b>
invoked.

</p><p> The final three arguments passed to the auxiliary function callback 
(pCtx, nVal and apVal above) are similar to the three arguments passed to the
implementation of a scalar SQL function. The apVal[] array contains all
SQL arguments except the first passed to the auxiliary function. The
implementation should return a result or error via the content handle pCtx.

</p><p> The first argument passed to an auxiliary function callback is a pointer
to a structure (pApi above) containing methods that may be invoked
in order to obtain information regarding the current query or row. The second
argument is an opaque handle (pFts above) that should be passed as the
first argument to any such method invocation. For example, the following
auxiliary function returns the total number of tokens in all columns of the
current row:

</p><div><pre><i>/*
** Implementation of an auxiliary function that returns the number
** of tokens in the current row (including all columns).
*/</i>
static void column_size_imp(
  const Fts5ExtensionApi *pApi,
  Fts5Context *pFts,
  sqlite3_context *pCtx,
  int nVal,
  sqlite3_value **apVal
){
  int rc;
  int nToken;
  rc = pApi-&gt;xColumnSize(pFts, -1, &amp;nToken);
  if( rc==SQLITE_OK ){
    sqlite3_result_int(pCtx, nToken);
  }else{
    sqlite3_result_error_code(pCtx, rc);
  }
}
</pre></div>

<p>The following section describes the API offered to auxiliary function
implementations in detail. Further examples may be found in the "fts5_aux.c"
file of the source code.

</p><h3 tags="custom auxiliary overview" id="custom_auxiliary_functions_api_overview"><span>7.2.1. </span>Custom Auxiliary Functions API Overview</h3>

<p>This section provides an overview of the capabilities of the auxiliary
function API. It does not describe every function. Refer to the <a href="#custom_auxiliary_functions_api_reference">reference text</a> below for a
complete description.

</p><p>When invoked, an auxiliary function implementation has access to APIs that
allow it to query FTS5 for various information. Some of these APIs return
information relating to the current row of the FTS5 table being visited,
some relating to the entire set of rows that will be visited by the FTS5
query, and some relating to the FTS5 table. Given an FTS5 table populated as
follows:

</p><div><pre>CREATE VIRTUAL TABLE ft USING fts5(a, b);
INSERT INTO ft(rowid, a, b) VALUES
        (1, 'ab cd', 'cd de one'),
        (2, 'de fg', 'fg gh'),
        (3, 'gh ij', 'ij ab three four');
</pre></div>

<p>and the query:

</p><div><pre>SELECT my_aux_function(ft) FROM ft('ab')
</pre></div>

<p>then the custom auxiliary function will be invoked for rows 1 and 3 (all
rows that contain the token "ab" and therefore match the query). 

</p><p><b>Number of rows/columns in table: xRowCount, xColumnCount

</b></p><p>The system may be queried for the total number of rows in the FTS5 table
using the <a href="#xRowCount">xRowCount</a> API. This provides the total number
of rows in the table, not the number that match the current query.

</p><p>Table columns are numbered from left to right starting from 0. The
"rowid" column does not count - only user declared columns - so in the example
above column "a" is column 0 and column "b" is column 1. From within an
auxiliary function implementation, the <a href="#xColumnCount">xColumnCount</a>
API may be used to determine how many columns the table being queried has. If
the xColumnCount() API is invoked from within the implementation of the
auxiliary function my_aux_function in the example above, it returns 2.

</p><p><b>Data From Current Row: xColumnText, xRowid

</b></p><p>The <a href="#xRowid">xRowid</a> API may be used to find the rowid value
for the current row. The <a href="#xColumnText">xColumnText</a> may be used
to obtain the text stored in a specified column of the current row.

</p><p><b>Token Counts: xColumnSize, xColumnTotalSize

</b></p><p>FTS5 divides documents inserted into an fts table into tokens. These are
usually just words, perhaps folded to either upper or lower case and with any
punctuation removed. For example, the default 
<a href="#unicode61_tokenizer">unicode61 tokenizer</a> tokenizes the text "The
tokenizer is case-insensitive" to a list of 5 tokens - "the", "tokenizer", is",
"case" and "insensitive". Exactly how tokens are extracted from text is 
determined by the <a href="#tokenizers">tokenizer</a>.

</p><p>The auxiliary functions API provides functions to query for both the number
of tokens in a specified column of the current row (the 
<a href="#xColumnSize">xColumnSize</a> API), or for the number of tokens in a 
specified column of all rows of the table (the <a href="#xColumnTotalSize">xColumnTotalSize</a> API). For the example at the
top of this section, when visiting row 1, xColumnSize returns 2 for column 0
and 3 for column 1. xColumnTotalSize returns 6 for column 0 and 9 for column 1
regardless of the current row.

</p><p><b>The Current Full-Text Query: xPhraseCount, xPhraseSize, xQueryToken

</b></p><p>An FTS5 query contains one or more <a href="#fts5_phrases">phrases</a>. The 
<a href="#xPhraseCount">xPhraseCount</a>, <a href="#xPhraseSize">xPhraseSize</a>
and <a href="#xQueryToken">xQueryToken</a> APIs allow an auxiliary function
implementation to query the system for details of the current query. The
xPhraseCount API returns the number of phrases in the current query. For
example, if an FTS5 table is queried as follows:

</p><div><pre>SELECT my_aux_function(ft) FROM ft('ab AND "cd ef gh" OR ij + kl')
</pre></div>

<p>and the xPhraseCount() API invoked from within the implementation of the
auxiliary function, it returns 3 (the three phrases being "ab", "ce ef gh" and
"ij kl"). 

</p><p>Phrases are numbered in order of appearance within a query starting from 0.
The xPhraseSize() API may be used to query for the number of tokens in a
specified phrase of the query. In the example above, phrase 0 contains 1 token,
phrase 1 contains 3 tokens, and phrase 2 contains 2.

</p><p>The xQueryToken API may be used to access the text of a specified token
within a specified phrase of the query. Tokens are numbered within their
phrases from left to right starting from 0. For example, if the xQueryToken
API is used to request token 1 of phrase 2 in the example above, it returns
the text "kl". Token 0 of phrase 0 is "ab".

</p><p><b>Phrase Hits in the Current Row: xPhraseFirst, xPhraseNext

</b></p><p>These two API functions may be used to iterate through the matches for
a specified phrase of the query within the current row. Phrase matches are
identified by the column and token offset within the current row. For
example, say the following example table:

</p><div><pre>CREATE VIRTUAL TABLE ft2 USING fts5(x, y);
INSERT INTO ft2(rowid, x, y) VALUES
        (1, 'xxx one two xxx five xxx six', 'seven four'),
        (2, 'five four four xxx six', 'three four five six four five six');
</pre></div>

<p>is queried with:

</p><div><pre>SELECT my_aux_function(ft2) FROM ft2(
    '("one two" OR "three") AND y:four NEAR(five six, 2)'
);
</pre></div>

<p>The query above contains 5 phrases - "one two", "three", "four", 
"five" and "six". It matches all rows of the table, so the auxiliary 
function is invoked for each row.

</p><p>In row 1, for phrase 0, "one two", there is exactly one match to iterate
through -  at column 0 token offset 1. The column number is 0 because the 
match appears in the left most column. The token offset is 1 because there 
is exactly one token ("xxx") before the phrase match in the column value.
For phrase 1, "three", there are no matches. Phrase 2, "four", has one
match, at column 1, token offset 0. Phrase 3, "five", has one match at
column 0, token offset 4, and phrase 4, "six", has one match at column 0
token offset 6.

</p><p>The set of matches for each phrase in each row of the example is presented
in the table below. Each match is notated as (column-number, token-offset):

</p><table striped="1">
  <tbody><tr><th>Row</th><th>Phrase 0</th><th>Phrase 1</th><th>Phrase 2</th><th>Phrase 3</th><th>Phrase 4
  </th></tr><tr><td>1</td><td>(0, 1)    </td><td></td><td>(1, 1)</td><td>(0, 4)</td><td>(0, 6)
  </td></tr><tr><td>2</td><td></td><td>(1,0)</td><td>(1, 1), (1,4)</td><td>(1, 2), (1, 5)</td><td>(1, 3), (1, 6)
</td></tr></tbody></table>

<p>The second row is slightly more complicated. There were no occurrences of
phrase 0. Phrase 1 ("three") appears once, at column 1 token offset 0. Although
there are instances of phrase 2 ("four") in column 0, none of them are reported
by the API, as phrase 4 has a <a href="#fts5_column_filters">column filter</a> -
"y:". Matches that are filtered out by column filters do not count. Similarly,
although phrases 3 and 4 do occur in column "x" of row 2, they are filtered
out by the <a href="#fts5_near_queries">NEAR filter</a>. Matches that are
filtered out by NEAR filters do not count either.

</p><p><b>Phrase Hits in the Current Row (2): xInstCount, xInst

</b></p><p>The <a href="#xInstCount">xInstCount</a> and <a href="#xInst">xInst</a> APIs
provide access to the same information as the xPhraseFirst and xPhraseNext
described above. The difference is that instead of iterating through the
matches for a single, specified phrase, the xInstCount/xInst APIs collate
all matches into a single flat array, sorted in order of occurrence within
the current row. Elements of this array may then be accessed randomly.

</p><p>Each array element consists of three values:

</p><ul>
  <li> A phrase number,
  </li><li> A column number, and
  </li><li> A token offset
</li></ul>

<p>Using the same example data and query as for xPhraseFirst/xPhraseNext
above, the array accessible via xInstCount/xInst consists of the following
entries for each row:

</p><table striped="1">
  <tbody><tr><th>Row</th><th>xInstCount/xInst array
  </th></tr><tr><td>1</td><td>(0, 0, 1), (3, 0, 4), (4, 0, 6), (2, 1, 1)
  </td></tr><tr><td>2</td><td>(1, 1, 0), (2, 1, 1), (3, 1, 2), (4, 1, 3), (2, 1, 4), (3, 1, 5), (4, 1, 6)
</td></tr></tbody></table>

<p>Each entry of the array is called a phrase match. Phrase matches are
numbered in order, starting from 0. So, in the example above, in row 2, phrase
match 3 is (4, 1, 3) - phrase 4 of the query matches at column 1, token offset
3.

</p><h3 tags="custom auxiliary functions" id="custom_auxiliary_functions_api_reference"><span>7.2.2. </span>Custom Auxiliary Functions API Reference</h3>

<div><pre>struct Fts5ExtensionApi {
  int iVersion;                   <i>/* Currently always set to 3 */</i>

  void *(*<a href="#xUserData">xUserData</a>)(Fts5Context*);

  int (*<a href="#xColumnCount">xColumnCount</a>)(Fts5Context*);
  int (*<a href="#xRowCount">xRowCount</a>)(Fts5Context*, sqlite3_int64 *pnRow);
  int (*<a href="#xColumnTotalSize">xColumnTotalSize</a>)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);

  int (*<a href="#xTokenize">xTokenize</a>)(Fts5Context*, 
    const char *pText, int nText, <i>/* Text to tokenize */</i>
    void *pCtx,                   <i>/* Context passed to xToken() */</i>
    int (*xToken)(void*, int, const char*, int, int, int)       <i>/* Callback */</i>
  );

  int (*<a href="#xPhraseCount">xPhraseCount</a>)(Fts5Context*);
  int (*<a href="#xPhraseSize">xPhraseSize</a>)(Fts5Context*, int iPhrase);

  int (*<a href="#xInstCount">xInstCount</a>)(Fts5Context*, int *pnInst);
  int (*<a href="#xInst">xInst</a>)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);

  sqlite3_int64 (*<a href="#xRowid">xRowid</a>)(Fts5Context*);
  int (*<a href="#xColumnText">xColumnText</a>)(Fts5Context*, int iCol, const char **pz, int *pn);
  int (*<a href="#xColumnSize">xColumnSize</a>)(Fts5Context*, int iCol, int *pnToken);

  int (*<a href="#xQueryPhrase">xQueryPhrase</a>)(Fts5Context*, int iPhrase, void *pUserData,
    int(*)(const Fts5ExtensionApi*,Fts5Context*,void*)
  );
  int (*<a href="#xSetAuxdata">xSetAuxdata</a>)(Fts5Context*, void *pAux, void(*xDelete)(void*));
  void *(*<a href="#xGetAuxdata">xGetAuxdata</a>)(Fts5Context*, int bClear);

  int (*<a href="#xPhraseFirst">xPhraseFirst</a>)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);
  void (*<a href="#xPhraseNext">xPhraseNext</a>)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);

  int (*<a href="#xPhraseFirstColumn">xPhraseFirstColumn</a>)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);
  void (*<a href="#xPhraseNextColumn">xPhraseNextColumn</a>)(Fts5Context*, Fts5PhraseIter*, int *piCol);

  <i>/* Below this point are iVersion&gt;=3 only */</i>
  int (*<a href="#xQueryToken">xQueryToken</a>)(Fts5Context*, 
      int iPhrase, int iToken, 
      const char **ppToken, int *pnToken
  );
  int (*<a href="#xInstToken">xInstToken</a>)(Fts5Context*, int iIdx, int iToken, const char**, int*);
};
</pre></div>

<dl>
<dt id="xUserData">
<b>void *(*xUserData)(Fts5Context*)</b></dt><dd>
<p>
Return a copy of the pUserData pointer passed to the xCreateFunction()
   API when the extension function was registered.
</p>
</dd>
<dt id="xColumnTotalSize">
<b>int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken)</b></dt><dd>
<p>
If parameter iCol is less than zero, set output variable *pnToken
   to the total number of tokens in the FTS5 table. Or, if iCol is
   non-negative but less than the number of columns in the table, return
   the total number of tokens in column iCol, considering all rows in 
   the FTS5 table.
</p>

<p>
   If parameter iCol is greater than or equal to the number of columns
   in the table, SQLITE_RANGE is returned. Or, if an error occurs (e.g.
   an OOM condition or IO error), an appropriate SQLite error code is 
   returned.
</p>
</dd>
<dt id="xColumnCount">
<b>int (*xColumnCount)(Fts5Context*)</b></dt><dd>
<p>
Return the number of columns in the table.
</p>
</dd>
<dt id="xColumnSize">
<b>int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken)</b></dt><dd>
<p>
If parameter iCol is less than zero, set output variable *pnToken
   to the total number of tokens in the current row. Or, if iCol is
   non-negative but less than the number of columns in the table, set
   *pnToken to the number of tokens in column iCol of the current row.
</p>

<p>
   If parameter iCol is greater than or equal to the number of columns
   in the table, SQLITE_RANGE is returned. Or, if an error occurs (e.g.
   an OOM condition or IO error), an appropriate SQLite error code is 
   returned.
</p>

<p>
   This function may be quite inefficient if used with an FTS5 table
   created with the "columnsize=0" option.
</p>
</dd>
<dt id="xColumnText">
<b>int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn)</b></dt><dd>
<p>
If parameter iCol is less than zero, or greater than or equal to the
   number of columns in the table, SQLITE_RANGE is returned. 
</p>

<p>
   Otherwise, this function attempts to retrieve the text of column iCol of
   the current document. If successful, (*pz) is set to point to a buffer
   containing the text in utf-8 encoding, (*pn) is set to the size in bytes
   (not characters) of the buffer and SQLITE_OK is returned. Otherwise,
   if an error occurs, an SQLite error code is returned and the final values
   of (*pz) and (*pn) are undefined.
</p>
</dd>
<dt id="xPhraseCount">
<b>int (*xPhraseCount)(Fts5Context*)</b></dt><dd>
<p>
Returns the number of phrases in the current query expression.
</p>
</dd>
<dt id="xPhraseSize">
<b>int (*xPhraseSize)(Fts5Context*, int iPhrase)</b></dt><dd>
<p>
If parameter iCol is less than zero, or greater than or equal to the
   number of phrases in the current query, as returned by xPhraseCount, 
   0 is returned. Otherwise, this function returns the number of tokens in
   phrase iPhrase of the query. Phrases are numbered starting from zero.
</p>
</dd>
<dt id="xInstCount">
<b>int (*xInstCount)(Fts5Context*, int *pnInst)</b></dt><dd>
<p>
Set *pnInst to the total number of occurrences of all phrases within
   the query within the current row. Return SQLITE_OK if successful, or
   an error code (i.e. SQLITE_NOMEM) if an error occurs.
</p>

<p>
   This API can be quite slow if used with an FTS5 table created with the
   "detail=none" or "detail=column" option. If the FTS5 table is created 
   with either "detail=none" or "detail=column" and "content=" option 
   (i.e. if it is a contentless table), then this API always returns 0.
</p>
</dd>
<dt id="xInst">
<b>int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff)</b></dt><dd>
<p>
Query for the details of phrase match iIdx within the current row.
   Phrase matches are numbered starting from zero, so the iIdx argument
   should be greater than or equal to zero and smaller than the value
   output by xInstCount(). If iIdx is less than zero or greater than
   or equal to the value returned by xInstCount(), SQLITE_RANGE is returned.
</p>

<p>
   Otherwise, output parameter *piPhrase is set to the phrase number, *piCol
   to the column in which it occurs and *piOff the token offset of the
   first token of the phrase. SQLITE_OK is returned if successful, or an
   error code (i.e. SQLITE_NOMEM) if an error occurs.
</p>

<p>
   This API can be quite slow if used with an FTS5 table created with the
   "detail=none" or "detail=column" option.
</p>
</dd>
<dt id="xRowid">
<b>sqlite3_int64 (*xRowid)(Fts5Context*)</b></dt><dd>
<p>
Returns the rowid of the current row.
</p>
</dd>
<dt id="xTokenize">
<b>int (*xTokenize)(Fts5Context*, 
    const char *pText, int nText, 
    void *pCtx,                   
    int (*xToken)(void*, int, const char*, int, int, int)       
)</b></dt><dd>
<p>
Tokenize text using the tokenizer belonging to the FTS5 table.
</p>
</dd>
<dt id="xQueryPhrase">
<b>int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,
    int(*)(const Fts5ExtensionApi*,Fts5Context*,void*)
)</b></dt><dd>
<p>
This API function is used to query the FTS table for phrase iPhrase
   of the current query. Specifically, a query equivalent to:
</p>

<div><pre>... FROM ftstable WHERE ftstable MATCH $p ORDER BY rowid
</pre></div>

<p>
   with $p set to a phrase equivalent to the phrase iPhrase of the
   current query is executed. Any column filter that applies to
   phrase iPhrase of the current query is included in $p. For each 
   row visited, the callback function passed as the fourth argument 
   is invoked. The context and API objects passed to the callback 
   function may be used to access the properties of each matched row.
   Invoking Api.xUserData() returns a copy of the pointer passed as 
   the third argument to pUserData.
</p>

<p>
   If parameter iPhrase is less than zero, or greater than or equal to
   the number of phrases in the query, as returned by xPhraseCount(),
   this function returns SQLITE_RANGE.
</p>

<p>
   If the callback function returns any value other than SQLITE_OK, the
   query is abandoned and the xQueryPhrase function returns immediately.
   If the returned value is SQLITE_DONE, xQueryPhrase returns SQLITE_OK.
   Otherwise, the error code is propagated upwards.
</p>

<p>
   If the query runs to completion without incident, SQLITE_OK is returned.
   Or, if some error occurs before the query completes or is aborted by
   the callback, an SQLite error code is returned.
</p>
</dd>
<dt id="xSetAuxdata">
<b>int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*))</b></dt><dd>
<p>
Save the pointer passed as the second argument as the extension function's 
   "auxiliary data". The pointer may then be retrieved by the current or any
   future invocation of the same fts5 extension function made as part of
   the same MATCH query using the xGetAuxdata() API.
</p>

<p>
   Each extension function is allocated a single auxiliary data slot for
   each FTS query (MATCH expression). If the extension function is invoked 
   more than once for a single FTS query, then all invocations share a 
   single auxiliary data context.
</p>

<p>
   If there is already an auxiliary data pointer when this function is
   invoked, then it is replaced by the new pointer. If an xDelete callback
   was specified along with the original pointer, it is invoked at this
   point.
</p>

<p>
   The xDelete callback, if one is specified, is also invoked on the
   auxiliary data pointer after the FTS5 query has finished.
</p>

<p>
   If an error (e.g. an OOM condition) occurs within this function,
   the auxiliary data is set to NULL and an error code returned. If the
   xDelete parameter was not NULL, it is invoked on the auxiliary data
   pointer before returning.
</p>
</dd>
<dt id="xGetAuxdata">
<b>void *(*xGetAuxdata)(Fts5Context*, int bClear)</b></dt><dd>
<p>
Returns the current auxiliary data pointer for the fts5 extension 
   function. See the xSetAuxdata() method for details.
</p>

<p>
   If the bClear argument is non-zero, then the auxiliary data is cleared
   (set to NULL) before this function returns. In this case the xDelete,
   if any, is not invoked.
</p>
</dd>
<dt id="xRowCount">
<b>int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow)</b></dt><dd>
<p>
This function is used to retrieve the total number of rows in the table.
   In other words, the same value that would be returned by:
</p>

<div><pre>SELECT count(*) FROM ftstable;
</pre></div>
</dd>
<dt id="xPhraseFirst">
<b>int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*)</b></dt><dd>
<p>
This function is used, along with type Fts5PhraseIter and the xPhraseNext
   method, to iterate through all instances of a single query phrase within
   the current row. This is the same information as is accessible via the
   xInstCount/xInst APIs. While the xInstCount/xInst APIs are more convenient
   to use, this API may be faster under some circumstances. To iterate 
   through instances of phrase iPhrase, use the following code:
</p>

<div><pre>Fts5PhraseIter iter;
int iCol, iOff;
for(pApi-&gt;xPhraseFirst(pFts, iPhrase, &amp;iter, &amp;iCol, &amp;iOff);
    iCol&gt;=0;
    pApi-&gt;xPhraseNext(pFts, &amp;iter, &amp;iCol, &amp;iOff)
){
  // An instance of phrase iPhrase at offset iOff of column iCol
}
</pre></div>

<p>
   The Fts5PhraseIter structure is defined above. Applications should not
   modify this structure directly - it should only be used as shown above
   with the xPhraseFirst() and xPhraseNext() API methods (and by
   xPhraseFirstColumn() and xPhraseNextColumn() as illustrated below).
</p>

<p>
   This API can be quite slow if used with an FTS5 table created with the
   "detail=none" or "detail=column" option. If the FTS5 table is created 
   with either "detail=none" or "detail=column" and "content=" option 
   (i.e. if it is a contentless table), then this API always iterates
   through an empty set (all calls to xPhraseFirst() set iCol to -1).
</p>
</dd>
<dt id="xPhraseNext">
<b>void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff)</b></dt><dd>
<p>
See xPhraseFirst above.
</p>
</dd>
<dt id="xPhraseFirstColumn">
<b>int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*)</b></dt><dd>
<p>
This function and xPhraseNextColumn() are similar to the xPhraseFirst()
   and xPhraseNext() APIs described above. The difference is that instead
   of iterating through all instances of a phrase in the current row, these
   APIs are used to iterate through the set of columns in the current row
   that contain one or more instances of a specified phrase. For example:
</p>

<div><pre>Fts5PhraseIter iter;
int iCol;
for(pApi-&gt;xPhraseFirstColumn(pFts, iPhrase, &amp;iter, &amp;iCol);
    iCol&gt;=0;
    pApi-&gt;xPhraseNextColumn(pFts, &amp;iter, &amp;iCol)
){
  // Column iCol contains at least one instance of phrase iPhrase
}
</pre></div>

<p>
   This API can be quite slow if used with an FTS5 table created with the
   "detail=none" option. If the FTS5 table is created with either 
   "detail=none" "content=" option (i.e. if it is a contentless table), 
   then this API always iterates through an empty set (all calls to 
   xPhraseFirstColumn() set iCol to -1).
</p>

<p>
   The information accessed using this API and its companion
   xPhraseFirstColumn() may also be obtained using xPhraseFirst/xPhraseNext
   (or xInst/xInstCount). The chief advantage of this API is that it is
   significantly more efficient than those alternatives when used with
   "detail=column" tables.
</p>
</dd>
<dt id="xPhraseNextColumn">
<b>void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol)</b></dt><dd>
<p>
See xPhraseFirstColumn above.
</p>
</dd>
<dt id="xQueryToken">
<b>int (*xQueryToken)(Fts5Context*, 
      int iPhrase, int iToken, 
      const char **ppToken, int *pnToken
)</b></dt><dd>
<p>
This is used to access token iToken of phrase iPhrase of the current
   query. Before returning, output parameter *ppToken is set to point
   to a buffer containing the requested token, and *pnToken to the
   size of this buffer in bytes.
</p>

<p>
   If iPhrase or iToken are less than zero, or if iPhrase is greater than
   or equal to the number of phrases in the query as reported by 
   xPhraseCount(), or if iToken is equal to or greater than the number of
   tokens in the phrase, SQLITE_RANGE is returned and *ppToken and *pnToken
     are both zeroed.
</p>

<p>
   The output text is not a copy of the query text that specified the
   token. It is the output of the tokenizer module. For tokendata=1
   tables, this includes any embedded 0x00 and trailing data.
</p>
</dd>
<dt id="xInstToken">
<b>int (*xInstToken)(Fts5Context*, int iIdx, int iToken, const char**, int*)</b></dt><dd>
<p>
This is used to access token iToken of phrase hit iIdx within the
   current row. If iIdx is less than zero or greater than or equal to the
   value returned by xInstCount(), SQLITE_RANGE is returned.  Otherwise,
   output variable (*ppToken) is set to point to a buffer containing the
   matching document token, and (*pnToken) to the size of that buffer in 
   bytes. This API is not available if the specified token matches a 
   prefix query term. In that case both output variables are always set 
   to 0.
</p>

<p>
   The output text is not a copy of the document text that was tokenized.
   It is the output of the tokenizer module. For tokendata=1 tables, this 
   includes any embedded 0x00 and trailing data.
</p>

<p>
   This API can be quite slow if used with an FTS5 table created with the
   "detail=none" or "detail=column" option.
</p>
</dd>
</dl>


<h2 tags="fts5vocab" id="the_fts5vocab_virtual_table_module"><span>8. </span>The fts5vocab Virtual Table Module</h2>

<p> The fts5vocab virtual table module allows users to extract information from
an FTS5 full-text index directly. The fts5vocab module is a part of FTS5 - it
is available whenever FTS5 is.

</p><p> Each fts5vocab table is associated with a single FTS5 table. An fts5vocab
table is usually created by specifying two arguments in place of column names
in the CREATE VIRTUAL TABLE statement - the name of the associated FTS5 table
and the type of fts5vocab table. Currently there are three types of fts5vocab
table; "row", "col" and "instance". Unless the fts5vocab table is created
within the "temp" database, it must be part of the same database as the
associated FTS5 table.

</p><div><pre><i>-- Create an fts5vocab "row" table to query the full-text index belonging
-- to FTS5 table "ft1".</i>
CREATE VIRTUAL TABLE ft1_v USING fts5vocab('ft1', 'row');

<i>-- Create an fts5vocab "col" table to query the full-text index belonging
-- to FTS5 table "ft2".</i>
CREATE VIRTUAL TABLE ft2_v USING fts5vocab(ft2, col);

<i>-- Create an fts5vocab "instance" table to query the full-text index
-- belonging to FTS5 table "ft3".</i>
CREATE VIRTUAL TABLE ft3_v USING fts5vocab(ft3, instance);
</pre></div>

<p> If an fts5vocab table is created in the temp database, it may be associated
with an FTS5 table in any attached database. In order to attach the fts5vocab
table to an FTS5 table located in a database other than "temp", the name of the
database is inserted before the FTS5 table name in the CREATE VIRTUAL TABLE
arguments. For example:

</p><div><pre><i>-- Create an fts5vocab "row" table to query the full-text index belonging
-- to FTS5 table "ft1" in database "main".</i>
CREATE VIRTUAL TABLE temp.ft1_v USING fts5vocab(main, 'ft1', 'row');

<i>-- Create an fts5vocab "col" table to query the full-text index belonging
-- to FTS5 table "ft2" in attached database "aux".</i>
CREATE VIRTUAL TABLE temp.ft2_v USING fts5vocab('aux', ft2, col);

<i>-- Create an fts5vocab "instance" table to query the full-text index
-- belonging to FTS5 table "ft3" in attached database "other".</i>
CREATE VIRTUAL TABLE temp.ft2_v USING fts5vocab('aux', ft3, 'instance');
</pre></div>

<p> Specifying three arguments when creating an fts5vocab table in any database
other than "temp" results in an error.

</p><p> An fts5vocab table of type "row" contains one row for each distinct term
in the associated FTS5 table. The table columns are as follows:

</p><table striped="1">
  <tbody><tr><th>Column</th><th>Contents
  </th></tr><tr><td>term</td><td> The term, as stored in the FTS5 index.
  </td></tr><tr><td>doc</td><td>  The number of rows that contain at least one instance of the term.
  </td></tr><tr><td>cnt</td><td>  The total number of instances of the term in the entire FTS5 table.
</td></tr></tbody></table>

<p> An fts5vocab table of type "col" contains one row for each distinct term/column
combination in the associated FTS5 table. Table columns are as follows:

</p><table striped="1">
  <tbody><tr><th>Column</th><th>Contents
  </th></tr><tr><td>term</td><td> The term, as stored in the FTS5 index.
  </td></tr><tr><td>col</td><td>  The name of the FTS5 table column that contains the term.
  </td></tr><tr><td>doc</td><td>  The number of rows in the FTS5 table for which column $col
                   contains at least one instance of the term.
  </td></tr><tr><td>cnt</td><td>  The total number of instances of the term that appear in
                   column $col of the FTS5 table (considering all rows).
</td></tr></tbody></table>

<p> An fts5vocab table of type "instance" contains one row for each term
instance stored in the associated FTS index. Assuming the FTS5 table is
created with the 'detail' option set to 'full', table columns are as follows:

</p><table striped="1">
  <tbody><tr><th>Column</th><th>Contents
  </th></tr><tr><td>term</td><td>   The term, as stored in the FTS5 index.
  </td></tr><tr><td>doc</td><td>    The rowid of the document that contains the term instance.
  </td></tr><tr><td>col</td><td>    The name of the column that contains the term instance.
  </td></tr><tr><td>offset</td><td> The index of the term instance within its column. Terms
                     are numbered in order of occurrence starting from 0.
</td></tr></tbody></table>

<p> If the FTS5 table is created with the 'detail' option set to 'col', then
the <i>offset</i> column of an instance virtual table always contains NULL.
In this case there is one row in the table for each unique term/doc/col
combination. Or, if the FTS5 table is created with 'detail' set to 'none',
then both <i>offset</i> and <i>col</i> always contain NULL values. For
detail=none FTS5 tables, there is one row in the fts5vocab table for each
unique term/doc combination.

</p><p>Example:

</p><div><pre><i>-- Assuming a database created using:</i>
CREATE VIRTUAL TABLE ft1 USING fts5(c1, c2);
INSERT INTO ft1 VALUES('apple banana cherry', 'banana banana cherry');
INSERT INTO ft1 VALUES('cherry cherry cherry', 'date date date');

<i>-- Then querying the following fts5vocab table (type "col") returns:
--
--    apple  | c1 | 1 | 1
--    banana | c1 | 1 | 1
--    banana | c2 | 1 | 2
--    cherry | c1 | 2 | 4
--    cherry | c2 | 1 | 1
--    date   | c3 | 1 | 3
--</i>
CREATE VIRTUAL TABLE ft1_v_col USING fts5vocab(ft1, col);

<i>-- Querying an fts5vocab table of type "row" returns:
--
--    apple  | 1 | 1
--    banana | 1 | 3
--    cherry | 2 | 5
--    date   | 1 | 3
--</i>
CREATE VIRTUAL TABLE ft1_v_row USING fts5vocab(ft1, row);

<i>-- And, for type "instance"
INSERT INTO ft1 VALUES('apple banana cherry', 'banana banana cherry');
INSERT INTO ft1 VALUES('cherry cherry cherry', 'date date date');
--
--    apple  | 1 | c1 | 0
--    banana | 1 | c1 | 1
--    banana | 1 | c2 | 0
--    banana | 1 | c2 | 1
--    cherry | 1 | c1 | 2
--    cherry | 1 | c2 | 2
--    cherry | 2 | c1 | 0
--    cherry | 2 | c1 | 1
--    cherry | 2 | c1 | 2
--    date   | 2 | c2 | 0
--    date   | 2 | c2 | 1
--    date   | 2 | c2 | 2
--</i>
CREATE VIRTUAL TABLE ft1_v_instance USING fts5vocab(ft1, instance);
</pre></div>

<h2 id="fts5_data_structures"><span>9. </span>FTS5 Data Structures</h2>

<p>This section describes at a high-level the way the FTS module stores its
index and content in the database. It is not necessary to read or understand
the material in this section in order to use FTS in an application. However, it
may be useful to application developers attempting to analyze and understand
FTS performance characteristics, or to developers contemplating enhancements to
the existing FTS feature set.

</p><p>
When an FTS5 virtual table is created in a database, between 3 and 5 real
tables are created in the database. These are known as "<a href="https://www.sqlite.org/vtab.html#xshadowname">shadow tables</a>", and
are used by the virtual table module to store persistent data. They should not
be accessed directly by the user. Many other virtual table modules, including
<a href="https://www.sqlite.org/fts3.html">FTS3</a> and <a href="https://www.sqlite.org/rtree.html">rtree</a>, also create and use shadow tables.

</p><p>FTS5 creates the following shadow tables. In each case the actual table name
is based on the name of the FTS5 virtual table (in the following, replace
% with the name of the virtual table to find the actual shadow table name).

</p><div><pre><i>-- This table contains most of the full-text index data. </i>
CREATE TABLE %_data(id INTEGER PRIMARY KEY, block BLOB);

<i>-- This table contains the remainder of the full-text index data. </i>
<i>-- It is almost always much smaller than the %_data table. </i>
CREATE TABLE %_idx(segid, term, pgno, PRIMARY KEY(segid, term)) WITHOUT ROWID;

<i>-- Contains the values of persistent configuration parameters.</i>
CREATE TABLE %_config(k PRIMARY KEY, v) WITHOUT ROWID;

<i>-- Contains the size of each column of each row in the virtual table</i>
<i>-- in tokens. This shadow table is not present if the "columnsize"</i>
<i>-- option is set to 0.</i>
CREATE TABLE %_docsize(id INTEGER PRIMARY KEY, sz BLOB);

<i>-- Contains the actual data inserted into the FTS5 table. There</i>
<i>-- is one "cN" column for each indexed column in the FTS5 table.</i>
<i>-- This shadow table is not present for contentless or external </i>
<i>-- content FTS5 tables. </i>
CREATE TABLE %_content(id INTEGER PRIMARY KEY, c0, c1...);
</pre></div>

<p>The following sections describe in more detail how these five tables are
used to store FTS5 data.

</p><h2 id="varint_format"><span>9.1. </span>Varint Format</h2>

<p>The sections below refer to 64-bit signed integers stored in "varint" form.
FTS5 uses the same varint format as used in various places by the SQLite core.

</p><p>A varint is between 1 and 9 bytes in length. The varint consists of either
zero or more bytes which have the high-order bit set followed by a single byte
with the high-order bit clear, or nine bytes, whichever is shorter. The lower
seven bits of each of the first eight bytes and all 8 bits of the ninth byte
are used to reconstruct the 64-bit twos-complement integer. Varints are
big-endian: bits taken from the earlier byte of the varint are more significant
than bits taken from the later bytes.

</p><h2 id="the_fts_index_idx_and_data_tables_"><span>9.2. </span>The FTS Index (%_idx and %_data tables)</h2>

<p>The FTS index is an ordered key-value store where the keys are document
terms or term prefixes and the associated values are "doclists". A doclist is a
packed array of varints that encodes the position of each instance of the term
within the FTS5 table. The position of a single term instance is defined as the
combination of:

</p><ul>
  <li> The rowid of the FTS5 table row it appears in,
  </li><li> The index of the column the term instance appears in (columns are
       numbered from left to right starting from zero), and
  </li><li> The offset of the term within the column value (i.e. the number of
       tokens that appear within the column value before this one).
</li></ul>

<p>The FTS index contains up to (nPrefix+1) entries for each token in the
data set, where nPrefix is the number of defined <a href="#prefix_indexes">
prefix indexes</a>.

</p><p>Keys associated with the main FTS index (the one that is not a prefix
index) are prefixed with the character "0". Keys for the first prefix
index are prefixed with "1". Keys for the second prefix index are
prefixed with "2", and so on. For example, if the token "document" is
inserted into an FTS5 table with <a href="#prefix_indexes">prefix indexes</a>
specified by prefix="2 4", then the keys added to the FTS index would be
"0document", "1do" and "2docu".

</p><p>The FTS index entries are not stored in a single tree or hash table
structure. Instead, they are stored in a series of immutable b-tree like
structures referred to as "segment b-trees". Each time a write to the FTS5
table is committed, one or more (but usually just one) new segment b-trees
are added containing both the new entries and tombstones for any deleted
entries. When the FTS index is queried, the reader queries each segment
b-tree in turn and merges the results, giving priority to newer data.

</p><p>Each segment b-tree is assigned a numerical level. When a new segment
b-tree is written to the database as part of committing a transaction,
it is assigned to level 0. Segment b-trees belonging to a single level are
periodically merged together to create a single, larger segment b-tree
that is assigned to the next level (i.e. level 0 segment b-trees are
merged to become a single level 1 segment b-tree). Thus the numerically
larger levels contain older data in (usually) larger segment b-trees.
Refer to the
<a href="#the_automerge_configuration_option">'automerge'</a>,
<a href="#the_crisismerge_configuration_option">'crisismerge'</a> and
<a href="#the_usermerge_configuration_option">'usermerge'</a> options, along
with the
<a href="#the_merge_command">'merge'</a> and
<a href="#the_optimize_command">'optimize'</a> commands for details on how to
control the merging.

</p><p>In cases where the doclist associated with a term or term prefix is very
large, there may be an associated <a href="#doclist_index_format">doclist
index</a>. A doclist index is similar to the set of internal nodes of a b-tree.
It allows a large doclist to be efficiently queried for rowids or ranges of
rowids. For example, when processing a query like:

</p><div><pre>SELECT ... FROM fts_table('term') WHERE rowid BETWEEN ? AND ?
</pre></div>

<p>FTS5 uses the segment b-tree index to locate the doclist for term "term",
then uses its doclist index (assuming it is present) to efficiently identify
the subset of matches with rowids in the required range.

</p><h3 id="data_structure"><span>9.2.1. </span>The %_data Table Rowid Space</h3>

<div><pre>CREATE TABLE %_data(
  id INTEGER PRIMARY KEY,
  block BLOB
);
</pre></div>

<p>The %_data table is used to store three types of records:

</p><ul>
  <li> The special <a href="#structure_record_format">structure record</a>,
       stored with id=10.
  </li><li> The special <a href="#averages_record_format">averages record</a>,
       stored with id=1.
  </li><li> A record to store each <a href="#segment_b_tree_format">segment b-tree</a>
       leaf and <a href="#doclist_index_format">doclist index</a> leaf and
       internal node. See below for how id values are calculated for these
       records.
</li></ul>

<p>Each segment b-tree in the system is assigned a unique 16-bit segment id.
Segment ids may only be reused after the original owner segment b-tree is
completely merged into a higher level segment b-tree. Within a segment b-tree,
each leaf page is assigned a unique page number - 1 for the first leaf page, 2
for the second, and so on.

</p><p>Each doclist index leaf page is also assigned a page number. The first
(leftmost) leaf page in a doclist index is assigned the same page number as
the segment b-tree leaf page on which its term appears (because doclist indexes
are only created for terms with very long doclists, at most one term per
segment b-tree leaf has an associated doclist index). Call this page number P.
If the doclist is so large that it requires a second leaf, the second leaf is
assigned page number P+1. The third leaf P+2. Each tier of a doclist index
b-tree (leaves, parents of leaves, grandparents etc.) is assigned page numbers
in this fashion, starting with page number P.

</p><p>The "id" value used in the %_data table to store any given segment b-tree
leaf or doclist index leaf or node is composed as follows:

</p><table striped="1">
<tbody><tr><th>Rowid&nbsp;Bits </th><th>Contents
</th></tr><tr><td>38..43 </td><td> (16 bit) Segment b-tree id value.
</td></tr><tr><td>37 </td><td> (1 bit) Doclist index flag. Set for doclist index pages, clear
                for segment b-tree leaves.
</td></tr><tr><td>32..36 </td><td> (5 bits) Height in tree. This is set to 0 for segment b-tree
                    and doclist index leaves, to 1 for the parents of doclist
                    index leaves, 2 for the grandparents, etc.
</td></tr><tr><td>0..31 </td><td> (32 bits) Page number
</td></tr></tbody></table>

<h3 id="structure_record_format"><span>9.2.2. </span>Structure Record Format</h3>

<p>The structure record identifies the set of segment b-trees that make up the
current FTS index, along with details of any ongoing incremental merge
operations. It is stored in the %_data table with id=10.

A structure record begins with a single 32-bit unsigned value - the cookie
value.  This value is incremented each time the structure is modified.
Following the cookie value are three varint values, as follows:

</p><ul>
  <li> The number of levels in the index (i.e. the maximum level associated
       with any segment b-tree plus one).
  </li><li> The total number of segment b-trees in the index.
  </li><li> The total number of segment b-tree leaves written to level 0 trees
       since the FTS5 table was created.
</li></ul>

<p>Then, for each level from 0 to nLevel:

</p><ul>
  <li> The number of input segments from the previous level being used as
       inputs for the current incremental merge, or zero if there is no
       ongoing incremental merge to create a new segment b-tree for this level.
  </li><li> The total number of segment b-trees on the level.
  </li><li> Then, for each segment b-tree, from oldest to newest:
  <ul>
    <li> The segment id.
    </li><li> Page number of first leaf (often 1, always &gt;0).
    </li><li> Page number of last leaf (always &gt;0).
  </li></ul>
</li></ul>

<h3 id="averages_record_format"><span>9.2.3. </span>Averages Record Format</h3>

<p>The averages record, which is always stored with id=1 in the %_data table,
does not store the average of anything. Instead, it contains a vector of
(nCol+1) packed varint values, where nCol is the number of columns in the FTS5
table, including unindexed columns. The first varint contains the total
number of rows in the FTS5 table. The second contains the total number of
tokens in all values stored in the leftmost FTS5 table column. The third the
number of tokens in all values for the next leftmost, and so on. The value for
unindexed columns is always zero.

</p><h3 id="segment_b_tree_format"><span>9.2.4. </span>Segment B-Tree Format</h3>

<h4 id="the_key_doclist_format"><span>9.2.4.1. </span>The Key/Doclist Format</h4>

<p>The key/doclist format is a format used to store a series of keys (document
terms or term prefixes prefixed by a single character to indentify the specific
index to which they belong) in sorted order, each with their associated
doclist. The format consists of alternating keys and doclists packed together.

</p><p>The first key is stored as:
</p><ul>
  <li> A varint indicating the number of bytes in the key (N), followed by
  </li><li> The key data itself (N bytes).
</li></ul>

<p>Each subsequent key is stored as:
</p><ul>
  <li> A varint indicating the size of the prefix that the key has in common
       with the previous key in bytes,
  </li><li> A varint indicating the number of bytes in the key following the
       common prefix (N), followed by
  </li><li> The key suffix data itself (N bytes).
</li></ul>

<p>For example, if the first two keys in an FTS5 key/doclist record are
"0challenger" and "0chandelier", then the first key is stored as varint 11
followed by the 11 bytes "0challenger", and the second key is stored as varints
4 and 7, followed by the 7 bytes "ndelier".

</p><center><p><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 956.102 126.72">
<path d="M62,77L91,77L91,48L62,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M91,77L149,77L149,48L91,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M149,77L437,77L437,48L149,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="293" y="63" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">doclist&nbsp;0</text>
<path d="M437,77L466,77L466,48L437,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M466,77L494,77L494,48L466,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M494,77L538,77L538,48L494,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M538,77L826,77L826,48L538,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="682" y="63" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">doclist&nbsp;1</text>
<text x="892" y="63" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">key/doclist&nbsp;2...</text>
<path d="M826,48L883,48" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M826,77L883,77" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="120" y="114" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">key&nbsp;0&nbsp;data</text>
<polygon points="120,77 124,89 116,89" style="fill:rgb(0,0,0)"></polygon>
<path d="M120,99L120,83" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="77" y="12" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">key&nbsp;0&nbsp;size&nbsp;(varint)</text>
<polygon points="77,48 72,37 81,37" style="fill:rgb(0,0,0)"></polygon>
<path d="M77,27L77,43" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="358" y="114" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">key&nbsp;1&nbsp;prefix&nbsp;size&nbsp;(varint)</text>
<polygon points="451,77 441,84 439,76" style="fill:rgb(0,0,0)"></polygon>
<path d="M358,99L446,79" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="480" y="12" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">key&nbsp;1&nbsp;suffix&nbsp;size&nbsp;(varint)</text>
<polygon points="480,48 476,37 484,37" style="fill:rgb(0,0,0)"></polygon>
<path d="M480,27L480,43" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="585" y="114" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">key&nbsp;1&nbsp;prefix&nbsp;data</text>
<polygon points="516,77 528,77 526,85" style="fill:rgb(0,0,0)"></polygon>
<path d="M585,99L521,79" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
</svg>
</p>
<p><i>Figure 1 - Term/Doclist Format
</i></p></center>

<p>Each doclist identifies the rows (by their rowid values) that contain at
least one instance of the term or term prefix and an associated position list,
or "poslist" enumerating the position of each term instance within the row. In
this sense a "position" is defined as a column number and term offset within
the column value.

</p><p>Within a doclist, documents are always stored in order sorted by rowid.  The
first rowid in a doclist is stored as is, as a varint. It is immediately
followed by its associated position list. Following this, the difference
between the first rowid and the second, as a varint, followed by the doclist
associated with the second rowid in the doclist. And so on.

</p><p>There is no way to determine the size of a doclist by parsing it. This must
be stored externally. See the <a href="#data_pagination">section below</a> for
details of how this is accomplished in FTS5.

</p><center><p><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 889.459 79.92">
<path d="M46,77L89,77L89,48L46,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M89,77L377,77L377,48L89,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="233" y="63" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">position&nbsp;list&nbsp;0</text>
<path d="M377,77L420,77L420,48L377,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M420,77L708,77L708,48L420,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="564" y="63" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">position&nbsp;list&nbsp;1</text>
<path d="M708,77L751,77L751,48L708,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="822" y="63" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">position&nbsp;list&nbsp;2...</text>
<path d="M751,48L809,48" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M751,77L809,77" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="67" y="12" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">rowid&nbsp;0&nbsp;(varint)</text>
<polygon points="67,48 63,37 72,37" style="fill:rgb(0,0,0)"></polygon>
<path d="M67,27L67,43" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="398" y="12" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">rowid&nbsp;1&nbsp;(delta-encoded&nbsp;varint)</text>
<polygon points="398,48 394,37 403,37" style="fill:rgb(0,0,0)"></polygon>
<path d="M398,27L398,43" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="730" y="12" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">rowid&nbsp;3&nbsp;(delta-encoded&nbsp;varint)</text>
<polygon points="730,48 725,37 734,37" style="fill:rgb(0,0,0)"></polygon>
<path d="M730,27L730,43" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
</svg>
</p>
<p><i>Figure 2 - Doclist Format
</i></p></center>

<p>A position list - often shortened to "poslist" - identifies the column
and token offset within the row of each instance of the token in question.
The format of a poslist is:

</p><ul>
  <li> Varint set to twice the size of the poslist, not including this field,
       plus one if the "delete" flag is set on the entry.
  </li><li> A (possibly empty) list of offsets for column 0 (the leftmost column) of
       the row. Each offset is stored as a varint. The first varint contains
       the value of the first offset, plus 2. The second variant contains the
       difference between the second and first offsets, plus 2. etc. For
       example, if the offset list is to contain offsets 0, 10, 15 and 16, it
       is encoded by packing the following values, encoded as varints, end to
       end:
       <pre>           2, 12, 7, 3
</pre>
  </li><li> For each column other than column 0 that contains one of more instances
       of the token:
  <ul>
    <li> Byte value 0x01.
    </li><li> The column number, as a varint.
    </li><li> An offset list, in the same format as the offset list for column 0.
  </li></ul>
</li></ul>

<center><p><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 785.606 133.92">
<path d="M77,77L121,77L121,48L77,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M121,77L409,77L409,48L121,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="265" y="63" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">col&nbsp;0&nbsp;offset-list</text>
<path d="M409,77L452,77L452,48L409,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="430" y="63" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">0x01</text>
<path d="M452,77L495,77L495,48L452,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M495,77L783,77L783,48L495,48Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="639" y="63" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">col&nbsp;i&nbsp;offset-list</text>
<text x="99" y="12" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">nSize*2&nbsp;+&nbsp;bDel&nbsp;(varint)</text>
<polygon points="99,48 95,37 103,37" style="fill:rgb(0,0,0)"></polygon>
<path d="M99,27L99,43" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="473" y="12" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">column&nbsp;number&nbsp;(i)</text>
<polygon points="473,48 469,37 478,37" style="fill:rgb(0,0,0)"></polygon>
<path d="M473,27L473,43" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M121,92L121,106L783,106L783,92" style="fill:none;stroke-width:2.16;stroke-linejoin:round;stroke:rgb(0,0,0);"></path>
<text x="452" y="121" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">nSize&nbsp;bytes</text>
</svg>
</p>
<p><i>Figure 3 - Position List (poslist) With Offsets in Columns 0 and i
</i></p></center>



<p>If it is small enough (by default this means smaller than 4000 bytes), the
entire contents of a segment b-tree may be stored in the key/doclist format
described in the previous section as a single blob within the %_data table.
Otherwise, the key/doclist is split into pages (by default, of approximately
4000 bytes each) and stored in a contiguous set of entries in the %_data table
(<a href="#data_structure">see above</a> for details).

</p><p>When a key/doclist is divided into pages, the following modifications are
made to the format:

</p><ul>
  <li> A single varint or key data field never spans two pages.
  </li><li> The first key on each page is not prefix-compressed. It is stored in
       the format described above for the first key of a doclist - its size as
       a varint followed by the key data.
  </li><li> If there are one or more rowids on a page before the first key, then
       the first of them is not delta compressed. It is stored as is, just as
       if it were the first rowid of its doclist (which it may or may not be).
</li></ul>

<p>Each page also has fixed-size 4-byte header and a variably-sized footer.
The header is divided into 2 16-bit big-endian integer fields. They
contain:

</p><ul>
  <li> The byte offset of the first rowid value on the page, if it occurs
       before the first key, or 0 otherwise.
  </li><li> The byte offset of the page footer.
</li></ul>

<p>The page footer consists of a series of varints containing the byte offset
of each key that appears on the page. The page footer is zero bytes in size
if there are no keys on the page.

</p><center><p><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 721.267 79.92">
<path d="M10,30L54,30L54,2L10,2Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="32" y="16" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">hdr</text>
<path d="M54,30L630,30L630,2L54,2Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="342" y="16" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">modified&nbsp;key/doclist&nbsp;data</text>
<path d="M630,30L702,30L702,2L630,2Z" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="666" y="16" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">footer</text>
<text x="32" y="67" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">4&nbsp;bytes</text>
<text x="666" y="67" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">variable&nbsp;size</text>
<polygon points="32,30 36,42 28,42" style="fill:rgb(0,0,0)"></polygon>
<path d="M32,52L32,36" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<polygon points="666,30 670,42 661,42" style="fill:rgb(0,0,0)"></polygon>
<path d="M666,52L666,36" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
</svg>
</p>
<p><i>Figure 4 - Page Format
</i></p></center>

<h4 id="data_term_index"><span>9.2.4.3. </span>Segment Index Format</h4>

<p>The result of formatting the contents of the segment b-tree in the
key/doclist format and then splitting it into pages is something very
similar to the leaves of a b+tree. Instead of creating a format for
the internal nodes of this b+tree and storing them in the %_data table
alongside the leaves, the keys that would have been stored on such nodes are
added to the %_idx table, defined as:

</p><div><pre>CREATE TABLE %_idx(
  segid INTEGER,              <i>-- segment id</i>
  term TEXT,                  <i>-- prefix of first key on page</i>
  pgno INTEGER,               <i>-- (2*pgno + bDoclistIndex)</i>
  PRIMARY KEY(segid, term)
);
</pre></div>

<p>For each "leaf" page that contains at least one key, an entry is added
to the %_idx table. Fields are set as follows:

</p><table striped="1">
  <tbody><tr><th>Column</th><th>Contents
  </th></tr><tr><td>segid</td><td>   The integer segment id.
  </td></tr><tr><td>term</td><td>    The smallest prefix of the first key on the page that
                      is larger than all keys on the previous page. For the
                      first page in a segment, this prefix is zero bytes in
                      size.
  </td></tr><tr><td>pgno</td><td>    This field encodes both the page number (within the
                      segment - starting from 1) and the doclist index flag.
                      The doclist index flag is set if the final key on the
                      page has an <a href="#doclist_index_format">associated
                      doclist index</a>. The value of this field is:
                      <pre>       (pgno*2 + bDoclistIndexFlag)
</pre>
</td></tr></tbody></table>

<p>Then, to find the leaf for segment i that may contain term t, instead of
searching through internal nodes, FTS5 runs the query:

</p><div><pre>SELECT pgno FROM %_idx WHERE segid=$i AND term&gt;=$t ORDER BY term LIMIT 1
</pre></div>

<h4 id="doclist_index_format"><span>9.2.4.4. </span>Doclist Index Format</h4>

<p>The segment index described in the <a href="#data_term_index">previous
section</a> allows a segment b-tree to be efficiently queried by term or,
assuming there is a prefix index of the required size, a term prefix. The data
structure described in this section, doclist indexes, allows FTS5 to
efficiently search for a rowid or range or rowids within the doclist associated
with a single term or term prefix.

</p><p>Not all keys have associated doclists indexes. By default, a doclist index
is only added for a key if its doclist spans more than 4 segment b-tree leaf
pages. Doclist indexes are themselves b-trees, with both leaves and internal
nodes stored as entries in the %_data table, but in practice most doclists are
small enough to fit on a single leaf. FTS5 uses the same rough size for doclist
index node and leaves as it does for segment b-tree leaves (by default 4000
bytes).

</p><p>Doclist index leaves and internal nodes use the same page format. The first
byte is a "flags" byte. This is set to 0x00 for the root page of the doclist
index b-tree, and 0x01 for all other pages. The remainder of the page is a
series of tightly packed varints, as follows:

</p><ul>
  <li> page number of leftmost child page, followed by
  </li><li> the smallest rowid value on the left most child page, followed by
  </li><li> one varint for each subsequent child page, containing the value:
  <ul>
    <li> 0x00 if there are no rowids on the child page (this can only happen
         when the "child" page is actually a segment b-tree leaf), or
    </li><li> the difference between the smallest rowid on the child page and
         the previous rowid value stored on the doclist index page.
  </li></ul>
</li></ul>

<p>For the leftmost doclist index leaf in a doclist index, the leftmost child
page is the first segment b-tree leaf after the one that contains the key
itself.

</p><h2 id="document_sizes_table_docsize_table_"><span>9.3. </span>Document Sizes Table (%_docsize table)</h2>

<div><pre>CREATE TABLE %_docsize(
    id INTEGER PRIMARY KEY,   -- id of FTS5 row this record pertains to
    sz BLOB                   -- blob containing nCol packed varints
);
</pre></div>

<p>Many common search result ranking functions require as an input the size
in tokens of the result document (as a search term hit in a short document is
considered more significant than one in a long document). To provide fast
access to this information, for each row in the FTS5 table there exists a
corresponding record (with the same rowid) in the %_docsize shadow table
that contains the size of each column value in the row, in tokens.

</p><p>The column value sizes are stored in a blob containing one packed varint for
each column of the FTS5 table, from left to right. The varint contains, of
course, the total number of tokens in the corresponding column value. Unindexed
columns are included in this vector of varints; for them the value is always
set to zero.

</p><p>This table is used by the <a href="#xColumnSize">xColumnSize</a> API. It can
be omitted altogether by specifying the
<a href="#the_columnsize_option">columnsize=0</a> option. In that case the
xColumnSize API is still available to auxiliary functions, but runs much more
slowly.

</p><h2 id="the_table_contents_content_table_"><span>9.4. </span>The Table Contents (%_content table)</h2>

<div><pre>CREATE TABLE %_content(id INTEGER PRIMARY KEY, c0, c1...);
</pre></div>

<p>The actual table content - the values inserted into the FTS5 table, is
stored in the %_content table. This table is created with one "c*" column for
each column of the FTS5 table, including any unindexed columns. The values for
the leftmost FTS5 table column are stored in column "c0" of the %_content
table, the values from the next FTS5 table column in column "c1", and so on.

</p><p>This table is omitted completely for
<a href="#external_content_and_contentless_tables">
external content or contentless</a> FTS5 tables.
tables.

</p><h2 id="configuration_options_config_table_"><span>9.5. </span>Configuration Options (%_config table)</h2>

<div><pre>CREATE TABLE %_config(k PRIMARY KEY, v) WITHOUT ROWID;
</pre></div>

<p>This table stores the values of any persistent configuration options.
Column "k" stores the name of the option (text) and column "v" the value.
Example contents:

</p><div><pre>sqlite&gt; SELECT * FROM fts_tbl_config;
┌─────────────┬──────┐
│      k      │  v   │
├─────────────┼──────┤
│ crisismerge │ 8    │
│ pgsz        │ 8000 │
│ usermerge   │ 4    │
│ version     │ 4    │
└─────────────┴──────┘
</pre></div>

<h2 id="appendix_a" nonumber="1" tags="comparison with fts4">
  Appendix A: Comparison with FTS3/4
</h2>

<p> Also available is the similar but more mature <a href="https://www.sqlite.org/fts3.html">FTS3/4</a> module.
FTS5 is a new version of FTS4 that includes various fixes and solutions for
problems that could not be fixed in FTS4 without sacrificing backwards
compatibility. Some of these problems are
<a href="https://www.sqlite.org/fts5.html#_summary_of_technical_differences_">described below</a>.

</p><h2 nonumber="1" id="_application_porting_guide_"> Application Porting Guide </h2>

<p> In order to use FTS5 instead of FTS3 or FTS4, applications usually require
minimal modifications. Most of these fall into three categories - changes
required to the CREATE VIRTUAL TABLE statement used to create the FTS table,
changes required to SELECT queries used to execute queries against the table,
and changes required to applications that use <a href="https://www.sqlite.org/fts3.html#snippet">FTS auxiliary functions</a>.

</p><h3 nonumber="1" id="_changes_to_create_virtual_table_statements_"> Changes to CREATE VIRTUAL TABLE statements </h3>

<ol>
<li> <p>The module name must be changed from "fts3" or "fts4" to "fts5".

</p></li><li> <p>All type information or constraint specifications must be removed from
     column definitions. FTS3/4 ignores everything following the column name in
     a column definition, FTS5 attempts to parse it (and will report an error
     if it fails to).

</p></li><li> <p>The "matchinfo=fts3" option is not available. The
     <a href="https://www.sqlite.org/fts5.html#the_columnsize_option">"columnsize=0"</a> option is equivalent.

</p></li><li> <p>The notindexed= option is not available. Adding <a href="https://www.sqlite.org/fts5.html#the_unindexed_column_option">UNINDEXED</a>
     to the column definition is equivalent.

</p></li><li> <p>The ICU tokenizer is not available.

</p></li><li> <p>The compress=, uncompress= and languageid= options are not available.
     There is as of yet no equivalent for their functionality.
</p></li></ol>

<div><pre><i> -- FTS3/4 statement </i>
CREATE VIRTUAL TABLE t1 USING fts4(
  linkid INTEGER,
  header CHAR(20),
  text VARCHAR,
  notindexed=linkid,
  matchinfo=fts3,
  tokenizer=unicode61
);

<i> -- FTS5 equivalent (note - the "tokenizer=unicode61" option is not</i>
<i> -- required as this is the default for FTS5 anyway)</i>
CREATE VIRTUAL TABLE t1 USING fts5(
  linkid UNINDEXED,
  header,
  text,
  columnsize=0
);
</pre></div>

<h3 nonumber="1" id="_changes_to_select_statements_"> Changes to SELECT statements </h3>

<ol>
  <li> <p>The "docid" alias does not exist. Applications must use "rowid"
          instead.

  </p></li><li> <p>The behaviour of queries when a column-filter is specified both as
          part of the FTS query and by using a column as the LHS of a MATCH
          operator is slightly different. For a table with columns "a" and "b"
          and a query similar to:
</p>
       <p>FTS3/4 searches for matches in column "b". However, FTS5 always
          returns zero rows, as results are first filtered for column "b", then
          for column "a", leaving no results. In other words, in FTS3/4 the
          inner filter overrides the outer, in FTS5 both filters are applied.

  </p></li><li> <p>The FTS query syntax (right hand side of the MATCH operator) has
          changed in some ways. The FTS5 syntax is quite close to the FTS4
          "enhanced syntax". The main difference is that FTS5 is fussier
          about unrecognized punctuation characters and similar within query
          strings. Most queries that work with FTS3/4 should also work with
          FTS5, and those that do not should return parse errors.
</p></li></ol>

<h3 nonumber="1" id="_auxiliary_function_changes_"> Auxiliary Function Changes </h3>

<p> FTS5 has no matchinfo() or offsets() function, and the snippet() function
is not as fully-featured as in FTS3/4. However, since FTS5 does provide
an API allowing applications to create <a href="https://www.sqlite.org/fts5.html#custom_auxiliary_functions_api_reference">custom auxiliary functions</a>, any
required functionality may be implemented within the application code.

</p><p> The set of built-in auxiliary functions provided by FTS5 may be
improved upon in the future.

</p><h3 nonumber="1" id="_other_issues"> Other Issues</h3>

<ol>
  <li><p> The functionality provided by the fts4aux module is now provided
          by <a href="https://www.sqlite.org/fts5.html#the_fts5vocab_virtual_table_module">fts5vocab</a>. The schema of these two tables is slightly different.

  </p></li><li><p> The FTS3/4 "merge=X,Y" command has been replaced by the
          <a href="https://www.sqlite.org/fts5.html#the_merge_command">FTS5 merge command</a>.

  </p></li><li><p> The FTS3/4 "automerge=X" command has been replaced by the
          <a href="https://www.sqlite.org/fts5.html#the_automerge_configuration_option">FTS5 automerge option</a>.
</p></li></ol>

<h2 nonumber="1" tags="fts5 technical differences" id="_summary_of_technical_differences_">
  Summary of Technical Differences
</h2>

<p>FTS5 is similar to FTS3/4 in that the primary task of each is to maintain
an index mapping from each unique token to a list of instances of that token
within a set of documents, where each instance is identified by the document
in which it appears and its position within that document. For example:

</p><div><pre><i>-- Given the following SQL:</i>
CREATE VIRTUAL TABLE ft USING fts5(a, b);
INSERT INTO ft(rowid, a, b) VALUES(1, 'X Y', 'Y Z');
INSERT INTO ft(rowid, a, b) VALUES(2, 'A Z', 'Y Y');

<i>-- The FTS5 module creates the following mapping on disk:</i>
A --&gt; (2, 0, 0)
X --&gt; (1, 0, 0)
Y --&gt; (1, 0, 1) (1, 1, 0) (2, 1, 0) (2, 1, 1)
Z --&gt; (1, 1, 1) (2, 0, 1)
</pre></div>

<p>In the example above, each triple identifies the location of a token
instance by rowid, column number (columns are numbered sequentially
starting at 0 from left to right) and position within the column value (the
first token in a column value is 0, the second is 1, and so on). Using this
index, FTS5 is able to provide timely answers to queries such as "the set
of all documents that contain the token 'A'", or "the set of all documents
that contain the sequence 'Y Z'". The list of instances associated with a
single token is called an "instance-list".

</p><p>The principle difference between FTS3/4 and FTS5 is that in FTS3/4,
each instance-list is stored as a single large database record, whereas
in FTS5 large instance-lists are divided between multiple database records.
This has the following implications for dealing with large databases that
contain large lists:

</p><ul>
  <li> <p>FTS5 is able to load instance-lists into memory incrementally in
       order to reduce memory usage and peak allocation size. FTS3/4 very
       often loads entire instance-lists into memory.

  </p></li><li> <p>When processing queries that feature more than one token, FTS5 is
       sometimes able to determine that the query can be answered by
       inspecting a subset of a large instance-list. FTS3/4 almost always
       has to traverse entire instance-lists.

  </p></li><li> If an instance-list grows so large that it exceeds
       the <a href="https://www.sqlite.org/limits.html#max_length">SQLITE_MAX_LENGTH</a> limit, FTS3/4 is unable to handle it. FTS5
       does not have this problem.
</li></ul>

<p>For these reasons, many complex queries may use less memory and run faster
using FTS5.

</p><p>Some other ways in which FTS5 differs from FTS3/4 are:

</p><ul>
  <li> <p>FTS5 supports "ORDER BY rank" for returning results in order of
       decreasing relevancy.

  </p></li><li> <p>FTS5 features an API allowing users to create custom auxiliary
       functions for advanced ranking and text processing applications. The
       special "rank" column may be mapped to a custom auxiliary function
       so that adding "ORDER BY rank" to a query works as expected.

  </p></li><li> <p>FTS5 recognizes unicode separator characters and case equivalence by
       default. This is also possible using FTS3/4, but must be explicitly
       enabled.

  </p></li><li> <p>The query syntax has been revised where necessary to remove
       ambiguities and to make it possible to escape special characters
       in query terms.

  </p></li><li> <p>By default, FTS3/4 occasionally merges together two or more of the
       b-trees that make up its full-text index within an INSERT, UPDATE or
       DELETE statement executed by the user. This means that any operation
       on an FTS3/4 table may turn out to be surprisingly slow, as FTS3/4
       may unpredictably choose to merge together two or more large b-trees
       within it. FTS5 uses incremental merging by default, which limits
       the amount of processing that may take place within any given
       INSERT, UPDATE or DELETE operation.
</p></li></ul>
<p><small><i>This page last modified on  <a href="https://sqlite.org/docsrc/honeypot" id="mtimelink" data-href="https://sqlite.org/docsrc/finfo/pages/fts5.in?m=39d9a3b727">2024-05-22 18:42:01</a> UTC </i></small></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Startup CEO Says VC Firm Punished Her for Reporting Sex Assault (165 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2024-08-08/startup-ceo-says-vc-firm-punished-her-for-reporting-sex-assault</link>
            <guid>41197950</guid>
            <pubDate>Fri, 09 Aug 2024 01:08:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2024-08-08/startup-ceo-says-vc-firm-punished-her-for-reporting-sex-assault">https://www.bloomberg.com/news/articles/2024-08-08/startup-ceo-says-vc-firm-punished-her-for-reporting-sex-assault</a>, See on <a href="https://news.ycombinator.com/item?id=41197950">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[USPS Text Scammers Duped His Wife, So He Hacked Their Operation (268 pts)]]></title>
            <link>https://www.wired.com/story/usps-scam-text-smishing-triad/</link>
            <guid>41197300</guid>
            <pubDate>Thu, 08 Aug 2024 23:00:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/usps-scam-text-smishing-triad/">https://www.wired.com/story/usps-scam-text-smishing-triad/</a>, See on <a href="https://news.ycombinator.com/item?id=41197300">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>Smith trawled Reddit and other online sources to find people reporting the scam and the URLs being used, which he <a href="https://github.com/gsmith257-cyber/Smishing-Triad/tree/main/Scammer-Site-Details">subsequently published</a>. Some of the websites running the Smishing Triad’s tools were collecting thousands of people’s personal information per day, Smith says. Among other details, the websites would request people’s names, addresses, payment card numbers and security codes, phone numbers, dates of birth, and bank websites. This level of information can allow a scammer to make purchases online with the credit cards. Smith says his wife quickly canceled her card, but noticed that the scammers still tried to use it, for instance, with Uber. The researcher says he would collect data from a website and return to it a few hours later, only to find hundreds of new records.</p><p>The researcher provided the details to a bank that had contacted him after seeing his initial blog posts. Smith declined to name the bank. He also reported the incidents to the FBI and later provided information to the United States Postal Inspection Service (USPIS).</p><p>Michael Martel, a national public information officer at USPIS, says the information provided by Smith is being used as part of an ongoing USPIS investigation and that the agency cannot comment on specific details. “USPIS is already actively pursuing this type of information to protect the American people, identify victims, and serve justice to the malicious actors behind it all,” Martel says, pointing to advice on <a data-offer-url="https://www.uspis.gov/news/scam-article/smishing-package-tracking-text-scams" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.uspis.gov/news/scam-article/smishing-package-tracking-text-scams&quot;}" href="https://www.uspis.gov/news/scam-article/smishing-package-tracking-text-scams" rel="nofollow noopener" target="_blank">spotting and reporting USPS package delivery scams</a>.</p><p>Initially, Smith says, he was wary about going public with his research, as this kind of “hacking back” falls into a “gray area”: It may be breaking the Computer Fraud and Abuse Act, a sweeping US computer-crimes law, but he’s doing it against foreign-based criminals. Something he is <a href="https://www.wired.com/story/p4x-north-korea-internet-hacker-identity-reveal/">definitely not the first, or last, to do</a>.</p><h2>Multiple Prongs</h2><p>The Smishing Triad is prolific. In addition to using postal services as lures for their scams, the Chinese-speaking group has targeted online banking, ecommerce, and payment systems in the US, Europe, India, Pakistan, and the United Arab Emirates, according to Shawn Loveland, the chief operating officer of Resecurity, which has consistently tracked the group.</p><p>The Smishing Triad sends between 50,000 and 100,000 messages daily, according to <a data-offer-url="https://www.resecurity.com/blog/article/smishing-triad-is-targeting-pakistan-to-defraud-banking-customers-at-scale" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.resecurity.com/blog/article/smishing-triad-is-targeting-pakistan-to-defraud-banking-customers-at-scale&quot;}" href="https://www.resecurity.com/blog/article/smishing-triad-is-targeting-pakistan-to-defraud-banking-customers-at-scale" rel="nofollow noopener" target="_blank">Resecurity’s research</a>. Its scam messages are sent using SMS or Apple’s iMessage, the latter being encrypted. Loveland says the Triad is made up of two distinct groups—a small team led by one Chinese hacker that creates, sells, and maintains the smishing kit, and a second group of people who buy the scamming tool. (A backdoor in the kit allows the creator to access details of administrators using the kit, Smith says in a <a data-offer-url="https://blog.smithsecurity.biz/systematic-destruction-hacking-the-scammers-pt.-2" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://blog.smithsecurity.biz/systematic-destruction-hacking-the-scammers-pt.-2&quot;}" href="https://blog.smithsecurity.biz/systematic-destruction-hacking-the-scammers-pt.-2" rel="nofollow noopener" target="_blank">blog post</a>.)</p><p>“It’s very mature,” Loveland says of the operation. The group sells the scamming kit on Telegram for a $200-per month subscription, and this can be customized to show the organization the scammers are trying to impersonate. “The main actor is Chinese communicating in the Chinese language,” Loveland says. “They do not appear to be hacking Chinese language websites or users.” (In communications with the main contact on Telegram, the individual claimed to Smith that they were a computer science student.)</p><p>The relatively low monthly subscription cost for the smishing kit means it’s highly likely, with the number of credit card details scammers are collecting, that those using it are making significant profits. Loveland says using text messages that immediately send people a notification is a more direct and more successful way of phishing, compared to sending emails with malicious links included.</p><p>As a result, smishing has been on <a href="https://www.wired.com/story/smishing-sms-phishing-attack-phone/">the rise in recent years</a>. But there are some tell-tale signs: If you receive a message from a number or email you don't recognize, if it contains a link to click on, or if it wants you to do something urgently, you should be suspicious.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Forest Service orders Arrowhead bottled water to shut down California pipeline (114 pts)]]></title>
            <link>https://www.latimes.com/environment/story/2024-08-07/arrowhead-bottled-water-permit</link>
            <guid>41197277</guid>
            <pubDate>Thu, 08 Aug 2024 22:56:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.latimes.com/environment/story/2024-08-07/arrowhead-bottled-water-permit">https://www.latimes.com/environment/story/2024-08-07/arrowhead-bottled-water-permit</a>, See on <a href="https://news.ycombinator.com/item?id=41197277">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-element="story-body" data-subscriber-content=""> <p>In a decision that could end a years-long battle over commercial extraction of water from public lands, the U.S. Forest Service has ordered the company that sells Arrowhead bottled water to shut down a pipeline and other infrastructure it uses to collect and transport water from springs in the San Bernardino Mountains.</p><p>The Forest Service notified BlueTriton Brands in a letter last month, saying its application for a new permit has been denied.</p><p>District Ranger Michael Nobles wrote in the July 26 letter that the company “must cease operations” in the San Bernardino National Forest and submit a plan for removing all its pipes and equipment from federal land.</p><p>The company has <a href="https://www.documentcloud.org/documents/25033574-2024-8-6-bluetriton-brands-complaint" target="_blank">challenged the denial </a>in court.</p><p>Environmental activists praised the decision.</p><p>“It’s a huge victory after 10 years,” said Amanda Frye, an activist who has campaigned against the taking of water from the forest. “I’m hoping that we can restore Strawberry Creek, have its springs flowing again, and get the habitat back.”</p><p>She and other opponents say BlueTriton’s operation has dramatically reduced creek flow and is causing significant environmental harm.</p><p>The Forest Service announced the decision one month after a local environmental group, Save Our Forest Assn., <a href="https://www.latimes.com/environment/story/2024-06-28/environmentalists-sue-over-california-bottled-water-operation"><u>filed a lawsuit</u></a> arguing the agency was illegally allowing the company to continue operating under a permit that was past its expiration date.</p><p>The company has denied that its use of water is harming the environment and has argued it should be allowed to continue piping water from the national forest.</p><p>BlueTriton Brands and its predecessors “have continuously operated under a series of special use permits for nearly a century,” the company said in an email.</p><p>“This denial has no legal merit, is unsupported by the facts, and negatively impacts the San Manuel Band of Mission Indians,” the company said, adding that the tribe uses a portion of the water that passes through the pipeline and relies on that water for firefighting needs.</p><p>The tribe declined to comment and referred questions about the lawsuit to BlueTriton. </p><p>If the Forest Service decision stands, it would prevent the company from using the namesake source of its brand, Arrowhead 100% Mountain Spring Water.</p><p>The springs in the mountains north of San Bernardino, which have been a source for bottled water for generations, are named after an arrowhead-shaped natural rock formation on the mountainside.</p><p>State officials have said that the first facilities to divert water in the Strawberry Creek watershed were <a href="https://www.waterboards.ca.gov/board_info/agendas/2023/sep/091923_7_revproposedorder.pdf" target="_blank"><u>built in 1929</u></a>, and the system expanded over the years as additional boreholes were drilled into the mountainside.</p><p>At the base of the mountain and near the company’s water pipeline stands the long-closed <a href="https://www.latimes.com/environment/story/2022-01-20/environmentalists-fight-to-shut-down-bottled-water-operation"><u>Arrowhead Springs hotel</u></a> property, which the San Manuel tribe bought in 2016. The company has said that <a href="https://www.documentcloud.org/documents/22034438-arrowhead-spring-water-infographic-from-company-website" target="_blank"><u>under a decades-old agreement</u></a>, a portion of the water that flows through the 4.5-mile pipeline goes to the Arrowhead Springs property, and a portion of the water is delivered to a roadside tank and hauled on trucks to a bottling plant.</p><p>The Forest Service has been charging a permit fee of $2,500 per year. There has been no charge for the water.</p><p>Controversy over the issue erupted when the <a href="https://www.desertsun.com/story/news/2015/03/05/bottling-water-california-drought/24389417/" target="_blank">Desert Sun reported</a> in 2015 that the Forest Service was allowing Nestlé to siphon water using a permit that listed 1988 as the expiration date.</p><p>The Forest Service then <a href="https://www.desertsun.com/story/news/environment/2015/04/11/nestle-bottled-water-california-drought-water/25621915/" target="_blank">began a review</a> of the permit, and in 2018 <a href="https://www.desertsun.com/story/news/environment/2018/06/27/forest-service-grants-nestle-new-three-year-water-permit-california/740154002/" target="_blank">granted a new permit</a> for up to five years. The revelations about Nestlé piping water from the forest sparked an <a href="https://www.desertsun.com/story/news/environment/2016/05/03/debate-over-nestle-water-permit-heats-up/83890384/" target="_blank">outpouring of opposition</a> and prompted several complaints to California regulators questioning the company’s water rights claims, which led to a lengthy <a href="https://www.desertsun.com/story/news/environment/2016/05/20/california-investigates-nestle-water-rights/84638050/" target="_blank">investigation</a> by state water regulators.</p><p>BlueTriton Brands took over the bottled water business in 2021 when Nestlé’s North American bottled water division was purchased by private-equity firm One Rock Capital Partners and investment firm Metropoulos &amp; Co. (Last month, BlueTriton and Primo Water Corp. <a href="https://www.prnewswire.com/news-releases/primo-water-and-bluetriton-agree-to-merge-creating-a-leading-north-american-pure-play-healthy-hydration-company-302173696.html" target="_blank"><u>announced</u></a> plans to merge and form a new company.)</p><p>State officials determined last year that the company has been unlawfully diverting much of the water without valid water rights — agreeing with Frye and others, who had questioned the company’s claims and presented historical documents. The State Water Resources Control Board <a href="https://www.latimes.com/environment/story/2023-09-19/california-rules-against-arrowhead-bottled-water-company">voted to order the company</a> to halt its “unauthorized diversions” of water. But BlueTriton Brands <a href="https://www.latimes.com/environment/story/2023-10-27/arrowhead-bottled-water-lawsuit">sued to challenge</a> that decision, arguing the process was rife with problems.</p><p>In the July Forest Service letter, Nobles said the company was repeatedly asked to provide “additional information necessary to assure compliance with BlueTriton’s existing permit” but that the requests were “consistently left unanswered.”</p><p>Nobles said that under the regulations, he may consider whether the water used exceeds the “needs of forest resources.”</p><p>He also said that while the company had said in its application that the water would go for bottled water, its reports showed that 94% to 98% of the amount of water diverted monthly was delivered to the old hotel property for “undisclosed purposes,” and that “for months BlueTriton has indicated it has bottled none of the water taken,” while also significantly increasing the volumes extracted.</p><p>“This increase represents significantly more water than has ever been delivered previously,” Nobles wrote. “The hotel and conference facility on the property is not operating, and there is no explanation of where the millions of gallons of water per month are going.”</p><p>He said the decision is final and cannot be appealed.</p><p>Nobles ordered the company to “stop use of the BlueTriton pipeline” within seven days “by severing or blocking the pipe at each tunnel or borehole” at a dozen sites; to remove the locks on its equipment; and to submit a plan within three months for removing all of its infrastructure.</p><p>Forest Service officials did not respond to an email requesting comments about the decision.</p><p>BlueTriton’s spokesperson said the Forest Service has agreed to a “temporary 30-day stay for the sole purpose of supplying the needs of the San Manuel Band of Mission Indians, including for fire prevention.”</p><p>“We will continue to operate in compliance with all state and federal laws while we explore legal and regulatory options,” the spokesperson said.</p><p>The company argues in the lawsuit that the Forest Service has violated federal law with a decision that is “arbitrary and capricious.”</p><p>BlueTriton said studies by its scientific consultants have found that the taking of water “has not negatively affected the Strawberry Canyon environment.”</p><p>Records show about 319 acre-feet, or 104 million gallons, flowed through the company’s pipes in 2023.</p><p>In the rugged canyon downhill from the springs, Strawberry Creek has continued flowing in recent years. But when Frye has <a href="https://www.desertsun.com/story/news/environment/2017/10/19/nestle-fork-california-creek-trickle-arrowhead/773294001/" target="_blank">hiked along the creek</a>, she has found that its western fork, located downhill from the boreholes, is just a trickle, forming a series of puddles among the bushes and trees.</p><p>“Our goal was to get that water back in the creek and protect the forest,” Frye said. “The proof will be when the pipes and all that infrastructure is taken out and it’s restored. But I think we’re nearing the end.”</p><div data-list-id="0000018d-469c-d011-afcf-c69e5cf60003" data-module-id="0000018d-469c-d011-afcf-c69e5cf60003" data-click="enhancement" data-align-center="">  <p data-element="element-header" data-click="liZZListTitleCTA">  <h3 data-element="element-header-title" data-counter="3">More to Read </h3>  </p>      </div> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[National Park Service Will Cite AWD Drivers for Driving on 4WD-Only Trails (127 pts)]]></title>
            <link>https://jalopnik.com/national-park-service-will-cite-drivers-of-awd-cars-for-1851617315</link>
            <guid>41196554</guid>
            <pubDate>Thu, 08 Aug 2024 21:33:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jalopnik.com/national-park-service-will-cite-drivers-of-awd-cars-for-1851617315">https://jalopnik.com/national-park-service-will-cite-drivers-of-awd-cars-for-1851617315</a>, See on <a href="https://news.ycombinator.com/item?id=41196554">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>As one <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/watch-a-subaru-crosstrek-best-a-tesla-cybertruck-off-ro-1851195244&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/watch-a-subaru-crosstrek-best-a-tesla-cybertruck-off-ro-1851195244">Subaru Crosstrek</a></span> owner recently learned the hard way, it bears repeating that <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/2025-ford-maverick-facelift-finally-lets-you-get-an-all-1851609392&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/2025-ford-maverick-facelift-finally-lets-you-get-an-all-1851609392">all-wheel drive</a></span> is not the same as<span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/toyota-land-cruiser-s-4wd-has-the-4runner-beat-in-one-i-1851512453&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/toyota-land-cruiser-s-4wd-has-the-4runner-beat-in-one-i-1851512453"> four-wheel drive</a></span>. A <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/car-buying/subaru&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/car-buying/subaru">Subie</a></span> owner posted a warning letter they received a month after driving on Colorado River Overlook Road in Canyonlands <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/motorcyclist-dies-after-riding-through-death-valley-in-1851581220&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/motorcyclist-dies-after-riding-through-death-valley-in-1851581220">National Park</a></span> to the <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;External link&quot;,&quot;https://www.reddit.com/r/NationalPark/comments/1elm0et/psa_all_wheel_drive_vehicles_are_not_considered/&quot;,{&quot;metric25&quot;:1}]]" href="https://www.reddit.com/r/NationalPark/comments/1elm0et/psa_all_wheel_drive_vehicles_are_not_considered/" target="_blank" rel="noopener noreferrer">r/NationalPark subreddit</a></span>. The letter notes that this particular road is restricted to <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/at-4-000-is-this-1988-toyota-truck-4x4-a-fair-deal-1851425669&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/at-4-000-is-this-1988-toyota-truck-4x4-a-fair-deal-1851425669">4WD vehicles</a></span> only, and the <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/2024-subaru-crosstrek-wilderness-first-drive-1850899657&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/2024-subaru-crosstrek-wilderness-first-drive-1850899657">Crosstrek</a></span> is equipped with <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/1990-awd-diesel-turbo-toyota-townace-vanlife-dream-1851095744&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/1990-awd-diesel-turbo-toyota-townace-vanlife-dream-1851095744">AWD</a></span>, not <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/could-the-world-s-nicest-1994-ford-explorer-eddie-bauer-1847707283&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/could-the-world-s-nicest-1994-ford-explorer-eddie-bauer-1847707283">4WD</a></span>. It also warns that they may face serious consequences if they’re caught taking <span><a data-ga="[[&quot;Embedded Url&quot;,&quot;Internal link&quot;,&quot;https://jalopnik.com/the-best-all-wheel-drive-cars-ever-according-to-you-1850659983&quot;,{&quot;metric25&quot;:1}]]" href="https://jalopnik.com/the-best-all-wheel-drive-cars-ever-according-to-you-1850659983">an AWD car</a></span>&nbsp;on a 4WD-only trail again.</p><div><h4>Suggested Reading</h4></div><div data-video-id="193853" data-monetizable="true" data-position="sidebar" data-video-title="Steve's Ideal Winter Car Is, Of Course, a Subaru BRZ" data-video-blog-id="12" data-video-network="jalopnik" data-video-duration="93" data-playlist="193853,195186,192203" data-current="193853"><div><p>Steve's Ideal Winter Car Is, Of Course, a Subaru BRZ</p></div><video disablepictureinpicture="" muted="" playsinline="" width="100%" height="100%" crossorigin="anonymous" preload="none"><source data-src="https://vid.kinja.com/prod/193853/193853_240p.mp4" label="240p" type="video/mp4"><source data-src="https://vid.kinja.com/prod/193853/193853_480p.mp4" label="480p" type="video/mp4"><source data-src="https://vid.kinja.com/prod/193853/193853_720p.mp4" label="720p" type="video/mp4"><source data-src="https://vid.kinja.com/prod/193853/193853_1080p.mp4" label="1080p" type="video/mp4"><track kind="captions" label="English" src="https://kinja.com/api/videoupload/caption/19309.vtt" srclang="en"></video><div><ul><li data-label="">Off</li><li data-label="English">English</li></ul></div></div><div><h4>Suggested Reading</h4></div><p>The letter gently reminds the Crosstrek owner that future violations may incur a collateral forfeiture, a fine up to $5,000, up to six months imprisonment, and/or other penalties. While the difference between AWD and 4WD may seem like a pedantic argument, it’s an important distinction that could potentially save lives on technically challenging and isolated trails. Sure, the Crosstrek was able to successfully traverse this particular road, but the vehicle restrictions are in place for a reason, and they are enforceable. Despite wilderness-themed marketing tactics, vehicles equipped with AWD have very different capabilities than vehicles equipped with 4WD despite sharing a similar nomenclature.</p><p>The most consequential distinction between AWD systems and more capable 4WD systems is that most vehicles equipped with 4WD have one or more locking differentials that massively aid in off-road traction. While AWD systems are great for increasing driver confidence on slippery road surfaces and in light off-roading, they are easily flummoxed in more challenging off-road terrain, especially low-speed and low-traction situations.</p><p>Locking the differential on a vehicle’s axle forces an even application of power to each wheel. Some AWD systems have brake-based limited-slip differentials, but these are still no substitute for locking differentials in traditional 4WD systems. A vehicle’s wheels are normally able to spin at different speeds when its differentials are not locked, which allows a wheel with no traction to spin freely while the wheel with traction does nothing. This could cause an AWD vehicle to get stuck in a spot that a 4WD vehicle with locking differentials could easily drive out of.</p><p>While experience, skill and a litany of other factors play into an off-roader’s likelihood of getting stuck, the National Park Service just wants to keep all visitors safe. For reference, neither Subaru, Tesla, Honda, Hyundai nor Kia make any 4WD vehicles. Toyota, Ford, Chevrolet, Jeep and more make some AWD vehicles and some 4WD vehicles. If you’re planning to visit a national park soon and aren’t sure if your vehicle has AWD or 4WD, research it to be safe, and avoid a citation. </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple is America's semiconductor problem (167 pts)]]></title>
            <link>https://www.semiconductor-digest.com/apple-is-americas-semiconductor-problem/</link>
            <guid>41195584</guid>
            <pubDate>Thu, 08 Aug 2024 20:00:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.semiconductor-digest.com/apple-is-americas-semiconductor-problem/">https://www.semiconductor-digest.com/apple-is-americas-semiconductor-problem/</a>, See on <a href="https://news.ycombinator.com/item?id=41195584">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
											
<p><em>By Matt Stoller, Director of Research at the<a href="https://www.economicliberties.us/" target="_blank" rel="noreferrer noopener"> American Economic Liberties Project </a>and Laurel Kilgour, Research Manager at the American Economic Liberties Project</em></p>



<p>With the 2022 CHIPS Act, the federal government made a massive investment to reshore semiconductor chip fabrication. Why? Covid-era shortages of semiconductor chips had revealed America’s shocking dependence on brittle international supply chains. In 1990, 37% of the world’s chips were made in the US. By 2020, it was 12%. So when the pandemic disrupted sourcing of foreign chips, automakers faced a <a href="https://spectrum.ieee.org/chip-shortage">52-week long waiting list</a> for chips needed for advanced features and had to <a href="https://prospect.org/economy/when-the-chips-are-down-we-need-industrial-policy-semiconductor-shortage/" target="_blank" rel="noreferrer noopener">slash</a> new car production, spiking used car prices. Chips are embedded in nearly every electronic device, so the risks of weak domestic production are far-reaching.</p>



<p>In the mission to reshore chip fabrication, smartphone giant Apple – <a href="https://macdailynews.com/2023/02/06/apple-again-the-worlds-top-semiconductor-buyer-in-2022/">the biggest buyer of semiconductors in the world</a> – is looking to burnish its patriotic image. In May of last year, <a href="https://time.com/6282037/apple-broadcom-chips/">Apple announced a deal</a> to contract with chipmaker Broadcom to source its 5G radio and wireless chips in the United States. The year before, Apple indicated that it was going to source <a href="https://www.computerworld.com/article/3681991/as-re-shoring-brings-chipmakers-back-to-the-us-apple-looks-to-jump-on-board.html" target="_blank" rel="noreferrer noopener">about one third of its mobile phone processors</a> from a soon-to-be constructed fab in Arizona operated by Taiwan Semiconductor Manufacturing Company (TSMC). In this narrative, as a good corporate citizen, Apple is using its leverage as a large buyer of semiconductor chips to push chip makers to move production back to the U.S.A.</p>



<p>This narrative is false. Apple’s rise to become the world’s foremost producer of smartphones—using a range of exclusive deals, anti-competitive practices, and race-to-the-bottom sourcing strategies—is intimately intertwined with why we needed to pass the CHIPS Act in the first place. No single company is more responsible for thinning out America’s chip manufacturing than Apple. Apple is <em>the</em> primary obstacle to the success of reshoring chip fabrication, and more action needs to be taken by the federal government to rein in its control over the global electronics supply chain.</p>



<p>Apple’s sheer size as a buyer puts this into perspective. In 2022, Apple bought <a href="https://www.gartner.com/en/newsroom/press-releases/2023-02-06-gartner-says-top-10-semiconductor-buyers-decreased-chip-spending-by-seven-percent-in-2022#:~:text=All%20top%20ten%20companies%20in,2022%20(see%20Table%201).&amp;text=HP%20Inc.&amp;text=Apple%20remained%20at%20the%20top,fourth%20year%20in%20a%20row." target="_blank" rel="noreferrer noopener">$67 billion of semiconductor chips</a>, a full 11% of the global market for chips across all industries. Apple buys a far larger share of smartphone and computer semiconductors, given that it accounts for <a href="https://www.statista.com/chart/29925/apples-share-of-the-global-smartphone-market/" target="_blank" rel="noreferrer noopener">half of global smartphones sales</a> and <a href="https://appleinsider.com/articles/23/02/03/apple-collects-nearly-all-of-the-profit-in-the-worldwide-smartphone-market" target="_blank" rel="noreferrer noopener">earns 85% of all smartphones</a> profits. Apple’s supply agreements with U.S. mobile operators demand that Apple products get the deepest subsidies and the largest share of sales. That hardware dominance means that Apple can monetize apps and services embedded on iPhones, like Apple Music, support, and its <a href="https://decrypt.co/137874/apple-tax-ios-illegal-judge-affirms-good-for-crypto-nfts" target="_blank" rel="noreferrer noopener">30% tax on all app store sales</a>. Apple executives acknowledged that <a href="https://www.bloomberg.com/news/articles/2024-05-01/google-s-payments-to-apple-reached-20-billion-in-2022-cue-says" target="_blank" rel="noreferrer noopener">Google paid them $20 billion in 2022</a> to be Safari’s default search engine. At points within the last decade, Apple earned <a href="https://appleinsider.com/articles/23/02/03/apple-collects-nearly-all-of-the-profit-in-the-worldwide-smartphone-market" target="_blank" rel="noreferrer noopener">over 100% of smartphone profits</a>, because Android manufacturers were taking losses and Apple forced users to adopt its services.</p>



<p>With this position, Apple uses its outsized buying power to <a href="https://www.cnet.com/tech/tech-industry/labor-activists-call-on-apple-to-stop-squeezing-suppliers/" target="_blank" rel="noreferrer noopener">squeeze the margins of its suppliers such as Foxconn</a>, leading to poor pay and terrible working conditions in Chinese factories. When iPhones have experienced sales declines, Apple can <a href="https://www.wsj.com/articles/apple-squeezes-parts-suppliers-to-protect-margins-1472713073" target="_blank" rel="noreferrer noopener">unilaterally force suppliers to accept large price cuts while threatening to go to China to find other suppliers</a>, just so that Apple can maintain its high profit margins. Even for the American suppliers who have managed to stay in business, things are hard. With Apple accounting for most or all of the revenue of many of its suppliers—by buying most of their output and blocking its competitors from using similar components—suppliers “<a href="https://www.ft.com/content/3d49b76a-1b76-11e7-a266-12672483791a" target="_blank" rel="noreferrer noopener">dare not put a foot wrong</a>” by speaking against Apple, or even mentioning it by name. In 2017, when Apple announced it was moving away from using UK-based Imagination Technologies for graphics processors, the company <a href="https://www.ft.com/content/3d49b76a-1b76-11e7-a266-12672483791a" target="_blank" rel="noreferrer noopener">lost two thirds of its value overnight</a>. Apple’s monopsony power means component suppliers have few buyers.</p>



<p>This economic power has allowed Apple to single-handedly push an enormous fraction of the world’s electronics supply chain to East Asia and to China specifically. A brief look at <a href="https://www.supplychainreports.apple/files/doc_downloads/2024/04/Apple-Supplier-List.pdf" target="_blank" rel="noreferrer noopener">Apple’s 2023 supplier list</a> reveals a vast range of hundreds of foreign suppliers, particularly in China. Only a handful are based in the United States; not nearly enough to maintain a resilient supply chain. Far from building U.S. capacity, Apple was <a href="https://www.scmp.com/tech/tech-trends/article/3159265/disruptions-apples-manufacturing-chain-and-cost-control-measures" target="_blank" rel="noreferrer noopener">adding new suppliers in China at a breakneck pace prior to and through the pandemic</a>, a dependence which led to <a href="https://www.reuters.com/business/retail-consumer/apple-others-face-shipment-delays-china-covid-curbs-squeeze-suppliers-analysts-2022-04-15/" target="_blank" rel="noreferrer noopener">delays and product shortages during lockdowns</a>. Apple had long been planning to use memory chips from China’s Yangtze Memory Technologies Co. (YMTC) in its iPhones, before the Department of Commerce banned YMTC and other Chinese chipmakers <a href="https://www.thompsonhinesmartrade.com/2023/10/bis-adds-13-chinese-companies-to-entity-list-for-involvement-in-developing-advanced-computing-chips/" target="_blank" rel="noreferrer noopener">from buying the equipment</a> needed to make the most advanced chips. Apple was going with YMTC because, as YMTC’s chips are heavily subsidized by the Chinese government, <a href="https://asia.nikkei.com/Business/Tech/Semiconductors/Apple-freezes-plan-to-use-China-s-YMTC-chips-amid-political-pressure" target="_blank" rel="noreferrer noopener">they were about 20% cheaper</a>, despite being technologically inferior to rivals like South Korea’s Samsung or American chipmaker Micron. Said another way, Apple was using Chinese subsidies to actively undermine Micron, the last remaining U.S. memory maker, until the U.S. government stepped in.</p>



<p>Apple’s moves to keep competitors locked out of the market further push supply chains abroad. Just last summer <a href="https://www.extremetech.com/computing/apple-reportedly-buying-all-of-tsmc-3nm-wafers-for-2023-thanks-to-intel" target="_blank" rel="noreferrer noopener">Apple announced a deal to buy 100% of the output of the most advanced chips</a> from TSMC in Taiwan, the company that makes 90% of the world’s leading edge chips. This move guaranteed that none of Apple’s competitors could use similar chips for more than a year. Also key to Apple’s smartphone strategy is control of the designs and intellectual property for the chips going into its devices. In maintaining its dominant position in smartphones, <a href="https://www.semiconductor-digest.com/apple-is-americas-semiconductor-problem/blank" target="_blank" rel="noreferrer noopener">Apple has pursued a chain of acquisitions in the market for chip design</a> to own the intellectual property over many of the most advanced chips. This has extended to <a href="https://www.theverge.com/24009254/apple-watch-itc-ban-patent-dispute" target="_blank" rel="noreferrer noopener">stealing core pieces of technology</a> from startups making new chips and electronic devices, only to have them manufactured and assembled abroad.</p>



<p>Fortunately, some actions are being taken. The <a href="https://www.nytimes.com/2024/01/05/technology/antitrust-apple-lawsuit-us.html" target="_blank" rel="noreferrer noopener">Department of Justice’s antitrust division</a> is reportedly investigating a potential monopolization case against Apple for many of these tactics. The International Trade Commission recently banned imports of several types of Apple watches over the company’s <a href="https://www.theverge.com/24009254/apple-watch-itc-ban-patent-dispute" target="_blank" rel="noreferrer noopener">theft of core pieces of technology</a>. However, more is needed, both to rein in Apple’s outsized chokehold over the chip market and to ensure the success of the CHIPS Act. Exclusive deals, like Apple’s deal to lock up 100% of TSMC’s capacity, should simply be illegal. As the world’s largest buyer of semiconductors, Apple’s hasty reassurances that it will buy some chips from Broadcom, made from old processes, does not put a dent in its sourcing of chips made abroad from cutting-edge processes. If Apple wants to source its chips for pennies from foreign suppliers, it should have to pay a price to do so, such as a <a href="https://www.economicliberties.us/wp-content/uploads/2024/02/20240117-AELP-IndPolSeries-CHIPS-Paper_v4-1.pdf#page=51" target="_blank" rel="noreferrer noopener">duty on imported iPhones using only foreign-sourced chips</a>. Realizing the promise of the CHIPS Act depends on acknowledging and addressing Apple’s outsized influence over our domestic chip industry.</p>
										</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Recent Performance Improvements in Function Calls in CPython (186 pts)]]></title>
            <link>https://blog.codingconfessions.com/p/are-function-calls-still-slow-in-python</link>
            <guid>41195225</guid>
            <pubDate>Thu, 08 Aug 2024 19:23:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.codingconfessions.com/p/are-function-calls-still-slow-in-python">https://blog.codingconfessions.com/p/are-function-calls-still-slow-in-python</a>, See on <a href="https://news.ycombinator.com/item?id=41195225">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><span>I came across this </span><a href="https://x.com/pmukherjee02/status/1816242069087596811" rel="">viral post</a><span> on X/Twitter where Pritam found that his Leetcode solution was slower when he was using Python’s </span><code>min</code><span> built-in function and the performance improved when he implemented </span><code>min</code><span> inline in his Python code. </span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png" width="594" height="440" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/81915a52-173f-441e-b896-d332fe6ce787_594x440.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:440,&quot;width&quot;:594,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:131726,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F81915a52-173f-441e-b896-d332fe6ce787_594x440.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>It’s true that function calls can be costly, they are known to be even more costly in interpreted languages such as Python. And the usual recommendation has been to inline your functions if they are part of the bottleneck.</p><p>The OP in this screenshot was using Python 2 which is an ancient history at this point of time. But Python 3 has been through multiple releases in the last decade and the last few releases have been very focused on improving the performance of the language. So is it still true that function calls are expensive in Python?</p><p>I was curious so I created 3 microbenchmarks to measure three things:</p><ul><li><p>What is the impact of calling a built-in in a loop</p></li><li><p>What is the impact of calling a Python function in a loop</p></li><li><p>And what is the impact of inlining that function in the loop</p></li></ul><p>Unsurprisingly, the results show that the performance of CPython has improved significantly in all the three areas with the recent releases. </p><p>In this post I am going to discuss the specific improvements introduced in CPython which help improve the performance of the interpreter. I am going to explain why things were slow previously and how the new change helps with that. Let’s dive in.</p><p>We will go over the three benchmarks one by one. For each benchmark we will look at the code, see the performance numbers across CPython releases and then discuss the specific optimization introduced in CPython which have led to the improvement across the releases.</p><p>Let’s start with the first benchmark where we are doing some simple computation inside a loop, such as computing a min from a list. The code is shown below. It uses a while loop instead of a more Pythonic for loop because the original code in the Twitter post was using a while loop and I wanted to stick to that.</p><pre><code>def benchmark1(heights):
    a = 1
    b = len(heights) - 1
    min_height = heights[0]
    while a &lt; b:
        if heights[a] &lt; min_height:
            min_height = heights[a]
        a += 1

    return min_height
</code></pre><p>Following are the performance numbers for this benchmark for last few CPython versions:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png" width="485" height="192" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:192,&quot;width&quot;:485,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:16604,&quot;alt&quot;:&quot;The timings for computing min of a list of values in a loop without invoking any function calls&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="The timings for computing min of a list of values in a loop without invoking any function calls" title="The timings for computing min of a list of values in a loop without invoking any function calls" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0cb6dca-5d9b-43ed-a8f6-b436b9785b2f_485x192.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The timings for computing min of a list of values in a loop without invoking any function calls</figcaption></figure></div><p>This benchmark is simply measuring the overhead of simple computation such as comparing two integers inside a loop. As we can see the interpreter has gotten significantly better at doing this with the recent releases. Now let’s discuss what internal optimizations are responsible for this.</p><p>One of the simple optimizations introduced in CPython was that of super instructions. These are special bytecode instructions that are generated by fusing together two consecutive instructions of specific types which tend to occur in pairs in programs. Let’s understand how it works in the context of this specific benchmark.</p><p><span>The image below shows the bytecode for the loop body of this benchmark for Python 3.14.0a0 (left) and Python 3.10 (right). In the loop the interpreter needs to repeatedly load the </span><code>heights[a]</code><span> and </span><code>min_height</code><span> values onto the stack before it can compare them. For loading these values onto the stack the interpreter executes the </span><code>LOAD_FAST</code><span> instruction.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png" width="1200" height="626.2806236080178" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:703,&quot;width&quot;:1347,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ed0e078-0e16-497c-ac91-339ebc81de39_1347x703.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>We can see a clear difference between the bytecode for the two Python versions. The 3.10 version contains two consecutive </span><code>LOAD_FAST</code><span> instructions, while the 3.14 version contains a single </span><code>LOAD_FAST_LOAD_FAST</code><span> instruction. </span></p><p>This is an example of a super instruction. It is generated by the compiler during an optimization pass after it generates the initial bytecode for the program. The following figure shows the code for this optimization in CPython, it was introduced during the 3.13 release.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png" width="728" height="364" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/50e7475a-338f-4024-8448-7f66930b9149_1076x538.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;normal&quot;,&quot;height&quot;:538,&quot;width&quot;:1076,&quot;resizeWidth&quot;:728,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;The implementation of the superinstruction optimization inside the CPython compiler. File: flowgraph.c&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="The implementation of the superinstruction optimization inside the CPython compiler. File: flowgraph.c" title="The implementation of the superinstruction optimization inside the CPython compiler. File: flowgraph.c" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F50e7475a-338f-4024-8448-7f66930b9149_1076x538.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The implementation of the superinstruction optimization inside the CPython compiler. File: flowgraph.c</figcaption></figure></div><p>The main benefit of this optimization is that it reduces the amount of work done by the interpreter. Interpreting every instruction requires fetching the next opcode, decoding it, and then jumping to the code where the implementation of that bytecode is present. This is a small amount of overhead but inside a hot loop everything magnifies.</p><p>Additionally, this also helps the CPU execute the interpreter loop efficiently. Having fewer bytecode instructions in the interpreter means fewer jumps for the CPU as well. Having fewer jumps in a tight loop results in improved instruction cache locality, and better usage of the branch predictor because the freed up branch table entries could be used for other branches. </p><p><span>Moreover, the implementation of the </span><code>LOAD_FAST_LOAD_FAST</code><span> instruction in the interpreter provides the CPU with an opportunity to increase its instruction throughput. Modern CPUs can process multiple instructions in parallel, a capability known as instruction-level parallelism, provided there are enough independent instructions available. In the case of </span><code>LOAD_FAST_LOAD_FAST</code><span>, its implementation contains several instructions that are independent of each other, allowing them to be executed concurrently.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png" width="1200" height="463.1578947368421" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png&quot;,&quot;srcNoWatermark&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8e703af9-aeb3-49a5-9955-e84b834bead4_1140x440.png&quot;,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:440,&quot;width&quot;:1140,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:91416,&quot;alt&quot;:&quot;The implementation of the LOAD_FAST_LOAD_FAST instruction in the CPython bytecode interpreter. The simultaneous loading of two values onto the stack provides the CPU to perform those instructions in parallel due to instruction level parallelism&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="The implementation of the LOAD_FAST_LOAD_FAST instruction in the CPython bytecode interpreter. The simultaneous loading of two values onto the stack provides the CPU to perform those instructions in parallel due to instruction level parallelism" title="The implementation of the LOAD_FAST_LOAD_FAST instruction in the CPython bytecode interpreter. The simultaneous loading of two values onto the stack provides the CPU to perform those instructions in parallel due to instruction level parallelism" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52d76065-d018-4351-9311-22a48ca2ab08_1140x440.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The implementation of the LOAD_FAST_LOAD_FAST instruction in the CPython bytecode interpreter. The simultaneous loading of two values onto the stack provides the CPU to perform those instructions in parallel due to instruction level parallelism</figcaption></figure></div><p><span>The 2nd optimization which is massively helping the performance for this benchmark is </span><a href="https://peps.python.org/pep-0659/" rel="">instruction specialization</a><span> introduced in CPython 3.12 release. </span></p><p><span>If you look at the bytecode from the previous section again, you should notice that the interpreter needs to repeatedly execute the </span><code>COMPARE_OP</code><span> and </span><code>BINARY_OP</code><span> for doing comparison and increment operations inside the loop. </span></p><p><span>These instructions are relatively expensive to execute because they involve dynamic dispatch. I’ve discussed what exactly goes on behind the scenes here in my article “</span><a href="https://blog.codingconfessions.com/p/cpython-dynamic-dispatch-internals" rel="">How Many Lines of C it Takes to Execute a + b in Python?</a><span>“. But let me give the summary. </span></p><p><span>When the interpreter needs to handle instructions such as </span><code>BINARY_OP</code><span> or </span><code>COMPARE_OP</code><span>, it receives the operands on the stack. The interpreter is unaware of the concrete types of these operand objects, whether they are ints, strings, floats or something else, and as a result it does not know how to handle this specific operation for the operands at hand. The interpreter figures out how to handle the operation by doing a function pointer lookup inside the operand objects. But it involves a massive amount of pointer chasing.</span></p><ul><li><p>The interpreter first needs to dereference the operand object</p></li><li><p>Next, it needs to dereference the pointer to the PyTypeObject field (ob_type) which contains the function pointer tables</p></li><li><p>Then the interpreter needs to dereference the function pointer table and lookup the function pointer</p></li><li><p>Finally, it needs to dereference the function pointer itself to call the function.</p></li></ul><p>The following figure illustrates this pointer chasing.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png" width="1200" height="589.2857142857143" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png&quot;,&quot;srcNoWatermark&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/528d2397-6915-48e6-845e-7ab1e306cca3_1556x764.png&quot;,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:715,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:149619,&quot;alt&quot;:&quot;The amount of indirection involved when the bytecode interpreter needs to handle a binary op or a comparison op&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="The amount of indirection involved when the bytecode interpreter needs to handle a binary op or a comparison op" title="The amount of indirection involved when the bytecode interpreter needs to handle a binary op or a comparison op" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff77293c6-c6ac-4b12-b5d6-247d114f846d_1556x764.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The amount of indirection involved when the bytecode interpreter needs to handle a binary op or a comparison op</figcaption></figure></div><p>This level of indirection is bad at the CPU level because all of these pointer dereferences are dependent memory loads. It means that the CPU needs to wait for the first load to finish before it can proceed with the next. It reduces the instruction throughput, and if any of those loads have a cache miss, it can cause a long stall of hundreds of cycles until the data arrives from the main memory.</p><p><span>But thanks to instruction specialization, the slow </span><code>BINARY_OP</code><span> and </span><code>COMPARE_OP</code><span> instructions are converted to specialized instructions such as </span><code>BINARY_ADD_INT</code><span> where the add operation is done directly in the interpreter without doing any pointer lookups. </span></p><p><span>This is a slight variation of the previous benchmark. Here instead of doing the min computation ourselves, we are calling the built-in </span><code>min</code><span> function. The code for this benchmark is below:</span></p><pre><code>def benchmark2(heights):
    a = 1
    b = len(heights) - 1
    min_height = heights[0]
    while a &lt; b:
        min_height = min(heights[a], min_height)
        a += 1

    return min_height
</code></pre><p>This benchmark is measuring the overhead involved in calling a built-in function. The following table shows the improvement in CPython’s performance for this across releases.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png" width="581" height="189" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:189,&quot;width&quot;:581,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:17839,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcffe67-219d-4ef4-8e44-a3efae3dbdc5_581x189.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>There have been two changes which can be attributed to the improvement of this version from 17.33 seconds in Python 3.10 to 6.7 seconds in Python 3.14.0a0. Let’s discuss those.</p><p>Let’s take a look at the bytecode for the code of this benchmark.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png" width="953" height="540" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c3033048-9738-4242-9072-a55e02d1225a_953x540.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:540,&quot;width&quot;:953,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:94620,&quot;alt&quot;:&quot;Bytecode for the version2 of the benchmark for CPython 3.14.0a0&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="Bytecode for the version2 of the benchmark for CPython 3.14.0a0" title="Bytecode for the version2 of the benchmark for CPython 3.14.0a0" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3033048-9738-4242-9072-a55e02d1225a_953x540.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Bytecode for the version2 of the benchmark for CPython 3.14.0a0</figcaption></figure></div><p><span>When executing this, the interpreter needs to load the </span><code>min()</code><span> built-in function onto the stack. For doing that it executes the </span><code>LOAD_GLOBAL</code><span> instruction.</span></p><p><span>The </span><code>LOAD_GLOBAL</code><span> instruction needs to lookup the named global object in two dictionaries. The first dictionary contains all the globals in the current scope, and the second contains all the builtins.</span></p><p><span>Dictionary lookups are fast but they are not free. Again, thanks to instruction specialization the interpreter optimizes this into a specialized instruction: </span><code>LOAD_GLOBAL_BUILTIN</code><span>.</span></p><p>The specialized instruction caches the index of the object in the builtins dictionary. It avoids the entire dictionary lookup process and simply returns the object at the cached index value. The following figure shows how the interpreter implements this instruction.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png" width="1200" height="281.86813186813185" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:342,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:91702,&quot;alt&quot;:&quot;The implementation of the LOAD_GLOBAL_BUILTIN instruction in the CPython bytecode interpreter&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="The implementation of the LOAD_GLOBAL_BUILTIN instruction in the CPython bytecode interpreter" title="The implementation of the LOAD_GLOBAL_BUILTIN instruction in the CPython bytecode interpreter" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28c22888-7d4d-42b1-b405-2036a4e876c2_1588x373.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The implementation of the LOAD_GLOBAL_BUILTIN instruction in the CPython bytecode interpreter</figcaption></figure></div><p><span>But the specialization of </span><code>LOAD_GLOBAL</code><span> into </span><code>LOAD_GLOBAL_BUILTIN</code><span> is not the main contributor to the impressive improvement of this benchmark. The real reason is a specific optimization applied to the </span><code>min</code><span> and </span><code>max</code><span> builtins. </span></p><p><span>There are two calling conventions inside the interpreter for calling functions, one is the old convention called </span><code>tp_call</code><span> and the other is </span><code>vectorcall</code><span>. </span></p><p><span>When using </span><code>tp_call</code><span>, intermediate tuples and dictionaries are created for passing the function arguments and there might be overhead of other intermediate objects as well (more details described in the </span><a href="https://peps.python.org/pep-0590/" rel="">PEP 0590</a><span>). In the </span><code>vectorcall</code><span> convention, the arguments are passed as part of a vector which eliminates a lot of the intermediate object creation.</span></p><p><span>Before the CPython 3.13 release, the </span><code>min</code><span> and </span><code>max</code><span> builtins were being called using the </span><code>tp_call</code><span> convention. This meant that calling these inside a hot loop would allocate and deallocate a ton of intermediate objects. By switching to the </span><code>vectorcall</code><span> convention the performance of these builtins has been reported to improve by upto 200%, and even in this benchmark it shows an improvement of more than 150%.</span></p><p><span>You can read the PR of this change </span><a href="https://github.com/python/cpython/issues/90350" rel="">here</a><span> for more context.</span></p><p>Finally, let’s discuss what changes are behind the performance improvements of the 3rd benchmark which implements min as a Python function and calls it from inside the loop. The code is shown below.</p><pre><code>def pymin(a, b):
    if a &lt;= b:
        return a
    return b
	

def benchmark3(heights):
    a = 1
    b = len(heights) - 1
    min_height = heights[0]
    while a &lt; b:
        min_height = pymin(heights[a], min_height)
        a += 1

    return min_height
</code></pre><p>The following table shows the performance of different CPython releases for this benchmark:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png" width="577" height="188" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/cbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:188,&quot;width&quot;:577,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:18356,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcbbadcb0-368e-405b-a862-2e5221b87c3c_577x188.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>As per the numbers in the table for this benchmark version, the performance improved significantly from 3.10 to 3.12 and then marginally for 3.14.0a0. </p><p>This benchmark is essentially measuring the overhead involved in executing a python to python function call (because both the caller and callee are implemented in Python).</p><p>Until Python 3.11 the way Python to Python function calls were handled in the interpreter was convoluted and expensive, it involved the interpreter invoking itself recursively for handling each such function call. This recursion got inlined in CPython 3.11 release, leading to significant performance improvements. Let’s understand it in detail.</p><p><span>The interpreter starts the execution of a Python program from the program’s main function. This is done by first setting up the stackframe for the main function and then invoking the interpreter. The entry point of the interpreter is the function </span><code>_PyEval_EvalFrameDefault</code><span> defined in </span><a href="https://github.com/python/cpython/blob/3.13/Python/ceval.c#L676" rel="">ceval.c</a><span>. </span></p><blockquote><p><em><strong>What is a stackframe?</strong><span> Execution of every function in your code requires a corresponding stackframe. The stackframe contains the locals and globals of that function, the compiled bytecode, instruction pointer etc which help the interpreter execute the code. For more details you can watch the recording of my talk on </span><a href="https://blog.codingconfessions.com/p/recording-of-live-session-on-cpython" rel="">CPython Virtual Machine Internals</a><span> which covers how the virtual machine is implemented in CPython.</span></em></p></blockquote><p><span>The </span><code>_PyEval_EvalFrameDefault</code><span> function contains a giant switch case for handling all the bytecode instructions supported by the interpreter. The function iterates through the instructions of the given function and executes the corresponding switch case.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png" width="1212" height="724" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/eaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png&quot;,&quot;srcNoWatermark&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fa76651b-3730-4a24-acf6-0d80804859f8_1212x724.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:724,&quot;width&quot;:1212,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;An example of the bytecode evaluation loop of a toy VM implemented in Python. The interpreter loops through each bytecode instruction and based on the opcode handles it. The CPython VM is implemented in C, this is just to give an idea.&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="An example of the bytecode evaluation loop of a toy VM implemented in Python. The interpreter loops through each bytecode instruction and based on the opcode handles it. The CPython VM is implemented in C, this is just to give an idea." title="An example of the bytecode evaluation loop of a toy VM implemented in Python. The interpreter loops through each bytecode instruction and based on the opcode handles it. The CPython VM is implemented in C, this is just to give an idea." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaacabce-9244-44ed-930c-b09b2e48323c_1212x724.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>An example of the bytecode evaluation loop of a toy VM implemented in Python. The interpreter loops through each bytecode instruction and based on the opcode handles it. The CPython VM is implemented in C, this is just to give an idea.</figcaption></figure></div><p><span>When you call another function in your Python code, it results in the </span><code>CALL</code><span> bytecode instruction being generated. When the interpreter encounters a </span><code>CALL</code><span> instruction, things get interesting. </span></p><p><span>In CPython 3.10 and earlier, the </span><code>CALL</code><span> instruction used to create a new interpreter stackframe for the function being called and then it used to recursively reenter the interpreter by calling its entry point </span><code>_PyEval_EvalFrameDefault</code><span>.</span></p><p>This was bad for performance from many angles at the hardware level. The recursive call into the interpreter required saving the registers for the current function, and pushing a new C stackframe. It would lead to increased memory usage because each recursive interpreter call would allocate its own local variables on the stack, and other heap allocations. Apart from that it would also lead to poor instruction cache locality due to the constant jumps in and out of the bytecode evaluation loop.</p><p><span>In the 3.11 release this was fixed by eliminating the recursive call to the interpreter. Now the </span><code>CALL</code><span> instruction simply creates the stackframe for the called function, after that it immediately starts evaluating the new function’s bytecode without ever leaving the loop. </span></p><blockquote><h6><em>Note: Your code may be calling a function which is implemented in C, or it could be calling a function written in Python. The above discussion is about a Python function call. In the case of a C function call the interpreter never needed to do all the gymnastics discussed above.</em></h6></blockquote><p><span>You can read the discussion behind this change in the </span><a href="https://bugs.python.org/issue45256" rel="">CPython bug tracker</a><span>.</span></p><p><span>While most of the improvement seen in the performance of this benchmark is due to the inlining described above, there is another minor improvement related to function call execution in the interpreter. It is the specialization of the </span><code>CALL</code><span> instruction.</span></p><p><span>The </span><code>CALL</code><span> instruction is a generic instruction for executing all kinds of callables. When handling it, the interpreter needs to check the type of the callable, such as whether it is a class method, instance method, a function or something else, and based on that it needs to invoke the callable in the right manner. </span></p><p>The specialization of this instruction saves all of this extra work for the interpreter and inside a tight loop it might help improve the performance.</p><p>In this article, we’ve dug into the nitty-gritty of Python performance, specifically looking at the cost of function calls, built-in calls and inlining code in a hot loop. We saw how recent tweaks in CPython have made things faster. Our benchmarks showed some solid performance boosts from Python 3.10 to Python 3.14.0a0. Here’s a quick rundown of what’s behind those gains:</p><ul><li><p><strong>Super Instructions</strong><span>: By merging back-to-back bytecode instructions into single “super” instructions like </span><code>LOAD_FAST_LOAD_FAST</code><span>, CPython cuts down on the overhead of running individual bytecode instructions. This boost helps both the interpreter and the CPU run more efficiently.</span></p></li><li><p><strong>Bytecode Instruction Specialization</strong><span>: New specialized bytecode instructions (like </span><code>BINARY_ADD_INT</code><span>) remove the need for slow, dynamic dispatch, speeding up everyday operations.</span></p></li><li><p><strong>Optimization of Builtins</strong><span>: Switching from the older </span><code>tp_call</code><span> method to the faster </span><code>vectorcall</code><span> has given a big performance push to the </span><code>min</code><span> and </span><code>max</code><span> builtins.</span></p></li><li><p><strong>Inlining Python-to-Python Function Calls</strong><span>: By getting rid of the old way of handling Python-to-Python function calls (which involved cumbersome recursive interpreter calls), newer versions like CPython 3.11 make these function calls faster and smoother.</span></p></li></ul><p><span>Overall, these changes show Python’s ongoing effort to get faster and more efficient. But before taking any of the findings from these articles and applying to your code, remember to first profile and measure to find the slowest paths (</span><a href="https://en.wikipedia.org/wiki/Amdahl%27s_law" rel="">Amdahl's law</a><span>).</span></p><ul><li><p><a href="https://bugs.python.org/issue45256" rel="">Inlining the handling of Python-to-Python function calls in the interpreter</a></p></li><li><p><a href="https://github.com/python/cpython/issues/90350" rel="">Optimization of min and max in CPython</a></p></li><li><p><a href="http://PEP 659 – Specializing Adaptive Interpreter" rel="">PEP 659 – Specializing Adaptive Interpreter</a></p></li><li><p><a href="https://blog.codingconfessions.com/p/recording-of-live-session-on-cpython" rel="">CPython Virtual Machine Internals</a></p></li><li><p><a href="https://blog.codingconfessions.com/p/cpython-dynamic-dispatch-internals" rel="">Dynamic dispatch internals of CPython</a></p></li></ul><p>If you find my work interesting and valuable, you can support me by opting for a paid subscription (it’s $6 monthly/$60 annual). As a bonus you get access to monthly live sessions, and all the past recordings. </p><p><span>Many people report failed payments, or don’t want a recurring subscription. For that I also have a </span><a href="https://buymeacoffee.com/codeconfessions" rel="">buymeacoffee page</a><span>. Where you can buy me coffees or become a member. I will upgrade you to a paid subscription for the equivalent duration here.</span></p><p data-attrs="{&quot;url&quot;:&quot;https://buymeacoffee.com/codeconfessions&quot;,&quot;text&quot;:&quot;Buy me a coffee&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a href="https://buymeacoffee.com/codeconfessions" rel=""><span>Buy me a coffee</span></a></p><p>I also have a GitHub Sponsor page. You will get a sponsorship badge, and also a complementary paid subscription here.</p><p data-attrs="{&quot;url&quot;:&quot;https://github.com/sponsors/abhinav-upadhyay&quot;,&quot;text&quot;:&quot;Sponsor me on GitHub&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a href="https://github.com/sponsors/abhinav-upadhyay" rel=""><span>Sponsor me on GitHub</span></a></p><p data-attrs="{&quot;url&quot;:&quot;https://blog.codingconfessions.com/p/are-function-calls-still-slow-in-python?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://blog.codingconfessions.com/p/are-function-calls-still-slow-in-python?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Intel's Immiseration (179 pts)]]></title>
            <link>https://thechipletter.substack.com/p/intels-immiseration</link>
            <guid>41195124</guid>
            <pubDate>Thu, 08 Aug 2024 19:11:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thechipletter.substack.com/p/intels-immiseration">https://thechipletter.substack.com/p/intels-immiseration</a>, See on <a href="https://news.ycombinator.com/item?id=41195124">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><blockquote><p>How did you go bankrupt? </p><p>Two ways. Gradually, then suddenly.</p><p><em>Ernest Hemingway, The Sun Also Rises</em></p></blockquote><p>Last Thursday was a historically bad day for Intel’s share price.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg" width="728" height="499.2290502793296" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;normal&quot;,&quot;height&quot;:982,&quot;width&quot;:1432,&quot;resizeWidth&quot;:728,&quot;bytes&quot;:133309,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F46d310b5-7985-49b4-85f3-ee805dbc287e_1432x982.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>This fall left Intel with a market capitalization lower than Arm.</p><p>The proximate cause was Intel’s Q2 2024 results. </p><p>I’m not sure ‘Highlights’ is quite the right word here.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg" width="1456" height="819" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:336838,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b59f909-a70a-45f8-9419-ec95b1304ae3_2666x1500.jpeg 1456w" sizes="100vw"></picture></div></a></figure></div><p>Revenue for the quarter was a third lower than in the corresponding quarter three years ago.</p><p>The Q3 2024 outlook had revenue, gross margin, and EPS all down. </p><p><span>Ben Bajarin on the excellent </span><a href="https://share.transistor.fm/s/c43d6222" rel="">Circuit podcast</a><span> caught the mood:</span></p><blockquote><p>The numbers were bad. When I say disappointing, I mean this at an emotional level as well. I really believed things were on a steady, sustainable path to recovery. I thought after we went through the bottom last year, this time we talked about them being at an all-time low for gross margins … I thought this was going to be pretty consistent, like it’s never going to be great, but it’s not going to be that bad again. And it’s that bad again, if not worse …</p></blockquote><p>Meanwhile, Intel’s highlighted ‘good news’ on products was underwhelming. No amount of AI magic dust can disguise the fact that this is about laptop SoCs a market in which Intel faces new and vigorous competition.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg" width="1456" height="819" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:441016,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F637ac7da-b731-4c98-b7df-c65851d8485b_2666x1500.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Intel’s management reached for the ‘cost-cutting’ lever with a plan to cut the company’s headcount by as much as 15%.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg" width="1456" height="819" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:504866,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd1181ce1-e9a5-4e50-be95-af1f5523b68d_2666x1500.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I know that I have many readers who work at Intel. I’m truly sorry for anyone who is affected by these job losses.</p><p><span>An </span><a href="https://www.theverge.com/2024/8/1/24210656/intel-is-laying-off-over-10000-employees-and-will-cut-10-billion-in-costs" rel="">internal memo</a><span> from CEO Pat Gelsinger summed up how tough things are:</span></p><blockquote><p>I have no illusions that the path in front of us will be easy. You shouldn’t either. This is a tough day for all of us and there will be more tough days ahead.</p></blockquote><p>Complicating the picture is Intel’s status as the last US-controlled at or close to leading-edge logic maker and the recipient of billions of dollars from the CHIPS and Science Act. While it retains this status then it’s impossible to see Intel following Hemingway’s character into bankruptcy. The importance of this status means that we can perhaps see Intel CEO Pat Gelsinger’s focus on ‘5 nodes in 4 years’ as being about the politics of retaining this status, alongside its commercial importance.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg" width="1456" height="819" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:447753,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F07c91190-2c1b-40f7-afdc-0e1525150f6e_2666x1500.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>This fell on deaf ears at the WSJ though:</p><blockquote><p>Intel has been awarded $8.5 billion in grants and up to $11 billion in loans to expand U.S. manufacturing production.</p><p>While chasing subsidies, Intel missed out on the AI boom, which has cost it dearly as competitors surge ahead. Now it’s playing catch-up. When government steers capital, companies sometimes get distracted and drive into a cul-de-sac.</p></blockquote><p><span>If some reacted with shock at these results, the response from others was more optimistic. A few quotes from </span><a href="https://www.noahpinion.blog/i/147317784/intels-troubles-and-american-short-termism" rel="">a recent post</a><span> from popular economics blogger Noah Smith capture this reaction well:</span></p><blockquote><p>And Intel’s job cuts, painful as they are for the workers affected, are a cost-cutting move that will free up more cash to invest in the company’s recovery plan. Whether that plan will succeed isn’t clear yet, but if you were going to turn a company like Intel around, this is probably how you’d start.</p></blockquote><blockquote><p>Meanwhile, Intel’s turnaround plans — including a foundry business like TSMC’s and investments in AI chips — are still in the early stages. One reason profits have fallen at Intel is that it’s investing heavily.</p></blockquote><p>Smith’s defense against the criticism of wasted dollars and the need for patience might be reasonable, but I’m not sure that presenting this as the ‘start’ and ‘early stages’ of a turnaround plan is credible.</p><p>Gelsinger started his tenure as Intel CEO in February 2021. Generally, a company that’s three and a half years into a turn-around, needs more to show than a partial fix to manufacturing issues to convince investors that the plan is on track.</p><p>What makes all this worse is that the ‘gradually’ in Hemingway’s quote we started this post seems entirely apt. This isn’t a sudden fall from grace. I’d argue that there has been a sense of inevitability about Intel’s trajectory for at least a decade.</p><p>Before revisiting the roots of Intel’s decline, let’s set aside some commonly cited candidates that I don’t think can be blamed as the primary cause of Intel’s woes.</p><ul><li><p>There have been some important key failures. In particular the delays in adopting EUV lithography and the persistent problems with the roll-out of its 10nm process node. This led to Intel ceding process leadership to TSMC.</p></li><li><p>There have been clear one-off M&amp;A missteps - the strange acquisition of McAfee being the most glaring. Although some have been expensive the worst that can be said of them is that they were a distraction and symptomatic of a lack of focus.</p></li></ul><p>Equally, a simplistic placing of blame on ‘bean counters’ doesn’t seem right. Intel has had a CEO with a finance background only during Bob Swan’s brief tenure which ended with Pat Gelsinger’s return to the company in 2021.</p><p>Rather, the real root of Intel’s problems lies in its inability to expand beyond the ‘moat’ of its x86 desktop and server processor business.</p><p>Readers will remember that I’ve written about this before, in ‘The Paradox of x86’:</p><p>From this earlier post:</p><blockquote><p>… the moat provided by x86 erected multiple barriers to breaking away from the x86 desktop / server core of Intel’s business.</p><p>First, in 2006 Intel’s x86 business was hugely profitable. Why would the company add any risk to that business? In particular why would the company:</p><ul><li><p>Take resources from x86 to focus on lower return projects?</p></li><li><p>Open up its market-leading fabs to architectures that might ultimately challenge x86 on the desktop and on servers?</p><p>…</p></li></ul><p>Second, Intel’s desktop and server x86 business was hugely profitable. Why dilute that business making SoCs using someone else’s processor architecture, a much lower margin business with a smaller moat?</p></blockquote><p>This ‘moat’ was one factor in Intel's missing the smartphone System-on-Chip market:</p><blockquote><p>Intel passed on making the System on Chip for Apple’s new iPhone, launched at the start of 2007. Instead Apple used an Arm designed processor in an SoC built by Samsung.</p><p>Too late Intel realised the mistake. Over ten billion of dollars were spent on an, ultimately futile, attempt to gain a foothold in the smartphone SoC market. Intel finally gave up in 2016, ceding the market to Arm processors in SoCs made by Samsung and TSMC.</p><p>Today, Apple is TSMC’s biggest customer, and smartphones make up over 40% of the Taiwanese company’s revenues.</p></blockquote><p>This ‘miss’ has hung over the company ever since.</p><p>And it’s left a, still unanswered, question. Intel couldn't break into smartphone SoCs with clear process leadership and the financial strength to invest heavily. Why should it be able to break into other competitive markets today when it no longer has those advantages?</p><p>I’ll leave it to others to try to answer this question - please see some of the links below discussing Intel’s recent results. </p><p>The importance of the story of Intel’s smartphone miss though means that I believe it’s worth revisiting in more detail and we’ll do so in the next post.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Molecule restores cognition, memory in Alzheimer's disease model mice (124 pts)]]></title>
            <link>https://www.uclahealth.org/news/release/molecule-restores-cognition-memory-alzheimers-disease-model</link>
            <guid>41194750</guid>
            <pubDate>Thu, 08 Aug 2024 18:34:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.uclahealth.org/news/release/molecule-restores-cognition-memory-alzheimers-disease-model">https://www.uclahealth.org/news/release/molecule-restores-cognition-memory-alzheimers-disease-model</a>, See on <a href="https://news.ycombinator.com/item?id=41194750">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
      <p><span lang="EN-US">In a new </span><a href="https://www.pnas.org/doi/10.1073/pnas.2400420121#core-collateral-metrics" target="_blank" rel="noreferrer noopener"><span lang="EN-US">study</span></a><span lang="EN-US">, a molecule identified and synthesized by UCLA Health researchers was shown to restore cognitive functions in mice with symptoms of Alzheimer’s disease by effectively jumpstarting the brain's memory circuitry.</span><span>&nbsp;</span></p><p><span lang="EN-US">If proven to have similar effects in humans, the candidate compound would be novel among Alzheimer’s disease treatments in its ability to revitalize memory and cognition, study authors said.</span></p><p><span lang="EN-US">“There is really nothing like this on the market or experimentally that has been shown to do this,” said study lead author Dr. </span><a href="https://bri.ucla.edu/people/istvan-mody/" target="_blank" rel="noreferrer noopener"><span lang="EN-US">Istvan Mody</span></a><span lang="EN-US">, a professor of neurology and physiology at UCLA Health.</span><span>&nbsp;</span></p><p><span lang="EN-US">The molecule, DDL-920, works differently from recent FDA-approved drugs for Alzheimer’s disease such as </span><span lang="EN-US">lecanemab</span><span lang="EN-US"> and aducanumab, which remove harmful plaque that accumulates in the brains of Alzheimer’s disease patients. While removing this plaque has been shown to slow the rate of cognitive decline, it does not restore the memory and cognitive impairments.&nbsp;</span><span>&nbsp;</span></p><p><span lang="EN-US">“They leave behind a brain that is maybe plaqueless, but all the pathological alterations in the circuits and the mechanisms in the neurons are not corrected,” Mody said.</span><span>&nbsp;</span></p><p><span lang="EN-US">In the study, published in the journal </span><em><span lang="EN-US">The Proceedings of the National Academy of Sciences</span></em><span lang="EN-US">, UCLA researchers led by Dr. Istvan Mody and Dr. </span><a href="https://eastonad.ucla.edu/people/varghese-john-phd" target="_blank" rel="noreferrer noopener"><span lang="EN-US">Varghese John</span></a><span lang="EN-US">, professor of neurology, and director of the Drug Discovery Laboratory (DDL) at the </span><a href="https://eastonad.ucla.edu/" target="_blank" rel="noreferrer noopener"><span lang="EN-US">Mary S. Easton Center for Alzheimer's Disease Research and Care</span></a><span lang="EN-US"> sought to find a compound that could figuratively flip the switch back on in the brain’s memory circuitry.&nbsp;</span><span>&nbsp;</span></p><p><span lang="EN-US">Similar to a traffic signal, the brain fires off electric signals at different rhythms to start and stop various functions. Gamma oscillations are some of the highest-frequency rhythms and have been shown to orchestrate brain circuits underlying cognitive processes and working memory – the type of memory used to remember a phone number. Patients with early Alzheimer’s disease symptoms such as mild cognitive impairment have been shown to have reduced gamma oscillations, Mody said.&nbsp;</span><span>&nbsp;</span><br><span lang="EN-US"></span></p><p><span lang="EN-US">Other studies attempted to use neuromodulation techniques to stimulate gamma oscillations to restore memory. Auditory, visual or transcranial magnetic stimulation at a frequency of 40 Hz – similar to the frequency of a cat’s purr – worked to dissolve plaques in the brain but again did not show notable cognitive enhancements, Mody said.&nbsp;</span><span>&nbsp;</span></p><p><span lang="EN-US">In this latest study, Mody and his team sought to tackle the problem from a different perspective. If they could not jumpstart these memory circuits using external tools, perhaps there was a way to trigger these electrical rhythms from the inside using a molecule.</span><span>&nbsp;</span></p><p><span lang="EN-US">Specifically, they needed a compound to target certain fast-firing neurons, known as the </span><span lang="EN-US">paravalbumin</span><span lang="EN-US"> interneurons, that are critical in generating gamma oscillations and therefore memory and cognitive functions. However, certain chemical receptors in these neurons that respond to the chemical messenger known as GABA work like brake pedals to reduce the gamma oscillations entrained by these neurons.&nbsp;</span><span>&nbsp;</span></p><p><span lang="EN-US">Mody, John and their team identified the compound DDL-920 to antagonize these receptors, allowing the neurons to sustain more powerful gamma oscillations.&nbsp;</span><span>&nbsp;</span></p><p><span lang="EN-US">To test whether this would actually result in improved memory and cognition, researchers used mice that were genetically modified to have symptoms of Alzheimer’s disease.</span></p><p><span lang="EN-US">Both these Alzheimer’s disease model mice and wild-type mice underwent baseline cognitive testing in a Barnes maze – a circular platform surrounded by visual clues and containing one escape hole. The maze is used to measure how well rodents can learn and remember the location of the escape hole.</span><span>&nbsp;</span></p><p><span lang="EN-US">After the initial tests, researchers orally administered DDL-920 to the Alzheimer’s model mice twice daily for two weeks. Following treatment, the Alzheimer’s disease model mice were able to recall the escape hole in the maze at similar rates as the wild-type mice. Additionally, the treated mice did not display any abnormal behavior, hyperactivity or other visible side effects over the two-week period.</span><span>&nbsp;</span></p><p><span lang="EN-US">Mody said that while the treatment was effective in mice, much more work would be needed to determine if the treatment would be safe and effective in humans. Should it ultimately prove to be effective, the drug could have implications for treatments of other diseases and health conditions that have diminished gamma oscillations such as depression, schizophrenia and autism spectrum disorder, Mody said.</span><span>&nbsp;</span></p><p><span lang="EN-US">“We are very enthusiastic about that because of the novelty and the mechanism of action that has not been tackled in the past,” Mody said.</span><span>&nbsp;</span></p><p><em><span lang="EN-US">Article: A therapeutic small molecule enhances γ-oscillations and improves cognition/memory in Alzheimer’s disease model mice, Wei et al., </span></em><span lang="EN-US">Proceedings of the National Academy of Sciences, Volume 121, No. 33, 2024, </span><a href="https://doi.org/10.1073/pnas.2400420121" target="_blank" rel="noreferrer noopener"><span lang="EN-US">https://doi.org/10.1073/pnas.2400420121</span></a><span lang="EN-US"></span><span>&nbsp;</span></p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Launch HN: Stack Auth (YC S24) – An Open-Source Auth0/Clerk Alternative (261 pts)]]></title>
            <link>https://github.com/stack-auth/stack</link>
            <guid>41194673</guid>
            <pubDate>Thu, 08 Aug 2024 18:23:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/stack-auth/stack">https://github.com/stack-auth/stack</a>, See on <a href="https://news.ycombinator.com/item?id=41194673">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/logo.png"><img src="https://github.com/stack-auth/stack/raw/dev/.github/assets/logo.png" alt="Stack Logo"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">
  <a href="https://docs.stack-auth.com/" rel="nofollow">📘 Docs</a>
  | <a href="https://stack-auth.com/" rel="nofollow">☁️ Hosted Version</a>
  | <a href="https://demo.stack-auth.com/" rel="nofollow">✨ Demo</a>
  | <a href="https://discord.stack-auth.com/" rel="nofollow">🎮 Discord</a>
</h3><a id="user-content----docs---️-hosted-version----demo----discord" aria-label="Permalink: 📘 Docs
  | ☁️ Hosted Version
  | ✨ Demo
  | 🎮 Discord" href="#---docs---️-hosted-version----demo----discord"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Stack Auth: Open-source Clerk/Auth0 alternative</h2><a id="user-content-stack-auth-open-source-clerkauth0-alternative" aria-label="Permalink: Stack Auth: Open-source Clerk/Auth0 alternative" href="#stack-auth-open-source-clerkauth0-alternative"></a></p>
<p dir="auto">Stack Auth is a managed user authentication solution. It is developer-friendly and fully open-source (licensed under MIT and AGPL).</p>
<p dir="auto">Stack gets you started in just five minutes, after which you'll be ready to use all of its features as you grow your project. Our managed service is completely optional and you can export your user data and self-host, for free, at any time.</p>
<p dir="auto">We support Next.js frontends, along with any backend that can use our <a href="https://docs.stack-auth.com/rest-api/auth" rel="nofollow">REST API</a>. Check out our <a href="https://docs.stack-auth.com/getting-started/setup" rel="nofollow">setup guide</a> to get started.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/create-project.gif"><img alt="Stack Setup" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/create-project.gif" height="328" width="400" data-animated-image=""></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Table of contents</h2><a id="user-content-table-of-contents" aria-label="Permalink: Table of contents" href="#table-of-contents"></a></p>


<ul dir="auto">
<li><a href="#how-is-this-different-from-x">How is this different from X?</a></li>
<li><a href="#-features">✨ Features</a></li>
<li><a href="#-installation--setup">📦 Installation &amp; Setup</a></li>
<li><a href="#-some-community-projects-built-with-stack">🌱 Some community projects built with Stack</a>
<ul dir="auto">
<li><a href="#templates">Templates</a></li>
<li><a href="#examples">Examples</a></li>
</ul>
</li>
<li><a href="#-development--contribution">🏗️ Development &amp; Contribution</a>
<ul dir="auto">
<li><a href="#requirements">Requirements</a></li>
<li><a href="#setup">Setup</a></li>
<li><a href="#database-migrations">Database migrations</a></li>
</ul>
</li>
<li><a href="#-contributors">❤️ Contributors</a></li>
</ul>

<p dir="auto"><h2 tabindex="-1" dir="auto">How is this different from X?</h2><a id="user-content-how-is-this-different-from-x" aria-label="Permalink: How is this different from X?" href="#how-is-this-different-from-x"></a></p>
<p dir="auto">Ask yourself about <code>X</code>:</p>
<ul dir="auto">
<li>Is <code>X</code> open-source?</li>
<li>Is <code>X</code> developer-friendly, well-documented, and lets you get started in minutes?</li>
<li>Besides authentication, does <code>X</code> also do authorization and user management (see feature list below)?</li>
</ul>
<p dir="auto">If you answered "no" to any of these questions, then that's how Stack Auth is different from <code>X</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">✨ Features</h2><a id="user-content--features" aria-label="Permalink: ✨ Features" href="#-features"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto"><code>&lt;SignIn/&gt;</code> and <code>&lt;SignUp/&gt;</code></h3><a id="user-content-signin-and-signup" aria-label="Permalink: <SignIn/> and <SignUp/>" href="#signin-and-signup"></a></p> Authentication components that support OAuth, password credentials, and magic links, with shared development keys to make setup faster. All components support dark/light modes.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/dark-light-mode.png"><img alt="Sign-in component" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/dark-light-mode.png" height="280"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">Idiomatic Next.js APIs</h3><a id="user-content-idiomatic-nextjs-apis" aria-label="Permalink: Idiomatic Next.js APIs" href="#idiomatic-nextjs-apis"></a></p> We build on server components, React hooks, and route handlers.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/components.png"><img src="https://github.com/stack-auth/stack/raw/dev/.github/assets/components.png" alt="Dark/light mode"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">User dashboard</h3><a id="user-content-user-dashboard" aria-label="Permalink: User dashboard" href="#user-dashboard"></a></p> Dashboard to filter, analyze, and edit users. Replaces the first internal tool you would have to build.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/dashboard.png"><img src="https://github.com/stack-auth/stack/raw/dev/.github/assets/dashboard.png" alt="User dashboard"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">Account settings</h3><a id="user-content-account-settings" aria-label="Permalink: Account settings" href="#account-settings"></a></p> Lets users update their profile, verify their e-mail, or change their password. No setup required.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/account-settings.png"><img alt="Account settings component" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/account-settings.png" height="280"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">Multi-tenancy &amp; teams</h3><a id="user-content-multi-tenancy--teams" aria-label="Permalink: Multi-tenancy &amp; teams" href="#multi-tenancy--teams"></a></p> Manage B2B customers with an organization structure that makes sense and scales to millions.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/team-switcher.png"><img alt="Selected team switcher component" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/team-switcher.png" height="280"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">Role-based access control</h3><a id="user-content-role-based-access-control" aria-label="Permalink: Role-based access control" href="#role-based-access-control"></a></p> Define an arbitrary permission graph and assign it to users. Organizations can create org-specific roles.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/permissions.png"><img alt="RBAC" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/permissions.png" height="280"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">OAuth Connections</h3><a id="user-content-oauth-connections" aria-label="Permalink: OAuth Connections" href="#oauth-connections"></a></p>Beyond login, Stack can also manage access tokens for third-party APIs, such as Outlook and Google Calendar. It handles refreshing tokens and controlling scope, making access tokens accessible via a single function call.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/connected-accounts.png"><img alt="OAuth tokens" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/connected-accounts.png" height="280"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">Impersonation</h3><a id="user-content-impersonation" aria-label="Permalink: Impersonation" href="#impersonation"></a></p> Impersonate users for debugging and support, logging into their account as if you were them.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/impersonate.png"><img alt="Webhooks" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/impersonate.png" height="280"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">Webhooks</h3><a id="user-content-webhooks" aria-label="Permalink: Webhooks" href="#webhooks"></a></p> Get notified when users use your product, built on Svix.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/stack-webhooks.png"><img alt="Webhooks" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/stack-webhooks.png" height="280"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">Automatic emails</h3><a id="user-content-automatic-emails" aria-label="Permalink: Automatic emails" href="#automatic-emails"></a></p> Send customizable emails on triggers such as sign-up, password reset, and email verification, editable with a WYSIWYG editor.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/email-editor.png"><img alt="Email templates" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/email-editor.png" height="280"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">User session &amp; JWT handling</h3><a id="user-content-user-session--jwt-handling" aria-label="Permalink: User session &amp; JWT handling" href="#user-session--jwt-handling"></a></p> Stack manages refresh and access tokens, JWTs, and cookies, resulting in the best performance at no implementation cost.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/user-button.png"><img alt="User button" src="https://github.com/stack-auth/stack/raw/dev/.github/assets/user-button.png" height="280"></a></td>
</tr>
<tr>
<td><p dir="auto"><h3 tabindex="-1" dir="auto">M2M authentication</h3><a id="user-content-m2m-authentication" aria-label="Permalink: M2M authentication" href="#m2m-authentication"></a></p> Use short-lived access tokens to authenticate your machines to other machines.</td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/stack-auth/stack/blob/dev/.github/assets/m2m-auth.png"><img src="https://github.com/stack-auth/stack/raw/dev/.github/assets/m2m-auth.png" alt="M2M authentication" height="250"></a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">📦 Installation &amp; Setup</h2><a id="user-content--installation--setup" aria-label="Permalink: 📦 Installation &amp; Setup" href="#-installation--setup"></a></p>
<p dir="auto">Refer to <a href="https://docs.stack-auth.com/getting-started/setup" rel="nofollow">our documentation</a> on how to set up Stack Auth in your Next.js project.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🌱 Some community projects built with Stack</h2><a id="user-content--some-community-projects-built-with-stack" aria-label="Permalink: 🌱 Some community projects built with Stack" href="#-some-community-projects-built-with-stack"></a></p>
<p dir="auto">Have your own? Happy to feature it if you create a PR or message us on <a href="https://discord.stack-auth.com/" rel="nofollow">Discord</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Templates</h3><a id="user-content-templates" aria-label="Permalink: Templates" href="#templates"></a></p>
<ul dir="auto">
<li><a href="https://github.com/wolfgunblood/nextjs-saaskit">Next SaaSkit by wolfgunblood</a></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Examples</h3><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<ul dir="auto">
<li><a href="https://github.com/career-tokens/StackYCAuth">Stack Example by career-tokens</a></li>
<li><a href="https://github.com/stack-auth/stack/tree/dev/examples/demo">Stack Demo by the Stack team</a></li>
<li><a href="https://github.com/stack-auth/stack/tree/dev/examples/e-commerce">Stack E-Commerce Example by the Stack team</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">🏗️ Development &amp; Contribution</h2><a id="user-content-️-development--contribution" aria-label="Permalink: 🏗️ Development &amp; Contribution" href="#️-development--contribution"></a></p>
<p dir="auto">This is for you if you want to contribute to the Stack project or run the Stack dashboard locally.</p>
<p dir="auto"><strong>Important</strong>: Please read the <a href="https://github.com/stack-auth/stack/blob/dev/CONTRIBUTING.md">contribution guidelines</a> carefully and join <a href="https://discord.stack-auth.com/" rel="nofollow">our Discord</a> if you'd like to help.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Requirements</h3><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>Node v20</li>
<li>pnpm v9</li>
<li>Docker</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Setup</h3><a id="user-content-setup" aria-label="Permalink: Setup" href="#setup"></a></p>
<p dir="auto">Pre-populated .env files for the setup below are available and used by default in <code>.env.development</code> in each of the packages. You should copy all the <code>.env.development</code> files to <code>.env.local</code> in the respective packages for local development.</p>
<p dir="auto">In a terminal, start the dependencies (Postgres and Inbucket) as Docker containers:</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker compose -f dependencies.compose.yaml up"><pre>docker compose -f dependencies.compose.yaml up</pre></div>
<p dir="auto">Then open a new terminal:</p>
<div dir="auto" data-snippet-clipboard-copy-content="pnpm install

# Run build to build everything once
pnpm run build

# initialize the database and seed it with some data
pnpm prisma db push
pnpm prisma db seed

# Run code generation (repeat this after eg. changing the Prisma schema). This is part of the build script, but faster
pnpm run codegen

# Start the dev server
pnpm run dev

# In a different terminal, run tests in watch mode
pnpm run test"><pre>pnpm install

<span><span>#</span> Run build to build everything once</span>
pnpm run build

<span><span>#</span> initialize the database and seed it with some data</span>
pnpm prisma db push
pnpm prisma db seed

<span><span>#</span> Run code generation (repeat this after eg. changing the Prisma schema). This is part of the build script, but faster</span>
pnpm run codegen

<span><span>#</span> Start the dev server</span>
pnpm run dev

<span><span>#</span> In a different terminal, run tests in watch mode</span>
pnpm run <span>test</span></pre></div>
<p dir="auto">You can now open the dashboard at <a href="http://localhost:8101/" rel="nofollow">http://localhost:8101</a>, API on port 8102, demo on port 8103, docs on port 8104, Inbucket (e-mails) on port 8105, and Prisma Studio on port 8106.</p>
<p dir="auto">Your IDE may show an error on all <code>@stackframe/XYZ</code> imports. To fix this, simply restart the TypeScript language server; for example, in VSCode you can open the command palette (Ctrl+Shift+P) and run <code>Developer: Reload Window</code> or <code>TypeScript: Restart TS server</code>.</p>
<p dir="auto">You can also open Prisma Studio to see the database interface and edit data directly:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Database migrations</h3><a id="user-content-database-migrations" aria-label="Permalink: Database migrations" href="#database-migrations"></a></p>
<p dir="auto">If you make changes to the Prisma schema, you need to run the following command to create a migration:</p>
<div dir="auto" data-snippet-clipboard-copy-content="pnpm run prisma migrate dev"><pre>pnpm run prisma migrate dev</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">❤️ Contributors</h2><a id="user-content-️-contributors" aria-label="Permalink: ❤️ Contributors" href="#️-contributors"></a></p>
<p dir="auto">Thanks to the amazing community who built Stack:</p>
<a href="https://github.com/stack-auth/stack/graphs/contributors">
  <img src="https://camo.githubusercontent.com/7d41ad618e17092ec8cac4eee99e23672a27668733864cca828467a292b1b90d/68747470733a2f2f6170692e6465762e737461636b2d617574682e636f6d2f6170692f76312f636f6e7472696275746f7273" data-canonical-src="https://api.dev.stack-auth.com/api/v1/contributors">
</a>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Do Quests, Not Goals (523 pts)]]></title>
            <link>https://www.raptitude.com/2024/08/do-quests-not-goals/</link>
            <guid>41194431</guid>
            <pubDate>Thu, 08 Aug 2024 18:02:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.raptitude.com/2024/08/do-quests-not-goals/">https://www.raptitude.com/2024/08/do-quests-not-goals/</a>, See on <a href="https://news.ycombinator.com/item?id=41194431">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img src="https://www.raptitude.com/wp-content/uploads/2024/08/tobias-keller-73F4pKoUkM0-unsplash.jpg" width="600" height="400" alt="South Island New Zealand aka Middle-Earth"></p><p><em>South Island, New Zealand, a.k.a. Middle-Earth</em></p>



<p>If you were to make a list of what you want to get done this week, it would mostly consist of things you have to do. Get groceries. Book a hair appointment. Get back to so-and-so. Read that health and safety thing for work.</p>



<p>If you were to make a list of things you want to get done in the next <em>two years, </em>it would probably be more personal and more empowering. Learn to record my own music. Double my client base. Set up my dream office<em>. </em>Write my screenplay. The list would contain fewer things you <em>must </em>do –- since, by definition, those things will get done anyway — and more of what you actually want to do with your life.</p>



<p>We usually call these optional aspirations <em>goals</em>, but doing so immediately introduces a few problems that make them less likely to happen. &nbsp;</p>



<p>The first problem is that goals are things you <a href="https://www.raptitude.com/2023/11/personal-goals-have-to-happen-now/" data-type="post" data-id="12741">expect to do later</a>, because they aren’t strictly necessary, and you’re currently busy with the to-do list stuff. You’ll do them, soon, but not quite yet. There must first be a lull in the noise and stress of normal life, in order to make goal-achieving feasible.</p>



<p>The other problem with goals is that, outside of sports, “goal” has become an uninspiring, institutional word. Goals are things your teachers and managers have for you. Goals are made of quotas and Key Performance Indicators. As soon as I write the word “goals” on a sheet of paper I get drowsy.</p>


<div>
<figure><a href="https://www.raptitude.com/wp-content/uploads/2024/08/ronaldo.jpg"><img fetchpriority="high" decoding="async" width="300" height="203" src="https://www.raptitude.com/wp-content/uploads/2024/08/ronaldo-300x203.jpg" alt="" srcset="https://www.raptitude.com/wp-content/uploads/2024/08/ronaldo-300x203.jpg 300w, https://www.raptitude.com/wp-content/uploads/2024/08/ronaldo-283x192.jpg 283w, https://www.raptitude.com/wp-content/uploads/2024/08/ronaldo.jpg 590w" sizes="(max-width: 300px) 100vw, 300px"></a><figcaption><em>Just met department revenue target for Q3</em></figcaption></figure></div>


<p>Yet the wiser part of you knows that to live a great life, you need to do goal-like things, and do them on your own initiative. You need to form your own aspirations, define their completion criteria, and work towards them systematically. And these efforts have to happen now, not in some hypothetical later-state; they must happen alongside regular, busy, workaday life, or they won’t happen. I’ve said all this <a href="https://www.raptitude.com/2023/11/personal-goals-have-to-happen-now/" data-type="post" data-id="12741">before</a>.</p>



<p>Still, the tendency is to wait for a better, less cluttered stretch of time to appear before you do that. You will execute your great plans as soon as life becomes a little easier and more spacious than it is now.</p>



<p>This is exactly backwards. Forming and achieving aspirations <em>is</em> how life gets easier and more spacious. It’s how people build skills, gain experience, invent things, declutter their homes and lives, start businesses, and enrich the mind with art, exploration, and creative work.</p>


<div>
<figure><a href="https://www.raptitude.com/wp-content/uploads/2024/08/The_Unicorn_in_Captivity_from_the_Unicorn_Tapestries_MET_DP118991.jpg"><img decoding="async" width="397" height="493" src="https://www.raptitude.com/wp-content/uploads/2024/08/The_Unicorn_in_Captivity_from_the_Unicorn_Tapestries_MET_DP118991.jpg" alt="" srcset="https://www.raptitude.com/wp-content/uploads/2024/08/The_Unicorn_in_Captivity_from_the_Unicorn_Tapestries_MET_DP118991.jpg 397w, https://www.raptitude.com/wp-content/uploads/2024/08/The_Unicorn_in_Captivity_from_the_Unicorn_Tapestries_MET_DP118991-242x300.jpg 242w, https://www.raptitude.com/wp-content/uploads/2024/08/The_Unicorn_in_Captivity_from_the_Unicorn_Tapestries_MET_DP118991-155x192.jpg 155w" sizes="(max-width: 397px) 100vw, 397px"></a><figcaption><em>Better, less cluttered stretch of time finally secured</em></figcaption></figure></div>


<p>Last year I launched a pilot program for helping people do that – achieve a significant personal victory, over eight weeks, <em>while</em> you live your normal workaday life.</p>



<p>I called it <em>One Big Win — </em>the idea being that if you can pull off a personal win like this once, without waiting for better life conditions, you know you can do it again and again using the same method.</p>



<p>And the next time will be easier. Each win could add a new and empowering condition to your life: new skills, time-saving systems, organized spaces, a new income stream, more possibility in one way or another.</p>



<h3>The Quest Mentality</h3>



<p>The conventional term for this sort of personal campaign is a “short-term goal.” But I suggested to OBW participants that they drop the G-word in favor of something more fanciful: the <em>quest.</em></p>



<p>If that sounds a bit whimsical, hear me out. Whereas “goal” has become a tired and bloodless descriptor for the (supposed) intention to do something great, the word quest instills the right mentality for achieving a real-life personal victory:</p>



<p><strong>A quest is an adventure, and you expect it to be one.</strong> You expect a quest to take you into a new and unfamiliar landscape. You expect there to be puzzles, surprises, perils, and curious encounters. A bridge you counted on will be out. You’ll meet an interesting stranger on the path. You’ll hear wolves howling at night. This is all part of the fun. The goal mentality frames this stuff as setbacks, problems, pains – stuff in the way of the goal.</p>


<div>
<figure><a href="https://www.raptitude.com/wp-content/uploads/2024/08/quest-3-bg-600.jpg"><img decoding="async" width="600" height="413" src="https://www.raptitude.com/wp-content/uploads/2024/08/quest-3-bg-600.jpg" alt="" srcset="https://www.raptitude.com/wp-content/uploads/2024/08/quest-3-bg-600.jpg 600w, https://www.raptitude.com/wp-content/uploads/2024/08/quest-3-bg-600-300x207.jpg 300w, https://www.raptitude.com/wp-content/uploads/2024/08/quest-3-bg-600-279x192.jpg 279w" sizes="(max-width: 600px) 100vw, 600px"></a></figure></div>


<p><br><strong>A quest changes you, not just your situation.</strong> Goals are practical attempts to change your circumstances. A quest is personally transformative – the endeavor itself shapes who you are, and what you’re capable of. It’s not only the reward that does this, it’s your inevitable encounters with the unfamiliar, and the new capabilities you gain as you handle these encounters. You don’t just get the novel started, you become a writer. You don’t just declutter the house, you <em>get your house in order.</em></p>



<p><strong>A quest has a dragon to slay (and it’s inside you). </strong>In all worthy quests, you (the hero) at some point will face a fearsome beast that seems at first like it will be your doom. Maybe there’s a tough conversation you have to have, or a tricky concept you have to learn. From a distance, the dragon always seems unconquerable, yet the hero finds a way. In epic fantasy tales, the dragon is always symbolic — the hero defeats it by overcoming some inner sense of limitation, which they had believed was a permanent flaw.</p>



<p>Also, the dragon always guards a hoard of treasure – your life-expanding reward for overcoming this particular inner limitation.</p>


<div>
<figure><a href="https://www.raptitude.com/wp-content/uploads/2024/08/indy-quest.jpg"><img loading="lazy" decoding="async" width="562" height="254" src="https://www.raptitude.com/wp-content/uploads/2024/08/indy-quest.jpg" alt="" srcset="https://www.raptitude.com/wp-content/uploads/2024/08/indy-quest.jpg 562w, https://www.raptitude.com/wp-content/uploads/2024/08/indy-quest-300x136.jpg 300w, https://www.raptitude.com/wp-content/uploads/2024/08/indy-quest-292x132.jpg 292w" sizes="(max-width: 562px) 100vw, 562px"></a><figcaption><em> Does quests AND day job</em></figcaption></figure></div>


<p><strong>A quest can change the world.</strong> Everything great ever achieved required someone to overcome an internal obstacle. Society is built from realized human aspirations. Your project may be humble, but the way it transforms you is a big deal. It will bring more capability into the world as a whole.</p>



<p>This way of thinking about goals is what I call the <strong>quest mentality</strong>. In OBW, the <a href="https://www.raptitude.com/2021/11/how-to-do-things/" data-type="post" data-id="11158">Block method</a>, which you may already know, is your trusty walking stick, your magic wand, the sword at your side. It also helps to have people questing alongside you (just ask Frodo).</p>


<div>
<figure><a href="https://www.raptitude.com/wp-content/uploads/2024/08/quest-sword-682-bg.jpg"><img loading="lazy" decoding="async" width="346" height="457" src="https://www.raptitude.com/wp-content/uploads/2024/08/quest-sword-682-bg.jpg" alt="" srcset="https://www.raptitude.com/wp-content/uploads/2024/08/quest-sword-682-bg.jpg 346w, https://www.raptitude.com/wp-content/uploads/2024/08/quest-sword-682-bg-227x300.jpg 227w, https://www.raptitude.com/wp-content/uploads/2024/08/quest-sword-682-bg-145x192.jpg 145w" sizes="(max-width: 346px) 100vw, 346px"></a><figcaption><em>You, duly equipped</em></figcaption></figure></div>


<p>In the first run of OBW, many people remarked that the quest mentality, and particularly the dragon, was the most powerful part of it. The goal mentality sees the dragon as bad, but in the quest mentality, it’s the key, or at least a clue, to becoming the version of you who <em>actually achieves goals</em>, and no longer waits for a better time.</p>



<p>The surprising thing about the dragon is that it doesn’t actually want to fight you. It wants to frighten you into going home, or not starting at all. Many participants chose a particular day to tackle their “dragon,” and found that it only took two or three 25-minute <a href="https://www.raptitude.com/2021/11/how-to-do-things/" data-type="post" data-id="11158">Blocks</a> to properly slay the thing — it was scary to actually show up for the battle, but as long as they did, the dragon was no match for them.</p>


<div>
<figure><a href="https://www.raptitude.com/wp-content/uploads/2024/08/dragon-gold.png"><img loading="lazy" decoding="async" width="400" height="400" src="https://www.raptitude.com/wp-content/uploads/2024/08/dragon-gold.png" alt="" srcset="https://www.raptitude.com/wp-content/uploads/2024/08/dragon-gold.png 400w, https://www.raptitude.com/wp-content/uploads/2024/08/dragon-gold-300x300.png 300w, https://www.raptitude.com/wp-content/uploads/2024/08/dragon-gold-150x150.png 150w, https://www.raptitude.com/wp-content/uploads/2024/08/dragon-gold-192x192.png 192w" sizes="(max-width: 400px) 100vw, 400px"></a><figcaption><em>“Quests are for losers! Stay home!”</em></figcaption></figure></div>


<h3><strong>The Quests People Did</strong></h3>



<p>Here are some of the quests people took on:</p>



<ul>
<li>Declutter the whole house</li>



<li>Record an EP</li>



<li>Prep six months’ worth of lessons for my students</li>



<li>Set up an artist’s workspace</li>



<li>Finish two short stories</li>



<li>Gain a basic knowledge of classical music</li>



<li>Fill every page in a sketchbook with drawings</li>



<li>Complete a classical guitar program</li>



<li>Make an “If I get hit by a bus” folder for my family</li>



<li>Get rid of everything I don’t need</li>



<li>Learn a new programming language</li>



<li>Finalize retirement plans</li>



<li>Create a mosaic wall surrounding a fireplace</li>



<li>Compose two original pieces of music</li>



<li>Get rid of hoarded possessions and invite people for coffee at the end</li>



<li>Start a podcast and launch the first episode</li>



<li>Set up a biodiverse garden on the balcony</li>



<li>Build an app for a client</li>



<li>Get up to speed on my financial position and make new budget</li>



<li>Set up a home recording studio</li>



<li>Write and submit a research proposal</li>
</ul>



<p>You can perhaps imagine, for some of these, which part was the dragon – the crux moment, often close to the end, where you <em>really</em> want to delay, compromise, or wait for a better time. It was really cool to see people conquer their dragons.</p>



<p>Once you slay your first one, you know how the dragon operates. It still inspires fear, and the fear is real, but you know it can’t actually stop you. One person I spoke to today is on her <em>fourth</em> big win since last winter’s inaugural session.</p>


<div>
<figure><a href="https://www.raptitude.com/wp-content/uploads/2024/08/frodo.jpg"><img loading="lazy" decoding="async" width="664" height="326" src="https://www.raptitude.com/wp-content/uploads/2024/08/frodo.jpg" alt="" srcset="https://www.raptitude.com/wp-content/uploads/2024/08/frodo.jpg 664w, https://www.raptitude.com/wp-content/uploads/2024/08/frodo-300x147.jpg 300w, https://www.raptitude.com/wp-content/uploads/2024/08/frodo-292x143.jpg 292w" sizes="(max-width: 664px) 100vw, 664px"></a><figcaption>(<em>You can start with something smaller</em>)</figcaption></figure></div>


<p>I’m running the second <em>One Big Win</em> group session in just a few weeks, and registration is <a href="https://courses.campcalm.com/one-big-win-life-changing-goals-one-block-at-a-time?coupon=HTDTPPL">open</a> as of right now.</p>



<p>The official group start date is August 26<sup>th</sup>, but once you’re registered you can begin on any day you choose.</p>



<p>Selecting a personal quest is part of the course, so you don’t have to have one in mind already. The whole thing will be done in eight weeks, and you don’t have to wait for life to stop being busy first.</p>



<p><a href="https://courses.campcalm.com/one-big-win-life-changing-goals-one-block-at-a-time?coupon=HTDTPPL">Sign up now</a> | <a href="https://courses.campcalm.com/one-big-win-life-changing-goals-one-block-at-a-time?coupon=HTDTPPL">How does it work?</a></p>



<p>The program is still in beta so there is still a large (~$60) discount for participants this time.</p>



<p>The eight weeks will pass by anyway (and then another eight weeks, and so on). You can have something genuinely exciting to show for it, and a method for doing it again and again. New landscapes await.</p>



<p>***</p>

            

        				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[LibreCUDA – Launch CUDA code on Nvidia GPUs without the proprietary runtime (587 pts)]]></title>
            <link>https://github.com/mikex86/LibreCuda</link>
            <guid>41194024</guid>
            <pubDate>Thu, 08 Aug 2024 17:24:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/mikex86/LibreCuda">https://github.com/mikex86/LibreCuda</a>, See on <a href="https://news.ycombinator.com/item?id=41194024">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">LibreCUDA</h2><a id="user-content-librecuda" aria-label="Permalink: LibreCUDA" href="#librecuda"></a></p>
<p dir="auto">LibreCUDA is a project aimed at replacing the CUDA driver API to enable launching CUDA code on Nvidia GPUs without relying on the proprietary CUDA runtime. It achieves this by communicating directly with the hardware via ioctls, (specifically what Nvidia's open-gpu-kernel-modules refer to as the rmapi), as well as QMD, Nvidia's MMIO command queue structure. LibreCUDA is capable of uploading CUDA ELF binaries onto the GPU and launching them via the command queue.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Current features</h2><a id="user-content-current-features" aria-label="Permalink: Current features" href="#current-features"></a></p>
<ul dir="auto">
<li>Allocate and free gpu memory &amp; map the memory to be accessible by the CPU</li>
<li>Capable of uploading CUDA ELF binaries to the GPU</li>
<li>Launches CUDA kernels via the command queue</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Example</h2><a id="user-content-example" aria-label="Permalink: Example" href="#example"></a></p>
<p dir="auto">Below is an example demonstrating the usage of LibreCUDA:</p>
<div dir="auto" data-snippet-clipboard-copy-content="int main() {
    libreCuInit(0);

    int device_count{};
    libreCuDeviceGetCount(&amp;device_count);
    std::cout << &quot;Device count: &quot; + std::to_string(device_count) << std::endl;

    LibreCUdevice device{};
    libreCuDeviceGet(&amp;device, 0);

    LibreCUcontext ctx{};
    libreCuCtxCreate_v2(&amp;ctx, CU_CTX_SCHED_YIELD, device);

    LibreCUmodule module{};

    uint8_t *image;
    size_t n_bytes;
    {
        std::ifstream input(&quot;write_float.cubin&quot;, std::ios::binary);
        std::vector<uint8_t> bytes(
                (std::istreambuf_iterator<char>(input)),
                (std::istreambuf_iterator<char>()));
        input.close();
        image = new uint8_t[bytes.size()];
        memcpy(image, bytes.data(), bytes.size());
        n_bytes = bytes.size();
    }
    libreCuModuleLoadData(&amp;module, image, n_bytes);

    uint32_t num_funcs{};
    libreCuModuleGetFunctionCount(&amp;num_funcs, module);
    std::cout << &quot;Num functions: &quot; << num_funcs << std::endl;

    auto *functions = new LibreCUFunction[num_funcs];
    libreCuModuleEnumerateFunctions(functions, num_funcs, module);

    for (size_t i = 0; i < num_funcs; i++) {
        LibreCUFunction func = functions[i];
        const char *func_name{};
        libreCuFuncGetName(&amp;func_name, func);
        std::cout << &quot;  function \&quot;&quot; << func_name << &quot;\&quot;&quot; << std::endl;
    }

    delete[] functions;

    LibreCUFunction func{};
    libreCuModuleGetFunction(&amp;func, module, &quot;write_float&quot;);

    LibreCUstream stream{};
    libreCuStreamCreate(&amp;stream, 0);

    void *float_dst_va{};
    libreCuMemAlloc(&amp;float_dst_va, sizeof(float), true);

    float float_value = 3.1415f;
    void *float_src_va{};
    libreCuMemAlloc(&amp;float_src_va, sizeof(float), true);
    *(float *) (float_src_va) = float_value;

    std::cout << &quot;Src value: &quot; << float_value << std::endl;
    std::cout << &quot;Dst value (pre exec): &quot; << *(float *) (float_dst_va) << std::endl;

    void *params[] = {
            &amp;float_dst_va, // dst
            &amp;float_src_va // src
    };
    libreCuLaunchKernel(func,
                                   1, 1, 1,
                                   1, 1, 1,
                                   0,
                                   stream,
                                   params, sizeof(params) / sizeof(void *),
                                   nullptr
    );

    libreCuStreamCommence(stream);
    
    libreCuStreamAwait(stream);
    std::cout << &quot;Dst value (post exec): &quot; << *(float *) (float_dst_va) << std::endl;

    libreCuMemFree(float_dst_va);
    libreCuStreamDestroy(stream);
    libreCuModuleUnload(module);
    libreCuCtxDestroy(ctx);
    return 0;
}"><pre><span>int</span> <span>main</span>() {
    <span>libreCuInit</span>(<span>0</span>);

    <span>int</span> device_count{};
    <span>libreCuDeviceGetCount</span>(&amp;device_count);
    std::cout &lt;&lt; <span><span>"</span>Device count: <span>"</span></span> + <span>std::to_string</span>(device_count) &lt;&lt; std::endl;

    LibreCUdevice device{};
    <span>libreCuDeviceGet</span>(&amp;device, <span>0</span>);

    LibreCUcontext ctx{};
    <span>libreCuCtxCreate_v2</span>(&amp;ctx, CU_CTX_SCHED_YIELD, device);

    LibreCUmodule module{};

    <span>uint8_t</span> *image;
    <span>size_t</span> n_bytes;
    {
        std::ifstream <span>input</span>(<span><span>"</span>write_float.cubin<span>"</span></span>, std::ios::binary);
        std::vector&lt;<span>uint8_t</span>&gt; <span>bytes</span>(
                (std::istreambuf_iterator&lt;<span>char</span>&gt;(input)),
                (std::istreambuf_iterator&lt;<span>char</span>&gt;()));
        input.<span>close</span>();
        image = <span>new</span> <span>uint8_t</span>[bytes.<span>size</span>()];
        <span>memcpy</span>(image, bytes.<span>data</span>(), bytes.<span>size</span>());
        n_bytes = bytes.<span>size</span>();
    }
    <span>libreCuModuleLoadData</span>(&amp;module, image, n_bytes);

    <span>uint32_t</span> num_funcs{};
    <span>libreCuModuleGetFunctionCount</span>(&amp;num_funcs, module);
    std::cout &lt;&lt; <span><span>"</span>Num functions: <span>"</span></span> &lt;&lt; num_funcs &lt;&lt; std::endl;

    <span>auto</span> *functions = <span>new</span> LibreCUFunction[num_funcs];
    <span>libreCuModuleEnumerateFunctions</span>(functions, num_funcs, module);

    <span>for</span> (<span>size_t</span> i = <span>0</span>; i &lt; num_funcs; i++) {
        LibreCUFunction func = functions[i];
        <span>const</span> <span>char</span> *func_name{};
        <span>libreCuFuncGetName</span>(&amp;func_name, func);
        std::cout &lt;&lt; <span><span>"</span>  function <span>\"</span><span>"</span></span> &lt;&lt; func_name &lt;&lt; <span><span>"</span><span>\"</span><span>"</span></span> &lt;&lt; std::endl;
    }

    <span>delete[]</span> functions;

    LibreCUFunction func{};
    <span>libreCuModuleGetFunction</span>(&amp;func, module, <span><span>"</span>write_float<span>"</span></span>);

    LibreCUstream stream{};
    <span>libreCuStreamCreate</span>(&amp;stream, <span>0</span>);

    <span>void</span> *float_dst_va{};
    <span>libreCuMemAlloc</span>(&amp;float_dst_va, <span>sizeof</span>(<span>float</span>), <span>true</span>);

    <span>float</span> float_value = <span>3</span>.<span>1415f</span>;
    <span>void</span> *float_src_va{};
    <span>libreCuMemAlloc</span>(&amp;float_src_va, <span>sizeof</span>(<span>float</span>), <span>true</span>);
    *(<span>float</span> *) (float_src_va) = float_value;

    std::cout &lt;&lt; <span><span>"</span>Src value: <span>"</span></span> &lt;&lt; float_value &lt;&lt; std::endl;
    std::cout &lt;&lt; <span><span>"</span>Dst value (pre exec): <span>"</span></span> &lt;&lt; *(<span>float</span> *) (float_dst_va) &lt;&lt; std::endl;

    <span>void</span> *params[] = {
            &amp;float_dst_va, <span><span>//</span> dst</span>
            &amp;float_src_va <span><span>//</span> src</span>
    };
    <span>libreCuLaunchKernel</span>(func,
                                   <span>1</span>, <span>1</span>, <span>1</span>,
                                   <span>1</span>, <span>1</span>, <span>1</span>,
                                   <span>0</span>,
                                   stream,
                                   params, <span>sizeof</span>(params) / <span>sizeof</span>(<span>void</span> *),
                                   <span>nullptr</span>
    );

    <span>libreCuStreamCommence</span>(stream);
    
    <span>libreCuStreamAwait</span>(stream);
    std::cout &lt;&lt; <span><span>"</span>Dst value (post exec): <span>"</span></span> &lt;&lt; *(<span>float</span> *) (float_dst_va) &lt;&lt; std::endl;

    <span>libreCuMemFree</span>(float_dst_va);
    <span>libreCuStreamDestroy</span>(stream);
    <span>libreCuModuleUnload</span>(module);
    <span>libreCuCtxDestroy</span>(ctx);
    <span>return</span> <span>0</span>;
}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Outputs:</h3><a id="user-content-outputs" aria-label="Permalink: Outputs:" href="#outputs"></a></p>
<div data-snippet-clipboard-copy-content="Device count: 1
Num functions: 1
  function &quot;write_float&quot;
Src value: 3.1415
Dst value (pre exec): 0
Dst value (post exec): 3.1415"><pre><code>Device count: 1
Num functions: 1
  function "write_float"
Src value: 3.1415
Dst value (pre exec): 0
Dst value (post exec): 3.1415
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Project Status</h2><a id="user-content-project-status" aria-label="Permalink: Project Status" href="#project-status"></a></p>
<p dir="auto">The project is in its early stages and currently implements only rudimentary CUDA functions. It is not yet ready for production use.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Contributions are welcome! Please submit issues and pull requests to help improve LibreCUDA.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is licensed under the MIT License.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Employers used return-to-office to make workers quit (188 pts)]]></title>
            <link>https://thehill.com/opinion/technology/4800828-office-mandates-cause-attrition/</link>
            <guid>41193968</guid>
            <pubDate>Thu, 08 Aug 2024 17:21:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thehill.com/opinion/technology/4800828-office-mandates-cause-attrition/">https://thehill.com/opinion/technology/4800828-office-mandates-cause-attrition/</a>, See on <a href="https://news.ycombinator.com/item?id=41193968">Hacker News</a></p>
Couldn't get https://thehill.com/opinion/technology/4800828-office-mandates-cause-attrition/: Error: Request failed with status code 403]]></description>
        </item>
    </channel>
</rss>