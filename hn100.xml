<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 29 Sep 2024 00:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Reverse-engineering a three-axis attitude indicator from the F-4 fighter plane (123 pts)]]></title>
            <link>http://www.righto.com/2024/09/f4-attitude-indicator.html</link>
            <guid>41681514</guid>
            <pubDate>Sat, 28 Sep 2024 17:05:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.righto.com/2024/09/f4-attitude-indicator.html">http://www.righto.com/2024/09/f4-attitude-indicator.html</a>, See on <a href="https://news.ycombinator.com/item?id=41681514">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-3021491939457609983" itemprop="description articleBody">
<p>We recently received an attitude indicator for the F-4 fighter plane, an instrument that
uses a rotating ball to show the aircraft's orientation and direction.
In a normal aircraft, the artificial horizon shows the orientation in two axes (pitch and roll), but the F-4 indicator
uses a rotating ball to show the orientation in three axes, adding azimuth (yaw).<span id="fnref:fdai"><a href="#fn:fdai">1</a></span>
It wasn't obvious to me how the ball could rotate in three axes: how could it turn in every direction and still remain
attached to the instrument?</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/indicator.jpg"><img alt="The attitude indicator. The &quot;W&quot; forms a stylized aircraft. In this case, it indicates that the aircraft is climbing slightly. Photo from CuriousMarc." height="472" src="https://static.righto.com/images/f4-attitude-indicator/indicator-w450.jpg" title="The attitude indicator. The &quot;W&quot; forms a stylized aircraft. In this case, it indicates that the aircraft is climbing slightly. Photo from CuriousMarc." width="450"></a></p><p>The attitude indicator. The "W" forms a stylized aircraft. In this case, it indicates that the aircraft is climbing slightly. Photo from CuriousMarc.</p>
<p>We disassembled the indicator, reverse-engineered its 1960s-era circuitry, fixed some problems,<span id="fnref:problems"><a href="#fn:problems">2</a></span> and
got it spinning. The video clip below shows the indicator rotating around three axes.
In this blog post, I discuss the mechanical and electrical construction of this indicator.
(The quick explanation is that the ball is really two hollow half-shells attached to the internal mechanism at the "poles"; the shells rotate while the "equator" remains stationary.)</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/uKzj5shVtlo?si=l9hPqevRy1niHm28" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2>The F-4 aircraft</h2>
<p>The indicator was used in the F-4 Phantom II<span id="fnref:phantom-ii"><a href="#fn:phantom-ii">3</a></span>
so the pilot could keep track of the aircraft's orientation during high-speed maneuvers.
The F-4 was a supersonic fighter manufactured from 1958 to 1981.
Over 5000 were produced, making it the most-produced American supersonic aircraft ever.
It was the main US fighter jet in the Vietnam War, operating from aircraft carriers.
The F-4 was still used in the 1990s during the Gulf War,
suppressing air defenses in the "Wild Weasel" role.
The F-4 was capable of carrying nuclear bombs.<span id="fnref:nuclear"><a href="#fn:nuclear">4</a></span></p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/phantom.jpg"><img alt="An F-4G Phantom II Wild Weasel aircraft. From National Archives." height="215" src="https://static.righto.com/images/f4-attitude-indicator/phantom-w500.jpg" title="An F-4G Phantom II Wild Weasel aircraft. From National Archives." width="500"></a></p>
<p>The F-4 was a two-seat aircraft, with the radar intercept office controlling radar and weapons
from a seat behind the pilot.
Both cockpits had a panel crammed with instruments, with additional instruments and controls on the sides.
As shown below, the pilot's panel had the three-axis attitude indicator in the central position, just below the reddish radar scope, reflecting its importance.<span id="fnref:standby"><a href="#fn:standby">5</a></span>
(The rear cockpit had a simpler two-axis attitude indicator.)</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/cockpit2.jpg"><img alt="The cockpit of the F-4C Phantom II, with the attitude indicator in the center of the panel. Click this photo (or any other) for a larger version. Photo from National Museum of the USAF." height="359" src="https://static.righto.com/images/f4-attitude-indicator/cockpit2-w500.jpg" title="The cockpit of the F-4C Phantom II, with the attitude indicator in the center of the panel. Click this photo (or any other) for a larger version. Photo from National Museum of the USAF." width="500"></a></p><p>The cockpit of the F-4C Phantom II, with the attitude indicator in the center of the panel. Click this photo (or any other) for a larger version. Photo from <a href="https://www.nationalmuseum.af.mil/Visit/Museum-Exhibits/Fact-Sheets/Display/Article/196051/mcdonnell-douglas-f-4c-phantom-ii/">National Museum of the USAF</a>.</p>
<h2>The attitude indicator mechanism</h2>
<p>The ball inside the indicator shows the aircraft's position in three axes.
The roll axis indicates the aircraft's angle if it rolls side-to-side along its axis of flight.
The pitch axis indicates the aircraft's angle if it pitches up or down.
Finally, the azimuth axis indicates the compass direction that the aircraft is heading,
changed by the aircraft's turning left or right (yaw).
The indicator also has moving needles and status flags, but in this post I'm focusing
on the rotating ball.<span id="fnref:features"><a href="#fn:features">6</a></span></p>
<p>The indicator uses three motors to move the ball.
The roll motor (below) is attached to the frame of the indicator, while the pitch and azimuth motors are
inside the ball.
The ball is held in place by the roll gimbal, which is attached to the ball mechanism at the top
and bottom pivot points.
The roll motor turns the roll gimbal and thus the ball, providing a clockwise/counterclockwise
movement.
The roll control transformer provides position feedback.
Note the numerous wires on the roll gimbal, connected to the mechanism inside the ball.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/indicator-diagram.jpg"><img alt="The attitude indicator with the cover removed." height="572" src="https://static.righto.com/images/f4-attitude-indicator/indicator-diagram-w700.jpg" title="The attitude indicator with the cover removed." width="700"></a></p><p>The attitude indicator with the cover removed.</p>
<p>The diagram below shows the mechanism inside the ball, after removing the hemispherical
shells of the ball.
When the roll gimbal is rotated, this mechanism rotates with it.
The pitch motor causes the entire mechanism to rotate around the pitch axis (horizontal here), which is attached along the "equator".
The azimuth motor and control transformer are behind the pitch components, not visible in this photo.
The azimuth motor turns the vertical shaft.
The two hollow hemispheres of the ball attach to the top and bottom of the shaft.
Thus, the azimuth motor rotates the ball shells around the azimuth axis, while the mechanism itself
remains stationary.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/mechanism-diagram.jpg"><img alt="The components of the ball mechanism." height="537" src="https://static.righto.com/images/f4-attitude-indicator/mechanism-diagram-w700.jpg" title="The components of the ball mechanism." width="700"></a></p><p>The components of the ball mechanism.</p>
<p>Why doesn't the wiring get tangled up as the ball rotates?
The solution is two sets of slip rings to implement the electrical connections.
The photo below shows the first slip ring assembly, which handles rotation around the roll axis.
These slip rings connect the stationary part of the instrument to the
rotating roll gimbal.
The black base and the vertical wires are attached to the instrument,
while the striped shaft in the middle rotates with the ball assembly housing.
Inside the shaft, wires go from the circular metal contacts to
the roll gimbal.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/sliprings.jpg"><img alt="The first set of slip rings. Yes, there is damage on one of the slip ring contacts." height="339" src="https://static.righto.com/images/f4-attitude-indicator/sliprings-w500.jpg" title="The first set of slip rings. Yes, there is damage on one of the slip ring contacts." width="500"></a></p><p>The first set of slip rings. Yes, there is damage on one of the slip ring contacts.</p>
<p>Inside the ball, a second set of slip rings
provides the electrical connection between the
wiring on the roll gimbal and the ball mechanism.
The photo below shows the connections to these slip rings, handling rotation around
the pitch axis (horizontal in this photo).
(The slip rings themselves are inside and are not visible.)
The shaft sticking out of the assembly rotates around the azimuth (yaw) axis. The ball hemisphere is attached to the metal disk.
The azimuth axis does not require slip rings since only the ball shells rotates; the electronics remain stationary.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/sliprings2.jpg"><img alt="Connections for the second set of slip rings." height="327" src="https://static.righto.com/images/f4-attitude-indicator/sliprings2-w350.jpg" title="Connections for the second set of slip rings." width="350"></a></p><p>Connections for the second set of slip rings.</p>
<h2>The servo loop</h2>
<p>In this section, I'll explain how the motors are controlled by servo loops.
The attitude indicator is driven by an external gyroscope, receiving electrical signals indicating the roll, pitch, and azimuth positions.
As was common in 1960s avionics, the signals are transmitted from synchros, which use three wires to indicate an angle.
The motors inside the attitude indicator rotate until the indicator's angles for the three axes match the input angles.</p>
<p>Each motor is controlled by a servo loop, shown below.
The goal is to rotate the output shaft to an angle that exactly matches the input angle,
specified by the three synchro wires.
The key is a device called a control transformer, which takes the three-wire input angle and a physical shaft rotation, and
generates an error signal indicating the difference between the desired angle and the physical angle.
The amplifier drives the motor in the appropriate direction until the error signal drops to zero.
To improve the dynamic response of the servo loop, the tachometer signal is used as a negative feedback voltage.
This ensures that the motor slows as the system gets closer to the right position, so the motor doesn't overshoot the position and oscillate.
(This is sort of like a PID controller.)</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/servo-diagram.jpg"><img alt="This diagram shows the structure of the servo loop, with a feedback loop ensuring that the rotation angle of the output shaft matches the input angle." height="228" src="https://static.righto.com/images/f4-attitude-indicator/servo-diagram-w600.jpg" title="This diagram shows the structure of the servo loop, with a feedback loop ensuring that the rotation angle of the output shaft matches the input angle." width="600"></a></p><p>This diagram shows the structure of the servo loop, with a feedback loop ensuring that the rotation angle of the output shaft matches the input angle.</p>
<p>In more detail, the external gyroscope unit contains synchro transmitters, small devices that convert the angular position of a shaft
into AC signals on three wires.
The photo below shows a typical synchro, with the input shaft on the top and five wires
at the bottom: two for power and three for the output.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/synchro.jpg"><img alt="A synchro transmitter." height="324" src="https://static.righto.com/images/f4-attitude-indicator/synchro-w200.jpg" title="A synchro transmitter." width="200"></a></p><p>A synchro transmitter.</p>
<p>Internally, the synchro has a rotating winding called the rotor that is driven with 400 Hz AC.
Three fixed stator windings provide the three AC output signals. As the shaft rotates, the phase and voltage of the
output signals changes, indicating the angle.
(Synchros may seem bizarre, but they were extensively used in the 1950s and 1960s to
transmit angular information in ships and aircraft.)</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/synchro-schematic.png"><img alt="The schematic symbol for a synchro transmitter or receiver." height="240" src="https://static.righto.com/images/f4-attitude-indicator/synchro-schematic-w250.png" title="The schematic symbol for a synchro transmitter or receiver." width="250"></a></p><p>The schematic symbol for a synchro transmitter or receiver.</p>
<p>The attitude indicator uses control transformers to process these input signals.
A control transformer is similar to a synchro in appearance and construction, but it is wired differently.
The three stator windings receive the inputs and the rotor winding provides the error output.
If the rotor angle of the synchro transmitter and control transformer are the same, the signals cancel out and there is
no error output.
But as the difference between the two shaft angles increases, the rotor winding produces an error signal. The phase of the
error signal indicates the direction of error.</p>
<p>The next component is the motor/tachometer, a special motor that was often used in avionics servo loops.
This motor is more complicated than a regular electric motor.
The motor is powered by 115 volts AC, 400-Hertz, but this isn't sufficient to get the motor spinning.
The motor also has two low-voltage AC control windings. Energizing a control winding will cause the
motor to spin in one direction or the other.</p>
<p>The motor/tachometer unit also contains a tachometer to measure its rotational speed, for use in a feedback loop.
The tachometer is driven by another 115-volt AC winding and generates a low-voltage AC signal proportional to the rotational speed
of the motor.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/motor-disassembled.jpg"><img alt="A motor/tachometer similar (but not identical) to the one in the attitude indicator)." height="262" src="https://static.righto.com/images/f4-attitude-indicator/motor-disassembled-w500.jpg" title="A motor/tachometer similar (but not identical) to the one in the attitude indicator)." width="500"></a></p><p>A motor/tachometer similar (but not identical) to the one in the attitude indicator).</p>
<p>The photo above shows a motor/tachometer with the rotor removed.
The unit has many wires because of its multiple windings.
The rotor has two drums. The drum on the left, with the spiral stripes, is for the motor. This drum is a "squirrel-cage rotor",
which spins due to induced currents.
(There are no electrical connections to the rotor; the drums interact with the windings through magnetic fields.)
The drum on the right is the tachometer rotor; it induces a signal in the output winding proportional to the speed due to eddy currents.
The tachometer signal is at 400 Hz like the driving signal, either in phase or 180º out of phase, depending on the direction
of rotation.
For more information on how a motor/generator works, see my <a href="https://www.righto.com/2024/02/bendix-cadc-servomotor-tachometer.html">teardown</a>.</p>
<h2>The amplifier</h2>
<p>The motors are powered by an amplifier assembly that contains three separate error amplifiers,
one for each axis.
I had to reverse engineer the amplifier assembly in order to get the indicator working.
The assembly mounts on the back of the attitude indicator and connects to one of the
indicator's round connectors. Note the cutout in the lower left of the amplifier assembly to
provide access to the second connector on the back of the indicator.
The aircraft connects to the indicator through
the second connector and the indicator passes the input signals to the amplifier through
the connector shown above.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/amplifier-unit.jpg"><img alt="The amplifier assembly." height="451" src="https://static.righto.com/images/f4-attitude-indicator/amplifier-unit-w450.jpg" title="The amplifier assembly." width="450"></a></p><p>The amplifier assembly.</p>
<p>The amplifier assembly contains three amplifier boards (for roll, pitch, and azimuth),
a DC power supply board, an AC transformer,
and a trim potentiometer.<span id="fnref:supply"><a href="#fn:supply">7</a></span>
The photo below shows the amplifier assembly mounted on the back of the instrument.
At the left, the AC transformer produces the motor control voltage and powers the power supply board,
mounted vertically on the right.
The assembly has three identical amplifier boards; the middle board has been unmounted to show the components.
The amplifier connects to the instrument through a round connector below the transformer.
The round connector at the upper left is on the instrument case (not the amplifier) and provides the connection between the
aircraft and the instrument.<span id="fnref:case-connector"><a href="#fn:case-connector">8</a></span></p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/amplifier-mounted.jpg"><img alt="The amplifier assembly mounted on the back of the instrument. We are feeding test signals to the connector in the upper left." height="600" src="https://static.righto.com/images/f4-attitude-indicator/amplifier-mounted-w450.jpg" title="The amplifier assembly mounted on the back of the instrument. We are feeding test signals to the connector in the upper left." width="450"></a></p><p>The amplifier assembly mounted on the back of the instrument. We are feeding test signals to the connector in the upper left.</p>
<p>The photo below shows one of the three amplifier boards. The construction is unusual, with some components stacked on top of
other components to save space.
Some of the component leads are long and protected with clear plastic sleeves.
The board is connected to the rest of the amplifier assembly through a bundle of point-to-point wires, visible on the left.
The round pulse transformer in the middle has five colorful wires coming out of it.
At the right are the two transistors that drive the motor's control windings, with two capacitors between them.
The transistors are mounted on a heat sink that is screwed down to the case of the amplifier assembly for cooling.
The board is covered with a conformal coating to protect it from moisture or contaminants.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/amplifier-board.jpg"><img alt="One of the three amplifier boards." height="344" src="https://static.righto.com/images/f4-attitude-indicator/amplifier-board-w500.jpg" title="One of the three amplifier boards." width="500"></a></p><p>One of the three amplifier boards.</p>
<p>The function of each amplifier board is to generate the two control signals so the motor rotates in the appropriate direction
based on the error signal fed into the amplifier.
The amplifier also uses the tachometer output from the motor unit to slow the motor as the error signal decreases, preventing
overshoot.
The inputs to the amplifier are 400 hertz AC signals, with the phase indicating positive or negative error.
The outputs drive the two control windings of the motor, determining which direction the motor rotates.</p>
<p>The schematic for the amplifier board is below. 
The two transistors on the left amplify the error and tachometer signals, driving the pulse transformer.
The outputs of the pulse transformer will have opposite phase, driving the output transistors for opposite halves of
the 400 Hz cycle.
One of the transistors will be in the right phase to turn on and pull the motor control AC to ground, while the other
transistor will be in the wrong phase.
Thus, the appropriate control winding will be activated (for half the cycle), causing the motor to spin in the desired direction.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/amplifier-schematic.jpg"><img alt="Schematic of one of the three amplifier boards. (Click for a larger version.)" height="354" src="https://static.righto.com/images/f4-attitude-indicator/amplifier-schematic-w600.jpg" title="Schematic of one of the three amplifier boards. (Click for a larger version.)" width="600"></a></p><p>Schematic of one of the three amplifier boards. (Click for a larger version.)</p>
<p>It turns out that there are two versions of the attitude indicator that use incompatible amplifiers.
I think that the motors for the newer indicators have a single control winding rather than two.
Fortunately, the connectors are keyed differently so you can't attach the wrong amplifier.
The second amplifier (below) looks slightly more modern (1980s) with a double-sided circuit board and more components in place of the
pulse transformer.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/amplifier2.jpg"><img alt="The second type of amplifier board." height="449" src="https://static.righto.com/images/f4-attitude-indicator/amplifier2-w500.jpg" title="The second type of amplifier board." width="500"></a></p><p>The second type of amplifier board.</p>
<h2>The pitch trim circuit</h2>
<p>The attitude indicator has a pitch trim knob in the lower right, although the knob was missing from ours.
The pitch trim adjustment turns out to be rather complicated.
In level flight, an aircraft may have its nose angled up or down slightly to achieve the desired angle of attack.
The pilot wants the attitude indicator to show level flight, even though the aircraft is slightly angled, so the indicator can be
adjusted with the pitch trim knob.
However, the problem is that a fighter plane may, for instance, do a vertical 90º climb. In this case, the attitude indicator
should show the actual attitude and ignore the pitch trim adjustment.</p>
<p>I found a <a href="https://patents.google.com/patent/US2941305A">1957 patent</a> that explained how this is implemented.
The solution is to "fade out" the trim adjustment when the aircraft moves away from horizontal flight.
This is implemented with a special multi-zone potentiometer that is controlled by the pitch angle.</p>
<p>The schematic below shows how the pitch trim signal is generated from the special pitch angle potentiometer and the
pilot's pitch trim adjustment.
Like most signals in the attitude indicator, the pitch trim is a 400 Hz AC signal, with the phase indicating positive or
negative.
Ignoring the pitch angle for a moment, the drive signal into the transformer will be AC.
The split windings of the transformer will generate a positive phase and a negative phase signal. Adjusting the pitch
trim potentiometer lets the pilot vary the trim signal from positive to zero to negative, applying the desired correction to
the indicator.</p>
<p><a href="https://static.righto.com/images/f4-attitude-indicator/pitch-trim.jpg"><img alt="The pitch trim circuit. Based on the patent." height="226" src="https://static.righto.com/images/f4-attitude-indicator/pitch-trim-w600.jpg" title="The pitch trim circuit. Based on the patent." width="600"></a></p><p>The pitch trim circuit. Based on <a href="https://patents.google.com/patent/US2941305A">the patent</a>.</p>
<p>Now, look at the complex pitch angle potentiometer. It has alternating resistive and conducting segments, with AC fed into opposite
sides. (Note that +AC and -AC refer to the phase, not the voltage.) Because the resistances are equal, the AC signals will cancel out at the top and the bottom, yielding 0 volts on those segments.
If the aircraft is roughly horizontal, the potentiometer wiper will pick up the positive-phase AC and feed it into the
transformer, providing the desired trim adjustment as described previously.
However, if the aircraft is climbing nearly vertically, the wiper will pick up the 0-volt signal, so there will be no
pitch trim adjustment.
For an angle range in between, the resistance of the potentiometer will cause the pitch trim signal to smoothly fade out.
Likewise, if the aircraft is steeply diving, the wiper will pick up the 0 signal at the bottom, removing the pitch trim.
And if the aircraft is inverted, the wiper will pick up the negative AC phase, causing the pitch trim adjustment to be
applied in the opposite direction.</p>
<h2>Conclusions</h2>
<p>The attitude indicator is a key instrument in any aircraft, especially important when
flying in low visibility.
The F-4's attitude indicator goes beyond the artificial horizon indicator in a typical
aircraft, adding a third axis to show the aircraft's heading.
Supporting a third axis makes the instrument much more complicated, though.
Looking inside the indicator reveals how the ball rotates in three axes while still remaining
firmly attached.</p>
<p>Modern fighter planes avoid complex electromechanical instruments. Instead, they
provide a "glass cockpit" with most data provided digitally on screens.
For instance, the F-35's console replaces all the instruments with a wide <a href="https://www.militaryaerospace.com/sensors/article/14276510/panoramic-display-f-35-cockpit-avionics">panoramic touchscreen</a> displaying the
desired information in color.
Nonetheless, mechanical instruments have a special charm, despite their impracticality.</p>
<p>For more, follow me on
Mastodon as <a href="https://oldbytes.space/@kenshirriff">@<span data-cfemail="274c4249544f4e55554e414167484b43455e534254095457464442">[email&nbsp;protected]</span></a>
or <a href="http://www.righto.com/feeds/posts/default">RSS</a>. (I've given up on Twitter.)
I worked on this project with CuriousMarc and Eric Schlapfer, so expect a
video at some point. Thanks to John Pumpkinhead and another collector for supplying the indicators
 and amplifiers.</p>
<h2>Notes and references</h2>
<p>Specifications<span id="fnref:specifications"><a href="#fn:specifications">9</a></span></p>
<!-- Lots of cockpit info: http://aviation.watergeek.eu/f4j-panel.html -->



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The perils of transition to 64-bit time_t (182 pts)]]></title>
            <link>https://blogs.gentoo.org/mgorny/2024/09/28/the-perils-of-transition-to-64-bit-time_t/</link>
            <guid>41681266</guid>
            <pubDate>Sat, 28 Sep 2024 16:31:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blogs.gentoo.org/mgorny/2024/09/28/the-perils-of-transition-to-64-bit-time_t/">https://blogs.gentoo.org/mgorny/2024/09/28/the-perils-of-transition-to-64-bit-time_t/</a>, See on <a href="https://news.ycombinator.com/item?id=41681266">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-2218">
	<!-- .entry-header -->

	
	
	<div>
		<p>In the <a href="https://blogs.gentoo.org/mgorny/2024/09/23/overview-of-cross-architecture-portability-problems/">Overview of cross-architecture portability problems</a>, I have dedicated a section to the problems resulting from use of 32-bit <kbd>time_t</kbd> type.  This design decision, still affecting Gentoo systems using glibc, means that 32-bit applications will suddenly start failing in horrible ways in 2038: they will be getting <kbd>-1</kbd> error instead of the current time, they won’t be able to <kbd>stat()</kbd> files.  In one word: complete mayhem will emerge.</p>
<p>There is a general agreement that the way forward is to change <kbd>time_t</kbd> to a 64-bit type.  Musl has already switched to that, glibc supports it as an option.  A number of other distributions such as Debian have taken the leap and switched.  Unfortunately, source-based distributions such as Gentoo don’t have it that easy.  So we are still debating the issue and experimenting, trying to figure out a maximally safe upgrade path for our users.</p>
<p>Unfortunately, that’s nowhere near trivial.  Above all, we are talking about a breaking ABI change.  It’s all-or-nothing.  If a library uses <kbd>time_t</kbd> in its API, everything linking to it needs to use the same type width.  In this post, I’d like to explore the issue in detail — why is it so bad, and what we can do to make it safer.<br>
<span id="more-2218"></span></p>
<h2>Going back to Large File Support</h2>
<p>Before we get into the time64 change, as I’m going to shortly call it, we need to go back in history a bit and consider another similar problem: Large File Support.</p>
<p>Long story short, originally 32-bit architectures specify two important file-related types that were 32 bits wide: <kbd>off_t</kbd> used to specify file offsets (signed to support relative offsets) and <kbd>ino_t</kbd> used to specify inode numbers.  This had two implications: you couldn’t open files larger than 2&nbsp;GiB, and you couldn’t open files whose inode numbers exceeded 32-bit unsigned integer range.</p>
<p>To resolve this problem, Large File Support was introduced.  It involved replacing these two types with 64-bit variants, and on glibc it is still optional today.  In its case, we didn’t take the leap and transitioned globally.  Instead, packages generally started enabling LFS support upstream — also taking care to resolve any ABI breakage in the process.  While many packages did that, we shouldn’t consider the problem solved.</p>
<p>The important point here is that time64 support in glibc requires LFS to be used.  This makes sense — if we are going to break stuff, we may as well solve both problems.</p>
<h2>What ABIs are we talking about?</h2>
<p>To put it simply, we have three possible sub-ABIs here:</p>
<ol>
<li>the original ABI with 32-bit types,</li>
<li>LFS: 64-bit <kbd>off_t</kbd> and <kbd>ino_t</kbd>, 32-bit <kbd>time_t</kbd>,</li>
<li>time64: LFS + 64-bit <kbd>time_t</kbd>.</li>
</ol>
<p>What’s important here is that a single glibc build remains compatible with all three variants.  However, libraries that use these types in their API are not.</p>
<p>Today, 32-bit systems roughly use a mix of the first and second ABI — the latter including packages that enabled LFS explicitly.  For the future, our goal is to focus on the third option.  We are not concerned about providing full-LFS systems with 32-bit <kbd>time_t</kbd>.</p>
<h2>Why the ABI change is so bad?</h2>
<p>Now, the big deal is that we are replacing a 32-bit type with a 64-bit type, in place.  Unlike with LFS, glibc does not provide any transitional API that could be used to enable new functions while preserving backwards compatibility — it’s all-or-nothing.</p>
<p>Let’s consider structures.  If a structure contains <kbd>time_t</kbd> with its natural 32-bit alignment, then there’s no padding for the type to extend to.  Inevitable, all fields will have to shift to make room for the new type.  Let’s consider a trivial example:</p>
<pre>struct {
    int a;
    time_t b;
    int c;
};</pre>
<p>With 32-bit <kbd>time_t</kbd>, the offset of <kbd>c</kbd> is 8.  With the 64-bit type, it’s 12.  If you mix binaries using different <kbd>time_t</kbd> width, they’re inevitably are going to read or wrong the wrong fields!  Or perhaps even read or write out of bounds!</p>
<p>Let’s just look at the size of <kbd>struct stat</kbd>, as an example of structure that uses both file and time-related types.  On plain 32-bit x86 glibc it’s 88 byte long.  With LFS, it’s 96 byte long (size and inode number fields are expanded).  With LFS + time64, it’s 108 byte long (three timestamps are expanded).</p>
<p>However, you don’t even need to use structures.  After all, we are talking about x86 where function parameters are passed on stack.  If one of the parameters is <kbd>time_t</kbd>, then positions of all parameters on stack change, and we find ourselves seeing the exact same problem!  Consider the following prototype:</p>
<pre>extern void foo(int a, time_t b, int c);</pre>
<p>Let’s say we’re calling it as <kbd>foo(1, 2, 3)</kbd>.  With 32-bit types, the call looks like the following:</p>
<pre>	pushl	$3
	pushl	$2
	pushl	$1
	call	foo@PLT</pre>
<p>However, with 64-bit <kbd>time_t</kbd>, it changes to:</p>
<pre>	pushl	$3
	pushl	$0
	pushl	$2
	pushl	$1
	call	foo@PLT</pre>
<p>An additional 32-bit value (zero) is pushed between the “old” <kbd>b</kbd> and <kbd>c</kbd>.  Once again, if we mix both kinds of binaries, they are going to fail to read the parameters correctly!</p>
<p>So yeah, it’s a big deal.  And right now, there are no real protections in place to prevent mixing these ABIs.  So what you actually may get is runtime breakage, potentially going as far as to create security issues.</p>
<p>You don’t have to take my word for it.  You can reproduce it yourself on x86/amd64 easily enough.  Let’s take the more likely case of a time32 program linked against a library that has been rebuilt for time64:</p>
<pre>$ cat &gt;libfoo.c &lt;&lt;EOF
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

void foo(int a, time_t b, int *c) {
   printf("a = %d\n", a);
   printf("b = %lld", (long long) b);
   printf("%s", ctime(&amp;b));
   printf("c = %d\n", *c);
}
EOF
$ cat &gt;foo.c &lt;&lt;EOF
#include &lt;stddef.h&gt;
#include &lt;time.h&gt;

extern void foo(int a, time_t b, int *c);

int main() {
    int three = 3;
    foo(1, time(NULL), &amp;three);
    return 0;
}
EOF
$ cc -m32 libfoo.c -shared -o libfoo.so
$ cc -m32 foo.c -o foo -Wl,-rpath,. libfoo.so
$ ./foo
a = 1
b = 1727154919
Tue Sep 24 07:15:19 2024
c = 3
$ cc -m32 -D_FILE_OFFSET_BITS=64 -D_TIME_BITS=64 \
  libfoo.c -shared -o libfoo.so
$ ./foo 
a = 1
b = -34556652301432063
Thu Jul 20 06:16:17 -1095054749
c = 771539841</pre>
<p>On top of that, the source-first nature of Gentoo amplifies these problems.  An average binary distribution rebuilds all binary packages — and then the user upgrades the system in a single, relatively atomic step.  Sure, if someone uses third-party repositories or has locally built programs that link to system libraries, problems can emerge but the process is relatively safe.</p>
<p>On the other hand, in Gentoo we are talking about rebuilding <kbd>@world</kbd> while breaking ABI in place.  For a start, we are talking around prolonged periods of time between two packages being rebuilt when they would actually be mixing incompatible ABI.  Then, there is a fair risk that some rebuild will fail and leave your system half-transitioned with no easy way out.  Then, there is a real risk that cyclic dependencies will actually make rebuild impossible — rebuilding a dependency will break build-time tools, preventing stuff from being rebuilt.  It’s a true horror.</p>
<h2>What can we do to make it safer?</h2>
<p>Our deliberations currently revolve about three ideas, that are semi-related, though not inevitably dependent one upon another:</p>
<ol>
<li>Changing the platform tuple (<kbd>CHOST</kbd>) for the new ABIs, to clearly distinguish them from the baseline 32-bit ABI.</li>
<li>Changing the libdir for the new ABIs, effectively permitting the rebuilt libraries to be installed independently of the original versions.</li>
<li>Introducing an binary-level ABI distinction that could prevent binaries using different sub-ABI to be linked to one another.</li>
</ol>
<p>The subsequent sections will focus on each of these changes in detail.  Note that all the values used there are just examples, and not necessarily the strings used in a final solution.</p>
<h2>The platform tuple change</h2>
<p>The platform tuple (generally referenced through the <kbd>CHOST</kbd> variable) identifies the platform targeted by the toolchain.  For example, it is used as a part of GCC/binutils install paths, effectively allowing toolchains for multiple targets to be installed simultaneously.  In clang, it can be used to switch between supported cross-compilation targets, and can control the defaults to match the specified ABI.  In Gentoo, it is also used to uniquely identify ABIs for the purpose of multilib support.  Because of that, we require that no two co-installable ABIs share the same tuple.</p>
<p>A tuple consists of four parts, separated by hyphens: architecture, vendor, operating system and libc.  Of these, vendor is generally freeform but the other three are restricted to some degree.  A few semi-equivalent examples of tuples used for 32-bit x86 platform include:</p>
<pre>i386-pc-linux-gnu
i686-pc-linux-gnu
i686-unknown-linux-gnu</pre>
<p>Historically, two approaches were used to introduce new ABIs.  Either the vendor field was changed, or an additional ABI specification was appended to the libc field.  For example, Gentoo historically used two different kind of tuples for ARM ABIs with hardware floating-point unit:</p>
<pre>armv7a-hardfloat-linux-gnueabi
armv7a-unknown-linux-gnueabihf</pre>
<p>The former approach was used earlier, to avoid incompatibility problems resulting from altering other tuple fields.  However, as these were fixed and upstreams normalized on the latter solution, Gentoo followed suit.</p>
<p>Similarly, the discussion of time64 ABIs resurfaced the same dilemma: should we just “abuse” the vendor field for this, or instead change libc field and fix packages?  The main difference is that the former is “cleaner” as a downstream solution limited to Gentoo, while the latter generally opens up discussions about interoperability.  Therefore, the options look like:</p>
<pre>i686-gentoo_t64-linux-gnu
i686-pc-linux-gnut64
armv7a-gentoo_t64-linux-gnueabihf
armv7a-unknown-linux-gnueabihft64</pre>
<p>Fortunately, changing the tuple should not require much patching.  The GNU toolchain and GNU build system both ignore everything following “gnu” in the libc field.  Clang will require patching — but upstream is likely to accept our patches, and we will want to make patches anyway, as they will permit clang to automatically choose the right ABI based on the tuple.</p>
<h2>The libdir change</h2>
<p>The term “libdir” refers to the base name of the library install directory.  Having different libdirs, and therefore separate library install directories, makes it possible to build multilib systems, i.e. installing multiple ABI variations of libraries on a single system, and making it possible to run executables for different ABIs.  For example, this is what makes it possible to run 32-bit x86 executables on amd64 systems.</p>
<p>The libdir values are generally specified in the ABI.  Naturally, the baseline value is plain <kbd>lib</kbd>.  As a historical convention (since 32-bit architectures were first), usually 32-bit platforms (arm, ppc, x86) use <kbd>lib</kbd>, whereas their more modern 64-bit counterparts (amd64, arm64, ppc64) use <kbd>lib64</kbd> — even if a particular architecture never really supported multilib on Gentoo.</p>
<p>Architectures that support multiple ABIs also define different libdirs.  For example, the additional x32 ABI on x86 uses <kbd>libx32</kbd>.  MIPS n32 ABI uses <kbd>lib32</kbd> (with plain <kbd>lib</kbd> defining the o32 ABI).</p>
<p>Now, we are considering changing the libdir value for time64 variants of 32-bit ABIs, for example from <kbd>lib</kbd> to <kbd>libt64</kbd>.  This would make it possible to install the rebuilt libraries separately from the old libraries, effectively bringing three advantages:</p>
<ol>
<li>reducing the risk of time64 executables accidentally linking to time32 libraries,</li>
<li>enabling Portage’s <kbd>preserved-libs</kbd> feature to preserve time32 libraries once the respective packages have been rebuilt for time64, and before their reverse dependencies have been rebuilt,</li>
<li>optionally, making it possible to use a time32 + time64 multilib profiles, that could be used to preserve compatibility with prebuilt time32 applications linking to system libraries.</li>
</ol>
<p>In my opinion, the second point is a killer feature.  As I’ve mentioned before, we are talking about the kind of migration that would break executables for a prolonged time on production systems, and possibly break build-time tools, preventing the rebuild from proceeding further.  By preserving original libraries, we are minimizing the risk of actual breakage, since the existing executables will keep using the time32 libraries until they are rebuilt and linked to the time64 libraries.</p>
<p>The libdir change is definitely going to require some toolchain patching.  We may want to also consider special-casing glibc, as the same set of glibc libraries is valid for all of the sub-ABIs we were considering.  However, we will probably want a separate <kbd>ld.so</kbd> executable, as it would need to load libraries from the correct libdir, and then we will want to set <kbd>.interp</kbd> in time64 executables to reference the time64 <kbd>ld.so</kbd>.</p>
<p>Note that due to how multilib is designed in Gentoo, a proper multilib support for this (i.e. the third point) requires a unique platform tuple for the ABI as well — so that specific aspect is dependent on the tuple change.</p>
<h2>Ensuring binary incompatibility</h2>
<p>In general, you can’t mix binaries using different ABIs.  For example, if you try to link a 64-bit program to a 32-bit library, the linker will object:</p>
<pre>$ cc foo.c libfoo.so 
/usr/lib/gcc/x86_64-pc-linux-gnu/14/../../../../x86_64-pc-linux-gnu/bin/ld: libfoo.so: error adding symbols: file in wrong format
collect2: error: ld returned 1 exit status</pre>
<p>Similarly, the dynamic loader will refuse to use a 32-bit library with 64-bit program:</p>
<pre>$ ./foo 
./foo: error while loading shared libraries: libfoo.so: wrong ELF class: ELFCLASS32</pre>
<p>There a few mechanisms that are used for this.  As demonstrated above, architectures with 32-bit and 64-bit ABIs use two distinct ELF classes (<kbd>ELFCLASS32</kbd> and <kbd>ELFCLASS64</kbd>).  Additionally, some architectures use different machine identifiers (<kbd>EM_386</kbd> vs. <kbd>EM_X86_64</kbd>, <kbd>EM_PPC</kbd> vs. <kbd>EM_PPC64</kbd>).  The x32 bit ABI on x86 “abuses” this by declaring its binaries as <kbd>ELFCLASS32 + EM_X86_64</kbd> (and therefore distinct from <kbd>ELFCLASS32 + EM_386</kbd> and from <kbd>ELFCLASS64 + EM_X86_64</kbd>).</p>
<p>Both ARM and MIPS use the flags field (it is a bit-field with architecture-specific flags) to distinguish different ABIs (hardfloat vs. softfloat, n32 ABI on MIPS…).  Additionally, both feature a dedicated attribute section — and again, the linker refuses to link incompatible object files.</p>
<p>It may be desirable to implement a similar mechanism for time32 and time64 systems.  Unfortunately, it’s not a trivial task.  It doesn’t seem that there is a reusable generic mechanism that could be used for that.  On top of that, we need a solution that would fit a fair number of different architectures.  It seems that the most reasonably solution right now would be to add a new ELF note section dedicated to this feature, and implement complete toolchain support for it.</p>
<p>However, whatever we decide to do, we need to take into consideration that the user may want to disable it.  Particularly, there is a fair number of prebuilt software that have no sources available, and it may continue working correctly against system libs, provided it does not call into any API using <kbd>time_t</kbd>.  The cure of unconditionally preventing them from working might be worse than the disease.</p>
<p>On the bright side, it should be possible to create a non-fatal QA check for this without much hacking, provided that we go with separate libdirs.  We can distinguish time64 executables by their <kbd>.interp</kbd> section, pointing to the dynamic loader in the appropriate libdir, and then verify that time32 programs will not load any libraries from <kbd>libt64</kbd>, and that time64 programs will not load any libraries directly from <kbd>lib</kbd>.</p>
<h2>What about old prebuilt applications?</h2>
<p>So far we were concerned about packages that are building from sources.  However, there is still a fair number of old applications, usually proprietary, that are available only as prebuilt binaries — particularly for x86 and PowerPC architectures.  These packages are going to face two problems: firstly, compatibility issues with system libraries, and secondly, the y2k38 problem itself.</p>
<p>For the compatibility problem, we have a reasonably good solution already.  Since we already had to make them work on amd64, we have a multilib layout in place, along with necessary machinery to build multiple library versions.  In fact, given that the primary purpose of multilib is compatibility with old software, it’s not even clear if there is much of a point in switching amd64 multilib to use time64 for 32-bit binaries.  Either way, we can easily extend our multilib machinery to distinguish the regular <kbd>abi_x86_32</kbd> target from <kbd>abi_x86_t64</kbd> (and we probably should do that anyway), and then create new multilib x86 profiles that would support both ABIs.</p>
<p>The second part is much harder.  Obviously, as soon as we’re past the 2038 cutoff date, all 32-bit programs — using system libraries or not — will simply start failing in horrible ways.  One possibility is to work with <a rel="external" href="https://github.com/wolfcw/libfaketime">faketime</a> to control the system clock.  Another is to run a whole VM that’s moved back in time.</p>
<h2>Summary</h2>
<p>As 2038 is approaching, 32-bit applications exercising 32-bit <kbd>time_t</kbd> are up to stop working.  At this point, it is pretty clear that the only way forward is to rebuild these applications with 64-bit <kbd>time_t</kbd> (and while at it, force <abbr title="Large File Support">LFS as well).  Unfortunately, that’s not a trivial task since it involves an ABI change, and mixing time32 and time64 programs and libraries can lead to horrible runtime bugs.</abbr></p>
<p>While the exact details are still in the making, the proposed changes revolve around three ideas that can be implemented independently to some degree: changing the platform tuple (<kbd>CHOST</kbd>), changing libdir and preventing accidentally mixing time32 and time64 binaries.</p>
<p>The tuple change is mostly a more formal way of distinguishing builds for the regular time32 ABI (e.g. <kbd>i686-pc-linux-gnu</kbd>) from ones specifically targeting time64 (e.g. <kbd>i686-pc-linux-gnut64</kbd>).  It should be relatively harmless and easy to carry out, with minimal amount of fixing necessary.  For example, clang will need to be updated to accept new tuples.</p>
<p>The libdir change is probably the most important of all, as it permits a breakage-free transition, thanks to Portage’s <kbd>preserved-libs</kbd> feature.  Long story short, time64 libraries get installed to a new libdir (e.g. <kbd>libt64</kbd>), and the original time32 libraries remain in <kbd>lib</kbd> until the applications using them are rebuilt.  Unfortunately, it’s a bit harder to implement — it requires toolchain changes, and ensuring that all software correctly respects libdir.  The extra difficulty is that with this change alone, the dynamic loader won’t ignore time32 libraries if e.g. <kbd>-Wl,-rpath,/usr/lib</kbd> is injected somewhere.</p>
<p>The incompatibility part is quite important, but also quite difficult.  Ideally, we’d like to stop the linker from trying to accidentally link time32 libraries with time64 programs, and likewise the dynamic loader from trying to load them.  Unfortunately, so far we weren’t able to come up with a realistic way of doing that, short of actually making some intrusive changes to the toolchain.  On the positive side, writing a QA check to detect accidental mixing at build time shouldn’t be that hard.</p>
<p>Doing all three should enable us to provide a clean and relatively safe transition path for 32-bit Gentoo systems using glibc.  However, these only solve problems for packages built from source.  Prebuilt 32-bit applications, particularly proprietary software like old games, can’t be helped that way.  And even if time64 changes won’t break them via breaking the ABI compatibility with system libraries, then year 2038 will.  Unfortunately, there does not seem to be a good solution to that, short of actually running them with faked system time, one way or another.</p>
<p>Of course, all of this is still only a rough draft.  A lot may still change, following experiments, discussion and patch submission.</p>
<h2>Acknowledgements</h2>
<p>I would like to thank the following people for proof-reading and suggestions, and for their overall work towards time64 support in Gentoo: Arsen Arsenović, Andreas K. Hüttel, Sam James and Alexander Monakov.</p>
	</div><!-- .entry-content -->

	<!-- .entry-footer -->
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Autossh – automatically restart SSH sessions and tunnels (108 pts)]]></title>
            <link>https://github.com/Autossh/autossh</link>
            <guid>41681110</guid>
            <pubDate>Sat, 28 Sep 2024 16:09:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Autossh/autossh">https://github.com/Autossh/autossh</a>, See on <a href="https://news.ycombinator.com/item?id=41681110">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><pre>autossh Version 1.4
-------------------

Building and Installing Autossh
--------------------------------

With version 1.4, autossh now uses autoconf. So the build procedure
is now the well-known:

	./configure
	make
	make install

Look at autossh.host for an example wrapper script.


Usage
-----
	autossh [-M &lt;port&gt;[:echo_port]] [-f] [SSH OPTIONS]

Description
-----------

autossh is a program to start a copy of ssh and monitor it, restarting
it as necessary should it die or stop passing traffic.

The original idea and the mechanism were from rstunnel (Reliable SSH
Tunnel). With version 1.2 the method changed: autossh now uses ssh to
construct a loop of ssh forwardings (one from local to remote, one
from remote to local), and then sends test data that it expects to get
back. (The idea is thanks to Terrence Martin.) 

With version 1.3, a new method is added (thanks to Ron Yorston): a
port may be specified for a remote echo service that will echo back
the test data. This avoids the congestion and the aggravation of
making sure all the port numbers on the remote machine do not
collide. The loop-of -forwardings method remains available for
situations where using an echo service may not be possible.

autossh has only three arguments of its own:

 -M &lt;port&gt;[:echo_port], to specify the base monitoring port to use, or
	alternatively, to specify the monitoring port and echo service
	port to use. 

	When no echo service port is specified, this port and the port 
	immediately above it (port# + 1) should be something nothing 
	else is using. autossh will send test data on the base monitoring 
	port, and receive it back on the port above. For example, if you 
	specify "-M 20000", autossh will set up forwards so that it can 
	send data on port 20000 and receive it back on 20001.

	Alternatively a port for a remote echo service may be
	specified. This should be port 7 if you wish to use the
	standard inetd echo service.  When an echo port is specified,
	only the specified monitor port is used, and it carries the
	monitor message in both directions.

	Many people disable the echo service, or even disable inetd,
	so check that this service is available on the remote
	machine. Some operating systems allow one to specify that the
	service only listen on the localhost (loopback interface),
	which would suffice for this use.

	The echo service may also be something more complicated:
	perhaps a daemon that monitors a group of ssh tunnels.

	-M 0 will turn the monitoring off, and autossh will only
	restart ssh on ssh exit.

	For example, if you are using a recent version of OpenSSH, you 
	may wish to explore using the ServerAliveInterval and 
	ServerAliveCountMax options to have the SSH client exit if it 
	finds itself no longer connected to the server. In many ways 
	this may be a better solution than the monitoring port.

 -f     Causes autossh to drop to the background before running ssh. The
        -f flag is stripped from arguments passed to ssh. Note that there
        is a crucial difference between the -f with autossh, and -f
        with ssh: when used with autossh, ssh will be *unable* to ask for
        passwords or passphrases. When -f is used, the "starting gate"
        time (see AUTOSSH_GATETIME) will be set to 0.

 -V     to have autossh display its version and exit.

All other arguments are passed to ssh. There are a number of
other settings, but these are all controlled through environment
variables. ssh seems to be appropriating more and more letters for
options, and this seems the easiest way to avoid collisions.

autossh tries to distinguish the manner of death of the ssh process it
is monitoring and act appropriately. The rules are:

   - If the ssh process exited normally (for example, someone typed
     "exit" in an interactive session), autossh exits rather than 
     restarting;
   - If autossh itself receives a SIGTERM, SIGINT, or a SIGKILL
     signal, it assumes that it was deliberately signalled, and exits
     after killing the child ssh process;
   - If autossh itself receives a SIGUSR1 signal, it will kill the child
     ssh process and start a new one;
   - Periodically (by default every 10 minutes), autossh attempts to pass
     traffic on the monitor forwarded port. If this fails, autossh will
     kill the child ssh process (if it is still running) and start a new
     one; 
   - If the child ssh process dies for any other reason, autossh will
     attempt to start a new one.

Startup behaviour:

   - If the ssh session fails with an exit status of 1 on the very first 
     try, autossh will assume that there is some problem with syntax or
     the connection setup, and will exit rather than retrying;
   - There is now a "starting gate" time. If the first ssh process fails 
     within the first few seconds of being started, autossh assumes that 
     it never made it "out of the starting gate", and exits. This is to handle
     initial failed authentication, connection, etc. This time is 30 seconds
     by default, and can be adjusted (see the AUTOSSH_GATETIME environment
     variable below).
   - NOTE: If AUTOSSH_GATETIME is set to 0, then BOTH of the above
           behaviours are disabled. This is useful for, for example,
	   having autossh start on boot. The "starting gate" time is
	   also set to 0 with the -f flag to autossh is used.

Continued failures:

   - If the ssh connection fails and attempts to restart it fail in
     quick succession, autossh will start delaying its attempts to
     restart, gradually backing farther and farther off up to a
     maximum interval of the autossh poll time (usually 10 minutes).
     autossh can be "prodded" to retry by signalling it, perhaps with
     SIGHUP ("kill -HUP").

Connection Setup
----------------

As connections must be established unattended, the use of autossh
requires that some form of automatic authentication be set up. The use
of RSAAuthentication with ssh-agent is the recommended method. The
example wrapper script attempts to check if there is an agent running
for the current environment, and to start one if there isn't.

It cannot be stressed enough that you must make sure ssh works on its
own, that you can set up the session you want before you try to
run it under autossh.

If you are tunnelling and using an older version of ssh that does not
support the -N flag, you should upgrade (your version has security
flaws). If you can't upgrade, you may wish to do as rstunnel does, and
give ssh a command to run, such as "sleep 99999999999".

Disabling connection monitoring
-------------------------------

A monitor port value of "0" ("autossh -M 0") will disable use of
the monitor ports; autossh will then only react to signals and the
death of the ssh process.

Environment Variables
---------------------

The following environment variables can be set:

    AUTOSSH_DEBUG	  - sets logging level to LOG_DEBUG, and if
			    the operating system supports it, sets
			    syslog to duplicate log entries to stderr.
    AUTOSSH_FIRST_POLL	  - time to initial poll (default is as 
			    AUTOSSH_POLL below).
    AUTOSSH_GATETIME      - how long ssh must be up before we consider
	                    it a successful connection. Default is 30
			    seconds. If set to 0, then this behaviour
			    is disabled, and as well, autossh will retry
			    even on failure of first attempt to run ssh.
    AUTOSSH_LOGFILE	  - sets autossh to use the named log file,
			    rather than syslog.
    AUTOSSH_LOGLEVEL	  - log level, they correspond to the levels 
			    used by syslog; so 0-7 with 7 being the
			    chattiest.
    AUTOSSH_MAXLIFETIME   - Sets the maximum number of seconds the process 
			    should live for before killing off the ssh child 
			    and exiting.
    AUTOSSH_MAXSTART	  - specifies how many times ssh should be started.
			    A negative number means no limit on the number 
			    of times ssh is started. The default value is -1.
    AUTOSSH_MESSAGE	  - append a custom message to the echo string (max 64
			    bytes).
    AUTOSSH_NTSERVICE     - when set to "yes" , setup autossh to run as an 
			    NT service under cygrunsrv. This adds the -N flag
			    for ssh if not already set, sets the log output 
			    to stdout, and changes the behaviour on ssh exit 
			    so that it will restart even on a normal exit.
    AUTOSSH_PATH	  - path to the ssh executable, in case
			    it is different than that compiled in.
    AUTOSSH_PIDFILE	  - write autossh pid to specified file.
    AUTOSSH_POLL	  - poll time in seconds; default is 600.
    			    Changing this will also change the first
			    poll time, unless AUTOSSH_FIRST_POLL is
			    used to set it to something different.
			    If the poll time is less than twice the 
			    network timeouts (default 15 seconds) the 
			    network timeouts will be adjusted downward 
			    to 1/2 the poll time.
    AUTOSSH_PORT	  - set monitor port. Mostly in case ssh
			    appropriates -M at some time. But because
			    of this possible use, AUTOSSH_PORT overrides
			    the -M flag.

SSH Options
------------------

There are two particular OpenSSH options that are useful when using
autossh:

1) ExitOnForwardFailure=yes on the client side to make sure forwardings
have succeeded when autossh assumes the connection is setup properly.

2) ClientAliveInterval on the server side to make sure the listening
socket is closed on the server side if the connection closes on the
client side.

Logging and Syslog
------------------

autossh logs to syslog using the LOG_USER facility. Your syslog may
have to be configured to accept messages for this facility. This is
usually done in /etc/syslog.conf.

-- 
Kudos and raspberries to harding [at] motd.ca
</pre></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Little Typer (2018) (115 pts)]]></title>
            <link>https://thelittletyper.com/</link>
            <guid>41680621</guid>
            <pubDate>Sat, 28 Sep 2024 14:54:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thelittletyper.com/">https://thelittletyper.com/</a>, See on <a href="https://news.ycombinator.com/item?id=41680621">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="pie">
<h2>Getting Pie</h2>
<p>
An implementation of Pie is available from the Racket package system. To install Pie, first install a recent version of <a href="https://racket-lang.org/">Racket</a>. Open DrRacket and select "Install Package" from the "File" menu. In the package name field, type <code>pie</code> and then click the "Install" button.
</p>
<p>
To use Pie, begin a file with <code>#lang pie</code> in DrRacket.
</p>
<h2>Errata</h2><p>
There are <a href="https://thelittletyper.com/errata.html">known errata</a>.
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Role of Deliberate Practice in the Development of Creativity (2014) (151 pts)]]></title>
            <link>https://repositories.lib.utexas.edu/server/api/core/bitstreams/c8cc4a4f-e641-462b-9a72-654e60f71485/content</link>
            <guid>41680156</guid>
            <pubDate>Sat, 28 Sep 2024 13:35:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://repositories.lib.utexas.edu/server/api/core/bitstreams/c8cc4a4f-e641-462b-9a72-654e60f71485/content">https://repositories.lib.utexas.edu/server/api/core/bitstreams/c8cc4a4f-e641-462b-9a72-654e60f71485/content</a>, See on <a href="https://news.ycombinator.com/item?id=41680156">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Remember That DNA You Gave 23andMe? (133 pts)]]></title>
            <link>https://www.theatlantic.com/health/archive/2024/09/23andme-dna-data-privacy-sale/680057/</link>
            <guid>41679994</guid>
            <pubDate>Sat, 28 Sep 2024 13:05:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theatlantic.com/health/archive/2024/09/23andme-dna-data-privacy-sale/680057/">https://www.theatlantic.com/health/archive/2024/09/23andme-dna-data-privacy-sale/680057/</a>, See on <a href="https://news.ycombinator.com/item?id=41679994">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header data-event-module="hero"><div><div><p>The company is in trouble, and anyone who has spit into one of the company’s test tubes should be concerned.</p></div><div><figure><div data-flatplan-lead_figure_media="true"><picture><img alt="Color illustration of a giant double helix in a shopping basket" sizes="(min-width: 976px) 976px, 100vw" srcset="https://cdn.theatlantic.com/thumbor/dwhsnYACFAvfTQqvJU1jM0Wf33E=/0x0:2000x1125/750x422/media/img/mt/2024/09/DNA_worth_final/original.jpg 750w, https://cdn.theatlantic.com/thumbor/MLFiD4XYUzOY1K7S38OlTGj-uiM=/0x0:2000x1125/828x466/media/img/mt/2024/09/DNA_worth_final/original.jpg 828w, https://cdn.theatlantic.com/thumbor/WwkP2L9X1IgqS4qdxVv8Q3N_b40=/0x0:2000x1125/960x540/media/img/mt/2024/09/DNA_worth_final/original.jpg 960w, https://cdn.theatlantic.com/thumbor/M2GrcZbd_Bu2ZtfNk2Dj8vNTPKc=/0x0:2000x1125/976x549/media/img/mt/2024/09/DNA_worth_final/original.jpg 976w, https://cdn.theatlantic.com/thumbor/RhYugbaHCEY3uJ7BVHhLlEx1-i4=/0x0:2000x1125/1952x1098/media/img/mt/2024/09/DNA_worth_final/original.jpg 1952w" src="https://cdn.theatlantic.com/thumbor/WwkP2L9X1IgqS4qdxVv8Q3N_b40=/0x0:2000x1125/960x540/media/img/mt/2024/09/DNA_worth_final/original.jpg" id="article-lead-image" width="960" height="540"></picture></div><figcaption data-flatplan-lead_figure_caption="true">Illustration by Akshita Chandra / The Atlantic. Source: Getty.</figcaption></figure></div></div><div><p><time datetime="2024-09-27T19:38:43Z" data-flatplan-timestamp="true">September 27, 2024, 3:38 PM ET</time> </p></div><gpt-ad format="injector" sizes-at-0="mobile-wide" targeting-pos="injector-article-start" sizes-at-976="desktop-wide"></gpt-ad></header><div data-view-action="view - audio player - start" data-view-label="680057" data-event-module="audio player" data-event-content-type="narrated" data-event-module-state="start" data-event-view="true"><div><p><img alt="Color illustration of a giant double helix in a shopping basket" sizes="80px" srcset="https://cdn.theatlantic.com/thumbor/rwZx92FyPVT1ymZXOiILr4G0yhI=/468x0:1593x1125/80x80/media/img/mt/2024/09/DNA_worth_final/original.jpg 80w, https://cdn.theatlantic.com/thumbor/565G5BewAZ5UlhVeki_2SFXer4s=/468x0:1593x1125/96x96/media/img/mt/2024/09/DNA_worth_final/original.jpg 96w, https://cdn.theatlantic.com/thumbor/Si6PbOzrASQN205HpG0efjDuUFk=/468x0:1593x1125/128x128/media/img/mt/2024/09/DNA_worth_final/original.jpg 128w, https://cdn.theatlantic.com/thumbor/UVKXXysPaBSYqrDpsrqe0iH82HI=/468x0:1593x1125/160x160/media/img/mt/2024/09/DNA_worth_final/original.jpg 160w, https://cdn.theatlantic.com/thumbor/rhx86PEA9BXeL5Iw7gasrTkgSrQ=/468x0:1593x1125/192x192/media/img/mt/2024/09/DNA_worth_final/original.jpg 192w, https://cdn.theatlantic.com/thumbor/JBZed8stnKCET-WqjFwspCXJitE=/468x0:1593x1125/256x256/media/img/mt/2024/09/DNA_worth_final/original.jpg 256w, https://cdn.theatlantic.com/thumbor/c3TQ4Kv3aJ35PrqkiFwJaJptexc=/468x0:1593x1125/384x384/media/img/mt/2024/09/DNA_worth_final/original.jpg 384w, https://cdn.theatlantic.com/thumbor/TMpuUFZOmyFXWaQgM47TfQQY_Wg=/468x0:1593x1125/512x512/media/img/mt/2024/09/DNA_worth_final/original.jpg 512w" src="https://cdn.theatlantic.com/thumbor/rwZx92FyPVT1ymZXOiILr4G0yhI=/468x0:1593x1125/80x80/media/img/mt/2024/09/DNA_worth_final/original.jpg" width="80" height="80"></p></div><p>Produced by ElevenLabs and News Over Audio (NOA) using AI narration.</p></div><section data-event-module="article body" data-flatplan-body="true"><p data-flatplan-paragraph="true">23andMe is <a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2024-08-08/23andme-s-quarterly-sales-miss-estimates-as-ceo-seeks-control?srnd=undefined">not doing well</a>. Its stock is on the verge of being delisted. It shut down its in-house drug-development unit last month, only the latest in several rounds of layoffs. Last week, the <a data-event-element="inline link" href="https://www.theguardian.com/technology/2024/sep/18/23andme-directors-resign">entire board of directors</a> quit, save for Anne Wojcicki, a co-founder and the company’s CEO. Amid this downward spiral, Wojcicki <a data-event-element="inline link" href="https://www.reuters.com/markets/deals/23andme-ceo-wojcicki-open-third-party-takeover-proposals-firm-filing-shows-2024-09-11/">has said</a> she’ll consider selling 23andMe—which means the DNA of 23andMe’s 15 million customers would be up for sale, too.</p><p data-flatplan-paragraph="true">23andMe’s trove of genetic data might be its most valuable asset. For about two decades now, since human-genome analysis became quick and common, the A’s, C’s, G’s, and T’s of DNA have allowed long-lost relatives to connect, <a data-event-element="inline link" href="https://www.theatlantic.com/health/archive/2024/03/dna-tests-incest/677791/">revealed family secrets</a>, and helped police catch serial killers. Some people’s genomes contain clues to what’s making them sick, or even, <a data-event-element="inline link" href="https://www.bloomberg.com/news/features/2024-05-15/23andme-s-dna-test-drama-shows-limits-of-what-genetics-can-do">occasionally</a>, how their disease should be treated. For most of us, though, consumer tests don’t have much to offer beyond a snapshot of our ancestors’ roots and confirmation of the traits we already know about. (Yes, 23andMe, my eyes <em>are</em> blue.) 23andMe is floundering in part because it hasn’t managed to prove the value of collecting all that sensitive, personal information. And potential buyers may have very different ideas about how to use the company’s DNA data to raise the company’s bottom line. This should concern anyone who has used the service.</p><p data-flatplan-paragraph="true">DNA might contain health information, but unlike a doctor’s office, 23andMe is not bound by the health-privacy law HIPAA. And the company’s <a data-event-element="inline link" href="https://www.23andme.com/legal/privacy/full-version/">privacy policies</a> make clear that in the event of a merger or an acquisition, customer information is a salable asset. 23andMe promises to ask its customers’ permission before using their data for research or targeted advertising, but that doesn’t mean the next boss will do the same. It says so right there in the fine print: The company reserves the right to update its policies at any time. A spokesperson acknowledged to me this week that the company can’t fully guarantee the sanctity of customer data, but said in a statement that “any scenario which impacts our customer's data would need to be carefully considered. We take the privacy and trust of our customers very seriously, and would strive to maintain commitments outlined in our Privacy Statement.”</p><p data-flatplan-paragraph="true"><a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2023-12-05/the-risks-of-sharing-your-dna-with-genetic-testing-firms-like-23andme?embedded-checkout=true">Certain parties</a> might take an obvious interest in the secrets of Americans’ genomes. Insurers, for example, would probably like to know about any genetic predispositions that might make you more expensive to them. In the United States, a <a data-event-element="inline link" href="http://www.ginahelp.org/">2008 law</a> called the Genetic Information Nondiscrimination Act protects against discrimination by employers and health insurers on the basis of genetic data, but <a data-event-element="inline link" href="https://www.fastcompany.com/3055710/if-you-want-life-insurance-think-twice-before-getting-genetic-testing">gaps in it</a> exempt providers of life, disability, and long-term-care insurance from such restrictions. That means that if you have, say, a genetic marker that can be correlated with a heart condition, a life insurer could find that out and legally deny you a policy—even if you never actually develop that condition. Law-enforcement agencies rely on DNA data to solve many difficult cases, and although 23andMe says it requires a warrant to share data, <a data-event-element="inline link" href="https://www.gedmatch.com/join-the-genetic-witness-program/">some other companies</a> <a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2019-02-01/major-dna-testing-company-is-sharing-genetic-data-with-the-fbi">have granted</a> broad access to police. You don’t have to commit a crime to be affected: Because we share large chunks of our genome with relatives, your DNA could be used to implicate a close family member or even a third cousin whom you’ve never met. Information about your ethnicity can also be sensitive, and that’s encoded in your genome, too. That’s all part of why, in 2020, the U.S. military <a data-event-element="inline link" href="https://www.army.mil/article/232314/osd_advises_service_members_against_using_dtc_genetic_testing">advised</a> its personnel against using consumer tests.</p><p id="injected-recirculation-link-0" data-view-action="view link - injected link - item 1" data-event-element="injected link" data-event-position="1"><a href="https://www.theatlantic.com/science/archive/2018/07/big-pharma-dna/566240/">Read: Big Pharma would like your DNA</a></p><p data-flatplan-paragraph="true">Spelling out all the potential consequences of an unknown party accessing your DNA is impossible, because scientists’ understanding of the genome is still evolving. Imagine drugmakers trolling your genome to find out what ailments you’re at risk for and then targeting you with ads for drugs to treat them. “There’s a lot of ways that this data might be misused or used in a way that the consumers couldn’t anticipate when they first bought 23andMe,” Suzanne Bernstein, counsel at the Electronic Privacy Information Center, told me. And unlike a password that can be changed after it leaks, once your DNA is out in the wild, it’s out there for good.</p><p data-flatplan-paragraph="true">Some states, <a data-event-element="inline link" href="https://privacyrights.org/resources/genetic-information-privacy-act-california#:~:text=The%20Genetic%20Information%20Privacy%20Act,with%20access%20and%20deletion%20rights.">such as California,</a> give consumers additional genetic-privacy rights and might allow DNA data to be deleted ahead of a sale. The 23andMe spokesperson told me that “customers have the ability to download their data and delete their personal accounts.” Companies are also required to notify customers of any changes to terms of service and give them a chance to opt out, though typically such changes take effect automatically after a certain amount of time, whether or not you’ve read through the fine print.</p><p data-flatplan-paragraph="true">Consumers have assumed this risk without getting much in return. When the first draft of the human genome was unveiled, it was billed as a panacea, hiding within its code secrets that would help each and every one of us unlock a personalized health plan. But <a data-event-element="inline link" href="https://www.bloomberg.com/news/features/2024-05-15/23andme-s-dna-test-drama-shows-limits-of-what-genetics-can-do">most diseases</a>, it turns out, can't be pinned on a single gene. And most people have a boring genome, free of red-flag mutations, which means DNA data just <a data-event-element="inline link" href="https://www.bloomberg.com/news/features/2024-05-15/23andme-s-dna-test-drama-shows-limits-of-what-genetics-can-do">aren’t that useful</a> to them—at least not in this form. And if a DNA test reveals elevated risk for a more common health condition, such as diabetes and heart disease, you probably already know the interventions: eating well, exercising often, getting a solid eight hours of sleep. (To an insurer, though, even a modicum of risk might make someone an unattractive candidate for coverage.) That’s likely a big part of why 23andMe’s sales have slipped. There are only so many people who want to know about their Swedish ancestry, and that, it turns out, is consumer DNA testing’s biggest sell.</p><p id="injected-recirculation-link-1" data-view-action="view link - injected link - item 2" data-event-element="injected link" data-event-position="2"><a href="https://www.theatlantic.com/health/archive/2024/03/dna-tests-incest/677791/">Read: DNA tests are uncovering the true prevalence of incest</a></p><p data-flatplan-paragraph="true">Wojcicki has pulled 23andMe back from the brink before, after the Food and Drug Administration ordered the company to <a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2013-11-27/do-genetic-tests-need-doctors-fda-defends-its-challenge-to-23andme">stop selling</a> its health tests in 2013 until they could be proved safe and effective. In recent months, Wojcicki has explored a variety of options to save the company, including splitting it to separate the cash-burning drug business from the consumer side. Wojcicki has <a data-event-element="inline link" href="https://investors.23andme.com/node/9936/html">still expressed interest</a> in trying to take the company private herself, but the board rejected her initial offer. 23andMe has until November 4 to raise its shares to at least $1, or be delisted. As that date approaches, a sale looks more and more likely—whether to Wojcicki or someone else.</p><p data-flatplan-paragraph="true">The risk of DNA data being misused has existed since DNA tests first became available. When customers opt in to participate in drug-development research, third parties already get access to their de-identified DNA data, which can in some cases be <a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2018-06-15/deleting-your-online-dna-data-is-brutally-difficult">linked back to people’s identities</a> after all. Plus, 23andMe has failed to protect its customers’ information in the past—it just agreed to pay <a data-event-element="inline link" href="https://www.reuters.com/technology/cybersecurity/23andme-settles-data-breach-lawsuit-30-million-2024-09-13/">$30 million</a> to settle a lawsuit resulting from an October 2023 data breach. But for nearly two decades, the company had an incentive to keep its customers’ data private: 23andMe is a consumer-facing business, and to sell kits, it also needed to win trust. Whoever buys the company’s data may not operate under the same constraints.</p></section><div data-event-module="footer"><p><h3>About the Author</h3></p></div><gpt-ad format="injector" sizes-at-0="mobile-wide,native,house" targeting-pos="injector-most-popular" sizes-at-976="desktop-wide,native,house"></gpt-ad></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SunVox: Powerful Modular Synthesizer and DAW (143 pts)]]></title>
            <link>https://www.warmplace.ru/soft/sunvox/</link>
            <guid>41679972</guid>
            <pubDate>Sat, 28 Sep 2024 13:00:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.warmplace.ru/soft/sunvox/">https://www.warmplace.ru/soft/sunvox/</a>, See on <a href="https://news.ycombinator.com/item?id=41679972">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="outer_content_div">


<center>
<p>SunVox</p>
<p>Latest release - v2.1.1c (29 nov 2023)</p>
<a href="https://www.warmplace.ru/soft/sunvox/index_ru.php">Русская версия здесь</a><br>
</center>



<p><a href="#about">About</a><br>
<a href="https://www.warmplace.ru/soft/sunvox/manual.php">User manual</a><br>
<a href="#vid">Video</a> | 
<a href="https://www.warmplace.ru/forum/viewtopic.php?f=3&amp;t=1223">Tutorials</a> | 
<a href="#scr">Screenshots</a> | 
<a href="https://www.warmplace.ru/soft/sunvox/art.php">Logo</a><br>
<a href="#music">Music</a> | 
<a href="https://www.warmplace.ru/forum/viewtopic.php?f=16&amp;t=1445">Samples</a> | 
<a href="https://www.warmplace.ru/forum/viewforum.php?f=11">Modules</a><br>
<a href="https://www.warmplace.ru/forum/viewforum.php?f=16">Forum</a> | 
<a href="https://www.facebook.com/groups/sunvox/">FB</a> | 
<a href="https://t.me/joinchat/ROQAGZ12P9MLDQUu">Telegram chat</a>/<a href="https://t.me/sunvox">news</a><br>
<a href="#old">Old versions</a></p><p>What is SunVox</p>
<p>

SunVox is a small, fast and powerful <a href="https://en.wikipedia.org/wiki/Modular_synthesizer">modular synthesizer</a> with pattern-based sequencer (<a href="https://en.wikipedia.org/wiki/Tracker_(music_software)">tracker</a>). 
It is a tool for those people who like to compose music wherever they are, whenever they wish. On any device. On any system.
And it's free for most of the systems, except the Android and iOS.</p><center><br><img alt="SunVox - Modular Music Studio in Your Pocket" src="https://www.warmplace.ru/soft/sunvox/images/sunvox.jpg"></center>
<p>

Key features:
</p><ul>
<li>highly optimized synth algorithms, flexible architecture; SunVox works on a variety of devices with different CPUs;
</li><li>supported systems: <ul>
<li>Windows (2000+);
</li><li>macOS (10.13+);
</li><li>Linux (x86, x86_64, ARM (Raspberry Pi, PocketCHIP, N900, etc.), ARM64 (PINE64, etc.));
</li><li>iOS (12.0+);
</li><li>Android (4.1+);
</li><li>Windows CE (including Pocket PC and Windows Mobile; ARM only);
</li></ul>
</li><li>supported sound systems: ASIO, DirectSound, MME, ALSA, OSS, JACK, Audiobus, IAA;
</li><li>SunVox as a plugin: AU instrument/effect for iOS;
</li><li>support of 16/24/32bit WAV, AIFF and XI samples;
</li><li>multitrack WAV export;
</li><li>MIDI In/Out/Import/Export;
</li><li>XM (FastTracker) and MOD (ProTracker, OctaMED) import;
</li><li>real-time sample recording;
</li><li>real-time recording of any types of sound events (notes, Touch Theremin, controllers);
</li><li>powerful microtonal (ultra-chromatic) sequencer;
</li><li>generative music features: random selection of notes, random values of controllers, probability effects; <a href="https://www.warmplace.ru/soft/sunvox/jsplay/">see examples</a>;
</li><li>free cross-platform <a href="https://www.warmplace.ru/soft/sunvox/sunvox_lib.php">library</a> for developers is available; so it's possible to use SunVox engine in your own applications;
</li><li>a lot of built-in modules (synths and effects) + ability to make very complex connections between them.
<!--<ul>
<li>Generators;
<li>DrumSynth with 120 unique synthetic drum sounds;
<li>FM synth;
<li>Sampler (multisample instrument);
<li>SpectraVoice (FFT-based synthesizer for warm atmospheric sounds);
<li>Side Chain Compressor;
<li>Distortion;
<li>Echo & Reverb;
<li>Equalizer & Filters;
<li>Flanger;
<li>Loop (for glitch effects);
<li>Vocal Filter (for human voice simulation);
<li>Vorbis Player;
<li>WaveShaper;
<li>Pitch Detector;
<li>Pitch Shifter;
<li>and more ...
</ul>-->
</li></ul>

<p><a href="https://www.warmplace.ru/soft/sunvox/manual.php">More information...</a><br>(user manual, installation guide, system requirements, FAQ, etc.)</p><p>Screenshots</p>
<br>

<center>
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox36.png"><img alt="SunVox screenshot 1" src="https://www.warmplace.ru/soft/sunvox/images/01.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox37.png"><img alt="SunVox screenshot 2" src="https://www.warmplace.ru/soft/sunvox/images/02.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox38.png"><img alt="SunVox screenshot 3" src="https://www.warmplace.ru/soft/sunvox/images/03.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox39.png"><img alt="SunVox screenshot 4" src="https://www.warmplace.ru/soft/sunvox/images/04.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox40.png"><img alt="SunVox screenshot 5" src="https://www.warmplace.ru/soft/sunvox/images/05.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox41.png"><img alt="SunVox screenshot 6" src="https://www.warmplace.ru/soft/sunvox/images/06.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox42.png"><img alt="SunVox screenshot 7" src="https://www.warmplace.ru/soft/sunvox/images/07.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox43.png"><img alt="SunVox screenshot 8" src="https://www.warmplace.ru/soft/sunvox/images/08.png"></a><p>
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Compaq%20iPAQ%203850%20(WinMobile).jpg"><img alt="Compaq iPAQ 3850" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Compaq%20iPAQ%203850%20(WinMobile).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Dell%20Axim%20(WinMobile).jpg"><img alt="Dell Axim" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Dell%20Axim%20(WinMobile).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Jornada%20720%20(WinMobile)%20(2).jpg"><img alt="Jornada 720" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Jornada%20720%20(WinMobile)%20(2).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Jornada%20720%20(WinMobile).jpg"><img alt="Jornada 720" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Jornada%20720%20(WinMobile).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Nec%20MobilePro%20900%20(WinMobile).jpg"><img alt="Nec MobilePro 900" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Nec%20MobilePro%20900%20(WinMobile).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Nokia%20N900%20(Maemo).jpg"><img alt="Nokia N900" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Nokia%20N900%20(Maemo).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/TungstenT%20(PalmOS).jpg"><img alt="Tungsten|T" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20TungstenT%20(PalmOS).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/iPad,%20Alesis%20IO%20Dock,%20Monotron.jpg"><img alt="iPad, Alesis IO Dock, Monotron" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPad,%20Alesis%20IO%20Dock,%20Monotron.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/iPad2,%20MIDI.jpg"><img alt="iPad2" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPad2,%20MIDI.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/iPhone%20plus%20Monotron.jpg"><img alt="iPhone and Monotron" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPhone%20plus%20Monotron.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Samsung%20Galaxy%20Note%20(Android).jpg"><img alt="Galaxy Note (Android)" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Samsung%20Galaxy%20Note%20(Android).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/OpenPandora%20(Linux).jpg"><img alt="Galaxy Note (Android)" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20OpenPandora%20(Linux).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Sony%20CLIE%20PEG-UX50%20(PalmOS).jpg"><img alt="Sony CLIE PEG-UX50 (PalmOS)" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Sony%20CLIE%20PEG-UX50%20(PalmOS).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/various.jpg"><img alt="Samsung galaxy Fit (Android); Dell Axim X30 (Windows Mobile); Prestigio multyPAD pmp5080b (Android)" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20various.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/LG%20Optimus%20Hub%20(Android).jpg"><img alt="Monotron Duo, LG Optimus Hub (Android), Zoom H4n" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20LG%20Optimus%20Hub%20(Android).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Palm%20TX.jpg"><img alt="Palm TX" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Palm%20TX.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/iPad%20mini%202,%20MIDI.jpg"><img alt="iPad mini 2 + bluetooth MIDI" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPad%20mini%202,%20MIDI.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/various2.jpg"><img alt="Various Android and iOS devices" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20various2.jpg"></a></p></center>

<p>Video</p>
<br>

<center>
<iframe width="640" height="360" src="https://www.youtube.com/embed/wmfHPnXhmZI" frameborder="0" allowfullscreen=""></iframe><iframe width="640" height="360" src="https://www.youtube.com/embed/xK1VMKaxGoc" frameborder="0" allowfullscreen=""></iframe><iframe width="640" height="360" src="https://www.youtube.com/embed/BG5TZ2V-RQs" frameborder="0" allowfullscreen=""></iframe><iframe width="640" height="360" src="https://www.youtube.com/embed/E54uAhMBA1A" frameborder="0" allowfullscreen=""></iframe></center>
<p><a href="https://www.warmplace.ru/forum/viewtopic.php?f=3&amp;t=1223">Video tutorials</a><br>
<a href="https://www.youtube.com/user/NightRadio2007">More videos on my YouTube channel...</a></p><p>Music created in SunVox</p>
<p>

Сompetitions:</p><ul>
<li><a href="https://www.warmplace.ru/forum/viewtopic.php?t=6651">SunVox Compo 2024.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=6327">SunVox Compo 2023.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=6026">SunVox Compo 2022.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=5645">SunVox Compo 2021.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=5194">SunVox Compo 2020.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=4859">SunVox Compo 2019.03</a>
</li><li><a href="https://www.warmplace.ru/compo/sunvox/2015.10">SunVox Compo 2015.10</a>
</li><li><a href="https://www.warmplace.ru/compo/sunvox/2015.02">SunVox Compo 2015.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=3441">SunVox Compo 2014.10</a>
</li></ul><p>
SoundCloud: best of 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2022">2022</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2021">2021</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2020">2020</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2019">2019</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2018">2018</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2017">2017</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2016">2016</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2015">2015</a>.
<br>
Please mark your songs with the #SunVox hashtag, so that anyone can easily find it. 
</p><!-- The best tracks will be included in the monthly compilation. Thank you! -->
<p>

<a href="https://www.warmplace.ru/music/archive/">Music from NightRadio</a></p><p>Old versions</p>


<p><a href="https://www.warmplace.ru/soft/sunvox/sunvox-1.8.1-palmos-meego.zip">SunVox 1.8.1 for PalmOS and MeeGo</a><br>
<a href="https://www.dropbox.com/sh/5tjr1m8ri7i455z/AAAQktsEmqH90IGrRGfooqaNa?dl=0">Archive</a><br>


    </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[MtCellEdit – Lightweight Spreadsheet Program (126 pts)]]></title>
            <link>https://www.marktyler.org/ced/</link>
            <guid>41679471</guid>
            <pubDate>Sat, 28 Sep 2024 11:10:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.marktyler.org/ced/">https://www.marktyler.org/ced/</a>, See on <a href="https://news.ycombinator.com/item?id=41679471">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<h2>About</h2>
<p>
mtCellEdit is a lightweight spreadsheet program that I created from scratch. It is a small, no frills program which is designed to handle simple day to day spreadsheet tasks. I have put the most important facilities I want into a small customized program which means I can avoid the problems of larger programs such as slow operating speeds and overcomplicated user interfaces. The GUI is presented using Qt5.
</p>

<p>
The core of the program is a shared C/C++ library which can be used by any C/C++ program to read, write and manipulate spreadsheets. The source code suite also contains other example programs that use this library, such as command line tools to allow scripts to access the API.
</p>

<p>
The default file format mtCellEdit uses is portable and transparent as it is a ZIP file containing TSV text files. I deliberately designed it this way so that data can be extracted and read by any modern spreadsheet program on any operating system without requiring mtCellEdit. Over the years I have been frustrated by binary and XML formats that make data only accessible via a single program (or by me wasting time manually converting each file, or by me writing a file format conversion program). This format ensures that my data never becomes stranded, and can be manipulated by whichever tool I choose for a particular job (i.e. spreadsheet programs, text editors, command line tools, etc).
</p>

<h2>System Requirements</h2>
<p>
mtCellEdit is designed for GNU/Linux operating systems.  Hardware wise it
has been tested on x86_32, x86_64, and ARM_32 platforms.
</p>


<h2>License</h2>
<p>
The source code is distributed under the GNU General Public License version 3
or later.  Read more about this here
<a href="https://www.gnu.org/copyleft/gpl.html">https://www.gnu.org/copyleft/gpl.html</a>
</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta fined $102M for storing passwords in plain text (157 pts)]]></title>
            <link>https://www.engadget.com/big-tech/meta-fined-102-million-for-storing-passwords-in-plain-text-110049679.html</link>
            <guid>41678840</guid>
            <pubDate>Sat, 28 Sep 2024 08:38:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.engadget.com/big-tech/meta-fined-102-million-for-storing-passwords-in-plain-text-110049679.html">https://www.engadget.com/big-tech/meta-fined-102-million-for-storing-passwords-in-plain-text-110049679.html</a>, See on <a href="https://news.ycombinator.com/item?id=41678840">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>The Irish Data Protection Commission (DPC) has slapped Meta with a $101.5 million (€91 million) fine after wrapping up an investigation into a security breach in 2019, wherein the company mistakenly <a data-i13n="cpos:1;pos:1" href="https://www.engadget.com/2019-03-21-facebook-user-passwords-plain-text.html" data-ylk="slk:stored users' passwords in plain text;cpos:1;pos:1;elm:context_link;itc:0;sec:content-canvas">stored users' passwords in plain text</a>. Meta's original announcement only talked about how it found some user passwords stored in plain text on its servers in January that year. But a month later, it updated its announcement to reveal that <a data-i13n="cpos:2;pos:1" href="https://www.engadget.com/2019-04-18-facebook-stored-instagram-passwords-plain-text.html" data-ylk="slk:millions of Instagram passwords;cpos:2;pos:1;elm:context_link;itc:0;sec:content-canvas">millions of Instagram passwords</a> were also stored in easily readable format.</p><p>While Meta didn't say how many accounts were affected, a senior employee told <a data-i13n="cpos:3;pos:1" href="https://krebsonsecurity.com/2019/03/facebook-stored-hundreds-of-millions-of-user-passwords-in-plain-text-for-years/" rel="nofollow noopener" target="_blank" data-ylk="slk:Krebs on Security;cpos:3;pos:1;elm:context_link;itc:0;sec:content-canvas"><em>Krebs on Security </em></a>back then that the incident involved up to 600 million passwords. Some of the passwords had been stored in easily readable format in the company's servers since 2012. They were also reportedly searchable by over 20,000 Facebook employees, though the DPC has clarified in its decision that they were at least not made available to external parties.</p><p>The DPC found that Meta violated several GDPR rules related to the breach. It determined that the company failed to "notify the DPC of a personal data breach concerning storage of user passwords in plaintext" without undue delay and failed to "document personal data breaches concerning the storage of user passwords in plaintext." It also said that Meta violated the GDPR by not using appropriate technical measures to ensure the security of users' passwords against unauthorized processing.</p><p>"It is widely accepted that user passwords should not be stored in plaintext, considering the risks of abuse that arise from persons accessing such data. It must be borne in mind, that the passwords the subject of consideration in this case, are particularly sensitive, as they would enable access to users’ social media accounts," DPC's Deputy Commissioner, Graham Doyle, said in a statement.</p><p>The DPC has also given the company a reprimand in addition to the penalty. We may know more about what that means for Meta exactly when the commission publishes its full final decision and other related information in the future.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I Made a Rubbish Clock (113 pts)]]></title>
            <link>https://blog.jgc.org/2024/09/i-made-rubbish-clock.html</link>
            <guid>41678600</guid>
            <pubDate>Sat, 28 Sep 2024 07:36:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.jgc.org/2024/09/i-made-rubbish-clock.html">https://blog.jgc.org/2024/09/i-made-rubbish-clock.html</a>, See on <a href="https://news.ycombinator.com/item?id=41678600">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-522901623747231800" itemprop="description articleBody">
<p>With separate plastic, metal, paper, and glass recycling, composting, and pick up of all the rest, knowing which days to put out which bins can be complicated. Some have turned to high-tech solutions like Darren Tarbard's wonderful "<a href="https://x.com/tarbard/status/1002464120447397888">bindicator</a>".</p><p><a href="https://x.com/tarbard/status/1002464120447397888"><img data-original-height="835" data-original-width="900" height="371" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisozadvkoI9CxySkzJNcnOY_o2vZNWnv2gonXZ-K3eYn24dsIy5j7DoEHNxNShAVd-OBqk1PUMGRqJvSdmOs10lTHYGTlCgYz7uqOjXD_vf57eKTbMPeedRuCETBjUWnp-Sh9mIDxK0vMqp_va2txelYdG8f_9Yem8IweeCIQlhclFQi7HwOIlNA/w400-h371/Del3rp-WsAES2IE.jpg" width="400"></a></p><p>There's even a&nbsp;<a href="https://www.bindicator.net/">commercial version</a>&nbsp;of that.</p><p>I thought about making something similar, but decided that a high-tech solution isn't always the right one. Instead I made a clock, or rather a clock face. My rationale was as follows: the bin days don't change frequently so no need to call an API to get them, and anyway most councils don't have an API for this sort of thing. Also, I really didn't want yet another thing with a wall wart, or WiFi to configure, or code to debug (there comes a time in every programmer's life when they can't face debugging yet another thing that should be simple and just work).&nbsp;</p><p>Not everything needs to be Turing Complete! But you can buy cheap clock mechanisms where the hands go full circle in seven days instead of 12 hours. Something like <a href="https://www.youngtownco.com/en/product-496882/7-Days-Week-Clock-Movement-12888SDWK.html">this</a>.&nbsp;</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgsdpeNHoK98X_LNj45s4b71ULFC-yEBbTAAC5Dt3Mp6jfwfE6FnMHw80boTFqBF1pbTeDye9C8S6fY-UAQfjlk0uxJj_o7-9RsoB5psG_mMfG5EhI7H5QpwQ4w_cPgtL95VIpBKSzb75r3aXV7BBPcPAbuqUzUwif5uxm-LFQZJofvnmctDB9uVQ/s508/lixo-2.jpg"><img data-original-height="500" data-original-width="508" height="315" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgsdpeNHoK98X_LNj45s4b71ULFC-yEBbTAAC5Dt3Mp6jfwfE6FnMHw80boTFqBF1pbTeDye9C8S6fY-UAQfjlk0uxJj_o7-9RsoB5psG_mMfG5EhI7H5QpwQ4w_cPgtL95VIpBKSzb75r3aXV7BBPcPAbuqUzUwif5uxm-LFQZJofvnmctDB9uVQ/s320/lixo-2.jpg" width="320"></a></p><p>So, I wrote a bunch of code to produce an SVG (and PDF and PNG) for the clock face. The code is <a href="https://github.com/jgrahamc/lixo">here</a>. You end up with something like this which can be printed.</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi50DJtFU-77BZVN0Zidd-1XHQNnQqwL2EDdX6sPvxlJgWOj2OvrzHjcoNZk7-GoxbPrFlcoTH6ijQ7Jrtp5vk3v7Vedt9JAH-3Rd7yzPGY427oDsqkrinfduN0NJb02z2dDsM91tR-xxAianznNcIVOr50eIedZmBL_XVlhVpwApRi2PEPPU7i4g/s2362/lixo.png"><img data-original-height="2362" data-original-width="2362" height="400" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi50DJtFU-77BZVN0Zidd-1XHQNnQqwL2EDdX6sPvxlJgWOj2OvrzHjcoNZk7-GoxbPrFlcoTH6ijQ7Jrtp5vk3v7Vedt9JAH-3Rd7yzPGY427oDsqkrinfduN0NJb02z2dDsM91tR-xxAianznNcIVOr50eIedZmBL_XVlhVpwApRi2PEPPU7i4g/w400-h400/lixo.png" width="400"></a></p><p>The colours and wording are all determined by the <span>schd</span> and <span>bins</span> variables. The code should be easy to customize for your location's schedule. It supports up to two different bin types per day. If you need more you'll have to modify the code.</p><div><p><span><span>&nbsp;&nbsp; &nbsp;</span>bins = {</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>"none": ["white", ""],</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>"lixo": ["#72859E", "Lixo"],</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>"papl": ["#255FC9", "Papel"],</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>"embl": ["#DED044", "Embalagens"],</span></p><p><span><span>&nbsp;&nbsp; &nbsp;</span>}</span></p><p><span><span>&nbsp;&nbsp; &nbsp;</span>days = ["Sun", "Mon", "Tues", "Wednes", "Thurs", "Fri", "Satur"]</span></p><p><span><span>&nbsp;&nbsp; &nbsp;</span>schd = [["none"],</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>&nbsp; &nbsp; ["lixo"],</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>["papl", "embl"],</span></p><p><span>&nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>&nbsp; ["lixo"],</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;&nbsp; &nbsp;</span> ["papl"],</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>["lixo", "embl"],</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>["papl"]]</span></p><p>There's no need for you to use Portuguese; I have because I'm dealing with Portuguese rubbish collection.</p><p>The only interesting piece of code is the generation of the curves for the seven daily segments (and also for the curved wording). This is done by the function <span>path</span>:</p><div><p><span><span>&nbsp;&nbsp; &nbsp;</span>def getXY(p, r, s):</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>a = 2.0 * math.pi * (p * pps + rot)</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>return s % (r * math.cos(a),</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>&nbsp; &nbsp; &nbsp; &nbsp; r * math.sin(a))</span></p><p><span><span>&nbsp;&nbsp; &nbsp;</span>def path(p, r):</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>s = " %.2f %.2f "</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>pa = "M"</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>pa += getXY(p, r, s)</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>pa += "A %.2f %.2f 0 0 1" % (r, r)</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>pa += getXY((p+1), r, s)</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>return pa</span></p><p>In SVG you can define a <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths">path</a> element which can be used to make all sorts of curves, arcs, and lines. My <span>path</span> function takes two parameters: <span>p</span> is a number between zero and six representing the seven daily segments needed on the clock; <span>r</span> is the radius of the arc. The function uses <span>getXY</span> to find the position of a point on the arc. It does this twice to find the start and end point.&nbsp;</p><p>So, path ends up returning something like <span>M x0 y0 A r r 0 0 1 x1 y1</span> where <span>x0</span>, <span>y0</span>, <span>x1</span>, <span>y1</span> are the calculated end points of the arc and <span>r</span> is the radius of the arc. The <span>M x0 y0</span> means "move to (<span>x0</span>, <span>y0</span>)" The&nbsp;<span>A r r 0 0 1 x1 y1</span>&nbsp;means "draw an <a href="https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands">arc</a> of radius r to the point (<span>x1</span>, <span>y1</span>)". The <span>0 0 1</span> in the middle correspond to three parameters:&nbsp;x-axis-rotation, large-arc-flag, and sweep-flag; it's best to refer to the documentation for those because they determine the direction in which the arc points and whether it is rotated.</p><div><p>The final part of the path SVG element, <span>L 0 0</span>, is added elsewhere in the code. It sets the centre of the arc at (<span>0</span>, <span>0</span>). I used the <span>viewBox</span> attribute of the SVG to make the SVG geometry be between (<span>-1</span>, <span>-1</span>) and (<span>1</span>, <span>1</span>) thus making the centre of the image (<span>0</span>, <span>0</span>).&nbsp;&nbsp;</p><p><span><span>&nbsp;&nbsp; &nbsp;</span>print('&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="-1 -1 2 2" width="%s" height="%s"&gt;' % (wh, wh))</span></p></div><p>Armed with a suitable printed clock face, I got a simple square picture frame, a few bits of wood for spacers, and put it all together into a "rubbish clock".</p></div><div><p><a href="https://flyingtiger.com/pt-pt/products/black-picture-frame-20x20-cm-3034806"><img data-original-height="1200" data-original-width="1200" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgjLt5yQO3Yskdk8xTXFjHTL_PwvbRm5PmqrTMMXHrTnaEuCPRsnqrvgGzb_qs6pPHiK_pfsHZSgzQoYuPfbu1mUZoLuhyphenhyphenDGyedf_kURe3UIPm1TRJPhewAKwHSRTWWw9pLQwtn0XJspWp_m-ogVQv0oPDMvs9le2MBGPkKglSaXkSzlpuYV7oXcA/w640-h640/lixo-4.webp" width="640"></a></p><p><a href="https://flyingtiger.com/pt-pt/products/black-picture-frame-20x20-cm-3034806"><img data-original-height="1200" data-original-width="1200" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixHHRXpURAEsmK_bYXaQyR8iLSGK14efmCSbFsmie4tRUsvd9kZzzk9ZiOy79k9TDl5t4PRcRhyqwFXU0qlhdmnMfiWLguPb8mszXhjrcpMxhtBvp0ecFu7GPL7UiPDq8Xzl8usb0LuKuJIQzZd7a08DYdPJvNIdK2fub3Fixs09_G0CqPAMG8JA/w640-h640/lixo-3.webp" width="640"></a></p></div><table><tbody><tr><td><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpj8fOLwk9PArF_K9sUwkYhSCZVRmwC7xmI-wvs32RetBhwFdTOzRdFOzDg6gXEn-taEu3SQW5hJz78Zrkryl5x5ReEr9iexphsiMabORQfh4BqLzNWzkgVhbcF5zNMWeTbWikEwyPkhbaZwFtQBy6_TMFOz-ZH48-owPvbaUZaeyGWnrWACnR1g/s1200/lixo-5.jpg"><img data-original-height="1200" data-original-width="1200" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpj8fOLwk9PArF_K9sUwkYhSCZVRmwC7xmI-wvs32RetBhwFdTOzRdFOzDg6gXEn-taEu3SQW5hJz78Zrkryl5x5ReEr9iexphsiMabORQfh4BqLzNWzkgVhbcF5zNMWeTbWikEwyPkhbaZwFtQBy6_TMFOz-ZH48-owPvbaUZaeyGWnrWACnR1g/w640-h640/lixo-5.jpg" width="640"></a></td></tr><tr><td><br></td></tr></tbody></table><br></div><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjvTpcZoantZ16120z-lQK12YKhHkbb_lXVQEdznDiWKicX4J4EoD4yaibwH_iROLsHVCkeh4qti2xmslW-u5Qy96-5OkdfmK_l4-bpLHcezEPtQyNkR-9NuW9ZNDwVHRSO91S1kQZTHPtXZdQdcaFCxWSQFLwLz8y-NFx5oT2AMLi3SqVEzQ0_KQ/s1200/lixo-7.jpg"><img data-original-height="953" data-original-width="1200" height="509" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjvTpcZoantZ16120z-lQK12YKhHkbb_lXVQEdznDiWKicX4J4EoD4yaibwH_iROLsHVCkeh4qti2xmslW-u5Qy96-5OkdfmK_l4-bpLHcezEPtQyNkR-9NuW9ZNDwVHRSO91S1kQZTHPtXZdQdcaFCxWSQFLwLz8y-NFx5oT2AMLi3SqVEzQ0_KQ/w640-h509/lixo-7.jpg" width="640"></a></p><br>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FFT-based ocean-wave rendering, implemented in Godot (642 pts)]]></title>
            <link>https://github.com/2Retr0/GodotOceanWaves</link>
            <guid>41678412</guid>
            <pubDate>Sat, 28 Sep 2024 06:51:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/2Retr0/GodotOceanWaves">https://github.com/2Retr0/GodotOceanWaves</a>, See on <a href="https://news.ycombinator.com/item?id=41678412">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">GodotOceanWaves</h2><a id="user-content-godotoceanwaves" aria-label="Permalink: GodotOceanWaves" href="#godotoceanwaves"></a></p>
<p dir="auto">An open ocean rendering experiment in the Godot Engine utilizing the inverse Fourier transform of directional ocean-wave spectra for wave generation. A concise set of parameters is exposed, allowing for scriptable, real-time modification of wave properties to emulate a wide-variety of ocean-wave environments.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description ocean_demo.mp4">ocean_demo.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/18603664/371443621-a8083878-a297-4536-a481-9123cea7e7df.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNzE0NDM2MjEtYTgwODM4NzgtYTI5Ny00NTM2LWE0ODEtOTEyM2NlYTdlN2RmLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg1NGI4ODAzMjU0NmQ0YzdjYTg3YTZkYmYxNmUzZmIxOTY5MTE4ODhjN2VmMGEwNTllMjMyYWJhMTMxNGE2MjQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.woLyampML5KaxatdZL9Tg1Grfm2FiX_wXjz8ysQSLBA" data-canonical-src="https://private-user-images.githubusercontent.com/18603664/371443621-a8083878-a297-4536-a481-9123cea7e7df.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNzE0NDM2MjEtYTgwODM4NzgtYTI5Ny00NTM2LWE0ODEtOTEyM2NlYTdlN2RmLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg1NGI4ODAzMjU0NmQ0YzdjYTg3YTZkYmYxNmUzZmIxOTY5MTE4ODhjN2VmMGEwNTllMjMyYWJhMTMxNGE2MjQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.woLyampML5KaxatdZL9Tg1Grfm2FiX_wXjz8ysQSLBA" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">Introduction</h2><a id="user-content-introduction" aria-label="Permalink: Introduction" href="#introduction"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Why Fourier Transforms?</h3><a id="user-content-why-fourier-transforms" aria-label="Permalink: Why Fourier Transforms?" href="#why-fourier-transforms"></a></p>
<p dir="auto">A common approach for animating water in video games is by displacing vertices using <em>Gerstner waves</em>. While Gerstner waves work well for modeling the lower-frequency details in calmer waters, they fall short in accurately representing the choppy surfaces in an open ocean. To simulate the latter, a more complex approach simulates waves using the <em>inverse Fourier transform</em> of ocean-wave spectra modeled from empirical data gathered by oceanographers.</p>
<p dir="auto">A benefit of working in frequency space using ocean-wave spectra is the ease of modifying ocean properties (e.g., surface choppiness). When using Gerstner waves, it is unclear how waves (and their parameters) need to be changed to emulate a certain ocean state. In contrast, ocean-wave spectra expose parameters that change waves' properties directly.</p>
<p dir="auto">To compute the Fourier transform, a <em>fast Fourier transform</em> algorithm (FFT) is used specifically. On top of having a lower computational complexity than the classical discrete Fourier transform algorithm (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$O(N \log N)$</math-renderer> versus <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$O(N^2)$</math-renderer>), the FFT is <em>scalable as a parallel system</em>. This means that it is perfect for running on the GPU. Using Gerstner waves requires each thread to perform <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$N$</math-renderer> computations, one for each wave. In contrast, FFT-based waves only require each thread to perform <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\log(N)$</math-renderer> equivalent computations. At scale, more waves can be added to the system (at the same performance cost), permitting more accurate surface simulation.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Results</h2><a id="user-content-results" aria-label="Permalink: Results" href="#results"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Wave Shading</h3><a id="user-content-wave-shading" aria-label="Permalink: Wave Shading" href="#wave-shading"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Lighting Model</h4><a id="user-content-lighting-model" aria-label="Permalink: Lighting Model" href="#lighting-model"></a></p>
<p dir="auto">The ocean lighting model largely follows the BSDF described in the 'Atlas' GDC talk. One deviation, however, is the use of the GGX distribution (rather than Beckmann distribution) for the microfacet distribution. This was due to the GGX distribution's 'flatter' and softer highlights providing a more uniform appearance in many of the ocean-wave environments tested.</p>
<p dir="auto">The normal/foam map is sampled with a mix between bicubic and bilinear filtering depending on the world-space pixel density (a value dependent on the normal map texture resolution and texture UV tiling size). This effectively reduces texture aliasing artifacts at lower surface resolutions while maintaining the detail at higher surface resolutions.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Sea Foam</h4><a id="user-content-sea-foam" aria-label="Permalink: Sea Foam" href="#sea-foam"></a></p>
<p dir="auto">Tessendorf notes a method for determining when to generate sea foam by checking where the waves' peaks curl into themselves (i.e., when the Jacobian of the displacement is negative). Foam accumulates linearly and dissipates exponentially on a texture over multiple wave updates, and are controlled by "foam grow rate" and "foam decay rate" parameters respectively.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Sea Spray</h4><a id="user-content-sea-spray" aria-label="Permalink: Sea Spray" href="#sea-spray"></a></p>
<p dir="auto">Sea spray is modeled using particles via Godot's GPUParticles3D node and makes heavy use of a custom particle shader. Particles are distributed evenly across the plane within the GPUParticles3D node's bounding box. Then, they are culled based on the foam amount present at their position. Un-culled particles begin their lifecycle at a random offset.</p>
<p dir="auto">Each sea spray particle uses a billboarded sprite with a single static texture. Over the course of their lifecycle, particles' scales and displacements are modified to emulate a splash's appearance. A dissolve effect in particles' mesh shader fades the sprite in a way that simulates how sea spray atomizes once in the air.</p>
<p dir="auto">One <em>major</em> drawback of this method is that a large increase in particle amount only results in a small increase in sea spray density. This is due to the equal distribution of particles along the bounding box, which results in a majority of the added particles being culled.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/18603664/367495381-c69766e7-711c-4909-a1fa-290bac0d577a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNjc0OTUzODEtYzY5NzY2ZTctNzExYy00OTA5LWExZmEtMjkwYmFjMGQ1NzdhLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTdmZThlYjZkYTM1MGZhZTAwNGU1ZTAxY2UzYjgwNTE0ZDZhY2Y5YmNjNTg0MDg4OGY5ZWMxNzRkM2EzZmU4Y2ImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.TsauWxPeyGFgju5z9_6ePtRLKSGiuVHYeXbvtOIx3y4"><img src="https://private-user-images.githubusercontent.com/18603664/367495381-c69766e7-711c-4909-a1fa-290bac0d577a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNjc0OTUzODEtYzY5NzY2ZTctNzExYy00OTA5LWExZmEtMjkwYmFjMGQ1NzdhLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTdmZThlYjZkYTM1MGZhZTAwNGU1ZTAxY2UzYjgwNTE0ZDZhY2Y5YmNjNTg0MDg4OGY5ZWMxNzRkM2EzZmU4Y2ImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.TsauWxPeyGFgju5z9_6ePtRLKSGiuVHYeXbvtOIx3y4" alt="shading_demo"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Wave Simulation</h3><a id="user-content-wave-simulation" aria-label="Permalink: Wave Simulation" href="#wave-simulation"></a></p>
<p dir="auto">The method for generating surface waves closely follows Tessendorf. A directional ocean-wave spectrum function is multiplied with Gaussian-distributed random numbers to generate an initial spectral sea state. The initial state is then propagated in time through a "dispersion relation" (relating the frequency of waves and their propagation speed). An inverse Fourier transform can then be applied to the propagated state to generate displacement and normal maps.</p>
<p dir="auto">The methodology Tessendorf describes was implemented through a compute shader pipeline using Godot's RenderingDevice abstraction. The following sections detail more on major aspects of the wave generation system.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Ocean-Wave Spectra</h4><a id="user-content-ocean-wave-spectra" aria-label="Permalink: Ocean-Wave Spectra" href="#ocean-wave-spectra"></a></p>
<p dir="auto">The directional ocean-wave spectrum function, <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$S(\omega, \theta)$</math-renderer>, returns the energy of a wave given its frequency (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\omega$</math-renderer>) and direction (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\theta$</math-renderer>). It is comprised of a <strong>non-directional spectrum function</strong>, <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$S(\omega)$</math-renderer>, and a <strong>directional spread function</strong>, <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$D(\omega, \theta)$</math-renderer>; the choice of either is entirely independent.</p>
<ul dir="auto">
<li>For the <strong>non-directional spectrum function</strong>, the <em>Texel-Marsen-Arsloe</em> (TMA) spectrum described in Horvath was chosen. Given the wind speed (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$U$</math-renderer>), depth (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$D$</math-renderer>), and fetch length (i.e., distance from shoreline) (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$F$</math-renderer>), the TMA spectrum combines its preceding <em>JONSWAP</em> spectrum with a depth attenuation function and is defined as <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$S_{\text{TMA}}(\omega) = S_{\text{JONSWAP}}(\omega)\Phi(\omega)$</math-renderer> where:</li>
</ul>
<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$$\begin{align*}
S_{\text{JONSWAP}}(\omega) &amp;= \Big[0.076\Big(\tfrac{U^2}{F \cdot 9.81}\Big)^{0.22}\Big]\Big[\tfrac{9.81^2}{\omega^5}\exp\Big({-\tfrac 5 4}\big(\tfrac{\omega_p}{\omega}\big)^4\Big)\Big] \Big[3.3^{\exp\Big(-\tfrac{(\omega - \omega_p)^2}{2(0.07 + 0.02\cdot\mathrm{step}(\omega - \omega_p))^2\omega_p^2}\Big)}\Big]\\\
\Phi(\omega) &amp;\approx \tfrac 1 2 \omega_h^2 + ({-\omega}_h^2+2\omega_h-1)\cdot\mathrm{step}(\omega_h - 1)\\\
\omega_p &amp;= 22\Big(\tfrac{9.81^2}{U F}\Big)\\\
\omega_h &amp;= \omega \sqrt{\tfrac D {9.81}}
\end{align*}$$</math-renderer>
<ul dir="auto">
<li>For the <strong>directional spread function</strong>, a combination of the <em>flat</em> and <em>Hasselmann</em> directional spreadings described in Horvath—mixed by a 'spread' parameter (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\mu$</math-renderer>)—was chosen. Horvath also proposes the addition of a 'swell' parameter (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\xi$</math-renderer>) to model ocean-wave elongation—this was also incorporated into the spread model. The mixed spread function is defined as <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">${D_{\text{mixed}}(\omega, \theta) = \mathrm{lerp}((2\pi){^{-1}},\ Q(s+s_\xi)\text{|}\cos(\theta \text{/}2)\text{|}^{2(s+s_\xi)},\ \mu)}$</math-renderer> where:</li>
</ul>
<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$$\begin{align*}
&lt;!-- https://www.wolframalpha.com/input?i2d=true&amp;i=taylor+series+Divide%5BPower%5B2%2C%5C%2840%292x-1%5C%2841%29%5D%2C%CF%80%5D*Divide%5BPower%5B%5C%2840%29x%21%5C%2841%29%2C2%5D%2C%5C%2840%292x%5C%2841%29%21%5D+at+x+%3D+0 --&gt;
Q(\sigma) &amp;\approx \begin{cases}
 0.09\sigma^3 + \big(\tfrac{\ln^2 2}{\pi} - \tfrac{\pi}{12}\big)\sigma^2+\big(\tfrac{\ln 2}{\pi}\big)\sigma+\tfrac{1}{2\pi} &amp; \text{if } \sigma \leq 0.4\\\
 \frac{\sqrt \sigma}{2\sqrt \pi} + \frac{1}{16\sqrt{\pi \sigma}} &amp; \text{otherwise.}
\end{cases}\\\
s &amp;= \begin{cases}
 6.97\big(\tfrac \omega {\omega_p}\big){^{4.06}} &amp; \text{if } \omega \leq \omega_p\\\
 9.77\big(\tfrac \omega {\omega_p}\big){^{-2.33 -1.45(\omega_p U\text{/}9.81-1.17)}} &amp; \text{otherwise.}
\end{cases}\\\
s_\xi &amp;= 16 \tanh\big(\tfrac{\omega_p}{\omega}\big)\xi^2
\end{align*}$$</math-renderer>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$Q(\sigma)$</math-renderer> is a normalization factor used to satisfy the condition: <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\int_{-\pi}^\pi D(\omega, \theta)d \theta = 1$</math-renderer>. The Hasselmann directional spread was chosen due to its approximate analytical solution for <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$Q(\sigma)$</math-renderer> (as opposed to e.g., the Donelan-Banner directional spread also described in Horvath).</p>
<p dir="auto">Following a suggestion in Tessendorf, the resultant spectrum function was also multiplied by a small-wave suppression term, <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\exp({-k}^2(1-\delta)^2)$</math-renderer> (given the magnitude of the wave vector (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$k$</math-renderer>) and a 'detail' parameter (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\delta$</math-renderer>)). Combining the above, our <em>final</em> directional ocean-wave spectrum function used can be denoted as:</p>
<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$$S(\omega, \theta) = S_{\text{TMA}}(\omega)D_{\text{mixed}}(\omega, \theta)\exp({-k}^2(1-\delta)^2)$$</math-renderer>
<p dir="auto"><h4 tabindex="-1" dir="auto">Fast Fourier Transform</h4><a id="user-content-fast-fourier-transform" aria-label="Permalink: Fast Fourier Transform" href="#fast-fourier-transform"></a></p>
<p dir="auto">A custom FFT implementation was written for the GPU using compute shaders. The <em>Stockham</em> FFT algorithm was used over the Cooley-Tukey algorithm to avoid the initial bit-reversal permutation. Following Flügge, a 'butterfly' texture is computed, once per spectrum texture resolution change, encoding the dataflow of the FFT.</p>
<p dir="auto">First, the FFT kernel is applied row-wise to perform the 2D FFT on the spectrum texture. The texture is then transposed using a compute shader, allowing the same row-wise FFT kernel to then be reused for—what is effectively—a column-wise FFT. This transposition also improves memory access patterns along with enabling pipeline reuse.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Wave Cascades</h4><a id="user-content-wave-cascades" aria-label="Permalink: Wave Cascades" href="#wave-cascades"></a></p>
<p dir="auto">At large-enough distances—especially with sea foam present—tiling artifacts become very apparent. The wave generation system allows multiple wave cascades to be layered simultaneously to address this. Each cascade has its own tiling size and set of parameters. Cascades can be added/removed from the generation system dynamically in real-time. However, as all cascades use the same compute pipelines, they must have the same spectra texture resolution. Alternatively, blending wave displacements/normals with noise could also reduce tiling artifacts—at a lesser performance cost.</p>
<p dir="auto">Each wave cascades’ parameters and size must be carefully chosen to avoid wave interference when layered. Similarly, the cascades' wave phases should be offset to avoid interference with other cascades. The generation system automatically attempts this by offsetting each cascades’ start times differently (honestly, not sure if it works lol).</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Load Balancing</h4><a id="user-content-load-balancing" aria-label="Permalink: Load Balancing" href="#load-balancing"></a></p>
<p dir="auto">Due to the erratic nature of wave motion, their movement can appear perceptually smooth even without updating their displacements every frame. Thus, an "update rate" parameter was introduced to control how often wave cascades are updated per second. While this reduces the amount of GPU-time spent working on FFT, frames during which the wave generation pipeline runs still stutter.</p>
<p dir="auto">An experiment to asynchronously compute cascade updates using Godot's local RenderingDevices, caused significant performance overhead due to transferring textures between the CPU and GPU. Instead, the wave generation system <em>attempts to load-balance cascades</em>. Whenever the frame time is shorter than the update rate, only one cascade is updated per frame. This reduces stuttering while still benefiting from the lower GPU workload of frame skipping.</p>
<p dir="auto">The displacement, normal, and foam maps generated after running FFT on our directional ocean-wave spectrum function (along with its associated parameters) yield realistic surface motion across a broad range of ocean-wave environments.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description ocean_param_demo.mp4">ocean_param_demo.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/18603664/367477646-7589758f-1233-4be8-accc-2902a1dd01ec.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNjc0Nzc2NDYtNzU4OTc1OGYtMTIzMy00YmU4LWFjY2MtMjkwMmExZGQwMWVjLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJmMjM2Njc1OGVhYzFlZmRjNjYwMTQ2OGM0OTA1YTExOTEyNDViMjhjMGIxZTU3MWEwYWNmOWViMWIzNGI1YTcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.9ySTzoAP2MM4b3nC3RfbSdJk8v7kVXn0TPmAEyIdTiY" data-canonical-src="https://private-user-images.githubusercontent.com/18603664/367477646-7589758f-1233-4be8-accc-2902a1dd01ec.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNjc0Nzc2NDYtNzU4OTc1OGYtMTIzMy00YmU4LWFjY2MtMjkwMmExZGQwMWVjLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJmMjM2Njc1OGVhYzFlZmRjNjYwMTQ2OGM0OTA1YTExOTEyNDViMjhjMGIxZTU3MWEwYWNmOWViMWIzNGI1YTcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.9ySTzoAP2MM4b3nC3RfbSdJk8v7kVXn0TPmAEyIdTiY" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">References</h2><a id="user-content-references" aria-label="Permalink: References" href="#references"></a></p>
<p dir="auto"><strong>Flügge, Fynn-Jorin</strong>. <strong><a href="https://tore.tuhh.de/entities/publication/1cd390d3-732b-41c1-aa2b-07b71a64edd2" rel="nofollow">Realtime GPGPU FFT Ocean Water Simulation</a></strong>. Hamburg University of Technology. (2017).<br>
<strong>Gunnell, Garrett</strong>. <strong><a href="https://www.youtube.com/watch?v=yPfagLeUa7k" rel="nofollow">I Tried Simulating The Entire Ocean</a></strong>. (2023).<br>
<strong>Horvath, Christopher J</strong>. <strong><a href="https://dl.acm.org/doi/10.1145/2791261.2791267" rel="nofollow">Empirical Directional Wave Spectra for Computer Graphics</a></strong>. DigiPro. (2015).<br>
<strong>Tessendorf, Jerry</strong>. <strong><a href="https://people.computing.clemson.edu/~jtessen/reports/papers_files/coursenotes2004.pdf" rel="nofollow">Simulating Ocean Water</a></strong>. SIGGRAPH. (2004).<br>
<strong>Matusiak, Robert</strong>. <strong><a href="https://www.ti.com/lit/an/spra291/spra291.pdf" rel="nofollow">Implementing Fast Fourier Transform Algorithms of Real-Valued Sequences</a></strong>. Texas Instruments. (2001).<br>
<strong>Mihelich, Mark</strong>. <strong><a href="https://www.youtube.com/watch?v=Dqld965-Vv0" rel="nofollow">Wakes, Explosions and Lighting: Interactive Water Simulation in 'Atlas'</a></strong>. GDC. (2019).<br>
<strong>Pensionerov, Ivan</strong>. <strong><a href="https://github.com/gasgiant/FFT-Ocean">FFT-Ocean</a></strong>. GitHub. (2020).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Attribution</h2><a id="user-content-attribution" aria-label="Permalink: Attribution" href="#attribution"></a></p>
<p dir="auto"><strong><a href="https://polyhaven.com/a/evening_road_01_puresky" rel="nofollow">Evening Road 01 (Pure Sky)</a></strong> by <strong>Jarod Guest</strong> is used under the <a href="https://creativecommons.org/publicdomain/zero/1.0/" rel="nofollow">CC0 1.0</a> license.<br>
<strong><a href="http://wwwa.pikara.ne.jp/okojisan/otfft-en/stockham3.html" rel="nofollow">OTFFT DIT Stockham Algorithm</a></strong> by <strong>Takuya Okahisa</strong> is used and modified under the <a href="http://wwwa.pikara.ne.jp/okojisan/otfft-en/download.html" rel="nofollow">MIT</a> license.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amusing Ourselves to Death (370 pts)]]></title>
            <link>https://otpok.com/2014/01/03/amusing-ourselves-to-death/</link>
            <guid>41678208</guid>
            <pubDate>Sat, 28 Sep 2024 05:56:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://otpok.com/2014/01/03/amusing-ourselves-to-death/">https://otpok.com/2014/01/03/amusing-ourselves-to-death/</a>, See on <a href="https://news.ycombinator.com/item?id=41678208">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page" role="main">

		
			
<article id="post-1457">
	<!-- .entry-header -->

	<div>
		<p><a href="http://www.diet-specialist.co.uk/pathofknowledge"><img src="https://otpok.com/wp-content/uploads/2014/01/diet-specialist-1.gif?w=646&amp;h=106" alt="" width="646" height="106"></a></p>
<p>This is perhaps one of the most striking passages I have read for a while. It describes the modern world with startling accuracy. In our fear of an increasingly authoritarian rule, we have allowed a far more dangerous vision to come true: <span><strong><em>heedlessness</em></strong></span></p>
<p>Below is the foreward of Neil Postman’s book “<strong>Amusing Ourselves to Death: Public Discourse in the Age of Show Business</strong>“, accompanied by a comic illustration of the two ideas. It gives a concise comparison of the two authors views and what they foresaw society will become. But perhaps the remarkable part of this whole story passage lies beyond its lines with us:</p>
<p><span><em><strong>Most of us will read this and continue living our life exactly the same way as before</strong></em></span></p>
<p><span><strong><em>…wake up</em></strong></span></p>
<p>————————————————————–</p>
<blockquote><p>We were keeping our eye on 1984. When the year came and the prophecy didn’t, thoughtful Americans sang softly in praise of themselves. The roots of liberal democracy had held. Wherever else the terror had happened, we, at least, had not been visited by Orwellian nightmares.</p>
<p>But we had forgotten that alongside Orwell’s dark vision, there was another – slightly older, slightly less well known, equally chilling: Aldous Huxley’s Brave New World. Contrary to common belief even among the educated, Huxley and Orwell did not prophesy the same thing. Orwell warns that we will be overcome by an externally imposed oppression. But in Huxley’s vision, no Big Brother is required to deprive people of their autonomy, maturity and history. As he saw it, people will come to love their oppression, to adore the technologies that undo their capacities to think.</p>
<p>What Orwell feared were those who would ban books. What Huxley feared was that there would be no reason to ban a book, for there would be no one who wanted to read one. Orwell feared those who would deprive us of information. Huxley feared those who would give us so much that we would be reduced to passivity and egoism. Orwell feared that the truth would be concealed from us. Huxley feared the truth would be drowned in a sea of irrelevance. Orwell feared we would become a captive culture. Huxley feared we would become a trivial culture, preoccupied with some equivalent of the feelies, the orgy porgy, and the centrifugal bumblepuppy. As Huxley remarked in Brave New World Revisited, the civil libertarians and rationalists who are ever on the alert to oppose tyranny “failed to take into account man’s almost infinite appetite for distractions”. In 1984, Huxley added, people are controlled by inflicting pain. In Brave New World, they are controlled by inflicting pleasure. In short, Orwell feared that what we hate will ruin us. Huxley feared that what we love will ruin us.</p>
<p>This book is about the possibility that Huxley, not Orwell, was right</p>
<p><strong><em>[Neil Postman – Amusing ourselves to death]</em></strong></p></blockquote>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/screenshot_1.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/wpid-storageextsdcarddcimcomparison-1.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/wpid-storageextsdcarddcimcomparison-2.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/comparison-31.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/comparison-4.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/comparison-51.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/wpid-storageextsdcarddcimcomparison-6.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/comparison-71.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/screenshot_16.png?w=700" alt=""></p>
<p><em>[The comic is Stuart McMillen’s interpretation of media theorist Niel Postman’s book Amusing Ourselves to Death (1985), subtitled “Public Discourse in the Age of&nbsp;Show Business”]</em></p>

			
						</div><!-- .entry-content -->

	<!-- .entry-meta -->
</article><!-- #post-## -->
			<div>
	<h3>Related posts</h3>
	
		<article id="post-1449">

						<p><a href="https://otpok.com/2013/12/25/hamster/"><img width="50" height="50" src="https://otpok.com/wp-content/uploads/2013/12/skeleton-wheel.gif?w=50&amp;h=50&amp;crop=1" alt="" decoding="async" data-attachment-id="1450" data-permalink="https://otpok.com/2013/12/25/hamster/skeleton-wheel/" data-orig-file="https://otpok.com/wp-content/uploads/2013/12/skeleton-wheel.gif" data-orig-size="960,544" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}" data-image-title="Skeleton Wheel" data-image-description="" data-image-caption="" data-medium-file="https://otpok.com/wp-content/uploads/2013/12/skeleton-wheel.gif?w=300" data-large-file="https://otpok.com/wp-content/uploads/2013/12/skeleton-wheel.gif?w=700" tabindex="0" role="button"></a>
			</p>
			
			<!-- .entry-header -->

		</article>

	
		<article id="post-2847">

						<p><a href="https://otpok.com/2020/03/28/deaths-spectre/"><img width="50" height="50" src="https://otpok.com/wp-content/uploads/2020/03/death-164761.jpg?w=50&amp;h=50&amp;crop=1" alt="" decoding="async" data-attachment-id="2849" data-permalink="https://otpok.com/2020/03/28/deaths-spectre/death-164761/" data-orig-file="https://otpok.com/wp-content/uploads/2020/03/death-164761.jpg" data-orig-size="1920,1271" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="death-164761" data-image-description="" data-image-caption="" data-medium-file="https://otpok.com/wp-content/uploads/2020/03/death-164761.jpg?w=300" data-large-file="https://otpok.com/wp-content/uploads/2020/03/death-164761.jpg?w=700" tabindex="0" role="button"></a>
			</p>
			
			<!-- .entry-header -->

		</article>

	
		<article id="post-498">

			
			<!-- .entry-header -->

		</article>

	</div>

				<!-- #nav-below -->
	
			
	<!-- #comments -->

		
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Everything you need to know about Python 3.13 – JIT and GIL went up the hill (340 pts)]]></title>
            <link>https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/</link>
            <guid>41677131</guid>
            <pubDate>Sat, 28 Sep 2024 01:23:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/">https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/</a>, See on <a href="https://news.ycombinator.com/item?id=41677131">Hacker News</a></p>
<div id="readability-page-1" class="page"><article> <p>On October 2<sup>nd</sup>, 2024, the Python core developers and community will release <a href="https://docs.python.org/3.13/whatsnew/3.13.html">CPython v3.13.0</a> – and it’s a doozy.</p>
<p>So what makes this release different, and why should you care about it?</p>
<p>In short, there are two big changes being made to how Python runs at a core level which have the potential to radically change the performance profile of Python code in the future.</p>
<p>Those changes are:</p>
<ul>
<li>A “free-threaded” version of CPython which allows you to disable the Global Interpreter Lock (GIL), and</li>
<li>Support for experimental Just-in-Time (JIT) compilation.</li>
</ul>
<p>So what are these new features and what impact will they have on you?</p>
<a href="#global-interpreter-lock-gil">#</a><h2 id="global-interpreter-lock-gil">Global Interpreter Lock (GIL)</h2>
<a href="#what-is-the-gil">#</a><h3 id="what-is-the-gil">What is the GIL?</h3>
<p>From the inception of the Python programming language by Guido Van Rossum in a science park in East Amsterdam in the late ’80s, it was designed and implemented as a single-threaded interpreted language. What exactly does this mean?</p>
<p>You’ll commonly hear that there are 2 types of programming languages – interpreted and compiled. So which is Python? The answer is: <strong>yes</strong>.</p>
<p>You will very rarely find a programming language which is purely interpreted from source by an interpreter. For interpreted languages, the human-readable source code is almost always compiled into some kind of intermediary form, called bytecode. The interpreter then looks at the bytecode and executes the instructions one-by-one.</p>
<p>The “interpreter” here is commonly called a “virtual machine”, especially in other languages like Java which does the same thing as Python re. <a href="https://en.wikipedia.org/wiki/Java_bytecode">Java bytecode</a> and <a href="https://en.wikipedia.org/wiki/List_of_Java_virtual_machines">Java VMs</a>. In Java and <a href="https://kotlinlang.org/">friends</a>, it’s much more common to ship the compiled bytecode itself, whereas Python applications are usually distributed as source code (although, having said that, packages are often deployed as <a href="https://packaging.python.org/en/latest/discussions/package-formats/#what-is-a-wheel">wheels</a> as well as <a href="https://packaging.python.org/en/latest/discussions/package-formats/#what-is-a-source-distribution">sdist</a> nowadays).</p>
<p>Virtual machines in this meaning of the word come up in all kinds of unexpected places, like in the PostScript format (PDF files are essentially compiled PostScript) and in font rendering<sup><a href="#user-content-fn-font-rendering" id="user-content-fnref-font-rendering" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup>.</p>
<p>If you’ve ever noticed a bunch of <code>*.pyc</code> files in your Python projects, this is the compiled bytecode for your application. You can decompile and explore <code>pyc</code> files in exactly the same way you can find Java class files.</p>
<p><span data-astro-cid-mrmim4ef="">💡</span> <span data-astro-cid-mrmim4ef=""> <p><strong>Python vs CPython</strong></p><p>I can already hear a chorus of pedantic Pythonistas shouting “Python isn’t the same as CPython!”, and they’re right. And this is an important distinction to make.</p><p>Python is the programming language, which is essentially a specification saying what the language should do.</p><p>CPython is the <em>reference implementation</em> of this language specification, and what we’re talking about here is mostly about the CPython implementation. There are other Python implementations, like <a href="https://pypy.org/">PyPy</a> which has always used JIT compilation, <a href="https://www.jython.org/">Jython</a> which runs on the JVM and <a href="https://ironpython.net/">IronPython</a> which runs on the .NET CLR.</p><p>Having said that, pretty much everyone just uses CPython and so I think it’s reasonable to talk about “Python” when we’re really talking about CPython. If you disagree, go ahead and get in the comments or write me a strongly worded email with an aggressive font (maybe <a href="https://www.google.com/search?q=impact+font">Impact</a>; I’ve always thought <a href="https://www.google.com/search?q=comic+sans">Comic Sans</a> has a subtly threatening aura).</p> </span> </p> 
<p>So when we run Python, the <code>python</code> executable will generate the bytecode which is a stream of instructions, then the interpreter will read and execute the instructions one-by-one.</p>
<p>If you try to spin up multiple threads, what happens then? Well, the threads all share the same memory (apart from their local variables) and so they can all access and update the same objects. Each thread will be executing its own bytecode using its own stack and instruction pointer.</p>
<p>What happens if multiple threads try to access / edit the same object at the same time? Imagine one thread is trying to add to a dict while another is trying to read from it. There are two options here:</p>
<ul>
<li>Make the implementation of dict (and all the other objects) thread-safe, which takes a lot of effort and will make it slower for a single-threaded application, or</li>
<li>Create a global mutual exclusion lock (a.k.a. mutex) which allows only one thread to be executing bytecode at any one time.</li>
</ul>
<p>This latter option is the GIL. The former option is what the Python developers are calling “free-threading” mode.</p>
<p>It’s also worth mentioning that the GIL makes garbage collection much simpler and faster. We don’t have time to go into the depths of garbage collection here as it’s a whole big topic in itself, but a simplified version is that Python keeps a count of how many references there are to a particular object, and when that count reaches zero, Python knows that it can safely delete that object. If there are multiple threads concurrently creating and dropping references to different objects, this can lead to race conditions and memory corruptions, so any free-threaded version needs to use atomically counted references for all objects.</p>
<p>The GIL also makes it much easier to develop C extensions for Python (e.g. using the confusingly named <a href="https://cython.org/">Cython</a>) as you can make assumptions about thread safety that make your life much easier, check out the <a href="https://py-free-threading.github.io/porting">py-free-threading guide for porting C extensions</a> for more details on this.</p>
<a href="#why-does-python-have-a-gil">#</a><h3 id="why-does-python-have-a-gil">Why does Python have a GIL?</h3>
<p>Despite having a surge in popularity over the last few years, it’s not a particularly new language – it was conceived in the late ’80s, with the first release on 20<sup>th</sup> February 1991 (making it slightly older than me). Back then, computers looked very different. Most programs were single-threaded and the performance of individual cores was increasing exponentially (see good old <a href="https://en.wikipedia.org/wiki/Moore%27s_law">Moore’s Law</a>). In this environment, it didn’t make much sense to compromise single-threaded performance for thread safety when most programs would not be utilising multiple cores.</p>
<p>Also, implementing thread safety obviously takes a lot of work.</p>
<p>This isn’t to say that you can’t utilise multiple cores in Python. It just means that instead of using threading, you have to utilise multiple processes (i.e. <a href="https://docs.python.org/3/library/multiprocessing.html"><code>multiprocessing</code></a> module).</p>
<p>Multi-processing differs from multi-threading because each process is its own Python interpreter with its own separate memory space. This means that multiple processes can’t access the same objects in memory but instead you have to use special constructs and communication to share data (see <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes">“Sharing state between processes”</a> and <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue"><code>multiprocessing.Queue</code></a>).</p>
<p>It’s worth mentioning that there is a bit more overhead in using multiple processes as opposed to multiple threads, in addition to it being more difficult to share data.</p>
<p>Using multiple threads is sometimes not as bad as people commonly assume, however. If Python is doing I/O like reading from files or making network calls, it will release the GIL so that other threads can run. This means that if you’re doing lots of I/O, multi-threading will often be as fast as multi-processing. It’s when you are CPU-bound that the GIL becomes a big issue.</p>
<a href="#ok-so-why-are-they-removing-the-gil-now">#</a><h3 id="ok-so-why-are-they-removing-the-gil-now">Ok, so why are they removing the GIL now?</h3>
<p>The removal of the GIL has been something that certain people have been pushing for for several years now, but the main reason it’s not been done is not the amount of work it takes but instead is the corresponding performance degradation that would come with it for single-threaded programs.</p>
<p>Nowadays, the incremental improvements in single-core performance of computers doesn’t change too much from year to year (although big advances are being made with custom processor architectures, e.g. Apple Silicon chips) while the number of cores in a computer continues to increase. This means it’s much more common for programs to utilise multiple cores and hence the inability of Python to properly utilise multi-threading is becoming more and more of an issue.</p>
<p>Fast forward to 2021 and <a href="https://github.com/colesbury">Sam Gross</a> implemented a <a href="https://lwn.net/ml/python-dev/CAGr09bSrMNyVNLTvFq-h6t38kTxqTXfgxJYApmbEWnT71L74-g@mail.gmail.com/">no-GIL Proof of Concept implementation</a> that spurred the <a href="https://github.com/python/steering-council">Python Steering Council</a> to propose a vote on <a href="https://peps.python.org/pep-0703/">PEP 703 – Making the Global Interpreter Lock Optional in CPython</a>. The outcome of the vote was positive, resulting in the Steering Council <a href="https://discuss.python.org/t/a-steering-council-notice-about-pep-703-making-the-global-interpreter-lock-optional-in-cpython/30474">accepting the proposal</a> as part of a <a href="https://discuss.python.org/t/pep-703-making-the-global-interpreter-lock-optional-in-cpython-acceptance/37075">gradual rollout</a> in three phases:</p>
<ul>
<li><strong>Phase 1</strong>: Free-threading mode is an experimental build-time option that is not the default.</li>
<li><strong>Phase 2</strong>: Free-threading mode is officially supported but still not the default.</li>
<li><strong>Phase 3</strong>: Free-threading mode is the default.</li>
</ul>
<p>From reading the discussions, there’s a strong desire to not “split” Python into two separate implementations – one with the GIL and one without – with the intention being that eventually after free-threading mode has been the default for a while, the GIL will be removed entirely and the free-threading mode will be the only mode.</p>
<p>While all this GIL vs. no-GIL stuff has been going on the last few years, there has been a parallel effort called the “Faster CPython” project. This has been <a href="https://lwn.net/ml/python-dev/CAGr09bSrMNyVNLTvFq-h6t38kTxqTXfgxJYApmbEWnT71L74-g@mail.gmail.com/">funded by Microsoft</a> and led by <a href="https://us.pycon.org/2023/speaker/profile/81/index.html">Mark Shannon</a> and <a href="https://gvanrossum.github.io/">Guido van Rossum</a> himself, both of whom work at Microsoft.</p>
<p>The effort this team have been making has produced some very impressive results, particularly for <a href="https://docs.python.org/3/whatsnew/3.11.html#faster-cpython">3.11</a> which boasted significant performance boosts over 3.10.</p>
<p>With the combination of community / council support, increasing ubiquity of multi-core processors and the Faster CPython effort, the time was ripe for the beginning of Phase 1 of the GIL adoption plan.</p>
<a href="#what-does-the-performance-look-like">#</a><h3 id="what-does-the-performance-look-like">What does the performance look like?</h3>
<p>I’ve run a few benchmarks on both my machine – MacBook Pro with Apple M3 Pro (CPU has 6 performance cores and 6 efficiency cores) – and on a quiet EC2 instance – t3.2xlarge (8 vCPUs).</p>
<p>The graphs below show a comparison of the runtime performance of a CPU-intensive task (converging Mandelbrot set) between Python 3.12 and Python 3.13 with and without the GIL.</p>
<img src="https://drew.silcock.dev/_astro/bench-comparison-m3-dark.B6MCcmGa_96BpF.webp" alt="Performance comparison for Apple M3 Pro" width="2400" height="800" loading="lazy" decoding="async">
<img src="https://drew.silcock.dev/_astro/bench-comparison-m3-light.CBPn1teC_Z1H6EDr.webp" alt="Performance comparison for Apple M3 Pro" width="2400" height="800" loading="lazy" decoding="async">
<img src="https://drew.silcock.dev/_astro/bench-comparison-ec2-dark.DsCVDY3z_2hOeU1.webp" alt="Performance comparison for t3.2xlarge EC2 instance" width="2400" height="800" loading="lazy" decoding="async">
<img src="https://drew.silcock.dev/_astro/bench-comparison-ec2-light.ojc_JmYg_Z1h2QNH.webp" alt="Performance comparison for t3.2xlarge EC2 instance" width="2400" height="800" loading="lazy" decoding="async">
<p>(These graphs aren’t the most readable, I know – I’ll improve on them when I get some time.)</p>
<p>To explain what these runtimes mean:</p>
<ul>
<li><code>3.12.6</code> – Python version 3.12.6.</li>
<li><code>3.13.0rc2</code> – the default build of Python 3.13.0 release candidate 2 (the latest version at the time of writing).</li>
<li><code>3.13.0rc2t</code> – the Python 3.13.0 release candidate 2 with experimental free-threading enabled at build-time, run without additional arguments (i.e. GIL disabled).</li>
<li><code>3.13.0rc2t-g1</code> – the Python 3.13.0 release candidate 2 with experimental free-threading enabled at build-time, run with the <code>-X gil=1</code> argument, thereby “re-enabling” the GIL at runtime.</li>
</ul>
<p>A few caveats to this:</p>
<ul>
<li>I didn’t use a proper well established benchmark, just a simple iterative algorithm. You can find the code for running the benchmarks and graphing the results at: <a href="https://github.com/drewsilcock/gil-perf">github.com/drewsilcock/gil-perf</a>. Try it out for yourself!</li>
<li>I used <a href="https://github.com/sharkdp/hyperfine">hyperfine</a> to run the benchmarks, which is a really good tool, but these aren’t proper scientific benchmarks running on dedicated hardware. My MacBook is running a whole bunch of things and even the EC2 instance will have stuff going on in the background, although not nearly as much.</li>
<li>These benchmarks are really interesting and fun to talk about, but do bear in mind that in the real world, most libraries that do CPU-intensive work use <a href="https://cython.readthedocs.io/en/latest/src/userguide/nogil.html">Cython</a> or similar&nbsp;– very few people use raw Python for very compute-intensive tasks. Cython has the ability to release the GIL temporarily during execution and has had for a while. These benchmarks aren’t representative of this use case.</li>
</ul>
<p>With that in mind, we can already make a few observations:</p>
<ul>
<li>The performance degradation when Python is built with free-threading support is significant – around 20%.</li>
<li>It doesn’t matter whether you re-enable the GIL via the <code>-X gil=1</code> argument, the performance degradation is the same.</li>
<li>Multi-threading shows a significant boost with GIL disabled, as expected.</li>
<li>Multi-threading with GIL enabled is slower than single-threading, as expected.</li>
<li>Multi-threading with GIL disabled is about the same as multi-processing. Then again, this is a pretty noddy example where you don’t need to do much real work.</li>
<li>Apple Silicon chips really are quite impressive. Single-threaded performance on my M3 Pro is about 4x faster than single-threaded performance on the t3.2xlarge. I mean, I know t3 are designed to be cheap and burstable, but even so! It’s even more impressive if you consider the insane battery life you get out of these things<sup><a href="#user-content-fn-apple-sponsorship" id="user-content-fnref-apple-sponsorship" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup>.</li>
</ul>
<a href="#how-do-i-try-out-free-threaded-python">#</a><h3 id="how-do-i-try-out-free-threaded-python">How do I try out free-threaded Python?</h3>
<p>At the time of writing, Python 3.13 is still in release candidate and hasn’t been officially released. Having said that, today is Saturday 28<sup>th</sup> and the release is scheduled for 2<sup>nd</sup> October which is Wednesday, so its not far away.</p>
<p>If you want to try it out ahead of time, you’re out of luck with <a href="https://rye.astral.sh/">rye</a> which only seems to ship deployed versions and <a href="https://docs.astral.sh/uv/">uv</a> which includes the 3.13.0rc2 build but not the 3.13.0rc2t build. Luckily, <a href="https://github.com/pyenv/pyenv">pyenv</a> supports both 3.13.0rc2 and 3.13.0rc2t. To try it out for yourself:</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span># If you're reading this from the future, rye may have it:</span></p></div><div><div><p>2</p></div><p><span>$</span><span> </span><span>rye</span><span> </span><span>toolchain</span><span> </span><span>list</span><span> </span><span>--include-downloadable</span><span> </span><span>|</span><span> </span><span>rg</span><span> </span><span>-F</span><span> </span><span><a href="https://drew.silcock.dev/cdn-cgi/l/email-protection" data-cfemail="1e7d6e676a7671705e2d302f2d">[email&nbsp;protected]</a></span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span># uv may also have it</span></p></div><div><div><p>5</p></div><p><span>$</span><span> </span><span>uv</span><span> </span><span>python</span><span> </span><span>list</span><span> </span><span>|</span><span> </span><span>rg</span><span> </span><span>-F</span><span> </span><span>cpython-3.13</span></p></div><div><p>6</p></div><div><div><p>7</p></div><p><span># pyenv should have it, though.</span></p></div><div><div><p>8</p></div><p><span>$</span><span> </span><span>pyenv</span><span> </span><span>install</span><span> </span><span>--list</span><span> </span><span>|</span><span> </span><span>rg</span><span> </span><span>'^\s+3\.13'</span></p></div><div><p>9</p></div><div><div><p>10</p></div><p><span># Take 3.13.0rc2t for a spin</span></p></div><div><div><p>11</p></div><p><span>$</span><span> </span><span>pyenv</span><span> </span><span>install</span><span> </span><span>3.13.0rc2t</span></p></div><div><div><p>12</p></div><p><span>$</span><span> </span><span>pyenv</span><span> </span><span>local</span><span> </span><span>3.13.0rc2t</span></p></div><div><p>13</p></div><div><div><p>14</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>-VV</span></p></div><div><div><p>15</p></div><p><span>Python</span><span> </span><span>3.13.0rc2</span><span> </span><span>experimental</span><span> </span><span>free-threading</span><span> </span><span>build</span><span> (main, </span><span>Sep</span><span> </span><span>18</span><span> </span><span>2024,</span><span> </span><span>16:41:38</span><span>) [Clang </span><span>15.0.0</span><span> (clang</span><span>-</span><span>1500</span><span>.</span><span>3</span><span>.</span><span>9</span><span>.</span><span>4</span><span>)]</span></p></div><div><p>16</p></div><div><div><p>17</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>-c</span><span> </span><span>'import sys;print("GIL enabled 🔒" if sys._is_gil_enabled() else "GIL disabled 😎")'</span></p></div><div><div><p>18</p></div><p><span>GIL</span><span> </span><span>disabled</span><span> </span><span>😎</span></p></div><div><p>19</p></div><div><div><p>20</p></div><p><span># GIL can be re-enabled at runtime</span></p></div><div><div><p>21</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>-X</span><span> </span><span>gil=</span><span>1</span><span> </span><span>-c</span><span> </span><span>'import sys;print("GIL enabled 🔒" if sys._is_gil_enabled() else "GIL disabled 😎")'</span></p></div><div><div><p>22</p></div><p><span>GIL</span><span> </span><span>enabled</span><span> </span><span>🔒</span></p></div></code></pre></figure></div>
<p>Just a heads up if you are trying free-threading Python – if you don’t specify either <code>-X gil=0</code> or <code>-X gil=1</code>, the GIL will be disabled by default but simply importing a module which does not support running without the GIL will cause the GIL to be re-enabled. I found this when running the benchmarks because I imported matplotlib, which results in the GIL being re-enabled and all my benchmarks coming out rubbish. If you manually specify <code>-X gil=0</code>, the GIL will not be sneakily re-enabled, even if a package does not mark itself as supporting GIL-free running.</p>
<a href="#jit-just-in-time-compiler">#</a><h2 id="jit-just-in-time-compiler">JIT (Just-in-Time) Compiler</h2>
<p>It’s not just the GIL that’s a big change in this Python release – there’s also the addition into the Python interpreter of an experimental JIT compiler.</p>
<a href="#what-is-a-jit">#</a><h3 id="what-is-a-jit">What is a JIT?</h3>
<p>JIT stands for Just in Time and is a compilation technique where machine code is produced just in time to execute it, as opposed to ahead of time (AOT) like your traditional C compiler like gcc or clang.</p>
<p>We already talked about bytecode and the interpreter earlier. The important thing is that, before Python 3.13, the interpreter would look at each bytecode instruction one at a time and turn each one into native machine code before executing it. With the introduction of the JIT compiler, it is now possible for bytecode to be “interpreted” into machine code once and updated as necessary, instead of being re-interpreted every time.</p>
<p>It’s important to point out that this kind of JIT that has been <a href="https://github.com/python/cpython/pull/113465">introduced in 3.13</a> is what’s called <a href="https://en.wikipedia.org/wiki/Copy-and-patch">“copy-and-patch” JIT</a>. This is a very recent idea introduced in 2021 in an article called <a href="https://dl.acm.org/doi/10.1145/3485513">“Copy-and-patch compilation: a fast compilation algorithm for high-level languages and bytecode</a>. The core idea behind copy-and-patch as opposed to more advanced JIT compilers is that there is a simple list of pre-generated templates – the JIT compiler will pattern match for bytecode that matches one of the pre-defined templates and if it does, it will patch in pre-generated native machine code.</p>
<p>Traditional JIT compilers will be massively more advanced that this and also massively more memory intensive, especially if you compare it to heavily JIT-compiled languages like Java or C#. (That’s part of the reason Java programs take up so much memory.)</p>
<p>What’s great about JIT compilers is that they can adapt to your code as its running. For instance, as your code runs, the JIT compiler will keep track of how “hot” each piece of code is. JIT compilers can perform incremental optimisations as the code get hotter and hotter and even use information about how the program is actually running to inform the optimisations it is making (like how Profile-Guided Optimisation does for AOT compilers). This means that JIT doesn’t waste time optimising some code which is only running once but the really hot sections of code can have heavy run-time informed optimisations done on them.</p>
<p>Now, the JIT compiler in Python 3.13 is relatively simple and won’t be doing any crazy at this stage, but it’s a really exciting development for the future of Python performance.</p>
<a href="#what-difference-will-the-jit-make-to-me">#</a><h3 id="what-difference-will-the-jit-make-to-me">What difference will the JIT make to me?</h3>
<p>In the short term, the introduction of the JIT is unlikely to make any difference to how you write or run your Python code. But it’s an exciting internal change to the way that the Python interpreter operates that could lead to much more significant performance improvements being made to Python performance in the future.</p>
<p>In particular, it opens up the way for incremental performance improvements to be made over time which could gradually bump up Python’s performance to be more competitive with other languages. Having said that, this is still early stages and the copy-and-patch JIT technique is both new and lightweight, so there’s more big changes needed before we start seeing significant benefits from the JIT compiler.</p>
<a href="#how-do-i-try-out-the-jit">#</a><h3 id="how-do-i-try-out-the-jit">How do I try out the JIT?</h3>
<p>The JIT compilers is “experimental” in 3.13 and isn’t built with support out of the box (at least not when I downloaded 3.13.0rc2 using pyenv). You can enable experimental JIT support by doing:</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>$</span><span> </span><span>PYTHON_CONFIGURE_OPTS="--enable-experimental-jit"</span><span> </span><span>pyenv</span><span> </span><span>install</span><span> </span><span>3.13-dev</span></p></div><div><div><p>2</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>openssl@3</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>3</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>readline</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>4</p></div><p><span>Cloning</span><span> </span><span>https://github.com/python/cpython...</span></p></div><div><div><p>5</p></div><p><span>Installing</span><span> </span><span>Python-3.13-dev...</span></p></div><div><div><p>6</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>tcl-tk</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>7</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>readline</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>8</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>ncurses</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>9</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>zlib</span><span> </span><span>from</span><span> </span><span>xcode</span><span> </span><span>sdk</span></p></div><div><div><p>10</p></div><p><span>Installed</span><span> </span><span>Python-3.13-dev</span><span> </span><span>to</span><span> </span><span>/Users/drew.silcock/.pyenv/versions/3.13-dev</span></p></div><div><div><p>11</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>-c</span><span> </span><span>'import sysconfig;print("JIT enabled 🚀" if "-D_Py_JIT" in sysconfig.get_config_var("PY_CORE_CFLAGS") else "JIT disabled 😒")'</span></p></div><div><div><p>12</p></div><p><span>JIT</span><span> </span><span>enabled</span><span> </span><span>🚀</span></p></div></code></pre></figure></div>
<p>There are additional configure options which you can read about <a href="https://discuss.python.org/t/pep-744-jit-compilation/50756">on the PEP 744 discussion page</a> (like enabling the JIT but requiring it be enabled by running <code>-X jit=1</code> at runtime, etc.).</p>
<p>The test here only checks for whether the JIT was enabled at built-time, not whether it’s currently running (e.g. has been disabled at runtime). It is possible to check at runtime whether the JIT is enabled, but it’s a bit more tricky. Here’s a script you can use to figure it out (taken from the <a href="https://discuss.python.org/t/pep-744-jit-compilation/50756/53">PEP 744 discussion page</a>)[^jit-deps]:</p>
<div><figure><pre data-language="python"><code><div><div><p>1</p></div><p><span>import</span><span> _opcode</span></p></div><div><div><p>2</p></div><p><span>import</span><span> types</span></p></div><div><p>3</p></div><div><p>4</p></div><div><div><p>5</p></div><p><span>def</span><span> </span><span>is_jitted</span><span>(f: types.FunctionType) -&gt; </span><span>bool</span><span>:</span></p></div><div><div><p>6</p></div><p><span>    </span><span>for</span><span> i </span><span>in</span><span> </span><span>range</span><span>(</span><span>0</span><span>, </span><span>len</span><span>(f.</span><span>__code__</span><span>.co_code), </span><span>2</span><span>):</span></p></div><div><div><p>7</p></div><p><span>        </span><span>try</span><span>:</span></p></div><div><div><p>8</p></div><p><span><span>            </span></span><span>_opcode.get_executor(f.</span><span>__code__</span><span>, i)</span></p></div><div><div><p>9</p></div><p><span>        </span><span>except</span><span> </span><span>RuntimeError</span><span>:</span></p></div><div><div><p>10</p></div><p><span>            </span><span># This isn't a JIT build:</span></p></div><div><div><p>11</p></div><p><span>            </span><span>return</span><span> </span><span>False</span></p></div><div><div><p>12</p></div><p><span>        </span><span>except</span><span> </span><span>ValueError</span><span>:</span></p></div><div><div><p>13</p></div><p><span>            </span><span># No executor found:</span></p></div><div><div><p>14</p></div><p><span>            </span><span>continue</span></p></div><div><div><p>15</p></div><p><span>        </span><span>return</span><span> </span><span>True</span></p></div><div><div><p>16</p></div><p><span>    </span><span>return</span><span> </span><span>False</span></p></div><div><p>17</p></div><div><p>18</p></div><div><div><p>19</p></div><p><span>def</span><span> </span><span>fibonacci</span><span>(n):</span></p></div><div><div><p>20</p></div><p><span><span>    </span></span><span>a, b </span><span>=</span><span> </span><span>0</span><span>, </span><span>1</span></p></div><div><div><p>21</p></div><p><span>    </span><span>for</span><span> _ </span><span>in</span><span> </span><span>range</span><span>(n):</span></p></div><div><div><p>22</p></div><p><span><span>        </span></span><span>a, b </span><span>=</span><span> b, a </span><span>+</span><span> b</span></p></div><div><div><p>23</p></div><p><span>    </span><span>return</span><span> a</span></p></div><div><p>24</p></div><div><p>25</p></div><div><div><p>26</p></div><p><span>def</span><span> </span><span>main</span><span>():</span></p></div><div><div><p>27</p></div><p><span><span>    </span></span><span>fibonacci(</span><span>100</span><span>)</span></p></div><div><div><p>28</p></div><p><span>    </span><span>if</span><span> is_jitted(fibonacci):</span></p></div><div><div><p>29</p></div><p><span>        </span><span>print</span><span>(</span><span>"JIT enabled 🚀"</span><span>)</span></p></div><div><div><p>30</p></div><p><span>    </span><span>else</span><span>:</span></p></div><div><div><p>31</p></div><p><span>        </span><span>print</span><span>(</span><span>"Doesn't look like the JIT is enabled 🥱"</span><span>)</span></p></div><div><p>32</p></div><div><p>33</p></div><div><p>34</p></div><div><div><p>35</p></div><p><span>if</span><span> </span><span>__name__</span><span> </span><span>==</span><span> </span><span>"__main__"</span><span>:</span></p></div><div><div><p>36</p></div><p><span><span>    </span></span><span>main()</span></p></div></code></pre></figure></div>
<p>The PEP 744 discussion has mention of both <code>PYTHON_JIT=0/1</code> and <code>-X jit=0/1</code> – I did not find that the <code>-X</code> option did anything at all, but the environment variable seems to do the trick.</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>is-jit.py</span></p></div><div><div><p>2</p></div><p><span>JIT</span><span> </span><span>enabled</span><span> </span><span>🚀</span></p></div><div><div><p>3</p></div><p><span>$</span><span> </span><span>PYTHON_JIT=</span><span>0</span><span> </span><span>python</span><span> </span><span>is-jit.py</span></p></div><div><div><p>4</p></div><p><span>Doesn</span><span>'t look like the JIT is enabled 🥱</span></p></div></code></pre></figure></div>
<p>[^jit-deps] I also found a few people online talking about how you could use <code>sysconfig.get_config_var("JIT_DEPS")</code> but I did not found that this worked at all for me.</p>
<a href="#conclusion">#</a><h2 id="conclusion">Conclusion</h2>
<p>Python 3.13 is a big release in introducing some exciting new concepts and features to the runtime. It’s unlikely to make any immediate different to how you write and run your Python, but it’s likely that over the next few months and years as both free-threading and JIT become more mature and well established, they’ll begin to have more and more of an impact on the performance profile of Python code, particularly for CPU-bound tasks.</p>
<a href="#further-reading">#</a><h2 id="further-reading">Further reading</h2>
<ul>
<li><a href="https://peps.python.org/pep-0703/">PEP 703 – Making the Global Interpreter Lock Optional in CPython</a></li>
<li><a href="https://py-free-threading.github.io/">py-free-threading</a></li>
<li><a href="https://tonybaloney.github.io/posts/python-gets-a-jit.html">Python 3.13 gets a JIT – Anthony Shaw</a></li>
<li><a href="https://peps.python.org/pep-0744/">PEP 744 – JIT Compilation</a></li>
<li><a href="https://discuss.python.org/t/pep-744-jit-compilation/50756">Discuss – PEP 744: JIT Compilation</a></li>
</ul>
<section data-footnotes=""><a href="#footnote-label">#</a>
<ol>
<li id="user-content-fn-font-rendering">
<p>Font rendering is a fascinating topic and that immensely complex. Trust me, however complicated you think font rendering is, it’s more complicated that that. IIRC most of the complexity actually comes from nicely drawing text at small resolutions. For instance, in TrueType both a whole font and individual glyphs have instructions associated with them which are executed by the FontEngine virtual machine a.k.a. interpreter. If this is something you’re interested in learning more about, I highly recommend Sebastian Lague’s video – <a href="https://www.youtube.com/watch?v=SO83KQuuZvg&amp;pp=ygUOZm9udCByZW5kZXJpbmc%3D">Coding Adventure: Rendering Text</a>. He makes really great videos. The <a href="https://developer.apple.com/fonts/TrueType-Reference-Manual/RM02/Chap2.html#how_works">TrueType reference</a> is also surprisingly readable. <a href="#user-content-fnref-font-rendering" data-footnote-backref="" aria-label="Back to reference 1">↩</a></p>
</li>
<li id="user-content-fn-apple-sponsorship">
<p>Apple aren’t even paying me to say this stuff, it’s just true. <a href="#user-content-fnref-apple-sponsorship" data-footnote-backref="" aria-label="Back to reference 2">↩</a></p>
</li>
</ol>
</section>   </article></div>]]></description>
        </item>
    </channel>
</rss>