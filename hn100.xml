<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 14 Mar 2024 16:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Winning a hackathon, losing my sanity (111 pts)]]></title>
            <link>https://jero.zone/posts/meal-plan-wrapped</link>
            <guid>39704304</guid>
            <pubDate>Thu, 14 Mar 2024 14:15:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jero.zone/posts/meal-plan-wrapped">https://jero.zone/posts/meal-plan-wrapped</a>, See on <a href="https://news.ycombinator.com/item?id=39704304">Hacker News</a></p>
<div id="readability-page-1" class="page"><article> <article> <p>A few weeks ago, my friend <a href="https://ben.page/">Ben</a> and I won <a href="https://jumbohack.vercel.app/">JumboHack</a>, a hackathon at Tufts University. <a href="https://devpost.com/software/meal-plan-wrapped">Our entry</a> generates a Spotify Wrapped-like summary of students’ dining habits by scraping Tufts’ meal plan portal. Through some <a href="https://ben.page/wrapped">clever promotion</a> on Ben’s part, we managed to get hundreds of students to use it in just a couple of days. We won the <a href="https://jumbohack.vercel.app/certificate/ZK0liWzGnQBjaa8H3XySbBBhQ6M%2BwqzmPkTZ5mp8YDUfBMp81NnO3wxPVr8n3CdabzBqR4BYhq3ejKFzNp6%2FltjwXchCCkEd6%2BJDOH6sZc690n5TKBNWwiSdrOVKtKQ4H1gHCh4wCxYt8JGvMmdpZF4KlVPVnZDk2SHNJjdUHOA%3D">general track</a>, ”<a href="https://jumbohack.vercel.app/certificate/Xq8%2FM1JsUNBzNSTwwmADOaOq%2Buhc6ka0HVB%2FHmb4X09C5Llpo8u%2Br7jrxkU7qY518Uvb8LK0m6vhtWVplDl21THeCnBTmOXrUN%2FOHl7gPnM2ET%2B%2BvzeRo9VhoIst51sBzNgOLl0FutdtHg77mESikgFnxupeieQIqypuYEaUZgE%3D">most complete project</a>,” and <a href="https://jumbohack.vercel.app/certificate/jPTIFF4Z4rAUXLZHX3t18OIyNMVdQGwnYaABi8rEDAtQZ5KzuqqL6LIWXxxvTL0LRcs2dJ19Yu15%2BgyGRnugy3Ofd89QKv2kdJvpnolnGPuGJypv3UxC83A6nA4UQHJahGTDoRvQfW1qP91MrR75p0CcUbcyFKngC%2B8CeGW7O8w%3D">the whole shebang</a>.</p>
<p>You can try a live demo of our project <a href="https://jumbo.cash/share/y5uybwdf3aac">here</a>.</p>
<figure><img src="https://jero.zone/_astro/2024-02-18.CbU5izJ2_eXDq2.webp" alt="Ben and I during judging" width="853" height="1280" loading="lazy" decoding="async"><figcaption>Ben and I during judging</figcaption></figure>
<p>Tufts, like Brown and many other colleges, uses a piece of software (protected under an <a href="https://patents.google.com/patent/US6963857B1/">expired patent</a> that’s older than both of us) from a company called Atrium. Their marketing claims, in contrast to “legacy” systems, that it will “delight” users. As we will see, the irony of claiming Atrium’s software isn’t “legacy” is just too good.</p>
<p>Tufts calls their installation “JumboCash” and it can be accessed at <code>www.jumbocash.net</code>. (Don’t forget the <code>www.</code>—it won’t resolve without it.) However, the site that is ultimately loaded is determined by the <code>cid</code> (campus/college/customer ID?) parameter. Here’s Brown’s portal loaded through Tufts’ domain: <a href="https://www.jumbocash.net/index.php?cid=248"><code>www.jumbocash.net/index.php?cid=248</code></a>. You can even use the raw IP: <a href="http://3.131.28.213/index.php?cid=248"><code>3.131.28.213/index.php?cid=248</code></a> in all its <code>http://</code> glory.</p>
<figure><img src="https://tuftsesociety.files.wordpress.com/2014/01/tufts-university.jpg" alt="Bonus web development crime: Just as I've done here, the header of Tufts' JumboCash portal is hotlinked from the WordPress.com site of a long-deceased student organization"><figcaption>Bonus web development crime: Just as I've done here, the header of Tufts' JumboCash portal is hotlinked from the WordPress.com site of a long-deceased student organization</figcaption></figure>
<p>The portal is really a wrapper around the reanimated corpse of much older software, its rotting flesh visible through nonsensical decisions and the occasional XML response.</p>
<p>The first thing Ben and I noticed when logging into the JumboCash portal is that the session key is stored as a URL parameter, just like the <code>cid</code>.</p>
<pre tabindex="0"><code><span><span>https://www.jumbocash.net/index.php?skey=20613b5ef40f04e15ecc5d5f56513b92&amp;cid=233</span></span></code></pre>
<p>While a cookie is set, it is ignored. You can copy the URL into a private browsing window (or change the domain to another school’s) and it will work just fine; remove the <code>skey</code> parameter and it won’t. Change to another IP address, and it…breaks? Clearly some attempt at security was made, and it feels a bit too complex to be the result of purely ignorance.</p>
<h2 id="guest-access">Guest access</h2>
<p>Because we can’t instruct students to copy-and-paste the URL (and thus their session key), we needed another way to access students’ transaction history. We turned our attention to JumboCash’s guest access feature.</p>
<p>Presumably intended for parents to reload their children’s accounts, it allows students to given an email address access and choose from a deceptively fine-grained set of permissions. I say “deceptively” because guests can change their own permissions and even add other guests. “Disabling” a guest’s access doesn’t actually restrict any features, and guests can re-enable themselves.</p>
<img src="https://jero.zone/_astro/add-guest.CRsawLLW_15bnN7.webp" alt="" width="2664" height="2016" loading="lazy" decoding="async">
<p>Adding a new guest sends them an email with a password. We purchased the excellent domain <code>jumbo.cash</code> and had students add <code><a href="https://jero.zone/cdn-cgi/l/email-protection" data-cfemail="117664746265517b647c737e3f72706279">[email&nbsp;protected]</a></code> to their accounts. We intercepted the emails with Postmark and pulled out the password, running a job to log in and scrape the requisite information.</p>
<figure><img src="https://jero.zone/_astro/email.CY2KmnK-_wyoPW.webp" alt="The email from JumboCash is pretty much the same" width="1928" height="830" loading="lazy" decoding="async"><figcaption>The email from JumboCash is pretty much the same</figcaption></figure>
<p>When it came to scraping the transaction history itself, we finally caught a small break: the portal allowed CSV export, making our job a bit easier. However, an HTML table, which is essentially XML, wouldn’t have been much trouble.</p>
<h2 id="the-final-hurdle">The final hurdle</h2>
<p>At the time, we decided adding a guest to Atrium’s “delightful” portal was already enough friction and decided not to ask students for their email. In hindsight, we should have collected them at the beginning and given students a custom <code>@jumbo.cash</code> email address to keep things straight.</p>
<p>To achieve this ✨magical✨ experience, we needed to figure out students’ email addresses from their name, since that’s all the portal seems to have. After an unsuccessful attempt at scraping Tufts’ Outlook directory, we took a closer look at the <a href="https://directory.tufts.edu/">public directory</a>, which includes the names and emails of every student. Popping the hood, it makes a nice little request to a JSON API, which appears to be a wrapper around one or more LDAP directories. But unfortunately, it’s not allowed to be that easy.</p>
<p>The JumboCash portal displays students’ legal first and last names (e.g. Benjamin not Ben). The directory, on the other hand, can only be searched by students’ preferred names. Though not displayed in the interface, its API does return their legal names in <code>Lastname, Firstname M.</code> format.</p>
<p>Our first idea was to search the directory by last name and lazily use the PHP standard library’s <a href="https://www.php.net/manual/en/function.levenshtein.php">levenshtein() function</a> to find the closest match. However, this doesn’t work well with common or short last names—for example, “Li” is not only common but is included in lots of names like Julian and Colin and returns dozens of matches. Since the directory’s pagination was broken (while I have a theory as to why, it looks like it’s already been fixed), we couldn’t page through to find an exact match. Our gross solution was to try a bunch of formats: <code>Lastname</code>, <code>F. Lastname</code>, etc. and pick the closest name. This works…enough of the time.</p>
<h2 id="logging-in">Logging in</h2>
<p>Actually logging into JumboCash required two HTTP requests and four hours of reverse engineering. I spent so long on it that Ben, who had already scraped JumboCash for <a href="https://ben.page/swipes">a previous project</a>, started working on a Puppeteer solution in parallel.</p>
<p>But first, here’s how authentication actually works. A <code>POST</code> request is sent to <code>/login.php</code> with a <code>username</code> and <code>loginphrase</code>, which creates a session key. Then, second, a <code>GET</code> request to the same page “activates” the token. Failing to do this second request puts the UI into a weird “half-logged-in” state.</p>
<p>The first request returns, instead of a <code>Location</code> header, a snippet of JavaScript (<code>&lt;script type='JavaScript'&gt;</code> to be exact) to rediect to another page. The second page (also <code>/login.php</code>, just with some URL parameters) contains a loader and some nasty JavaScript.</p>
<img src="https://jero.zone/_astro/login-loader.X7OXQNdD_Z2akkiF.webp" alt="" width="2664" height="2016" loading="lazy" decoding="async">
<figure>
<pre tabindex="0"><code><span><span>&lt;!-- loader --&gt;</span></span>
<span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"loader"</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>div</span><span> class</span><span>=</span><span>"inner one"</span><span>&gt;&lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>div</span><span> class</span><span>=</span><span>"inner two"</span><span>&gt;&lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>div</span><span> class</span><span>=</span><span>"inner three"</span><span>&gt;&lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>&lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>&lt;</span><span>h1</span><span>&gt;Processing...&lt;/</span><span>h1</span><span>&gt;</span></span>
<span><span>&lt;!-- your message could go here --&gt;</span></span></code></pre>
<figcaption>The spinner, unceremoniously copy-pasted from some tutorial</figcaption>
</figure>
<p>While abnormal, this dance wouldn’t have taken the hours it did had one of our tools not <em>lied</em> to us. When using HTTPie to poke around the site, it would render the HTML returned by the first <code>POST</code> request, including executing the JavaScript it contained. However, while HTTPie’s webview still made the request (as a normal browser, without any of our headers), it didn’t show that it had.</p>
<p>We were baffled as to why session keys generated with requests from HTTPie worked, but those using even the cURL code it generated did not. As it turned out, HTTPie was secretly making the second “activation” request. HTTPie’s webview should probably not execute JavaScript, especially without showing the result. (It would also be nice if the webview stayed disabled instead of turning itself back on after every request.)</p>
<p>The JavaScript on the intermediary “loading” screen very responsibly checks if the browser supports the newfangled <code>XMLHttpRequest</code> API before polling an XML API for the status of the <code>skey</code>. While the concatenation in this script (included below) is out of control, I was luckily unable to find an XSS. That would have been quite fun, given the number of <code>.edu</code> domains this software runs on.</p>
<p><em>Keep scrolling! There’re goodies after, I promise!</em></p>
<pre tabindex="0"><code><span><span>var</span><span> isIE </span><span>=</span><span> false</span><span>;</span></span>
<span><span>var</span><span> req;</span></span>
<span><span>var</span><span> messageHash </span><span>=</span><span> -</span><span>1</span><span>;</span></span>
<span><span>var</span><span> targetId </span><span>=</span><span> -</span><span>1</span><span>;</span></span>
<span><span>var</span><span> centerCell;</span></span>
<span><span>var</span><span> size</span><span>=</span><span>40</span><span>;</span></span>
<span><span>var</span><span> increment </span><span>=</span><span> 100</span><span>/</span><span>size;</span></span>
<span><span>var</span><span> attempts</span><span>=</span><span>0</span><span>;</span></span>
<span></span>
<span><span>function</span><span> pollTaskmaster</span><span>() {</span></span>
<span><span>    attempts</span><span>++</span><span>;</span></span>
<span><span>    var</span><span> url </span><span>=</span><span> "login-check.php?cid=248&amp;skey=3620efdb97b88d111e8ec5388244e978"</span><span>; </span></span>
<span><span>    validate</span><span>(url);</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> validate</span><span>(</span><span>url</span><span>) {</span></span>
<span><span>    if</span><span> (window.XMLHttpRequest) {</span></span>
<span><span>        req </span><span>=</span><span> new</span><span> XMLHttpRequest</span><span>();</span></span>
<span><span>    } </span><span>else</span><span> if</span><span> (window.ActiveXObject) {</span></span>
<span><span>        isIE </span><span>=</span><span> true</span><span>;</span></span>
<span><span>        req </span><span>=</span><span> new</span><span> ActiveXObject</span><span>(</span><span>"Microsoft.XMLHTTP"</span><span>);</span></span>
<span><span>    }</span></span>
<span><span>    req.</span><span>open</span><span>(</span><span>"GET"</span><span>, url, </span><span>true</span><span>);</span></span>
<span><span>    req.onreadystatechange </span><span>=</span><span> processPollRequest;</span></span>
<span><span>    req.</span><span>send</span><span>(</span><span>null</span><span>);</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> processPollRequest</span><span>() {</span></span>
<span><span>    if</span><span> (req.readyState </span><span>==</span><span> 4</span><span>) {</span></span>
<span><span>        if</span><span> (req.status </span><span>==</span><span> 200</span><span>) {</span></span>
<span><span>            var</span><span> message </span><span>=</span><span> req.responseXML.</span><span>getElementsByTagName</span><span>(</span><span>"message"</span><span>)[</span><span>0</span><span>];</span></span>
<span><span>            if</span><span> (</span><span>!</span><span>message) {</span></span>
<span><span>              window.location.href</span><span>=</span><span>'login.php?cid=248&amp;'</span><span>;</span></span>
<span><span>              return</span><span>;</span></span>
<span><span>            }</span></span>
<span><span>            var</span><span> remotestatus </span><span>=</span><span> message.childNodes[</span><span>0</span><span>].nodeValue;</span></span>
<span><span>            if</span><span> (remotestatus </span><span>==</span><span> 1</span><span> )</span></span>
<span><span>               window.location.href</span><span>=</span><span>'index.php?skey=3620efdb97b88d111e8ec5388244e978&amp;cid=248&amp;'</span><span>;</span></span>
<span><span>            if</span><span> (remotestatus </span><span>==</span><span> -</span><span>1</span><span> )</span></span>
<span><span>               window.location.href</span><span>=</span><span>'login.php?cid=248&amp;'</span><span>;</span></span>
<span><span>        } </span><span>else</span><span> {</span></span>
<span><span>            window.status </span><span>=</span><span> "No Update "</span><span>;</span></span>
<span><span>        }</span></span>
<span><span>        window.status </span><span>=</span><span> "Processing request..."</span><span>;    </span></span>
<span><span>        setTimeout</span><span>(</span><span>"pollTaskmaster()"</span><span>, </span><span>5000</span><span>);</span></span>
<span><span>    }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> gotobadpage</span><span>() {</span></span>
<span><span>  window.location.href</span><span>=</span><span>'login.php?cid=248&amp;'</span><span>;</span></span>
<span><span>}</span></span>
<span><span>setTimeout</span><span>(</span><span>"pollTaskmaster()"</span><span>, </span><span>2000</span><span>);</span></span>
<span><span>setTimeout</span><span>(</span><span>"gotobadpage()"</span><span>, </span><span>300000</span><span>);</span></span></code></pre>
<h2 id="winning-jumbohack">Winning JumboHack</h2>
<figure><img src="https://jero.zone/_astro/watch.CBnkEgt0_1CLrb7.webp" alt="Our site is responsive...but not that responsive" width="1280" height="960" loading="lazy" decoding="async"><figcaption>Our site is responsive...but not that responsive</figcaption></figure>
<p>With all the reverse-engineering out of the way, we had a lot of fun designing the actual product. We went for a vivid and bold design, similar to Spotify Wrapped. Given how much time we spent on everything else (and a solid 8 hours of sleep!), I think it turned out alright.</p>
<figure><img src="https://jero.zone/_astro/screenshots.CFONoMTY_5THbR.webp" alt="The app&amp;#x27;s interface behaved like Instagram Stories" width="1494" height="939" loading="lazy" decoding="async"><figcaption>The app's interface behaved like Instagram Stories</figcaption></figure>
<p>We put posters up around campus and, as Ben details in <a href="https://ben.page/wrapped">his post</a>, made a few anonymous posts on Sidechat pretending to be users. They went (relatively) viral, and because we’d conspicuously included the URL on every slide, hundreds of students flocked to try it for themselves.</p>
<p>Overall, JumboHack was a lot of fun! Taking the train down from Providence (<a href="https://www.mbta.com/fares/commuter-rail-weekends">for just 10 bucks!</a>), hanging out with Ben, and taking home some AirPods was a great way to spend my Presidents’ Day weekend.</p>
<figure><img src="https://jero.zone/_astro/poster.BvqeRoay_Z2a08KS.webp" alt="A poster a few weeks later, photo courtesy of Ben" width="960" height="1280" loading="lazy" decoding="async"><figcaption>A poster a few weeks later, photo courtesy of Ben</figcaption></figure> </article> </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I Always Knew I Was Different. I Just Didn't Know I Was a Sociopath (116 pts)]]></title>
            <link>https://www.wsj.com/health/wellness/i-always-knew-i-was-different-i-just-didnt-know-i-was-a-sociopath-68ebe08b</link>
            <guid>39703173</guid>
            <pubDate>Thu, 14 Mar 2024 12:42:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/health/wellness/i-always-knew-i-was-different-i-just-didnt-know-i-was-a-sociopath-68ebe08b">https://www.wsj.com/health/wellness/i-always-knew-i-was-different-i-just-didnt-know-i-was-a-sociopath-68ebe08b</a>, See on <a href="https://news.ycombinator.com/item?id=39703173">Hacker News</a></p>
Couldn't get https://www.wsj.com/health/wellness/i-always-knew-i-was-different-i-just-didnt-know-i-was-a-sociopath-68ebe08b: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Boeing overwrote security camera footage of repair work on Alaska door plug (124 pts)]]></title>
            <link>https://www.axios.com/2024/03/13/boeing-video-footage-overwrite-erased-door-plug-alaska</link>
            <guid>39702915</guid>
            <pubDate>Thu, 14 Mar 2024 12:17:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.axios.com/2024/03/13/boeing-video-footage-overwrite-erased-door-plug-alaska">https://www.axios.com/2024/03/13/boeing-video-footage-overwrite-erased-door-plug-alaska</a>, See on <a href="https://news.ycombinator.com/item?id=39702915">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-theme="core" id="main-content"><div data-vars-content-id="bc266862-5dc4-423f-aab7-6043b59625db" data-vars-headline="Missing Boeing repair footage stymies Alaska Airlines blowout investigation" data-vars-category="story" data-vars-sub-category="story"><div><div><p><img alt="headshot" loading="lazy" width="52" height="52" decoding="async" data-nimg="1" srcset="https://www.axios.com/_next/image?url=https%3A%2F%2Fstatic.axios.com%2Fimg%2Fauthor-default.png&amp;w=320&amp;q=75 1x" src="https://www.axios.com/_next/image?url=https%3A%2F%2Fstatic.axios.com%2Fimg%2Fauthor-default.png&amp;w=320&amp;q=75"></p></div><div><ul><li data-cy="byline-author"><a href="https://www.axios.com/authors/achilders"><span>Andrew Childers</span></a></li></ul></div></div><figure data-cy="au-image"><img data-cy="StoryImage" alt="A worker walks near Boeing 737 fuselages outside the Boeing Co. manufacturing facility in Renton, Washington,  on Feb. 5, 2024. " fetchpriority="high" width="1920" height="1080" decoding="async" data-nimg="1" sizes="100vw" srcset="https://images.axios.com/9i-XQs_slCqazx-CLiaVed5JzmE=/0x265:4200x2628/320x180/2024/03/13/1710350539580.jpg?w=320 320w, https://images.axios.com/9i-XQs_slCqazx-CLiaVed5JzmE=/0x265:4200x2628/320x180/2024/03/13/1710350539580.jpg?w=320 320w, https://images.axios.com/0a5wYapArKQ6JqWolUiNUAQKS8o=/0x265:4200x2628/640x360/2024/03/13/1710350539580.jpg?w=640 640w, https://images.axios.com/0a5wYapArKQ6JqWolUiNUAQKS8o=/0x265:4200x2628/640x360/2024/03/13/1710350539580.jpg?w=640 640w, https://images.axios.com/KLW8SXRRp1LtZsg6LnOyzcMrFRc=/0x265:4200x2628/768x432/2024/03/13/1710350539580.jpg?w=768 768w, https://images.axios.com/KLW8SXRRp1LtZsg6LnOyzcMrFRc=/0x265:4200x2628/768x432/2024/03/13/1710350539580.jpg?w=768 768w, https://images.axios.com/hJ2drFJ4IlfFVDhlV4yFWbJrvZ4=/0x265:4200x2628/1024x576/2024/03/13/1710350539580.jpg?w=1024 1024w, https://images.axios.com/hJ2drFJ4IlfFVDhlV4yFWbJrvZ4=/0x265:4200x2628/1024x576/2024/03/13/1710350539580.jpg?w=1024 1024w, https://images.axios.com/wMY8nbNJXE6siLZ34iRP-FBBvf8=/0x265:4200x2628/1366x768/2024/03/13/1710350539580.jpg?w=1366 1366w, https://images.axios.com/wMY8nbNJXE6siLZ34iRP-FBBvf8=/0x265:4200x2628/1366x768/2024/03/13/1710350539580.jpg?w=1366 1366w, https://images.axios.com/tvxoV8oYhh4VS4fMMrP1hS7JOFQ=/0x265:4200x2628/1600x900/2024/03/13/1710350539580.jpg?w=1600 1600w, https://images.axios.com/tvxoV8oYhh4VS4fMMrP1hS7JOFQ=/0x265:4200x2628/1600x900/2024/03/13/1710350539580.jpg?w=1600 1600w, https://images.axios.com/JXFlsxW38BENNshO5RUbbWgTjz0=/0x265:4200x2628/1920x1080/2024/03/13/1710350539580.jpg?w=1920 1920w, https://images.axios.com/JXFlsxW38BENNshO5RUbbWgTjz0=/0x265:4200x2628/1920x1080/2024/03/13/1710350539580.jpg?w=1920 1920w" src="https://images.axios.com/JXFlsxW38BENNshO5RUbbWgTjz0=/0x265:4200x2628/1920x1080/2024/03/13/1710350539580.jpg?w=1920"><figcaption><p>A worker walks near Boeing 737 fuselages outside the Boeing Co. manufacturing facility in Renton, Washington,  on Feb. 5, 2024. Photo: David Ryder/Bloomberg via Getty Images</p></figcaption></figure><div><p><span data-schema="smart-brevity"><p><a data-vars-link-text="Boeing" data-vars-click-url="https://www.axios.com/2024/03/12/faa-audit-boeing-737" data-vars-content-id="bc266862-5dc4-423f-aab7-6043b59625db" data-vars-headline="Missing Boeing repair footage stymies Alaska Airlines blowout investigation" data-vars-event-category="story" data-vars-sub-category="story" data-vars-item="in_content_link" href="https://www.axios.com/2024/03/12/faa-audit-boeing-737" target="_self">Boeing</a> overwrote security camera footage of repair work on the door plug of an Alaska Airlines 737-9 plane that <a data-vars-link-text="failed during a flight" data-vars-click-url="https://www.axios.com/2024/01/06/alaska-airlines-grounds-fleet-boeing-hole" data-vars-content-id="bc266862-5dc4-423f-aab7-6043b59625db" data-vars-headline="Missing Boeing repair footage stymies Alaska Airlines blowout investigation" data-vars-event-category="story" data-vars-sub-category="story" data-vars-item="in_content_link" href="https://www.axios.com/2024/01/06/alaska-airlines-grounds-fleet-boeing-hole" target="_self">failed during a flight</a> in January, federal inspectors said Wednesday.</p><p><strong>Why it matters:</strong> The National Transportation Safety Board said in a <a data-vars-link-text="letter" data-vars-click-url="https://www.ntsb.gov/news/Documents/Letter%20to%20Senate%20Committee%20on%20Commerce,%20Science%20&amp;%20Transportation%20on%20Boeing%20737-9%20MAX%20Door%20Plug%20Blowout.pdf" data-vars-content-id="bc266862-5dc4-423f-aab7-6043b59625db" data-vars-headline="Missing Boeing repair footage stymies Alaska Airlines blowout investigation" data-vars-event-category="story" data-vars-sub-category="story" data-vars-item="in_content_link" href="https://www.ntsb.gov/news/Documents/Letter%20to%20Senate%20Committee%20on%20Commerce,%20Science%20&amp;%20Transportation%20on%20Boeing%20737-9%20MAX%20Door%20Plug%20Blowout.pdf" target="_blank">letter</a> to the Senate Committee on Commerce, Science, and Transportation that the missing footage is hampering its investigation into the accident. </p></span></p><ul><li>"To date, we still do not know who performed the work to open, reinstall, and close the door plug on the accident aircraft," the agency said.</li><li>NTSB said it has been unable to interview the door crew manager at the Renton, Washington facility because he is out on medical leave.</li><li>The agency in the letter stressed that it is not seeking to interview the workers that did the repairs for any punitive means but instead to learn about Boeing's quality assurance process.</li></ul><p><strong>Catch up quick:</strong> Alaska Airlines Flight 1282 safely returned to Portland International Airport just minutes after takeoff in January after part of the fuselage flew off at 16,000 feet for yet-unclear reasons.</p><p><strong>What they're saying: </strong>"We will continue supporting this investigation in the transparent and proactive fashion we have supported all regulatory inquiries into this accident," Boeing said in an emailed statement. </p><ul><li>"We have worked hard to honor the rules about the release of investigative information in an environment of intense interest from our employees, customers, and other stakeholders, and we will continue our efforts to do so."</li><li>When asked about the overwritten footage, Boeing responded: "Consistent with standard practice, video recordings are maintained on a rolling 30 day basis."</li></ul><ul><li>The plan was at the Renton facility in September and delivered to Alaska Airlines in October, according to the NTSB's <a data-vars-link-text="preliminary report" data-vars-click-url="https://www.ntsb.gov/investigations/Documents/DCA24MA063%20Preliminary%20report.pdf" data-vars-content-id="bc266862-5dc4-423f-aab7-6043b59625db" data-vars-headline="Missing Boeing repair footage stymies Alaska Airlines blowout investigation" data-vars-event-category="story" data-vars-sub-category="story" data-vars-item="in_content_link" href="https://www.ntsb.gov/investigations/Documents/DCA24MA063%20Preliminary%20report.pdf" target="_blank">preliminary report</a>.</li></ul><p><strong>State of play: </strong>This week a Federal Aviation Administration audit of <a data-vars-link-text="Boeing's 737 Max" data-vars-click-url="https://www.axios.com/2024/01/09/boeing-737-max-planes-crash-safety" data-vars-content-id="bc266862-5dc4-423f-aab7-6043b59625db" data-vars-headline="Missing Boeing repair footage stymies Alaska Airlines blowout investigation" data-vars-event-category="story" data-vars-sub-category="story" data-vars-item="in_content_link" href="https://www.axios.com/2024/01/09/boeing-737-max-planes-crash-safety" target="_self">Boeing's 737 Max</a> jet production line found a plethora of issues with the production process.</p><ul><li>Boeing's woes are also hitting carriers like Southwest Airlines, which exclusively flies Boeing 737s. </li><li>Southwest <a data-vars-link-text="lowered its 2024 capacity growth projection" data-vars-click-url="https://www.axios.com/2024/03/12/boeing-airlines-issues-southwest-united" data-vars-content-id="bc266862-5dc4-423f-aab7-6043b59625db" data-vars-headline="Missing Boeing repair footage stymies Alaska Airlines blowout investigation" data-vars-event-category="story" data-vars-sub-category="story" data-vars-item="in_content_link" href="https://www.axios.com/2024/03/12/boeing-airlines-issues-southwest-united" target="_self">lowered its 2024 capacity growth projection</a> as a result. </li></ul><p><strong>Go deeper:</strong> <a data-vars-link-text="Boeing 737 Max production plagued by numerous problems, FAA audit finds" data-vars-click-url="https://www.axios.com/2024/03/12/faa-audit-boeing-737" data-vars-content-id="bc266862-5dc4-423f-aab7-6043b59625db" data-vars-headline="Missing Boeing repair footage stymies Alaska Airlines blowout investigation" data-vars-event-category="story" data-vars-sub-category="story" data-vars-item="in_content_link" href="https://www.axios.com/2024/03/12/faa-audit-boeing-737" target="_self">Boeing 737 Max production plagued by numerous problems, FAA audit finds</a></p></div></div><h5>Go deeper</h5></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Oregon Passes Right to Repair Law Apple Lobbied to Kill (247 pts)]]></title>
            <link>https://www.techdirt.com/2024/03/13/oregon-passes-right-to-repair-law-apple-lobbied-to-kill/</link>
            <guid>39702604</guid>
            <pubDate>Thu, 14 Mar 2024 11:42:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.techdirt.com/2024/03/13/oregon-passes-right-to-repair-law-apple-lobbied-to-kill/">https://www.techdirt.com/2024/03/13/oregon-passes-right-to-repair-law-apple-lobbied-to-kill/</a>, See on <a href="https://news.ycombinator.com/item?id=39702604">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="storywrap-433833">


<h3>from the <i>fix-your-own-shit</i> dept</h3>

<p>Oregon has officially become the seventh state (behind New York, California, Massachusetts, Colorado, Maine, and Minnesota) to <a href="https://www.oregonlive.com/silicon-forest/2024/03/oregon-passes-expansive-right-to-repair-law-defying-tech-industry-concerns.html#:~:text=Oregon%20became%20the%20fourth%20state,required%20to%20repair%20their%20gadgets.">pass “right to repair” legislation</a>, making it easier and more affordable for consumers to independently repair their own electronics. </p>
<p>The <a href="https://olis.oregonlegislature.gov/liz/2024R1/Measures/Overview/SB1596">bill</a>, which passed the Oregon Senate last month 25-5 and the House on Monday 42-13, is a bit more robust than the versions passed in earlier states. Among other things, the bill requires that device manufacturers make parts, tools and repair manuals available to consumers and third-party repair shops on “fair and reasonable terms.”</p>
<p>But it also takes aim at “<a href="https://www.ifixit.com/News/69320/how-parts-pairing-kills-independent-repair">parts pairing</a>,” or the practice of preventing you from replacing device parts without the approval of a company or its restrictive software. Apple, which <a href="https://www.techdirt.com/2023/09/21/despite-some-progress-ifixit-says-apples-dedication-to-right-to-repair-still-sucks/">routinely uses this practice to try and monopolize repair</a>, lobbied <a href="https://www.404media.co/apple-is-lobbying-against-right-to-repair-again/">extensively against the Oregon bill</a>. As usual, under the (false) claim that eliminating parts pairing would put public safety and security at risk:</p>
<blockquote>
<p><em>“We remain very concerned about the risk to consumers imposed by the broad parts-pairing restrictions in this bill,” John Perry, principal secure repair architect for Apple, said at a legislative hearing last month.”</em></p>
</blockquote>
<p>In reality, Apple is concerned that the crackdown on “parts pairing” will further erode the company’s lucrative efforts to monopolize repair and slow down the rate of shiny new phone sales. Apple has generally tried to pretend than its done a <a href="https://www.techdirt.com/2023/11/16/apples-180-on-right-to-repair-was-more-of-a-90-degree-bend/">complete 180 on right to repair</a>, when it’s generally been more of a 40 degree turn toward <em>slightly</em> more reasonable policies. </p>
<p>Interestingly, Google supported Oregon’s legislation, and has more genuinely been <a href="https://www.404media.co/youtube-commenters-and-the-grassroots-movement-pushed-google-to-support-right-to-repair/">migrating away from the practice of parts pairing</a>. Activist and consumer groups like iFixit praised the bill’s passage in a statement:</p>
<blockquote>
<p><em>“I’m beyond proud of my home state for passing the strongest-yet electronics Right to Repair bill,” Kyle Wiens, the CEO of iFixit, said in a statement. “By applying to most products made after 2015, this law will open up repair for the things Oregonians need to get fixed right now. And by limiting the repair-restricting practices of parts pairing, it protects fixing for years to come. We won’t stop fighting until everyone, everywhere has these rights.”</em></p>
</blockquote>
<p>Oregon’s bill is notable because it wasn’t aggressively watered down post-passage like some right to repair legislation (<a href="https://www.techdirt.com/2023/02/17/more-details-on-how-tech-lobbyists-lobotomized-nys-right-to-repair-law-with-governor-kathy-hochuls-help/">See: New York</a>). It’s expected the bill will face industry lawsuits. Still, right to reform remains one reform bright spot in a country where consumer protection has been on the chopping block for the better part of the last quarter century. </p>
<p>
Filed Under: <a href="https://www.techdirt.com/tag/consumer-rights/" rel="tag">consumer rights</a>, <a href="https://www.techdirt.com/tag/electronics/" rel="tag">electronics</a>, <a href="https://www.techdirt.com/tag/independent-repair/" rel="tag">independent repair</a>, <a href="https://www.techdirt.com/tag/oregon/" rel="tag">oregon</a>, <a href="https://www.techdirt.com/tag/right-to-repair/" rel="tag">right to repair</a>, <a href="https://www.techdirt.com/tag/wireless/" rel="tag">wireless</a>
<br>
Companies: <a href="https://www.techdirt.com/company/apple/" rel="category tag">apple</a>
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Starship's Third Flight Test (255 pts)]]></title>
            <link>https://twitter.com/i/broadcasts/1LyxBnOvzvOxN</link>
            <guid>39702568</guid>
            <pubDate>Thu, 14 Mar 2024 11:37:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/i/broadcasts/1LyxBnOvzvOxN">https://twitter.com/i/broadcasts/1LyxBnOvzvOxN</a>, See on <a href="https://news.ycombinator.com/item?id=39702568">Hacker News</a></p>
Couldn't get https://twitter.com/i/broadcasts/1LyxBnOvzvOxN: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[The Good Soldier Švejk (162 pts)]]></title>
            <link>https://blogs.loc.gov/international-collections/2018/03/the-good-soldier-vejk/</link>
            <guid>39702479</guid>
            <pubDate>Thu, 14 Mar 2024 11:23:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blogs.loc.gov/international-collections/2018/03/the-good-soldier-vejk/">https://blogs.loc.gov/international-collections/2018/03/the-good-soldier-vejk/</a>, See on <a href="https://news.ycombinator.com/item?id=39702479">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p><em>(The following is a post by Helen Fedor, Reference Specialist in the European Division.)</em></p>
<p>The most famous work by Czech writer Jaroslav Hašek (1883-1923), and probably the best known work of Czech literature, is “Osudy dobrého vojáka Švejka za světové války” (The adventures of the good soldier Švejk during the world war), or as it is known in its English translation, “The Good Soldier Švejk.” The most translated Czech novel—read in some 60 languages—it satirizes bureaucracy, the military, and war.</p>
<figure id="attachment_4105"><a href="https://lccn.loc.gov/54025327?loclr=blogint" target="_blank" rel="noopener"><img src="https://blogs.loc.gov/international-collections/files/2018/03/SvejkGoodii-300x272.jpg" alt="" width="300" height="272" srcset="https://blogs.loc.gov/international-collections/files/2018/03/SvejkGoodii-300x272.jpg 300w, https://blogs.loc.gov/international-collections/files/2018/03/SvejkGoodii.jpg 761w" sizes="(max-width: 300px) 100vw, 300px"></a><figcaption>Jaroslav Hašek. “Osudy dobrého vojáka Švejka za světové války.” Prague: K. Synek, 1948-49. Illustration by Josef Lada. Švejk rubs ointment into his knee while the cleaning lady tells him of the assassination of Archduke Franz Ferdinand—an event that triggered World War I and brought about Švejk’s many adventures.</figcaption></figure>
<p>Set in Austria-Hungary, the book opens with the 1914 news that Archduke Franz Ferdinand of Austria (1863-1914) has been assassinated in Sarajevo, an event that would trigger World War I. Josef Švejk, the antihero, enlists in the army and spends the war blundering from one ludicrous adventure to another. He seems earnest in his desire to carry out his orders, yet takes them to extremes and frustrates his superiors. For example, when Švejk is assigned to the barracks in České Budějovice (in southern Bohemia) as a prelude to going to the front, he manages to miss all the trains heading there. In his ‘zeal’ to reach the barracks and join the rest of his battalion, Švejk meanders all over southern Bohemia, vainly searching for České Budějovice, gets arrested as a suspected spy and deserter, and is escorted to the barracks.</p>
<p>Švejk bears more than a passing resemblance to the author, Hašek, who loved practical jokes, had a checkered career, and was himself drafted into the Austro-Hungarian army. Hašek’s pretended suicide attempt (by jumping off Charles Bridge into the Vltava River in Prague) ended with the police taking him to a mental institution. Also, during elections to the Austro-Hungarian parliament, Hašek ran for office as a member of his own newly founded Party of Moderate and Peaceful Progress Within the Limits of the Law. He eventually joined the anarchist movement and was arrested and imprisoned more than once.</p>
<figure id="attachment_4107"><a href="https://lccn.loc.gov/2011475394?loclr=blogint" target="_blank" rel="noopener"><img loading="lazy" src="https://blogs.loc.gov/international-collections/files/2018/03/Svk1-225x300.jpg" alt="" width="225" height="300" srcset="https://blogs.loc.gov/international-collections/files/2018/03/Svk1-225x300.jpg 225w, https://blogs.loc.gov/international-collections/files/2018/03/Svk1-768x1024.jpg 768w" sizes="(max-width: 225px) 100vw, 225px"></a><figcaption>Jaroslav Hašek, Karel Vaněk; illustrations Petr Urban. “Švejk za první světové války, v ruském zajetí a v revoluci” [Švejk during the first world war, in Russian captivity, and in the revolution]. Prague: XYZ, 2009. As Švejk and 40 other captive soldiers are being transported eastward across Russia, his train pulls out of a village station without him, and despite his pursuit, strands him there. The illustration shows Švejk running after the train.</figcaption></figure>
<figure id="attachment_4109"><a href="https://lccn.loc.gov/54025327?loclr=blogint" target="_blank" rel="noopener"><img loading="lazy" src="https://blogs.loc.gov/international-collections/files/2018/03/Svk2-300x227.jpg" alt="" width="300" height="227" srcset="https://blogs.loc.gov/international-collections/files/2018/03/Svk2-300x227.jpg 300w, https://blogs.loc.gov/international-collections/files/2018/03/Svk2-768x581.jpg 768w, https://blogs.loc.gov/international-collections/files/2018/03/Svk2-1024x775.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px"></a><figcaption>Jaroslav Hašek. “Osudy dobrého vojáka Švejka za světové války.” Prague: K. Synek, 1948-49. Illustration by Josef Lada. Two soldiers escorted Švejk to the home of the chaplain for “spiritual consolation” before his hanging. By the time Švejk and his escorts got there, the soldiers were drunk, and Švejk ended up guarding them while the chaplain (himself drunk) unsuccessfully tried to telephone the barracks, mistaking a coat rack for his nonexistent telephone.</figcaption></figure>
<p>Hašek planned to write the Švejk story in six parts. The first three were published 1921-23, but Hašek died in 1923, while working on part four. After his death, his publisher asked journalist and humorist Karel Vaněk to complete the work. Vaněk finished part four and later also wrote about Švejk’s adventures in Russian captivity and during the Russian Revolution.</p>
<p>The most famous illustrator of Švejk’s adventures was Josef Lada. His classic illustrations are instantly recognizable and have come to define Švejk, even though Hašek apparently never saw Lada’s drawings. A more recent illustrator is the delightful Petr Urban whose artwork is shown here.</p>
<p>Two other sequels to the Švejk story were set in the Nazi-controlled Protectorate of Bohemia and Moravia (1939-45); both were written in the 1940s by anonymous authors. The first was the English-language “Švejk in the Protectorate,” published in London, 1942, by the exile publishing house The Czechoslovak. This small booklet begins with an account of the 1939 assassination attempt on Hitler: “So they’ve nearly killed our Adolf…,” echoing the opening words of Hašek’s novel. The preface of this work describes it as “a cruel and bitter satire where laughter is mingled with the fighting spirit of revenge and hatred.”</p>
<figure id="attachment_4110"><a href="https://lccn.loc.gov/43008699?loclr=blogint" target="_blank" rel="noopener"><img loading="lazy" src="https://blogs.loc.gov/international-collections/files/2018/03/Svk3-196x300.jpg" alt="" width="196" height="300" srcset="https://blogs.loc.gov/international-collections/files/2018/03/Svk3-196x300.jpg 196w, https://blogs.loc.gov/international-collections/files/2018/03/Svk3.jpg 580w" sizes="(max-width: 196px) 100vw, 196px"></a><figcaption>“S̆vejk in the Protectorate,” London: “The Czechoslovak,” 1942.</figcaption></figure>
<figure id="attachment_4111"><a href="https://lccn.loc.gov/53015794?loclr=blogint" target="_blank" rel="noopener"><img loading="lazy" src="https://blogs.loc.gov/international-collections/files/2018/03/Svk4-194x300.jpg" alt="" width="194" height="300" srcset="https://blogs.loc.gov/international-collections/files/2018/03/Svk4-194x300.jpg 194w, https://blogs.loc.gov/international-collections/files/2018/03/Svk4-768x1188.jpg 768w, https://blogs.loc.gov/international-collections/files/2018/03/Svk4-662x1024.jpg 662w, https://blogs.loc.gov/international-collections/files/2018/03/Svk4.jpg 1432w" sizes="(max-width: 194px) 100vw, 194px"></a><figcaption>Medius (pseud.). “Loyální občan Josef Švejk v protektorátě Čechy a Morava.” Prague: K. Synek, 1948.</figcaption></figure>
<p>The other work, “Loyální občan Josef Švejk v protektoráte Čechy a Morava” (Loyal citizen Josef Švejk in the Protectorate of Bohemia and Moravia), was published in Prague by the unknown ‘Medius,’ in 1948. Only part one of this work was ever issued. The Protectorate of Bohemia and Moravia was established on March 16, 1939, after Germany had occupied Czechoslovakia. Germany had already annexed the Sudetenland, composed of territory in the northern, southern, and western parts of the Czech Lands (Bohemia and Moravia), in October 1938; an independent Slovak Republic had been established on March 14, 1939.</p>
<p>The first English translation of Švejk was published by Paul Selver in 1930, but it was an abridged version that reduced the book to less than two-thirds of the original. Perhaps the best known English-language translation of Hašek’s book is &nbsp;by Cecil Parrott, originally published in 1973. His translation used Lada’s original drawings, and included maps showing Švejk’s travels.</p>
<figure id="attachment_4113"><a href="https://lccn.loc.gov/74165915?loclr=blogint" target="_blank" rel="noopener"><img loading="lazy" src="https://blogs.loc.gov/international-collections/files/2018/03/Svk5-300x231.jpg" alt="" width="300" height="231" srcset="https://blogs.loc.gov/international-collections/files/2018/03/Svk5-300x231.jpg 300w, https://blogs.loc.gov/international-collections/files/2018/03/Svk5-768x591.jpg 768w, https://blogs.loc.gov/international-collections/files/2018/03/Svk5-1024x788.jpg 1024w, https://blogs.loc.gov/international-collections/files/2018/03/Svk5.jpg 1612w" sizes="(max-width: 300px) 100vw, 300px"></a><figcaption>“The Good Soldier Švejk and His Fortunes in the World War,” Cecil Parrott (trans.). London: Heinemann, 1973.</figcaption></figure>
<p>The very first translation of Hašek’s book however, was into German, by Grete Reiner, in 1926. “Die Abenteuer des braven Soldaten Schwejk während des Weltkrieges” (The adventures of the good soldier Švejk during the world war) was published in Prague, which had a large German-speaking population.</p>
<p>Ms. Reiner, a native of Prague who was later killed at Auschwitz, was the executive editor of the anti-fascist magazine, “Deutsche Volkszeitung,” (German’s people daily ), and was largely responsible for spreading Švejk’s fame throughout Europe. Her translation, burned by the Nazis in 1933, was said to be one of playwright Bertolt Brecht’s favorite books. In 1927, Brecht himself wrote a stage adaptation based on the first three parts of the Švejk story. The songs for this production were written by Hanns Eisler, an Austrian who later composed the national anthem of the German Democratic Republic (East Germany).</p>
<figure id="attachment_4114"><a href="https://lccn.loc.gov/ltf91044140?loclr=blogint" target="_blank" rel="noopener"><img loading="lazy" src="https://blogs.loc.gov/international-collections/files/2018/03/Svk6-212x300.jpg" alt="" width="212" height="300" srcset="https://blogs.loc.gov/international-collections/files/2018/03/Svk6-212x300.jpg 212w, https://blogs.loc.gov/international-collections/files/2018/03/Svk6-768x1086.jpg 768w, https://blogs.loc.gov/international-collections/files/2018/03/Svk6-724x1024.jpg 724w, https://blogs.loc.gov/international-collections/files/2018/03/Svk6.jpg 1129w" sizes="(max-width: 212px) 100vw, 212px"></a><figcaption>“Die Abenteuer des braven Soldaten Schwejk während des Weltrieges.” Transl. Grete Reiner, Illus. Josef Lada. Prague: A. Synek, 1926.</figcaption></figure>
<figure id="attachment_4115"><a href="https://lccn.loc.gov/74231403?loclr=blogint" target="_blank" rel="noopener"><img loading="lazy" src="https://blogs.loc.gov/international-collections/files/2018/03/Svk7-188x300.jpg" alt="" width="188" height="300" srcset="https://blogs.loc.gov/international-collections/files/2018/03/Svk7-188x300.jpg 188w, https://blogs.loc.gov/international-collections/files/2018/03/Svk7-768x1228.jpg 768w, https://blogs.loc.gov/international-collections/files/2018/03/Svk7-640x1024.jpg 640w, https://blogs.loc.gov/international-collections/files/2018/03/Svk7.jpg 1030w" sizes="(max-width: 188px) 100vw, 188px"></a><figcaption>“Schweyk im zweiten Weltkrieg.” (Svejk in the second world war) Berlin: Suhrkamp Verlag, 1962, c1957.</figcaption></figure>
<p>Since then, Švejk has inspired further plays, films, comic books, several restaurants (in Prague, throughout the Czech Republic, and abroad), statues, an opera, TV adaptations, a BBC radio broadcast, an animated film, and books such as Joseph Heller’s “Catch-22.” No doubt Švejk will continue to inspire future generations.</p>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Reverse engineering a car key fob signal (180 pts)]]></title>
            <link>https://0x44.cc/radio/2024/03/13/reversing-a-car-key-fob-signal.html</link>
            <guid>39701931</guid>
            <pubDate>Thu, 14 Mar 2024 09:45:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://0x44.cc/radio/2024/03/13/reversing-a-car-key-fob-signal.html">https://0x44.cc/radio/2024/03/13/reversing-a-car-key-fob-signal.html</a>, See on <a href="https://news.ycombinator.com/item?id=39701931">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <h3 id="context">Context</h3>

          <p>
            I’ve had the curiosity to explore radio communication protocols for
            a few years now, ever since I’ve started fiddling around with an
            RTL-SDR dongle. I always had the goal of figuring out how data is
            transmitted in remote controls (car key fobs particularly), trying
            replay attacks, and other possible attack vectors.
          </p>

          <p>
            Despite capturing some car key fob signals over the years, I haven’t
            had the chance of doing meaningful analysis on them, and that’s
            mainly due to the limited access I had to cars I could test on.
          </p>

          <p>
            This blog post aims to bring the uninitiated through my journey of
            having successfully reverse engineered and replayed a car’s key fob
            signal last year, starting from the very basic concepts of radio
            frequency and going all the way through my entire thought process
            while I was working on this project.
          </p>

          <p>
            Another goal I guess is to also prove that most cars are definitely
            not that easy to steal using replay attacks (unless it’s a
            <a href="https://rollingpwn.github.io/rolling-pwn/" rel="noopener noreferrer" target="_blank">Honda</a>, lol), despite Canada’s recent ban of the Flipper Zero, and them
            claiming the risk warrants the ban of a device made of very cheap
            and accessible wireless modules.
          </p>

          <h3 id="hardware-used">Hardware used</h3>

          <h4 id="rtl-sdr">RTL-SDR</h4>

          <p>
            I’ve had my first dive into the world of radio frequency back in
            2016 when I learned that a very cheap (~$10) terrestrial TV/radio
            USB dongle can easily be turned into a multi-purpose RF receiver to
            inspect and decode pretty much anything happening in the range of 24
            to 1750 MHz - this device is widely known as ‘RTL-SDR’:
          </p>

          <p><img src="https://i.0x44.cc/b/rtl-sdr.png" alt=""></p>

          <p>
            The secret why this cheap device is very powerful, is the simple
            fact that it uses a chip which allows the use of
            <a href="https://en.wikipedia.org/wiki/Software-defined_radio" rel="noopener noreferrer" target="_blank">SDR (software defined radio)</a>. It turns out that this chip (RTL2832U) allowed skipping the
            signal processing that usually happens on the hardware-level which
            converts the raw signal into ‘meaningful’ data to be used by the
            host device (a TV/radio feed in the case of this device).
          </p>

          <p>
            By having direct access to the raw I/Q data, we can receive,
            visualize and save pretty much any signal in raw format, without
            needing to know the specifics of the RF configuration used to
            transmit (modulation, bandwidth, data rate, etc.), since we can
            analyze/process the raw data ourselves. This effectively gives us a
            window to scan for virtually any activity on the radio spectrum
            under the 1.7 GHz frequency.
          </p>

          <h4 id="flipper-zero">Flipper Zero</h4>

          <p>
            The Flipper Zero is an electronic gadget which attracted a lot of
            attention lately for being a hacker/troll’s ultimate Swiss knife,
            since it hosts a bunch of wireless hardware modules that allow
            ‘interacting with’ everyday electronics and consumer appliances.
          </p>

          <p><img src="https://i.0x44.cc/b/flipper-zero.jpg" alt=""></p>

          <p>
            The module that’s interesting to us in the Flipper is the Sub-GHz
            one, which is essentially a
            <a href="https://www.ti.com/product/CC1101" rel="noopener noreferrer" target="_blank">CC1101</a>
            chip that supports frequencies that are typically used in wireless
            consumer devices, and that are under 1 GHz, hence the name of the
            module.
          </p>

          <p>
            It’s important to note, however, that one could just buy the CC1101
            module separately ($5+) and make it work with an Arduino/Raspberry
            Pi or simply a USB-to-TTL adapter, but the Flipper is definitely
            cooler and more practical. ¯\_(ツ)_/¯
          </p>

          <h4 id="cc1101-vs-rtl2832u">CC1101 vs RTL2832U</h4>

          <p>
            The CC1101 chip in the Flipper Zero, unlike the RTL2832U chip that’s
            on the RTL-SDR, is actually a transceiver module (supports sending
            and receiving), which means the Flipper Zero is the device we’ll be
            using to send signals.
          </p>

          <p>
            However, the CC1101 chip doesn’t support SDR, which means that it
            would only send back data that it had completely processed. In other
            terms, the CC1101 will only be useful to us if we set the right RF
            configuration of the transmitted signal.
          </p>

          <table>
            <thead>
              <tr>
                <th>&nbsp;</th>
                <th>Flipper Zero (CC1101)</th>
                <th>RTL-SDR dongle (RTL2832U)</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Receiving signals</td>
                <td>✔️</td>
                <td>✔️</td>
              </tr>
              <tr>
                <td>Sending signals</td>
                <td>✔️</td>
                <td>❌</td>
              </tr>
              <tr>
                <td>Receiving/analyzing raw signals</td>
                <td>❌</td>
                <td>✔️</td>
              </tr>
            </tbody>
          </table>

          <p>
            <strong><em>Note:</em></strong> Transceiver SDR devices do exist of
            course, but they tend to be very pricey.
          </p>

          <h3 id="radio-frequency-signal-basics-oversimplified">
            Radio frequency signal basics (<em>oversimplified</em>)
          </h3>

          <p>
            Now that we know a bit about the hardware we’ll be using, let’s go
            through some minimum basic concepts that are needed to tackle this
            subject.
          </p>

          <h4 id="intro">Intro</h4>

          <p>
            Radio frequency transmissions use radio waves, which are a type of
            electromagnetic radiation, in order to send signals.
          </p>

          <p>
            These waves are of a typically higher frequency than the original
            signal we’re transmitting and this is to ensure reliability in
            sending data, since signals can have varying characteristics that
            make sending them as radio waves impractical and susceptible to
            interference and weak travel distance.
          </p>

          <p>
            These waves are called carrier waves, since they are essentially
            modified to carry the original signal reliably through the air (more
            on this below).
          </p>

          <p>
            Let’s take a look at <em>some</em> of the basic information needed
            to send/receive a radio signal:
          </p>

          <h4 id="frequency">Frequency</h4>

          <p>
            This one is self-explanatory, it’s the number of times a second a
            carrier wave occurs. Frequency affects the wavelength (the higher
            the frequency the shorter the waves). This parameter is also
            typically used to define the communication channel.
          </p>

          <h4 id="modulation">Modulation</h4>

          <p>
            This refers to the way a signal is represented in the radio waves.
            The two most common modulation types, which I’m sure most people
            already know of, are:
          </p>

          <p>
            <strong>AM</strong> (<em>amplitude</em> modulation) and
            <strong>FM</strong> (<em>frequency</em> modulation).
          </p>

          <p>
            The difference between these is simply the fact that for AM, the
            signal is modulated (encoded) in <em>amplitude</em> (or strength),
            which roughly means that the <em>change</em> in signal
            <em>strength</em> on the carrier waves is how the data is
            represented.
          </p>

          <p>
            For FM, as one can guess, the data is rather modulated in
            <em>frequency</em>. So, changes in the frequency of the waves are
            used here to determine the data.
          </p>

          <p>
            This is well visualized in this animation I found on Wikipedia (the
            ‘signal’ graph represents the data we’re trying to transmit):
          </p>

          <p>
            <img src="https://i.0x44.cc/b/radio-fm-vs-am-anim.gif" alt="">
          </p>

          <p>
            Modulations can also have different subtypes and characteristics
            which we’ll talk about later on.
          </p>

          <h4 id="bandwidth">Bandwidth</h4>

          <p>
            This refers to the range of frequencies occupied by a modulated RF
            signal, or in other words, the difference between the highest and
            the lowest frequency a modulated signal can have. This essentially
            dictates the amount of data a signal can carry.
          </p>

          <p>
            Since the rest of the radio characteristics are not terribly
            important for us to know at this stage, let’s move on to the fun
            stuff!
          </p>

          <h3 id="visual-analysis">Visual analysis</h3>

          <h4 id="sdr">SDR#</h4>

          <p>
            <a href="https://airspy.com/download/" rel="noopener noreferrer" target="_blank">SDR#</a>
            is a free, intuitive, computer-based DSP (Digital Signal Processing)
            application for SDR written in C# with a focus on performance. It
            allows visualizing the radio spectrum in real time, and supports the
            demodulation of some common modulations. It also supports
            third-party plugins for custom modulations and integrations.
          </p>

          <p>
            We’ll be using this software for our signal discovery and initial
            analysis phase.
          </p>

          <h4 id="signal-discovery">Signal discovery</h4>

          <p>
            By tuning into the 433.92 MHz frequency with our RTL-SDR dongle
            plugged in (using the WinUSB driver instead of the stock DVB-T one),
            we can watch the activity of most remote controls in close proximity
            (433.92 MHz being the standard unregulated frequency in the EU and
            other neighboring countries, including Morocco, where I live).
          </p>

          <p>
            On each car key fob button press we instantly notice that there’s 3
            successive short bursts generated, as can be seen on the waterfall
            view under the spectrum visualizer:
          </p>

          <p>
            <img src="https://i.0x44.cc/b/sdrsharp-key-fob-433.png" alt="">
          </p>

          <p>
            <small>SDR# visualizing the key fob signal (X axis = frequency, Y axis =
              signal intensity)</small>
          </p>

          <p>
            We can also notice that the signal has two major ‘peaks’ on both
            sides of the 433.92&nbsp;MHz frequency (the red line in the middle is the
            exact tuning frequency).
          </p>

          <p>
            Doing some research on common modulation schemes, we come across
            2-FSK that sounds interesting:
          </p>

          <h4 id="2-fsk">2-FSK</h4>

          <p>
            FSK stands for Frequency-Shift Keying, which is a frequency
            modulation scheme in which data is encoded on a carrier signal by
            periodically shifting the frequency of the carrier between several
            discrete frequencies.
          </p>

          <p>
            Pretty straightforward so far, sounds like we’re dealing with FM
            here.
          </p>

          <p>
            The interesting part is the ‘2’ however, which here stands for the
            number of channels used in the encoding. So, we’re actually encoding
            binary data in two separate frequencies here, one for the
            <strong>0</strong> and the other for the <strong>1</strong>, which
            would explain the two peaks we’re noticing.
          </p>

          <p>
            <strong><em>Note:</em></strong> One might wonder what the other
            smaller ‘peaks’ are in that screen capture - those are basically
            unwanted frequencies that are generated accidentally by the emitter
            chip, due to the cheap nature of the hardware, and due to the very
            close proximity of the remote and the antenna. So, it’s just a bunch
            of ‘noise’ that we can safely ignore.
          </p>

          <h3 id="practical-analysis">Practical analysis</h3>

          <p>
            Now that we checked what the signal looks like visually, let’s
            explore how we can work on analyzing it in order to read the bits
            from the RF waves in hopes to spot some sort of
            structure/consistency.
          </p>

          <h4 id="universal-radio-hacker">Universal Radio Hacker</h4>

          <p>
            As the README of its repository states, the
            <a href="https://github.com/jopohl/urh" rel="noopener noreferrer" target="_blank">Universal Radio Hacker (URH)</a>
            is a complete open-source suite for wireless protocol investigation
            with native support for many common SDRs. URH allows easy
            demodulation of signals combined with an automatic detection of
            modulation parameters making it a breeze to identify the bits and
            bytes that fly over the air.
          </p>

          <p>
            This is precisely the software we need to decode radio waves into
            bits.
          </p>

          <p>
            As we open URH, we’re invited to either open a file or record
            directly from a device.
          </p>

          <p>
            Before recording, we have to select the source device, and set some
            basic radio parameters (I actually only made sure to put the right
            frequency and left everything else as default):
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-record-dialog-rtlsdr.png" alt="">
          </p>

          <p>
            After recording a signal, URH will try to autodetect the right
            configuration to use when decoding the radio waves.
          </p>

          <p>
            On my initial recordings, I wasn’t able to get URH to find the right
            parameters for me, which gave me wrong results. I have however later
            figured out that recording multiple repetitive signals in one go
            increases the chance that URH will figure out the right
            configuration, which turned out to be in my case: 50 samples/symbol,
            FSK.
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-signal-interpretation.png" alt="">
          </p>

          <p>
            Zooming in on one of the signals, we notice the 3 bursts we
            identified on SDR# (the second of which is made of 3 separate ones -
            so we have 5 sections to analyze now):
          </p>

          <p><img src="https://i.0x44.cc/b/urh-signal-zoom-in.png" alt=""></p>

          <p>
            For each of these sections, a bit sequence is automatically
            extracted, which we can also convert to hex for a better
            visualization:
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-signal-zoom-in-hex.png" alt="">
          </p>

          <p>
            We can already notice a lot of consistency and repeating patterns in
            the bytes, which is a sign that we’re on the right path.
          </p>

          <p>
            However, to my eyes, we’re still missing something here, because we
            notice the same 5&nbsp;hex digits being repeated, with a lot of 0x55
            bytes (01010101) also, which is pretty intriguing.
          </p>

          <p>
            Going over to the next tab labeled ‘Analysis’, we can see the bytes
            we’ve just extracted from each burst, each represented in a line,
            and there’s a decoding option that shows up with a bunch of curious
            algorithms:
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-analysis-decoding-options.png" alt="">
          </p>

          <p>
            By brute forcing my way and trying them consecutively, I noticed
            that one of them (Manchester II) converted all the 0x55 bytes to
            null ones, and without producing any decoding errors:
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-manchester-decoded.png" alt="">
          </p>

          <p>These bytes look more legit now.</p>

          <h5 id="manchester-encoding">Manchester encoding</h5>

          <p>
            <a href="https://en.wikipedia.org/wiki/Manchester_code" rel="noopener noreferrer" target="_blank">Manchester</a>
            is a very simple digital modulation scheme that ensures that the
            signal never remains at logic low or logic high for an extended
            period of time, and also converts the data signal into a
            data-plus-synchronization signal (for
            <a href="https://en.wikipedia.org/wiki/Clock_recovery" rel="noopener noreferrer" target="_blank">clock recovery</a>).
          </p>

          <p>
            These characteristics are very useful when sending digital data over
            analog mediums that tend to be susceptible to noise and
            interference.
          </p>

          <p>
            In Manchester, binary data is encoded in two opposite bits,
            therefore:
          </p>

          <p>
            <strong>0</strong> becomes <strong>01</strong> and
            <strong>1</strong> becomes <strong>10</strong> (or the other way
            around, depending on the convention):
          </p>

          <p>
            <img src="https://i.0x44.cc/b/manchester-visualization-wiki.png" alt="">
          </p>

          <p>Let’s go back and continue our investigation.</p>

          <p>
            By doing some manual examination and comparison of the different
            captures, we’re able to note that each button press generates a
            signal with the following characteristics:
          </p>

          <ol>
            <li>
              A <span>long burst</span> with no data
              (decodes to 100 null bytes).
            </li>
            <li>
              3 bursts which look very similar with only 2 bytes partially
              <span>changing</span>.
            </li>
            <li>
              A <span>final burst</span> which is
              shorter but still looks fairly similar to the previous 3 bursts.
            </li>
          </ol>

          <p>
            <img src="https://i.0x44.cc/b/urh-initial-signal-structure-highlight.png" alt="">
          </p>

          <p>
            I decided to look more closely at the 3 bursts (let’s call them
            packets) in the middle since they seem to be the important part of
            the signal, and I was quickly able to spot what seems to be an
            <span>incremental ID</span> which
            increases by 1 on each new signal:
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-incremental-id-spotted.png" alt="">
          </p>

          <p>
            To be able to move forward with our analysis, we must learn about a
            very important remote control security mechanism:
          </p>

          <h4 id="rolling-codes">Rolling codes</h4>

          <p>
            A rolling code is used in keyless entry systems to prevent a simple
            form of replay attack, where an eavesdropper records the
            transmission and replays it at a later time to cause the receiver to
            ‘unlock’. Such systems are typical in garage door openers and
            keyless car entry systems. More on
            <a href="https://en.wikipedia.org/wiki/Rolling_code" rel="noopener noreferrer" target="_blank">Wikipedia</a>.
          </p>

          <p>
            The gist of this system is that the key and the car both ‘agree’ on
            a cryptographically secure algorithm in order to generate rolling
            codes that are used to authenticate the remote.
          </p>

          <p>
            These keys are generated and tracked using a <em>counter</em> which
            has to stay in sync between the remote and the car. This ensures
            that the car doesn’t reuse an old key, and that the remote always
            generates fresh keys.
          </p>

          <p>
            An example of a rolling code implementation is pictured below
            <small>(credits:
              <a href="https://www.youtube.com/watch?v=8P_Wgl89jPU" rel="noopener noreferrer" target="_blank">RuhrSec 2017</a>)</small>:
          </p>

          <p>
            <img src="https://i.0x44.cc/b/rolling-code-explanation.png" alt="">
          </p>

          <ul>
            <li><strong>uid</strong>: ID of the car/remote link</li>
            <li>
              <strong>enc<sub>k</sub></strong>: Implementation of the rolling code algorithm
            </li>
            <li><strong>ctr</strong>: The car’s counter</li>
            <li><strong>ctr’</strong>: The remote’s counter</li>
          </ul>

          <p>
            The validity window permits the remote to not go out of sync if the
            car doesn’t happen to receive the signal (typically with a max of
            255 out-of-range button presses on most implementations, after which
            the remote has to be manually resynchronized).
          </p>

          <p>Alright, let’s go back to the drawing board.</p>

          <p>
            Since we now know that rolling codes are
            <em>cryptographically</em> secure, it becomes easy for us to spot
            the
            <span>part of the signal</span>
            responsible for this implementation (which would be the one with the
            highest entropy):
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-rolling-code-spotted.png" alt="">
          </p>

          <p>
            We can also make the assumption that the
            <span>incremental ID</span> we’ve
            identified earlier is the counter for the rolling code system. As it
            also conveniently sits right next to the code.
          </p>

          <p>
            By comparing lock and unlock signals, I was also able to quickly
            spot <span>the byte</span> responsible for the
            command (8 = unlock, 4 = lock):
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-command-byte-spotted.png" alt="">
          </p>

          <p>
            Now all that’s left for us to guess from the signal’s ‘variable
            parts’ are the two <span>red changes</span> we
            marked earlier:
          </p>

          <p>
            <strong>1)</strong> For the first one, we notice that the same
            values repeat themselves across the other captured signals.
          </p>

          <p>Converting the 3 values to binary, we notice the following:</p>

          <ul>
            <li>0x6: <strong>01</strong>10</li>
            <li>0xA: <strong>10</strong>10</li>
            <li>0xE: <strong>11</strong>10</li>
          </ul>

          <p>
            Interesting, looks as if it’s packing some sort of sequence number
            for the packets.
          </p>

          <p>And what if we check the final (4th) packet as well?</p>

          <ul>
            <li>0x13: <strong>100</strong>11</li>
          </ul>

          <p>
            Yup, our theory seems to check out
            <small>(ignore the lowest bit that changed here)</small>.
          </p>

          <p><strong>2)</strong> Let’s guess the last byte now.</p>

          <p>
            We can notice that this one not only changes for each packet, but it
            does so completely across all signals as well.
          </p>

          <p>
            Seeing that this is the last byte on the packet and that it changes
            pretty randomly, leads me to suspect this being a checksum.
          </p>

          <p>
            One thing we can try doing is a XOR of this byte with the other byte
            we just analyzed, to see if we can end up with a static value (since
            pretty much <em>everything</em> besides these two bytes actually
            stays <em>static</em> when it comes to the 3 rolling code packets).
          </p>

          <p>Let’s try with these two examples:</p>

          <p>
            <img src="https://i.0x44.cc/b/urh-checksum-theory-test.png" alt="">
          </p>

          <p>Example 1:</p>

          <ul>
            <li>0x06 ^ 0xB9 = <strong>0xBF</strong></li>
            <li>0x0A ^ 0xB5 = <strong>0xBF</strong></li>
            <li>0x0E ^ 0xB1 = <strong>0xBF</strong></li>
          </ul>

          <p>Example 2:</p>

          <ul>
            <li>0x06 ^ 0xCC = <strong>0xCA</strong></li>
            <li>0x0A ^ 0xC0 = <strong>0xCA</strong></li>
            <li>0x0E ^ 0xC4 = <strong>0xCA</strong></li>
          </ul>

          <p>Bingo. This is definitely a XOR checksum.</p>

          <p>
            By applying XOR on all the bytes of the packets, we notice that the
            value always ends up being off by 1:
          </p>

          <p><img src="https://i.0x44.cc/b/urh-bad-checksum.png" alt=""></p>

          <p>
            This leads us to conclude that the first 2 bytes of the packet are
            likely excluded from the checksum (which is where the 1 is coming
            from):
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-synchronization-bytes.png" alt="">
          </p>

          <p>
            And this actually makes sense, since these bytes would act here as a
            <a href="https://en.wikipedia.org/wiki/Syncword" rel="noopener noreferrer" target="_blank">syncword</a>
            to synchronize the receiver and indicate the beginning of the data.
          </p>

          <p>
            <strong>Note:</strong> If you’re wondering about the utility of the
            initial <span>long burst</span> highlighted in
            yellow in the captures - that one serves to basically wake up the
            radio receiver and prepare it to start receiving data (since it goes
            in an idle low power state on inactivity). And if you’re also
            wondering why the remote sends 3 packets with roughly the same data,
            it’s simply to insure some sort of reliability. In case one of the
            packets gets corrupted on the way (which we saw happen on an earlier
            screenshot).
          </p>

          <h4 id="final-result">Final result</h4>

          <p>
            After labeling the rest of the bytes to my best guess, this is the
            result I ended up with:
          </p>

          <p>
            <img src="https://i.0x44.cc/b/urh-final-labelization.png" alt="">
          </p>

          <p>Neat. We’ve just reverse engineered a car key fob signal.</p>

          <p>
            Tune in next time when I (hopefully) write about how I integrated
            support for this signal format on the Flipper Zero in order to be
            able to read, re-serialize, and replay it.
          </p>

          <p>Thanks for reading!</p>

          <p>
            <strong>Note:</strong> If you’ve noticed inaccurate information, or
            room for improvement regarding this article, and would like to
            improve it, feel free to
            <a href="https://github.com/thedroidgeek/0x44.cc/edit/master/_posts/2024-03-13-reversing-a-car-key-fob-signal.md" rel="noopener noreferrer" target="_blank">submit a pull request</a>
            on GitHub.
          </p>

          
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I summarized my understanding of Linux systems (186 pts)]]></title>
            <link>https://github.com/lsc4719/MyViewOfLinuxSystems</link>
            <guid>39701358</guid>
            <pubDate>Thu, 14 Mar 2024 07:33:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/lsc4719/MyViewOfLinuxSystems">https://github.com/lsc4719/MyViewOfLinuxSystems</a>, See on <a href="https://news.ycombinator.com/item?id=39701358">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Actions&quot;,&quot;label&quot;:&quot;ref_cta:Actions;&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Packages&quot;,&quot;label&quot;:&quot;ref_cta:Packages;&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Security&quot;,&quot;label&quot;:&quot;ref_cta:Security;&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Codespaces&quot;,&quot;label&quot;:&quot;ref_cta:Codespaces;&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Copilot&quot;,&quot;label&quot;:&quot;ref_cta:Copilot;&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Code review&quot;,&quot;label&quot;:&quot;ref_cta:Code review;&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Issues&quot;,&quot;label&quot;:&quot;ref_cta:Issues;&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Discussions&quot;,&quot;label&quot;:&quot;ref_cta:Discussions;&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to GitHub Sponsors&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Sponsors;&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to The ReadME Project&quot;,&quot;label&quot;:&quot;ref_cta:The ReadME Project;&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
    <a data-analytics-event="{&quot;category&quot;:&quot;Header menu top item (logged out)&quot;,&quot;action&quot;:&quot;click to go to Pricing&quot;,&quot;label&quot;:&quot;ref_cta:Pricing;&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:lsc4719/MyViewOfLinuxSystems" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="mswGk6S1EcT5c3EE7WJEj7cxx4IEuv2g5z1M3LGgrOCR7FiOkidsApoNPqV24Zc3RryhW_iUkRbGVa79LB6n9Q" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="lsc4719/MyViewOfLinuxSystems" data-current-org="" data-current-owner="lsc4719" data-logged-in="false" data-copilot-chat-enabled="false" data-blackbird-indexed-repo-csrf="<esi:include src=&quot;/_esi/rails_csrf_token_form_hidden?r=X0ZpZaqLIri2gLuQDXhLDCXwMIASzsc9ihyoh8eH6l95s3Sl1RnN%2FxPqpHLdmYYhsPuG5Xfo7M%2BsCMUODCVjA5%2BEeSd76p3Ku3ldTPDxgMiFPNRpai4U4mQNS8qzIBbqdp6T9KphJVJ0iMumYKHpA8sy3ysyIatCRYVOgJKtybgcolNwaHX32WTBLXSzwXNvuBfQBG5%2B6MZpYgorUOgG33skABo2xvNCOpATIGGAkk8Z4VYeJT%2BO0ks%2Bg7ucFxQCSTmH6GlaVP4rD9svHS3%2FTbctBIT9r%2F8gT1QRZjuUAVJOAHS0yipKFz%2FuzXb0NhUnAjFv1yRPN%2BJVEEuQKEIdRzsGFwERcz9qOy%2FoEjvmU0%2FLHfHphebFKyU8p%2F1xDKYFeqvqx5kuFegxHGeYjCFPBH3MPZfZuXj8WOTqaUP7CWDxW%2F0j6kdPF%2FSWE2uUUqPM3qnrrvtVipdeCvV062z8uK2oVpajEiLEnENTCCsr1zVIFY9sJTjtG%2FL3hDUbfPBU8AzGJ98ymhjHljf4EFPm5bUc08Tmi1aDEk6945Gs--Ufu7QLwR1mKdhwJc--o0EAcmbs7upmG0Xya%2B177A%3D%3D&quot; />">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=lsc4719%2FMyViewOfLinuxSystems" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/lsc4719/MyViewOfLinuxSystems&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="4b0273ee12337795a6d0ae33c551bf61f5f42abf68fa9e434c692fb8b4d560c8" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
              Sign up
            </a>
        </p></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Vancouver’s new mega-development is big, ambitious and undeniably Indigenous (122 pts)]]></title>
            <link>https://macleans.ca/society/sen%cc%93a%e1%b8%b5w-vancouver/</link>
            <guid>39701177</guid>
            <pubDate>Thu, 14 Mar 2024 06:52:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://macleans.ca/society/sen%cc%93a%e1%b8%b5w-vancouver/">https://macleans.ca/society/sen%cc%93a%e1%b8%b5w-vancouver/</a>, See on <a href="https://news.ycombinator.com/item?id=39701177">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>In B.C., Indigenous nations are reclaiming power and wealth for their own citizens—no matter what the neighbours think</p><div>
<div id="attachment_1258653"><p><img data-sizes="auto" src="https://macleans.ca/wp-content/uploads/2024/03/1-SENAKW-TANDEM-STUDIOS.jpg" alt="An image of a city shoreline with several skyscrapers" width="2000" height="1180" data-srcset="https://macleans.ca/wp-content/uploads/2024/03/1-SENAKW-TANDEM-STUDIOS.jpg 2000w, https://macleans.ca/wp-content/uploads/2024/03/1-SENAKW-TANDEM-STUDIOS-768x453.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/1-SENAKW-TANDEM-STUDIOS-953x562.jpg 953w, https://macleans.ca/wp-content/uploads/2024/03/1-SENAKW-TANDEM-STUDIOS-1000x590.jpg 1000w" sizes="(max-width: 2000px) 100vw, 2000px" srcset="https://macleans.ca/wp-content/uploads/2024/03/1-SENAKW-TANDEM-STUDIOS.jpg 2000w, https://macleans.ca/wp-content/uploads/2024/03/1-SENAKW-TANDEM-STUDIOS-768x453.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/1-SENAKW-TANDEM-STUDIOS-953x562.jpg 953w, https://macleans.ca/wp-content/uploads/2024/03/1-SENAKW-TANDEM-STUDIOS-1000x590.jpg 1000w"></p><p>The Squamish Nation is spearheading an 11-tower development in the heart of Vancouver, called Sen̓áḵw (Photograph courtesy of Tandem Studios)</p></div>
<p><span>Vancouver has long been nicknamed the “city of glass” for its shimmering high-rise skyline. Over the next few years, that skyline will get a very large new addition: Sen</span><span>̓</span><span>áḵw, an 11-tower development that will Tetrize 6,000 apartments onto just over 10 acres of land in the heart of the city. Once complete, this will be the densest neighbourhood in Canada, providing thousands of homes for Vancouverites who have long been squeezed between the country’s priciest real estate and some of its lowest vacancy rates.&nbsp;</span></p>
<p><span>Sen</span><span>̓</span><span>áḵw is big, ambitious and undeniably urban—and undeniably Indigenous. It’s being built on reserve land owned by the Squamish First Nation, and it’s spearheaded by the Squamish Nation itself, in partnership with the private real estate developer Westbank. Because the project is on First Nations land, not city land, it’s under Squamish authority, free of Vancouver’s zoning rules. And the Nation has chosen to build bigger, denser and taller than any development on city property would be allowed.</span></p>
<blockquote><p><em><strong>SIGN UP TO READ THE BEST OF MACLEAN’S:<br>
<a href="https://macleans.ca/newsletter/" target="_blank" rel="noopener">Get our top stories sent directly to your inbox twice a week</a></strong></em></p></blockquote>
<p><span>Predictably, not everyone has been happy about it. Critics have included local planners, politicians and, especially, residents of Kitsilano Point, a rarified beachfront neighbourhood bordering the reserve. And there’s been an extra edge to their critiques that’s gone beyond standard-issue NIMBYism about too-tall buildings and preserving neighbourhood character. There’s also been a persistent sense of disbelief that Indigenous people could be responsible for this futuristic version of urban living. In 2022, Gordon Price, a prominent Vancouver urban planner and a former city councillor, told Gitxsan reporter Angela Sterritt, “When you’re building 30, 40-storey high rises out of concrete, there’s a big gap between that and an Indigenous way of building.”&nbsp;</span></p>
<div id="attachment_1258659"><p><img data-sizes="auto" src="https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS.jpg" alt="A rendering of a skyscraper with plant-filled balconies" width="1332" height="2000" data-srcset="https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS.jpg 1332w, https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS-768x1153.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS-682x1024.jpg 682w, https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS-374x562.jpg 374w, https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS-666x1000.jpg 666w" sizes="(max-width: 1332px) 100vw, 1332px" srcset="https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS.jpg 1332w, https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS-768x1153.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS-682x1024.jpg 682w, https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS-374x562.jpg 374w, https://macleans.ca/wp-content/uploads/2024/03/7-SENAKW-TANDEM-STUDIOS-666x1000.jpg 666w"></p><p>In the absence of zoning regulations, the Squamish Nation is free to build as tall as it likes—and <span>Sen</span><span>̓</span><span>áḵw</span> will make the neighbourhood one of Canada’s densest (Photograph courtesy of Tandem Studios)</p></div>
<p><span>The subtext is as unmissable as a skyscraper: Indigenous culture and urban life—let alone urban development—don’t mix. That response isn’t confined to Sen</span><span>̓</span><span>áḵw, either. On Vancouver’s west side, the Musqueam, Squamish and Tsleil-Waututh Nations—through a joint partnership called MST Development Corp.—are planning a 12-tower development called the Heather Lands. In 2022, city councillor Colleen Hardwick said of that project, “How do you reconcile Indigenous ways of being with 18-storey high-rises?” (Hardwick, it goes without saying, is not Indigenous.) MST is also planning an even bigger development, called Iy</span><span>̓</span><span>álmexw in the Squamish language and ʔəy</span><span>̓</span><span>alməx</span><span>ʷ</span><span> in Halkomelem. Better known as Jericho Lands, it will include 13,000 new homes on a 90-acre site. At a city council meeting this January, a stream of non-Indigenous residents turned up to oppose it. One woman speculated that the late Tsleil-Waututh Chief Dan George would be outraged at the “monstrous development on sacred land.”&nbsp;</span></p>
<p><span>To Indigenous people themselves, though, these developments mark a decisive moment in the evolution of our sovereignty in this country. The fact is, Canadians aren’t used to seeing Indigenous people occupy places that are socially,</span> <span>economically or geographically valuable, like Sen</span><span>̓</span><span>áḵw. After decades of marginalization, our absence seems natural, our presence somehow unnatural. Something like Sen</span><span>̓</span><span>áḵw is remarkable not just in terms of its scale and economic value (expected to generate billions in revenue for the Squamish Nation). It’s remarkable because it’s a restoration of our authority and presence in the heart of a Canadian city.</span></p>
<div id="attachment_1258657"><p><img data-sizes="auto" src="https://macleans.ca/wp-content/uploads/2024/03/5-SENAKW-REVERY-ARCHITECTURE.jpg" alt="A bird's eye view of Vancouver" width="2000" height="1300" data-srcset="https://macleans.ca/wp-content/uploads/2024/03/5-SENAKW-REVERY-ARCHITECTURE.jpg 2000w, https://macleans.ca/wp-content/uploads/2024/03/5-SENAKW-REVERY-ARCHITECTURE-768x499.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/5-SENAKW-REVERY-ARCHITECTURE-865x562.jpg 865w, https://macleans.ca/wp-content/uploads/2024/03/5-SENAKW-REVERY-ARCHITECTURE-1000x650.jpg 1000w" sizes="(max-width: 2000px) 100vw, 2000px" srcset="https://macleans.ca/wp-content/uploads/2024/03/5-SENAKW-REVERY-ARCHITECTURE.jpg 2000w, https://macleans.ca/wp-content/uploads/2024/03/5-SENAKW-REVERY-ARCHITECTURE-768x499.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/5-SENAKW-REVERY-ARCHITECTURE-865x562.jpg 865w, https://macleans.ca/wp-content/uploads/2024/03/5-SENAKW-REVERY-ARCHITECTURE-1000x650.jpg 1000w"></p><p>The dense, tall cluster of towers will be built on reserve land at the foot of the Burrard Street Bridge, which runs between the neighbourhoods of Kitsilano Point and Davie Village (Photograph courtesy of Revery Architecture)</p></div>
<p><span>And in fact, Indigenous people have always been part of Canada’s cities—indeed, those cities were often built on top of Indigenous communities. Sen</span><span>̓</span><span>áḵw itself was a city of cedar longhouses long before Vancouver existed. Its Squamish residents saw their land carved up for railways, until at last they were loaded onto a barge and shipped away in 1913, their homes torched. Similarly, the heart of Winnipeg, where its rivers meet, has been a hub for Indigenous nations for thousands of years. The Mi’kmaq on the east coast gathered in what is now Halifax Harbour long before settlers showed up. Yet in every case, arriving settlers displaced Indigenous citizens, usually to more distant and marginal locations. Sometimes this was framed as benevolence: during the 1950s, Inuit families were airlifted from traditional lands to the extreme High Arctic, under the auspices of encouraging them to resume traditional ways of life. In fact they were serving as evidence of Canada’s Cold War-era sovereignty over the north, and they were separated from their lands and hunting grounds. Many died.&nbsp;</span></p>
<p><span>But more recently, Indigenous communities have been re-asserting the power taken from them, winning victories affirming their sovereign and treaty rights—which in turn are providing more authority over their own affairs and economic development. Last spring in Ontario, 21 Anishinaabe communities won a $10-billion settlement for a fair share of the wealth generated from their lands, as guaranteed in the long-ignored Robinson-Huron Treaty of 1850. Or consider Bill C-92, which the Supreme Court of Canada upheld this February, affirming the jurisdictional rights of Indigenous nations over child welfare services.&nbsp;</span></p>
<p><span>Likewise, the return of Sen</span><span>̓</span><span>áḵw to the Squamish people was only achieved after decades of court battles. Across the country, Indigenous nations have grown tired of waiting around for Canada to voluntarily uphold its end of the reconciliation bargain. Instead, they’re holding Canada and its citizens to account—not by request but by right, to claim the power long denied them. It’s that demonstration of power that makes some Canadians uneasy—Sen</span><span>̓</span><span>áḵw just happens to be a particularly and literally towering example of this sovereignty in action, one rising up from the heart of a major city. </span></p>
<p><span>What chafes critics, even those who might consider themselves progressive, is that they expect reconciliation to instead look like a kind of reversal, rewinding the tape of history to some museum-diorama past. Coalitions of neighbours near Iy̓álmexw and Sen</span><span>̓</span><span>áḵw have offered their own counter-proposals for developing the sites, featuring smaller, shorter buildings and other changes. At the January hearing for Iy̓álmexw, one resident called on the First Nations to build entirely with selectively logged B.C. timber, in accord with what she claimed were their cultural values. These types of requests reveal that many Canadians believe the purpose of reconciliation is not to uphold Indigenous rights and sovereignty, but to quietly scrub centuries of colonial residue from the landscape, ultimately in service of their own aesthetic preferences and personal interests.&nbsp;</span></p>
<div id="attachment_1258655"><p><img data-sizes="auto" src="https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE.jpg" alt="A bird's view of a skyscraper complex " width="2000" height="1120" data-srcset="https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE.jpg 2000w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-171x96.jpg 171w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-489x275.jpg 489w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-768x430.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-300x169.jpg 300w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-1000x560.jpg 1000w" sizes="(max-width: 2000px) 100vw, 2000px" srcset="https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE.jpg 2000w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-171x96.jpg 171w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-489x275.jpg 489w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-768x430.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-300x169.jpg 300w, https://macleans.ca/wp-content/uploads/2024/03/3-SENAKW-REVERY-ARCHITECTURE-1000x560.jpg 1000w"></p><p>The project, which will combine residential spaces with neighbourhood amenities like restaurants and a grocery store, is a restoration of Indigenous authority and presence in one of Canada’s largest cities (Photograph courtesy of Revery Architecture)</p></div>
<p><span>That attitude can cast Indigenous people in the role of glorified park rangers—and even then, with limits on their authority. Last August, when Líl̓wat and N’Quatqua First Nations exercised their jurisdiction by abruptly closing public access to Joffre Lakes Park, one of B.C.’s most popular Instagram backdrops, for a month of harvesting, hunting and ceremony, many visitors and nearby residents were outraged. No matter how it’s exercised, too much authority makes many Canadians nervous. But Indigenous nations are accountable, first and foremost, to their own citizens. That could mean temporarily barring access to traditional lands, as in Joffre Lakes. It could also mean maximizing the economic potential of their property, to provide housing and funds to support education, health care and community growth. As Squamish councillor Khelsilem told </span><i><span>The Tyee</span></i><span> in 2020, “Real estate development is an opportunity for us to generate real wealth for our community.”</span></p>
<p><span>In Sen</span><span>̓</span><span>áḵw’s case, it’s Indigenous by design, whatever it might look like to others. The project offers exciting architectural possibilities which could be replicated elsewhere by Indigenous leaders: a focus on communal public spaces rather than private yards, walking paths over parking spaces and the incorporation of Indigenous languages and designs reflecting thousands of years of site-specific history. And rather than taking an incremental approach to development, with concessions to nearby homeowners, the projects at Sen</span><span>̓</span><span>áḵw, Iy̓álmexw and Heather Lands consider the entire community—including those who don’t yet live there, and those often marginalized by city planning, such as renters, non-drivers and, obviously, Indigenous people. (250 affordable homes will be set aside at Sen</span><span>̓</span><span>áḵw for Squamish citizens, and managed by the nation’s non-profit society Hiy</span><span>̓</span><span>ám</span><span>̓</span><span> Housing.) On the Sen</span><span>̓</span><span>áḵw website, the Squamish Nation emphasized that rental housing will provide economic benefits for the next seven generations of its citizens. The chiefs of all three nations emphasized that Iy</span><span>̓</span><span>álmexw is for both “current and future residents of the region.”&nbsp;</span></p>
<div id="attachment_1258656"><p><img data-sizes="auto" src="https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE.jpg" alt="A rendering of people frolicking on a green lawn under a concrete structure" width="2000" height="1500" data-srcset="https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE.jpg 2000w, https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE-768x576.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE-766x575.jpg 766w, https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE-749x562.jpg 749w, https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE-1000x750.jpg 1000w" sizes="(max-width: 2000px) 100vw, 2000px" srcset="https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE.jpg 2000w, https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE-768x576.jpg 768w, https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE-766x575.jpg 766w, https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE-749x562.jpg 749w, https://macleans.ca/wp-content/uploads/2024/03/4-SENAKW-REVERY-ARCHITECTURE-1000x750.jpg 1000w"></p><p>The project will extend beneath the Burrard Street Bridge, where residents and the public will be able to enjoy&nbsp;outdoor sport and leisure facilities&nbsp;(Photograph courtesy of Revery Architecture)</p></div>
<p><span>Restoring Indigenous authority won’t turn back the clock to some pre-contact past. Instead it will propel us forward. These three First Nations have been resolute in their vision, refusing to diminish the size or scale of their developments to appease anyone. In fact, the number of homes planned for Iy</span><span>̓</span><span>álmexw has recently increased. And all three projects are proceeding. The policy plan for Iy</span><span>̓</span><span>álmexw was approved by Vancouver City Council in January. A lawsuit filed by a neighbourhood association to block Sen</span><span>̓</span><span>áḵw was dismissed last fall. Indigenous people as rights-holders, rather than recipients of Canadian largesse and tolerance, still makes some people uncomfortable, but they have some time to get used to it. Sen</span><span>̓</span><span>áḵw won’t be finished until around 2030. And in the decades that follow, Vancouver’s skyline will keep evolving—to look not like its colonial past, but an increasingly Indigenous future.</span></p>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[BlenderBIM – add-on for beautiful, detailed, and data-rich OpenBIM with Blender (180 pts)]]></title>
            <link>https://blenderbim.org/</link>
            <guid>39700448</guid>
            <pubDate>Thu, 14 Mar 2024 03:54:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blenderbim.org/">https://blenderbim.org/</a>, See on <a href="https://news.ycombinator.com/item?id=39700448">Hacker News</a></p>
<div id="readability-page-1" class="page">
        <!--=== Start Header Section ===-->
        
        <!--=== Start Menu Slide Bar ===-->
        
        
        <!--=== End Menu Slide Bar ===-->
		<!--=== Start Banner Section ===-->
		
		<!--=== End Banner Section ===-->

		<div>

				<div>

						
					
						<h2> Free, open source, native IFC authoring platform </h2>
						
					</div>
				<!-- .row -->

				<div>
						<p><img src="https://blenderbim.org/assets/images/blender/design-101.png" alt="Design 101">
						<img src="https://blenderbim.org/assets/images/blender/design-102.png" alt="Design 102"></p><div>
								<p> Audit and analyse </p>
								<p><img src="https://blenderbim.org/assets/images/blender/image1.png" alt="Banner Image">
							</p></div>
						<div>
								<p> Author IFC models </p>
								<p><img src="https://blenderbim.org/assets/images/blender/image2.png" alt="Banner Image">
							</p></div>
						<div>
								<p> Drawing generation </p>
								<p><img src="https://blenderbim.org/assets/images/blender/image3.png" alt="Banner Image">
							</p></div>
						<div>
								<p> Structural analysis </p>
								<p><img src="https://blenderbim.org/assets/images/blender/image4.png" alt="Banner Image">
							</p></div>
						<div>
								<p> MEP systems </p>
								<p><img src="https://blenderbim.org/assets/images/blender/image5.png" alt="Banner Image">
							</p></div>
						<div>
								<p> Costing and scheduling </p>
								<p><img src="https://blenderbim.org/assets/images/blender/image6.png" alt="Banner Image">
							</p></div>
						<div>
								<p> Facility management </p>
								<p><img src="https://blenderbim.org/assets/images/blender/image7.png" alt="Banner Image">
							</p></div>
						<div>
								<p> Live building sensors </p>
								<p><img src="https://blenderbim.org/assets/images/blender/image8.png" alt="Banner Image">
							</p></div>
					</div>
			</div>
		

        
        <!--=== End Footer Section ===-->
        <!--=== JS Link ===-->
         
        
        
        
        
        
        <!-- jquery end -->
    
</div>]]></description>
        </item>
        <item>
            <title><![CDATA[HTTP/2 and HTTP/3 explained (172 pts)]]></title>
            <link>https://alexandrehtrb.github.io/posts/2024/03/http2-and-http3-explained/</link>
            <guid>39700443</guid>
            <pubDate>Thu, 14 Mar 2024 03:54:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://alexandrehtrb.github.io/posts/2024/03/http2-and-http3-explained/">https://alexandrehtrb.github.io/posts/2024/03/http2-and-http3-explained/</a>, See on <a href="https://news.ycombinator.com/item?id=39700443">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <p>Understand better how HTTP works in each version.</p>
<p><a href="https://alexandrehtrb.github.io/posts/2024/03/http2-e-http3-explicados">Ler em português</a></p>
<p>In the beginning of the 1990s, Tim Berners-Lee and his team at <a href="https://home.cern/">CERN</a> worked together to elaborate the basis of the World Wide Web, defining four building blocks for the Internet:</p>
<ul>
<li>A document format for hypertext (HTML)</li>
<li>A data transmission protocol (HTTP)</li>
<li>A web browser to view hypertext (the first browser, WorldWideWeb)</li>
<li>A server to transmit the data (an early version of httpd)</li>
</ul>
<p>HTTP reused for data transport the existing TCP/IP protocols, with HTTP message bytes residing in the <a href="https://en.wikipedia.org/wiki/Application_layer">application layer</a>, light blue in the image below.</p>
<p><img src="https://alexandrehtrb.github.io/assets/img/posts/2024_03_osi_model_tcp_ip.png" alt="OSI model"></p><h2 id="http%2F0.9" tabindex="-1"><a href="#http%2F0.9"><span>HTTP/0.9</span></a></h2>
<p>It was the first HTTP draft. The only existing method was <code>GET</code>; there were no headers nor status codes; and the only data format available was HTML. Just like in HTTP/1.0 and HTTP/1.1, the HTTP messages were in an ASCII text structure.</p>
<p>Example of a HTTP/0.9 request:</p>
<pre tabindex="0"><code><span><span>GET /mypage.html</span></span>
<span><span></span></span></code></pre>
<p>Response example:</p>
<pre tabindex="0"><code><span><span>&lt;html&gt;</span></span>
<span><span>  A very simple HTML page</span></span>
<span><span>&lt;/html&gt;</span></span>
<span><span></span></span></code></pre>
<h2 id="http%2F1.0" tabindex="-1"><a href="#http%2F1.0"><span>HTTP/1.0</span></a></h2>
<p>This version gave to HTTP its current structure, similar to a <a href="https://www.learninghub.ac.nz/writing/writing/writing-a-memorandum/">memorandum</a>, also introducing new methods (<code>HEAD</code> and <code>POST</code>), MIME types, status codes and protocol versioning.</p>
<p>Example of a HTTP/1.0 request:</p>
<pre tabindex="0"><code><span><span>GET /mypage.html HTTP/1.0</span></span>
<span><span>User-Agent: NCSA_Mosaic/2.0 (Windows 3.1)</span></span>
<span><span></span></span></code></pre>
<p>Response example:</p>
<pre tabindex="0"><code><span><span>200 OK</span></span>
<span><span>Date: Tue, 15 Nov 1994 08:12:31 GMT</span></span>
<span><span>Server: CERN/3.0 libwww/2.17</span></span>
<span><span>Content-Type: text/html</span></span>
<span><span></span></span>
<span><span>&lt;HTML&gt;</span></span>
<span><span>A page with an image</span></span>
<span><span>  &lt;IMG SRC="/myimage.gif"&gt;</span></span>
<span><span>&lt;/HTML&gt;</span></span>
<span><span></span></span></code></pre>
<h2 id="http%2F1.1" tabindex="-1"><a href="#http%2F1.1"><span>HTTP/1.1</span></a></h2>
<p>This version came up in early 1997, few months after its predecessor. The main changes were:</p>
<ul>
<li>Persistent TCP connections (keep-alive), saving machine and network resources. In the previous version, a new TCP connection was opened for each request and closed after the response.</li>
<li><code>Host</code> header, allowing more than one server under the same IP.</li>
<li>Header conventions for encoding, cache, language and MIME type.</li>
</ul>
<p>Example of a HTTP/1.1 request:</p>
<pre tabindex="0"><code><span><span>GET /api/fruit/orange HTTP/1.1</span></span>
<span><span>Host: www.fruityvice.com</span></span>
<span><span>Accept-Encoding: gzip, deflate, br</span></span>
<span><span></span></span></code></pre>
<p>Response example:</p>
<pre tabindex="0"><code><span><span>HTTP/1.1 200 OK</span></span>
<span><span>Server: nginx/1.16.1</span></span>
<span><span>Date: Sun, 10 Mar 2024 20:44:25 GMT</span></span>
<span><span>Transfer-Encoding: chunked</span></span>
<span><span>Connection: keep-alive</span></span>
<span><span>X-Content-Type-Options: nosniff</span></span>
<span><span>X-XSS-Protection: 1; mode=block</span></span>
<span><span>Cache-Control: no-store, must-revalidate, no-cache, max-age=0</span></span>
<span><span>Pragma: no-cache</span></span>
<span><span>X-Frame-Options: DENY</span></span>
<span><span>Content-Type: application/json</span></span>
<span><span>Expires: 0</span></span>
<span><span></span></span>
<span><span>{"name":"Orange","id":2,"family":"Rutaceae","order":"Sapindales","genus":"Citrus","nutritions":{"calories":43,"fat":0.2,"sugar":8.2,"carbohydrates":8.3,"protein":1.0}}</span></span>
<span><span></span></span></code></pre>
<p><img src="https://alexandrehtrb.github.io/assets/img/posts/2024_03_http1_tcp_packets.png" alt="HTTP1 in TCP packets"></p>
<p>In 2015, after many years of observation and studies on the performance of the Internet, the HTTP/2 was proposed and created, based on Google's SPDY.</p>
<p>Among its differences, were the multiplexing of many messages in a single TCP packet; binary format of the messages; and HPACK compression for headers.</p>
<p>In HTTP/1.1, two requests cannot ride together the same TCP connection - it is necessary that the first one ends for the subsequent to begin. This is called <em>head-of-line blocking</em>. In the diagram below, request 2 cannot be sent until response 1 arrives, considering that only one TCP connection is used.</p>
<pre><code><p>sequenceDiagram
    Client-&gt;&gt;+Server: req 1
    Server--&gt;&gt;-Client: res 1
    Client-&gt;&gt;+Server: req 2
    Server--&gt;&gt;-Client: res 2
</p></code></pre>
<p>With HTTP/2, this problem is solved with <em>streams</em>, each stream corresponds to a message. Many streams can be interleaved in a single TCP packet. If a stream can't emit its data for some reason, other streams can take its place in the TCP packet.</p>
<p>HTTP/2 streams are divided in <em>frames</em>, each one containing: the frame type, the stream that it belongs to, and the length in bytes. In the diagram below, a coloured rectangle is a TCP packet and a ✉ is a HTTP/2 frame inside it. The first and third TCP packets carry frames of different streams.</p>
<pre><code><p>sequenceDiagram
    rect rgb(239, 190, 125)
        Client-&gt;&gt;+Server: req1: #9993;1/1&lt;br&gt;+&lt;br&gt;req2: #9993;1/1
    end
    rect rgb(197, 234, 189)
        Server--&gt;&gt;Client: res1: #9993;1/2
    end
    rect rgb(197, 234, 189)
        Server--&gt;&gt;-Client: res1: #9993;2/2&lt;br&gt;+&lt;br&gt;res2: #9993;1/1
    end
</p></code></pre>
<p>The image below shows how frames go inside a TCP packet. Stream 1 carries a HTTP response for a JavaScript file and stream 2 carries a HTTP response for a CSS file.</p>
<p><img src="https://alexandrehtrb.github.io/assets/img/posts/2024_03_http2_tcp_packets.png" alt="HTTP2 frames in TCP packets"></p><h2 id="http%2F3" tabindex="-1"><a href="#http%2F3"><span>HTTP/3</span></a></h2>
<p>HTTP/3 was born from a new transport protocol, QUIC, created by Google in 2012. QUIC is encapsulated inside UDP, and compared to TCP, it proposes:</p>
<ul>
<li>fewer packet roundtrips to establish connection and TLS authentication;</li>
<li>more resilient connections regarding packet losses;</li>
<li>to solve the head-of-line blocking that exists in TCP and TLS.</li>
</ul>
<p>HTTP/2 solves the HTTP head-of-line blocking, but, this problem also happens with TCP and TLS. TCP understands that the data it needs to send is a contiguous sequence of packets, and if any packet is lost, it must be resent, in order to preserve information integrity. <em>With TCP, subsequent packets cannot be sent until the lost packet is successfully resent to the destination.</em></p>
<p>The diagram below explains visually how this happens in HTTP/2. The second packet only had frames of response 1, but its loss delays both response 1 and response 2 - that means that in this case, there is no parallelism.</p>
<pre><code><p>sequenceDiagram
    rect rgb(239, 190, 125)
        Client-&gt;&gt;+Server: req1: #9993;1/1&lt;br&gt;+&lt;br&gt;req2: #9993;1/1
    end
    rect rgb(197, 234, 189)
        Server--xClient: res1: #9993;1/2
    end
    Note over Client,Server: lost TCP packet&lt;br&gt;must be resent.&lt;br&gt;delays both res1 and res2
    rect rgb(197, 234, 189)
        Server--&gt;&gt;Client: res1: #9993;1/2
    end
    rect rgb(197, 234, 189)
        Server--&gt;&gt;-Client: res1: #9993;2/2&lt;br&gt;+&lt;br&gt;res2: #9993;1/1
    end
</p></code></pre>
<p>To solve TCP's head-of-line blocking, QUIC decided to use UDP for its transport protocol, because UDP does not care for guarantees of arrival. The responsibility of data integrity, that in TCP is part of the transport layer, is moved in QUIC to the application layer, and the frames of a message can arrive out of order, without blocking unrelated streams.</p>
<p><img src="https://alexandrehtrb.github.io/assets/img/posts/2024_03_http3_quic_packets.png" alt="HTTP3 QUIC packets"></p><pre><code><p>sequenceDiagram
    rect rgb(223, 204, 251)
        Client-&gt;&gt;Server: req1: #9993;1/1&lt;br&gt;+&lt;br&gt;req2: #9993;1/1&lt;br&gt;+&lt;br&gt;req3: #9993;1/1
    end
    rect rgb(179, 205, 230)
        Server--xClient: res1: #9993;1/2&lt;br&gt;+&lt;br&gt;res2: #9993;1/2
    end
    Note over Client,Server: lost QUIC packet&lt;br&gt;doesn't block sending&lt;br&gt;other packets
    rect rgb(179, 205, 230)
        Server--&gt;&gt;Client: res1: #9993;2/2&lt;br&gt;+&lt;br&gt;res2: #9993;2/2&lt;br&gt;+&lt;br&gt;res3: #9993;1/1
    end
    Note over Client,Server: resending lost packet.&lt;br&gt;res3 wasn't delayed
    rect rgb(179, 205, 230)
        Server--&gt;&gt;Client: res1: #9993;1/2&lt;br&gt;+&lt;br&gt;res2: #9993;1/2
    end
</p></code></pre>
<p>The head-of-line blocking related to TLS (SSL) happens on TCP because the cryptography is usually applied over the entire message content, meaning that all data (all packets) needs to be received for the decryption to happen. With QUIC, the cryptography is individual for each QUIC packet, that is decrypted on arrival, without having to receive all packets beforehand.</p>
<p>TLS with TCP:</p>
<ol>
<li>Input data: <code>A+B+C</code></li>
<li>Encrypted data: <code>crypt(A+B+C) = D+E+F</code></li>
<li>Packets: <code>D, E, F</code></li>
<li>Received: <code>decrypt(D+E+F)</code></li>
<li><code>A+B+C</code></li>
</ol>
<p>TLS with QUIC:</p>
<ol>
<li>Input data: <code>A+B+C</code></li>
<li>Encrypted data: <code>crypt(A) = X, crypt(B) = Y, crypt(C) = Z</code></li>
<li>Packets: <code>X, Y, Z</code></li>
<li>Received: <code>decrypt(X) + decrypt(Y) + decrypt(Z)</code></li>
<li><code>A+B+C</code></li>
</ol>
<h2 id="comparison-table" tabindex="-1"><a href="#comparison-table"><span>Comparison table</span></a></h2>
<table>
<thead>
<tr>
<th></th>
<th>HTTP/1.1</th>
<th>HTTP/2</th>
<th>HTTP/3</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Transport</strong><br><strong>protocol</strong></td>
<td>TCP,<br>persistent connection</td>
<td>TCP,<br>persistent connection</td>
<td>UDP,<br>persistent connection</td>
</tr>
<tr>
<td><strong>Head-of-line</strong><br><strong>blocking</strong></td>
<td>HTTP/1.x HOL<br>TCP HOL<br>TLS HOL</td>
<td>TCP HOL<br>TLS HOL</td>
<td>-</td>
</tr>
<tr>
<td><strong>Message format</strong></td>
<td>ASCII text</td>
<td>binary</td>
<td>binary</td>
</tr>
<tr>
<td><strong>Header compression</strong></td>
<td>-</td>
<td>HPACK</td>
<td>QPACK</td>
</tr>
<tr>
<td><strong>Number of roundtrips</strong><br><strong>before start</strong><br><strong>(handshakes)</strong></td>
<td><strong>3</strong><br>1 from TCP<br>+2 from TLS 1.2*</td>
<td><strong>2</strong><br>1 from TCP<br>+1 from TLS 1.3*</td>
<td><strong>0</strong><br>0 from UDP<br>+0 from TLS 1.3 with 0-RTT*</td>
</tr>
<tr>
<td><strong>Connection identification</strong></td>
<td>source IP and port</td>
<td>source IP and port</td>
<td>connection ID**,<br>resistant to IP changes</td>
</tr>
<tr>
<td><strong>Cryptography</strong></td>
<td>optional;<br>applied over the entire message</td>
<td>optional;<br>applied over the entire message</td>
<td>embedded TLS 1.3;<br>applied over each QUIC packet</td>
</tr>
</tbody>
</table>
<p>* TLS 1.2 requires 2 roundtrips for cryptographic handshake and TLS 1.3 requires only 1, with the option for 0-RTT (<em>zero roundtrip time resumption</em>), where there is no need of previous handshake. <strong>However, 0-RTT enables <a href="https://blog.cloudflare.com/introducing-0-rtt">replay attacks</a> and therefore is unsafe.</strong></p>
<p>** QUIC's connection ID can be used for fingerprinting, posing a risk to user privacy, according to a <a href="https://alexandrehtrb.github.io/assets/misc/2024_03_research_A_QUIC_Look_at_Web_Tracking.pdf">research</a>.</p>
<h2 id="which-is-the-best-version%3F" tabindex="-1"><a href="#which-is-the-best-version%3F"><span>Which is the best version?</span></a></h2>
<p>The two best versions currently are HTTP/2 and HTTP/3.</p>
<p>HTTP/3 was designed for unstable connections, such as cellphone and satellite networks. To counter network instabilities, QUIC has a great degree of independence between the data streams and good resilience if packets are lost. Nevertheless, HTTP/3 has performance penalties, mainly for 1) the UDP protocol wasn't optimized by routers and operating systems over the last decades due to its low usage, making it comparatively slower than TCP; and 2) the packet-by-packet cryptography used by QUIC requires a greater number of mathematical operations, becoming less efficient than the entire message cryptography used in TCP. Also, there is the issue that the UDP protocol is restricted in some networks to protect against attacks like <a href="https://www.cloudflare.com/learning/ddos/udp-flood-ddos-attack/">UDP flood attack</a> and <a href="https://blog.cloudflare.com/deep-inside-a-dns-amplification-ddos-attack">DNS amplification attack</a>.</p>
<p>On reliable and stable connections, HTTP/2 many times offers better performance than HTTP/3.</p>
<p>Generally speaking, it's recommended to run compatibility and performance tests to determine which version is the most appropriate, and furthermore, a server can accept both HTTP/2 and HTTP/3 connections, leaving to the client the decision of which version to use.</p>
<h2 id="bibliography" tabindex="-1"><a href="#bibliography"><span>Bibliography</span></a></h2>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP">MDN - Evolution of HTTP</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x">MDN - Connection management in HTTP/1.x</a></li>
<li><a href="https://davidwills.us/cmit265/osi.html">David Wills - OSI reference model</a></li>
<li><a href="https://calendar.perfplanet.com/2020/head-of-line-blocking-in-quic-and-http-3-the-details/">Web Performance Calendar - Head-of-Line Blocking in QUIC and HTTP/3: The Details</a> (<a href="https://web.archive.org/web/20240311184108/https://calendar.perfplanet.com/2020/head-of-line-blocking-in-quic-and-http-3-the-details/">WebArchive</a>) <strong>(recommended reading)</strong></li>
<li><a href="https://en.wikipedia.org/wiki/QUIC">Wikipedia - QUIC</a></li>
<li><a href="https://blog.cloudflare.com/introducing-0-rtt">Cloudflare - Introducing Zero Round Trip Time Resumption (0-RTT)</a></li>
<li><a href="https://http3-explained.haxx.se/en/quic/quic-connections">HTTP/3 explained - QUIC connections</a></li>
<li><a href="https://svs.informatik.uni-hamburg.de/publications/2019/2019-02-26-Sy-PET_Symposium-A_QUIC_Look_at_Web_Tracking.pdf">Erik Sy*, Christian Burkert, Hannes Federrath, and Mathias Fischer - A QUIC Look at Web Tracking</a></li>
</ul>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Spreadsheets are all you need.ai (772 pts)]]></title>
            <link>https://spreadsheets-are-all-you-need.ai/index.html</link>
            <guid>39700256</guid>
            <pubDate>Thu, 14 Mar 2024 03:15:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spreadsheets-are-all-you-need.ai/index.html">https://spreadsheets-are-all-you-need.ai/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=39700256">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div>








<p>Learn how AI works from a real LLM implemented entirely in Excel</p>








</div>



<div>
<h2>Watch the demo</h2>



<p>Watch the 10 min demo from the Seattle AI Tinkerers meetup</p>



<figure><p>
<iframe title="GPT2 implemented in Excel (Spreadsheets-are-all-you-need) at AI Tinkerers Seattle" width="500" height="281" src="https://www.youtube.com/embed/AIACopCeGlQ?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>
</div>



<div>




<div>
<div>
<h3>Sophisticated yet simple</h3>



<p>Spreadsheets-are-all-you-need is a low-code introduction to the details behind today’s Large Language Models (LLMs) that’s ideal for:</p>



<ul>
<li>Technical executives, marketers, and product managers</li>



<li>Developers and scientists transitioning into machine learning</li>



<li>AI policy makers and ethicists</li>
</ul>



<p>If you can understand a spreadsheet, then you can understand AI!</p>
</div>



<div>
<figure><img width="720" height="405" src="https://spreadsheets-are-all-you-need.ai/wp-content/uploads/2024/02/GPT2-at-a-glance.png" alt="" srcset="https://spreadsheets-are-all-you-need.ai/wp-content/uploads/2024/02/GPT2-at-a-glance.png 720w, https://spreadsheets-are-all-you-need.ai/wp-content/uploads/2024/02/GPT2-at-a-glance-300x169.png 300w" sizes="(max-width: 720px) 100vw, 720px"></figure>
</div>
</div>







<div>
<div>
<figure><img width="720" height="405" src="https://spreadsheets-are-all-you-need.ai/wp-content/uploads/2024/02/GPT2-at-a-glance-overview.png" alt="" srcset="https://spreadsheets-are-all-you-need.ai/wp-content/uploads/2024/02/GPT2-at-a-glance-overview.png 720w, https://spreadsheets-are-all-you-need.ai/wp-content/uploads/2024/02/GPT2-at-a-glance-overview-300x169.png 300w" sizes="(max-width: 720px) 100vw, 720px"></figure>
</div>



<div>
<h3>Learn from a real LLM</h3>



<p>Spreadsheets-are-all-you-need implements the forward pass of&nbsp;<a href="https://en.wikipedia.org/wiki/GPT-2">GPT2</a>&nbsp;(an ancestor of ChatGPT that was state of the art only a few years ago) entirely in Excel using standard spreadsheet functions.</p>



<p>This same Transformer architecture is the foundation for OpenAI’s ChatGPT, Anthropic’s Claude, Google’s Bard/Gemini, Meta’s Llama, and many other LLMs.</p>
</div>
</div>
</div>







<div>




<h2 id="subscribe">More lessons to come! Get notified!</h2>



<p>Future videos will walk through more details on the internals of modern AI. Subscribe below to get notified about new tutorials and updates.</p>










</div>



<div>
<div>
<h2 id="watch-the-lessons">Watch the lessons </h2>







<p>Enjoyed a video? Share it with a friend!</p>
</div>











<div>
<div>
<h3>Lesson 1: Demystifying GPT with Excel</h3>



<p>In this 10-minute video we kick things off by walking through the high-level architecture of GPT-2 and witnessing each phase of the Transformer come to life in an Excel spreadsheet.</p>
</div>



<div>
<figure><p>
<iframe title="Demystifying how GPT works: From Architecture to...Excel!?! 🚀" width="500" height="375" src="https://www.youtube.com/embed/FyeN5tXMnJ8?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>
</div>
</div>







<div>
<div>
<h3>Lesson 2: Byte Pair Encoding &amp; Tokenization</h3>



<p>In this lesson we dive into the first phase of GPT, the tokenization phase and the Byte Pair Encoding (BPE) algorithm used in models like ChatGPT. We cover</p>



<ul>
<li>Detailed walkthrough of the BPE algorithm, including its learning phase and application in language data tokenization. </li>



<li>Spreadsheet Simulation: A hands-on demonstration of the GPT-2’s tokenization process via a spreadsheet model. </li>



<li>Limitations and Alternatives: Discussion on the challenges of BPE and a look at other tokenization methods.</li>
</ul>
</div>



<div>
<figure><p>
<iframe title="Byte Pair Encoding in AI Explained with a Spreadsheet" width="500" height="281" src="https://www.youtube.com/embed/PvZN3-WqAOI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>
</div>
</div>







<div>
<div>
<h3>Extra: An end-to-end walk through of the Excel sheet</h3>



<p>This is a high level walk through of the Excel implementation. It is primarily geared to those who already understand Transformers and want to know how the standard architecture is mapped to the spreadsheet.</p>
</div>



<div>
<figure><p>
<iframe title="GPT2 in a Spreadsheet: A demo of Spreadsheets-are-all-you-need" width="500" height="375" src="https://www.youtube.com/embed/yjD2n_e9E3w?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>
</div>
</div>




</div>



<div>
<h2 id="try-it-yourself">Try it yourself</h2>



<h3>Downloading</h3>



<p>The sheet is available as an xlsb (Excel binary) file in the&nbsp;<a href="https://github.com/ianand/spreadsheets-are-all-you-need/releases/tag/v0.5.0">Releases section</a>&nbsp;of the github repo. You should be able to download and run this file in Excel for Mac or PC.</p>



<h3>Using</h3>



<p>If you’re quickly trying to orient yourself to the spreadsheet this <a href="https://www.youtube.com/watch?v=yjD2n_e9E3w">walk through video</a> may be helpful though it is not oriented to beginners. For beginners, it’s recommended to start with the lesson videos.</p>



<p>Please realize the implementation is just enough to run very small workloads:</p>



<ul>
<li>Full GPT2 small (124M parameters) model including byte pair encoding, embeddings, multi-headed attention, and multi-layer perceptron stages</li>



<li>Inference/forward pass only (no training)</li>



<li>Context is limited to 10 tokens in length</li>



<li>10 characters per word limit</li>



<li>Zero temperature output only</li>
</ul>



<p><strong>This sheet is very big.</strong>&nbsp;Unfortunately, it is not unusual for Excel to lock up (but only on a Mac) while using this spreadsheet. It is highly recommended to use the manual calculation mode in Excel and the Windows version of Excel (either on a Windows directory or via Parallels on a Mac).</p>



<h3>Issues</h3>



<p>Bugs are not out of the question. Please file issues on&nbsp;<a href="https://github.com/ianand/spreadsheets-are-all-you-need">Github</a></p>



<h3>Contact</h3>



<p><a href="https://twitter.com/ianand">@ianand</a>&nbsp;on Twitter</p>



<p><a href="https://github.com/ianand/spreadsheets-are-all-you-need">ianand/spreadsheets-are-all-you-need</a>&nbsp;on Github</p>
</div>



<div>
<h2 id="faq">FAQ</h2>



<h3>What about Google Sheets?</h3>



<p>This project actually started on Google Sheets but the full 124M model was too big and switched to Excel. I’m still exploring ways to make this work in Google Sheets but it is unlikely to fit into a single file as it can with Excel.</p>



<h3>Why can’t I chat with it like ChatGPT? It doesn’t match the output of ChatGPT?</h3>



<p>Aside from the minuscule context length, it also lacks the instruction tuning and reinforcement learning from human feedback (RLHF) that turn a large language model into a chatbot.</p>



<h3>Why is it called Spreadsheets-are-all-you-need</h3>



<p>The name is a play on the title of the famous&nbsp;<a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a>&nbsp;paper which first described the&nbsp;<a href="https://en.wikipedia.org/wiki/Transformer_(machine_learning_model)">Transformer machine learning architecture</a>&nbsp;that underlies ChatGPT, Claude, Bard, and many of the latest Generative AI tools.</p>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Write for others but mostly for yourself (2022) (147 pts)]]></title>
            <link>https://jack-vanlightly.com/blog/2022/1/25/write-for-others-but-mostly-for-yourself</link>
            <guid>39700072</guid>
            <pubDate>Thu, 14 Mar 2024 02:38:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jack-vanlightly.com/blog/2022/1/25/write-for-others-but-mostly-for-yourself">https://jack-vanlightly.com/blog/2022/1/25/write-for-others-but-mostly-for-yourself</a>, See on <a href="https://news.ycombinator.com/item?id=39700072">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="siteWrapper">

      

      

      
        
          
            
              
                
              
            
          
        
      


      
      
      

      <main id="page" role="main">
        
        <!--
        --><!--
        --><div id="content" data-content-field="main-content" data-collection-id="56894f3ea12f44306f8afde0" data-edit-main-image="">

  
  <article id="article-61f03094c94eeb742cd19979" data-item-id="61f03094c94eeb742cd19979">

    

    <div data-block-type="2" id="item-61f03094c94eeb742cd19979" data-layout-label="Post Body" data-type="item" data-updated-on="1643131213230">
  <p>I started my blog originally to help me get to the next level in my career and help establish myself as an authority in the areas of tech that I was focusing on. I liked writing and thought I had something to say.</p><p>Looking back at my 6 years of blogging now it’s hard to recognise myself from the engineer I was back then before writing was a regular habit for me. It’s funny because in the end my blog <span>was</span> the key to unlock the next door in my career but not necessarily for the reasons I expected. I figured if I could write some interesting posts I could turn up to an interview and use it as a kind of portfolio, but it became so much more than that.</p><p>The thing that surprised me after a while of doing technical writing was that writing wasn’t just about me explaining something to an audience, it was a tool to give rigor to my thinking.&nbsp;I cared about my reputation and about my potential readers and so embarking on writing a blog post about a technical subject ended up involving a huge amount of work. I knew that if I wasn’t careful or was indeed careless about what I wrote I’d not only be wasting people’s time but I could be publicly ridiculed on the internet. So I only wrote about things that I had a fundamental understanding of or set about getting that deep understanding that I lacked first.</p><p>The great thing about writing is that it uncovers all these areas that you thought you understood but don’t. This is especially true when you know that competent and knowledgeable people are going to read it. You start explaining something in detail, about how it works, what the trade-offs are, the alternatives and so on and very soon your internal BS detector is going off. It’s yelling “How do you know that!?” and “What evidence do you have for this statement!?”. You realize that your knowledge is based on shaky foundations and your words are worthless. So you set out to learn the missing pieces, search for the insights and fundamental truths so that you can explain all this stuff with authenticity.</p><p>When you write regularly and face-off against this internal BS detector you either level up or go home. Writing forced me to learn things to a higher standard like nothing else. </p><p>After a while of writing my blog I realized that it had taught me how to think. It taught me how to discover insights that few others had seen. It brought me to the next level I needed. Then further down the road because I wrote quality posts I slowly got visibility within my niche area of tech and that translated into more work opportunities.</p><p>Now I don’t just write publicly on blogs but privately for my team when the subject is something I can’t share publicly or isn’t the kind of thing that I think is going to be valuable to others. I might write a kind of blog post about an imaginary feature I am envisaging, a new technique that can help us or how something works. Because I do share it with people I get that automatic BS detection in my head that tells me when my thinking is sloppy or on shaky ground. It also forces me to flesh out the idea, consider all its trade-offs. Sometimes it ends up being generally applicable enough that I can actually publish it. This is how my recent <a href="https://medium.com/splunk-maas/apache-bookkeeper-internals-part-1-high-level-6dce62269125">Apache BookKeeper internals blog series</a>  and my <a href="https://medium.com/splunk-maas/apache-bookkeeper-observability-part-1-introducing-the-metrics-7f0acb32d0dc">USE metrics series</a> started. I wanted to understand BookKeeper better and share that with my colleagues but in the end it was so valuable that I published it.</p><p>My recommendation is that you don’t look at blog writing as just something people do to work on their “personal brand”. It can definitely help with that, but first and foremost it is a tool that people can use to up their game and take their knowledge and critical thinking to the next level.</p><p>It is like training for your thinking, it makes you more powerful which translates to better understanding and greater insight. Blogging is less popular now than it was but don’t let that stop you, in the end the person that benefits most, even if few people read it, is you.<br></p><p>Photo credit: ESO</p>
</div>

    

    

  </article>

  

  

  
  
  

</div><!--
        -->
        
        
      </main>

      

      

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Care (251 pts)]]></title>
            <link>https://johan.hal.se/wrote/2024/02/28/care/</link>
            <guid>39699333</guid>
            <pubDate>Thu, 14 Mar 2024 00:41:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://johan.hal.se/wrote/2024/02/28/care/">https://johan.hal.se/wrote/2024/02/28/care/</a>, See on <a href="https://news.ycombinator.com/item?id=39699333">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
              <p>My tech posts often come from kind of a negative place. I wish it wasn’t like that, but we all know how the mind works: writing with nuance and positivity is a lot harder than fired-up screeds of the “someone is wrong on the Internet” variety. I do try to check myself. I know that people come from all kinds of situations and codebases, everyone is doing their best given the conditions they’re in, and there really is no One True Way to write code. I will at least always try to give a good sense of how I’d prefer things be done instead, rather than just pointing at something and saying it’s bad.</p>

<p>But I think there’s another reason why I come across as negative or angry. And as always with these things it’s hard to tell if I’m just jaded and ossified from having spent my entire adult life touching keyboards, or if it has real merit: I feel like the web used to <em>work better</em>. Not in the sense of features or flagship sites—web-based email clients and word processors and image editors are all waaay better than they used to be and I would say the high-quality stuff is of higher quality than ever. I’m not pining for the HTML-only version of GMail, I promise. But if I were to estimate some rough median of “how well do websites work” I would also say that there’s an <em>incredible</em> amount of jank out there. My father called me in exasperation last night after trying and failing to book a plane ticket. I find myself having to go over to their house and do things like switch browsers, open private windows, occasionally even open up the Web Inspector to fiddle with the markup, and I hate every second of it. I’ve trained myself out of using the Back button and opening things in new windows, and I will often close and restart order flows rather than try to go back and edit something I messed up. And I just… WHY. Why is it so hard?</p>

<p>Your web browser is an amazing piece of software. Give it an HTML page and it’ll render and lay it out in milliseconds, and if you let it do what it wants to do (follow a link when it’s clicked, submit a form with a button, populate input fields, etc) it’ll just <em>work like everyone expects it to</em>. I think that’s where most of my pathos comes from: I have a lived experience from the Before Times when things were just pages and forms, and it turns out pages and forms get you very, very far.</p>

<p>I’m a web developer, so I know that the number one cause of jank and breakage is another developer having messed with the browser’s default way of doing things. I can usually figure out what has been tampered with and work around it. But normal people can’t. They expect the Back button to work, and they expect that the stuff they filled out on the previous page will be there when they click it. And it would! <em>If you would just let the browser do what it wants to do!</em></p>

<p>I could absolutely write cheerier, more charitable and uplifting tech posts. Everything doesn’t have to be an aggressive “do better” response to something or someone. But I assure you those posts come from a place of genuine concern: much of the modern web makes me sad and I feel like I’m screaming into the wind. Every broken contact form or booking site is a <em>truly spectacular</em> own-goal. If your calendar was a bunch of progressively enhanced checkboxes and a submit button, you could be riding off into the sunset and counting money instead of taking support calls from frustrated octogenarians. And it’s hard for me to shut up about that.</p>

<p>I care. I really do. That’s why I’m mad sometimes.</p>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Experienced engineers are struggling to get hired (117 pts)]]></title>
            <link>https://twitter.com/Carnage4Life/status/1767527635297722786</link>
            <guid>39699100</guid>
            <pubDate>Thu, 14 Mar 2024 00:06:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/Carnage4Life/status/1767527635297722786">https://twitter.com/Carnage4Life/status/1767527635297722786</a>, See on <a href="https://news.ycombinator.com/item?id=39699100">Hacker News</a></p>
Couldn't get https://twitter.com/Carnage4Life/status/1767527635297722786: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Nanos – A Unikernel (212 pts)]]></title>
            <link>https://nanos.org</link>
            <guid>39698950</guid>
            <pubDate>Wed, 13 Mar 2024 23:43:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nanos.org">https://nanos.org</a>, See on <a href="https://news.ycombinator.com/item?id=39698950">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <h2>Run code faster</h2>
        <p>Nanos is fast. How fast you ask?</p>
        <p>Our latest benchmarks show that Nanos serves static
            content almost twice as fast as Linux. ... and we are just getting started.</p><br>
        <a href="https://nanos.org/getting_started"><p>Start hacking →</p></a>
        <p>Tested with Go (net/http) on Google Compute Engine (1 vCPU). Learn
            More</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[LaVague: Open-source Large Action Model to automate Selenium browsing (327 pts)]]></title>
            <link>https://github.com/lavague-ai/LaVague</link>
            <guid>39698546</guid>
            <pubDate>Wed, 13 Mar 2024 22:51:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/lavague-ai/LaVague">https://github.com/lavague-ai/LaVague</a>, See on <a href="https://news.ycombinator.com/item?id=39698546">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
  <a href="https://github.com/lavague-ai/LaVague/stargazers"><img src="https://camo.githubusercontent.com/d1301d8dac21f0cceed371815f35c77a67d21163ec7b6668ea2efa05bc4b4021/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6c6176616775652d61692f4c6156616775652e7376673f7374796c653d666f722d7468652d6261646765" alt="Stargazers" data-canonical-src="https://img.shields.io/github/stars/lavague-ai/LaVague.svg?style=for-the-badge"></a>
  <a href="https://github.com/lavague-ai/LaVague/issues"><img src="https://camo.githubusercontent.com/6ba0e52c543ecff9ba1a6841209033b0daf35ece3ab50848467106990796c22f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6c6176616775652d61692f4c6156616775652e7376673f7374796c653d666f722d7468652d6261646765" alt="Issues" data-canonical-src="https://img.shields.io/github/issues/lavague-ai/LaVague.svg?style=for-the-badge"></a>
  <a href="https://github.com/lavague-ai/LaVague/network/members"><img src="https://camo.githubusercontent.com/d1f07147e4d221a1f8adfc491e51f1da3a80775008852acf2526fa175d1fc93d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6c6176616775652d61692f4c6156616775652e7376673f7374796c653d666f722d7468652d6261646765" alt="Forks" data-canonical-src="https://img.shields.io/github/forks/lavague-ai/LaVague.svg?style=for-the-badge"></a>
  <a href="https://github.com/lavague-ai/LaVague/graphs/contributors"><img src="https://camo.githubusercontent.com/eb229d64e84560fd19193bb6b9e6c110568ac815f6fbc591b3b2c04047e4be6f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f6c6176616775652d61692f4c6156616775652e7376673f7374796c653d666f722d7468652d6261646765" alt="Contributors" data-canonical-src="https://img.shields.io/github/contributors/lavague-ai/LaVague.svg?style=for-the-badge"></a>
  <a href="https://github.com/lavague-ai/LaVague/blob/master/LICENSE.md"><img src="https://camo.githubusercontent.com/52cc5afd2b7647e911e98bb2b7be635eefd3d6fa6c93ea3b37955bf7ed9bd2d5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6c6176616775652d61692f4c6156616775652e7376673f7374796c653d666f722d7468652d6261646765" alt="Apache License" data-canonical-src="https://img.shields.io/github/license/lavague-ai/LaVague.svg?style=for-the-badge"></a>
</p>
<br>
<div dir="auto">
  <p><a target="_blank" rel="noopener noreferrer" href="https://github.com/lavague-ai/LaVague/blob/main/static/logo.png"><img src="https://github.com/lavague-ai/LaVague/raw/main/static/logo.png" width="140px:" alt="LaVague Logo"></a></p><p dir="auto"><h2 tabindex="-1" dir="auto">Welcome to LaVague</h2><a id="user-content-welcome-to-lavague" aria-label="Permalink: Welcome to LaVague" href="#welcome-to-lavague"></a></p>
<div dir="auto"><h4 tabindex="-1" dir="auto">
 <a href="https://discord.gg/SDxn9KpqX9" rel="nofollow">
    <img src="https://camo.githubusercontent.com/3fc9beee11f93bc060c0fa3d3d8ffef32c7768e467616a3c4ba621772c52b5fe/68747470733a2f2f646362616467652e76657263656c2e6170702f6170692f7365727665722f5344786e394b707158393f636f6d706163743d74727565267374796c653d666c6174" alt="Join our Discord server!" data-canonical-src="https://dcbadge.vercel.app/api/server/SDxn9KpqX9?compact=true&amp;style=flat">
  </a>
</h4><a id="user-content--------" aria-label="Permalink: " href="#-------"></a></div>
  <p dir="auto">Redefining internet surfing by transforming natural language instructions into seamless browser interactions.</p>

</div>
<p dir="auto"><h2 tabindex="-1" dir="auto">🏄‍♀️ See LaVague in Action</h2><a id="user-content-️-see-lavague-in-action" aria-label="Permalink: 🏄‍♀️ See LaVague in Action" href="#️-see-lavague-in-action"></a></p>
<p dir="auto">Here are examples to show how LaVague can execute natural instructions on a browser to automate interactions with a website:</p>
<div dir="auto">
  
    <p><a target="_blank" rel="noopener noreferrer" href="https://github.com/lavague-ai/LaVague/blob/main/static/hf_lavague.gif"><img src="https://github.com/lavague-ai/LaVague/raw/main/static/hf_lavague.gif" alt="LaVague Interaction Example" data-animated-image=""></a>
    <b>LaVague interacting with Hugging Face's website.</b></p></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/lavague-ai/LaVague/blob/main/static/irs_lavague.gif"><img src="https://github.com/lavague-ai/LaVague/raw/main/static/irs_lavague.gif" alt="LaVague Workflow Example" data-animated-image=""></a>
    <b>LaVague interacting with the IRS's website.</b>
  
  <br>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🎯 Motivations</h2><a id="user-content--motivations" aria-label="Permalink: 🎯 Motivations" href="#-motivations"></a></p>
<p dir="auto">LaVague is designed to automate menial tasks on behalf of its users. Many of these tasks are repetitive, time-consuming, and require little to no cognitive effort. By automating these tasks, LaVague aims to free up time for more meaningful endeavors, allowing users to focus on what truly matters to them.</p>
<p dir="auto">By providing an engine turning natural language queries into Selenium code, LaVague is designed to make it easy for users or other AIs to automate easily express web workflows and execute them on a browser.</p>
<p dir="auto">One of the key usages we see is to automate tasks that are personal to users and require them to be logged in, for instance automating the process of paying bills, filling out forms or pulling data from specific websites.</p>
<p dir="auto">LaVague is built on open-source projects and leverages open-sources models, either locally or remote, to ensure the transparency of the agent and ensures that it is aligned with users' interests.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">✨ Features</h2><a id="user-content--features" aria-label="Permalink: ✨ Features" href="#-features"></a></p>
<ul dir="auto">
<li><strong>Natural Language Processing</strong>: Understands instructions in natural language to perform browser interactions.</li>
<li><strong>Selenium Integration</strong>: Seamlessly integrates with Selenium for automating web browsers.</li>
<li><strong>Open-Source</strong>: Built on open-source projects such as transformers and llama-index, and leverages open-source models, either locally or remote, to ensure the transparency of the agent and ensures that it is aligned with users' interests.</li>
<li><strong>Local models for privacy and control</strong>: Supports local models like <code>Gemma-7b</code> so that users can fully control their AI assistant and have privacy guarantees.</li>
<li><strong>Advanced AI techniques</strong>: Uses a local embedding (<code>bge-small-en-v1.5</code>) first to perform RAG to extract the most relevant HTML pieces to feed the LLM answering the query, as directly dropping the full HTML code would not fit in context. Then leverages Few-shot learning and Chain of Thought to elicit the most relevant Selenium code to perform the action without having to finetune the LLM (<code>Nous-Hermes-2-Mixtral-8x7B-DPO</code>) for code generation.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">🚀 Getting Started</h2><a id="user-content--getting-started" aria-label="Permalink: 🚀 Getting Started" href="#-getting-started"></a></p>
<p dir="auto">You can try LaVague in the following Colab notebook:</p>
<p dir="auto"><a href="https://colab.research.google.com/github/dhuynh95/LaVague/blob/main/LaVague.ipynb" rel="nofollow"><img src="https://camo.githubusercontent.com/f5e0d0538a9c2972b5d413e0ace04cecd8efd828d133133933dfffec282a4e1b/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667" alt="Open In Colab" data-canonical-src="https://colab.research.google.com/assets/colab-badge.svg"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🗺️ Roadmap</h2><a id="user-content-️-roadmap" aria-label="Permalink: 🗺️ Roadmap" href="#️-roadmap"></a></p>
<p dir="auto">This is an early project but could grow to democratize transparent and aligned AI models to undertake actions for the sake of users on the internet.</p>
<p dir="auto">We see the following key areas to explore:</p>
<ul dir="auto">
<li>Fine-tune local models like a <code>gemma-7b-it</code> to be expert in Text2Action</li>
<li>Improve retrieval to make sure only relevant pieces of code are used for code generation</li>
<li>Support other browser engines (playwright) or even other automation frameworks</li>
</ul>
<p dir="auto">Keep up to date with our project backlog <a href="https://github.com/orgs/lavague-ai/projects/1/views/2">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🙋 Contributing</h2><a id="user-content--contributing" aria-label="Permalink: 🙋 Contributing" href="#-contributing"></a></p>
<p dir="auto">We would love your help in making La Vague a reality.</p>
<p dir="auto">Please check out our <a href="https://github.com/lavague-ai/LaVague/blob/main/contributing.md">contributing guide</a> to see how you can get involved!</p>
<p dir="auto">Please also join our <a href="https://discord.gg/SDxn9KpqX9" rel="nofollow">Discord</a> community where we can chat about the project further!</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Giant 'sand battery' holds a week's heat for a whole town (268 pts)]]></title>
            <link>https://newatlas.com/energy/sand-battery-finland/</link>
            <guid>39698398</guid>
            <pubDate>Wed, 13 Mar 2024 22:32:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newatlas.com/energy/sand-battery-finland/">https://newatlas.com/energy/sand-battery-finland/</a>, See on <a href="https://news.ycombinator.com/item?id=39698398">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>A new industrial-scale 'sand battery' has been announced for Finland, which packs 1 MW of power and a capacity of up to 100 MWh of thermal energy for use during those cold polar winters. The new battery will be about 10 times bigger than a <a href="https://newatlas.com/energy/sand-battery-polar-night/" data-cms-ai="0">pilot plant</a> that’s been running since 2022.</p><p>The sand battery, developed by Polar Night Energy, is a clever concept. Basically, it’s a big steel silo of sand (or a similar solid material) that’s warmed up through a heat exchanger buried in the center, using excess electricity from the grid – say, that generated during a spike from renewable sources, when it’s cheap.</p><p>That energy can then be stored for months at a time, with reportedly very little loss, before being extracted as heat on demand. This could theoretically be converted back into electricity, although with some energy loss. But Polar Night says that the most efficient method is to just use the heat itself.</p><p>In a chilly place like Finland, that means feeding it into the local district heating system, which shares heat produced from industry or energy production through the community. Networks of pipes carry this heat as hot water or steam to warm up houses, buildings, even swimming pools. In this case, the new sand battery would be trialed in the district heating system of the Finnish municipality of Pornainen, run by a company called Loviisan Lämpö.</p><div data-align-center="">
                
                    <figure>
    
    
    
    


<p><img alt="Polar Night Energy's previous sand battery has been running since 2022" width="1440" height="960" data-image-size="articleImage" loading="lazy" data-srcset="https://assets.newatlas.com/dims4/default/c49f0fb/2147483647/strip/true/crop/1500x1000+0+0/resize/440x293!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png 440w,https://assets.newatlas.com/dims4/default/7cb8771/2147483647/strip/true/crop/1500x1000+0+0/resize/800x533!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png 800w,https://assets.newatlas.com/dims4/default/52d5253/2147483647/strip/true/crop/1500x1000+0+0/resize/1200x800!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png 1200w,https://assets.newatlas.com/dims4/default/d5f27df/2147483647/strip/true/crop/1500x1000+0+0/resize/1920x1280!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png 1920w" data-src="https://assets.newatlas.com/dims4/default/e583e92/2147483647/strip/true/crop/1500x1000+0+0/resize/1440x960!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png" sizes="(min-width: 1240px) 800px, (min-width: 1024px) 95vw, 100vw" srcset="https://assets.newatlas.com/dims4/default/c49f0fb/2147483647/strip/true/crop/1500x1000+0+0/resize/440x293!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png 440w,https://assets.newatlas.com/dims4/default/7cb8771/2147483647/strip/true/crop/1500x1000+0+0/resize/800x533!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png 800w,https://assets.newatlas.com/dims4/default/52d5253/2147483647/strip/true/crop/1500x1000+0+0/resize/1200x800!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png 1200w,https://assets.newatlas.com/dims4/default/d5f27df/2147483647/strip/true/crop/1500x1000+0+0/resize/1920x1280!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png 1920w" src="https://assets.newatlas.com/dims4/default/e583e92/2147483647/strip/true/crop/1500x1000+0+0/resize/1440x960!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F1e%2F78%2F783035bf4f50b8bac30e875773ac%2Fpne-vatajankoski-heat-storage-ready.png">
</p>



    
    

    
        <div><figcaption itemprop="caption">Polar Night Energy's previous sand battery has been running since 2022</figcaption><p>Polar Night Energy</p></div>
    
</figure>

                
            </div><p>This new sand battery is expected to stand 13 m (42.7 ft) tall and 15 m (49.2 ft) wide, providing an output power of 1 MW and a capacity of 100 MWh. That, the companies claim, equates to a week’s worth of Pornainen’s heat demands in winter, or a month’s worth in summer. By comparison, Polar Night’s previous sand battery stands 4 x 7 m (13 x 23 ft), for a nominal power rating of 100 kW and a capacity of 8 MWh.</p><p>The new battery should also reduce the carbon dioxide emissions of the district heating system by 160 tonnes per year, translating to an almost 70% reduction. The sand itself will also be sustainably sourced – it’ll consist of crushed soapstone, which is a manufacturing byproduct of another local industry. This material can apparently conduct heat even better than regular old sand.</p><p>While sand batteries might not find wide outside of areas that use district heating, they could still be one useful tool in a climate change toolbox that needs to be as diverse as possible. Sand batteries might join other grid-scale storage options like <a href="https://newatlas.com/energy/worlds-biggest-battery-tesla-expansion/" data-cms-ai="0">lithium-ion</a>, <a href="https://newatlas.com/energy/gravitricity-gravity-renewable-energy-storage-system/" data-cms-ai="0">gravity</a>, <a href="https://newatlas.com/mit-molten-salt-battery-membrane/53085/" data-cms-ai="0">molten salt</a>, <a href="https://newatlas.com/energy/form-energy-iron-air-battery-bezos/" data-cms-ai="0">iron-air</a> or <a href="https://newatlas.com/energy/symmetrical-flow-battery-grid-scale-storage/" data-cms-ai="0">flow batteries</a>.</p><p>Polar Night Energy says the new sand battery will complete construction and testing in about 13 months.</p><p>Source: <a href="https://polarnightenergy.fi/news" target="_blank" data-cms-ai="0">Polar Night Energy</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Myers diff algorithm: part 1 (134 pts)]]></title>
            <link>https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/</link>
            <guid>39697520</guid>
            <pubDate>Wed, 13 Mar 2024 21:07:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/">https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/</a>, See on <a href="https://news.ycombinator.com/item?id=39697520">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>If you enjoy this article, I have published a book explaining the
  internals of Git through implementation: <a href="https://shop.jcoglan.com/building-git/">Building Git</a>.</p>

<p>—</p>

<p>As a programmer, you probably use a version control system such as <a href="https://git-scm.com/">Git</a>, and
spend an awful lot of your time looking at diffs. You use them to check over
your uncommitted work in progress, to look at what changed in a single commit,
to compare two branches before performing a merge, and so on. Diffs are the
language through which you understand how things have changed in your software.</p>

<p>But as well as being read by people, diffs are used by your version control
system to automate changes. You can email a diff to someone and they can use the
<code>patch</code> or <code>git apply</code> commands to merge it into their working copy. <code>git merge</code>
has to reconcile and merge two or more change histories to produce a single
tree, often reconciling changes within the same file. <code>git add --patch</code> lets you
select individual changes from a working copy file rather than adding the whole
file to the index, and that involves both you the user reading the diffs, and
git selectively applying them to the indexed version of a file. And some version
control systems use the differences between versions as their primary way to
store the project history, rather than storing a snapshot of all the code for
each commit.</p>

<p>So diffs are central to version control, but you might not have thought much
about how they’re generated. Often when you read a diff, it seems obvious to you
which things should be marked as changes. You have an intuitive mental model of
what it means to insert a new function into a file, or to delete a redundant
one, or to rewrite a section. However, there’s an awful lot more to diffing than
meets the eye, and there are many ways to do it that produce different results.</p>

<p>Think for a moment about how you’d calculate a diff, and how you’d write a
function to do it. You might have noticed that diff programs only show you what
has changed, not what has stayed the same. How would you determine which parts
of a file have not changed? Once you’ve found a difference between them, how
would you find the next line in each version where the text matches up again?
It’s more complicated than it looks!</p>

<p>In this series of articles, I’d like to walk you through the default diff
algorithm used by Git. It was developed by Eugene W. Myers, and the <a href="http://www.xmailserver.org/diff2.pdf">original
paper</a> is available online. While the paper is quite short, it is quite
mathematically dense and is focussed on proving that it works. The explanations
here will be less rigorous, but will hopefully be more intuitive, giving a
detailed walk-through of what the algorithm actually does and how it works.</p>

<p>In this first article, we’ll lay out the basic model of what the algorithm is
trying to achieve and go through an example of how it works out the simplest set
of edits to get from one version to another.</p>

<p>To use the example from the paper, say we want to calculate the difference
between two strings:</p>

<ul>
  <li><i>a</i> = <code>ABCABBA</code></li>
  <li><i>b</i> = <code>CBABAC</code></li>
</ul>

<p>By “difference”, we mean a sequence of edits that will convert string <i>a</i>
into string <i>b</i>. One possible such sequence is to simply delete each
character in <i>a</i>, and then insert each character in <i>b</i>, or to use
common diff notation:</p>

<div><pre><code><span>- A
- B
- C
- A
- B
- B
- A
</span><span>+ C
+ B
+ A
+ B
+ A
+ C
</span></code></pre></div>

<p>However, we wouldn’t consider this a good-quality diff since it doesn’t tell us
very much. Changes to source code typically leave much of a file unmodified and
we really want to see <em>sections</em> of code that were inserted or deleted. A diff
that shows the entire file being removed and replaced with the new version isn’t
much use to us.</p>

<p>A better diff of these two strings would be:</p>

<div><pre><code><span>- A
- B
</span>  C
<span>+ B
</span>  A
  B
<span>- B
</span>  A
<span>+ C
</span></code></pre></div>

<p>This makes the smallest possible number of changes to <i>a</i> in order to
produce <i>b</i>, so it’s a better visualisation of what really changed. It’s
not the only possible solution, for example these are also valid:</p>

<div><pre><code>1.  - A       2.  - A       3.  + C
    - B           + C           - A
      C             B             B
    - A           - C           - C
      B             A             A
    + A             B             B
      B           - B           - B
      A             A             A
    + C           + C           + C
</code></pre></div>

<p>However, they are all <em>minimal</em>: they make the smallest number of edits
possible, which in this case is five. What’s interesting about them is they
differ in which sections they consider to be the same between the strings, and
which order they perform edits in. From looking at diffs, you probably have an
intuitive idea that diffs only show the things that changed, but these examples
show that there are many possible interpretations of the difference between two
files.</p>

<p>So, the purpose of diff algorithms is to provide a strategy for generating
diffs, where the diffs have certain desirable properties. We usually want diffs
to be as small as possible, but there are other considerations. For example,
when you change something, you’re probably used to seeing deletions followed by
insertions, not the other way round. That is, you’d rather see solution 2 than
solution 3 above. And, when you change a whole block of code, you’d like to see
the whole chunk being deleted followed by the new code being inserted, rather
than many deletions and insertions interleaved with each other.</p>

<div><pre><code>Good:   - one         Bad:    - one
        - two                 + four
        - three               - two
        + four                + five
        + five                + six
        + six                 - three
</code></pre></div>

<p>You also probably want to see deleted or inserted code that aligns with your idea
of the code’s structure, for example if you insert a method, you’d like that
method’s <code>end</code> to be considered new, rather than the <code>end</code> of the preceding
method:</p>

<div><pre><code>Good:   class Foo                   Bad:    class Foo
          def initialize(name)                def initialize(name)
            @name = name                        @name = name
          end                             +   end
      +                                   +
      +   def inspect                     +   def inspect
      +     @name                         +     @name
      +   end                                 end
        end                                 end
</code></pre></div>

<p>Myers’ algorithm is just one such strategy, but it’s fast and it produces diffs
that tend to be of good quality most of the time. It does this by being
<em>greedy</em>, that is trying to consume as many lines that are the same before
making a change (therefore avoiding the “wrong <code>end</code>” problem), and also by
preferring deletions over insertions when given a choice, so that deletions
appear first.</p>

<p>The Myers paper is based on the idea that finding the <em>shortest edit script</em>
(SES) can be modelled as a graph search. Let’s take our two strings, <i>a</i> =
<code>ABCABBA</code> and <i>b</i> = <code>CBABAC</code>, and build a graph of all the ways we can get
from <i>a</i> to <i>b</i>.</p>

<p>The (<i>x</i>, <i>y</i>) co-ordinates in the grid shown below correspond to
steps in the editing process; at (0,0) we have string <i>a</i>, that is, we have
not started editing. Moving rightward (increasing <i>x</i>) corresponds to
deleting a character from <i>a</i>, for example moving to (1,0) means we’ve
deleted the first <code>A</code> from <i>a</i>. Moving downward (increasing <i>y</i>)
corresponds to inserting a character from <i>b</i>, for example if we now move
from (1,0) down to (1,1), we insert the first <code>C</code> from <i>b</i>, and our edited
string is thus <code>CBCABBA</code>. At position (4,3), we have converted <code>ABCA</code> into
<code>CBA</code>, but we still need to convert <code>BBA</code> into <code>BAC</code>.  The bottom-right position
(7,6) corresponds to converting string <i>a</i> fully into string <i>b</i>.</p>

<p>As well as moving rightward and downward, in some positions we can also move
diagonally. This occurs when the two strings have the same character at the
position’s indexes, for example the third character in <i>a</i> and the first
character in <i>b</i> are both <code>C</code>, and so position (2,0) has a diagonal leading
to (3,1). This corresponds to consuming an equal character from both strings,
neither deleting nor inserting anything.</p>

<div><pre><code>       A     B     C     A     B     B     A

    o-----o-----o-----o-----o-----o-----o-----o   0
    |     |     | \   |     |     |     |     |
C   |     |     |  \  |     |     |     |     |
    |     |     |   \ |     |     |     |     |
    o-----o-----o-----o-----o-----o-----o-----o   1
    |     | \   |     |     | \   | \   |     |
B   |     |  \  |     |     |  \  |  \  |     |
    |     |   \ |     |     |   \ |   \ |     |
    o-----o-----o-----o-----o-----o-----o-----o   2
    | \   |     |     | \   |     |     | \   |
A   |  \  |     |     |  \  |     |     |  \  |
    |   \ |     |     |   \ |     |     |   \ |
    o-----o-----o-----o-----o-----o-----o-----o   3
    |     | \   |     |     | \   | \   |     |
B   |     |  \  |     |     |  \  |  \  |     |
    |     |   \ |     |     |   \ |   \ |     |
    o-----o-----o-----o-----o-----o-----o-----o   4
    | \   |     |     | \   |     |     | \   |
A   |  \  |     |     |  \  |     |     |  \  |
    |   \ |     |     |   \ |     |     |   \ |
    o-----o-----o-----o-----o-----o-----o-----o   5
    |     |     | \   |     |     |     |     |
C   |     |     |  \  |     |     |     |     |
    |     |     |   \ |     |     |     |     |
    o-----o-----o-----o-----o-----o-----o-----o   6

    0     1     2     3     4     5     6     7
</code></pre></div>

<p>The idea behind the Myers algorithm is quite simple: we want to get from (0,0)
to (7,6) (the bottom-right) in as few moves as possible. A “move” is a single
step rightward (a deletion from <i>a</i>) or downward (an insertion from
<i>b</i>). The most number of moves we could take to get from <i>a</i> to
<i>b</i> is 13: the combined length of the two strings.</p>

<p>However, walking diagonal paths is free since they don’t correspond to making
<em>changes</em>, thus we want to maximise the number of diagonal steps we take and
minimise the number of rightward/downward moves. The examples above show that we
can actually get from <i>a</i> to <i>b</i> making only five edits, and Myers
provides a strategy for finding that pathway.</p>

<p>To develop an intuition for how the algorithm works, let’s start exploring the
graph. To try to find the shortest path to the bottom-right position, we’ll
explore every possible path from (0,0) in tandem until we find a path that
reaches the end. I recommend keeping the above grid handy while you follow this.</p>

<p>Let’s start by recording our initial position at (0,0).</p>



<p>We have two options from this position: we can move downward and reach (0,1) or
move rightward and reach (1,0).</p>



<p>Now let’s consider (0,1). If we move downward from here we reach (0,2), but
there is a diagonal from there to (1,3), and from (1,3) to (2,4), and since
diagonal moves are free we can say that moving downward from (0,1) gets
us to (2,4) at the cost of only one move. Therefore we’ll mark the move from
(0,1) to (2,4) as a single step in our walk.</p>

<p>Moving rightward from (0,1) takes us to (1,1) and again there is a diagonal from
there to (2,2). Let’s mark both these moves on our walk.</p>

<div><pre><code>0,0 --- 1,0
 |
 |
0,1 --- 2,2
 |
 |
2,4
</code></pre></div>

<p>Now let’s consider the other branch we took from (0,0), moving rightward to
(1,0). Moving downward from (1,0) takes us to (1,1), which as we just found out
gets us to (2,2). Moving rightward from (1,0) takes us to (2,0), which has a
diagonal to (3,1). Again, we’ll record both these steps.</p>

<p>I’m recording (2,2) as being visited via (1,0) rather than (0,1) for reasons
that will become clear a little later. For intuition, consider that making a
rightward move first means performing a deletion first, and we generally want
deletions to appear before insertions.</p>

<div><pre><code>0,0 --- 1,0 --- 3,1
 |       |
 |       |
0,1     2,2
 |
 |
2,4
</code></pre></div>

<p>We’ve now fully explored the graph to two moves deep and we can begin on our
third move. Moving downward from (2,4) gets us to (2,5), and from there is a
diagonal to (3,6). Moving rightward from (2,4) takes us to (3,4), where again a
diagonal takes us to (4,5).</p>

<div><pre><code>0,0 --- 1,0 --- 3,1
 |       |
 |       |
0,1     2,2
 |
 |
2,4 --- 4,5
 |
 |
3,6
</code></pre></div>

<p>Next, we consider (2,2). Moving rightward from there is as we’ve seen before: we
move to (3,2), and follow the diagonals from there to (5,4).  Moving downward
introduces a new situation, however: this move gets us to (2,3) and there is no
diagonal from there. Now, if we were doing a general-purpose graph search, we’d
want to record both the result of moving rightward from (2,4) and the result of
moving downward from (2,2), that is:</p>

<div><pre><code>0,0 --- 1,0 --- 3,1
 |       |
 |       |
0,1     2,2 --- 5,4
 |        \
 |         \
2,4 -       2,3
 |   \
 |    4,5
3,6
</code></pre></div>

<p>However, the structure of the particular graphs we’re examining means that it’s
sufficient to just store the <em>best</em> position you can reach after a certain set
of edits. The above record shows us that making two insertions then a deletion
(down twice, and then right) gets us to (4,5), whereas making the deletion
first, and then the two insertions, gets us to (2,3). So, we’ll just keep the
(4,5) result and throw the (2,3) away, indicating (4,5) is the best position
reachable after one deletion and two insertions <em>in any order</em>.</p>

<div><pre><code>0,0 --- 1,0 --- 3,1
 |       |
 |       |
0,1     2,2 --- 5,4
 |
 |
2,4 --- 4,5
 |
 |
3,6
</code></pre></div>

<p>Finally in our depth-2 scan, we visit (3,1). Moving downward from there goes to
(3,2), which leads diagonally to (5,4), and so we’ll again record this as a move
downward from (3,1) rather than rightward from (2,2). Moving rightward from
(3,1) gives (4,1), which has a diagonal to (5,2).</p>

<p>Here’s the completed record after three moves:</p>

<div><pre><code>0,0 --- 1,0 --- 3,1 --- 5,2
 |       |       |
 |       |       |
0,1     2,2     5,4
 |
 |
2,4 --- 4,5
 |
 |
3,6
</code></pre></div>

<p>You’re probably getting the hang of this by now so let’s rattle through the
remaining moves. We can’t move downward from (3,6), and moving rightward from
there gives (4,6), which is also reachable downward from (4,5), so we’ll mark it
as such. Rightward of (4,5) is (5,5).</p>

<div><pre><code>0,0 --- 1,0 --- 3,1 --- 5,2
 |       |       |
 |       |       |
0,1     2,2     5,4
 |
 |
2,4 --- 4,5 --- 5,5
 |       |
 |       |
3,6     4,6
</code></pre></div>

<p>(5,5) is also downward of (5,4) so we’ll mark that, and moving rightward from
(5,4) gives (6,4), with a diagonal leading to (7,5).</p>

<div><pre><code>0,0 --- 1,0 --- 3,1 --- 5,2
 |       |       |
 |       |       |
0,1     2,2     5,4 --- 7,5
 |               |
 |               |
2,4 --- 4,5     5,5
 |       |
 |       |
3,6     4,6
</code></pre></div>

<p>Downward from (5,2) also leads to (7,5), and moving rightward from (5,2) leads
to (7,3), thus completing the fourth row of the scan.</p>

<div><pre><code>0,0 --- 1,0 --- 3,1 --- 5,2 --- 7,3
 |       |       |
 |       |       |
0,1     2,2     5,4 --- 7,5
 |               |
 |               |
2,4 --- 4,5     5,5
 |       |
 |       |
3,6     4,6
</code></pre></div>

<p>Now we begin the fifth row. Since we know there are diffs from <i>a</i> to
<i>b</i> requiring only five edits, we expect this row of the scan to find the
bottom-right position, (7,6).</p>

<p>There is nothing downward from (4,6), and rightward of that is (5,6), which is
also downward from (5,5). Rightward of (5,5) is (6,5).</p>

<div><pre><code>0,0 --- 1,0 --- 3,1 --- 5,2 --- 7,3
 |       |       |
 |       |       |
0,1     2,2     5,4 --- 7,5
 |               |
 |               |
2,4 --- 4,5     5,5 --- 6,5
 |       |       |
 |       |       |
3,6     4,6     5,6
</code></pre></div>

<p>Finally, moving downward from (7,5) gives (7,6) – the final position! This is
certainly better than (6,5), which we reached by going right, right, down, down,
right, and so we replace it in our trace of the moves.</p>

<div><pre><code>0,0 --- 1,0 --- 3,1 --- 5,2 --- 7,3
 |       |       |
 |       |       |
0,1     2,2     5,4 --- 7,5
 |               |       |
 |               |       |
2,4 --- 4,5     5,5     7,6
 |       |       |
 |       |       |
3,6     4,6     5,6
</code></pre></div>

<p>So that’s the basic idea the algorithm is based on: given two strings, find the
shortest path through a graph that represents the edit space between the two. We
explore every possible route through the graph breadth-first, and stop as soon
as we reach the final position.</p>

<p>In the next article, we’ll look at how Myers actually represents this process,
and start to look at implementing it in code.</p>


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI: Streaming is now available in the Assistants API (131 pts)]]></title>
            <link>https://platform.openai.com/docs/assistants/overview/step-4-create-a-run?context=with-streaming</link>
            <guid>39697483</guid>
            <pubDate>Wed, 13 Mar 2024 21:03:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://platform.openai.com/docs/assistants/overview/step-4-create-a-run?context=with-streaming">https://platform.openai.com/docs/assistants/overview/step-4-create-a-run?context=with-streaming</a>, See on <a href="https://news.ycombinator.com/item?id=39697483">Hacker News</a></p>
Couldn't get https://platform.openai.com/docs/assistants/overview/step-4-create-a-run?context=with-streaming: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Prostate cancer includes two different evotypes (147 pts)]]></title>
            <link>https://www.ox.ac.uk/news/2024-03-05-ai-reveals-prostate-cancer-not-just-one-disease</link>
            <guid>39696876</guid>
            <pubDate>Wed, 13 Mar 2024 20:17:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ox.ac.uk/news/2024-03-05-ai-reveals-prostate-cancer-not-just-one-disease">https://www.ox.ac.uk/news/2024-03-05-ai-reveals-prostate-cancer-not-just-one-disease</a>, See on <a href="https://news.ycombinator.com/item?id=39696876">Hacker News</a></p>
Couldn't get https://www.ox.ac.uk/news/2024-03-05-ai-reveals-prostate-cancer-not-just-one-disease: Error: Request failed with status code 405]]></description>
        </item>
        <item>
            <title><![CDATA[IBM and NASA build language models to make scientific knowledge more accessible (172 pts)]]></title>
            <link>https://research.ibm.com/blog/science-expert-LLM</link>
            <guid>39696583</guid>
            <pubDate>Wed, 13 Mar 2024 19:54:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://research.ibm.com/blog/science-expert-LLM">https://research.ibm.com/blog/science-expert-LLM</a>, See on <a href="https://news.ycombinator.com/item?id=39696583">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>In a new collaboration, IBM and NASA created a suite of efficient language models by training on scientific literature. Based on the transformer architecture, these models can be used in a variety of applications, from classification and entity extraction to question-answering and information retrieval. These models achieve high performance across a variety of domains and can respond promptly. We have open-sourced the models on Hugging Face for the benefit of the scientific and academic community.</p><p>Transformer-based language models — which include <a href="https://aclanthology.org/N19-1423/">BERT</a>, <a href="https://arxiv.org/abs/1907.11692">RoBERTa</a>, and IBM’s Slate and Granite family of models, are invaluable for a range of natural language understanding tasks. What powers these models is a statistical understanding of how language works. They are trained on masked language modeling tasks, which learns by reconstructing sentences with words that have been obscured. Tokenizers, which break down words into units for the model, play a critical role in learning a vast vocabulary. While general-purpose text training is effective with popular tokenizers trained on datasets like Wikipedia or BooksCorpus, scientific domains require specialized tokenizers for terms like "phosphatidylcholine."</p><p>We trained our models on 60 billion tokens on a corpus of astrophysics, planetary science, earth science, heliophysics, and biological and physical sciences data. Unlike a generic tokenizer, the one we developed is capable of recognizing scientific terms such as "axes" and "polycrystalline." More than half of the 50,000 tokens our models processed were unique compared to the open-source RoBERTa model on Hugging Face.</p><p>The IBM-NASA models, trained on domain-specific vocabulary, outperformed the open RoBERTa model by 5% on the popular <a href="https://microsoft.github.io/BLURB/">BLURB</a> benchmark, which evaluates performance on biomedical tasks. It also showed a 2.4% F1 score improvement on an internal scientific question-answering benchmark and a 5.5% improvement on internal Earth science entity recognition tests.</p><p>Our trained encoder model can be fine-tuned for many non-generative linguistic tasks and can generate information-rich embeddings for document retrieval through <a href="https://arxiv.org/abs/2005.11401">retrieval augmented generation</a> (RAG). RAG commonly follows a two-step framework: a retriever model first encodes the question and retrieves relevant documents from a vector database. These documents are then passed to a generative model to answer the question while ensuring fidelity to the retrieved document.</p><p>We built a retriever model on top of our encoder model to produce information-rich embeddings that map the similarity between pairs of text. Specifically, we optimize on a contrastive loss function, pushing the embeddings of an anchor text closer to those of a relevant (“positive”) document, and farther away from a random (“negative”) document.</p><p>These models used about 268 million text pairs, including titles and abstracts, and questions and answers.  As a result, they excel at retrieving relevant passages in a test set of about 400 questions that NASA curated. This is evidenced by a 6.5% improvement over a similarly fine-tuned RoBERTa model, and a 5% improvement over <a href="https://huggingface.co/BAAI/bge-base-en-v1.5">BGE-base</a>, another popular open-source model for embeddings.</p><p>The significant enhancements achieved by our models can be attributed to the specialized training data, custom tokenizer, and training methodology. Consistent with IBM and NASA’s commitment to open and transparent AI, both models are available on Hugging Face: the <a href="https://huggingface.co/nasa-impact/nasa-smd-ibm-v0.1">encoder model</a> can be further finetuned for applications in the space domain, while the <a href="https://huggingface.co/nasa-impact/nasa-smd-ibm-st">retriever model</a> can be used for information retrieval applications for RAG. We are also collaborating with NASA to enhance science search engine using these models.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[EFF to Ninth Circuit: No Software Exception to Traditional Copyright Limits (170 pts)]]></title>
            <link>https://www.eff.org/deeplinks/2024/03/eff-ninth-circuit-theres-no-software-exception-traditional-copyright-limits</link>
            <guid>39696482</guid>
            <pubDate>Wed, 13 Mar 2024 19:47:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eff.org/deeplinks/2024/03/eff-ninth-circuit-theres-no-software-exception-traditional-copyright-limits">https://www.eff.org/deeplinks/2024/03/eff-ninth-circuit-theres-no-software-exception-traditional-copyright-limits</a>, See on <a href="https://news.ycombinator.com/item?id=39696482">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Copyright’s reach is already far too broad, and courts have no business expanding it any further, particularly where that reframing will undermine adversarial interoperability. Unfortunately, a federal district court did just that in the latest iteration of <em>Oracle v. Rimini</em>, concluding that software Rimini developed was a “derivative work” because it was intended to interoperate with Oracle's software, even though the update didn’t use any of Oracle’s copyrightable code.</p><p>That’s a dangerous precedent. If a work is derivative, it may infringe the copyright in the preexisting work from which it, well, derives. For decades, software developers have relied, correctly, on the settled view that a work is not derivative under copyright law unless it is “substantially similar” to a preexisting work in both ideas and expression. Thanks to that rule, software developers can build innovative new tools that interact with preexisting works, including tools that improve privacy and security, without fear that the companies that hold rights in those preexisting works would have an automatic copyright claim to those innovations.</p><p>That’s why EFF, along with a diverse group of stakeholders representing consumers, small businesses, software developers, security researchers, and the independent repair community, filed an <a href="https://www.eff.org/document/eff-rimini-amicus-brief">amicus brief</a> in the Ninth Circuit Court of Appeals explaining that the district court ruling is not just bad policy, it’s also bad law.&nbsp; Court after court has confronted the challenging problem of applying copyright to functional software, and until now none have found that the copyright monopoly extends to interoperable software absent substantial similarity. In other words, there is no “software exception” to the definition of derivative works, and the Ninth Circuit should reject any effort to create one.</p><p>The district court’s holding relied heavily on an erroneous interpretation of a 1998 case, <em>Micro Star v. FormGen</em>. In that case, the plaintiff, FormGen, published a video game following the adventures of action hero Duke Nukem. The game included a software tool that allowed players themselves to build new levels to the game and share them with others. Micro Star downloaded hundreds of those user-created files and sold them as a collection. When FormGen sued for copyright infringement, Micro Star argued that because the user files didn’t contain art or code from the FormGen game, they were not derivative works.</p><p>The Ninth Circuit Court of Appeals ruled against Micro Star, explaining that:</p></div><div><p><em> [t]he work that Micro Star&nbsp;infringes is the [Duke Nukem] story itself—a beefy commando type named Duke who wanders around post-Apocalypse Los Angeles, shooting Pig Cops with a gun, lobbing hand grenades, searching for medkits and steroids, using a jetpack to leap over obstacles, blowing up gas tanks, avoiding radioactive slime. A copyright owner holds the right to create sequels and the stories told in the [user files] are surely sequels, telling new (though somewhat repetitive) tales of Duke’s fabulous adventures.</em></p></div><div><p>Thus, the user files were “substantially similar” because they<em> functioned as sequels</em> to the video game itself—specifically the story and principal character of the game. If the user files had told a different story, with different characters, they would not be derivative works. For example, a company offering a Lord of the Rings game might include tools allowing a user to create their own character from scratch. If the user used the tool to create a hobbit, that character might be considered a derivative work. A unique character that was simply a 21<sup>st</sup> century human in jeans and a t-shirt, not so much.</p><p>Still, even confined to its facts,<em> Micro Star</em>&nbsp;stretched the definition of derivative work. By misapplying <em>Micro Star</em> to purely functional works that do not incorporate <em>any</em> protectable expression, however, the district court rewrote the definition altogether. If the court’s analysis were correct, rightsholders would suddenly have a new default veto right in all kinds of works that are intended to “interact and be useable with” their software. Unfortunately, they are all too likely to use that right to threaten add-on innovation, security, and repair. </p><p>Defenders of the district court’s approach might argue that interoperable software will often be protected by fair use. As copyrightable software is found in everything from phones to refrigerators, fair use is an essential safeguard for the development of interoperable tools, where those tools might indeed qualify as derivative works. But many developers cannot afford to litigate the question, and they should not have to just because one federal court misread a decades-old case.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ageism Haunts Some Tech Workers in the Race to Get Hired (123 pts)]]></title>
            <link>https://www.wired.com/story/ageism-haunts-tech-workers-layoffs-race-to-get-hired/</link>
            <guid>39696419</guid>
            <pubDate>Wed, 13 Mar 2024 19:42:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/ageism-haunts-tech-workers-layoffs-race-to-get-hired/">https://www.wired.com/story/ageism-haunts-tech-workers-layoffs-race-to-get-hired/</a>, See on <a href="https://news.ycombinator.com/item?id=39696419">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p><span>The US economy</span> is showing remarkable health, but in the tech industry, layoffs <a href="https://www.wired.com/story/tech-layoffs-2024-amazon-google-discord-twitch/">keep coming</a>. For those out of work, finding a new position can become a full-time job. And in tech—a sector notoriously always looking for the next hot, new thing—some people whose days as fresh-faced coders are long gone say that having decades of experience can feel like a disadvantage.</p><p>Ageism is a longtime problem in the tech industry. Database startup RelevantDB went viral in 2021 after it posted a job listing bragging, “<a href="https://www.fastcompany.com/90669478/we-hire-old-people-job-posting-for-software-developer-sparks-a-viral-conversation-about-ageism-in-tech">We hire old people</a>,” which played off industry stereotypes. In 2020, the US Equal Employment Opportunity Commission found that <a href="https://www.propublica.org/article/the-u-s-equal-employment-opportunity-commission-confirms-a-pattern-of-age-discrimination-at-ibm">IBM</a> had engaged in age discrimination, pushing out older workers to make room for younger ones. (The company has <a data-offer-url="https://newsroom.ibm.com/IBM-Chief-Human-Resources-Officer-Addresses-False-Claims-of-Systemic-Age-Discrimination" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://newsroom.ibm.com/IBM-Chief-Human-Resources-Officer-Addresses-False-Claims-of-Systemic-Age-Discrimination&quot;}" href="https://newsroom.ibm.com/IBM-Chief-Human-Resources-Officer-Addresses-False-Claims-of-Systemic-Age-Discrimination" rel="noopener" target="_blank">denied</a> engaging in “systemic age discrimination.”)</p><p>A recent <a href="https://www.linkedin.com/posts/linkedin-ads_no-one-knows-what-you-do-cloud-salesman-activity-7128022104867819521-gw34/">LinkedIn ad</a> that shows an older woman unfamiliar with tech jargon saying her son sells invisible clouds triggered a backlash from people who say it unfairly portrayed older people as out of touch. In response, Jim Habig, LinkedIn’s vice president of marketing, says: “This ad didn't meet our goal to create experiences where all professionals feel welcomed and valued, and we are working to replace the spot.”</p><p>Ageism is “an open secret in the tech industry,” says Maureen Clough, host of <a data-offer-url="https://www.itgetslateearly.com/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.itgetslateearly.com/&quot;}" href="https://www.itgetslateearly.com/" rel="noopener" target="_blank"><em>It Gets Late Early</em></a>, a podcast about aging in tech. Even when ageism isn’t as blatant as the IBM case, she says, it lurks behind common ideas in industry hiring, such as culture fit. “If you have a company that is predominantly young, white, and male, it’s going to be harder to get in there,” Clough says.</p><p>Vern Six, a 58-year-old programmer, says he recently ran into explicit ageism on his job hunt. A recruiter told him that he wouldn’t be appealing to employers and opined that Six should be chief technology officer at this point in his career, not a software developer, Six says.</p><p>After Six’s <a href="https://www.linkedin.com/feed/update/urn:li:activity:7167946832742928385/">LinkedIn post</a> about that encounter went viral, he created a <a href="https://www.linkedin.com/groups/14418151/">LinkedIn group</a> for people to discuss ageism in tech. He says he has often thought his age might play a role in job hunting, but “this was the first time I’ve ever had anybody say it directly.”</p><p>Industry and government data shows that US tech workers skew younger than the wider US workforce, but definitive data on differences in hiring patterns for older and younger tech workers has been hard to gather. That’s because so many more senior tech workers get jobs by networking or moving between companies where they know people rather than by cold applying, and that’s tricky to study and quantify, says Joanna Lahey, a professor of public policy at Texas A&amp;M University who studies age discrimination.</p><p>Older workers may be out of work for longer between jobs because they’re more likely to seek higher salaries or be selective, says Lahey. But if older workers are excluded from some positions because recruiters assume they wouldn’t take a lower offer or position or are perceived as not fitting into the company culture, that’s a problem, she says. “There are a lot of people who have a lot of skills who are unemployed longer than they ought to be. It’s a loss for them, and it’s a loss for society.”</p><figure data-testid="IframeEmbed"></figure><h2>Déjà Vu</h2><p>Tech companies have laid off more than 400,000 workers over the past two years, according to <a data-offer-url="https://layoffs.fyi/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://layoffs.fyi/&quot;}" href="https://layoffs.fyi/" rel="noopener" target="_blank">Layoffs.fyi</a>, which tracks job cuts in the industry. To older workers, the purge is both a reminder of the dotcom bust, and a new frontier. The industry’s generally consistent growth in recent decades as the economy has become more tech-centric means that many more senior workers—which in tech can sometimes be considered to mean over 35 but includes people in their late forties, fifties, or sixties—may have less experience with job hunting.</p><p>For decades, tech workers could easily hop between jobs in their networks, often poached by recruiters. And as tech companies boomed during the Covid-19 pandemic’s early days, increased demand for skills gave workers leverage. Now the power has shifted to the employers as companies seek to become efficient and correct that overhiring phase, and <a href="https://www.wired.com/story/tech-job-interviews-out-of-control/">applicants are hitting walls</a>. Workers have to network, stay active on LinkedIn, join message boards, and stand out. With <a href="https://www.cbc.ca/news/business/multi-generation-work-place-1.4980659#:~:text=For%20the%20first%20time%20in%20contemporary%20history%2C%20there%20are%20four,Z%20%E2%80%94%20human%20resources%20experts%20say.">four generations</a> now clocking in to work, things can feel crowded.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Silicon Valley is pricing academics out of AI research (160 pts)]]></title>
            <link>https://www.washingtonpost.com/technology/2024/03/10/big-tech-companies-ai-research/</link>
            <guid>39696394</guid>
            <pubDate>Wed, 13 Mar 2024 19:40:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.washingtonpost.com/technology/2024/03/10/big-tech-companies-ai-research/">https://www.washingtonpost.com/technology/2024/03/10/big-tech-companies-ai-research/</a>, See on <a href="https://news.ycombinator.com/item?id=39696394">Hacker News</a></p>
Couldn't get https://www.washingtonpost.com/technology/2024/03/10/big-tech-companies-ai-research/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[BreakTime: Running Breakout inside Google Calendar (193 pts)]]></title>
            <link>https://eieio.games/nonsense/game-13-breaktime/</link>
            <guid>39696152</guid>
            <pubDate>Wed, 13 Mar 2024 19:21:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://eieio.games/nonsense/game-13-breaktime/">https://eieio.games/nonsense/game-13-breaktime/</a>, See on <a href="https://news.ycombinator.com/item?id=39696152">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
        <p>I made a game. It’s called BreakTime. It’s Breakout (aka Brick Breaker) running inside Google Calendar. Your meetings are bricks. It (optionally) declines the meetings you destroy.</p>



<p>It’s a chrome extension. You can install it <a href="https://chromewebstore.google.com/detail/breaktime/efajcgehdfpliglonbkjmifmibpphafk?hl=en&amp;authuser=0">here</a>. It has no external dependencies; it’s 1,500 lines of javascript including a little game engine I made for the project.</p>

<p>Making it was a ton of fun. Let me tell you about it.
<!-- excerpt-end --></p>

<h2 id="inspiration">Inspiration</h2>
<p>BreakTime started as an iOS shortcut.</p>

<p>I’m <em>fascinated</em> with iOS shortcuts. I’m determined to build something using them. I like <a href="https://eieio.games/nonsense/game-11-flappy-bird-finder/">putting games in weird places</a> and using shortcuts to build a game deep inside the iOS walled garden is a goal of mine<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>I realized that the calendar shortcut API was pretty powerful - I could build animations by moving events around. I whipped up the bones of what I thought could be a pong demo and <a href="https://twitter.com/itseieio/status/1757415329783795786">tweeted about it</a>.</p>



<p>I floated Breakout as another potential game and my friend <a href="https://twitter.com/ianthehenry/status/1757464426616435093">Ian Henry</a> suggested actually declining calendar events.</p>

<div>
    
    <p><img src="https://eieio.games/assets/images/breaktime/iantweet.png" alt=""></p><p> ian i am so grateful for this tweet </p>
    
</div>

<p>And so BreakTime was born.</p>

<h2 id="prototype">Prototype</h2>

<p>Whipping up a janky prototype of BreakTime was pretty straightforward. The browser needs to know the coordinates of the elements on screen - it has to draw them all! - and you can ask it for those coordinates with <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect"><code>getBoundingClientRect</code></a>. This might not work well for elements that aren’t rectangles but in BreakTime almost everything is a rectangle!</p>

<p>So the prototype was basically:</p>
<ul>
  <li>Figure out a dom selector that gives me all the calendar events</li>
  <li>Figure out a dom selector that gives me a play area</li>
  <li>Add a div to represent the ball</li>
  <li>Write some javascript to make the ball bounce around, checking for collisions with the rectangles.</li>
  <li>Inject in some CSS to make the ball div round, fade out events that the ball hit, etc.</li>
</ul>

<p>It looked something like this:</p>

<div>
    
    
    <video playsinline="" controls="" muted="" poster="https://eieio.games/assets/images/breaktime/breaktime-prototype-1-firstframe.png">
    
        <source src="https://eieio.games/assets/images/breaktime/breaktime-prototype-1.mp4" type="video/mp4">
    </video>
    
    <p> why did i make the ball so big </p>
    
</div>

<p>I cut some pretty big corners to get this all working.</p>

<p>To make collision handling trivial I treated the ball as a square instead of as a circle; you can see that this causes some weird looking bounces.</p>

<p>To animate the ball’s position I set up a <code>setInterval</code> loop that moved the ball every 50 milliseconds, moved it’s position via the css <code>transform</code> property, and set the ball’s <code>transition</code> property to <code>linear 50ms</code> - so long as the <code>setInterval</code> loop runs <em>exactly</em> every 50ms this produces relatively smooth movement (which is to say the movement is not very smooth).</p>

<p>And at the time I figured this wouldn’t get approved as a chrome extension so I planned to make a bookmarklet. This is where the goal of “no external dependencies” came from. To run the prototype I’d just copy-paste the javascript directly into the browser console.</p>

<p>The whole thing came out to something like 300 lines including the CSS that I was injecting directly from javascript.</p>

<p>Those hacks made the game pretty gross. I waited far too long to unwind them which created some headaches later.</p>

<p>That said, this janky prototype was enough to <a href="https://www.tiktok.com/@itseieio/video/7335551871991418155">do pretty well on tiktok</a> and catch the Google social team’s attention, which was pretty exciting.</p>

<div>
    
    <p><img src="https://eieio.games/assets/images/breaktime/tiktok-screencap.png" alt=""></p><p> never thought this would be a development highlight </p>
    
</div>

<h2 id="collision-handling">Collision handling</h2>

<p>The response from tiktok convinced me that this was worth pursuing, and I figured the first thing I needed to do was move to a proper system for collision handling.</p>

<p>It turns out that determining whether a circle collides with an (unrotated) rectangle is delightfully elegant! The process is:</p>
<ul>
  <li>Find the point P on the rectangle that is closest to the circle</li>
  <li>Measure the distance from P to the circle’s center</li>
  <li>If that distance is smaller than the circle’s radius you have a collision</li>
</ul>

<p>And finding P is even more elegant. To find the X coordinate of P:</p>
<ul>
  <li>If the circle’s center is to the left of the rectangle, it’s the left edge of the rectangle</li>
  <li>If the circle’s center is to the right of the rectangle, it’s the right edge of the rectangle</li>
  <li>Otherwise, it’s the X coordinate of the circle’s center</li>
</ul>

<p>You can repeat the same process for the Y coordinate. Easy!</p>

<div>
    
    <p><img src="https://eieio.games/assets/images/breaktime/chatgpt.png" alt=""></p><p> chatgpt did a good job here </p>
    
</div>

<p>However, there’s also the problem of figuring out which <em>side</em> of the rectangle the circle bounced off of. And in my journey to solve this problem from first principles (why!) I went a little off the rails.</p>

<p>The approach I took is:</p>
<ul>
  <li>Take the circle’s current position</li>
  <li>Rewind time to the moment of collision</li>
  <li>Compare the center of the circle to the sides of the rectangle - if the circle is (for example) now above the rectangle, bounce off the top</li>
</ul>

<p>There are a ton of edge cases here. And when you get them wrong you get some <em>weird</em> results<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<div>
    
    
    <video playsinline="" controls="" muted="" poster="https://eieio.games/assets/images/breaktime/funnybounce-firstframe.png">
    
        <source src="https://eieio.games/assets/images/breaktime/funnybounce.mp4" type="video/mp4">
    </video>
    
    <p> that bounce didn't look right... </p>
    
</div>

<p>The big problems I ran into are:</p>
<ol>
  <li>The ball should only bounce off the left side of a rectangle when moving to the right (and vice-versa)</li>
  <li>The ball should only collide off a side if, after rewinding time, it’s center is <em>outside</em> of the rectangle</li>
</ol>

<p>These problems were particularly pernicious when handling corner bounces (where we invert both the X and Y direction of the ball). I eventually realized that you should only bounce off a corner when the ball intersects two sides of a rectangle in the same tick.</p>

<p>I feel kinda silly typing this out because it feels obvious now but man, this stuff is <em>finicky</em>. It probably didn’t help that I wrote most of this code over one late night (I was excited about the game and thought I could finish it in another day or two. I could not).</p>

<p>I’ve since learned that the typical approach here is about looking at the <em>angle</em> of collision instead. But it was a lot of fun to flail through my approach - and I learned a whole lot doing it.</p>

<h2 id="from-jank-to-juice">From jank to juice</h2>

<p>Proper collision detection made the game feel a lot better but it didn’t <em>look</em> great. I saw two big problems.</p>

<ol>
  <li>The assets (the ball, paddle, and background) looked simplistic and bad</li>
  <li>There was no “juice”</li>
</ol>

<p>Game devs use “juice” to refer to all the stuff that makes a game feel <em>alive</em> - objects scaling up and down when they collide, particle effects, screenshake, color, good <a href="https://en.wikipedia.org/wiki/Inbetweening">tweening</a> - stuff that doesn’t change gameplay but instead enhances how the existing gameplay feels.</p>

<p>One of the best talks on juice is called <a href="https://www.youtube.com/watch?v=Fy0aCDmgnxg">“Juice it or lose it”</a>. The talk takes a barebones game and progressively adds more juice (but no gameplay changes) to show how much it changes the feel of the game. Conveniently the example game is a Breakout clone! I cribbed a lot of ideas directly from it.</p>

<p>To motivate myself to get some effects added quickly I signed up to give a 5 minute presentation at <a href="https://www.recurse.com/">Recurse Center’s</a> weekly presentations. I’m a Recurse alum and always find presenting there motivating.</p>

<p>I brought something like this:</p>
<div>
    
    
    <video playsinline="" controls="" muted="" poster="https://eieio.games/assets/images/breaktime/somewhat-juiced-firstframe.png">
    
        <source src="https://eieio.games/assets/images/breaktime/somewhat-juiced.mp4" type="video/mp4">
    </video>
    
    <p> the color of the ball here really irks me </p>
    
</div>

<p>That looks a lot better! But there’s still a lot to do. The full set of juice I added includes:</p>
<ul>
  <li>Scaling the ball up and down when it bounces</li>
  <li>Shrinking the paddle when the ball hits it</li>
  <li>Changing the ball’s color over time (more quickly when it bounces)</li>
  <li>Shaking the screen when an event is destroyed</li>
  <li>Particle effects that match an event’s color when it shatters</li>
  <li>No background (the background here is ugly)</li>
  <li>Sliding in the gameplay elements at the start</li>
  <li>Blurring the bottom of the screen since there’s no collision allowed there<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" rel="footnote">3</a></sup></li>
  <li>Adding a trail to the ball that traces its path</li>
</ul>

<p>It’d take wayyy too much time to talk about how I approached each of these problems. Let’s talk about two.</p>

<h4 id="particle-effects">Particle effects</h4>

<p>Creating particles for event shattering was delightfully straightforward. I borrowed heavily from <a href="https://css-tricks.com/adding-particle-effects-to-dom-elements-with-canvas/">this CSS tricks post</a>.</p>

<p>The basic idea is:</p>
<ul>
  <li>Get the bounds of the event to shatter</li>
  <li>Get the background color of the computed style of the event</li>
  <li>Divide the bounds of the event into 30 equal-ish rectangles</li>
  <li>Create colored divs for each of those rectangles using the event’s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle">computed style</a></li>
  <li>Animate their position, rotation, color, and opacity with some jitter</li>
</ul>

<p>Here’s approximately what that looks like.</p>
<div><pre><code><span>function</span> <span>addParticlesForEvent</span><span>(</span><span>bounds</span><span>,</span> <span>color</span><span>)</span> <span>{</span>
    <span>const</span> <span>width</span> <span>=</span> <span>bounds</span><span>.</span><span>width</span> <span>/</span> <span>numberOfRows</span><span>;</span>
    <span>const</span> <span>height</span> <span>=</span> <span>bounds</span><span>.</span><span>height</span> <span>/</span> <span>numberOfColumns</span><span>;</span>

    <span>for</span> <span>(</span><span>let</span> <span>y_</span> <span>=</span> <span>0</span><span>;</span> <span>y</span> <span>&lt;</span> <span>numberOfRows</span><span>;</span> <span>y</span><span>++</span><span>)</span> <span>{</span>
      <span>for</span> <span>(</span><span>let</span> <span>x_</span> <span>=</span> <span>0</span><span>;</span> <span>x</span> <span>&lt;</span> <span>numberOfColumns</span><span>;</span> <span>x</span><span>++</span><span>)</span> <span>{</span>
        <span>const</span> <span>x</span> <span>=</span> <span>bounds</span><span>.</span><span>left</span> <span>+</span> <span>width</span> <span>*</span> <span>x_</span><span>;</span>
        <span>const</span> <span>y</span> <span>=</span> <span>bounds</span><span>.</span><span>top</span> <span>+</span> <span>height</span> <span>*</span> <span>y_</span><span>;</span>
        <span>// Explode out from the center</span>
        <span>const</span> <span>center</span> <span>=</span> <span>{</span> <span>x</span><span>:</span> <span>bounds</span><span>.</span><span>left</span> <span>+</span> <span>width</span> <span>/</span> <span>2</span><span>,</span> <span>y</span><span>:</span> <span>top</span> <span>+</span> <span>height</span> <span>/</span> <span>2</span> <span>};</span>
        <span>const</span> <span>vector</span> <span>=</span> <span>normalizeVector</span><span>(</span><span>subtractVectors</span><span>({</span> <span>x</span><span>,</span> <span>y</span> <span>},</span> <span>center</span><span>));</span>

        <span>const</span> <span>distance</span> <span>=</span> <span>Math</span><span>.</span><span>floor</span><span>(</span><span>Math</span><span>.</span><span>random</span><span>()</span> <span>*</span> <span>75</span> <span>+</span> <span>25</span><span>);</span>
        <span>const</span> <span>toX</span> <span>=</span> <span>vector</span><span>.</span><span>x</span> <span>*</span> <span>distance</span> <span>*</span> <span>makeJitter</span><span>();</span>
        <span>const</span> <span>toY</span> <span>=</span> <span>vector</span><span>.</span><span>y</span> <span>*</span> <span>distance</span> <span>*</span> <span>makeJitter</span><span>();</span>
        <span>const</span> <span>rotation</span> <span>=</span> <span>(</span><span>Math</span><span>.</span><span>random</span><span>()</span> <span>-</span> <span>0.5</span><span>)</span> <span>*</span> <span>720</span> <span>+</span> <span>"</span><span>deg</span><span>"</span><span>;</span>
        <span>const</span> <span>particle</span> <span>=</span> <span>makeParticle</span><span>(</span><span>width</span><span>,</span> <span>height</span><span>,</span> <span>color</span><span>,</span> <span>x</span><span>,</span> <span>y</span><span>);</span>

        <span>const</span> <span>startingAnimation</span> <span>=</span> <span>{</span> <span>opacity</span><span>:</span> <span>1</span> <span>};</span>
        <span>const</span> <span>endingAnimation</span> <span>=</span> <span>{</span>
          <span>opacity</span><span>:</span> <span>0</span><span>,</span>
          <span>transform</span><span>:</span> <span>`translate(</span><span>${</span><span>toX</span><span>}</span><span>px, </span><span>${</span><span>toY</span><span>}</span><span>px) rotate(</span><span>${</span><span>rotation</span><span>}</span><span>)`</span><span>,</span>
        <span>};</span>
        <span>const</span> <span>animation</span> <span>=</span> <span>particle</span><span>.</span><span>animate</span><span>(</span>
          <span>[</span><span>startingAnimation</span><span>,</span> <span>endingAnimation</span><span>],</span>
          <span>{</span>
            <span>duration</span><span>:</span> <span>250</span> <span>+</span> <span>Math</span><span>.</span><span>random</span> <span>*</span> <span>500</span><span>,</span>
            <span>delay</span><span>:</span> <span>Math</span><span>.</span><span>random</span><span>()</span> <span>*</span> <span>100</span><span>,</span>
            <span>easing</span><span>:</span> <span>"</span><span>ease</span><span>"</span><span>,</span>
          <span>}</span>
        <span>);</span>

        <span>animation</span><span>.</span><span>onfinish</span> <span>=</span> <span>()</span> <span>=&gt;</span> <span>{</span>
          <span>particle</span><span>.</span><span>remove</span><span>();</span>
        <span>};</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
</code></pre></div>

<p>I did something similar to create particles when the ball bounces against the paddle. And I ended up making a pool of 300 ready-to-use particles that I reused to avoid creating and removing tons of divs (this was probably unnecessary).</p>

<h4 id="screen-shake">Screen Shake</h4>

<p>Screen shake is controversial<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" rel="footnote">4</a></sup> - too much of it can be nauseating and disorienting. But I’ve found that sprinkling a bit in can really make you feel the impact of a collision. And it turns out that it’s super easy to add!</p>

<p>My entire implementation is:</p>
<div><pre><code><span>function</span> <span>makeScreenShake</span><span>()</span> <span>{</span>
    <span>const</span> <span>duration</span> <span>=</span> <span>250</span><span>;</span>
    <span>let</span> <span>magnitude</span> <span>=</span> <span>7.5</span><span>;</span>
    <span>let</span> <span>startTime</span> <span>=</span> <span>null</span><span>;</span>
    <span>let</span> <span>isShaking</span> <span>=</span> <span>false</span><span>;</span>

    <span>function</span> <span>shake</span><span>(</span><span>currentTime</span><span>)</span> <span>{</span>
        <span>const</span> <span>elapsedTime</span> <span>=</span> <span>currentTime</span> <span>-</span> <span>startTime</span><span>;</span>
        <span>const</span> <span>remainingTime</span> <span>=</span> <span>duration</span> <span>-</span> <span>elapsedTime</span><span>;</span>
        <span>if</span> <span>(</span><span>remainingTime</span> <span>&gt;</span> <span>0</span><span>)</span> <span>{</span>
            <span>const</span> <span>randomX</span> <span>=</span> <span>(</span><span>Math</span><span>.</span><span>random</span><span>()</span> <span>-</span> <span>0.5</span><span>)</span> <span>*</span> <span>magnitude</span><span>;</span>
            <span>const</span> <span>randomY</span> <span>=</span> <span>(</span><span>Math</span><span>.</span><span>random</span><span>()</span> <span>-</span> <span>0.5</span><span>)</span> <span>*</span> <span>magnitude</span><span>;</span>
            <span>mainElt</span><span>.</span><span>style</span><span>.</span><span>transform</span> <span>=</span> <span>`translate(</span><span>${</span><span>randomX</span><span>}</span><span>px, </span><span>${</span><span>randomY</span><span>}</span><span>px)`</span><span>;</span>
            <span>requestAnimationFrame</span><span>(</span><span>shake</span><span>);</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>mainElt</span><span>.</span><span>style</span><span>.</span><span>transform</span> <span>=</span> <span>"</span><span>translate(0px, 0px)</span><span>"</span><span>;</span>
            <span>magnitude</span> <span>=</span> <span>5</span><span>;</span>
            <span>isShaking</span> <span>=</span> <span>false</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>function</span> <span>startOrContinueShaking</span><span>()</span> <span>{</span>
        <span>startTime</span> <span>=</span> <span>performance</span><span>.</span><span>now</span><span>();</span>
        <span>if</span> <span>(</span><span>isShaking</span><span>)</span> <span>{</span>
            <span>magnitude</span> <span>+=</span> <span>5</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>requestAnimationFrame</span><span>(</span><span>shake</span><span>);</span>
        <span>}</span>
    <span>}</span>
    <span>return</span> <span>startOrContinueShaking</span><span>;</span>
<span>}</span>
<span>const</span> <span>screenShake</span> <span>=</span> <span>makeScreenShake</span><span>();</span>
</code></pre></div>

<p>And I think it makes a huge difference. Here I’ve changed the game to only start the screenshake after a few collisions:</p>
<div>
    
    
    <video playsinline="" controls="" muted="" poster="https://eieio.games/assets/images/breaktime/noscreenshake-firstframe.png">
    
        <source src="https://eieio.games/assets/images/breaktime/noscreenshake.mp4" type="video/mp4">
    </video>
    
    <p> screenshake starts on the 6th collision </p>
    
</div>

<p>One improvement I could have made here is to have each frame of screenshake depend on the prior frame using a noise generation algorithm (instead of just generating random values). <a href="https://kidscancode.org/godot_recipes/3.x/2d/screen_shake/index.html">This article</a> describes an approach I’ve taken in previous games.</p>

<h4 id="other-stuff">Other stuff</h4>
<p>There’s so much more stuff that I implemented here! I added <a href="https://github.com/nolenroyalty/breaktime/blob/856cdb2ad6f161837023b66d233e59958a674422/code/main.js#L1184">custom tweening logic</a> for ball/paddle scaling because using CSS tweening would interfere with moving the objects around smoothly. The <a href="https://github.com/nolenroyalty/breaktime/blob/856cdb2ad6f161837023b66d233e59958a674422/code/main.js#L1010">ball trail</a> adds elements that track the position of the ball over time while slowly fading out. The <a href="https://github.com/nolenroyalty/breaktime/blob/856cdb2ad6f161837023b66d233e59958a674422/code/main.js#L973">color changing</a> relies on the lovely CSS <code>hue-rotation</code> property.</p>

<p>But this post is super long and there’s still more to cover. Let’s keep going!</p>

<h2 id="smoother-animations">Smoother animations</h2>

<p>Remember, my original approach to moving the ball was “every 50ms, move it a fixed amount and rely on the CSS <code>transition</code> property to ensure that that movement is linear.”</p>

<p>This works ok, but produces unnatural movement if that loop doesn’t run <em>exactly</em> every 50ms.</p>

<div>
    
    
    <video playsinline="" controls="" muted="" poster="https://eieio.games/assets/images/breaktime/notsmooth-firstframe.png">
    
        <source src="https://eieio.games/assets/images/breaktime/notsmooth.mp4" type="video/mp4">
    </video>
    
    <p> ignore that bounce off the floor there... </p>
    
</div>

<p>Most of the time this would result in movement that felt just a little bit off, but occasionally you’d get <em>huge</em> leaps.</p>

<p>To fix this I moved my game loop to rely on <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"><code>requestAnimationFrame</code></a>.</p>

<p>The idea is that you give <code>requestAnimationFrame</code> a function that you want to run immediately before the browser repaints the screen. That callback gets a timestamp representing the amount of time that’s passed since the previous frame. So if it’s only been 25ms since the last frame, you only move the ball half as long as if it’s been 50ms. You end up with a variable frame rate but much smoother animations - especially since the browser will try to sync things up with your monitor’s refresh rate<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>Moving things based on <code>deltaTime</code> is standard practice in games. <a href="https://www.youtube.com/watch?v=yGhfUcPjXuE">This video</a> provides a nice overview.</p>

<h2 id="declining-events">Declining events</h2>
<p>I wanted BreakTime to actually be able to decline your events. I think a lot of the joy of a project like this is fully committing to the bit, and the bit here definitely includes “not going to the meetings I destroy.”</p>

<p>This was a challenge because I didn’t want any dependencies so I couldn’t use the calendar API. Instead I needed to script the process of declining the events.</p>

<p>The approach I took relied on <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"><code>MutationObservers</code></a> - an object that watches for changes in the DOM. My observer watches for anything that looks like a calendar dialog, searches that dialog for a “decline” button, and clicks it.</p>

<p>This was tricky and a little fragile. A few things to highlight:</p>
<ul>
  <li>It’s important to decline events one at a time<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" rel="footnote">6</a></sup>. To handle this I <a href="https://github.com/nolenroyalty/breaktime/blob/856cdb2ad6f161837023b66d233e59958a674422/code/main.js#L152">use a second observer to wait for all dialogs tied to the current event to clear</a></li>
  <li>Some events don’t have a decline option (e.g. if they have no guests); the code must handle that gracefully</li>
  <li>Some events are recurring, which means they spawn a second modal on decline (the modal asks whether you want to decline one or all of the events)</li>
</ul>

<p>But the most fragile bit of logic is that I search for buttons based on their text. This means that event declining only works if Google Calendar is in English. The only other approach I could think of was to hardcode the location in the DOM of the buttons which seemed even worse. But I’m sure there’s something smarter I could do here.</p>

<p>The final result is a flurry of events popping up and disappearing, which I think is pretty fun.</p>



<h2 id="moving-to-a-chrome-extension">Moving to a chrome extension</h2>

<p>For some reason I thought there was no chance that I could get this into the Chrome Webstore<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" rel="footnote">7</a></sup>. But my friend <a href="https://www.carolynzhang.com/">Kelin</a> convinced me that I totally could, and I was encouraged by Google’s social accounts <a href="https://twitter.com/googlecalendar/status/1764769037156843555">tweeting about my stuff</a>.</p>

<p>I was also pretty sick of copy-pasting what had become almost 2,000 lines of javascript and CSS into the browser console every time I wanted to run the game.</p>

<p>It turns out that making an extension is pretty easy! The <a href="https://developer.chrome.com/docs/extensions/get-started/tutorial/hello-world">intro docs</a> are pretty good and I didn’t need to do anything fancy. Moving to an extension also made me teach me code to run multiple times without refreshing a tab, which I doubt I would have done with a bookmarklet.</p>

<p>Getting the extension approved took under a day - it probably helps that the extension only runs when invoked so its permissions are pretty simple.</p>

<h2 id="wrapping-up">Wrapping up</h2>

<p>This was one of my favorite projects. I’m particularly happy that, while it involves embedding a game somewhere it doesn’t belong, the game makes sense for the medium. I’m very proud of <a href="https://eieio.games/nonsense/game-11-flappy-bird-finder/">Flappy Dird</a> and <a href="https://eieio.games/nonsense/implementing-wordle-in-the-firefox-address-bar/">Wordle in the Firefox address bar</a> but both of those games are totally unrelated to their constraints - they’re just the best ideas I had for how to build a game given the constraints I had chosen. This feels different.</p>

<p>Building a little engine for this project was <em>great</em>. It definitely took more time but I learned a ton - there’s simply no way I’d understand collisions in the same way if I hadn’t written the logic myself. And I’m much handier with the DOM after adding my own particles and scripting event declines.</p>

<p>I also have a ton of people to thank for this project. Thank you to <a href="https://twitter.com/ianthehenry/status/1757464426616435093">Ian Henry</a> for the initial inspiration, <a href="https://twitter.com/ChanaMessinger/status/1757941634975859132">Chana Messinger</a> for naming the game, <a href="https://kelin.online/">Kelin</a> for convincing me to make a chrome extension, <a href="https://recurse.com/">Recurse Center</a> for the encouragement, and <a href="https://www.joshwcomeau.com/">Josh W Comeau</a> for teaching me all of the CSS and Javascript that I know (I knew basically nothing at the start of this year!).</p>

<p>If you enjoyed this post I’d encourage you to apply to <a href="https://www.recurse.com/">Recurse</a>, which is the best place in the world to build stuff like this in a supportive environment. And if you want to hear about my future nonsense you should sign up for my <a href="https://eieio.substack.com/">mailing list</a> or follow me <a href="https://twitter.com/itseieio">on twitter</a>.</p>

<p>I’m going to be at <a href="https://gdconf.com/">GDC</a> next week to present on <a href="https://eieio.games/nonsense/game-12-stranger-video/">stranger video</a> at the Experimental Games Workshop and to meet people - if you’re going to be there I’d love to meet up :)</p>

<p>I’ll be back in April with something new and horrifying.</p>



    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A world from a sheet of paper (2023) [video] (272 pts)]]></title>
            <link>https://www.youtube.com/watch?v=8p02DtmyQhU</link>
            <guid>39696139</guid>
            <pubDate>Wed, 13 Mar 2024 19:21:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=8p02DtmyQhU">https://www.youtube.com/watch?v=8p02DtmyQhU</a>, See on <a href="https://news.ycombinator.com/item?id=39696139">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Tell Congress: Stop the TikTok Ban. Instead, Protect Our Data No Matter Who (146 pts)]]></title>
            <link>https://act.eff.org/action/tell-congress-stop-the-tiktok-ban</link>
            <guid>39694366</guid>
            <pubDate>Wed, 13 Mar 2024 17:18:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://act.eff.org/action/tell-congress-stop-the-tiktok-ban">https://act.eff.org/action/tell-congress-stop-the-tiktok-ban</a>, See on <a href="https://news.ycombinator.com/item?id=39694366">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                <p>The “Protecting Americans from Foreign Adversary Controlled Applications Act” would give the President the power to designate an application under the control of a country considered adversarial to the U.S. to be a national security threat. TikTok would be deemed a threat, meaning that the application would effectively be banned unless it cuts all ties with the foreign adversarial country within 180 days through a forced sale. The same could be true for other applications, like WeChat.</p>

<p>It’s a massive problem that current US law allows for all the big social media platforms to harvest and monetize our personal data, including TikTok. Without comprehensive data privacy legislation, this will continue, and this ban won’t solve any real or perceived problems. User data will still be collected by numerous platforms and sold to data brokers who sell it to the highest bidder—including governments of countries such as China—just as it is now.</p>

<p>TikTok raises special concerns, given the surveillance and censorship practices of the country that its parent company is based in, China. But it’s also used by hundreds of millions of people to express themselves online, and is an instrumental tool for community building and holding those in power accountable. The US government has not justified silencing the speech of Americans who use TikTok, nor has it justified the indirect speech punishment of a forced sale (which may prove difficult if not impossible to accomplish in the required timeframe). It can’t meet the high constitutional bar for a restriction on the platform, which would undermine the free speech and association rights of millions of people. This bill must be stopped.</p>

              </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lemonade Stand (118 pts)]]></title>
            <link>https://possiblywrong.wordpress.com/2024/03/12/lemonade-stand/</link>
            <guid>39694353</guid>
            <pubDate>Wed, 13 Mar 2024 17:17:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://possiblywrong.wordpress.com/2024/03/12/lemonade-stand/">https://possiblywrong.wordpress.com/2024/03/12/lemonade-stand/</a>, See on <a href="https://news.ycombinator.com/item?id=39694353">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<p><strong>Introduction</strong></p>



<p>This was a fun nostalgia trip. But it ended up being an attempt to collect and preserve some retro computing history as well… and I also learned– or forgot and remembered?– another interesting quirk of that programming environment from nearly 45 years ago.</p>



<p>In 1981, I had a friend down the street who had an Apple II+. Later that year, my parents hired a tutor for programming lessons. I feel like I owe much of the subsequent course of my life to that time with “Mrs. Cathy,” who had several computers in her home: I remember an Apple II+, a VIC-20, and an IBM PC.</p>



<p>But it wasn’t until 1983 that we got our own home computer, an Apple //e. One of the programs that came with the computer, <a href="https://en.wikipedia.org/wiki/Lemonade_Stand">Lemonade Stand</a>, is shown in the screenshot below.</p>


<div>
<figure><a href="https://possiblywrong.files.wordpress.com/2024/03/lemonade.png"><img data-attachment-id="4792" data-permalink="https://possiblywrong.wordpress.com/2024/03/12/lemonade-stand/lemonade/" data-orig-file="https://possiblywrong.files.wordpress.com/2024/03/lemonade.png" data-orig-size="565,389" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="lemonade" data-image-description="" data-image-caption="" data-medium-file="https://possiblywrong.files.wordpress.com/2024/03/lemonade.png?w=300" data-large-file="https://possiblywrong.files.wordpress.com/2024/03/lemonade.png?w=565" width="565" height="389" src="https://possiblywrong.files.wordpress.com/2024/03/lemonade.png?w=565" alt="" srcset="https://possiblywrong.files.wordpress.com/2024/03/lemonade.png 565w, https://possiblywrong.files.wordpress.com/2024/03/lemonade.png?w=150 150w, https://possiblywrong.files.wordpress.com/2024/03/lemonade.png?w=300 300w" sizes="(max-width: 565px) 100vw, 565px"></a></figure></div>


<p>The game is pretty simple: each morning, based on the weather forecast for the day, you decide how many glasses of lemonade and how many advertising signs to make, and how much to charge for each glass. These decisions and the day’s weather affect demand, you sell some number of glasses, rinse and repeat.</p>



<p>It’s about as fun as it sounds… but I remember being intrigued by the prospect of “reverse engineering” the game. The Applesoft BASIC source code contains the formula for computing the demand and the resulting profit as a function of the player’s inputs and the weather. We can, in principle, “solve” for the inputs that would maximize the expected profit. This post is motivated by my failed attempt to do this.</p>



<p><strong>History</strong></p>



<p>All of the code discussed here, both old and new, is available on <a href="https://github.com/possibly-wrong/lemonade">GitHub</a>. Let’s start with the old code: <code>lemonade.bas</code> is the Applesoft BASIC source by Charlie Kellner, from the .dsk image of my original 5.25″ diskette. I believe this is the earliest Apple version of the game– for completeness I’ve also included source extracts of two subsequent released versions (<code>lemonade_v4.bas</code> and <code>lemonade_v5.bas</code>), but for our purpose here their behavior is identical, with cosmetic updates to the graphics and sound by Drew Lynch, Bruce Tognazzini, and Jim Gerber.</p>



<p>For comparison, I’ve also extracted the source for <code>selll.bas</code> (as in “sell lemonade”), from the Minnesota Educational Computing Consortium (MECC, of <em>Oregon Trail</em> fame) Elementary Volume 3 disk <a href="https://mirrors.apple2.org.za/ftp.apple.asimov.net/images/educational/mecc/MECC-A704%20Elementary%20Vol.%203.dsk">A704</a>. Although appearing later in 1980, I think this version is somewhat closer to the actual original version of the game written by Bob Jamison in 1973 for the UNIVAC mainframe. That original 1973 source seems to be lost to the mists of antiquity… but I think <code>selll.bas</code> retains more of its parentage than the Kellner version, which removed some helpful comments explaining the terms in the demand function, mistranslated some variable names and <code>GOTO</code> line numbering resulting in unreachable code, etc.</p>



<p><strong>Maximizing profit</strong></p>



<p>Now for the new code: <code>lemonade_strategy.py</code> implements the profit-maximization described above. It’s pure brute force: given the objective function below,</p>


<div><pre title="">def expected_profit(glasses, signs, price, cost, r1=1, p_storm=0):
    n1 = 54 - 2.4 * price if price &lt; 10 else 3000 / (price * price)
    demand = min(int(r1 * n1 * (2 - math.exp(-0.5 * signs))), glasses)
    revenue = demand * price
    expense = glasses * cost + signs * 15
    return ((1 - p_storm) * revenue - expense, revenue - expense,
            glasses, signs, price)
</pre></div>


<p>where <code>r1</code> and <code>p_storm</code> are functions of the weather forecast, we simply evaluate the expected profit for all feasible inputs and find the maximum, with the wrinkle that the feasible region– how many glasses and signs we can possibly make– also depends on our current assets:</p>


<div><pre title="">max(expected_profit(glasses, signs, price, cost, r1, p_storm)
    for glasses in range(min(1000, assets // cost) + 1)
    for signs in range(min(50, (assets - cost * glasses) // 15) + 1)
    for price in range(101))
</pre></div>


<p>I ended up in this rabbit hole in the usual way, after discussion with a student. My objective wasn’t really to “solve” this decades-old game, but just to give an explicit example of how much slower computers were then: this same brute-force approach in Applesoft BASIC, with the Apple //e’s 1 MHz processor, took nearly 4 hours to compute optimal strategy just for the first sunny day in Lemonsville. That’s over 200,000 times slower than the above Python code, which runs in a fraction of a second on my decade-old 2.6 GHz laptop– that is, with a clock speed “only” 2,600 times faster.</p>



<p><strong>Changing the weather</strong></p>



<p>You can play an Apple version of the game in a browser at the <a href="https://archive.org/details/Lemonade_Stand_1979_Apple">Internet Archive</a>, linked from the game’s Wikipedia page. I did just that, with my Python script running alongside to compute optimal strategy… and it didn’t work.</p>



<p>The first day’s weather was “hot and dry.” With $2.00 and each glass of lemonade costing 2 cents, the optimal strategy should have been to make 74 glasses, 3 advertising signs, and charge 12 cents per glass, for an expected profit of $6.95. But when I entered these values in the game, I only sold 37 glasses, for a lousy $2.51 profit.</p>



<p>What was going on? It turns out that there are many different copies of <em>Lemonade Stand</em> out there, both at the Internet Archive as well as in various Apple II <a href="https://mirrors.apple2.org.za/ftp.apple.asimov.net/">disk image archives</a>… but the particular one linked from Wikipedia is unique among all of these in that it contains an important modification to the source code appearing in none of the other copies, highlighted below:</p>



<pre>400  REM   WEATHER REPORT<br>410 SC =  RND (1)<br>420  IF SC &lt; <strong><mark>.4</mark></strong> THEN SC = 2: GOTO 460<br>430  IF SC &lt; <strong><mark>.7</mark></strong> THEN SC = 10: GOTO 460<br>440 SC = 7<br>460  <strong><mark>REM</mark></strong>  IF D&lt;3 THEN SC=2</pre>



<p>(You can play the original unmodified version at the Internet Archive <a href="https://archive.org/details/LEMONADE_STAND">here</a>.)</p>



<p>I don’t know where these changes came from. And I believe these are indeed <em>changes </em>from the original release (i.e., not the other way around). But just these three edits were enough to keep my optimal strategy calculation from producing the correct result. This was strange at first glance, since the above section of code merely computes the randomly generated weather <em>forecast</em> for the day, which is an <em>input </em>to the subsequent profit calculation. In the above modified version, the weather forecast is sunny (<code>SC=2</code>) 40% of the time, cloudy (<code>SC=10</code>) 30% of the time, and hot and dry (<code>SC=7</code>) 30% of the time. The original threshold values are 0.6 and 0.8, corresponding to probabilities (0.6, 0.2, 0.2) of (sunny, cloudy, hot and dry).</p>



<p>The <code>REM</code> in line 460 is a “remark” comment, effectively disabling the original behavior of forcing sunny forecasts for the first two days (when <code>D=1</code> and <code>D=2</code>) of the game. But again, why should this matter? This is all input to the profit calculation, which remains identical to the original, so what is causing the difference in behavior?</p>



<p><strong>Undeclared variables</strong></p>



<p>To make it easier to poke (!) around this problem, I wrote <code>lemonade.py</code>, which is my attempt at a <a href="https://possiblywrong.wordpress.com/2013/02/03/hunt-the-wumpus/">shot-for-shot remake</a> of the original <code>lemonade.bas</code> in Python, minus the graphics and sound– that is, just a canonical mode text interface, but an otherwise line-for-line direct translation with identical behavior.</p>



<p>That translation process was an interesting exercise, almost a logic puzzle, converting the unstructured <code>GOTO</code>-based flow control of Applesoft BASIC into structured Python– I was surprised at the end of it all to find that only a single <code>def</code>ined function and extra temporary Boolean variable were needed, despite all of the <code>GOSUB</code>s.</p>



<p>That translation helped me to understand the cause of the different behavior I was seeing in the original. The problem is in the following section of code, with the offending lines highlighted:</p>



<pre>700  REM   AFTER 2 DAYS THINGS CAN HAPPEN<br><strong><mark>710  IF D &gt; 2 THEN 2000</mark></strong><br>...<br>2000  REM   RANDOM EVENTS<br>2010  IF SC = 10 THEN 2110<br>2030  IF SC = 7 THEN 2410<br>...<br>2410 X4 = 1<br>2430  PRINT "A HEAT WAVE IS PREDICTED FOR TODAY!"<br><strong><mark>2440 R1 = 2</mark></strong><br>2450  GOTO 805</pre>



<p>The variable <code>R1</code> is an input to the profit function. But although the code change in line 460 above allows the first day’s <em>displayed forecast </em>to be hot and dry– or anything else other than sunny– line 710 still prevents actually <em>setting </em><code>R1</code> to reflect that non-sunny forecast when computing profit.</p>



<p>The effect is that, for the first two days, the weather forecast might <em>indicate </em>“hot and dry,” or “cloudy,” etc., but it’s <em>really </em>still sunny for those first two days, just like the original version.</p>



<p>All of which leads to the actual motivation for this post: when I initially tried to reproduce the effect of the three changed lines in the Python version, I got a “<code>NameError: name 'D' is not defined</code>“, due to commenting out line 460 in the BASIC version above: the variable <code>D</code> is never declared or assigned a value <em>prior </em>to line 460.</p>



<p>Python can’t handle this… but apparently Applesoft BASIC can. Variables do not need to be declared before use: when evaluating an expression containing a variable not previously assigned, the value of that variable defaults to zero (or the empty string for string variables).</p>



<p>This behavior is actually depended on in a few other places in the game as well. I admit that I <em>think </em>this is new to me– in all of those early days of learning programming, I don’t remember ever being aware of nor taking advantage of this “feature.” And it’s not a feature of the original Dartmouth BASIC. And I couldn’t find documentation of it anywhere in the books, manuals, and magazines that I have… but I did find it written down in the original “<a href="https://archive.org/details/Applesoft_Reference_Manual_1978-_bluebook/page/n11/mode/2up">Blue Book</a>” Applesoft Reference Manual. From page 9: “<em>Another important fact is that if a variable is encountered in a formula before it is assigned a value, it is automatically assigned the value zero. Zero is then substituted as the value of the variable in the particular formula.</em>“</p>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[4T transistors, one giant chip (Cerebras WSE-3) [video] (110 pts)]]></title>
            <link>https://www.youtube.com/watch?v=f4Dly8I8lMY</link>
            <guid>39693356</guid>
            <pubDate>Wed, 13 Mar 2024 16:13:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=f4Dly8I8lMY">https://www.youtube.com/watch?v=f4Dly8I8lMY</a>, See on <a href="https://news.ycombinator.com/item?id=39693356">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
    </channel>
</rss>