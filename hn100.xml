<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 05 Aug 2024 21:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Google Loses DOJ Antitrust Suit Over Search (426 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2024-08-05/google-loses-doj-antitrust-suit-over-search</link>
            <guid>41164240</guid>
            <pubDate>Mon, 05 Aug 2024 18:58:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2024-08-05/google-loses-doj-antitrust-suit-over-search">https://www.bloomberg.com/news/articles/2024-08-05/google-loses-doj-antitrust-suit-over-search</a>, See on <a href="https://news.ycombinator.com/item?id=41164240">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Launch HN: Airhart Aeronautics (YC S22) – A modern personal airplane (187 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=41163382</link>
            <guid>41163382</guid>
            <pubDate>Mon, 05 Aug 2024 17:26:43 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=41163382">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="41163382">
      <td><span></span></td>      <td><center><a id="up_41163382" href="https://news.ycombinator.com/vote?id=41163382&amp;how=up&amp;goto=item%3Fid%3D41163382"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=41163382">Launch HN: Airhart Aeronautics (YC S22) – A modern personal airplane</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_41163382">104 points</span> by <a href="https://news.ycombinator.com/user?id=n_ermosh">n_ermosh</a> <span title="2024-08-05T17:26:43"><a href="https://news.ycombinator.com/item?id=41163382">3 hours ago</a></span> <span id="unv_41163382"></span> | <a href="https://news.ycombinator.com/hide?id=41163382&amp;goto=item%3Fid%3D41163382">hide</a> | <a href="https://hn.algolia.com/?query=Launch%20HN%3A%20Airhart%20Aeronautics%20(YC%20S22)%20%E2%80%93%20A%20modern%20personal%20airplane&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=41163382&amp;auth=31ffb8bc42a23118d4b11c8ab7459e5e28c5f2c6">favorite</a> | <a href="https://news.ycombinator.com/item?id=41163382">117&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><div><p>Hey Hacker News! I’m Nikita, founder of Airhart Aeronautics (<a href="https://www.airhartaero.com/">https://www.airhartaero.com/</a>). We are building an airplane for people who don’t fly airplanes. The goal is to make flying as easy as driving a car—while maintaining a high bar for safety. Here’s a video that shows a bit of our hardware and quite a bit of our software: <a href="https://youtu.be/PGJUGUceu8A" rel="nofollow">https://youtu.be/PGJUGUceu8A</a></p><p>In the US, trips that are 50-300 miles are almost all done by car because that distance is too short for commercial airlines and too far for public transportation. Thanks to the Wright Brothers we've had aerial transport for over 100 years. The US has over 19,000 airports, and large commercial airplane technology has developed to the point that the planes practically fly themselves. If we already have the infrastructure and the technology, why isn't everyone flying planes?</p><p>The problem is that small airplane technology hasn’t innovated and is stuck in the past. Flying a small airplane is complicated, mentally taxing, and dangerous—about 28x more dangerous than driving a car. Outdated airplanes, coupled with outdated flight controls, lead to regular accidents, often due to some form of loss of control. The planes are expensive and margins are small. There is no incentive to innovate within the current market, so we are looking at the new, untapped market of those who don’t think about flying as an option today and making it an option.</p><p>I first came across this when I learned to fly in 2020. I was learning in a “modern” GA airplane but was immediately struck by the fact that an airplane built in 2018 did not have an engine computer and there was a manual level to control the fuel/air mixture ratio. Starting it on a hot day was like starting a stubborn lawn mower. On top of that, my instructor was telling me all the various ways I could kill myself if I’m not running at 100% concentration for hours on end. This just didn’t sit right with me.</p><p>At the time I was working at SpaceX as an avionics engineer, leading the development of the avionics for the fairing recovery program. I also built autonomous aircraft when I was a student at Cornell, where I got a degree in electrical and computer engineering. It was clear to me that the core problem is that airplanes are too unsafe and too complicated to operate which is keeping too many people out of aviation. So, I decided to leave SpaceX and was joined by my long-time friend Brendan (he was a software engineer at Apple at the time; we built autonomous aircraft together at Cornell) to start Airhart to tackle this problem and make flying safer and more accessible.</p><p>We are developing a full hardware and software package to change how people fly airplanes. It’s a fly-by-wire control system, meaning instead of mechanical linkages between the pilot’s control stick and the control surfaces, it’s a joystick that sends digital commands to a computer that then moves the control surfaces accordingly with servo actuators. We’re developing all of the hardware ourselves: the computers, the sensors, the actuators–and all of the software that actually does the control. But it’s not just fly-by-wire. On top of it, we are implementing a simplified control scheme that reduces flying the airplane to just one action to perform one maneuver.</p><p>For readers who aren’t pilots: all flying is basically coordinating the aircraft pitch, roll, yaw, and throttle to coordinate actions. Something as simple as a level turn to the right means you have to 1) roll the airplane, 2) use your feet on the rudder pedals to keep the turn coordinated, 3) pull back to increase your lift since you are now losing lift in a bank, 4) monitor your airspeed (especially if at slow speeds when coming in to land), 5) monitor your altitude as you’re adjusting your lift in (3), 6) monitor your turn coordination as you adjust it in (2). You are now established in a turn. To return to flying straight and level do those in reverse. And while doing all this, you need to be navigating through complex airpaces and talking to air traffic control over 1940s radio technology. All this together makes it very hard to fly and very easy for a pilot (especially a new pilot) to lose control of the airplane, which is still the leading cause of fatalities in general aviation.</p><p>With Airhart Assist (that’s what we call our system), you just push a control stick to the right and the flight computers do all those steps to put you into a coordinated level turn.</p><p>So, how does this actually work?</p><p>The force-feedback joystick in the plane sends its position to a flight controller (actually 3 that work in parallel for safety and redundancy, more on that later). The flight controller interprets the position as a turn rate or climb rate command (for left/right or forward/back). The flight controller also reads a bunch of sensors (gyroscope, accelerometer, magnetometer, air pressure, GPS, etc) to develop an accurate estimate of the airplane’s state: roll, pitch, yaw, velocity, position, etc. Using the current state from the sensor fusion algorithms and the desired state from the joystick, the controller does a bunch of aerodynamics and control theory math to compute the control surface position necessary to bring the aircraft to the desired state. Mixed into this is error checking, envelope protection, and other various safety measures to make sure the aircraft never enters an unsafe state.</p><p>Unlike a traditional airplane, it becomes impossible to command the airplane into a stall, a spin, unsafe attitudes, or other bad states. This is the key to the safety of the system: it prevents the common mistakes that pilots make that lead to disastrous consequences.</p><p>To make sure that this system is always functioning, everything is single-fault tolerant. That means that there are no single points of failure. Any fault that might occur–a broken wire, a fried resistor, a bitflip in a processor, a random hang in a kernel–does not affect the functionality of the system. This is achieved by having three flight controllers that take in information from two different sets of sensors (we call them “strings”), independently compute the desired actions to take, and vote on what to do. Each string has its own power source, backup battery, networking hardware, and set of critical sensors.</p><p>The only real single point of failure is the engine. We only have one, though the engine itself has redundant ignition systems, fuel pumps, controllers, etc. If the engine were to die, the batteries would keep the system running for ~30 minutes, giving you time to make an emergency landing. If the pilot somehow becomes incapacitated, any passenger can initiate an autonomous emergency landing. And if many things go wrong and the system does fail, there’s a full airframe parachute that can be activated to bring the airplane safely to the ground.</p><p>A lot of people will likely wonder: “isn’t removing stick and rudder skills going to make worse pilots”? Short answer: no. The core of what makes a good pilot isn’t stick and rudder skills; it’s good decision making and risk management. For single pilots in GA, it’s even more important. So we are building a system that will give our pilots the tools to focus entirely on decision making and risk management and remove the distraction of stick and rudder that creates so many problems today. We think stick and rudder skills are definitely a necessity for airline pilots flying hundreds of people on board for the extremely rare cases where emergencies do happen and many people's lives are at risk, but not for an average person flying a four seat airplane to go on a weekend trip to the mountains. Our system makes it impossible to lose control of the airplane, potentially solving 80% of today’s fatal accidents in general aviation.</p><p>Fly-by-wire systems typically cost millions of dollars. We intend to build it for much less. How? By leveraging automotive grade components, clever sensor fusion math so that we can use MEMS gyroscopes that cost &lt;$100 instead of laser-ring gyros that cost $1000 if not $10k, and by a first principles approach to the design of our system. This requires that we build a lot of our own hardware. We’ve developed our own control surface actuators, our own display assemblies, we’re developing our own radios and GPS hardware (an aviation grade GPS can cost upwards of $10k, but it’s the same hardware as in a $20 consumer grade GPS).</p><p>To take advantage of this automotive style approach requires scale. Enter the final third of the problem: flying isn’t sexy. Modern airplanes look like they are from the 90s. With our first airplane, the Airhart Sling, we are redesigning the entire UI/UX of the flight deck to make it as easy as possible to use, redesigning the cabin to feel much more like a luxury car than an airplane today, and integrating Airhart Assist to make flying much more accessible and much more inviting. You can see previews of the Airhart Sling on our website, <a href="https://www.airhartaero.com/">https://www.airhartaero.com/</a>. The sexiness of design is extremely important for the economies of scale of an automotive-style approach to work.</p><p>There’s a plethora of other problems that make flying cumbersome: weight and balance worksheets, complicated route planning, talking to ATC, lengthy preflight checks, a fractured system of FBOs, difficult access to instruction, the list goes on. We are working on all of these too, but no amount of extra UI features can solve the fundamental problem that aviating itself is hard. So that’s what we’re solving first.</p><p>We want people who don’t think about airplanes as a mode of transportation to start flying and are hoping that Airhart will pave the way. Whether you fly planes today or not, I’d love to hear your thoughts. This is a very exciting topic with lots to discuss so I’m very much looking forward to the conversation!</p></div></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A new type of neural network is more interpretable (131 pts)]]></title>
            <link>https://spectrum.ieee.org/kan-neural-network</link>
            <guid>41162676</guid>
            <pubDate>Mon, 05 Aug 2024 16:15:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spectrum.ieee.org/kan-neural-network">https://spectrum.ieee.org/kan-neural-network</a>, See on <a href="https://news.ycombinator.com/item?id=41162676">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-headline="A New Type of Neural Network Is More Interpretable"><p><a href="https://spectrum.ieee.org/what-is-deep-learning" target="_blank">Artificial neural networks</a>—algorithms inspired by biological brains—are at the center of modern <a href="https://spectrum.ieee.org/topic/artificial-intelligence/">artificial intelligence</a>, behind both chatbots and image generators. But with their many neurons, they can be <a href="https://www.nature.com/articles/d41586-024-01314-y" rel="noopener noreferrer" target="_blank">black boxes</a>, their inner workings uninterpretable to users. </p><p>Researchers have now created a fundamentally new way to make <a href="https://spectrum.ieee.org/tag/neural-networks">neural networks</a> that in some ways surpasses traditional systems. These new networks are more interpretable and also more accurate, proponents say, even when they’re smaller. Their developers say the way they learn to represent physics data concisely could help scientists uncover new laws of nature. </p><p>“It’s great to see that there is a new architecture on the table.” <strong></strong><strong>—Brice Ménard, Johns Hopkins University</strong><strong></strong></p><p>For the past decade or more, engineers have mostly tweaked neural-network designs through trial and error, says Brice Ménard, a physicist at Johns Hopkins University who studies how neural networks operate but was not involved in the new work, which <a href="https://arxiv.org/abs/2404.19756" rel="noopener noreferrer" target="_blank">was posted on arXiv</a> in April. “It’s great to see that there is a new architecture on the table,” he says, especially one designed from first principles.</p><p>One way to think of neural networks is by analogy with neurons, or nodes, and synapses, or connections between those nodes. In traditional neural networks, called multi-layer perceptrons (MLPs), each synapse learns a weight—a number that determines <em>how strong</em> the connection is between those two neurons. The neurons are arranged in layers, such that a neuron from one layer takes input signals from the neurons in the previous layer, weighted by the strength of their synaptic connection. Each neuron then applies a simple function to the sum total of its inputs, called an activation function.</p><p><img alt="black text on a white background with red and blue lines connecting on the left and black lines connecting on the right " data-rm-shortcode-id="16c6aa72c8d9515c82ff8f3ee8448e30" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/black-text-on-a-white-background-with-red-and-blue-lines-connecting-on-the-left-and-black-lines-connecting-on-the-right.png?id=53100120&amp;width=980" height="1128" id="e42c9" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/black-text-on-a-white-background-with-red-and-blue-lines-connecting-on-the-left-and-black-lines-connecting-on-the-right.png?id=53100120&amp;width=980" width="1768"><small placeholder="Add Photo Caption...">In traditional neural networks, sometimes called multi-layer perceptrons [left], each synapse learns a number called a weight, and each neuron applies a simple function to the sum of its inputs. In the new Kolmogorov-Arnold architecture [right], each synapse learns a function, and the neurons sum the outputs of those functions.</small><small placeholder="Add Photo Credit...">The NSF Institute for Artificial Intelligence and Fundamental Interactions</small></p><p>In the new architecture, the synapses play a more complex role. Instead of simply learning <em>how strong</em> the connection between two neurons is, they learn the <em>full nature</em> of that connection—the function that maps input to output. Unlike the activation function used by neurons in the traditional architecture, this function could be more complex—in fact a “spline” or combination of several functions—and is different in each instance. Neurons, on the other hand, become simpler—they just sum the outputs of all their preceding synapses. The new networks are called Kolmogorov-Arnold Networks (KANs), after two mathematicians who studied how functions could be combined. The idea is that KANs would provide greater flexibility when learning to represent data, while using fewer learned parameters. </p><p>“It’s like an alien life that looks at things from a different perspective but is also kind of understandable to humans.” <strong>—Ziming Liu, Massachusetts Institute of Technology</strong></p><p><span></span>The researchers tested their KANs on relatively simple scientific tasks. In some experiments, they took simple physical laws, such as the velocity with which two relativistic-speed objects pass each other. They used these equations to generate input-output data points, then, for each physics function, trained a network on some of the data and tested it on the rest. They found that increasing the size of KANs improves their performance at a faster rate than increasing the size of MLPs did. When solving partial differential equations, a KAN was 100 times as accurate as an MLP that had 100 times as many parameters.</p><p>In another experiment, they trained networks to predict one attribute of topological knots, called their signature, based on other attributes of the knots. An MLP achieved 78 percent test accuracy using about 300,000 parameters, while a KAN achieved 81.6 percent test accuracy using only about 200 parameters.</p><p>What’s more, the researchers could visually map out the KANs and look at the shapes of the activation functions, as well as the importance of each connection. Either manually or automatically they could prune weak connections and replace some activation functions with simpler ones, like sine or exponential functions. Then they could summarize the entire KAN in an intuitive one-line function (including all the component activation functions), in some cases perfectly reconstructing the physics function that created the dataset.</p><p>“In the future, we hope that it can be a <a href="https://spectrum.ieee.org/ai-for-science" target="_self">useful tool for everyday scientific research</a>,” says Ziming Liu, a computer scientist at the Massachusetts Institute of Technology and the paper’s first author. “Given a dataset we don’t know how to interpret, we just throw it to a KAN, and it can <a href="https://www.nature.com/articles/d41586-023-03596-0" target="_blank">generate some hypothesis</a> for you. You just stare at the brain [the KAN diagram] and you can even perform surgery on that if you want.” You might get a tidy function. “It’s like an alien life that looks at things from a different perspective but is also kind of understandable to humans.”</p><p>Dozens of papers have already cited the KAN preprint. “It seemed very exciting the moment that I saw it,” says Alexander Bodner, an undergraduate student of computer science at the University of San Andrés, in Argentina. Within a week, he and three classmates had combined KANs with convolutional neural networks, or CNNs, a popular architecture for processing images. They tested their <a href="https://arxiv.org/abs/2406.13155" target="_blank">Convolutional KANs</a> on their ability to categorize handwritten digits or pieces of clothing. The best one approximately matched the performance of a traditional CNN (99 percent accuracy for both networks on digits, 90 percent for both on clothing) but using about 60 percent fewer parameters. The datasets were simple, but Bodner says other teams with more computing power have begun scaling up the networks. Other people are combining KANs with transformers, an architecture popular in <a href="https://www.nature.com/articles/d41586-021-00530-0" target="_blank">large language models</a>.</p><p>One downside of KANs is that they take longer per parameter to train—in part because they can’t take advantage of <a href="https://spectrum.ieee.org/tag/gpus">GPUs</a>. But they need fewer parameters. Liu notes that even if KANs don’t replace giant CNNs and transformers for processing images and language, training time won’t be an issue at the smaller scale of many physics problems. He’s looking at ways for experts to insert their prior knowledge into KANs—by manually choosing activation functions, say—and to easily extract knowledge from them using a simple interface. Someday, he says, KANs could help physicists discover high-temperature <a href="https://spectrum.ieee.org/tag/superconductors">superconductors</a> or ways to control nuclear fusion.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Andy Warhol's lost Amiga art found (288 pts)]]></title>
            <link>https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/</link>
            <guid>41162311</guid>
            <pubDate>Mon, 05 Aug 2024 15:33:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/">https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/</a>, See on <a href="https://news.ycombinator.com/item?id=41162311">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>After 39 years, Andy Warhol’s lost Amiga art has been found. And it’s for sale. Details of the reemergence help to shed light on an earlier discovery from about a decade ago. And those details come from the very person who taught Andy Warhol how to use a computer. In this blog post, I’ll put these discoveries in context, and offer some thoughts from both an art teacher and a sales engineer.</p><h2>The lost Andy Warhol image of Debbie Harry</h2><figure id="attachment_35575" aria-describedby="caption-attachment-35575"><a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/andy-warhol-debbie-harry-amiga-art/" rel="attachment wp-att-35575"><img fetchpriority="high" decoding="async" src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?resize=294%2C300&amp;ssl=1" alt="Debbie Harry by Andy Warhol, Amiga art from 1985" width="294" height="300" srcset="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?resize=294%2C300&amp;ssl=1 294w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?resize=55%2C55&amp;ssl=1 55w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-debbie-harry-amiga-art.jpg?w=490&amp;ssl=1 490w" sizes="(max-width: 294px) 100vw, 294px" data-recalc-dims="1"></a><figcaption id="caption-attachment-35575">The original digital copy of this famous Andy Warhol-created image of Debbie Harry resurfaced in July 2024.</figcaption></figure><p>Commodore famously commissioned Andy Warhol to demonstrate the artistic capabilities of its new <a href="https://dfarq.homeip.net/amiga-1000-ten-years-ahead-of-its-time/">Amiga 1000 computer</a> in 1985. As part of his demonstration, Warhol created some digital art images, including a self-portrait of himself sitting in front of the computer, which in turn was displaying the self portrait. Another image he created was a famous portrait of Debbie Harry, the photogenic lead singer of the New Wave band Blondie.</p><p>In recounting the event, Debbie Harry said in her autobiography that she had a copy of the images from the event, and as far as she knew, only one other person had a copy. She did not identify the other person.</p><h3>The unnamed other person</h3><p>In July 2024, former Commodore engineer <a href="https://www.artnews.com/art-news/news/andy-warhol-lost-portrait-blondie-debbie-harry-resurfaces-1234713192/">Jeff Bruette came forward and said he owns a print of the image Andy Warhol created</a> at the event, and a signed floppy disk containing eight images that Andy Warhol created that day. He said he’s had them on display in his home for about 39 years.</p><p>Some of the accounts of the Warhol art resurfacing describe Bruette as a technician, and although that was essentially the role he was serving at the event, he was much more than a technician. He was a long time Commodore employee, and he programmed two popular early Commodore 64 games that Commodore distributed commercially, Gorf and Wizard of Wor. Bruette also acted as the product manager of the graphics software Warhol used.</p><p>He was more than a technician to Andy Warhol as well. He was the one who taught Andy Warhol how to use an Amiga. For that matter, he probably taught Andy Warhol almost everything he knew about computers in general, not just Amigas.</p><h2>Andy Warhol’s demonstration Amiga art</h2><p>The digital images Andy Warhol created are rudimentary by today’s standards, and in some ways, perhaps less ambitious then some of the thumbnails I create for my blog posts. But this was 39 years ago, and I have much better tools than he did. The maximum resolution he had to work with was 640 pixels in one direction and 400 pixels the other direction. And while he had 4,096 colors to choose from, he could only use 32 of them at a time. He had a digital camera available to him, but it wasn’t a digital camera in any modern sense. It was really best suited to taking monochromatic images.</p><p>To a casual viewer, they look like low resolution images with a very limited number of colors, and it’s not completely unfair to say they bear some resemblance to something my kids would have created in Microsoft Paint when they were little.</p><h3>An art teacher’s impression</h3><p>But when I showed the images to my wife, a former high school art teacher, the first thing she noticed was his choice of colors. He deliberately chose colors that contrasted with each other, and the other colors he used were colors you would get from mixing two or more of the other colors he used. Rule number one of painting, she said, is to never use black or brown, but make your own from the other colors you’re using. Warhol’s images contain odd shades that result from mixing other colors in the image together.</p><p>When you look at Andy Warhol paintings, his style suited these specific tools. He often worked from photographs, creating stark images containing bold flood fills with only a few colors. Sometimes he would cut up photographs, or have someone else cut up the photographs, then he would arrange the pieces and then paint what he saw.</p><p>With the Amiga, he could do all of this digitally. So the choice of Andy Warhol to demonstrate how to use the machine was a brilliant idea. This computer with advanced graphics capabilities for its time, and the ability to multitask and switch between different tools so he could cut up and resize images and then paste the result into the image he was working on couldn’t have suited him any better if he’d designed it himself.</p><p>Problem was, he didn’t know how to use a computer.</p><h3>Andy Warhol’s body language</h3><figure id="attachment_35581" aria-describedby="caption-attachment-35581"><a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/andy-warhol-self-portrait-amiga-art-2/" rel="attachment wp-att-35581"><img decoding="async" src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?resize=195%2C300&amp;ssl=1" data-src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?resize=195%2C300&amp;ssl=1" alt="Andy Warhol self portrait with Amiga computer" width="195" height="300" data-srcset="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?resize=195%2C300&amp;ssl=1 195w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/andy-warhol-self-portrait-amiga-art-2.jpg?w=416&amp;ssl=1 416w" data-sizes="(max-width: 195px) 100vw, 195px" data-recalc-dims="1"></a><figcaption id="caption-attachment-35581">Note how Warhol is holding the mouse in this self portrait, keeping his fingers clear of the mouse buttons.</figcaption></figure><p>In all of the photographs I have seen of Andy Warhol with an Amiga, I noticed something. He is never, ever holding the mouse the way I would hold it. He has a death grip on the sides with his thumb on one side and his index and pinky finger on the other. And then he has his pointer and middle fingers curled up, as far away from the two mouse buttons and he can possibly get them while still being able to maintain the death grip on the mouse body. It betrays a fear of accidentally clicking either of the mouse buttons and another fear of accidentally dropping the mouse, or perhaps even accidentally moving the mouse.</p><h3>Warhol’s lament</h3><p>I read somewhere that Andy Warhol didn’t think he was very good at demonstrating how to use the computer, and he wished he could get good at it, because it seemed like a really good way to make money. I asked Jeff Bruette about that, and he said that was consistent with his experience with Warhol. “He saw the things that [AmigaWorld magazine’s art director] was able to create and how I could fluidly click the tools, colors, and menus to create things. He was completely inexperienced with computers and struggled with the process,” Bruette said.</p><p>“In fact, we would go through things together in the morning. After breaking for lunch he’d need a refresher on the difference between the right and left mouse buttons. True story,” he added.</p><p>For those unfamiliar with the Amiga, the left mouse button works like the left mouse button in Windows and other operating systems. The right mouse button activated the pull-down menus at the top of the screen. Conceptually, it was similar to context menus in today’s operating systems.</p><h3>A modern sales engineer’s critique</h3><p>Warhol’s results in creating his computer art were inconsistent. The famous image of Debbie Harry was not the result of the live demonstration. It came from a rehearsal earlier in the day. When he tried to recreate the image live with an audience, the result didn’t look like an Andy Warhol painting. Bruette shared the image in a private group, so I don’t feel like I am at liberty to share it, but I’ll share the story.</p><p>The lighting conditions were different during the event than they had been at rehearsal, so the photo he started with had different contrast. The flood fill to the right of Debbie Harry went fine. When he filled her hair, it was fine on the right side of the image, but not so good on the left. And exactly zero of his other flood fills did what he intended. Without the level of undo that modern paint programs have, he didn’t have an easy way to correct even that first mistake. His efforts to correct it just ended up blowing out her face. Instead of looking like an Andy Warhol painting of Debbie Harry, it looked like what you’d get if you told an impressionist to paint a woman with long hair.</p><p>In my day job, one of my responsibilities happens to be giving product demos. I’ve experienced demos where one mistake compounds the next. You learn to roll with it, but it takes practice.</p><p>When Commodore released the video of the event, they spliced in the image from the rehearsal session.</p><h3>What about flood fills?</h3><p>I’ve heard several stories from other Commodore engineers about how the flood fill function in the software they were using would crash the machine. I’m pretty sure those stories have even ended up in books about Commodore. Bruette said the flood fills were working in the versions of the software Warhol had, and that’s pretty clear even from the images in Warhol’s estate.</p><p>To create Warhol-style digital art, you need to be able to capture an image from a camera, resize it, copy and paste it, select your colors, and do flood fills on it. In a pinch you can get by without resizing and copying and pasting, but not having flood fills would be a showstopper.</p><h2>How the earlier discovery relates</h2><figure id="attachment_35582" aria-describedby="caption-attachment-35582"><a href="https://dfarq.homeip.net/andy-warhols-lost-amiga-art-found/warhol-self-portrait-1985/" rel="attachment wp-att-35582"><img decoding="async" src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?resize=300%2C225&amp;ssl=1" data-src="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?resize=300%2C225&amp;ssl=1" alt="A self portrait from Warhol's own collection" width="300" height="225" data-srcset="https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/dfarq.homeip.net/wp-content/uploads/2024/08/warhol-self-portrait-1985.jpg?w=534&amp;ssl=1 534w" data-sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1"></a><figcaption id="caption-attachment-35582">In this portion of an image recovered from Warhol’s estate in 2014, you can see how he was messing around with copying and pasting images and flood fills, two techniques he widely used in his other art.</figcaption></figure><p>In 2014, a series of images was recovered from disks found in Andy Warhol’s estate. His personal effects included two pre-production Amiga computers and a collection of disks containing not just the files he created, but also the software he used to create those images, including a previously undiscovered early version of the operating system. In <a href="https://dfarq.homeip.net/the-warhol-amiga-discovery-in-context/">a blog post I wrote at the time</a>, I speculated that the images were the result of him trying to learn how to use the computer.</p><p>Looking at the images again, I think they were more than that. He was experimenting with techniques. One of the images appears to be a photograph of himself where he clicked around with the fill function. But when you look at the image more closely, you can see where he had three different images of himself of differing sizes, and he superimposed the three, then he started messing around with fills.</p><h3>Insights into how (and what) Warhol learned</h3><p>I can almost see and hear Jeff Bruette explaining the capabilities of the computer to Andy Warhol, and then him walking through what Bruette had just described, trying to create in his own style using what he had just learned.</p><p>That’s because I had to do something similar. The discomfort level in the photographs of Andy Warhol with the computer remind me of something. I was in the odd position of teaching my own teachers about computers from the time I was a teenager into my mid 20s. Many of them had the same level of discomfort with the mouse. I would fire up Solitaire and have them play that to get used to clicking and dragging. Bruette didn’t have that luxury when tutoring Warhol.</p><h2>The lost opportunity</h2><p>I always wished Commodore had <a href="https://dfarq.homeip.net/the-trade-off-of-fidelity-and-convenience-in-marketing-and-how-it-doomed-my-favorite-company/">pursued the Andy Warhol connection further</a>. Now I understand why it didn’t happen. I don’t think Commodore marketing recognized the opportunity, but I also don’t think Andy Warhol was comfortable with it. It wasn’t the same as sitting William Shatner down in front of a VIC-20 with a simulated screen on the TV and showing him how to position his hands so it looked like he was typing and showing him where the cameras were so he could make sure he was looking at the camera while he was smiling. He was trying to do it right, he struggled to do it live, and he gave up.</p><p>He was trying to be a modern day sales engineer, but without the benefit of the professional training that I received. I also had at least five years of professional experience with the product I was demonstrating before gaining the title of sales engineer. I also sometimes had to give product demos at another company, a company whose software was not as far along, and where I had about the same level of experience and as Andy Warhol did, and let’s just say that didn’t go as well.</p><h3>A possible workaround</h3><p>But they had options. They could have done a Shatner-like maneuver in print advertising, having Warhol mime in front of the computer, with a copy of the image on screen but the mouse unplugged, just to make it look like he was producing it live. And then they could have added some text about how this new computer is the first one ever that works the way Andy Warhol does.</p><p>At any rate, I think it’s fantastic that the images Andy Warhol created on that day survive, we now know where the copy is, and the person who preserved them for 39 years will have a chance to get them into the hands of someone who will enjoy them, and use the proceeds to fund his retirement. That sounds like a win all around to me, and it closes the loop on some details of Andy Warhol’s involvement with the Amiga computer.</p><div itemtype="http://schema.org/Person" itemscope="" itemprop="author"><p>David Farquhar is a computer security professional, entrepreneur, and author. He started his career as a part-time computer technician in 1994, worked his way up to system administrator by 1997, and has specialized in vulnerability management since 2013. He invests in real estate on the side and his hobbies include O gauge trains, baseball cards, and retro computers and video games. A University of Missouri graduate, he holds CISSP and Security+ certifications. He lives in St. Louis with his family.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A 20-something dethroned dotcom CEO that went to work the counter at McDonald's (2000) (108 pts)]]></title>
            <link>https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/</link>
            <guid>41161947</guid>
            <pubDate>Mon, 05 Aug 2024 14:55:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/">https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/</a>, See on <a href="https://news.ycombinator.com/item?id=41161947">Hacker News</a></p>
<div id="readability-page-1" class="page">

<br>
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/">heiferman.com</a> / <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/">my photo of the day</a><p><span size="5" color="#000000">i was a 20-something dethroned dotcom ceo that
went to work the counter at&nbsp; mcdonald's</span></p>
<p><span color="#000000">by scott heiferman (12/00)</span></p>

<p><span color="#000000"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/fry_guy4.jpg" width="360" height="272"></span></p>

<p><span color="#000000"><span size="5">background:</span>5/94: graduated from the university of iowa<br>
5/94-4/95: <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/sonycard.htm">"interactive marketing frontiersman"
at sony</a><br>
4/95-10/99: founder/ceo <a href="https://web.archive.org/web/20040616091238/http://www.i-traffic.com/">i-traffic</a>
(acquired by agency.com 10/99)<br>
10/99-10/01: chairman, i-traffic (an agency.com company)<br>
10/00-10/00:&nbsp; counterperson, mcdonald's (4th &amp; broadway, nyc)<br>
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/scott">more about me</a></span></p>

<p><span color="#000000"><span size="5">why i got a job at mcdonald's:</span> </span></p>
<p><span color="#000000">i spend a lot of time with <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/seth6million.htm">bankers</a>, <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/europeanstyling.htm">lawyers</a>,
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/saul.htm">
internet freaks</a>, <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/bubba-drain.htm"> corporate wonks</a>, and other people living
strange lives.&nbsp; as a good marketing guy, that's a bad thing.&nbsp; and as a
practicing anti-consumerist, that's a bad thing.&nbsp; i got a job at mcdonald's
to help get back in touch with the real world.&nbsp; also, after over 6 grueling
years in the internet whirlwind, i wanted to experience a profitable,
well-oiled, multi-billion-dollar machine. and&nbsp; i deserved a break today. </span></p>

<p><span size="5" color="#000000">how i got the job:</span></p>
<p><span color="#000000"><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/app.jpg"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/app_small.jpg" alt="app.jpg (40139 bytes)" width="250" height="156"></a><p>

i walked in, filled out an application, and was interviewed.&nbsp; i was
truthful.&nbsp; in my interview, the manager (ralph) asked if i can handle a
fast-paced, intense environment.&nbsp; i said yes.&nbsp; he looked at my resume and asked about my current part-time job as chairman at i-traffic.&nbsp; i said,
"it's an internet thing."&nbsp; he said "ok" and then asked
me for my waist size.</p></span></p>

<p><span size="5" color="#000000">a few observations:</span></p>
<p><span color="#000000">1. people like the "dollar menu".&nbsp; the
dollar menu consists of about a dozen items at mcdonald's that sell for a
dollar.&nbsp; not 99 cents, but one dollar.&nbsp; most of these items had had
existed elsewhere on the menu for about a dollar. mcdonald's has done a good job
of keeping their menu relatively simple and short, but people clearly respond to
the ultra-simplicity of the dollar menu.&nbsp; most people weren't primarily
ordering from the dollar menu because they were overwhelmed by the wider menu,
but because they perceived it to be the best value.&nbsp; someone call <a href="https://web.archive.org/web/20040616091238/http://abcnews.go.com/onair/ABCNEWSspecials/JohnStossel.html"> john
stossel</a>... but the dollar menu isn't always the best value. </span>interestingly,
"dollar stores" preceded mcdonald's "dollar menu" ---&nbsp; <span color="#000000">it's
fun to see "blue chip" kellogg-trained marketers from&nbsp;
mcdonald's borrow strategy from sleaze-level marketers.&nbsp; </span></p>
<p><span color="#000000">2. $5.75 ain't much. $5.75/hour X 40 hours/week X 52
weeks/year = $11,960.&nbsp; that's before taxes are taken out.&nbsp; some people said
it was disrespectful for me to take a job at mcdonalds --- i didn't need the
money, and they thought
that i was making fun of people that work there.&nbsp; the opposite is true:&nbsp; i gained a bucket of respect for people
that bust their butt for such low pay.&nbsp; it's one thing to scan past stats
about americans that make $12,000 per year -- or read about them in <a href="https://web.archive.org/web/20040616091238/http://www.nytimes.com/2000/12/12/nyregion/12SHEE.html">the
paper</a>.&nbsp; but, to actually work a tough fry-heaving, mcnugget-wielding
6-hour shift --- and get home smelling like those fries and mcnuggets -- and
realize that you only made about $30 that day... that's a serious
eye-opener.&nbsp; interpret as you see fit.</span></p>
<p><span color="#000000">3.&nbsp; i was never told to treat customers
well.&nbsp; correction:&nbsp; i was never told by management to treat customers
well.&nbsp;&nbsp; before i started the job, i had read on the mcdonald's website
that "<a href="https://web.archive.org/web/20040616091238/http://www.mcdonalds.com/countries/usa/careers/regional/expect/index.html">our
crewmembers make each customer feel like a welcomed guest</a>."&nbsp; i had
even noticed a few months before that mcdonald's even went so far as to change
their <a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/smilogos">logo &amp; tagline to feature
the message "we love to see you smile."</a>  i expected to be
specifically, officially instructed to smile and make customers feel like a
welcomed guest.&nbsp; well, as any patron of a manhattan mcdonald's knows, there
ain't much feel-good from the counter staff.&nbsp; my co-workers were downright
rude to customers.&nbsp; i got funny looks from my co-workers when i was
friendly with customers.&nbsp; they must not have seen the logo or tagline or
website.</span></p>
<p><span color="#000000">4.&nbsp; nobody thanked me.&nbsp; i worked hard.&nbsp;
i got paid peanuts.&nbsp; i even ate mcdonald's food during my break (deducted
from my pay).&nbsp; it was intense:&nbsp; the cash register was complex, people
want their food NOW, the lines get deep, the mcflurry must be made just
right.&nbsp; i was trying hard and i was doing an ok job.&nbsp; now, i've been
the leader/manager for most of my life.&nbsp; i've had plenty of crap jobs, but
i've been the boss for the past few years.&nbsp; i faithfully read my fast
company magazine and my harvard business review.&nbsp; i've been taught
countless times the value of a leader/manager showing appreciation for people's
effort.&nbsp; however, my instinct has often been that showing appreciation
really isn't too necessary for good people.&nbsp; they just take pride in a job
well done --- and, anyway, they can read my mind and see the appreciation.&nbsp;
well, from day 1 at mcdonald's, i was yearning for someone there to say
"thanks".&nbsp; even a "you're doing ok" would
suffice.&nbsp; but, no.&nbsp; neither management experience -- nor reading about
management --- teaches this lesson as well as being an under-appreciated
employee.</span></p>
<p><span color="#000000">5. most of my mcdonald's co-workers did their jobs much
better than i ever could.&nbsp; they just seemed quicker.&nbsp; they had various
talents and intuition that i don't have.&nbsp;&nbsp;&nbsp;</span></p>
<p><span color="#000000">6.&nbsp; the fry basket burns skin.&nbsp;&nbsp;<br>
<img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/DSCF0003.JPG" width="247" height="189"><br>
</span>i got burned.</p>

<p><span size="5">other&nbsp;</span></p>
<p><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/fry_guy7.jpg"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/fry_guy7_small1.jpg" alt="fry_guy7.jpg (131659 bytes)" width="250" height="187"></a>&nbsp;&nbsp;&nbsp;
<a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/fry_guy2.jpg"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/fry_guy2_small1.jpg" alt="fry_guy2.jpg (123668 bytes)" width="250" height="187"></a></p>

<p><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/check.jpg"><span color="#000000"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/check_small.jpg" alt="check.jpg (41341 bytes)" width="250" height="203"><br>
</span></a><span color="#000000">i got paid.</span></p>



<p><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/mcd/crains2.jpg"><span color="#000000"><img src="https://web.archive.org/web/20040616091238im_/http://www.heiferman.com/mcd/crains2_small.jpg" width="250" height="344"><br>
</span></a><span color="#000000">crain's called me a couple days before i started at mcdonalds.&nbsp; they were doing a
story on post-acquisition internet ceo's in new york.&nbsp; i told
them that i was starting a job at mcdonald's and didn't say much else.&nbsp; i let them take my picture
after i got off work one day.&nbsp;they put a strange spin on the piece.&nbsp;
most annoying were the people who thought that this was a publicity stunt.</span></p>

<br>


<p><span size="4"><a href="https://web.archive.org/web/20040616091238/http://www.heiferman.com/">heiferman.com photo of the day</a></span></p><span size="4">









</span></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A cryptographically secure bootloader for RISC-V in Rust (111 pts)]]></title>
            <link>https://www.codethink.co.uk/articles/2024/secure_bootloader/</link>
            <guid>41161580</guid>
            <pubDate>Mon, 05 Aug 2024 14:18:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.codethink.co.uk/articles/2024/secure_bootloader/">https://www.codethink.co.uk/articles/2024/secure_bootloader/</a>, See on <a href="https://news.ycombinator.com/item?id=41161580">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
        <p><a href="https://github.com/LawrenceHunter/SentinelBoot">SentinelBoot</a> is a demonstrative, cryptographically secure <a href="https://riscv.org/">RISC-V</a> bootloader written in <a href="https://www.rust-lang.org/">Rust</a>. This project forms a final-year project at <a href="https://www.manchester.ac.uk/">The University of Manchester</a> sponsored by Codethink.</p>
<h2>Motivation</h2>
<p>Memory safety is a persistent issue in software, especially system software, such as bootloaders. Implementing some kinds of run-time safety checks can be very computationally expensive, as such, programming languages which employ them to promote memory safety are incompatible with system software due to performance degradation<sup id="fnref:1"><a href="#fn:1">1</a></sup>. That said, exploiting vulnerabilities that arise from a lack of memory safety leads to a myriad of issues, including data leaks, denial-of-service, and arbitrary code execution<sup id="fnref:2"><a href="#fn:2">2</a></sup>. Until recently, there has been no viable memory-safe alternative to C/C++/Assembly for such applications. However, the Rust programming language, which performs static analysis at compile time, has been presented as a viable alternative and has begun being explored for such applications, with projects such as <a href="https://rust-for-linux.com/">Rust for Linux</a>.</p>
<p>SentinelBoot is a cryptographically secure bootloader aimed at enhancing boot flow safety of RISC-V through memory-safe principles, predominantly leveraging the Rust programming language with its ownership, borrowing, and lifetime constraints. Additionally, SentinelBoot employs public-key cryptography to verify the integrity of a booted kernel (digital signature), by the use of the RISC-V Vector Cryptography extension, establishing secure boot functionality. SentinelBoot achieves these objectives with a 20.1% hashing overhead (approximately 0.27s additional runtime) when compared to an example U-Boot binary (mainline at time of development), and produces a resulting binary one-tenth the size of an example U-Boot binary with half the memory footprint.</p>
<h2>Background</h2>
<p>There are three main principles employed by Rust that aid in reducing the likelihood of memory safety vulnerabilities. Note, however, the keyword ‘reduce’: a developer can overrule these checks, and even then, vulnerabilities can still exist in allegedly 100% safe, non-overruled Rust code, they’re just less likely<sup id="fnref:3"><a href="#fn:3">3</a></sup>. The three principles are:</p>
<ol>
<li>
<p>Ownership: aims to ensure that a piece of memory has a single 'owner'. This is primarily to allow automatic deallocation when the owner goes out of scope, helping to prevent vulnerabilities such as memory leaks.</p>
</li>
<li>
<p>Borrowing: allows a variable that does not own a certain piece of memory to access the memory location, by 'borrowing' from the owner, helping to prevent vulnerabilities such as data races due to the two types of borrowing that exist:</p>
<ul>
<li>
<p>Non-mutable (shared) borrows, where the borrower can read the data in the memory location but not write to it, any number of non-mutable borrows can exist simultaneously.</p>
</li>
<li>
<p>Mutable (exclusive) borrows, where the borrower can read and write to the memory location. If a mutable borrow exists, no other borrows (mutable or non-mutable) may exist.</p>
</li>
</ul>
</li>
<li>
<p>Lifetimes: defines the 'duration' of a memory location (i.e. a variable has a lifetime from when it is declared to when it is last used) or of a borrow of that location (i.e. all borrows have a lifetime associated with them). This allows Rust to avoid using a garbage collector, as the memory location can be automatically deallocated when its lifetime expires, and it also allows the static analysis to determine if a program could be at risk of accessing a freed memory location, helping to prevent use-after-free errors.</p>
</li>
</ol>
<p>The Linux kernel's bootflow can be viewed as a sequential series of steps that load and execute the following stage, as seen below.</p>
<p><img alt="Kernel Bootflow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/bootflow.png"></p>
<h2>Threat Model</h2>
<p>SentinelBoot's threat model focuses on thin client devices which do not store their own OS and <a href="https://en.wikipedia.org/wiki/Over-the-air_update">over-the-air updates</a> (e.g. how phones are updated): both of these cases involve executable code being sent over a network, usually the internet. We ignore the risk of direct hardware modification, as an attacker can just swap out the bootloader (making any potential defence implemented by SentinelBoot in vain). Instead, SentinelBoot focuses on defending against a subclass of <a href="https://en.wikipedia.org/wiki/Social_engineering_(security)">social engineering</a> and <a href="https://en.wikipedia.org/wiki/Evil_maid_attack">Evil Maid</a> attack vectors, where the goal is to modify the root-of-trust. As well as defending against <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-In-The-Middle</a> attacks which undermine secure communication, shown below. Finally, SentinelBoot aims to prevent exploitation by minimising memory safety vulnerabilities.</p>
<p><img alt="Man-In-The-Middle attack" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/mitm.png"></p>
<h2>Assembly to Rust</h2>
<p>Firstly, it is necessary to write a <a href="https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_chapter/ld_3.html">linker script</a> to format the resulting binary into an <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF format</a>. Next, it is necessary to write RISC-V assembly to initialise hardware, including handling multiple hardware threads (HARTs), setting control and status registers, disabling interrupts, etc. The control flow is shown below.</p>
<p><img alt="Machine mode control flow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/mm_control_flow.png"></p>
<p>As a final-year university project, a decision was taken to limit the projects' scope by allowing U-Boot to perform <a href="https://en.wikipedia.org/wiki/Trivial_File_Transfer_Protocol">TFTP</a> operations on SentinelBoot's behalf. To support this decision, additional assembly was needed to handle executing from supervisor mode.</p>
<h2>'Unsafe' to 'Safe' Rust</h2>
<p>The assembly code has now jumped to the Rust entry point, which is nominally memory-safe. The next two steps in the initialisation - initialising a serial driver and a memory allocator - both require a lot of unsafe work, which can be done in Rust with an <code>unsafe</code> overrule (this tells the compiler that certain operations it would otherwise be unprepared to permit are acceptable and that the programmer has verified that at the end of the overrule block memory-safety rules are now being observed). After that, there is a symbolic change from this "unsafe" Rust to "truly safe" Rust.</p>
<p>The serial driver implements <a href="https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter">UART</a>, a simple protocol for asynchronous communication that groups data in frames according to an agreed configuration. The actual transmission is handled by a memory-mapped chip, so we need to set the configuration and wrap the raw register interactions with an API in order to enforce checks around unsafe operations. The control flow of the API is shown below.</p>
<p><img alt="Serial driver control flow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/serial_driver.png"></p>
<p>To allow dynamic memory allocation we need a memory allocator: doing so allows for more advanced data structures, such as vectors. By implementing the <a href="https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html">GlobalAlloc trait</a> and therefore facilitating more advanced data structures, SentinelBoot provides wider support for Rust crates. SentinelBoot implements a simple memory allocator based upon a doubly linked list of memory allocation structures. The doubly linked list data structure is useful as it allows bidirectional traversal of the data structure, allowing efficient amalgamation of allocations, as shown below.</p>
<p><img alt="Memory allocator amalgamation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/allocator_amalgamation.png"></p>
<p>Additionally, implementing the doubly linked list comes with its own problems: it violates Rust's borrowing rules as each allocation structure has mutable pointers to the next and previous structures, and therefore each structure is mutably borrowed twice. That said, it is possible to still safely implement the doubly linked list by wrapping the mutable borrows in a <a href="https://en.wikipedia.org/wiki/Lock_(computer_science)">mutex</a> and performing accesses through them, shown below; however, the project deadline meant this feature was not implemented, as SentinelBoot only runs on a single HART, so a race is not possible.</p>
<p><img alt="Memory allocator mutex" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/allocator_mutex.png"></p>
<h2>Verifying &amp; Booting</h2>
<p>Utilising a hashing function that provides properties such as <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">collision resistance, preimage resistance, and second pre-image resistance</a>, it is possible to be extremely confident of the integrity of a binary object. An example of a hashing algorithm that provides such properties is <a href="https://en.wikipedia.org/wiki/SHA-2">SHA256</a>, and therefore it was suitable for SentinelBoot. To hash the kernel we need to accurately determine the size of the kernel binary from just a pointer, as including a single extra memory location will completely change the result (due to the <a href="https://en.wikipedia.org/wiki/Avalanche_effect">avalanche effect</a>). Therefore, functionality to parse the kernel’s ELF header and sum the section sizes was required, shown below.</p>
<p><img alt="ELF binary parsing" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/elf_parsing.png"></p>
<p>Hashing only goes so far: if we are sent a binary and an accompanying hash, we can verify they match - ensuring integrity - however, we need to ensure authenticity too. Currently, an attacker can simply intercept the kernel, inject malicious code, rehash, and then forward the malicious kernel and valid hash for that malicious kernel to SentinelBoot.</p>
<p>Therefore, to enhance the security model, we can utilise <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">public key cryptography</a> (PKC). PKC utilises a pair of keys, one widely known and one secret, which are mathematically linked. Additionally, a <a href="https://en.wikipedia.org/wiki/Certificate_authority">trusted 3rd party</a> can verify the public key by using certificates. The operation of an example PKC system is shown below.</p>
<p><img alt="Public key cryptography operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/pkc.png"></p>
<p>This would allow us to fully encrypt the kernel binary, ensuring it cannot be altered without the secret key. However, PKC works on fixed block sizes, only <a href="https://mbed-tls.readthedocs.io/en/latest/kb/cryptography/rsa-encryption-maximum-data-size/">245 bytes for RSA</a>, and performs expensive mathematical operations with very large numbers - as such it is far too slow.</p>
<p>However, by modifying PKC slightly, we only need to encrypt a small chunk of data: when the server hashes the kernel it can encrypt the hash with its private key (this is a "<a href="https://en.wikipedia.org/wiki/Digital_signature">digital signature</a>"). When SentinelBoot receives the hash, SentinelBoot will decrypt it with the server's public key (which can be verified by a certificate from a trusted 3rd party) to compare hashes, thereby authenticating the server (as an attacker would not be able to sign the kernel correctly without access to the server's private key). Further, as the hash could not have been re-encrypted, we also verify the integrity. This operation is shown below.</p>
<p><img alt="Digital signature operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/digital_signature.png"></p>
<p>Finally, once the kernel has been verified, we can <a href="https://github.com/torvalds/linux/blob/e33c4963bf536900f917fb65a687724d5539bc21/Documentation/arch/riscv/boot.rst">set up for the kernel jump</a> by setting <code>a0</code> to contain the <code>HARTID</code> and <code>a1</code> to contain the address of the DTB. After debugging using Ghidra to decompile the kernel, and then comparing the decompiled instructions against the control flow shown in GDB, it was possible to achieve full booting, as shown below.</p>
<p><img alt="Kernel successful boot" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/kernel_execution_handoff.png"></p>
<h2>Accelerating SHA256</h2>
<p>It is possible, due to <a href="https://www.codethink.co.uk/articles/2023/vcrypto_qemu/">support in QEMU</a>, to emulate the RISC-V Vector Cryptography extension to 'accelerate' the SHA256 hashing of the kernel. The QEMU implementation is not optimised for speed, however, the extension is fully supported and therefore demonstrates functionality for future hardware support. The extension utilises <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">SIMD</a> principles to improve throughput.</p>
<p><img alt="SIMD operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/simd.png">
<img alt="SISD operation" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/sisd.png"></p>
<p>As the <a href="https://wiki.riscv.org/display/HOME/Vector+Crypto+Standardization+Status+Summary">extension was only ratified in September 2023</a>, tooling is still in its infancy, so the vector cryptography assembly instructions had to be pre-assembled to be included.</p>
<p><img alt="Vector Cryptography instruction assembly" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/assembling.png"></p>
<p>With the assembly instructions pre-assembled, the raw binary word could be included into Rust. Finally, the full SHA256 algorithm had to be implemented in vector cryptography assembly where the control flow operated on 512 bit chunks with 16 quad rounds. The SHA256 algorithm control flow is shown below.</p>
<p><img alt="SHA2 control flow" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/sha2.png"></p>
<h2>Continuous Integration</h2>
<p>Throughout the development process, <a href="https://docs.github.com/en/actions">GitHub actions</a> were employed to verify all of SentinelBoot's targets were buildable, the code met <a href="https://doc.rust-lang.org/stable/clippy/usage.html">clippy</a> standards, and that SentinelBoot executed as expected both under emulation and on a <a href="https://www.starfivetech.com/en/site/boards">VisionFive 2</a> connected to a Raspberry Pi which acted as a rig controller.</p>
<h2>Analysis</h2>
<p>SentinelBoot achieves the secure boot mechanism with only a 20.1% performance overhead, compared to an example U-Boot binary.</p>
<p><img alt="Performance analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/performance.png"></p>
<p>Secondly, ~80% of lines were marked safe for the serial hashing implementation and ~68% of lines marked safe for vector cryptography implementation (due to SHA256 needing to be implemented in assembly).</p>
<p><img alt="Safe line serial analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/safe_line_serial.png">
<img alt="Safe line vector cryptography analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/safe_line_vector.png"></p>
<p>Thirdly, SentinelBoot's resulting binary is approximately one-tenth the size of an example U-Boot binary at about 70kB.</p>
<table>
<thead>
<tr>
<th>Target</th>
<th>Binary Size (kB)</th>
</tr>
</thead>
<tbody>
<tr>
<td>QEMU</td>
<td>73.824</td>
</tr>
<tr>
<td>QEMU Vector Cryptography</td>
<td>61.504</td>
</tr>
<tr>
<td>Visionfive 2</td>
<td>73.824</td>
</tr>
<tr>
<td>HiFive Unmatched</td>
<td>73.824</td>
</tr>
<tr>
<td>U-Boot example</td>
<td>742.70</td>
</tr>
</tbody>
</table>
<p>Finally, SentinelBoot compiles in approximately one-quarter the time of an example U-Boot binary, compiled with -j8, whereas Rust's toolchain does not fully utilise parallelism yet.</p>
<p><img alt="Compile time analysis" src="https://www.codethink.co.uk/articles/2024/secure_bootloader/compile_time.png"></p>
<h2>Conclusion</h2>
<p>By developing SentinelBoot, the utilisation of the Rust programming language (and memory-safe principles) to improve the memory safety of RISC-V bootflow has been shown, all while additionally implementing a cryptographic secure boot mechanism. SentinelBoot is able to execute both on hardware and under emulation, where the SHA256 implementation in QEMU is accelerated via the RISC-V Vector Cryptography extension. SentinelBoot achieves this functionality with ~80% of serial and ~68% vector cryptography safe line proportions. Even with the additional functionality and safety provided by SentinelBoot, when compared to an example U-Boot binary, SentinelBoot is one-tenth the size with only a 20.1% performance overhead.</p>
<h3>Concluding Remarks</h3>
<p>This blog post summarises the <a href="https://lawrencehunter.github.io/SentinelBoot-Thesis/SentinelBoot.pdf">SentinelBoot Thesis</a> and the corresponding <a href="https://github.com/LawrenceHunter/SentinelBoot">SentinelBoot GitHub</a>. Additionally, if you'd like to discuss RISC-V or Codethink's work in Rust, contact <a href="mailto:sales@codethink.co.uk">sales@codethink.co.uk</a>.</p>

    </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Pie Menu – a radial menu for macOS (128 pts)]]></title>
            <link>https://www.pie-menu.com/</link>
            <guid>41160268</guid>
            <pubDate>Mon, 05 Aug 2024 11:38:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.pie-menu.com/">https://www.pie-menu.com/</a>, See on <a href="https://news.ycombinator.com/item?id=41160268">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Are you a shortcut illiterate like me?</p><p>You accept that shortcuts will make you more effective, but you can't remember them or mix up the shortcuts from other programs.</p><p>Shortcuts deserves some love. A rethink.</p><p>With Pie Menu, I've done just that. I've distilled shortcuts until they couldn't be more simple. </p><p>How is that possible? Well, you only have to remember one special shortcut for all of your programs. The best part is that you can pick your own favorite combination!</p><p>When you trigger your perfect shortcut, a menu opens around your cursor. Your favorite shortcuts for that app are available like a menu of pies around your mouse. Try it out now by holding ⇧ + z.</p><p>Are you using another program? Same shortcut to open the menu, different shortcuts to choose from!</p><p>What are you waiting for? <br><a href="https://apps.apple.com/app/apple-store/id1631568126?pt=124155388&amp;ct=pie-menu-website&amp;mt=8">Download Pie Menu and start saving time immediately.</a></p><div><p><img src="https://www.pie-menu.com/hauken-portrait.webp?22" alt="Marius Hauken" height="150" width="150" loading="lazy"></p><div><p><img src="https://www.pie-menu.com/hauken.png" height="88" width="162" alt="Hauken signatur" loading="lazy"></p><p><strong>Marius Hauken</strong> <br>Creator of Pie Menu</p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple Intelligence beta flagged a phishing email as "Priority" (204 pts)]]></title>
            <link>https://social.panic.com/@cabel/112905175504595751</link>
            <guid>41159680</guid>
            <pubDate>Mon, 05 Aug 2024 10:12:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://social.panic.com/@cabel/112905175504595751">https://social.panic.com/@cabel/112905175504595751</a>, See on <a href="https://news.ycombinator.com/item?id=41159680">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Japan's Nikkei Posts Biggest Single-Day Fall Since 1987 After Weak U.S. Data (103 pts)]]></title>
            <link>https://www.wsj.com/finance/stocks/japan-stocks-fall-sharply-after-weak-u-s-jobs-data-yen-strengthening-3903689f</link>
            <guid>41159372</guid>
            <pubDate>Mon, 05 Aug 2024 09:05:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/finance/stocks/japan-stocks-fall-sharply-after-weak-u-s-jobs-data-yen-strengthening-3903689f">https://www.wsj.com/finance/stocks/japan-stocks-fall-sharply-after-weak-u-s-jobs-data-yen-strengthening-3903689f</a>, See on <a href="https://news.ycombinator.com/item?id=41159372">Hacker News</a></p>
Couldn't get https://www.wsj.com/finance/stocks/japan-stocks-fall-sharply-after-weak-u-s-jobs-data-yen-strengthening-3903689f: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Postgres stores data on disk – this one's a page turner (376 pts)]]></title>
            <link>https://drew.silcock.dev/blog/how-postgres-stores-data-on-disk/</link>
            <guid>41159180</guid>
            <pubDate>Mon, 05 Aug 2024 08:28:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://drew.silcock.dev/blog/how-postgres-stores-data-on-disk/">https://drew.silcock.dev/blog/how-postgres-stores-data-on-disk/</a>, See on <a href="https://news.ycombinator.com/item?id=41159180">Hacker News</a></p>
<div id="readability-page-1" class="page"><article> <p>I remember when I first started on server-side applications – the kind that need to persist data – and not getting what the big deal about databases was. Why are databases such a big thing? Can’t we just store some data on disk and read / write from it when we need to? (<strong>Spoiler:</strong> no.)</p>
<p>Once I started working with real-life applications instead of just hobby projects, I realised that databases are basically magic, and SQL is the arcane tongue that allows you to channel that magic. In fact, it’s easy to think of databases like a black box where you make sure your tables are indexed sensibly and your queries aren’t doing anything silly, and the rest <em>just happens</em>.</p>
<p>But really, databases aren’t <em>that</em> complicated. I mean, they kind of are but if you dig inside the database engine a bit, you realise that it’s really just some immensely powerful and clever abstractions and that, like most software, most of the actual complexity in these pieces of software comes from the edge cases, often around concurrency.</p>
<p>I’d like crack open the hard shell of database engines with some friendly introductions to those who are familiar with relational databases but don’t know their inner machinations. I’m going to talk about PostgreSQL because that’s what I’m most familiar with, and it’s also the most popular database in use by developers according to the <a href="https://survey.stackoverflow.co/2023/#section-most-popular-technologies-databases">Stack Overflow Developer Survey 2023</a> and <a href="https://survey.stackoverflow.co/2024/technology#1-databases">Stack Overflow Developer Survey 2024</a>.</p>
<p>To start things off, I’m going to discuss how Postgres actually stores data on disk. I mean, it’s all just files, right?</p>
<h2 id="loading-a-nice-fresh-postgres-install">Loading a nice fresh Postgres install</h2>
<p>Postgres stores all its data in a directory sensibly called <code>/var/lib/postgresql/data</code> <sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup> . Let’s spin up an empty Postgres installation with Docker and mount the data directory in a local folder so that we can see what’s going on in there. (Feel free to follow along and explore the files for yourself!)</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>docker</span><span> </span><span>run</span><span> </span><span>--rm</span><span> </span><span>-v</span><span> </span><span>./pg-data:/var/lib/postgresql/data</span><span> </span><span>-e</span><span> </span><span>POSTGRES_PASSWORD=password</span><span> </span><span>postgres:16</span></p></div></code></pre></figure></div>
<p>You should see a bunch of text saying all kinds of interesting things like <code>selecting dynamic shared memory implementation ... posix</code> and <code>performing post-bootstrap initialization ... ok</code> and then eventually <code>LOG:  database system is ready to accept connections</code>. Now kill the server with ctrl-C so that we can have a look at what files have been created.</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ ls -l pg-data</span></p></div><div><div><p>2</p></div><p><span>drwx------     -   base/</span></p></div><div><div><p>3</p></div><p><span>drwx------     -   global/</span></p></div><div><div><p>4</p></div><p><span>drwx------     -   pg_commit_ts/</span></p></div><div><div><p>5</p></div><p><span>drwx------     -   pg_dynshmem/</span></p></div><div><div><p>6</p></div><p><span>.rw-------@ 5.7k   pg_hba.conf</span></p></div><div><div><p>7</p></div><p><span>.rw-------@ 2.6k   pg_ident.conf</span></p></div><div><div><p>8</p></div><p><span>drwx------     -   pg_logical/</span></p></div><div><div><p>9</p></div><p><span>drwx------     -   pg_multixact/</span></p></div><div><div><p>10</p></div><p><span>drwx------     -   pg_notify/</span></p></div><div><div><p>11</p></div><p><span>drwx------     -   pg_replslot/</span></p></div><div><div><p>12</p></div><p><span>drwx------     -   pg_serial/</span></p></div><div><div><p>13</p></div><p><span>drwx------     -   pg_snapshots/</span></p></div><div><div><p>14</p></div><p><span>drwx------     -   pg_stat/</span></p></div><div><div><p>15</p></div><p><span>drwx------     -   pg_stat_tmp/</span></p></div><div><div><p>16</p></div><p><span>drwx------     -   pg_subtrans/</span></p></div><div><div><p>17</p></div><p><span>drwx------     -   pg_tblspc/</span></p></div><div><div><p>18</p></div><p><span>drwx------     -   pg_twophase/</span></p></div><div><div><p>19</p></div><p><span>.rw-------     3   PG_VERSION</span></p></div><div><div><p>20</p></div><p><span>drwx------     -   pg_wal/</span></p></div><div><div><p>21</p></div><p><span>drwx------     -   pg_xact/</span></p></div><div><div><p>22</p></div><p><span>.rw-------@   88   postgresql.auto.conf</span></p></div><div><div><p>23</p></div><p><span>.rw-------@  30k   postgresql.conf</span></p></div><div><div><p>24</p></div><p><span>.rw-------    36   postmaster.opts</span></p></div></code></pre></figure></div>
<p>There’s a lot of folders here, but if you look, most of them are empty.</p>
<p>Before we dig into these, a quick terminology overview:</p>

















































<table><thead><tr><th>Term</th><th>Meaning</th></tr></thead><tbody><tr><td>Database cluster</td><td>The term ‘cluster’ is a bit overloaded here - we’re using it the <a href="https://www.postgresql.org/docs/current/creating-cluster.html">same way that the Postgres docs use it</a>, meaning a single instance of a PostgreSQL server which is running multiple databases on the same machine (where each database is created with <code>create database mydbname</code>).</td></tr><tr><td>Database connection</td><td>When a client connects to the Postgres server, it initiates a database connection. When this happens, Postgres creates a sub-process on the server.</td></tr><tr><td>Database session</td><td>Once the connection has been authenticated, the client has established a session, which it can then use to execute SQL.</td></tr><tr><td>Transaction a.k.a. tx, xact</td><td>SQL is executed within the session inside transactions, which are units of work which are executed, committed and succeed or fail as a single unit of work. If a transaction fails, it is rolled back and all the changes made in the transaction are undone.</td></tr><tr><td>Snapshot</td><td>Each transaction sees its own copy of the database, called its snapshot. If you have multiple sessions reading and writing the same data at the same time, they will in general not see the exact same data but will see different snapshots depending on the exact timing of the transactions. It’s possible to synchronise and export snapshots.</td></tr><tr><td>Schema</td><td>A database consists of multiple schemas (or <em>schemata</em>, if you’re being pretentious), each of which is a logical namespace for tables, functions, triggers and every thing that databases store. The default schema is called <code>public</code> and if you don’t specify a schema, it’s the same as manually specifying <code>public</code>.</td></tr><tr><td>Table</td><td>A database consists of multiple tables, each of which represents a single unordered collection of items with a particular number of columns, each of a specific type.</td></tr><tr><td>Tablespace</td><td>A tablespace is a physical separation (as opposed to schemas, which are a logical separation). We’ll see more about tablespaces later.</td></tr><tr><td>Row</td><td>A table consists of multiple unordered rows, each of which is a single collection of data points defining a specific <em>thing</em>.</td></tr><tr><td>Tuple</td><td>A tuple is very similar to a row, but a tuple is immutable. The state of a specific row at a specific time is a tuple, but a tuple is a more general term for a collection of data points. When you return data from a query, you can get tuples.</td></tr></tbody></table>
<p>Now let’s do a quick overview of what all these top-level files and folders are for. You don’t need to worry about every single one of these – most of them cover more complicated use cases, which is why they’re empty for us – but I still think it’s interesting to know what each files and folder is for.</p>





































































































<table><thead><tr><th>Directory</th><th>Explanation</th></tr></thead><tbody><tr><td><code>  base/</code></td><td>Contains a subdirectory for each database. Inside each sub-directory are the files with the actual data in them. We’ll dig into this more in a second.</td></tr><tr><td><code>  global/</code></td><td>Directly contains files for cluster-wide tables like <code>pg_database</code>.</td></tr><tr><td><code>  pg_commit_ts/</code></td><td>As the name suggests, contains timestamps for transaction commits. We don’t have any commits or transactions yet, so this is empty.</td></tr><tr><td><code>  pg_dynshmem/</code></td><td>Postgres uses multiple processes (not multiple threads, although there has been <a href="https://www.postgresql.org/message-id/31cc6df9-53fe-3cd9-af5b-ac0d801163f4%40iki.fi">discussion around it</a>) so in order to share memory between processes, Postgres has a dynamic shared memory subsystem. This can use <a href="https://man7.org/linux/man-pages/man3/shm_open.3.html"><code>shm_open</code></a>, <a href="https://man7.org/linux/man-pages/man2/shmget.2.html"><code>shmget</code></a> or <a href="https://man7.org/linux/man-pages/man2/mmap.2.html"><code>mmap</code></a> on Linux – by default it uses <code>shm_open</code>. The shared memory object files are stored in this folder.</td></tr><tr><td><code>  pg_hba.conf</code></td><td>This is the <a href="https://www.postgresql.org/docs/current/auth-pg-hba-conf.html">Host-Based Authentication (HBA) file</a> which allows you to configure access to your cluster based on hostname. For instance, by default this file has <code>host all all 127.0.0.1/32 trust</code> which means “trust anyone connecting to any database without a password if they’re connecting from localhost”. If you’ve ever wondered why you don’t need to put your password in when running <code>psql</code> on the same machine as the server, this is why.</td></tr><tr><td><code>  pg_ident.conf</code></td><td>This is a <a href="https://www.postgresql.org/docs/current/auth-username-maps.html">user name mapping file</a> which isn’t particularly interesting for our purposes.</td></tr><tr><td><code>  pg_logical/</code></td><td>Contains status data for logical decoding. We don’t have time to talk about how the Write-Ahead Log (WAL) works in full, but in short, Postgres writes changes that it’s going to make to the WAL, then if it crashes it can just re-read and re-run all the operations in the WAL to get back to the expected database state. The process of turning the WAL back into the high-level operations – for the purposes of recovery, replication, or auditing –  is called logical decoding and Postgres stores files related to this process in here.</td></tr><tr><td><code>  pg_multixact/</code></td><td>”xact” is what the Postgres calls transactions so this contains status data for multitransactions. Multitransactions are a <a href="https://www.highgo.ca/2020/06/12/transactions-in-postgresql-and-their-mechanism/">thing that happens when you’ve got multiple sessions</a> who are all trying to do a row-level lock on the same rows.</td></tr><tr><td><code>  pg_notify/</code></td><td>In Postgres you can <a href="https://tapoueh.org/blog/2018/07/postgresql-listen-notify/">listen for changes on a channel and notify listeners of changes</a>. This is useful if you have an application that wants to action something whenever a particular event happens. For instance, if you have an application that wants to know every time a row is added or updated in a particular table so that it can synchronise with an external system. You can set up a trigger which notifies all the listeners whenever this change occurs. Your application can then listen for that notification and update the external data store however it wants to.</td></tr><tr><td><code>  pg_replslot/</code></td><td>Replication is the mechanism by which databases can synchronise between multiple running server instances. For instance, if you have some really important data that you don’t want to lose, you could set up a couple of replicas so that if your main database dies and you lose all your data, you can recover from one of the replicas. This can be physical replication (literally copying disk files) and logical replication (basically copying the WAL to all the replicas so that the main database can eb reconstructed from the replica’s WAL via logical decoding.) This folder contains data for the various replication slots, which are a way of ensuring WAL entries are kept for particular replicas even when it’s not needed by the main database.</td></tr><tr><td><code>  pg_serial/</code></td><td>Contains information on committed serialisable transactions. Serialisable transactions are the highest level of strictness for transaction isolation, which you can read more about <a href="https://www.postgresql.org/docs/current/transaction-iso.html">in the docs</a>.</td></tr><tr><td><code>  pg_snapshots/</code></td><td>Contains exported snapshots, used e.g. by <code>pg_dump</code> which can dump a database in parallel.</td></tr><tr><td><code>  pg_stat/</code></td><td>Postgres calculates statistics for the various tables which it uses to inform sensible query plans and plan executions. For instance, if the query planner knows it needs to do a sequential scan across a table, it can look at approximately how many rows are in that table to determine how much memory should be allocated. This folder contains permanent statistics files calculated form the tables. Understanding statistics is really important to analysing and fixing poor query performance.</td></tr><tr><td><code>  pg_stat_tmp/</code></td><td>Similar to <code>pg_stat/</code> apart from this folder contains temporary files relating to the statistics that Postgres keeps, not the permanent files.</td></tr><tr><td><code>  pg_subtrans/</code></td><td>Subtransactions are another kind of transaction, like multitransactions. They’re a way to split a single transaction into multiple smaller subtransactions, and this folder contains status data for them.</td></tr><tr><td><code>  pg_tblspc/</code></td><td>Contains symbolic references to the different tablespaces. A <a href="https://www.postgresql.org/docs/current/manage-ag-tablespaces.html">tablespace</a> is a physical location which can be used to store some of the database objects, as configured by the DB administrator. For instance, if you have a really frequently used index, you could use a tablespace to put that index on a super speedy expensive solid state drive while the rest of the table sits on a cheaper, slower disk.</td></tr><tr><td><code>  pg_twophase/</code></td><td>It’s possible to <a href="https://www.postgresql.org/docs/current/sql-prepare-transaction.html">“prepare”</a> transactions, which means that the transaction is dissociated from the current session and is stored on disk. This is useful for two-phase commits, where you want to commit changes to multiple systems at the same time and ensure that both transactions either fail and rollback or succeed and commit</td></tr><tr><td><code>  PG_VERSION</code></td><td>This one’s easy – it’s got a single number in which is the major version of Postgres we’re in, so in this case we’d expect this to have the number <code>16</code> in.</td></tr><tr><td><code>  pg_wal/</code></td><td>This is where the Write-Ahead Log (WAL) files are stored.</td></tr><tr><td><code>  pg_xact/</code></td><td>Contains status data for transaction commits, i.e. metadata logs.</td></tr><tr><td><code>  postgresql.auto.conf</code></td><td>This contains server configuration parameters, like <code>postgresql.conf</code>, but is automatically written to by <code>alter system</code> commands, which are SQL commands that you can run to dynamically modify server parameters.</td></tr><tr><td><code>  postgresql.conf</code></td><td>This file contains all the possible server parameters you can configure for a Postgres instance. This goes all the way from <code>autovacuum_naptime</code> to <code>zero_damaged_pages</code>. If you want to understand all the possible Postgres server parameters and what they do in human language, I’d highly recommend checking out <a href="https://postgresqlco.nf/">postgresqlco.nf</a></td></tr><tr><td><code>  postmaster.opts</code></td><td>This simple file contains the full CLI command used to invoke Postgres the last time that it was run.</td></tr></tbody></table>
<p>There’s also a file called <code>postmaster.pid</code> which you only see while the Postgres process is actively running, which contains information about the postmaster process ID, what port its listening on, what time it started, etc. We won’t see that here because we stopped our Postgres server to examine the files.</p>
<p>So that was quite intense – don’t worry if you didn’t fully understand what all those things mean – it’s all super interesting stuff but you don’t need to follow most of that to understand what we’re going to talk about, which is the actual database storage.</p>
<h2 id="exploring-the-database-folders">Exploring the database folders</h2>
<p>Okay, so we mentioned the <code>base/</code> directory above, which has a subdirectory for each individual database in your cluster. Let’s take a look at what we’ve got here:</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ ls -l pg-data/base</span></p></div><div><div><p>2</p></div><p><span>drwx------ -   1/</span></p></div><div><div><p>3</p></div><p><span>drwx------ -   4/</span></p></div><div><div><p>4</p></div><p><span>drwx------ -   5/</span></p></div></code></pre></figure></div>
<p>Wait, why are there already 3 folders in here? We haven’t even created any databases yet.</p>
<p>The reason is that when you start up a fresh Postgres server, Postgres will automatically create 3 databases for you. They are:</p>
<ul>
<li><code>postgres</code> – when you connect to a server, you need the name of a database to connect to, but you don’t always know what the name is. This is also true of database management tools. While it’s not strictly necessary, you can almost always rely on the <code>postgres</code> database existing – once you’ve connected to this empty, default database, you can list all the other databases on the server, create new databases, and so on.</li>
<li><code>template0</code>, <code>template1</code> – as the name suggests, these databases are templates used to create future databases.</li>
</ul>
<p>Why are the subdirectories called numbers instead of names?</p>
<p>Well in Postgres, all the system tables for things like namespaces, roles, tables and functions use an Object IDentifier (OID) to identify them. In this case, <code>1</code>, <code>4</code> and <code>5</code> are the OIDs for <code>postgres</code>, <code>template0</code> and <code>template1</code>.</p>
<h2 id="lets-play-with-some-data">Let’s play with some data</h2>
<p>These in-built tables don’t have anything in them and are generally pretty boring, so let’s create ourselves a new database and put them data in so that we can examine the data files themselves.</p>
<p>First, let’s run and detach the Postgres container so that we can query it.</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>docker</span><span> </span><span>run</span><span> </span><span>-d</span><span> </span><span>--rm</span><span> </span><span>-v</span><span> </span><span>./pg-data:/var/lib/postgresql/data</span><span> </span><span>-e</span><span> </span><span>POSTGRES_PASSWORD=password</span><span> </span><span>postgres:16</span></p></div></code></pre></figure></div>
<p>We could use anything as our play dataset, but I like geography so let’s make a table with some countries in. Let’s download some country data into our container and load it into a new database.</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>curl</span><span> </span><span>'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv'</span><span> </span><span>\</span></p></div><div><div><p>2</p></div><p><span>    </span><span>--output</span><span> </span><span>./pg-data/countries.csv</span></p></div></code></pre></figure></div>
<p>We can use a local tool like psql or TablePlus to examine the database, but we’re going to just exec into the container and use psql from inside the container. This way, we don’t have to worry about mapping ports or mismatching psql and Postgres server versions. (Also, it’s easier for everyone to follow along at home.)</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>pg_container_id</span><span>=</span><span>$(</span><span>docker</span><span> </span><span>ps</span><span> </span><span>--filter</span><span> </span><span>expose=</span><span>5432</span><span> </span><span>--format</span><span> </span><span>"{{.ID}}"</span><span>)</span></p></div><div><div><p>2</p></div><p><span>docker</span><span> </span><span>exec</span><span> </span><span>-it</span><span> $pg_container_id </span><span>psql</span><span> </span><span>-U</span><span> </span><span>postgres</span></p></div></code></pre></figure></div>
<p>Here we’re getting the container ID of the running Postgres container by filtering by containers which expose port 5432 as Postgres does and putting that into the <code>docker exec</code> command to give us an interactive psql shell. The <code>-U postgres</code> is because the default Postgres user in the official Docker image is <code>postgres</code>, not <code>root</code> which is the psql default.</p>
<p>If that works, you should see something like:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>psql (</span><span>16</span><span>.</span><span>3</span><span> (Debian </span><span>16</span><span>.</span><span>3</span><span>-</span><span>1</span><span>.pgdg120</span><span>+</span><span>1</span><span>))</span></p></div><div><div><p>2</p></div><p><span>Type</span><span> </span><span>"help"</span><span> </span><span>for</span><span> help.</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>postgres</span><span>=</span><span>#</span></p></div></code></pre></figure></div>
<p>Now let’s create our new database and load the data in: <sup><a href="#user-content-fn-2" id="user-content-fnref-2" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup></p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>create</span><span> </span><span>database</span><span> </span><span>blogdb</span><span>;</span></p></div><div><div><p>2</p></div><p><span>\c blogdb;</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>create</span><span> </span><span>table</span><span> </span><span>countries</span><span> (</span></p></div><div><div><p>5</p></div><p><span><span>  </span></span><span>id </span><span>integer</span><span> </span><span>primary key</span><span> </span><span>generated</span><span> </span><span>always</span><span> </span><span>as</span><span> </span><span>identity</span><span>,</span></p></div><div><div><p>6</p></div><p><span>  </span><span>name</span><span> </span><span>text</span><span> </span><span>not null</span><span> </span><span>unique</span><span>,</span></p></div><div><div><p>7</p></div><p><span><span>  </span></span><span>alpha_2 </span><span>char</span><span>(</span><span>2</span><span>) </span><span>not null</span><span>,</span></p></div><div><div><p>8</p></div><p><span><span>  </span></span><span>alpha_3 </span><span>char</span><span>(</span><span>3</span><span>) </span><span>not null</span><span>,</span></p></div><div><div><p>9</p></div><p><span><span>  </span></span><span>numeric_3 </span><span>char</span><span>(</span><span>3</span><span>) </span><span>not null</span><span>,</span></p></div><div><div><p>10</p></div><p><span><span>  </span></span><span>iso_3166_2 </span><span>text</span><span> </span><span>not null</span><span>,</span></p></div><div><div><p>11</p></div><p><span><span>  </span></span><span>region </span><span>text</span><span>,</span></p></div><div><div><p>12</p></div><p><span><span>  </span></span><span>sub_region </span><span>text</span><span>,</span></p></div><div><div><p>13</p></div><p><span><span>  </span></span><span>intermediate_region </span><span>text</span><span>,</span></p></div><div><div><p>14</p></div><p><span><span>  </span></span><span>region_code </span><span>char</span><span>(</span><span>3</span><span>),</span></p></div><div><div><p>15</p></div><p><span><span>  </span></span><span>sub_region_code </span><span>char</span><span>(</span><span>3</span><span>),</span></p></div><div><div><p>16</p></div><p><span><span>  </span></span><span>intermediate_region_code </span><span>char</span><span>(</span><span>3</span><span>)</span></p></div><div><div><p>17</p></div><p><span>);</span></p></div><div><p>18</p></div><div><div><p>19</p></div><p><span>copy</span><span> countries (</span></p></div><div><div><p>20</p></div><p><span>  </span><span>name</span><span>,</span></p></div><div><div><p>21</p></div><p><span><span>  </span></span><span>alpha_2,</span></p></div><div><div><p>22</p></div><p><span><span>  </span></span><span>alpha_3,</span></p></div><div><div><p>23</p></div><p><span><span>  </span></span><span>numeric_3,</span></p></div><div><div><p>24</p></div><p><span><span>  </span></span><span>iso_3166_2,</span></p></div><div><div><p>25</p></div><p><span><span>  </span></span><span>region,</span></p></div><div><div><p>26</p></div><p><span><span>  </span></span><span>sub_region,</span></p></div><div><div><p>27</p></div><p><span><span>  </span></span><span>intermediate_region,</span></p></div><div><div><p>28</p></div><p><span><span>  </span></span><span>region_code,</span></p></div><div><div><p>29</p></div><p><span><span>  </span></span><span>sub_region_code,</span></p></div><div><div><p>30</p></div><p><span><span>  </span></span><span>intermediate_region_code</span></p></div><div><div><p>31</p></div><p><span>)</span></p></div><div><div><p>32</p></div><p><span>from</span><span> </span><span>'/var/lib/postgresql/data/countries.csv'</span></p></div><div><div><p>33</p></div><p><span>delimiter </span><span>','</span><span> csv header;</span></p></div><div><p>34</p></div><div><div><p>35</p></div><p><span>-- Check that the data got loaded into the table ok.</span></p></div><div><div><p>36</p></div><p><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> countries </span><span>limit</span><span> </span><span>10</span><span>;</span></p></div><div><p>37</p></div><div><div><p>38</p></div><p><span>-- Should say 249.</span></p></div><div><div><p>39</p></div><p><span>select</span><span> </span><span>count</span><span>(</span><span>*</span><span>) </span><span>from</span><span> countries;</span></p></div></code></pre></figure></div>
<p>Great, so we’ve got a table with 249 rows and a single index corresponding to our unique constraint on the <code>name</code> column.</p>
<h2 id="show-me-the-files">Show me the files</h2>
<p>Let’s take another look at our <code>base/</code> folder:</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ ls -l pg-data/base</span></p></div><div><div><p>2</p></div><p><span>drwx------ -   1/</span></p></div><div><div><p>3</p></div><p><span>drwx------ -   4/</span></p></div><div><div><p>4</p></div><p><span>drwx------ -   5/</span></p></div><div><div><p>5</p></div><p><span>drwx------ -   16388/</span></p></div></code></pre></figure></div>
<p>In this case it’s pretty obvious that our <code>blogdb</code> is <code>16388</code> but if you’re working with loads of database on the same cluster, you might not know. If you’re following along from home, it probably has a different value. If you want to find out, simply do:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>postgres</span><span>=</span><span># </span><span>select</span><span> </span><span>oid</span><span>, datname </span><span>from</span><span> pg_database;</span></p></div><div><div><p>2</p></div><p><span>  </span><span>oid</span><span>  |  datname</span></p></div><div><div><p>3</p></div><p><span>-------+-----------</span></p></div><div><div><p>4</p></div><p><span>     </span><span>5</span><span> | postgres</span></p></div><div><div><p>5</p></div><p><span> </span><span>16388</span><span> | blogdb</span></p></div><div><div><p>6</p></div><p><span>     </span><span>1</span><span> | template1</span></p></div><div><div><p>7</p></div><p><span>     </span><span>4</span><span> | template0</span></p></div><div><div><p>8</p></div><p><span>(</span><span>4</span><span> </span><span>rows</span><span>)</span></p></div></code></pre></figure></div>
<p>Let’s have a peek at what’s inside this folder:</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ cd pg-data/base/16388</span></p></div><div><div><p>2</p></div><p><span>$ ls -l </span><span>.</span></p></div><div><div><p>3</p></div><p><span>.rw------- 8.2k   112</span></p></div><div><div><p>4</p></div><p><span>.rw------- 8.2k   113</span></p></div><div><div><p>5</p></div><p><span>.rw------- 8.2k   174</span></p></div><div><div><p>6</p></div><p><span>.rw------- 8.2k   175</span></p></div><div><div><p>7</p></div><p><span>.rw------- 8.2k   548</span></p></div><div><div><p>8</p></div><p><span>.rw------- 8.2k   549</span></p></div><div><div><p>9</p></div><p><span>.rw-------    0   826</span></p></div><div><div><p>10</p></div><p><span>.rw------- 8.2k   827</span></p></div><div><div><p>11</p></div><p><span>.rw------- 8.2k   828</span></p></div><div><div><p>12</p></div><p><span>.rw------- 123k   1247</span></p></div><div><div><p>13</p></div><p><span>.rw-------  25k   1247_fsm</span></p></div><div><div><p>14</p></div><p><span>.rw------- 8.2k   1247_vm</span></p></div><div><div><p>15</p></div><p><span>.rw------- 475k   1249</span></p></div><div><div><p>16</p></div><p><span>.rw-------  25k   1249_fsm</span></p></div><div><div><p>17</p></div><p><span>...</span></p></div><div><div><p>18</p></div><p><span>.rw-------  25k   16390_fsm</span></p></div><div><div><p>19</p></div><p><span>.rw-------    0   16393</span></p></div><div><div><p>20</p></div><p><span>.rw------- 8.2k   16394</span></p></div><div><div><p>21</p></div><p><span>.rw-------  16k   16395</span></p></div><div><div><p>22</p></div><p><span>.rw-------  16k   16397</span></p></div><div><div><p>23</p></div><p><span>.rw-------  524   pg_filenode.map</span></p></div><div><div><p>24</p></div><p><span>.rw------- 160k   pg_internal.init</span></p></div><div><div><p>25</p></div><p><span>.rw-------    3   PG_VERSION</span></p></div><div><div><p>26</p></div><p><span>$ ls -l </span><span>|</span><span> </span><span>wc</span><span> </span><span>-l</span></p></div><div><div><p>27</p></div><p><span>306</span></p></div><div><div><p>28</p></div><p><span>$ du -h </span><span>.</span></p></div><div><div><p>29</p></div><p><span>7.6M    .</span></p></div></code></pre></figure></div>
<p>There’s a surprising number of files in there considering we’ve only got 249 rows. So what’s going on?</p>
<p>There are a few useful system catalogs that we can use to make sense of this:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>-- First, let's get the OID of the 'public' namespace that our table lives in - you need</span></p></div><div><div><p>2</p></div><p><span>-- to run this in the 'blogdb' database, otherwise you'll get the OID of the 'public'</span></p></div><div><div><p>3</p></div><p><span>-- namespace for the database you're currently connected to.</span></p></div><div><div><p>4</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> to_regnamespace(</span><span>'public'</span><span>)::</span><span>oid</span><span>;</span></p></div><div><div><p>5</p></div><p><span><span> </span></span><span>to_regnamespace</span></p></div><div><div><p>6</p></div><p><span>-----------------</span></p></div><div><div><p>7</p></div><p><span>            </span><span>2200</span></p></div><div><div><p>8</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>9</p></div><div><div><p>10</p></div><p><span>-- Now let's list all the tables, indexes, etc. that live in this namespace.</span></p></div><div><div><p>11</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> pg_class</span></p></div><div><div><p>12</p></div><p><span>blogdb</span><span>-</span><span># </span><span>where</span><span> relnamespace </span><span>=</span><span> to_regnamespace(</span><span>'public'</span><span>)::</span><span>oid</span><span>;</span></p></div><div><div><p>13</p></div><p><span>  </span><span>oid</span><span>  |      relname       | relnamespace | reltype | reloftype | relowner | relam | relfilenode | reltablespace | relpages | reltuples | relallvisible | reltoastrelid | relhasindex | relisshared | relpersistence | relkind | relnatts | relchecks | relhasrules | relhastriggers | relhassubclass | relrowsecurity | relforcerowsecurity | relispopulated | relreplident | relispartition | relrewrite | relfrozenxid | relminmxid | relacl | reloptions | relpartbound</span></p></div><div><div><p>14</p></div><p><span>-------+--------------------+--------------+---------+-----------+----------+-------+-------------+---------------+----------+-----------+---------------+---------------+-------------+-------------+----------------+---------+----------+-----------+-------------+----------------+----------------+----------------+---------------------+----------------+--------------+----------------+------------+--------------+------------+--------+------------+--------------</span></p></div><div><div><p>15</p></div><p><span> </span><span>16389</span><span> | countries_id_seq   |         </span><span>2200</span><span> |       </span><span>0</span><span> |         </span><span>0</span><span> |       </span><span>10</span><span> |     </span><span>0</span><span> |       </span><span>16389</span><span> |             </span><span>0</span><span> |        </span><span>1</span><span> |         </span><span>1</span><span> |             </span><span>0</span><span> |             </span><span>0</span><span> | f           | f           | p              | S       |        </span><span>3</span><span> |         </span><span>0</span><span> | f           | f              | f              | f              | f                   | t              | n            | f              |          </span><span>0</span><span> |            </span><span>0</span><span> |          </span><span>0</span><span> |        |            |</span></p></div><div><div><p>16</p></div><p><span> </span><span>16390</span><span> | countries          |         </span><span>2200</span><span> |   </span><span>16392</span><span> |         </span><span>0</span><span> |       </span><span>10</span><span> |     </span><span>2</span><span> |       </span><span>16390</span><span> |             </span><span>0</span><span> |        </span><span>4</span><span> |       </span><span>249</span><span> |             </span><span>0</span><span> |         </span><span>16393</span><span> | t           | f           | p              | r       |       </span><span>12</span><span> |         </span><span>0</span><span> | f           | f              | f              | f              | f                   | t              | d            | f              |          </span><span>0</span><span> |          </span><span>743</span><span> |          </span><span>1</span><span> |        |            |</span></p></div><div><div><p>17</p></div><p><span> </span><span>16395</span><span> | countries_pkey     |         </span><span>2200</span><span> |       </span><span>0</span><span> |         </span><span>0</span><span> |       </span><span>10</span><span> |   </span><span>403</span><span> |       </span><span>16395</span><span> |             </span><span>0</span><span> |        </span><span>2</span><span> |       </span><span>249</span><span> |             </span><span>0</span><span> |             </span><span>0</span><span> | f           | f           | p              | i       |        </span><span>1</span><span> |         </span><span>0</span><span> | f           | f              | f              | f              | f                   | t              | n            | f              |          </span><span>0</span><span> |            </span><span>0</span><span> |          </span><span>0</span><span> |        |            |</span></p></div><div><div><p>18</p></div><p><span> </span><span>16397</span><span> | countries_name_key |         </span><span>2200</span><span> |       </span><span>0</span><span> |         </span><span>0</span><span> |       </span><span>10</span><span> |   </span><span>403</span><span> |       </span><span>16397</span><span> |             </span><span>0</span><span> |        </span><span>2</span><span> |       </span><span>249</span><span> |             </span><span>0</span><span> |             </span><span>0</span><span> | f           | f           | p              | i       |        </span><span>1</span><span> |         </span><span>0</span><span> | f           | f              | f              | f              | f                   | t              | n            | f              |          </span><span>0</span><span> |            </span><span>0</span><span> |          </span><span>0</span><span> |        |            |</span></p></div><div><div><p>19</p></div><p><span>(</span><span>4</span><span> </span><span>rows</span><span>)</span></p></div></code></pre></figure></div>
<p>We can see here that we’ve only actually got 4 table-like objects – the rest of the files in this folder are boilerplate – if you look in the DB folders for <code>template0</code>, <code>template1</code> or <code>postgres</code> (i.e. <code>1/</code>, <code>2/</code>, or <code>5/</code>) you’ll see that almost all of the files are exactly the same as our <code>blogdb</code> database.</p>
<p>So what are these <code>pg_class</code> objects and how do they relate to all these files?</p>
<p>Well we can see that <code>countries</code> is there with oid and relfilenode values of 16390 – that’s our actual table. There’s also <code>countries_pkey</code> with oid and relfilenode values of 16395 – that’s the index for our primary key. There’s <code>countries_name_key</code> with 16397 – the index for our name unique constraint – and finally <code>countries_id_seq</code> with 16389 – the sequence used to generate new ID values (we use <code>primary key generated always as identity</code>, which just like <code>serial</code> generates new values in a numerically increasing sequence).</p>
<p>The relfilenode here corresponds to the “filenode” of the object, which is the name of the file on disk. Let’s start off with our <code>countries</code> table.</p>
<div><figure><pre data-language="console"><code><div><div><p>1</p></div><p><span>$ ls -l 16390</span><span>*</span></p></div><div><div><p>2</p></div><p><span>.rw-------@ 33k   16390</span></p></div><div><div><p>3</p></div><p><span>.rw-------@ 25k   16390_fsm</span></p></div></code></pre></figure></div>
<p>For a general object, you’re likely to see three or more files: <sup><a href="#user-content-fn-3" id="user-content-fnref-3" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup></p>
<ul>
<li><code>{filenode}</code> – Postgres splits large objects into multiple files called segments, to avoid issues some operating systems have with large files (mostly historical, to be honest). By default these are 1 GB in size, although this is configurable. This is the first segment file.</li>
<li><code>{filenode}.1</code>, <code>{filenode}.2</code> – these are the subsequent segment files. We don’t have &gt; 1 GB of data yet so we don’t have these.</li>
<li><code>{filenode}_fsm</code> – this is the <a href="https://www.postgresql.org/docs/current/storage-fsm.html">Free Space Map (FSM)</a> file for the object, which contains a binary tree telling you how much free space is available in each page of the heap. Don’t worry, we’re going to explain exactly what the heap and pages are in a minute.</li>
<li><code>{filenode}_vm</code> – this is the <a href="https://www.postgresql.org/docs/current/storage-vm.html">Visibility Map (VM)</a> file for the object, which tells you about the visibility of tuples in your pages. We’ll go into this a bit more later as well.</li>
</ul>
<h2 id="whats-the-heap">What’s the heap?</h2>
<p>All these main segment data files (excluding the FSM and VM) are called the <em>heap</em>.</p>
<p>Something really important about tables which isn’t obvious at first is that, even though they might have sequential primary keys, tables are <em>not ordered</em>. (Hence why we need a separate sequence object to be able to produce the sequential ID values.) For this reason tables are sometimes called a <em>bag</em> of rows. Postgres calls it a <em>heap</em>. For any real-life table that’s being added to and updated and vacuumed, the rows in the heap will <em>not</em> be in sequential order of their primary key.</p>
<p>Importantly, the heap in Postgres is very different to the heap in system memory (as opposed to the stack). They are related concepts and if you’re familiar with the structure of the stack vs. heap in memory you might find the page diagram in the next section very familiar, but it’s important to remember that they are very much separate concepts.</p>
<p>The object heap consists of many different pages (also known as blocks) sequentially stored in the file.</p>
<h2 id="so-whats-a-page">So what’s a page?</h2>
<p>Within a single segment file, you will find multiple pages of fixed size stitched together. By default, a page is 8 KB in size so we’d expect all our object files to be multiple of 8 KB. In this case, our table file is 32 KB which means there must be 4 pages in it.</p>
<p>You might be thinking – why use pages? Why not just have one page per segment? The answer is that each page is written in one atomic operation and the larger the size of the page, the more likely there will be a write failure during the write. The higher the page size, the more performant the database will be while the higher the page size, the higher the likelihood of write failures. The Postgres maintainers chose 8 KB as the default and they know what they’re doing so there’s generally no reason to change this.</p>
<p>This diagram shows what the structure of a page is, and how it relates to the segment and whole object.</p>
<img alt="Postgres database layout" src="https://drew.silcock.dev/media/how-postgres-stores-data-on-disk/database-layout-dark.png">
<img alt="Postgres database layout" src="https://drew.silcock.dev/media/how-postgres-stores-data-on-disk/database-layout-light.png">

<p>In our example here, our main table is 2.7 GiB which requires 3 separate segments of 1 GiB each. 131,072 pages of size 8 KiB into 1 GiB and each page consists of around 40 items (based on each item taking up about 200 bytes).</p>
<h2 id="page-layout">Page layout</h2>
<p>Let’s dive down into our page layout.</p>
<p>You can see that there are three areas of the page:</p>
<ul>
<li>The header &amp; line pointers, which grow “upwards”, meaning line pointer n + 1 has a higher initial offset into the page than line pointer n – the end of the final line pointer is called “lower”.</li>
<li>The special data &amp; items which grow “downwards”, meaning item n + 1 has a lower initial offset into the page than item n – the end of the final item is called “upper”.</li>
<li>The free space, which is in between the last line pointer and the last item, i.e. goes from “lower” to “upper” – you can calculate the remaining free space in the page by doing “upper” - “lower”.</li>
</ul>
<p>The page header itself contains things like:</p>
<ul>
<li>A checksum of the page</li>
<li>The offset to the end of the line pointers (a.k.a. “lower”)</li>
<li>The offset to the end of the free space (i.e. to the start of the items, a.k.a. “upper”)</li>
<li>The offset to the start of the special space</li>
<li>Version information</li>
</ul>
<p>There’s actually an in-built extension called <a href="https://www.postgresql.org/docs/current/pageinspect.html"><code>pageinspect</code></a> which we can use to look at our page header information:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># </span><span>create</span><span> extension pageinspect;</span></p></div><div><div><p>2</p></div><p><span>CREATE</span><span> EXTENSION</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> page_header(get_raw_page(</span><span>'countries'</span><span>, </span><span>0</span><span>));</span></p></div><div><div><p>5</p></div><p><span><span>    </span></span><span>lsn    | </span><span>checksum</span><span> | flags | lower | upper | special | pagesize | </span><span>version</span><span> | prune_xid</span></p></div><div><div><p>6</p></div><p><span>-----------+----------+-------+-------+-------+---------+----------+---------+-----------</span></p></div><div><div><p>7</p></div><p><span> </span><span>0</span><span>/</span><span>1983F70 |        </span><span>0</span><span> |     </span><span>0</span><span> |   </span><span>292</span><span> |   </span><span>376</span><span> |    </span><span>8192</span><span> |     </span><span>8192</span><span> |       </span><span>4</span><span> |         </span><span>0</span></p></div><div><div><p>8</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>9</p></div><div><div><p>10</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> page_header(get_raw_page(</span><span>'countries'</span><span>, </span><span>1</span><span>));</span></p></div><div><div><p>11</p></div><p><span><span>    </span></span><span>lsn    | </span><span>checksum</span><span> | flags | lower | upper | special | pagesize | </span><span>version</span><span> | prune_xid</span></p></div><div><div><p>12</p></div><p><span>-----------+----------+-------+-------+-------+---------+----------+---------+-----------</span></p></div><div><div><p>13</p></div><p><span> </span><span>0</span><span>/</span><span>19858E0 |        </span><span>0</span><span> |     </span><span>0</span><span> |   </span><span>308</span><span> |   </span><span>408</span><span> |    </span><span>8192</span><span> |     </span><span>8192</span><span> |       </span><span>4</span><span> |         </span><span>0</span></p></div><div><div><p>14</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>15</p></div><div><div><p>16</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> page_header(get_raw_page(</span><span>'countries'</span><span>, </span><span>2</span><span>));</span></p></div><div><div><p>17</p></div><p><span><span>    </span></span><span>lsn    | </span><span>checksum</span><span> | flags | lower | upper | special | pagesize | </span><span>version</span><span> | prune_xid</span></p></div><div><div><p>18</p></div><p><span>-----------+----------+-------+-------+-------+---------+----------+---------+-----------</span></p></div><div><div><p>19</p></div><p><span> </span><span>0</span><span>/</span><span>1987278</span><span> |        </span><span>0</span><span> |     </span><span>0</span><span> |   </span><span>296</span><span> |   </span><span>416</span><span> |    </span><span>8192</span><span> |     </span><span>8192</span><span> |       </span><span>4</span><span> |         </span><span>0</span></p></div><div><div><p>20</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>21</p></div><div><div><p>22</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> page_header(get_raw_page(</span><span>'countries'</span><span>, </span><span>3</span><span>));</span></p></div><div><div><p>23</p></div><p><span><span>    </span></span><span>lsn    | </span><span>checksum</span><span> | flags | lower | upper | special | pagesize | </span><span>version</span><span> | prune_xid</span></p></div><div><div><p>24</p></div><p><span>-----------+----------+-------+-------+-------+---------+----------+---------+-----------</span></p></div><div><div><p>25</p></div><p><span> </span><span>0</span><span>/</span><span>19882C8 |        </span><span>0</span><span> |     </span><span>0</span><span> |   </span><span>196</span><span> |  </span><span>3288</span><span> |    </span><span>8192</span><span> |     </span><span>8192</span><span> |       </span><span>4</span><span> |         </span><span>0</span></p></div><div><div><p>26</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div></code></pre></figure></div>
<p>The first thing you might notice is that <code>special</code> is the same as <code>pagesize</code> – this is just saying that there is no special data section for this page. The special data section is not used for table pages, only for other types like indexes where it stores information about the binary tree structure.</p>
<p>You might be wondering why all the <code>checksum</code> values are all 0. Turns out that Postgres <a href="https://www.postgresql.org/docs/current/checksums.html">disables checksum protection by default</a> for performance reasons and you have to <a href="https://www.postgresql.org/docs/current/app-initdb.html#APP-INITDB-DATA-CHECKSUMS">manually enable it</a>.</p>
<p>If we compare the <code>lower</code> and <code>upper</code> values for these pages, we can see that:</p>
<ul>
<li>Page 0 has 376 - 292 = 84 bytes of free space</li>
<li>Page 1 has 408 - 308 = 100 bytes of free space</li>
<li>Page 2 has 416 - 296 = 120 bytes of free space</li>
<li>Page 3 has 3288 - 196 = 3092 bytes of free space.</li>
</ul>
<p>We can infer from this that:</p>
<ul>
<li>The rows in our countries table is ~100 bytes as that’s how much space is left in the full pages.</li>
<li>Page 3 is the final page as there’s plenty of space left in there.</li>
</ul>
<p>We can confirm the row size using the <code>heap_page_items()</code> function from pageinspect:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>2</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>1</span><span>))</span></p></div><div><div><p>3</p></div><p><span>blogdb</span><span>-</span><span># </span><span>limit</span><span> </span><span>10</span><span>;</span></p></div><div><div><p>4</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid |                                                                                                                           t_data</span></p></div><div><div><p>5</p></div><p><span>----+--------+--------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></p></div><div><div><p>6</p></div><p><span>  </span><span>1</span><span> |   </span><span>8064</span><span> |    </span><span>123</span><span> | (</span><span>1</span><span>,</span><span>1</span><span>)  | \x440000002545717561746f7269616c204775696e656107475109474e51093232361d49534f20333136362d323a47510f416672696361275375622d5361686172616e204166726963611d4d6964646c6520416672696361093030320932303209303137</span></p></div><div><div><p>7</p></div><p><span>  </span><span>2</span><span> |   </span><span>7944</span><span> |    </span><span>114</span><span> | (</span><span>1</span><span>,</span><span>2</span><span>)  | \x45000000114572697472656107455209455249093233321d49534f20333136362d323a45520f416672696361275375622d5361686172616e204166726963611f4561737465726e20416672696361093030320932303209303134</span></p></div><div><div><p>8</p></div><p><span>  </span><span>3</span><span> |   </span><span>7840</span><span> |     </span><span>97</span><span> | (</span><span>1</span><span>,</span><span>3</span><span>)  | \x46000000114573746f6e696107454509455354093233331d49534f20333136362d323a45450f4575726f7065214e6f72746865726e204575726f706503093135300931353409202020</span></p></div><div><div><p>9</p></div><p><span>  </span><span>4</span><span> |   </span><span>7720</span><span> |    </span><span>116</span><span> | (</span><span>1</span><span>,</span><span>4</span><span>)  | \x47000000134573776174696e6907535a0953575a093734381d49534f20333136362d323a535a0f416672696361275375622d5361686172616e2041667269636121536f75746865726e20416672696361093030320932303209303138</span></p></div><div><div><p>10</p></div><p><span>  </span><span>5</span><span> |   </span><span>7600</span><span> |    </span><span>115</span><span> | (</span><span>1</span><span>,</span><span>5</span><span>)  | \x4800000013457468696f70696107455409455448093233311d49534f20333136362d323a45540f416672696361275375622d5361686172616e204166726963611f4561737465726e20416672696361093030320932303209303134</span></p></div><div><div><p>11</p></div><p><span>  </span><span>6</span><span> |   </span><span>7448</span><span> |    </span><span>148</span><span> | (</span><span>1</span><span>,</span><span>6</span><span>)  | \x490000003946616c6b6c616e642049736c616e647320284d616c76696e61732907464b09464c4b093233381d49534f20333136362d323a464b13416d657269636173414c6174696e20416d657269636120616e64207468652043617269626265616e1d536f75746820416d6572696361093031390934313909303035</span></p></div><div><div><p>12</p></div><p><span>  </span><span>7</span><span> |   </span><span>7344</span><span> |    </span><span>103</span><span> | (</span><span>1</span><span>,</span><span>7</span><span>)  | \x4a0000001d4661726f652049736c616e647307464f0946524f093233341d49534f20333136362d323a464f0f4575726f7065214e6f72746865726e204575726f706503093135300931353409202020</span></p></div><div><div><p>13</p></div><p><span>  </span><span>8</span><span> |   </span><span>7248</span><span> |     </span><span>89</span><span> | (</span><span>1</span><span>,</span><span>8</span><span>)  | \x4b0000000b46696a6907464a09464a49093234321d49534f20333136362d323a464a114f6365616e6961154d656c616e6573696103093030390930353409202020</span></p></div><div><div><p>14</p></div><p><span>  </span><span>9</span><span> |   </span><span>7144</span><span> |     </span><span>97</span><span> | (</span><span>1</span><span>,</span><span>9</span><span>)  | \x4c0000001146696e6c616e640746490946494e093234361d49534f20333136362d323a46490f4575726f7065214e6f72746865726e204575726f706503093135300931353409202020</span></p></div><div><div><p>15</p></div><p><span> </span><span>10</span><span> |   </span><span>7048</span><span> |     </span><span>95</span><span> | (</span><span>1</span><span>,</span><span>10</span><span>) | \x4d0000000f4672616e636507465209465241093235301d49534f20333136362d323a46520f4575726f70651f5765737465726e204575726f706503093135300931353509202020</span></p></div><div><div><p>16</p></div><p><span>(</span><span>10</span><span> </span><span>rows</span><span>)</span></p></div></code></pre></figure></div>
<p>Here <code>lp</code> means the line pointer, <code>lp_off</code> means the offset to the start of the item, <code>lp_len</code> is the size of the item in bytes and <code>t_ctid</code> refers to the ctid of the item. The ctid (Current Tuple ID)<sup><a href="#user-content-fn-4" id="user-content-fnref-4" data-footnote-ref="" aria-describedby="footnote-label">4</a></sup> tells you where the item is located in the form <code>(page index, item index within page)</code> so <code>(1, 1)</code> means the first item in page 1 (pages are zero-indexed, item index is not for some reason).</p>
<p>We can also see the actual data for the item here as well, which is pretty cool – this long hex string is exactly the bytes that Postgres has stored on disk. Let’s check which row we’re looking at with some Python:</p>
<div><figure><pre data-language="bash"><code><div><div><p>1</p></div><p><span>$</span><span> </span><span>row_data=</span><span>$(</span><span>docker</span><span> </span><span>exec</span><span> $pg_container_id </span><span>psql</span><span> </span><span>-U</span><span> </span><span>postgres</span><span> </span><span>blogdb</span><span> </span><span>--tuples-only</span><span> </span><span>-c</span><span> </span><span>"select t_data from heap_page_items(get_raw_page('countries', 1)) limit 1;"</span><span>)</span></p></div><div><div><p>2</p></div><p><span>$</span><span> </span><span>python3</span><span> </span><span>-c</span><span> </span><span>"print(bytearray.fromhex(r'</span><span>$row_data</span><span>'.strip().replace('</span><span>\\\\</span><span>x', '')).decode('utf-8', errors='ignore'))"</span><span> </span><span>&gt;</span><span> </span><span>row_data.bin</span></p></div><div><div><p>3</p></div><p><span>$</span><span> </span><span>cat</span><span> </span><span>row_data.bin</span></p></div><div><div><p>4</p></div><p><span>D%Equatorial</span><span> </span><span>GuineaGQ</span><span>   </span><span>GNQ</span><span>     </span><span>226ISO</span><span> </span><span>3166-2:GQAfrica'Sub-Saharan AfricaMiddle Africa  002     202     017</span></p></div><div><div><p>5</p></div><p><span>$ hexyl row_data.bin</span></p></div><div><div><p>6</p></div><p><span>┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐</span></p></div><div><div><p>7</p></div><p><span>│00000000│ 44 00 00 00 25 45 71 75 ┊ 61 74 6f 72 69 61 6c 20 │D⋄⋄⋄%Equ┊atorial │</span></p></div><div><div><p>8</p></div><p><span>│00000010│ 47 75 69 6e 65 61 07 47 ┊ 51 09 47 4e 51 09 32 32 │Guinea•G┊Q_GNQ_22│</span></p></div><div><div><p>9</p></div><p><span>│00000020│ 36 1d 49 53 4f 20 33 31 ┊ 36 36 2d 32 3a 47 51 0f │6•ISO 31┊66-2:GQ•│</span></p></div><div><div><p>10</p></div><p><span>│00000030│ 41 66 72 69 63 61 27 53 ┊ 75 62 2d 53 61 68 61 72 │Africa'S┊ub-Sahar│</span></p></div><div><div><p>11</p></div><p><span>│00000040│</span><span> </span><span>61</span><span> </span><span>6e</span><span> </span><span>20</span><span> </span><span>41</span><span> </span><span>66</span><span> </span><span>72</span><span> </span><span>69</span><span> </span><span>63</span><span> </span><span>┊</span><span> </span><span>61</span><span> </span><span>1d</span><span> </span><span>4d</span><span> </span><span>69</span><span> </span><span>64</span><span> </span><span>64</span><span> </span><span>6c</span><span> </span><span>65</span><span> </span><span>│an</span><span> </span><span>Afric┊a•Middle│</span></p></div><div><div><p>12</p></div><p><span>│00000050│</span><span> </span><span>20</span><span> </span><span>41</span><span> </span><span>66</span><span> </span><span>72</span><span> </span><span>69</span><span> </span><span>63</span><span> </span><span>61</span><span> </span><span>09</span><span> </span><span>┊</span><span> </span><span>30</span><span> </span><span>30</span><span> </span><span>32</span><span> </span><span>09</span><span> </span><span>32</span><span> </span><span>30</span><span> </span><span>32</span><span> </span><span>09</span><span> </span><span>│</span><span> </span><span>Africa_┊002_202_│</span></p></div><div><div><p>13</p></div><p><span>│00000060│</span><span> </span><span>30</span><span> </span><span>31</span><span> </span><span>37</span><span> </span><span>0a</span><span>             </span><span>┊</span><span>                         </span><span>│017_</span><span>    </span><span>┊</span><span>        </span><span>│</span></p></div><div><div><p>14</p></div><p><span>└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘</span></p></div><div><div><p>15</p></div><p><span>$</span><span> </span><span>docker</span><span> </span><span>exec</span><span> $pg_container_id </span><span>psql</span><span> </span><span>-U</span><span> </span><span>postgres</span><span> </span><span>blogdb</span><span> </span><span>-c</span><span> </span><span>"select * from countries where name = 'Equatorial Guinea';"</span></p></div><div><div><p>16</p></div><p><span> </span><span>ctid</span><span>  </span><span>|</span><span> </span><span>id</span><span> </span><span>|</span><span>       </span><span>name</span><span>        </span><span>|</span><span> </span><span>alpha_2</span><span> </span><span>|</span><span> </span><span>alpha_3</span><span> </span><span>|</span><span> </span><span>numeric_3</span><span> </span><span>|</span><span>  </span><span>iso_3166_2</span><span>   </span><span>|</span><span> </span><span>region</span><span> </span><span>|</span><span>     </span><span>sub_region</span><span>     </span><span>|</span><span> </span><span>intermediate_region</span><span> </span><span>|</span><span> </span><span>region_code</span><span> </span><span>|</span><span> </span><span>sub_region_code</span><span> </span><span>|</span><span> </span><span>intermediate_region_code</span></p></div><div><div><p>17</p></div><p><span>-------+----+-------------------+---------+---------+-----------+---------------+--------+--------------------+---------------------+-------------+-----------------+--------------------------</span></p></div><div><div><p>18</p></div><p><span><span> </span></span><span>(</span><span>1,1</span><span>) </span><span>|</span><span> </span><span>68</span><span> </span><span>|</span><span> </span><span>Equatorial</span><span> </span><span>Guinea</span><span> </span><span>|</span><span> </span><span>GQ</span><span>      </span><span>|</span><span> </span><span>GNQ</span><span>     </span><span>|</span><span> </span><span>226</span><span>       </span><span>|</span><span> </span><span>ISO</span><span> </span><span>3166-2:GQ</span><span> </span><span>|</span><span> </span><span>Africa</span><span> </span><span>|</span><span> </span><span>Sub-Saharan</span><span> </span><span>Africa</span><span> </span><span>|</span><span> </span><span>Middle</span><span> </span><span>Africa</span><span>       </span><span>|</span><span> </span><span>002</span><span>         </span><span>|</span><span> </span><span>202</span><span>             </span><span>|</span><span> </span><span>017</span></p></div><div><div><p>19</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div></code></pre></figure></div>
<p>Ahah, we are looking at the data for Equatorial Guinea, the only continental African country to speak Spanish as an official language. (If you’re wondering why <code>(1,1)</code> isn’t Afghanistan, the country with ID 1, remember that the pages start at 0 so we’d expect to find Afghanistan at <code>(0,1)</code>.)</p>
<p>We can see here that each column is being stored right next to each other with a random byte in between each one. Let’s dive in:</p>
<ul>
<li><code>0x 44 00 00 00</code> = <code>68</code> (must be little endian) so the first 4 bytes is the row’s ID</li>
<li>Then, there’s a random byte like <code>0x25</code> or <code>0x07</code> followed by the column data – the rest of the columns are string types so they’re all stored in UTF-8. If you know what these inter-column bytes mean, leave a comment below! I can’t figure it out.</li>
</ul>
<p>Individual values that are too big to store in here (e.g. they’re more than 8 KiB in size) get stored in a separate relation, or <a href="https://www.postgresql.org/docs/current/storage-toast.html">TOASTed</a> – this will be the topic of a future post 🍞.</p>
<h2 id="what-happens-when-a-row-gets-modifed-or-deleted">What happens when a row gets modifed or deleted?</h2>
<p>Postgres uses MVCC (Multiversion Concurrency Control) to handle concurrent access to data. The “multiversion” here means that when a transaction comes in and modifies a row, it doesn’t touch the existing tuple on disk at all. Instead, it creates a new tuples at the end of the last page with the modified row. When it commits the update, it swaps the version of the data that a new transaction will see from the old tuple to the new one.</p>
<p>Let’s see this in action:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> ctid </span><span>from</span><span> countries </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Antarctica'</span><span>;</span></p></div><div><div><p>2</p></div><p><span><span> </span></span><span>ctid</span></p></div><div><div><p>3</p></div><p><span>-------</span></p></div><div><div><p>4</p></div><p><span><span> </span></span><span>(</span><span>0</span><span>,</span><span>9</span><span>)</span></p></div><div><div><p>5</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>6</p></div><div><div><p>7</p></div><p><span>blogdb</span><span>=</span><span># </span><span>update</span><span> countries </span><span>set</span><span> region </span><span>=</span><span> </span><span>'The South Pole'</span><span> </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Antarctica'</span><span>;</span></p></div><div><div><p>8</p></div><p><span>UPDATE</span><span> </span><span>1</span></p></div><div><p>9</p></div><div><div><p>10</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> ctid </span><span>from</span><span> countries </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Antarctica'</span><span>;</span></p></div><div><div><p>11</p></div><p><span><span>  </span></span><span>ctid</span></p></div><div><div><p>12</p></div><p><span>--------</span></p></div><div><div><p>13</p></div><p><span><span> </span></span><span>(</span><span>3</span><span>,</span><span>44</span><span>)</span></p></div><div><div><p>14</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>15</p></div><div><div><p>16</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>17</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>0</span><span>))</span></p></div><div><div><p>18</p></div><p><span>blogdb</span><span>-</span><span># offset </span><span>8</span><span> </span><span>limit</span><span> </span><span>1</span><span>;</span></p></div><div><div><p>19</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid | t_data</span></p></div><div><div><p>20</p></div><p><span>----+--------+--------+--------+--------</span></p></div><div><div><p>21</p></div><p><span>  </span><span>9</span><span> |      </span><span>0</span><span> |      </span><span>0</span><span> |        |</span></p></div><div><div><p>22</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div></code></pre></figure></div>
<p>We can see that once we update the row, its ctid changes from <code>(0,9)</code> to <code>(3,44)</code> (which is probably at the end of the last page). The old data and ctid is also wiped from the old item location.</p>
<p>What about deletions? Let’s take a look:</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># </span><span>delete</span><span> </span><span>from</span><span> countries </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Equatorial Guinea'</span><span>;</span></p></div><div><div><p>2</p></div><p><span>DELETE</span><span> </span><span>1</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>5</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>1</span><span>))</span></p></div><div><div><p>6</p></div><p><span>blogdb</span><span>-</span><span># </span><span>limit</span><span> </span><span>1</span><span>;</span></p></div><div><div><p>7</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid |                                                                                                  t_data</span></p></div><div><div><p>8</p></div><p><span>----+--------+--------+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></p></div><div><div><p>9</p></div><p><span>  </span><span>1</span><span> |   </span><span>8064</span><span> |    </span><span>123</span><span> | (</span><span>1</span><span>,</span><span>1</span><span>)  | \x440000002545717561746f7269616c204775696e656107475109474e51093232361d49534f20333136362d323a47510f416672696361275375622d5361686172616e204166726963611d4d6964646c6520416672696361093030320932303209303137</span></p></div><div><div><p>10</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div></code></pre></figure></div>
<p>The data is still there! That’s because Postgres doesn’t bother actually deleting the data, it just marks the data as deleted. But you might be thinking, if rows are constantly getting deleted and added, you’ll end up with constantly increasing segments files full of deleted data (called “dead tuples” in the Postgres lingo). This is where vacuuming comes in. Let’s trigger a manual vacuum and see what happens.</p>
<div><figure><pre data-language="sql"><code><div><div><p>1</p></div><p><span>blogdb</span><span>=</span><span># vacuum full;</span></p></div><div><div><p>2</p></div><p><span>VACUUM</span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>5</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>1</span><span>))</span></p></div><div><div><p>6</p></div><p><span>blogdb</span><span>-</span><span># </span><span>limit</span><span> </span><span>1</span><span>; </span><span>-- This used to be the dead tuple where 'Equatorial Guinea' was.</span></p></div><div><div><p>7</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid |                                                                        t_data</span></p></div><div><div><p>8</p></div><p><span>----+--------+--------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------</span></p></div><div><div><p>9</p></div><p><span>  </span><span>1</span><span> |   </span><span>8088</span><span> |     </span><span>97</span><span> | (</span><span>1</span><span>,</span><span>1</span><span>)  | \x46000000114573746f6e696107454509455354093233331d49534f20333136362d323a45450f4575726f7065214e6f72746865726e204575726f706503093135300931353409202020</span></p></div><div><div><p>10</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>11</p></div><div><div><p>12</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> lp, lp_off, lp_len, t_ctid, t_data</span></p></div><div><div><p>13</p></div><p><span>blogdb</span><span>-</span><span># </span><span>from</span><span> heap_page_items(get_raw_page(</span><span>'countries'</span><span>, </span><span>0</span><span>))</span></p></div><div><div><p>14</p></div><p><span>blogdb</span><span>-</span><span># offset </span><span>8</span><span> </span><span>limit</span><span> </span><span>1</span><span>; </span><span>-- This used to be the dead tuple where the old 'Antarctica' version was.</span></p></div><div><div><p>15</p></div><p><span><span> </span></span><span>lp | lp_off | lp_len | t_ctid |                                                                                                               t_data</span></p></div><div><div><p>16</p></div><p><span>----+--------+--------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></p></div><div><div><p>17</p></div><p><span>  </span><span>9</span><span> |   </span><span>7192</span><span> |    </span><span>136</span><span> | (</span><span>0</span><span>,</span><span>9</span><span>)  | \x0a00000029416e746967756120616e64204261726275646107414709415447093032381d49534f20333136362d323a414713416d657269636173414c6174696e20416d657269636120616e64207468652043617269626265616e1543617269626265616e093031390934313909303239</span></p></div><div><div><p>18</p></div><p><span>(</span><span>1</span><span> </span><span>row</span><span>)</span></p></div><div><p>19</p></div><div><div><p>20</p></div><p><span>blogdb</span><span>=</span><span># </span><span>select</span><span> ctid, </span><span>name</span><span> </span><span>from</span><span> countries</span></p></div><div><div><p>21</p></div><p><span>blogdb</span><span>-</span><span># </span><span>where</span><span> </span><span>name</span><span> </span><span>=</span><span> </span><span>'Antarctica'</span><span> </span><span>or</span><span> ctid </span><span>=</span><span> </span><span>'(0,9)'</span><span> </span><span>or</span><span> ctid </span><span>=</span><span> </span><span>'(1,1)'</span><span>;</span></p></div><div><div><p>22</p></div><p><span><span>  </span></span><span>ctid  |        </span><span>name</span></p></div><div><div><p>23</p></div><p><span>--------+---------------------</span></p></div><div><div><p>24</p></div><p><span><span> </span></span><span>(</span><span>0</span><span>,</span><span>9</span><span>)  | Antigua </span><span>and</span><span> Barbuda</span></p></div><div><div><p>25</p></div><p><span><span> </span></span><span>(</span><span>1</span><span>,</span><span>1</span><span>)  | Estonia</span></p></div><div><div><p>26</p></div><p><span><span> </span></span><span>(</span><span>3</span><span>,</span><span>42</span><span>) | Antarctica</span></p></div><div><div><p>27</p></div><p><span>(</span><span>3</span><span> </span><span>rows</span><span>)</span></p></div></code></pre></figure></div>
<p>Now that we’ve vacuumed, a couple of things have happened:</p>
<ul>
<li>The dead tuple where the outdated first version of the Antarctica row was located has now been replaced with Antigua and Barbuda, which is the next country along.</li>
<li>The dead tuple where the Equatorial Guinea row was located has now been replaced with Estonia, the next country along.</li>
<li>Antarctica has moved from <code>(3,44)</code> down to <code>(3,42)</code> because the 2 dead tuples has now been cleaned out and the Antarctica row can move down 2 slots.</li>
</ul>
<h2 id="what-about-indexes">What about indexes?</h2>
<p>Indexes work exactly the same as tables! The only difference is that the tuple stored as items in each page contains the indexed data instead of the full row data and the special data contains sibling node information for the binary tree.</p>
<p><strong>Exercise for the reader:</strong> Find the segment file for the <code>name</code> column unique index and investigate the values of the <code>t_data</code> in each item and “special data” for each page. Comment below what you find!</p>
<h2 id="why-would-i-ever-need-to-know-any-of-this">Why would I ever need to know any of this?</h2>
<p>There’s a few reasons:</p>
<ul>
<li>It’s interesting!</li>
<li>It helps understand how Postgres queries your data on disk, how MVCC works and lots more that’s really useful when you’re trying to gain a deep understanding of how your database works for the purpose of fine-tuning performance.</li>
<li>In certain rare circumstances, it can actually be quite useful for data recovery. Take the following examples:
<ul>
<li>You have someone who through incompetence or malice decides to corrupt your database by removing or messing up a couple of files on disk. Postgres can no longer understand the database so starting Postgres up will just result in a corrupted state. You can swoop in and use your knowledge to manually recover the data. This would still be a fairly large undertaking to do this, and in real life you’d probably call in a professional data recovery specialist, but maybe in this imaginary scenario your company can’t afford one so you have to make do.</li>
<li>Someone accidentally set the super-important customers table on the production database as unlogged<sup><a href="#user-content-fn-5" id="user-content-fnref-5" data-footnote-ref="" aria-describedby="footnote-label">5</a></sup> and then the server crashes. Because in an unlogged table changes aren’t written to the WAL, a database recovery via logical decoding will not include any of the unlogged table data. If you restart the server, Postgres will wipe clean the whole unlogged table because it will restore the database state from the WAL. However, if you copy out the raw database files, you can use the knowledge you have gained from this post to recover the contents of the data. (There’s probably a tool that does this already, but if not you could write your own – that would be an interesting project…)</li>
</ul>
</li>
<li>It’s a good conversation starter at parties <sup><a href="#user-content-fn-6" id="user-content-fnref-6" data-footnote-ref="" aria-describedby="footnote-label">6</a></sup>.</li>
</ul>
<h2 id="further-reading">Further reading</h2>
<ul>
<li><a href="https://ketansingh.me/posts/how-postgres-stores-rows/">Ketan Singh – How Postgres Stores Rows</a></li>
<li><a href="https://www.postgresql.org/docs/current/storage.html">PostgreSQL Documentation – Chapter 73. Database Physical Storage</a></li>
<li><a href="https://www.youtube.com/watch?v=L-dw1yRFYVg">Advanced SQL (Summer 2020), U Tübingen – DB2 — Chapter 03 — Video #09 — Row storage in PostgreSQL, heap file page layout</a></li>
<li><a href="https://www.youtube.com/watch?v=1D81vXw2T_w">15-445/645 Intro to Database Systems (Fall 2019), Carnegie Mellon University – 03 - Database Storage I</a></li>
<li><a href="https://medium.com/quadcode-life/structure-of-heap-table-in-postgresql-d44c94332052">Structure of Heap Table in PostgreSQL</a></li>
<li><a href="https://pgpedia.info/categories/data-directory.html">pgPedia – Data Directory</a></li>
</ul>
<h2 id="future-topics">Future topics</h2>
<p>Database engines is an endlessly interesting topic, and there’s lots more I’d like to write about in this series. Some ideas are:</p>
<ul>
<li>How Postgres stores oversized values – let’s raise a TOAST</li>
<li>How Postgres handles concurrency – MVCC is the real MVP</li>
<li>How Postgres turns a SQL string into data</li>
<li>How Postgres ensures data integrity – where’s WAL</li>
</ul>
<p>If you’d like me to write about one of these, leave a comment below 🙂</p>
<h2 id="updates">Updates</h2>
<ul>
<li>2024-08-05 – Rephrased the explanation of logical decoding based on <a href="https://news.ycombinator.com/item?id=41160109">HN comment from dfox</a>, added explanation of why checksums are all 0 after <a href="https://news.ycombinator.com/item?id=41160233">HN discussion</a>, expanded teaser for future TOAST post.</li>
</ul>
<section data-footnotes="">
<ol>
<li id="user-content-fn-1">
<p>Technically, the data directory is whatever you specify in environment variable <code>PGDATA</code> and it’s possible to put some of the cluster config files elsewhere, but the only reason you’d be messing with any of that is if you were hosting multiple clusters on the same machine using different Postgres server instances, which is a more advanced use case than we’re interesting in here. <a href="#user-content-fnref-1" data-footnote-backref="" aria-label="Back to reference 1">↩</a></p>
</li>
<li id="user-content-fn-2">
<p>You might be wondering why the numeric country code is stored as <code>char(3)</code> instead of <code>integer</code>. You could store it as an integer if you want, but – exactly like phone numbers – it doesn’t make any sense to say “Austria ÷ Afghanistan = Antarctica” (even though numerically it’s true) so what’s the point in storing it as an integer? Really it’s still a 3-character identifier, it’s just restricting the available characters to 0-9 instead of a-z as with the alpha-2 and alpha-3 country codes. <a href="#user-content-fnref-2" data-footnote-backref="" aria-label="Back to reference 2">↩</a></p>
</li>
<li id="user-content-fn-3">
<p>There’s also a filed called <code>{filenode}_init</code> which is used to store initialisation information for unlogged tables, but you won’t see these unless you’re using unlogged tables. <a href="#user-content-fnref-3" data-footnote-backref="" aria-label="Back to reference 3">↩</a></p>
</li>
<li id="user-content-fn-4">
<p>I think this is what the C stands for but I’m not sure. <a href="#user-content-fnref-4" data-footnote-backref="" aria-label="Back to reference 4">↩</a></p>
</li>
<li id="user-content-fn-5">
<p>You can pretend that you’ve never accidentally run a query on prod instead of your local dev database, but we all do it sooner or later. <a href="#user-content-fnref-5" data-footnote-backref="" aria-label="Back to reference 5">↩</a></p>
</li>
<li id="user-content-fn-6">
<p>It’s not, please don’t do this unless you don’t want to be invited back to said parties. <a href="#user-content-fnref-6" data-footnote-backref="" aria-label="Back to reference 6">↩</a></p>
</li>
</ol>
</section>   </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stop Killing Games (440 pts)]]></title>
            <link>https://eci.ec.europa.eu/045/public/</link>
            <guid>41159063</guid>
            <pubDate>Mon, 05 Aug 2024 08:06:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://eci.ec.europa.eu/045/public/">https://eci.ec.europa.eu/045/public/</a>, See on <a href="https://news.ycombinator.com/item?id=41159063">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Starting Hospice (735 pts)]]></title>
            <link>https://jakeseliger.com/2024/08/04/starting-hospice-the-end/</link>
            <guid>41157974</guid>
            <pubDate>Mon, 05 Aug 2024 03:35:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jakeseliger.com/2024/08/04/starting-hospice-the-end/">https://jakeseliger.com/2024/08/04/starting-hospice-the-end/</a>, See on <a href="https://news.ycombinator.com/item?id=41157974">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						
<p>I’m entering hospice. It’s time, and realistically past time. The <a href="https://jakeseliger.com/2023/07/22/i-am-dying-of-squamous-cell-carcinoma-and-the-treatments-that-might-save-me-are-just-out-of-reach/">squamous cell carcinoma tumors are growing</a>, and the two doses of spot radiation I got on June 10 and 12 have <a href="https://jakeseliger.com/2024/07/29/more-isnt-always-better-death-and-over-treatment-as-a-downside-of-agenticness/">utterly destroyed whatever quality of life I had</a>. This weekend, a nurse came by and did some planning with <a href="https://bessstillman.substack.com/">Bess</a> and me. Our extensive efforts to find and start another clinical trial have turned out to be futile, and I’ve withdrawn from the next-best potential clinical trial, <a href="https://clinicaltrials.gov/study/NCT05935098?term=BGB-A3055&amp;rank=1">BGB-A3055</a> in Dallas, at NEXT Oncology, because there’s no feasible way for me to do it (the people at NEXT, however, are and have been amazing: if you’re looking at clinical trials or live in Dallas, schedule a consult). HonorHealth in Scottsdale, where I live, has a <a href="https://www.clinicaltrials.gov/study/NCT05973487?term=tscan002&amp;rank=1">TScan</a> slot, but my physical condition remains terrible for essentially the reasons <a href="https://jakeseliger.com/2024/07/29/more-isnt-always-better-death-and-over-treatment-as-a-downside-of-agenticness/">I’ve written about so extensively</a> that there’s no need to belabor them. My days and nights are filled with unrelenting coughing, hacking, and pain. My whole jaw area is numb, likely from tumor growth. I wonder how much (or many?) of the headache I’m experiencing actually come from tumors, rather than coughing and other problems.</p>



<p>Why hospice? Bess wants the support, after I’m done. There are rules and bureaucracy even in death, and although she admits to being bad at asking for help, she feels overwhelmed now, and certainly will be later. Her bandwidth, she says, is only for me. The details about what comes after are too much, and too distracting.&nbsp;</p>



<p>I’ll keep reading messages until close to the end, though I may not have the strength or presence of mind to reply. I exist in a hazy, druggy fog. I’ve heard Tyler Cowen say in podcasts that he finds the fascination with people’s last words to be overblown, because at the end of life people are rarely at their cognitive peaks and often forget the constraints and desires that drove much of their lives (I’m paraphrasing and have probably gotten some nuance incorrect).</p>



<p>One virtue of a prolonged end is that I feel like I’ve said everything I have to say. I don’ t know that I have a favorite, but I’m fond of “<a href="https://jakeseliger.com/2023/08/21/i-know-what-happens-to-me-after-i-die-but-what-about-those-left-behind/">I know what happens to me after I die, but what about those left behind?</a>”&nbsp;Same with “<a href="https://jakeseliger.com/2023/07/23/how-do-we-evaluate-our-lives-at-the-end-what-counts-what-matters/">How do we evaluate our lives, at the end? What counts, what matters?</a>” I’m tempted to keep citing others, but if you scroll down into the archives you will find them. I meant to turn these essays into a memoir, but that is a project never to be completed by me. Bess assures me that she’s going to complete the project and do her best to get it published. We’ve created so much together in the process of building our life, and Bess says that doesn’t need to stop just because I’m not physically here, and that putting both our baby and our book into the world gives her immediate future the purpose that she’ll badly need.</p>



<p>Though having my life cut short by cancer is horrible, I’ve still in many ways been lucky. Most people never find the person who completes them, I think, and I have. I’ve been helped so much. Numerous oncologists have gone above and beyond.&nbsp;Many people, friends and strangers, have asked if there is anything they can do to help. The #1 thing is to support Bess and our soon-to-be-born daughter, Athena, whatever “support” may mean—the most obvious way is <a href="https://www.gofundme.com/f/help-the-fight-against-cancer-with-jake-s">the Go Fund Me</a>, as any remaining funds will go to Athena. I wish she could grow up with her father, but that is not an option. Being a single mom is hard;<a href="#_ftn1" id="_ftnref1">[1]</a> growing up without a parent is hard; I cannot see what Athena’s future holds, except that I think and hope it will be bright, even though I will not be in it, save for the ways in which friends and family promise to keep me alive for her.</p>



<p>If you want to donate to research, I don’t know the absolute best place, but one good-seeming choice is <a href="https://arcinstitute.org/model">the Arc Institute</a>: “Arc researchers pursue both curiosity-driven exploration and goal-oriented research. The institute will initially focus on complex diseases, including neurodegeneration, cancer, and immune dysfunction.” They don’t have a turn-key donation page up yet, however, so send them an email and ask: “Why not?” I also got a lot of care under <a href="https://providers.ucsd.edu/details/22435/medical-oncology-cancer">Dr. Assuntina Sacco</a> at <a href="https://giveto.ucsd.edu/giving/home/gift-referral/c5ed27e7-9f35-41a3-bf51-74eb34105478">UCSD’s Moores Cancer Center</a>, which does have a turn-key donation page. Let’s make the future better in every way than the past. Donations can be made in memory of someone who has passed.</p>



<p>I wrote earlier, in “<a href="https://jakeseliger.com/2023/10/16/how-do-you-say-goodbye/">How do you say goodbye?</a>”,</p>



<blockquote>
<p>The gift must be given back, sooner or later, willingly or unwillingly, and sadly it seems that I will be made to give it back before my time. I have learned much, experienced much, made many mistakes, enjoyed my triumphs, suffered my defeats, and, most vitally, experienced love. So many people live who never get that last one, and I have been lucky enough to.</p>
</blockquote>



<p>One friend wrote to me: “You did good—when the time comes, I hope that brings you additional peace.” Many of us don’t get what I’ve had: the opportunity to live a full, generative life with people who I love and who love me back. Yet I was able to have all of it, for a time.</p>



<hr>



<p><a href="#_ftnref1" id="_ftn1">[1]</a> Though if anyone can do it, and find a way to do it successfully, it will be Bess.</p>



<figure><a href="https://jakeseliger.com/wp-content/uploads/2024/08/hospice-and-the-end.jpg"><img data-attachment-id="9004" data-permalink="https://jakeseliger.com/2024/08/04/starting-hospice-the-end/hospice-and-the-end/" data-orig-file="https://jakeseliger.com/wp-content/uploads/2024/08/hospice-and-the-end.jpg" data-orig-size="2048,1405" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="hospice and the end" data-image-description="" data-image-caption="" data-medium-file="https://jakeseliger.com/wp-content/uploads/2024/08/hospice-and-the-end.jpg?w=300" data-large-file="https://jakeseliger.com/wp-content/uploads/2024/08/hospice-and-the-end.jpg?w=550" tabindex="0" role="button" width="1024" height="702" src="https://jakeseliger.com/wp-content/uploads/2024/08/hospice-and-the-end.jpg?w=1024" alt=""></a></figure>
					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Japan stocks plunge as much as 7% as Asia shares extend sell-off (128 pts)]]></title>
            <link>https://www.cnbc.com/2024/08/05/asia-markets.html</link>
            <guid>41157605</guid>
            <pubDate>Mon, 05 Aug 2024 02:04:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnbc.com/2024/08/05/asia-markets.html">https://www.cnbc.com/2024/08/05/asia-markets.html</a>, See on <a href="https://news.ycombinator.com/item?id=41157605">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="RegularArticle-ArticleBody-5" data-module="ArticleBody" data-test="articleBody-2" data-analytics="RegularArticle-articleBody-5-2"><div id="ArticleBody-InlineImage-107383735" data-test="InlineImage"><p>Pedestrians cross an intersection in the Shibuya district of Tokyo, Japan, on Tuesday, Feb. 6, 2024.&nbsp;</p><p>Bloomberg | Bloomberg | Getty Images</p></div><div><p>Japan stocks confirmed a bear market on Monday as Asia-Pacific markets continued <a href="https://www.cnbc.com/2024/08/01/stock-market-today-live-updates.html">the sell-off</a> from last week, with the Nikkei 225 and Topix dropping over 12%.</p><p>The benchmark indexes have fallen more than 20% from their all-time highs on July 11.</p><p>The 12.4% loss on the Nikkei — which saw it close at 31,458.42 — was the worst day for the index since the "Black Monday" of 1987. The loss of 4,451.28 points on the index was also the largest in terms of points in its entire history.</p></div><div id="Placeholder-ArticleBody-Video-108015973" data-test="VideoPlaceHolder" role="region" tabindex="0" data-vilynx-id="7000347673" aria-labelledby="Placeholder-ArticleBody-Video-108015973"><p><img src="https://image.cnbcfm.com/api/v1/image/108015974-17228165621722816560-35676403890-1080pnbcnews.jpg?v=1722816561&amp;w=750&amp;h=422&amp;vtcrop=y" alt="Going back to Japanese stocks right now is like catching a falling knife: CIO"><span></span><span></span></p></div><div><p>The Nikkei also erased all its gains so far this year, moving into a loss position year to date.</p><p>The broad-based Topix also saw a rout as it tumbled 12.23% and closed at 2,227.15.</p><p>Heavyweight trading houses such as <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-2"><a href="https://www.cnbc.com/quotes/8058.T-JP/">Mitsubishi</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span>, <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-3"><a href="https://www.cnbc.com/quotes/8031.T-JP/">Mitsui and Co</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span>, <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-4"><a href="https://www.cnbc.com/quotes/8053.T-JP/">Sumitomo</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> and <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-5"><a href="https://www.cnbc.com/quotes/8002.T-JP/">Marubeni</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> all plunged over 14%, with Mitsui seeing a wipeout of almost 20% of its market cap.</p></div><div role="button" tabindex="0"><svg xmlns="http://www.w3.org/2000/svg" width="256" height="256" viewBox="0 0 256 256" aria-labelledby="title desc" role="img" focusable="false" preserveAspectRatio="xMinYMin"><title>Stock Chart Icon</title><desc>Stock chart icon</desc><g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)"><path d="M 87.994 0 H 69.342 c -1.787 0 -2.682 2.16 -1.418 3.424 l 5.795 5.795 l -33.82 33.82 L 28.056 31.196 l -3.174 -3.174 c -1.074 -1.074 -2.815 -1.074 -3.889 0 L 0.805 48.209 c -1.074 1.074 -1.074 2.815 0 3.889 l 3.174 3.174 c 1.074 1.074 2.815 1.074 3.889 0 l 15.069 -15.069 l 14.994 14.994 c 1.074 1.074 2.815 1.074 3.889 0 l 1.614 -1.614 c 0.083 -0.066 0.17 -0.125 0.247 -0.202 l 37.1 -37.1 l 5.795 5.795 C 87.84 23.34 90 22.445 90 20.658 V 2.006 C 90 0.898 89.102 0 87.994 0 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 65.626 37.8 v 49.45 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 23.518 L 65.626 37.8 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 47.115 56.312 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 42.03 L 47.115 56.312 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 39.876 60.503 c -1.937 0 -3.757 -0.754 -5.127 -2.124 l -6.146 -6.145 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 59.844 C 41.952 60.271 40.933 60.503 39.876 60.503 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 22.937 46.567 L 11.051 58.453 c -0.298 0.298 -0.621 0.562 -0.959 0.8 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 48.004 L 22.937 46.567 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path></g></svg><p><img src="https://static-redesign.cnbcfm.com/dist/a54b41835a8b60db28c2.svg" alt="hide content"></p></div><div><p>Monday's decline follows Friday's rout when Japan's <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-6"><a href="https://www.cnbc.com/quotes/.N225/">Nikkei 225</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> and Topix fell more than 5% and 6%, respectively. The broader <a href="https://www.cnbc.com/2024/08/02/japans-nikkei-set-for-almost-4percent-plunge-as-asia-markets-poised-to-open-lower.html">Topix marked its worst day in eight years</a>, while the Nikkei marked its worst day since March 2020.</p><p>In Monday trading, the <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-8"><a href="https://www.cnbc.com/quotes/JPY=/">yen</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> also strengthened to its highest level against the dollar since January, and was last trading at 142.09.</p></div><div role="button" tabindex="0"><svg xmlns="http://www.w3.org/2000/svg" width="256" height="256" viewBox="0 0 256 256" aria-labelledby="title desc" role="img" focusable="false" preserveAspectRatio="xMinYMin"><title>Stock Chart Icon</title><desc>Stock chart icon</desc><g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)"><path d="M 87.994 0 H 69.342 c -1.787 0 -2.682 2.16 -1.418 3.424 l 5.795 5.795 l -33.82 33.82 L 28.056 31.196 l -3.174 -3.174 c -1.074 -1.074 -2.815 -1.074 -3.889 0 L 0.805 48.209 c -1.074 1.074 -1.074 2.815 0 3.889 l 3.174 3.174 c 1.074 1.074 2.815 1.074 3.889 0 l 15.069 -15.069 l 14.994 14.994 c 1.074 1.074 2.815 1.074 3.889 0 l 1.614 -1.614 c 0.083 -0.066 0.17 -0.125 0.247 -0.202 l 37.1 -37.1 l 5.795 5.795 C 87.84 23.34 90 22.445 90 20.658 V 2.006 C 90 0.898 89.102 0 87.994 0 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 65.626 37.8 v 49.45 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 23.518 L 65.626 37.8 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 47.115 56.312 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 42.03 L 47.115 56.312 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 39.876 60.503 c -1.937 0 -3.757 -0.754 -5.127 -2.124 l -6.146 -6.145 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 59.844 C 41.952 60.271 40.933 60.503 39.876 60.503 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path><path d="M 22.937 46.567 L 11.051 58.453 c -0.298 0.298 -0.621 0.562 -0.959 0.8 V 87.25 c 0 1.519 1.231 2.75 2.75 2.75 h 8.782 c 1.519 0 2.75 -1.231 2.75 -2.75 V 48.004 L 22.937 46.567 z" transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round"></path></g></svg><p><img src="https://static-redesign.cnbcfm.com/dist/a54b41835a8b60db28c2.svg" alt="hide content"></p></div><div><p>South Korea's <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-9"><a href="https://www.cnbc.com/quotes/.KS11/">Kospi</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> fell 8.77%, closing at 2,441.55, and the small-cap Kodaq saw a 11.3% wipeout, ending at 691.28.</p><p>Due to the magnitude of the sell-off, the exchanges hit circuit breakers, halting trade for <a href="https://open.krx.co.kr/contents/OPN/05/05000000/OPN05000000.jsp#fe3647848b826aa1ddee224c4b5526f4=1&amp;amp;view=2024080505" target="_blank">the Kospi index at 2.14 p.m. Seoul and at 1.56 p.m. for the Kosdaq</a>. The halt was for 20 minutes. Circuit breakers are activated if stocks rise or fall 8%.</p><p>Investors, meanwhile, awaited key trade data from China and Taiwan this week, a well as central bank decisions from Australia and India.</p><p>China's service sector expanded at a faster pace in July, with the country's purchasing managers' index climbing to 52.1 in July, up from 51.2 in June.</p><p><a href="https://www.pmi.spglobal.com/Public/Home/PressRelease/7edab8209d2246279f622725025f6d51" target="_blank">The Caixin survey</a> said the acceleration of growth was due to faster new business growth, "supported by sustained improvements in underlying demand conditions and an expansion of services offerings."</p></div><div><p>Taiwan's benchmark index, the <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-12"><a href="https://www.cnbc.com/quotes/.TWII/">Taiwan Weighted Index</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span>, was down over 8%, dragged by tech and real estate stocks , while Australia's&nbsp;<a href="https://www.cnbc.com/quotes/.AXJO/">S&amp;P/ASX 200</a> fell 3.7% to 7,649.6.</p><p>The Reserve Bank of Australia kicks off its two-day monetary policy meeting Monday. Economists polled by Reuters expect the central bank to hold rates steady at 4.35%, but markets will monitor the monetary policy statement for clarity on whether the RBA is still considering a rate hike.</p><p>Hong Kong <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-14"><a href="https://www.cnbc.com/quotes/.HSI/">Hang Seng index</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> was down 1.61%, while mainland China's CSI 300 was down 0.48%, seeing the smallest loss in Asia.</p></div><div><p>On Friday in the U.S., stocks fell sharply as a much&nbsp;<a href="https://www.cnbc.com/2024/08/02/job-growth-totals-114000-in-july-much-less-than-expected-as-unemployment-rate-rises-to-4point3percent.html">weaker-than-anticipated jobs report</a>&nbsp;for July ignited worries that the economy could be falling into a recession.</p><p>The Nasdaq was the first of the three major benchmarks to enter correction territory, down more than 10% from its record high. The S&amp;P 500 and Dow were 5.7% and 3.9% below their all-time highs, respectively.</p><p>The <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-16"><a href="https://www.cnbc.com/quotes/.SPX/">S&amp;P 500</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> dropped 1.84%, while the&nbsp;<a href="https://www.cnbc.com/quotes/.IXIC/">Nasdaq Composite</a>&nbsp;lost 2.43%. The&nbsp;<a href="https://www.cnbc.com/quotes/.DJI/">Dow Jones Industrial Average</a>&nbsp;fell 610.71 points, or 1.51%.</p><p><em>—CNBC's Pia Singh and Hakyung Kim contributed to this report.</em></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Building Lego Machines to Destroy Tall Lego Towers (244 pts)]]></title>
            <link>https://kottke.org/24/07/building-lego-machines-to-destroy-tall-lego-towers</link>
            <guid>41157595</guid>
            <pubDate>Mon, 05 Aug 2024 02:02:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kottke.org/24/07/building-lego-machines-to-destroy-tall-lego-towers">https://kottke.org/24/07/building-lego-machines-to-destroy-tall-lego-towers</a>, See on <a href="https://news.ycombinator.com/item?id=41157595">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-container">
<p>

posted <time datetime="2024-07-31T19:12:10Z">Jul 31 @ 03:12 PM</time> by <a href="http://www.kottke.org/">Jason Kottke</a><span>  ·  <span>gift link</span></span>



</p>




<p><iframe loading="lazy" width="560" height="315" src="https://www.youtube.com/embed/HY6q9hwYcoc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></p>

<p><a href="https://www.youtube.com/@BrickTechnology">Brick Technology</a>’s new video features increasingly powerful Lego machines designed to topple ever stronger towers. I love their iterative engineering videos (and those from <a href="https://www.youtube.com/@BrickExperimentChannel">Brick Experiment Channel</a>). As I’ve written about these videos <a href="https://kottke.org/23/07/can-a-lego-car-roll-downhill-forever">before</a>:</p>

<blockquote><p>They’re not even really about Lego…that’s just the playful hook to get you through the door. They’re really about science and engineering — trial and error, repeated failure, iteration, small gains, switching tactics when confronted with dead ends, how innovation can result in significant advantages. Of course, none of this is unique to engineering; these are all factors in any creative endeavor — painting, sports, photography, writing, programming. But the real magic here is seeing it all happen in just a few minutes.</p></blockquote>

<p>I am uncomfortably close to buying some Technic and Mindstorms to dork around with my own little machines. (via <a href="https://waxy.org/">waxy</a>)</p>

<ul><li><a href="https://kottke.org/tag/Lego">Lego</a></li><li><a href="https://kottke.org/tag/video">video</a></li></ul>








</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How I Program in 2024 (303 pts)]]></title>
            <link>http://akkartik.name/post/programming-2024</link>
            <guid>41157494</guid>
            <pubDate>Mon, 05 Aug 2024 01:28:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://akkartik.name/post/programming-2024">http://akkartik.name/post/programming-2024</a>, See on <a href="https://news.ycombinator.com/item?id=41157494">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <p>Jul 31, 2024</p>
<p><b>How I program in 2024</b></p><p>
I talk a lot here about <a href="https://akkartik.name/freewheeling">using computers freely</a>, how to select programs to use, how to decide if a program is trustworthy infrastructure one can safely depend on in the long term. I also spend my time building such infrastructure, because there isn't a lot of it out there. As I do so, I'm always acutely aware that <em>I'm just not very good at it.</em> At best I can claim I try to compensate for limited means with good, transparent intentions.

</p><p>
I just spent <a href="https://akkartik.name/post/2024-06-05-devlog">a month</a> of my free time, off and on, <a href="https://akkartik.name/post/2024-07-22-devlog">rewriting the core</a> of a program I've been using and incrementally modifying for 2 years. I've been becalmed since. Partly this is the regular cadence of my subconscious reflecting on what just happened, what I learned from it, taking some time to decide where to go next. But I'm also growing aware this time of a broader arc in my life:

<!-- more -->

</p><ul>

<li> Back in 2015 I was suspicious of abstractions and big on tests and version control. Code seemed awash in bad abstractions, while tests and versions seemed like the key advances of the 2000s. I thought our troubles stemmed from bad incentives, using abstractions too much, and not using tests and versions enough. <a href="https://github.com/akkartik/mu1">Mu1</a> was an attempt at designing a platform with tests and <a href="https://akkartik.name/post/wart-layers">layers</a> (more like versions, less like abstractions) as foundational constraints influencing everything else.

</li><li> In 2017 I started reworking Mu1 into the current <a href="https://github.com/akkartik/mu">Mu</a>. <a href="https://github.com/akkartik/mu/tree/main/linux/bootstrap#readme">At the start</a> I used all my new ideas for tests and layers. But over time I stopped using them. Mu today has tons of tests, but they are conventional tests, and I never got around to porting over my infrastructure for layers.

</li><li> In 2022 I started working on <a href="https://akkartik.name/freewheeling-apps">Freewheeling Apps</a>. I started out with no tests, got frustrated at some point and wrote thorough tests for a core piece, the text editor. But I struggled to find ways to test the rest, and also found I was getting by fine anyway.

</li><li> Now it's 2024, and a month ago I deleted all my tests. I also started radically reworking my text editor, in a way that would have made me worried about merge conflicts with other Freewheeling Apps. In effect I stopped thinking about version control. Giving up tests and versions, I ended up with a much better program. The cognitive dissonance is now impossible to ignore.

</li></ul>

<p>
After mulling it over for a few days, I think my current synthesis on <a href="https://akkartik.name/freewheeling">programming durable things</a> is:

</p><ol>

<li> Building durably for lots of people is too hard, just don't even try. Be ruled by what you know well, who you know well and <a href="https://en.wikipedia.org/wiki/Dunbar%27s_number">Dunbar's number</a>.
</li><li> Most software out there is incurably infected by incentives to serve lots of people in the short term. Focus as far as possible on software without lots of logos on the website, stuff that is easy to build, has few dependencies, definitely doesn't auto-update. Once you filter by these restrictions, the amount of durable software humanity has created so far is tiny.
</li><li> Small changes in context (people/places/features you want to support) often radically change how well a program fits its context. Our dominant milieu of short-termism doesn't prepare us for this fact.
</li><li> Given this tiny body of past work and low coverage per program, any new program you decide to build is quite likely striking out into the unknown in some way or other. You often won't know <em>quite</em> what you're doing in some direction or other. (In my example above, I was trying to insert special "drawing lines" in a text editor. Questions that raised: can the cursor lie on a drawing? Can I try to draw in one line while the cursor is on another? Drawings are taller than text lines. Can a drawing be partially visible at top of screen? Can I draw on a partially visible drawing? My answers to these questions were sub-optimal for a long time, leading to hacks piled on hacks.)
</li><li> Types, abstractions, tests, versions, state machines, immutability, formal analysis, all these are tools available to us in unfamiliar terrain. Use them to taste.
</li><li> You'll inevitably end up over-using some of these tools, the ones you gravitate towards. The ideal quantity to use these tools is tiny, much more miniscule than any of us is trained to think by our dominant milieu of short-termism. The excess is <em>tech debt.</em> It keeps us from noticing that a program is unnecessarily complex, less durable than it could be, harder to change when the context shifts.
</li><li> When your understanding of the context stabilizes, there's value in throwing away vast swathes of a program, and redoing it from scratch.
</li><li> Before you set out to rewrite, you have to spend some time importing everything into your brain at once. Everything you want from the program, all the scenarios the program has to cater to. This is hard. The goal is to get to a point where you can build everything all at once.
</li><li> Build everything all at once.

</li></ol>

<p>
In my case, tests and versions actively hindered getting to the end of this evolution. Tests let me forget concerns. Version control kept me attached to the past. Both were counter-productive. It took a major reorientation to let go of them.

</p><p>
All the software I've written in my life — and all my Freewheeling Apps so far — are at level 6 in this trajectory. Only <a href="https://akkartik.name/post/2024-07-22-devlog">the output of the past month</a> feels like it might have gotten to level 9. We'll see.

</p><p>
It seems likely that a program can grow so complex it becomes impossible to import into memory in level 8. That seems to describe most software so far, certainly most software written by more than a couple of people. Even my text editor, small as it is, was daunting enough I spent much of the month girding myself to face the terror.

</p><p>
Not all software necessarily <em>needs</em> to get to level 9. I think many of my Freewheeling Apps are simple enough and evolve slowly enough that they would stabilize to a bug-free state with just a handful of people using them, regardless of my initial design choices. Particularly now that I know how to streamline one complex piece at their core. Still, it's good to be aware of how things <em>might</em> be improved, if it becomes worthwhile.

</p><p>
One thing that feels definitely useful in getting to level 9 is <a href="https://www.youtube.com/watch?v=rX0ItVEVjHc">data-oriented design</a>. It's not a tool you can blindly apply but a way of thinking you have to grow into, to look past immediate data structure choices at the big picture of how your program accesses data. Just don't let tools like <a href="https://en.wikipedia.org/wiki/Entity_component_system">ECS</a> blind you to the essential intellectual activity.

</p><p>
These levels are probably not quite right. I'm probably under-estimating tools I have less experience with.

</p><p>
I wonder what levels lie beyond these.

</p><p>
(I last wrote some thoughts on how I program <a href="https://akkartik.name/post/four-repos">back in 2019</a>. It's nice to see signs of evolution.)


  </p><p>
  <em>Comments gratefully appreciated. Please send them to me
  <a href="http://akkartik.name/contact">by any method of your choice</a> and I'll include them
  here.</em>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Uncovered Euripides fragments are 'kind of a big deal' (184 pts)]]></title>
            <link>https://www.colorado.edu/asmagazine/2024/08/01/uncovered-euripides-fragments-are-kind-big-deal</link>
            <guid>41157192</guid>
            <pubDate>Mon, 05 Aug 2024 00:11:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.colorado.edu/asmagazine/2024/08/01/uncovered-euripides-fragments-are-kind-big-deal">https://www.colorado.edu/asmagazine/2024/08/01/uncovered-euripides-fragments-are-kind-big-deal</a>, See on <a href="https://news.ycombinator.com/item?id=41157192">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><em>CU Boulder Classics scholars identify previously unknown fragments of two lost tragedies by Greek tragedian Euripides</em></p>
<hr>
<p>After months of intense scrutiny, two University of Colorado Boulder scholars have deciphered and interpreted what they believe to be the most significant new fragments of works by classical Greek tragedian Euripides in more than half a century.</p>
<p>In November 2022, Basem Gehad, an archaeologist with the Egyptian Ministry of Tourism and Antiquities, sent a papyrus unearthed at the ancient site of Philadelphia in Egypt to <a href="https://www.colorado.edu/classics/yvona-trnka-amrhein" target="_blank">Yvona Trnka-Amrhein</a>, assistant professor of <a href="https://www.colorado.edu/classics/" target="_blank">classics</a>. The two scholars have also recently discovered the upper half of a colossal statue of the ancient Egyptian Pharaoh Ramesses II in their joint excavation project at Hermopolis Magna.</p>
<p>She began to pore over the high-resolution photo of the papyrus (Egyptian law prohibits physically removing any artifact from the country), scrutinizing its 98 lines.</p>
<div>
<p><img alt="Yvona Trnka-Amrhein and John Gilbert" src="https://www.colorado.edu/asmagazine/sites/default/files/styles/medium/public/article-image/trnka-amrhein_and_gilbert.jpg?itok=BmqncZZr"></p>
<p>CU Boulder classicists&nbsp;Yvona Trnka-Amrhein&nbsp;(left) and John Gibert (right) spent months studying a small square of papyrus and&nbsp;became confident it contains previously unknown material from two fragmentary Euripides plays, <em>Polyidus</em> and <em>Ino</em>.</p>
</div>
<p>“It was very clearly tragedy,” she says.</p>
<p>Using the <a href="https://stephanus.tlg.uci.edu/" target="_blank">Thesaurus Linguae Graecae</a>, a comprehensive, digitized database of ancient Greek texts maintained by the University of California, Irvine, Trnka-Amrhein confirmed she was looking at previously unknown excerpts from mostly lost Euripidean plays.</p>
<p>“After more digging, I realized I should call in an expert in Euripides fragments,” she says. “Luckily, my mentor in the department is just that!”</p>
<p>Working together, Trnka-Amrhein and renowned classics Professor <a href="https://www.colorado.edu/classics/john-gibert" target="_blank">John Gibert</a> embarked on many months of grueling work, meticulously poring over a high-resolution photo of the 10.5-square-inch papyrus They made out words and ensured that the words they thought they were seeing fit the norms of tragic style and meter.</p>
<p>Eventually, they became confident that they were working with new material from two fragmentary Euripides plays, <em>Polyidus</em> and <em>Ino</em>. Twenty-two of the lines were previously known in slightly varied versions, but “80 percent was brand-new stuff,” Gibert says.</p>
<p>“We don’t think there has been a find of this significance since the 1960s,” he says.</p>
<p>“This is a large and unusual papyrus for this day and age,” Trnka-Amrhein says. “It’s kind of a big deal in the field.”</p>
<p><strong>Retelling a Cretan myth</strong></p>
<p><em>Polyidus </em>retells an ancient Cretan myth in which King Minos and Queen Pasiphaë demand that the eponymous seer resurrect their son Glaucus after he drowns in a vat of honey.</p>
<p>“Actually, it has a relatively happy ending. It’s not one of these tragedies where everyone winds up dead,” Trnka-Amrhein says: Polyidus is able to revive the boy using an herb he previously saw one snake use to revive another.</p>
<p>The papyrus contains part of a scene in which Minos and Polyidus debate the morality of resurrecting the dead, she says.</p>
<div>
<p><img alt="Marble statue of Euripides" src="https://www.colorado.edu/asmagazine/sites/default/files/styles/medium/public/article-image/louvre_euripides_sculpture.jpg?itok=JLNoyNfl"></p>
<p>A marble statuette of Euripides, found in 1704 CE in the Esquiline Hill at Rome and dated to the 2nd century CE, lists several of the tragedian's works on the back panel. It is on display at the Louvre-Lens Museum in France. (Photo:&nbsp;Pierre André/Wikimedia Commons)</p>
</div>
<p><em>Ino</em> came close to being one of Euripides’ best-known plays, Gibert says. Part of the text was inscribed on cliffs in Armenia that were destroyed in modern conflict. Fortunately, early 20th-century Russian scholars had preserved the images in drawings.</p>
<p>The eponymous character is an aunt of the Greek god Dionysus and part of the royal family of Thebes. In previously known fragments of a related play, Ino is an evil stepmother intent on killing her husband the Thessalian king’s children from a previous marriage. The new fragment introduces a new plot, Trnka-Amrhein says.</p>
<p>“Another woman is the evil stepmother, and Ino is the victim,” she says. “The third wife of the king is trying to eliminate Ino’s children. … Ino turns the tables on her, causing her to kill her own children and commit suicide. It’s a more traditional tragedy: death, mayhem, suicide.”</p>
<p>Of course, in matters of ancient Greek, there is always room for interpretation, and such bold claims will receive careful scrutiny from other experts. Gibert and Trnka-Amrhein decided not to pull any punches with their conclusions.</p>
<p>“We could play it safe,” Gibert says. “We are establishing a solid foundation, and on top of that we are sticking our necks out a little.”</p>
<p>They’ve already entered the gauntlet of scrutiny, making their case to 13 experts in Washington, D.C., in June and having their first edition of the fragment accepted for publication in August.</p>
<p>On Sept. 14, they will host the Ninth Fountain Symposium on the CU Boulder campus, supported by long-time Boulder resident and classics enthusiast Dr. Celia M. Fountain. The day-long event will feature three illustrious experts: Professor Paul Schubert, a Swiss specialist in papyrology; specialist in ancient Greek literature and drama Laura Swift of Oxford University; and Professor Sarah Iles Johnston, an expert in Greek religion, goddesses and magic from the Ohio State University. They will be joined by Trnka-Amrhein, Gibert and Associate Professor of Classics <a href="https://www.colorado.edu/classics/laurialan-reitzammer" target="_blank">Laurialan Reitzammer</a>.</p>
<p>“In a departure, instead of having the guests give hour-long papers, we’re going to present for 20 to 25 minutes each, in pairs, in dialogue, followed by Q-and-A,” Gibert says.</p>
<p>And as the academic year gets underway, Gibert says he and Trnka-Amrhein will “take the show on the road” to such places as Dartmouth and Harvard.</p>
<p>“John’s contacts and readers in the Euripides world have given us reassurance we’re not going to have too much pie on our faces,” Trnka-Amrhein says. “We feel extremely lucky to have worked on this material and look forward to the world’s reactions.”</p>
<p><small><em>Top image:&nbsp;A marble bas-relief show Euripides (seated), a standing woman holding out a theater mask to him (left) and the god Dionysus (right), dated to between the 1st century BCE and the 1st century CE, from the Misthos collection in the Istanbul (Turkey) Archaeological Museum. (Photo:&nbsp;John-Grégoire/Wikimedia Commons)</em></small></p>
<hr>
<p><em>Did you enjoy this article?&nbsp;<a href="https://cu.tfaforms.net/73" target="_blank">Subcribe to our newsletter.</a>&nbsp;Passionate about classics?&nbsp;<a href="https://www.colorado.edu/classics/giving" target="_blank">Show your support.</a></em></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Free e-book about WebGPU Programming (409 pts)]]></title>
            <link>https://shi-yan.github.io/webgpuunleashed/</link>
            <guid>41156872</guid>
            <pubDate>Sun, 04 Aug 2024 22:56:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://shi-yan.github.io/webgpuunleashed/">https://shi-yan.github.io/webgpuunleashed/</a>, See on <a href="https://news.ycombinator.com/item?id=41156872">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
            <div><p><img onclick="openImage(this)" src="https://shi-yan.github.io/webgpuunleashed/thumb_meta.png" original_src="meta.png" alt="By Shi Yan" sources="[]"></p><p>By Shi Yan</p></div><p>Welcome to "WebGPU Unleashed" - your gateway to the dynamic world of graphics programming. This free book will teach you graphics programming in JavaScript using WebGPU, drawing from my own learning journey.</p><p>Why did I write this book? Recently, a friend asked me what his child should learn to get started with graphics programming. A few years ago, OpenGL was the go-to API for beginners, with DirectX as an alternative for those interested in game development.</p><p>However, the graphics API landscape has evolved significantly in recent years. A new generation of APIs has emerged, including Vulkan, Metal, and DirectX 12. These APIs are more lightweight and performant but require more verbose code. While similar in concept, they're more fragmented than OpenGL, with some only available on specific platforms. This fragmentation often confuses beginners, leaving them unsure which API to start with.</p><p>Enter WebGPU, a new graphics API conceptually similar to others but with a different goal: bringing native graphics capabilities to the web. Unlike other APIs with native implementations in graphics drivers, WebGPU is essentially a wrapper for the aforementioned APIs. This makes WebGPU appealing as a first API for several reasons:</p><ol><li><p>As a wrapper, WebGPU aims to be a common denominator of other APIs, making it relatively simpler.</p></li><li><p>As the web graphics API standard, WebGPU is available on all platforms.</p></li><li><p>For those interested in native development, there are WebGPU implementations available in C++ and Rust.</p></li></ol><p>With WebGPU's recent release, now is an ideal time to learn it.</p><p>We'll begin with an overview of GPU drivers and the GPU pipeline - topics often overlooked in other graphics API books. Many students who can implement simple graphics applications lack understanding of GPU drivers and how graphics software interacts with underlying hardware. I believe covering these topics is essential.</p><p>Following this overview, we'll explore the simplest usage of WebGPU: drawing triangles, the basic elements of 3D graphics. While this might sound basic, mastering it is crucial for understanding more complex concepts. We'll then cover 2D rendering techniques and 3D scene control, necessary skills for implementing full graphics applications for the web.</p><p>In the advanced chapters, we'll look into GPU computing using WebGPU and explore advanced rendering techniques beyond simple triangles. GPU compute on the web, previously unavailable through WebGL, is now possible with WebGPU. This opens up exciting possibilities, including potential GPU AI inference for web applications.</p><p>As the book's final tutorial, we'll implement Gaussian splatting rendering - a complex example combining GPU compute and rendering. At the time of writing, Gaussian splatting is a cutting-edge scene representation and rendering technique, capable of capturing and rendering 3D scenes from real life with a high degree of realism and real-time performance.</p><div><p><iframe src="https://www.youtube.com/embed/QUGcWsJCCmU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></p></div><p>I've put considerable effort into presenting this book's content. Initially planned as a traditional book, I realized that an interactive web format would be more effective for a tech book. This approach allows for:</p><ul><li><p>Better explanation of concepts through videos</p></li><li><p>Easy citation of references via links</p></li><li><p>An online playground hosting all code samples, where you can run demos and modify code</p></li></ul><a href="https://shi-yan.github.io/webgpuunleashed/code/code.html#5_06_skeleton_animation" target="_blank"><svg style="margin-right:10px;vertical-align: middle;" xmlns="http://www.w3.org/2000/svg" height="32" width="32" fill="#dadadb" viewBox="0 -960 960 960"><path d="M189-160q-60 0-102.5-43T42-307q0-9 1-18t3-18l84-336q14-54 57-87.5t98-33.5h390q55 0 98 33.5t57 87.5l84 336q2 9 3.5 18.5T919-306q0 61-43.5 103.5T771-160q-42 0-78-22t-54-60l-28-58q-5-10-15-15t-21-5H385q-11 0-21 5t-15 15l-28 58q-18 38-54 60t-78 22Zm3-80q19 0 34.5-10t23.5-27l28-57q15-31 44-48.5t63-17.5h190q34 0 63 18t45 48l28 57q8 17 23.5 27t34.5 10q28 0 48-18.5t21-46.5q0 1-2-19l-84-335q-7-27-28-44t-49-17H285q-28 0-49.5 17T208-659l-84 335q-2 6-2 18 0 28 20.5 47t49.5 19Zm348-280q17 0 28.5-11.5T580-560q0-17-11.5-28.5T540-600q-17 0-28.5 11.5T500-560q0 17 11.5 28.5T540-520Zm80-80q17 0 28.5-11.5T660-640q0-17-11.5-28.5T620-680q-17 0-28.5 11.5T580-640q0 17 11.5 28.5T620-600Zm0 160q17 0 28.5-11.5T660-480q0-17-11.5-28.5T620-520q-17 0-28.5 11.5T580-480q0 17 11.5 28.5T620-440Zm80-80q17 0 28.5-11.5T740-560q0-17-11.5-28.5T700-600q-17 0-28.5 11.5T660-560q0 17 11.5 28.5T700-520Zm-360 60q13 0 21.5-8.5T370-490v-40h40q13 0 21.5-8.5T440-560q0-13-8.5-21.5T410-590h-40v-40q0-13-8.5-21.5T340-660q-13 0-21.5 8.5T310-630v40h-40q-13 0-21.5 8.5T240-560q0 13 8.5 21.5T270-530h40v40q0 13 8.5 21.5T340-460Zm140-20Z"></path></svg>Launch Playground - 5_06_skeleton_animation</a><p>All code snippets in the book are cross-referenced from the playground samples. To avoid overwhelming readers with verbose code, I've included only relevant code segments in the articles. navigation between the text and the playground is very easy .</p><p>Another advantage of this online format is the ability to receive reader feedback. If you have suggestions or improvements, please feel free to share them through GitHub discussions and issues.</p><p>Let's embark on this WebGPU journey together!</p>
        </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Age is a simple, modern and secure file encryption tool, format, and Go library (251 pts)]]></title>
            <link>https://github.com/FiloSottile/age</link>
            <guid>41156793</guid>
            <pubDate>Sun, 04 Aug 2024 22:42:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/FiloSottile/age">https://github.com/FiloSottile/age</a>, See on <a href="https://news.ycombinator.com/item?id=41156793">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
    <themed-picture data-catalyst-inline="true"><picture>
        <source media="(prefers-color-scheme: dark)" srcset="https://github.com/FiloSottile/age/raw/main/logo/logo_white.svg">
        <source media="(prefers-color-scheme: light)" srcset="https://github.com/FiloSottile/age/raw/main/logo/logo.svg">
        <img alt="The age logo, a wireframe of St. Peters dome in Rome, with the text: age, file encryption" width="600" src="https://github.com/FiloSottile/age/raw/main/logo/logo.svg">
    </picture></themed-picture>
</p>
<p dir="auto"><a href="https://pkg.go.dev/filippo.io/age" rel="nofollow"><img src="https://camo.githubusercontent.com/92ae44bb521718570d4d40f7e7983eb8af43e8109cd03ad3a85b59a2c964c0ba/68747470733a2f2f706b672e676f2e6465762f62616467652f66696c6970706f2e696f2f6167652e737667" alt="Go Reference" data-canonical-src="https://pkg.go.dev/badge/filippo.io/age.svg"></a>
<a href="https://filippo.io/age/age.1" rel="nofollow"><img src="https://camo.githubusercontent.com/f533193192e68df274d6d526b7dd289469b3b5ee6da9cb96231d23802dacce9a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6167652831292d6d616e253230706167652d6c6967687467726579" alt="man page" data-canonical-src="https://img.shields.io/badge/age(1)-man%20page-lightgrey"></a>
<a href="https://age-encryption.org/v1" rel="nofollow"><img src="https://camo.githubusercontent.com/ecee07dc5914d937dc21247830190264d48cad226493ae8a936cc3de49edcfc4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2543322541372532332d73706563696669636174696f6e2d626c756576696f6c6574" alt="C2SP specification" data-canonical-src="https://img.shields.io/badge/%C2%A7%23-specification-blueviolet"></a></p>
<p dir="auto">age is a simple, modern and secure file encryption tool, format, and Go library.</p>
<p dir="auto">It features small explicit keys, no config options, and UNIX-style composability.</p>
<div data-snippet-clipboard-copy-content="$ age-keygen -o key.txt
Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p
$ tar cvz ~/data | age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p > data.tar.gz.age
$ age --decrypt -i key.txt data.tar.gz.age > data.tar.gz"><pre><code>$ age-keygen -o key.txt
Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p
$ tar cvz ~/data | age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p &gt; data.tar.gz.age
$ age --decrypt -i key.txt data.tar.gz.age &gt; data.tar.gz
</code></pre></div>
<p dir="auto">📜 The format specification is at <a href="https://age-encryption.org/v1" rel="nofollow">age-encryption.org/v1</a>. age was designed by <a href="https://twitter.com/Benjojo12" rel="nofollow">@Benjojo12</a> and <a href="https://twitter.com/FiloSottile" rel="nofollow">@FiloSottile</a>.</p>
<p dir="auto">📬 Follow the maintenance of this project by subscribing to <a href="https://filippo.io/newsletter" rel="nofollow">Maintainer Dispatches</a>!</p>
<p dir="auto">🦀 An alternative interoperable Rust implementation is available at <a href="https://github.com/str4d/rage">github.com/str4d/rage</a>.</p>
<p dir="auto">🔑 Hardware PIV tokens such as YubiKeys are supported through the <a href="https://github.com/str4d/age-plugin-yubikey">age-plugin-yubikey</a> plugin.</p>
<p dir="auto">✨ For more plugins, implementations, tools, and integrations, check out the <a href="https://github.com/FiloSottile/awesome-age">awesome age</a> list.</p>
<p dir="auto">💬 The author pronounces it <code>[aɡe̞]</code> <a href="https://translate.google.com/?sl=it&amp;text=aghe" rel="nofollow">with a hard <em>g</em></a>, like GIF, and is always spelled lowercase.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<markdown-accessiblity-table><table>
    <tbody><tr>
        <td>Homebrew (macOS or Linux)</td>
        <td>
            <code>brew install age</code>
        </td>
    </tr>
    <tr>
        <td>MacPorts</td>
        <td>
            <code>port install age</code>
        </td>
    </tr>
    <tr>
        <td>Alpine Linux v3.15+</td>
        <td>
            <code>apk add age</code>
        </td>
    </tr>
    <tr>
        <td>Arch Linux</td>
        <td>
            <code>pacman -S age</code>
        </td>
    </tr>
    <tr>
        <td>Debian 12+ (Bookworm)</td>
        <td>
            <code>apt install age</code>
        </td>
    </tr>
    <tr>
        <td>Debian 11 (Bullseye)</td>
        <td>
            <code>apt install age/bullseye-backports</code>
            (<a href="https://backports.debian.org/Instructions/#index2h2" rel="nofollow">enable backports</a> for age v1.0.0+)
        </td>
    </tr>
    <tr>
        <td>Fedora 33+</td>
        <td>
            <code>dnf install age</code>
        </td>
    </tr>
    <tr>
        <td>Gentoo Linux</td>
        <td>
            <code>emerge app-crypt/age</code>
        </td>
    </tr>
    <tr>
        <td>NixOS / Nix</td>
        <td>
            <code>nix-env -i age</code>
        </td>
    </tr>
    <tr>
        <td>openSUSE Tumbleweed</td>
        <td>
            <code>zypper install age</code>
        </td>
    </tr>
    <tr>
        <td>Ubuntu 22.04+</td>
        <td>
            <code>apt install age</code>
        </td>
    </tr>
    <tr>
        <td>Void Linux</td>
        <td>
            <code>xbps-install age</code>
        </td>
    </tr>
    <tr>
        <td>FreeBSD</td>
        <td>
            <code>pkg install age</code> (security/age)
        </td>
    </tr>
    <tr>
        <td>OpenBSD 6.7+</td>
        <td>
            <code>pkg_add age</code> (security/age)
        </td>
    </tr>
    <tr>
        <td>Chocolatey (Windows)</td>
        <td>
            <code>choco install age.portable</code>
        </td>
    </tr>
    <tr>
        <td>Scoop (Windows)</td>
        <td>
            <code>scoop bucket add extras &amp;&amp; scoop install age</code>
        </td>
    </tr>
    <tr>
        <td>pkgx</td>
        <td>
            <code>pkgx install age</code>
        </td>
    </tr>
</tbody></table></markdown-accessiblity-table>
<p dir="auto">On Windows, Linux, macOS, and FreeBSD you can use the pre-built binaries.</p>
<div data-snippet-clipboard-copy-content="https://dl.filippo.io/age/latest?for=linux/amd64
https://dl.filippo.io/age/v1.1.1?for=darwin/arm64
..."><pre><code>https://dl.filippo.io/age/latest?for=linux/amd64
https://dl.filippo.io/age/v1.1.1?for=darwin/arm64
...
</code></pre></div>
<p dir="auto">If your system has <a href="https://go.dev/dl/" rel="nofollow">a supported version of Go</a>, you can build from source.</p>
<div data-snippet-clipboard-copy-content="go install filippo.io/age/cmd/...@latest"><pre><code>go install filippo.io/age/cmd/...@latest
</code></pre></div>
<p dir="auto">Help from new packagers is very welcome.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Verifying the release signatures</h3><a id="user-content-verifying-the-release-signatures" aria-label="Permalink: Verifying the release signatures" href="#verifying-the-release-signatures"></a></p>
<p dir="auto">If you download the pre-built binaries, you can check their
<a href="https://www.sigsum.org/" rel="nofollow">Sigsum</a> proofs, which are like signatures with extra
transparency: you can cryptographically verify that every proof is logged in a
public append-only log, so you can hold the age project accountable for every
binary release we ever produced. This is similar to what the <a href="https://go.dev/blog/module-mirror-launch" rel="nofollow">Go Checksum
Database</a> provides.</p>
<div data-snippet-clipboard-copy-content="cat << EOF > age-sigsum-key.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEjDYFJ4WVbxRLcgbppmPaMFS/Wbq+1r9cl4qdJTyRVL
EOF
cat << EOF > sigsum-trust-policy.txt
log 154f49976b59ff09a123675f58cb3e346e0455753c3c3b15d465dcb4f6512b0b https://poc.sigsum.org/jellyfish
witness poc.sigsum.org/nisse 1c25f8a44c635457e2e391d1efbca7d4c2951a0aef06225a881e46b98962ac6c
witness rgdd.se/poc-witness  28c92a5a3a054d317c86fc2eeb6a7ab2054d6217100d0be67ded5b74323c5806
group  demo-quorum-rule all poc.sigsum.org/nisse rgdd.se/poc-witness
quorum demo-quorum-rule
EOF

curl -JO &quot;https://dl.filippo.io/age/v1.2.0?for=darwin/arm64&quot;
curl -JO &quot;https://dl.filippo.io/age/v1.2.0?for=darwin/arm64&amp;proof&quot;

go install sigsum.org/sigsum-go/cmd/sigsum-verify@v0.6.2
sigsum-verify -k age-sigsum-key.pub -p sigsum-trust-policy.txt \
    age-v1.2.0-darwin-arm64.tar.gz.proof < age-v1.2.0-darwin-arm64.tar.gz"><pre><code>cat &lt;&lt; EOF &gt; age-sigsum-key.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEjDYFJ4WVbxRLcgbppmPaMFS/Wbq+1r9cl4qdJTyRVL
EOF
cat &lt;&lt; EOF &gt; sigsum-trust-policy.txt
log 154f49976b59ff09a123675f58cb3e346e0455753c3c3b15d465dcb4f6512b0b https://poc.sigsum.org/jellyfish
witness poc.sigsum.org/nisse 1c25f8a44c635457e2e391d1efbca7d4c2951a0aef06225a881e46b98962ac6c
witness rgdd.se/poc-witness  28c92a5a3a054d317c86fc2eeb6a7ab2054d6217100d0be67ded5b74323c5806
group  demo-quorum-rule all poc.sigsum.org/nisse rgdd.se/poc-witness
quorum demo-quorum-rule
EOF

curl -JO "https://dl.filippo.io/age/v1.2.0?for=darwin/arm64"
curl -JO "https://dl.filippo.io/age/v1.2.0?for=darwin/arm64&amp;proof"

go install sigsum.org/sigsum-go/cmd/sigsum-verify@v0.6.2
sigsum-verify -k age-sigsum-key.pub -p sigsum-trust-policy.txt \
    age-v1.2.0-darwin-arm64.tar.gz.proof &lt; age-v1.2.0-darwin-arm64.tar.gz
</code></pre></div>
<p dir="auto">You can learn more about what's happening above in the <a href="https://www.sigsum.org/getting-started/" rel="nofollow">Sigsum
docs</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">For the full documentation, read <a href="https://filippo.io/age/age.1" rel="nofollow">the age(1) man page</a>.</p>
<div data-snippet-clipboard-copy-content="Usage:
    age [--encrypt] (-r RECIPIENT | -R PATH)... [--armor] [-o OUTPUT] [INPUT]
    age [--encrypt] --passphrase [--armor] [-o OUTPUT] [INPUT]
    age --decrypt [-i PATH]... [-o OUTPUT] [INPUT]

Options:
    -e, --encrypt               Encrypt the input to the output. Default if omitted.
    -d, --decrypt               Decrypt the input to the output.
    -o, --output OUTPUT         Write the result to the file at path OUTPUT.
    -a, --armor                 Encrypt to a PEM encoded format.
    -p, --passphrase            Encrypt with a passphrase.
    -r, --recipient RECIPIENT   Encrypt to the specified RECIPIENT. Can be repeated.
    -R, --recipients-file PATH  Encrypt to recipients listed at PATH. Can be repeated.
    -i, --identity PATH         Use the identity file at PATH. Can be repeated.

INPUT defaults to standard input, and OUTPUT defaults to standard output.
If OUTPUT exists, it will be overwritten.

RECIPIENT can be an age public key generated by age-keygen (&quot;age1...&quot;)
or an SSH public key (&quot;ssh-ed25519 AAAA...&quot;, &quot;ssh-rsa AAAA...&quot;).

Recipient files contain one or more recipients, one per line. Empty lines
and lines starting with &quot;#&quot; are ignored as comments. &quot;-&quot; may be used to
read recipients from standard input.

Identity files contain one or more secret keys (&quot;AGE-SECRET-KEY-1...&quot;),
one per line, or an SSH key. Empty lines and lines starting with &quot;#&quot; are
ignored as comments. Passphrase encrypted age files can be used as
identity files. Multiple key files can be provided, and any unused ones
will be ignored. &quot;-&quot; may be used to read identities from standard input.

When --encrypt is specified explicitly, -i can also be used to encrypt to an
identity file symmetrically, instead or in addition to normal recipients."><pre><code>Usage:
    age [--encrypt] (-r RECIPIENT | -R PATH)... [--armor] [-o OUTPUT] [INPUT]
    age [--encrypt] --passphrase [--armor] [-o OUTPUT] [INPUT]
    age --decrypt [-i PATH]... [-o OUTPUT] [INPUT]

Options:
    -e, --encrypt               Encrypt the input to the output. Default if omitted.
    -d, --decrypt               Decrypt the input to the output.
    -o, --output OUTPUT         Write the result to the file at path OUTPUT.
    -a, --armor                 Encrypt to a PEM encoded format.
    -p, --passphrase            Encrypt with a passphrase.
    -r, --recipient RECIPIENT   Encrypt to the specified RECIPIENT. Can be repeated.
    -R, --recipients-file PATH  Encrypt to recipients listed at PATH. Can be repeated.
    -i, --identity PATH         Use the identity file at PATH. Can be repeated.

INPUT defaults to standard input, and OUTPUT defaults to standard output.
If OUTPUT exists, it will be overwritten.

RECIPIENT can be an age public key generated by age-keygen ("age1...")
or an SSH public key ("ssh-ed25519 AAAA...", "ssh-rsa AAAA...").

Recipient files contain one or more recipients, one per line. Empty lines
and lines starting with "#" are ignored as comments. "-" may be used to
read recipients from standard input.

Identity files contain one or more secret keys ("AGE-SECRET-KEY-1..."),
one per line, or an SSH key. Empty lines and lines starting with "#" are
ignored as comments. Passphrase encrypted age files can be used as
identity files. Multiple key files can be provided, and any unused ones
will be ignored. "-" may be used to read identities from standard input.

When --encrypt is specified explicitly, -i can also be used to encrypt to an
identity file symmetrically, instead or in addition to normal recipients.
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Multiple recipients</h3><a id="user-content-multiple-recipients" aria-label="Permalink: Multiple recipients" href="#multiple-recipients"></a></p>
<p dir="auto">Files can be encrypted to multiple recipients by repeating <code>-r/--recipient</code>. Every recipient will be able to decrypt the file.</p>
<div data-snippet-clipboard-copy-content="$ age -o example.jpg.age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p \
    -r age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg example.jpg"><pre><code>$ age -o example.jpg.age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p \
    -r age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg example.jpg
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Recipient files</h4><a id="user-content-recipient-files" aria-label="Permalink: Recipient files" href="#recipient-files"></a></p>
<p dir="auto">Multiple recipients can also be listed one per line in one or more files passed with the <code>-R/--recipients-file</code> flag.</p>
<div data-snippet-clipboard-copy-content="$ cat recipients.txt
# Alice
age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p
# Bob
age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg
$ age -R recipients.txt example.jpg > example.jpg.age"><pre><code>$ cat recipients.txt
# Alice
age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p
# Bob
age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg
$ age -R recipients.txt example.jpg &gt; example.jpg.age
</code></pre></div>
<p dir="auto">If the argument to <code>-R</code> (or <code>-i</code>) is <code>-</code>, the file is read from standard input.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Passphrases</h3><a id="user-content-passphrases" aria-label="Permalink: Passphrases" href="#passphrases"></a></p>
<p dir="auto">Files can be encrypted with a passphrase by using <code>-p/--passphrase</code>. By default age will automatically generate a secure passphrase. Passphrase protected files are automatically detected at decrypt time.</p>
<div data-snippet-clipboard-copy-content="$ age -p secrets.txt > secrets.txt.age
Enter passphrase (leave empty to autogenerate a secure one):
Using the autogenerated passphrase &quot;release-response-step-brand-wrap-ankle-pair-unusual-sword-train&quot;.
$ age -d secrets.txt.age > secrets.txt
Enter passphrase:"><pre><code>$ age -p secrets.txt &gt; secrets.txt.age
Enter passphrase (leave empty to autogenerate a secure one):
Using the autogenerated passphrase "release-response-step-brand-wrap-ankle-pair-unusual-sword-train".
$ age -d secrets.txt.age &gt; secrets.txt
Enter passphrase:
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Passphrase-protected key files</h3><a id="user-content-passphrase-protected-key-files" aria-label="Permalink: Passphrase-protected key files" href="#passphrase-protected-key-files"></a></p>
<p dir="auto">If an identity file passed to <code>-i</code> is a passphrase encrypted age file, it will be automatically decrypted.</p>
<div data-snippet-clipboard-copy-content="$ age-keygen | age -p > key.age
Public key: age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5
Enter passphrase (leave empty to autogenerate a secure one):
Using the autogenerated passphrase &quot;hip-roast-boring-snake-mention-east-wasp-honey-input-actress&quot;.
$ age -r age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5 secrets.txt > secrets.txt.age
$ age -d -i key.age secrets.txt.age > secrets.txt
Enter passphrase for identity file &quot;key.age&quot;:"><pre><code>$ age-keygen | age -p &gt; key.age
Public key: age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5
Enter passphrase (leave empty to autogenerate a secure one):
Using the autogenerated passphrase "hip-roast-boring-snake-mention-east-wasp-honey-input-actress".
$ age -r age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5 secrets.txt &gt; secrets.txt.age
$ age -d -i key.age secrets.txt.age &gt; secrets.txt
Enter passphrase for identity file "key.age":
</code></pre></div>
<p dir="auto">Passphrase-protected identity files are not necessary for most use cases, where access to the encrypted identity file implies access to the whole system. However, they can be useful if the identity file is stored remotely.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">SSH keys</h3><a id="user-content-ssh-keys" aria-label="Permalink: SSH keys" href="#ssh-keys"></a></p>
<p dir="auto">As a convenience feature, age also supports encrypting to <code>ssh-rsa</code> and <code>ssh-ed25519</code> SSH public keys, and decrypting with the respective private key file. (<code>ssh-agent</code> is not supported.)</p>
<div data-snippet-clipboard-copy-content="$ age -R ~/.ssh/id_ed25519.pub example.jpg > example.jpg.age
$ age -d -i ~/.ssh/id_ed25519 example.jpg.age > example.jpg"><pre><code>$ age -R ~/.ssh/id_ed25519.pub example.jpg &gt; example.jpg.age
$ age -d -i ~/.ssh/id_ed25519 example.jpg.age &gt; example.jpg
</code></pre></div>
<p dir="auto">Note that SSH key support employs more complex cryptography, and embeds a public key tag in the encrypted file, making it possible to track files that are encrypted to a specific public key.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Encrypting to a GitHub user</h4><a id="user-content-encrypting-to-a-github-user" aria-label="Permalink: Encrypting to a GitHub user" href="#encrypting-to-a-github-user"></a></p>
<p dir="auto">Combining SSH key support and <code>-R</code>, you can easily encrypt a file to the SSH keys listed on a GitHub profile.</p>
<div data-snippet-clipboard-copy-content="$ curl https://github.com/benjojo.keys | age -R - example.jpg > example.jpg.age"><pre><code>$ curl https://github.com/benjojo.keys | age -R - example.jpg &gt; example.jpg.age
</code></pre></div>
<p dir="auto">Keep in mind that people might not protect SSH keys long-term, since they are revokable when used only for authentication, and that SSH keys held on YubiKeys can't be used to decrypt files.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Zero regrets: Firefox power user kept 7,500 tabs open for two years (146 pts)]]></title>
            <link>https://www.techspot.com/news/102871-zero-regrets-firefox-power-user-kept-7500-tabs.html</link>
            <guid>41156568</guid>
            <pubDate>Sun, 04 Aug 2024 21:51:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.techspot.com/news/102871-zero-regrets-firefox-power-user-kept-7500-tabs.html">https://www.techspot.com/news/102871-zero-regrets-firefox-power-user-kept-7500-tabs.html</a>, See on <a href="https://news.ycombinator.com/item?id=41156568">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>
Serving tech enthusiasts for over 25 years.
<br> TechSpot means tech analysis and advice <a href="https://www.techspot.com/ethics.html" target="_blank">you&nbsp;can&nbsp;trust</a>.
</p><div>
<p id="why-it-matters"><strong>In brief:</strong> For most of us, having more than a couple dozen browser tabs open at once feels like a cluttered nightmare. But for one software engineer, managing nearly 7,500 active Firefox tabs is just another day at the office. </p>
<p>Hazel, who prefers not to share her last name, is what you'd call a hardcore Firefox fan and self-proclaimed "tab hoarder." She recently posted a screenshot showing a mind-boggling 7,470 tabs open simultaneously in the Mozilla browser. Turns out, <a href="https://www.techspot.com/downloads/19-mozilla-firefox.html">Firefox</a> had some trouble restoring the gargantuan tab load initially, but Hazel was able to revive the vast digital collection via the browser's profile cache functionality.</p>
<p>"I feel like a part of me is restored," Hazel wrote on X after getting her 7,000+ tabs back from the great digital beyond. We've all felt that little pang of anxiety when our browser crashes with tons of tabs we've been meaning to get back to, so we get it.</p>
<p>But what's the deal with Hazel's extreme browser usage? In her words, the memory impact of running that many Firefox tabs is actually "marginal." The session file containing all 7,470 tabs is only around 70MB in size, and Firefox optimizes things by only loading tabs into memory if they've been opened recently.</p>
<blockquote data-lazy-function="loadTwitter">
<p dir="ltr" lang="en">thank you to everyone who provided info on how to restore an old session from the profiles cache... i feel like a part of me is restored <a href="https://t.co/IGNGIrNfHB">pic.twitter.com/IGNGIrNfHB</a></p> 
– hazelâÂÂï¸Â (@sodiumPen) <a href="https://twitter.com/sodiumPen/status/1785302403039764665?ref_src=twsrc%5Etfw">April 30, 2024</a></blockquote>
<p>This aligns with what Mozilla told <a href="https://www.pcmag.com/news/firefox-power-user-keeps-7400-plus-browser-tabs-open-for-2-years">PCMag</a> about the browser's ability to handle extreme tab hoarding. A Mozilla representative confirmed that having countless tabs open consumes "practically no memory whatsoever" in Firefox.</p>
<p>"We're working hard to provide people with even better tools for managing dozens to thousands of tabs," the Mozilla spokesperson said. "While we think it's amazing that anyone has 7,000 active tabs, it also shows the degree to which tab management is a common problem."</p>
<p>Indeed, <a href="https://www.techspot.com/news/86510-tab-groups-chrome-ready-make-browser-nice-tidy.html">tab groups</a> have been a highly requested Firefox feature for years now. If it had that functionality, users like Hazel could easily group together all 7,500 of their open tabs, minimize the group, and temporarily pretend that massive tab debt doesn't exist – at least until they need to dive back in.</p>
<p>Currently, Firefox users can create different user profiles to segregate workflows and open tab sets, but more granular tab organization is on the way. Mozilla says it will roll out an improved profiles system and new tab management capabilities later in 2024.</p>
<p>In the meantime, there are third-party Firefox <a href="https://addons.mozilla.org/en-US/firefox/addon/simple-tab-groups/">add-ons</a> that can help tame tab situations like these to a certain extent.</p>
</div></div>]]></description>
        </item>
    </channel>
</rss>