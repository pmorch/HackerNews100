<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 19 May 2024 21:00:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Llama3 implemented from scratch (181 pts)]]></title>
            <link>https://github.com/naklecha/llama3-from-scratch</link>
            <guid>40408880</guid>
            <pubDate>Sun, 19 May 2024 18:42:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/naklecha/llama3-from-scratch">https://github.com/naklecha/llama3-from-scratch</a>, See on <a href="https://news.ycombinator.com/item?id=40408880">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">llama3 implemented from scratch</h2><a id="user-content-llama3-implemented-from-scratch" aria-label="Permalink: llama3 implemented from scratch" href="#llama3-implemented-from-scratch"></a></p>
<p dir="auto">in this file, i implemented llama3 from scratch, one tensor and matrix multiplication at a time.
<br>
also, im going to load tensors directly from the model file that meta provided for llama3, you need to download the weights before running this file.
here is the offical link to download the weights: <a href="https://llama.meta.com/llama-downloads/" rel="nofollow">https://llama.meta.com/llama-downloads/</a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/archi.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/archi.png"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">tokenizer</h2><a id="user-content-tokenizer" aria-label="Permalink: tokenizer" href="#tokenizer"></a></p>
<p dir="auto">im not going to implement a bpe tokenizer (but andrej karpathy has a really clean implementation)
<br>
link to his implementation: <a href="https://github.com/karpathy/minbpe">https://github.com/karpathy/minbpe</a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/karpathyminbpe.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/karpathyminbpe.png" width="600"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="from pathlib import Path
import tiktoken
from tiktoken.load import load_tiktoken_bpe
import torch
import json
import matplotlib.pyplot as plt

tokenizer_path = &quot;Meta-Llama-3-8B/tokenizer.model&quot;
special_tokens = [
            &quot;<|begin_of_text|>&quot;,
            &quot;<|end_of_text|>&quot;,
            &quot;<|reserved_special_token_0|>&quot;,
            &quot;<|reserved_special_token_1|>&quot;,
            &quot;<|reserved_special_token_2|>&quot;,
            &quot;<|reserved_special_token_3|>&quot;,
            &quot;<|start_header_id|>&quot;,
            &quot;<|end_header_id|>&quot;,
            &quot;<|reserved_special_token_4|>&quot;,
            &quot;<|eot_id|>&quot;,  # end of turn
        ] + [f&quot;<|reserved_special_token_{i}|>&quot; for i in range(5, 256 - 5)]
mergeable_ranks = load_tiktoken_bpe(tokenizer_path)
tokenizer = tiktoken.Encoding(
    name=Path(tokenizer_path).name,
    pat_str=r&quot;(?i:'s|'t|'re|'ve|'m|'ll|'d)|[^\r\n\p{L}\p{N}]?\p{L}+|\p{N}{1,3}| ?[^\s\p{L}\p{N}]+[\r\n]*|\s*[\r\n]+|\s+(?!\S)|\s+&quot;,
    mergeable_ranks=mergeable_ranks,
    special_tokens={token: len(mergeable_ranks) + i for i, token in enumerate(special_tokens)},
)

tokenizer.decode(tokenizer.encode(&quot;hello world!&quot;))"><pre><span>from</span> <span>pathlib</span> <span>import</span> <span>Path</span>
<span>import</span> <span>tiktoken</span>
<span>from</span> <span>tiktoken</span>.<span>load</span> <span>import</span> <span>load_tiktoken_bpe</span>
<span>import</span> <span>torch</span>
<span>import</span> <span>json</span>
<span>import</span> <span>matplotlib</span>.<span>pyplot</span> <span>as</span> <span>plt</span>

<span>tokenizer_path</span> <span>=</span> <span>"Meta-Llama-3-8B/tokenizer.model"</span>
<span>special_tokens</span> <span>=</span> [
            <span>"&lt;|begin_of_text|&gt;"</span>,
            <span>"&lt;|end_of_text|&gt;"</span>,
            <span>"&lt;|reserved_special_token_0|&gt;"</span>,
            <span>"&lt;|reserved_special_token_1|&gt;"</span>,
            <span>"&lt;|reserved_special_token_2|&gt;"</span>,
            <span>"&lt;|reserved_special_token_3|&gt;"</span>,
            <span>"&lt;|start_header_id|&gt;"</span>,
            <span>"&lt;|end_header_id|&gt;"</span>,
            <span>"&lt;|reserved_special_token_4|&gt;"</span>,
            <span>"&lt;|eot_id|&gt;"</span>,  <span># end of turn</span>
        ] <span>+</span> [<span>f"&lt;|reserved_special_token_<span><span>{</span><span>i</span><span>}</span></span>|&gt;"</span> <span>for</span> <span>i</span> <span>in</span> <span>range</span>(<span>5</span>, <span>256</span> <span>-</span> <span>5</span>)]
<span>mergeable_ranks</span> <span>=</span> <span>load_tiktoken_bpe</span>(<span>tokenizer_path</span>)
<span>tokenizer</span> <span>=</span> <span>tiktoken</span>.<span>Encoding</span>(
    <span>name</span><span>=</span><span>Path</span>(<span>tokenizer_path</span>).<span>name</span>,
    <span>pat_str</span><span>=</span><span>r"(?i:'s|'t|'re|'ve|'m|'ll|'d)|[^\r\n\p{L}\p{N}]?\p{L}+|\p{N}{1,3}| ?[^\s\p{L}\p{N}]+[\r\n]*|\s*[\r\n]+|\s+(?!\S)|\s+"</span>,
    <span>mergeable_ranks</span><span>=</span><span>mergeable_ranks</span>,
    <span>special_tokens</span><span>=</span>{<span>token</span>: <span>len</span>(<span>mergeable_ranks</span>) <span>+</span> <span>i</span> <span>for</span> <span>i</span>, <span>token</span> <span>in</span> <span>enumerate</span>(<span>special_tokens</span>)},
)

<span>tokenizer</span>.<span>decode</span>(<span>tokenizer</span>.<span>encode</span>(<span>"hello world!"</span>))</pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">reading the model file</h2><a id="user-content-reading-the-model-file" aria-label="Permalink: reading the model file" href="#reading-the-model-file"></a></p>
<p dir="auto">normally, reading this depends on how the model classes are written and the variable names inside them.
<br>
but since we are implementing llama3 from scratch we will read the file one tensor at a time.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/model.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/model.png" width="600"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="model = torch.load(&quot;Meta-Llama-3-8B/consolidated.00.pth&quot;)
print(json.dumps(list(model.keys())[:20], indent=4))"><pre><span>model</span> <span>=</span> <span>torch</span>.<span>load</span>(<span>"Meta-Llama-3-8B/consolidated.00.pth"</span>)
<span>print</span>(<span>json</span>.<span>dumps</span>(<span>list</span>(<span>model</span>.<span>keys</span>())[:<span>20</span>], <span>indent</span><span>=</span><span>4</span>))</pre></div>
<div data-snippet-clipboard-copy-content="[
    &quot;tok_embeddings.weight&quot;,
    &quot;layers.0.attention.wq.weight&quot;,
    &quot;layers.0.attention.wk.weight&quot;,
    &quot;layers.0.attention.wv.weight&quot;,
    &quot;layers.0.attention.wo.weight&quot;,
    &quot;layers.0.feed_forward.w1.weight&quot;,
    &quot;layers.0.feed_forward.w3.weight&quot;,
    &quot;layers.0.feed_forward.w2.weight&quot;,
    &quot;layers.0.attention_norm.weight&quot;,
    &quot;layers.0.ffn_norm.weight&quot;,
    &quot;layers.1.attention.wq.weight&quot;,
    &quot;layers.1.attention.wk.weight&quot;,
    &quot;layers.1.attention.wv.weight&quot;,
    &quot;layers.1.attention.wo.weight&quot;,
    &quot;layers.1.feed_forward.w1.weight&quot;,
    &quot;layers.1.feed_forward.w3.weight&quot;,
    &quot;layers.1.feed_forward.w2.weight&quot;,
    &quot;layers.1.attention_norm.weight&quot;,
    &quot;layers.1.ffn_norm.weight&quot;,
    &quot;layers.2.attention.wq.weight&quot;
]"><pre><code>[
    "tok_embeddings.weight",
    "layers.0.attention.wq.weight",
    "layers.0.attention.wk.weight",
    "layers.0.attention.wv.weight",
    "layers.0.attention.wo.weight",
    "layers.0.feed_forward.w1.weight",
    "layers.0.feed_forward.w3.weight",
    "layers.0.feed_forward.w2.weight",
    "layers.0.attention_norm.weight",
    "layers.0.ffn_norm.weight",
    "layers.1.attention.wq.weight",
    "layers.1.attention.wk.weight",
    "layers.1.attention.wv.weight",
    "layers.1.attention.wo.weight",
    "layers.1.feed_forward.w1.weight",
    "layers.1.feed_forward.w3.weight",
    "layers.1.feed_forward.w2.weight",
    "layers.1.attention_norm.weight",
    "layers.1.ffn_norm.weight",
    "layers.2.attention.wq.weight"
]
</code></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="with open(&quot;Meta-Llama-3-8B/params.json&quot;, &quot;r&quot;) as f:
    config = json.load(f)
config"><pre><span>with</span> <span>open</span>(<span>"Meta-Llama-3-8B/params.json"</span>, <span>"r"</span>) <span>as</span> <span>f</span>:
    <span>config</span> <span>=</span> <span>json</span>.<span>load</span>(<span>f</span>)
<span>config</span></pre></div>
<div data-snippet-clipboard-copy-content="{'dim': 4096,
 'n_layers': 32,
 'n_heads': 32,
 'n_kv_heads': 8,
 'vocab_size': 128256,
 'multiple_of': 1024,
 'ffn_dim_multiplier': 1.3,
 'norm_eps': 1e-05,
 'rope_theta': 500000.0}"><pre><code>{'dim': 4096,
 'n_layers': 32,
 'n_heads': 32,
 'n_kv_heads': 8,
 'vocab_size': 128256,
 'multiple_of': 1024,
 'ffn_dim_multiplier': 1.3,
 'norm_eps': 1e-05,
 'rope_theta': 500000.0}
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">we use this config to infer details about the model like</h2><a id="user-content-we-use-this-config-to-infer-details-about-the-model-like" aria-label="Permalink: we use this config to infer details about the model like" href="#we-use-this-config-to-infer-details-about-the-model-like"></a></p>
<ol dir="auto">
<li>the model has 32 transformer layers</li>
<li>each multi-head attention block has 32 heads</li>
<li>the vocab size and so on</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="dim = config[&quot;dim&quot;]
n_layers = config[&quot;n_layers&quot;]
n_heads = config[&quot;n_heads&quot;]
n_kv_heads = config[&quot;n_kv_heads&quot;]
vocab_size = config[&quot;vocab_size&quot;]
multiple_of = config[&quot;multiple_of&quot;]
ffn_dim_multiplier = config[&quot;ffn_dim_multiplier&quot;]
norm_eps = config[&quot;norm_eps&quot;]
rope_theta = torch.tensor(config[&quot;rope_theta&quot;])"><pre><span>dim</span> <span>=</span> <span>config</span>[<span>"dim"</span>]
<span>n_layers</span> <span>=</span> <span>config</span>[<span>"n_layers"</span>]
<span>n_heads</span> <span>=</span> <span>config</span>[<span>"n_heads"</span>]
<span>n_kv_heads</span> <span>=</span> <span>config</span>[<span>"n_kv_heads"</span>]
<span>vocab_size</span> <span>=</span> <span>config</span>[<span>"vocab_size"</span>]
<span>multiple_of</span> <span>=</span> <span>config</span>[<span>"multiple_of"</span>]
<span>ffn_dim_multiplier</span> <span>=</span> <span>config</span>[<span>"ffn_dim_multiplier"</span>]
<span>norm_eps</span> <span>=</span> <span>config</span>[<span>"norm_eps"</span>]
<span>rope_theta</span> <span>=</span> <span>torch</span>.<span>tensor</span>(<span>config</span>[<span>"rope_theta"</span>])</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">converting text to tokens</h2><a id="user-content-converting-text-to-tokens" aria-label="Permalink: converting text to tokens" href="#converting-text-to-tokens"></a></p>
<p dir="auto">here we use tiktoken (i think an openai library) as the tokenizer</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/tokens.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/tokens.png" width="600"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="prompt = &quot;the answer to the ultimate question of life, the universe, and everything is &quot;
tokens = [128000] + tokenizer.encode(prompt)
print(tokens)
tokens = torch.tensor(tokens)
prompt_split_as_tokens = [tokenizer.decode([token.item()]) for token in tokens]
print(prompt_split_as_tokens)"><pre><span>prompt</span> <span>=</span> <span>"the answer to the ultimate question of life, the universe, and everything is "</span>
<span>tokens</span> <span>=</span> [<span>128000</span>] <span>+</span> <span>tokenizer</span>.<span>encode</span>(<span>prompt</span>)
<span>print</span>(<span>tokens</span>)
<span>tokens</span> <span>=</span> <span>torch</span>.<span>tensor</span>(<span>tokens</span>)
<span>prompt_split_as_tokens</span> <span>=</span> [<span>tokenizer</span>.<span>decode</span>([<span>token</span>.<span>item</span>()]) <span>for</span> <span>token</span> <span>in</span> <span>tokens</span>]
<span>print</span>(<span>prompt_split_as_tokens</span>)</pre></div>
<div data-snippet-clipboard-copy-content="[128000, 1820, 4320, 311, 279, 17139, 3488, 315, 2324, 11, 279, 15861, 11, 323, 4395, 374, 220]
['<|begin_of_text|>', 'the', ' answer', ' to', ' the', ' ultimate', ' question', ' of', ' life', ',', ' the', ' universe', ',', ' and', ' everything', ' is', ' ']"><pre><code>[128000, 1820, 4320, 311, 279, 17139, 3488, 315, 2324, 11, 279, 15861, 11, 323, 4395, 374, 220]
['&lt;|begin_of_text|&gt;', 'the', ' answer', ' to', ' the', ' ultimate', ' question', ' of', ' life', ',', ' the', ' universe', ',', ' and', ' everything', ' is', ' ']
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">converting tokens to their embedding</h2><a id="user-content-converting-tokens-to-their-embedding" aria-label="Permalink: converting tokens to their embedding" href="#converting-tokens-to-their-embedding"></a></p>
<div dir="auto"><p>IM SORRY but this is the only part of the codebase where i use an inbuilt neural network module
<br>
anyway, so our [17x1] tokens are now [17x4096], i.e. 17 embeddings (one for each token) of length 4096
</p><p>

note: keep track of the shapes, it makes it much easier to understand everything</p></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/embeddings.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/embeddings.png" width="600"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="embedding_layer = torch.nn.Embedding(vocab_size, dim)
embedding_layer.weight.data.copy_(model[&quot;tok_embeddings.weight&quot;])
token_embeddings_unnormalized = embedding_layer(tokens).to(torch.bfloat16)
token_embeddings_unnormalized.shape"><pre><span>embedding_layer</span> <span>=</span> <span>torch</span>.<span>nn</span>.<span>Embedding</span>(<span>vocab_size</span>, <span>dim</span>)
<span>embedding_layer</span>.<span>weight</span>.<span>data</span>.<span>copy_</span>(<span>model</span>[<span>"tok_embeddings.weight"</span>])
<span>token_embeddings_unnormalized</span> <span>=</span> <span>embedding_layer</span>(<span>tokens</span>).<span>to</span>(<span>torch</span>.<span>bfloat16</span>)
<span>token_embeddings_unnormalized</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">we then normalize the embedding using rms normalization</h2><a id="user-content-we-then-normalize-the-embedding-using-rms-normalization" aria-label="Permalink: we then normalize the embedding using rms normalization" href="#we-then-normalize-the-embedding-using-rms-normalization"></a></p>
<p dir="auto">please, note after this step the shapes dont change, the values are just normalized
<br>
things to keep in mind, we need a norm_eps (from config) because we dont want to accidently set rms to 0 and divide by 0
<br>
here is the formula:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/rms.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/rms.png" width="600"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="# def rms_norm(tensor, norm_weights):
#     rms = (tensor.pow(2).mean(-1, keepdim=True) + norm_eps)**0.5
#     return tensor * (norm_weights / rms)
def rms_norm(tensor, norm_weights):
    return (tensor * torch.rsqrt(tensor.pow(2).mean(-1, keepdim=True) + norm_eps)) * norm_weights"><pre><span># def rms_norm(tensor, norm_weights):</span>
<span>#     rms = (tensor.pow(2).mean(-1, keepdim=True) + norm_eps)**0.5</span>
<span>#     return tensor * (norm_weights / rms)</span>
<span>def</span> <span>rms_norm</span>(<span>tensor</span>, <span>norm_weights</span>):
    <span>return</span> (<span>tensor</span> <span>*</span> <span>torch</span>.<span>rsqrt</span>(<span>tensor</span>.<span>pow</span>(<span>2</span>).<span>mean</span>(<span>-</span><span>1</span>, <span>keepdim</span><span>=</span><span>True</span>) <span>+</span> <span>norm_eps</span>)) <span>*</span> <span>norm_weights</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">building the first first layer of the transformer</h2><a id="user-content-building-the-first-first-layer-of-the-transformer" aria-label="Permalink: building the first first layer of the transformer" href="#building-the-first-first-layer-of-the-transformer"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">normalization</h3><a id="user-content-normalization" aria-label="Permalink: normalization" href="#normalization"></a></p>
<p dir="auto">you will see me accessing layer.0 from the model dict (this is the first layer)
<br>
anyway, so after normalizing our shapes are still [17x4096] same as embedding but normalized</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/norm.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/norm.png" width="600"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="token_embeddings = rms_norm(token_embeddings_unnormalized, model[&quot;layers.0.attention_norm.weight&quot;])
token_embeddings.shape"><pre><span>token_embeddings</span> <span>=</span> <span>rms_norm</span>(<span>token_embeddings_unnormalized</span>, <span>model</span>[<span>"layers.0.attention_norm.weight"</span>])
<span>token_embeddings</span>.<span>shape</span></pre></div>

<p dir="auto"><h3 tabindex="-1" dir="auto">attention implemented from scratch</h3><a id="user-content-attention-implemented-from-scratch" aria-label="Permalink: attention implemented from scratch" href="#attention-implemented-from-scratch"></a></p>
<p dir="auto">let's load the attention heads of the first layer of the transformer</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/qkv.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/qkv.png" width="600"></a>
</p>

<p dir="auto">&gt; when we load the query, key, value and output vectors from the model we notice the shapes to be [4096x4096], [1024x4096], [1024x4096], [4096x4096]
<br>
&gt; at first glance this is weird because ideally we want each q,k,v and o for each head individually
<br>
&gt; the authors of the code bundled them togeather because its easy it helps parallize attention head multiplication.
<br>
&gt; im going to unwrap everything...</p>
<div dir="auto" data-snippet-clipboard-copy-content="print(
    model[&quot;layers.0.attention.wq.weight&quot;].shape,
    model[&quot;layers.0.attention.wk.weight&quot;].shape,
    model[&quot;layers.0.attention.wv.weight&quot;].shape,
    model[&quot;layers.0.attention.wo.weight&quot;].shape
)"><pre><span>print</span>(
    <span>model</span>[<span>"layers.0.attention.wq.weight"</span>].<span>shape</span>,
    <span>model</span>[<span>"layers.0.attention.wk.weight"</span>].<span>shape</span>,
    <span>model</span>[<span>"layers.0.attention.wv.weight"</span>].<span>shape</span>,
    <span>model</span>[<span>"layers.0.attention.wo.weight"</span>].<span>shape</span>
)</pre></div>
<div data-snippet-clipboard-copy-content="torch.Size([4096, 4096]) torch.Size([1024, 4096]) torch.Size([1024, 4096]) torch.Size([4096, 4096])"><pre><code>torch.Size([4096, 4096]) torch.Size([1024, 4096]) torch.Size([1024, 4096]) torch.Size([4096, 4096])
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">unwrapping query</h3><a id="user-content-unwrapping-query" aria-label="Permalink: unwrapping query" href="#unwrapping-query"></a></p>
<div dir="auto"><p>in the next section we will unwrap the queries from multiple attention heads, the resulting shape is [32x128x4096]
</p><p>
here, 32 is the number of attention heads in llama3, 128 is the size of the query vector and 4096 is the size of the token embedding</p></div>
<div dir="auto" data-snippet-clipboard-copy-content="q_layer0 = model[&quot;layers.0.attention.wq.weight&quot;]
head_dim = q_layer0.shape[0] // n_heads
q_layer0 = q_layer0.view(n_heads, head_dim, dim)
q_layer0.shape"><pre><span>q_layer0</span> <span>=</span> <span>model</span>[<span>"layers.0.attention.wq.weight"</span>]
<span>head_dim</span> <span>=</span> <span>q_layer0</span>.<span>shape</span>[<span>0</span>] <span>//</span> <span>n_heads</span>
<span>q_layer0</span> <span>=</span> <span>q_layer0</span>.<span>view</span>(<span>n_heads</span>, <span>head_dim</span>, <span>dim</span>)
<span>q_layer0</span>.<span>shape</span></pre></div>
<div data-snippet-clipboard-copy-content="torch.Size([32, 128, 4096])"><pre><code>torch.Size([32, 128, 4096])
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">im going to implement the first head of the first layer</h3><a id="user-content-im-going-to-implement-the-first-head-of-the-first-layer" aria-label="Permalink: im going to implement the first head of the first layer" href="#im-going-to-implement-the-first-head-of-the-first-layer"></a></p>
<p dir="auto">here i access the query weight matrix first head of the first layer, the size of this query weight matrix is [128x4096]</p>
<div dir="auto" data-snippet-clipboard-copy-content="q_layer0_head0 = q_layer0[0]
q_layer0_head0.shape"><pre><span>q_layer0_head0</span> <span>=</span> <span>q_layer0</span>[<span>0</span>]
<span>q_layer0_head0</span>.<span>shape</span></pre></div>

<p dir="auto"><h3 tabindex="-1" dir="auto">we now multiply the query weights with the token embedding, to recive a query for the token</h3><a id="user-content-we-now-multiply-the-query-weights-with-the-token-embedding-to-recive-a-query-for-the-token" aria-label="Permalink: we now multiply the query weights with the token embedding, to recive a query for the token" href="#we-now-multiply-the-query-weights-with-the-token-embedding-to-recive-a-query-for-the-token"></a></p>
<p dir="auto">here you can see the resulting shape is [17x128], this is because we have 17 tokens and for each token there is a 128 length query.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/q_per_token.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/q_per_token.png" width="600"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="q_per_token = torch.matmul(token_embeddings, q_layer0_head0.T)
q_per_token.shape"><pre><span>q_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>token_embeddings</span>, <span>q_layer0_head0</span>.<span>T</span>)
<span>q_per_token</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">positioning encoding</h2><a id="user-content-positioning-encoding" aria-label="Permalink: positioning encoding" href="#positioning-encoding"></a></p>
<div dir="auto"><p>we are now at a stage where we have a query vector for each token in our prompt, but if you think about it -- the indivitually query vector has no idea about the position in the prompt.
</p><p>
query: "the answer to the ultimate question of life, the universe, and everything is "
</p><p>
in our prompt we have used "the" three times, we need the query vectors of all 3 "the" tokens to have different query vectors (each of size [1x128]) based on their positions in the query. we perform these rotations using RoPE (rotory positional embedding).
</p></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">RoPE</h3><a id="user-content-rope" aria-label="Permalink: RoPE" href="#rope"></a></p>
<p dir="auto">watch this video (this is what i watched) to understand the math.
<a href="https://www.youtube.com/watch?v=o29P0Kpobz0&amp;t=530s" rel="nofollow">https://www.youtube.com/watch?v=o29P0Kpobz0&amp;t=530s</a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/rope.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/rope.png" width="600"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="q_per_token_split_into_pairs = q_per_token.float().view(q_per_token.shape[0], -1, 2)
q_per_token_split_into_pairs.shape"><pre><span>q_per_token_split_into_pairs</span> <span>=</span> <span>q_per_token</span>.<span>float</span>().<span>view</span>(<span>q_per_token</span>.<span>shape</span>[<span>0</span>], <span>-</span><span>1</span>, <span>2</span>)
<span>q_per_token_split_into_pairs</span>.<span>shape</span></pre></div>

<div dir="auto"><p>in the above step, we split the query vectors into pairs, we apply a rotational angle shift to each pair!
</p><p>
we now have a vector of size [17x64x2], this is the 128 length queries split into 64 pairs for each token in the prompt! each of those 64 pairs will be rotated by m*(theta) where m is the position of the token for which we are rotating the query!</p></div>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/qsplit.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/qsplit.png" width="600"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">using dot product of complex numbers to rotate a vector</h2><a id="user-content-using-dot-product-of-complex-numbers-to-rotate-a-vector" aria-label="Permalink: using dot product of complex numbers to rotate a vector" href="#using-dot-product-of-complex-numbers-to-rotate-a-vector"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/freq_cis.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/freq_cis.png" width="600"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="zero_to_one_split_into_64_parts = torch.tensor(range(64))/64
zero_to_one_split_into_64_parts"><pre><span>zero_to_one_split_into_64_parts</span> <span>=</span> <span>torch</span>.<span>tensor</span>(<span>range</span>(<span>64</span>))<span>/</span><span>64</span>
<span>zero_to_one_split_into_64_parts</span></pre></div>
<div data-snippet-clipboard-copy-content="tensor([0.0000, 0.0156, 0.0312, 0.0469, 0.0625, 0.0781, 0.0938, 0.1094, 0.1250,
        0.1406, 0.1562, 0.1719, 0.1875, 0.2031, 0.2188, 0.2344, 0.2500, 0.2656,
        0.2812, 0.2969, 0.3125, 0.3281, 0.3438, 0.3594, 0.3750, 0.3906, 0.4062,
        0.4219, 0.4375, 0.4531, 0.4688, 0.4844, 0.5000, 0.5156, 0.5312, 0.5469,
        0.5625, 0.5781, 0.5938, 0.6094, 0.6250, 0.6406, 0.6562, 0.6719, 0.6875,
        0.7031, 0.7188, 0.7344, 0.7500, 0.7656, 0.7812, 0.7969, 0.8125, 0.8281,
        0.8438, 0.8594, 0.8750, 0.8906, 0.9062, 0.9219, 0.9375, 0.9531, 0.9688,
        0.9844])"><pre><code>tensor([0.0000, 0.0156, 0.0312, 0.0469, 0.0625, 0.0781, 0.0938, 0.1094, 0.1250,
        0.1406, 0.1562, 0.1719, 0.1875, 0.2031, 0.2188, 0.2344, 0.2500, 0.2656,
        0.2812, 0.2969, 0.3125, 0.3281, 0.3438, 0.3594, 0.3750, 0.3906, 0.4062,
        0.4219, 0.4375, 0.4531, 0.4688, 0.4844, 0.5000, 0.5156, 0.5312, 0.5469,
        0.5625, 0.5781, 0.5938, 0.6094, 0.6250, 0.6406, 0.6562, 0.6719, 0.6875,
        0.7031, 0.7188, 0.7344, 0.7500, 0.7656, 0.7812, 0.7969, 0.8125, 0.8281,
        0.8438, 0.8594, 0.8750, 0.8906, 0.9062, 0.9219, 0.9375, 0.9531, 0.9688,
        0.9844])
</code></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="freqs = 1.0 / (rope_theta ** zero_to_one_split_into_64_parts)
freqs"><pre><span>freqs</span> <span>=</span> <span>1.0</span> <span>/</span> (<span>rope_theta</span> <span>**</span> <span>zero_to_one_split_into_64_parts</span>)
<span>freqs</span></pre></div>
<div data-snippet-clipboard-copy-content="tensor([1.0000e+00, 8.1462e-01, 6.6360e-01, 5.4058e-01, 4.4037e-01, 3.5873e-01,
        2.9223e-01, 2.3805e-01, 1.9392e-01, 1.5797e-01, 1.2869e-01, 1.0483e-01,
        8.5397e-02, 6.9566e-02, 5.6670e-02, 4.6164e-02, 3.7606e-02, 3.0635e-02,
        2.4955e-02, 2.0329e-02, 1.6560e-02, 1.3490e-02, 1.0990e-02, 8.9523e-03,
        7.2927e-03, 5.9407e-03, 4.8394e-03, 3.9423e-03, 3.2114e-03, 2.6161e-03,
        2.1311e-03, 1.7360e-03, 1.4142e-03, 1.1520e-03, 9.3847e-04, 7.6450e-04,
        6.2277e-04, 5.0732e-04, 4.1327e-04, 3.3666e-04, 2.7425e-04, 2.2341e-04,
        1.8199e-04, 1.4825e-04, 1.2077e-04, 9.8381e-05, 8.0143e-05, 6.5286e-05,
        5.3183e-05, 4.3324e-05, 3.5292e-05, 2.8750e-05, 2.3420e-05, 1.9078e-05,
        1.5542e-05, 1.2660e-05, 1.0313e-05, 8.4015e-06, 6.8440e-06, 5.5752e-06,
        4.5417e-06, 3.6997e-06, 3.0139e-06, 2.4551e-06])"><pre><code>tensor([1.0000e+00, 8.1462e-01, 6.6360e-01, 5.4058e-01, 4.4037e-01, 3.5873e-01,
        2.9223e-01, 2.3805e-01, 1.9392e-01, 1.5797e-01, 1.2869e-01, 1.0483e-01,
        8.5397e-02, 6.9566e-02, 5.6670e-02, 4.6164e-02, 3.7606e-02, 3.0635e-02,
        2.4955e-02, 2.0329e-02, 1.6560e-02, 1.3490e-02, 1.0990e-02, 8.9523e-03,
        7.2927e-03, 5.9407e-03, 4.8394e-03, 3.9423e-03, 3.2114e-03, 2.6161e-03,
        2.1311e-03, 1.7360e-03, 1.4142e-03, 1.1520e-03, 9.3847e-04, 7.6450e-04,
        6.2277e-04, 5.0732e-04, 4.1327e-04, 3.3666e-04, 2.7425e-04, 2.2341e-04,
        1.8199e-04, 1.4825e-04, 1.2077e-04, 9.8381e-05, 8.0143e-05, 6.5286e-05,
        5.3183e-05, 4.3324e-05, 3.5292e-05, 2.8750e-05, 2.3420e-05, 1.9078e-05,
        1.5542e-05, 1.2660e-05, 1.0313e-05, 8.4015e-06, 6.8440e-06, 5.5752e-06,
        4.5417e-06, 3.6997e-06, 3.0139e-06, 2.4551e-06])
</code></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="freqs_for_each_token = torch.outer(torch.arange(17), freqs)
freqs_cis = torch.polar(torch.ones_like(freqs_for_each_token), freqs_for_each_token)
freqs_cis.shape

# viewing tjhe third row of freqs_cis
value = freqs_cis[3]
plt.figure()
for i, element in enumerate(value[:17]):
    plt.plot([0, element.real], [0, element.imag], color='blue', linewidth=1, label=f&quot;Index: {i}&quot;)
    plt.annotate(f&quot;{i}&quot;, xy=(element.real, element.imag), color='red')
plt.xlabel('Real')
plt.ylabel('Imaginary')
plt.title('Plot of one row of freqs_cis')
plt.show()"><pre><span>freqs_for_each_token</span> <span>=</span> <span>torch</span>.<span>outer</span>(<span>torch</span>.<span>arange</span>(<span>17</span>), <span>freqs</span>)
<span>freqs_cis</span> <span>=</span> <span>torch</span>.<span>polar</span>(<span>torch</span>.<span>ones_like</span>(<span>freqs_for_each_token</span>), <span>freqs_for_each_token</span>)
<span>freqs_cis</span>.<span>shape</span>

<span># viewing tjhe third row of freqs_cis</span>
<span>value</span> <span>=</span> <span>freqs_cis</span>[<span>3</span>]
<span>plt</span>.<span>figure</span>()
<span>for</span> <span>i</span>, <span>element</span> <span>in</span> <span>enumerate</span>(<span>value</span>[:<span>17</span>]):
    <span>plt</span>.<span>plot</span>([<span>0</span>, <span>element</span>.<span>real</span>], [<span>0</span>, <span>element</span>.<span>imag</span>], <span>color</span><span>=</span><span>'blue'</span>, <span>linewidth</span><span>=</span><span>1</span>, <span>label</span><span>=</span><span>f"Index: <span><span>{</span><span>i</span><span>}</span></span>"</span>)
    <span>plt</span>.<span>annotate</span>(<span>f"<span><span>{</span><span>i</span><span>}</span></span>"</span>, <span>xy</span><span>=</span>(<span>element</span>.<span>real</span>, <span>element</span>.<span>imag</span>), <span>color</span><span>=</span><span>'red'</span>)
<span>plt</span>.<span>xlabel</span>(<span>'Real'</span>)
<span>plt</span>.<span>ylabel</span>(<span>'Imaginary'</span>)
<span>plt</span>.<span>title</span>(<span>'Plot of one row of freqs_cis'</span>)
<span>plt</span>.<span>show</span>()</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/implllama3_30_0.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/implllama3_30_0.png" alt="png"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">now that we have a complex number (the angle change vector) for every token's query element</h3><a id="user-content-now-that-we-have-a-complex-number-the-angle-change-vector-for-every-tokens-query-element" aria-label="Permalink: now that we have a complex number (the angle change vector) for every token's query element" href="#now-that-we-have-a-complex-number-the-angle-change-vector-for-every-tokens-query-element"></a></p>
<p dir="auto">we can convert our queries (the one we split into pairs) as complex numbers and then dot product to rotate the query based on the position
<br>
honeslty this is beautiful to think about :)</p>
<div dir="auto" data-snippet-clipboard-copy-content="q_per_token_as_complex_numbers = torch.view_as_complex(q_per_token_split_into_pairs)
q_per_token_as_complex_numbers.shape"><pre><span>q_per_token_as_complex_numbers</span> <span>=</span> <span>torch</span>.<span>view_as_complex</span>(<span>q_per_token_split_into_pairs</span>)
<span>q_per_token_as_complex_numbers</span>.<span>shape</span></pre></div>

<div dir="auto" data-snippet-clipboard-copy-content="q_per_token_as_complex_numbers_rotated = q_per_token_as_complex_numbers * freqs_cis
q_per_token_as_complex_numbers_rotated.shape"><pre><span>q_per_token_as_complex_numbers_rotated</span> <span>=</span> <span>q_per_token_as_complex_numbers</span> <span>*</span> <span>freqs_cis</span>
<span>q_per_token_as_complex_numbers_rotated</span>.<span>shape</span></pre></div>

<p dir="auto"><h3 tabindex="-1" dir="auto">after rotated vector is obtained</h3><a id="user-content-after-rotated-vector-is-obtained" aria-label="Permalink: after rotated vector is obtained" href="#after-rotated-vector-is-obtained"></a></p>
<p dir="auto">we can get back our the queries as pairs by viewing the complex numbers as real numbers again</p>
<div dir="auto" data-snippet-clipboard-copy-content="q_per_token_split_into_pairs_rotated = torch.view_as_real(q_per_token_as_complex_numbers_rotated)
q_per_token_split_into_pairs_rotated.shape"><pre><span>q_per_token_split_into_pairs_rotated</span> <span>=</span> <span>torch</span>.<span>view_as_real</span>(<span>q_per_token_as_complex_numbers_rotated</span>)
<span>q_per_token_split_into_pairs_rotated</span>.<span>shape</span></pre></div>

<p dir="auto">the rotated pairs are now merged, we now have a new query vector (rotated query vector) that is of the shape [17x128] where 17 is the number of tokens and the 128 is the dim of the query vector</p>
<div dir="auto" data-snippet-clipboard-copy-content="q_per_token_rotated = q_per_token_split_into_pairs_rotated.view(q_per_token.shape)
q_per_token_rotated.shape"><pre><span>q_per_token_rotated</span> <span>=</span> <span>q_per_token_split_into_pairs_rotated</span>.<span>view</span>(<span>q_per_token</span>.<span>shape</span>)
<span>q_per_token_rotated</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">keys (almost the same as queries)</h2><a id="user-content-keys-almost-the-same-as-queries" aria-label="Permalink: keys (almost the same as queries)" href="#keys-almost-the-same-as-queries"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/keys.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/keys.png" width="600px"></a>
</p>
im lazy as fuck, so im not going to go through the math for keys, the only things you need to keep in mind are:
<br>
&gt; keys generate key vectors also of dimention 128
<br>
&gt; keys have only 1/4th the number of the weights as queries, this is because the weights for keys are shared across 4 heads at a time, to reduce the number of computations need
<br>
&gt; keys are also rotated to add positional info, just like queries because of the same reasons 
<div dir="auto" data-snippet-clipboard-copy-content="k_layer0 = model[&quot;layers.0.attention.wk.weight&quot;]
k_layer0 = k_layer0.view(n_kv_heads, k_layer0.shape[0] // n_kv_heads, dim)
k_layer0.shape"><pre><span>k_layer0</span> <span>=</span> <span>model</span>[<span>"layers.0.attention.wk.weight"</span>]
<span>k_layer0</span> <span>=</span> <span>k_layer0</span>.<span>view</span>(<span>n_kv_heads</span>, <span>k_layer0</span>.<span>shape</span>[<span>0</span>] <span>//</span> <span>n_kv_heads</span>, <span>dim</span>)
<span>k_layer0</span>.<span>shape</span></pre></div>
<div data-snippet-clipboard-copy-content="torch.Size([8, 128, 4096])"><pre><code>torch.Size([8, 128, 4096])
</code></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="k_layer0_head0 = k_layer0[0]
k_layer0_head0.shape"><pre><span>k_layer0_head0</span> <span>=</span> <span>k_layer0</span>[<span>0</span>]
<span>k_layer0_head0</span>.<span>shape</span></pre></div>

<div dir="auto" data-snippet-clipboard-copy-content="k_per_token = torch.matmul(token_embeddings, k_layer0_head0.T)
k_per_token.shape"><pre><span>k_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>token_embeddings</span>, <span>k_layer0_head0</span>.<span>T</span>)
<span>k_per_token</span>.<span>shape</span></pre></div>

<div dir="auto" data-snippet-clipboard-copy-content="k_per_token_split_into_pairs = k_per_token.float().view(k_per_token.shape[0], -1, 2)
k_per_token_split_into_pairs.shape"><pre><span>k_per_token_split_into_pairs</span> <span>=</span> <span>k_per_token</span>.<span>float</span>().<span>view</span>(<span>k_per_token</span>.<span>shape</span>[<span>0</span>], <span>-</span><span>1</span>, <span>2</span>)
<span>k_per_token_split_into_pairs</span>.<span>shape</span></pre></div>

<div dir="auto" data-snippet-clipboard-copy-content="k_per_token_as_complex_numbers = torch.view_as_complex(k_per_token_split_into_pairs)
k_per_token_as_complex_numbers.shape"><pre><span>k_per_token_as_complex_numbers</span> <span>=</span> <span>torch</span>.<span>view_as_complex</span>(<span>k_per_token_split_into_pairs</span>)
<span>k_per_token_as_complex_numbers</span>.<span>shape</span></pre></div>

<div dir="auto" data-snippet-clipboard-copy-content="k_per_token_split_into_pairs_rotated = torch.view_as_real(k_per_token_as_complex_numbers * freqs_cis)
k_per_token_split_into_pairs_rotated.shape"><pre><span>k_per_token_split_into_pairs_rotated</span> <span>=</span> <span>torch</span>.<span>view_as_real</span>(<span>k_per_token_as_complex_numbers</span> <span>*</span> <span>freqs_cis</span>)
<span>k_per_token_split_into_pairs_rotated</span>.<span>shape</span></pre></div>

<div dir="auto" data-snippet-clipboard-copy-content="k_per_token_rotated = k_per_token_split_into_pairs_rotated.view(k_per_token.shape)
k_per_token_rotated.shape"><pre><span>k_per_token_rotated</span> <span>=</span> <span>k_per_token_split_into_pairs_rotated</span>.<span>view</span>(<span>k_per_token</span>.<span>shape</span>)
<span>k_per_token_rotated</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">at this stage now have both the rotated values of queries and keys, for each token.</h2><a id="user-content-at-this-stage-now-have-both-the-rotated-values-of-queries-and-keys-for-each-token" aria-label="Permalink: at this stage now have both the rotated values of queries and keys, for each token." href="#at-this-stage-now-have-both-the-rotated-values-of-queries-and-keys-for-each-token"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/keys0.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/keys0.png" width="600px"></a>
</p>
each of the queries and keys are now of shape [17x128]. 
<p dir="auto"><h2 tabindex="-1" dir="auto">in the next step we will multiply the queries and key matrices</h2><a id="user-content-in-the-next-step-we-will-multiply-the-queries-and-key-matrices" aria-label="Permalink: in the next step we will multiply the queries and key matrices" href="#in-the-next-step-we-will-multiply-the-queries-and-key-matrices"></a></p>
<p dir="auto">doing this will give us a score mapping each token with one another
<br>
this score describes how well each token's query relates to the each tokens's key.
THIS IS SELF ATTENTION :)
<br>
the shape of the attention score matrix (qk_per_token) is [17x17] where 17 is the number of tokens in the prompt</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/qkmatmul.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/qkmatmul.png" width="600px"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="qk_per_token = torch.matmul(q_per_token_rotated, k_per_token_rotated.T)/(head_dim)**0.5
qk_per_token.shape"><pre><span>qk_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>q_per_token_rotated</span>, <span>k_per_token_rotated</span>.<span>T</span>)<span>/</span>(<span>head_dim</span>)<span>**</span><span>0.5</span>
<span>qk_per_token</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">we now have to mask query key scores</h2><a id="user-content-we-now-have-to-mask-query-key-scores" aria-label="Permalink: we now have to mask query key scores" href="#we-now-have-to-mask-query-key-scores"></a></p>
<p dir="auto">during the training process of llama3, the future token qk scores are masked.
<br>
why? because during training we only learn to predict tokens using past tokens.
<br>
as a result, during inference we set the future tokens to zero.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/mask.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/mask.png" width="600px"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="def display_qk_heatmap(qk_per_token):
    _, ax = plt.subplots()
    im = ax.imshow(qk_per_token.to(float).detach(), cmap='viridis')
    ax.set_xticks(range(len(prompt_split_as_tokens)))
    ax.set_yticks(range(len(prompt_split_as_tokens)))
    ax.set_xticklabels(prompt_split_as_tokens)
    ax.set_yticklabels(prompt_split_as_tokens)
    ax.figure.colorbar(im, ax=ax)
    
display_qk_heatmap(qk_per_token)"><pre><span>def</span> <span>display_qk_heatmap</span>(<span>qk_per_token</span>):
    <span>_</span>, <span>ax</span> <span>=</span> <span>plt</span>.<span>subplots</span>()
    <span>im</span> <span>=</span> <span>ax</span>.<span>imshow</span>(<span>qk_per_token</span>.<span>to</span>(<span>float</span>).<span>detach</span>(), <span>cmap</span><span>=</span><span>'viridis'</span>)
    <span>ax</span>.<span>set_xticks</span>(<span>range</span>(<span>len</span>(<span>prompt_split_as_tokens</span>)))
    <span>ax</span>.<span>set_yticks</span>(<span>range</span>(<span>len</span>(<span>prompt_split_as_tokens</span>)))
    <span>ax</span>.<span>set_xticklabels</span>(<span>prompt_split_as_tokens</span>)
    <span>ax</span>.<span>set_yticklabels</span>(<span>prompt_split_as_tokens</span>)
    <span>ax</span>.<span>figure</span>.<span>colorbar</span>(<span>im</span>, <span>ax</span><span>=</span><span>ax</span>)
    
<span>display_qk_heatmap</span>(<span>qk_per_token</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/implllama3_50_0.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/implllama3_50_0.png" alt="png"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="mask = torch.full((len(tokens), len(tokens)), float(&quot;-inf&quot;), device=tokens.device)
mask = torch.triu(mask, diagonal=1)
mask"><pre><span>mask</span> <span>=</span> <span>torch</span>.<span>full</span>((<span>len</span>(<span>tokens</span>), <span>len</span>(<span>tokens</span>)), <span>float</span>(<span>"-inf"</span>), <span>device</span><span>=</span><span>tokens</span>.<span>device</span>)
<span>mask</span> <span>=</span> <span>torch</span>.<span>triu</span>(<span>mask</span>, <span>diagonal</span><span>=</span><span>1</span>)
<span>mask</span></pre></div>
<div data-snippet-clipboard-copy-content="tensor([[0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])"><pre><code>tensor([[0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf, -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -inf],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
</code></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="qk_per_token_after_masking = qk_per_token + mask
display_qk_heatmap(qk_per_token_after_masking)"><pre><span>qk_per_token_after_masking</span> <span>=</span> <span>qk_per_token</span> <span>+</span> <span>mask</span>
<span>display_qk_heatmap</span>(<span>qk_per_token_after_masking</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/implllama3_52_0.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/implllama3_52_0.png" alt="png"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/softmax.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/softmax.png" width="600px"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="qk_per_token_after_masking_after_softmax = torch.nn.functional.softmax(qk_per_token_after_masking, dim=1).to(torch.bfloat16)
display_qk_heatmap(qk_per_token_after_masking_after_softmax)"><pre><span>qk_per_token_after_masking_after_softmax</span> <span>=</span> <span>torch</span>.<span>nn</span>.<span>functional</span>.<span>softmax</span>(<span>qk_per_token_after_masking</span>, <span>dim</span><span>=</span><span>1</span>).<span>to</span>(<span>torch</span>.<span>bfloat16</span>)
<span>display_qk_heatmap</span>(<span>qk_per_token_after_masking_after_softmax</span>)</pre></div>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/implllama3_54_0.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/implllama3_54_0.png" alt="png"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">values (almost the end of attention)</h2><a id="user-content-values-almost-the-end-of-attention" aria-label="Permalink: values (almost the end of attention)" href="#values-almost-the-end-of-attention"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/value.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/value.png" width="600px"></a>
</p>
these scores (0-1) are used to determine how much of value matrix is used per token
<br>
&gt; just like keys, value weights are also shared acorss every 4 attention heads (to save computation)
<br>
&gt; as a result, the shape of the value weight matrix below is [8x128x4096]
<div dir="auto" data-snippet-clipboard-copy-content="v_layer0 = model[&quot;layers.0.attention.wv.weight&quot;]
v_layer0 = v_layer0.view(n_kv_heads, v_layer0.shape[0] // n_kv_heads, dim)
v_layer0.shape"><pre><span>v_layer0</span> <span>=</span> <span>model</span>[<span>"layers.0.attention.wv.weight"</span>]
<span>v_layer0</span> <span>=</span> <span>v_layer0</span>.<span>view</span>(<span>n_kv_heads</span>, <span>v_layer0</span>.<span>shape</span>[<span>0</span>] <span>//</span> <span>n_kv_heads</span>, <span>dim</span>)
<span>v_layer0</span>.<span>shape</span></pre></div>
<div data-snippet-clipboard-copy-content="torch.Size([8, 128, 4096])"><pre><code>torch.Size([8, 128, 4096])
</code></pre></div>
<p dir="auto">the first layer, first head value weight matrix is given below</p>
<div dir="auto" data-snippet-clipboard-copy-content="v_layer0_head0 = v_layer0[0]
v_layer0_head0.shape"><pre><span>v_layer0_head0</span> <span>=</span> <span>v_layer0</span>[<span>0</span>]
<span>v_layer0_head0</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">value vectors</h2><a id="user-content-value-vectors" aria-label="Permalink: value vectors" href="#value-vectors"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/v0.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/v0.png" width="600px"></a>
</p>
we now use the value weghts to get the attention values per token, this is of size [17x128] where 17 is the number of tokens in the prompt and 128 is the dim of the value vector per token
<div dir="auto" data-snippet-clipboard-copy-content="v_per_token = torch.matmul(token_embeddings, v_layer0_head0.T)
v_per_token.shape"><pre><span>v_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>token_embeddings</span>, <span>v_layer0_head0</span>.<span>T</span>)
<span>v_per_token</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">attention</h2><a id="user-content-attention" aria-label="Permalink: attention" href="#attention"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/attention.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/attention.png" width="600px"></a>
</p>
the resultant attention vector after multipying with the values per token is of shape [17*128]
<div dir="auto" data-snippet-clipboard-copy-content="qkv_attention = torch.matmul(qk_per_token_after_masking_after_softmax, v_per_token)
qkv_attention.shape"><pre><span>qkv_attention</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>qk_per_token_after_masking_after_softmax</span>, <span>v_per_token</span>)
<span>qkv_attention</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">multi head attention</h2><a id="user-content-multi-head-attention" aria-label="Permalink: multi head attention" href="#multi-head-attention"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/heads.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/heads.png" width="600px"></a>
</p>
WE NOW HAVE THE ATTENTION VALUE OF THE FIRST LAYER AND FIRST HEAD
<br>
now im going to run a loop and perform the exact same math as the cells above but for every head in the first layer
<div dir="auto" data-snippet-clipboard-copy-content="qkv_attention_store = []

for head in range(n_heads):
    q_layer0_head = q_layer0[head]
    k_layer0_head = k_layer0[head//4] # key weights are shared across 4 heads
    v_layer0_head = v_layer0[head//4] # value weights are shared across 4 heads
    q_per_token = torch.matmul(token_embeddings, q_layer0_head.T)
    k_per_token = torch.matmul(token_embeddings, k_layer0_head.T)
    v_per_token = torch.matmul(token_embeddings, v_layer0_head.T)

    q_per_token_split_into_pairs = q_per_token.float().view(q_per_token.shape[0], -1, 2)
    q_per_token_as_complex_numbers = torch.view_as_complex(q_per_token_split_into_pairs)
    q_per_token_split_into_pairs_rotated = torch.view_as_real(q_per_token_as_complex_numbers * freqs_cis[:len(tokens)])
    q_per_token_rotated = q_per_token_split_into_pairs_rotated.view(q_per_token.shape)

    k_per_token_split_into_pairs = k_per_token.float().view(k_per_token.shape[0], -1, 2)
    k_per_token_as_complex_numbers = torch.view_as_complex(k_per_token_split_into_pairs)
    k_per_token_split_into_pairs_rotated = torch.view_as_real(k_per_token_as_complex_numbers * freqs_cis[:len(tokens)])
    k_per_token_rotated = k_per_token_split_into_pairs_rotated.view(k_per_token.shape)

    qk_per_token = torch.matmul(q_per_token_rotated, k_per_token_rotated.T)/(128)**0.5
    mask = torch.full((len(tokens), len(tokens)), float(&quot;-inf&quot;), device=tokens.device)
    mask = torch.triu(mask, diagonal=1)
    qk_per_token_after_masking = qk_per_token + mask
    qk_per_token_after_masking_after_softmax = torch.nn.functional.softmax(qk_per_token_after_masking, dim=1).to(torch.bfloat16)
    qkv_attention = torch.matmul(qk_per_token_after_masking_after_softmax, v_per_token)
    qkv_attention = torch.matmul(qk_per_token_after_masking_after_softmax, v_per_token)
    qkv_attention_store.append(qkv_attention)

len(qkv_attention_store)"><pre><span>qkv_attention_store</span> <span>=</span> []

<span>for</span> <span>head</span> <span>in</span> <span>range</span>(<span>n_heads</span>):
    <span>q_layer0_head</span> <span>=</span> <span>q_layer0</span>[<span>head</span>]
    <span>k_layer0_head</span> <span>=</span> <span>k_layer0</span>[<span>head</span><span>//</span><span>4</span>] <span># key weights are shared across 4 heads</span>
    <span>v_layer0_head</span> <span>=</span> <span>v_layer0</span>[<span>head</span><span>//</span><span>4</span>] <span># value weights are shared across 4 heads</span>
    <span>q_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>token_embeddings</span>, <span>q_layer0_head</span>.<span>T</span>)
    <span>k_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>token_embeddings</span>, <span>k_layer0_head</span>.<span>T</span>)
    <span>v_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>token_embeddings</span>, <span>v_layer0_head</span>.<span>T</span>)

    <span>q_per_token_split_into_pairs</span> <span>=</span> <span>q_per_token</span>.<span>float</span>().<span>view</span>(<span>q_per_token</span>.<span>shape</span>[<span>0</span>], <span>-</span><span>1</span>, <span>2</span>)
    <span>q_per_token_as_complex_numbers</span> <span>=</span> <span>torch</span>.<span>view_as_complex</span>(<span>q_per_token_split_into_pairs</span>)
    <span>q_per_token_split_into_pairs_rotated</span> <span>=</span> <span>torch</span>.<span>view_as_real</span>(<span>q_per_token_as_complex_numbers</span> <span>*</span> <span>freqs_cis</span>[:<span>len</span>(<span>tokens</span>)])
    <span>q_per_token_rotated</span> <span>=</span> <span>q_per_token_split_into_pairs_rotated</span>.<span>view</span>(<span>q_per_token</span>.<span>shape</span>)

    <span>k_per_token_split_into_pairs</span> <span>=</span> <span>k_per_token</span>.<span>float</span>().<span>view</span>(<span>k_per_token</span>.<span>shape</span>[<span>0</span>], <span>-</span><span>1</span>, <span>2</span>)
    <span>k_per_token_as_complex_numbers</span> <span>=</span> <span>torch</span>.<span>view_as_complex</span>(<span>k_per_token_split_into_pairs</span>)
    <span>k_per_token_split_into_pairs_rotated</span> <span>=</span> <span>torch</span>.<span>view_as_real</span>(<span>k_per_token_as_complex_numbers</span> <span>*</span> <span>freqs_cis</span>[:<span>len</span>(<span>tokens</span>)])
    <span>k_per_token_rotated</span> <span>=</span> <span>k_per_token_split_into_pairs_rotated</span>.<span>view</span>(<span>k_per_token</span>.<span>shape</span>)

    <span>qk_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>q_per_token_rotated</span>, <span>k_per_token_rotated</span>.<span>T</span>)<span>/</span>(<span>128</span>)<span>**</span><span>0.5</span>
    <span>mask</span> <span>=</span> <span>torch</span>.<span>full</span>((<span>len</span>(<span>tokens</span>), <span>len</span>(<span>tokens</span>)), <span>float</span>(<span>"-inf"</span>), <span>device</span><span>=</span><span>tokens</span>.<span>device</span>)
    <span>mask</span> <span>=</span> <span>torch</span>.<span>triu</span>(<span>mask</span>, <span>diagonal</span><span>=</span><span>1</span>)
    <span>qk_per_token_after_masking</span> <span>=</span> <span>qk_per_token</span> <span>+</span> <span>mask</span>
    <span>qk_per_token_after_masking_after_softmax</span> <span>=</span> <span>torch</span>.<span>nn</span>.<span>functional</span>.<span>softmax</span>(<span>qk_per_token_after_masking</span>, <span>dim</span><span>=</span><span>1</span>).<span>to</span>(<span>torch</span>.<span>bfloat16</span>)
    <span>qkv_attention</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>qk_per_token_after_masking_after_softmax</span>, <span>v_per_token</span>)
    <span>qkv_attention</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>qk_per_token_after_masking_after_softmax</span>, <span>v_per_token</span>)
    <span>qkv_attention_store</span>.<span>append</span>(<span>qkv_attention</span>)

<span>len</span>(<span>qkv_attention_store</span>)</pre></div>

<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/stacked.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/stacked.png" width="600px"></a>
</p>
we now have a the qkv_attention matrix for all 32 heads on the first layer, next im going to merge all attention scores into one large matrix of size [17x4096]
<br>
we are almost at the end :)
<div dir="auto" data-snippet-clipboard-copy-content="stacked_qkv_attention = torch.cat(qkv_attention_store, dim=-1)
stacked_qkv_attention.shape"><pre><span>stacked_qkv_attention</span> <span>=</span> <span>torch</span>.<span>cat</span>(<span>qkv_attention_store</span>, <span>dim</span><span>=</span><span>-</span><span>1</span>)
<span>stacked_qkv_attention</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">weight matrix, one of the final steps</h2><a id="user-content-weight-matrix-one-of-the-final-steps" aria-label="Permalink: weight matrix, one of the final steps" href="#weight-matrix-one-of-the-final-steps"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/weightmatrix.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/weightmatrix.png" width="600px"></a>
</p>
one of the last things to do for a layer 0 attention is, is to multiply the weight matrix of the 
<div dir="auto" data-snippet-clipboard-copy-content="w_layer0 = model[&quot;layers.0.attention.wo.weight&quot;]
w_layer0.shape"><pre><span>w_layer0</span> <span>=</span> <span>model</span>[<span>"layers.0.attention.wo.weight"</span>]
<span>w_layer0</span>.<span>shape</span></pre></div>

<p dir="auto"><h3 tabindex="-1" dir="auto">this is a simple linear layer, so we just matmul</h3><a id="user-content-this-is-a-simple-linear-layer-so-we-just-matmul" aria-label="Permalink: this is a simple linear layer, so we just matmul" href="#this-is-a-simple-linear-layer-so-we-just-matmul"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="embedding_delta = torch.matmul(stacked_qkv_attention, w_layer0.T)
embedding_delta.shape"><pre><span>embedding_delta</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>stacked_qkv_attention</span>, <span>w_layer0</span>.<span>T</span>)
<span>embedding_delta</span>.<span>shape</span></pre></div>

<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/afterattention.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/afterattention.png" width="600px"></a>
</p>
we now have the change in the embedding value after attention, that should be adding to the original token embeddings
<div dir="auto" data-snippet-clipboard-copy-content="embedding_after_edit = token_embeddings_unnormalized + embedding_delta
embedding_after_edit.shape"><pre><span>embedding_after_edit</span> <span>=</span> <span>token_embeddings_unnormalized</span> <span>+</span> <span>embedding_delta</span>
<span>embedding_after_edit</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">we normalize and then run a feed forward neural network through the embedding delta</h2><a id="user-content-we-normalize-and-then-run-a-feed-forward-neural-network-through-the-embedding-delta" aria-label="Permalink: we normalize and then run a feed forward neural network through the embedding delta" href="#we-normalize-and-then-run-a-feed-forward-neural-network-through-the-embedding-delta"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/norm_after.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/norm_after.png" width="600px"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="embedding_after_edit_normalized = rms_norm(embedding_after_edit, model[&quot;layers.0.ffn_norm.weight&quot;])
embedding_after_edit_normalized.shape"><pre><span>embedding_after_edit_normalized</span> <span>=</span> <span>rms_norm</span>(<span>embedding_after_edit</span>, <span>model</span>[<span>"layers.0.ffn_norm.weight"</span>])
<span>embedding_after_edit_normalized</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">loading the ff weights and implementing the feed forward network</h2><a id="user-content-loading-the-ff-weights-and-implementing-the-feed-forward-network" aria-label="Permalink: loading the ff weights and implementing the feed forward network" href="#loading-the-ff-weights-and-implementing-the-feed-forward-network"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/swiglu.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/swiglu.png" width="600px"></a>
</p>
in llama3, they used a SwiGLU feedforward network, this network architecture is really good at adding non linearity when needed by the model.
<br>
its pretty standard to use this feed forward network architecture in llms these days
<div dir="auto" data-snippet-clipboard-copy-content="w1 = model[&quot;layers.0.feed_forward.w1.weight&quot;]
w2 = model[&quot;layers.0.feed_forward.w2.weight&quot;]
w3 = model[&quot;layers.0.feed_forward.w3.weight&quot;]
output_after_feedforward = torch.matmul(torch.functional.F.silu(torch.matmul(embedding_after_edit_normalized, w1.T)) * torch.matmul(embedding_after_edit_normalized, w3.T), w2.T)
output_after_feedforward.shape"><pre><span>w1</span> <span>=</span> <span>model</span>[<span>"layers.0.feed_forward.w1.weight"</span>]
<span>w2</span> <span>=</span> <span>model</span>[<span>"layers.0.feed_forward.w2.weight"</span>]
<span>w3</span> <span>=</span> <span>model</span>[<span>"layers.0.feed_forward.w3.weight"</span>]
<span>output_after_feedforward</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>torch</span>.<span>functional</span>.<span>F</span>.<span>silu</span>(<span>torch</span>.<span>matmul</span>(<span>embedding_after_edit_normalized</span>, <span>w1</span>.<span>T</span>)) <span>*</span> <span>torch</span>.<span>matmul</span>(<span>embedding_after_edit_normalized</span>, <span>w3</span>.<span>T</span>), <span>w2</span>.<span>T</span>)
<span>output_after_feedforward</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">WE FINALLY HAVE NEW EDITED EMBEDDINGS FOR EACH TOKEN AFTER THE FIRST LAYER</h2><a id="user-content-we-finally-have-new-edited-embeddings-for-each-token-after-the-first-layer" aria-label="Permalink: WE FINALLY HAVE NEW EDITED EMBEDDINGS FOR EACH TOKEN AFTER THE FIRST LAYER" href="#we-finally-have-new-edited-embeddings-for-each-token-after-the-first-layer"></a></p>
<p dir="auto">just 31 more layers to go before we are done (one for loop away)
<br>
you can imagine this edited embedding as having information about all queries asked on the first layer
<br>
now each layer will encode more and more complex queries on the quesions asked, until we have an embedding that knows everything about the next token that we need.</p>
<div dir="auto" data-snippet-clipboard-copy-content="layer_0_embedding = embedding_after_edit+output_after_feedforward
layer_0_embedding.shape"><pre><span>layer_0_embedding</span> <span>=</span> <span>embedding_after_edit</span><span>+</span><span>output_after_feedforward</span>
<span>layer_0_embedding</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">god, everything all at once</h2><a id="user-content-god-everything-all-at-once" aria-label="Permalink: god, everything all at once" href="#god-everything-all-at-once"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/god.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/god.png" width="600px"></a>
</p>
yep, this is it. everything we did before, all at once, for every single layer.

<p dir="auto"><h2 tabindex="-1" dir="auto">have fun reading :)</h2><a id="user-content-have-fun-reading-" aria-label="Permalink: have fun reading :)" href="#have-fun-reading-"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="final_embedding = token_embeddings_unnormalized
for layer in range(n_layers):
    qkv_attention_store = []
    layer_embedding_norm = rms_norm(final_embedding, model[f&quot;layers.{layer}.attention_norm.weight&quot;])
    q_layer = model[f&quot;layers.{layer}.attention.wq.weight&quot;]
    q_layer = q_layer.view(n_heads, q_layer.shape[0] // n_heads, dim)
    k_layer = model[f&quot;layers.{layer}.attention.wk.weight&quot;]
    k_layer = k_layer.view(n_kv_heads, k_layer.shape[0] // n_kv_heads, dim)
    v_layer = model[f&quot;layers.{layer}.attention.wv.weight&quot;]
    v_layer = v_layer.view(n_kv_heads, v_layer.shape[0] // n_kv_heads, dim)
    w_layer = model[f&quot;layers.{layer}.attention.wo.weight&quot;]
    for head in range(n_heads):
        q_layer_head = q_layer[head]
        k_layer_head = k_layer[head//4]
        v_layer_head = v_layer[head//4]
        q_per_token = torch.matmul(layer_embedding_norm, q_layer_head.T)
        k_per_token = torch.matmul(layer_embedding_norm, k_layer_head.T)
        v_per_token = torch.matmul(layer_embedding_norm, v_layer_head.T)
        q_per_token_split_into_pairs = q_per_token.float().view(q_per_token.shape[0], -1, 2)
        q_per_token_as_complex_numbers = torch.view_as_complex(q_per_token_split_into_pairs)
        q_per_token_split_into_pairs_rotated = torch.view_as_real(q_per_token_as_complex_numbers * freqs_cis)
        q_per_token_rotated = q_per_token_split_into_pairs_rotated.view(q_per_token.shape)
        k_per_token_split_into_pairs = k_per_token.float().view(k_per_token.shape[0], -1, 2)
        k_per_token_as_complex_numbers = torch.view_as_complex(k_per_token_split_into_pairs)
        k_per_token_split_into_pairs_rotated = torch.view_as_real(k_per_token_as_complex_numbers * freqs_cis)
        k_per_token_rotated = k_per_token_split_into_pairs_rotated.view(k_per_token.shape)
        qk_per_token = torch.matmul(q_per_token_rotated, k_per_token_rotated.T)/(128)**0.5
        mask = torch.full((len(token_embeddings_unnormalized), len(token_embeddings_unnormalized)), float(&quot;-inf&quot;))
        mask = torch.triu(mask, diagonal=1)
        qk_per_token_after_masking = qk_per_token + mask
        qk_per_token_after_masking_after_softmax = torch.nn.functional.softmax(qk_per_token_after_masking, dim=1).to(torch.bfloat16)
        qkv_attention = torch.matmul(qk_per_token_after_masking_after_softmax, v_per_token)
        qkv_attention_store.append(qkv_attention)

    stacked_qkv_attention = torch.cat(qkv_attention_store, dim=-1)
    w_layer = model[f&quot;layers.{layer}.attention.wo.weight&quot;]
    embedding_delta = torch.matmul(stacked_qkv_attention, w_layer.T)
    embedding_after_edit = final_embedding + embedding_delta
    embedding_after_edit_normalized = rms_norm(embedding_after_edit, model[f&quot;layers.{layer}.ffn_norm.weight&quot;])
    w1 = model[f&quot;layers.{layer}.feed_forward.w1.weight&quot;]
    w2 = model[f&quot;layers.{layer}.feed_forward.w2.weight&quot;]
    w3 = model[f&quot;layers.{layer}.feed_forward.w3.weight&quot;]
    output_after_feedforward = torch.matmul(torch.functional.F.silu(torch.matmul(embedding_after_edit_normalized, w1.T)) * torch.matmul(embedding_after_edit_normalized, w3.T), w2.T)
    final_embedding = embedding_after_edit+output_after_feedforward"><pre><span>final_embedding</span> <span>=</span> <span>token_embeddings_unnormalized</span>
<span>for</span> <span>layer</span> <span>in</span> <span>range</span>(<span>n_layers</span>):
    <span>qkv_attention_store</span> <span>=</span> []
    <span>layer_embedding_norm</span> <span>=</span> <span>rms_norm</span>(<span>final_embedding</span>, <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.attention_norm.weight"</span>])
    <span>q_layer</span> <span>=</span> <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.attention.wq.weight"</span>]
    <span>q_layer</span> <span>=</span> <span>q_layer</span>.<span>view</span>(<span>n_heads</span>, <span>q_layer</span>.<span>shape</span>[<span>0</span>] <span>//</span> <span>n_heads</span>, <span>dim</span>)
    <span>k_layer</span> <span>=</span> <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.attention.wk.weight"</span>]
    <span>k_layer</span> <span>=</span> <span>k_layer</span>.<span>view</span>(<span>n_kv_heads</span>, <span>k_layer</span>.<span>shape</span>[<span>0</span>] <span>//</span> <span>n_kv_heads</span>, <span>dim</span>)
    <span>v_layer</span> <span>=</span> <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.attention.wv.weight"</span>]
    <span>v_layer</span> <span>=</span> <span>v_layer</span>.<span>view</span>(<span>n_kv_heads</span>, <span>v_layer</span>.<span>shape</span>[<span>0</span>] <span>//</span> <span>n_kv_heads</span>, <span>dim</span>)
    <span>w_layer</span> <span>=</span> <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.attention.wo.weight"</span>]
    <span>for</span> <span>head</span> <span>in</span> <span>range</span>(<span>n_heads</span>):
        <span>q_layer_head</span> <span>=</span> <span>q_layer</span>[<span>head</span>]
        <span>k_layer_head</span> <span>=</span> <span>k_layer</span>[<span>head</span><span>//</span><span>4</span>]
        <span>v_layer_head</span> <span>=</span> <span>v_layer</span>[<span>head</span><span>//</span><span>4</span>]
        <span>q_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>layer_embedding_norm</span>, <span>q_layer_head</span>.<span>T</span>)
        <span>k_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>layer_embedding_norm</span>, <span>k_layer_head</span>.<span>T</span>)
        <span>v_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>layer_embedding_norm</span>, <span>v_layer_head</span>.<span>T</span>)
        <span>q_per_token_split_into_pairs</span> <span>=</span> <span>q_per_token</span>.<span>float</span>().<span>view</span>(<span>q_per_token</span>.<span>shape</span>[<span>0</span>], <span>-</span><span>1</span>, <span>2</span>)
        <span>q_per_token_as_complex_numbers</span> <span>=</span> <span>torch</span>.<span>view_as_complex</span>(<span>q_per_token_split_into_pairs</span>)
        <span>q_per_token_split_into_pairs_rotated</span> <span>=</span> <span>torch</span>.<span>view_as_real</span>(<span>q_per_token_as_complex_numbers</span> <span>*</span> <span>freqs_cis</span>)
        <span>q_per_token_rotated</span> <span>=</span> <span>q_per_token_split_into_pairs_rotated</span>.<span>view</span>(<span>q_per_token</span>.<span>shape</span>)
        <span>k_per_token_split_into_pairs</span> <span>=</span> <span>k_per_token</span>.<span>float</span>().<span>view</span>(<span>k_per_token</span>.<span>shape</span>[<span>0</span>], <span>-</span><span>1</span>, <span>2</span>)
        <span>k_per_token_as_complex_numbers</span> <span>=</span> <span>torch</span>.<span>view_as_complex</span>(<span>k_per_token_split_into_pairs</span>)
        <span>k_per_token_split_into_pairs_rotated</span> <span>=</span> <span>torch</span>.<span>view_as_real</span>(<span>k_per_token_as_complex_numbers</span> <span>*</span> <span>freqs_cis</span>)
        <span>k_per_token_rotated</span> <span>=</span> <span>k_per_token_split_into_pairs_rotated</span>.<span>view</span>(<span>k_per_token</span>.<span>shape</span>)
        <span>qk_per_token</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>q_per_token_rotated</span>, <span>k_per_token_rotated</span>.<span>T</span>)<span>/</span>(<span>128</span>)<span>**</span><span>0.5</span>
        <span>mask</span> <span>=</span> <span>torch</span>.<span>full</span>((<span>len</span>(<span>token_embeddings_unnormalized</span>), <span>len</span>(<span>token_embeddings_unnormalized</span>)), <span>float</span>(<span>"-inf"</span>))
        <span>mask</span> <span>=</span> <span>torch</span>.<span>triu</span>(<span>mask</span>, <span>diagonal</span><span>=</span><span>1</span>)
        <span>qk_per_token_after_masking</span> <span>=</span> <span>qk_per_token</span> <span>+</span> <span>mask</span>
        <span>qk_per_token_after_masking_after_softmax</span> <span>=</span> <span>torch</span>.<span>nn</span>.<span>functional</span>.<span>softmax</span>(<span>qk_per_token_after_masking</span>, <span>dim</span><span>=</span><span>1</span>).<span>to</span>(<span>torch</span>.<span>bfloat16</span>)
        <span>qkv_attention</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>qk_per_token_after_masking_after_softmax</span>, <span>v_per_token</span>)
        <span>qkv_attention_store</span>.<span>append</span>(<span>qkv_attention</span>)

    <span>stacked_qkv_attention</span> <span>=</span> <span>torch</span>.<span>cat</span>(<span>qkv_attention_store</span>, <span>dim</span><span>=</span><span>-</span><span>1</span>)
    <span>w_layer</span> <span>=</span> <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.attention.wo.weight"</span>]
    <span>embedding_delta</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>stacked_qkv_attention</span>, <span>w_layer</span>.<span>T</span>)
    <span>embedding_after_edit</span> <span>=</span> <span>final_embedding</span> <span>+</span> <span>embedding_delta</span>
    <span>embedding_after_edit_normalized</span> <span>=</span> <span>rms_norm</span>(<span>embedding_after_edit</span>, <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.ffn_norm.weight"</span>])
    <span>w1</span> <span>=</span> <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.feed_forward.w1.weight"</span>]
    <span>w2</span> <span>=</span> <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.feed_forward.w2.weight"</span>]
    <span>w3</span> <span>=</span> <span>model</span>[<span>f"layers.<span><span>{</span><span>layer</span><span>}</span></span>.feed_forward.w3.weight"</span>]
    <span>output_after_feedforward</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>torch</span>.<span>functional</span>.<span>F</span>.<span>silu</span>(<span>torch</span>.<span>matmul</span>(<span>embedding_after_edit_normalized</span>, <span>w1</span>.<span>T</span>)) <span>*</span> <span>torch</span>.<span>matmul</span>(<span>embedding_after_edit_normalized</span>, <span>w3</span>.<span>T</span>), <span>w2</span>.<span>T</span>)
    <span>final_embedding</span> <span>=</span> <span>embedding_after_edit</span><span>+</span><span>output_after_feedforward</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">we now have the final embedding, the best guess the model could make about the next token</h2><a id="user-content-we-now-have-the-final-embedding-the-best-guess-the-model-could-make-about-the-next-token" aria-label="Permalink: we now have the final embedding, the best guess the model could make about the next token" href="#we-now-have-the-final-embedding-the-best-guess-the-model-could-make-about-the-next-token"></a></p>
<p dir="auto">the shape of the embedding is the same as regular token embeddings [17x4096] where 17 is the number of tokens and 4096 is the embedding dim</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/last_norm.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/last_norm.png" width="600px"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="final_embedding = rms_norm(final_embedding, model[&quot;norm.weight&quot;])
final_embedding.shape"><pre><span>final_embedding</span> <span>=</span> <span>rms_norm</span>(<span>final_embedding</span>, <span>model</span>[<span>"norm.weight"</span>])
<span>final_embedding</span>.<span>shape</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">finally, lets decode the embedding into the token value</h2><a id="user-content-finally-lets-decode-the-embedding-into-the-token-value" aria-label="Permalink: finally, lets decode the embedding into the token value" href="#finally-lets-decode-the-embedding-into-the-token-value"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/finallayer.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/finallayer.png" width="600px"></a>
</p>
we will use the output decoder to convert the final embedding into a token
<div dir="auto" data-snippet-clipboard-copy-content="model[&quot;output.weight&quot;].shape"><pre><span>model</span>[<span>"output.weight"</span>].<span>shape</span></pre></div>
<div data-snippet-clipboard-copy-content="torch.Size([128256, 4096])"><pre><code>torch.Size([128256, 4096])
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">we use the embedding of the last token to predict the next value</h2><a id="user-content-we-use-the-embedding-of-the-last-token-to-predict-the-next-value" aria-label="Permalink: we use the embedding of the last token to predict the next value" href="#we-use-the-embedding-of-the-last-token-to-predict-the-next-value"></a></p>
<p dir="auto">hopefully in our case, 42 :)
note: 42 is the answer to "the answer to the ultimate question of life, the universe, and everything is ", according to the book "hitchhiker's guide to the galaxy", most mordern llms would answer with 42 here, which should validate our entire code! wish me luck :)</p>
<div dir="auto" data-snippet-clipboard-copy-content="logits = torch.matmul(final_embedding[-1], model[&quot;output.weight&quot;].T)
logits.shape"><pre><span>logits</span> <span>=</span> <span>torch</span>.<span>matmul</span>(<span>final_embedding</span>[<span>-</span><span>1</span>], <span>model</span>[<span>"output.weight"</span>].<span>T</span>)
<span>logits</span>.<span>shape</span></pre></div>

<p dir="auto"><h3 tabindex="-1" dir="auto">the model predicted token number 2983 as the next token, is this the token number for 42?</h3><a id="user-content-the-model-predicted-token-number-2983-as-the-next-token-is-this-the-token-number-for-42" aria-label="Permalink: the model predicted token number 2983 as the next token, is this the token number for 42?" href="#the-model-predicted-token-number-2983-as-the-next-token-is-this-the-token-number-for-42"></a></p>
<p dir="auto">IM HYPING YOU UP, this is the last cell of code, hopefully you had fun :)</p>
<div dir="auto" data-snippet-clipboard-copy-content="next_token = torch.argmax(logits, dim=-1)
next_token"><pre><span>next_token</span> <span>=</span> <span>torch</span>.<span>argmax</span>(<span>logits</span>, <span>dim</span><span>=</span><span>-</span><span>1</span>)
<span>next_token</span></pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">lets fucking go</h2><a id="user-content-lets-fucking-go" aria-label="Permalink: lets fucking go" href="#lets-fucking-go"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/42.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/42.png" width="600px"></a>
</p>
<div dir="auto" data-snippet-clipboard-copy-content="tokenizer.decode([next_token.item()])"><pre><span>tokenizer</span>.<span>decode</span>([<span>next_token</span>.<span>item</span>()])</pre></div>

<p dir="auto"><h2 tabindex="-1" dir="auto">thank you, i love you :)</h2><a id="user-content-thank-you-i-love-you-" aria-label="Permalink: thank you, i love you :)" href="#thank-you-i-love-you-"></a></p>
<p dir="auto">This is the end. Hopefully you enjoyed reading it!</p>
<p dir="auto">If you want to support my work</p>
<ol dir="auto">
<li>follow me on twitter <a href="https://twitter.com/naklecha" rel="nofollow">https://twitter.com/naklecha</a></li>
<li>or, buy me a coffee <a href="https://www.buymeacoffee.com/naklecha" rel="nofollow">https://www.buymeacoffee.com/naklecha</a></li>
</ol>
<p dir="auto">Honestly, if you made it this far you already made my day :)</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">what motivates me?</h2><a id="user-content-what-motivates-me" aria-label="Permalink: what motivates me?" href="#what-motivates-me"></a></p>
<p dir="auto">My friends and I are on a mission - to make research more accessible!
We created a research lab called A10 - <a href="http://aaaaaaaaaa.org/" rel="nofollow">AAAAAAAAAA.org</a></p>
<p dir="auto">A10 twitter - <a href="https://twitter.com/aaaaaaaaaaorg" rel="nofollow">https://twitter.com/aaaaaaaaaaorg</a></p>
<p dir="auto">our thesis:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/naklecha/llama3-from-scratch/blob/main/images/a10.png"><img src="https://github.com/naklecha/llama3-from-scratch/raw/main/images/a10.png" width="600px"></a>
</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Coding My Handwriting (115 pts)]]></title>
            <link>https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript</link>
            <guid>40408291</guid>
            <pubDate>Sun, 19 May 2024 17:15:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript">https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript</a>, See on <a href="https://news.ycombinator.com/item?id=40408291">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page" role="main">
        
          
<article id="sections" data-page-sections="5f37d09b551f154577577f0a">
  
  
    
    


  


<div data-content-field="main-content" data-item-id="" data-test="page-section" data-section-theme="white" data-section-id="5f37d09b551f154577577f0c" data-controller="SectionWrapperController" data-current-styles="{
&quot;imageOverlayOpacity&quot;: 0.15,
&quot;backgroundWidth&quot;: &quot;background-width--full-bleed&quot;,
&quot;sectionHeight&quot;: &quot;section-height--medium&quot;,
&quot;horizontalAlignment&quot;: &quot;horizontal-alignment--center&quot;,
&quot;verticalAlignment&quot;: &quot;vertical-alignment--middle&quot;,
&quot;contentWidth&quot;: &quot;content-width--wide&quot;,
&quot;sectionTheme&quot;: &quot;white&quot;,
&quot;sectionAnimation&quot;: &quot;none&quot;,
&quot;backgroundMode&quot;: &quot;image&quot;
}" data-current-context="{
&quot;video&quot;: {
&quot;playbackSpeed&quot;: 0.5,
&quot;filter&quot;: 1,
&quot;filterStrength&quot;: 0,
&quot;zoom&quot;: 0,
&quot;videoSourceProvider&quot;: &quot;none&quot;
},
&quot;backgroundImageId&quot;: null,
&quot;backgroundMediaEffect&quot;: null,
&quot;divider&quot;: null,
&quot;typeName&quot;: &quot;blog-basic-grid&quot;
}" data-animation="none">
  <article id="article-">
  
    
    
    
    <div data-layout-label="Post Body" data-type="item" id="item-6642095b62643354c29c66e0"><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-8156bbeef2534803659c">
  <p>A familiar theme for me is dismissing an idea as being too much work and then later finding myself doing it anyway. That’s what happened here.</p><p>A little while ago I created a block script in JavaScript, thinking that cursive would be too complex. But here I am, two months later, ready to talk about the cursive handwriting I’ve created. There is perhaps a lesson in that but let’s not dwell on it.  </p>
</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715603804147_8094">
  <h3>Block script</h3><p><a href="https://www.amygoodchild.com/blog/generating-the-alphabet" target="_blank">This previous article</a> is about my block printed version of the alphabet. As a summary, I created it by: </p><ul data-rte-list="default"><li><p>Writing code to define key points in each letter’s paths (~10 points per letter).</p></li><li><p>Smoothing those paths using Chaikin’s curve algorithm.</p></li><li><p>Turning the path into a shape for variable thickness along the length.</p></li><li><p>Draw the shape paths using p5js.</p></li></ul><p>It looked like this: </p>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715603804147_5236">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png" data-image-dimensions="777x1010" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png" width="777" height="1010" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/eba9ea4a-a805-4c1d-8630-c2bcf0772453/printed+handwriting.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715603804147_6047">

<p>By the way, an article about my system for generating these sentences is coming soon, sign up to my newsletter to hear about it.</p>




















  
  



</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715603804147_7576">

<p>Defining the original paths for those letters was a very manual process of writing their positions into the code and then nudging the points back and forth until the letters looked right. When it came to coding cursive, I streamlined the process. </p>




















  
  



</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715603804147_12260">
  <h3>Designing Letters</h3><p>In the p5js editor, for easy access, I <a href="https://editor.p5js.org/amygoodchild/sketches/GZzkh4cWt" target="_blank">created a tool</a> to define and output the key points in the paths. </p><p>It displays a sample letter (for scale and context) next to an area in which to design the new letter with these steps:</p><ul data-rte-list="default"><li><p>Click to place key points for the path - the resultant Chaikin-curved path is shown.</p></li><li><p>Tap ‘p’ to switch to editing mode.</p></li><li><p>Select points and drag them into position. </p></li><li><p>Tap ‘enter’ to output the path to the console. </p></li></ul><p>I created 2-3 options for each letter. </p>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715608887114_6458">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif" data-image-dimensions="600x353" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif" width="600" height="353" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/b22794d7-33d0-4a7e-b5f8-ce4b8b2aa363/letter+designer.gif?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715608887114_11164">

<p>The path that results looks like this: </p>




















  
  



</div><div data-block-type="23" id="block-yui_3_17_2_1_1715608887114_11555">
<pre><code>[{x:0.7,y:22.5},{x:8.2,y:18.1},{x:8.9,y:11.2},{x:3.7,y:11.4},{x:1.7,y:18.9},{x:8.4,y:22.4},{x:17.7,y:22.0}] </code></pre></div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_6768">
  <p>I wanted to use my own handwriting as a guide, so I wrote out a range of examples of lower and uppercase letters and loaded the image directly into my letter building tool for tracing.</p><p>The w/a/s/d keys are used to place the image in the right spot and r/e zooms the image in and out. The blurry ‘e’ you see in the gif above is the sample image. </p>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_8038">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg" data-image-dimensions="2904x2148" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg" width="2904" height="2148" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/93889136-57d1-4f0a-a508-7aa8ce5209b2/handwritingsample.jpg?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_13825">

<p>The numbers noted on the paper are the x y coordinates to get that area to be in the letter creation window.</p>




















  
  



</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_11950">

<p>After creating all the paths, curving them and turning them into shapes with variable width,  (check the <a href="https://www.amygoodchild.com/blog/generating-the-alphabet" target="_blank">previous article</a> for more detail), here’s how the characters look individually. </p>




















  
  



</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_12692">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png" data-image-dimensions="1208x337" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png" width="1208" height="337" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/5e99bed5-e27f-40bb-b95b-4c76d198e2ea/cursive+letters+individual.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_11339">
  <h3>Cursive-ifying, Cursifying (?) </h3><p>Sometimes joining letters is easy, you just go straight from one path of key points to the next before Chaikin curving them all in one go. But some letter pairs do not work nicely together.</p><p>Consider the letter pair <strong>na</strong>. In red we can see the last point of the letter <strong>n</strong>, which is low, and in green, the first point of the letter <strong>a</strong>, which is high. This causes the joining path to go diagonally through the <strong>a</strong>, making it look a bit like an <strong>e</strong>. </p><p>Meanwhile in the pair <strong>ti</strong>, the <strong>t</strong> ends just above the baseline and the <strong>i</strong> starts on it, causing an unnatural ridge. </p>
</div><div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_14483">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png" data-image-dimensions="500x500" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png" width="500" height="500" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/7984a9cc-0079-4dc4-94e6-d323f25c05fb/na+-+1.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_32131">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png" data-image-dimensions="500x500" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png" width="500" height="500" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/f333ede0-cb98-4db3-99e3-feadcdcbda39/ti.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div></div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_19361">

<p>To fix these issues we can add an extra point to the start of the <strong>a</strong>, and delete the last two points on the <strong>t</strong>. </p>




















  
  



</div><div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_20290">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png" data-image-dimensions="500x500" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png" width="500" height="500" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/e3456092-c6ba-4ade-b4a8-2e925de89e90/na+-+2.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_60784">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png" data-image-dimensions="500x500" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png" width="500" height="500" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/edec8a82-c9eb-4467-b731-ec4cc27afb80/ti+-+2.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div></div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_23305">
  <p>But we can’t just change the letters like that for all scenarios. </p><p>For example, if the <strong>a</strong> is at the start of a word, the additional point will be out of place and if the <strong>a</strong> preceded by a letter like <strong>w</strong>, it creates a line that crosses through the <strong>a </strong>in a different way. If the <strong>t</strong> is paired with a <strong>k</strong>, it becomes deformed. </p>
</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_28307">
  <p>The points at the beginning and ends of letter paths need to vary depending on which other letters they are next to. </p><p>At first I tried calling out particular “problem” pairs and writing rules for them specifically but, in the end, I added a single number to the beginning and end of each path which states if it: </p><ul data-rte-list="default"><li><p>Cannot join another letter (0)</p></li><li><p>Joins another letter around the base line (1)</p></li><li><p>Joins another letter just above the base line (2)</p></li><li><p>Joins another letter around the x-height (3)</p></li></ul><p>Here are some examples:</p>
</div><div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_86058">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png" data-image-dimensions="693x470" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png" width="693" height="470" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4c290819-b063-4d0a-b083-804b7036d783/join+heights+-+0.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_87117">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png" data-image-dimensions="693x470" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png" width="693" height="470" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/daa228f1-48f9-4594-88b9-8e696cf0d176/join+heights+-+1.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div></div><div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_91110">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png" data-image-dimensions="693x448" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png" width="693" height="448" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/962005c8-c702-417a-9d26-7d0ed69ad611/join+heights+-+2.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_92175">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png" data-image-dimensions="693x448" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png" width="693" height="448" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/9b0091c0-e647-4800-83e7-33c6419eb13e/join+heights+-+3.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div></div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_83859">

<p>Each letter path now looks something like this, note the single digits at the beginning and end:</p>




















  
  



</div><div data-block-type="23" id="block-yui_3_17_2_1_1715610756359_82950">
<pre><code>[0,{x:12.2,y:13.2},{x:13.5,y:11.0},{x:6.2,y:8.4},{x:1.1,y:13.0},{x:1.8,y:19.0},{x:7.0,y:23.4},{x:15.2,y:23.6},{x:18.4,y:22.1},1],</code></pre></div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715752260728_99684">

<p>I tested all of the letter pairs, like so:</p>




















  
  



</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715752260728_104149">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png" data-image-dimensions="3164x3165" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png" width="3164" height="3165" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/8e7c8f57-54e5-4aae-8d94-41c9826d11de/letterpairs.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715752260728_106462">

<p>Here you can also see some of the variation, created by having multiple paths for each letter and also by editing the letters depending on what letter they are next to. Ideally I would have at least 5 or 6 options of paths for each letter but there is a balance to be drawn against file size. </p>




















  
  



</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_99517">
  <h3>Creating words</h3><p>When a word is created: </p><ul data-rte-list="default"><li><p>a basic path is chosen for each letter from the 2-3 different options for that character.</p></li><li><p>the information about the ends of the paths are passed to the adjacent letters<br>(the letter paths all have to be chosen first as, in some cases, different path options for the same letter have different end points)</p></li><li><p>The basic paths are adjusted in response to their neighbours. <br>E.g. if the previous letter’s end height is 2, remove 1 point from the start of this path, or if the next letter’s start height is 1, add an additional point in a certain location. </p></li></ul><p>The adjustment functions can get a bit complicated, for example here is the one for the letter q:</p>
</div><div data-block-type="23" id="block-yui_3_17_2_1_1715610756359_131824">
<pre><code>// ip = path 
// pc = previous char's end info 
// nc = next char's start info 
// n = index of path that was chosen for this letter
adjust: (ip, pc, nc, n) =&gt; {
  // randomly adds in a break at the end for 70% of this letter
  if (rand() &lt; 0.7 ) ip.splice(-1, 1, 0);

   // if [2] was chosen for this path from the 4 options, 
   if (n &lt; 2) {

     // Swap out first two points for a different point if the previous char ends at 3
     if (pc == 3) ip.splice(1, 2, {x:10,y:12});

     // Otherwise, as long as it's not a 0, add a point at the beginning
     else if (pc &gt; 0) ip.splice(1, 0, {x:10,y:20});
  }

  // If there's no break (0) between this character and the next
  if (nc &gt; 0 &amp;&amp; ip[ip.length-1] != 0){
    // Swap out the last two points for a different one 
    ip.splice(-3, 2, {x:16,y:34})
  }
}</code></pre></div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_133889">

<p>But often they are fairly short, here is the one for the letter n:</p>




















  
  



</div><div data-block-type="23" id="block-yui_3_17_2_1_1715610756359_138034">
<pre><code>adjust: (ip, pc, nc) =&gt; {
  // If the next letter starts at a 3, randomly either create a break or move the last point 
  if (nc == 3) rand() &lt; 0.3 ? ip.splice(-1, 1, 0) : ip.splice(-2, 1, {x:17,y:23.8})
}</code></pre></div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_140399">

<p>Next the basic paths for all the letters are joined together. While doing this, it ignores 1, 2 and 3’s in the letter paths but whenever there is a 0 it creates a break by starting a new path. </p>




















  
  



</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_152142">

<p>After curving those paths, turning them into varied width shapes, and adding some jittering around using Perlin noise, here’s what the cursive writing looks like.</p>




















  
  



</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_153981">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png" data-image-dimensions="1274x1284" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png" width="1274" height="1284" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4555438f-8f38-4571-8fc5-fd1baafcf559/Cursive+text.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715610756359_155793">

<p>An article about generating these sentences will be coming soon, you can sign up to my newsletter to get a heads up when it’s out. </p>




















  
  



</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715688327725_64868">

<p>For fun, here’s a side by side comparison of the coded handwriting run through my plotter, next to my actual handwriting. </p>




















  
  



</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715610756359_159523">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg" data-image-dimensions="2794x1946" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg" width="2794" height="1946" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/fc2b53c5-879a-4dd0-b568-6957eff56693/handwriting+comparison.jpg?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715688327725_67491">
  <h3>WHAT DOES IT WEIGH?</h3><p>The letter class for the block print was 9.7kb. The letter class for the cursive handwriting (after being run through a minifier) is currently 26.1kb. </p><p>This one is larger because there are multiple paths for each letter as well as the function for adjust the points to meet the letter’s neighbours, but I have made some other savings. I’m sure further savings could be made - I am not a code golf wizard but I have a few ideas. </p><p>For example, currently the letters are designed around a default font size of 20 and then resized, meaning lots of the points are defined as e.g. x: 14.5, but if I switch this to a default size of 200, the point could be defined as 145, removing one character (the decimal place). I need to make this change carefully, so it’s on the To Do list for later. </p>
</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715752260728_44848">
  <h3>How I’m Using it</h3><p>The main purpose for this handwriting is for the titles, labels and scribbled notes on these <a href="https://x.com/amygoodchild/status/1770433357777973273" target="_blank">diagrams</a> I’ve been working on. But I’m also have a lot of fun playing around with the text itself. </p><p>One of the best things about having encoded paths instead of using a font is that I can mess around with those paths. Changing the position of letters and changing the thickness across an individual letter and so on. </p>
</div><div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715752260728_54208">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png" data-image-dimensions="2352x2352" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png" width="2352" height="2352" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/0ffc0b11-4c4f-4fa1-be64-2d8f1f43878b/handwriting-text-1.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715752260728_56521">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png" data-image-dimensions="2352x2352" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png" width="2352" height="2352" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/18f126d9-96c3-4835-9fbe-d1f80a328d89/handwriting-text-3.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div></div><div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715752260728_61966">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png" data-image-dimensions="2352x2352" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png" width="2352" height="2352" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/4ef17597-1b2d-4d59-8ee3-eb412188c50f/handwriting-text-6.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715752260728_67735">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png" data-image-dimensions="2352x2352" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png" width="2352" height="2352" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/1289f9d9-f244-4e4f-9a86-a72dd2ab4339/handwriting-text-5.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div></div><div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715752260728_69016">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png" data-image-dimensions="2352x2352" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png" width="2352" height="2352" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/72f0234a-05dc-44d5-aa0e-cfe012d6e4e2/handwriting-text-4.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715752260728_55380">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png" data-image-dimensions="2352x2352" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png" width="2352" height="2352" sizes="(max-width: 640px) 100vw, (max-width: 767px) 50vw, 50vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/30b1f065-edb6-4cfe-ae9c-4eb898256c42/handwriting-text-2.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div></div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1715951246919_69251">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png" data-image="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png" data-image-dimensions="2352x2352" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png" width="2352" height="2352" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5f33cddd6aff255aabb0c6cd/de2fe388-555d-49b2-84ac-c06d3e3002cf/handwriting-text-10.png?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
      
        </figure>
      

    </div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715951246919_82022">

<p>Next up I’m going to be incorporating the handwriting into those diagrams, but I’m definitely intending to come back and create something focused on the text itself as well, as I’m finding it super beautiful and there’s a lot of possibility there!</p>




















  
  



</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1715752260728_120438">
  <p>😍 Enjoyed this article? I’d love it if you could <a href="https://x.com/amygoodchild/status/1791475650190102834" target="_blank">give a boost on Twitter</a>, thanks!</p><p>✨ And don’t forget to sign up for my weekly newsletter, filled with updates. </p>
</div></div>
  
</article>

</div>

  
</article>


          

          
            
              

            
          
        
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI doppelgänger experiment – Part 1: The training (119 pts)]]></title>
            <link>https://julienposture.substack.com/p/the-ai-doppelganger-experiment-part</link>
            <guid>40407927</guid>
            <pubDate>Sun, 19 May 2024 16:19:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://julienposture.substack.com/p/the-ai-doppelganger-experiment-part">https://julienposture.substack.com/p/the-ai-doppelganger-experiment-part</a>, See on <a href="https://news.ycombinator.com/item?id=40407927">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><em>&nbsp;‘And only&nbsp;one&nbsp;for birthday presents, you know.&nbsp;There’s glory for you!’&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</em></p><p><em>&nbsp;‘I don’t know what you mean by “glory”,’ Alice said.</em></p><p><em>&nbsp;‘Humpty Dumpty smiled contemptuously. ‘Of course, you don’t–till I tell you.&nbsp;I meant “there’s a nice knock-down argument for you!”’</em></p><p><em>&nbsp;‘But “glory” doesn’t mean “a nice knock-down argument”, Alice objected.</em></p><p><em>&nbsp;‘When&nbsp;I&nbsp;use a word,’ Humpty Dumpty said in rather a scornful tone, ‘it means just what I choose it to mean–neither more nor less.’</em></p><p><em>&nbsp;‘The question is,’ said Alice, ‘whether you&nbsp;can&nbsp;make words mean different things–that’s all.’</em></p><p><em>‘The question is,’ said Humpty Dumpty, ‘which is to be master–that’s all’</em></p><p>This passage of Alice Through the Looking Glass is often cited in philosophy of language classes to introduce the idea of language as a social activity that rely on shared meaning. If the same word means different things every time we use it, or different things for different speakers, how could we communicate at all? As I’m researching the social life of images through the fields of illustration, design, law, machine learning, and so on, I’m often reminded of Humpty Dumpty. While illustrators, designers, lawyers, and computer scientists might all use the same words —images, style, art— they rarely share the same meaning. But unlike Alice and Humpty Dumpty, instead of having a conversation about what they mean when they use a word, the people talking about AI and art continue to yap at each other endlessly in mutual misunderstanding. The goal of course, is not mutual understanding, but power, or as Humpty Dumpty puts it, to decide “which is to be master”. Without ever addressing the linguistic nature of the debate, proponents and opponents of generative AI are indeed fighting for the power to define what “image”, “style”, “art” mean.</p><p><span>Communication relies on shared language, and when this communication is about what we see, it also relies on shared ways of seeing. Yet, different people learn to see the same things differently and these ways of seeing, as </span><a href="https://www.youtube.com/watch?v=0pDE4VX_9Kk" rel="">John Berger pointed out</a><span>, are socially constructed. What does an artist see when they look at their style? How does it differ from the ways machine learning models see styles? And which way of seeing has more power?</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png" width="48" height="34.272" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:357,&quot;width&quot;:500,&quot;resizeWidth&quot;:48,&quot;bytes&quot;:6882,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5ab196f5-1f2c-41a5-b45a-906a99c0e667_500x357.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>To start answering these questions, I interviewed computer scientists working on generative AI about “style transfer”, the process of extracting the stylistic features of an image to apply them to another. Both as an illustrator and an anthropologist, I was fascinated by the idea. When I ask illustrators to describe their style, they usually go on long narrative tangents about what they love, how they grew up, who they know, etc. Style is a deeply lived category, a repository of experiences and influences that resists simple definitions. I wondered how computer scientists could create systems that translated this in mathematical vectors that could be extracted from a mere image. How they defined “style”, how they trained a model to pick up on it, and how much of our own perception and the ways we learn to look at images, are all very exciting questions to me.</p><p><span>The main takeaway of these (ongoing) interviews so far has been that computer scientists are interested in style not in itself, but for the challenges that it confronts machine learning models with. Training a model to transfer the style of an image to another involves for that model to take a whole entity, the image, and divides it in layers that are not pre-given in the data itself. In this case, the layers are the </span><em>denotational</em><span> content of the image, what it represents, and its </span><em>stylistic</em><span>, or formal treatment. This is an impressive feat for a machine learning model to be able to achieve this. But the very notion that artworks can be separated in these two aspects, denotational and stylistic, is itself an old idea that can be traced to early twentieth century </span><a href="http://arthistoryresources.net/baroque-art-theory-2013/wolfflin-renaissance-baroque.html" rel="">art historian Heinrich Wölfflin (1864-1945)</a><span> work on formalism. For him, it was important to study artwork from a formal point of view, without considering their subject.</span></p><p><span>We rarely hear about the historical ideas that shape the thinking of technologists, that’s the whole point. Technology is meant to be innovative, disruptive, and the lobbying of AI company is in part of cultural lobbying to erase the historicity of their ideas in order to </span><a href="https://www.effectivealtruism.org/articles/cause-profile-long-run-future" rel="">constantly situate their work in the future.</a><span> So how does an early twentieth century idea about art shows up in AI work today?</span></p><p>As often, it shows up in the unquestioned parts of the process of training a model. Computer scientists have often told me how none of them really has a working definition of style they consciously encode in a model:</p><blockquote><p><em>“It's not very easy to define exactly what style is. But then you have these papers that say ‘Okay, what we're doing is, without defining exactly what style means we're showing you a method that can take an image, which we'll say we'll copy the style from, and we can transplant this style onto another image’. And you get a result that you look at and intuitively you say, ‘Okay, it's another object in the same style’ even if you don't know how to define its parts.”</em></p></blockquote><p>The success or failure of style transfer relies not only on an algorithm, but on the “intuitive” perception of a beholder. This means both machine and human ways of seeing are co-constitutive of the resulting model. Another computer scientist shared that when training their own model, they worked with a designer whose job was to evaluate the quality of the output of a style transfer. The success of the model here became entangled with the taste of the perceiver parsing through outputs, selecting the best, i.e. the output that fit best our culturally specific idea of style. Far from an emergent inexplicable feature of the model, separating content from style is most often the result of tinkering, subjective perception, selection, and more tinkering, all steeped in very human ideas about what images are made of. So, how can I study this very subjective perception?</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png" width="48" height="34.272" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:357,&quot;width&quot;:500,&quot;resizeWidth&quot;:48,&quot;bytes&quot;:6882,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4499739e-b13c-4d83-ac0f-8fb0da4e3a51_500x357.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Ways of seeing are a slippery object of study. Unlike the linguistic anthropologists who trained me to study language, I (realistically) cannot record and transcribe “looks” like I would with words. Instead, I’m chasing ways of seeing in various corners of multiple meaning-making practices, from the moodboard designers create to the feedback illustrators get from art directors, from the captioning of a dataset to the prompting of a model. As AI companies are </span><a href="https://www.theatlantic.com/technology/archive/2024/01/ai-transparency-meta-microsoft/677022/" rel="">not exactly as open as they promised to be</a><span>, I’ve decided that instead of spending months negotiating access to secret spaces protected by NDAs, I might as well take the experimental road, and train a model myself. &nbsp;</span></p><p><span>To do this, I contacted an amazing PhD researcher in Human-Computer Interaction at the University of Columbia, Sitong, to work together on this. Working with another researcher was not only a way for me to ensure I would have someone who can explain to me what’s going on, but also to work with someone with the same ethical concerns I have about working with machine learning and people. Together we created an experimental protocol that would allow illustrators to participate and train the model on their own work in a safe environment, and get the opportunity to generate images themselves, thus placing human and machine in interaction to answer the question: </span><em>What is generated in the encounter between human and machine ways of seeing?</em></p><p>Here's how we went about setting up a Human-Computer Interaction (HCI) experiment, within the larger context of my ongoing ethnographic fieldwork with New York creatives, and some insights we gathered along the way.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png" width="48" height="34.272" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:357,&quot;width&quot;:500,&quot;resizeWidth&quot;:48,&quot;bytes&quot;:6882,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F03c1617a-df51-4751-b6bf-19e0a89ed3ca_500x357.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Firstly, Sitong found the simplest and safest way to fine-tune a model and ended up choosing to do so with a </span><a href="https://www.youtube.com/watch?app=desktop&amp;v=7m522D01mh0&amp;ab_channel=kasukanra" rel="">LoRa, or Low Rank Adaptation</a><span>. One of the main limitations of regular models like Stable Diffusion or MidJourney is that one cannot maintain a subject through several generations. This means that the description of a character would lead to wildly different results from one output to the next. LoRa was initially created to teach a model to learn a concept, for example a given character, that could then be generated consistently through many images. Interestingly, the model has been since then widely used to teach models not to recognize the subject of an image, but its style, leading to the now infamous case of </span><a href="https://waxy.org/2022/11/invasive-diffusion-how-one-unwilling-illustrator-found-herself-turned-into-an-ai-model/" rel="">Hollie Mengert’s work getting ripped off</a><span>.</span></p><p><span>Once the LoRa was installed and set up, we had to feed it our first dataset, a.k.a 30 of my own precious illustrations. But the images alone are not enough for the model to learn to see their style, I had to caption each illustration describing </span><em>what</em><span> it was showing, leaving unwritten </span><em>how</em><span> it looked. Captioning a dataset is a process fraught with arbitrary choices that while seemingly “intuitive”, was for me a very complex task to wrap my mind around. The goal of captioning is to teach the model that everything described in the caption will be the replaceable features of a dataset, what will be flexibly generated by prompting it later. This means that everything else, that is not described in captions, must be retained as something to apply to all output. As one Youtuber explains it, captioning is therefore a powerful semiotic action:</span></p><blockquote><p><em>“[…] because the more details you input the more precise the model is going to be. […]If you have only 20 images it is going to be pretty fast but if you have more images that's really gonna take a while. I really wish that we had some sort of software that could do it automatically but as of right now the best tool is human eyes.”</em></p></blockquote><p>So much for an automation.</p><p>My favourite way to think about this problem of captioning is Gregory Bateson’s boot. Bateson was a famous anthropologist, known for his interdisciplinary work spanning biology, psychiatry and social sciences and his founding role in the field of cybernetics in the 1950s. He was interested in the patterns that govern our lives, and the relation between parts and whole. To teach this to his student, he would use this figure:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png" width="322" height="304.26666666666665" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ebafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:652,&quot;width&quot;:690,&quot;resizeWidth&quot;:322,&quot;bytes&quot;:36357,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Febafd4d9-cdd6-4a06-bea9-c116b2b4e80c_690x652.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Bateson Boot, reproduced from Mind and Nature, 1979</figcaption></figure></div><p>He would ask the students to describe it, and then compare the results. I’m not going to describe all the answers as you can watch a short video focusing on the exercise here: </p><div id="youtube2-bM5N9RDfPco" data-attrs="{&quot;videoId&quot;:&quot;bM5N9RDfPco&quot;,&quot;startTime&quot;:&quot;389s&quot;,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/bM5N9RDfPco?start=389s&amp;rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p>As different students describe the figure using different strategies (the way it looks, the way it can be broken into parts, etc.), Bateson tells us that “we can get a certain amount of agreement about what's really there but we cannot get an agreement about ways of describing it and we use in the description a whole mess of concepts of intervening variables and mentionables to get our stuff across.” In other words, when using words and concepts to “describe” something we see, we inevitably impose on this object the limitations that come with description.</p><p>A dataset is like a massive Bateson boot, full of complex images (expressed as numerical vectors) tied to simple words (expressed as numerical vectors). In this pairing between the sprawling complexity of our visual world and its neat description by words, much is lost. As I’m sitting at my laptop trying to come up for a caption for each of my illustration, I panic. My brain can’t seem to be able to precisely locate where meaning happens in my work, nor can it separate in neat layers the images I’ve made between style and content. The message is the medium. I try to think about how I work, my relationship to a brief, the process of sketching and the role of language in it, maybe there’s in the process of making an image the key to understand why it’s so hard to describe it.</p><p>I realize that, despite working with texts (briefs, articles, etc.), there’s always a moment when I let go of language. I usually read the text once, and then work with whatever afterimage I have left of its meaning. Part of that meaning gets transferred in the things I draw, maybe a corpse and a bookshelf because the text is about corpses in literature.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png" width="1456" height="566" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:566,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:809437,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18bd5685-50ca-4388-a86d-1d4458e1d749_4018x1563.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The long suffering cadaver - The New York Times Book Review</figcaption></figure></div><p><span>But also, the way I choose to depict this corpse is a cut out, which I only realize as I’m sketching, because the art director suggested a two-image layout which allows for a sense of time, a sequence. Suddenly the corpse is not represented </span><em>in</em><span> the image but cut out </span><em>from</em><span> it, and only becomes the subject of the second image. All of this happens silently, keeping language at bay, to allow visual meaning-making to happen on its own. We’ll return to language later, as I get feedback from the art director and we fine tune the final image, but that process of making images from text is in large part non-linguistic, and therefore hardly contained by the linearity of neither captioning nor prompting.</span></p><p>In taking the relationship between words and images as a simple 1:1 ratio, machine learning models sacrifice much of what illustration is really about, i.e. the space between text and image. This is not to say they do a bad job, they just do a very different one than illustrators do. They see images in a very different ways illustrators see them. The division between words and images is not the only one that is being flattened in most discussions of generative AI, another crucial one is that between images and people.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png" width="48" height="34.272" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/af0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:357,&quot;width&quot;:500,&quot;resizeWidth&quot;:48,&quot;bytes&quot;:6882,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf0ee00f-2cb6-4002-b6da-bc13863b6b6f_500x357.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Once she trained the model on my work, Sitong and I meet up on Zoom. She shares her screen and shows me a series of 10 images of a woman wearing a cap. Put together on a spectrum, the images shows how the original image (a photorealistic AI image of the woman) gradually turns into a Julien Posture version of itself.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png" width="1456" height="247" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:247,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2670033,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8132c89-0b0f-4c69-9d3e-78a6c9a9c9cf_4000x678.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Progression of the model learning my style</figcaption></figure></div><p><span>As I’m contemplating this Cronenberg-like transformation of the image, I can’t help to be struck by the triviality of my own work. There’s something confronting in facing a computational doppelgänger, something akin to the uncanny valley. I’m surprised at how much this affects me, even though my whole schtick is to be reflexive and critical about style, what surprises me the most is that even though the output if “objectively” a failure</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-144663529" href="https://julienposture.substack.com/p/the-ai-doppelganger-experiment-part#footnote-1-144663529" target="_self" rel="">1</a></span><span>, I see myself in it. But maybe what I see in the generation, what I find actually disturbing, is the part of my work that has already been objectified and commodified, the parts of my style I spent years making digestible for clients, consistent for social media, and reproducible for easy production.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png" width="324" height="486" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:768,&quot;width&quot;:512,&quot;resizeWidth&quot;:324,&quot;bytes&quot;:488606,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd7cdd15c-99c4-4ab6-9f60-e8e8b22867f6_512x768.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Early result from the model</figcaption></figure></div><p>As I extend the invitations to various illustrators, some categorically refuse, seeing one’s life work so easily reproduced would be too challenging they tell me. I understand. I went in this experiment confident about the distance I have with my own style, only to be shaken by the uncanniness of existing in a computational form. Is this the way people see my work? A mere surface, a bundle of shapes and colours slapped onto any idea.</p><p><span>On April 30</span><sup>th</sup><span>, </span><a href="https://www.youtube.com/watch?v=-C0dU2OV5F4&amp;ab_channel=PBSNewsHour" rel="">British artist FKA Twigs testified in front of US senate</a><span> about her experience and thoughts about AI. Her testimony weaves in the same breath issues of personhood and economic livelihood, identity and intellectual property, essence and superficiality:</span></p><blockquote><p>“I am here because my music, my dancing, my acting, the way that my body moves in front of a camera and the way that my voice resonates through a microphone is not by chance; they are essential reflections of who I am. My art is the canvas on which I paint my identity and the sustaining foundation of my livelihood. It is the essence of my being.”</p></blockquote><p>As many artists navigating the AI waters, Twigs must negotiate a delicate balance. On the one hand she mobilizes deeply emotional registers showing the inherent entanglement of her identity with her work, the “essence of [her] being”, on the other hand, she must clarify she’s not a luddite, and that her argument is mostly a rational, economic one. In fact, later she reveals having trained her own model in her likeness “to extend my reach and handle my online social media interactions, whilst I continue to focus on my art from the comfort and solace of my studio.”</p><p><a href="https://julienposture.substack.com/p/phd-journal-1" rel="">As I’ve written before</a><span>, illustration is a practice that turns artists into sort of hybrids between people and images. Illustrators style is both a very personal thing and a valuable commodity, and as illustrators’ images circulate online, fragments of themselves do too. Returning to the court, this ambiguity is best captured by Adobe’s proposition of the FAIR act (Federal Anti-Impersonation Right) which is a blend of copyright and right of publicity, conceptualizing style mimicry as a form of impersonation (see what I mean by hybrid between people and image?).</span></p><p>In lawsuits between AI companies and artists, these differences become flattened in the supposedly neutral gaze of the law. Machine learning models are constantly personified, the processes in their black box likened to that of artistic inspiration, meanwhile, artistic processes are mechanized, made simple and linear. The AI doppelgänger experiment is a way to zoom in on these tensions and ask, with artists, what is the difference between a person-created image, and a machine-generated one? And can we qualify this difference in ways that are productive for technological, legal, and social conversations about AI and creativity?</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png" width="48" height="34.272" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:357,&quot;width&quot;:500,&quot;resizeWidth&quot;:48,&quot;bytes&quot;:6882,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2b27f482-dec3-4ece-bddb-b8e88b6416d3_500x357.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>A notification chimes on my phone, it’s D., an illustrator who will be testing the model soon, “when are you finally gonna copy my art — Can’t wait to see it”. The model has now been trained enough times, it’s ready to be used with prompts. D. will be the first one to try it. I’m looking forward to it. I’m also a bit worried. Will this be a triggering experience for the illustrators I work with? Or will this be vindicating? What will be generated in the encounter between human and machine ways of seeing?</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Make timelapses easily using FFmpeg (134 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=40407526</link>
            <guid>40407526</guid>
            <pubDate>Sun, 19 May 2024 15:24:12 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=40407526">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="40408852"><td></td></tr>
            <tr id="40408345"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40408345" href="https://news.ycombinator.com/vote?id=40408345&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Nice, thanks! I tried using ffmpeg for a minor video editing task I had a few months ago - just a cut, crop, rescale, and volume adjust. I've tried a few of the mainstream GUI video editing tools, and IMO, they all have incomprehensible UIs, are way too bloated, and usually far too expensive for what I'm trying to do. FFmpeg may not be dead simple, but I find it much easier to skim the command line flag list to figure out how to do what I want. And once I do, I can save down a handful of useful sets of flags and refer to them next time. Cheers to ffmpeg, one of the kings of FOSS! If you ever feel the need to do any kind of video conversion or editing, definitely try to do it in ffmpeg first.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="40408757"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40408757" href="https://news.ycombinator.com/vote?id=40408757&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Indeed. I find it baffling how hard it is to just make lightweight edits to videos on Windows. At a bare minimum I would like to clip a video, or crop or change audio tracks. My cheat sheet of ffmpeg commands still remains to be the easiest way for me to do this.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="40409236"><td></td></tr>
            <tr id="40408744"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40408744" href="https://news.ycombinator.com/vote?id=40408744&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><p><span>To be fair, pulling out a professional video editor for small changes is like learning emacs to edit some config files. You don't need 99% of the features.<p>Also as an FYI to everyone, FFmpeg does support nVidia GPU acceleration but it might not be enabled in your build. So check if you use it a lot.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="40409152"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_40409152" href="https://news.ycombinator.com/vote?id=40409152&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Probably true, but ffmpeg seems to have a ton of features too. It seems to me that CLI apps are inherently better at not distracting you with things you don't need. A CLI flag that you don't use is invisible outside of the man pages, not so for a menu or toolbar of a zillion options with names and icons you don't understand.</span></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="40408620"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40408620" href="https://news.ycombinator.com/vote?id=40408620&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Davinci Resolve has a free (as in beer) version that is quite capable and easy to use, even as someone who'd only used iMovie before. The only problem is that "how to do X in Davinci Resolve" has been taken over by slop.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="40409138"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_40409138" href="https://news.ycombinator.com/vote?id=40409138&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Davinci Resolve is actually the first thing that came to mind on the subject of, okay it's free, that's nice, but I can't for the life of me figure out how to do anything in it. I suppose it's not necessarily their fault that the search results for how to do basic things are garbage, but I guess an advantage of CLI apps is how-to results for them don't seem to attract nearly as much SEOified clickbait.</span></p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="40409019"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40409019" href="https://news.ycombinator.com/vote?id=40409019&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>back when computers were hard, tips like this were gold. but these days,
for for a well trod/documented thing like ffmpeg,
asking ChatGPT to make the ffmpeg command you want works really well, eg "give me ffmpeg to make a video from a series of jpegs" and iterate from there.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="40409249"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40409249" href="https://news.ycombinator.com/vote?id=40409249&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Please don't let this line of thinking put you (the reader) off sharing tips. Here we now have a thread containing other information we may not have thought to ask anyone/thing about, discussion, history, etc.</span></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="40408878"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40408878" href="https://news.ycombinator.com/vote?id=40408878&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><p><span>Where FFMPEG really shines is stabilising video.<p>Unfortunately not all versions have "vidstab".</p><p>ffmpeg -i "$1" -vf vidstabdetect=shakiness=5:show=1  dummy.avi</p><p>ffmpeg -i "$1" -vf yadif, format=yuv420p, vidstabtransform=zoom=2:optzoom=0:crop=black -c:v libx264 -b:a 32k  stabilized264.mp4</p><p>Yesterweek's shaky video shot from a kayak: <a href="https://youtu.be/4pM0VeH4NE0?si=H2qTJfcvis3QmFlj" rel="nofollow">https://youtu.be/4pM0VeH4NE0?si=H2qTJfcvis3QmFlj</a>
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="40409023"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40409023" href="https://news.ycombinator.com/vote?id=40409023&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><p><span>If you really wish to install all the available options, you can run:<p>brew install homebrew-ffmpeg/ffmpeg/ffmpeg $(brew options homebrew-ffmpeg/ffmpeg/ffmpeg --compact)
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                  <tr id="40409221"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40409221" href="https://news.ycombinator.com/vote?id=40409221&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><p><span>Is there a variant that encodes ProRes lossless?<p>I usually open them up in a new project just to create a lossless input video to work with in After Effects, and use that (if I use image sequence directly, DaVinci Resolve acts in weird ways).</p><p>ffmpeg might ease that AE part.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="40409183"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40409183" href="https://news.ycombinator.com/vote?id=40409183&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Maybe someone should collect all those commands and create a website or a gist that list them with search possible. They are gems !</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="40407826"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40407826" href="https://news.ycombinator.com/vote?id=40407826&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><p><span>ffmpeg is such a great tool!<p>Be aware that <i>-pattern_type glob</i> is not supported on Windows, though, iirc. A workaround is to name your jpegs with consecutive numbers (not necessarily starting at 0) and use a pattern with a counter placeholder in it instead.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="40408208"><td></td></tr>
                <tr id="40408566"><td></td></tr>
                  <tr id="40408025"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40408025" href="https://news.ycombinator.com/vote?id=40408025&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><p><span>Obligatory humor: <a href="https://youtu.be/9kaIXkImCAM" rel="nofollow">https://youtu.be/9kaIXkImCAM</a><p>Note of support: ffmpeg supported many of the transcoding needs of my former employer back in 2007, being a "friendly" tool to the team. Yes it had/s issue. Being open source gave us a lifeline, to be able to fix our own stuff, and build up our video and audio live streaming and video watching white label service.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="40408317"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40408317" href="https://news.ycombinator.com/vote?id=40408317&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>wsl --cd=%cd% ffmpeg -framerate 30 -pattern_type glob -i '*.JPG' -c:v libx264 -r 30 -pix_fmt yuv420p timelapse.mp4</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="40407905"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40407905" href="https://news.ycombinator.com/vote?id=40407905&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Hmm, I wonder why `-pattern_type glob` doesn't work on Windows. Perhaps it is something that could easily be programmed into the source code?</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="40408151"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_40408151" href="https://news.ycombinator.com/vote?id=40408151&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>If I were yo guess, it might be using the GNU libc (or compatible) glob functionality under the hood.</span></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="40408421"><td></td></tr>
                  <tr id="40408813"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40408813" href="https://news.ycombinator.com/vote?id=40408813&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Does this add any interframe blur or are you controlling that based on exposure time ? Very important for quality Timelapse's</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="40408023"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40408023" href="https://news.ycombinator.com/vote?id=40408023&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><p><span>I recently wrote a blog post about doing this to create timelapses of Rimworld colonies. I didn’t realize -pattern_type glob didn’t work on windows though… I’ll have to update it.<p>Also, an assumption in your command is that all the images are the same aspect ratio. If they’re not, you can use this to dynamically pad it out with black bars on either size:</p><p>‘-vf "scale=1920:1080:force_original_aspect_ratio=decrease:eval=frame,pad=1920:1080:-1:-1:eval=frame"’</p><p><a href="https://mpeyton.com/posts/rimworld_timelapse_ffmpeg/" rel="nofollow">https://mpeyton.com/posts/rimworld_timelapse_ffmpeg/</a>
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="40408529"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40408529" href="https://news.ycombinator.com/vote?id=40408529&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>I'd recommend Da Vinci Resolve for making timelapses. It performs really well and let's you scrub through before rendering anything which lets you clip just the part that you need. Plus you get the benefit of high export quality which can be fiddly with ffmpeg.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="40409303"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40409303" href="https://news.ycombinator.com/vote?id=40409303&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>Resolve is insanely heavyweight for such a simple task. Those video editor UIs are incredibly hard to understand for people not using them every day.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="40408723"><td></td></tr>
                <tr id="40409033"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_40409033" href="https://news.ycombinator.com/vote?id=40409033&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>there are a bunch of flags to get exactly right in order to get it to give you a high quality image out. there are wrappers to do this more easily for you, ffmpeg is a low level tool.</span></p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="40408972"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40408972" href="https://news.ycombinator.com/vote?id=40408972&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>I looked into using ffmpeg to “compress” video podcasts by lowering the framerate a lot, but it didn’t seem to do as much as I thought (about 50% size reduction). The theory was that a video podcast is mostly talking heads with an occasional chart on the screen, so you really only need a frame every second, or five seconds.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="40409006"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40409006" href="https://news.ycombinator.com/vote?id=40409006&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>AV1 exceeds at these type of videos. It's why so many anime people use it.<p>Try encoding the video to AV1 with OPUS audio. You'll get ridiculous gainz!</p><p>My command is:</p><pre><code>    $ffmpegPath -i $_.FullName -r 23.976 -vf scale=1280:720 -c:v libsvtav1 -pix_fmt yuv420p10le -crf 30 -preset 10 -g 300 -c:a libopus -b:a 96k -ac 2 -c:s copy -map 0 $destPath</code></pre></span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="40409059"><td></td></tr>
                        <tr id="40408801"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_40408801" href="https://news.ycombinator.com/vote?id=40408801&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><p><span>I wanted to print out one of those flipbooks I had as a kid, where the frames are printed and as the pages are flipped it looks like a movie.<p>Is that something ffmpeg could do?</p><p>Is there any good resource for recipes like these?
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="40408995"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_40408995" href="https://news.ycombinator.com/vote?id=40408995&amp;how=up&amp;goto=item%3Fid%3D40407526"></a></center>    </td><td><br><div>
                  <p><span>try<pre><code>    ffmpeg -ss 00:01:00 -i input.avi -t 30 -vf "fps=1,scale=320:-1:flags=lanczos" output_%04d.jpg
</code></pre>
00:01:00 is where to start the flip book, 30 is thirty seconds worth, and 1 fps is how many frames per second. this'll make output_XX.jpg from the Avi which you can then print</span></p></div></td></tr>
        </tbody></table></td></tr>
                  </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Swarming Proxima Centauri: Picospacecraft Swarms over Interstellar Distances (140 pts)]]></title>
            <link>https://astrobiology.com/2024/05/swarming-proxima-centauri-coherent-picospacecraft-swarms-over-interstellar-distances.html</link>
            <guid>40407228</guid>
            <pubDate>Sun, 19 May 2024 14:33:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://astrobiology.com/2024/05/swarming-proxima-centauri-coherent-picospacecraft-swarms-over-interstellar-distances.html">https://astrobiology.com/2024/05/swarming-proxima-centauri-coherent-picospacecraft-swarms-over-interstellar-distances.html</a>, See on <a href="https://news.ycombinator.com/item?id=40407228">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                                            <figure>
                                    <img src="https://astrobiology.com/wp-content/uploads/2024/05/Swarming-Proxima-Centauri.png" alt="Swarming Proxima Centauri: Coherent Picospacecraft Swarms Over Interstellar Distances">
                                                                            <figcaption>
                                            <div>
                                                <p>
                                                                                                            Graphic depiction of Swarming Proxima Centauri: Coherent Picospacecraft Swarms Over Interstellar Distances
Thomas Eubanks                                                                                                    </p>
                                                                                            </div>
                                        </figcaption>
                                                                    </figure>
                                                        
<p>Tiny gram-scale interstellar probes pushed by laser light are likely to be the only technology capable of reaching another star this century. We presuppose availability by mid-century of a laser beamer powerful enough (~100-GW) to boost a few grams to relativistic speed, lasersails robust enough to survive launch, and terrestrial light buckets (~1-sq.km) big enough to catch our optical signals. Then our proposed representative mission, around the third quarter of this century, is to fly by our nearest neighbor, the potentially habitable world Proxima b, with a large autonomous swarm of 1000s of tiny probes.</p>



<p>Given extreme constraints on launch mass (grams), onboard power (milliwatts), and coms aperture (centimeters to meters), our team determined in our work over the last 3 years that only a large swarm of many probes acting in unison can generate an optical signal strong enough to cross the immense distance back to Earth. The 8-year round-trip time lag eliminates any practical control by Earth, therefore the swarm must possess an extraordinary degree of autonomy, for example, in order to prioritize which data is returned to Earth. Thus, the reader will see that coordinating the swarming of individuals into an effective whole is the dominant challenge for our representative mission to Proxima Centauri b. Coordination in turn rests on establishing a mesh network via low-power optical links and synchronizing probes’ on-board clocks with Earth and with each other to support accurate position-navigation-timing (PNT).</p>



<p>Our representative mission begins with a long string of probes launched one at a time to ~0.2c. After launch, the drive laser is used for signaling and clock synchronization, providing a continual time signal like a metronome. Initial boost is modulated so the tail of the string catches up with the head (“time on target”). Exploiting drag imparted by the interstellar medium (“velocity on target”) over the 20-year cruise keeps the group together once assembled. An initial string 100s to 1000s of AU long dynamically coalesces itself over time into a lens-shaped mesh network #100,000 km across, sufficient to account for ephemeris errors at Proxima, ensuring at least some probes pass close to the target.</p>



<p>A swarm whose members are in known spatial positions relative to each other, having state-of-the-art microminiaturized clocks to keep synchrony, can utilize its entire population to communicate with Earth, periodically building up a single short but extremely bright contemporaneous laser pulse from all of them. Operational coherence means each probe sends the same data but adjusts its emission time according to its relative position, such that all pulses arrive simultaneously at the receiving arrays on Earth. This effectively multiplies the power from any one probe by the number N of probes in the swarm, providing orders of magnitude greater data return.</p>



<p>A swarm would tolerate significant attrition en route, mitigating the risk of “putting all your eggs in one basket,” and enabling close observation of Proxima b from multiple vantage points. Fortunately, we don’t have to wait until mid-century to make practical progress – we can explore and test swarming techniques now in a simulated environment, which is what we propose to do in this work. We anticipate our innovations would have a profound effect on space exploration, complementing existing techniques and enabling entirely new types of missions, for example picospacecraft swarms covering all of cislunar space, or instrumenting an entire planetary magnetosphere. Well before mid-century we foresee a number of such missions, starting in Earth or lunar orbit, but in time extending deep into the outer Solar system. For example, such a swarm could explore the rapidly receding interstellar object 1I/’Oumuamua or the solar gravitational lens. These would both be precursors to the ultimate interstellar mission, but also scientifically valuable in their own right.</p>



<p>— Thomas Eubanks Space Initiatives, Inc.:</p>



<p><em><strong><a href="https://www.nasa.gov/general/niac-2024-selections/" target="_blank" rel="noreferrer noopener">2024 NIAC Phase I Selection</a>, NASA</strong></em></p>



<p>Astrobiology, Interstellar,</p>
                        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Compilers for free with weval (133 pts)]]></title>
            <link>https://bernsteinbear.com/blog/weval/</link>
            <guid>40406194</guid>
            <pubDate>Sun, 19 May 2024 11:33:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bernsteinbear.com/blog/weval/">https://bernsteinbear.com/blog/weval/</a>, See on <a href="https://news.ycombinator.com/item?id=40406194">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p><a href="https://cfallin.org/">Chris Fallin</a> came and gave a talk to the Northeastern
<a href="https://prl.khoury.northeastern.edu/">Programming Research Laboratory</a>
last month. He talked about his work on a new project called
<a href="https://github.com/cfallin/weval">weval</a>, a WebAssembly partial evaluator (and
then helped me write this post!).</p>

<p>Partial evaluation is neat. In short, it’s all about taking an existing
program, modifying it to hold some of its inputs as constants, and then letting
the compiler/optimizer go hog wild on it. The result is still a program—not a
value—and it’s usually faster than the original program.</p>

<p>The usual small example is the power function. If you have a function that takes
two arguments, <code>x</code> and <code>y</code>, and returns <code>x^y</code>:</p>

<div><pre><code><span>int</span> <span>power</span><span>(</span><span>int</span> <span>x</span><span>,</span> <span>int</span> <span>y</span><span>)</span> <span>{</span>
  <span>int</span> <span>result</span> <span>=</span> <span>1</span><span>;</span>
  <span>for</span> <span>(</span><span>int</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>y</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
    <span>result</span> <span>*=</span> <span>x</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>result</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>If you partially evaluate this function with respect to <code>y</code> at <code>y = 5</code>, you get
a new function that takes one argument, <code>x</code>, and returns <code>x^5</code>:</p>

<div><pre><code><span>int</span> <span>power_5</span><span>(</span><span>int</span> <span>x</span><span>)</span> <span>{</span>
  <span>int</span> <span>result</span> <span>=</span> <span>1</span><span>;</span>
  <span>for</span> <span>(</span><span>int</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>5</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
    <span>result</span> <span>*=</span> <span>x</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>result</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>Now, to you, this might not look that different from the original function. But
to an optimizer, it is a new world of opportunity. The optimizer can unroll the
loop and remove the conditional:</p>

<div><pre><code><span>int</span> <span>power_5</span><span>(</span><span>int</span> <span>x</span><span>)</span> <span>{</span>
  <span>return</span> <span>x</span> <span>*</span> <span>x</span> <span>*</span> <span>x</span> <span>*</span> <span>x</span> <span>*</span> <span>x</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>weval does that for entire WebAssembly modules. WebAssembly modules that are
normally much bigger than a small <code>power</code> function. You might want to use it
if, for example, your WebAssembly module is an interpreter. Imagine a world
where you have compiled a runtime such as SpiderMonkey or CPython to
WebAssembly. You could then run your Python or JavaScript programs on the
WebAssembly runtime, but they would be slower than if you had compiled them
directly to WebAssembly. And even if you compiled the JS/Python directly to
Wasm, it would probably be slow unless your compiler did some fancy static
analysis. This is where weval comes in.</p>

<h2 id="enter-weval">Enter weval</h2>

<p>SpiderMonkey and CPython are both huge. Instead, we’re going to do a little
demo of a tiny interpreter that I wrote with Chris. Our interpreter doesn’t do
much—local variables, an accumulator, arithmetic, and branching. But it’s
enough to show off the performance boosts that come with weval.</p>

<div><pre><code><span>#define FOR_EACH_INSTRUCTION(V)                                                \
  V(LOAD_IMMEDIATE)                                                            \
  V(STORE_LOCAL)                                                               \
  V(LOAD_LOCAL)                                                                \
  V(PRINT)                                                                     \
  V(PRINTI)                                                                    \
  V(JMPNZ)                                                                     \
  V(INC)                                                                       \
  V(DEC)                                                                       \
  V(ADD)                                                                       \
  V(HALT)
</span></code></pre></div>

<p>It’s designed as a little loop that reads the next instructions and dispatches
with a <code>switch</code>. It’s not the fastest design<sup id="fnref:computed-goto" role="doc-noteref"><a href="#fn:computed-goto" rel="footnote">1</a></sup>, but that’s okay.</p>

<div><pre><code><span>uword</span> <span>Execute</span><span>(</span><span>uword</span> <span>*</span><span>program</span><span>)</span> <span>{</span>
  <span>// ...</span>
  <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
    <span>Instruction</span> <span>op</span> <span>=</span> <span>(</span><span>Instruction</span><span>)</span><span>program</span><span>[</span><span>pc</span><span>++</span><span>];</span>
    <span>switch</span> <span>(</span><span>op</span><span>)</span> <span>{</span>
    <span>case</span> <span>LOAD_IMMEDIATE</span><span>:</span> <span>{</span>
      <span>uword</span> <span>value</span> <span>=</span> <span>program</span><span>[</span><span>pc</span><span>++</span><span>];</span>
      <span>accumulator</span> <span>=</span> <span>(</span><span>Object</span><span>)</span><span>value</span><span>;</span>
      <span>break</span><span>;</span>
    <span>}</span>
    <span>case</span> <span>STORE_LOCAL</span><span>:</span> <span>{</span>
      <span>uword</span> <span>idx</span> <span>=</span> <span>program</span><span>[</span><span>pc</span><span>++</span><span>];</span>
      <span>LOCAL_AT_PUT</span><span>(</span><span>idx</span><span>,</span> <span>accumulator</span><span>);</span>
      <span>break</span><span>;</span>
    <span>}</span>
    <span>case</span> <span>LOAD_LOCAL</span><span>:</span> <span>{</span>
      <span>uword</span> <span>idx</span> <span>=</span> <span>program</span><span>[</span><span>pc</span><span>++</span><span>];</span>
      <span>accumulator</span> <span>=</span> <span>LOCAL_AT</span><span>(</span><span>idx</span><span>);</span>
      <span>break</span><span>;</span>
    <span>}</span>
    <span>case</span> <span>PRINT</span><span>:</span> <span>{</span>
      <span>const</span> <span>char</span> <span>*</span><span>msg</span> <span>=</span> <span>(</span><span>const</span> <span>char</span> <span>*</span><span>)</span><span>program</span><span>[</span><span>pc</span><span>++</span><span>];</span>
      <span>printf</span><span>(</span><span>"%s"</span><span>,</span> <span>msg</span><span>);</span>
      <span>break</span><span>;</span>
    <span>}</span>
    <span>case</span> <span>PRINTI</span><span>:</span> <span>{</span>
      <span>printf</span><span>(</span><span>"%"</span> <span>PRIu64</span><span>,</span> <span>accumulator</span><span>);</span>
      <span>break</span><span>;</span>
    <span>}</span>
    <span>case</span> <span>HALT</span><span>:</span> <span>{</span>
      <span>return</span> <span>accumulator</span><span>;</span>
    <span>}</span>
    <span>case</span> <span>JMPNZ</span><span>:</span> <span>{</span>
      <span>uword</span> <span>offset</span> <span>=</span> <span>program</span><span>[</span><span>pc</span><span>++</span><span>];</span>
      <span>if</span> <span>(</span><span>accumulator</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span>
        <span>pc</span> <span>=</span> <span>offset</span><span>;</span>
      <span>}</span>
      <span>break</span><span>;</span>
    <span>}</span>
    <span>case</span> <span>INC</span><span>:</span> <span>{</span>
      <span>accumulator</span><span>++</span><span>;</span>
      <span>break</span><span>;</span>
    <span>}</span>
    <span>case</span> <span>DEC</span><span>:</span> <span>{</span>
      <span>accumulator</span><span>--</span><span>;</span>
      <span>break</span><span>;</span>
    <span>}</span>
    <span>case</span> <span>ADD</span><span>:</span> <span>{</span>
      <span>uword</span> <span>idx1</span> <span>=</span> <span>program</span><span>[</span><span>pc</span><span>++</span><span>];</span>
      <span>uword</span> <span>idx2</span> <span>=</span> <span>program</span><span>[</span><span>pc</span><span>++</span><span>];</span>
      <span>accumulator</span> <span>=</span> <span>LOCAL_AT</span><span>(</span><span>idx1</span><span>)</span> <span>+</span> <span>LOCAL_AT</span><span>(</span><span>idx2</span><span>);</span>
      <span>break</span><span>;</span>
    <span>}</span>
    <span>// ...</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre></div>

<p>Using this bytecode, we can write a simple program that adds up all the numbers
from 1 to 100 million:</p>

<div><pre><code><span>enum</span> <span>{</span>
  <span>result</span> <span>=</span> <span>0</span><span>,</span>
  <span>loopc</span> <span>=</span> <span>1</span><span>,</span>
<span>};</span>
<span>uword</span> <span>program</span><span>[]</span> <span>=</span> <span>{</span>
  <span>// result = 0</span>
  <span>LOAD_IMMEDIATE</span><span>,</span> <span>0</span><span>,</span>
  <span>STORE_LOCAL</span><span>,</span> <span>result</span><span>,</span>
  <span>// loopc = 100_000_000</span>
  <span>LOAD_IMMEDIATE</span><span>,</span> <span>100000000</span><span>,</span>
  <span>STORE_LOCAL</span><span>,</span> <span>loopc</span><span>,</span>

  <span>// loop:</span>
  <span>// result += loopc</span>
  <span>ADD</span><span>,</span> <span>result</span><span>,</span> <span>loopc</span><span>,</span>
  <span>STORE_LOCAL</span><span>,</span> <span>result</span><span>,</span>
  <span>// loopc--</span>
  <span>LOAD_LOCAL</span><span>,</span> <span>loopc</span><span>,</span>
  <span>DEC</span><span>,</span>
  <span>STORE_LOCAL</span><span>,</span> <span>loopc</span><span>,</span>
  <span>// if loopc != 0, jump to loop</span>
  <span>JMPNZ</span><span>,</span> <span>8</span><span>,</span>

  <span>// print result</span>
  <span>PRINT</span><span>,</span> <span>(</span><span>uword</span><span>)</span><span>"Result: "</span><span>,</span>
  <span>LOAD_LOCAL</span><span>,</span> <span>result</span><span>,</span>
  <span>PRINTI</span><span>,</span>
  <span>PRINT</span><span>,</span> <span>(</span><span>uword</span><span>)</span><span>"</span><span>\n</span><span>"</span><span>,</span>
  <span>HALT</span><span>,</span>
<span>};</span>
</code></pre></div>

<p>We can compile this interpreter program with any C or C++ compiler, feed the
interpreter the bytecode, and it will print the result after about 350ms:</p>

<div><pre><code><span>$</span><span> </span>c++ <span>-O2</span> peval.cc <span>-o</span> peval.out
<span>$</span><span> </span>./peval.out
<span>Result: 5000000050000000
</span><span>$</span><span>
</span></code></pre></div>

<p>But let’s assume you want to sandbox this program with WebAssembly. Thankfully,
there’s this project called <a href="https://github.com/webAssembly/wasi-sdk">wasi-sdk</a>
that provides near drop-in replacements for Clang that target WebAssembly. We
can compile the interpreter with wasi-sdk and run it with <code>wasmtime</code> or any
other WebAssembly runtime that provides a WASI polyfill<sup id="fnref:polyfill" role="doc-noteref"><a href="#fn:polyfill" rel="footnote">2</a></sup>. This runs
in about 530ms:</p>

<div><pre><code><span>$</span><span> </span>/opt/wasi-sdk/bin/clang++ <span>-O2</span> peval.cc <span>-o</span> peval.normal.wasm
<span>$</span><span> </span>wasmtime peval.normal.wasm
<span>Result: 5000000050000000
</span><span>$</span><span>
</span></code></pre></div>

<p>But really what we wanted all along was to deploy the program—not the
interpreter too, <em>just</em> the program—in the sandbox. We can do that by
smushing the bytecode and the interpreter together with weval. This runs in
about 40ms:</p>

<div><pre><code><span>$</span><span> </span>/opt/wasi-sdk/bin/clang++ <span>-O2</span> <span>-DDO_WEVAL</span> <span>-I</span> include peval.cc <span>-o</span> peval.wasm
<span>$</span><span> </span>weval weval <span>-i</span> peval.wasm <span>-o</span> peval.wevaled.wasm <span>-w</span>
<span>$</span><span> </span>wasmtime peval.wevaled.wasm
<span>Result: 5000000050000000
</span><span>$</span><span>
</span></code></pre></div>

<p>First of all: let’s step back. We had an interpreter written in C++ that took
350ms to run. We made it a little slower (530ms) by compiling it to
WebAssembly. Then we got a <strong>8.5x speedup</strong> by using weval. That’s nuts. That’s
probably close to what we would get if we hand-wrote a little compiler for our
bytecode machine, but I did not have to write a compiler.</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Time (ms)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>C++</td>
      <td>350</td>
    </tr>
    <tr>
      <td>WASI</td>
      <td>530</td>
    </tr>
    <tr>
      <td>WASI+weval</td>
      <td><strong>40</strong>  (!!)</td>
    </tr>
  </tbody>
</table>

<p>Check out an <a href="https://asciinema.org/a/EesYdO0GFxkTKyAJu2vuVXjTS">asciicast</a> if
you want to feel that difference.</p>

<p>You might notice that I added some sneaky flags like <code>-DDO_WEVAL</code> and <code>-I
include</code> in there. What’s going on?</p>

<h2 id="specializing-the-interpreter">Specializing the interpreter</h2>

<p><strong>Big picture:</strong> give the interpreter function access to constant bytecode.</p>

<p>Well, while weval works <em>correctly</em> on any combination of WebAssembly module
and its input, it works <em>best</em> when you give it a little help and tell it what
data is constant. In order to do that, we pre-initialize the WebAssembly module
using a project called <a href="https://github.com/bytecodealliance/wizer">wizer</a>. It
gives you, the programmer, hooks to set up some memory before turning the
running state back into a WebAssembly module. Let’s look at a diagram of the
situation as it is right now:</p>

<figure>

<figcaption>This is too many levels of nesting</figcaption>
</figure>

<p>Right now, at run-time, the interpreter loads the bytecode and runs it. The
bytecode is not known ahead of time, so the interpreter has to be general.</p>

<p>In order to specialize the interpreter, we do three steps <em>at WebAssembly
module initialization time</em>:</p>

<ol>
  <li>Load the bytecode</li>
  <li>Create a specialized version of the interpreter function with constant
arguments</li>
  <li>Run constant propagation and other compiler passes on the function</li>
</ol>

<p>In this example, we know the bytecode is constant. We can tell weval this by
using one of its helper intrinsics. In this case, we create a copy of the
<code>Execute</code> function with constant arguments (the <code>program</code>). Now we have two
functions: <code>Execute</code> and <code>ExecuteSpecialized</code>. All of this happens in the
<code>init</code> function:</p>

<div><pre><code><span>template</span> <span>&lt;</span><span>bool</span> <span>IsSpecialized</span><span>&gt;</span>
<span>uword</span> <span>Execute</span><span>(</span><span>uword</span> <span>*</span><span>program</span><span>)</span> <span>{</span>
    <span>// ...</span>
<span>}</span>

<span>#ifdef DO_WEVAL
</span><span>Object</span> <span>(</span><span>*</span><span>ExecuteSpecialized</span><span>)(</span><span>uword</span> <span>*</span><span>)</span> <span>=</span> <span>0</span><span>;</span>

<span>void</span> <span>init</span><span>()</span> <span>{</span>
  <span>uword</span> <span>result</span> <span>=</span> <span>0</span><span>;</span>
  <span>uword</span> <span>loopc</span> <span>=</span> <span>1</span><span>;</span>
  <span>weval</span><span>::</span><span>weval</span><span>(</span><span>&amp;</span><span>ExecuteSpecialized</span><span>,</span> <span>&amp;</span><span>Execute</span><span>&lt;</span><span>true</span><span>&gt;</span><span>,</span> <span>/*func_id=*/</span><span>123</span><span>,</span>
               <span>weval</span><span>::</span><span>SpecializeMemory</span><span>&lt;</span><span>uword</span> <span>*&gt;</span><span>(</span><span>program</span><span>,</span> <span>sizeof</span> <span>program</span><span>));</span>
<span>}</span>

<span>WIZER_INIT</span><span>(</span><span>init</span><span>);</span>
<span>WEVAL_DEFINE_GLOBALS</span><span>();</span>
<span>#endif
</span>
<span>int</span> <span>main</span><span>(</span><span>int</span> <span>argc</span><span>,</span> <span>char</span> <span>**</span><span>argv</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>ExecuteSpecialized</span><span>)</span> <span>{</span>
    <span>ExecuteSpecialized</span><span>(</span><span>nullptr</span><span>);</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>Execute</span><span>&lt;</span><span>false</span><span>&gt;</span><span>(</span><span>program</span><span>);</span>
  <span>}</span>
<span>}</span>
</code></pre></div>

<p>Now that the code has been loaded and marked constant, the picture looks more
like this:</p>

<figure>

</figure>

<p>While the code is constant, weval isn’t magic. It won’t modify control flow, by
default, except simplifying branches that become constant (it doesn’t even know
what an interpreter is!).</p>

<p>In order to start making <code>ExecuteSpecialized</code> faster, we have to drop little
hints into the interpreter for weval to pick up. We want to actually specialize
the control flow—make the control flow in the bytecode become control flow in
the new function itself—so we tell weval about the PC to let it expand out
the code.</p>

<h2 id="modifying-the-interpreter">Modifying the interpreter</h2>

<p><strong>Big picture:</strong> unroll the loop by specializing on the program counter.</p>

<p>We can start off by telling weval what variable to use as a <em>specialization
context</em>. In this case, since we know that the bytecode is constant, we can
specialize on the <code>pc</code>—the program counter. This lets weval completely unroll
the interpreter loop.</p>

<div><pre><code><span>uword</span> <span>Execute</span><span>(</span><span>uword</span> <span>*</span><span>program</span><span>)</span> <span>{</span>
  <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
    <span>// ...</span>
    <span>switch</span> <span>(</span><span>op</span><span>)</span> <span>{</span>
      <span>// ...</span>
    <span>}</span>
    <span>weval</span><span>::</span><span>update_context</span><span>(</span><span>pc</span><span>);</span>
  <span>}</span>
<span>}</span>
</code></pre></div>

<p>After running weval on the bundled module, and letting weval unroll the loop,
the picture looks like this:</p>

<figure>

</figure>

<p>This means that from this point forward, we have used weval to turn our
interpreter into a compiler. There are only two optimizations so
far—unrolling the loop and constant propagation—but they are very
effective. The result is a fully WebAssembly module with no interpreter and no
bytecode.</p>

<p>Weval’s compiler passes are not magic. They are the same passes that any
compiler would run on your code. They can unroll the interpreter loop and turn
bytecode into straight-line WebAssembly code. But that code still has local
variable writes push and local variable reads and all the other overhead of the
interpreter. So there’s more to be done…</p>

<h2 id="but-what-if-we-modified-it-more">But what if we modified it more?</h2>

<p><strong>Big picture:</strong> unroll interpreter local variables into WebAssembly local
variables by telling weval where they are.</p>

<p>Memory can be hard to reason about in a compiler. Weval isn’t a whole program
optimizing compiler and might not be able to prove that a memory location (in
this case, the locals array) never escapes or aliases something else. But we,
the interpreter authors, know that. So we can add more hints.</p>

<p>Right now, <code>LOCAL_AT</code> and <code>LOCAL_AT_PUT</code> are macros that read and write to the
locals array:</p>

<div><pre><code><span>#define LOCAL_AT(idx) (locals[idx])
#define LOCAL_AT_PUT(idx, val) (locals[idx] = val)
</span></code></pre></div>

<p>That’s all well and good for the interpreter, but it’s not great for the
compiled code. What we really want is to give weval the ability to reason about
each memory location—each local index—separately as an SSA value.</p>

<p>In order to do that, we use weval intrinsics: <code>weval_read_reg</code> and
<code>weval_write_reg</code>. For maximum flexibility, we have a couple of macros that
switch between the two:</p>

<div><pre><code><span>#ifdef DO_WEVAL
#define LOCAL_AT(idx) (IsSpecialized ? weval_read_reg(idx) : locals[idx])
#define LOCAL_AT_PUT(idx, val)                                                 \
  if (IsSpecialized) {                                                         \
    weval_write_reg(idx, val);                                                 \
  } else {                                                                     \
    locals[idx] = val;                                                         \
  }
#else
#define LOCAL_AT(idx) (locals[idx])
#define LOCAL_AT_PUT(idx, val) (locals[idx] = val)
#endif
</span></code></pre></div>

<p>Now, weval can reason about each local variable separately and they get
eventually compiled to normal WebAssembly locals.</p>

<h2 id="wrapping-up">Wrapping up</h2>

<p>The big idea here is that it’s possible to incrementally unravel an interpreter
into a compiler by specializing on constant data and then doing normal compiler
passes. The more you can specialize at build-time, the faster the resulting
generated code will be.</p>

<p>Check out the code in my <a href="https://github.com/tekknolagi/weval">already old fork of
weval</a>. It includes surprise benchmarks of
Wasm JITs in different JS runtimes, too!</p>

<h2 id="looking-forward">Looking forward</h2>

<p>Chris gave some more detail about how weval works in <a href="https://bernsteinbear.com/assets/img/weval_slides.pdf">this
talk</a> (PDF), including a description of how the
interpreter function is actually combined with the bytecode. The main idea is
to use the PC values as a “context” in a context-sensitive dataflow analysis,
so regular constant propagation will see the PC value and opcode for just one
interpreter loop iteration, rather than the union of all of them (as a static
analysis normally would). There are a bunch of fiddly details to make it work
well, and Chris also plans to write a blog post covering weval and its
application to SpiderMonkey soon.</p>

<p>Also, our interpreter is tiny and not very interesting on its own. It’s only
useful to explain some weval concepts to you. But the same principles apply to
much larger interpreters, too! There’s SpiderMonkey, yes, and the same could
also probably be done for CPython, the main Python runtime. CPython even has
support for being compiled to WebAssembly already!</p>

<p>Imagine compiling Python directly down to WebAssembly… maybe coming soon?</p>

<h2 id="wilder-ideas">Wilder ideas</h2>

<p>CPython already has support for vectorcall function pointers. This is a way to
add a JIT compiler in a portable way. We could also maybe use this to turn
weval into a Wasm JIT for CPython.</p>

<h2 id="similar-projects">Similar projects</h2>

<p><a href="https://github.com/BuildIt-lang/buildit">BuildIt</a> is a similar project for C++
that takes a library approach.</p>


        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Transforming a QLC SSD into an SLC SSD (197 pts)]]></title>
            <link>https://theoverclockingpage.com/2024/05/13/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance/?lang=en</link>
            <guid>40405578</guid>
            <pubDate>Sun, 19 May 2024 09:30:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://theoverclockingpage.com/2024/05/13/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance/?lang=en">https://theoverclockingpage.com/2024/05/13/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance/?lang=en</a>, See on <a href="https://news.ycombinator.com/item?id=40405578">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="wtr-content" data-bg="transparent" data-fg="#dd1616" data-width="8" data-mute="" data-fgopacity="0.85" data-mutedopacity="0.5" data-placement="top" data-placement-offset="0" data-content-offset="0" data-placement-touch="top" data-placement-offset-touch="0" data-transparent="1" data-shadow="1" data-touch="0" data-non-touch="1" data-comments="0" data-commentsbg="#dd1616" data-location="page" data-mutedfg="#dd1616" data-endfg="#dd1616" data-rtl="0">
<p>In today’s article, we’re embarking on something unprecedented! We’ll guide you step by step through the process of transforming an SSD equipped with QLC NANDs into an SLC SSD, significantly enhancing its durability and overall performance!</p>
<h3 id="especificacoes-do-ssd">Especification of the DUT SSD:</h3>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/SSD-Lineup-US.png?ssl=1"><img decoding="async" width="499" height="578" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/SSD-Lineup-US.png?resize=499%2C578&amp;ssl=1" alt="SSD Lineup US" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 2" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/SSD-Lineup-US.png?w=499&amp;ssl=1 499w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/SSD-Lineup-US.png?resize=259%2C300&amp;ssl=1 259w" sizes="(max-width: 499px) 100vw, 499px" data-recalc-dims="1"></a></figure></div>
<p>The SSD I chose is a <strong>Crucial BX500</strong>, which we’ve tested numerous times both on our website and on my YouTube channel.</p>
<h3 id="softwares-do-ssd"><strong>ATENTION: BEFORE YOU CONTINUE READING</strong>!!!</h3>
<p>Firstly, this procedure is safer than overclocking, but it still requires caution. Only proceed if you are genuinely interested, as I cannot be held responsible if any steps are executed incorrectly. I will explain as clearly as possible to minimize any misunderstandings.</p>
<p>This voids the warranty of any SSD. <strong>AND REMEMBER, WHEN FLASHING THE FIRMWARE TO THE SSD, ALL DATA WILL BE ERASED</strong>, so be sure to back up your devices before proceeding with anything.</p>
<h3 id="unboxing"><strong>NECESSARY TOOLS</strong></h3>
<p>To perform this procedure, it was necessary to use an adapter SATA to USB 3.0 adapter with the<strong> Jmicron JMS578 Bridge Chip</strong> model.</p>
<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/theoverclockingpage.com\/2024\/05\/13\/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance\/?lang=en&quot;}">
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="540" data-id="32602" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?resize=720%2C540&amp;ssl=1" alt="Ferramenta SSD Card Opener 4" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 3" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?resize=1200%2C900&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?resize=800%2C600&amp;ssl=1 800w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2023/06/Ferramenta-SSD-Card-Opener-4.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="720" data-id="53404" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=720%2C720&amp;ssl=1" alt="image 2" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 4" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?w=1000&amp;ssl=1 1000w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=768%2C768&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=1200%2C1200&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=800%2C800&amp;ssl=1 800w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=600%2C600&amp;ssl=1 600w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=400%2C400&amp;ssl=1 400w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=200%2C200&amp;ssl=1 200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/01/image-2.png?resize=160%2C160&amp;ssl=1 160w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
</figure>
<p>In addition to, we also need a clamp to perform the short on the ROM/Safe Mode terminals on the SSD’s PCB.</p>
<h3 id="unboxing">Technical Specs</h3>
<p>Before we move on to the tutorial, let’s analyze this SSD a little further.</p>
<p><strong>Controller</strong><br></p>
<p>The SSD controller is responsible for handling all data management tasks, including over-provisioning and garbage collection, among other background functions. Naturally, this contributes to the SSD’s overall performance.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/11/ssd-crucial-bx500-500gb-controlador.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="332" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/11/ssd-crucial-bx500-500gb-controlador.jpg?resize=720%2C332&amp;ssl=1" alt="ssd crucial bx500 500gb controlador" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 5" data-recalc-dims="1"></a></figure></div>
<p>In this project, the SSD utilizes the <strong>Silicon Motion</strong> controller model <strong>SM2259XT2</strong>, which is a new variant of the <strong>SM2259XT</strong>.</p>
<p>In this case, it’s a <strong>single-core</strong> controller, meaning it has one main core responsible for managing the NANDs, with a <strong>32-bit ARC</strong> architecture, not <strong>ARM </strong>as we’re accustomed to. This controller has an operating frequency up to <strong>550 MHz</strong>, but as we’ll see in the following image, in this project, it was operating at <strong>437.5 MHz</strong>.</p>
<p>This controller also supports up to <strong>2 communication channels</strong> with a bus speed of up to <strong>800 MT/s</strong>, where each of these channels supports up to <strong>8 Chip Enable</strong> commands, allowing the controller to communicate with up to <strong>16 Dies</strong> simultaneously using the <strong>interleaving</strong> technique.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111225.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="496" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111225.png?resize=720%2C496&amp;ssl=1" alt="Screenshot 2024 03 02 111225" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 6" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111225.png?w=844&amp;ssl=1 844w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111225.png?resize=300%2C207&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111225.png?resize=768%2C530&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>What was different from its predecessor, the <strong>SM2259XT</strong>, which had <strong>4 channels</strong> and <strong>4 C.E</strong>. supporting a maximum of <strong>16 dies</strong>.</p>
<p><strong>DRAM&nbsp;Cache or H.M.B.</strong><br></p>
<p>Every top-of-the-line SSD aiming to deliver consistent high performance requires a buffer to store its mapping tables (<em><strong>Flash Translation Layer</strong></em> or <em><strong>Look-up table</strong></em>). This enables better random performance and responsiveness.</p>
<p>Being a DRAM-Less SATA SSD, it doesn’t support Host Memory Buffer (HMB) technology.</p>
<p><strong>NAND Flash</strong><br></p>
<p>Regarding its storage integrated circuits, the 500GB SSD has 2 NAND flash chips labeled “<strong>NY240</strong>,” which when decoded yield the NANDs “<strong>MT29F2T08GELCEJ4-QU:C</strong>” from the American manufacturer <strong>Micron</strong>, model <strong>N48R Media Grade</strong>. In this case, they are 1Tb (128GiB) dies containing 176 layers of data and a total of 195 gates, resulting in an array efficiency of 90.2%.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/11/ssd-crucial-bx500-500gb-nand-flash.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="332" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/11/ssd-crucial-bx500-500gb-nand-flash.jpg?resize=720%2C332&amp;ssl=1" alt="ssd crucial bx500 500gb nand flash" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 7" data-recalc-dims="1"></a></figure></div>
<p>In this SSD, each NAND Flash contains 2 dies with 1Tb of density, totaling 256GB per NAND, resulting in a total of 500GB. They communicate with the controller using a bus speed of <strong>262.5 MHz</strong> (<strong>525 MT/s</strong>), which is considerably below what the NANDs are capable of. These <strong>N48R </strong>dies are capable of operating at <strong>800 MHz</strong> (<strong>1600 MT/s</strong>).</p>
<p>There are several reasons why they might be running so low, such as the manufacturer opting to reduce power consumption and heat. Or even this batch of NAND Flash not being able to pass Micron’s Quality Control at higher frequencies and ends up being sold cheaper or perhaps has a lower endurance as well, which generally results in lower NAND costs, enabling SSDs like this to have a very low price.</p>
<p><strong>SOFTWARE UTILIZED FOR THIS PROJECT</strong></p>
<p>As this is a <strong>Silicon Motion</strong> controller, we will be using a mass production tool from them, known as <strong>MPTools</strong>. It’s worth noting that these softwares are <strong>NOT</strong> provided by the manufacturers but are LEAKED by individuals with access, and posted on Russian or Chinese forums.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-1.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="190" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-1.png?resize=720%2C190&amp;ssl=1" alt="image 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 8" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-1.png?w=1017&amp;ssl=1 1017w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-1.png?resize=300%2C79&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-1.png?resize=768%2C203&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>For this project, we will use the “<strong>SMI SM2259XT2 MPTool FIMN48 V0304A FWV0303B0</strong>“, which needs to be compatible with both the controller and the NAND Flash, and this tool allows us to do that.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-2.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="379" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-2.png?resize=720%2C379&amp;ssl=1" alt="image 2" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 9" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-2.png?resize=1024%2C539&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-2.png?resize=300%2C158&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-2.png?resize=768%2C404&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-2.png?resize=1200%2C632&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-2.png?w=1366&amp;ssl=1 1366w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Before making any modifications, we need to retrieve certain parameters from the SSD to preserve them. These values in the software are a preset from another SSD that may have different parameters. We need to obtain the following parameters:</p>
<ul>
<li>Flash IO Driving with it’s subivisons</li>
<li>Flash Control Driving</li>
<li>Flash DQS/Data Driving</li>
</ul>
<p>These parameters use hexadecimal values and must be changed according to the desired speed that we will configure for the SSD.</p>
<p>We also have many more parameters such as:</p>
<ul>
<li>Control ODT (On-die Termination)</li>
<li>Flash ODT (On-die Termination)</li>
<li>Schmitt Window Trigger</li>
</ul>
<p>To get these parameters, we need to go to the main screen of <strong>MPTools </strong>as shown below:</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-3.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="456" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-3.png?resize=720%2C456&amp;ssl=1" alt="image 3" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 10" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-3.png?w=1014&amp;ssl=1 1014w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-3.png?resize=300%2C190&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-3.png?resize=768%2C486&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>And then we’ll click on “Scan,” which will scan all compatible disks in the system:</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-4.png?ssl=1"><img loading="lazy" decoding="async" width="259" height="245" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-4.png?resize=259%2C245&amp;ssl=1" alt="image 4" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 11" data-recalc-dims="1"></a></figure></div>
<p>After this, the SSD will be shown on port 1 if everything has gone smoothly so far, remembering that it’s not necessary to put the SSD in <strong>Safe Mode/ROM Mode</strong> yet.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-5.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="216" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-5.png?resize=720%2C216&amp;ssl=1" alt="image 5" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 12" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-5.png?w=1009&amp;ssl=1 1009w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-5.png?resize=300%2C90&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-5.png?resize=768%2C230&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Now we double-click on this Blue Name “<strong>Ready (FW: M6CR061, MN48R)</strong>“, which, when clicked twice, will open this new screen with SSD information.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-6.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="495" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-6.png?resize=720%2C495&amp;ssl=1" alt="image 6" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 13" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-6.png?w=843&amp;ssl=1 843w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-6.png?resize=300%2C206&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-6.png?resize=768%2C527&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Then we should click on both Card mode and CID Settings to see all the parameters that the SSD comes with from the factory.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-7.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="495" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-7.png?resize=720%2C495&amp;ssl=1" alt="image 7" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 14" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-7.png?w=843&amp;ssl=1 843w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-7.png?resize=300%2C206&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-7.png?resize=768%2C527&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>After noting these parameters, we also see here the speed of the controller and the NAND, which for the sake of a fair comparison, we will leave at these same frequencies.</p>
<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/theoverclockingpage.com\/2024\/05\/13\/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance\/?lang=en&quot;}">
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111225-Copy-1.png?ssl=1"><img loading="lazy" decoding="async" width="330" height="273" data-id="55104" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111225-Copy-1.png?resize=330%2C273&amp;ssl=1" alt="Screenshot 2024 03 02 111225 Copy 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 15" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111225-Copy-1.png?w=330&amp;ssl=1 330w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111225-Copy-1.png?resize=300%2C248&amp;ssl=1 300w" sizes="(max-width: 330px) 100vw, 330px" data-recalc-dims="1"></a></figure>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111303-Copy-1.png?ssl=1"><img loading="lazy" decoding="async" width="325" height="268" data-id="55102" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111303-Copy-1.png?resize=325%2C268&amp;ssl=1" alt="Screenshot 2024 03 02 111303 Copy 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 16" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111303-Copy-1.png?w=325&amp;ssl=1 325w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-02-111303-Copy-1.png?resize=300%2C247&amp;ssl=1 300w" sizes="(max-width: 325px) 100vw, 325px" data-recalc-dims="1"></a></figure>
</figure>
<p><strong>Applying Configurations</strong></p>
<p>Initially, we should click on the “Edit Config” button in the top right corner, and the default password is “space 2x,” which is literally ” “.</p>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-06-142821.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="517" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-06-142821.png?resize=720%2C517&amp;ssl=1" alt="Screenshot 2024 03 06 142821" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 17" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-06-142821.png?w=997&amp;ssl=1 997w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-06-142821.png?resize=300%2C215&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/Screenshot-2024-03-06-142821.png?resize=768%2C552&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
<p>After enabling the options to configure the SSD, let’s start by giving a name to this project. In the “<strong>Model Name:</strong>” field, we’ll enter the name that the SSD will have. This one was named “<strong>SSD SLC Test</strong>.”</p>
<p>Next, we’ll add a <strong>tag </strong>to this new firmware. In the red rectangle number 3, we’ll go to the “<strong>Firmware Version:</strong>” field and enter whatever we desire. I used “<strong>SSD-SLC</strong>” as an example.</p>
<p>Next, we arrive at one of the most crucial parts, the section on signal integrity, as all these other parameters are sensitive and must be adjusted precisely.</p>
<p>Let’s start with the top 2 parameters, “<strong>Flash Control Driving (hex)</strong>” and “<strong>Flash DQS/Data Driving (Hex)</strong>“. As we saw in the previous images, these parameters come with values of 66 in hexadecimal, so we will keep them. These 2 parameters can be found in the images below:</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-8.png?ssl=1"><img loading="lazy" decoding="async" width="329" height="270" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-8.png?resize=329%2C270&amp;ssl=1" alt="image 8" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 18" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-8.png?w=329&amp;ssl=1 329w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-8.png?resize=300%2C246&amp;ssl=1 300w" sizes="(max-width: 329px) 100vw, 329px" data-recalc-dims="1"></a></figure></div>
<p>After configuring these 2, let’s move on to the frequencies. As we can see in the image below, we take these 2 values and set them. The CPU in this software came by default at 500 MHz while the NAND at 250 MHz. The NAND will increase the clock slightly and the CPU will decrease, I will not overclock here for a fair comparison. Next, we’ll leave the Output driving at 03H, which is the signal closest to 04H that the SSD had.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-10.png?ssl=1"><img loading="lazy" decoding="async" width="327" height="269" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-10.png?resize=327%2C269&amp;ssl=1" alt="image 10" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 19" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-10.png?w=327&amp;ssl=1 327w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-10.png?resize=300%2C247&amp;ssl=1 300w" sizes="(max-width: 327px) 100vw, 327px" data-recalc-dims="1"></a></figure></div>
<p>Next, we have the last 3 settings to resolve: <strong>Flash ODT</strong>, <strong>Control ODT</strong>, and <strong>Schmitt Window.</strong> In this case, we apply the values circled in red in each of these parameters in their respective fields.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-16.png?ssl=1"><img loading="lazy" decoding="async" width="327" height="271" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-16.png?resize=327%2C271&amp;ssl=1" alt="image 16" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 20" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-16.png?w=327&amp;ssl=1 327w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-16.png?resize=300%2C249&amp;ssl=1 300w" sizes="(max-width: 327px) 100vw, 327px" data-recalc-dims="1"></a></figure></div>
<p>Good, here we have reached the end of another stage of this procedure. And we begin the next following step, which is the modification of the software. Because by default, this version of MPTools would not support this modification.</p>
<p>Initially, we need to go to the directory of this program in the “<strong>UFD_MP</strong>” folder located in the root directory.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-19.png?ssl=1"><img loading="lazy" decoding="async" width="661" height="499" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-19.png?resize=661%2C499&amp;ssl=1" alt="image 19" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 21" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-19.png?w=661&amp;ssl=1 661w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-19.png?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-19.png?resize=200%2C150&amp;ssl=1 200w" sizes="(max-width: 661px) 100vw, 661px" data-recalc-dims="1"></a></figure></div>
<p>Inside this folder, we should look for the file named “<strong>Setting.set</strong>,” which is a configuration file of <strong>MPTools</strong>. Let’s open it using the Windows Notepad.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-20.png?ssl=1"><img loading="lazy" decoding="async" width="636" height="341" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-20.png?resize=636%2C341&amp;ssl=1" alt="image 20" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 22" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-20.png?w=636&amp;ssl=1 636w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-20.png?resize=300%2C161&amp;ssl=1 300w" sizes="(max-width: 636px) 100vw, 636px" data-recalc-dims="1"></a></figure></div>
<p>With the file open, we’ll make 2 modifications, the first one being in the section “<strong>[Function]</strong>“, where we have the configuration named “<strong>ENFWTAG=1</strong>,” which we should change its logical level from <strong>1</strong> to <strong>0</strong>.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-22.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="560" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-22.png?resize=720%2C560&amp;ssl=1" alt="image 22" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 23" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-22.png?w=948&amp;ssl=1 948w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-22.png?resize=300%2C233&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-22.png?resize=768%2C597&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>The other configuration is in the category “<strong>[Option]</strong>“, where we will add one more extra command line. This command is as follows: “<strong>EnSLCMode=1</strong>“. So after that, we save the file and reopen the MPTools.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-23.png?ssl=1"><img loading="lazy" decoding="async" width="456" height="240" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-23.png?resize=456%2C240&amp;ssl=1" alt="image 23" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 24" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-23.png?w=456&amp;ssl=1 456w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-23.png?resize=300%2C158&amp;ssl=1 300w" sizes="(max-width: 456px) 100vw, 456px" data-recalc-dims="1"></a></figure></div>
<p>With MPTools open, we can see that in the “<strong>Select Procedure</strong>” section, there is now an option called “<strong>Force SLC Mode</strong>“, which we should check. But let’s take it easy because we haven’t finished the modifications yet. There’s no point in trying to write this new firmware to the SSD if it’s still going to operate in its native mode, whether it’s TLC or QLC.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-24.png?ssl=1"><img loading="lazy" decoding="async" width="371" height="208" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-24.png?resize=371%2C208&amp;ssl=1" alt="image 24" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 25" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-24.png?w=371&amp;ssl=1 371w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-24.png?resize=300%2C168&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-24.png?resize=520%2C292&amp;ssl=1 520w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-24.png?resize=1000%2C562&amp;ssl=1 1000w" sizes="(max-width: 371px) 100vw, 371px" data-recalc-dims="1"></a></figure></div>
<p>Now we’ve reached the crucial part that enables all these modifications we’ve made to become possible. We need to take the boot and firmware initialization files from a folder within MPTools and place these files in another directory of the program.</p>
<p>First, we return to the default directory of MPTools and open the “<strong>Firmware</strong>” folder within the software.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-25.png?ssl=1"><img loading="lazy" decoding="async" width="648" height="502" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-25.png?resize=648%2C502&amp;ssl=1" alt="image 25" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 26" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-25.png?w=648&amp;ssl=1 648w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-25.png?resize=300%2C232&amp;ssl=1 300w" sizes="(max-width: 648px) 100vw, 648px" data-recalc-dims="1"></a></figure></div>
<p>Inside this folder, we will find one named “<strong>2259</strong>,” which refers to the <strong>SM2259XT2 </strong>controller of this SSD. Within this folder, there should be another folder named “<strong>IMN48</strong>” along with a configuration file and parameters file.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-27.png?ssl=1"><img loading="lazy" decoding="async" width="424" height="120" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-27.png?resize=424%2C120&amp;ssl=1" alt="image 27" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 27" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-27.png?w=424&amp;ssl=1 424w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-27.png?resize=300%2C85&amp;ssl=1 300w" sizes="(max-width: 424px) 100vw, 424px" data-recalc-dims="1"></a></figure></div>
<p>Once again, we enter this <strong>IMN48 </strong>folder, where we will encounter numerous files and folders.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-29.png?ssl=1"><img loading="lazy" decoding="async" width="636" height="163" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-29.png?resize=636%2C163&amp;ssl=1" alt="image 29" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 28" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-29.png?w=636&amp;ssl=1 636w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-29.png?resize=300%2C77&amp;ssl=1 300w" sizes="(max-width: 636px) 100vw, 636px" data-recalc-dims="1"></a></figure></div>
<p>Let’s move forward and open the “<strong>00</strong>” folder, then select all the files and folders within the “<strong>00</strong>” folder.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-31.png?ssl=1"><img loading="lazy" decoding="async" width="641" height="238" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-31.png?resize=641%2C238&amp;ssl=1" alt="image 31" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 29" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-31.png?w=641&amp;ssl=1 641w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-31.png?resize=300%2C111&amp;ssl=1 300w" sizes="(max-width: 641px) 100vw, 641px" data-recalc-dims="1"></a></figure></div>
<p>We will “<strong>copy</strong>” (not cut) to the previous folder, the “<strong>00</strong>” folder, which should look like the following image:</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-33.png?ssl=1"><img loading="lazy" decoding="async" width="648" height="351" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-33.png?resize=648%2C351&amp;ssl=1" alt="image 33" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 30" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-33.png?w=648&amp;ssl=1 648w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-33.png?resize=300%2C163&amp;ssl=1 300w" sizes="(max-width: 648px) 100vw, 648px" data-recalc-dims="1"></a></figure></div>
<p>And then we should enter the “<strong>XT2</strong>” folder and copy this single file inside it called “<strong>BootISP2259.bin</strong>” to this “<strong>00</strong>” directory as shown in the next image.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-35.png?ssl=1"><img loading="lazy" decoding="async" width="644" height="381" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-35.png?resize=644%2C381&amp;ssl=1" alt="image 35" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 31" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-35.png?w=644&amp;ssl=1 644w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-35.png?resize=300%2C177&amp;ssl=1 300w" sizes="(max-width: 644px) 100vw, 644px" data-recalc-dims="1"></a></figure></div>
<p>Next, we’ll copy all these files from the folder and paste them into the previous “<strong>2259</strong>” directory as shown in the following image:</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-39.png?ssl=1"><img loading="lazy" decoding="async" width="672" height="576" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-39.png?resize=672%2C576&amp;ssl=1" alt="image 39" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 32" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-39.png?w=672&amp;ssl=1 672w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-39.png?resize=300%2C257&amp;ssl=1 300w" sizes="(max-width: 672px) 100vw, 672px" data-recalc-dims="1"></a></figure></div>
<p><strong>IT IS IMPORTANT TO NOTE THAT THIS PROCEDURE WITH THESE FILES IS FOR THIS KIT OF SM2259XT2 + NANDS N48R.</strong></p>
<p><strong>OTHER SSDS WITH DIFFERENT NANDS FOLLOW THE SAME PROCEDURE, BUT WITH DIFFERENT FOLDER NAMES. THE N48 FOLDERS WILL BE NAMED ACCORDING TO THE NAND MANUFACTURER, AS SHOWN IN THE EXAMPLE BELOW OF AN SSD WITH SM2259XT2 CONTROLLER + KIOXIA BiCS5 NANDs.</strong></p>
<p>P.S.: Some NAND models may not be 100% compatible. So far, I’ve only tested with Intel and Micron NANDs.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/04-1.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="161" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/04-1.png?resize=720%2C161&amp;ssl=1" alt="04 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 33" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/04-1.png?resize=1024%2C229&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/04-1.png?resize=300%2C67&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/04-1.png?resize=768%2C172&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/04-1.png?resize=1200%2C269&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/04-1.png?w=1468&amp;ssl=1 1468w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Tendo deixado isto claro, agora sim voltamos ao programa <strong>MPTools</strong>, vamos em <strong>Parameter </strong>novamente e vamos checar todas as configurações anteriores para ver se ainda estão aplicadas.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-37.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="514" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-37.png?resize=720%2C514&amp;ssl=1" alt="image 37" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 34" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-37.png?w=1006&amp;ssl=1 1006w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-37.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-37.png?resize=768%2C548&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>If everything is correct, let’s go to the “<strong>Test</strong>” section next to “<strong>Parameter</strong>,” which is the program’s main screen. Now we should put the SSD into ROM mode. Let’s close the software again.</p>
<h3 id="softwares-do-ssd"><strong>HOW MUCH DID THE ENDURANCE INCREASED?</strong></h3>
<p>To calculate durability precisely, we need the following information:</p>
<p><strong>Write Amplification Factor</strong></p>
<p><strong>NAND: Program/Erase Cycle</strong></p>
<p><strong>SSD’s Capacity</strong></p>
<p>With these 3 parameters, we can have a basic understanding of TBW (Terabytes Written), but remember that it’s an approximate value. For a more precise calculation, following the <strong>JEDEC JESD218A</strong> parameters would be necessary, which includes more complicated parameters like <strong>Wear-Leveling Efficiency</strong> (<strong>W.L.E.</strong>).</p>
<p>Using this basic calculation with the SSD in its default mode, we see that it has a <strong>TBW</strong> of <strong>120TB</strong>, with a <strong>Program/Erase Cycle</strong> of these <strong>Media Grade N48R</strong> NANDs around <strong>900 P.E.C</strong>. And how do I know this? I managed to access the datasheet of the NANDs. Taking this into consideration, we can reach the conclusion below, considering the calculation:</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-41.png?ssl=1"><img loading="lazy" decoding="async" width="720" height="193" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-41.png?resize=720%2C193&amp;ssl=1" alt="image 41" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 35" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-41.png?w=1003&amp;ssl=1 1003w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-41.png?resize=300%2C80&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-41.png?resize=768%2C206&amp;ssl=1 768w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p> <strong>120 TB (TBW) = (900 P.E.C. x 0.5 TB)</strong> <br> ———————- <br> <strong> X (W.A.F)</strong> </p>
<p> <strong>X = 3.75 W.A.F.</strong></p>
<p>We see that based on this, the SSD’s WAF in its native form would be quite high, in the range of 3.75, when tested in practical scenarios it was close to 3.8 WAF.</p>
<p>Now, in pSLC mode, the parameters change. The NAND from this Die can withstand up to <strong>60,000 P/E</strong> <strong>cycles</strong> according to the datasheet, and its capacity drops to 0.12TB (120GB). When I randomly tested the SSD, I noticed that its WAF was below 2, which improved significantly.</p>
<p><strong> </strong> <strong>X TB (TBW) = (60.000 P.E.C. x 0.12 TB)</strong> <br> ———————- <br> <strong>1.8 (W.A.F)</strong></p>
<p><strong>X = 4000 TB (TBW)</strong></p>
<p>We see that the TBW has increased drastically, from <strong>120TB</strong>(500GB QLC) to <strong>4,000TB</strong> (120GB pSLC), which is an increase of over 3333%, more than 3000 percent.</p>
<p><strong>TEST BENCH</strong><br>– OS: Windows 11 Pro 64-bit (Build: 23H2)<br>– CPU: Intel Core i7 13700K (5.7GHz all core) (E-cores e Hyper-threading desabled)<br>– RAM: 2&nbsp;×&nbsp;16 GB DDR4-3200MHz CL-16 Netac&nbsp;(c/ XMP)<br>– Motherboard: MSI Z790-P PRO WIFI D4&nbsp;(Bios Ver.:&nbsp;<strong>7E06v18</strong>)<br>– GPU: RTX 4060 Galax 1-Click OC (Drivers: 537.xx)<br>– (OS Drive): SSD Solidigm P44 Pro 2TB (Firmware:&nbsp;<strong>001C</strong>)<br>– DUT SSD: SSD BX500 “SLC-Test” 2TB (Firmware:&nbsp;<strong><strong>My custom firmware</strong></strong>)<br>– Chipset Driver Intel Z790:&nbsp;<strong>10.1.19376.8374</strong>.<br>– Windows: Indexing disabled to avoid affecting test results.<br>– Windows: Windows updates disabled to avoid affecting test results<br>– Windows: Most Windows applications disabled from running in the background.<br>– Boot Windows: Clean Image with only Drivers<br>– Test pSLC Cache: The SSD is cooled by fans to prevent thermal throttling, ensuring it doesn’t interfere with the test results.<br>– Windows: Antivirus disabled to minimize variation in each round.<br>– DUT SSDs: Used as a secondary drive, with 0% of space being utilized, and other tests conducted with 50% of space utilized to represent a realistic scenario.<br>– Quarch PPM QTL1999 – Power consumption test: conducted with three parameters—idle, where the drive is left as a secondary, and after a period of idle, a one-hour write test is performed, and the average power consumption is recorded</p>
<p><strong>CONTRIBUTIONS TO PROJECT LIKE THIS IN THE FUTURE</strong></p>
<p>If you enjoyed this article and would like to see more articles like this, I’ll be leaving a link below where you can contribute directly. In the future, I plan to bring a comparison showing the difference in SLC cache sizes, transforming a QLC or TLC SSD into SLC, among many other topics.</p>
<p><strong>Paypal – <a href="https://theoverclockingpage.com/cdn-cgi/l/email-protection" data-cfemail="511630332338343d323023383e323021372b11393e253c30383d7f323e3c">[email&nbsp;protected]</a></strong></p>
<p><strong>CRYSTALDISKMARK</strong><br></p>
<p>We conducted synthetic sequential and random tests with the following configurations:</p>
<p>Sequential: 2x 1 GiB (Blocks 1 MiB) 8 Queues 1 Thread</p>
<p>Random: 2x 1 GiB (Blocks 4 KiB) 1 Queue 1/2/4/8/16 Threads</p>
<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/theoverclockingpage.com\/2024\/05\/13\/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance\/?lang=en&quot;}">
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image001-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56927" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image001-1.jpg?resize=720%2C508&amp;ssl=1" alt="image001 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 36" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image001-1.jpg?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image001-1.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image001-1.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image001-1.jpg?resize=1200%2C847&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image001-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image003-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56929" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image003-1.jpg?resize=720%2C508&amp;ssl=1" alt="image003 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 37" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image003-1.jpg?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image003-1.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image003-1.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image003-1.jpg?resize=1200%2C847&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image003-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
</figure>
<p>In these sequential scenarios, the difference is basically nonexistent because even with the pSLC Cache, the SSD already reaches its maximum bandwidth and the manufacturer’s sequential speeds. Not to mention that this is a quick test; in a more extensive and heavy benchmark, we will see that there will indeed be a difference.</p>
<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/theoverclockingpage.com\/2024\/05\/13\/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance\/?lang=en&quot;}">
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image005-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56931" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image005-1.jpg?resize=720%2C508&amp;ssl=1" alt="image005 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 38" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image005-1.jpg?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image005-1.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image005-1.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image005-1.jpg?resize=1200%2C847&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image005-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image007-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56933" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image007-1.jpg?resize=720%2C508&amp;ssl=1" alt="image007 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 39" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image007-1.jpg?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image007-1.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image007-1.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image007-1.jpg?resize=1200%2C847&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image007-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
</figure>
<p>In terms of latency, there was indeed a considerable drop because when the SSD is in Idle, its NANDs, when they start to write or “read,” are in native mode, which would be QLC, and until they are reprogrammed to SLC, they have a certain latency. However, with the SSD in full pSLC mode, this latency is much lower because it always stays in pSLC mode.</p>
<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/theoverclockingpage.com\/2024\/05\/13\/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance\/?lang=en&quot;}">
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image009-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56935" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image009-1.jpg?resize=720%2C508&amp;ssl=1" alt="image009 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 40" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image009-1.jpg?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image009-1.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image009-1.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image009-1.jpg?resize=1200%2C847&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image009-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image011-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56937" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image011-1.jpg?resize=720%2C508&amp;ssl=1" alt="image011 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 41" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image011-1.jpg?w=1280&amp;ssl=1 1280w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image011-1.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image011-1.jpg?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image011-1.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image011-1.jpg?resize=1200%2C847&amp;ssl=1 1200w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
</figure>
<p>The same happens with its random speeds; we can see that there was a greater difference in these benchmarks compared to sequential speed, where the difference was almost negligible.</p>
<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/theoverclockingpage.com\/2024\/05\/13\/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance\/?lang=en&quot;}">
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image013-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56939" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image013-1.jpg?resize=720%2C508&amp;ssl=1" alt="image013 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 42" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image013-1.jpg?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image013-1.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image013-1.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image013-1.jpg?resize=1200%2C847&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image013-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image015-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56941" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image015-1.jpg?resize=720%2C508&amp;ssl=1" alt="image015 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 43" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image015-1.jpg?w=1280&amp;ssl=1 1280w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image015-1.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image015-1.jpg?resize=1024%2C722&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image015-1.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image015-1.jpg?resize=1200%2C847&amp;ssl=1 1200w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
</figure>
<p>The same happens at QD1; we can see that in reading, the SSD had an increase of over 16% in its speeds, while in writing, there was a much larger increase of over 30%.</p>
<p><strong>ATTO Disk Benchmark QD1 and QD4</strong></p>
<p>We conducted a test using ATTO to observe the speed of SSDs at various block sizes. In this benchmark, it was configured as follows:</p>
<p>Block sizes: from 512 Bytes to 8 MiB</p>
<p>File size: 256MB</p>
<p>Queue Depth: 1 and 4.</p>
<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/theoverclockingpage.com\/2024\/05\/13\/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance\/?lang=en&quot;}">
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image017-2.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="510" data-id="56943" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image017-2.jpg?resize=720%2C510&amp;ssl=1" alt="image017 2" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 44" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image017-2.jpg?resize=1024%2C726&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image017-2.jpg?resize=300%2C213&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image017-2.jpg?resize=768%2C544&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image017-2.jpg?resize=1200%2C850&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image017-2.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image019-2.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56945" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image019-2.jpg?resize=720%2C508&amp;ssl=1" alt="image019 2" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 45" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image019-2.jpg?resize=1024%2C723&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image019-2.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image019-2.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image019-2.jpg?resize=1200%2C848&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image019-2.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
</figure>
<p>The ATTO Disk Benchmark is a software that performs a sequential speed test with compressed files. Therefore, for a simulation under a data transfer load like in Windows, we typically see block sizes ranging from 128KB to 1MB. Now, we observe that the SSD in pSLC mode outperforms the SSD in its factory mode across all block sizes, which is impressive once again.</p>
<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/theoverclockingpage.com\/2024\/05\/13\/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance\/?lang=en&quot;}">
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image021-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="508" data-id="56947" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image021-1.jpg?resize=720%2C508&amp;ssl=1" alt="image021 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 46" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image021-1.jpg?resize=1024%2C723&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image021-1.jpg?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image021-1.jpg?resize=768%2C542&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image021-1.jpg?resize=1200%2C848&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image021-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image023-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="510" data-id="56949" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image023-1.jpg?resize=720%2C510&amp;ssl=1" alt="image023 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 47" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image023-1.jpg?resize=1024%2C726&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image023-1.jpg?resize=300%2C213&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image023-1.jpg?resize=768%2C544&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image023-1.jpg?resize=1200%2C850&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image023-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
</figure>
<p>The same pattern repeated at queue depth 1, although the difference in some block sizes was slightly lower compared to a queue depth of 4.</p>
<p><strong>3DMark – Storage Benchmark</strong></p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/04/capsule_616x353.jpg?ssl=1"><img loading="lazy" decoding="async" width="616" height="353" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/04/capsule_616x353.jpg?resize=616%2C353&amp;ssl=1" alt="" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 48" data-recalc-dims="1"></a></figure></div>
<p>In this benchmark, various storage-related tests are conducted, including game loading tests for games like Call of Duty Black Ops 4, Overwatch, recording and streaming with OBS of a gameplay at 1080p 60 FPS, game installations, and file transfers of game folders.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image027-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image027-1.jpg?resize=720%2C503&amp;ssl=1" alt="image027 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 49" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image027-1.jpg?resize=1024%2C715&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image027-1.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image027-1.jpg?resize=768%2C536&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image027-1.jpg?resize=1200%2C838&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image027-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/theoverclockingpage.com\/2024\/05\/13\/tutorial-transforming-a-qlc-ssd-into-an-slc-ssd-dramatically-increasing-the-drives-endurance\/?lang=en&quot;}">
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image029-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" data-id="56953" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image029-1.jpg?resize=720%2C503&amp;ssl=1" alt="image029 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 50" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image029-1.jpg?resize=1024%2C715&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image029-1.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image029-1.jpg?resize=768%2C536&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image029-1.jpg?resize=1200%2C838&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image029-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image031-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" data-id="56955" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image031-1.jpg?resize=720%2C503&amp;ssl=1" alt="image031 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 51" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image031-1.jpg?resize=1024%2C715&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image031-1.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image031-1.jpg?resize=768%2C536&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image031-1.jpg?resize=1200%2C838&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image031-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure>
</figure>
<p>In this benchmark focusing more on casual environments, we can see that even here, in a scenario fully representative of reality, there is indeed a performance difference, especially in latency. Although it may not be something entirely noticeable in everyday use in these “lighter” scenarios.</p>
<p><strong>PCMARK 10 – FULL SYSTEM DRIVE BENCHMARK</strong></p>
<p>In this test, the Storage Test tool was used along with the “Full System Drive Benchmark,” which performs light and heavy evaluations on the SSD.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/04/pcmark10-fb-og.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="378" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/04/pcmark10-fb-og.jpg?resize=720%2C378&amp;ssl=1" alt="pcmark10 fb og" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 52" data-recalc-dims="1"></a></figure></div>
<p><br>Among these traces, we can observe tests such as:</p>
<ul>
<li>Boot Windows 10</li>
<li>Adobe After Effects: Launching the application until it’s ready for use</li>
<li>Adobe Illustrator: Launching the application until it’s ready for use</li>
<li>Adobe Premiere Pro: Launching the application until it’s ready for use</li>
<li>Adobe Lightroom: Launching the application until it’s ready for use</li>
<li>Adobe Photoshop: Launching the application until it’s ready for use</li>
<li>Battlefield V: Loading time until the start menu</li>
<li>Call of Duty Black Ops 4: Loading time until the start menu</li>
<li>Overwatch: Loading time until the start menu</li>
<li>Using Adobe After Effects</li>
<li>Using Microsoft Excel</li>
<li>Using Adobe Illustrator</li>
<li>Using Adobe InDesign</li>
<li>Using Microsoft PowerPoint</li>
<li>Using Adobe Photoshop (Intensive use)</li>
<li>Using Adobe Photoshop (Lighter use)</li>
<li>Copying 4 ISO files, totaling 20GB, to a secondary disk (Write test)</li>
<li>Performing the ISO file copy (Read-write test)</li>
<li>Copying the ISO file to a secondary disk (Read)</li>
<li>Copying 339 JPEG files (Photos) to the tested disk (Write)</li>
<li>Creating copies of these JPEG files (Read-write)</li>
<li>Copying 339 JPEG files (Photos) to another disk (Read)</li>
</ul>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image034-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image034-1.jpg?resize=720%2C503&amp;ssl=1" alt="image034 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 53" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image034-1.jpg?resize=1024%2C715&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image034-1.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image034-1.jpg?resize=768%2C536&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image034-1.jpg?resize=1200%2C838&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image034-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>In this scenario, which is a practical benchmark with a slightly greater focus on writing than 3DMark, as it is more productivity-oriented, it’s possible to notice the practical difference in day-to-day use. The difference was striking, almost twice the performance.</p>
<p><strong>Adobe Premiere Pro 2021</strong></p>
<p>Next, we used Adobe Premiere to measure the average time it takes to open a project of about 16.5GB with 4K resolution, 120Mbps bitrate, and full of effects until it was ready for editing. It’s worth noting that the tested SSD is always used as a secondary drive without the operating system installed, as this could affect the results, leading to inconsistencies.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image037-1.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image037-1.jpg?resize=720%2C503&amp;ssl=1" alt="image037 1" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 54" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image037-1.jpg?resize=1024%2C715&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image037-1.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image037-1.jpg?resize=768%2C536&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image037-1.jpg?resize=1200%2C838&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image037-1.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Here we can see that, as it is more of a scenario of sequential data reading from the project, the difference was almost negligible, just a variation between runs.</p>
<p><strong>WINDOWS BOOT TIME AND GAME LOADING TIME</strong></p>
<p>We compared the SSD with pSLC Cache and in pSLC Mode using the Final Fantasy XIV benchmark.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image038.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image038.jpg?resize=720%2C503&amp;ssl=1" alt="image038" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 55" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image038.jpg?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image038.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image038.jpg?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image038.jpg?resize=1200%2C839&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image038.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>The same happens with game loading times because the limitation lies in the game’s API, which differs from <strong>DirectStorage</strong>. This API is not optimized for us to feel a significant difference.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image042.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image042.jpg?resize=720%2C503&amp;ssl=1" alt="image042" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 56" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image042.jpg?resize=1024%2C715&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image042.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image042.jpg?resize=768%2C536&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image042.jpg?resize=1200%2C838&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image042.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>The same can be said for Windows, as although it is a completely new system, it cannot take advantage of features like the one we applied to the SSD.</p>
<p><strong>SLC CACHING</strong></p>
<p>A large part of SSDs on the market currently utilize SLC Caching technology, where a certain percentage of their storage capacity, whether it’s MLC (2 bits per cell), TLC (3 bits per cell), or QLC (4 bits per cell), is used to store only 1 bit per cell. In this case, it’s used as a write and read buffer, where the controller starts writing, and when the buffer is depleted, it writes to the native NAND Flash (MLC/TLC/QLC).</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-40.png?ssl=1"><img loading="lazy" decoding="async" width="567" height="319" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-40.png?resize=567%2C319&amp;ssl=1" alt="image 40" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 57" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-40.png?w=567&amp;ssl=1 567w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-40.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-40.png?resize=520%2C292&amp;ssl=1 520w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/03/image-40.png?resize=1000%2C562&amp;ssl=1 1000w" sizes="(max-width: 567px) 100vw, 567px" data-recalc-dims="1"></a></figure></div>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image043.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="391" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image043.jpg?resize=720%2C391&amp;ssl=1" alt="image043" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 58" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image043.jpg?resize=1024%2C556&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image043.jpg?resize=300%2C163&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image043.jpg?resize=768%2C417&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image043.jpg?resize=1200%2C652&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image043.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Through IOmeter, we can get an idea of the SLC cache volume of this SSD, as manufacturers often do not provide this information. Based on the tests we conducted, it was found that it has a pSLC cache volume that appears to be dynamic, relatively small, around <strong>45GB</strong>. It managed to maintain an average speed of approximately <strong>493MB/s </strong>until the end of the buffer, which is a good speed considering it is a SATA SSD.</p>
<p>However, after writing <strong>45GB</strong>, it begins to enter the folding process because it allocated all its capacity to work as pSLC. So now we see the true Achilles’ heel of QLC SSDs. Its sustained speed was quite low, averaging around <strong>50 MB/s</strong>.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image045.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="391" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image045.jpg?resize=720%2C391&amp;ssl=1" alt="image045" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 59" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image045.jpg?resize=1024%2C556&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image045.jpg?resize=300%2C163&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image045.jpg?resize=768%2C417&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image045.jpg?resize=1200%2C652&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image045.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Now, when we transform this SSD into <strong>pSLC</strong>, we see that it writes to its full capacity of 120GB at an average of <strong>498 MB/s</strong>. And to confirm, we wrote up to 500GB to the SSD, and even then, it continued rewriting its capacity more than 4 times at almost <strong>500 MB/s</strong>.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image047.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image047.jpg?resize=720%2C503&amp;ssl=1" alt="image047" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 60" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image047.jpg?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image047.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image047.jpg?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image047.jpg?resize=1200%2C839&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image047.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>As we can see in the graph above, we averaged the SSD’s write speed, combining the speed within the pSLC Cache + Folding + Native. Taking this into account, we see that the difference was striking, almost 10 times higher.</p>
<p><strong>FILE COPY TEST</strong></p>
<p>In this test, the ISO files and CSGO were copied from a RAM Disk to the SSD to see how it performs. The Windows 10 21H1 ISO of 6.25GB (1 file) and the CSGO installation folder of 25.2GB were used.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image049.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image049.jpg?resize=720%2C503&amp;ssl=1" alt="image049" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 61" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image049.jpg?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image049.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image049.jpg?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image049.jpg?resize=1200%2C839&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image049.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>In a more realistic test like this, we can see that there is no difference because the SLC cache volume of the SSD natively is larger than the size of the tested file.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image051.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image051.jpg?resize=720%2C503&amp;ssl=1" alt="image051" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 62" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image051.jpg?w=1280&amp;ssl=1 1280w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image051.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image051.jpg?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image051.jpg?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image051.jpg?resize=1200%2C839&amp;ssl=1 1200w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>And even when using a larger folder, it is still smaller than the volume of the SSD’s SLC cache. I don’t test with larger files because I use a RAM Disk, and since I only have “<strong>32GB</strong>” to make a larger RAM Disk, I would need more RAM.</p>
<p><strong>TEMPERATURE TEST</strong></p>
<p>In this part of the analysis, we will observe the temperature of the SSD during a stress test, where the SSD receives files continuously, to determine if there was any <strong><em>thermal throttling</em></strong> with its internal components that could cause a bottleneck or loss of performance.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image053.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image053.jpg?resize=720%2C503&amp;ssl=1" alt="image053" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 63" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image053.jpg?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image053.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image053.jpg?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image053.jpg?resize=1200%2C839&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image053.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>The SSD doesn’t even heat up because it’s a low-power consumption SSD, as we’ll see throughout the analysis, and I believe this sensor to be the NAND Flash sensor.</p>
<p><strong>POWER CONSUMPTION AND EFFICIENCY</strong></p>
<p>SSDs, like many other components in our system, have a certain power consumption. The most efficient ones can perform tasks quickly with relatively low power consumption, allowing them to transition back to idle power states where they consume less energy.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/08/quarch-programmable-power-module.png?ssl=1"><img loading="lazy" decoding="async" width="690" height="400" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2022/08/quarch-programmable-power-module.png?resize=690%2C400&amp;ssl=1" alt="quarch programmable power module" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 64" data-recalc-dims="1"></a><figcaption><strong>SPECIAL THANKS FOR QUARCH FOR SENDING THIS UNIT</strong></figcaption></figure></div>
<p>In this section of the analysis, we will use the Quarch Programmable Power Module provided by Quarch Solutions (pictured above) to conduct tests and determine how efficient the SSD is. This methodology involves conducting three tests: measuring the maximum power consumption of the SSD, calculating an average power consumption in practical and casual scenarios, and measuring power consumption during idle periods.</p>
<p>This set of tests, especially those related to efficiency and idle power consumption, is important for users who intend to use SSDs in laptops. SSDs spend the vast majority of their time in low-power states (idle), so understanding their power consumption characteristics can significantly impact battery life and overall energy efficiency.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image061.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image061.jpg?resize=720%2C503&amp;ssl=1" alt="image061" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 65" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image061.jpg?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image061.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image061.jpg?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image061.jpg?resize=1200%2C839&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image061.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>We can see that thanks to this modification, its efficiency has increased dramatically. This occurred because, although the difference in power consumption was not as significant as we will see shortly, the speed in MB/s was extremely high. </p>
<p>Due to the benchmark exceeding the SSD’s <strong>45GB </strong>cache by a large margin, it spent a significant portion of the test at a very low speed of less than<strong> 55 MB/s</strong>, resulting in low efficiency. In pSLC mode, it was able to write twice its capacity at even lower power consumption than in QLC mode, and its bandwidth did not drop at any point. This led to the significant difference in power consumption.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image055.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image055.jpg?resize=720%2C503&amp;ssl=1" alt="image055" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 66" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image055.jpg?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image055.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image055.jpg?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image055.jpg?resize=1200%2C839&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image055.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Although this SSD naturally has low power consumption, we do observe a decrease when transforming it into pSLC mode. This occurs because SLC NANDs have only 2 logical levels, meaning the <strong>threshold voltage </strong>required to allow electrons to flow in the gate channel of each cell is lower since there are fewer levels needed to represent binary 1 or 0. In contrast, QLC NANDs have 16 logical levels, requiring a higher <strong>threshold voltage</strong>. This explains the reduction in power consumption.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image057.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image057.jpg?resize=720%2C503&amp;ssl=1" alt="image057" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 67" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image057.jpg?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image057.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image057.jpg?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image057.jpg?resize=1200%2C839&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image057.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Once again, we see this in the average of both SSDs.</p>
<div>
<figure><a href="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image059.jpg?ssl=1"><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image059.jpg?resize=720%2C503&amp;ssl=1" alt="image059" title="Tutorial: Transforming a QLC SSD into an SLC SSD - Dramatically increasing the drive's endurance! 68" srcset="https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image059.jpg?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image059.jpg?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image059.jpg?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image059.jpg?resize=1200%2C839&amp;ssl=1 1200w, https://i0.wp.com/theoverclockingpage.com/wp-content/uploads/2024/05/image059.jpg?w=1280&amp;ssl=1 1280w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></a></figure></div>
<p>Last but not least, the Idle test, which represents the scenario where the vast majority of SSDs are in everyday use. Here we can see that it had even lower consumption in Idle. Another positive point.</p>
<p>What can we conclude from this?</p>
<p>Once again, I stress the importance of caution with this procedure as it can indeed go wrong if not done correctly. However, we see that the differences are significant in some scenarios while more subtle in others. But now, in terms of durability, the difference is immense!</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Iberian lynx doubles its population in just three years (110 pts)]]></title>
            <link>https://english.elpais.com/science-tech/2024-05-17/the-iberian-lynx-doubles-its-population-in-just-three-years-and-reaches-2000-individuals.html</link>
            <guid>40404488</guid>
            <pubDate>Sun, 19 May 2024 05:31:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://english.elpais.com/science-tech/2024-05-17/the-iberian-lynx-doubles-its-population-in-just-three-years-and-reaches-2000-individuals.html">https://english.elpais.com/science-tech/2024-05-17/the-iberian-lynx-doubles-its-population-in-just-three-years-and-reaches-2000-individuals.html</a>, See on <a href="https://news.ycombinator.com/item?id=40404488">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-dtm-region="articulo_cuerpo"><figure><span><img alt="Lince" decoding="auto" height="276" srcset="https://imagenes.elpais.com/resizer/v2/CORSXHDDE5BOXHHVQCPKWO2NAI.jpg?auth=a02ef151f5a683352c10eb8697d95f7fdccaf03d0ae648de7517f6f7c4d192b5&amp;width=414 414w,https://imagenes.elpais.com/resizer/v2/CORSXHDDE5BOXHHVQCPKWO2NAI.jpg?auth=a02ef151f5a683352c10eb8697d95f7fdccaf03d0ae648de7517f6f7c4d192b5&amp;width=828 640w,https://imagenes.elpais.com/resizer/v2/CORSXHDDE5BOXHHVQCPKWO2NAI.jpg?auth=a02ef151f5a683352c10eb8697d95f7fdccaf03d0ae648de7517f6f7c4d192b5&amp;width=980 1000w,https://imagenes.elpais.com/resizer/v2/CORSXHDDE5BOXHHVQCPKWO2NAI.jpg?auth=a02ef151f5a683352c10eb8697d95f7fdccaf03d0ae648de7517f6f7c4d192b5&amp;width=1200 1200w" width="414" sizes="(min-width: 1199px) 760px,(min-width: 1001px) cal(100vw - 62vw),(min-width: 768px) 767px, 100vw" src="https://imagenes.elpais.com/resizer/v2/CORSXHDDE5BOXHHVQCPKWO2NAI.jpg?auth=a02ef151f5a683352c10eb8697d95f7fdccaf03d0ae648de7517f6f7c4d192b5&amp;width=414" loading="eager"></span><figcaption><span>A litter of Iberian lynxes from Ciudad Real.</span><span>Alexandra Surkova-WWF</span></figcaption></figure><p>The Iberian lynx (<i>Lynx pardinus</i>) continues <a href="https://english.elpais.com/society/2021-05-31/spains-iberian-lynx-population-soars-to-1000-but-species-remains-endangered.html">along its upward path</a>, although it is still at risk of extinction. The last census in 2023 shows that the species has doubled its population in the last three years and has reached 2,021 individuals, with 1,299 adults or subadults and 722 cubs. Despite the good data, 750 breeding females would be needed to classify the species in a favorable conservation status, and in this latest count only 406 have been detected. According to Spain’s Ministry for the Ecological Transition, they are “gradually” getting closer to the necessary number, but are still falling short.</p><p>Captive breeding centers have played an essential role in this recovery. From 2011 to 2023, 372 lynxes born in the four existing centers have been released. The population has been expanding, and last year the reproduction of the species was verified in 14 population centers, in addition to the stable presence in new areas of the Spanish region of Murcia, and the provinces of Albacete, Badajoz, Toledo and Ciudad Real. Most of the specimens, 1,731 or 85% of the total, live in Spain and the rest, 291, are <a href="https://english.elpais.com/economy-and-business/2024-05-13/portugal-is-no-longer-a-problem-for-europe.html">in Portugal</a>. The stable populations are located in four Spanish regions: Andalusia with 755 specimens (43.6% of the Spanish population), closely followed by Castilla-La Mancha with 715 lynxes (41.3%), Extremadura where 253 specimens were located, and Murcia with seven.</p><figure><span><img alt="Expansion of the Iberian lynx, in a graph provided by the Ministry for the Ecological Transition" decoding="auto" height="267" srcset="https://imagenes.elpais.com/resizer/v2/WC3H7XTTMFGAZFP2WT3UTHFISA.jpeg?auth=92ad55f27e3b48911d12e71428c404b0f2d41b969870ecc89f325342a8872e3c&amp;width=414 414w,https://imagenes.elpais.com/resizer/v2/WC3H7XTTMFGAZFP2WT3UTHFISA.jpeg?auth=92ad55f27e3b48911d12e71428c404b0f2d41b969870ecc89f325342a8872e3c&amp;width=828 640w,https://imagenes.elpais.com/resizer/v2/WC3H7XTTMFGAZFP2WT3UTHFISA.jpeg?auth=92ad55f27e3b48911d12e71428c404b0f2d41b969870ecc89f325342a8872e3c&amp;width=980 1000w,https://imagenes.elpais.com/resizer/v2/WC3H7XTTMFGAZFP2WT3UTHFISA.jpeg?auth=92ad55f27e3b48911d12e71428c404b0f2d41b969870ecc89f325342a8872e3c&amp;width=1960 1960w" width="414" sizes="(min-width:1199px) 1155px,(min-width:1001px) calc(100vw - 44px),(min-width:768px) 767px, 100vw" src="https://imagenes.elpais.com/resizer/v2/WC3H7XTTMFGAZFP2WT3UTHFISA.jpeg?auth=92ad55f27e3b48911d12e71428c404b0f2d41b969870ecc89f325342a8872e3c&amp;width=414" loading="lazy"></span><figcaption><span>Expansion of the Iberian lynx, in a graph provided by the Ministry for the Ecological Transition</span><span>Ministerio para la Transición Ecológica</span></figcaption></figure><p>The ministry believes that the data allow for a degree of optimism, because the feline’s trend is positive and has continued on an upward trend since 2015, the year in which the International Union for Conservation of Nature (IUCN) lowered its threat level. The species went from being “critically endangered” to simply “endangered.” It was a fundamental step for the survival of an animal that was close to extinction in 2002, when only 94 specimens remained in Andalusia. Captive breeding programs with significant European investment have allowed the creation of different nuclei, and have managed to reverse the situation. This increase now means that lynxes are approaching inhabited places, as happened in late March, when a rancher found <a href="https://english.elpais.com/international/2024-03-26/a-rancher-finds-three-newborn-lynxes-in-his-haystack-in-toledo.html">four lynxes born in his haystack</a> in Menasalbas, municipality of Toledo.</p><p>“We are at an average growth of 20%, a trend that has been maintained due to the creation of three new nuclei,” says Ramón Pérez de Ayala, a member of World Wildlife Fund (WWF) and a specialist in the species. To obtain the number of breeding females, it is necessary, according to their calculations, to create another five new areas with lynxes. “There were populations that grew a lot, up to 30%, but then they stabilized,” he explains. This occurred in the mountains of Toledo, one of the biggest success stories of reintroduction. “There, the first place where they became active was practically saturated, but the lynxes have moved to a neighboring area, which has kept up the growth,” he notes. The same situation has taken place in other areas such as Guarrizas (Jaén) and in Portugal, in the Guadiana valley area.</p><p>A reproductive female needs a territory of about 500 hectares, although it all depends on the amount of food available: the more food there is, the less space is needed. <a href="https://english.elpais.com/society/2022-09-29/it-was-a-perfect-storm-how-13-rabbits-caused-the-largest-biological-invasion-in-history.html">The rabbit </a>is the main component of their diet and there are places where the rabbit population cannot recover, affected mainly by a deadly hemorrhagic disease. Depending on the areas, the drop is between 30% and 87% in a decade, indicates Pérez de Ayala. In this boom situation, the feline’s biggest enemy is road accidents, which has become its main cause of mortality. “In 2023 there were 144 deaths due to this cause, 7.1% of the population, and we cannot forget poaching, which goes unnoticed.”</p><p><i>Sign up for </i><a href="https://plus.elpais.com/newsletters/lnp/1/333/?lang=en"><i><u>our weekly newsletter</u></i></a> <i>to get more English-language news coverage from EL PAÍS USA Edition</i></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Classic Usenet posts on computer architecture, operating systems and languages (254 pts)]]></title>
            <link>https://yarchive.net/comp/index.html</link>
            <guid>40404440</guid>
            <pubDate>Sun, 19 May 2024 05:16:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://yarchive.net/comp/index.html">https://yarchive.net/comp/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=40404440">Hacker News</a></p>
<div id="readability-page-1" class="page"><div width="100%">
<tbody><tr>
<td>

	<h2> Computer Architecture </h2>

<br><a href="https://yarchive.net/comp/128bit.html">The prospects for 128 bit processors</a> (John R. Mashey) [8913 bytes]
<br><a href="https://yarchive.net/comp/64bit.html">64 bit processors: history and rationale</a> (John R. Mashey) [32401 bytes]
<br><a href="https://yarchive.net/comp/amd64.html">AMD64 </a> (Linus Torvalds; Terje Mathisen) [12514 bytes]
<br><a href="https://yarchive.net/comp/asynchronous_logic.html">Asynchronous logic </a> (Mitch Alsup) [3766 bytes]
<br><a href="https://yarchive.net/comp/atomic_transactions.html">Atomic transactions </a> (Mitch Alsup; Terje Mathisen) [86188 bytes]
<br><a href="https://yarchive.net/comp/bcd_instructions.html">BCD instructions: RISC and CISC</a> (John R. Mashey) [3624 bytes]
<br><a href="https://yarchive.net/comp/big_data.html">Big Data</a> (John R. Mashey, Larry McVoy) [30027 bytes]
<br><a href="https://yarchive.net/comp/byte_addressing.html">Byte_addressing</a> (John R. Mashey) [2819 bytes]
<br><a href="https://yarchive.net/comp/caches.html">Caches </a> (John R. Mashey; John D. McCalpin) [7821 bytes]
<br><a href="https://yarchive.net/comp/cache_parity.html">Parity and ECC use in caches</a> (John R. Mashey) [1549 bytes]
<br><a href="https://yarchive.net/comp/cache_thrashing.html">Cache thrashing </a> (Andy Glew; Linus Torvalds; Terje Mathisen) [9422 bytes]
<br><a href="https://yarchive.net/comp/carry_bit.html">Carry bits; The Architect's Trap</a> (John R. Mashey) [8038 bytes]
<br><a href="https://yarchive.net/comp/cmos_logic_speed.html">CMOS logic speeds </a> (Mitch Alsup) [9317 bytes]
<br><a href="https://yarchive.net/comp/cmov.html">CMOV </a> (Terje Mathisen) [2341 bytes]
<br><a href="https://yarchive.net/comp/cpu_features.html">CPU feature economics </a> (John R. Mashey) [3860 bytes]
<br><a href="https://yarchive.net/comp/cpu_power.html">CPU power usage </a> (Mitch Alsup) [2795 bytes]
<br><a href="https://yarchive.net/comp/debugging_hardware.html">Hardware to aid debugging</a> (John R. Mashey) [10408 bytes]
<br><a href="https://yarchive.net/comp/dram_cache.html">DRAM cache </a> (Mitch Alsup; Terje Mathisen) [8807 bytes]
<br><a href="https://yarchive.net/comp/dram_latencies.html">DRAM latencies </a> (Mitch Alsup) [3056 bytes]
<br><a href="https://yarchive.net/comp/endian.html">Endian </a> (John R. Mashey) [2053 bytes]
<br><a href="https://yarchive.net/comp/fp_registers.html">Separate floating point registers</a> (John R. Mashey) [14584 bytes]
<br><a href="https://yarchive.net/comp/fp_fixup.html">Floating-point exception fixup </a> (John Mashey; Terje Mathisen) [6750 bytes]
<br><a href="https://yarchive.net/comp/fault_tolerant.html">Fault tolerant </a> (John R. Mashey) [4384 bytes]
<br><a href="https://yarchive.net/comp/h264_cabac.html">H264 CABAC </a> (Maynard Handley; Terje Mathisen) [19556 bytes]
<br><a href="https://yarchive.net/comp/ia64.html">Merced/IA64</a> (John R. Mashey) [23688 bytes]
<br><a href="https://yarchive.net/comp/instr_per_clock.html">Instructions per clock </a> (John R. Mashey) [7624 bytes]
<br><a href="https://yarchive.net/comp/ibm_801.html">IBM 801 </a> (Greg Pfister) [5308 bytes]
<br><a href="https://yarchive.net/comp/ibm_pc_8088.html">Why the IBM PC used the 8088 </a> (Bill Katz; John R. Mashey) [4264 bytes]
<br><a href="https://yarchive.net/comp/interval_arithmetic.html">Interval arithmetic </a> (James B. Shearer) [47593 bytes]
<br><a href="https://yarchive.net/comp/lisp_support.html">Lisp support </a> (Eliot Miranda; John Mashey) [27352 bytes]
<br><a href="https://yarchive.net/comp/ll_sc.html">LL/SC </a> (John Mashey; Terje Mathisen) [26317 bytes]
<br><a href="https://yarchive.net/comp/memory_layouts.html">Message passing versus shared memory; the SGI Origin machines</a> (John R. Mashey, John McCalpin) [73943 bytes]
<br><a href="https://yarchive.net/comp/mips16.html">MIPS16 </a> (John R. Mashey) [3489 bytes]
<br><a href="https://yarchive.net/comp/mips_interrupts.html">Interrupts on the MIPS processors</a> (John R. Mashey) [7035 bytes]
<br><a href="https://yarchive.net/comp/mips_exceptions.html">MIPS exceptions </a> (John Mashey) [11018 bytes]
<br><a href="https://yarchive.net/comp/misalignment.html">Misalignment </a> (John Levine; Mitch Alsup; Terje Mathisen) [14100 bytes]
<br><a href="https://yarchive.net/comp/multiprocessor_terminology.html">Multiprocessor machine terminology </a> (John R. Mashey) [8226 bytes]
<br><a href="https://yarchive.net/comp/mvc_instruction.html">The MVC instruction</a> (John R. Mashey, Allen J. Baum) [15584 bytes]
<br><a href="https://yarchive.net/comp/n_bit_cpu.html">The definition of an N bit cpu</a> (John R. Mashey) [4027 bytes]
<br><a href="https://yarchive.net/comp/opteron_stream.html">Opteron STREAM benchmark optimizations </a> (Terje Mathisen) [2030 bytes]
<br><a href="https://yarchive.net/comp/page_size.html">Page size </a> (Linus Torvalds) [2775 bytes]
<br><a href="https://yarchive.net/comp/pentium_4.html">The Pentium 4 </a> (Linus Torvalds; Terje Mathisen) [4681 bytes]
<br><a href="https://yarchive.net/comp/powerof2.html">Why word sizes are powers of 2</a> (John R. Mashey) [5185 bytes]
<br><a href="https://yarchive.net/comp/powerpc_page_tables.html">PowerPC page tables </a> (Greg Pfister; Linus Torvalds) [22229 bytes]
<br><a href="https://yarchive.net/comp/prefetch.html">Prefetch </a> (Terje Mathisen) [3788 bytes]
<br><a href="https://yarchive.net/comp/quad_precision.html">Quad precision </a> (Robert Corbett) [989 bytes]
<br><a href="https://yarchive.net/comp/register_windows.html">Register windows</a> (John Mashey) [8389 bytes]
<br><a href="https://yarchive.net/comp/register_file_size.html">Register file size </a> (Mitch Alsup) [5876 bytes]
<br><a href="https://yarchive.net/comp/rep_movs.html">REP MOVS </a> (Terje Mathisen) [1160 bytes]
<br><a href="https://yarchive.net/comp/renaming.html">Register renaming</a> (John R. Mashey) [4955 bytes]
<br><a href="https://yarchive.net/comp/result_forwarding.html">Result forwarding </a> (Terje Mathisen) [1524 bytes]
<br><a href="https://yarchive.net/comp/risc_definition.html">RISC vs CISC</a> (John R. Mashey) [43955 bytes]
<br><a href="https://yarchive.net/comp/rom_speeds.html">ROM speeds </a> (Mitch Alsup) [1835 bytes]
<br><a href="https://yarchive.net/comp/self_modify.html">Self-modifying code</a> (John R. Mashey, John Reiser, Dennis Ritchie) [24900 bytes]
<br><a href="https://yarchive.net/comp/set_associative.html">Direct Mapped vs. Set Associative caches</a> (John R. Mashey) [2260 bytes]
<br><a href="https://yarchive.net/comp/signed_division.html">Signed division </a> (Robert Corbett) [1273 bytes]
<br><a href="https://yarchive.net/comp/slow_memory_effects.html">Algorithm Analyses *Must Change* to Model Current Processors</a> (John R. Mashey) [10337 bytes]
<br><a href="https://yarchive.net/comp/software_pipelining.html">Software pipelining </a> (Linus Torvalds) [23736 bytes]
<br><a href="https://yarchive.net/comp/software_tlb.html">Software-refilled TLBs</a> (John R. Mashey, John F Carr) [76259 bytes]
<br><a href="https://yarchive.net/comp/spec.html">The SPEC benchmark suite</a> (John R. Mashey) [55015 bytes]
<br><a href="https://yarchive.net/comp/specfp2000.html">SpecFP2000 </a> (Greg Lindahl; John D. McCalpin; Wesley Jones) [19554 bytes]
<br><a href="https://yarchive.net/comp/specfp_bandwidth.html">SpecFP bandwidth </a> (John D. McCalpin) [8570 bytes]
<br><a href="https://yarchive.net/comp/specfp_time_skewing.html">SpecFP and time-skewing optimizations </a> (Greg Lindahl; John D. McCalpin) [24362 bytes]
<br><a href="https://yarchive.net/comp/sram_main_mem.html">SRAM main memories</a> (John R. Mashey) [3130 bytes]
<br><a href="https://yarchive.net/comp/stack_machines.html">Stack machines</a> (John R. Mashey) [34138 bytes]
<br><a href="https://yarchive.net/comp/streaming_data.html">Streaming data</a> (John R. Mashey) [4655 bytes]
<br><a href="https://yarchive.net/comp/tera.html">The Tera multithreaded architecture </a> (Preston Briggs, John R. Mashey) [27972 bytes]
<br><a href="https://yarchive.net/comp/threaded_cpu.html">Multithreaded CPUs</a> (John R. Mashey) [11759 bytes]
<br><a href="https://yarchive.net/comp/tlbs.html">TLBs </a> (John Mashey) [9415 bytes]
<br><a href="https://yarchive.net/comp/transmission_gates.html">Transmission gates </a> (Mitch Alsup) [1686 bytes]
<br><a href="https://yarchive.net/comp/vax.html">The VAX </a> (John Mashey) [89376 bytes]
<br><a href="https://yarchive.net/comp/vectored_interrupts.html">Vectored interrupts </a> (John Mashey) [4607 bytes]
<br><a href="https://yarchive.net/comp/virtual_machine.html">Virtual machines</a> (John R. Mashey) [4749 bytes]
<br><a href="https://yarchive.net/comp/wiz.html">Wiz </a> (John Mashey) [106300 bytes]
<br><a href="https://yarchive.net/comp/zero_register.html">Zero registers</a> (John R. Mashey) [32828 bytes]

	<h2> Programming Languages </h2>

<br><a href="https://yarchive.net/comp/ada.html">Ada </a> (Henry Spencer) [3755 bytes]
<br><a href="https://yarchive.net/comp/aliasing.html">Aliasing </a> (Terje Mathisen) [1060 bytes]
<br><a href="https://yarchive.net/comp/alloca.html">Alloca </a> (Dennis Ritchie) [2383 bytes]
<br><a href="https://yarchive.net/comp/ansic_broken_unsigned.html">The ANSI C unsigned mess </a> (Chris Torek) [4523 bytes]
<br><a href="https://yarchive.net/comp/array_bounds_check.html">Array bounds checking </a> (Henry Spencer) [4905 bytes]
<br><a href="https://yarchive.net/comp/linux/bad_macros.html">Bad C macros </a> (Jamie Lokier) [1768 bytes]
<br><a href="https://yarchive.net/comp/caching_multidimensional_arrays.html">Caching multidimensional arrays </a> (Terje Mathisen) [2469 bytes]
<br><a href="https://yarchive.net/comp/call_by_name.html">Call by name</a> (John R. Mashey; Dennis Ritchie; Robert Corbett; William B. Clodius) [11927 bytes]
<br><a href="https://yarchive.net/comp/calling_conventions.html">Binary calling conventions </a> (Chris Torek) [17341 bytes]
<br><a href="https://yarchive.net/comp/c.html">C </a> (Dennis Ritchie; Douglas A. Gwyn; John A. Gregor, Jr.; Linus Torvalds) [15080 bytes]
<br><a href="https://yarchive.net/comp/c_main.html">C calling conventions for main() </a> (Dennis Ritchie) [1765 bytes]
<br><a href="https://yarchive.net/comp/c_extern.html">C "extern" </a> (Dennis Ritchie) [1659 bytes]
<br><a href="https://yarchive.net/comp/c_prototypes.html">C prototypes </a> (Chris Torek) [2396 bytes]
<br><a href="https://yarchive.net/comp/c_shifts.html">C shifts </a> (Dennis Ritchie) [1428 bytes]
<br><a href="https://yarchive.net/comp/linux/c99_preprocessor.html">The C99 preprocessor </a> (Al Viro) [2001 bytes]
<br><a href="https://yarchive.net/comp/linux/c_==.html">C's == operator</a> (Linus Torvalds) [2566 bytes]
<br><a href="https://yarchive.net/comp/cobol.html">COBOL </a> (Henry Spencer; Morten Reistad; Terje Mathisen) [17966 bytes]
<br><a href="https://yarchive.net/comp/compiler.html">Compiler design </a> (Henry Spencer) [13873 bytes]
<br><a href="https://yarchive.net/comp/compiler_optimizations.html">Compiler optimizations </a> (Andy Glew; Greg Lindahl; Linus Torvalds; Terje Mathisen) [13634 bytes]
<br><a href="https://yarchive.net/comp/come_from.html">COME FROM </a> (Robert Corbett) [1738 bytes]
<br><a href="https://yarchive.net/comp/const.html">The "const" qualifier in C </a> (Chris Torek; Linus Torvalds) [15452 bytes]
<br><a href="https://yarchive.net/comp/contravariance.html">Contravariance </a> (Henry Spencer) [4621 bytes]
<br><a href="https://yarchive.net/comp/cray_integers.html">Cray integers </a> (Dennis Ritchie) [1695 bytes]
<br><a href="https://yarchive.net/comp/debugger.html">Debuggers </a> (Douglas A. Gwyn) [1555 bytes]
<br><a href="https://yarchive.net/comp/decimal_fp.html">Decimal FP </a> (Glen Herrmannsfeldt; Mitch Alsup; Terje Mathisen; Wilco Dijkstra; hack@watson.ibm.com) [22994 bytes]
<br><a href="https://yarchive.net/comp/denormals.html">Denormals </a> (Terje Mathisen) [1672 bytes]
<br><a href="https://yarchive.net/comp/dereferencing_null.html">Dereferencing null </a> (John R. Mashey) [1254 bytes]
<br><a href="https://yarchive.net/comp/linux/empty_statement_macro.html">empty_statement macro </a> (Linus Torvalds) [2636 bytes]
<br><a href="https://yarchive.net/comp/fortran_operator_precedence.html">Fortran operator precedence weirdness </a> (Robert Corbett) [1735 bytes]
<br><a href="https://yarchive.net/comp/f2k_allocatable.html">F2K allocatable </a> (Jos R Bergervoet; Richard Maine) [10487 bytes]
<br><a href="https://yarchive.net/comp/f2k_optional_arguments.html">F2K optional arguments </a> (Robert Corbett) [2801 bytes]
<br><a href="https://yarchive.net/comp/f90_arrays.html">F90 arrays </a> (James Van Buskirk; Richard Maine; Robert Corbett) [18144 bytes]
<br><a href="https://yarchive.net/comp/f90.html">F90 </a> (Richard Maine) [7143 bytes]
<br><a href="https://yarchive.net/comp/f95.html">F95 </a> (Robert Corbett) [6536 bytes]
<br><a href="https://yarchive.net/comp/fast_division.html">Fast division </a> (Terje Mathisen) [3397 bytes]
<br><a href="https://yarchive.net/comp/floor_function.html">Floor function </a> (Chris Torek) [3372 bytes]
<br><a href="https://yarchive.net/comp/fortran_abi.html">Fortran ABI </a> (Robert Corbett) [3899 bytes]
<br><a href="https://yarchive.net/comp/fortran_aliasing.html">Fortran aliasing </a> (James Van Buskirk; Jos Bergervoet; Richard Maine; Robert Corbett) [9377 bytes]
<br><a href="https://yarchive.net/comp/fortran_carriage_control.html">Fortran carriage control </a> (Richard Maine) [5791 bytes]
<br><a href="https://yarchive.net/comp/fortran_extensions.html">Fortran extensions </a> (Robert Corbett) [3265 bytes]
<br><a href="https://yarchive.net/comp/fortran_functions.html">Fortran functions </a> (Robert Corbett) [7644 bytes]
<br><a href="https://yarchive.net/comp/fortran_intent.html">Fortran intent </a> (Richard Maine; Robert Corbett) [9394 bytes]
<br><a href="https://yarchive.net/comp/fortran_parse.html">Fortran parse </a> (Robert Corbett) [2731 bytes]
<br><a href="https://yarchive.net/comp/fortran_pointers.html">Fortran pointers </a> (Robert Corbett) [6712 bytes]
<br><a href="https://yarchive.net/comp/fortran_real*8.html">Fortran real*8 </a> (Richard Maine; Robert Corbett) [3769 bytes]
<br><a href="https://yarchive.net/comp/fortran_standard.html">Fortran standard </a> (Charles Russell; Robert Corbett) [28776 bytes]
<br><a href="https://yarchive.net/comp/fortran_tabs.html">Fortran tabs </a> (Robert Corbett) [1560 bytes]
<br><a href="https://yarchive.net/comp/gcc_optim.html">GCC optimization </a> (Chris Torek) [9693 bytes]
<br><a href="https://yarchive.net/comp/gpl_linking.html">The GPL and linking </a> (Theodore Y. Ts'o) [6738 bytes]
<br><a href="https://yarchive.net/comp/handwritten_parse_tables.html">Handwritten parse tables </a> (David R Tribble; Dennis Ritchie) [5340 bytes]
<br><a href="https://yarchive.net/comp/int_lexing.html">Integer lexing </a> (Henry Spencer) [1249 bytes]
<br><a href="https://yarchive.net/comp/java_bytecode_verification.html">Java bytecode verification </a> (David Chase) [2044 bytes]
<br><a href="https://yarchive.net/comp/latency.html">Latency </a> (John Mashey; Terje Mathisen) [4808 bytes]
<br><a href="https://yarchive.net/comp/ll_parsing.html">LL parsing </a> (Henry Spencer) [1525 bytes]
<br><a href="https://yarchive.net/comp/logical_xor.html">Logical XOR </a> (Dennis Ritchie) [3288 bytes]
<br><a href="https://yarchive.net/comp/longlong.html">The 64-bit integer type "long long": arguments and history.</a> (John R. Mashey) [77321 bytes]
<br><a href="https://yarchive.net/comp/longjmp.html">longjmp() </a> (Dennis Ritchie; Larry Jones) [6562 bytes]
<br><a href="https://yarchive.net/comp/malloc.html">malloc() </a> (Chris Torek; David Chase) [8046 bytes]
<br><a href="https://yarchive.net/comp/matrix_multiply.html">Matrix multiplication </a> (James B. Shearer) [1290 bytes]
<br><a href="https://yarchive.net/comp/norestrict.html">Norestrict </a> (Linus Torvalds) [18019 bytes]
<br><a href="https://yarchive.net/comp/parsers.html">Parsers </a> (Henry Spencer) [8805 bytes]
<br><a href="https://yarchive.net/comp/pl_i.html">Pl/I </a> (John R. Levine) [5521 bytes]
<br><a href="https://yarchive.net/comp/polyglot.html">Polyglot program </a> (Peter Lisle) [6103 bytes]
<br><a href="https://yarchive.net/comp/power_of_two.html">Power-of-two detection </a> (Bruce Hoult; John D. McCalpin) [2402 bytes]
<br><a href="https://yarchive.net/comp/sequence_points.html">Sequence points </a> (Dennis Ritchie) [2365 bytes]
<br><a href="https://yarchive.net/comp/shift_instruction.html">Shift instructions and the C language</a> (John R. Mashey) [43881 bytes]
<br><a href="https://yarchive.net/comp/signal_handlers.html">Signal handlers and errno </a> (Chris Torek) [3571 bytes]
<br><a href="https://yarchive.net/comp/sqrtm.html">Square root of a matrix </a> (Cleve Moler) [7489 bytes]
<br><a href="https://yarchive.net/comp/standard_readability.html">Standard readability </a> (Henry Spencer) [6581 bytes]
<br><a href="https://yarchive.net/comp/string_literals.html">String literals </a> (Dennis Ritchie; Douglas A. Gwyn) [7264 bytes]
<br><a href="https://yarchive.net/comp/strtok.html">strtok </a> (Chris Torek) [6787 bytes]
<br><a href="https://yarchive.net/comp/struct_return.html">Struct return </a> (Chris Torek) [7699 bytes]
<br><a href="https://yarchive.net/comp/stupid_pointer_tricks.html">Stupid pointer tricks </a> (David E. Wallace) [5150 bytes]
<br><a href="https://yarchive.net/comp/volatile.html">The C "volatile" qualifier</a> (John R. Mashey; Linus Torvalds; Theodore Tso) [92228 bytes]

	<h2> The Computer Business; Miscellaneous </h2>

<br><a href="https://yarchive.net/comp/chip_make.html">The chip making business</a> (John R. Mashey) [30676 bytes]
<br><a href="https://yarchive.net/comp/computer_spending.html">Computer spending </a> (John R. Mashey) [3943 bytes]
<br><a href="https://yarchive.net/comp/copy_protection.html">Copy protection </a> (John De Armond) [4974 bytes]
<br><a href="https://yarchive.net/comp/danish.html">Danish </a> (Terje Mathisen) [1106 bytes]
<br><a href="https://yarchive.net/comp/english.html">English </a> (Henry Spencer) [2154 bytes]
<br><a href="https://yarchive.net/comp/eta_peglar.html">The ETA Saga </a> (Rob Peglar) [38619 bytes]
<br><a href="https://yarchive.net/comp/evolution.html">Evolution </a> (Linus Torvalds; Larry McVoy) [23087 bytes]
<br><a href="https://yarchive.net/comp/gulf_stream.html">The Gulf Stream </a> (Norman Yarvin) [10575 bytes]
<br><a href="https://yarchive.net/comp/high_tech_stocks.html">High tech stocks </a> (John R. Mashey) [19025 bytes]
<br><a href="https://yarchive.net/comp/highways.html">Highways </a> (John F. Carr) [2490 bytes]
<br><a href="https://yarchive.net/comp/hospitals.html">Hospitals </a> (del cecchi) [1955 bytes]
<br><a href="https://yarchive.net/comp/insider.html">Insider Trading</a> (John R. Mashey) [14009 bytes]
<br><a href="https://yarchive.net/comp/media_reports.html">Media reports </a> (John R. Mashey) [6087 bytes]
<br><a href="https://yarchive.net/comp/mips_prospects.html">MIPS prospects (old) </a> (John R. Mashey) [40572 bytes]
<br><a href="https://yarchive.net/comp/mips_stock_glitch.html">The MIPS stock glitch</a> (John R. Mashey) [5395 bytes]
<br><a href="https://yarchive.net/comp/mimeograph.html">Mimeograph </a> (Dennis Ritchie) [1818 bytes]
<br><a href="https://yarchive.net/comp/norway.html">Norway </a> (Terje Mathisen) [5549 bytes]
<br><a href="https://yarchive.net/comp/oceanography.html">Oceanography </a> (John D. McCalpin) [2423 bytes]
<br><a href="https://yarchive.net/comp/out_of_print.html">Out-of-print books and tax law </a> (Henry Spencer) [1478 bytes]
<br><a href="https://yarchive.net/comp/patents.html">Patents </a> (John R. Mashey) [3195 bytes]
<br><a href="https://yarchive.net/comp/sgi_cray_acquisition.html">SGI Cray acquisition </a> (John R. Mashey; John D. McCalpin) [14327 bytes]
<br><a href="https://yarchive.net/comp/sgi_graphics.html">SGI and high-end graphics</a> (John R. Mashey, John F Carr) [18963 bytes]
<br><a href="https://yarchive.net/comp/sgi_market.html">SGI's customers</a> (John R. Mashey) [24248 bytes]
<br><a href="https://yarchive.net/comp/sgi_movies.html">SGI and the movies</a> (John R. Mashey) [18218 bytes]
<br><a href="https://yarchive.net/comp/sgi_nt.html">SGI and Windows NT</a> (John R. Mashey) [8183 bytes]
<br><a href="https://yarchive.net/comp/software_patents.html">Software patents </a> (Dennis Ritchie) [2127 bytes]
<br><a href="https://yarchive.net/comp/startups.html">High-tech innovation</a> (John Mashey) [15334 bytes]
<br><a href="https://yarchive.net/comp/stupid_lawsuits.html">Bell Labs and stupid lawsuits</a> (John R. Mashey) [2106 bytes]

	<h2> Hardware </h2>

<br><a href="https://yarchive.net/comp/linux/bad_blocks.html">Bad blocks </a> (Theodore Y. Ts'o) [20421 bytes]
<br><a href="https://yarchive.net/comp/board_reseat.html">Reseating circuit boards </a> (Henry Spencer) [782 bytes]
<br><a href="https://yarchive.net/comp/copper_chip_wires.html">Copper chip wires </a> (Mitch Alsup) [1604 bytes]
<br><a href="https://yarchive.net/comp/ethernet_crossover.html">Ethernet crossover cables </a> (H. Peter Anvin) [1381 bytes]
<br><a href="https://yarchive.net/comp/ethernet_encoding.html">Ethernet encoding </a> (Henry Spencer) [1647 bytes]
<br><a href="https://yarchive.net/comp/ethernet_grounding.html">Ethernet grounding </a> (Henry Spencer) [1064 bytes]
<br><a href="https://yarchive.net/comp/ethernet_patent.html">The Ethernet patent </a> (Henry Spencer) [1148 bytes]
<br><a href="https://yarchive.net/comp/ic_desolder.html">IC desoldering </a> (John De Armond) [1219 bytes]
<br><a href="https://yarchive.net/comp/no_parity.html">Non-parity memory </a> (Henry Spencer) [3248 bytes]
<br><a href="https://yarchive.net/comp/optical_fiber.html">Optical fiber </a> (Morten Reistad; Terje Mathisen) [37097 bytes]
<br><a href="https://yarchive.net/comp/rs232.html">RS232 signals </a> (anon) [8585 bytes]
<br><a href="https://yarchive.net/comp/rs232_rtscts.html">RS232 RTS/CTS lines </a> (Henry Spencer) [2000 bytes]
<br><a href="https://yarchive.net/comp/tales.html">Tales </a> (anon) [2483 bytes]

</td>
<td>

	<h2> Operating Systems </h2>

<br><a href="https://yarchive.net/comp/bourne_shell.html">The Bourne shell</a> (John R. Mashey) [11148 bytes]
<br><a href="https://yarchive.net/comp/bsd.html">BSD </a> (Dennis Ritchie) [2329 bytes]
<br><a href="https://yarchive.net/comp/deadlock.html">Deadlock </a> (John Mashey) [5305 bytes]
<br><a href="https://yarchive.net/comp/eio.html">EIO </a> (Douglas A. Gwyn) [1170 bytes]
<br><a href="https://yarchive.net/comp/ethernet_checksums.html">Ethernet checksums </a> (Jonathan Stone; Linus Torvalds; Terje Mathisen) [28032 bytes]
<br><a href="https://yarchive.net/comp/ftp_attack.html">An FTP security hole </a> (*Hobbit*) [10500 bytes]
<br><a href="https://yarchive.net/comp/large_pages.html">Large pages </a> (John Mashey) [6866 bytes]
<br><a href="https://yarchive.net/comp/microkernels.html">Microkernels </a> (Linus Torvalds) [69856 bytes]
<br><a href="https://yarchive.net/comp/minix.html">Minix </a> (Linus Torvalds) [3597 bytes]
<br><a href="https://yarchive.net/comp/mmap.html">Memory mapping</a> (John R. Mashey; Linus Torvalds) [14030 bytes]
<br><a href="https://yarchive.net/comp/real_time.html">Real time systems</a> (John R. Mashey) [7952 bytes]
<br><a href="https://yarchive.net/comp/sandboxes.html">Sandboxes </a> (Theodore Y. Ts'o) [3611 bytes]
<br><a href="https://yarchive.net/comp/setuid_mess.html">Setuid mess </a> (Casper H.S. Dik; Chris Torek) [14468 bytes]
<br><a href="https://yarchive.net/comp/synchronous_metadata.html">Synchronous metadata </a> (Linus Torvalds) [4283 bytes]
<br><a href="https://yarchive.net/comp/unix_command_names.html">Unix command names </a> (Henry Spencer) [2201 bytes]
<br><a href="https://yarchive.net/comp/zombie_process.html">Zombie processes </a> (Douglas A. Gwyn) [1430 bytes]

	<h3> Linux </h3>

<br><a href="https://yarchive.net/comp/linux/64bit_divide.html">64-bit divide </a> (Jamie Lokier; Linus Torvalds) [5581 bytes]
<br><a href="https://yarchive.net/comp/linux/abi_documentation.html">ABI documentation </a> (Linus Torvalds) [4882 bytes]
<br><a href="https://yarchive.net/comp/linux/ACCESS_ONCE.html">ACCESS_ONCE </a> (Linus Torvalds) [6081 bytes]
<br><a href="https://yarchive.net/comp/linux/acks.html">ACKs </a> (Linus Torvalds) [3634 bytes]
<br><a href="https://yarchive.net/comp/linux/acpi.html">ACPI </a> (Linus Torvalds) [2729 bytes]
<br><a href="https://yarchive.net/comp/linux/address_zero.html">Address zero </a> (Linus Torvalds) [5707 bytes]
<br><a href="https://yarchive.net/comp/linux/antivirus.html">Antivirus software </a> (Al Viro; Theodore Tso) [34379 bytes]
<br><a href="https://yarchive.net/comp/linux/assert.html">Assert </a> (Linus Torvalds) [1716 bytes]
<br><a href="https://yarchive.net/comp/linux/async_resume.html">Asynchronous resume </a> (Linus Torvalds) [82056 bytes]
<br><a href="https://yarchive.net/comp/linux/bayes_spam_filters.html">Bayes spam filters </a> (Linus Torvalds) [5412 bytes]
<br><a href="https://yarchive.net/comp/linux/benchmarks.html">Benchmarks </a> (Linus Torvalds) [7639 bytes]
<br><a href="https://yarchive.net/comp/linux/binary_modules.html">Binary modules </a> (Theodore Ts'o) [6344 bytes]
<br><a href="https://yarchive.net/comp/linux/bind_mounts.html">Bind mounts </a> (Al Viro) [1094 bytes]
<br><a href="https://yarchive.net/comp/linux/bios.html">Dealing with the BIOS </a> (Linus Torvalds) [16864 bytes]
<br><a href="https://yarchive.net/comp/linux/bios_boot_order.html">BIOS boot order </a> (H. Peter Anvin) [1316 bytes]
<br><a href="https://yarchive.net/comp/linux/bitfields.html">Bitfields </a> (Linus Torvalds; Al Viro) [7167 bytes]
<br><a href="https://yarchive.net/comp/linux/block_device_error_handling.html">Block device error handling </a> (Theodore Ts'o) [9824 bytes]
<br><a href="https://yarchive.net/comp/linux/block_layer.html">Block layer </a> (Linus Torvalds) [7000 bytes]
<br><a href="https://yarchive.net/comp/linux/bool.html">Bool </a> (H. Peter Anvin; Linus Torvalds) [10186 bytes]
<br><a href="https://yarchive.net/comp/linux/branch_hints.html">Branch hints </a> (Linus Torvalds) [10588 bytes]
<br><a href="https://yarchive.net/comp/linux/buffer_heads.html">Buffer heads </a> (Linus Torvalds; Theodore Tso) [24461 bytes]
<br><a href="https://yarchive.net/comp/linux/BUG.html">BUG() </a> (Linus Torvalds) [19318 bytes]
<br><a href="https://yarchive.net/comp/linux/bug_tracking.html">Bug tracking </a> (Linus Torvalds; Theodore Tso) [37198 bytes]
<br><a href="https://yarchive.net/comp/linux/build_log_diffs.html">Build log diffs </a> (Al Viro) [3477 bytes]
<br><a href="https://yarchive.net/comp/linux/bundling.html">Bundling </a> (Al Viro; Linus Torvalds) [15012 bytes]
<br><a href="https://yarchive.net/comp/linux/bytes_left_in_page_macro.html">Bytes-left-in-page macro </a> (Linus Torvalds) [2343 bytes]
<br><a href="https://yarchive.net/comp/linux/cache_coloring.html">Cache coloring </a> (Linus Torvalds) [12148 bytes]
<br><a href="https://yarchive.net/comp/linux/cache_games.html">Cache games </a> (Linus Torvalds) [4809 bytes]
<br><a href="https://yarchive.net/comp/linux/caches_read_ahead.html">Caches and read-ahead </a> (Daniel Phillips; H. Peter Anvin; Linus Torvalds) [33801 bytes]
<br><a href="https://yarchive.net/comp/linux/callback_type_safety.html">Callback type safety </a> (Al Viro) [10717 bytes]
<br><a href="https://yarchive.net/comp/linux/case_insensitive_filenames.html">Case insensitive filenames </a> (H. Peter Anvin; Ingo Molnar; Linus Torvalds; Theodore Ts'o; Al Viro) [80356 bytes]
<br><a href="https://yarchive.net/comp/linux/c++.html">C++ </a> (Al Viro; Linus Torvalds; Theodore Ts'o) [14772 bytes]
<br><a href="https://yarchive.net/comp/linux/c_concurrency.html">C support for concurrency </a> (Linus Torvalds) [2164 bytes]
<br><a href="https://yarchive.net/comp/linux/checkpointing.html">Checkpointing </a> (Linus Torvalds) [3294 bytes]
<br><a href="https://yarchive.net/comp/linux/child-runs-first.html">Child-runs-first </a> (Linus Torvalds) [2217 bytes]
<br><a href="https://yarchive.net/comp/linux/chroot.html">chroot </a> (Al Viro; Theodore Tso) [6538 bytes]
<br><a href="https://yarchive.net/comp/linux/cli_sti.html">CLI/STI </a> (Linus Torvalds) [1533 bytes]
<br><a href="https://yarchive.net/comp/linux/close_return_value.html">close()'s return value </a> (Linus Torvalds) [3174 bytes]
<br><a href="https://yarchive.net/comp/linux/cmov.html">CMOV </a> (Linus Torvalds) [11509 bytes]
<br><a href="https://yarchive.net/comp/linux/cmpxchg_ll_sc_portability.html">cmpxchg, LL/SC, and portability </a> (Al Viro; Linus Torvalds) [17064 bytes]
<br><a href="https://yarchive.net/comp/linux/code_complexity.html">Code complexity </a> (Linus Torvalds) [3470 bytes]
<br><a href="https://yarchive.net/comp/linux/code_size.html">Code size </a> (Linus Torvalds) [4288 bytes]
<br><a href="https://yarchive.net/comp/linux/coding_style.html">Coding style </a> (Al Viro; Larry McVoy; Linus Torvalds; Theodore Tso) [64473 bytes]
<br><a href="https://yarchive.net/comp/linux/collective_work_copyright.html">Collective work copyright </a> (Linus Torvalds) [9886 bytes]
<br><a href="https://yarchive.net/comp/linux/commit_messages.html">Commit messages </a> (Linus Torvalds) [3263 bytes]
<br><a href="https://yarchive.net/comp/linux/compatibility.html">Compatibility </a> (Al Viro; Linus Torvalds; Theodore Ts'o) [36511 bytes]
<br><a href="https://yarchive.net/comp/linux/compatibility_wrappers.html">Compatibility wrappers </a> (Linus Torvalds) [4398 bytes]
<br><a href="https://yarchive.net/comp/linux/compiler_barriers.html">Compiler barriers </a> (Linus Torvalds) [4393 bytes]
<br><a href="https://yarchive.net/comp/linux/conditional_assignments.html">Conditional assignments </a> (Linus Torvalds) [2996 bytes]
<br><a href="https://yarchive.net/comp/linux/CONFIG_LOCALVERSION_AUTO.html">CONFIG_LOCALVERSION_AUTO </a> (Linus Torvalds) [2688 bytes]
<br><a href="https://yarchive.net/comp/linux/config_pm_trace.html">CONFIG_PM_TRACE </a> (Linus Torvalds) [2269 bytes]
<br><a href="https://yarchive.net/comp/linux/constant_expressions.html">Constant expressions </a> (Al Viro; Linus Torvalds) [6373 bytes]
<br><a href="https://yarchive.net/comp/linux/cpu_reliability.html">CPU reliability </a> (Linus Torvalds) [1814 bytes]
<br><a href="https://yarchive.net/comp/linux/crash_dumps.html">Crash dumps </a> (Linus Torvalds) [10477 bytes]
<br><a href="https://yarchive.net/comp/linux/dd_rescue.html">dd_rescue </a> (Theodore Tso) [3060 bytes]
<br><a href="https://yarchive.net/comp/linux/deadlock.html">Deadlock </a> (Greg KH; Linus Torvalds; Al Viro) [17432 bytes]
<br><a href="https://yarchive.net/comp/linux/debuggers.html">Debuggers </a> (Al Viro; Larry McVoy; Linus Torvalds; Theodore Y. Ts'o) [28184 bytes]
<br><a href="https://yarchive.net/comp/linux/development_speed.html">Development speed </a> (Al Viro; Linus Torvalds; Theodore Tso) [36071 bytes]
<br><a href="https://yarchive.net/comp/linux/devfs.html">devfs </a> (Al Viro; Theodore Ts'o) [23268 bytes]
<br><a href="https://yarchive.net/comp/linux/device_numbers.html">Device numbers </a> (H. Peter Anvin; Linus Torvalds; Theodore Ts'o; Al Viro) [45554 bytes]
<br><a href="https://yarchive.net/comp/linux/device_probing.html">Device probing </a> (Linus Torvalds) [12511 bytes]
<br><a href="https://yarchive.net/comp/linux/dev_permissions.html">/dev permissions </a> (Linus Torvalds) [1901 bytes]
<br><a href="https://yarchive.net/comp/linux/dev_random.html">/dev/random </a> (H. Peter Anvin; Theodore Y. Ts'o) [85163 bytes]
<br><a href="https://yarchive.net/comp/linux/dirty_limits.html">Dirty limits </a> (Linus Torvalds) [11525 bytes]
<br><a href="https://yarchive.net/comp/linux/disable_irq_races.html">disable_irq races </a> (Linus Torvalds; Al Viro) [26415 bytes]
<br><a href="https://yarchive.net/comp/linux/disk_corruption.html">Disk corruption </a> (Theodore Ts'o;) [14162 bytes]
<br><a href="https://yarchive.net/comp/linux/disk_snapshot.html">Disk snapshots </a> (Theodore Tso) [1895 bytes]
<br><a href="https://yarchive.net/comp/linux/documentation.html">Documentation </a> (Linus Torvalds) [1406 bytes]
<br><a href="https://yarchive.net/comp/linux/dram_power_savings.html">DRAM power savings </a> (Linus Torvalds) [8571 bytes]
<br><a href="https://yarchive.net/comp/linux/drive_caches.html">Drive caches </a> (Linus Torvalds) [16400 bytes]
<br><a href="https://yarchive.net/comp/linux/drm.html">DRM </a> (Linus Torvalds) [21104 bytes]
<br><a href="https://yarchive.net/comp/linux/dual_license_bsd_gpl.html">Dual license BSD/GPL </a> (Linus Torvalds; Theodore Tso) [19263 bytes]
<br><a href="https://yarchive.net/comp/linux/dump.html">dump </a> (Linus Torvalds) [11522 bytes]
<br><a href="https://yarchive.net/comp/linux/e2image.html">e2image </a> (Theodore Ts'o) [2631 bytes]
<br><a href="https://yarchive.net/comp/linux/edge_triggered_interrupts.html">Edge-triggered interrupts </a> (Linus Torvalds) [35208 bytes]
<br><a href="https://yarchive.net/comp/linux/efi.html">EFI </a> (Linus Torvalds) [4192 bytes]
<br><a href="https://yarchive.net/comp/linux/empty_function_calls.html">Empty function calls' cost </a> (Linus Torvalds) [4194 bytes]
<br><a href="https://yarchive.net/comp/linux/errno.html">errno </a> (Linus Torvalds) [2011 bytes]
<br><a href="https://yarchive.net/comp/linux/error_jumps.html">Error jumps </a> (Linus Torvalds) [2463 bytes]
<br><a href="https://yarchive.net/comp/linux/event_queues.html">Event queues </a> (Linus Torvalds) [32863 bytes]
<br><a href="https://yarchive.net/comp/linux/everything_is_file.html">The everything-is-a-file principle </a> (Linus Torvalds) [21195 bytes]
<br><a href="https://yarchive.net/comp/linux/execute-only.html">Execute-only </a> (Linus Torvalds) [3927 bytes]
<br><a href="https://yarchive.net/comp/linux/export_symbol_gpl.html">EXPORT_SYMBOL_GPL </a> (Linus Torvalds) [1655 bytes]
<br><a href="https://yarchive.net/comp/linux/extreme_system_recovery.html">Extreme system recovery </a> (Al Viro) [6470 bytes]
<br><a href="https://yarchive.net/comp/linux/fairness.html">Fairness </a> (Ingo Molnar; Linus Torvalds; Ulrich Drepper) [24826 bytes]
<br><a href="https://yarchive.net/comp/linux/file_hole_caching.html">File hole caching </a> (Linus Torvalds) [1554 bytes]
<br><a href="https://yarchive.net/comp/linux/files_as_directories.html">Files as directories </a> (Linus Torvalds; Theodore Ts'o; Al Viro) [118379 bytes]
<br><a href="https://yarchive.net/comp/linux/filesystem_compatibility.html">Filesystem compatibility </a> (Theodore Tso) [2204 bytes]
<br><a href="https://yarchive.net/comp/linux/flash_card_errors.html">Flash card errors </a> (H. Peter Anvin; Theodore Tso) [8266 bytes]
<br><a href="https://yarchive.net/comp/linux/fork_race.html">Fork race </a> (Linus Torvalds) [2197 bytes]
<br><a href="https://yarchive.net/comp/linux/fp_state_save.html">Saving the floating-point state </a> (Linus Torvalds) [10863 bytes]
<br><a href="https://yarchive.net/comp/linux/fragmentation_avoidance.html">Fragmentation avoidance </a> (Linus Torvalds) [48733 bytes]
<br><a href="https://yarchive.net/comp/linux/framebuffer.html">The framebuffer code </a> (Linus Torvalds) [1931 bytes]
<br><a href="https://yarchive.net/comp/linux/frequency_scaling.html">Frequency scaling </a> (Linus Torvalds) [18171 bytes]
<br><a href="https://yarchive.net/comp/linux/function_pointers.html">Function pointers </a> (Linus Torvalds) [1056 bytes]
<br><a href="https://yarchive.net/comp/linux/gcc_asm.html">gcc assembly </a> (Linus Torvalds) [13771 bytes]
<br><a href="https://yarchive.net/comp/linux/gcc_attributes.html">gcc attributes </a> (Al Viro; Linus Torvalds) [29806 bytes]
<br><a href="https://yarchive.net/comp/linux/gcc.html">gcc </a> (Al Viro; H. Peter Anvin; Linus Torvalds; Theodore Y. Ts'o) [139556 bytes]
<br><a href="https://yarchive.net/comp/linux/gcc_inline.html">gcc "inline" </a> (H. Peter Anvin; Linus Torvalds; Theodore Tso) [86941 bytes]
<br><a href="https://yarchive.net/comp/linux/gcc_vs_kernel_stability.html">gcc and kernel stability </a> (Linus Torvalds) [15853 bytes]
<br><a href="https://yarchive.net/comp/linux/generic.html">Generic mechanisms </a> (Linus Torvalds) [8581 bytes]
<br><a href="https://yarchive.net/comp/linux/getpid_caching.html">getpid() caching </a> (Linus Torvalds) [15203 bytes]
<br><a href="https://yarchive.net/comp/linux/get_unaligned.html">get_unaligned() </a> (Linus Torvalds) [4548 bytes]
<br><a href="https://yarchive.net/comp/linux/git_basic.html">git basic usage </a> (Linus Torvalds) [8284 bytes]
<br><a href="https://yarchive.net/comp/linux/git_bisect.html">git bisect </a> (Linus Torvalds) [32500 bytes]
<br><a href="https://yarchive.net/comp/linux/git_branches.html">git branches </a> (Linus Torvalds) [12910 bytes]
<br><a href="https://yarchive.net/comp/linux/git_btrfs_history.html">git btrfs history </a> (Linus Torvalds) [3514 bytes]
<br><a href="https://yarchive.net/comp/linux/git.html">git </a> (Linus Torvalds; Theodore Ts'o) [87731 bytes]
<br><a href="https://yarchive.net/comp/linux/git_merges_from_upstream.html">Git merges from upstream </a> (Linus Torvalds) [18183 bytes]
<br><a href="https://yarchive.net/comp/linux/git_rebase.html">git rebase </a> (Al Viro; Linus Torvalds; Theodore Tso) [101693 bytes]
<br><a href="https://yarchive.net/comp/linux/global_variables.html">Global variables </a> (Theodore Tso) [1600 bytes]
<br><a href="https://yarchive.net/comp/linux/gpl3.html">The GPL3 </a> (Al Viro; Linus Torvalds) [13983 bytes]
<br><a href="https://yarchive.net/comp/linux/gpl.html">The GPL </a> (Al Viro; Larry McVoy; Linus Torvalds; Theodore Ts'o) [150693 bytes]
<br><a href="https://yarchive.net/comp/linux/gpl_modules.html">The GPL and modules </a> (Linus Torvalds; Theodore Ts'o; Al Viro) [94008 bytes]
<br><a href="https://yarchive.net/comp/linux/hardware_glitches.html">Hardware glitches </a> (Linus Torvalds) [9670 bytes]
<br><a href="https://yarchive.net/comp/linux/hibernation.html">Hibernation </a> (Linus Torvalds) [110016 bytes]
<br><a href="https://yarchive.net/comp/linux/highmem.html">Highmem </a> (H. Peter Anvin; Linus Torvalds) [15703 bytes]
<br><a href="https://yarchive.net/comp/linux/hurd.html">Hurd </a> (Larry McVoy; Theodore Ts'o) [7205 bytes]
<br><a href="https://yarchive.net/comp/linux/HZ.html">HZ </a> (Linus Torvalds) [30583 bytes]
<br><a href="https://yarchive.net/comp/linux/ifdefs.html">ifdefs </a> (Linus Torvalds) [3225 bytes]
<br><a href="https://yarchive.net/comp/linux/in_interrupt.html">in_interrupt() </a> (Linus Torvalds; Theodore Y. Ts'o) [3302 bytes]
<br><a href="https://yarchive.net/comp/linux/initramfs.html">Initramfs </a> (Al Viro; Linus Torvalds) [5854 bytes]
<br><a href="https://yarchive.net/comp/linux/inline_assembly.html">Inline assembly </a> (H. Peter Anvin; Linus Torvalds) [19062 bytes]
<br><a href="https://yarchive.net/comp/linux/inline.html">Inlining functions </a> (Linus Torvalds) [17099 bytes]
<br><a href="https://yarchive.net/comp/linux/innovation.html">Innovation </a> (Al Viro) [3185 bytes]
<br><a href="https://yarchive.net/comp/linux/int_types.html">Integer types in the kernel </a> (Linus Torvalds; Al Viro) [5546 bytes]
<br><a href="https://yarchive.net/comp/linux/ioctl.html">ioctl() </a> (Al Viro; Linus Torvalds) [27092 bytes]
<br><a href="https://yarchive.net/comp/linux/io_space_accesses.html">I/O space accesses </a> (Linus Torvalds) [16057 bytes]
<br><a href="https://yarchive.net/comp/linux/irq_routing.html">IRQ routing </a> (Linus Torvalds) [6371 bytes]
<br><a href="https://yarchive.net/comp/linux/journaling_filesystems.html">Journaling filesystems </a> (Theodore Y. Ts'o) [5336 bytes]
<br><a href="https://yarchive.net/comp/linux/kernel_configuration.html">Kernel configuration </a> (Linus Torvalds; Theodore Tso) [29836 bytes]
<br><a href="https://yarchive.net/comp/linux/kernel_deadlock_debug.html">Kernel deadlock debugging </a> (Linus Torvalds) [4953 bytes]
<br><a href="https://yarchive.net/comp/linux/kernel_dumps.html">Kernel dumps </a> (Linus Torvalds; Theodore Tso) [5484 bytes]
<br><a href="https://yarchive.net/comp/linux/kernel_fp.html">Kernel floating-point </a> (Linus Torvalds) [3517 bytes]
<br><a href="https://yarchive.net/comp/linux/kernel_headers.html">Kernel headers </a> (Al Viro; H. Peter Anvin; Linus Torvalds) [41700 bytes]
<br><a href="https://yarchive.net/comp/linux/kernel.html">The kernel's role </a> (Linus Torvalds) [9704 bytes]
<br><a href="https://yarchive.net/comp/linux/kinit.html">kinit </a> (Al Viro; H. Peter Anvin; Linus Torvalds; Theodore Tso) [20839 bytes]
<br><a href="https://yarchive.net/comp/linux/large_pages.html">Large pages </a> (Linus Torvalds) [16018 bytes]
<br><a href="https://yarchive.net/comp/linux/latency.html">Latency </a> (Linus Torvalds) [2746 bytes]
<br><a href="https://yarchive.net/comp/linux/libgcc.html">libgcc </a> (Linus Torvalds) [7604 bytes]
<br><a href="https://yarchive.net/comp/linux/light_weight_processes.html">Light-weight processes </a> (David S. Miller; Larry McVoy; Zack Weinberg) [31949 bytes]
<br><a href="https://yarchive.net/comp/linux/linus.html">Linus Torvalds </a> (Linus Torvalds) [2335 bytes]
<br><a href="https://yarchive.net/comp/linux/linux_dev_policy.html">Linux development policy </a> (Linus Torvalds) [2805 bytes]
<br><a href="https://yarchive.net/comp/linux/linux_speed.html">Linux's speed </a> (Linus Torvalds) [2297 bytes]
<br><a href="https://yarchive.net/comp/linux/linux_trademark.html">The Linux trademark </a> (Linus Torvalds) [6140 bytes]
<br><a href="https://yarchive.net/comp/linux/lists.html">Lists </a> (Linus Torvalds) [2515 bytes]
<br><a href="https://yarchive.net/comp/linux/lock_costs.html">Lock costs </a> (Linus Torvalds) [4814 bytes]
<br><a href="https://yarchive.net/comp/linux/locking.html">Locking </a> (Linus Torvalds) [21406 bytes]
<br><a href="https://yarchive.net/comp/linux/lock_ordering.html">Lock ordering </a> (Linus Torvalds) [3915 bytes]
<br><a href="https://yarchive.net/comp/linux/log_structured_filesystems.html">Log structured filesystems </a> (Theodore Tso) [7269 bytes]
<br><a href="https://yarchive.net/comp/linux/log_timestamp_ordering.html">Log timestamp ordering </a> (Linus Torvalds) [12127 bytes]
<br><a href="https://yarchive.net/comp/linux/lookup_tables.html">Lookup tables </a> (Linus Torvalds) [2508 bytes]
<br><a href="https://yarchive.net/comp/linux/lost+found.html">lost+found </a> (Theodore Y. Ts'o) [2064 bytes]
<br><a href="https://yarchive.net/comp/linux/maintainers.html">Maintainers </a> (Linus Torvalds) [39113 bytes]
<br><a href="https://yarchive.net/comp/linux/malloc_0.html">malloc(0) </a> (Linus Torvalds) [7643 bytes]
<br><a href="https://yarchive.net/comp/linux/map_copy.html">MAP_COPY </a> (Linus Torvalds) [9843 bytes]
<br><a href="https://yarchive.net/comp/linux/massive_cross-builds.html">Massive cross-builds </a> (Al Viro) [10643 bytes]
<br><a href="https://yarchive.net/comp/linux/memcpy.html">memcpy </a> (Linus Torvalds) [1707 bytes]
<br><a href="https://yarchive.net/comp/linux/memory_barriers.html">Memory barriers </a> (Linus Torvalds) [24459 bytes]
<br><a href="https://yarchive.net/comp/linux/memory_pressure_code.html">Memory pressure code </a> (Linus Torvalds) [14078 bytes]
<br><a href="https://yarchive.net/comp/linux/merge_window.html">The merge window </a> (Linus Torvalds) [18914 bytes]
<br><a href="https://yarchive.net/comp/linux/micro-optimizations.html">Micro-optimizations </a> (Linus Torvalds) [2426 bytes]
<br><a href="https://yarchive.net/comp/linux/minixfs.html">minixfs </a> (Al Viro; Linus Torvalds) [12580 bytes]
<br><a href="https://yarchive.net/comp/linux/mmap_portability.html">mmap() portability </a> (Linus Torvalds) [7131 bytes]
<br><a href="https://yarchive.net/comp/linux/modversions.html">MODVERSIONS </a> (Linus Torvalds) [7285 bytes]
<br><a href="https://yarchive.net/comp/linux/more_evil_than.html">More evil than... </a> (Larry McVoy) [1254 bytes]
<br><a href="https://yarchive.net/comp/linux/mounts.html">Mounts </a> (Al Viro; Linus Torvalds) [9919 bytes]
<br><a href="https://yarchive.net/comp/linux/mtime_mmap.html">mtime changes with mmap() </a> (Linus Torvalds) [3649 bytes]
<br><a href="https://yarchive.net/comp/linux/mtu_discovery.html">MTU discovery </a> (Theodore Y. Ts'o) [11101 bytes]
<br><a href="https://yarchive.net/comp/linux/multiple_includes.html">Multiple includes </a> (Linus Torvalds) [1304 bytes]
<br><a href="https://yarchive.net/comp/linux/must_check.html">must_check </a> (Linus Torvalds) [13071 bytes]
<br><a href="https://yarchive.net/comp/linux/negative_dentries.html">Negative dentries </a> (Linus Torvalds) [2379 bytes]
<br><a href="https://yarchive.net/comp/linux/network_filesystems.html">Network filesystems </a> (Al Viro) [2907 bytes]
<br><a href="https://yarchive.net/comp/linux/nfs.html">NFS </a> (Linus Torvalds) [4352 bytes]
<br><a href="https://yarchive.net/comp/linux/no_irq.html">NO_IRQ </a> (Linus Torvalds) [7379 bytes]
<br><a href="https://yarchive.net/comp/linux/nop.html">NOP </a> (Linus Torvalds) [2329 bytes]
<br><a href="https://yarchive.net/comp/linux/o_direct.html">O_DIRECT </a> (Larry McVoy; Linus Torvalds) [52865 bytes]
<br><a href="https://yarchive.net/comp/linux/oops_decoding.html">Oops decoding </a> (Al Viro; Linus Torvalds) [34176 bytes]
<br><a href="https://yarchive.net/comp/linux/Os.html">-Os </a> (Linus Torvalds) [3063 bytes]
<br><a href="https://yarchive.net/comp/linux/page_cache.html">The page cache </a> (Linus Torvalds) [5480 bytes]
<br><a href="https://yarchive.net/comp/linux/page_coloring.html">Page coloring </a> (Larry McVoy; Linus Torvalds) [6901 bytes]
<br><a href="https://yarchive.net/comp/linux/page_sizes.html">Page sizes </a> (Linus Torvalds) [29511 bytes]
<br><a href="https://yarchive.net/comp/linux/page_tables.html">Page tables </a> (Linus Torvalds; Paul Mackerras) [43972 bytes]
<br><a href="https://yarchive.net/comp/linux/page_zeroing_strategy.html">Page zeroing strategy </a> (Linus Torvalds) [12354 bytes]
<br><a href="https://yarchive.net/comp/linux/partial_reads_writes.html">Partial reads and writes </a> (Larry McVoy; Linus Torvalds) [12604 bytes]
<br><a href="https://yarchive.net/comp/linux/patches.html">Patches </a> (Al Viro; Kirill Korotaev; Linus Torvalds; Theodore Tso) [34010 bytes]
<br><a href="https://yarchive.net/comp/linux/patch_tracking.html">Patch tracking </a> (Linus Torvalds) [19166 bytes]
<br><a href="https://yarchive.net/comp/linux/patents.html">Patents </a> (Al Viro; Larry McVoy; Linus Torvalds; Theodore Tso) [14147 bytes]
<br><a href="https://yarchive.net/comp/linux/pc_clocks.html">PC clocks </a> (H. Peter Anvin) [3857 bytes]
<br><a href="https://yarchive.net/comp/linux/penguin.html">The penguin logo </a> (Linus Torvalds) [1043 bytes]
<br><a href="https://yarchive.net/comp/linux/pipe_packetize.html">Using pipes to send a packet stream </a> (Linus Torvalds) [1395 bytes]
<br><a href="https://yarchive.net/comp/linux/pivot_root.html">pivot_root() </a> (Linus Torvalds) [3382 bytes]
<br><a href="https://yarchive.net/comp/linux/plugging.html">I/O plugging </a> (Jens Axboe; Linus Torvalds) [22911 bytes]
<br><a href="https://yarchive.net/comp/linux/pointer_overlap.html">Pointer overlap </a> (Linus Torvalds) [3848 bytes]
<br><a href="https://yarchive.net/comp/linux/pointer_subtraction.html">Pointer subtraction </a> (Al Viro; Linus Torvalds) [4764 bytes]
<br><a href="https://yarchive.net/comp/linux/point_to_point_links.html">Point-to-point links </a> (Linus Torvalds) [4504 bytes]
<br><a href="https://yarchive.net/comp/linux/pop_instruction_speed.html">POP instruction speed </a> (Jeff Garzik; Linus Torvalds) [21275 bytes]
<br><a href="https://yarchive.net/comp/linux/priority_inheritance.html">Priority inheritance </a> (Linus Torvalds) [3952 bytes]
<br><a href="https://yarchive.net/comp/linux/process_wakeup.html">Process wakeup </a> (Linus Torvalds) [2725 bytes]
<br><a href="https://yarchive.net/comp/linux/proc_self_fd.html">/proc/self/fd </a> (Theodore Tso) [2043 bytes]
<br><a href="https://yarchive.net/comp/linux/ptrace_mmap.html">ptrace and mmap </a> (Linus Torvalds) [7146 bytes]
<br><a href="https://yarchive.net/comp/linux/ptrace_self_attach.html">ptrace() self-attach </a> (Linus Torvalds) [4480 bytes]
<br><a href="https://yarchive.net/comp/linux/ptrace_signals.html">ptrace() and signals </a> (Linus Torvalds) [17993 bytes]
<br><a href="https://yarchive.net/comp/linux/put_user.html">put_user() </a> (Linus Torvalds) [4292 bytes]
<br><a href="https://yarchive.net/comp/linux/quirks.html">Quirks </a> (Linus Torvalds) [6629 bytes]
<br><a href="https://yarchive.net/comp/linux/raid0.html">RAID0 </a> (Linus Torvalds) [8803 bytes]
<br><a href="https://yarchive.net/comp/linux/readahead.html">Readahead </a> (Linus Torvalds) [1903 bytes]
<br><a href="https://yarchive.net/comp/linux/readdir_nonatomicity.html">readdir() nonatomicity </a> (Theodore Ts'o) [5534 bytes]
<br><a href="https://yarchive.net/comp/linux/recursive_locks.html">Recursive locks </a> (Linus Torvalds) [8847 bytes]
<br><a href="https://yarchive.net/comp/linux/reference_counting.html">Reference counting </a> (Linus Torvalds) [4766 bytes]
<br><a href="https://yarchive.net/comp/linux/regression_tracking.html">Regression tracking </a> (Linus Torvalds) [26622 bytes]
<br><a href="https://yarchive.net/comp/linux/reiser4.html">Reiser4 </a> (Christoph Hellwig; Linus Torvalds; Theodore Ts'o; Al Viro) [26551 bytes]
<br><a href="https://yarchive.net/comp/linux/resource_forks.html">Resource forks </a> (Linus Torvalds; Theodore Y. Ts'o) [26100 bytes]
<br><a href="https://yarchive.net/comp/linux/restrict.html">C99's 'restrict' keyword </a> (Linus Torvalds) [3372 bytes]
<br><a href="https://yarchive.net/comp/linux/revision_control_filesystem.html">Revision-control filesystem </a> (Linus Torvalds) [1970 bytes]
<br><a href="https://yarchive.net/comp/linux/rtlinux.html">RTLinux </a> (Linus Torvalds) [10020 bytes]
<br><a href="https://yarchive.net/comp/linux/rwlocks.html">rwlocks </a> (Linus Torvalds) [14504 bytes]
<br><a href="https://yarchive.net/comp/linux/scheduler.html">The scheduler </a> (Linus Torvalds) [7765 bytes]
<br><a href="https://yarchive.net/comp/linux/scsi_ids.html">SCSI ids </a> (Linus Torvalds) [7915 bytes]
<br><a href="https://yarchive.net/comp/linux/scsi_layer.html">The SCSI layer </a> (Theodore Tso) [11473 bytes]
<br><a href="https://yarchive.net/comp/linux/security_bugs.html">Security bugs </a> (Al Viro; Linus Torvalds; Theodore Tso) [36711 bytes]
<br><a href="https://yarchive.net/comp/linux/security_lists.html">Security mailing lists </a> (Alan Cox; Linus Torvalds; Theodore Ts'o) [59846 bytes]
<br><a href="https://yarchive.net/comp/linux/security.html">Security </a> (Linus Torvalds; Theodore Tso) [37230 bytes]
<br><a href="https://yarchive.net/comp/linux/select.html">select() </a> (Linus Torvalds) [4180 bytes]
<br><a href="https://yarchive.net/comp/linux/selinux.html">SELinux </a> (Al Viro; Ingo Molnar; Linus Torvalds; Theodore Tso) [17087 bytes]
<br><a href="https://yarchive.net/comp/linux/semaphores.html">Semaphores </a> (Linus Torvalds) [54756 bytes]
<br><a href="https://yarchive.net/comp/linux/sendfile.html">sendfile() </a> (Linus Torvalds) [38139 bytes]
<br><a href="https://yarchive.net/comp/linux/serial.html">The serial port driver </a> (Theodore Tso) [4737 bytes]
<br><a href="https://yarchive.net/comp/linux/shift_by_32.html">32-bit shifts </a> (Linus Torvalds) [2540 bytes]
<br><a href="https://yarchive.net/comp/linux/signal_safe.html">Signal-safe </a> (Linus Torvalds) [1395 bytes]
<br><a href="https://yarchive.net/comp/linux/signals_restart.html">Signals and system call restarting </a> (Theodore Y. Ts'o) [2419 bytes]
<br><a href="https://yarchive.net/comp/linux/signal_struct.html">signal_struct </a> (Linus Torvalds) [2894 bytes]
<br><a href="https://yarchive.net/comp/linux/signed_divisions.html">Signed divisions </a> (Al Viro; Linus Torvalds) [8195 bytes]
<br><a href="https://yarchive.net/comp/linux/signed_pointers.html">Signed pointers </a> (Linus Torvalds) [1398 bytes]
<br><a href="https://yarchive.net/comp/linux/signed_unsigned_casts.html">Signed&lt;-&gt;unsigned casts </a> (Linus Torvalds) [3023 bytes]
<br><a href="https://yarchive.net/comp/linux/slab.html">The slab allocator </a> (Linus Torvalds) [7349 bytes]
<br><a href="https://yarchive.net/comp/linux/small_static_binaries.html">Small static binaries </a> (Ulrich Drepper; Zack Weinberg) [6824 bytes]
<br><a href="https://yarchive.net/comp/linux/smp_costs.html">SMP costs </a> (Linus Torvalds) [2184 bytes]
<br><a href="https://yarchive.net/comp/linux/socklen_t.html">socklen_t </a> (Linus Torvalds) [1905 bytes]
<br><a href="https://yarchive.net/comp/linux/soft_update.html">Soft Update filesystems </a> (Theodore Ts'o) [7906 bytes]
<br><a href="https://yarchive.net/comp/linux/software_prefetching.html">Software prefetching from memory </a> (Linus Torvalds) [4011 bytes]
<br><a href="https://yarchive.net/comp/linux/software_quality.html">Software quality </a> (Al Viro) [4574 bytes]
<br><a href="https://yarchive.net/comp/linux/sparse.html">Sparse </a> (Linus Torvalds; Al Viro) [34099 bytes]
<br><a href="https://yarchive.net/comp/linux/specs.html">Specs </a> (Al Viro; Linus Torvalds; Theodore Ts'o) [14055 bytes]
<br><a href="https://yarchive.net/comp/linux/spinlocks.html">Spinlocks </a> (Ingo Molnar; Linus Torvalds; Paul E. McKenney) [59161 bytes]
<br><a href="https://yarchive.net/comp/linux/splice.html">splice() </a> (Linus Torvalds) [35592 bytes]
<br><a href="https://yarchive.net/comp/linux/stallman.html">Richard Stallman </a> (Al Viro) [1266 bytes]
<br><a href="https://yarchive.net/comp/linux/stat_size.html">stat() sizes of pipes/sockets </a> (Linus Torvalds) [1789 bytes]
<br><a href="https://yarchive.net/comp/linux/store_buffer.html">CPU store buffers </a> (Linus Torvalds) [8142 bytes]
<br><a href="https://yarchive.net/comp/linux/strncpy.html">strncpy() </a> (Linus Torvalds) [1519 bytes]
<br><a href="https://yarchive.net/comp/linux/struct_declarations.html">Struct declarations </a> (Linus Torvalds) [2683 bytes]
<br><a href="https://yarchive.net/comp/linux/struct_init.html">Struct initialization </a> (Al Viro; Linus Torvalds) [13396 bytes]
<br><a href="https://yarchive.net/comp/linux/stupid_mail_clients.html">Stupid mail clients </a> (Linus Torvalds) [5129 bytes]
<br><a href="https://yarchive.net/comp/linux/sun.html">Sun </a> (Linus Torvalds) [4940 bytes]
<br><a href="https://yarchive.net/comp/linux/suspend.html">Suspend </a> (Linus Torvalds; Theodore Tso) [16757 bytes]
<br><a href="https://yarchive.net/comp/linux/symbolic_links_git.html">Symbolic links and git </a> (Linus Torvalds) [1437 bytes]
<br><a href="https://yarchive.net/comp/linux/symbol_printing.html">Symbol printing </a> (Linus Torvalds) [4754 bytes]
<br><a href="https://yarchive.net/comp/linux/sysfs.html">Sysfs </a> (Al Viro; Theodore Tso) [19319 bytes]
<br><a href="https://yarchive.net/comp/linux/syslog_clogs.html">Syslog clogs </a> (Linus Torvalds) [1436 bytes]
<br><a href="https://yarchive.net/comp/linux/system_clock_localtime.html">Hardware clock on localtime, and fsck </a> (Martin Schwidefsky; Michal Schmidt; Theodore Tso) [8467 bytes]
<br><a href="https://yarchive.net/comp/linux/thread_synchronous_signals.html">Thread-synchronous signals </a> (Linus Torvalds) [4482 bytes]
<br><a href="https://yarchive.net/comp/linux/timer_wrapping_c.html">Timer wrapping-around in C </a> (Johannes Stezenbach; Linus Torvalds) [8575 bytes]
<br><a href="https://yarchive.net/comp/linux/tla.html">TLAs </a> (Linus Torvalds) [2938 bytes]
<br><a href="https://yarchive.net/comp/linux/tool_bundling.html">Tool bundling </a> (Al Viro; Linus Torvalds) [16966 bytes]
<br><a href="https://yarchive.net/comp/linux/triple_faults.html">Triple faults </a> (Linus Torvalds) [1090 bytes]
<br><a href="https://yarchive.net/comp/linux/tsc.html">TSC </a> (Linus Torvalds) [4476 bytes]
<br><a href="https://yarchive.net/comp/linux/tty_access_times.html">tty access times </a> (Linus Torvalds) [3767 bytes]
<br><a href="https://yarchive.net/comp/linux/tuning_parameters.html">Tuning parameters </a> (Linus Torvalds) [2271 bytes]
<br><a href="https://yarchive.net/comp/linux/TXT.html">TXT </a> (Theodore Tso) [10849 bytes]
<br><a href="https://yarchive.net/comp/linux/typedefs.html">Typedefs </a> (Linus Torvalds) [14694 bytes]
<br><a href="https://yarchive.net/comp/linux/unsigned_arithmetic.html">Unsigned arithmetic </a> (Linus Torvalds) [3232 bytes]
<br><a href="https://yarchive.net/comp/linux/user_kernel_splits.html">User / kernel splits </a> (Linus Torvalds) [9634 bytes]
<br><a href="https://yarchive.net/comp/linux/user_pointers.html">User pointers </a> (Linus Torvalds) [2653 bytes]
<br><a href="https://yarchive.net/comp/linux/user_space_filesystems.html">User-space filesystems </a> (Linus Torvalds) [10500 bytes]
<br><a href="https://yarchive.net/comp/linux/userspace_io.html">User-space I/O </a> (Linus Torvalds) [11647 bytes]
<br><a href="https://yarchive.net/comp/linux/utf8.html">UTF-8 </a> (H. Peter Anvin; Jamie Lokier; Linus Torvalds; Theodore Ts'o; Al Viro) [69577 bytes]
<br><a href="https://yarchive.net/comp/linux/utrace.html">utrace </a> (Linus Torvalds; Theodore Ts'o) [33682 bytes]
<br><a href="https://yarchive.net/comp/linux/vendor_driven.html">Vendor-driven </a> (Linus Torvalds) [8492 bytes]
<br><a href="https://yarchive.net/comp/linux/vmalloc.html">vmalloc() </a> (Jens Axboe; Linus Torvalds; Theodore Ts'o) [10819 bytes]
<br><a href="https://yarchive.net/comp/linux/VMAs.html">VMAs </a> (Linus Torvalds) [4351 bytes]
<br><a href="https://yarchive.net/comp/linux/vm_dirty_ratio.html">vm_dirty_ratio </a> (Linus Torvalds) [7775 bytes]
<br><a href="https://yarchive.net/comp/linux/wakekill.html">Wakekill </a> (Linus Torvalds) [16695 bytes]
<br><a href="https://yarchive.net/comp/linux/work_on_cpu.html">work_on_cpu() </a> (Linus Torvalds) [1627 bytes]
<br><a href="https://yarchive.net/comp/linux/write_barriers.html">Write barriers </a> (Linus Torvalds) [26514 bytes]
<br><a href="https://yarchive.net/comp/linux/write_combining.html">Write combining </a> (Linus Torvalds) [2749 bytes]
<br><a href="https://yarchive.net/comp/linux/write_error_return.html">write() error return </a> (Linus Torvalds) [2777 bytes]
<br><a href="https://yarchive.net/comp/linux/x86-64.html">x86-64 </a> (Linus Torvalds) [4881 bytes]
<br><a href="https://yarchive.net/comp/linux/x86_rings.html">x86 rings </a> (H. Peter Anvin; Linus Torvalds) [4518 bytes]
<br><a href="https://yarchive.net/comp/linux/x86_tlb.html">The x86 TLB </a> (Linus Torvalds) [9941 bytes]
<br><a href="https://yarchive.net/comp/linux/x86.html">x86 versus other architectures</a> (Linus Torvalds) [22123 bytes]
<br><a href="https://yarchive.net/comp/linux/xen.html">Xen </a> (Linus Torvalds) [3920 bytes]
<br><a href="https://yarchive.net/comp/linux/xfs.html">XFS </a> (Al Viro) [1740 bytes]
<br><a href="https://yarchive.net/comp/linux/zero-copy.html">Zero-copy </a> (Linus Torvalds) [28652 bytes]
<br><a href="https://yarchive.net/comp/linux/ZERO_PAGE.html">ZERO_PAGE </a> (Linus Torvalds) [11084 bytes]
<br><a href="https://yarchive.net/comp/linux/zero.html">Zero as a special value </a> (Linus Torvalds) [27396 bytes]
<br><a href="https://yarchive.net/comp/linux/zfs.html">ZFS </a> (Theodore Tso) [5759 bytes]

</td>
</tr>
</tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Katy – 68000 Linux on a Solderless Breadboard (2014) (164 pts)]]></title>
            <link>https://www.bigmessowires.com/2014/11/17/68-katy-68000-linux-on-a-solderless-breadboard/</link>
            <guid>40404423</guid>
            <pubDate>Sun, 19 May 2024 05:12:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bigmessowires.com/2014/11/17/68-katy-68000-linux-on-a-solderless-breadboard/">https://www.bigmessowires.com/2014/11/17/68-katy-68000-linux-on-a-solderless-breadboard/</a>, See on <a href="https://news.ycombinator.com/item?id=40404423">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <p><iframe width="500" height="375" src="https://www.youtube.com/embed/SRdLlaUmmpM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>
<p>What does it take to build a little 68000-based protoboard computer, and get it running Linux? In my case, about three weeks of spare time, plenty of coffee, and a strong dose of stubborness. After banging my head against the wall with problems ranging from the inductance of pushbutton switches to memory leaks in the C standard library, it finally works! I’ve built several other DIY computer systems before, but never took their software beyond simple assembly language programs. Having a full-fledged multitasking OS running on this ugly pile of chips and wires is a thrill, and opens up all kinds of interesting new possibilities. I’ve named this plucky little machine <strong>68 Katy</strong>.</p>
<p>&nbsp;<br>
<strong>Hardware</strong></p>
<p><img src="https://www.bigmessowires.com/wp-content/uploads/2014/11/68-katy-protoboard-final.jpg" alt="68-katy-protoboard-final" width="600" height="651" srcset="https://www.bigmessowires.com/wp-content/uploads/2014/11/68-katy-protoboard-final.jpg 600w, https://www.bigmessowires.com/wp-content/uploads/2014/11/68-katy-protoboard-final-276x300.jpg 276w" sizes="(max-width: 600px) 100vw, 600px"></p>
<p>Here’s a look at the final version of the hardware. It took about a week to assemble and wire up all the parts on a solderless breadboard. The heart of the system is a Motorola 68008 CPU, a low-cost variant of the more common 68000, with fewer address pins and an 8-bit data bus. The CPU has 20 address pins, allowing for 1 MB of total address space. It’s paired with a 512K 8-bit SRAM, and a 512K Flash ROM (of which 480K is addressable – the remaining 32K is memory-mapped I/O devices). </p>
<p>The standard 68000 CPU has a 16-bit data bus, so it normally requires at least two 8-bit RAM chips and two 8-bit ROM chips. The 68008 requires fewer memory chips thanks to its 8-bit data bus, but the trade-off is that memory bandwidth is only half that of the 68000. Neither chip has any on-board cache, so half the memory bandwidth leads to roughly half the performance. My 68008 runs at 2 MHz (it was unstable when tested at 4 MHz), providing similar performance to a 1 MHz 68000. That’s pretty slow, even in comparison to 68000 systems from the early 1980’s, which were typically 8 MHz or faster.</p>
<p>An FT245 USB-to-FIFO module provides a communication link to another computer. On the external PC, it appears as a virtual serial port. Windows Hyperterm or another similar terminal program can be used to communicate with it, like an old VT100 terminal. On the 68 Katy side, the FT245 appears as a byte-wide I/O register mapped into the CPU’s address space. Reading from its address fetches the next incoming byte from the PC, and writing to the address sends a byte out to the PC. The FT245 has an internal 256-byte buffer, which helps smooth out the communication. When there’s an incoming byte waiting in the buffer, it triggers a CPU interrupt.</p>
<p>A 555 timer provides the only other interrupt source, generating a regular series of CPU interrupts at roughly 100 Hz. The initial version of the hardware had no timer interrupt, but I later discovered it was essential in order to get Linux working correctly.</p>
<p>The protoboard has eight LEDs for debugging, which are driven from a memory-mapped 74LS377 register. The rest of the protoboard is filled with assorted 7400 series parts and one PAL, which are used for address decoding, interrupt arbitration, and other basic glue logic.</p>
<p>Schematics? Forget it. Everything was built incrementally, one wire at a time, while staring at chip datasheets. It’s an organic creation.</p>
<p>&nbsp;<br>
<strong>Software</strong></p>
<p>Once the hardware build was done, I began writing some simple test programs in 68K assembly language. Wichit Sirichote’s <a href="http://chaokhun.kmitl.ac.th/~kswichit/68k/68k.html">zBug monitor</a> provided a good starting point for my own ROM-based monitor/bootloader. Using the monitor program, I was able to load other programs in binary or Motorola S-record format over the FT245 link, store them in RAM, and execute them. I was even able to get Lee Davison’s <a href="http://www.easy68k.com/applications.htm">ehBASIC for 68000</a> working, which provided a few hours of fun.</p>
<p>One feature I could have added to the monitor program, but didn’t, was the ability to reprogram the Flash ROM. The ROM chip has a read/write input pin just like an SRAM, but writing to the Flash ROM is more complicated. The CPU needs to first write a magic sequence of bytes in order to unlock the ROM. Then it needs to write more magic bytes to tell the ROM which blocks to erase, followed by the new bytes to be written. Finally, it must poll the output of the ROM to learn when the erase and reprogram sequence is complete. </p>
<p>The monitor program could have updated itself, or any other data stored in ROM, by copying itself to RAM, then running from RAM while saving new data to Flash ROM. But I was lazy and never implemented that feature, so I had to physically pull the ROM chip from the protoboard and place it in an external EPROM programmer whenever I made a change – about 100 times over the course of the project. Ugh.</p>
<p>&nbsp;<br>
<strong>Linux</strong></p>
<p>Inspired by a <a href="http://mc68k.blogspot.com/2012/03/uclinux-part-i.html">similar project</a>, I decided that a simple monitor program and BASIC weren’t interesting enough, and I needed to run Linux on this hardware. It sounded interesting and exciting, but I really had no idea where to begin. I had plenty of experience as a Linux user (as well as other UNIX versions), but I knew nothing about how the kernel worked, or how to build it from source code, or to port it to new hardware. So the real adventure began there.</p>
<p>The first challenge was to learn how to build a Linux image for an existing machine. It seemed simple enough in theory – just download the source code from kernel.org or some other distribution tree, and compile it. Reality was more complicated, and there were many details that confused me, and build problems I was powerless to solve. It wasn’t easy, and I discussed the process in much more detail in this <a href="https://www.bigmessowires.com/2014/11/06/building-uclinux-for-a-68000-target/">earlier post</a>. </p>
<p>I chose to use uClinux, a Linux distribution designed for microcontrollers and other low-end hardware, particularly CPUs without an MMU and that can’t support virtual memory. Then I chose a very old version of uClinux, based on kernel 2.0.39, that dates all the way back to 2001! I configured it to disable nearly every single optional feature, including all networking support. This ancient code was my best hope for getting a Linux that would actually run in 512K of ROM and 512K of RAM.</p>
<p>Starting with the uClinux configuration for another 68000-based system, I updated the code to reflect the 68 Katy memory map, changed the system initialization code, and added a driver for the FT245. Describing those steps makes them sound simple, and they might have been for someone more experienced with Linux, but for me it was a challenge just to identify which files and functions needed to modified. Google wasn’t very helpful, since I was working with such an old version of the kernel, and the resources I found on building/porting Linux mostly weren’t applicable. I primarily relied on the Linux <i>grep</i> command to search through the thousands of kernel source files for strings of interest, then stared at the code until I could understand how it worked.</p>
<p>After about a week, I had something I was <a href="https://www.bigmessowires.com/2014/11/10/baby-steps-with-uclinux/">ready to test</a>. And it worked, at least a little bit! It showed the first few lines of kernel output, but hung at “calibrating delay loop”. Aha, I needed a timer interrupt. Of course! I added a 555 timer and some extra interrupt logic, and was ready to try again.</p>
<p>The <a href="https://www.bigmessowires.com/2014/11/12/inching-forward/">second attempt</a> got further into the boot process, but failed to mount the memory-resident root filesystem. I was stumped for a while. After looking more carefully, I discovered that my linker script was mapping the root filesystem and BSS to the same address in RAM, and the earily initialization code was overwriting the filesystem with zeroes. And more fundamentally, I discovered that it wasn’t possible to fit all of Linux in 512K RAM, including the kernel code, static data, root filesystem, and dynamically allocated memory. Something had to be moved to ROM, or it was never going to work.</p>
<p>In the <a href="https://www.bigmessowires.com/2014/11/13/banging-my-head-against-the-wall/">third attempt</a>, I moved the root filesystem image to ROM, freeing up about 150K of RAM. And this kind of, almost worked! It booted, mounted the filesystem, and seemed to be working OK, but then suddenly it would land back at the monitor program prompt. Huh? I eventually tracked this one to the FT245 driver I’d written. I only implemented the minimal set of required driver functions, and the other optional functions were NULL entries in a function table somewhere. One of the functions I thought was optional proved to be required. When the kernel called it, it used a NULL function pointer, causing a jump to address 0, restarting my monitor program.</p>
<p>The fourth attempt was better. It spawned the init process, and ran the startup script, but died with out-of-memory errors before it completed. At the time, 68 Katy’s memory map was 256K ROM, 256K I/O devices, and 512K RAM. By shrinking the I/O space to 32K, I was able to increase the usable ROM to 480K, providing enough space to store the root filesystem image <em>and </em>the kernel code itself! This freed up another 251K of RAM.</p>
<p>The fifth attempt actually booted to a shell prompt! Now it was executing the kernel code directly from ROM. I was able to run a few commands, like <em>ls </em>and <em>cat</em>, but then the system would run out of memory and die. As I investigated, it looked like memory allocated from <em>malloc()</em> and <em>do_mmap()</em> was never beeing freed. Was this some kind of free list allocator I didn’t understand? No. It turns out I’d made a typo in a function called <em>is_in_rom()</em>, adding too many zeroes, causing the memory allocator to think all addresses were in ROM and so didn’t need to be freed. Then after fixing that, I discovered a small memory leak in the C library <em>setenv()</em> function. I never did solve that one, but instead just modified the programs that used it to avoid calling it.</p>
<p>My debugging method was primitive: lots of <em>printk </em>and <em>printf </em>statements sprinkled everywhere. Then pull the ROM chip, reprogram it in an external EPROM programmer, replace it in the protoboard, and try again.</p>
<p>The sixth attempt finally worked. Two weeks after beginning my experiments with Linux, I had a working system! Here’s a screenshot of the boot sequence:</p>
<p><img src="https://www.bigmessowires.com/wp-content/uploads/2014/11/linux-2.0.39-boot.png" alt="linux-2.0.39-boot" width="677" height="686" srcset="https://www.bigmessowires.com/wp-content/uploads/2014/11/linux-2.0.39-boot.png 677w, https://www.bigmessowires.com/wp-content/uploads/2014/11/linux-2.0.39-boot-296x300.png 296w" sizes="(max-width: 677px) 100vw, 677px"></p>
<p>Watch the video for more details. I’m using a shell called sash, which has a few dozen common shell commands (like <em>ls </em>and <em>cat</em>) built directly into it. The root filesystem in ROM is read-only, and a small read-write filesystem is created in a RAM disk. The system supports multitasking, so it can run an LED blinker program in the background while still working in the Linux shell. It even has vi, and Colossal Cave Adventure!</p>
<p>It was an interesting journey. The Linux kernel still seems big and unwiedly to me, but no longer seems so scary as it did initially. It’s just an especially big program, and most of its pieces aren’t too difficult to understand if you open up the relevant source files and start reading.</p>
<p>&nbsp;<br>
<strong>Memory Requirements</strong></p>
<p>So how much memory does it require to run a super-minimal uClinux system, with an old 2.0 kernel? If you follow my example and put as much as possible in ROM, it needs about 343K of ROM and 312K of RAM, or just 628K of RAM if you’ve got a bootloader that can fill RAM from some external source. My 68 Katy system is slightly heavier than that due to including vi and Adventure, but not by much. Here’s the breakdown:</p>
<p>ROM</p>
<ul>
<li>kernel code and read-only data (.text and .rodata segments) – 251K</li>
<li>kernel initialized static data (.data segment) – 27K</li>
<li>root filesystem – 189K</li>
</ul>
<p>RAM</p>
<ul>
<li>kernel static data (.data and .bss segments) – 84K</li>
<li>kernel dynamic allocations during boot-up – 104K</li>
<li>RAM disk – 64K</li>
<li>init and shell process allocations – 58K</li>
<li>stack and exception vectors – 2K</li>
</ul>
<p>&nbsp;<br>
<strong>Problems</strong></p>
<p>The kernel always measures the CPU at 0.81 bogomips, regardless of the clock crystal I use. The 555 timer interrupt is independent of the CPU clock, so with a faster clock the bogomips calculation should measure more executions of the busy loop per timer interrupt. I’m not sure why it doesn’t, but it means any real-time calculations will be off.</p>
<p>The display in vi acts weird. Some lines appear prefixed with a capital H, and stray Unicode characters appear here and there. At first I thought this was a hardware bug, and I’m still not certain it isn’t. But I think it’s probably an issue with the way my terminal program (Tera Term) handles the ANSI escape sequences sent by vi. I tried all the different terminal settings available in Tera Term, and also tried a different terminal program, all with the same result. </p>
<p>&nbsp;<br>
<strong>What’s Next?</strong></p>
<p>This 68008 system on a protoboard was intended to be only an experiment and proof-of-concept for the <em>real </em>68 Katy, which I had planned to build on a custom PCB with a full 68000 CPU, a CPLD for glue logic, more RAM, an SD card, and ethernet. But this experiment was perhaps a bit too successful, and now I’m wondering if it really makes sense to go to the effort of building the “real” system if it’s going to be essentially the same thing, only faster. Of course the SD card and ethernet will add some interesting new elements, so maybe it’s fine. I probably need to sleep on the question for a few days.</p>
<p>One way of adding more spice to the next iteration of 68 Katy would be to include video output, so it could directly drive a monitor instead of being controlled through a serial terminal. I’ve done that once before, with BMOW 1, which had VGA output. It mostly worked, although the arbitration for video memory between the display hardware and the CPU was clunky and produced visible display artifacts. To take things further, I could even aim for DVI or HDMI video output, since VGA is a slowly dying standard. </p>
<p>The smart move is probably to stick with my original plan. Lots of extra features are cool, but also have a way of killing a project. I’d rather have something with 10 features and that works, than something with 20 features that I never finished or that collapsed under the weight of its complexity. But until then, excuse me while I go play some more Colossal Cave…</p>
<p>&nbsp;<br>
<strong>Files</strong><br>
The source code for my 68 Katy port of uClinux is available for download, as well as the toolchain I used to build it, the monitor/bootloader source, and a preconfigured VirtualBox machine image of Ubuntu 12.04 to host it all. Grab the files <a href="https://www.bigmessowires.com/68-katy/">here</a>. Have fun!</p>
      
<p><a href="https://www.bigmessowires.com/2014/11/17/68-katy-68000-linux-on-a-solderless-breadboard/#comments">Read 53 comments and join the conversation</a>&nbsp;      
    </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Big Tech to EU: "Drop Dead" (278 pts)]]></title>
            <link>https://www.eff.org/deeplinks/2024/05/big-tech-eu-drop-dead</link>
            <guid>40404296</guid>
            <pubDate>Sun, 19 May 2024 04:31:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eff.org/deeplinks/2024/05/big-tech-eu-drop-dead">https://www.eff.org/deeplinks/2024/05/big-tech-eu-drop-dead</a>, See on <a href="https://news.ycombinator.com/item?id=40404296">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article role="article">
  
  
  <div><p><span data-contrast="none">The European Union’s new Digital Markets Act (DMA) is a complex, many-legged beast, but at root, it is a regulation that aims to make it easier for the public to control the technology they use and rely on.&nbsp;</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">One DMA rule forces </span><span>the powerful “gatekeeper” </span><span data-contrast="none">tech companies to allow third-party app stores. That means that you, the owner of a device, can decide who you trust to provide you with software for it.&nbsp;</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">Another rule requires those tech gatekeepers to offer interoperable gateways that other platforms can plug into - so you can quit using a chat client, switch to a rival, and still connect with the people you left behind (similar measures may come to social media in the future).</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">There’s a rule banning “self-preferencing.” That’s when platforms push their often inferior, in-house products and hide superior products made by their rivals.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">And perhaps best of all, there’s a privacy rule, reinforcing the eight-year-old General Data Protection Regulation, a strong</span><span>,</span><span data-contrast="none"> privacy law that has been flouted</span><span>&nbsp;</span><span data-contrast="none"> for too long, </span><i><span data-contrast="none">especially </span></i><span data-contrast="none">by the largest tech giants.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">In other words, the DMA is meant to push us toward a world where you decide which software runs on your devices,</span><span>&nbsp;</span><span data-contrast="none"> where it’s easy to find the best products and services, where you can leave a platform for a better one without forfeiting your social relationships</span> <span data-contrast="none">,</span> <span data-contrast="none">and where you can do all of this without getting spied on.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span>If it </span><span>works,</span> <span data-contrast="none">this will get dangerously close to </span><a href="https://www.eff.org/how-to-fix-the-internet-podcast"><span data-contrast="none">better future</span></a><span data-contrast="none"> we’ve spent the past thirty years fighting for.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">There’s just one wrinkle: the Big Tech companies don’t want that future, and they’re trying their damndest to strangle it in its cradle.</span><span data-ccp-props="0}"></span></p>

<p><span data-ccp-props="0}">&nbsp;Right from the start, it was obvious that the tech giants were going to war against the DMA, and the freedom it promised to their users. Take Apple, whose tight control over which software its customers can install was a major concern of the DMA from its inception.</span><span data-ccp-props="0}"> <br></span></p>
<p><span data-contrast="none">Apple didn’t invent the idea of a “curated computer” that could only run software that was blessed by its manufacturer, but they certainly perfected it. iOS devices will refuse to run software unless it comes from Apple’s App Store, and that control over Apple’s customers means that Apple can exert tremendous control over app vendors, too.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-ccp-props="{}">&nbsp;Apple charges app vendors a whopping 30 percent commission on most transactions, both the initial price of the app and everything you buy from it thereafter. This is a remarkably high transaction fee —compare it to the credit-card sector, itself the subject of sharp criticism for its high </span><i><span data-contrast="none">3-5</span></i><span data-contrast="none"> percent fees. To maintain those high commissions, Apple also restricts its vendors from informing their customers about the existence of other ways of paying (say, via their website) and at various times has also banned its vendors from offering discounts to customers who complete their purchases without using the app.&nbsp;</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-ccp-props="{}">Apple is adamant that it needs this control to keep its customers safe, but </span><a href="https://www.eff.org/document/letter-bruce-schneier-senate-judiciary-regarding-app-store-security"><span data-contrast="none">in theory</span></a><span data-contrast="none"> and </span><a href="https://gizmodo.com/apple-iphone-analytics-tracking-even-when-off-app-store-1849757558"><span data-contrast="none">in practice</span></a><span data-contrast="none">, Apple has shown that </span><a href="https://www.eff.org/document/letter-bruce-schneier-senate-judiciary-regarding-app-store-security"><span data-contrast="none">it can protect you without maintaining this degree of control</span></a><span data-contrast="none">, and that </span><a href="https://gizmodo.com/apple-iphone-analytics-tracking-even-when-off-app-store-1849757558"><span data-contrast="none">it uses this control to </span><i><span data-contrast="none">take away</span></i><span data-contrast="none"> your security when it serves the company’s profits to do so</span></a><span data-contrast="none">.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-ccp-props="{}">Apple </span><a href="https://companiesmarketcap.com/apple/marketcap/"><span data-contrast="none">is worth between two and three trillion dollars</span></a><span data-contrast="none">. Investors prize Apple’s stock in large part due to </span><a href="https://www.nytimes.com/2021/03/18/opinion/apple-google-app-monopoly.html"><span data-contrast="none">the tens of billions of dollars it extracts from other businesses</span></a><span data-contrast="none"> that want to reach its customers.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">The DMA is aimed squarely at these practices. It requires the largest app store companies to grant their customers the freedom to choose other app stores. Companies like Apple were given over a year to prepare for the DMA, and were told to produce compliance plans by March of this year.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">But </span><a href="https://proton.me/blog/apple-dma-compliance-plan-trap"><span data-contrast="none">Apple’s compliance plan falls </span><i><span data-contrast="none">very</span></i><span data-contrast="none"> short of the mark</span></a><span data-contrast="none">: between a blizzard of confusing junk fees (like the €0.50 per use “Core Technology Fee” that the most popular apps will have to pay Apple even if their apps are sold through a rival store) and onerous conditions (app makers who try </span><span>to sell through </span><span data-contrast="none">a rival app store </span><span>are </span><span>have their offerings </span><span data-contrast="none">removed from Apple’s store, and are permanently&nbsp;</span><span> banned </span><span data-contrast="none">from it), the plan in no way satisfies the EU’s goal of fostering competition in app stores.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">That’s just scratching the surface of Apple’s absurd proposal: Apple’s customers will have to successfully navigate a maze of deeply buried settings just to try another app store (</span><a href="https://9to5mac.com/2024/04/01/altstore-iphone-apps-patreon-eu/"><span data-contrast="none">and there’s some pretty cool-sounding app stores in the wings</span></a><span data-contrast="none">!), and </span><a href="https://www.theverge.com/2024/3/7/24093437/apple-iphone-third-party-app-store-dma-eu"><span data-contrast="none">Apple will disable all your third-party apps if you take your phone out of the EU for 30 days</span></a><span data-contrast="none">.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">Apple appears to be playing a high-stakes game of chicken with EU regulators, effectively saying, “Yes, you have 500 million citizens, but we have three trillion dollars, so why should we listen to you?” Apple inaugurated this performance of noncompliance by banning Epic, the company most closely associated with the EU’s decision to require third party app stores, from operating an app store and terminating its developer account (</span><a href="https://www.epicgames.com/site/en-US/news/apple-terminated-epic-s-developer-account"><span data-contrast="none">Epic’s account was later reinstated</span></a><span data-contrast="none"> after the EU registered its disapproval).</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">It’s not just Apple, of course.&nbsp;</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">The DMA includes new enforcement tools to finally apply the General Data Privacy Regulation (GDPR) to US tech giants. The GDPR is Europe’s landmark privacy law, but in the eight years since its passage, Europeans have struggled to use it to reform the terrible privacy practices of the largest tech companies.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">Meta is one of the worst on privacy, and no wonder: its entire business is grounded in the nonconsensual extraction and mining of billions of dollars’ worth of private information from billions of people all over the world. The GDPR should be requiring Meta to actually secure our willing, informed (and revocable) consent to carry on all this surveillance, and there’s </span><a href="https://www.cnbc.com/2022/02/02/facebook-says-apple-ios-privacy-change-will-cost-10-billion-this-year.html"><span data-contrast="none">good evidence that more than 95 percent of us would block Facebook spying if we could</span></a><span data-contrast="none">.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">Meta’s answer to this is a “</span><a href="https://noyb.eu/en/pay-or-okay-1500-eu-year-your-online-privacy"><span data-contrast="none">Pay or Okay</span></a><span data-contrast="none">” system, in which users who do not consent to Meta’s surveillance will have to pay to use the service, or be blocked from it. Unfortunately for Meta, this is prohibited (privacy is not a luxury good that only the wealthiest should be afforded).&nbsp;</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">Just like Apple, Meta is behaving as though the DMA permits it to carry on its worst behavior, with minor cosmetic tweaks around the margins. Just like Apple, Meta is daring the EU to enforce its democratically enacted laws, implicitly promising to pit its billions against Europe’s institutions to preserve its right to spy on us.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">These are high-stakes clashes. </span><a href="https://www.ft.com/content/6fb1602d-a08b-4a8c-bac0-047b7d64aba5"><span data-contrast="none">As the tech sector grew more concentrated, it also grew less accountable</span></a><span data-contrast="none">, able to substitute lock-in and regulatory capture for making good products and </span><a href="https://www.eff.org/wp/who-has-your-back-2019"><span data-contrast="none">having their users’ backs</span></a><span data-contrast="none">. Tech has found new ways to compromise our </span><a href="https://www.eff.org/issues/privacy"><span data-contrast="none">privacy rights</span></a><span data-contrast="none">, our </span><a href="https://www.eff.org/deeplinks/2021/08/tech-rights-are-workers-rights-doordash-edition"><span data-contrast="none">labor rights</span></a><span data-contrast="none">, and our </span><a href="https://scholarship.law.bu.edu/faculty_scholarship/3645/"><span data-contrast="none">consumer rights</span></a><span data-contrast="none"> - at scale.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-ccp-props="{}">After decades of regulatory indifference to tech monopolization, competition authorities all over the world are taking on Big Tech. The DMA is by far the most muscular and ambitious salvo we’ve seen.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-ccp-props="{}">Seen in that light, it’s no surprise that Big Tech is refusing to comply with the rules. If the EU successfully forces tech to play fair, it will serve as a starting gun for a global race to the top, in which tech’s ill-gotten gains - of data, power and money - will be returned to the users and workers from whom that treasure came.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-ccp-props="{}">The architects of the DMA and DSA foresaw this, of course. </span><a href="https://open-web-advocacy.org/blog/eu-opens-dma-investigations/"><span data-contrast="none">They’ve announced investigations into Apple, Google and Meta</span></a><span data-contrast="none">, threatening </span><a href="https://www.techrepublic.com/article/european-commission-antitrust-investigation-apple-meta-alphabet/"><span data-contrast="none">fines of 10 percent of the companies’ global income, which will </span><i><span data-contrast="none">double</span></i><span data-contrast="none"> to 20 percent</span></a><span data-contrast="none"> if the companies don’t toe the line.</span><span data-ccp-props="0}">&nbsp;</span></p>
<p><span data-contrast="none">It’s not just Big Tech that’s playing for all the marbles - it’s also the systems of democratic control and accountability. If Apple can sabotage the DMA’s insistence on taking away its veto over its customers’ software choices, that will spill over into </span><a href="https://www.justice.gov/opa/media/1344546/dl?inline"><span data-contrast="none">the US Department of Justice’s case over the same issue</span></a><span data-contrast="none">, as well as the cases in </span><a href="https://asia.nikkei.com/Business/Technology/Japan-to-crack-down-on-Apple-and-Google-app-store-monopolies"><span data-contrast="none">Japan</span></a><span data-contrast="none"> and </span><a href="https://www.reuters.com/technology/skorea-considers-505-mln-fine-against-google-apple-over-app-market-practices-2023-10-06/"><span data-contrast="none">South Korea</span></a><span data-contrast="none">, and the </span><a href="https://www.gov.uk/government/news/cma-wins-appeal-in-apple-case"><span data-contrast="none">pending enforcement action in the UK</span></a><span data-contrast="none">.</span><span data-ccp-props="0}">&nbsp;</span></p>



</div>

          </article>
    </div><div>
          <h2>Join EFF Lists</h2>
        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Riven (425 pts)]]></title>
            <link>https://www.filfre.net/2024/05/riven/</link>
            <guid>40404054</guid>
            <pubDate>Sun, 19 May 2024 03:34:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.filfre.net/2024/05/riven/">https://www.filfre.net/2024/05/riven/</a>, See on <a href="https://news.ycombinator.com/item?id=40404054">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
														<div id="attachment_5919"><p><a href="https://www.filfre.net/2024/05/riven/millers/" rel="attachment wp-att-5919"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-5919" src="https://www.filfre.net/wp-content/uploads/2024/05/millers-300x262.jpg" alt="" width="515" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/millers-300x262.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/millers-1024x896.jpg 1024w, https://www.filfre.net/wp-content/uploads/2024/05/millers-768x672.jpg 768w, https://www.filfre.net/wp-content/uploads/2024/05/millers-1536x1343.jpg 1536w, https://www.filfre.net/wp-content/uploads/2024/05/millers.jpg 1546w" sizes="(max-width: 515px) 100vw, 515px"></a></p><p id="caption-attachment-5919">Robyn and Rand Miller.</p></div>
<p>Sometimes success smacks you right in the face. More often, it sneaks up on you from behind.</p>
<p>In September of 1993, <a href="https://www.filfre.net/2016/10/the-manhole">the brothers Rand and Robyn Miller</a> and the few other employees of Cyan, Inc., were prototypical starving artists, living on “rice and beans and government cheese.” That month they saw Brøderbund publish their esoteric Apple Macintosh puzzle game <a href="https://www.filfre.net/2020/02/myst-or-the-drawbacks-to-success"><em>Myst</em></a>, which they and everyone else regarded as a niche product for a niche platform. There would go another year before it became abundantly clear that <em>Myst</em>, now available in a version for Microsoft Windows as well as for the Mac, was a genuine mass-market hit. It would turn into the gift that kept on giving, a game with more legs than your average millipede. It wouldn’t enjoy its best single month until December of 1996, when it would set a record for the most copies one game had <em>ever</em> sold in one month.</p>
<p>All of this — not just the sales figures themselves but the dozens of awards, the write-ups in glossy magazines like <em>Rolling Stone</em> and <em>Newsweek</em>, the fawningly overwritten profiles in <em>Wired</em>, the comparisons with Steven Spielberg’s <em>Jurassic Park</em> and Michael Jackson’s <em>Thriller</em> — happened just gradually enough that it seemed almost natural. <em>Almost</em> natural. “It took a while for it to hit me that millions of people were buying this game,” says Robyn Miller. “The most I could really wrap my head around would be to go to a huge concert and see all of the people there and think, ‘Okay, this is not even a portion of the people who are playing <em>Myst</em>.'”</p>
<p>The Miller brothers could have retired and lived very comfortably for the rest of their lives on the fortune they earned from <em>Myst</em>. They didn’t choose this path. “We took salaries that were fairly modest and just put the company’s money back into [a] new project,” says Rand.</p>
<p>Brøderbund was more than eager for a sequel to <em>Myst</em>, something that many far smaller hits than it got as a matter of course within a year. But the Miller brothers refused to be hurried, and did not need to be, a rare luxury indeed in their industry. Although they enjoyed a very good relationship with Brøderbund, whose marketing acumen had been essential to getting the <em>Myst</em> ball rolling, they did not wish to be beholden to their publisher in any way. Rather than accepting the traditional publisher advance, they decided that they would fund the sequel entirely on their own out of the royalties of the first game. This meant that, as <em>Myst</em> blew up bigger and bigger, their ambitions for the game they intended to call <em>Riven</em> were inflated in tandem. They refused to give Brøderbund a firm release date; it will be done when it’s done, they said. They took to talking about <em>Myst</em> as their <em>Hobbit</em>, <em>Riven</em> as their <em>Lord of the Rings</em>. It had taken J.R.R. Tolkien seventeen years to bridge the gap between his children’s adventure story and the most important fantasy epic in modern literary history. Surely Brøderbund could accept having to wait just a few years for <em>Riven</em>, especially with the sales figures <em>Myst</em> was still putting up.</p>
<p>Cyan’s digs reflected their rising status. They hadn’t even had a proper office when they were making <em>Myst</em>; everybody worked out of their separate homes in and around Spokane, Washington, sharing their output with one another using the “car net”: put it on a disk, get into your car, and drive it over to the other person. In the immediate aftermath of <em>Myst’</em>s release and promising early sales, they all piled into a drafty, unheated garage owned by their sound specialist Chris Brandkamp. Then, as the sales numbers continued to tick upward, they moved into an anonymous-looking former Comfort World Mattress storefront. Finally, in January of 1995, they broke ground on a grandiosely named “Cyan World Headquarters,” whose real-world architecture was to be modeled on the virtual architecture of <em>Myst</em> and <em>Riven</em>. While they were waiting for that building to be completed — the construction would take eighteen months — they junked the consumer-grade Macs which had slowly and laboriously done all of the 3D modeling necessary to create <em>Myst’</em>s environments in favor of Silicon Graphics workstations that cost $40,000 a pop.</p>
<hr>
<div id="attachment_5921"><p><a href="https://www.filfre.net/2024/05/riven/ground/" rel="attachment wp-att-5921"><img decoding="async" aria-describedby="caption-attachment-5921" src="https://www.filfre.net/wp-content/uploads/2024/05/ground-300x195.jpg" alt="" width="600" height="389" srcset="https://www.filfre.net/wp-content/uploads/2024/05/ground-300x195.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/ground-1024x664.jpg 1024w, https://www.filfre.net/wp-content/uploads/2024/05/ground-768x498.jpg 768w, https://www.filfre.net/wp-content/uploads/2024/05/ground.jpg 1386w" sizes="(max-width: 600px) 100vw, 600px"></a></p><p id="caption-attachment-5921">Cyan breaks ground on their new “world headquarters.”</p></div>
<div id="attachment_5922"><p><a href="https://www.filfre.net/2024/05/riven/offices1/" rel="attachment wp-att-5922"><img decoding="async" aria-describedby="caption-attachment-5922" src="https://www.filfre.net/wp-content/uploads/2024/05/offices1-300x116.jpg" alt="" width="600" height="231" srcset="https://www.filfre.net/wp-content/uploads/2024/05/offices1-300x116.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/offices1-1024x395.jpg 1024w, https://www.filfre.net/wp-content/uploads/2024/05/offices1-768x296.jpg 768w, https://www.filfre.net/wp-content/uploads/2024/05/offices1-1536x592.jpg 1536w, https://www.filfre.net/wp-content/uploads/2024/05/offices1-2048x790.jpg 2048w" sizes="(max-width: 600px) 100vw, 600px"></a></p><p id="caption-attachment-5922">The completed building looked very much apiece with their games, both outside…</p></div>
<div id="attachment_5923"><p><a href="https://www.filfre.net/2024/05/riven/offices2/" rel="attachment wp-att-5923"><img decoding="async" aria-describedby="caption-attachment-5923" src="https://www.filfre.net/wp-content/uploads/2024/05/offices2-300x234.jpg" alt="" width="577" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/offices2-300x234.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/offices2-1024x798.jpg 1024w, https://www.filfre.net/wp-content/uploads/2024/05/offices2-768x599.jpg 768w, https://www.filfre.net/wp-content/uploads/2024/05/offices2.jpg 1235w" sizes="(max-width: 577px) 100vw, 577px"></a></p><p id="caption-attachment-5923">…and inside.</p></div>
<div id="attachment_5924"><p><a href="https://www.filfre.net/2024/05/riven/sgi/" rel="attachment wp-att-5924"><img decoding="async" aria-describedby="caption-attachment-5924" src="https://www.filfre.net/wp-content/uploads/2024/05/SGI-300x249.jpg" alt="" width="542" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/SGI-300x249.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/SGI-1024x850.jpg 1024w, https://www.filfre.net/wp-content/uploads/2024/05/SGI-768x637.jpg 768w, https://www.filfre.net/wp-content/uploads/2024/05/SGI-1536x1275.jpg 1536w, https://www.filfre.net/wp-content/uploads/2024/05/SGI.jpg 1682w" sizes="(max-width: 542px) 100vw, 542px"></a></p><p id="caption-attachment-5924">The machines that made <em>Riven</em>. Its imagery was rendered using $1 million worth of <a href="https://www.filfre.net/2023/05/the-next-generation-in-graphics-part-2-three-dimensions-in-hardware">Silicon Graphics</a> hardware: a dozen or so workstations connected to these four high-end servers that did the grunt work of the ray-tracing. It was a far cry from <em>Myst</em>, which had been made with ordinary consumer-grade Macs running off-the-shelf software.</p></div>
<div id="attachment_5938"><p><a href="https://www.filfre.net/2024/05/riven/cyan/" rel="attachment wp-att-5938"><img decoding="async" aria-describedby="caption-attachment-5938" src="https://www.filfre.net/wp-content/uploads/2024/05/cyan-300x255.jpg" alt="" width="529" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/cyan-300x255.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/cyan-1024x872.jpg 1024w, https://www.filfre.net/wp-content/uploads/2024/05/cyan-768x654.jpg 768w, https://www.filfre.net/wp-content/uploads/2024/05/cyan-1536x1307.jpg 1536w, https://www.filfre.net/wp-content/uploads/2024/05/cyan-2048x1743.jpg 2048w" sizes="(max-width: 529px) 100vw, 529px"></a></p><p id="caption-attachment-5938">And the people who made <em>Riven</em>…</p></div>
<hr>

<p>There were attempts to drum up controversies in the press, especially after <em>Riven</em> missed a tentative Christmas 1996 target date which Brøderbund had (prematurely) announced, a delay that caused the publisher’s stock price to drop by 25 percent. The journalists who always seemed to be hovering around the perimeter of Cyan’s offices claimed to sniff trouble in the air, an aroma of overstretched budgets and creative tensions. But, although there were certainly arguments — what project of this magnitude doesn’t cause arguments? — there was in truth no juicy decadence or discord going on at Cyan. The Miller brothers, sons of a preacher and still devout Christians, never lost their Heartland groundedness. They never let their fluke success go to their heads in the way of, say, the minds behind <a href="https://www.filfre.net/2020/04/the-7th-guests-new-clothes">Trilobyte of <em>The 7th Guest</em> fame</a>, were never even seriously tempted to move their operation to some more glamorous city than Spokane. For them, it was all about the work. And luckily for them, plenty of people were more than willing to move to Spokane for a chance to work at The House That <em>Myst</em> Built, which by the end of 1995 had replaced Trilobyte as the most feted single games studio in the mainstream American press, the necessary contrast to all those other unscrupulous operators who were <a href="https://www.filfre.net/2021/04/the-ratings-game-part-1-a-likely-and-an-unlikely-suspect">filling their games and the minds of the nation’s youth with indiscriminate sex and violence</a>.</p>
<p>The most important of all the people who were suddenly willing to come to Spokane would prove to be Richard Vander Wende, a former Disney production designer — his fingerprints were all over the recent film <em>Aladdin</em> — who first bumped into the Miller brothers at a Digital World Expo in Los Angeles. Wende’s conceptual contribution to <em>Riven</em> would be as massive as that of either of the Miller brothers, such that he would be given a richly deserved co-equal billing with them at the very top of the credits listing.</p>
<div id="attachment_5920"><p><a href="https://www.filfre.net/2024/05/riven/wende/" rel="attachment wp-att-5920"><img decoding="async" aria-describedby="caption-attachment-5920" src="https://www.filfre.net/wp-content/uploads/2024/05/wende-290x300.jpg" alt="" width="436" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/wende-290x300.jpg 290w, https://www.filfre.net/wp-content/uploads/2024/05/wende-768x793.jpg 768w, https://www.filfre.net/wp-content/uploads/2024/05/wende.jpg 825w" sizes="(max-width: 436px) 100vw, 436px"></a></p><p id="caption-attachment-5920">Richard Vander Wende.</p></div>
<p>Needless to say, though, there were many others who contributed as well. By the time Cyan moved into their new world headquarters in the summer of 1996, more than twenty people were actively working on <em>Riven</em> every day. The sequel would wind up costing ten times to fifteen times as much to make as its predecessor, filling five CDs to <em>Myst’</em>s lone silver platter.</p>
<p>Given the Millers’ artistic temperament and given the rare privilege they enjoyed of being able to make exactly the game they wished to make, one might be tempted to assume that <em>Riven</em> was to be some radical departure from what had come before. In reality, though, this was not the case at all. <em>Riven</em> was to be <em>Myst</em>, only more so; call it <em>Myst</em> perfected. Once again you would be left to wander around inside a beautiful pre-rendered 3D environment, which you would view from a first-person perspective. And once again you would be expected to solve intricate puzzles there — or not, as you chose.</p>
<p>Cyan had long since realized that players of <em>Myst</em> broke down into two broad categories. There were those they called the gamers, who engaged seriously with it as a series of logical challenges to be overcome through research, experimentation, and deduction. And then there was the other group of players — a far, far larger one, if we’re being honest — whom Cyan called the tourists, who just wanted to poke around a little inside the virtual world and take in some of the sights and sounds. These were folks like the residents of a retirement home who wrote to Cyan to say that they had been playing and enjoying <em>Myst</em> for two years and two months, and wanted to hear if the rumors that there were locations to explore beyond the first island — an island which constitutes about 20 percent of the full game — were in fact true.</p>
<p><em>Riven</em> was meant to cater to both groups, by giving the gamers a much deeper, richer, more complex tapestry of puzzles to unravel, whilst simultaneously being kept as deliberately “open” as possible in terms of its geography, so that you could see most of its locations without ever having to solve a single conundrum. “The two complaints about <em>Myst</em>,” said Rand Miller, “were that it was too hard and too easy. We’re trying to make <em>Riven</em> better for both kinds of players.” Whereas <em>Myst</em> allowed you to visit four separate “ages” — basically, alternative dimensions — after solving those early puzzles which had so stymied the retirees, <em>Riven</em> was to take place all in the same dimension, on a single archipelago of five islands. You would be able to travel between the islands right from the start, using vehicles whose operation should be quite straightforward even for the most puzzle-averse players. If all you wanted to do was wander around the world of <em>Riven</em>, it would give you a lot more spaces in which to do so than <em>Myst</em>.</p>
<p>Of course, while the world of <em>Riven</em> was slowly coming together, the real world wasn’t sitting still. <em>Myst</em> had been followed by an inevitable flood of “<em>Myst</em> clones” from other publishers and studios, which, in lieu of a proper sequel from Cyan, did their best to pick up the slack by offering up their own deserted, 3D-rendered environments to explore. Few of them were more than modestly successful; <a href="https://www.mobygames.com/game/560/zork-nemesis-the-forbidden-lands/">Activision’s <em>Zork Nemesis</em></a>, which may have done the best of them all, sold about 450,000 copies, an order of magnitude and a half less than the final numbers that <em>Myst</em> would put up. Meanwhile the genre of adventure games in general had peaked in the immediate aftermath of <em>Myst</em> and would be well into an increasingly precipitous decline by the time <em>Riven</em> shipped in October of 1997. <a href="https://www.filfre.net/2023/10/the-last-express"><em>The Last Express</em></a>, the only other adventure that Brøderbund published that year, stiffed badly in the spring, despite sporting prominently on its box the name of <a href="https://www.filfre.net/2016/10/how-jordan-mechner-made-a-different-sort-of-interactive-movie-or-the-virtues-of-restraint">Jordan Mechner</a>, one of the few videogame auteurs with a reputation to rival that of the Miller brothers.</p>
<p>Yet Cyan’s own games still seemed weirdly proof against the marketplace pressures that were driving so many other game makers in the direction of real-time strategy and first-person shooters. In June of 1997, the nearly four-year-old <em>Myst</em> was propelled back to the top of the sales charts by the excitement over the approaching debut of <em>Riven</em>. And when it did appear, <em>Riven</em> didn’t disappoint the bean counters. It and <em>Myst</em> tag-teamed one another in the top two chart positions right through the Christmas buying season. <em>Myst</em> would return to number one a few more times in the course of 1998, while an entire industry continued to scratch its collective head, wondering why this particular game — a game that was now approaching its fifth birthday, making it roughly as aged as the plays of Shakespeare as the industry reckoned time — should continue to sell in such numbers. Even today, it’s hard to say precisely why <em>Myst</em> just kept selling and selling, defying all the usual gravities of its market. It seems that non-violent, non-hardcore gaming simply needed a standard bearer, and so it found one for itself.</p>
<p><em>Riven</em> wasn’t quite as successful as <em>Myst</em>, but this doesn’t mean it didn’t do very well indeed by all of the standard metrics. Its biggest failing in comparison to its older sibling was ironically its very cutting-edge nature; whereas just about any computer that was capable of running other everyday software could run <em>Myst</em> by 1997, you needed a fairly recent, powerful machine to run <em>Riven</em>. Despite this, and despite the usual skepticism from the hardcore-gaming press — “With its familiar, lever-yanking gameplay, <em>Riven</em> emerges as the ultimate <em>Myst</em> clone,” scoffed <em>Computer Gaming World</em> magazine — <em>Riven’</em>s sales surpassed 1 million units in its first year, numbers of which any other adventure game could scarcely have dreamed.<span><a role="button" tabindex="0" onclick="footnote_moveToReference_5916_1('footnote_plugin_reference_5916_1_1');" onkeypress="footnote_moveToReference_5916_1('footnote_plugin_reference_5916_1_1');"><sup id="footnote_plugin_tooltip_5916_1_1">[1]</sup></a><span id="footnote_plugin_tooltip_text_5916_1_1">An article in the May 17 2001 edition of the <em>Los Angeles Times</em> claimed that <em>Riven</em> had sold 4.5 million copies by that point, three and a half years after its release. This number has since been repeated in numerous places, including Wikipedia. I’ll eat my hat if it’s correct; this game would have left a much wider vapor trail behind it if it was. Read in context in the original article, the figure actually comes across as a typo.<p>
<em>Riven</em> was a huge hit by any conventional standard, but it didn’t have the legs of <em>Myst</em>. Already for long stretches during 1998, it was once again being comfortably outsold by <em>Myst</em>. Lifetime retail sales of around 1.5 million strike me as the most likely figure — still more than enough to place <em>Riven</em> in the upper echelon of late 1990s computer games.</p></span></span></p>
<p>Fans and boosters of the genre naturally wanted to see a broader trend in <em>Riven’</em>s sales, a proof that adventures in general could still bring home the bacon with the best of them. The hard truth that the games of Cyan were always uniquely uncoupled from what was going on around them was never harder to accept than in this case. In the end, though, <em>Riven</em> would have no impact whatsoever on the overall trajectory of the adventure genre.</p>
<hr>
<p><a href="https://www.filfre.net/2024/05/riven/5287113-riven-the-sequel-to-myst-windows-front-cover/" rel="attachment wp-att-5925"><img decoding="async" src="https://www.filfre.net/wp-content/uploads/2024/05/5287113-riven-the-sequel-to-myst-windows-front-cover-239x300.jpg" alt="" width="359" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/5287113-riven-the-sequel-to-myst-windows-front-cover-239x300.jpg 239w, https://www.filfre.net/wp-content/uploads/2024/05/5287113-riven-the-sequel-to-myst-windows-front-cover.jpg 638w" sizes="(max-width: 359px) 100vw, 359px"></a></p>
<p>Because <em>Riven</em> is a sequel in such a pure sense — a game that aims to do exactly what its predecessor did, only bigger and better — your reaction to it is doomed to be dictated to a large extent by your reaction to said predecessor. It’s almost impossible for me to imagine anyone liking or loving <em>Riven</em> who didn’t at least like <em>Myst</em>.</p>
<p>The defining quality of both games is their thoroughgoing sense of restraint. When <em>Myst</em> first started to attract sales and attention, naysayers saw its minimalism through the lens of technical affordance, or rather the Miller brothers’ lack thereof: having only off-the-shelf middleware like <a href="https://www.filfre.net/2016/09/the-freedom-to-associate">HyperCard</a> to work with, lacking the skill set that might have let them create better tools of their own, they just had to do the best they could with what they had. In this reading, <em>Myst</em>‘s static world, its almost nonexistent user interface, its lack of even such niceties as a player inventory, stemmed not so much from aesthetic intent as from the fact that it had been created with a hypertext editor that had never been meant for making games. The alternative reading is that the Miller brothers were among the few game developers who knew the value of restraint from the start, that they were by nature and inclination minimalists in an industry inclined to maximalism in all things, and this quality was their greatest strength rather than a weakness. The truth probably lies somewhere between the two extremes, as it usually does. Regardless, there’s no denying that the brothers leaned hard into the same spirit of minimalism that had defined <em>Myst </em>when the time came to make <em>Riven</em>, even though they were now no longer technologically constrained into doing so. One camp reads this as a colossal failure of vision; the other reads it as merely staying true to the unique vision that had gotten them this far.</p>
<p>While I don’t want to plant myself too firmly in either corner, I must say that I am surprised by some of the things that Cyan <em>didn’t</em> do with twice the time and ten or fifteen times the budget. The fact that <em>Riven</em> still relies on static, pre-rendered scenery and node-based movement isn’t the source of my surprise; that compromise was necessary in order to achieve the visual fidelity that Cyan demanded. I’m rather surprised by how little Cyan innovated even within that basic framework. Well before <em>Riven</em> appeared, the makers of other <em>Myst</em> successors had begun to experiment with ways of creating a slightly more fluid, natural-feeling experience. <em>Zork Nemesis</em>, for example, stores each of its nodes as a 360-degree panorama instead of a set of fixed views, letting you smoothly turn in place through a complete circle. <em>Riven</em>, by contrast, confines its innovations in this area to displaying a little transition animation as you rotate between its rigidly fixed views. As a result, switching from view to view does become a little less jarring than it is in <em>Myst</em>, but the approach is far from even the <em>Myst</em>-clone state of the art.</p>
<p>Cyan was likewise disinterested in pursuing other solutions that would have been even easier to implement than panning rotation, but that could have made their game less awkward to play. The extent of your rotation when you click on the left or right side of the screen remains inconsistent, just as it was in <em>Myst</em>; sometimes it’s 90 degrees, sometimes it’s less or more. This can make simple navigation much more confusing than it needs to be, introducing a layer of fake difficulty — i.e., difficulties that you would <em>not</em> have if you were really <em>in</em> this world — which seems at odd with Cyan’s stated determination to create as immersive an experience as possible. Even a compass with which to tell which way you’re facing at any given time would have helped enormously, but no such concessions to player convenience are to hand.</p>
<p>Again, these are solutions that the other makers of <em>Myst</em> clones — not a group overly celebrated for its spirit of innovation — had long since deployed. Cyan was always a strangely self-contained entity, showing little awareness of what others were doing around them, making a virtue of their complete ignorance of the competition. In cases like these, it was perhaps not so much a virtue as a failure of simple due diligence. Building upon the work of others is the way that gaming as a whole progresses.</p>
<p>When it comes to storytelling as well, <em>Riven’</em>s differences from <em>Myst</em> are more a matter of execution than kind. As in <em>Myst</em>, there is very little story at all here, if by that we mean a foreground plot driving things along. A brief bit of exposition at the beginning picks up right where <em>Myst</em> ended, providing an excuse for dumping you into another open-ended environment. Whereas <em>Myst</em> took place entirely in deserted ages, here you’re ostensibly surrounded by the Rivenese, the vaguely Native-American-like inhabitants of the archipelago. Rather conveniently for Cyan, however, the Rivenese are terrified of strangers, and scurry away into hiding whenever you enter a scene. The few named characters you meet, including the principal villain, are likewise forever just leaving when you come upon them, or showing up, giving speeches, and then going away again before you can interact with them. By 1997, this sort of thing was feeling more tired than clever.</p>
<div id="attachment_5927"><p><a href="https://www.filfre.net/2024/05/riven/riven1/" rel="attachment wp-att-5927"><img decoding="async" aria-describedby="caption-attachment-5927" src="https://www.filfre.net/wp-content/uploads/2024/05/riven1-300x225.jpg" alt="" width="600" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/riven1-300x225.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/riven1.jpg 640w" sizes="(max-width: 600px) 100vw, 600px"></a></p><p id="caption-attachment-5927">Rand Miller, returning in the role of the patriarch Atrus from <em>Myst</em>, gives you your marching orders and sends you on your way in the introductory movie. <em>Riven</em> makes more extensive use of such scenes involving real actors than <em>Myst</em>, but it’s done well, and never overdone. The end result is about as un-cheesy as these techniques can possibly look to modern eyes.</p></div>
<p>The real story, in both <em>Myst</em> and <em>Riven</em>, is the backstory that caused these spaces to become the places they are, a backstory which you uncover as you explore them. And in this area, I’m happy to say, <em>Riven</em> actually does outdo its predecessor. Almost everything there is to find out about how the ages of <em>Myst</em> became as they are is conveyed in one astonishingly clumsy infodump, a set of books which you find in a library on that first island after solving the first couple of puzzles. These stop your progress dead for an hour or so as you read through them, after which you’re back to exploring, never to be troubled by much of any exposition again.</p>
<p>By the time of <em>Riven</em>, however, the Miller brothers had learned about the existence of something called dramatic pacing. Here, too, most of the real story comes in the form of books and journals, but these are scattered around the islands, providing an enticement to solve puzzles in order to acquire and read them. The <em>Myst</em> “universe” grew considerably in depth and coherency between <em>Myst</em> and <em>Riven</em>, thanks to a trilogy of novels written by the British science-fiction author David Wingrove in close collaboration with the Miller brothers during that interim. In <em>Riven</em>, then, you get some of the same sense that you get in <em>The Lord of the Rings</em>, that you are only scraping the surface of a world that goes much deeper than its foreground sights and sounds. “<em>The Lord of the Rings</em> is so satisfying because of the details,” said Rand Miller at the time. “You get the feeling that the world you’re reading about is real. Different but real. That’s how we go about designing.” Like Tolkien, the Miller brothers went so far as to make up the beginnings at least of a coherent language for their land’s inhabitants. This sense of established lore, combined with the improved pacing and better writing, makes <em>Riven’</em>s backstory more compelling than that of <em>Myst</em>, makes uncovering more of it feel like a worthwhile goal in itself. Instead of providing a mere excuse for the gameplay, as in <em>Myst</em>, <em>Riven’</em>s backstory comes to fuel its gameplay to a large extent.</p>
<p>And this starts to take us into the territory of the first of the two things that <em>Riven</em> does really, really well, does so well in fact that you might just be willing to discount all of the failings I’ve been belaboring up to this point. The archipelago is a truly intriguing, even awe-inspiring place to explore, thank not just to the cutting-edge 3D-rendering technology that was used to bring it to life, but — and even more so — the <em>thought</em> that went into the place.</p>
<div id="attachment_5926"><p><a href="https://www.filfre.net/2024/05/riven/riven0/" rel="attachment wp-att-5926"><img decoding="async" aria-describedby="caption-attachment-5926" src="https://www.filfre.net/wp-content/uploads/2024/05/riven0-300x225.jpg" alt="" width="600" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/riven0-300x225.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/riven0.jpg 640w" sizes="(max-width: 600px) 100vw, 600px"></a></p><p id="caption-attachment-5926"><em>Riven</em> makes its priorities clear from the beginning, when it asks you to set up your screen and your speakers to provide the immersive audiovisual experience it intends for you to have.</p></div>
<p>The adjective “surreal” seems unavoidable when discussing <em>Myst</em>, so much so that Brøderbund built it right into their advertising tagline. (“The Surrealistic Adventure That Will Become Your World.”) Looking back on it now, though, I realize that the surrealism of <em>Myst</em> was as much a product of process as intention. The 3D-modeling software that was used to create the scenery of <em>Myst</em> couldn’t render genuinely realistic scenes; everything it churned out was too geometrical, too stiff, too uniform in color to look in any sense <em>real</em>. The result was surrealism, that forlorn, otherworldly, even vaguely disturbing stripe of beauty that became the hallmark of <em>Myst</em> and its many imitators.</p>
<p>But I would not call <em>Riven</em> surreal. The improved technology that enabled it, on both the rendering side — meaning all those Silicon Graphics servers and workstations, with their complex ray-tracing algorithms — and the consumer-facing side — meaning the latest home computers, with their capability of displaying millions of nuanced shades of color onscreen at once — led to a more believable world. The key to it all is in the textures, the patterns that are overlaid onto the frame of a 3D model in lieu of blocks of solid color to make it look like a real object made out of wood, metal, or dirt. Cyan traveled to Santa Fe, New Mexico, to capture thousands of textures. The same visual qualities that led to that state being dubbed the “Land of Enchantment” and drew artists like Georgia O’Keeffe to its high deserts suffuses the game, from the pueblo walls of the Rivenese homes to the pebbly cliff-side paths, from <a href="https://www.filfre.net/2015/02/t-plus-0-the-fulcrum-of-history">an old iron tower rusting in the sun</a> to the ragged vegetation huddling around it. You can almost feel the sun on your back and the sweat on your skin.</p>
<p>My wife and I are inveterate hikers these days, planning most of our holidays around where we can get out and walk. <em>Riven</em> made me want to climb through the screen and roam its landscapes for myself. <em>Myst</em> has its charms, but they are nothing like this. When I compare the two games, I think about what a revelation the battered, weathered world of Tatooine was when <em>Star Wars</em> hit cinemas in 1977, how at odds it was with the antiseptic sleekness of the science-fiction films that preceded it. <em>Riven</em> is almost as much of a revelation when set beside <em>Myst</em> and its many clones.</p>
<hr>
<p><a href="https://www.filfre.net/2024/05/riven/riven7/" rel="attachment wp-att-5935"><img decoding="async" src="https://www.filfre.net/wp-content/uploads/2024/05/riven7-300x225.jpg" alt="" width="600" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/riven7-300x225.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/riven7.jpg 640w" sizes="(max-width: 600px) 100vw, 600px"></a></p>
<p><a href="https://www.filfre.net/2024/05/riven/riven5-2/" rel="attachment wp-att-5936"><img decoding="async" src="https://www.filfre.net/wp-content/uploads/2024/05/riven5-1-300x225.jpg" alt="" width="600" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/riven5-1-300x225.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/riven5-1.jpg 640w" sizes="(max-width: 600px) 100vw, 600px"></a><a href="https://www.filfre.net/2024/05/riven/riven8/" rel="attachment wp-att-5937"><img decoding="async" src="https://www.filfre.net/wp-content/uploads/2024/05/riven8-300x225.jpg" alt="" width="600" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/riven8-300x225.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/riven8.jpg 640w" sizes="(max-width: 600px) 100vw, 600px"></a></p>
<hr>

<p>The visuals both feed and are fed by the backstory and the world-building. The islands are replete with little details that have nothing to do with solving the game, that exist simply as natural, necessary parts of this place you’re exploring. In <a href="https://www.youtube.com/watch?v=aa-JMzTBH00&amp;t=2s">a perceptive video essay</a>, YouTube creator VZedshows notes how “the lived-in world of <em>Riven</em> lets us look at a house and say, ‘Okay, that’s a house.’ And that’s it. A totally different thought than seeing a log cabin on Myst Island and saying, ‘Okay, that’s a house. But what is it <em>for</em>?’ The puzzles in <em>Riven</em> melt into the world around them.”</p>
<p>Which brings us neatly to the other thing that <em>Riven</em> does remarkably well, the one aimed at the gamers rather than the tourists. Quite simply, <em>Riven</em> is one of the most elegantly sophisticated puzzle games ever created. This facet of it is not for everyone. (I’m not even sure it’s for me, about which more in a moment.) But it does what it sets out to do uncompromisingly well. <em>Riven</em> is a puzzle game that doesn’t feel like a puzzle game. It rather feels like you really have been dropped onto this archipelago, with its foreign civilization and all of its foreign artifacts, and then left to your own devices to make sense of it all.</p>
<div id="attachment_5929"><p><a href="https://www.filfre.net/2024/05/riven/riven3/" rel="attachment wp-att-5929"><img decoding="async" aria-describedby="caption-attachment-5929" src="https://www.filfre.net/wp-content/uploads/2024/05/riven3-300x225.jpg" alt="" width="600" height="450" srcset="https://www.filfre.net/wp-content/uploads/2024/05/riven3-300x225.jpg 300w, https://www.filfre.net/wp-content/uploads/2024/05/riven3.jpg 640w" sizes="(max-width: 600px) 100vw, 600px"></a></p><p id="caption-attachment-5929">Many of <em>Riven’</em>s puzzles are as much anthropological as mechanical. For example, you have to learn to translate the different symbols of a foreign number system.</p></div>
<p>This is undoubtedly more realistic than the ages of <em>Myst</em>, whose puzzles stand out from their environs so plainly that they might as well be circled with a bright red Sharpie. But does it lead to a better game? As usual, the answer is in the eye of the beholder. Ironically, almost everything that can be said about <em>Riven’</em>s puzzles can be cast as either a positive or a negative. If you’re looking for an adventure game that’s nails-hard and yet scrupulously fair — a combination that’s rarer than it ought to be — <em>Riven</em> will not disappoint you. If not, however, it will put you right off just as soon as you grow bored with idle wandering and begin to ask yourself what the game expects you to actually be <em>doing</em>. <em>Myst</em> was widely perceived in the 1990s as being more difficult than it really was; <em>Riven</em>, by contrast, well and truly earns its reputation.</p>
<p>Each of <em>Myst’</em>s ages is a little game unto itself when it comes to its puzzles; you never need to use tools or information from one age to overcome a problem in another one. For better or for worse, <em>Riven</em> is not like that — not at all. Puzzles and clues are scattered willy-nilly all over the five islands; you might be expected to connect a symbol you’re looking at now to a gadget you last poked at hours and hours ago. Careful, copious note-taking is the only practical way to proceed. I daresay you might end up spending more time poring over your real-world journal, looking for ways to combine and thereby to make sense of the data therein, than you do looking at the monitor screen. Because most of the geography is open to you from the very beginning — this is arguably <em>Riven’</em>s one real concession to the needs of the marketplace, being the one that allows it to cater to the tourists as well as the gamers — there isn’t the gated progress you get in so many other puzzly adventure games, with new areas and new problems being introduced gradually as you solve the earlier ones. No, <em>Riven</em> throws it all at you from the start, in one big lump. You just have to keep plugging away at it when even your apparently successful deductions don’t seem to be yielding much in the way of concrete rewards, trusting that it will all come together in one big whoosh at the end.</p>
<p>All of which is to say that <em>Riven</em> is a <em>slow</em> game, the polar opposite of the instant gratification that defines the videogame medium in the eyes of so many. There are few shortcuts for moving through its sprawling, fragmented geography — something you’ll need to do a lot of, thanks to its refusal to contain its puzzles within smaller areas as <em>Myst</em> does. Just double-checking some observation you think you made earlier or confirming that some effect took place as expected represents a significant investment in time. Back in the day, when everyone was playing directly from CD, <em>Riven</em> was even slower than it is today, requiring you to swap discs every time you traveled to a different island.<span><a role="button" tabindex="0" onclick="footnote_moveToReference_5916_1('footnote_plugin_reference_5916_1_2');" onkeypress="footnote_moveToReference_5916_1('footnote_plugin_reference_5916_1_2');"><sup id="footnote_plugin_tooltip_5916_1_2">[2]</sup></a><span id="footnote_plugin_tooltip_text_5916_1_2">Some months after its original release, <em>Riven</em> became one of the first games ever to be made available on DVD-ROM. No game benefited more from the switch in storage technology; not only were DVD drives faster than CD drives, but a single DVD disc was capacious enough to contain the whole of <em>Riven</em>.</span></span> In <a href="https://eblong.com/zarf/gamerev/riven.html">his vintage 1997 review</a>, Andrew Plotkin — a fellow who is without a doubt much, much smarter than I am, at least when it comes to stuff like this — said that he was able to solve <em>Riven</em> in about twenty hours, using just one hint. It will probably take more mortal intelligences some multiple of one or both of those figures.</p>
<p>Your reaction to <em>Riven</em> when approached in “gamer” mode will depend on whether you think this kind of intensive intellectual challenge is fun or not, as well as whether you have the excess intellectual and temporal bandwidth in your current life to go all-in on such a major undertaking. I must sheepishly confess that my answer to the first question is more prevaricating than definitive, while my answer to the second one is a pretty solid no. In the abstract, I do understand the appeal of what <em>Riven</em> is offering, understand how <em>awesome</em> it must feel to put all of these disparate pieces together without help. Nevertheless, when I approached the game for this article, I couldn’t quite find the motivation to persevere down that road. <em>Riven</em> wants you to work a little harder for your fun than the current version of myself is willing to do. I don’t futz around with my notebook too long before I start looking out the window and thinking about how nice it would be to take a walk in <em>real</em> nature. I take enough notes doing research for the articles I write; I’m not sure I want to do so much research <em>inside</em> a game.</p>
<p>Prompted partially by my experience with <em>Riven</em>, I’ve been musing a fair amount lately about the way we receive games, and especially how the commentary you read on this site and others similar to it can be out of step with the way the games in question existed for their players in their heyday. I’m subject to the tyranny of my editorial calendar, to the need to just <em>finish</em> things, one way or another, and move on. <em>Riven</em> is not well-suited to such a mindset. In my travels around the Internet, I’ve noticed that those who remember the game most fondly often took months or years to finish it, or never finished it at all. It existed for them as a tempting curiosity, to be picked up from time to time and poked at, just to see if a little more progress was possible here or there, or whether the brainstorm that came to them unbidden while driving home from work that day might bear some sort of fruit. It’s an open question whether even folks who don’t have an editorial schedule to keep can recapture that mindset here and now, in the third decade (!) of the 21st century, when more entertainment of every conceivable type than any of us could possibly consume in a lifetime is constantly luring us away from any such hard nut as <em>Riven</em>. As of this writing, Cyan is preparing a remake of <em>Riven</em>. It will be interesting to see what concessions, if any, they chose to make to our new reality.</p>
<p>Even in the late 1990s, there was the palpable sense that <em>Riven</em> represented the end of an era, that even Cyan would not be able to catch lightning in a bottle a third time with yet another cerebral, contemplative, zeitgeist-stamping single-player puzzle game. Both Richard Vander Wende and Robyn Miller quit the company as soon as the obligatory rounds of promotional interviews had been completed, leaving the <em>Myst</em> franchise’s future solely in the hands of Rand Miller. Robyn’s stated reason for departing brings to the fore some of the frustrations I have with Cyan’s work. He said that he was most interested in telling stories, and had concluded that computer games just weren’t any good at that: “I felt like, you know what? It’s not working. This whole story thing is not happening, and one of the reasons it’s not happening is because of the medium. It’s not what this medium is good at.” So, he said, he wanted to work in film instead.</p>
<p>The obvious response is that Cyan had never actually tried to tell an engaging foreground story, had rather been content to leave you always picking up the breadcrumbs of backstory. Cyan’s stubborn conservatism in terms of form and their slightly snooty insistence on living in their own hermetically sealed bubble, blissfully unaware of the innovations going on around them in their industry in both storytelling and other aspects of game making, strike me as this unquestionably talented group’s least attractive qualities by far. When asked once what his favorite games were, Richard Vander Wende said he didn’t have any: “Robyn and I are not really interested in games of any kind. We’re more interested in building worlds. To us, <em>Myst</em> and <em>Riven</em> are not ‘games’ at all.” Such scare-quoted condescension does no one any favors.</p>
<p>Then again, that’s only one way of looking at it. Another way is to recognize that <em>Riven</em> is exactly the game — okay, if you like, the world — that its creators wanted to make. It’s worth acknowledging, even celebrating, as the brave artistic statement it is. Love it or hate it, <em>Riven</em> knows what it wants to be, and succeeds in being exactly that — no more, no less. Rather than <em>The Lord of the Rings</em>, call it the <a href="https://www.goodreads.com/book/show/338798.Ulysses"><em>Ulysses</em></a> of gaming: a daunting creation by any standard, but one that can be very rewarding to those willing and able to meet it where it lives. That a game like this outsold dozens of its more visceral, immediate rivals on the store shelves of the late 1990s is surely one of the wonders of the age.</p>
<hr>
<p><code> </code><br>
<strong>Did you enjoy this article? If so, please think about pitching in to help me make many more like it. You can pledge any amount you like.</strong></p>
<p><a href="https://www.patreon.com/DigitalAntiquarian" rel="attachment wp-att-5598"><img decoding="async" src="https://www.filfre.net/wp-content/uploads/2023/04/Patreon-300x133-1.png" alt="" width="300" height="133"></a></p>
<hr>

<p><strong>Sources:</strong> The books <em>The Secret History of Mac Gaming</em> (Expanded Edition) by Richard Moss, <em>From Myst to Riven: The Creations &amp; Inspirations</em> by Richard Kadrey, and <em>Riven: The Sequel to Myst: The Official Strategy Guide</em> by Rick Barba; <em>Computer Gaming World</em> of January 1998; <em>Retro Gamer</em> 208; <em>Wired</em> of September 1997; <em>Game Developer</em> of March 1998. Plus the “making of” documentary that was included on the original <em>Riven</em> CDs. The sales figures for <em>Zork Nemesis</em> come from the Jordan Mechner archive at the <a href="https://www.museumofplay.org/">Strong Museum of Play</a>.</p>
<p>Online sources include&nbsp;<a href="https://web.archive.org/web/20060515224603/http://www.gamespot.com/features/riven/"><em>GameSpot’</em>s old preview</a> of <em>Riven</em>, <a href="https://web.archive.org/web/20010913083729/http://images.salon.com/21st/feature/1998/03/02feature.html"><em>Salon’</em>s profile of the Miller brothers</a> on the occasion of Robyn’s departure from Cyan, <a href="https://www.youtube.com/watch?v=aa-JMzTBH00&amp;t=2s">VZedshows’s video essay</a> on <em>Myst</em> and <em>Riven</em>, and <a href="https://eblong.com/zarf/gamerev/riven.html">Andrew Plotkin’s old review</a> of <em>Riven</em>.</p>
<p>The original version of <em>Riven</em> is currently <a href="https://www.gog.com/en/game/riven_the_sequel_to_myst">available as a digital purchase on GOG.com</a>. As noted in the article above, a remake is in the works at Cyan.</p>
							
							
														
													</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Is artificial consciousness achievable? Lessons from the human brain (140 pts)]]></title>
            <link>https://arxiv.org/abs/2405.04540</link>
            <guid>40403962</guid>
            <pubDate>Sun, 19 May 2024 03:18:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2405.04540">https://arxiv.org/abs/2405.04540</a>, See on <a href="https://news.ycombinator.com/item?id=40403962">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2405.04540">View PDF</a></p><blockquote>
            <span>Abstract:</span>We here analyse the question of developing artificial consciousness from an evolutionary perspective, taking the evolution of the human brain and its relation with consciousness as a reference model. This kind of analysis reveals several structural and functional features of the human brain that appear to be key for reaching human-like complex conscious experience and that current research on Artificial Intelligence (AI) should take into account in its attempt to develop systems capable of conscious processing. We argue that, even if AI is limited in its ability to emulate human consciousness for both intrinsic (structural and architectural) and extrinsic (related to the current stage of scientific and technological knowledge) reasons, taking inspiration from those characteristics of the brain that make conscious processing possible and/or modulate it, is a potentially promising strategy towards developing conscious AI. Also, it is theoretically possible that AI research can develop partial or potentially alternative forms of consciousness that is qualitatively different from the human, and that may be either more or less sophisticated depending on the perspectives. Therefore, we recommend neuroscience-inspired caution in talking about artificial consciousness: since the use of the same word consciousness for humans and AI becomes ambiguous and potentially misleading, we propose to clearly specify what is common and what differs in AI conscious processing from full human conscious experience.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Michele Farisco [<a href="https://arxiv.org/show-email/9efab11f/2405.04540">view email</a>]      <br>    <strong>[v1]</strong>
        Thu, 18 Apr 2024 12:59:44 UTC (1,337 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Reading list to join AI field from Hugging Face cofounder (107 pts)]]></title>
            <link>https://thomwolf.io/data/Thom_wolf_reading_list.txt</link>
            <guid>40403768</guid>
            <pubDate>Sun, 19 May 2024 02:39:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thomwolf.io/data/Thom_wolf_reading_list.txt">https://thomwolf.io/data/Thom_wolf_reading_list.txt</a>, See on <a href="https://news.ycombinator.com/item?id=40403768">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Open-source GeForce NOW alternative with Stadia's social features (168 pts)]]></title>
            <link>https://github.com/netrisdotme/netris</link>
            <guid>40403658</guid>
            <pubDate>Sun, 19 May 2024 02:18:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/netrisdotme/netris">https://github.com/netrisdotme/netris</a>, See on <a href="https://news.ycombinator.com/item?id=40403658">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto">
<p><a href="https://netris.me/" rel="nofollow">
<img height="160" src="https://github.com/netrisdotme/netris/raw/main/assets/logo.png">
</a>
</p>

<div dir="auto"><h2 tabindex="-1" dir="auto">
<a href="https://netris.me/" rel="nofollow">
<themed-picture data-catalyst-inline="true"><picture>
  <source media="(prefers-color-scheme: dark)" srcset="https://github.com/netrisdotme/netris/raw/main/assets/logo-name-white.png">
  <source media="(prefers-color-scheme: light)" srcset="https://github.com/netrisdotme/netris/raw/main/assets/logo-name-black.png">
  <img alt="netris logo name" src="https://github.com/netrisdotme/netris/raw/main/assets/logo-name-black.png">
</picture></themed-picture>
</a>
</h2><a id="user-content-------" aria-label="Permalink: " href="#------"></a></div>
&nbsp;
&nbsp;
<p dir="auto">An open-source cloud gaming platform built for you to play together with your friends. <br> A GeForce NOW alternative that can be self-hosted.<br></p>
</div>

 <div dir="auto">
<p dir="auto"><a href="https://github.com/wanjohiryan/netris/releases"><img src="https://camo.githubusercontent.com/97c00dca8abfd3b45f81843ee4e4571c251ada6467d9e341e11ee8d0dd8b5622/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f77616e6a6f68697279616e2f6e65747269733f636f6c6f723d333639656666266c6162656c436f6c6f723d626c61636b266c6f676f3d676974687562267374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/github/v/release/wanjohiryan/netris?color=369eff&amp;labelColor=black&amp;logo=github&amp;style=flat-square"></a>
<a href="https://discord.com/invite/Y6etn3qKZ3" rel="nofollow"><img src="https://camo.githubusercontent.com/ae3444685254a4211e82c0fd085ab294827cbb9b66fc06907b5f835a1b54ac8b/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f313038303131313030343639383032313930393f636f6c6f723d353836354632266c6162656c3d646973636f7264266c6162656c436f6c6f723d626c61636b266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/discord/1080111004698021909?color=5865F2&amp;label=discord&amp;labelColor=black&amp;logo=discord&amp;logoColor=white&amp;style=flat-square"></a>
<a href="https://github.com/wanjohiryan/netris/blob/main/LICENSE"><img src="https://camo.githubusercontent.com/d62de96848c16d0e99d0f5b451aca6ad6380c670424f028e7b5900cde18d3574/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f77616e6a6f68697279616e2f6e65747269733f636f6c6f723d7768697465266c6162656c436f6c6f723d626c61636b267374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/github/license/wanjohiryan/netris?color=white&amp;labelColor=black&amp;style=flat-square"></a>
<a href="https://github.com/wanjohiryan/netris/network/stargazers"><img src="https://camo.githubusercontent.com/bf563500f4637aba5322cd46f5df128919da03eb2c8e96cc06edb2f49e21e66c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f77616e6a6f68697279616e2f6e65747269733f636f6c6f723d666663623437266c6162656c436f6c6f723d626c61636b267374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/github/stars/wanjohiryan/netris?color=ffcb47&amp;labelColor=black&amp;style=flat-square"></a></p>
<p dir="auto"><strong>Share the Netris Repository on Social Media</strong></p>
<p dir="auto"><a href="https://twitter.com/intent/tweet?text=Hey%2C%20check%20out%20this%20Github%20repository.%20It%20is%20an%20open-source%20self-hosted%20Geforce%20Now%20alternative.&amp;url=https%3A%2F%2Fgithub.com%2Fwanjohiryan%2Fnetris" rel="nofollow"><img src="https://camo.githubusercontent.com/975b23a785273bc799c4a94eb78046995edb4f00a7cbcc8bdb6a9e632398257d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d73686172652532306f6e253230782d626c61636b3f6c6162656c436f6c6f723d626c61636b266c6f676f3d78266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/badge/-share%20on%20x-black?labelColor=black&amp;logo=x&amp;logoColor=white&amp;style=flat-square"></a>
<a href="https://www.reddit.com/submit?title=Hey%2C%20check%20out%20this%20Github%20repository.%20It%20is%20an%20open-source%20self-hosted%20Geforce%20Now%20alternative.&amp;url=https%3A%2F%2Fgithub.com%2Fwanjohiryan%2Fnetris" rel="nofollow"><img src="https://camo.githubusercontent.com/2a29cfc2aefa09b3cbc45f437f74a23ad2da33d4a5969f44e3f0a30bb933221b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d73686172652532306f6e2532307265646469742d626c61636b3f6c6162656c436f6c6f723d626c61636b266c6f676f3d726564646974266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/badge/-share%20on%20reddit-black?labelColor=black&amp;logo=reddit&amp;logoColor=white&amp;style=flat-square"></a></p>
</div>
&nbsp;
&nbsp;
<p dir="auto"><a href="https://netris.me/" rel="nofollow"><img src="https://github.com/netrisdotme/netris/raw/main/assets/banner.png" alt=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features 🌟</h2><a id="user-content-features-" aria-label="Permalink: Features 🌟" href="#features-"></a></p>
<p dir="auto">As Netris navigates through its <em>experimental</em> phase, we're in the process of crafting and testing a variety of features for you:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>🎮 Proton-GE Compatibility:</strong> We utilize Proton-GE for running games, offering extensive game compatibility and ensuring you can play a wide variety of titles.</p>
</li>
<li>
<p dir="auto"><strong>⚡ QUIC Protocol:</strong> For input and video/audio transmission, we use QUIC via <a href="https://quic.video/" rel="nofollow">MoQ</a> to significantly reduce latency on variable networks, ensuring crisp visuals without sacrificing data or increasing latency.</p>
</li>
<li>
<p dir="auto"><strong>🔗 Session IDs:</strong> With a <code>SESSION_ID</code>, we seamlessly tie your game progress, achievements, and devices without the need for logging into <a href="https://netris.me/" rel="nofollow">netris.me</a>. Our public CDNs, currently located in Europe (eu-north-1) and the US (us-east-1), further reduce latency for friends playing together from afar. More locations are on the way!</p>
</li>
<li>
<p dir="auto"><strong>🔄 Automatic Game Progress Sync:</strong> Like Stadia's state share, we automatically sync your game progress based on the *.exe file you're running, allowing you to share your progress with friends via a link.</p>
</li>
<li>
<p dir="auto"><strong>👫 Co-op Gameplay:</strong> Play co-op with up to 8 people, or play single player by sharing mouse and keyboard inputs seamlessly (similar to <a href="https://github.com/m1k1o/neko">neko</a>).</p>
</li>
<li>
<p dir="auto"><strong>🌐 Cross-Platform Play:</strong> Our platform is accessible on any device that can run a Chrome-based browser, including Edge, Chrome, Brave, and Arc. And you do not have to set up anything, it's all done and maintained for you.</p>
</li>
<li>
<p dir="auto"><strong>📊 Bandwidth Optimization:</strong> Experience hardware-accelerated <code>VMAF</code> for optimized bandwidth, ensuring the best possible video quality. <a href="https://developer.nvidia.com/blog/calculating-video-quality-using-nvidia-gpus-and-vmaf-cuda/" rel="nofollow">Learn More</a></p>
</li>
<li>
<p dir="auto"><strong>🌟 ...and more:</strong> Stay tuned as we continue to add features <em>sometimes inspired by platforms like Stadia</em>, to give you the best and most customizable gaming experience.</p>
</li>
</ol>
<p dir="auto">This platform is in an <em>experimental</em> phase, and we're actively working on adding new features. Your feedback and support is very much appreciated.</p>
<div dir="auto"><p dir="auto">Important</p>
<p dir="auto">If you're excited about what we're doing and want to support our journey, consider giving us a star ⭐ on our repository. Your support fuels our progress!. ~ ✨</p>
</div>
<p dir="auto"><a href="https://github.com/wanjohiryan/netris/network/stargazers"><img src="https://github.com/netrisdotme/netris/raw/main/assets/star-us.png" alt=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started 🎮</h2><a id="user-content-getting-started-" aria-label="Permalink: Getting Started 🎮" href="#getting-started-"></a></p>
<p dir="auto">Whether you're looking to self-host Netris or simply want to try it out without the need for your own GPU, we've got you covered. Choose the path that best suits your needs:</p>

<table>
<thead>
<tr>
<th>If you don't have a Nvidia GPU or prefer not to self-host, you can visit our website. No installation or set up required ! <br> This is the perfect option for gamers looking to dive straight into the action without any setup.</th>
<th><a href="https://netris.me/" rel="nofollow">👉🏽 Get Access</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>If you're interested in self-hosting Netris, continue reading for detailed instructions on how to get started. <br> This option is ideal if you have your own Nvidia GPU and are comfortable with setting up and managing your own server.</td>
<td><a href="#self-hosting">🛠️ Self Host Netris</a></td>
</tr>
</tbody>
</table>
<div dir="auto"><p dir="auto">Tip</p>
<p dir="auto">Remember, flexibility is key with Netris. You're free to switch between self-hosting and using <code>netris.me</code> whenever you like, without losing your game progress. ~ 💡
<a name="user-content-self-hosting"></a></p>
</div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Self-Hosting Netris 🔨</h3><a id="user-content-self-hosting-netris-" aria-label="Permalink: Self-Hosting Netris 🔨" href="#self-hosting-netris-"></a></p>
<p dir="auto">For those interested in self-hosting, here are is what you need to get your own Netris server up and running:</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Nvidia GPU</strong>: Unfortunately, this setup is exclusive to Nvidia GPUs. If you don't own one, consider renting from cloud services like AWS, GCP, or Vast.ai. We highly recommend this approach.</p>
</li>
<li>
<p dir="auto"><strong>CUDA</strong>: For GPU acceleration, CUDA version <code>12.0</code> or newer is required. Verify your CUDA installation by running <code>nvcc --version</code>.</p>
</li>
<li>
<p dir="auto"><strong>Docker</strong>: Ensure you have <code>docker</code> and <code>nvidia-docker</code> are up to date to avoid compatibility issues with CUDA. You can check your Docker version by running <code>docker --version</code> in your terminal.</p>
</li>
<li>
<p dir="auto"><strong>GPU Driver</strong>: Ensure your GPU drivers are up to date to avoid compatibility issues with CUDA. Nvidia driver version <code>520.56.06</code> or newer is required.</p>
</li>
<li>
<p dir="auto"><strong>Xorg Display</strong>: Your Nvidia GPU should not be attached to a running X display server. You can confirm this by running <code>nvidia-smi</code>.</p>
</li>
<li>
<p dir="auto"><strong>Nvidia-DRM</strong>: Make sure that the <code>nvidia-drm</code> module has been loaded and that the module is loaded with the flag <code>modeset=1</code>. Confirm this by running <code>sudo cat /sys/module/nvidia_drm/parameters/modeset</code></p>
</li>
</ul>
<div dir="auto"><p dir="auto">Tip</p>
<p dir="auto">Typically, if your setup meets the necessary CUDA requirements, the <code>nvidia-drm</code> module will already be loaded, particularly in AWS G4dn instances. ~ 💡</p>
</div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Step-by-Step Guide</h3><a id="user-content-step-by-step-guide" aria-label="Permalink: Step-by-Step Guide" href="#step-by-step-guide"></a></p>
<p dir="auto">Follow these steps to get Netris up and running on your system.</p>
<div dir="auto"><p dir="auto">Important</p>
<p dir="auto">Waiting on this pull request <a href="https://github.com/netrisdotme/netris/pull/43" data-hovercard-type="pull_request" data-hovercard-url="/netrisdotme/netris/pull/43/hovercard">#43</a> to be merged first. Sorry for the inconvenience. ~ <g-emoji alias="warning">⚠️</g-emoji></p>
</div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Michelle's List: A free, anonymous landlord review site (195 pts)]]></title>
            <link>https://www.michelleslist.com/</link>
            <guid>40403569</guid>
            <pubDate>Sun, 19 May 2024 01:58:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.michelleslist.com/">https://www.michelleslist.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40403569">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Read Landlord and Property Reviews</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft's Emissions Spike 29% as AI Gobbles Up Resources (178 pts)]]></title>
            <link>https://www.pcmag.com/news/microsofts-emissions-spike-29-as-ai-gobbles-up-resources</link>
            <guid>40403524</guid>
            <pubDate>Sun, 19 May 2024 01:50:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.pcmag.com/news/microsofts-emissions-spike-29-as-ai-gobbles-up-resources">https://www.pcmag.com/news/microsofts-emissions-spike-29-as-ai-gobbles-up-resources</a>, See on <a href="https://news.ycombinator.com/item?id=40403524">Hacker News</a></p>
Couldn't get https://www.pcmag.com/news/microsofts-emissions-spike-29-as-ai-gobbles-up-resources: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Mortgages are a manufactured product (2022) (113 pts)]]></title>
            <link>https://www.bitsaboutmoney.com/archive/mortgages-are-a-manufactured-product/</link>
            <guid>40403221</guid>
            <pubDate>Sun, 19 May 2024 00:36:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bitsaboutmoney.com/archive/mortgages-are-a-manufactured-product/">https://www.bitsaboutmoney.com/archive/mortgages-are-a-manufactured-product/</a>, See on <a href="https://news.ycombinator.com/item?id=40403221">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>Why is it so hard for entrepreneurs to get mortgages? Why did the address I send my payment to change? Why don’t most banks own mortgages anymore? Why is there a thriving economy of small specialist lenders locally who <em>only</em> do mortgages? Why is a 30-year fixed rate mortgage available at all?</p><p>Welcome to the wild and wooly world for mortgages in the United States: the world’s most important manufactured product that virtually no users understand. For starters, virtually no one outside of the value chain considers a mortgage a manufactured product at all. Most people who own homes think they were the primary customer of the mortgage, but that’s not true.</p><p>(Apologies in advance for this being a very specifically U.S. flavored issue of this publication. While practice in some nations—Japan comes to mind—is trending in the direction of U.S. practice, the world’s largest and most sophisticated mortgage market is also very quirky, as a result of a hundred years of policy decisions with societal-level impact. Trying to address multiple nations’ takes on this instrument would make this issue the length of a small encyclopedia. Also, for simplicity, we’ll largely be looking at residential mortgages rather than commercial.)</p><h2 id="mortgages-are-a-manufactured-product">Mortgages are a manufactured product</h2><p>Let’s get the most important bit out of the way first: civilians think that a mortgage is a loan between a bank and a customer, and think of it primarily as services work (to the extent they think of it at all). This is a materially incorrect worldview, which drives much confusion about how the industry (and mortgages) function, both among people who can’t be expected to know better (customers) and people who probably could (regulators and journalists, among many others).</p><p>A mortgage is a product, which is built by specialist workers using an immense and costly capital edifice, to be sold into a supply chain for consumers of that product. It incidentally happens to involve a house and a loan, but those two facts do not drive most behaviors of the mortgage industry. The structure of the manufacturing process, and the consuming supply chain, do.</p><p>If it helps you to visualize this, think of a widget going into some hyperspecialized and boring bit of capitalism. Electronic flow meters, for example. [0] Somewhere, in fact in many somewheres, there exists a factory of people who do nothing but assemble electronic flow meters. These do exactly what they say on the tin; they measure flows of liquids or gasses using electric means. There are a lot of them in parts of the economy which push things through physical pipes, whether that is New York’s sanitation department or a steel smelter. It would be a very bad thing for the electronic flow meter factory to sell flow meters that didn’t meter flow accurately. Their consumers would hate that. Cakes would taste bad. Buildings would explode.</p><p>If you replaced your current mental model for mortgages with “it’s like a paper electronic flow meter for money, possibly with less paper these days”, it would improve your ability to understand the mortgage industry. The analogy is less about providing visibility into the contents of pipes (though mortgages <em>must do that</em>) and more “highly specialized manufactured widget that the entire world sits downstream of.”</p><h2 id="who-manufactures-mortgages">Who manufactures mortgages?<br></h2><p>Mortgages are written by <em>originators</em>. The first and most thorough misconception the public has about mortgages is that they’re written by <em>lenders</em>. Originators <em>can</em> be lenders, and historically generally were, but these days they <em>generally are not</em>. The people who make electronic flow meters do not also run the cake-baking factory as a fun hobby. Those are entirely different skillsets. They sell the thing they make, through a fairly complex value chain, to the cake-baking factory.</p><p>Of the top 15 mortgage originators in the U.S., only four are banks (Bank of America, Chase, U.S. Bank, and Wells Fargo), and most of those banks’ mortgage volume originate-for-sale rather than originate-to-lend. The remainder are all pure-play mortgage firms, some of which you’ve probably heard of due to direct-to-consumer marketing (RocketMortgage, Guaranteed Rate, etc) and some of which are more obscure (despite writing tens of billions of dollars of mortgages). This is due to a difference in operational models for them; we’ll get to that in a later issue.</p><p>So who actually has their hands on the tools in the mortgage factory? Every mortgage is a collaboration between:</p><p><strong>The front office</strong>: A sales professional, called a loan officer by convention (and usually referred to in the industry as “a producer”). Their job is to interface with the home buyer, educate them on the most complicated and high-stakes financial decision they’ll have to make in their lives, and project manage the financial side of a real estate close. This will include a backbreaking amount of passing documents to…</p><p><strong>The back office</strong>: Approximately 1.5 professionals per loan officer, who are responsible for making sure electronic flow meters are properly calibrated. Oops, wrong side of the analogy. No, they are responsible for making sure that the physical instantiation of the mortgage, 700 pages of documents or so, will pass the strict acceptance tests of the value chain that sells mortgages to end-users of mortgages.</p><p>The industry operates, as many people who have interacted with it can attest, in a disturbingly artisanal manner for a trillion dollar manufacturing sector which props up a huge portion of the economy. As the person buying a house, you care tremendously about the professional skill levels of your loan officer in a way which you never really care about the professional skill levels of the person who assembled your phone.<br></p><h2 id="who-buys-mortgages">Who buys mortgages?<br></h2><p>In a typical manufacturing supply chain, the box with the thing in it passes through different hands, or the thing gets incorporated into increasingly complex assemblies. In the mortgage supply chain, the thing gets split apart and (sometimes) repackaged into other things.</p><p>The manufactured product which is a mortgage is <em>a collection of risks</em>. The finance industry and government in the United States, to be more efficient and accomplish a long list of social goals, has successfully disaggregated many of those risks. Different risks are bought by different entities.</p><p><strong>The risk of non-payment</strong><br></p><p>As a policy decision, the United States has effectively socialized most of the market for the risk of non-payment of mortgages, in the interests of making home ownership more predictably available. (Whether this makes it cheaper or more expensive on net is a complicated question to answer.)</p><p>The mechanism for this are the GSEs (government-sponsored entities), like Fannie Mae, Ginnie Mae, Freddy Mac, and the Federal Home Loans Bank. These are all privately owned entities who have CEOs, shareholders, etc etc, but they’re also policy arms of the U.S. federal government and everyone knows it. (If there was any ambiguity about that, and there was <em>very little</em>, the financial crisis dispelled it.)</p><p>The business model of the GSEs rounds to this: they publish the specifications for the mortgage industry. This lets you know that the electronic flow meter will work as advertised and not blow up the factory you install it in. A mortgage which fits their specifications is called “conforming.” Buyers of a conforming mortgage <em>need inquire no further</em> about the 700 pages of documents. They treat mortgages as black boxes with some observable metadata to them.</p><p>The GSEs monetize these specifications by writing insurance against all conforming mortgages. The insurance is against, specifically, non-payment risk. Originators of mortgages who desire to sell them into value chain <em>overwhelmingly</em> choose to get conforming mortgages guaranteed. The cost is below <a href="https://www.fhfa.gov/AboutUs/Reports/Pages/Fannie-Mae-and-Freddie-Mac-Single-Family-Guarantee-Fees-in-2019.aspx">60 basis points</a> and ultimately borne by the home purchaser, in the form of points or interest.</p><p>The GSEs, operating as galactically sized insurance companies, profit or lose in a similar manner to insurance companies: they can use capital markets to invest the float (though, due to risks and their quixotic relationship with the Treasury, they cannot be as aggressive as e.g. Berkshire Hathaway) and hope to earn an underwriting profit. That is, they hope the specifications they write and rigorously enforce correctly predict and price default risk. This was resoundingly not true in the run-up to the global financial crisis, which resulted in large government bailouts and a sort of quasi-nationalization of them.</p><p>(There has been some limited experimentation with privatizing the risk of non-payment again, via mechanisms like Freddie Mac’s Credit Risk Transfer product, but the GSEs will <a href="https://crt.freddiemac.com/">happily tell you</a> that most is currently borne by the taxpayer.)</p><p><strong>The risk of failing to service a mortgage correctly</strong></p><p>A mortgage has a quirky little subcomponent called a Mortgage Servicing Right (MSR). Every month, it needs to collect money from the borrower and send that money… somewhere. This implies, minimally, a mailbox where you can send checks, someone to open the mail, and a phone number with a CS representative who can answer questions like “What is my current balance?” and “Did you get the last check I sent you?”</p><p>The holder of an MSR has an obligation to the owner(s) of the mortgage to not screw this up, enforced both by contract and by quite a bit of regulatory supervision. In return for taking on the boring business of opening letters and answering phone calls, they’re paid a small cut of the incoming payments. This generally works out to about 25 basis points of outstanding principal.</p><p>Their obligations are actually more complicated than this quick sketch, particularly in unhappy cases like e.g. when someone defaults on their mortgage. It’s an operationally intensive business to be in.</p><p>Importantly, MSRs trade some amount of work you could build a giant human-powered machine to do for a stream of ongoing payments. The finance industry loves that sort of stuff, and has built a large system to buy and sell MSRs. This results in the servicing of mortgages migrating to large players who have huge economies of scale to open letters and answer phone calls. It also confuses many people who walked into e.g. a Citibank to get their mortgage and think that this means Citibank will own the mortgage (probably not) or take checks from them for it (probably not).<br></p><p><strong>Every other risk you could imagine, of which there are many</strong><br></p><p>Private capital buys all the other risks. The How of that will have to wait for a future issue.</p><p>We can get into part of the What, though, right now.</p><p>A mortgage, like any manufactured product, has a value. You can go to your friendly neighborhood seller of mortgages and buy mortgages in any size or shape. If your factory needs a flow meter, someone has a flow meter for you and can tell you what it costs; they probably didn’t build the flow meter with their own two hands.</p><p>The value of the mortgage <strong>is not</strong> the outstanding principal, any more than the value of a flow meter is the maximum rate of water flowing through it. That is an important technical feature of the artifact at issue, but is not the price tag.</p><p>The value of flow meters goes up when there are more companies wanting to buy them in a time period than factories can manufacture them in the same time period, and down when the reverse is true. That happens to mortgages, too; supply and demand is a thing.</p><p>One driver of supply and demand is the interest rate environment, which is not entirely external to the mortgage market but which you can assume is for simplicity. All existing loans, including mortgages, become less valuable when interest rates go up and more valuable when interest rates go down. (The easy way to remember this: pretend you bought a widget for $100 which spit out $5 a year. If the new model of widgets spits out $6 a year and also costs $100 new, will anyone buy your perfectly functioning used widget for $100? No, that’s silly; they’d buy the new one. You have to offer them a discount until the yield matches that of the new model.)</p><p>This is one of the reasons why society has arranged it so that banks don’t own most mortgages. For a very, very long time, banks were primarily engaged in the business of maturity transformation; they would borrow money short term from depositors at low interest rates and lend it long-term, mostly to mortgage borrowers, at a higher interest rate.</p><p>We have learned, through long and painful experience, that this is an extremely repeatable recipe for banking crises. Interest rates go up, which increases banks funding costs and decreases the value of all the mortgages they own. (It also decreases the number of re-finances they sell, because they are now mechanically more expensive, but that’s a relatively minor factor.) If the bank is not sufficiently capitalized, to maintain their reserves (and have adequate liquidity to meet responsibilities to customers and regulators) they’ll have to sell some of those now less-valuable mortgages.</p><p>All banks experience the same pressure effectively simultaneously; supply and demand hits the value for mortgages and their values start to plummet; the book value of mortgages at other banks now means they’re under-reserved and so have to sell mortgages to raise liquidity; this creates a vicious circle in the banking sector.</p><p>A widespread misconception about mortgage securitization is that it was created to make Wall Street rich. This is a popular narrative, especially due to <a href="https://www.amazon.com/Big-Short-Inside-Doomsday-Machine/dp/0393338827">Michael Lewis’ best book</a> (and one of the <a href="https://www.imdb.com/title/tt1596363/">best finance movies ever made</a>). This narrative is… incomplete.</p><p>Mortgage securitization, and secondary sales of loans, and other mechanisms cause mortgages to migrate from the banking sector to pools of capital which <em>are more structurally insulated against the interest rate cycle</em>.</p><p>A pension fund turns out to be a great counterparty to a mortgage, for example. They have known needs for cash in the short term and, if interest rates rise, that is <em>generally good news to them</em>. (It decreases the net present value of their funding shortfall for future commitments.) Their pile of mortgages would be worth less if they sold them but <em>they do not structurally need to be sellers</em>.</p><p>The pension fund cannot <em>manufacture</em> mortgages. That requires complex technology and a team of professionals that they do not have. They do not ever desire to write mortgages. They just want the economic exposure those mortgages represent, and <em>they want it more than banks</em> do.</p><p>It turns out, counterintuitively, that there are many, many buyers in the world who want to own mortgages more than banks do. They end up owning almost all of the mortgages, for fundamentally the same reason that the electronic flow meter factory ends up owning very few of the world’s current stock of flow meters. Someone has a better use for them and they exist to <em>supply</em> that better use, not to <em>finance</em> it.</p><h2 id="scratching-the-tip-of-the-iceberg">Scratching the tip of the iceberg<br></h2><p>We will return to the topic of mortgage finance, and the plumbing underlying them, in future installments of Bits about Money. But if you wanted to read about it right now, here are some excellent entry points:</p><p><a href="https://www.amazon.com/Digitally-Transforming-Mortgage-Banking-Industry/dp/1985668173">Digitally Transforming the Mortgage Banking Industry</a>. If you want to know how the sausage is made, this is the best account of it. I would read it critically; the author is from the sales side of the industry and is, ahem, in a position where they have to understand software to a greater degree than they actually do. Still, it’s a great look at mortgage origination where the forged bank statement hits the underwriter.</p><p><a href="https://byrnehobart.medium.com/the-30-year-mortgage-is-an-intrinsically-toxic-product-200c901746a">The 30-Year Mortgage is an Intrinsically Toxic Product</a> by <a href="https://twitter.com/ByrneHobart">Byrne Hobart</a> (who also writes a <a href="https://diff.substack.com/">very good newsletter</a>). This is lay-accessible but deep on both financial wonkery and housing policy.</p><p><a href="https://www.amazon.com/Dead-Pledge-Mortgage-1913-1939-Capitalism-ebook/dp/B08K3V6VQL/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;qid=&amp;sr=">The Dead Pledge</a>. A scholarly history work on the pre-war years of mortgage finance, in whose shadow much of the U.S. economy (and social organization) now sits.</p><p>[0] My quixotic level of interest in electronic flow meters is on account of my best salaryman friend working at the company which makes the best electronic flow meters. I have had many long chats with him about the science of flow meters, the challenges of being a Japanese salaryman walking through customs in the Middle East with a suitcase full of sample flow meters, and the surprising difficulty of translating flow meter marketing copy into English. (For social reasons, I'll elide naming him or the company, but statistically speaking you are overwhelmingly likely to be... downstream of their work.) <br></p>

        

        <div>
          <h2>Want more essays in your inbox?</h2>
          <p>I write about the intersection of tech and finance, approximately biweekly. It's free.</p>
                  </div>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Intel undercut a standards body to give us the PCI connector (121 pts)]]></title>
            <link>https://spectrum.ieee.org/intel-pci-history</link>
            <guid>40402975</guid>
            <pubDate>Sat, 18 May 2024 23:37:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spectrum.ieee.org/intel-pci-history">https://spectrum.ieee.org/intel-pci-history</a>, See on <a href="https://news.ycombinator.com/item?id=40402975">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-headline="The Sneaky Standard" data-elid="2668256641" data-post-url="https://spectrum.ieee.org/intel-pci-history" data-authors="Ernie Smith" data-page-title="Intel’s PCI History: the Sneaky Standard - IEEE Spectrum"><p><em><em>A version of this post originally </em></em><a href="https://tedium.co/2024/02/09/intel-pci-standardization-history/" rel="noopener noreferrer" target="_blank"><u><em><em>appeared</em></em></u></a><em><em> on </em></em><a href="https://tedium.co/" rel="noopener noreferrer" target="_blank"><u><em><em>Tedium</em></em></u></a><em><em>, Ernie Smith’s newsletter, which hunts for the end of the long tail.</em></em></p><p>Personal computing has changed a lot in the past four decades, and one of the biggest changes, perhaps the most unheralded, comes down to compatibility. These days, you generally can’t fry a computer by plugging in a joystick that the computer doesn’t support. Simply put, standardization slowly fixed this. One of the best examples of a bedrock standard is the peripheral component interconnect, or PCI, which came about in the early 1990s and appeared in some of the decade’s earliest consumer machines three decades ago this year. To this day, PCI slots are used to connect network cards, sound cards, disc controllers, and other peripherals to computer motherboards via a bus that carries data and control signals. PCI’s lessons gradually shaped other standards, like USB, and ultimately made computers less frustrating. So how did we get it? Through a moment of canny deception.</p><p><span data-rm-shortcode-id="210b942d57e11b15d4d29ea81ca02f08"><iframe frameborder="0" height="auto" type="lazy-iframe" scrolling="no" data-runner-src="https://www.youtube.com/embed/7IaHcFXz0qg?rel=0&amp;start=5" width="100%"></iframe></span><small placeholder="Add Photo Caption...">Commercial - <a href="https://spectrum.ieee.org/tag/intel">Intel</a> Inside Pentium Processor (1994)</small><small placeholder="Add Photo Credit..."><a href="https://www.youtube.com/watch?v=7IaHcFXz0qg&amp;t=5s" target="_blank">www.youtube.com</a></small></p><h2>Embracing standards: the computing industry’s gift to itself<br></h2><p>In the 1980s, when you used the likes of an Apple II or a Commodore 64 or an MS-DOS machine, you were essentially locked into an ecosystem. Floppy disks often weren’t compatible. The peripherals didn’t work across platforms. If you wanted to sell hardware in the 1980s, you were stuck building multiple versions of the same device.</p><p>For example, the <a href="https://en.wikipedia.org/wiki/KoalaPad" rel="noopener noreferrer" target="_blank"><u>KoalaPad</u></a> was a common drawing tool sold in the early 1980s for numerous platforms, including the <a href="https://en.wikipedia.org/wiki/Atari_8-bit_family" rel="noopener noreferrer" target="_blank"><u>Atari 800</u></a>, the <a href="https://en.wikipedia.org/wiki/Apple_II" rel="noopener noreferrer" target="_blank"><u>Apple II</u></a>, the <a href="https://en.wikipedia.org/wiki/TRS-80" rel="noopener noreferrer" target="_blank"><u>TRS-80</u></a>, the <a href="https://en.wikipedia.org/wiki/Commodore_64" rel="noopener noreferrer" target="_blank"><u>Commodore 64</u></a>, and the <a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer" rel="noopener noreferrer" target="_blank"><u>IBM PC</u></a>. It was essentially the same device on every platform, and yet, KoalaPad’s manufacturer, Koala Technologies, had to make five different versions of this device, with five different manufacturing processes, five different connectors, five different software packages, and a lot of overhead. It was wasteful, made being a hardware manufacturer more costly, and added to consumer confusion.</p><p><span data-rm-shortcode-id="2fbd1609bde4383da99fba22453a4947"><iframe frameborder="0" height="auto" type="lazy-iframe" scrolling="no" data-runner-src="https://www.youtube.com/embed/XK1_sp9pRlM?rel=0&amp;start=1" width="100%"></iframe></span><small placeholder="Add Photo Caption...">Drawing on a 1983 KoalaPad (Apple IIe)</small><small placeholder="Add Photo Credit..."><a href="https://www.youtube.com/watch?v=XK1_sp9pRlM&amp;t=1s" target="_blank">www.youtube.com</a></small></p><p>This slowly began to change in around 1982, when the <a href="https://www.forbes.com/sites/timbajarin/2021/08/25/attack-of-the-clones-how-ibm-lost-control-of-the-pc-market/?sh=6b58d8515b81" target="_blank"><u>market of IBM PC clones</u></a> started taking off. It was a happy accident—IBM’s decision to use a bunch of off-the-shelf components for its PC accidentally turned them into a de facto standard. Gradually, it became harder for computing platforms to become islands unto themselves. Even when IBM itself tried and failed to sell the computing world on a bunch of proprietary standards in its <a href="https://www.pcworld.com/article/465931/the_ibm_ps_2_25_years_of_pc_history.html" target="_blank"><u>PS/2 line</u></a>, it didn’t work. The cat was already out of the bag. It was too late.<br></p><p>So how did we end up with the standards that we have today, and the PCI expansion card standard specifically? PCI wasn’t the only game in town—you could argue, for example, that if things played out differently, <a href="https://tedium.co/2022/10/26/isa-expansion-slot-history/" target="_blank"><u>we’d all be</u></a> using <a href="https://en.wikipedia.org/wiki/NuBus" rel="noopener noreferrer" target="_blank"><u>NuBus</u></a> or <a href="https://en.wikipedia.org/wiki/Micro_Channel_architecture" rel="noopener noreferrer" target="_blank"><u>Micro Channel </u></a>architecture. But it was a standard seemingly for the long haul, far beyond other competing standards of its era.</p><p>Who’s responsible for spearheading this standard? Intel. While PCI was a cross-platform technology, it proved to be an important strategy for the chipmaker to consolidate its power over the PC market at a time when IBM had taken its foot off the gas, choosing to focus on <a href="https://www.nytimes.com/1991/10/03/business/ibm-now-apple-s-main-ally.html" rel="noopener noreferrer" target="_blank">its own PowerPC architecture</a> and narrower plays like the <a href="https://www.fastcompany.com/90145427/how-ibms-thinkpad-became-a-design-icon" rel="noopener noreferrer" target="_blank"><u>ThinkPad</u></a> instead, and was no longer shaping the architecture of the PC.</p><p>The vision of PCI was simple: an interconnect standard that was not intended to be limited to one line of processors or one bus. But don’t mistake standardization for cooperation. PCI was a chess piece—a part of a different game than the one PC manufacturers were playing.</p><p><img alt="Close up of a board showing several black raised PCIe interconnects." data-rm-shortcode-id="514aa5acccbc336c53038e2f0c87e28b" data-rm-shortcode-name="rebelmouse-image" data-runner-src="https://spectrum.ieee.org/media-library/close-up-of-a-board-showing-several-black-raised-pcie-interconnects.jpg?id=52237741&amp;width=980" height="1250" id="f64c9" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/close-up-of-a-board-showing-several-black-raised-pcie-interconnects.jpg?id=52237741&amp;width=980" width="2000"><small placeholder="Add Photo Caption...">The PCI standard and its derivatives have endured for over three decades. Modern computers with a GPU often use a PCIe interconnect. </small><small placeholder="Add Photo Credit...">Alamy</small></p><h2>In the early 1990s, Intel needed a win</h2><p>In the years before <a href="https://en.wikipedia.org/wiki/Pentium" rel="noopener noreferrer" target="_blank"><u>Intel’s Pentium chipset</u></a> came out in 1993, there seemed to be some skepticism about whether Intel could maintain its status at the forefront of the desktop-computing field.</p><p>In lower-end consumer machines, players like <a href="https://tedium.co/2017/05/18/intel-386-486-trademark-battles/" rel="noopener noreferrer" target="_blank">Advanced Micro Devices (<u>AMD</u></a>) and<a href="https://www.techspot.com/article/2120-cyrix/" rel="noopener noreferrer" target="_blank"><u>Cyrix</u></a> were starting to shake their weight around. At the high end of the professional market, workstation-level computing from the likes of <a href="https://thenewstack.io/sun-microsystems-a-look-back-at-a-tech-company-ahead-of-its-time/" rel="noopener noreferrer" target="_blank"><u>Sun Microsystems</u></a>, <a href="https://tedium.co/2018/10/04/sgi-collector-history/" rel="noopener noreferrer" target="_blank"><u>Silicon Graphics</u></a>, and <a href="https://tedium.co/2020/12/15/altavista-history-digital-dot-com-domain-name/" rel="noopener noreferrer" target="_blank"><u>Digital Equipment Corporation</u></a> suggested there wasn’t room for Intel in the long run. And laterally, the company suddenly found itself competing with a triple threat of IBM, Motorola, and Apple, whose <a href="https://tedium.co/2020/06/16/apple-powerpc-intel-transition-history/" rel="noopener noreferrer" target="_blank"><u>PowerPC</u></a> chip was about to hit the market.</p><p>A <a href="https://archive.is/zU9aX" rel="noopener noreferrer" target="_blank"><u>Bloomberg piece</u></a> from the period painted Intel as being boxed in between these various extremes:</p><blockquote>If its rivals keep gaining, Intel could eventually lose ground all around.<p>This is no idle threat. Cyrix Corp. and Chips &amp; Technologies Inc. have re-created—and improved—Intel’s 386 without, they say, violating copyrights or patents. <a href="https://spectrum.ieee.org/tag/amd">AMD</a> has at least temporarily won the right in court to make 386 clones under a licensing deal that Intel canceled in 1985. In the past 12 months, AMD has won 40% of a market that since 1985 has given Intel $2 billion in profits and a $2.3 billion cash hoard. The 486 may suffer next. Intel has been cutting its prices faster than for any new chip in its history. And in mid-May, it chopped 50% more from one model after Cyrix announced a chip with some similar features. Although the average price of a 486 is still four times that of a 386, analysts say Intel’s profits may grow less than 5% this year, to about $850 million.</p><p>Intel’s chips face another challenge, too. Ebbing demand for personal computers has slowed innovation in advanced PCs. This has left a gap at the top—and most profitable—end of the desktop market that Sun, Hewlett-Packard Co., and other makers of powerful workstations are working to fill. Thanks to microprocessors based on a technology known as RISC, or reduced instruction-set computing, workstations have dazzling graphics and more oomph—handy for doing complex tasks and moving data faster over networks. And some are as cheap as high-end PCs. So the workstation makers are now making inroads among such PC buyers as stock traders, banks, and airlines.</p></blockquote><p>This was a deep underestimation of Intel’s market position, it turned out. The company was actually well-positioned to shape the direction of the industry through standardization. They had a direct say on what appeared on the motherboards of millions of computers, and that gave them impressive power to wield. If Intel didn’t want to support a given standard, that standard would likely be dead in the water.</p><h2>How Intel crushed a standards body on the way to giving us an essential technology</h2><p>The <a href="https://vesa.org/" rel="noopener noreferrer" target="_blank"><u>Video Electronics Standards Association</u></a>, or VESA, is perhaps best known today for its <a href="https://www.ergotron.com/en-us/support/vesa-standard" rel="noopener noreferrer" target="_blank"><u>mounting system for computer monitors</u></a> and its<a href="https://vesa.org/displayport-developer/about-displayport/" rel="noopener noreferrer" target="_blank"><u>DisplayPort technology</u></a>. But in the early 1990s, it was working on a video-focused successor to the <a href="https://en.wikipedia.org/wiki/Industry_Standard_Architecture" rel="noopener noreferrer" target="_blank"><u>Industry Standard Architecture</u></a> (ISA) internal bus, widely used in IBM PC clones.</p><p>A bus, the physical wiring that lets a CPU talk to internal and external peripheral devices, is something of a bedrock of computing—and in the wrong setting, a bottleneck. The ISA expansion card slot, which had become a de facto standard in the 1980s, had given the IBM PC clone market something to build against during its first decade. But by the early 1990s, for high-bandwidth applications, particularly video, it was holding back innovation. It just wasn’t fast enough to keep up, even after it had been upgraded from being able to handle 8 bits of data at once to 16.</p><p>That’s where the VESA Local Bus (VL-Bus) came into play. Built to work only with video cards, the standard offered a faster connection, and could handle 32 bits of data. It was <a href="https://books.google.com/books?id=YfkUKcyI7KIC&amp;pg=PT139" rel="noopener noreferrer" target="_blank">targeted at the Super VGA standard</a>, which offered higher resolution (up to 1280 x 1024 pixels) and richer colors at a time when Windows was finally starting to take hold in the market. To overcome the limitations of the ISA bus, graphics card and motherboard manufacturers started collaborating on proprietary interfaces, creating an array of incompatible graphics buses. The lack of a consistent experience around Super VGA led to VESA’s formation. The new VESA slot, which extended the existing 16-bit ISA bus with an additional 32-bit video-specific connector, was an attempt to fix that.</p><p>It wasn’t a massive leap—more like a stopgap improvement on the way to better graphics.</p><p>And it looked like Intel was going to go for the VL-BUS. But there was one problem—Intel actually wasn’t feeling it, and Intel didn’t exactly make that point clear to the companies supporting the VESA standards body until it was too late for them to react.</p><p>Intel revealed its hand in an interesting way, according to <a href="https://www.newspapers.com/image/462123935/?clipping_id=32785690&amp;fcfToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVlLXZpZXctaWQiOjQ2MjEyMzkzNSwiaWF0IjoxNzE0NDM4NTM0LCJleHAiOjE3MTQ1MjQ5MzR9.giL2GKz1-XQApU9SKJXoHMfNxIODT4te3lSOvqzVlWo" rel="noopener noreferrer" target="_blank"><u><em><em>The</em></em></u><u></u><u><em><em>San Francisco Examiner</em></em></u><u></u></a><a href="https://www.newspapers.com/article/the-san-francisco-examiner-pci-vs-vesa/32785690/" rel="noopener noreferrer" target="_blank"><u>tech reporter Gina Smith</u></a>:</p><blockquote>Until now, virtually everyone expected VESA’s so-called VL-Bus technology to be the standard for building local bus products. But just two weeks before VESA was planning to announce what it came up with, Intel floored the VESA local bus committee by saying it won’t support the technology after all. In a letter sent to VESA local bus committee officials, Intel stated that supporting VESA’s local bus technology “was no longer in Intel’s best interest.” And sources say it went on to suggest that VESA and Intel should work together to minimize the negative press impact that might arise from the decision.<p>Good luck, Intel. Because now that Intel plans to announce a competing group that includes hardware heavyweights like IBM, Compaq, NCR and DEC, customers and investors (and yes, the press) are going to wonder what in the world is going on.</p><p>Not surprisingly, the people who work for VESA are hurt, confused and angry. “It’s a political nightmare. We’re extremely surprised they’re doing this,” said Ron McCabe, chairman for the committee and a product manager at VESA member Tseng Labs. “We’ll still make money and Intel will still make money, but instead of one standard, there will now be two. And it’s the customer who’s going to get hurt in the end.”</p></blockquote><p>But Intel had seen an opportunity to put its imprint on the computing industry. That opportunity came in the form of PCI, a technology that the firm’s <a href="https://en.wikipedia.org/wiki/Intel_Architecture_Labs#:~:text=Intel%20Architecture%20Labs%20(IAL)%20was,of%20Intel%20during%20the%201990s." rel="noopener noreferrer" target="_blank"><u>Intel Architecture Labs</u></a> started developing around 1990, two years before the fateful rejection of VESA. Essentially, Intel had been playing both sides on the standards front.</p><h2>Why PCI</h2><p>Why make such a hard shift, screwing over a trusted industry standards body out of nowhere? Beyond wanting to put its mark on the standard, Intel also saw an opportunity to build something more future-proof; something that could benefit not just graphic cards but every expansion card in the machine.</p><p><a href="https://books.google.com/books?id=IuaYd-eFaFoC&amp;pg=PA142" rel="noopener noreferrer" target="_blank"><u>As John R. Quinn wrote in </u><u><em><em>PC Magazine</em></em></u><u> in 1992</u></a>:</p><blockquote>Intel’s PCI bus specification requires more work on the part of peripheral chip-makers, but offers several theoretical advantages over the VL-Bus. In the first place, the specification allows up to ten peripherals to work on the PCI bus (including the PCI controller and an optional expansion-bus controller for ISA, EISA, or MCA). It, too, is limited to 33 MHz, but it allows the PCI controller to use a 32-bit or a 64-bit data connection to the CPU.<p>In addition, the PCI specification allows the CPU to run concurrently with bus-mastering peripherals—a necessary capability for future multimedia tasks. And the Intel approach allows a full burst mode for reads and writes (Intel’s 486 only allows bursts on reads).</p><p>Essentially, the PCI architecture is a CPU-to-local bus bridge with FIFO (first in, first out) buffers. Intel calls it an “intermediate” bus because it is designed to uncouple the CPU from the expansion bus while maintaining a 33-MHz 32-bit path to peripheral devices. By taking this approach, the PCI controller makes it possible to queue writes and reads between the CPU and PCI peripherals. In theory, this would enable manufacturers to use a single motherboard design for several generations of CPUs. It also means more sophisticated controller logic is necessary for the PCI interface and peripheral chips.</p></blockquote><p>To put that all another way, VESA came up with a slightly faster bus standard for the next generation of graphics cards, one just fast enough to meet the needs of Intel’s recent <a href="https://en.wikipedia.org/wiki/I486" rel="noopener noreferrer" target="_blank"><u>i486</u></a> microprocessor users. Intel came up with an interface designed to reshape the next decade of computing, one that it would let its competitors use. This bus would allow people to upgrade their processor across generations without needing to upgrade their motherboard. Intel brought a gun to a knife fight, and it made the whole debate about VL-Bus seem insignificant in short order.</p><p>The result was that, no matter how miffed the VESA folks were, Intel had consolidated power for itself by creating an open standard that would eventually win the next generation of computers. Sure, Intel let other companies use the PCI standard, even companies like Apple that weren’t directly doing business with Intel on the CPU side. But Intel, by pushing forth PCI, suddenly made itself relevant to the entire next generation of the computing industry in a way that ensured it would have a second foothold in hardware. The “Intel Inside” marketing label was not limited to the processors, as it turned out.</p><p>The influence of Intel’s introduction of PCI is still felt: Thirty-two years later, and three decades after PCI became a major consumer standard, we’re still using PCI derivatives in modern computing devices.</p><h2>PCI and other standards</h2><p>Looking at PCI, and its successor <a href="https://en.wikipedia.org/wiki/PCI_Express" rel="noopener noreferrer" target="_blank"><u>PCI express</u></a>, less as ways that we connect the peripherals we use with our computers, and more as a way for Intel to maintain its dominance over the PC industry, highlights something fascinating about standardization.</p><p>It turns out that perhaps Intel’s greatest investment in computing in the 1990s was not the <a href="https://tedium.co/2020/09/04/intel-floating-point-glitch-history/" rel="noopener noreferrer" target="_blank"><u>Pentium chipset</u></a>, but its investment in Intel Architecture Labs, which quietly made the entire computing industry better by working on the things that frustrated consumers and manufacturers alike.</p><p>Essentially, as IBM had begun to take its eye off the massive clone market it unwittingly built during this period, Intel used standardization to fill the power void. It worked pretty well, and made the company integral to computer hardware beyond the CPU. In fact, devices you use daily—that Intel played zero part in creating—have benefited greatly from the company’s standards work. If you’ve ever used a device with a <a href="https://www.intel.com/content/www/us/en/standards/usb-two-decades-of-plug-and-play-article.html" rel="noopener noreferrer" target="_blank">USB</a> or <a href="https://www.bluetooth.com/about-us/bluetooth-origin/" rel="noopener noreferrer" target="_blank">Bluetooth</a> connection, you can thank Intel for that.</p><p>Craig Kinnie, the director of Intel Architecture Labs in the 1990s, <a href="https://www.newspapers.com/article/the-news-tribune-microsoftintel-accord/140619683/" rel="noopener noreferrer" target="_blank"><u>said it best in 1995</u></a>, upon coming to an agreement with <a href="https://spectrum.ieee.org/tag/microsoft">Microsoft</a> on a 3D graphics architecture for the PC platform. “What’s important to us is we move in the same direction,” he said. “We are working on convergent paths now.”</p><p>That was about collaborating with Microsoft. But really, it has been Intel’s modus operandi for decades—what’s good for the technology field is good for Intel. Innovations developed or invented by Intel—like Thunderbolt, <a href="https://www.digitaltrends.com/computing/how-ultrabooks-challenged-macbook-air-and-won/" rel="noopener noreferrer" target="_blank"><u>Ultrabooks</u></a>, and Next Unit Computers (<a href="https://en.wikipedia.org/wiki/Next_Unit_of_Computing" rel="noopener noreferrer" target="_blank"><u>NUCs</u></a>)—have done much to shape the way we buy and use computers. </p><p>For all the talk of Moore’s Law as a driving factor behind Intel’s success, the true story might be its sheer cat-herding capabilities. The company that builds the standards builds the industry. Even as Intel faces increasing competition from alliterative processing players like ARM, Apple, and AMD, as long as it doesn’t lose sight of the roles standards played in its success, it might just hold on a few years longer.</p><p>Ironically, Intel’s standards-driving winning streak, now more than three decades old, might have all started the day it decided to walk out on a standards body.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Dwarf Fortress starting during apt-get upgrade (111 pts)]]></title>
            <link>https://askubuntu.com/questions/938606/dwarf-fortress-starting-during-apt-get-upgrade</link>
            <guid>40402557</guid>
            <pubDate>Sat, 18 May 2024 22:16:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://askubuntu.com/questions/938606/dwarf-fortress-starting-during-apt-get-upgrade">https://askubuntu.com/questions/938606/dwarf-fortress-starting-during-apt-get-upgrade</a>, See on <a href="https://news.ycombinator.com/item?id=40402557">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="text">
<p>With a question as weird as this, it's of course impossible to say for sure -- but I'll eat my hat if my first hunch isn't correct. :)</p>

<p>The only way I can think of, how such unrelated things could be linked is this:
After installing (well, extracting) Dwarf Fortress, instead of going to the directory every time and running it with <code>./df</code>, you wanted to be able to run it from anywhere, like any old command. You added the Dwarf Fortress directory to your <code>$PATH</code>, <em>before</em> the system directories, perhaps by chance, perhaps because you noticed it didn't work otherwise, and you'd instead just get information about your filesystems.</p>

<p>Dwarf Fortress's executable is named <code>df</code>, which is also the name of a system tool for displaying disk space usage of your filesystems, creating a collision. By making it so that when you type <code>df</code>, Dwarf Fortress starts, you've shadowed the system tool, so when a script wants to - let's say - check if you have enough free space for unpacking an archive, instead of invoking <code>df</code> - the system tool - it'll start Dwarf Fortress instead. And after you quit Dwarf Fortress, the poor little script will be very confused as to why it wasn't given the disk usage information it asked for.</p>

<p>Anyway, thanks for the laugh, this has to be among the funniest problems I've ever seen voiced on StackExchange. :)</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sam Altman on opeanai non disparagement exit clause (125 pts)]]></title>
            <link>https://x.com/sama/status/1791936857594581428</link>
            <guid>40402091</guid>
            <pubDate>Sat, 18 May 2024 21:03:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://x.com/sama/status/1791936857594581428">https://x.com/sama/status/1791936857594581428</a>, See on <a href="https://news.ycombinator.com/item?id=40402091">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
    </channel>
</rss>