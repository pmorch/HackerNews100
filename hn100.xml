<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 24 Apr 2025 18:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[One quantum transition makes light at 21 cm (102 pts)]]></title>
            <link>https://bigthink.com/starts-with-a-bang/21cm-magic-length/</link>
            <guid>43784721</guid>
            <pubDate>Thu, 24 Apr 2025 16:38:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bigthink.com/starts-with-a-bang/21cm-magic-length/">https://bigthink.com/starts-with-a-bang/21cm-magic-length/</a>, See on <a href="https://news.ycombinator.com/item?id=43784721">Hacker News</a></p>
<div id="readability-page-1" class="page"><div x-data="prose">

                    
<div>
                            <p>
                    Sign up for the Starts With a Bang newsletter              </p>
                                            <p>
                    Travel the universe with Dr. Ethan Siegel as he answers the biggest questions of all.         </p>
                        </div>
<!--?xml encoding="utf-8" ?--><p>In our Universe, quantum transitions are the governing rule behind every nuclear, atomic, and molecular phenomenon. Unlike the planets in our Solar System, which could stably orbit the Sun at any distance if they possessed the right speed, the protons, neutrons, and electrons that make up all the conventional matter we know of can only bind together in a specific set of configurations. These possibilities, although numerous, are finite in number, as the quantum rules that govern electromagnetism and the nuclear forces restrict how atomic nuclei and the electrons that orbit them can arrange themselves.</p><p>In all the Universe, the most common atom of all is hydrogen, with just one proton and one electron. Wherever new stars form, hydrogen atoms become ionized, becoming neutral again if those free electrons can find their way back to a free proton. Although the electrons will typically cascade down the allowed energy levels into the ground state, that normally produces only a specific set of infrared, visible, and ultraviolet light. But more importantly, a special transition occurs in hydrogen that produces light of about the size of your hand: 21 centimeters (about 8¼”) in wavelength. Even as a physicist, you’d be well justified to call this the “magic length” of our Universe, as it just might someday unlock the darkest secrets hiding out in the deepest cosmic recesses from which starlight will never escape.</p><!--?xml encoding="utf-8" ?--><figure><img fetchpriority="high" decoding="async" width="638" height="479" src="https://bigthink.com/wp-content/uploads/2022/12/cosmology-with-the-21cm-line-3-638.jpg" alt="" sizes="(max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/cosmology-with-the-21cm-line-3-638.jpg 638w, https://bigthink.com/wp-content/uploads/2022/12/cosmology-with-the-21cm-line-3-638.jpg?resize=375,282 375w"><div><div><p>Backlit by the cosmic microwave background, a cloud of neutral gas can imprint a signal on that radiation at a specific wavelength and redshift. If we can measure this light with great enough sensitivity, we can actually hope to someday map out the locations and densities of gas clouds in the Universe thanks to the science of 21 cm astronomy. A dip in brightness temperature at redshifts of 15-20, observed in 2018, may be due to exactly the effect of 21-cm emission, although better instrumentation and better observational examples will be required to confirm such a claimed detection.
</p></div><figcaption><a href="https://www.slideshare.net/CosmoAIMS/cosmology-with-the-21cm-line" target="_blank">Credit</a>: Gianni Bernardi, via his AIMS talk
</figcaption></div></figure><p>When it comes to the light in the Universe, wavelength is the one property that you can count on to reveal how that light was created. Even though light comes to us in the form of photons — individual quanta that, collectively, make up the phenomenon we know as light — there are two very different classes of quantum process that create the light that surrounds us: continuous ones and discrete ones.</p><p>A continuous process is something like the light emitted by the photosphere of the Sun. It’s a dark object that’s been heated up to a certain temperature, and it radiates light of all different, continuous wavelengths as dictated by that temperature: what physicists know as blackbody radiation. More accurately, because the different layers of the photosphere are at different temperatures, the solar spectrum acts like a series of blackbodies all summed together: an amalgam of continuous processes.</p><p>A discrete process, however, doesn’t allow for the emission of light of a continuous set of wavelengths, but rather only at extremely specific, or discrete (and quantized), wavelengths. A good example of that is the light absorbed by the neutral atoms present within the extreme outer layers of the Sun. As the blackbody radiation from the lower layers of the photosphere strikes those neutral atoms sitting at the surface, a few of those photons will have just the right wavelengths to be absorbed by the electrons within the neutral atoms they encounter. When we break sunlight up into its individual wavelengths, the various absorption lines present against the backdrop of continuous, blackbody radiation reveal both of these processes to us.</p><!--?xml encoding="utf-8" ?--><figure><img decoding="async" width="8192" height="5464" src="https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?w=8192" alt="" sizes="(max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg 8192w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=1536,1025 1536w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=2048,1366 2048w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=20,12 20w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=375,250 375w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=640,427 640w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=768,512 768w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=1024,683 1024w, https://bigthink.com/wp-content/uploads/2022/02/solarspectrum.jpg?resize=1280,854 1280w"><div><div><p>The visible light spectrum of the Sun, which helps us understand not only its temperature and ionization, but the abundances of the elements present. The long, thick lines are hydrogen and helium, but every other line is from a heavy element that must have been created in a previous-generation star, rather than the hot Big Bang.
</p></div><figcaption><a href="https://solarsystem.nasa.gov/resources/390/the-solar-spectrum/" target="_blank">Credit</a>: N.A.Sharp, NOAO/NSO/Kitt Peak FTS/AURA/NSF
</figcaption></div></figure><p>Each individual atom has its properties primarily defined by its nucleus, made up of protons (which determine its charge) and neutrons (which, combined with protons, determine its mass). Atoms also have electrons, which orbit the nucleus at a distance determined by their charge-to-mass ratio, and each electron can only occupy a specific set of energy levels. In isolation, each atom will come to exist in the ground state: where the electrons cascade down until they occupy the lowest allowable energy levels, limited only by the quantum rules that determine the various properties that electrons are and aren’t allowed to possess.</p><p>Electrons can occupy the ground state — the 1s orbital — of an atom until it’s full, which can hold two electrons. The next energy level up consists of spherical (the 2s) and perpendicular (the 2p) orbitals, which can hold two and six electrons, respectively, for a total of eight. The third energy level can hold 18 electrons: 3s (with two), 3p (with six), and 3d (with ten), and the pattern continues on upward. In general, the “upward” transitions occur when a photon of a particular wavelength gets absorbed, while the “downward” transitions can occur spontaneously, and result in the emission of photons of the exact same wavelengths as are present within the atom’s absorption spectrum.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="960" height="714" src="https://bigthink.com/wp-content/uploads/2021/10/e.jpg?w=960" alt="atom" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2021/10/e.jpg 960w, https://bigthink.com/wp-content/uploads/2021/10/e.jpg?resize=375,279 375w, https://bigthink.com/wp-content/uploads/2021/10/e.jpg?resize=640,476 640w, https://bigthink.com/wp-content/uploads/2021/10/e.jpg?resize=768,571 768w"><div><div><p>Electron transitions in the hydrogen atom, along with the wavelengths of the resultant photons, showcase the effect of binding energy and the relationship between the electron and the proton in quantum physics. The Bohr model of the atom provides the coarse (or rough, or gross) structure of these energy levels. Hydrogen’s brightest atomic transition is Lyman-alpha (n=2 to n=1), but its second brightest is visible: Balmer-alpha (n=3 to n=2), which emits visible (red) light at a wavelength of 656 nanometers. The energy lost by an electron cascading down the energy levels gets emitted in the form of photons.
</p></div><figcaption><a href="https://commons.wikimedia.org/wiki/File:Hydrogen_transitions.svg" target="_blank">Credit</a>: OrangeDog and Szdori/Wikimedia Commons
</figcaption></div></figure><p>That’s the basic structure of an atom, sometimes referred to as “coarse structure.” When you transition from the third energy level to the second energy level in a hydrogen atom, for example, you produce a photon that’s red in color, with a wavelength of precisely 656.3 nanometers: right in the visible light range of human eyes.</p><p>But there are very, very slight differences between the exact, precise wavelength of a photon that gets emitted if you transition from:</p><ul>
<li>the third energy level down to either the 2s or the 2p orbital,</li>



<li>an energy level where the spin angular momentum and the orbital angular momentum are aligned versus one where they’re anti-aligned,</li>



<li>or one where the nuclear spin and the electron spin are aligned versus anti-aligned.</li>
</ul><p>There are rules as to what’s allowed versus what’s forbidden in quantum mechanics as well, such as the fact that you can transition an electron from a d-orbital to either an s-orbital or a p-orbital, and from an s-orbital to a p-orbital, but not from an s-orbital to another s-orbital. </p><p>The slight differences in energy that arise between transitions of different types of orbital within the same energy level is known as an atom’s fine-structure, arising from the interaction between the spin of each particle within an atom and the orbital angular momentum of the electrons around the nucleus. It causes a shift in wavelength of less than 0.1%: small compared to the atom’s course structure, but still measurable and significant.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="960" height="375" src="https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg?w=960" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg 960w, https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg?resize=375,146 375w, https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg?resize=640,250 640w, https://bigthink.com/wp-content/uploads/2022/04/960x0-2.jpg?resize=768,300 768w"><div><div><p>The atomic transition from the 6S orbital in a cesium-133 atom, Delta_f1, is the transition that defines the meter, second, and the speed of light. Slight changes in the observed frequency of this light will occur based on motion and the properties of spatial curvature between any two locations. Spin-orbit interactions, as well as various quantum rules and the application of an external magnetic field, can cause additional splitting at narrow intervals in these energy levels: examples of fine and hyperfine structure.
</p></div><figcaption><a href="https://www.researchgate.net/profile/Juergen-Czarske/publication/255713467_Optical_multi-point_measurements_of_the_acoustic_particle_velocity_with_frequency_modulated_Doppler_global_velocimetry/links/00b7d52693279317cc000000/Optical-multi-point-measurements-of-the-acoustic-particle-velocity-with-frequency-modulated-Doppler-global-velocimetry.pdf" target="_blank">Credit</a>: A. Fischer et al., Journal of the Acoustical Society of America, 2013
</figcaption></div></figure><p>However, owing to the weird phenomena that occur within quantum mechanics, even “forbidden” transitions can sometimes occur. These transitions occur due to the phenomenon of quantum tunneling, where a quantum state can spontaneously transition to another, lower-energy quantum state. Sure, you might not be able to transition from an s-orbital to another s-orbital directly, but if you can:</p><ul>
<li>transition from an s-orbital to a p-orbital and then back to an s-orbital,</li>



<li>transition from an s-orbital to a d-orbital and then back to an s-orbital,</li>



<li>or, more generally, transition from an s-orbital to any other allowable state and then back to an s-orbital,</li>
</ul><p>then that transition can occur. The only thing weird about quantum tunneling is that you don’t have to have a “real” transition occur to the intermediate state. Real transitions require energy, and even with insufficient energies, the intermediate state can be bypassed under the rules of quantum physics. This occurs when transitions happen virtually (as opposed to real transitions), so that you only see the final state emerge from the initial state: something that would be forbidden without the invocation of quantum tunneling.</p><p>This allows us to go beyond mere “coarse structure” and “fine structure,” allowing us to probe what’s known as hyperfine structure. Hyperfine structure appears where the spin of the atomic nucleus and one of the electrons that orbit it begin in an “aligned” state, where the spins are both in the same direction even though the electron is in the lowest-energy, ground (1s) state, and then transitions to an anti-aligned state, where the spins are reversed.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="962" height="990" src="https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg 962w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=20,20 20w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=40,40 40w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=375,386 375w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=640,659 640w, https://bigthink.com/wp-content/uploads/2022/12/Hydrogen_emission1.jpg?resize=768,790 768w"><div><div><p>Whenever a neutral hydrogen atom forms, the electron within it will spontaneously de-excite until it’s in the lowest (1s) state of the atom. With a 50/50 chance of having those spins of the electron and proton aligned, half of those atoms will be able to quantum tunnel into the anti-aligned state, emitting radiation of 21 centimeters (1420 MHz) in the process. This should allow us to probe clumps of neutral hydrogen even farther back than the existence of the first stars.
</p></div><figcaption><a href="https://www.skatelescope.org/radio-astronomy/" target="_blank">Credit</a>: SKA Organisation
</figcaption></div></figure><p>The most famous of these transitions occurs in the simplest type of atom of all: hydrogen. With just one proton and one electron, every time you form a neutral hydrogen atom and the electron cascades down to the ground (lowest-energy) state, there’s a 50% chance that the spins of the central proton and the electron will be aligned, with a 50% chance that the spins will be anti-aligned.</p><p>If the spins are anti-aligned, that’s truly the lowest-energy state; there’s nowhere to go via any known transition that will result in the emission of energy at all. But if the spins are aligned, it’s a slightly higher energy state than in the anti-aligned case. A hydrogen atom whose electron and proton both spin in the same direction could quite possibly transition, through quantum tunneling, to the anti-aligned state. Even though the direct transition process is forbidden, tunneling allows you to go straight from the starting point to the ending point, emitting a photon in the process.</p><p>This transition, because of its “forbidden” nature, takes an extremely long time to occur: approximately 10 million years for the average atom. However, this long lifetime of the slightly excited, aligned case for a hydrogen atom has an upside to it: the photon that gets emitted, at 21 centimeters in wavelength and with a frequency of 1420 megahertz, is intrinsically, extremely narrow. In fact, it’s the narrowest, most precise transition line known in all of atomic and nuclear physics! </p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="826" height="537" src="https://bigthink.com/wp-content/uploads/2022/12/universe.png" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/universe.png 826w, https://bigthink.com/wp-content/uploads/2022/12/universe.png?resize=20,12 20w, https://bigthink.com/wp-content/uploads/2022/12/universe.png?resize=375,244 375w, https://bigthink.com/wp-content/uploads/2022/12/universe.png?resize=640,416 640w, https://bigthink.com/wp-content/uploads/2022/12/universe.png?resize=768,499 768w"><div><div><p>This map of the Milky Way, in red, maps out the neutral hydrogen in 21 centimeter emissions. This map is not uniform, but rather tracks recent ionization and atom formation, as the half-life of spin-aligned atoms to flip is only around ~10 million years: a long time in the lab, but a short time compared to the ~13+ billion year history of our galaxy.
</p></div><figcaption>(<a href="https://labplot.kde.org/2020/12/28/the-universe-full-of-hydrogen-and-a-new-feature-in-labplot/" target="_blank">Credit</a>: J.Dickey/NASA SkyView)
</figcaption></div></figure><p>If you were to go all the way back to the early stages of the hot Big Bang, before any stars had formed, you’d discover that a whopping 92% of the atoms in the Universe were exactly this species of hydrogen: with one proton and one electron in them. (At the present time, after all the stars that have formed some 13.8 billion years later, that number is down to “only” about 90% of all atoms.) As soon as neutral atoms stably form — just a few hundred thousand years after the Big Bang — these neutral hydrogen atoms form with a 50/50 chance of having aligned versus anti-aligned spins. The ones that form anti-aligned will remain so; the ones that form with their spins aligned will undergo this spin-flip transition, emitting radiation of 21 centimeters in wavelength.</p><p>Although it’s never yet been done, this gives us a tremendously provocative way to measure the early stages of the Universe as never before. If we could find a cloud of hydrogen-rich gas, even one that’s never formed stars, we could look for this spin-flip signal — accounting for the expansion of the Universe and the corresponding redshift of the light — to measure the atoms in the Universe from the earliest times ever seen. The only “broadening” to the line we’d expect to see would come from thermal and kinetic effects: from the non-zero temperature and the gravitationally-induced motion of the atoms that emit those 21 centimeter signals.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="699" height="300" src="https://bigthink.com/wp-content/uploads/2022/12/thermalbroadening.jpg?w=699" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/thermalbroadening.jpg 699w, https://bigthink.com/wp-content/uploads/2022/12/thermalbroadening.jpg?resize=375,161 375w, https://bigthink.com/wp-content/uploads/2022/12/thermalbroadening.jpg?resize=640,275 640w"><div><div><p>If particles that emitted radiation were completely at rest and were at a temperature indistinguishable from absolute zero, the width of any emission lines would be determined solely by the speed of the transition. The 21 cm hydrogen line is incredibly, intrinsically narrow, but the kinetic motion of the material in galaxies, as well as the thermal energy because the gas is at a positive, non-zero temperature, both contribute to the observed width of these lines.
</p></div><figcaption>(<a href="https://astronomy.swin.edu.au/cosmos/t/thermal+doppler+broadening" target="_blank">Credit</a>: Swinburne University of Technology)
</figcaption></div></figure><p>In addition to those primordial signals, 21 centimeter radiation arises as a consequence whenever new stars are produced. Every time that a star-forming event occurs, the more massive newborn stars produce large amounts of ultraviolet radiation: radiation that’s energetic enough to ionize hydrogen atoms. All of a sudden, space that was once filled with neutral hydrogen atoms is now filled with free protons and free electrons.</p><p>But those electrons aren’t going to remain ionized forever; if the interstellar environment they’re located in has enough free atomic nuclei (e.g., protons), they’re going to eventually be captured, once again, by those protons. Once the most massive stars have died away, there’s no longer going to be enough ultraviolet radiation to continue to ionize them over and over again, and then those electrons will once again sink down to the ground state, where they’ll have a 50/50 chance of being aligned or anti-aligned with the spin of the atomic nucleus.</p><p>Again, that same radiation — of 21 centimeters in wavelength — gets produced over timescales of ~10 million years. Every time we measure that 21 centimeter wavelength localized in a specific region of space, even if it gets redshifted by the expansion of the Universe, what we’re seeing is evidence of recent star-formation. Wherever star-formation occurs, hydrogen gets ionized, and whenever those atoms become neutral and de-excite again, this specific-wavelength radiation persists for tens of millions of years.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="1120" height="1024" src="https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?w=1120" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png 1120w, https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?resize=375,343 375w, https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?resize=640,585 640w, https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?resize=768,702 768w, https://bigthink.com/wp-content/uploads/2022/04/1120px-Hydrogen-SpinFlip.svg.png?resize=1024,936 1024w"><div><div><p>When a hydrogen atom forms, it has equal probability of having the electron’s and proton’s spins be aligned and anti-aligned. If they’re anti-aligned, no further transitions will occur, but if they’re aligned, they can quantum tunnel into that lower energy state, emitting a photon of a very specific wavelength (21 cm) on very specific, and rather long, timescales. The precision of this transition has been measured to better than 1-part-in-a-trillion, and has not varied over the many decades it’s been known. It is the first light emitted in the Universe after the formation of neutral atoms: even before the formation of the first stars, but also thereafter: whenever new stars are formed, ultraviolet emission ionizes hydrogen atoms, creating this signature once again when those atoms spontaneously re-form.
</p></div><figcaption><a href="https://commons.wikimedia.org/wiki/File:Hydrogen-SpinFlip.svg" target="_blank">Credit</a>: Tiltec/Wikimedia Commons
</figcaption></div></figure><p>If we had the capability of sensitively mapping this 21 centimeter emission in all directions and at all redshifts (i.e., distances) in space, we could literally uncover the star-formation history of the entire Universe, as well as the de-excitation of the hydrogen atoms first formed in the aftermath of the hot Big Bang. With sensitive enough observations, we could answer questions like:</p><ul>
<li>Are there stars present in dark voids in space below the threshold of what we can observe, waiting to be revealed by their de-exciting hydrogen atoms?</li>



<li>In galaxies where no new star-formation is observed, is star-formation truly over, or are there low-levels of new stars being born, just waiting to be discovered from this telltale signature of hydrogen atoms?</li>



<li>Are there any events that heat up and lead to hydrogen ionization prior to the formation of the first stars, and are there star-formation bursts that exist beyond the capabilities of even our most powerful infrared observatories to observe directly?</li>
</ul><p>By measuring light of precisely the needed wavelength — peaking at precisely 21.106114053 centimeters, plus whatever lengthening effects arise from the cosmic expansion of the Universe — we could reveal the answers to all of these questions and more. In fact, this is one of the main science goals of <a href="https://www.astron.nl/telescopes/lofar/" target="_blank" rel="noreferrer noopener">LOFAR</a>: the low-frequency array, and it presents a strong science case for putting an upscaled version of this array on the radio-shielded far side of the Moon.</p><!--?xml encoding="utf-8" ?--><figure><img loading="lazy" decoding="async" width="2290" height="1582" src="https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?w=2290" alt="" sizes="auto, (max-width: 767px) 96vw, (max-width: 1280px) 60vw, (max-width: 1536px) 46vw, 710px" srcset="https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg 2290w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=1536,1061 1536w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=2048,1415 2048w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=375,259 375w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=640,442 640w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=768,531 768w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=1024,707 1024w, https://bigthink.com/wp-content/uploads/2022/12/niac2020_bandyopadhyay.jpg?resize=1280,884 1280w"><div><div><p>Constructing either a very large radio dish, perhaps in a lunar crater, or alternatively an array of radio telescopes, on the far side of the Moon, could enable unparalleled radio observations of the Universe, including in the all-important 21 centimeter range, both nearby and across cosmic time. The ability to map out where neutral hydrogen has newly formed within the past ~10-20 million years would advance our understanding of cosmic history like nothing else.
</p></div><figcaption><a href="https://www.nasa.gov/directorates/spacetech/niac/2020_Phase_I_Phase_II/lunar_crater_radio_telescope/" target="_blank">Credit</a>: Saptarshi Bandyopadhyay
</figcaption></div></figure><p>Of course, there’s another possibility that takes us far beyond astronomy when it comes to making use of this important length: creating and measuring enough spin-aligned hydrogen atoms in the lab to detect this spin-flip transition directly, in a controlled fashion. The transition takes about ~10 million years to “flip” on average, which means we’d need around a quadrillion (10<sup>15</sup>) prepared atoms, kept still and cooled to cryogenic temperatures, to measure not only the emission line, but the width of it. If there are phenomena that cause an intrinsic line-broadening, such as <a href="https://www.sciencedirect.com/science/article/pii/S0370269305003412">a primordial gravitational wave signal</a>, such an experiment would, quite remarkably, be able to uncover its existence and magnitude.</p><p>In all the Universe, there are only a few known quantum transitions with the precision inherent to the hyperfine spin-flip transition of hydrogen, which results in the emission of radiation that’s 21 centimeters in wavelength. If we want to identify:</p><ul>
<li>ongoing and recent star-formation across the Universe,</li>



<li>the first atomic signals even before the first stars were formed,</li>



<li>or the relic strength of yet-undetected gravitational waves left over from cosmic inflation,</li>
</ul><p>it becomes clear that the 21 centimeter transition is the most important probe we have in all the cosmos. In many ways, it’s the “magic length” for uncovering some of nature’s greatest secrets, and can take us closer to the Big Bang than observations of any stars or galaxies could ever hope to.</p><p><em>This article was originally published in December of 2022. It was updated in 2025.</em></p>

<div>
                            <p>
                    Sign up for the Starts With a Bang newsletter              </p>
                                            <p>
                    Travel the universe with Dr. Ethan Siegel as he answers the biggest questions of all.         </p>
                        </div>

                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Instant SQL for results as you type in DuckDB UI (190 pts)]]></title>
            <link>https://motherduck.com/blog/introducing-instant-sql/</link>
            <guid>43782406</guid>
            <pubDate>Thu, 24 Apr 2025 13:23:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://motherduck.com/blog/introducing-instant-sql/">https://motherduck.com/blog/introducing-instant-sql/</a>, See on <a href="https://news.ycombinator.com/item?id=43782406">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Today, we’re releasing <strong>Instant SQL</strong>, a new way to write SQL that updates your result set as you type to expedite query building and debugging – all with zero-latency, no run button required. Instant SQL is now available in Preview in <a href="https://motherduck.com/">MotherDuck</a> and the <a href="https://duckdb.org/docs/stable/extensions/ui.html">DuckDB Local UI</a>.</p>
<p><img alt="Intro GIF" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_trailer_v1_90035393ab.gif&amp;w=3840&amp;q=75"></p><p>We built Instant SQL for a simple reason: writing SQL is still too tedious and slow. Not because of the language itself, but because the way we interact with databases hasn’t evolved much since SQL was created. Writing SQL isn’t just about syntax - It’s about making sense of your data, knowing what to ask, and figuring out how to get there. That process is iterative, and it’s <em>hard</em>.</p>
<blockquote>
<p>"Instant SQL will save me the misery of having to try and wrangle SQL in my BI tool where iteration speed can be very slow. This lets me get the data right earlier in the process, with faster feedback than waiting for a chart to render or clearing an analytics cache."
-- Mike McClannahan, CTO, <a href="https://www.getdashfuel.com/">DashFuel</a></p>
</blockquote>
<p>Despite how much database engines have improved, with things like columnar storage, vectorized execution, and the creation of blazing-fast engines like DuckDB, which can scan billions of rows in seconds, the experience of <em>building</em> a query hasn’t kept up. We still write queries in a text editor, hit a run button, and wait to see what happens.</p>
<p>At MotherDuck, we've been tackling this problem from multiple angles. Last year, we released the <a href="https://motherduck.com/blog/introducing-column-explorer/">Column Explorer</a>, which gives you fast distributions and summary statistics for all the columns in your tables and result sets. We also released <a href="https://motherduck.com/blog/introducing-fixit-ai-sql-error-fixer/">FixIt</a>, an unreasonably effective AI fixer for SQL. MotherDuck users love these tools because they speed up data exploration and query iteration.</p>
<p>Instant SQL isn't just an incremental improvement to SQL tooling: <em>It's a fundamentally new way to interact with your queries</em> - one where you can see your changes instantly, debug naturally, and actually trust the code that your AI assistant suggests. No more waiting. No more context switching. Just <em>flow</em>.</p>
<p>Let's take a closer look at how it works.</p>
<section><h2 id="generate-preview-results-as-you-type">Generate preview results as you type</h2><p>Everyone knows what it feels like to start a new query from scratch. Draft, run, wait, fix, run again—an exhausting cycle that repeats hundreds of times a day.</p><p>Instant SQL gives you result set previews that update as you type. You're no longer running queries—you're exploring your data in real-time, maintaining an analytical flow state where your best thinking happens.</p><img alt="GIF 1" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_1_15e918df5e.gif&amp;w=3840&amp;q=75"><p>Whether your query is a simple transformation or a complex aggregation, Instant SQL will let you preview your results in real-time.</p><img alt="GIF 2" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_2_cf6226ce64.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="inspect-and-edit-ctes-in-real-time">Inspect and edit CTEs in real-time</h2><p>CTEs are easy to write, but difficult to debug. How many times a day do you comment out code to figure out what's going on in a CTE? With Instant SQL, you can now click around and instantly visualize any CTE in seconds, rather than spend hours debugging. Even better, changes you make to a CTE are immediately reflected in all dependent select nodes, giving you real-time feedback on how your modifications cascade through the query.</p><img alt="GIF 3" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_3_760907ee77.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="break-apart-your-complex-column-expressions">Break apart your complex column expressions</h2><p>We've all been there; you write a complex column formula for an important business metric, and when you run the query, you get a result set full of <code>NULLs</code>. You then have to painstakingly dismantle it piece-by-piece to determine if the issue is your logic or the underlying data.</p><p>Instant SQL lets you break apart your column expressions in your <em>result table</em> to pinpoint exactly what's happening. Every edit you make to the query is instantly reflected in how data flows through the expression tree. This makes debugging anything from complex numeric formulas to regular expressions feel effortless.</p><img alt="GIF 4" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_decomp_v4_00daad41c8.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="preview-anything-duckdb-can-query-not-just-tables">Preview anything DuckDB can query - not just tables</h2><p>Instant SQL works for more than just DuckDB tables; it works for massive tables in MotherDuck, parquet files in S3, Postgres tables, SQLite, MySQL, Iceberg, Delta – you name it. If DuckDB can query it, you can see a preview of it.</p><p>This is, hands down, the <em>best</em> way to quickly explore and model external data.</p><img alt="GIF 5" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_4_1bcfbe9e71.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="fast-forward-to-a-useful-query-before-running-it">Fast-forward to a useful query before running it</h2><p>Instant SQL gives you the freedom to test and refine your query logic without the wait. You can quickly experiment with different approaches in real-time. When you're satisfied with what you see in the preview, you can then run the query for your final, materialized results. This approach cuts hours off your SQL workflow, transforming the tedious cycle of write-run-wait into a fluid process of exploration and discovery.</p><img alt="GIF 6" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2Finstant_sql_run_46810b7e29.gif&amp;w=3840&amp;q=75"></section>
<section><h2 id="instantly-preview-ai-powered-edit-suggestions">Instantly preview AI-powered edit suggestions</h2><p>All of these workflow improvements are great for humans, but they're even better when you throw AI features into the mix. Today, we're also releasing a new inline prompt editing feature for MotherDuck users. You can now select a bit of text, hit cmd+k (or ctrl+k for Windows and Linux users), write an instruction in plain language, and get an AI suggestion.</p><p>Instant SQL makes this inline edit feature work magically. When you get a suggestion, you immediately see the suggestion applied to the result set. No more flipping a coin and accepting a suggestion that might ruin your hard work.</p><img alt="GIF 7" loading="lazy" decoding="async" data-nimg="fill" sizes="90vw,
                        (min-width: 728px) 800px,
                        (min-width: 960px) 950px," srcset="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=640&amp;q=75 640w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=750&amp;q=75 750w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=828&amp;q=75 828w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=1080&amp;q=75 1080w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=1200&amp;q=75 1200w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=1920&amp;q=75 1920w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=2048&amp;q=75 2048w, https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=3840&amp;q=75 3840w" src="https://motherduck.com/_next/image/?url=https%3A%2F%2Fmotherduck-com-web-prod.s3.amazonaws.com%2Fassets%2Fimg%2FGIF_6_a58587fe64.gif&amp;w=3840&amp;q=75"><section><h3 id="why-hasnt-anyone-done-this-before">Why hasn't anyone done this before?</h3><p>As soon as we had a viable prototype of Instant SQL, we began to ask ourselves: <em>why hasn't anyone done something like this before?</em> It seems obvious in hindsight. It turns out that you need a unique set of requirements to make Instant SQL work.</p></section><section><h3 id="a-way-to-drastically-reduce-the-latency-in-running-a-query">A way to drastically reduce the latency in running a query</h3><p>Even if you made your database return results in milliseconds, it won’t be much help if you’re sending your queries to us-east-1. DuckDB’s local-first design, along with principled performance optimizations and friendly SQL, made it possible to use <em>your computer</em> to parse queries, cache dependencies, and rewrite &amp; run them. Combined with MotherDuck’s dual execution architecture, you can effortlessly preview and query massive amounts of data with low latency.</p></section><section><h3 id="a-way-to-rewrite-queries">A way to rewrite queries</h3><p>Making Instant SQL requires more than just a performant architecture. Even if DuckDB is fast, real-world ad hoc queries may still take longer 100ms to return a result. And of of course, DuckDB can also query remote data sources. We need a way to locally cache samples of certain table references and rewrite our queries to point to those.</p><p>A few years ago, DuckDB hid a piece of magic in the JSON extension: a way to get an abstract syntax tree (or AST) from any SELECT statement via a <a href="https://duckdb.org/docs/stable/data/json/sql_to_and_from_json.html">SQL scalar function</a>. This means any toolmaker can build parser-powered features using this important part of DuckDB's database internals - no need to write your own SQL parser from scratch.</p></section><section><h3 id="a-caching-system-that-accurately-models-your-query">A caching system that accurately models your query</h3><p>Of course, showing previews as you type requires more than just knowing where you are in the query. We've implemented several sophisticated local caching strategies to ensure results appear instantly. Think of it as a system that anticipates what you might want to see and prepares it ahead of time. The details of these caching techniques are interesting enough to deserve their own blog post. But suffice it to say, once the cache is warm, the results materialize before you can even lift your fingers from the keyboard.</p><p>Without this perfect storm of technical capabilities – a fast local SQL engine, parser accessibility, precise cursor-to-AST mapping, and intelligent caching – Instant SQL simply couldn't exist.</p></section><section><h3 id="a-way-to-preview-any-select-node-in-a-query">A way to preview any SELECT node in a query</h3><p>Getting the AST is a big step forward, but we still need a way to take your cursor position in the editor and map it to a <em>path</em> through this AST. Otherwise, we can’t know which part of the query you're interested in previewing. So we built some simple tools that pair DuckDB’s parser with its tokenizer to enrich the parse tree, which we then use to pinpoint the start and end of all nodes, clauses, and select statements. This cursor-to-AST mapping enables us to show you a preview of exactly the <code>SELECT</code> statement you're working on, no matter where it appears in a complex query.</p></section></section>
<section><h2 id="try-instant-sql">Try Instant SQL</h2><p>Instant SQL is now available in Preview in <a href="https://motherduck.com/">MotherDuck</a> and the <a href="https://duckdb.org/docs/stable/extensions/ui.html">DuckDB Local UI</a>. Give it a try to experience firsthand how fast SQL flies when real-time query results are at your fingertips as you type. Our new, prompt-based Edit feature is also available to MotherDuck users.</p><iframe title="https://www.youtube.com/embed/aFDUlyeMBc8?si=ctYNCcpZKFP3On0Z" src="https://www.youtube.com/embed/aFDUlyeMBc8?si=ctYNCcpZKFP3On0Z" width="560" height="315"></iframe><p>We’d love to hear more about how you’re using Instant SQL, and we look forward to hearing your stories and feedback on social media and in <a href="https://join.slack.com/t/motherduckcommunity/shared_invite/zt-33g6kee8z-SEUE3ylvflpolpYB7AIMgg">Slack</a>.</p></section>
<section><h2 id="ps-were-hiring">PS: We’re hiring!</h2><p>At MotherDuck, we’re building a future where analytics work for everyone - from new UI features like Instant SQL to the platforms and databases that power them. If you’re passionate about building complex, data-intensive interfaces, <a href="https://motherduck.com/careers/#open-positions">we’re hiring</a>, and we’d love to have you join the flock to help us make these features even more magical.</p></section></div><div id="content-table-wrapper"><div><h6>CONTENT</h6><ol><div><p><li data-has-children="false">Inspect and edit CTEs in real-time</li></p></div><div><p><li data-has-children="false">Break apart your complex column expressions</li></p></div></ol></div><div><p>Start using MotherDuck now!</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I wrote to the address in the GPLv2 license notice (2022) (410 pts)]]></title>
            <link>https://code.mendhak.com/gpl-v2-address-letter/</link>
            <guid>43781888</guid>
            <pubDate>Thu, 24 Apr 2025 12:26:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://code.mendhak.com/gpl-v2-address-letter/">https://code.mendhak.com/gpl-v2-address-letter/</a>, See on <a href="https://news.ycombinator.com/item?id=43781888">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
<p>Dealing with open source software, I regularly encounter many kinds of licenses — MIT, Apache, BSD, GPL being the most prominent — and I’ve taken time out to read them.  Of the many, the GNU General Public License (GPL) stands out the most.  It <a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html">reads like a letter</a> to the reader rather than legalese, and feels quite in tune with the spirit of open source and software freedom.</p>
<p>Although GPLv3 is the most current version, I commonly encounter software that makes use of GPLv2.  I got curious about the last line in its license notice:</p>
<pre><code>You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
</code></pre>
<p>Why does this license notice have a physical address, and not a URL?  After all, even though the full license doesn’t often get included with software, it’s a simple matter to do a search and find the text of the GPLv2. Do people write to this address, and what happens if you do?</p>
<h2 id="asking-the-question-on-stack-exchange" tabindex="-1"><a href="#asking-the-question-on-stack-exchange">Asking the question on Stack Exchange</a></h2>
<p>I turned to the <a href="https://opensource.stackexchange.com/questions/12714/why-does-gplv2-include-a-mailing-address-51-franklin-street-in-the-license-not">Open Source Stack Exchange</a> and got a very helpful answer.  It’s because the GPLv2 was published in 1991, and most people were not online.  Most people would have acquired software through physical media (such as tape or floppies) rather than a download.</p>
<p>Considering the storage constraints back then, it wouldn’t be surprising if developers only included the license notice, and not the entire license.  It makes sense that the most common form of communication would have been through post.</p>
<p>The GPLv3, published in 2007, does contain a URL in the license notice since Internet usage was more widespread at the time.</p>
<h2 id="writing-to-them" tabindex="-1"><a href="#writing-to-them">Writing to them</a></h2>
<p>I decided to write to the address to see what would happen.  To do that, I would need some stamps and envelopes (I found one at my workplace) to send the request, and a self addressed enveloped with an <a href="https://en.wikipedia.org/wiki/International_reply_coupon">international reply coupon</a> to cover the cost of the reply.</p>
<p>I was disappointed to find out that the UK’s Royal Mail <a href="https://www.royalmail.com/reply-sender">discontinued international reply coupons in 2011</a>.  The only alternative that I could think of was to buy some US stamps.</p>
<h3 id="i-got-some-stamps" tabindex="-1"><a href="#i-got-some-stamps">I got some stamps</a></h3>
<p>The easiest place to look for US stamps was on Ebay.  I didn’t realize that I was stepping briefly into the world of philately; most stamp listings on Ebay were covered in phrases and terminology such as very fine grade, MNH (Mint Never Hinged), FDC (First Day Cover), NDC (No Die Cut), NDN (Nondenominated), and so on.  It’s pretty easy to glean that these are properties that collectors would be looking for.</p>
<p>I ordered what seemed to be a ‘global’ stamp, for the smallest but safest amount that I could (about £3.86).  The listing mentioned that it was ‘uncertified’ which was mildly unnerving, did that mean it was an invalid stamp? I decided to chance it, and quickly exited that world.</p>
<p>After a few weeks of waiting, I eventually received the ‘African Daisy global forever vert pair’ stamp which was round!  I should have noticed that the seller sent me the item using stamps at a much lower denomination that those I had ordered.  Oh well.</p>
<figure>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/003a.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/003a.jpg" alt="" loading="lazy" title=""></a>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/003b.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/003b.jpg" alt="" loading="lazy" title=""></a>
<figcaption>Ebay seller sent me some stamps</figcaption></figure>
<h3 id="i-prepared-the-request" tabindex="-1"><a href="#i-prepared-the-request">I prepared the request</a></h3>
<p>With the self addressed envelope ready, I wrote the request and addressed it to the GPLv2 address.  Luckily I did have some UK stamps available to send the letter with.</p>
<figure><a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/004a.jpg">
    <img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/004a.jpg" alt="" loading="lazy"></a>
    <figcaption>I wrote a letter</figcaption>
  </figure>
<p>Writing the address on the envelope was awkward, as I haven’t used a pen in several years; it took a few attempts and some wasted envelopes, printing the address would have taken less time.  But it was ready so I posted it in my nearest Royal Mail box.</p>
<h2 id="receiving-the-reply" tabindex="-1"><a href="#receiving-the-reply">Receiving the reply</a></h2>
<p>I had posted the letter in June 2022 and about five later weeks later, I received a reply.  The round stamps looked sufficiently stamped upon with wavy lines, known as <a href="https://en.wikipedia.org/wiki/Cancellation_(mail)">cancellation marks</a>, which are yet another thing that philatelists like to collect!</p>
<figure><a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/005a.jpg">
    <img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/005a.jpg" alt="" loading="lazy"></a>
    <figcaption>I received a reply</figcaption>
  </figure>
<p>Anyway the letter inside contained the full license text on 5 sheets of double-sided paper.</p>
<h3 id="the-paper-was-a-weird-size" tabindex="-1"><a href="#the-paper-was-a-weird-size">The paper was a weird size</a></h3>
<p>The first thing that came to attention, the paper that the text was printed on wasn’t an A4, it was smaller and not a size I was familiar with.  I measured it and found that it’s a US letter size paper at about 21.5cm x 27.9cm.  I completely forgot that the US, Canada, and a few other countries don’t follow the standard international paper sizes, even though I had <a href="https://code.mendhak.com/paper-sizes-standard/#some-paper-sizes-are-arbitrary">written about it</a> earlier.</p>
<h3 id="i-received-the-gpl-v3" tabindex="-1"><a href="#i-received-the-gpl-v3">I received the GPL v3</a></h3>
<p>There was a problem that I noticed right away, though: this text was from the GPL <em>v3</em>, not the GPL <em>v2</em>.  In my original request I had never mentioned the GPL version I was asking about.</p>
<figure>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006a.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006a.jpg" alt="" loading="lazy" title=""></a>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006b.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006b.jpg" alt="" loading="lazy" title=""></a>
<a href="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006c.jpg"><img src="https://code.mendhak.com/assets/images/gpl-v2-address-letter/006c.jpg" alt="" loading="lazy" title=""></a>
<figcaption>GPL license</figcaption></figure>
<p>The original license notice makes no mention of GPL version either.  Should the fact that the license notice contained an address have been enough metadata or a clue, that I was actually requesting the GPL v2 license? Or should I have mentioned that I was seeking the GPLv2 license?</p>
<p>I could choose to pursue by writing again and requesting the right thing, but it would take too much effort to follow up on, and I’m overall satisfied with what I received.  As a postal introvert, I will now need a long period of rest to recoup.</p>

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cars and Key Fobs: Attacks on Car Remotes (141 pts)]]></title>
            <link>https://web.stanford.edu/class/ee26n/Assignments/Assignment5.html</link>
            <guid>43780876</guid>
            <pubDate>Thu, 24 Apr 2025 09:53:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://web.stanford.edu/class/ee26n/Assignments/Assignment5.html">https://web.stanford.edu/class/ee26n/Assignments/Assignment5.html</a>, See on <a href="https://news.ycombinator.com/item?id=43780876">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="layout-content">


<h2>Overview</h2>
<p>Almost all cars currently come with a key fob, which allows you to open the doors, and start the car.  When you buy a car, the convenience is the compelling feature.  You can leave the key fob in your pocket, and never again worry about having a physical key. It sounds great.</p>
<p>The implicit assumption you make is that the key fob system is secure, and that some random person with $50 of hardware can't drive off with your car.  You have no real way to tell whether the car company did a reasonable job with their system, so you have to trust them.  Unfortunately, that trust is not always warranted.  And it isn't until people try to hack these systems that the problems come out.  Problems that less scrupulous people may have already been exploiting.</p>
<h2>Your Car's Key Fob</h2>
<p>There are lots of different key fob systems.  We'll start by looking at the key fob for my 2006 Prius. Key fobs use something called a Remote Keyless System (RKS).  In the U.S. these operate at 315 MHz, +/- 2.5 MHz.  My Prius key turned out to be at 312.590 MHz.The keyfobs are all listed in the FCC database.  Watching for new entries is one of the ways people can tell when new car models are coming out. These will appear long before the official announcement.</p>
<p>You can figure out what frequency your key fob transmits on using your SDR and use GQRX or SDR# to monitor the spectrum.  When you push a button on the fob, you should see a brief jump in the spectrum.  You may need to shift the frequency band up or down by a couple of MHz to find the signal, mine was almost 2.5 MHz low.</p>
<p>One word of caution.  Don't get too carried away pushing the button!  The RKS system uses a rolling pseudo-randomly generated code.  Both the key fob and the car keep in sync, so that the car recognizes the next code.  However, if the key fob gets too far ahead in the sequence (100s of button pushes) the car won't recognize it.  That makes the key (and the car) considerably less useful!</p>
<p>If we capture the signal the result is shown below</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/rks_sig.png" width="800"></p></div>
<p>The total width of the plot is 10 seconds, so you can see there is one key press shortly after 2 seconds, and another shortly after 5 seconds.</p>
<p>If we plot 100 ms starting at 2 seconds, we can see the digital signal we are looking for:</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/rks_zoom1.png" width="800"> </p></div>
<p>Zooming in to the first couple of bits, we get</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/rks_zoom2.png" width="800"> </p></div>
<p>The bits are easy to identify.  A decision threshold of 15 will give almost perfect detection. If we do this, and then plot first part of the digital data for the two key presses, we get this</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/rks_digital.png" width="800"> </p></div>
<p>Although the two start the same, they rapidly diverge.  This is fortunate, because if the signal was the same every time, you'd have enough information to steal my car now!</p>
<p>The data is again on-off keying (OOK).  It is also almost certainly split phase  (or Manchester) encoding. Instead of a “1” being high, and a “0” being low, the information is  encoding in the transition from high to low or low to high. That means that a “0” bit is a rising transition, and a “1” bit is a falling transition.  A good way to recognize split phase encoding is that you can only have one or two low or high segments in a row.  The nice thing about Manchester encoding is that every symbol has a transition, and these are easier to find then when the signal has been high or low for several intervals.</p>
<p>This example is OOK, which is the most common for car remotes.  Some use frequency-shift keying (FSK), where each bit is transmitted as a different frequency, and the envelope is constant.</p>
<h2>Attacks on Car Remotes</h2>
<p>There are lots of different attacks that can be used against car remotes, depending on how they work, and what sort of access you are looking for.  The simplest just let you open the car up.  More thorough attacks give you complete control by basically cloning the remote.</p>
<p>Most key fobs use a rolling key. This produces a new waveform that depends on the ID of the key fob, a random seed, and how many times the key has been pressed.  The car keeps track of the last code it received, and knows what the next several hundred codes might be.  If it detects one of the expected future codes it opens the car.  If it gets a previously used code, it stops responding to the key fob.  For the Prius you have to do the <a href="https://www.youtube.com/watch?v=xAuYVsokC5o">“Chicken Dance”</a> to get it to work again, provided you have another working key fob.  Otherwise, you have to have the dealer rekey the car, for many hundreds of dollars. I have had to do this a couple times, now (for other reasons).</p>
<p>There are several lines of attack.  One is simply recording the key fob output for a couple of button presses when it is away from the car, or the car is being jammed.  With recorded unused codes, you can open the car. </p>
<p>Another is to reverse engineer the RKS sequence.  In general this should be extremely hard.  However, there have been several situations where this is very easy. </p>
<p>Finally, there are cars that open when the owner gets close to the car.  This is based on a low power signal that can only be received when the key fob is very close.  This can be defeated by amplifying these small signals.</p>
<p>There are many more attacks, and these will continue to multiply as cars get more complex, and have more embedded computer systems to go after.  You can look at some of these for next week.</p>
<h3>Replay Attacks</h3>
<p>The oldest and simplest approach was to record the waveform that a key fob puts out (using your rtl-sdr), and then replay it.  This works well for older garage door openers, that used a single fixed key. There are still cars out there that have key fobs that work this way (some pre-2000 Mercedes for example).</p>
<p>For key fobs that use a rolling key, you can still use a replay attack. If you can get access to the key fob when it is away from the car and record several key presses, you can replay these to have the car open. </p>
<p>If you can't get access to the key fob, a second approach is to make a device that records the output of the key fob when it is used, and simultaneously jams the car.  A standard way to do this is to listen to the key fob transmission, and then start jamming when the error correction bits are transmitted at the end. That way you don't jam yourself.  The car won't recognize the packet, but you can recreate the error correction bits, and retransmit the waveform later.  </p>
<p>Finally, a jammer by itself will keep the remote from begin able to lock the car.  If the driver isn't attentive, they may walk away from the car leaving it open.</p>
<h3>Retransmission Devices</h3>
<p>All of this depends on your ability to both transmit and receive RF. Your rtl-sdr's are just receivers, and do a great job of acquiring signals. There are lots of options for transmitting.  There are a number of usb dongles that are based on the TI CC111X chips that are used in key fobs, like this one</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/CC1111_USB.png" width="600"> </p></div>
<p>Another recent device that has attracted a lot of attention is the Flipper Zero</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/Flipper_Zero.png" width="600"></p></div>
<p>This has the same chip as the previous device, but is much more accessiuble packaged.  This is the Swiss army knife of RF hacking.  It has generated a lot of controversy, as you can look into for this week's assignment.</p>
<p>An interesting, more flexible approach uses your Raspberry PI to generate RF by sending a carefully crafted data sequence to the GPIO port.  This is described in detail, with videos, and links to the code here:</p>
<p><a href="https://www.rtl-sdr.com/transmitting-fm-am-ssb-sstv-and-fsq-with-just-a-raspberry-pi">Raspberry PI transmitter</a></p>
<p>With this, you can generate pretty much any digital packet waveform you would like. Power levels are more than adequate for emulating a key fob.  The rtl-sdr's are also well supported on the Raspberry PI, so the two together give you a total key fob hacking system for $50 or so, as we will see shortly.</p>
<h3>Attacking Passive Keyless Entry and Start (PKES) Systems</h3>
<p>Many higher end cars use a passive system for opening the car when the driver approaches.  A low power signal is transmitted from the car as a challenge.  The key fob then responds with an authentication.  Because the power is so low, the car assumes the driver must be in close proximity if it receives a response.</p>
<p>These systems can be hacked by building a repeater that placed near the car.  It captures the car's signal and retransmits it at higher power.  The remote can be anywhere with in a couple hundred meters, and it will still hear the signal.  The remote responds, and that is again captured by the repeater, and retransmitted.  The car thinks the key fob is nearby and opens the car.</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/PKES.png" width="400"> </p></div>
<p>The nice thing about this approach is that you don't need to know anything about the key fob, except its frequency.  You don't need to reverse engineer the protocol it uses, you are actually just using the real key!</p>
<p>Here is a video of some care thieves stealing a Tesla with this approach</p>
<p><a href="https://www.theverge.com/2018/10/22/18008514/tesla-model-s-stolen-key-fob-hack-watch-video">Passive Remote Attack, Tesla Model 3</a></p>
<p>How can you reduce this risk?</p>
<h3>Attacking the Rolling Key System</h3>
<p>The next attacks go after the rolling key system itself.  The way this generally works is that the key fob sends an ID, along with a counter of how many times a key has been pressed.  This is encrypted, and transmitted to the car when you push the button.</p>
<div>
<p><img src="https://web.stanford.edu/class/ee26n/Assignments/graphics/RKS_Car.png" width="600"> </p></div>
<p>If the encryption is strong, it is extremely difficult to figure out what the userid and counter is.  There are several interesting cases.  One is for the 20 years of VW's (and Audi's, Porsche's, etc), that we'll look at here.  Another is for Subarus, that you can look at for your assignment this week.</p>
<p>A description of the VW RKS system is given here</p>
<p><a href="https://www.wired.com/2016/08/oh-good-new-hack-can-unlock-100-million-volkswagens/">VW Hack</a></p>
<p>This points to a Wired article (which unfortunately currently behind a paywall), and includes a technical paper that goes into great detail about how it works.  The authors of the technical paper looked at the VW RKS systems for the last 20 years. </p>
<p>For the most recent systems, the encryption was relatively strong, equivalent to a 90 bit key.  However, it turns out they used the <b>same key</b> in every car!  100 million of them!</p>
<p>The challenge then is to figure out what the key is, and what the encryption algorithm is.   The car itself helps you solve that one.  When button is pushed the car receives the signal, and then decodes it in the onboard computer (ECU).  The key and the algorithm are stored in the ECU firmware.  The authors bought some ECUs on EBay, downloaded the firmware, and reverse engineered the encryption (these are usually fairly simple bitwise operations that are easy to identify).  With this knowledge, after acquiring the signal from a single key press, the user ID and counter can be decoded, and the key fob cloned, giving complete control of the car.</p>
<p>There are a couple of interesting things here.  One is that every VW car decodes every key fob, so by monitoring the execution of your ECU, you can find the user ID and counter for all of the cars around you. There are reports of people using systems like this to steal other makes of cars, also.</p>
<p>The reason only your car responds to your remote is that your car has a “allow list” of 
key fob ID's it responds to.  That is what gets set when you rekey the car.</p>
<p>This all sounds pretty alarming.  But it gets worse, as we'll see next week.</p>
<div>
<h2>Assignment</h2>
<p>You have several options for your assignment this week. For each topic, generate about 5 slides to describe your thoughts or results. Sign up here</p>
<p><a href="https://docs.google.com/spreadsheets/d/1U9bNqlV4cXqNPDBIRoxuOmPMbRGMeoGzIOwI0_hZr1Y/edit?usp=share_link">Signup</a></p>
<p>and upload your slides here:</p>
<p><a href="https://drive.google.com/drive/folders/1QpThT_bgUZadzqQ98c9nEW_fpIYQueNq?usp=share_link">Week 5 Slides</a></p>
<p>1. This article concerns the Subaru RKS system.  Read it, watch the videos, and describe what you find.</p>
<p><a href="https://www.rtl-sdr.com/using-an-rtl-sdr-and-rpitx-to-defeat-the-rolling-code-scheme-used-on-some-subaru-cars/">Subaru RKS</a></p>
<p>2. The Flipper Zero has gotten lots of attention.  What controversies can you find? What can the device actually do?  Should it be banned?</p>
<p>3. Why steal a car when you can have a bulldozer!  Read this article, and watch the video, to see how this works.</p>
<p><a href="https://www.rtl-sdr.com/industrial-machines-like-cranes-excavators-can-easily-be-hacked-with-software-defined-radios/">Hacking Industrial Machines</a></p>
<p>4. There are lots of other car hacks out there.  See if you can find something interesting, and describe it.  Look for stories where you can figure out how it works. Entertainment systems are a common mode of access (check the Uconnect hack for Jeeps). Tesla and hackers have a long running cat-and-mouse game going.  There are lots of interesting examples here.  Two recent are <a href="https://techcrunch.com/2022/05/18/bluetooth-attack-unlock-tesla/">Teslas</a> and <a href="https://techcrunch.com/2022/07/12/honda-key-fob-flaw-hackers/">Hondas</a>.  </p>
<p>Finally, if you haven't already, please send me an email about how the class is going for you.  I appreciate hearing your thoughts. Thanks!</p>
</div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[On loyalty to Your Employer (292 pts)]]></title>
            <link>https://www.talentstuff.com/blog/on-loyalty-to-your-employer</link>
            <guid>43780815</guid>
            <pubDate>Thu, 24 Apr 2025 09:43:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.talentstuff.com/blog/on-loyalty-to-your-employer">https://www.talentstuff.com/blog/on-loyalty-to-your-employer</a>, See on <a href="https://news.ycombinator.com/item?id=43780815">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-6c9e46f520d21d455f2e">
  <p>I’ve just returned to London having spent the past two weeks back home in Cork where I spent an awful lot of time with my father, a man who set up his first ever email account less than a year ago and has spent the past 30 years working for the same employer. My Dad is the antithesis of the tech industry in every sense.</p><p>Considering the average ‘career’ with each employer in the tech industry is a touch under three years, the idea of spending 30 years working for the same employer is mind boggling. Despite this enormous disparity, I’m constantly witness to colleagues in the tech industry posting on LinkedIn about how great their employer is and why everyone should drop everything and come and work with them, only for them to announce a few short years later that they are moving on “to bigger and better things”.</p><p>I’m going to be the first to hold my hands up and admit to being extremely guilty of doing exactly that on a regular basis in the past. I work in recruitment. Employers pay me a lot of money to wax lyrical about how great they are. They pay me to convince you that the grass is not only greener, but their grass is more flexible and inclusive too. So how do I reconcile my apathy towards every employer claiming to be the best, and my ability to do a good job?</p><h3><strong>Transparency &amp; Honesty</strong></h3><p>My criteria for vetting an employer worth working with is very straightforward. Anything beyond these four criteria is a bonus (and extremely subjective) but the four criteria below are my absolute zero compromise criteria.</p><ol data-rte-list="default"><li><p><strong><em>Do you pay reasonable salaries?<br></em></strong>Fortunately, due to my line of work, asking for specifics around salaries is par for the course and not something an employer can easily lie about. To put it simply, if your salaries aren’t at least competitive then we’re wasting each other’s time. Pay fairly or pay well and we’re off to a good start.</p></li><li><p><strong><em>Do you treat your people well?<br></em></strong>Glassdoor is your friend. If there are a slew of negative comments, look for consistencies. Were they all posted around the same time? Are there consistent themes? Raise these points and ask for the employers perspective. A quality employer will be honest and highlight what steps they took to address those issues. Not every company has a helpful Glassdoor profile (a lot of startups have yet to be reviewed) so take to social media, and look up current and former employees to see if there are any red flags.</p></li><li><p><strong><em>Are you financially secure?<br></em></strong>This is startup 101 folks. Do your due diligence. Companies House, Crunchbase, etc are a good start. Enquire about their runway (how long they can survive if their current income and expenses stay constant). If they aren’t willing to be open and honest about their finances, walk away immediately.</p></li><li><p><strong><em>Are you open to trying new things?<br></em></strong>This criteria is quite specific to the work I do and may not be universally applicable. If you’re asking me to team up with you to improve your ability to hire people then you categorically need to be open and willing to try new things. No amount of money will be enough to convince me to join your company and follow your same old tired recipe just because it worked well a couple of times in the past.</p></li></ol><p>If you hit all of the above criteria then I can do the thing that enables me to convince great people to work for your company. I can be absolutely transparent and honest with people.</p><h3><strong>Delicious Kool-Aid</strong></h3>
</div><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1745486033847_3489">
  <ul data-rte-list="default"><li><p>Do not sacrifice your relationship with family and friends to appease your employer.</p></li></ul><ul data-rte-list="default"><li><p>Do not sacrifice your mental wellbeing to appease your employer.</p></li><li><p>Do not sacrifice your dignity, values, and ethics to appease your employer.</p></li><li><p>Do not buy into the bullshit hype of “hustle” to appease your employer.</p></li></ul><h3><strong>Mutual Respect</strong></h3><p>Get your head down and work hard. If your employer compensates you well, puts effort into ensuring you are healthy in every sense and invests in your personal and/or professional growth then by all means, tell the world how happy you are.</p><p>Focus on your own growth. Focus on helping the humans you work with. Focus on being efficient with your time and efforts so that you can spend even more time and effort on the things and people that truly matter.</p><p>I’ll leave you on the words of my father on the eve of his 30 year work anniversary:</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Creating your own federated microblog (117 pts)]]></title>
            <link>https://fedify.dev/tutorial/microblog</link>
            <guid>43780785</guid>
            <pubDate>Thu, 24 Apr 2025 09:37:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fedify.dev/tutorial/microblog">https://fedify.dev/tutorial/microblog</a>, See on <a href="https://news.ycombinator.com/item?id=43780785">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-v-e6f2a212=""><div><p>TIP</p><p>This tutorial is also available in the following languages: <a href="https://hackmd.io/@hongminhee/fedify-tutorial-ko" target="_blank" rel="noreferrer">한국어</a> (Korean) and <a href="https://zenn.dev/hongminhee/books/4a38b6358a027b" target="_blank" rel="noreferrer">日本語</a> (Japanese).</p></div><p>In this tutorial, we will build a small <a href="https://en.wikipedia.org/wiki/Microblogging" target="_blank" rel="noreferrer">microblog</a> that implements the ActivityPub protocol, similar to <a href="https://joinmastodon.org/" target="_blank" rel="noreferrer">Mastodon</a> or <a href="https://misskey-hub.net/" target="_blank" rel="noreferrer">Misskey</a>, using <a href="https://fedify.dev/" target="_blank" rel="noreferrer">Fedify</a>, an ActivityPub server framework. This tutorial will focus more on how to use Fedify rather than understanding its underlying operating principles.</p><p>If you have any questions, suggestions, or feedback, please feel free to join our <a href="https://matrix.to/#/#fedify:matrix.org" target="_blank" rel="noreferrer">Matrix chat space</a> or <a href="https://discord.gg/bhtwpzURwd" target="_blank" rel="noreferrer">Discord server</a> or <a href="https://github.com/fedify-dev/fedify/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a>.</p><h2 id="target-audience" tabindex="-1">Target audience <a href="#target-audience" aria-label="Permalink to &quot;Target audience&quot;">​</a></h2><p>This tutorial is aimed at those who want to learn Fedify and create ActivityPub server software.</p><p>We assume that you have experience in creating web applications using HTML and HTTP, and that you understand command-line interfaces, SQL, JSON, and basic JavaScript. However, you don't need to know TypeScript, <abbr title="JavaScript XML">JSX</abbr>, ActivityPub, or Fedify—we'll teach you what you need to know about these as we go along.</p><p>You don't need experience in creating ActivityPub software, but we do assume that you've used at least one ActivityPub software like Mastodon or Misskey. This is so you have an idea of what we're trying to build.</p><h2 id="goals" tabindex="-1">Goals <a href="#goals" aria-label="Permalink to &quot;Goals&quot;">​</a></h2><p>In this tutorial, we'll use Fedify to create a single-user microblog that can communicate with other federated software and services via ActivityPub. This software will include the following features:</p><ul><li>Only one account can be created.</li><li>Other accounts in the fediverse can follow the user.</li><li>Followers can unfollow the user.</li><li>The user can view their list of followers.</li><li>The user can create posts.</li><li>The user's posts are visible to followers in the fediverse.</li><li>The user can follow other accounts in the fediverse.</li><li>The user can view a list of accounts they are following.</li><li>The user can view a chronological list of posts from accounts they follow.</li></ul><p>To simplify the tutorial, we'll impose the following feature constraints:</p><ul><li>Account profiles (bio, photos, etc.) cannot be set.</li><li>Once created, an account cannot be deleted.</li><li>Once posted, a post cannot be edited or deleted.</li><li>Once followed, another account cannot be unfollowed.</li><li>There are no likes, shares, or comments.</li><li>There is no search functionality.</li><li>There are no security features such as authentication or permission checks.</li></ul><p>Of course, after completing the tutorial, you're welcome to add these features—it would be good practice!</p><p>The complete source code is available in the <a href="https://github.com/fedify-dev/microblog" target="_blank" rel="noreferrer">GitHub repository</a>, with commits separated according to each implementation step for your reference.</p><h2 id="setting-up-the-development-environment" tabindex="-1">Setting up the development environment <a href="#setting-up-the-development-environment" aria-label="Permalink to &quot;Setting up the development environment&quot;">​</a></h2><h3 id="installing-node-js" tabindex="-1">Installing Node.js <a href="#installing-node-js" aria-label="Permalink to &quot;Installing Node.js&quot;">​</a></h3><p>Fedify supports three JavaScript runtimes: <a href="https://deno.com/" target="_blank" rel="noreferrer">Deno</a>, <a href="https://bun.sh/" target="_blank" rel="noreferrer">Bun</a>, and <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a>. Among these, Node.js is the most widely used, so we'll use Node.js as the basis for this tutorial.</p><div><p>TIP</p><p>A JavaScript runtime is a platform that executes JavaScript code. Web browsers are one type of JavaScript runtime, and for command-line or server use, Node.js is widely used. Recently, cloud edge functions like <a href="https://workers.cloudflare.com/" target="_blank" rel="noreferrer">Cloudflare Workers</a> have also gained popularity as JavaScript runtimes.</p></div><p>To use Fedify, you need Node.js version 20.0.0 or higher. There are <a href="https://nodejs.org/en/download/package-manager" target="_blank" rel="noreferrer">various installation methods</a>—choose the one that suits you best.</p><p>Once Node.js is installed, you'll have access to the <code>node</code> and <code>npm</code> commands:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>node</span><span> --version</span></span>
<span><span>npm</span><span> --version</span></span></code></pre></div><h3 id="installing-the-fedify-command" tabindex="-1">Installing the <code>fedify</code> command <a href="#installing-the-fedify-command" aria-label="Permalink to &quot;Installing the `fedify` command&quot;">​</a></h3><p>To set up a Fedify project, you need to install the <a href="https://fedify.dev/cli"><code>fedify</code></a> command on your system. There are <a href="https://fedify.dev/cli#installation">several installation methods</a>, but using the <code>npm</code> command is the simplest:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>npm</span><span> install</span><span> -g</span><span> @fedify/cli</span></span></code></pre></div><p>After installation, check if you can use the <code>fedify</code> command. You can check the version of the <code>fedify</code> command with this command:</p><p>Make sure the version number is 1.0.0 or higher. If it's an older version, you won't be able to properly follow this tutorial.</p><h3 id="fedify-init-to-initialize-the-project" tabindex="-1"><code>fedify init</code> to initialize the project <a href="#fedify-init-to-initialize-the-project" aria-label="Permalink to &quot;`fedify init` to initialize the project&quot;">​</a></h3><p>To start a new Fedify project, let's decide on a directory path to work in. In this tutorial, we'll name it <em>microblog</em>. Run the <a href="https://fedify.dev/cli#fedify-init-initializing-a-fedify-project"><code>fedify init</code></a> command followed by the directory path (it's okay if the directory doesn't exist yet):</p><p>When you run the <code>fedify init</code> command, you'll see a series of prompts. Select <em>Node.js</em>, <em>npm</em>, <em>Hono</em>, <em>In-memory</em>, and <em>In-process</em> in order:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>             ___      _____        _ _  __</span></span>
<span><span>            /'_')    |  ___|__  __| (_)/ _|_   _</span></span>
<span><span>     .-^^^-/  /      | |_ / _ \/ _` | | |_| | | |</span></span>
<span><span>   __/       /       |  _|  __/ (_| | |  _| |_| |</span></span>
<span><span>  &lt;__.|_|-|_|        |_|  \___|\__,_|_|_|  \__, |</span></span>
<span><span>                                           |___/</span></span>
<span></span>
<span><span>? Choose the JavaScript runtime to use</span></span>
<span><span>  Deno</span></span>
<span><span>  Bun</span></span>
<span><span>❯ Node.js</span></span>
<span></span>
<span><span>? Choose the package manager to use</span></span>
<span><span>❯ npm</span></span>
<span><span>  Yarn</span></span>
<span><span>  pnpm</span></span>
<span></span>
<span><span>? Choose the web framework to integrate Fedify with</span></span>
<span><span>  Bare-bones</span></span>
<span><span>  Fresh</span></span>
<span><span>❯ Hono</span></span>
<span><span>  Express</span></span>
<span><span>  Nitro</span></span>
<span></span>
<span><span>? Choose the key-value store to use for caching</span></span>
<span><span>❯ In-memory</span></span>
<span><span>  Redis</span></span>
<span><span>  PostgreSQL</span></span>
<span><span>  Deno KV</span></span>
<span></span>
<span><span>? Choose the message queue to use for background jobs</span></span>
<span><span>❯ In-process</span></span>
<span><span>  Redis</span></span>
<span><span>  PostgreSQL</span></span>
<span><span>  AMQP (e.g., RabbitMQ)</span></span>
<span><span>  Deno KV</span></span></code></pre></div><div><p>NOTE</p><p>Fedify is not a full-stack framework, but rather a framework specialized for implementing ActivityPub servers. Therefore, it's designed to be used alongside other web frameworks. In this tutorial, we'll adopt <a href="https://hono.dev/" target="_blank" rel="noreferrer">Hono</a> as our web framework to use with Fedify.</p></div><p>After a moment, you'll see files created in your working directory with the following structure:</p><ul><li><em>.vscode/</em> — Visual Studio Code related settings <ul><li><em>extensions.json</em> — Recommended extensions for Visual Studio Code</li><li><em>settings.json</em> — Visual Studio Code settings</li></ul></li><li><em>node_modules/</em> — Directory where dependent packages are installed (contents omitted)</li><li><em>src/</em> — Source code <ul><li><em>app.tsx</em> — Server unrelated to ActivityPub</li><li><em>federation.ts</em> — ActivityPub server</li><li><em>index.ts</em> — Entry point</li><li><em>logging.ts</em> — Logging configuration</li></ul></li><li><em>biome.json</em> — Formatter and linter settings</li><li><em>package.json</em> — Package metadata</li><li><em>tsconfig.json</em> — TypeScript settings</li></ul><p>As you might guess, we're using TypeScript instead of JavaScript, which is why we have <em>.ts</em> and <em>.tsx</em> files instead of <em>.js</em> files.</p><p>The generated source code is a working demo. Let's first check if it runs properly:</p><p>This command will keep the server running until you press <kbd>Ctrl</kbd>+<kbd>C</kbd>:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>Server started at http://0.0.0.0:8000</span></span></code></pre></div><p>With the server running, open a new terminal tab and run the following command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/john</span></span></code></pre></div><p>This command queries an actor (actor) on the ActivityPub server we've set up locally. In ActivityPub, an actor can be thought of as an account that's accessible across various ActivityPub servers.</p><p>If you see output like this, it's working correctly:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Person {</span></span>
<span><span>  id: URL "http://localhost:8000/users/john",</span></span>
<span><span>  name: "john",</span></span>
<span><span>  preferredUsername: "john"</span></span>
<span><span>}</span></span></code></pre></div><p>This result tells us that there's an actor object located at the <em>/users/john</em> path, it's of type <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a>, its ID is <em><a href="http://localhost:8000/users/john" target="_blank" rel="noreferrer">http://localhost:8000/users/john</a></em>, its name is <em>john</em>, and its username is also <em>john</em>.</p><div><p>TIP</p><p><a href="https://fedify.dev/cli#fedify-lookup-looking-up-an-activitypub-object"><code>fedify lookup</code></a> is a command to query ActivityPub objects. This is equivalent to searching with the corresponding URI on Mastodon. (Of course, since your server is only accessible locally at the moment, searching on Mastodon won't yield any results yet.)</p><p>If you prefer <code>curl</code> over the <code>fedify lookup</code> command, you can also query the actor with this command (note that we're sending the <code>Accept</code> header with the <code>-H</code> option):</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>curl</span><span> -H</span><span>"Accept: application/activity+json"</span><span> http://localhost:8000/users/john</span></span></code></pre></div><p>However, if you query like this, the result will be in JSON format, which is difficult to read with the naked eye. If you also have the <code>jq</code> command installed on your system, you can use <code>curl</code> and <code>jq</code> together:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>curl</span><span> -H</span><span>"Accept: application/activity+json"</span><span> http://localhost:8000/users/john</span><span> |</span><span> jq</span><span> .</span></span></code></pre></div></div><h3 id="visual-studio-code" tabindex="-1">Visual Studio Code <a href="#visual-studio-code" aria-label="Permalink to &quot;Visual Studio Code&quot;">​</a></h3><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a> might not be your favorite editor. However, we recommend using Visual Studio Code while following this tutorial. This is because we need to use TypeScript, and Visual Studio Code is currently the most convenient and excellent TypeScript IDE. Also, the generated project setup already includes Visual Studio Code settings, so you don't have to wrestle with formatters or linters.</p><div><p>WARNING</p><p>Don't confuse this with Visual Studio. Visual Studio Code and Visual Studio only share a brand name; they are completely different software.</p></div><p>After <a href="https://code.visualstudio.com/docs/setup/setup-overview" target="_blank" rel="noreferrer">installing Visual Studio Code</a>, open the working directory by selecting <em>File</em> → <em>Open Folder…</em> from the menu.</p><p>If you see a popup in the bottom right asking <q>Do you want to install the recommended 'Biome' extension from biomejs for this repository?</q>, click the <em>Install</em> button to install the extension. Installing this extension will automatically format your TypeScript code, so you don't have to wrestle with code styles like indentation or spacing when writing TypeScript code.</p><div><p>TIP</p><p>If you're a loyal Emacs or Vim user, we won't discourage you from using your favorite editor. However, we recommend setting up TypeScript <abbr title="Language Server Protocol">LSP</abbr>. The difference in productivity depending on whether TypeScript <abbr title="Language Server Protocol">LSP</abbr> is set up or not is significant.</p></div><h2 id="prerequisites" tabindex="-1">Prerequisites <a href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><h3 id="typescript" tabindex="-1">TypeScript <a href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h3><p>Before we start modifying code, let's briefly go over TypeScript. If you're already familiar with TypeScript, you can skip this section.</p><p>TypeScript adds static type checking to JavaScript. The TypeScript syntax is almost the same as JavaScript, but the main difference is that you can specify types for variables and functions. Types are specified by adding a colon (<code>:</code>) after the variable or parameter.</p><p>For example, the following code indicates that the <code>foo</code> variable is a <code>string</code>:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>let</span><span> </span><span><div><!--[--><!--[--><p><span>foo</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span></code></pre></div><p>If you try to assign a value of a different type to a variable declared like this, Visual Studio Code will show a red underline <em>before you even run it</em> and display a type error:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><span>foo</span></span><span> </span><span>=</span><span> 123</span><span>;</span></span><p>Type 'number' is not assignable to type 'string'.</p></code></pre></div><p>When coding, don't ignore red underlines. If you ignore them and run the program, it's likely that an error will actually occur at that part.</p><p>The most common type of error you'll encounter when coding in TypeScript is the <code>null</code> possibility error. For example, in the following code, the <code>bar</code> variable can be either a <code>string</code> or <code>null</code> (<code>string | null</code>):</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>bar</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>someFunction</span></p><!--]--><!--]--></div></span><span>();</span></span></code></pre></div><p>What happens if you try to get the first character of this variable's content like this?</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>firstChar</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><span>bar</span></span><span>.</span><span><div><!--[--><!--[--><p><span>charAt</span></p><!--]--><!--]--></div></span><span>(</span><span>0</span><span>);</span></span><p>'bar' is possibly 'null'.</p></code></pre></div><p>You'll get a type error like above. It's saying that <code>bar</code> might sometimes be <code>null</code>, and in that case, calling <code>null.charAt(0)</code> would cause an error, so you need to fix the code. In such cases, you need to add handling for the <code>null</code> case like this:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>firstChar</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>bar</span></p><!--]--><!--]--></div></span><span> </span><span>===</span><span> null</span><span> ?</span><span> ""</span><span> :</span><span> </span><span><div><!--[--><!--[--><p><span>bar</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>charAt</span></p><!--]--><!--]--></div></span><span>(</span><span>0</span><span>);</span></span></code></pre></div><p>In this way, TypeScript helps prevent bugs by making you think of cases you might not have considered when coding.</p><p>Another incidental advantage of TypeScript is that it enables auto-completion. For example, if you type <code>foo.</code>, a list of methods available for string objects will appear, allowing you to choose from them. This allows for faster coding without having to check documentation each time.</p><p>We hope you'll feel the charm of TypeScript as you follow this tutorial. Above all, Fedify provides the best experience when used with TypeScript.</p><div><p>TIP</p><p>If you want to learn TypeScript properly and thoroughly, we recommend reading <em><a href="https://www.typescriptlang.org/docs/handbook/intro.html" target="_blank" rel="noreferrer">The TypeScript Handbook</a></em>. It takes about 30 minutes to read it all.</p></div><h3 id="jsx" tabindex="-1"><abbr title="JavaScript XML">JSX</abbr> <a href="#jsx" aria-label="Permalink to &quot;JSX&quot;">​</a></h3><p><abbr title="JavaScript XML">JSX</abbr> is a syntax extension of JavaScript that allows you to insert XML or HTML into JavaScript code. It can also be used in TypeScript, in which case it's sometimes called TSX. In this tutorial, we'll write all HTML within JavaScript code using <abbr title="JavaScript XML">JSX</abbr> syntax. Those who are already familiar with <abbr title="JavaScript XML">JSX</abbr> can skip this section.</p><p>For example, the following code assigns an HTML tree with a <code>&lt;div&gt;</code> element at the top to the <code>html</code> variable:</p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span> =</span><span> &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>=</span><span>"greet"</span><span>&gt;Hello, &lt;</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;JSX&lt;/</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;!&lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>&lt;/</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;;</span></span></code></pre></div><p>You can also insert JavaScript expressions using curly braces (the following code assumes, of course, that there's a <code>getName()</code> function):</p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span> =</span><span> &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>title</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>"Hello, "</span><span> +</span><span> </span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>() </span><span>+</span><span> "!"</span><span>}&gt;</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>=</span><span>"greet"</span><span>&gt;Hello, &lt;</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>()}&lt;/</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;!&lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>&lt;/</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;;</span></span></code></pre></div><p>One of the features of <abbr title="JavaScript XML">JSX</abbr> is that you can define your own tags called components. Components can be defined as ordinary JavaScript functions. For example, the following code defines and uses a <code>&lt;Container&gt;</code> component (component names typically follow PascalCase style):</p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Child</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "hono/jsx"</span><span>;</span></span>
<span></span>
<span><span>function</span><span> </span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>() {</span></span>
<span><span>  return</span><span> "JSX"</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>interface</span><span> </span><span>ContainerProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>children</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>Child</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>Container</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ContainerProps</span><span>&gt; </span><span>=</span><span> (</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  return</span><span> &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>title</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>"Hello, "</span><span> +</span><span> </span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>+</span><span> "!"</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>children</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;;</span></span>
<span><span>};</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span> =</span><span> &lt;</span><span><div><!--[--><!--[--><p><span>Container</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>()}&gt;</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>=</span><span>"greet"</span><span>&gt;Hello, &lt;</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>getName</span></p><!--]--><!--]--></div></span><span>()}&lt;/</span><span><div><!--[--><!--[--><p><span>strong</span></p><!--]--><!--]--></div></span><span>&gt;!&lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>&lt;/</span><span><div><!--[--><!--[--><p><span>Container</span></p><!--]--><!--]--></div></span><span>&gt;;</span></span></code></pre></div><p>In the above code, <code>FC</code> is provided by <a href="https://hono.dev/" target="_blank" rel="noreferrer">Hono</a>, the web framework we'll use, and it helps define the type of the component. <code>FC</code> is a generic type, and the types that go inside the angle brackets after <code>FC</code> are type arguments. Here, we specify the props type as the type argument. Props refer to the parameters passed to the component. In the above code, we declared and used the <code>ContainerProps</code> interface as the props type for the <code>&lt;Container&gt;</code> component.</p><div><p>TIP</p><p>Type arguments for generic types can be multiple, separated by commas. For example, <code>Foo&lt;A, B&gt;</code> applies type arguments <code>A</code> and <code>B</code> to the generic type <code>Foo</code>.</p><p>There are also generic functions, which are written as <code>someFunction&lt;A, B&gt;(foo, bar)</code>.</p><p>When there's only one type argument, the angle brackets enclosing the type argument may look like XML/HTML tags, but they have nothing to do with <abbr title="JavaScript XML">JSX</abbr> functionality.</p><dl><dt><code>FC&lt;ContainerProps&gt;</code></dt><dd>Applies the type argument <code>ContainerProps</code> to the generic type <code>FC</code>.</dd><dt><code>&lt;Container&gt;</code></dt><dd>Opens a component tag named <code>&lt;Container&gt;</code>. Must be closed with <code>&lt;/Container&gt;</code>.</dd></dl></div><p>Among the things passed as props, <code>children</code> is worth noting specifically. This is because the child elements of the component are passed as the <code>children</code> prop. As a result, in the above code, the <code>html</code> variable is assigned the HTML tree <code>&lt;div title="Hello, JSX!"&gt;&lt;p id="greet"&gt;Hello, &lt;strong&gt;JSX&lt;/strong&gt;!&lt;/p&gt;&lt;/div&gt;</code>.</p><h2 id="account-creation-page" tabindex="-1">Account creation page <a href="#account-creation-page" aria-label="Permalink to &quot;Account creation page&quot;">​</a></h2><p>The first thing we'll create is the account creation page. We need to create an account before we can post or follow other accounts. Let's start by building the visible part.</p><p>First, let's create a file named <em>src/views.tsx</em>. Inside this file, we'll define a <code>&lt;Layout&gt;</code> component using <abbr title="JavaScript XML">JSX</abbr>:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "hono/jsx"</span><span>;</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> =</span><span> (</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>lang</span></p><!--]--><!--]--></div></span><span>=</span><span>"en"</span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>head</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>meta</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>charset</span></p><!--]--><!--]--></div></span><span>=</span><span>"utf-8"</span><span> /&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>meta</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"viewport"</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>=</span><span>"width=device-width, initial-scale=1"</span><span> /&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>meta</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"color-scheme"</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>=</span><span>"light dark"</span><span> /&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>title</span></p><!--]--><!--]--></div></span><span>&gt;Microblog&lt;/</span><span><div><!--[--><!--[--><p><span>title</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>link</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>rel</span></p><!--]--><!--]--></div></span><span>=</span><span>"stylesheet"</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"</span></span>
<span><span>      /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>head</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>body</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>main</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>class</span></p><!--]--><!--]--></div></span><span>=</span><span>"container"</span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span>children</span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>main</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>body</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>To avoid spending too much time on design, we'll use a CSS framework called <a href="https://picocss.com/" target="_blank" rel="noreferrer">Pico CSS</a>.</p><div><p>TIP</p><p>When the type of a variable or parameter can be inferred by TypeScript's type checker, like <code>props</code> above, it's fine to omit the type annotation. Even when the type annotation is omitted in such cases, you can check the type of a variable by hovering your mouse cursor over the variable name in Visual Studio Code.</p></div><p>Next, in the same file, let's define a <code>&lt;SetupForm&gt;</code> component that will go inside the layout:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> =</span><span> () </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;Set up your microblog&lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>"/setup"</span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>          Username{</span><span>" "</span><span>}</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"text"</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"username"</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>maxlength</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>50</span><span>}</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>pattern</span></p><!--]--><!--]--></div></span><span>=</span><span>"^[a-z0-9_\-]+$"</span></span>
<span><span>          /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"submit"</span><span> </span><span><div><!--[--><!--[--><p><span>value</span></p><!--]--><!--]--></div></span><span>=</span><span>"Setup"</span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>In <abbr title="JavaScript XML">JSX</abbr>, you can only have one top-level element, but the <code>&lt;SetupForm&gt;</code> component has two top-level elements: <code>&lt;h1&gt;</code> and <code>&lt;form&gt;</code>. That's why we've wrapped them with <code>&lt;&gt;</code> and <code>&lt;/&gt;</code>. This is called a fragment.</p><p>Now it's time to use the components we've defined. Open the <em>src/app.tsx</em> file and <code>import</code> the two components we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>Then, display the account creation form we just made on the <em>/setup</em> page:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span></code></pre></div></div><p>Now, let's open the <a href="http://localhost:8000/setup" target="_blank" rel="noreferrer">http://localhost:8000/setup</a> page in a web browser. If you see a screen like this, it's working correctly:</p><p><img src="https://fedify.dev/assets/account-creation-page.Zbk-Rx66.png" alt="Account creation page"></p><div><p>NOTE</p><p>To use <abbr title="JavaScript XML">JSX</abbr>, the source file extension must be <em>.jsx</em> or <em>.tsx</em>. Note that both files we edited in this section have the <em>.tsx</em> extension.</p></div><h3 id="database-setup" tabindex="-1">Database setup <a href="#database-setup" aria-label="Permalink to &quot;Database setup&quot;">​</a></h3><p>Now that we've implemented the visible part, it's time to implement the functionality. We need a place to store account information, so let's use <a href="https://www.sqlite.org/" target="_blank" rel="noreferrer">SQLite</a>. SQLite is a relational database suitable for small-scale applications.</p><p>First, let's declare a table to hold account information. From now on, we'll write all table declarations in the <em>src/schema.sql</em> file. We'll store account information in the <code>users</code> table:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> users (</span></span>
<span><span>  id       </span><span>INTEGER</span><span> NOT NULL</span><span> PRIMARY KEY</span><span> CHECK</span><span> (id </span><span>=</span><span> 1</span><span>),</span></span>
<span><span>  username </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span>      CHECK</span><span> (</span><span>trim</span><span>(</span><span>lower</span><span>(username)) </span><span>=</span><span> username</span></span>
<span><span>                                               AND</span><span> username </span><span>&lt;&gt;</span><span> ''</span></span>
<span><span>                                               AND</span><span> length</span><span>(username) </span><span>&lt;=</span><span> 50</span><span>)</span></span>
<span><span>);</span></span></code></pre></div></div><p>Since the microblog we're creating can only have one account, we've put a constraint on the <code>id</code> column, which is the primary key, to not allow values other than <code>1</code>. This ensures that the <code>users</code> table can't contain more than one record. We've also put constraints on the <code>username</code> column to not allow empty strings or strings that are too long.</p><p>Now we need to run the <em>src/schema.sql</em> file to create the users table. For this, we need the <code>sqlite3</code> command, which you can <a href="https://www.sqlite.org/download.html" target="_blank" rel="noreferrer">get from the SQLite website</a> or install from your platform's package manager. For macOS, you don't need to get it separately as it is built into the system. If you get it directly, you can get the <em>sqlite-tools-*.zip</em> file for your OS and unzip it. If you use a package manager, you can also install it with the following command:</p><div><p><label data-title="Debian &amp; Ubuntu" for="tab-37jO9Kg">Debian &amp; Ubuntu</label><label data-title="Fedora &amp; RHEL" for="tab-oZscTaX">Fedora &amp; RHEL</label><label data-title="Chocolatey" for="tab-H7wRwjX">Chocolatey</label><label data-title="Scoop" for="tab-F0Y0eP4">Scoop</label><label data-title="Windows Package Manager" for="tab-4pu01JZ">Windows Package Manager</label></p><div><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sudo</span><span> apt</span><span> install</span><span> sqlite3</span></span></code></pre></div><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sudo</span><span> dnf</span><span> install</span><span> sqlite</span></span></code></pre></div><div><p><span>powershell</span></p><pre tabindex="0"><code><span><span>choco install sqlite</span></span></code></pre></div><div><p><span>powershell</span></p><pre tabindex="0"><code><span><span>scoop install sqlite</span></span></code></pre></div><div><p><span>powershell</span></p><pre tabindex="0"><code><span><span>winget install SQLite.SQLite</span></span></code></pre></div></div></div><p>Okay, now that we have the <code>sqlite3</code> command, let's use it to create a database file:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>The above command will create a <em>microblog.sqlite3</em> file, which will store your SQLite data.</p><h3 id="connecting-to-the-database-in-the-app" tabindex="-1">Connecting to the database in the app <a href="#connecting-to-the-database-in-the-app" aria-label="Permalink to &quot;Connecting to the database in the app&quot;">​</a></h3><p>Now we need to use the SQLite database in our app. To use SQLite database in Node.js, we need a SQLite driver library, and we'll use the <em><a href="https://github.com/WiseLibs/better-sqlite3" target="_blank" rel="noreferrer">better-sqlite3</a></em> package. You can easily install the package with the <code>npm</code> command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>npm</span><span> add</span><span> better-sqlite3</span></span>
<span><span>npm</span><span> add</span><span> --save-dev</span><span> @types/better-sqlite3</span></span></code></pre></div><div><p>TIP</p><p>The <em><a href="https://www.npmjs.com/package/@types/better-sqlite3" target="_blank" rel="noreferrer">@types/better-sqlite3</a></em> package contains type information about the <em>better-sqlite3</em> package's API for TypeScript. You need to install this package to enable auto-completion and type checking when editing in Visual Studio Code.</p><p>Packages like this in the <em>@types/</em> scope are called <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noreferrer">Definitely Typed</a> packages. When a library is not written in TypeScript, the community adds type information and makes it into a package.</p></div><p>Now that we've installed the package, let's write code to connect to the database using this package. Create a new file named <em>src/db.ts</em> and code it as follows:</p><div><p><span data-title="src/db.ts">src/db.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> </span><span><div><!--[--><!--[--><p><span>Database</span></p><!--]--><!--]--></div></span><span> </span><span>from</span><span> "better-sqlite3"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Database</span></p><!--]--><!--]--></div></span><span>(</span><span>"microblog.sqlite3"</span><span>);</span></span>
<span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>pragma</span></p><!--]--><!--]--></div></span><span>(</span><span>"journal_mode = WAL"</span><span>);</span></span>
<span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>pragma</span></p><!--]--><!--]--></div></span><span>(</span><span>"foreign_keys = ON"</span><span>);</span></span>
<span></span>
<span><span>export</span><span> default</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>;</span></span></code></pre></div></div><div><p>TIP</p><p>The settings made through the <code>db.pragma()</code> function have the following effects:</p><dl><dt><a href="https://www.sqlite.org/wal.html" target="_blank" rel="noreferrer"><code>journal_mode = WAL</code></a></dt><dd>Adopts <a href="https://en.wikipedia.org/wiki/Write-ahead_logging" target="_blank" rel="noreferrer">Write-Ahead Logging</a> mode as a way to implement atomic commits and rollbacks in SQLite. This mode is generally more performant than the default <a href="https://www.sqlite.org/lockingv3.html#rollback" target="_blank" rel="noreferrer">rollback journal</a> mode.</dd><dt><a href="https://www.sqlite.org/foreignkeys.html#fk_enable" target="_blank" rel="noreferrer"><code>foreign_keys = ON</code></a></dt><dd>By default, SQLite does not check foreign key constraints. Turning on this setting makes it check foreign key constraints, which helps maintain data integrity.</dd></dl></div><p>Now let's declare a type in JavaScript to represent the record stored in the <code>users</code> table. Create a <em>src/schema.ts</em> file and define the <code>User</code> type as follows:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>User</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="record-insertion" tabindex="-1">Record insertion <a href="#record-insertion" aria-label="Permalink to &quot;Record insertion&quot;">​</a></h3><p>Now that we've connected to the database, it's time to write code to insert records.</p><p>Open the <em>src/app.tsx</em> file and <code>import</code> the <code>db</code> object and <code>User</code> type that will be used for record insertion:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span> </span><span>from</span><span> "./db.ts"</span><span>;</span></span>
<span><span>import</span><span> type</span><span> { </span><span>User</span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Implement the <code>POST /setup</code> handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // Check if an account already exists</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span><span>"SELECT * FROM users LIMIT 1"</span><span>).</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>!=</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>formData</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>);</span></span>
<span><span>  if</span><span> (</span><span>typeof</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "string"</span><span> ||</span><span> !</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>match</span></p><!--]--><!--]--></div></span><span>(</span><span>/</span><span>^</span><span>[a-z0-9_-]</span><span>{1,50}$</span><span>/</span><span>)) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span><span>"INSERT INTO users (username) VALUES (?)"</span><span>).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p>Add code to check if an account already exists to the <code>GET /setup</code> handler we created earlier:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // Check if an account already exists</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span><span>"SELECT * FROM users LIMIT 1"</span><span>).</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>!=</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><h3 id="testing" tabindex="-1">Testing <a href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now that we've roughly implemented the account creation feature, let's try it out. Open the <a href="http://localhost:8000/setup" target="_blank" rel="noreferrer">http://localhost:8000/setup</a> page in a web browser and create an account. In this tutorial, we'll assume that we used <em>johndoe</em> as the username. If it's created, let's also check if the record was properly inserted into the SQLite database:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM users;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If the record was properly inserted, you should see output like this (of course, <code>johndoe</code> will be whatever username you entered):</p><table tabindex="0"><thead><tr><th><code>id</code></th><th><code>username</code></th></tr></thead><tbody><tr><td><code>1</code></td><td><code>johndoe</code></td></tr></tbody></table><h2 id="profile-page" tabindex="-1">Profile page <a href="#profile-page" aria-label="Permalink to &quot;Profile page&quot;">​</a></h2><p>Now that we've created an account, let's implement a profile page to display the account information. Although we don't have much information to show yet.</p><p>Let's start with the visible part again. Open the <em>src/views.tsx</em> file and define a <code>&lt;Profile&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>ProfileProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ProfileProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>style</span></p><!--]--><!--]--></div></span><span>=</span><span>"user-select: all;"</span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then, open the <em>src/app.tsx</em> file and <code>import</code> the component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>And add a <code>GET /users/{username}</code> request handler that displays the <code>&lt;Profile&gt;</code> component:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span><span>"SELECT * FROM users WHERE username = ?"</span><span>)</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>));</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> =</span><span> `@${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}@${</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>host</span></p><!--]--><!--]--></div></span><span>}`</span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now let's test if it displays correctly. Open the <a href="http://localhost:8000/users/johndoe" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe</a> page in your web browser (if you created an account with a username other than <code>johndoe</code>, change the URL accordingly). You should see a screen like this:</p><p><img src="https://fedify.dev/assets/profile-page.BQHXdBsx.png" alt="Profile page"></p><div><p>TIP</p><p>A fediverse handle, or simply handle, is a unique address that identifies an account in the fediverse. For example, it looks like <code>@hongminhee@fosstodon.org</code>. It's similar to an email address, and its structure is also similar to an email address. It starts with <code>@</code>, followed by a name, then another <code>@</code>, and finally the domain name of the server the account belongs to. Sometimes the initial <code>@</code> is omitted.</p><p>Technically, handles are implemented using two standards: <a href="https://datatracker.ietf.org/doc/html/rfc7033" target="_blank" rel="noreferrer">WebFinger</a> and the <a href="https://datatracker.ietf.org/doc/html/rfc7565" target="_blank" rel="noreferrer"><code>acct:</code> URI scheme</a>. Thanks to Fedify implementing these, you don't need to know the implementation details while following this tutorial.</p></div><h2 id="implementing-the-actor" tabindex="-1">Implementing the actor <a href="#implementing-the-actor" aria-label="Permalink to &quot;Implementing the actor&quot;">​</a></h2><p>As the name suggests, ActivityPub is a protocol for exchanging activities. Writing a post, editing a post, deleting a post, liking a post, commenting, editing a profile… All actions that happen in social media are expressed as activities.</p><p>And all activities are transmitted from actor to actor. For example, when John Doe writes a post, a <q>writing</q> (<code>Create(Note)</code>) activity is sent from Joh Doe to John Doe's followers. If Jane Doe likes that post, a <q>liking</q> (<a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Like"><code>Like</code></a>) activity is sent from Jane Doe to John Doe.</p><p>Therefore, the first step in implementing ActivityPub is to implement the actor.</p><p>The demo app generated by the <code>fedify init</code> command already has a very simple actor implemented, but to communicate with actual software like Mastodon or Misskey, we need to implement the actor more properly.</p><p>First, let's take a look at the current implementation. Open the <em>src/federation.ts</em> file:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>InProcessMessageQueue</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>MemoryKvStore</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>getLogger</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@logtape/logtape"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>getLogger</span></p><!--]--><!--]--></div></span><span>(</span><span>"microblog"</span><span>);</span></span>
<span></span>
<span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>kv</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>MemoryKvStore</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>queue</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>InProcessMessageQueue</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>});</span></span>
<span></span>
<span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setActorDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>preferredUsername</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  });</span></span>
<span><span>});</span></span>
<span></span>
<span><span>export</span><span> default</span><span> </span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>;</span></span></code></pre></div></div><p>The part we should focus on is the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setActorDispatcher"><code>setActorDispatcher()</code></a> method. This method defines the URL and behavior that other ActivityPub software will use when querying an actor on our server. For example, if we query <em>/users/johndoe</em> as we did earlier, the <code>identifier</code> parameter of the callback function will receive the string value <code>"johndoe"</code>. And the callback function returns an instance of the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> class to convey the information of the queried actor.</p><p>The <code>ctx</code> parameter receives a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/federation/~/Context"><code>Context</code></a> object, which contains various functions related to the ActivityPub protocol. For example, the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.getActorUri"><code>getActorUri()</code></a> method used in the above code returns the unique URI of the actor with the <code>identifier</code> passed as a parameter. This URI is being used as the unique identifier of the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object.</p><p>As you can see from the implementation code, currently it's <em>making up</em> actor information and returning it for any identifier that comes after the <em>/users/</em> path. But what we want is to only allow queries for accounts that are actually registered. Let's modify this part to only return for accounts in the database.</p><h3 id="table-creation" tabindex="-1">Table creation <a href="#table-creation" aria-label="Permalink to &quot;Table creation&quot;">​</a></h3><p>We need to create an <code>actors</code> table. Unlike the <code>users</code> table which only contains accounts on the current instance server, this table will also include remote actors belonging to federated servers. The table looks like this. Add the following SQL to the <em>src/schema.sql</em> file:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> actors (</span></span>
<span><span>  id               </span><span>INTEGER</span><span> NOT NULL</span><span> PRIMARY KEY</span><span>,</span></span>
<span><span>  user_id          </span><span>INTEGER</span><span>          REFERENCES</span><span> users (id),</span></span>
<span><span>  uri              </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span> CHECK</span><span> (uri </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  handle           </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span> CHECK</span><span> (handle </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  name</span><span>             TEXT</span><span>,</span></span>
<span><span>  inbox_url        </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span> CHECK</span><span> (inbox_url </span><span>LIKE</span><span> 'https://%'</span></span>
<span><span>                                                  OR</span><span> inbox_url </span><span>LIKE</span><span> 'http://%'</span><span>),</span></span>
<span><span>  shared_inbox_url </span><span>TEXT</span><span>                    CHECK</span><span> (shared_inbox_url</span></span>
<span><span>                                                  LIKE</span><span> 'https://%'</span></span>
<span><span>                                                  OR</span><span> shared_inbox_url</span></span>
<span><span>                                                  LIKE</span><span> 'http://%'</span><span>),</span></span>
<span><span>  url</span><span>              TEXT</span><span>                    CHECK</span><span> (</span><span>url</span><span> LIKE</span><span> 'https://%'</span></span>
<span><span>                                                  OR</span><span> url</span><span> LIKE</span><span> 'http://%'</span><span>),</span></span>
<span><span>  created          </span><span>TEXT</span><span>    NOT NULL</span><span> DEFAULT</span><span> (CURRENT_TIMESTAMP)</span></span>
<span><span>                                           CHECK</span><span> (created </span><span>&lt;&gt;</span><span> ''</span><span>)</span></span>
<span><span>);</span></span></code></pre></div></div><ul><li><p>The <code>user_id</code> column is a foreign key to connect with the <code>users</code> column. If the record represents a remote actor, it will be <code>NULL</code>, but if it's an account on the current instance server, it will contain the <code>users.id</code> value of that account.</p></li><li><p>The <code>uri</code> column contains the unique URI of the actor, also called the actor ID. All ActivityPub objects, including actors, have a unique ID in URI form. Therefore, it cannot be empty and cannot be duplicated.</p></li><li><p>The <code>handle</code> column contains the fediverse handle in the form of <code>@johndoe@example.com</code>. Likewise, it cannot be empty and cannot be duplicated.</p></li><li><p>The <code>name</code> column contains the name displayed in the UI. It usually contains a full name or nickname. However, according to the ActivityPub specification, this column can be empty.</p></li><li><p>The <code>inbox_url</code> column contains the URL of the actor's inbox. We'll explain in detail what an inbox is below, but for now, just know that it must exist for the actor. This column also cannot be empty or duplicated.</p></li><li><p>The <code>shared_inbox_url</code> column contains the URL of the actor's shared inbox, which we'll also explain below. It's not mandatory, so it can be empty, and as the column name suggests, it can share the same shared inbox URL with other actors.</p></li><li><p>The <code>url</code> column contains the profile URL of the actor. A profile URL means the URL of the profile page that can be opened in a web browser. Sometimes the actor's ID and profile URL are the same, but they can be different depending on the service, so in that case, the profile URL is stored in this column. It can be empty.</p></li><li><p>The <code>created</code> column records when the record was created. It cannot be empty, and by default, the insertion time is recorded.</p></li></ul><p>Now, let's apply the <em>src/schema.sql</em> file to the <em>microblog.sqlite3</em> database file:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>And let's define a type in <em>src/schema.ts</em> to represent records stored in the <code>actors</code> table in JavaScript:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Actor</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>user_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>inbox_url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>shared_inbox_url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="actor-record" tabindex="-1">Actor record <a href="#actor-record" aria-label="Permalink to &quot;Actor record&quot;">​</a></h3><p>Although we currently have one record in the <code>users</code> table, there's no corresponding record in the <code>actors</code> table. This is because we didn't add a record to the <code>actors</code> table when creating the account. We need to modify the account creation code to add records to both <code>users</code> and <code>actors</code>.</p><p>First, let's modify the <code>SetupForm</code> in <em>src/views.tsx</em> to also input a name that will go into the <code>actors.name</code> column along with the username:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span> =</span><span> () </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;Set up your microblog&lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>"/setup"</span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>          Username{</span><span>" "</span><span>}</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"text"</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"username"</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>maxlength</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>50</span><span>}</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>pattern</span></p><!--]--><!--]--></div></span><span>=</span><span>"^[a-z0-9_\-]+$"</span></span>
<span><span>          /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>          Name &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"text"</span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"name"</span><span> </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span><span> /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"submit"</span><span> </span><span><div><!--[--><!--[--><p><span>value</span></p><!--]--><!--]--></div></span><span>=</span><span>"Setup"</span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Now <code>import</code> the <code>Actor</code> type we defined earlier in <em>src/app.tsx</em>:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { Actor, User } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Now let's add code to the <code>POST /setup</code> handler to create a record in the <code>actors</code> table with the input name and other necessary information:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // Check if an account already exists</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT * FROM users</span></span>
<span><span>      JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>      LIMIT 1</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>!=</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>formData</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>);</span></span>
<span><span>  if</span><span> (</span><span>typeof</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "string"</span><span> ||</span><span> !</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>match</span></p><!--]--><!--]--></div></span><span>(</span><span>/</span><span>^</span><span>[a-z0-9_-]</span><span>{1,50}$</span><span>/</span><span>)) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"name"</span><span>);</span></span>
<span><span>  if</span><span> (</span><span>typeof</span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "string"</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>trim</span></p><!--]--><!--]--></div></span><span>() </span><span>===</span><span> ""</span><span>) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> =</span><span> `@${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}@${</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>host</span></p><!--]--><!--]--></div></span><span>}`</span><span>;</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>fedi</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>createContext</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>raw</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>transaction</span></p><!--]--><!--]--></div></span><span>(() </span><span>=&gt;</span><span> {</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span><span>"INSERT OR REPLACE INTO users (id, username) VALUES (1, ?)"</span><span>).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    );</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      `</span></span>
<span><span>      INSERT OR REPLACE INTO actors</span></span>
<span><span>        (user_id, uri, handle, name, inbox_url, shared_inbox_url, url)</span></span>
<span><span>      VALUES (1, ?, ?, ?, ?, ?, ?)</span></span>
<span><span>    `</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>().</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    );</span></span>
<span><span>  })();</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p>When checking if an account already exists, we modified it to determine that there's no account yet not only when there's no record in the <code>users</code> table, but also when there's no matching record in the <code>actors</code> table. Apply the same condition to the <code>GET /setup</code> handler and the <code>GET /users/{username}</code> handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // Check if the user already exists</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT * FROM users</span></span>
<span><span>      JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>      LIMIT 1</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>!=</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>);</span></span>
<span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT * FROM users</span></span>
<span><span>      JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>      WHERE username = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>));</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> =</span><span> `@${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}@${</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>host</span></p><!--]--><!--]--></div></span><span>}`</span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><div><p>TIP</p><p>In TypeScript, <code>A &amp; B</code> means an object that is both type <code>A</code> and type <code>B</code>. For example, given the type <code>{ a: number } &amp; { b: string }</code>, <code>{ a: 123 }</code> or <code>{ b: "foo" }</code> do not satisfy this type, but <code>{ a: 123, b: "foo" }</code> does satisfy this type.</p></div><p>Finally, open the <em>src/federation.ts</em> file and add the following code below the actor dispatcher:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>);</span></span></code></pre></div></div><p>Don't worry about the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setInboxListeners"><code>setInboxListeners()</code></a> method for now. We'll cover this when we explain about the inbox. Just note that the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.getInboxUri"><code>getInboxUri()</code></a> method used in the account creation code needs the above code to work properly.</p><p>If you've modified all the code, open the <a href="http://localhost:8000/setup" target="_blank" rel="noreferrer">http://localhost:8000/setup</a> page in your browser and create an account again:</p><p><img src="https://fedify.dev/assets/account-creation-page-2.BAKG9NMu.png" alt="Account creation page"></p><h3 id="actor-dispatcher" tabindex="-1">Actor dispatcher <a href="#actor-dispatcher" aria-label="Permalink to &quot;Actor dispatcher&quot;">​</a></h3><p>Now that we've created the <code>actors</code> table and filled in a record, let's modify <em>src/federation.ts</em> again. First, <code>import</code> the <code>db</code> object, and <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Endpoints"><code>Endpoints</code></a> and <code>Actor</code> types:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span> </span><span>from</span><span> "./db.ts"</span><span>;</span></span>
<span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Now that we've <code>import</code>ed what we need, let's modify the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setActorDispatcher"><code>setActorDispatcher()</code></a> method:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setActorDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT * FROM users</span></span>
<span><span>      JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>      WHERE users.username = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span></span>
<span><span>  return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>preferredUsername</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>inbox</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>    }),</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>  });</span></span>
<span><span>});</span></span></code></pre></div></div><p>In the changed code, we now query the <code>users</code> table in the database and return <code>null</code> if it's not an account on the current server. In other words, it will respond with a proper <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object with <code>200 OK</code> for a <code>GET /users/johndoe</code> request (assuming the account was created with the username <code>johndoe</code>), and respond with <code>404 Not Found</code> for other requests.</p><p>Let's look at how the part creating the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object has changed. First, a <code>name</code> property has been added. This property uses the value from the <code>actors.name</code> column. We'll cover the <code>inbox</code> and <code>endpoints</code> properties when we explain about the inbox. The <code>url</code> property contains the profile URL of this account, and in this tutorial, we'll make the actor ID and the actor's profile URL match.</p><div><p>TIP</p><p>Sharp-eyed readers may have noticed that we're defining overlapping handlers for <code>GET /users/{identifier}</code> on both Hono and Fedify sides. So what happens when an actual request is sent to this path? The answer is that it depends on the <code>Accept</code> header of the request. If a request is sent with the <code>Accept: text/html</code> header, the request handler on the Hono side responds. If a request is sent with the <code>Accept: application/activity+json</code> header, the request handler on the Fedify side responds.</p><p>This way of giving different responses according to the <code>Accept</code> header of the request is called HTTP <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation" target="_blank" rel="noreferrer">content negotiation</a>, and Fedify itself implements content negotiation. More specifically, all requests go through Fedify once, and if it's not an ActivityPub-related request, it's passed on to the integrated framework, which in this tutorial is Hono.</p></div><div><p>TIP</p><p>In Fedify, all URIs and URLs are represented as <a href="https://developer.mozilla.org/" target="_blank" rel="noreferrer"><code>URL</code></a> instances.</p></div><h3 id="testing-1" tabindex="-1">Testing <a href="#testing-1" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now, let's test if the actor dispatcher is working well.</p><p>With the server running, open a new terminal tab and enter the following command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/alice</span></span></code></pre></div><p>Since there's no account named <code>alice</code>, you'll get an error like this, unlike before:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Failed to fetch the object.</span></span>
<span><span>It may be a private object.  Try with -a/--authorized-fetch.</span></span></code></pre></div><p>Now let's look up the <code>johndoe</code> account:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/johndoe</span></span></code></pre></div><p>Now you get a good result:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Person {</span></span>
<span><span>  id: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>  name: "John Doe",</span></span>
<span><span>  url: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>  preferredUsername: "johndoe",</span></span>
<span><span>  inbox: URL "http://localhost:8000/users/johndoe/inbox",</span></span>
<span><span>  endpoints: Endpoints { sharedInbox: URL "http://localhost:8000/inbox" }</span></span>
<span><span>}</span></span></code></pre></div><h2 id="cryptographic-key-pairs" tabindex="-1">Cryptographic key pairs <a href="#cryptographic-key-pairs" aria-label="Permalink to &quot;Cryptographic key pairs&quot;">​</a></h2><p>The next thing we'll implement is the actor's cryptographic keys for signing. In ActivityPub, when an actor creates and sends an activity, it uses a <a href="https://en.wikipedia.org/wiki/Digital_signature" target="_blank" rel="noreferrer">digital signature</a> to prove that the activity was really created by that actor. For this, each actor creates and holds their own matching private key (secret key) and public key pair, and makes the public key visible to other actors. When actors receive an activity, they compare the sender's public key with the activity's signature to verify that the activity was indeed created by the sender. Fedify handles the signing and signature verification automatically, but you need to implement the generation and preservation of the key pairs yourself.</p><div><p>WARNING</p><p>As the name suggests, the private key (secret key) should not be accessible to anyone other than the signing subject. On the other hand, the public key's purpose is to be public, so it's fine for anyone to access it.</p></div><h3 id="table-creation-1" tabindex="-1">Table creation <a href="#table-creation-1" aria-label="Permalink to &quot;Table creation&quot;">​</a></h3><p>Let's define a <code>keys</code> table in <em>src/schema.sql</em> to store the private and public key pairs:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> keys (</span></span>
<span><span>  user_id     </span><span>INTEGER</span><span> NOT NULL</span><span> REFERENCES</span><span> users (id),</span></span>
<span><span>  type</span><span>        TEXT</span><span>    NOT NULL</span><span> CHECK</span><span> (</span><span>type</span><span> IN</span><span> (</span><span>'RSASSA-PKCS1-v1_5'</span><span>, </span><span>'Ed25519'</span><span>)),</span></span>
<span><span>  private_key </span><span>TEXT</span><span>    NOT NULL</span><span> CHECK</span><span> (private_key </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  public_key  </span><span>TEXT</span><span>    NOT NULL</span><span> CHECK</span><span> (public_key </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  created     </span><span>TEXT</span><span>    NOT NULL</span><span> DEFAULT</span><span> (CURRENT_TIMESTAMP) </span><span>CHECK</span><span> (created </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  PRIMARY KEY</span><span> (user_id, </span><span>type</span><span>)</span></span>
<span><span>);</span></span></code></pre></div></div><p>If you look closely at the table, you can see that the <code>type</code> column only allows two types of values. One is the <a href="https://www.rfc-editor.org/rfc/rfc2313" target="_blank" rel="noreferrer">RSA-PKCS#1-v1.5</a> type and the other is the <a href="https://ed25519.cr.yp.to/" target="_blank" rel="noreferrer">Ed25519</a> type. (What each of these means is not important for this tutorial.) Since the primary key is on <code>(user_id, type)</code>, there can be a maximum of two key pairs for one user.</p><div><p>TIP</p><p>We can't go into detail in this tutorial, but as of November 2024, the ActivityPub network is in the process of transitioning from the RSA-PKCS#1-v1.5 type to the Ed25519 type. Some software only accepts the RSA-PKCS#1-v1.5 type, while some software accepts the Ed25519 type. Therefore, to communicate with both sides, both pairs of keys are needed.</p></div><p>The <code>private_key</code> and <code>public_key</code> columns can receive strings, and we'll put JSON data in them. We'll cover how to encode private and public keys as JSON later.</p><p>Now let's create the <code>keys</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>Let's also define a <code>Key</code> type in the <em>src/schema.ts</em> file to represent records stored in the <code>keys</code> table in JavaScript:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Key</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>user_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>:</span><span> "RSASSA-PKCS1-v1_5"</span><span> |</span><span> "Ed25519"</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>private_key</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>public_key</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="key-pairs-dispatcher" tabindex="-1">Key pairs dispatcher <a href="#key-pairs-dispatcher" aria-label="Permalink to &quot;Key pairs dispatcher&quot;">​</a></h3><p>Now we need to write code to generate and load key pairs.</p><p>Open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/exportJwk"><code>exportJwk()</code></a>, <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/generateCryptoKeyPair"><code>generateCryptoKeyPair()</code></a>, <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/importJwk"><code>importJwk()</code></a> functions provided by Fedify and the <code>Key</code> type we defined earlier:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Key</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Now let's modify the actor dispatcher part as follows:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setActorDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        SELECT * FROM users</span></span>
<span><span>        JOIN actors ON (users.id = actors.user_id)</span></span>
<span><span>        WHERE users.username = ?</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorKeyPairs</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>preferredUsername</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>inbox</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getInboxUri</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>      }),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>[</span><span>0</span><span>].</span><span><div><!--[--><!--[--><p><span>cryptographicKey</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>assertionMethods</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>k</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> </span><span><div><!--[--><!--[--><p><span>k</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>multikey</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    });</span></span>
<span><span>  })</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setKeyPairsDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span>&gt;(</span><span>"SELECT * FROM users WHERE username = ?"</span><span>)</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> [];</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>rows</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Key</span><span>&gt;(</span><span>"SELECT * FROM keys WHERE keys.user_id = ?"</span><span>)</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>Object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>fromEntries</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>rows</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>row</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> [</span><span><div><!--[--><!--[--><p><span>row</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>row</span></p><!--]--><!--]--></div></span><span>]),</span></span>
<span><span>    ) </span><span>as</span><span> </span><span><div><!--[--><!--[--><p><span>Record</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>Key</span><span>[</span><span>"type"</span><span>], </span><span>Key</span><span>&gt;;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>pairs</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>CryptoKeyPair</span><span>[] </span><span>=</span><span> [];</span></span>
<span><span>    // For each of the two key formats (RSASSA-PKCS1-v1_5 and Ed25519) that</span></span>
<span><span>    // the actor supports, check if they have a key pair, and if not,</span></span>
<span><span>    // generate one and store it in the database:</span></span>
<span><span>    for</span><span> (</span><span>const</span><span> </span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span> of</span><span> [</span><span>"RSASSA-PKCS1-v1_5"</span><span>, </span><span>"Ed25519"</span><span>] </span><span>as</span><span> </span><span><div><!--[--><!--[--><p><span>const</span></p><!--]--><!--]--></div></span><span>) {</span></span>
<span><span>      if</span><span> (</span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>[</span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>] </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>          "The user {identifier} does not have an {keyType} key; creating one..."</span><span>,</span></span>
<span><span>          { </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>        );</span></span>
<span><span>        const</span><span> { </span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>          `</span></span>
<span><span>          INSERT INTO keys (user_id, type, private_key, public_key)</span></span>
<span><span>          VALUES (?, ?, ?, ?)</span></span>
<span><span>          `</span><span>,</span></span>
<span><span>        ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>JSON</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>stringify</span></p><!--]--><!--]--></div></span><span>(</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>)),</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>JSON</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>stringify</span></p><!--]--><!--]--></div></span><span>(</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span>)),</span></span>
<span><span>        );</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>pairs</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>push</span></p><!--]--><!--]--></div></span><span>({ </span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span> });</span></span>
<span><span>      } </span><span>else</span><span> {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>pairs</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>push</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>: </span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>JSON</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parse</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>[</span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>].</span><span><div><!--[--><!--[--><p><span>private_key</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>            "private"</span><span>,</span></span>
<span><span>          ),</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span>: </span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>            </span><span><div><!--[--><!--[--><p><span>JSON</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parse</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>keys</span></p><!--]--><!--]--></div></span><span>[</span><span><div><!--[--><!--[--><p><span>keyType</span></p><!--]--><!--]--></div></span><span>].</span><span><div><!--[--><!--[--><p><span>public_key</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>            "public"</span><span>,</span></span>
<span><span>          ),</span></span>
<span><span>        });</span></span>
<span><span>      }</span></span>
<span><span>    }</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>pairs</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  });</span></span></code></pre></div></div><p>First of all, we should pay attention to the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/ActorCallbackSetters.setKeyPairsDispatcher"><code>setKeyPairsDispatcher()</code></a> method called in succession after the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setActorDispatcher"><code>setActorDispatcher()</code></a> method. This method connects the key pairs returned by the callback function to the account. By connecting the key pairs in this way, Fedify automatically adds digital signatures with the registered private keys when sending activities.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/generateCryptoKeyPair"><code>generateCryptoKeyPair()</code></a> function generates a new private key and public key pair and returns it as a <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKeyPair" target="_blank" rel="noreferrer"><code>CryptoKeyPair</code></a> object. For your reference, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKeyPair" target="_blank" rel="noreferrer"><code>CryptoKeyPair</code></a> type has the type <code>{ privateKey: CryptoKey; publicKey: CryptoKey; }</code>.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/exportJwk"><code>exportJwk()</code></a> function returns an object representing the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey" target="_blank" rel="noreferrer"><code>CryptoKey</code></a> object in JWK format. You don't need to know what the JWK format is. Just understand that it's a standard format for representing cryptographic keys in JSON. <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey" target="_blank" rel="noreferrer"><code>CryptoKey</code></a> is a web standard type for representing cryptographic keys as JavaScript objects.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/importJwk"><code>importJwk()</code></a> function converts a key represented in JWK format to a <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey" target="_blank" rel="noreferrer"><code>CryptoKey</code></a> object. You can understand it as the opposite of the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/exportJwk"><code>exportJwk()</code></a> function.</p><p>Now, let's turn our attention back to the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setActorDispatcher"><code>setActorDispatcher()</code></a> method. We're using a method called <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.getActorKeyPairs"><code>getActorKeyPairs()</code></a>, which, as the name suggests, returns the key pairs of the actor. The actor's key pairs are those very key pairs we just loaded with the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/ActorCallbackSetters.setKeyPairsDispatcher"><code>setKeyPairsDispatcher()</code></a> method. We loaded two pairs of keys in RSA-PKCS#1-v1.5 and Ed25519 formats, so the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.getActorKeyPairs"><code>getActorKeyPairs()</code></a> method returns an array of two key pairs. Each element of the array is an object representing the key pair in various formats, which looks like this:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>interface</span><span> </span><span>ActorKeyPair</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>privateKey</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>CryptoKey</span><span>;              </span><span>// Private key</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>publicKey</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>CryptoKey</span><span>;               </span><span>// Public key</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>keyId</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>URL</span><span>;                         </span><span>// Unique identification URI of the key</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>cryptographicKey</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>CryptographicKey</span></p><!--]--><!--]--></div></span><span>; </span><span>// Another format of the public key</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>multikey</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>Multikey</span></p><!--]--><!--]--></div></span><span>;                 </span><span>// Yet another format of the public key</span></span>
<span><span>}</span></span></code></pre></div><p>It's complex to explain here how <a href="https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey" target="_blank" rel="noreferrer"><code>CryptoKey</code></a>, <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/CryptographicKey"><code>CryptographicKey</code></a>, and <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Multikey"><code>Multikey</code></a> differ, and why there need to be so many formats. For now, let's just note that when initializing the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object, the <code>publicKey</code> property accepts the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/CryptographicKey"><code>CryptographicKey</code></a> type and the <code>assertionMethods</code> property accepts the <code>MultiKey[]</code> (TypeScript notation for an array of <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Multikey"><code>Multikey</code></a>) type.</p><p>By the way, why are there two properties in the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object that hold public keys, <code>publicKey</code> and <code>assertionMethods</code>? Originally in ActivityPub, there was only the <code>publicKey</code> property, but later the <code>assertionMethods</code> property was added to allow registration of multiple keys. Similar to how we generated both RSA-PKCS#1-v1.5 and Ed25519 keys earlier, we're setting both properties for compatibility with various software. If you look closely, you can see that we're only registering the RSA-PKCS#1-v1.5 key to the legacy <code>publicKey</code> property (the first item in the array is the RSA-PKCS#1-v1.5 key pair, and the second item is the Ed25519 key pair).</p><div><p>TIP</p><p>Actually, the <code>publicKey</code> property can contain multiple keys too. However, many software are already implemented under the assumption that the <code>publicKey</code> property will only contain one key, so they often malfunction. The <code>assertionMethods</code> property was proposed to avoid this.</p><p>For those interested in this, refer to the <a href="https://w3id.org/fep/521a" target="_blank" rel="noreferrer">FEP-521a</a> document.</p></div><h3 id="testing-2" tabindex="-1">Testing <a href="#testing-2" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now that we've registered the cryptographic keys to the actor object, let's check if it's working well. Query the actor with the following command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/johndoe</span></span></code></pre></div><p>If it's working correctly, you should see output like this:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Person {</span></span>
<span><span>  id: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>  name: "John Doe",</span></span>
<span><span>  url: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>  preferredUsername: "johndoe",</span></span>
<span><span>  publicKey: CryptographicKey {</span></span>
<span><span>    id: URL "http://localhost:8000/users/johndoe#main-key",</span></span>
<span><span>    owner: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>    publicKey: CryptoKey {</span></span>
<span><span>      type: "public",</span></span>
<span><span>      extractable: true,</span></span>
<span><span>      algorithm: {</span></span>
<span><span>        name: "RSASSA-PKCS1-v1_5",</span></span>
<span><span>        modulusLength: 4096,</span></span>
<span><span>        publicExponent: Uint8Array(3) [ 1, 0, 1 ],</span></span>
<span><span>        hash: { name: "SHA-256" }</span></span>
<span><span>      },</span></span>
<span><span>      usages: [ "verify" ]</span></span>
<span><span>    }</span></span>
<span><span>  },</span></span>
<span><span>  assertionMethods: [</span></span>
<span><span>    Multikey {</span></span>
<span><span>      id: URL "http://localhost:8000/users/johndoe#main-key",</span></span>
<span><span>      controller: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>      publicKey: CryptoKey {</span></span>
<span><span>        type: "public",</span></span>
<span><span>        extractable: true,</span></span>
<span><span>        algorithm: {</span></span>
<span><span>          name: "RSASSA-PKCS1-v1_5",</span></span>
<span><span>          modulusLength: 4096,</span></span>
<span><span>          publicExponent: Uint8Array(3) [ 1, 0, 1 ],</span></span>
<span><span>          hash: { name: "SHA-256" }</span></span>
<span><span>        },</span></span>
<span><span>        usages: [ "verify" ]</span></span>
<span><span>      }</span></span>
<span><span>    },</span></span>
<span><span>    Multikey {</span></span>
<span><span>      id: URL "http://localhost:8000/users/johndoe#key-2",</span></span>
<span><span>      controller: URL "http://localhost:8000/users/johndoe",</span></span>
<span><span>      publicKey: CryptoKey {</span></span>
<span><span>        type: "public",</span></span>
<span><span>        extractable: true,</span></span>
<span><span>        algorithm: { name: "Ed25519" },</span></span>
<span><span>        usages: [ "verify" ]</span></span>
<span><span>      }</span></span>
<span><span>    }</span></span>
<span><span>  ],</span></span>
<span><span>  inbox: URL "http://localhost:8000/users/johndoe/inbox",</span></span>
<span><span>  endpoints: Endpoints { sharedInbox: URL "http://localhost:8000/inbox" }</span></span>
<span><span>}</span></span></code></pre></div><p>You can see that the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Person"><code>Person</code></a> object's <code>publicKey</code> property contains one <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/CryptographicKey"><code>CryptographicKey</code></a> object in RSA-PKCS#1-v1.5 type, and the <code>assertionMethods</code> property contains two <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Multikey"><code>Multikey</code></a> objects in RSA-PKCS#1-v1.5 and Ed25519 formats.</p><h2 id="interoperating-with-mastodon" tabindex="-1">Interoperating with Mastodon <a href="#interoperating-with-mastodon" aria-label="Permalink to &quot;Interoperating with Mastodon&quot;">​</a></h2><p>Now let's check if we can actually view the actor we've created in Mastodon.</p><h3 id="exposing-to-the-public-internet" tabindex="-1">Exposing to the public internet <a href="#exposing-to-the-public-internet" aria-label="Permalink to &quot;Exposing to the public internet&quot;">​</a></h3><p>Unfortunately, the current server is only accessible locally. However, it would be inconvenient to deploy somewhere every time we modify the code for testing. Wouldn't it be great if we could expose our local server to the internet without deployment for immediate testing?</p><p>Here's where the <a href="https://fedify.dev/cli#fedify-tunnel-exposing-a-local-http-server-to-the-public-internet"><code>fedify tunnel</code></a> command comes in handy. In a terminal, open a new tab and enter this command followed by the port number of your local server:</p><p>This creates a disposable domain name and relays to your local server. It will output a URL that's accessible from the outside:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Your local server at 8000 is now publicly accessible:</span></span>
<span></span>
<span><span>https://temp-address.serveo.net/</span></span>
<span></span>
<span><span>Press ^C to close the tunnel.</span></span></code></pre></div><p>Of course, you'll see your own unique URL different from the one above. You can check if it's connecting well by opening <a href="https://temp-address.serveo.net/users/johndoe" target="_blank" rel="noreferrer">https://temp-address.serveo.net/users/johndoe</a> in your web browser (replace with your unique temporary domain):</p><p><img src="https://fedify.dev/assets/profile-page-2.ixKV_Uc_.png" alt="Profile page exposed to the public internet"></p><p>Copy your fediverse handle shown on the above web page, then go into Mastodon and paste it into the search box in the upper left corner:</p><p><img src="https://fedify.dev/assets/search-results.BvVtwbw0.png" alt="Search results for the fediverse handle in Mastodon"></p><p>If the actor we created appears in the search results as shown above, it's working correctly. You can also click on the actor's name in the search results to go to their profile page:</p><p><img src="https://fedify.dev/assets/remote-profile.C4GEH3OF.png" alt="Actor's profile viewed in Mastodon"></p><p>But this is as far as we can go. Don't try to follow yet! For our actor to be followable from other servers, we need to implement an inbox.</p><div><p>NOTE</p><p>The <code>fedify tunnel</code> command automatically disconnects after a while if not used. When this happens, you need to press <kbd>Ctrl</kbd>+<kbd>C</kbd> to stop it, then run the <code>fedify tunnel 8000</code> command again to establish a new connection.</p></div><h2 id="inbox" tabindex="-1">Inbox <a href="#inbox" aria-label="Permalink to &quot;Inbox&quot;">​</a></h2><p>In ActivityPub, an inbox is an endpoint where an actor receives incoming activities from other actors. All actors have their own inbox, which is a URL that can receive activities via HTTP <code>POST</code> requests. When another actor sends a follow request, writes a post, comments, or performs any other interaction, the corresponding activity is delivered to the recipient's inbox. The server processes the activities that come into the inbox and responds appropriately, allowing it to communicate and function as part of the federated network.</p><p>For now, we'll start by implementing the reception of follow requests.</p><h3 id="table-creation-2" tabindex="-1">Table creation <a href="#table-creation-2" aria-label="Permalink to &quot;Table creation&quot;">​</a></h3><p>We need to create a <code>follows</code> table to hold the actors who follow you (followers) and the actors you follow (following). Add the following SQL to the <em>src/schema.sql</em> file:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> follows (</span></span>
<span><span>  following_id </span><span>INTEGER</span><span>          REFERENCES</span><span> actors (id),</span></span>
<span><span>  follower_id  </span><span>INTEGER</span><span>          REFERENCES</span><span> actors (id),</span></span>
<span><span>  created      </span><span>TEXT</span><span>    NOT NULL</span><span> DEFAULT</span><span> (CURRENT_TIMESTAMP)</span></span>
<span><span>                                CHECK</span><span> (created </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  PRIMARY KEY</span><span> (following_id, follower_id)</span></span>
<span><span>);</span></span></code></pre></div></div><p>Let's create the <code>follows</code> table by executing <em>src/schema.sql</em> once again:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>Open the <em>src/schema.ts</em> file and define a type to represent records stored in the <code>follows</code> table in JavaScript:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Follow</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>following_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>follower_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="receiving-follow-activity" tabindex="-1">Receiving <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity <a href="#receiving-follow-activity" aria-label="Permalink to &quot;Receiving `Follow` activity&quot;">​</a></h3><p>Now it's time to implement the inbox. Actually, we've already written the following code in the <em>src/federation.ts</em> file earlier:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>);</span></span></code></pre></div></div><p>Before modifying this code, let's <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Accept"><code>Accept</code></a> and <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> classes and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/getActorHandle"><code>getActorHandle()</code></a> function provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Now let's modify the code calling the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setInboxListeners"><code>setInboxListeners()</code></a> method as follows:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>)</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span><span>"The Follow object does not have an object: {follow}"</span><span>, {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      });</span></span>
<span><span>      return</span><span>;</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parseUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "actor"</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span><span>"The Follow object's object is not an actor: {follow}"</span><span>, {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      });</span></span>
<span><span>      return</span><span>;</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActor</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span><span>"The Follow object does not have an actor: {follow}"</span><span>, {</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      });</span></span>
<span><span>      return</span><span>;</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        SELECT * FROM actors</span></span>
<span><span>        JOIN users ON users.id = actors.user_id</span></span>
<span><span>        WHERE users.username = ?</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>)?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>        "Failed to find the actor to follow in the database: {object}"</span><span>,</span></span>
<span><span>        { </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>      );</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>followerId</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        -- Add a new follower actor record or update if it already exists</span></span>
<span><span>        INSERT INTO actors (uri, handle, name, inbox_url, shared_inbox_url, url)</span></span>
<span><span>        VALUES (?, ?, ?, ?, ?, ?)</span></span>
<span><span>        ON CONFLICT (uri) DO UPDATE SET</span></span>
<span><span>          handle = excluded.handle,</span></span>
<span><span>          name = excluded.name,</span></span>
<span><span>          inbox_url = excluded.inbox_url,</span></span>
<span><span>          shared_inbox_url = excluded.shared_inbox_url,</span></span>
<span><span>          url = excluded.url</span></span>
<span><span>        WHERE</span></span>
<span><span>          actors.uri = excluded.uri</span></span>
<span><span>        RETURNING *</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        await</span><span> </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      )?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      "INSERT INTO follows (following_id, follower_id) VALUES (?, ?)"</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>followerId</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span> =</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>to</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    });</span></span>
<span><span>    await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>sendActivity</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  });</span></span></code></pre></div></div><p>Let's examine the code carefully. The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/InboxListenerSetters.on"><code>on()</code></a> method defines the action to take when a specific type of activity is received. Here, we've written code to record the follower information in the database when a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity is received, and then send an <code>Accept(Follow)</code> activity back to the actor who sent the follow request.</p><p>The <code>follow.objectId</code> should contain the URI of the actor being followed. We use the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.parseUri"><code>parseUri()</code></a> method to check if the URI inside it points to the actor we created.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/getActorHandle"><code>getActorHandle()</code></a> function returns the fediverse handle as a string from the given actor object.</p><p>If there's no information about the actor who sent the follow request in the <code>actors</code> table yet, we first add a record. If a record already exists, we update it with the latest data. Then, we add the follower to the <code>follows</code> table.</p><p>Once the record is completed in the database, we use the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.sendActivity"><code>sendActivity()</code></a> method to send an <code>Accept(Follow)</code> activity as a reply to the actor who sent the activity. It takes the sender as the first parameter, the recipient as the second parameter, and the activity object to send as the third parameter.</p><h3 id="activitypub-academy" tabindex="-1">ActivityPub.Academy <a href="#activitypub-academy" aria-label="Permalink to &quot;ActivityPub.Academy&quot;">​</a></h3><p>Now it's time to check if follow requests are being received properly.</p><p>While it would be fine to test from a regular Mastodon server, let's use the <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> server, which allows us to see exactly how activities are exchanged. ActivityPub.Academy is a special Mastodon server for education and debugging purposes, where you can easily create temporary accounts with just one click.</p><p><img src="https://fedify.dev/assets/academy.BEfymNOt.jpg" alt="ActivityPub.Academy homepage"></p><p>After agreeing to the privacy policy, click the <em>Sign Up</em> button to create a new account. The created account will have a randomly generated name and handle, and will disappear on its own after a day. Instead, you can create new accounts as many times as you want.</p><p>Once you're logged in, paste the handle of the actor we created into the search box in the top left corner of the screen:</p><p><img src="https://fedify.dev/assets/academy-search-results.BRfKsJiB.png" alt="Search results for our actor's handle on ActivityPub.Academy"></p><p>If our actor appears in the search results, click the follow button on the right to send a follow request. Then click on <em>Activity Log</em> in the right menu:</p><p><img src="https://fedify.dev/assets/activity-log.Dm59VnxS.png" alt="ActivityPub.Academy's Activity Log"></p><p>You'll see an indication that a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity was sent from the ActivityPub.Academy server to the inbox of the actor we created by clicking the follow button just now. You can see the contents of the activity by clicking <em>show source</em> in the bottom right:</p><p><img src="https://fedify.dev/assets/activity-log-2.Bsel8qEA.png" alt="Activity Log screen after clicking show source"></p><h3 id="testing-3" tabindex="-1">Testing <a href="#testing-3" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now that we've confirmed that the activity was sent well, it's time to check if our inbox code is working properly. First, let's see if a record was created properly in the <code>follows</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM follows;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If the follow request was processed successfully, you should see a result like this (of course, the time will be different):</p><table tabindex="0"><thead><tr><th><code>following_id</code></th><th><code>follower_id</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>1</code></td><td><code>2</code></td><td><code>2024-09-01 10:19:41</code></td></tr></tbody></table><p>Let's also check if a new record was created in the <code>actors</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM actors WHERE id &gt; 1;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><table tabindex="0"><thead><tr><th><code>id</code></th><th><code>user_id</code></th><th><code>uri</code></th><th><code>handle</code></th><th><code>name</code></th><th><code>inbox_url</code></th><th><code>shared_inbox_url</code></th><th><code>url</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>2</code></td><td></td><td><code>https://activitypub.academy/users/dobussia_dovornath</code></td><td><code>@dobussia_dovornath@activitypub.academy</code></td><td><code>Dobussia Dovornath</code></td><td><code>https://activitypub.academy/users/dobussia_dovornath/inbox</code></td><td><code>https://activitypub.academy/inbox</code></td><td><code>https://activitypub.academy/@dobussia_dovornath</code></td><td><code>2024-09-01 10:19:41</code></td></tr></tbody></table><p>Now, let's look at ActivityPub.Academy's <em>Activity Log</em> again. If the <code>Accept(Follow)</code> activity sent by our actor arrived well, it should be displayed as follows:</p><p><img src="https://fedify.dev/assets/activity-log-3.CK83vz3Y.png" alt="Accept(Follow) activity displayed in Activity Log"></p><p>This way, you've implemented your first interaction via ActivityPub!</p><h2 id="unfollow" tabindex="-1">Unfollow <a href="#unfollow" aria-label="Permalink to &quot;Unfollow&quot;">​</a></h2><p>What happens if an actor from another server unfollows our actor after following it? Let's test this in <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a>. As before, enter our actor's fediverse handle in the ActivityPub.Academy search box:</p><p><img src="https://fedify.dev/assets/academy-search-results-2.UVqR0fdO.png" alt="Search results in ActivityPub.Academy"></p><p>If you look closely, you'll see an unfollow button in place of the follow button to the right of the actor name. Click this button to unfollow, then go to the <em>Activity Log</em> to see what activity is sent:</p><p><img src="https://fedify.dev/assets/activity-log-4.C2MQmf8S.png" alt="Activity Log showing the sent Undo(Follow) activity"></p><p>As you can see, an <code>Undo(Follow)</code> activity has been sent. If you click <em>show source</em> in the bottom right, you can see the detailed contents of the activity:</p><div><p><span>json</span></p><pre tabindex="0"><code><span><span>{</span></span>
<span><span>  "@context"</span><span>: </span><span>"https://www.w3.org/ns/activitystreams"</span><span>,</span></span>
<span><span>  "id"</span><span>: </span><span>"https://activitypub.academy/users/dobussia_dovornath#follows/3283/undo"</span><span>,</span></span>
<span><span>  "type"</span><span>: </span><span>"Undo"</span><span>,</span></span>
<span><span>  "actor"</span><span>: </span><span>"https://activitypub.academy/users/dobussia_dovornath"</span><span>,</span></span>
<span><span>  "object"</span><span>: {</span></span>
<span><span>    "id"</span><span>: </span><span>"https://activitypub.academy/98b131b8-89ea-49ba-b2bd-3ee0f5a87694"</span><span>,</span></span>
<span><span>    "type"</span><span>: </span><span>"Follow"</span><span>,</span></span>
<span><span>    "actor"</span><span>: </span><span>"https://activitypub.academy/users/dobussia_dovornath"</span><span>,</span></span>
<span><span>    "object"</span><span>: </span><span>"https://temp-address.serveo.net/users/johndoe"</span></span>
<span><span>  }</span></span>
<span><span>}</span></span></code></pre></div><p>Looking at this JSON object, you can see that the <code>Undo(Follow)</code> activity includes the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity that was received by our inbox earlier. However, since we haven't defined any behavior for when the inbox receives an <code>Undo(Follow)</code> activity, nothing has happened.</p><h3 id="receiving-undo-follow-activity" tabindex="-1">Receiving <code>Undo(Follow)</code> Activity <a href="#receiving-undo-follow-activity" aria-label="Permalink to &quot;Receiving `Undo(Follow)` Activity&quot;">​</a></h3><p>To implement unfollow, open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Undo"><code>Undo</code></a> class provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Then add <code>on(Undo, ...)</code> in succession after <code>on(Follow, ...)</code>:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>)</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    // ... omitted ...</span></span>
<span><span>  })</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undo</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>undo</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObject</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> </span><span>instanceof</span><span> </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>)) </span><span>return</span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>undo</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parseUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>objectId</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "actor"</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      `</span></span>
<span><span>      DELETE FROM follows</span></span>
<span><span>      WHERE following_id = (</span></span>
<span><span>        SELECT actors.id</span></span>
<span><span>        FROM actors</span></span>
<span><span>        JOIN users ON actors.user_id = users.id</span></span>
<span><span>        WHERE users.username = ?</span></span>
<span><span>      ) AND follower_id = (SELECT id FROM actors WHERE uri = ?)</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undo</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  });</span></span></code></pre></div></div><p>This time, the code is shorter than when processing follow requests. It checks if the thing inside the <code>Undo(Follow)</code> activity is a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity, uses the <code>parseUri()</code> method to check if the follow target of the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity to be canceled is our actor, and then deletes the corresponding record from the <code>follows</code> table.</p><h3 id="testing-4" tabindex="-1">Testing <a href="#testing-4" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>We can't unfollow once more since we already clicked the unfollow button in <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> earlier. We'll have to follow again and then unfollow to test. But before that, we need to empty the <code>follows</code> table. Otherwise, there will be an error when the follow request comes in because the record already exists.</p><p>Let's empty the <code>follows</code> table using the <code>sqlite3</code> command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "DELETE FROM follows;"</span><span> |</span><span> sqlite3</span><span> microblog.sqlite3</span></span></code></pre></div><p>Now press the follow button again, then check the database:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM follows;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If the follow request was processed successfully, you should see a result like this:</p><table tabindex="0"><thead><tr><th><code>following_id</code></th><th><code>follower_id</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>1</code></td><td><code>2</code></td><td><code>2024-09-02 01:05:17</code></td></tr></tbody></table><p>Now press the unfollow button again, then check the database one more time:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT count(*) FROM follows;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If the unfollow request was processed successfully, the record should have disappeared, so you should see a result like this:</p><table tabindex="0"><thead><tr><th><code>count(*)</code></th></tr></thead><tbody><tr><td><code>0</code></td></tr></tbody></table><h2 id="followers-list" tabindex="-1">Followers list <a href="#followers-list" aria-label="Permalink to &quot;Followers list&quot;">​</a></h2><p>It's cumbersome to view the followers list using the <code>sqlite3</code> command every time, so let's make it possible to view the followers list on the web.</p><p>Let's start by adding a new component to the <em>src/views.tsx</em> file. First, <code>import</code> the <code>Actor</code> type:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Then define the <code>&lt;FollowerList&gt;</code> component and the <code>&lt;ActorLink&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>FollowerListProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Actor</span><span>[];</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>FollowerListProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>h2</span></p><!--]--><!--]--></div></span><span>&gt;Followers&lt;/</span><span><div><!--[--><!--[--><p><span>h2</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>ul</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      {</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>li</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>key</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>}&gt;</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>ActorLink</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>li</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      ))}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>ul</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span>
<span></span>
<span><span>export</span><span> interface</span><span> </span><span>ActorLinkProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Actor</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>ActorLink</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ActorLinkProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ?</span><span> (</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>class</span></p><!--]--><!--]--></div></span><span>=</span><span>"secondary"</span><span>&gt;</span></span>
<span><span>      {</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  ) </span><span>:</span><span> (</span></span>
<span><span>    &lt;&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span>" "</span><span>}</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>small</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        (</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>class</span></p><!--]--><!--]--></div></span><span>=</span><span>"secondary"</span><span>&gt;</span></span>
<span><span>          {</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        )</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>small</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/&gt;</span></span>
<span><span>  );</span></span>
<span><span>};</span></span></code></pre></div></div><p>The <code>&lt;ActorLink&gt;</code> component is used to represent a single actor, and the <code>&lt;FollowerList&gt;</code> component uses the <code>&lt;ActorLink&gt;</code> component to represent the list of followers. As you can see, since <abbr title="JavaScript XML">JSX</abbr> doesn't have conditional statements or loops, we're using the ternary operator and the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer"><code>Array.map()</code></a> method.</p><p>Now let's create an endpoint to display the followers list. Open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;FollowerList&gt;</code> component:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>Then add a request handler for <code>GET /users/{username}/followers</code>:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/followers"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT followers.*</span></span>
<span><span>      FROM follows</span></span>
<span><span>      JOIN actors AS followers ON follows.follower_id = followers.id</span></span>
<span><span>      JOIN actors AS following ON follows.following_id = following.id</span></span>
<span><span>      JOIN users ON users.id = following.user_id</span></span>
<span><span>      WHERE users.username = ?</span></span>
<span><span>      ORDER BY follows.created DESC</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>));</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now, shall we check if it's displaying correctly? There should be followers, so with <code>fedify tunnel</code> running, follow our actor from another Mastodon server or <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a>. After the follow request is accepted, open the <a href="http://localhost:8000/users/johndoe/followers" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe/followers</a> page in your web browser, and you should see something like this:</p><p><img src="https://fedify.dev/assets/followers-list.CFBaVYQj.png" alt="Followers list page"></p><p>Now that we've created the followers list, it would be nice to display the number of followers on the profile page as well. Open the <em>src/views.tsx</em> file again and modify the <code>&lt;Profile&gt;</code> component as follows:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>ProfileProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;   </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;  </span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ProfileProps</span><span>&gt; </span><span>=</span><span> ({</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,   </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>}) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}`</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>span</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>style</span></p><!--]--><!--]--></div></span><span>=</span><span>"user-select: all;"</span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>span</span></p><!--]--><!--]--></div></span><span>&gt; </span><span>&amp;middot;</span><span>{</span><span>" "</span><span>}</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/followers`</span><span>}&gt;</span></span>
<span><span>          {</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> </span><span>===</span><span> 1</span><span> ?</span><span> "1 follower"</span><span> :</span><span> `${</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>} followers`</span><span>}</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Two props have been added to <code>ProfileProps</code>. <code>followers</code> is a prop that holds the number of followers, as the name suggests. <code>username</code> receives the username that will go into the URL to link to the followers list.</p><p>Now go back to the <em>src/app.tsx</em> file and modify the <code>GET /users/{username}</code> request handler as follows:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record</span></span>
<span><span>  const</span><span> { </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT count(*) AS followers</span></span>
<span><span>      FROM follows</span></span>
<span><span>      JOIN actors ON follows.following_id = actors.id</span></span>
<span><span>      WHERE actors.user_id = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>)</span><span>!</span><span>;</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>SQL that counts the number of records in the <code>follows</code> table in the database has been added. Now, let's check the changed profile page. When you open the <a href="http://localhost:8000/users/johndoe" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe</a> page in your web browser, you should see something like this:</p><p><img src="https://fedify.dev/assets/profile-page-3.Bz3NK0AA.png" alt="Changed profile page"></p><h2 id="followers-collection" tabindex="-1">Followers collection <a href="#followers-collection" aria-label="Permalink to &quot;Followers collection&quot;">​</a></h2><p>However, there's one problem. Let's look up our actor from a Mastodon server that is <em>not</em> ActivityPub.Academy. (You know how to look it up, right? With the server exposed to the public internet, enter the actor's handle in the Mastodon search box.) When you view our actor's profile in Mastodon, you might notice something strange:</p><p><img src="https://fedify.dev/assets/remote-profile-2.havFcOBx.png" alt="Our actor's profile viewed in Mastodon"></p><p>The number of followers is shown as 0. This is because our actor is not exposing the followers list via ActivityPub. To expose the followers list in ActivityPub, we need to define a followers collection.</p><p>Open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Recipient"><code>Recipient</code></a> type provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,  </span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Then add a followers collection dispatcher at the bottom:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setFollowersDispatcher</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    "/users/{identifier}/followers"</span><span>,</span></span>
<span><span>    (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>cursor</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>      const</span><span> </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>        .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>          `</span></span>
<span><span>          SELECT followers.*</span></span>
<span><span>          FROM follows</span></span>
<span><span>          JOIN actors AS followers ON follows.follower_id = followers.id</span></span>
<span><span>          JOIN actors AS following ON follows.following_id = following.id</span></span>
<span><span>          JOIN users ON users.id = following.user_id</span></span>
<span><span>          WHERE users.username = ?</span></span>
<span><span>          ORDER BY follows.created DESC</span></span>
<span><span>          `</span><span>,</span></span>
<span><span>        )</span></span>
<span><span>        .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>      const</span><span> </span><span><div><!--[--><!--[--><p><span>items</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Recipient</span><span>[] </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> ({</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inbox_url</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>:</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>shared_inbox_url</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span></span>
<span><span>            ?</span><span> null</span></span>
<span><span>            :</span><span> { </span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>f</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>shared_inbox_url</span></p><!--]--><!--]--></div></span><span>) },</span></span>
<span><span>      }));</span></span>
<span><span>      return</span><span> { </span><span><div><!--[--><!--[--><p><span>items</span></p><!--]--><!--]--></div></span><span> };</span></span>
<span><span>    },</span></span>
<span><span>  )</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setCounter</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>result</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>cnt</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        SELECT count(*) AS cnt</span></span>
<span><span>        FROM follows</span></span>
<span><span>        JOIN actors ON actors.id = follows.following_id</span></span>
<span><span>        JOIN users ON users.id = actors.user_id</span></span>
<span><span>        WHERE users.username = ?</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>result</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ?</span><span> 0</span><span> :</span><span> </span><span><div><!--[--><!--[--><p><span>result</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>cnt</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  });</span></span></code></pre></div></div><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Federation.setFollowersDispatcher"><code>setFollowersDispatcher()</code></a> method creates a followers collection object to respond to when a <code>GET /users/{identifier}/followers</code> request comes in. Although the SQL is a bit long, it essentially gets the list of actors following the actor with the <code>identifier</code> parameter. The <code>items</code> contains <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Recipient"><code>Recipient</code></a> objects, and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Recipient"><code>Recipient</code></a> type looks like this:</p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Recipient</span><span> {</span></span>
<span><span>  readonly</span><span> </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>URL</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  readonly</span><span> </span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>URL</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  readonly</span><span> </span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>?:</span><span> {</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>URL</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  } </span><span>|</span><span> null</span><span>;</span></span>
<span><span>}</span></span></code></pre></div><p>The <code>id</code> property contains the actor's unique IRI, and <code>inboxId</code> contains the URL of the actor's personal inbox. <code>endpoints.sharedInbox</code> contains the URL of the actor's shared inbox. Since we have all that information in our <code>actors</code> table, we can fill the <code>items</code> array with that information.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/CollectionCallbackSetters.setCounter"><code>setCounter()</code></a> method gets the total number of the followers collection. Here too, the SQL is a bit complex, but in summary, it's counting the number of actors following the actor with the <code>identifier</code> parameter.</p><p>Now, let's check if the followers collection is working properly by using the <code>fedify lookup</code> command:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/johndoe/followers</span></span></code></pre></div><p>If implemented correctly, you should see a result like this:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>OrderedCollection {</span></span>
<span><span>  totalItems: 1,</span></span>
<span><span>  items: [ URL "https://activitypub.academy/users/dobussia_dovornath" ]</span></span>
<span><span>}</span></span></code></pre></div><p>However, just creating a followers collection like this doesn't let other servers know where the followers collection is. So we need to link to the followers collection in the actor dispatcher:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setActorDispatcher</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    // ... omitted ...</span></span>
<span><span>    return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      // ... omitted ...</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getFollowersUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),  </span></span>
<span><span>    });</span></span>
<span><span>  })</span></span></code></pre></div></div><p>Let's look up the actor with <code>fedify lookup</code> again:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>fedify</span><span> lookup</span><span> http://localhost:8000/users/johndoe</span></span></code></pre></div><p>If you see a <code>"followers"</code> property included in the result as shown below, it's correct:</p><div><p><span>console</span></p><pre tabindex="0"><code><span><span>✔ Looking up the object...</span></span>
<span><span>Person {</span></span>
<span><span>  ... omitted ...</span></span>
<span><span>  inbox: URL "http://localhost:8000/users/johndoe/inbox",</span></span>
<span><span>  followers: URL "http://localhost:8000/users/johndoe/followers",</span></span>
<span><span>  endpoints: Endpoints { sharedInbox: URL "http://localhost:8000/inbox" }</span></span>
<span><span>}</span></span></code></pre></div><p>Now, let's look up our actor in Mastodon again. But the result might be a bit disappointing:</p><p><img src="https://fedify.dev/assets/remote-profile-2.havFcOBx.png" alt="Our actor's profile viewed again in Mastodon"></p><p>The number of followers is still shown as 0. This is because Mastodon caches information about actors from other servers. There are ways to update this, but they're not as easy as pressing the <kbd>F5</kbd> key:</p><ul><li><p>One way is to wait for a week. Mastodon clears the cache that holds information about actors from other servers 7 days after the last update.</p></li><li><p>Another way is to send an <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Update"><code>Update</code></a> activity, but this requires tedious coding.</p></li><li><p>Or you could try looking it up from another Mastodon server where the cache hasn't been created yet.</p></li><li><p>The last method is to turn off and on <code>fedify tunnel</code> to get a new temporary domain assigned.</p></li></ul><p>If you want to see the correct number of followers displayed on another Mastodon server, try one of the methods I've listed.</p><h2 id="posts" tabindex="-1">Posts <a href="#posts" aria-label="Permalink to &quot;Posts&quot;">​</a></h2><p>Now, it's finally time to implement posts. Unlike a typical blog, the microblog we're creating should be able to store posts created on other servers as well. Let's design with this in mind.</p><h3 id="table-creation-3" tabindex="-1">Table creation <a href="#table-creation-3" aria-label="Permalink to &quot;Table creation&quot;">​</a></h3><p>Let's start by creating a <code>posts</code> table. Open the <em>src/schema.sql</em> file and add the following SQL:</p><div><p><span data-title="src/schema.sql">src/schema.sql</span></p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>CREATE</span><span> TABLE</span><span> IF</span><span> NOT</span><span> EXISTS</span><span> posts (</span></span>
<span><span>  id       </span><span>INTEGER</span><span> NOT NULL</span><span> PRIMARY KEY</span><span>,</span></span>
<span><span>  uri      </span><span>TEXT</span><span>    NOT NULL</span><span> UNIQUE</span><span> CHECK</span><span> (uri </span><span>&lt;&gt;</span><span> ''</span><span>),</span></span>
<span><span>  actor_id </span><span>INTEGER</span><span> NOT NULL</span><span> REFERENCES</span><span> actors (id),</span></span>
<span><span>  content  </span><span>TEXT</span><span>    NOT NULL</span><span>,</span></span>
<span><span>  url</span><span>      TEXT</span><span>             CHECK</span><span> (</span><span>url</span><span> LIKE</span><span> 'https://%'</span><span> OR</span><span> url</span><span> LIKE</span><span> 'http://%'</span><span>),</span></span>
<span><span>  created  </span><span>TEXT</span><span>    NOT NULL</span><span> DEFAULT</span><span> (CURRENT_TIMESTAMP) </span><span>CHECK</span><span> (created </span><span>&lt;&gt;</span><span> ''</span><span>)</span></span>
<span><span>);</span></span></code></pre></div></div><ul><li><p>The <code>id</code> column is the primary key of the table.</p></li><li><p>The <code>uri</code> column holds the unique URI of the post. As mentioned earlier, all ActivityPub objects must have a unique URI.</p></li><li><p>The <code>actor_id</code> column points to the actor who wrote the post.</p></li><li><p>The <code>content</code> column contains the content of the post.</p></li><li><p>The <code>url</code> column contains the URL where the post is displayed in a web browser. There are cases where the URI of an ActivityPub object and the URL of the page displayed in a web browser match, but there are also cases where they don't, so a separate column is necessary. However, it can be empty.</p></li><li><p>The <code>created</code> column contains the time the post was created.</p></li></ul><p>Let's execute the SQL to create the <code>posts</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>sqlite3</span><span> microblog.sqlite3</span><span> &lt;</span><span> src/schema.sql</span></span></code></pre></div><p>Also define a <code>Post</code> type in the <em>src/schema.ts</em> file to represent records that will be stored in the <code>posts</code> table in JavaScript:</p><div><p><span data-title="src/schema.ts">src/schema.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>Post</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>actor_id</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>}</span></span></code></pre></div></div><h3 id="home-page" tabindex="-1">Home page <a href="#home-page" aria-label="Permalink to &quot;Home page&quot;">​</a></h3><p>To write a post, there needs to be a form somewhere, right? Come to think of it, we haven't properly created the home page yet. Let's add a post creation form to the home page.</p><p>First, open the <em>src/views.tsx</em> file and <code>import</code> the <code>User</code> type:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Then define the <code>&lt;Home&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>HomeProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>HomeProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}'s microblog&lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}`</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}'s profile&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/posts`</span><span>}&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>textarea</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"content"</span><span> </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>true</span><span>} </span><span><div><!--[--><!--[--><p><span>placeholder</span></p><!--]--><!--]--></div></span><span>=</span><span>"What's up?"</span><span> /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>label</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"submit"</span><span> </span><span><div><!--[--><!--[--><p><span>value</span></p><!--]--><!--]--></div></span><span>=</span><span>"Post"</span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;Home&gt;</code> component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>And modify the existing <code>GET /</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT users.*, actors.*</span></span>
<span><span>      FROM users</span></span>
<span><span>      JOIN actors ON users.id = actors.user_id</span></span>
<span><span>      LIMIT 1</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>If you've done this much, let's check if the home page comes out well. When you open the <a href="http://localhost:8000/" target="_blank" rel="noreferrer">http://localhost:8000/</a> page in your web browser, you should see something like this:</p><p><img src="https://hackmd.io/_uploads/HJF35y7nR.png" alt="Home page"></p><h3 id="record-insertion-1" tabindex="-1">Record insertion <a href="#record-insertion-1" aria-label="Permalink to &quot;Record insertion&quot;">​</a></h3><p>Now that we've created the post creation form, we need code to actually save the post content to the <code>posts</code> table.</p><p>First, open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> class provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Add the following code:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setObjectDispatcher</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  "/users/{identifier}/posts/{id}"</span><span>,</span></span>
<span><span>  (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    return</span><span> null</span><span>;</span></span>
<span><span>  },</span></span>
<span><span>);</span></span></code></pre></div></div><p>This code doesn't do much yet, but it's needed to determine the permalink format of the posts. We'll implement it properly later.</p><p>In ActivityPub, the content of posts is exchanged in HTML format. Therefore, we need to convert the content received in plain text format to HTML format. At this time, we need the <em><a href="https://github.com/wooorm/stringify-entities" target="_blank" rel="noreferrer">stringify-entities</a></em> package to convert characters like <code>&lt;</code> and <code>&gt;</code> to HTML entities like <code>&amp;lt;</code> and <code>&amp;gt;</code>:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>npm</span><span> add</span><span> stringify-entities</span></span></code></pre></div><p>Then open the <em>src/app.tsx</em> file and <code>import</code> the installed package:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>stringifyEntities</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "stringify-entities"</span><span>;</span></span></code></pre></div></div><p>Also <code>import</code> the <code>Post</code> type and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> class provided by Fedify:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Post</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span>
<span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>And implement the <code>POST /users/{username}/posts</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/posts"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT actors.*</span></span>
<span><span>      FROM actors</span></span>
<span><span>      JOIN users ON users.id = actors.user_id</span></span>
<span><span>      WHERE users.username = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>formData</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"content"</span><span>)?.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>trim</span></p><!--]--><!--]--></div></span><span>() </span><span>===</span><span> ""</span><span>) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Content is required"</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>fedi</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>createContext</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>raw</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span> |</span><span> null</span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>transaction</span></p><!--]--><!--]--></div></span><span>(() </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        INSERT INTO posts (uri, actor_id, content)</span></span>
<span><span>        VALUES ('https://localhost/', ?, ?)</span></span>
<span><span>        RETURNING *</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>stringifyEntities</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>, { </span><span><div><!--[--><!--[--><p><span>escapeOnly</span></p><!--]--><!--]--></div></span><span>: </span><span>true</span><span> }));</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>    }).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span><span>"UPDATE posts SET uri = ?, url = ? WHERE id = ?"</span><span>).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    );</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  })();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Failed to create post"</span><span>, </span><span>500</span><span>);</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p>Although it's a normal code that adds a record to the <code>posts</code> table, there's one peculiar part. To get the URI of the ActivityPub object representing the post, <code>posts.id</code> needs to be determined first, so we first insert a temporary URI <code>https://localhost/</code> into the <code>posts.uri</code> column to add the record, then use the determined <code>posts.id</code> to get the actual URI using the <code>getObjectUri()</code> method and update the record.</p><p>Now, let's open the <a href="http://localhost:8000/" target="_blank" rel="noreferrer">http://localhost:8000/</a> page in your web browser and create a post:</p><p><img src="https://fedify.dev/assets/home-2.BRuu-QR7.png" alt="Creating a post"></p><p>When you press the <em>Post</em> button to create a post, unfortunately you'll get a <code>404 Not Found</code> error:</p><p><img src="https://fedify.dev/assets/404.DUD_N_SX.png" alt="404 Not Found"></p><p>This is because we implemented it to redirect to the post's permalink, but we haven't implemented the post page yet. However, a record should have been created in the <code>posts</code> table. Let's check:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM posts;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>You should see a result like this:</p><table tabindex="0"><thead><tr><th><code>id</code></th><th><code>uri</code></th><th><code>actor_id</code></th><th><code>content</code></th><th><code>url</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>1</code></td><td><code>http://localhost:8000/users/johndoe/posts/1</code></td><td><code>1</code></td><td><code>It's my first post!</code></td><td><code>http://localhost:8000/users/johndoe/posts/1</code></td><td><code>2024-09-02 08:10:55</code></td></tr></tbody></table><h3 id="post-page" tabindex="-1">Post page <a href="#post-page" aria-label="Permalink to &quot;Post page&quot;">​</a></h3><p>To prevent the <code>404 Not Found</code> error after creating a post, let's implement the post page.</p><p>Open the <em>src/views.tsx</em> file and <code>import</code> the <code>Post</code> type:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> type</span><span> { </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Post</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Then define the <code>&lt;PostPage&gt;</code> component and the <code>&lt;PostView&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>PostPageProps</span><span> extends</span><span> </span><span>ProfileProps</span><span>, </span><span>PostViewProps</span><span> {}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>PostPageProps</span><span>&gt; </span><span>=</span><span> (</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>    /&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>PostView</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span>
<span></span>
<span><span>export</span><span> interface</span><span> </span><span>PostViewProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>PostView</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>PostViewProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;</span><span><div><!--[--><!--[--><p><span>article</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>header</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>ActorLink</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>header</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    {</span><span>/* biome-ignore lint/security/noDangerouslySetInnerHtml: */</span><span>}</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>dangerouslySetInnerHTML</span></p><!--]--><!--]--></div></span><span>=</span><span>{{ </span><span><div><!--[--><!--[--><p><span>__html</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span> }} /&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>footer</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>uri</span></p><!--]--><!--]--></div></span><span>}&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>time</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>datetime</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>Date</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>toISOString</span></p><!--]--><!--]--></div></span><span>()}&gt;</span></span>
<span><span>          {</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>time</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>footer</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/</span><span><div><!--[--><!--[--><p><span>article</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Now let's load the post data from the database and render it with the <code>&lt;PostPage&gt;</code> component. Open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;PostPage&gt;</code> component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>And implement the <code>GET /users/{username}/posts/{id}</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/posts/:id"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span> &amp;</span><span> </span><span>User</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT users.*, actors.*, posts.*</span></span>
<span><span>      FROM posts</span></span>
<span><span>      JOIN actors ON actors.id = posts.actor_id</span></span>
<span><span>      JOIN users ON users.id = actors.user_id</span></span>
<span><span>      WHERE users.username = ? AND posts.id = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>), </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"id"</span><span>));</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record</span></span>
<span><span>  const</span><span> { </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT count(*) AS followers</span></span>
<span><span>      FROM follows</span></span>
<span><span>      WHERE follows.following_id = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actor_id</span></p><!--]--><!--]--></div></span><span>)</span><span>!</span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now let's open the <a href="http://localhost:8000/users/johndoe/posts/1" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe/posts/1</a> page that gave a <code>404 Not Found</code> error earlier in your web browser:</p><p><img src="https://fedify.dev/assets/post-page.B2yFZAN1.png" alt="Post page"></p><h3 id="note-object-dispatcher" tabindex="-1"><a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object dispatcher <a href="#note-object-dispatcher" aria-label="Permalink to &quot;`Note` object dispatcher&quot;">​</a></h3><p>Now, can we check if the post can be viewed from other Mastodon servers? First, use <code>fedify tunnel</code> to expose the local server to the public internet.</p><p>In that state, try entering the post's permalink <a href="https://temp-address.serveo.net/users/johndoe/posts/1" target="_blank" rel="noreferrer">https://temp-address.serveo.net/users/johndoe/posts/1</a> (replace with your temporary domain name) in the Mastodon search box:</p><p><img src="https://fedify.dev/assets/search-results-2.TfIygmaz.png" alt="Empty search results"></p><p>Unfortunately, the search results are empty. This is because we haven't exposed the post as an ActivityPub object. Let's expose the post as an ActivityPub object.</p><p>Before implementation, we need to install a necessary library. Because the <a href="https://tc39.es/proposal-temporal/docs/" target="_blank" rel="noreferrer">Temporal API</a> used by Fedify to represent time is not yet built into Node.js, we need the <em><a href="https://github.com/js-temporal/temporal-polyfill" target="_blank" rel="noreferrer">@js-temporal/polyfill</a></em> package to polyfill it:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>npm</span><span> add</span><span> @js-temporal/polyfill</span></span></code></pre></div><p>Open the <em>src/federation.ts</em> file and <code>import</code> the installed package:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span>Temporal</span><span> } </span><span>from</span><span> "@js-temporal/polyfill"</span><span>;</span></span></code></pre></div></div><p>Also <code>import</code> the <code>Post</code> type and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/PUBLIC_COLLECTION"><code>PUBLIC_COLLECTION</code></a> constant provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PUBLIC_COLLECTION</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span>
<span><span>import</span><span> type</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Key</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Post</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>User</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "./schema.ts"</span><span>;</span></span></code></pre></div></div><p>Short posts like microblog posts are usually represented as <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> in ActivityPub. We've already created an empty implementation of the object dispatcher for the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> class:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setObjectDispatcher</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  "/users/{identifier}/posts/{id}"</span><span>,</span></span>
<span><span>  (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    return</span><span> null</span><span>;</span></span>
<span><span>  },</span></span>
<span><span>);</span></span></code></pre></div></div><p>Let's modify this as follows:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>setObjectDispatcher</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  "/users/{identifier}/posts/{id}"</span><span>,</span></span>
<span><span>  (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        SELECT posts.*</span></span>
<span><span>        FROM posts</span></span>
<span><span>        JOIN actors ON actors.id = posts.actor_id</span></span>
<span><span>        JOIN users ON users.id = actors.user_id</span></span>
<span><span>        WHERE users.username = ? AND posts.id = ?</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span><span>    return</span><span> new</span><span> </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>attribution</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>to</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>PUBLIC_COLLECTION</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>cc</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getFollowersUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>mediaType</span></p><!--]--><!--]--></div></span><span>: </span><span>"text/html"</span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>published</span></p><!--]--><!--]--></div></span><span>: </span><span>Temporal</span><span>.</span><span><div><!--[--><!--[--><p><span>Instant</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>from</span></p><!--]--><!--]--></div></span><span>(</span><span>`${</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>created</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>replace</span></p><!--]--><!--]--></div></span><span>(</span><span>" "</span><span>, </span><span>"T"</span><span>)</span><span>}Z`</span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>values</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>    });</span></span>
<span><span>  },</span></span>
<span><span>);</span></span></code></pre></div></div><p>The property values filled when creating the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object have the following roles:</p><ul><li><p>Putting <code>ctx.getActorUri(values.identifier)</code> in the <code>attribution</code> property indicates that the author of this post is the actor we created.</p></li><li><p>Putting <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/PUBLIC_COLLECTION"><code>PUBLIC_COLLECTION</code></a> in the <code>to</code> property indicates that this post is a public post.</p></li><li><p>Putting <code>ctx.getFollowersUri(values.identifier)</code> in the <code>cc</code> property indicates that this post is delivered to followers, but this itself doesn't have much meaning.</p></li></ul><p>Now, let's try entering the post's permalink <a href="https://temp-address.serveo.net/users/johndoe/posts/1" target="_blank" rel="noreferrer">https://temp-address.serveo.net/users/johndoe/posts/1</a> (replace with your temporary domain name) in the Mastodon search box again:</p><p><img src="https://fedify.dev/assets/search-results-3.7hzVgwrP.png" alt="Mastodon search results showing our created post"></p><p>This time, our created post appears properly in the search results!</p><h3 id="sending-create-note-activity" tabindex="-1">Sending <code>Create(Note)</code> activity <a href="#sending-create-note-activity" aria-label="Permalink to &quot;Sending `Create(Note)` activity&quot;">​</a></h3><p>However, even if you follow our created actor from Mastodon, newly created posts won't appear in the Mastodon timeline. This is because Mastodon doesn't automatically fetch new posts; instead, the side that created the new post needs to send a <code>Create(Note)</code> activity to notify that a new post has been created.</p><p>Let's modify the code to send a <code>Create(Note)</code> activity when creating a post. Open the <em>src/app.tsx</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Create"><code>Create</code></a> class provided by Fedify:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> { </span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span> } </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Then modify the <code>POST /users/{username}/posts</code> request handler as follows:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/posts"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>fedi</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>createContext</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>raw</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Post</span><span> |</span><span> null</span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>transaction</span></p><!--]--><!--]--></div></span><span>(() </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        INSERT INTO posts (uri, actor_id, content)</span></span>
<span><span>        VALUES ('https://localhost/', ?, ?)</span></span>
<span><span>        RETURNING *</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>stringifyEntities</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>, { </span><span><div><!--[--><!--[--><p><span>escapeOnly</span></p><!--]--><!--]--></div></span><span>: </span><span>true</span><span> }));</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> null</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>    }).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span><span>"UPDATE posts SET uri = ?, url = ? WHERE id = ?"</span><span>).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    );</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>  })();</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Failed to create post"</span><span>, </span><span>500</span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>noteArgs</span></p><!--]--><!--]--></div></span><span> =</span><span> { </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>() };</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObject</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>noteArgs</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>sendActivity</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    { </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>    "followers"</span><span>,</span></span>
<span><span>    new</span><span> </span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>: </span><span>new</span><span> </span><span><div><!--[--><!--[--><p><span>URL</span></p><!--]--><!--]--></div></span><span>(</span><span>"#activity"</span><span>, </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>actors</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>attributionIds</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>tos</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>toIds</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>ccs</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>note</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>ccIds</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    }),</span></span>
<span><span>  );</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObjectUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>noteArgs</span></p><!--]--><!--]--></div></span><span>).</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p>The <code>getObject()</code> method returns the ActivityPub object created by the object dispatcher. Here, it will return a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object. We put that <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object in the <code>object</code> property when creating the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Create"><code>Create</code></a> object. We set the <code>tos</code> (plural of <code>to</code>) and <code>ccs</code> (plural of <code>cc</code>) properties of the activity the same as the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object. We set an arbitrary unique URI for the <code>id</code> of the activity.</p><div><p>TIP</p><p>The <code>id</code> property of the activity object doesn't necessarily need to be an accessible URI. It just needs to be unique.</p></div><p>The second parameter of the <code>sendActivity()</code> method is where the recipients go, and here we've specified the special option <code>"followers"</code>. When this option is specified, it uses the followers collection dispatcher we implemented earlier to send the activity to all followers.</p><p>Now that we've finished the implementation, let's check if the <code>Create(Note)</code> activity is sent properly.</p><p>With the <code>fedify tunnel</code> command exposing the local server to the public internet, go to <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> and follow <em>@johndoe@temp-address.serveo.net</em> (replace the domain name with the temporary domain name assigned to you). After making sure that the follow request has been accepted in the followers list, go to <a href="https://temp-address.serveo.net/" target="_blank" rel="noreferrer">https://temp-address.serveo.net/</a> (again, replace the domain name) in your web browser and create a new post.</p><div><p>WARNING</p><p>When testing activity transmission, you must access via a domain name accessible from the public internet, not <em>localhost</em>. This is because when determining the ID of ActivityPub objects, the URI is constructed based on the domain name of the incoming request.</p></div><p>To check if the <code>Create(Note)</code> activity was sent well, let's look at ActivityPub.Academy's <em>Activity Log</em>:</p><p><img src="https://fedify.dev/assets/activity-log-5.BGmaQ3LG.png" alt="Activity Log showing received Create(Note) activity"></p><p>It came in well. Now let's look at the timeline in ActivityPub.Academy:</p><p><img src="https://fedify.dev/assets/academy-timeline.DcazK0VL.png" alt="The created post is visible in ActivityPub.Academy's timeline"></p><p>We did it!</p><h2 id="post-list-on-profile-page" tabindex="-1">Post list on profile page <a href="#post-list-on-profile-page" aria-label="Permalink to &quot;Post list on profile page&quot;">​</a></h2><p>Currently, the profile page only shows the name, fediverse handle, and number of followers, but not the actual posts. Let's display the created posts on the profile page.</p><p>First, open the <em>src/views.tsx</em> file and add a <code>&lt;PostList&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>PostListProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>:</span><span> (</span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span>)[];</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>PostListProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    {</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>key</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>}&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>PostView</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>div</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    ))}</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then, open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;PostList&gt;</code> component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>Modify the existing <code>GET /users/{username}</code> request handler as follows:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT actors.*, posts.*</span></span>
<span><span>      FROM posts</span></span>
<span><span>      JOIN actors ON posts.actor_id = actors.id</span></span>
<span><span>      WHERE actors.user_id = ?</span></span>
<span><span>      ORDER BY posts.created DESC</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>user_id</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      // ... omitted ...</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now, let's open the <a href="http://localhost:8000/users/johndoe" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe</a> page in your web browser:</p><p><img src="https://fedify.dev/assets/profile-page-4.DDjJeIrV.png" alt="Modified profile page"></p><p>You can see that the created posts are displayed well.</p><h2 id="follow" tabindex="-1">Follow <a href="#follow" aria-label="Permalink to &quot;Follow&quot;">​</a></h2><p>Currently, our actor can receive follow requests from actors on other servers, but it can't send follow requests to actors on other servers. Since we can't follow, we also can't see posts created by other actors. So, let's add the functionality to send follow requests to actors on other servers.</p><p>Let's start with the UI. Open the <em>src/views.tsx</em> file and modify the existing <code>&lt;Home&gt;</code> component as follows:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>HomeProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      {</span><span>/* ... omitted ... */</span><span>}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/following`</span><span>}&gt;</span></span>
<span><span>      {</span><span>/* biome-ignore lint/a11y/noRedundantRoles: PicoCSS requires role=group */</span><span>}</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>role</span></p><!--]--><!--]--></div></span><span>=</span><span>"group"</span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"text"</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>"actor"</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>required</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>true</span><span>}</span></span>
<span><span>          </span><span><div><!--[--><!--[--><p><span>placeholder</span></p><!--]--><!--]--></div></span><span>=</span><span>"Enter an actor handle (e.g., @johndoe@mastodon.com) or URI (e.g., https://mastodon.com/@johndoe)"</span></span>
<span><span>        /&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>input</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span>=</span><span>"submit"</span><span> </span><span><div><!--[--><!--[--><p><span>value</span></p><!--]--><!--]--></div></span><span>=</span><span>"Follow"</span><span> /&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>fieldset</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>method</span></p><!--]--><!--]--></div></span><span>=</span><span>"post"</span><span> </span><span><div><!--[--><!--[--><p><span>action</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/posts`</span><span>}&gt;</span></span>
<span><span>      {</span><span>/* ... omitted ... */</span><span>}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>To check if the home page has been modified correctly, open the <a href="http://localhost:8000/" target="_blank" rel="noreferrer">http://localhost:8000/</a> page in your web browser:</p><p><img src="https://fedify.dev/assets/home-3.Bg8eDKPT.png" alt="Home page with follow request UI added"></p><h3 id="sending-follow-activity" tabindex="-1">Sending <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity <a href="#sending-follow-activity" aria-label="Permalink to &quot;Sending `Follow` activity&quot;">​</a></h3><p>Now that we have the follow request UI, let's write the code to actually send the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity.</p><p>Open the <em>src/app.tsx</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> class and the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/isActor"><code>isActor()</code></a> function provided by Fedify:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,        </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>,       </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>Then add a <code>POST /users/{username}/following</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/following"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>formData</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>form</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"actor"</span><span>);</span></span>
<span><span>  if</span><span> (</span><span>typeof</span><span> </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "string"</span><span>) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Invalid actor handle or URL"</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>fedi</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>createContext</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>raw</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>undefined</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>lookupObject</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>trim</span></p><!--]--><!--]--></div></span><span>());</span></span>
<span><span>  if</span><span> (</span><span>!</span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>)) {</span></span>
<span><span>    return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Invalid actor handle or URL"</span><span>, </span><span>400</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>  await</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>sendActivity</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    { </span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    new</span><span> </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>({</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActorUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>to</span></p><!--]--><!--]--></div></span><span>: </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>    }),</span></span>
<span><span>  );</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>text</span></p><!--]--><!--]--></div></span><span>(</span><span>"Successfully sent a follow request"</span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p><a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Context.lookupObject"><code>Context.lookupObject()</code></a> method looks up ActivityPub objects, including actors. It takes the unique URI of an ActivityPub object or a fediverse handle as input and returns the looked-up ActivityPub object.</p><p>The <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/isActor"><code>isActor()</code></a> function checks if the given ActivityPub object is an actor.</p><p>In this code, we're using the <code>sendActivity()</code> method to send a <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity to the looked-up actor. However, we're not adding any records to the <code>follows</code> table yet. This is because we should add the record after receiving an <code>Accept(Follow)</code> activity from the other party.</p><h3 id="testing-5" tabindex="-1">Testing <a href="#testing-5" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>We need to check if the implemented follow request functionality is working properly. This time too, we need to send an activity, so use the <code>fedify tunnel</code> command to expose the local server to the public internet, then enter the <a href="https://temp-address.serveo.net/" target="_blank" rel="noreferrer">https://temp-address.serveo.net/</a> page (replace the domain name) in your web browser:</p><p><img src="https://fedify.dev/assets/home-3.Bg8eDKPT.png" alt="Home page with follow request UI"></p><p>You need to enter the fediverse handle of the actor you want to follow in the follow request input field. Here, for easy debugging, let's enter an actor from <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a>. By the way, you can see the handle of the temporary account logged in to ActivityPub.Academy by clicking on the temporary account name to go to the profile page and looking just below the name:</p><p><img src="https://fedify.dev/assets/academy-profile.BWyi1vIy.png" alt="Fediverse handle visible on the account profile page in ActivityPub.Academy"></p><p>Enter the ActivityPub.Academy actor's handle as follows, then press the <em>Follow</em> button to send a follow request:</p><p><img src="https://fedify.dev/assets/home-5.nO4VlUKm.png" alt="Sending a follow request to the ActivityPub.Academy actor"></p><p>And check ActivityPub.Academy's <em>Activity Log</em>:</p><p><img src="https://fedify.dev/assets/activity-log-6.BMlsSF-r.png" alt="ActivityPub.Academy's Activity Log"></p><p>The <em>Activity Log</em> shows the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity we sent and the <code>Accept(Follow)</code> activity sent in response from ActivityPub.Academy.</p><p>If you go to the notifications page in ActivityPub.Academy, you can see that the follow request has actually arrived:</p><p><img src="https://fedify.dev/assets/academy-notifications.BU98-1EO.png" alt="Arrived follow request shown on ActivityPub.Academy's notifications page"></p><h3 id="receiving-accept-follow-activity" tabindex="-1">Receiving <code>Accept(Follow)</code> activity <a href="#receiving-accept-follow-activity" aria-label="Permalink to &quot;Receiving `Accept(Follow)` activity&quot;">​</a></h3><p>However, we're not taking any action on the received <code>Accept(Follow)</code> activity yet, so we need to implement this part.</p><p>Open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/isActor"><code>isActor()</code></a> function and <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Actor"><code>Actor</code></a> type provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PUBLIC_COLLECTION</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>,                </span></span>
<span><span>  type</span><span> </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span> </span><span>as</span><span> </span><span><div><!--[--><!--[--><p><span>APActor</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>We've given the alias <code>APActor</code> to the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Actor"><code>Actor</code></a> type because the <code>Actor</code> type name is already used in this source file.</p><p>Before implementation, let's refactor the code that adds actor information to the <code>actors</code> table when first encountered to make it reusable. Add the following function:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>async</span><span> function</span><span> </span><span><div><!--[--><!--[--><p><span>persistActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>APActor</span></p><!--]--><!--]--></div></span><span>)</span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>Promise</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>Actor</span><span> |</span><span> null</span><span>&gt; {</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span><span>"Actor is missing required fields: {actor}"</span><span>, { </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> });</span></span>
<span><span>    return</span><span> null</span><span>;</span></span>
<span><span>  }</span></span>
<span><span>  return</span><span> (</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>        `</span></span>
<span><span>        -- Add a new actor record or update if it already exists</span></span>
<span><span>        INSERT INTO actors (uri, handle, name, inbox_url, shared_inbox_url, url)</span></span>
<span><span>        VALUES (?, ?, ?, ?, ?, ?)</span></span>
<span><span>        ON CONFLICT (uri) DO UPDATE SET</span></span>
<span><span>          handle = excluded.handle,</span></span>
<span><span>          name = excluded.name,</span></span>
<span><span>          inbox_url = excluded.inbox_url,</span></span>
<span><span>          shared_inbox_url = excluded.shared_inbox_url,</span></span>
<span><span>          url = excluded.url</span></span>
<span><span>        WHERE</span></span>
<span><span>          actors.uri = excluded.uri</span></span>
<span><span>        RETURNING *</span></span>
<span><span>        `</span><span>,</span></span>
<span><span>      )</span></span>
<span><span>      .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        await</span><span> </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>(),</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>inboxId</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>endpoints</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>sharedInbox</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>      ) </span><span>??</span><span> null</span></span>
<span><span>  );</span></span>
<span><span>}</span></span></code></pre></div></div><p>The defined <code>persistActor()</code> function adds a record corresponding to the actor object passed as an argument to the <code>actors</code> table. If there's already a corresponding record in the table, it updates the record.</p><p>Change the code doing the same role in the <code>on(Follow, ...)</code> part of the inbox to use the <code>persistActor()</code> function:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>federation</span></p><!--]--><!--]--></div></span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>setInboxListeners</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/{identifier}/inbox"</span><span>, </span><span>"/inbox"</span><span>)</span></span>
<span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    // ... omitted ...</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) {</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>logger</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>debug</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>        "Failed to find the actor to follow in the database: {object}"</span><span>,</span></span>
<span><span>        { </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> },</span></span>
<span><span>      );</span></span>
<span><span>    }</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>followerId</span></p><!--]--><!--]--></div></span><span> =</span><span> (</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>persistActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>))?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;  </span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      "INSERT INTO follows (following_id, follower_id) VALUES (?, ?)"</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>followerId</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    // ... omitted ...</span></span>
<span><span>  })</span></span></code></pre></div></div><p>Now that we've finished refactoring, let's implement the behavior when receiving an <code>Accept(Follow)</code> activity in the inbox:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObject</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span>(</span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span> </span><span>instanceof</span><span> </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>)) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>accept</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getActor</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>)) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>follow</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>parseUri</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>follower</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span> ||</span><span> </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>type</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> "actor"</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> =</span><span> (</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>persistActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>))?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      `</span></span>
<span><span>      INSERT INTO follows (following_id, follower_id)</span></span>
<span><span>      VALUES (</span></span>
<span><span>        ?,</span></span>
<span><span>        (</span></span>
<span><span>          SELECT actors.id</span></span>
<span><span>          FROM actors</span></span>
<span><span>          JOIN users ON actors.user_id = users.id</span></span>
<span><span>          WHERE users.username = ?</span></span>
<span><span>        )</span></span>
<span><span>      )</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>followingId</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>parsed</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>identifier</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  });</span></span></code></pre></div></div><p>Although there's a lot of validity checking code, in summary, it gets the actor who sent the follow request (<code>follower</code>) and the actor who received the follow request (<code>following</code>) from the contents of the <code>Accept(Follow)</code> activity and adds a record to the <code>follows</code> table.</p><h3 id="testing-6" tabindex="-1">Testing <a href="#testing-6" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Now we need to check if it's working well, but there's a problem. When we sent a follow request earlier, <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> already accepted the follow request and sent an <code>Accept(Follow)</code> activity, so even if we send another follow request, it will be ignored. Therefore, we need to log out of ActivityPub.Academy and create a new temporary account to test.</p><p>If you've created a new temporary account in ActivityPub.Academy, with the local server exposed to the public internet using the <code>fedify tunnel</code> command, go to the <a href="https://temp-address.serveo.net/" target="_blank" rel="noreferrer">https://temp-address.serveo.net/</a> page (replace the domain name) in your web browser and send a follow request to the new temporary account on ActivityPub.Academy.</p><p>If the follow request was sent successfully, you should see the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Follow"><code>Follow</code></a> activity arriving and the <code>Accept(Follow)</code> activity being sent in response in the <em>Activity Log</em>, just like before:</p><p><img src="https://fedify.dev/assets/activity-log-7.C0CTOcUr.png" alt="Activity Log showing received Follow activity and sent Accept(Follow) activity"></p><p>We haven't implemented the following list yet, so let's directly check if a record has been properly added to the <code>follows</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM follows WHERE follower_id = 1;"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If successful, you should see a result like this (the value in the <code>following_id</code> column might be slightly different):</p><table tabindex="0"><thead><tr><th><code>following_id</code></th><th><code>follower_id</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>3</code></td><td><code>1</code></td><td><code>2024-09-02 14:11:17</code></td></tr></tbody></table><h2 id="following-list" tabindex="-1">Following list <a href="#following-list" aria-label="Permalink to &quot;Following list&quot;">​</a></h2><p>Let's create a page that displays the list of actors our actor is following.</p><p>First, open the <em>src/views.tsx</em> file and add a <code>&lt;FollowingList&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>FollowingListProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>Actor</span><span>[];</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>FollowingList</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>FollowingListProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>h2</span></p><!--]--><!--]--></div></span><span>&gt;Following&lt;/</span><span><div><!--[--><!--[--><p><span>h2</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>ul</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      {</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>map</span></p><!--]--><!--]--></div></span><span>((</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>li</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>key</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>}&gt;</span></span>
<span><span>          &lt;</span><span><div><!--[--><!--[--><p><span>ActorLink</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>li</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      ))}</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>ul</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then, open the <em>src/app.tsx</em> file and <code>import</code> the <code>&lt;FollowingList&gt;</code> component we just defined:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>FollowerList</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>FollowingList</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>SetupForm</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>} </span><span>from</span><span> "./views.tsx"</span><span>;</span></span></code></pre></div></div><p>And add a handler for the <code>GET /users/{username}/following</code> request:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/following"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT following.*</span></span>
<span><span>      FROM follows</span></span>
<span><span>      JOIN actors AS followers ON follows.follower_id = followers.id</span></span>
<span><span>      JOIN actors AS following ON follows.following_id = following.id</span></span>
<span><span>      JOIN users ON users.id = followers.user_id</span></span>
<span><span>      WHERE users.username = ?</span></span>
<span><span>      ORDER BY follows.created DESC</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>req</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>param</span></p><!--]--><!--]--></div></span><span>(</span><span>"username"</span><span>));</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>FollowingList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>To check if it's been implemented correctly, open the <a href="http://localhost:8000/users/johndoe/following" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe/following</a> page in your web browser:</p><p><img src="https://fedify.dev/assets/following-list.Du0M00k7.png" alt="Following list"></p><h2 id="following-count" tabindex="-1">Following count <a href="#following-count" aria-label="Permalink to &quot;Following count&quot;">​</a></h2><p>Just as we're showing the number of followers, we should also display the number of accounts the user is following.</p><p>Open the <em>src/views.tsx</em> file and modify the <code>&lt;Profile&gt;</code> component as follows:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>ProfileProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>:</span><span> string</span><span>;</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>ProfileProps</span><span>&gt; </span><span>=</span><span> ({</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>}) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}`</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>h1</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>span</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>style</span></p><!--]--><!--]--></div></span><span>=</span><span>"user-select: all;"</span><span>&gt;{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}&lt;/</span><span><div><!--[--><!--[--><p><span>span</span></p><!--]--><!--]--></div></span><span>&gt; </span><span>&amp;middot;</span><span>{</span><span>" "</span><span>}</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/following`</span><span>}&gt;{</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>} following&lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;{</span><span>" "</span><span>}</span></span>
<span><span>        &amp;middot;</span><span>{</span><span>" "</span><span>}</span></span>
<span><span>        &lt;</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span>`/users/${</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}/followers`</span><span>}&gt;</span></span>
<span><span>          {</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> </span><span>===</span><span> 1</span><span> ?</span><span> "1 follower"</span><span> :</span><span> `${</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>} followers`</span><span>}</span></span>
<span><span>        &lt;/</span><span><div><!--[--><!--[--><p><span>a</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;/</span><span><div><!--[--><!--[--><p><span>p</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>hgroup</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Also modify the <code>&lt;PostPage&gt;</code> component as follows:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>PostPageProps</span><span> extends</span><span> </span><span>ProfileProps</span><span>, </span><span>PostViewProps</span><span> {}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>PostPageProps</span><span>&gt; </span><span>=</span><span> (</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>    /&gt;</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>PostView</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>props</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Now we need to write code to actually query the database and get the number of following accounts.</p><p>Open the <em>src/app.tsx</em> file and modify the <code>GET /users/{username}</code> request handler as follows:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username"</span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record</span></span>
<span><span>  const</span><span> { </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT count(*) AS following</span></span>
<span><span>      FROM follows</span></span>
<span><span>      JOIN actors ON follows.follower_id = actors.id</span></span>
<span><span>      WHERE actors.user_id = ?</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>)</span><span>!</span><span>;</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Profile</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      /&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Also modify the <code>GET /users/{username}/posts/{id}</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/users/:username/posts/:id"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>notFound</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span></span>
<span><span>  // biome-ignore lint/style/noNonNullAssertion: Always returns a single record</span></span>
<span><span>  const</span><span> { </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span> } </span><span>=</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], { </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span>; </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>:</span><span> number</span><span> }&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT sum(follows.follower_id = ?) AS following,</span></span>
<span><span>             sum(follows.following_id = ?) AS followers</span></span>
<span><span>      FROM follows</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actor_id</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actor_id</span></p><!--]--><!--]--></div></span><span>)</span><span>!</span><span>;</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>PostPage</span></p><!--]--><!--]--></div></span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>name</span></p><!--]--><!--]--></div></span><span> </span><span>??</span><span> </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>username</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>handle</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>following</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>followers</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>        </span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>post</span></p><!--]--><!--]--></div></span><span>}</span></span>
<span><span>      /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>If you've made all these modifications, open the <a href="http://localhost:8000/users/johndoe" target="_blank" rel="noreferrer">http://localhost:8000/users/johndoe</a> page in your web browser:</p><p><img src="https://fedify.dev/assets/profile-page-5.Bs7wI18J.png" alt="Profile page"></p><h2 id="timeline" tabindex="-1">Timeline <a href="#timeline" aria-label="Permalink to &quot;Timeline&quot;">​</a></h2><p>We've implemented many things, but posts written on other Mastodon servers are still not visible. As you might have guessed from the process so far, just as we sent a <code>Create(Note)</code> activity when we wrote a post, we need to receive a <code>Create(Note)</code> activity from other servers to see posts written on other Mastodon servers.</p><p>To see exactly what happens when a post is written on another Mastodon server, let's create a new post on <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a>:</p><p><img src="https://fedify.dev/assets/academy-compose.DJU3L4C1.png" alt="Creating a new post on ActivityPub.Academy"></p><p>After pressing the <em>Publish!</em> button to save the post, go to the <em>Activity Log</em> page and check if the <code>Create(Note)</code> activity was indeed sent:</p><p><img src="https://fedify.dev/assets/activity-log-8.8tG98GVz.png" alt="Activity Log showing sent Create(Note) activity"></p><p>Now we need to write code to receive this sent <code>Create(Note)</code> activity.</p><h3 id="receiving-create-note-activity" tabindex="-1">Receiving <code>Create(Note)</code> activity <a href="#receiving-create-note-activity" aria-label="Permalink to &quot;Receiving `Create(Note)` activity&quot;">​</a></h3><p>Open the <em>src/federation.ts</em> file and <code>import</code> the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Create"><code>Create</code></a> class provided by Fedify:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>import</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Accept</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>,  </span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Endpoints</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Follow</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>PUBLIC_COLLECTION</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Person</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>Undo</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>createFederation</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>exportJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>generateCryptoKeyPair</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>getActorHandle</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>importJwk</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span><div><!--[--><!--[--><p><span>Actor</span></p><!--]--><!--]--></div></span><span> </span><span>as</span><span> </span><span><div><!--[--><!--[--><p><span>APActor</span></p><!--]--><!--]--></div></span><span>,</span></span>
<span><span>  type</span><span> </span><span>Recipient</span><span>,</span></span>
<span><span>} </span><span>from</span><span> "@fedify/fedify"</span><span>;</span></span></code></pre></div></div><p>And add <code>on(Create, ...)</code> to the inbox code:</p><div><p><span data-title="src/federation.ts">src/federation.ts</span></p><div><p><span>typescript</span></p><pre tabindex="0"><code><span><span>  .</span><span><div><!--[--><!--[--><p><span>on</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>Create</span></p><!--]--><!--]--></div></span><span>, </span><span>async</span><span> (</span><span><div><!--[--><!--[--><p><span>ctx</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>create</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>create</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getObject</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span> </span><span>instanceof</span><span> </span><span><div><!--[--><!--[--><p><span>Note</span></p><!--]--><!--]--></div></span><span>)) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>create</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>author</span></p><!--]--><!--]--></div></span><span> =</span><span> await</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>getAttribution</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    if</span><span> (</span><span>!</span><span><div><!--[--><!--[--><p><span>isActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>author</span></p><!--]--><!--]--></div></span><span>) </span><span>||</span><span> </span><span><div><!--[--><!--[--><p><span>author</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span> </span><span>!==</span><span> </span><span><div><!--[--><!--[--><p><span>actor</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span> =</span><span> (</span><span>await</span><span> </span><span><div><!--[--><!--[--><p><span>persistActor</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>author</span></p><!--]--><!--]--></div></span><span>))?.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    if</span><span> (</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span>;</span></span>
<span><span>    const</span><span> </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>toString</span></p><!--]--><!--]--></div></span><span>();</span></span>
<span><span>    </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>      "INSERT INTO posts (uri, actor_id, content, url) VALUES (?, ?, ?, ?)"</span><span>,</span></span>
<span><span>    ).</span><span><div><!--[--><!--[--><p><span>run</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>actorId</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>content</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>object</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>url</span></p><!--]--><!--]--></div></span><span>?.</span><span><div><!--[--><!--[--><p><span>href</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  });</span></span></code></pre></div></div><p>We use the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Object.prototype.getAttribution"><code>getAttribution()</code></a> method to get the author, then add the actor to the <code>actors</code> table if it's not already there using the <code>persistActor()</code> function. Then we add a new record to the <code>posts</code> table.</p><p>To check if the code is working well, let's go back to <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> and create a post. Open the <em>Activity Log</em> to check if the <code>Create(Note)</code> activity was sent, then use the following command to check if a record was indeed added to the <code>posts</code> table:</p><div><p><span>sh</span></p><pre tabindex="0"><code><span><span>echo</span><span> "SELECT * FROM posts WHERE actor_id != 1"</span><span> |</span><span> sqlite3</span><span> -table</span><span> microblog.sqlite3</span></span></code></pre></div><p>If a record was indeed added, you should see a result like this:</p><table tabindex="0"><thead><tr><th><code>id</code></th><th><code>uri</code></th><th><code>actor_id</code></th><th><code>content</code></th><th><code>url</code></th><th><code>created</code></th></tr></thead><tbody><tr><td><code>3</code></td><td><code>https://activitypub.academy/users/algusia_draneoll/statuses/113068684551948316</code></td><td><code>3</code></td><td><code>&lt;p&gt;Would it send a Create(Note) activity?&lt;/p&gt;</code></td><td><code>https://activitypub.academy/@algusia_draneoll/113068684551948316</code></td><td><code>2024-09-02 15:33:32</code></td></tr></tbody></table><h3 id="displaying-remote-posts" tabindex="-1">Displaying remote posts <a href="#displaying-remote-posts" aria-label="Permalink to &quot;Displaying remote posts&quot;">​</a></h3><p>Now that we've added remote posts as records in the <code>posts</code> table, all that's left is to display these records well. This is often called a <q>timeline</q> feature.</p><p>First, open the <em>src/views.tsx</em> file and modify the <code>&lt;Home&gt;</code> component:</p><div><p><span data-title="src/views.tsx">src/views.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span>export</span><span> interface</span><span> </span><span>HomeProps</span><span> extends</span><span> </span><span>PostListProps</span><span> {</span></span>
<span><span>  </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span>User</span><span> &amp;</span><span> </span><span>Actor</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>export</span><span> const</span><span> </span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span>:</span><span> </span><span><div><!--[--><!--[--><p><span>FC</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>HomeProps</span><span>&gt; </span><span>=</span><span> ({ </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span> }) </span><span>=&gt;</span><span> (</span></span>
<span><span>  &lt;&gt;</span></span>
<span><span>    {</span><span>/* ... omitted ... */</span><span>}</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>PostList</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>  &lt;/&gt;</span></span>
<span><span>);</span></span></code></pre></div></div><p>Then, open the <em>src/app.tsx</em> file and modify the <code>GET /</code> request handler:</p><div><p><span data-title="src/app.tsx">src/app.tsx</span></p><div><p><span>tsx</span></p><pre tabindex="0"><code><span><span><div><!--[--><!--[--><p><span>app</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>get</span></p><!--]--><!--]--></div></span><span>(</span><span>"/"</span><span>, (</span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  // ... omitted ...</span></span>
<span><span>  if</span><span> (</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span> </span><span>==</span><span> null</span><span>) </span><span>return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>redirect</span></p><!--]--><!--]--></div></span><span>(</span><span>"/setup"</span><span>);</span></span>
<span></span>
<span><span>  const</span><span> </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span> =</span><span> </span><span><div><!--[--><!--[--><p><span>db</span></p><!--]--><!--]--></div></span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>prepare</span></p><!--]--><!--]--></div></span><span>&lt;</span><span>unknown</span><span>[], </span><span>Post</span><span> &amp;</span><span> </span><span>Actor</span><span>&gt;(</span></span>
<span><span>      `</span></span>
<span><span>      SELECT actors.*, posts.*</span></span>
<span><span>      FROM posts</span></span>
<span><span>      JOIN actors ON posts.actor_id = actors.id</span></span>
<span><span>      WHERE posts.actor_id = ? OR posts.actor_id IN (</span></span>
<span><span>        SELECT following_id</span></span>
<span><span>        FROM follows</span></span>
<span><span>        WHERE follower_id = ?</span></span>
<span><span>      )</span></span>
<span><span>      ORDER BY posts.created DESC</span></span>
<span><span>      `</span><span>,</span></span>
<span><span>    )</span></span>
<span><span>    .</span><span><div><!--[--><!--[--><p><span>all</span></p><!--]--><!--]--></div></span><span>(</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>, </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>id</span></p><!--]--><!--]--></div></span><span>);</span></span>
<span><span>  return</span><span> </span><span><div><!--[--><!--[--><p><span>c</span></p><!--]--><!--]--></div></span><span>.</span><span><div><!--[--><!--[--><p><span>html</span></p><!--]--><!--]--></div></span><span>(</span></span>
<span><span>    &lt;</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;</span></span>
<span><span>      &lt;</span><span><div><!--[--><!--[--><p><span>Home</span></p><!--]--><!--]--></div></span><span> </span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>user</span></p><!--]--><!--]--></div></span><span>} </span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>=</span><span>{</span><span><div><!--[--><!--[--><p><span>posts</span></p><!--]--><!--]--></div></span><span>} /&gt;</span></span>
<span><span>    &lt;/</span><span><div><!--[--><!--[--><p><span>Layout</span></p><!--]--><!--]--></div></span><span>&gt;,</span></span>
<span><span>  );</span></span>
<span><span>});</span></span></code></pre></div></div><p>Now that we've implemented everything, let's open the <a href="http://localhost:8000/" target="_blank" rel="noreferrer">http://localhost:8000/</a> page in your web browser to admire the timeline:</p><p><img src="https://fedify.dev/assets/home-6.Chj_T8HC.png" alt="Timeline visible on the home page"></p><p>As you can see above, posts created remotely and posts created locally are displayed in chronological order. How do you like it?</p><p>This is all we're going to implement in this tutorial. Based on this, you should be able to complete your own microblog.</p><h2 id="areas-for-improvement" tabindex="-1">Areas for improvement <a href="#areas-for-improvement" aria-label="Permalink to &quot;Areas for improvement&quot;">​</a></h2><p>Unfortunately, the microblog you've completed through this tutorial is not yet suitable for real use. In particular, there are many vulnerabilities in terms of security, so it could be dangerous to actually use it.</p><p>For those who want to further develop the microblog you've created, you might want to try solving the following challenges:</p><ul><li><p>Currently, there's no authentication, so anyone can post if they know the URL. How about adding a login process to prevent this?</p></li><li><p>The current implementation directly outputs the HTML contained in the <a href="https://jsr.io/@fedify/fedify@1.6.0-dev.757+7fa54fbc/doc/~/Note"><code>Note</code></a> object received via ActivityPub. Therefore, a malicious ActivityPub server could send a <code>Create(Note)</code> activity containing HTML like <code>&lt;script&gt;while (true) alert('Gotcha!');&lt;/script&gt;</code>. This is called an <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noreferrer">XSS</a> vulnerability. How can we prevent such vulnerabilities?</p></li><li><p>Let's try changing the name of the actor we created by executing the following SQL in the SQLite database:</p><div><p><span>sql</span></p><pre tabindex="0"><code><span><span>UPDATE</span><span> actors </span><span>SET</span><span> name</span><span> =</span><span> 'Renamed'</span><span> WHERE</span><span> id </span><span>=</span><span> 1</span><span>;</span></span></code></pre></div><p>When we change the actor's name like this, will the changed name be applied on other Mastodon servers? If not, what kind of activity should we send to apply the change?</p></li><li><p>Let's try adding a profile picture to the actor. If you're wondering how to add a profile picture, try using the <code>fedify lookup</code> command to look up an actor that already has a profile picture.</p></li><li><p>Try creating a post with an image attached on another Mastodon server. In the timeline we created, the image attached to the post isn't visible. How can we display the attached image?</p></li><li><p>Let's make it possible to mention other actors within a post. What should we do to send a notification to the mentioned party? Use the <em>Activity Log</em> of <a href="https://activitypub.academy/" target="_blank" rel="noreferrer">ActivityPub.Academy</a> to find a way.</p></li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mark Zuckerberg Says Social Media Is Over (244 pts)]]></title>
            <link>https://www.newyorker.com/culture/infinite-scroll/mark-zuckerberg-says-social-media-is-over</link>
            <guid>43780377</guid>
            <pubDate>Thu, 24 Apr 2025 08:19:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newyorker.com/culture/infinite-scroll/mark-zuckerberg-says-social-media-is-over">https://www.newyorker.com/culture/infinite-scroll/mark-zuckerberg-says-social-media-is-over</a>, See on <a href="https://news.ycombinator.com/item?id=43780377">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-journey-hook="client-content" data-testid="ArticlePageChunks"><figure></figure><p>What, exactly, does a social network do? Is it a website that connects people with one another online, a digital gathering place where we can consume content posted by our friends? That’s certainly what it was in its heyday, in the two-thousands. Facebook was where you might find out that your friend was dating someone new, or that someone had thrown a party without inviting you. In the course of the past decade, though, social media has come to resemble something more like regular media. It’s where we find promotional videos created by celebrities, pundits shouting responses to the news, aggregated clips from pop culture, a rising tide of A.I.-generated slop, and other content designed to be broadcast to the largest number of viewers possible. The people we follow and the messages they post increasingly feel like needles in a digital haystack. Social media has become less social.</p><p>Facebook’s founder, Mark Zuckerberg, admitted as much during more than ten hours of testimony, over three days last week, in the opening phase of the Federal Trade Commission’s antitrust trial against Facebook’s parent company, Meta. The company, Zuckerberg said, has lately been involved in “the general idea of entertainment and learning about the world and discovering what’s going on.” This under-recognized shift away from interpersonal communication has been measured by the company itself. During the defense’s opening statement, Meta displayed a chart showing that the “percent of time spent viewing content posted by ‘friends’&nbsp;” has declined in the past two years, from twenty-two per cent to seventeen per cent on Facebook, and from eleven per cent to seven per cent on Instagram.</p><p>The F.T.C. is arguing that Meta maintained an illegal monopoly in the “personal social networking services” industry, in part by buying up Facebook’s competitors, such as Instagram, which the company acquired in 2012, and the messaging platform WhatsApp, which it acquired in 2014. But the F.T.C.’s definition of the social-media industry is hazy, and the antitrust case was already dismissed once, in 2021, partly because the “personal social networking services” market was too loosely defined. Meta’s counter-argument is, in a sense, that social media per se doesn’t exist now in the way that it did in the twenty-tens, and that what the company’s platforms are now known for—the digital consumption of all kinds of content—has become so widespread that no single company or platform can be said to monopolize it. In one of its slides at trial, Meta exhibited a graphic of a boxing ring showing the logos of Instagram, Facebook, and the various companies that Meta argues are competitors, including TikTok, YouTube, and Apple’s iMessage, though the F.T.C. doesn’t define any of those three as such. The company also used smartphone screenshots from the various apps to demonstrate how they’ve gravitated toward common formats: short video clips look similar on both Instagram and TikTok; messages look essentially the same in Instagram DMs as on Apple’s iMessage. Even as such similarities serve as helpful evidence for Meta’s defense, they also demonstrate how stultifying the entire online ecosystem has become. While in 2012 Facebook may have seemed singular and inescapable, now it looks like part of a crowded marketplace of apps competing to serve the same purpose.</p><p>The F.T.C.’s case, which originated during Donald Trump’s first term, entails reëvaluating business deals that it approved more than a decade ago, when the industry looked dramatically different. This makes the commission’s case less than airtight. Benedict Evans, an influential technology analyst, called the F.T.C.’s market definition of social networks “gerrymandering.” He told me, “By the F.T.C.’s definition, TikTok doesn’t compete with Facebook at all. Does that mean it would be O.K. for Facebook to buy TikTok?” Antitrust lawyers must prove that allegedly monopolistic practices cause consumer harm. In another antitrust case currently unfolding against Google, a court found that the company maintained a monopoly over parts of the online-advertising market by integrating its various automated advertising technologies, illegally privileging itself and harming its publishing customers by “reducing their revenue.” In the case of Meta, though, there is no price differential to point to—Meta’s platforms all allow users to access them for free—so the question of harm is less clear-cut.</p><p>The F.T.C. is arguing, instead, that Meta’s purported monopoly has led to a lack of innovation and to reduced consumer choice. But that, too, is difficult to prove in the case of Meta’s WhatsApp and Instagram acquisitions, because both sales occurred early in those companies’ life spans. In 2014, when WhatsApp was acquired, it had around half a billion users; now it has more than two billion. As Evans put it, the F.T.C. is arguing that “if Meta hadn’t bought WhatsApp, it would have become this voracious competitor.” He continued, “What we all actually know from following the history is that the founders of WhatsApp didn’t want to do any of the things that Meta did to fuel its runaway expansion. One of WhatsApp’s founders once compared the service’s goals to those of Craigslist, Zuckerberg recalled during his testimony. Meta, by contrast, aggressively pursued growth, loading WhatsApp with features such as social groups and video calls. The F.T.C. notes that market competition can result in “improved features, functionalities, integrity measures, and user experiences”; it’s hard to mount a persuasive argument that an independent WhatsApp would necessarily have provided more of those things than a Zuckerberg-owned one. (Many social networks fail; Path and Google+ were two other threats that Zuckerberg perceived, but neither grew into a viable competitor. He did at one point attempt to buy Snapchat, and though that company survived, it failed to become a major rival.)</p><p>One of the most surprising moments in Zuckerberg’s testimony came when the F.T.C. presented him with a memo that he sent to company executives, in 2018, suggesting that it might be better to spin Instagram into its own entity by choice. Zuckerberg wrote that Instagram was potentially undermining Facebook’s success, and that businesses that are independent often perform better than they would within a parent conglomerate. “Over time we may face antitrust regulation requiring us to spin off our other apps anyway,” he noted, with some prescience. Seven years ago, before the advent of TikTok and the diversification of content across digital platforms, that kind of split might have resulted in more varied products for users, more quickly—or it might not have. Either way, the social-media landscape today is arguably in the midst of a dramatic overhaul. TikTok may ultimately be banned; generative A.I. may supplant the existing model of an open, user-generated internet. On April 15th, the <em>Verge</em> broke the news that OpenAI is developing a social network of its own, to compete with the likes of Instagram and X. The F.T.C. may be chasing an old problem just as newer, bigger ones appear on the horizon.</p><p>This week, the European Union fined Apple and Meta for anticompetitive practices, but the penalties—five hundred million euros and two hundred million euros, respectively—are relatively modest. If the U.S. case prevails, the F.T.C. will have to decide whether to force a wholesale breakup of Meta or seek less dramatic “remedies.” One factor in this calculus might be the wishes of President Trump. In recent months, Zuckerberg has visited the White House repeatedly, and he’s ingratiated himself to the Administration with moves, at Meta, against D.E.I. and <a href="https://www.newyorker.com/news/the-weekend-essay/whats-a-fact-anyway">fact-checking</a>. So far, despite a growing closeness with Silicon Valley, Trump has nevertheless continued to back the suit against Meta. As in the Administration’s ongoing trade war, Trump appreciates a pronounced threat as a tool to force a deal. Bytedance, the owner of TikTok, has all but capitulated to a mandated sale of a majority of the company. With regard to Trump, at least, Zuckerberg might be expected to capitulate one way or another.&nbsp;♦</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["Careless People" the book that Meta tried to suppress (644 pts)]]></title>
            <link>https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf</link>
            <guid>43780363</guid>
            <pubDate>Thu, 24 Apr 2025 08:17:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf">https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf</a>, See on <a href="https://news.ycombinator.com/item?id=43780363">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-10777">
	<!-- .entry-header -->

	
	
	<div>
		<p><!--
Tags:
books, reviews, sarah wynne-williams, facebook, meta, streisand effect, joel kaplan, mark zuckerberg, gift guide, sheryl sandberg, myanmar, genocide, big tech, antitrust, trustbusting, monopolies, enshittification, ndas, gag orders, sexual abuse

Summary:
Sarah Wynn-Williams's 'Careless People'; Hey look at this; Upcoming appearances; Recent appearances; Latest books; Upcoming books

URL:
https://pluralistic.net/2025/04/23/zuckerstreisand/

Title:
Pluralistic: Sarah Wynn-Williams's 'Careless People' (23 Apr 2025) zuckerstreisand

Bullet:
🧃

Separator:
⠂⠄⠄⠂⠁⠁⠂⠄⠄⠂⠁⠁⠂⠄⠄⠂ ⠂⠄⠄⠂⠂⠄⠄⠂⠁⠁⠂⠄⠄⠂⠁⠁⠂⠄⠄⠂ ⠂⠄⠄⠂⠂⠄⠄⠂⠁⠁⠂⠄

Top Sources:
None

--><br>
<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/"><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/craphound.com/images/23Apr2025.jpg?w=840&amp;ssl=1"></a></p>
<h2>Today's links</h2>
<ul>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf">Sarah Wynn-Williams's 'Careless People'</a>: "Too big to care."
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#linkdump">Hey look at this</a>: Delights to delectate.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#retro">Object permanence</a>: 2005, 2010, 2015, 2020, 2024
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#upcoming">Upcoming appearances</a>: Where to find me.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#recent">Recent appearances</a>: Where I've been.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#latest">Latest books</a>: You keep readin' em, I'll keep writin' 'em.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#upcoming-books">Upcoming books</a>: Like I said, I'll keep writin' 'em.
</li>
<li><a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#bragsheet">Colophon</a>: All the rest.
</li>
</ul>

<hr>
<p><a name="zdgaf"></a><br>
<img data-recalc-dims="1" decoding="async" alt="The Crown Books cover for Sarah Wynn-Williams's 'Careless People.'" src="https://i0.wp.com/craphound.com/images/carelesspeople.jpg?w=840&amp;ssl=1"></p>
<h2>Sarah Wynn-Williams's 'Careless People' (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#zdgaf">permalink</a>)</h2>
<p>I never would have read <em>Careless People</em>, Sarah Wynn-Williams's tell-all memoir about her years running global policy for Facebook, but then Meta's lawyer tried to get the book suppressed and secured an injunction to prevent her from promoting it:</p>
<p><a href="https://www.npr.org/2025/03/14/nx-s1-5318854/former-meta-executive-barred-from-discussing-criticism-of-the-company">https://www.npr.org/2025/03/14/nx-s1-5318854/former-meta-executive-barred-from-discussing-criticism-of-the-company</a></p>
<p>So I've got something to thank Meta's lawyers for, because it's a great book! Not only is Wynn-Williams a skilled and lively writer who spills some of Facebook's most shameful secrets, but she's also a kick-ass narrator (I listened to the audiobook, which she voices):</p>
<p><a href="https://libro.fm/audiobooks/9781250403155-careless-people">https://libro.fm/audiobooks/9781250403155-careless-people</a></p>
<p>I went into <em>Careless People</em> with strong expectations about the kind of disgusting behavior it would chronicle. I have several friends who took senior jobs at Facebook, thinking they could make a difference (three of them actually appear in Wynn-Williams's memoir), and I've got a good sense of what a nightmare it is for a company.</p>
<p>But Wynn-Williams was a lot closer to three of the key personalities in Facebook's upper echelon than anyone in my orbit: Mark Zuckerberg, Sheryl Sandberg, and Joel Kaplan, who was elevated to VP of Global Policy after the Trump II election. I already harbor an atavistic loathing of these three based on their public statements and conduct, but the events Wynn-Williams reveals from their private lives make these three out to be beyond despicable. There's Zuck, whose underlings let him win at board-games like Settlers of Catan because he's a manbaby who can't lose (and who accuses Wynn-Williams of cheating when she fails to throw a game of Ticket to Ride while they're flying in his private jet). There's Sandberg, who demands the right to buy a kidney for her child from someone in Mexico, should that child ever need a kidney.</p>
<p>Then there's Kaplan, who is such an extraordinarily stupid and awful oaf that it's hard to pick out just one example, but I'll try. At one point, Wynn-Williams gets Zuck a chance to address the UN General Assembly. As is his wont, Zuck refuses to be briefed before he takes the dais (he's repeatedly described as unwilling to consider any briefing note longer than a single text message). When he gets to the mic, he spontaneously promises that Facebook will provide internet access to refugees all over the world. Various teams at Facebook then race around, trying to figure out whether this is something the company is actually doing, and once they realize Zuck was just bullshitting, set about trying to figure out how to do it. They get some way down this path when Kaplan intervenes to insist that giving away free internet to refugees is a bad idea, and that instead, they should <em>sell</em> internet access to refugees. Facebookers dutifully throw themselves into this absurd project, which dies when Kaplan fires off an email stating that he's just realized that refugees don't have any money. The project dies.</p>
<p>The path that brought Wynn-Williams's into the company of these careless people is a weird – and rather charming – one. As a young woman, Wynn-Williams was a minor functionary in the New Zealand diplomatic corps, and during her foreign service, she grew obsessed with the global political and social potential of Facebook. She threw herself into the project of getting hired to work on Facebook's global team, working on strategy for liaising with governments around the world. The biggest impediment to landing this job is that it doesn't exist: sure, FB was lobbying the US government, but it was monumentally disinterested in the rest of the world in general, and the governments of the world in particular.</p>
<p>But Wynn-Williams persists, pestering potentially relevant execs with requests, working friends-of-friends (Facebook itself is extraordinarily useful for this), and refusing to give up. Then comes the Christchurch earthquake. Wynn-Williams is in the US, about to board a flight, when her sister, a news presenter, calls her while trapped inside a collapsed building (the sister hadn't been able to get a call through to anyone in NZ). Wynn-Williams spends the flight wondering if her sister is dead or alive, and only learns that her sister is OK through a post on Facebook.</p>
<p>The role Facebook played in the Christchurch quake transforms Wynn-Williams's passion for Facebook into something like religious zealotry. She throws herself into the project of landing the job, and she <em>does</em>, and after some funny culture-clashes arising from her Kiwi heritage and her public service background, she settles in at Facebook.</p>
<p>Her early years there are sometimes comical, sometimes scary, and are characteristic of a company that is growing quickly and unevenly. She's dispatched to Myanmar amidst a nationwide block of Facebook ordered by the ruling military junta and at one point, it seems like she's about to get kidnapped and imprisoned by goons from the communications ministry. She arranges for a state visit by NZ Prime Minister John Key, who wants a photo-op with Zuckerberg, who – oblivious to the prime minister standing right there in front of him – berates Wynn-Williams for demanding that he meet with some jackass politician (they do the photo-op anyway).</p>
<p>One thing is clear: Facebook doesn't really care about countries other than America. Though Wynn-Williams chalks this up to plain old provincial chauvinism (which FB's top eschelon possess in copious quantities), there's something else at work. The USA is the only country in the world that a) is rich, b) is populous, and c) has no meaningful privacy protections. If you make money selling access to dossiers on rich people to advertisers, America is the most important market in the world.</p>
<p>But then Facebook conquers America. Not only does FB saturate the US market, it uses its free cash-flow and high share price to acquire potential rivals, like Whatsapp and Instagram, ensuring that American users who leave Facebook (the service) remain trapped by Facebook (the company).</p>
<p>At this point, Facebook – Zuckerberg – turns towards the rest of the world. Suddenly, acquiring non-US users becomes a matter of urgency, and overnight Wynn-Williams is transformed from the sole weirdo talking about global markets to the key asset in pursuit of the company's top priority.</p>
<p>Wynn-Williams's explanation for this shift lies in Zuckerberg's personality, his need to constantly dominate (which is also why his subordinates have learned to let him win at board games). This is doubtless true: not only has this aspect of Zuckerberg's personality been on display in public for decades, Wynn-Williams was able to observe it first-hand, behind closed doors.</p>
<p>But I think that in addition to this personality defect, there's a <em>material</em> pressure for Facebook to grow that Wynn-Williams doesn't mention. Companies that grow get extremely high price-to-earnings (P:E) ratios, meaning that investors are willing to spend many dollars on shares for every dollar the company takes in. Two similar companies with similar earnings can have vastly different valuations (the value of all the stock the company has ever issued), depending on whether one of them is still growing.</p>
<p>High P:E ratios reflect a bet on the part of investors that the company will continue to grow, and those bets only become more extravagant the more the company grows. This is a <em>huge</em> advantage to companies with "growth stocks." If your shares constantly increase in value, they are highly liquid – that is, you can always find someone who's willing to buy your shares from you for cash, which means that you can treat shares <em>like</em> cash. But growth stocks are <em>better</em> than cash, because money grows slowly, if at all (especially in periods of extremely low interest rates, like the past 15+ years). Growth stocks, on the other hand, <em>grow</em>.</p>
<p>Best of all, companies with growth stocks have no trouble finding more stock when they need it. They just type zeroes into a spreadsheet and more shares appear. Contrast this with money. Facebook may take in a lot of money, but the money only arrives when <em>someone else</em> spends it. Facebook's access to money is limited by exogenous factors – your willingness to send your money to Facebook. Facebook's access to shares is only limited by endogenous factors – the company's own willingness to issue new stock.</p>
<p>That means that when Facebook needs to buy something, there's a very good chance that the seller will accept Facebook's stock in lieu of US dollars. Whether Facebook is hiring a new employee or buying a company, it can outbid rivals who only have dollars to spend, because that bidder has to ask someone else for more dollars, whereas Facebook can make its own stock on demand. This is a <em>massive</em> competitive advantage.</p>
<p>But it is also a <em>massive</em> business risk. As Stein's Law has it, "anything that can't go on forever eventually stops." Facebook can't grow forever by signing up new users. Eventually, everyone who might conceivably have a Facebook account will get one. When that happens, Facebook will need to find some other way to make money. They could enshittify – that is, shift value from the company's users and customers to itself. They could invent something new (like metaverse, or AI). But if they can't make those things work, then the company's growth will have ended, and it will <em>instantaneously</em> become grossly overvalued. Its P:E ratio will have to shift from the high value enjoyed by growth stocks to the low value endured by "mature" companies.</p>
<p>When that happens, anyone who is slow to sell will lose a <em>ton</em> of money. So investors in growth stocks tend to keep one fist poised over the "sell" button and sleep with one eye open, watching for any hint that growth is slowing. It's not just that growth gives FB the power to outcompete rivals – it's <em>also</em> the case that growth makes the company vulnerable to massive, sudden devaluations. What's more, if these devaluations are persistent and/or frequent enough, the key FB employees who accepted stock in lieu of cash for some or all of their compensation will either demand <em>lots</em> more cash, or jump ship for a growing rival. These are the very same people that Facebook needs to pull itself out of its nosedives. For a growth stock, even small reductions in growth metrics (or worse, declines) can trigger cascades of compounding, mutually reinforcing collapse.</p>
<p>This is what happened in early 2022, when Meta posted slightly lower-than-anticipated US growth numbers, and the market all pounded on the "sell" button at once, lopping $250,000,000,000 of the company's valuation in 24 hours. At the time, it was the worst-ever single day losses for any company in human history:</p>
<p><a href="https://www.forbes.com/sites/sergeiklebnikov/2022/02/03/facebook-faces-an-existential-moment-after-230-billion-stock-crash/">https://www.forbes.com/sites/sergeiklebnikov/2022/02/03/facebook-faces-an-existential-moment-after-230-billion-stock-crash/</a></p>
<p>Facebook's conquest of the US market triggered an emphasis on foreign customers, but not just because Zuck is obsessed with conquest. For Facebook, a decline in US growth posed an existential risk, the possibility of mass stock selloffs and with them, the end of the years in which Facebook could acquire key corporate rivals and executives with "money" it could print on the premises, on demand.</p>
<p>So Facebook cast its eye upon the world, and Wynn-Williams's long insistence that the company should be paying attention to the political situation abroad suddenly starts landing with her bosses. But those bosses – Zuck, Sandberg, Kaplan and others – are "careless." Zuck screws up opportunity after opportunity because he refuses to be briefed, forgets what little information he's been given, and blows key meetings because he refuses to get out of bed before noon. Sandberg's visits to Davos are undermined by her relentless need to promote herself, her "Lean In" brand, and her petty gamesmanship. Kaplan is the living embodiment of Green Day's "American Idiot" and can barely fathom that foreigners exist.</p>
<p>Wynn-Williams's adventures during this period are very well told, and are, by turns, harrowing and hilarious. Time and again, Facebook's top brass snatch defeat from the jaws of victory, squandering incredible opportunities that Wynn-Williams secures for them because of their pettiness, short-sightedness, and arrogance (that is, their carelessness).</p>
<p>But Wynn-Williams's disillusionment with Facebook isn't rooted in these frustrations. Rather, she is both personally and professionally aghast at the company's disgusting, callous and cruel behavior. She describes how her boss, Joel Kaplan, relentlessly sexually harasses her, and everyone in a position to make this stop tells her to shut up and take it. When Wynn-Williams give birth to her second child, she hemorrhages, almost dies, and ends up in a coma. Afterwards, Kaplan gives her a negative performance review because she was "unresponsive" to his emails and texts while she was dying in an ICU. This is a significant escalation of the earlier behavior she describes, like pestering her with personal questions about breastfeeding, video-calling her from bed, and so on (Kaplan is Sandberg's ex-boyfriend, and Wynn-Williams describes another creepy event where Sandberg pressures her to sleep next to her in the bedroom on one of Facebook's jets, something Wynn-Williams says she routinely does with the young women who report to her).</p>
<p>Meanwhile, Zuck is relentlessly pursuing Facebook's largest conceivable growth market: China. The only problem: China doesn't want Facebook. Zuck repeatedly tries to engineer meetings with Xi Jinping so he can plead his case in person. Xi is monumentally hostile to this idea. Zuck learns Mandarin. He studies Xi's book, conspicuously displays a copy of it on his desk. Eventually, he manages to sit next to Xi at a dinner where he begs Xi to name his next child. Xi turns him down.</p>
<p>After years of persistent nagging, lobbying, and groveling, Facebook's China execs start to make progress with a state apparatchik who dangles the possibility of Facebook entering China. Facebook promises this factotum the world – all the surveillance and censorship the Chinese state wants and more. Then, Facebook's contact in China is jailed for corruption, and they have to start over.</p>
<p>At this point, Kaplan has punished Wynn-Williams – she blames it on her attempts to get others to force him to stop his sexual harassment – and cut her responsibilities in half. He tries to maneuver her into taking over the China operation, something he knows she absolutely disapproves of and has refused to work on – but she refuses. Instead, she is put in charge of hiring the new chief of China operations, giving her access to a voluminous paper-trail detailing the company's dealings with the Chinese government.</p>
<p>According to Wynn-Williams, Facebook actually built an extensive censorship and surveillance system for the Chinese state – spies, cops and military – to use against Chinese Facebook users, and FB users globally. They promise to set up caches of global FB content in China that the Chinese state can use to monitor all Facebook activity, everywhere, with the implication that they'll be able to spy on private communications, and censor content for non-Chinese users.</p>
<p>Despite all of this, Facebook is never given access to China. However, the Chinese state <em>is</em> able to use the tools Facebook built for it to attack independence movements, the free press and dissident uprisings in Hong Kong and Taiwan.</p>
<p>Meanwhile, in Myanmar, a genocide is brewing. NGOs and human rights activists keep reaching out to Facebook to get them to pay attention to the widespread use of the platform to whip up hatred against the country's Muslim minority group, the Rohinga. Despite having expended tremendous amounts of energy to roll out "Free Basics" in Myanmar (a program whereby Facebook bribes carriers to exclude its own services from data caps), with the result that in Myanmar, "the internet" is synonymous with "Facebook," the company has not expended <em>any</em> effort to manage its Burmese presence. The entire moderation staff consists of one (later two) Burmese speakers who are based in Dublin and do not work local hours (later, these two are revealed as likely stooges for the Myanmar military junta, who are behind the genocide plans).</p>
<p>The company has also failed to invest in Burmese language support for its systems – posts written in Burmese script are not stored as Unicode, meaning that none of the company's automated moderation systems can parse it. The company is so hostile to pleas to upgrade these systems that Wynn-Williams and some colleagues create secret, private Facebook groups where they can track the failures of the company and the rising tide of lethal violence in the country (this isn't the only secret dissident Facebook group that Wynn-Williams joins – she's also part of a group of women who have been sexually harassed by colleagues and bosses).</p>
<p>The genocide that follows is horrific beyond measure. And, as with the Trump election, the company's initial posture is that they couldn't possibly have played a significant role in a real-world event that shocked and horrified its rank-and-file employees.</p>
<p>The company, in other words, is "careless." Warned of imminent harms to its users, to democracy, to its own employees, the top executives simply do not care. They ignore the warnings and the consequences, or pay lip service to them. They don't care.</p>
<p>Take Kaplan: after figuring out that the company can't curry favor with the world's governments by selling drone-delivered wifi to refugees (the drones don't fly and the refugees are broke), he hits on another strategy. He remakes "government relations" as a <em>sales office</em>, selling political ads to politicians who are seeking to win over voters, or, in the case of autocracies, disenfranchised hostage-citizens. This is hugely successful, both as a system for securing government cooperation and as a way to transform Facebook's global policy shop from a cost-center to a profit-center.</p>
<p>But of course, it has a price. Kaplan's best customers are dictators and would-be dictators, formenters of hatred and genocide, authoritarians seeking opportunities to purge their opponents, through exile and/or murder.</p>
<p>Wynn-Williams makes a very good case that Facebook is run by awful people who are also very careless – in the sense of being <em>reckless</em>, incurious, indifferent.</p>
<p>But there's another meaning to "careless" that lurks just below the surface of this excellent memoir: "careless" in the sense of "arrogant" – in the sense of not caring about the consequences of their actions.</p>
<p>To me, this was the most important – but least-developed – lesson of <em>Careless People</em>. When Wynn-Williams lands at Facebook, she finds herself surrounded by oafs and sociopaths, cartoonishly selfish and shitty people, who, <em>nevertheless</em>, have built a service that she <em>loves</em> and values, along with hundreds of millions of other people.</p>
<p>She's not wrong to be excited about Facebook, or its potential. The company may be run by careless people, but they are still <em>prudent</em>, behaving as though the consequences of screwing up matter. They are "careless" in the sense of "being reckless," but they <em>care</em>, in the sense of having a healthy fear (and thus respect) for what might happen if they fully yield to their reckless impulses.</p>
<p>Wynn-Williams's firsthand account of the next decade is not a story of these people becoming more reckless, rather, its a story in which the possibility of consequences for that recklessness recedes, and with it, so does their care over those consequences.</p>
<p>Facebook buys its competitors, freeing it from market consequences for its bad acts. By buying the places where disaffected Facebook users are seeking refuge – Instagram and Whatsapp – Facebook is able to insulate itself from the discipline of competition – the fear that doing things that are adverse to its users will cause them to flee.</p>
<p>Facebook captures its regulators, freeing it from regulatory consequences for its bad acts. By playing a central role in the electoral campaigns of Obama and then other politicians around the world, Facebook transforms its watchdogs into supplicants who are more apt to beg it for favors than hold it to account.</p>
<p>Facebook tames its employees, freeing it from labor consequences for its bad acts. As engineering supply catches up with demand, Facebook's leadership come to realize that they don't have to worry about workforce uprisings, whether incited by impunity for sexually abusive bosses, or by the company's complicity in genocide and autocratic oppression.</p>
<p>First, Facebook becomes too big to fail.</p>
<p>Then, Facebook becomes too big to jail.</p>
<p>Finally, Facebook becomes too big to <em>care</em>.</p>
<p>This is the "carelessness" that ultimately changes Facebook for the worse, that turns it into the hellscape that Wynn-Williams is eventually fired from after she speaks out once too often. Facebook bosses aren't just "careless" because they refuse to read a briefing note that's longer than a tweet. They're "careless" in the sense that they arrive at a juncture where they don't have to care who they harm, whom they enrage, who they ruin.</p>
<p>There's a telling anaecdote near the end of <em>Careless People</em>. Back in 2017, leaks revealed that Facebook's sales-reps were promising advertisers the ability to market to teens who felt depressed and "worthless":</p>
<p><a href="https://arstechnica.com/information-technology/2017/05/facebook-helped-advertisers-target-teens-who-feel-worthless/">https://arstechnica.com/information-technology/2017/05/facebook-helped-advertisers-target-teens-who-feel-worthless/</a></p>
<p>Wynn-Williams is – rightly – aghast about this, and even more aghast when she sees the company's official response, in which they disclaim any knowledge that this capability was being developed and fire a random, low-level scapegoat. Wynn-Williams knows they're lying. She knows that this is a routine offering, one that the company routinely boasts about to advertisers.</p>
<p>But she doesn't mention the <em>other</em> lies that Facebook tells in this moment: for one thing, the company offers advertisers the power to target more teens than actually <em>exist</em>. The company proclaims the efficacy of its "sentiment analysis" tool that knows how to tell if teens are feeling depressed or "worthless," even though these tools are notoriously inaccurate, hardly better than a coin-toss, a kind of digital phrenology.</p>
<p>Facebook, in other words, isn't just lying to the public about what it offers to advertisers – it's lying to advertisers, too. Contra those who say, "if you're not paying for the product, you're the product," Facebook treats <em>anyone</em> it can get away with abusing as "the product" (just like every other tech monopolist):</p>
<p><a href="https://pluralistic.net/2022/11/14/luxury-surveillance/#liar-liar">https://pluralistic.net/2022/11/14/luxury-surveillance/#liar-liar</a></p>
<p>Wynn-Williams documents so many instances in which Facebook's top executives lie – to the courts, to Congress, to the UN, to the press. Facebook lies when it is beneficial to do so – but only when they can get away with it. By the time Facebook was lying to advertisers about its depressed teen targeting tools, it was already colluding with Google to rig the ad market with an illegal tool called "Jedi Blue":</p>
<p><a href="https://en.wikipedia.org/wiki/Jedi_Blue">https://en.wikipedia.org/wiki/Jedi_Blue</a></p>
<p>Facebook's story is the story of a company that set out to become <em>too big to care</em>, and achieved that goal. The company's abuses track precisely with its market dominance. It enshittified things for users once it had the users locked in. It screwed advertisers once it captured their market. It did the media-industry-destroying "pivot to video" fraud once it captured the media:</p>
<p><a href="https://en.wikipedia.org/wiki/Pivot_to_video">https://en.wikipedia.org/wiki/Pivot_to_video</a></p>
<p>The important thing about Facebook's carelessness is that it wasn't the result of the many grave personality defects in Facebook's top executives – it was the result of policy choices. Government decisions not to enforce antitrust law, to allow privacy law to wither on the vine, to expand IP law to give Facebook a weapon to shut down interoperable rivals – these all created the enshittogenic environment that allowed the careless people who run Facebook to stop caring.</p>
<p>The corollary: if we change the policy environment, we can make these careless people – and their successors, who run other businesses we rely upon – <em>care</em>. They may never care about <em>us</em>, but we can make them care about what we might do to <em>them</em> if they give in to their carelessness.</p>
<p>Meta is in global regulatory crosshairs, facing antitrust action in the USA:</p>
<p><a href="https://pluralistic.net/2025/04/18/chatty-zucky/#is-you-taking-notes-on-a-criminal-fucking-conspiracy">https://pluralistic.net/2025/04/18/chatty-zucky/#is-you-taking-notes-on-a-criminal-fucking-conspiracy</a></p>
<p>And muscular enforcement pledges in the EU:</p>
<p><a href="https://www.reuters.com/business/retail-consumer/eu-says-it-will-enforce-digital-rules-irrespective-ceo-location-2025-04-21/">https://www.reuters.com/business/retail-consumer/eu-says-it-will-enforce-digital-rules-irrespective-ceo-location-2025-04-21/</a></p>
<p>As Martin Luther King, Jr put it:</p>
<blockquote><p>
  The law cannot make a man love me, but it can stop him from lynching me, and I think that's pretty important.
</p></blockquote>
<hr>

<h2>Hey look at this (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#linkdump">permalink</a>)</h2>
<p><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/craphound.com/images/heylookatthis2.jpg?w=840&amp;ssl=1"></p>
<ul>
<li>Corporate Lawlessness Comes Next <a href="https://www.hamiltonnolan.com/p/corporate-lawlessness-comes-next">https://www.hamiltonnolan.com/p/corporate-lawlessness-comes-next</a>
</li>
<li>
<p>Deconstructing Housing <a href="https://democracyjournal.org/magazine/76/deconstructing-housing/">https://democracyjournal.org/magazine/76/deconstructing-housing/</a></p>
</li>
<li>
<p>What Happens When Private Equity Owns Your Kid’s Day Care <a href="https://jacobin.com/2025/04/private-equity-day-care-childcare/">https://jacobin.com/2025/04/private-equity-day-care-childcare/</a></p>
</li>
</ul>
<hr>
<p><a name="retro"></a><br>
<img data-recalc-dims="1" height="416" width="796" decoding="async" alt="A Wayback Machine banner." src="https://i0.wp.com/craphound.com/images/wayback-machine-hed-796x416.png?resize=796%2C416&amp;ssl=1"></p>
<h2>Object permanence (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#retro">permalink</a>)</h2>
<p>#20yrsago Free Culture Movement turns one <a href="https://web.archive.org/web/20050426022041/http://www.lessig.org/blog/archives/002838.shtml">https://web.archive.org/web/20050426022041/http://www.lessig.org/blog/archives/002838.shtml</a></p>
<p>#15yrsago India’s copyright bill gets it right <a href="https://web.archive.org/web/20100425031519/https://www.michaelgeist.ca/content/view/4974/196/">https://web.archive.org/web/20100425031519/https://www.michaelgeist.ca/content/view/4974/196/</a></p>
<p>#15yrsago Hitler’s pissed off about fair use <a href="https://www.youtube.com/watch?v=kBO5dh9qrIQ">https://www.youtube.com/watch?v=kBO5dh9qrIQ</a></p>
<p>#10yrsago Fascinating, wide-ranging discussion with William Gibson <a href="https://www.youtube.com/watch?v=bmh29gwEy7Y">https://www.youtube.com/watch?v=bmh29gwEy7Y</a></p>
<p>#10yrsago Tory chairman accused of smearing party rivals’ Wikipedia entries <a href="https://www.theguardian.com/politics/2015/apr/21/grant-shapps-accused-of-editing-wikipedia-pages-of-tory-rivals">https://www.theguardian.com/politics/2015/apr/21/grant-shapps-accused-of-editing-wikipedia-pages-of-tory-rivals</a></p>
<p>#10yrsago John Oliver on patent trolls <a href="https://www.youtube.com/watch?v=3bxcc3SM_KA">https://www.youtube.com/watch?v=3bxcc3SM_KA</a></p>
<p>#5yrsago Disney heiress slams top execs' compensation <a href="https://pluralistic.net/2020/04/22/filternet/#castmembers">https://pluralistic.net/2020/04/22/filternet/#castmembers</a></p>
<p>#5yrsago Covid burns through Charter Cable employees <a href="https://pluralistic.net/2020/04/22/filternet/#thomas-rutledge-murderer">https://pluralistic.net/2020/04/22/filternet/#thomas-rutledge-murderer</a></p>
<p>#5yrsago Unmasking the registrants of the "reopen" websites <a href="https://pluralistic.net/2020/04/22/filternet/#krebs">https://pluralistic.net/2020/04/22/filternet/#krebs</a></p>
<p>#5yrsago Apartment buildings didn't cause the pandemic <a href="https://pluralistic.net/2020/04/22/filternet/#kate-wagner">https://pluralistic.net/2020/04/22/filternet/#kate-wagner</a></p>
<p>#5yrsago Web-wide copyright filters would be a disaster <a href="https://pluralistic.net/2020/04/22/filternet/#filternet">https://pluralistic.net/2020/04/22/filternet/#filternet</a></p>
<p>#1yrago Paying for it doesn't make it a market <a href="https://pluralistic.net/2024/04/22/kargo-kult-kaptialism/#dont-buy-it">https://pluralistic.net/2024/04/22/kargo-kult-kaptialism/#dont-buy-it</a></p>
<hr>

<h2>Upcoming appearances (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#upcoming">permalink</a>)</h2>
<p><img data-recalc-dims="1" decoding="async" alt="A photo of me onstage, giving a speech, pounding the podium." src="https://i0.wp.com/craphound.com/images/appearances2.jpg?w=840&amp;ssl=1"></p>
<ul>
<li>Auckland: Unity Books, May 2, 6PM<br>
<a href="https://www.eventbrite.co.nz/e/an-evening-with-cory-doctorow-tickets-1320740102199">https://www.eventbrite.co.nz/e/an-evening-with-cory-doctorow-tickets-1320740102199</a>
</li>
<li>
<p>Wellingon: Unity Books, May 3, 3PM<br>
<a href="https://www.unitybooks.co.nz/news-and-events/author-talk-picks-and-shovels-by-cory-doctorow">https://www.unitybooks.co.nz/news-and-events/author-talk-picks-and-shovels-by-cory-doctorow</a></p>
</li>
<li>
<p>Pittsburgh: Picks and Shovels at White Whale Books, May 15<br>
<a href="https://whitewhalebookstore.com/events/20250515">https://whitewhalebookstore.com/events/20250515</a></p>
</li>
<li>
<p>Pittsburgh: PyCon, May 16<br>
<a href="https://us.pycon.org/2025/schedule/">https://us.pycon.org/2025/schedule/</a></p>
</li>
<li>
<p>Virtual: Writing to Resist (California Writers Club Berkeley):<br>
<a href="https://cwc-berkeley.org/writing-to-resist-5-18-25/">https://cwc-berkeley.org/writing-to-resist-5-18-25/</a></p>
</li>
<li>
<p>PDX: Teardown 2025, Jun 20-22<br>
<a href="https://www.crowdsupply.com/teardown/portland-2025">https://www.crowdsupply.com/teardown/portland-2025</a></p>
</li>
<li>
<p>PDX: Picks and Shovels with bunnie Huang at Barnes and Noble, Jun 20<br>
<a href="https://stores.barnesandnoble.com/event/9780062183697-0">https://stores.barnesandnoble.com/event/9780062183697-0</a></p>
</li>
<li>
<p>London: How To Academy with Riley Quinn, Jul 1<br>
<a href="https://howtoacademy.com/events/cory-doctorow-the-fight-against-the-big-tech-oligarchy/">https://howtoacademy.com/events/cory-doctorow-the-fight-against-the-big-tech-oligarchy/</a></p>
</li>
<li>
<p>Manchester: Picks and Shovels at Blackwell's Bookshop, Jul 2<br>
<a href="https://www.eventbrite.co.uk/e/an-evening-with-cory-doctorow-tickets-1308451968059">https://www.eventbrite.co.uk/e/an-evening-with-cory-doctorow-tickets-1308451968059</a></p>
</li>
<li>
<p>Manchester: Co-operatives UK Co-op Congress keynote, Jul 3<br>
<a href="https://www.uk.coop/events-and-training/events-calendar/co-op-congress-2025-book-your-place">https://www.uk.coop/events-and-training/events-calendar/co-op-congress-2025-book-your-place</a></p>
</li>
<li>
<p>New Orleans: DeepSouthCon63, Oct 10-12, 2025<br>
<a href="http://www.contraflowscifi.org/">http://www.contraflowscifi.org/</a></p>
</li>
</ul>
<hr>
<p><a name="recent"></a><br>
<img data-recalc-dims="1" decoding="async" alt="A screenshot of me at my desk, doing a livecast." src="https://i0.wp.com/craphound.com/images/recentappearances2.jpg?w=840&amp;ssl=1"></p>
<h2>Recent appearances (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#recent">permalink</a>)</h2>
<ul>
<li>Can we use the Internet for Democracy?<br>
<a href="https://www.youtube.com/watch?v=Zh_HON6iql8">https://www.youtube.com/watch?v=Zh_HON6iql8</a>
</li>
<li>
<p>Fightback Against Trump's Tariff Attack (Avi Lewis)<br>
<a href="https://www.youtube.com/watch?v=P9sgIAc6z_o">https://www.youtube.com/watch?v=P9sgIAc6z_o</a></p>
</li>
<li>
<p>The Voice of Canadian Humanism<br>
<a href="https://open.spotify.com/episode/7uuwdZTIbWzKhBQ3mmMiRv">https://open.spotify.com/episode/7uuwdZTIbWzKhBQ3mmMiRv</a></p>
</li>
</ul>
<hr>
<p><a name="latest"></a><br>
<img data-recalc-dims="1" decoding="async" alt="A grid of my books with Will Stahle covers.." src="https://i0.wp.com/craphound.com/images/recent.jpg?w=840&amp;ssl=1"></p>
<h2>Latest books (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#latest">permalink</a>)</h2>
<ul>
<li>
<ul>
<li>Picks and Shovels: a sequel to "Red Team Blues," about the heroic era of the PC, Tor Books (US), Head of Zeus (UK), February 2025 (<a href="https://us.macmillan.com/books/9781250865908/picksandshovels">https://us.macmillan.com/books/9781250865908/picksandshovels</a>).</li>
</ul>
</li>
<li>The Bezzle: a sequel to "Red Team Blues," about prison-tech and other grifts, Tor Books (US), Head of Zeus (UK), February 2024 (<a href="http://the-bezzle.org/">the-bezzle.org</a>). Signed, personalized copies at Dark Delicacies (<a href="https://www.darkdel.com/store/p3062/Available_Feb_20th%3A_The_Bezzle_HB.html#/">https://www.darkdel.com/store/p3062/Available_Feb_20th%3A_The_Bezzle_HB.html#/</a>).
</li>
<li>
<p>"The Lost Cause:" a solarpunk novel of hope in the climate emergency, Tor Books (US), Head of Zeus (UK), November 2023 (<a href="http://lost-cause.org/">http://lost-cause.org</a>). Signed, personalized copies at Dark Delicacies (<a href="https://www.darkdel.com/store/p3007/Pre-Order_Signed_Copies%3A_The_Lost_Cause_HB.html#/">https://www.darkdel.com/store/p3007/Pre-Order_Signed_Copies%3A_The_Lost_Cause_HB.html#/</a>)</p>
</li>
<li>
<p>"The Internet Con": A nonfiction book about interoperability and Big Tech (Verso) September 2023 (<a href="http://seizethemeansofcomputation.org/">http://seizethemeansofcomputation.org</a>). Signed copies at Book Soup (<a href="https://www.booksoup.com/book/9781804291245">https://www.booksoup.com/book/9781804291245</a>).</p>
</li>
<li>
<p>"Red Team Blues": "A grabby, compulsive thriller that will leave you knowing more about how the world works than you did before." Tor Books <a href="http://redteamblues.com/">http://redteamblues.com</a>. Signed copies at Dark Delicacies (US): <a href="https://www.darkdel.com/store/p2873/Wed%2C_Apr_26th_6pm%3A_Red_Team_Blues%3A_A_Martin_Hench_Novel_HB.html#/"> and Forbidden Planet (UK): </a><a href="https://forbiddenplanet.com/385004-red-team-blues-signed-edition-hardcover/">https://forbiddenplanet.com/385004-red-team-blues-signed-edition-hardcover/</a>.</p>
</li>
<li>
<p>"Chokepoint Capitalism: How to Beat Big Tech, Tame Big Content, and Get Artists Paid, with Rebecca Giblin", on how to unrig the markets for creative labor, Beacon Press/Scribe 2022 <a href="https://chokepointcapitalism.com/">https://chokepointcapitalism.com</a></p>
</li>
<li>
<p>"Attack Surface": The third Little Brother novel, a standalone technothriller for adults. The <em>Washington Post</em> called it "a political cyberthriller, vigorous, bold and savvy about the limits of revolution and resistance." Order signed, personalized copies from Dark Delicacies <a href="https://www.darkdel.com/store/p1840/Available_Now%3A_Attack_Surface.html">https://www.darkdel.com/store/p1840/Available_Now%3A_Attack_Surface.html</a></p>
</li>
<li>
<p>"How to Destroy Surveillance Capitalism": an anti-monopoly pamphlet analyzing the true harms of surveillance capitalism and proposing a solution. <a href="https://onezero.medium.com/how-to-destroy-surveillance-capitalism-8135e6744d59?sk=f6cd10e54e20a07d4c6d0f3ac011af6b">https://onezero.medium.com/how-to-destroy-surveillance-capitalism-8135e6744d59?sk=f6cd10e54e20a07d4c6d0f3ac011af6b</a>) (signed copies: <a href="https://www.darkdel.com/store/p2024/Available_Now%3A__How_to_Destroy_Surveillance_Capitalism.html">https://www.darkdel.com/store/p2024/Available_Now%3A__How_to_Destroy_Surveillance_Capitalism.html</a>)</p>
</li>
<li>
<p>"Little Brother/Homeland": A reissue omnibus edition with a new introduction by Edward Snowden: <a href="https://us.macmillan.com/books/9781250774583">https://us.macmillan.com/books/9781250774583</a>; personalized/signed copies here: <a href="https://www.darkdel.com/store/p1750/July%3A__Little_Brother_%26_Homeland.html">https://www.darkdel.com/store/p1750/July%3A__Little_Brother_%26_Homeland.html</a></p>
</li>
<li>
<p>"Poesy the Monster Slayer" a picture book about monsters, bedtime, gender, and kicking ass. Order here: <a href="https://us.macmillan.com/books/9781626723627">https://us.macmillan.com/books/9781626723627</a>. Get a personalized, signed copy here: <a href="https://www.darkdel.com/store/p2682/Corey_Doctorow%3A_Poesy_the_Monster_Slayer_HB.html#/">https://www.darkdel.com/store/p2682/Corey_Doctorow%3A_Poesy_the_Monster_Slayer_HB.html#/</a>.</p>
</li>
</ul>
<hr>
<p><a name="upcoming-books"></a><br>
<img data-recalc-dims="1" decoding="async" alt="A cardboard book box with the Macmillan logo." src="https://i0.wp.com/craphound.com/images/upcoming-books.jpg?w=840&amp;ssl=1"></p>
<h2>Upcoming books (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#upcoming-books">permalink</a>)</h2>
<ul>
<li>Enshittification: Why Everything Suddenly Got Worse and What to Do About It, Farrar, Straus, Giroux, October 7 2025<br>
<a href="https://us.macmillan.com/books/9780374619329/enshittification/">https://us.macmillan.com/books/9780374619329/enshittification/</a>
</li>
<li>
<p>Unauthorized Bread: a middle-grades graphic novel adapted from my novella about refugees, toasters and DRM, FirstSecond, 2026</p>
</li>
<li>
<p>Enshittification, Why Everything Suddenly Got Worse and What to Do About It (the graphic novel), Firstsecond, 2026</p>
</li>
<li>
<p>The Memex Method, Farrar, Straus, Giroux, 2026</p>
</li>
</ul>
<hr>
<p><a name="bragsheet"></a><br>
<img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/craphound.com/images/colophon2.jpg?w=840&amp;ssl=1"></p>
<h2>Colophon (<a href="https://pluralistic.net/2025/04/23/zuckerstreisand/#bragsheet">permalink</a>)</h2>
<p>Today's top sources:</p>
<p><b>Currently writing: </b></p>
<ul>
<li>Enshittification: a nonfiction book about platform decay for Farrar, Straus, Giroux. Status: second pass edit underway (readaloud)
</li>
<li>
<p>A Little Brother short story about DIY insulin PLANNING</p>
</li>
<li>
<p>Picks and Shovels, a Martin Hench noir thriller about the heroic era of the PC. FORTHCOMING TOR BOOKS FEB 2025</p>
</li>
</ul>
<p><b>Latest podcast:</b> Nimby and the D-Hoppers CONCLUSION <a href="https://craphound.com/stories/2025/04/13/nimby-and-the-d-hoppers-conclusion/">https://craphound.com/stories/2025/04/13/nimby-and-the-d-hoppers-conclusion/</a></p>
<hr>
<p><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/craphound.com/images/by.svg.png?w=840&amp;ssl=1"></p>
<p>This work – excluding any serialized fiction – is licensed under a Creative Commons Attribution 4.0 license. That means you can use it any way you like, including commercially, provided that you attribute it to me, Cory Doctorow, and include a link to pluralistic.net.</p>
<p><a href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></p>
<p>Quotations and images are not included in this license; they are included either under a limitation or exception to copyright, or on the basis of a separate license. Please exercise caution.</p>
<hr>
<h2>How to get Pluralistic:</h2>
<p>Blog (no ads, tracking, or data-collection):</p>
<p><a href="http://pluralistic.net/">Pluralistic.net</a></p>
<p>Newsletter (no ads, tracking, or data-collection):</p>
<p><a href="https://pluralistic.net/plura-list">https://pluralistic.net/plura-list</a></p>
<p>Mastodon (no ads, tracking, or data-collection):</p>
<p><a href="https://mamot.fr/@pluralistic">https://mamot.fr/@pluralistic</a></p>
<p>Medium (no ads, paywalled):</p>
<p><a href="https://doctorow.medium.com/">https://doctorow.medium.com/</a></p>
<p>Twitter (mass-scale, unrestricted, third-party surveillance and advertising):</p>
<p><a href="https://twitter.com/doctorow">https://twitter.com/doctorow</a></p>
<p>Tumblr (mass-scale, unrestricted, third-party surveillance and advertising):</p>
<p><a href="https://mostlysignssomeportents.tumblr.com/tagged/pluralistic">https://mostlysignssomeportents.tumblr.com/tagged/pluralistic</a></p>
<p>"<em>When life gives you SARS, you make sarsaparilla</em>" -Joey "Accordion Guy" DeVilla</p>
<p>READ CAREFULLY: By reading this, you agree, on behalf of your employer, to release me from all obligations and waivers arising from any and all NON-NEGOTIATED agreements, licenses, terms-of-service, shrinkwrap, clickwrap, browsewrap, confidentiality, non-disclosure, non-compete and acceptable use policies ("BOGUS AGREEMENTS") that I have entered into with your employer, its partners, licensors, agents and assigns, in perpetuity, without prejudice to my ongoing rights and privileges. You further represent that you have the authority to release me from any BOGUS AGREEMENTS on behalf of your employer.</p>
<p>ISSN: 3066-764X</p>

	</div><!-- .entry-content -->

	<!-- .entry-footer -->
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AMD Publishes Open-Source Driver for GPU Virtualization, Radeon "In the Roadmap" (161 pts)]]></title>
            <link>https://www.phoronix.com/news/AMD-GIM-Open-Source</link>
            <guid>43779953</guid>
            <pubDate>Thu, 24 Apr 2025 06:58:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/news/AMD-GIM-Open-Source">https://www.phoronix.com/news/AMD-GIM-Open-Source</a>, See on <a href="https://news.ycombinator.com/item?id=43779953">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="AMD" src="https://www.phoronix.com/assets/categories/amd.webp" width="100" height="100"></p><p>
AMD has published as open-source their "GPU-IOV Module" used for virtualization with Instinct accelerators. It's also reported on their roadmap for bringing virtualization support to their client (Radeon) discrete GPUs.
</p><p>
The AMD GPU-IOV Module is for the Linux kernel and for providing SR-IOV based hardware virtualization in conjunction with the KVM hypervisor. GIM provides the GPU IOV virtualization, virtual function (VF) configuration and enablement, GPU scheduling for world switch, hang detection and FLR reset, and PF/VF handshake capabilities.
</p><p>
Initially the AMD GIM driver is for the Instinct MI300X hardware and tested atop Ubuntu 22.04 LTS with ROCm 6.4. Those interested can find the AMD GIM code currently via <a href="https://github.com/amd/MxGPU-Virtualization">GitHub</a>. It's not laid out in the repository or any other public communications I've seen what any upstreaming plans are for this GIM driver to get it into the mainline Linux kernel.
</p><p>
Of interest to many Phoronix readers will be that GIM / SR-IOV support could be coming to client discrete GPUs, which has been a long sought feature for the Radeon graphics cards. AMD engineer Anush Elangovan responded on <a href="https://x.com/AnushElangovan/status/1914667824230097144">X</a> that the client GPU support is reportedly "in the roadmap":
</p><p><img src="https://www.phoronix.net/image.php?id=2025&amp;image=radeon_sriov_roadmap" alt="roadmap tweet/X"></p>
<p>Hopefully this client GPU support pans out and comes sooner rather than later.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Shortest-possible walking tour to 81,998 bars in South Korea (398 pts)]]></title>
            <link>https://www.math.uwaterloo.ca/tsp/korea/index.html</link>
            <guid>43778105</guid>
            <pubDate>Thu, 24 Apr 2025 00:20:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.math.uwaterloo.ca/tsp/korea/index.html">https://www.math.uwaterloo.ca/tsp/korea/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=43778105">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> 

<p>
We have solved a traveling salesman problem (TSP) to walk to 81,998 bars in South Korea.
The problem was created using the <a href="https://project-osrm.org/">Open Source Routing Machine</a> (OSRM) to build a table of the 3,361,795,003 point-to-point travel times, one for each pair of bar locations.
Our computation produced a tour together with a proof that it is a shortest-possible route to visit all 81,998 stops when measured with the OSRM times.
</p>

<p>
It would be a very long pub crawl.
The total walking time for the round trip is 15,386,177 seconds, or 178 days, 1 hour, 56 minutes, and 17 seconds.
You will need to stop for plenty of drinks along the way (better stick with water, tea, or Diet Coke if you want to finish the route in only a few years), so it's  not likely you would count every second on such a journey.
But the level of precision makes the point that this not just a good route, it is an optimal solution to the 81,998-stop TSP.
It is not possible to rearrange the order of stops to save even a single second of the OSRM-estimated walking time.
</p>


<p>
This is the largest road-map instance of the TSP that has been solved to provable optimality, exceeding the <a href="https://www.math.uwaterloo.ca/tsp/nl/index.html">57,912-stop tour through the Netherlands</a> solved in February 2021.
The computations were carried out between December 2024 and March 2025 at <a href="https://ruc.dk/en">Roskilde University</a> and at the <a href="https://uwaterloo.ca/">University of Waterloo</a>.
Details of the computing work can be found on the <a href="https://www.math.uwaterloo.ca/tsp/korea/computation.html">Computation</a> page.
</p>


<p>
  <h2>Interactive map</h2>
</p>


<p>       
The figure below is a screen shot of an interactive map of the korea81998 tour.
The menu on the left-hand-side lets you select one of seven regions to view.
At the top right-hand-side you can choose to have either a colored street map or a grayscale map without street labels.
Just below this menu you can select whether or not to display the stop markers, or to display the tour edges, or to display both.
You can view the map by clicking on the image.
</p><figure>
  <a href="https://www.math.uwaterloo.ca/tsp/korea/korea81998_lite.html"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/korea_map.jpg" width="100%" alt="Screenshot of the interactive map"></a>
</figure>





<p>
  <h2>Snapshots of the Tour</h2>
</p>

<p>
If you have trouble viewing the interactive map, you can click on the drawings below to see high-resolution images of the tour.
For close-up views of city regions, please see the <a href="https://www.math.uwaterloo.ca/tsp/korea/cities.html">Cities</a> page.
</p>

<div>
   <p><a href="https://www.math.uwaterloo.ca/tsp/korea/img/snap1.jpg"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/snap1_1000.jpg" alt="Tour snapshot 1"></a>
   </p>
   <p><a href="https://www.math.uwaterloo.ca/tsp/korea/img/snap2.jpg"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/snap2_1000.jpg" alt="Tour snapshot 2"></a>
   </p>
</div> 

<div>
   <p><a href="https://www.math.uwaterloo.ca/tsp/korea/img/snap3.jpg"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/snap3_1000.jpg" alt="Tour snapshot 3"></a>
   </p>
   <p><a href="https://www.math.uwaterloo.ca/tsp/korea/img/snap4.jpg"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/snap4_1000.jpg" alt="Tour snapshot 4"></a>
   </p>
</div> 




<p>
  <h2>Optimality</h2>
</p>

<p>
Newspapers, popular journals, blogs, and scientific press releases regularly report that solving even tiny instances of the TSP is impossible with the current generation of computers.
A typical example is the following quote from the Washington Post.
</p>

<figure>
<blockquote>
<p>
"It would take a laptop computer 1,000 years to compute the most efficient route between 22 cities, for example."
</p>
</blockquote>
  
</figure>

<!--
<figure>
<blockquote class="blockquote">
<p>
"... used a special quantum chip to solve a 22-stop traveling salesman problem that would have taken a supercomputer more than a thousand years to solve."
</p>
</blockquote>
  <figcaption class="blockquote-footer">
     Alles auf Quantencomputer!: Warum es lohnt, auf die Schluesseltechnologie zu setzen, <cite title="Source Title">Der Tagesspiegel</cite>, November 25, 2021.
  </figcaption>
</figure>

<figure>
<blockquote class="blockquote">
<p>
"With 50 landmarks to put in order . . . . computing this problem on your home computer right now, you'd find the optimal route in about 9.64 x 10<sup>52</sup> years."
</p>
</blockquote>
  <figcaption class="blockquote-footer">
     The ultimate American road trip revealed: Data scientist uses algorithms to plot the best route across the United States, <cite title="Source Title">Daily Mail</cite>, March 14, 2015.
  </figcaption>
</figure>
-->


<p>
Statements such as this assume the only way to solve the TSP is to check each possible tour, one-by-one.
That clearly cannot work for any of the large instances of the TSP we have solved.
The number of tours in the korea81998 case is roughly <a href="http://www.wolframalpha.com/input/?i=81997!">2 followed by 367308 zeroes</a>.
</p>

<p>
This huge number of possible solutions is frightening, but it doesn't mean we can't solve this large example of the TSP.
Our approach combines the <a href="http://webhotel4.ruc.dk/~keld/research/LKH/">LKH</a> code for computing extremely good TSP solutions and the <a href="https://www.math.uwaterloo.ca/tsp/concorde.html">Concorde</a> code for applying what is known as the "cutting-plane method" for producing quality guarantees.
You can see a short discussion of how we apply these tools on the <a href="https://www.math.uwaterloo.ca/tsp/korea/computation.html">Computation</a> page.
</p>

<p>
For a quick glimpse of the cutting-plane method, here is how I describe the process in a <a href="http://www.scientificamerican.com/article/case-traveling-salesman-unsolvable-limits-computation/">short piece in Scientific American</a>
</p>
<figure>
<blockquote>
<p>
"The idea is to follow Yogi Berra's advice `When you come to a fork in the road, take it.' A tool called linear programming allows us to do just this, assigning fractions to roads joining pairs of cities, rather than deciding immediately whether to use a road or not. It is perfectly fine, in this model, to send half a salesman along both branches of the fork."
</p>

<p>
"The process begins with the requirement that, for every city, the fractions assigned to the arriving and departing roads each sum to one. Then, step-by-step, further restrictions are added, each involving sums of fractions assigned to roads. Linear programming eventually points us to the best decision for each road, and thus the shortest possible route."
</p>
</blockquote>
<!--
  <figcaption class="blockquote-footer text-bg-light p-1 border border-dark-subtle border-top-0">
    Traveling Salesman: A Seemingly Unsolvable Problem Offers a Glimpse of the Limits of Computation, <cite title="Source Title">Scientific America</cite>, June 2012.
  </figcaption>
-->
</figure>


<p>
If you have a few minutes, you can check out the video of the talk <a href="https://www.youtube.com/watch?v=tChnXG6ulyE">Optimal Tours</a> given at the <a href="https://momath.org/civicrm/?page=CiviCRM&amp;q=civicrm%2Fevent%2Finfo&amp;reset=1&amp;id=6601">National Museum of Mathematics</a>, where the method is described in detail. 
Or, keeping with the Korean theme, please have a look at video of the talk <a href="https://www.youtube.com/watch?v=W0XnU1uvIwo">Amazon Deliveries, Pub Walks, and Astro Tours</a>, given at <a href="https://www.kaist.ac.kr/en/">KAIST</a> in March 2024.

</p><div>
   <p><a href="https://www.youtube.com/watch?v=tChnXG6ulyE"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/momath_title.jpg" alt="Tour snapshot 1"></a>
   </p>
   <p><a href="https://www.youtube.com/watch?v=W0XnU1uvIwo"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/korea2024_title.jpg" alt="Tour snapshot 2"></a>
   </p>
</div> 




<p>
  <h2>P vs NP</h2>
</p>

<p>
A great discussion of the P and NP complexity classes, including connections to the TSP, can be found in Lance Fortnow's article <a href="https://dl.acm.org/doi/pdf/10.1145/3460351">Fifty Years of P vs. NP and the Possibility of the Impossible</a>.
</p>

<figure> 
  <img src="https://www.math.uwaterloo.ca/tsp/korea/img/optiland.jpg" width="50%" alt="Optiland">
  <figcaption>Credit: https://cacm.acm.org/research/fifty-years-of-p-vs-np-and-the-possibility-of-the-impossible/</figcaption>
</figure>


<p>
  <h2>The Big Picture</h2>
</p>

<p>
We use large examples of the traveling salesman problem as a means for developing and testing general-purpose optimization methods.
The world has limited resources and the aim of the applied mathematics fields of <a href="https://en.wikipedia.org/wiki/Mathematical_optimization">mathematical optimization</a> and <a href="https://en.wikipedia.org/wiki/Operations_research">operations research</a> is to create tools to help us to use these resources as efficiently as possible.
</p>

<p>
For general information on mathematical modeling and its impact on industry, commerce, medicine, and the environment, we point you to a number of societies that support mathematics research and education:
<a href="http://www.ams.org/home/page">American Mathematical Society</a>,
<a href="http://www.maa.org/">Mathematical Association of America</a>,
<a href="http://www.mathopt.org/">Mathematical Optimization Society</a>,
<a href="https://www.informs.org/">INFORMS</a> (operations research), 
and <a href="http://www.siam.org/">SIAM</a> (applied mathematics).
</p>


<p>
  <h2>Research Team</h2>
</p>

<p>
  <a href="http://www.math.uwaterloo.ca/~bico/">William Cook</a>, Combinatorics and Optimization, University of Waterloo, Canada<br>
  <a href="https://scholar.google.com/citations?user=7KSvWuQAAAAJ&amp;hl=en">Daniel Espinoza</a>, Alicanto Labs, Chile<br> 
  <a href="http://mgoycool.uai.cl/">Marcos Goycoolea</a>, School of Business, Universidad Adolfo Ibanez, Chile<br>
  <a href="http://www.akira.ruc.dk/~keld/">Keld Helsgaun</a>, Computer Science, Roskilde University, Denmark
</p>


<p>
  <h2>Acknowledgements</h2>
</p>

<p>
The huge number of linear-programming models that arose in the computation were solved with the <a href="https://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/">IBM CPLEX Optimizer</a>.
Many thanks to IBM for making their great software <a href="https://community.ibm.com/community/user/datascience/blogs/xavier-nodet1/2020/07/09/cplex-free-for-students">freely available for academic research</a>.
</p>

<p>
The map drawings of the tour were created with the <a href="https://leafletjs.com/">Leaflet</a> open-source JavaScript library for mobile-friendly interactive maps and make use of map tiles built by <a href="https://www.openstreetmap.org/">OpenStreetMap</a>, by <a href="https://carto.com/basemaps">Carto Basemaps</a> and by <a href="https://stadiamaps.com/products/map-tiles/">Stadia Maps</a>.
</p>

<p>
We thank <a href="https://dimag.ibs.re.kr/home/sangil/">Dr. Sang-il Oum</a>, Chief Investigator of the <a href="https://dimag.ibs.re.kr/">Discrete Mathematics Group</a> at the <a href="https://www.ibs.re.kr/eng.do">Institute for Basic Science (IBS)</a> for obtaining the locations of the bars in Korea.
The locations were downloaded from a <a href="https://www.bigdata-policing.kr/product/view?product_id=PRDT_360">database</a> maintained by the Korean National Police Agency.
</p>

<p>
The table of point-to-point walking times was created with the <a href="https://project-osrm.org/">Open Source Routing Machine</a> (OSRM).
</p>



<p>
  <h2>Other Road Trips</h2>
</p>

<div> 
  <div>
    <p><a href="http://www.math.uwaterloo.ca/tsp/japan/index.html" data-ua-action="hp-news" title="Image of Japan tour"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/japan_270.jpg" alt="Konbini"></a></p><p>40,426 Japanese Konbini.</p>
  </div>

  <div>
    <p><a href="http://www.math.uwaterloo.ca/tsp/uk/index.html" data-ua-action="hp-news" title="UK49687 Tour"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/uk49_270.png" alt="UK"></a></p><p>49,687 pubs in the UK.</p>
  </div>

  <div>
    <p><a href="http://www.math.uwaterloo.ca/tsp/us/index.html" data-ua-action="hp-news" title="Screen shot of US50K"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/us50k_full_270.png" alt="US50K"></a></p><p>49,603 US historic places.</p>
  </div>

  <div>
    <p><a href="http://www.math.uwaterloo.ca/tsp/nl/index.html" data-ua-action="hp-news" title="NL Tour"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/nl_270.jpg" alt="UK"></a></p><p>57,912 Dutch monuments.</p>
  </div>
</div>


<p>
  <h2>Further Reading</h2>
</p>

<div "=""> 
  <div>
    <p><a href="http://press.princeton.edu/titles/9531.html" data-ua-action="hp-news" title="In Pursuit of the Traveling Salesman"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/pursuit.jpg" alt="Pursuit"></a></p><p>An introduction to the TSP, including its history, applications, and solution techniques.</p>
  </div>

  <div>
    <p><a href="http://press.princeton.edu/titles/8451.html" title="Traveling Salesman Problem"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/tspcomp.jpg" alt="TSP"></a></p><p>Detailed computational study of the cutting-plane method for the TSP.</p>
  </div>

  <div>
    <p><a href="http://press.princeton.edu/titles/9937.html" data-ua-action="hp-news" title="The Golden Ticket"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/golden.jpg" alt="The Golden Ticket"></a></p><p>Gentle introduction to the P vs NP problem and its ramifications.</p>
  </div>

  <div>
    <p><a href="https://press.princeton.edu/books/hardcover/9780691164069/opt-art" data-ua-action="hp-news" title="Opt Art"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/optart.jpg" alt="Opt Art"></a></p><p>See how the TSP is used to create pretty images with a single line.</p>
  </div>

  <div>
    <p><a href="https://www.or.uni-bonn.de/tspbook/tsp_book.html" data-ua-action="hp-news" title="Approximation Algorithms for the TSP"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/approx.jpg" alt="Approximation Algorithms"></a></p><p>Latest research on the theory of approximation algorithms for the TSP.</p>
  </div>

  <div>
    <p><a href="https://link.springer.com/book/10.1007/3-540-48661-5" data-ua-action="hp-news" title="Computational Solutions for TSP Applications"><img src="https://www.math.uwaterloo.ca/tsp/korea/img/reinelt.jpg" alt="Reinelt TSP"></a></p><p>Applications of the TSP are given in this 1994 book, now available as a free download.</p>
  </div>



<!--
  <div class="col col-md-2">
    <a href="https://www.alexbellos.com/numberland" class="su-link" data-ua-action="hp-news" title="Numberland"><img src="./img/bellos.jpg" class="img-fluid" alt="Alex Bellos"></a>
    <p>Fantastic math book! Not directly about the TSP, but reading get you in the mood for math research.</p>
  </div>

  <div class="col col-md-2">
    <a href="https://dimag.ibs.re.kr" class="su-link" data-ua-action="hp-news" title="AFSA"><img src="./img/ibs.jpg" class="img-fluid" alt="IBS"></a>
    <p>In Korea, there is one of the world's leading research groups focusing on discrete mathematics.
-->

</div>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: My from-scratch OS kernel that runs DOOM (279 pts)]]></title>
            <link>https://github.com/UnmappedStack/TacOS</link>
            <guid>43778081</guid>
            <pubDate>Thu, 24 Apr 2025 00:15:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/UnmappedStack/TacOS">https://github.com/UnmappedStack/TacOS</a>, See on <a href="https://news.ycombinator.com/item?id=43778081">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">TacOS</h2><a id="user-content-tacos" aria-label="Permalink: TacOS" href="#tacos"></a></p>
<p dir="auto">My from-scratch OS with it's own kernel written in C and assembly</p>
<p dir="auto">TacOS is a UNIX-like kernel which is able to run DOOM, among various other smaller userspace programs. It has things like a VFS, scheduler, TempFS, devices, context switching, virtual memory management, physical page frame allocation, and a port of Doom. It runs both on real hardware (tested on my laptop) and in the Qemu emulator.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/UnmappedStack/TacOS/blob/main/screenshots/screenshot1.webp"><img src="https://github.com/UnmappedStack/TacOS/raw/main/screenshots/screenshot1.webp" alt="A screenshot of TacOS's shell"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/UnmappedStack/TacOS/blob/main/screenshots/screenshot2.webp"><img src="https://github.com/UnmappedStack/TacOS/raw/main/screenshots/screenshot2.webp" alt="A screenshot of TacOS running DOOM"></a></p>
<p dir="auto">Please note that TacOS is a hobby toy OS and is not complete enough for real usage. It has multiple known bugs.</p>
<p dir="auto">I have a Discord server for PotatOS where I will share most updates, and you can also get help with your own OSDev project or just have a chat. You can join <a href="https://discord.gg/hPg9S2F2nD" rel="nofollow">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quickstart</h2><a id="user-content-quickstart" aria-label="Permalink: Quickstart" href="#quickstart"></a></p>
<p dir="auto">To build and run TacOS, simply run in your shell:</p>
<div data-snippet-clipboard-copy-content="git clone https://github.com/UnmappedStack/TacOS
cd TacOS
git clone https://github.com/limine-bootloader/limine
cd limine
git checkout v9.x-binary
make"><pre><code>git clone https://github.com/UnmappedStack/TacOS
cd TacOS
git clone https://github.com/limine-bootloader/limine
cd limine
git checkout v9.x-binary
make
</code></pre></div>
<p dir="auto">You'll need to have Qemu, NASM, and Clang installed. It will automatically run in the Qemu emulator.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">TacOS is under the Mozilla Public License 2.0. See <code>LICENSE</code> for more information.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[CubeCL: GPU Kernels in Rust for CUDA, ROCm, and WGPU (192 pts)]]></title>
            <link>https://github.com/tracel-ai/cubecl</link>
            <guid>43777731</guid>
            <pubDate>Wed, 23 Apr 2025 23:19:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/tracel-ai/cubecl">https://github.com/tracel-ai/cubecl</a>, See on <a href="https://news.ycombinator.com/item?id=43777731">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">
<p dir="auto"><h2 tabindex="-1" dir="auto">TL;DR</h2><a id="user-content-tldr" aria-label="Permalink: TL;DR" href="#tldr"></a></p>
<p dir="auto">With CubeCL, you can program your GPU using Rust, taking advantage of zero-cost abstractions to develop maintainable, flexible, and efficient compute kernels.
CubeCL currently fully supports functions, generics, and structs, with partial support for traits, methods and type inference.
As the project evolves, we anticipate even broader support for Rust language primitives, all while maintaining optimal performance.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Example</h3><a id="user-content-example" aria-label="Permalink: Example" href="#example"></a></p>
<p dir="auto">Simply annotate functions with the <code>cube</code> attribute to indicate that they should run on the GPU.</p>
<div dir="auto" data-snippet-clipboard-copy-content="use cubecl::prelude::*;

#[cube(launch_unchecked)]
/// A [Line] represents a contiguous series of elements where SIMD operations may be available.
/// The runtime will automatically use SIMD instructions when possible for improved performance.
fn gelu_array<F: Float>(input: &amp;Array<Line<F>>, output: &amp;mut Array<Line<F>>) {
    if ABSOLUTE_POS < input.len() {
        output[ABSOLUTE_POS] = gelu_scalar(input[ABSOLUTE_POS]);
    }
}

#[cube]
fn gelu_scalar<F: Float>(x: Line<F>) -> Line<F> {
    // Execute the sqrt function at comptime.
    let sqrt2 = F::new(comptime!(2.0f32.sqrt()));
    let tmp = x / Line::new(sqrt2);

    x * (Line::erf(tmp) + 1.0) / 2.0
}"><pre><span>use</span> cubecl<span>::</span>prelude<span>::</span><span>*</span><span>;</span>

<span>#<span>[</span>cube<span>(</span>launch_unchecked<span>)</span><span>]</span></span>
<span>/// A [Line] represents a contiguous series of elements where SIMD operations may be available.</span>
<span></span><span>/// The runtime will automatically use SIMD instructions when possible for improved performance.</span>
<span></span><span>fn</span> <span>gelu_array</span><span>&lt;</span><span>F</span><span>:</span> <span>Float</span><span>&gt;</span><span>(</span><span>input</span><span>:</span> <span>&amp;</span><span>Array</span><span>&lt;</span><span>Line</span><span>&lt;</span><span>F</span><span>&gt;</span><span>&gt;</span><span>,</span> <span>output</span><span>:</span> <span>&amp;</span><span>mut</span> <span>Array</span><span>&lt;</span><span>Line</span><span>&lt;</span><span>F</span><span>&gt;</span><span>&gt;</span><span>)</span> <span>{</span>
    <span>if</span> <span>ABSOLUTE_POS</span> &lt; input<span>.</span><span>len</span><span>(</span><span>)</span> <span>{</span>
        output<span>[</span><span>ABSOLUTE_POS</span><span>]</span> = <span>gelu_scalar</span><span>(</span>input<span>[</span><span>ABSOLUTE_POS</span><span>]</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>#<span>[</span>cube<span>]</span></span>
<span>fn</span> <span>gelu_scalar</span><span>&lt;</span><span>F</span><span>:</span> <span>Float</span><span>&gt;</span><span>(</span><span>x</span><span>:</span> <span>Line</span><span>&lt;</span><span>F</span><span>&gt;</span><span>)</span> -&gt; <span>Line</span><span>&lt;</span><span>F</span><span>&gt;</span> <span>{</span>
    <span>// Execute the sqrt function at comptime.</span>
    <span>let</span> sqrt2 = <span>F</span><span>::</span><span>new</span><span>(</span><span>comptime</span><span>!</span><span>(</span><span>2.0f32</span><span>.</span>sqrt<span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
    <span>let</span> tmp = x / <span>Line</span><span>::</span><span>new</span><span>(</span>sqrt2<span>)</span><span>;</span>

    x <span>*</span> <span>(</span><span>Line</span><span>::</span><span>erf</span><span>(</span>tmp<span>)</span> + <span>1.0</span><span>)</span> / <span>2.0</span>
<span>}</span></pre></div>
<p dir="auto">You can then launch the kernel using the autogenerated <code>gelu_array::launch_unchecked</code> function.</p>
<div dir="auto" data-snippet-clipboard-copy-content="pub fn launch<R: Runtime>(device: &amp;R::Device) {
    let client = R::client(device);
    let input = &amp;[-1., 0., 1., 5.];
    let vectorization = 4;
    let output_handle = client.empty(input.len() * core::mem::size_of::<f32>());
    let input_handle = client.create(f32::as_bytes(input));

    unsafe {
        gelu_array::launch_unchecked::<f32, R>(
            &amp;client,
            CubeCount::Static(1, 1, 1),
            CubeDim::new(input.len() as u32 / vectorization, 1, 1),
            ArrayArg::from_raw_parts::<f32>(&amp;input_handle, input.len(), vectorization as u8),
            ArrayArg::from_raw_parts::<f32>(&amp;output_handle, input.len(), vectorization as u8),
        )
    };

    let bytes = client.read_one(output_handle.binding());
    let output = f32::from_bytes(&amp;bytes);

    // Should be [-0.1587,  0.0000,  0.8413,  5.0000]
    println!(&quot;Executed gelu with runtime {:?} => {output:?}&quot;, R::name());
}"><pre><span>pub</span> <span>fn</span> <span>launch</span><span>&lt;</span><span>R</span><span>:</span> <span>Runtime</span><span>&gt;</span><span>(</span><span>device</span><span>:</span> <span>&amp;</span><span>R</span><span>::</span><span>Device</span><span>)</span> <span>{</span>
    <span>let</span> client = <span>R</span><span>::</span><span>client</span><span>(</span>device<span>)</span><span>;</span>
    <span>let</span> input = <span>&amp;</span><span>[</span>-<span>1.</span><span>,</span> <span>0.</span><span>,</span> <span>1.</span><span>,</span> <span>5.</span><span>]</span><span>;</span>
    <span>let</span> vectorization = <span>4</span><span>;</span>
    <span>let</span> output_handle = client<span>.</span><span>empty</span><span>(</span>input<span>.</span><span>len</span><span>(</span><span>)</span> <span>*</span> core<span>::</span>mem<span>::</span><span>size_of</span><span>::</span><span>&lt;</span><span>f32</span><span>&gt;</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>let</span> input_handle = client<span>.</span><span>create</span><span>(</span>f32<span>::</span><span>as_bytes</span><span>(</span>input<span>)</span><span>)</span><span>;</span>

    <span>unsafe</span> <span>{</span>
        gelu_array<span>::</span><span>launch_unchecked</span><span>::</span><span>&lt;</span><span>f32</span><span>,</span> <span>R</span><span>&gt;</span><span>(</span>
            <span>&amp;</span>client<span>,</span>
            <span>CubeCount</span><span>::</span><span>Static</span><span>(</span><span>1</span><span>,</span> <span>1</span><span>,</span> <span>1</span><span>)</span><span>,</span>
            <span>CubeDim</span><span>::</span><span>new</span><span>(</span>input<span>.</span><span>len</span><span>(</span><span>)</span> <span>as</span> <span>u32</span> / vectorization<span>,</span> <span>1</span><span>,</span> <span>1</span><span>)</span><span>,</span>
            <span>ArrayArg</span><span>::</span><span>from_raw_parts</span><span>::</span><span>&lt;</span><span>f32</span><span>&gt;</span><span>(</span><span>&amp;</span>input_handle<span>,</span> input<span>.</span><span>len</span><span>(</span><span>)</span><span>,</span> vectorization <span>as</span> <span>u8</span><span>)</span><span>,</span>
            <span>ArrayArg</span><span>::</span><span>from_raw_parts</span><span>::</span><span>&lt;</span><span>f32</span><span>&gt;</span><span>(</span><span>&amp;</span>output_handle<span>,</span> input<span>.</span><span>len</span><span>(</span><span>)</span><span>,</span> vectorization <span>as</span> <span>u8</span><span>)</span><span>,</span>
        <span>)</span>
    <span>}</span><span>;</span>

    <span>let</span> bytes = client<span>.</span><span>read_one</span><span>(</span>output_handle<span>.</span><span>binding</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>let</span> output = f32<span>::</span><span>from_bytes</span><span>(</span><span>&amp;</span>bytes<span>)</span><span>;</span>

    <span>// Should be [-0.1587,  0.0000,  0.8413,  5.0000]</span>
    <span>println</span><span>!</span><span>(</span><span>"Executed gelu with runtime {:?} =&gt; {output:?}"</span><span>,</span> <span>R</span><span>::</span>name<span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto">To see it in action, run the working GELU example with the following command:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cargo run --example gelu --features cuda # cuda runtime
cargo run --example gelu --features wgpu # wgpu runtime"><pre>cargo run --example gelu --features cuda <span><span>#</span> cuda runtime</span>
cargo run --example gelu --features wgpu <span><span>#</span> wgpu runtime</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Runtime</h2><a id="user-content-runtime" aria-label="Permalink: Runtime" href="#runtime"></a></p>
<p dir="auto">We support the following GPU runtimes:</p>
<ul dir="auto">
<li><a href="https://github.com/gfx-rs/wgpu">WGPU</a> for cross-platform GPU support (Vulkan, Metal, DirectX, WebGPU)</li>
<li><a href="https://developer.nvidia.com/cuda-toolkit" rel="nofollow">CUDA</a> for NVIDIA GPU support</li>
<li><a href="https://www.amd.com/en/products/software/rocm.html" rel="nofollow">ROCm/HIP</a> for AMD GPU support (WIP)</li>
</ul>
<p dir="auto">We also plan to develop an optimized JIT CPU runtime with SIMD instructions, leveraging <a href="https://cranelift.dev/" rel="nofollow">Cranelift</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Motivation</h2><a id="user-content-motivation" aria-label="Permalink: Motivation" href="#motivation"></a></p>
<p dir="auto">The goal of CubeCL is to ease the pain of writing highly optimized compute kernels that are portable across hardware.
There is currently no adequate solution when you want optimal performance while still being multi-platform.
You either have to write custom kernels for different hardware, often with different languages such as CUDA, Metal, or ROCm.
To fix this, we created a Just-in-Time compiler with three core features: <strong>automatic vectorization</strong>, <strong>comptime</strong>, and <strong>autotune</strong>!</p>
<p dir="auto">These features are extremely useful for anyone writing high-performance kernels, even when portability is not a concern.
They improve code composability, reusability, testability, and maintainability, all while staying optimal.
CubeCL also ships with a memory management strategy optimized for throughput with heavy buffer reuse to avoid allocations.</p>
<p dir="auto">Our goal extends beyond providing an optimized compute language; we aim to develop an ecosystem of high-performance and scientific computing in Rust.
To achieve this, we're developing linear algebra components that you can integrate into your own kernels.
We currently have an highly optimized matrix multiplication module, leveraging Tensor Cores on NVIDIA hardware where available, while gracefully falling back to basic instructions on other platforms.
While there's room for improvement, particularly in using custom instructions from newer NVIDIA GPUs, our implementation already delivers impressive performance.</p>
<p dir="auto">This is just the beginning.
We plan to include more utilities such as convolutions, random number generation, fast Fourier transforms, and other essential algorithms.
We are a small team also building <a href="https://burn.dev/" rel="nofollow">Burn</a>, so don't hesitate to contribute and port algorithms; it can help more than you would imagine!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How it works</h2><a id="user-content-how-it-works" aria-label="Permalink: How it works" href="#how-it-works"></a></p>
<p dir="auto">CubeCL leverages Rust's proc macro system in a unique two-step process:</p>
<ol dir="auto">
<li>Parsing: The proc macro parses the GPU kernel code using the syn crate.</li>
<li>Expansion: Instead of immediately generating an Intermediate Representation (IR), the macro generates a new Rust function.</li>
</ol>
<p dir="auto">The generated function, semantically similar to the original, is responsible for creating the IR when called.
This approach differs from traditional compilers, which typically generate IR directly after parsing.
Our method enables several key features:</p>
<ul dir="auto">
<li><strong>Comptime</strong>: By not transforming the original code, it becomes remarkably easy to integrate compile-time optimizations.</li>
<li><strong>Automatic Vectorization</strong>: By simply vectorizing the inputs of a CubeCL function, we can determine the vectorization factor of each intermediate variable during the expansion.</li>
<li><strong>Rust Integration</strong>: The generated code remains valid Rust code, allowing it to be bundled without any dependency on the specific runtime.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Design</h2><a id="user-content-design" aria-label="Permalink: Design" href="#design"></a></p>
<p dir="auto">CubeCL is designed around - you guessed it - Cubes! More specifically, it's based on cuboids, because not all axes are the same size.
Since all compute APIs need to map to the hardware, which are tiles that can be accessed using a 3D representation, our topology can easily be mapped to concepts from other APIs.</p>
<div dir="auto">
<p dir="auto"><h3 tabindex="-1" dir="auto">CubeCL - Topology</h3><a id="user-content-cubecl---topology" aria-label="Permalink: CubeCL - Topology" href="#cubecl---topology"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/tracel-ai/cubecl/blob/main/assets/cubecl.drawio.svg"><img src="https://github.com/tracel-ai/cubecl/raw/main/assets/cubecl.drawio.svg" width="100%"></a>
<br>
</p></div>

<p dir="auto"><em>A cube is composed of units, so a 3x3x3 cube has 27 units that can be accessed by their positions along the x, y, and z axes.
Similarly, a hyper-cube is composed of cubes, just as a cube is composed of units.
Each cube in the hyper-cube can be accessed by its position relative to the hyper-cube along the x, y, and z axes.
Hence, a hyper-cube of 3x3x3 will have 27 cubes.
In this example, the total number of working units would be 27 x 27 = 729.</em></p>
<details>
<summary>Topology Equivalence 👇</summary>

<p dir="auto">Since all topology variables are constant within the kernel entry point, we chose to use the Rust constant syntax with capital letters.
Often when creating kernels, we don't always care about the relative position of a unit within a cube along each axis, but often we only care about its position in general.
Therefore, each kind of variable also has its own axis-independent variable, which is often not present in other languages.</p>
<br>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>CubeCL</th>
<th>CUDA</th>
<th>WebGPU</th>
<th>Metal</th>
</tr>
</thead>
<tbody>
<tr>
<td>CUBE_COUNT</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
</tr>
<tr>
<td>CUBE_COUNT_X</td>
<td>gridDim.x</td>
<td>num_workgroups.x</td>
<td>threadgroups_per_grid.x</td>
</tr>
<tr>
<td>CUBE_COUNT_Y</td>
<td>gridDim.y</td>
<td>num_workgroups.y</td>
<td>threadgroups_per_grid.y</td>
</tr>
<tr>
<td>CUBE_COUNT_Z</td>
<td>gridDim.z</td>
<td>num_workgroups.z</td>
<td>threadgroups_per_grid.z</td>
</tr>
<tr>
<td>CUBE_POS</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
</tr>
<tr>
<td>CUBE_POS_X</td>
<td>blockIdx.x</td>
<td>workgroup_id.x</td>
<td>threadgroup_position_in_grid.x</td>
</tr>
<tr>
<td>CUBE_POS_Y</td>
<td>blockIdx.y</td>
<td>workgroup_id.y</td>
<td>threadgroup_position_in_grid.y</td>
</tr>
<tr>
<td>CUBE_POS_Z</td>
<td>blockIdx.z</td>
<td>workgroup_id.z</td>
<td>threadgroup_position_in_grid.z</td>
</tr>
<tr>
<td>CUBE_DIM</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
</tr>
<tr>
<td>CUBE_DIM_X</td>
<td>blockDim.x</td>
<td>workgroup_size.x</td>
<td>threads_per_threadgroup.x</td>
</tr>
<tr>
<td>CUBE_DIM_Y</td>
<td>blockDim.y</td>
<td>workgroup_size.y</td>
<td>threads_per_threadgroup.y</td>
</tr>
<tr>
<td>CUBE_DIM_Z</td>
<td>blockDim.z</td>
<td>workgroup_size.z</td>
<td>threads_per_threadgroup.z</td>
</tr>
<tr>
<td>UNIT_POS</td>
<td>N/A</td>
<td>local_invocation_index</td>
<td>thread_index_in_threadgroup</td>
</tr>
<tr>
<td>UNIT_POS_X</td>
<td>threadIdx.x</td>
<td>local_invocation_id.x</td>
<td>thread_position_in_threadgroup.x</td>
</tr>
<tr>
<td>UNIT_POS_Y</td>
<td>threadIdx.y</td>
<td>local_invocation_id.y</td>
<td>thread_position_in_threadgroup.y</td>
</tr>
<tr>
<td>UNIT_POS_Z</td>
<td>threadIdx.z</td>
<td>local_invocation_id.z</td>
<td>thread_position_in_threadgroup.z</td>
</tr>
<tr>
<td>PLANE_POS</td>
<td>N/A</td>
<td>subgroup_id</td>
<td>simdgroup_index_in_threadgroup</td>
</tr>
<tr>
<td>PLANE_DIM</td>
<td>warpSize</td>
<td>subgroup_size</td>
<td>threads_per_simdgroup</td>
</tr>
<tr>
<td>UNIT_POS_PLANE</td>
<td>N/A</td>
<td>subgroup_invocation_id</td>
<td>thread_index_in_simdgroup</td>
</tr>
<tr>
<td>ABSOLUTE_POS</td>
<td>N/A</td>
<td>N/A</td>
<td>N/A</td>
</tr>
<tr>
<td>ABSOLUTE_POS_X</td>
<td>N/A</td>
<td>global_id.x</td>
<td>thread_position_in_grid.x</td>
</tr>
<tr>
<td>ABSOLUTE_POS_Y</td>
<td>N/A</td>
<td>global_id.y</td>
<td>thread_position_in_grid.y</td>
</tr>
<tr>
<td>ABSOLUTE_POS_Z</td>
<td>N/A</td>
<td>global_id.z</td>
<td>thread_position_in_grid.z</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
</details>
<p dir="auto"><h2 tabindex="-1" dir="auto">Special Features</h2><a id="user-content-special-features" aria-label="Permalink: Special Features" href="#special-features"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Automatic Vectorization</h3><a id="user-content-automatic-vectorization" aria-label="Permalink: Automatic Vectorization" href="#automatic-vectorization"></a></p>
<p dir="auto">High-performance kernels should rely on SIMD instructions whenever possible, but doing so can quickly get pretty complicated!
With CubeCL, you can specify the vectorization factor of each input variable when launching a kernel.
Inside the kernel code, you still use only one type, which is dynamically vectorized and supports automatic broadcasting.
The runtimes are able to compile kernels and have all the necessary information to use the best instruction!
However, since the algorithmic behavior may depend on the vectorization factor, CubeCL allows you to access it directly in the kernel when needed, without any performance loss, using the comptime system!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Comptime</h3><a id="user-content-comptime" aria-label="Permalink: Comptime" href="#comptime"></a></p>
<p dir="auto">CubeCL isn't just a new compute language: though it feels like you are writing GPU kernels, you are, in fact, writing compiler plugins that you can fully customize!
Comptime is a way to modify the compiler IR at runtime when compiling a kernel for the first time.</p>
<p dir="auto">This enables lots of optimizations and flexibility without having to write many separate variants of the same kernels to ensure maximal performance.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Feature</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Instruction Specialization</strong></td>
<td>Not all instructions are available on all hardware, but when a specialized one exists, it should be enabled with a simple if statement.</td>
</tr>
<tr>
<td><strong>Automatic Vectorization</strong></td>
<td>When you can use SIMD instructions, you should! But since not all hardware supports the same vectorization factors, it can be injected at runtime!</td>
</tr>
<tr>
<td><strong>Loop Unrolling</strong></td>
<td>You may want multiple flavors of the same kernel, with loop unrolling for only a certain range of values. This can be configured easily with Comptime.</td>
</tr>
<tr>
<td><strong>Shape Specialization</strong></td>
<td>For deep learning kernels, it's often crucial to rely on different kernels for different input sizes; you can do it by passing the shape information as Comptime values.</td>
</tr>
<tr>
<td><strong>Compile Time Calculation</strong></td>
<td>In general, you can calculate a constant using Rust runtime properties and inject it into a kernel during its compilation, to avoid recalculating it during each execution.</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h3 tabindex="-1" dir="auto">Autotuning</h3><a id="user-content-autotuning" aria-label="Permalink: Autotuning" href="#autotuning"></a></p>
<p dir="auto">Autotuning drastically simplifies kernel selection by running small benchmarks at runtime to figure out the best kernels with the best configurations to run on the current hardware; an essential feature for portability.
This feature combines gracefully with comptime to test the effect of different comptime values on performance; sometimes it can be surprising!</p>
<p dir="auto">Even if the benchmarks may add some overhead when running the application for the first time, the information gets cached on the device and will be reused.
It is usually a no-brainer trade-off for throughput-oriented programs such as deep learning models.
You can even ship the autotune cache with your program, reducing cold start time when you have more control over the deployment target.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Resource</h2><a id="user-content-resource" aria-label="Permalink: Resource" href="#resource"></a></p>
<p dir="auto">For now we don't have a lot of resources to learn, but you can look at the <a href="https://github.com/tracel-ai/cubecl/blob/main/crates/cubecl-linalg/README.md">linear algebra library</a> to see how CubeCL can be used.
If you have any questions or want to contribute, don't hesitate to join the <a href="https://discord.gg/KSBSPhAUCc" rel="nofollow">Discord</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Disclaimer &amp; History</h2><a id="user-content-disclaimer--history" aria-label="Permalink: Disclaimer &amp; History" href="#disclaimer--history"></a></p>
<p dir="auto">CubeCL is currently in <strong>alpha</strong>.</p>
<p dir="auto">While CubeCL is used in <a href="https://burn.dev/" rel="nofollow">Burn</a>, there are still a lot of rough edges; it isn't refined yet.
The project started as a WebGPU-only backend for Burn.
As we optimized it, we realized that we needed an intermediate representation (IR) that could be optimized then compiled to WGSL.
Having an IR made it easy to support another compilation target, so we made a CUDA runtime.
However, writing kernels directly in that IR wasn't easy, so we created a Rust frontend using the <a href="https://github.com/dtolnay/syn">syn</a> crate.
Navigating the differences between CUDA and WebGPU, while leveraging both platforms, forced us to come up with general concepts that worked everywhere.
Hence, CubeCL was born!</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Yagri: You are gonna read it (289 pts)]]></title>
            <link>https://www.scottantipa.com/yagri</link>
            <guid>43776967</guid>
            <pubDate>Wed, 23 Apr 2025 21:47:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.scottantipa.com/yagri">https://www.scottantipa.com/yagri</a>, See on <a href="https://news.ycombinator.com/item?id=43776967">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
        
        <p><b>April, 2025</b></p>

        <p>
            YAGNI, or, <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">You aren't gonna need it</a>,
            is a standard piece of advice that warns against over engineering
            and building too many features too early. I think its great and saves you from wasting time, which
            can kill a project.
        </p>

        <p>
            However, there's an exception that I call YAGRI, or, "You are gonna read it". It means that you shouldn't just store
            the minimum
            data required to satisfy the current product spec. You should also store data that you'll highly likely use (read),
            such as timestamps and contextual metadata.
        </p>

        <p>
            This problem tends to happen when a UI design shows that you only need to display a few specific bits of data to the
            user,
            so you only store those exact fields in the database. You've satisfied the design and ship it. Then later you realize
            you're missing valuable information to help debug an issue, do internal analytics, etc.
        </p>

        <p>
            As an example, this commonly occurs when implementing a feature to let users delete something. The easy way
            is to just
            delete the row from the database, and maybe that's all that the current UI design call for.
            In this situation, regardless of the requested feature set, as engineers we should maintain good data standards
            and store:
        </p>
        <ul>
            <li>who deleted it</li>
            <li>how they deleted it (with what permission)</li>
            <li>when</li>
            <li>why (surrounding context, if possible)</li>
        </ul>

        <p>
            In general, these are some useful fields to store on almost any table:
        </p>
        <ul>
            <li>created_at</li>
            <li>updated_at</li>
            <li>deleted_at (soft deletes)</li>
            <li>created_by etc</li>
            <li>permission used during CRUD</li>
        </ul>

        <p>
            This practice will pay off with just a single instance of your boss popping into a meeting and going "wait
            do we know why that thing was deleted, the customer is worried...".
            
        </p>
        <p>
            However, not every one of these fields that you store will end up serving a purpose. But maybe just a single
            field on a single table will save you one day, and that makes up for the costs of implementing a dozen others.
            Most of the apps we build, at the end of the day, are about storing data to keep track of facts.            
            It's quite possibly your most important job as an engineer to steward and maintain this data.
        </p>

        <p>
            Of course you can go too far in the other direction. You shouldnt just log everything.
            But I've never heard someone complain about a table having too many timestamps.
        </p>
                
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google blocked Motorola use of Perplexity AI, witness says (236 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2025-04-23/perplexity-executive-says-google-blocked-motorola-s-use-of-ai-assistant</link>
            <guid>43776512</guid>
            <pubDate>Wed, 23 Apr 2025 20:52:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2025-04-23/perplexity-executive-says-google-blocked-motorola-s-use-of-ai-assistant">https://www.bloomberg.com/news/articles/2025-04-23/perplexity-executive-says-google-blocked-motorola-s-use-of-ai-assistant</a>, See on <a href="https://news.ycombinator.com/item?id=43776512">Hacker News</a></p>
Couldn't get https://www.bloomberg.com/news/articles/2025-04-23/perplexity-executive-says-google-blocked-motorola-s-use-of-ai-assistant: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Doge Worker's Code Supports NLRB Whistleblower (943 pts)]]></title>
            <link>https://krebsonsecurity.com/2025/04/doge-workers-code-supports-nlrb-whistleblower/</link>
            <guid>43776476</guid>
            <pubDate>Wed, 23 Apr 2025 20:48:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://krebsonsecurity.com/2025/04/doge-workers-code-supports-nlrb-whistleblower/">https://krebsonsecurity.com/2025/04/doge-workers-code-supports-nlrb-whistleblower/</a>, See on <a href="https://news.ycombinator.com/item?id=43776476">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
												<p>A whistleblower at the <strong>National Labor Relations Board</strong> (NLRB) alleged last week that denizens of Elon Musk’s <strong>Department of Government Efficiency</strong> (DOGE) siphoned gigabytes of data from the agency’s sensitive case files in early March. The whistleblower said accounts created for DOGE at the NLRB downloaded three code repositories from <strong>GitHub</strong>. Further investigation into one of those code bundles shows it is remarkably similar to a program published in January 2025 by <strong>Marko Elez</strong>, a 25-year-old DOGE employee who has worked at a number of Musk’s companies.</p>
<div id="attachment_71090"><p><a href="https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds.png" target="_blank" rel="noopener"><img aria-describedby="caption-attachment-71090" decoding="async" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds.png" alt="" width="748" height="323" srcset="https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds.png 1287w, https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds-768x331.png 768w, https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds-782x337.png 782w" sizes="(max-width: 748px) 100vw, 748px"></a></p><p id="caption-attachment-71090">A screenshot shared by NLRB whistleblower Daniel Berulis shows three downloads from GitHub.</p></div>
<p>According to <a href="https://krebsonsecurity.com/2025/04/whistleblower-doge-siphoned-nlrb-case-data/" target="_blank" rel="noopener">a whistleblower complaint</a> filed last week by&nbsp;<strong>Daniel J. Berulis</strong>, a 38-year-old security architect at the NLRB, officials from DOGE met with NLRB leaders on March 3 and demanded the creation of several&nbsp;all-powerful “tenant admin” accounts that were to be exempted from network logging activity that would otherwise keep a detailed record of all actions taken by those accounts.</p>
<p>Berulis said the new DOGE accounts had unrestricted permission to read, copy, and alter information contained in NLRB databases. The new accounts also could restrict log visibility, delay retention, route logs elsewhere, or even remove them entirely — top-tier user privileges that neither Berulis nor his boss possessed.</p>
<p>Berulis said he discovered one of the DOGE accounts had downloaded three external code libraries from <strong>GitHub</strong> that neither NLRB nor its contractors ever used. A “readme” file in one of the code bundles explained it was created to rotate connections through a large pool of cloud Internet addresses that serve “<em>as a proxy to generate pseudo-infinite IPs for web scraping and brute forcing</em>.” Brute force attacks involve automated login attempts that try many credential combinations in rapid sequence.</p>
<p>A search on that description in Google brings up a code repository at GitHub for a user with the account name “<strong>Ge0rg3</strong>” who published a program roughly four years ago called “<a href="https://github.com/Ge0rg3/requests-ip-rotator" target="_blank" rel="noopener">requests-ip-rotator</a>,” described as a library that will allow the user “to bypass IP-based rate-limits for sites and services.”</p>
<div id="attachment_71091"><p><img aria-describedby="caption-attachment-71091" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/ge0rge-gh.png" alt="" width="749" height="543" srcset="https://krebsonsecurity.com/wp-content/uploads/2025/04/ge0rge-gh.png 1171w, https://krebsonsecurity.com/wp-content/uploads/2025/04/ge0rge-gh-768x557.png 768w, https://krebsonsecurity.com/wp-content/uploads/2025/04/ge0rge-gh-782x568.png 782w" sizes="(max-width: 749px) 100vw, 749px"></p><p id="caption-attachment-71091">The README file from the GitHub user Ge0rg3’s page for requests-ip-rotator includes the exact wording of a program the whistleblower said was downloaded by one of the DOGE users. Marko Elez created an offshoot of this program in January 2025.</p></div>
<p>“A Python library to utilize AWS API Gateway’s large IP pool as a proxy to generate pseudo-infinite IPs for web scraping and brute forcing,” the description reads.</p>
<p>Ge0rg3’s code is “open source,” in that anyone can copy it and reuse it non-commercially. As it happens, there is a newer version of this project that was derived or “forked” from Ge0rg3’s code — called “<a href="https://github.com/markoelez/async-ip-rotator/blob/master/README.md" target="_blank" rel="noopener">async-ip-rotator</a>” — and it was committed to GitHub in January 2025 by DOGE captain <a href="https://github.com/markoelez" target="_blank" rel="noopener">Marko Elez</a>.</p>
<div id="attachment_71085"><p><a href="https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh.png" target="_blank" rel="noopener"><img aria-describedby="caption-attachment-71085" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh.png" alt="" width="750" height="492" srcset="https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh.png 1150w, https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh-768x504.png 768w, https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh-782x513.png 782w" sizes="(max-width: 750px) 100vw, 750px"></a></p><p id="caption-attachment-71085">The whistleblower stated that one of the GitHub files downloaded by the DOGE employees who transferred sensitive files from an NLRB case database was an archive whose README file read: “Python library to utilize AWS API Gateway’s large IP pool as a proxy to generate pseudo-infinite IPs for web scraping and brute forcing.” Elez’s code pictured here was forked in January 2025 from a code library that shares the same description.</p></div>
<p>A key DOGE staff member who gained access to the Treasury Department’s central payments system, Elez has worked for a number of Musk companies, including <strong>X</strong>, <strong>SpaceX</strong>, and <strong>xAI</strong>. Elez was among the first DOGE employees to face public scrutiny, after <strong>The Wall Street Journal</strong> <a href="https://www.wsj.com/tech/doge-staffer-resigns-over-racist-posts-d9f11a93" target="_blank" rel="noopener">linked him to social media posts</a> that advocated racism and eugenics.</p>
<p>Elez resigned after that brief scandal, but was rehired after President Donald Trump and Vice President JD Vance expressed support for him. <strong>Politico</strong> <a href="https://www.politico.com/news/2025/03/29/doge-marco-elez-software-engineer-us-payroll-00259303" target="_blank" rel="noopener">reports</a> Elez is now a <strong>Labor Department</strong> aide detailed to multiple agencies, including the <strong>Department of Health and Human Services</strong>.</p>
<p>“During Elez’s initial stint at Treasury, he violated the agency’s information security policies by sending a spreadsheet containing names and payments information to officials at the General Services Administration,” Politico wrote, citing court filings.</p>
<p>KrebsOnSecurity sought comment from both the NLRB and DOGE, and will update this story if either responds.<span id="more-71075"></span></p>
<p>The NLRB has been effectively hobbled since <strong>President Trump</strong> fired three board members, leaving the agency without the quorum it needs to function. Both&nbsp;<strong>Amazon</strong>&nbsp;and Musk’s&nbsp;<strong>SpaceX</strong>&nbsp;have&nbsp;<a href="https://apnews.com/article/amazon-nlrb-unconstitutional-spacex-elon-musk-ab42977117d883e97110a7bf8e8b257f" target="_blank" rel="noopener">been suing</a>&nbsp;the NLRB over complaints the agency filed in disputes about workers’ rights and union organizing, arguing that the NLRB’s very existence is unconstitutional. On March 5, a U.S. appeals court&nbsp;<a href="https://www.reuters.com/legal/government/musks-spacex-loses-early-legal-challenge-us-labor-boards-powers-2025-03-05/" target="_blank" rel="noopener">unanimously rejected</a>&nbsp;Musk’s claim that the NLRB’s structure somehow violates the Constitution.</p>
<p>Berulis’s complaint alleges the DOGE accounts at NLRB downloaded more than 10 gigabytes of data from the agency’s case files, a database that includes reams of sensitive records including information about employees who want to form unions and proprietary business documents. Berulis said he went public after higher-ups at the agency told him not to report the matter to the US-CERT, as they’d previously agreed.</p>
<p>Berulis told KrebsOnSecurity he worried the unauthorized data transfer by DOGE could unfairly advantage defendants in a number of ongoing labor disputes before the agency.</p>
<p>“If any company got the case data that would be an unfair advantage,” Berulis said. “They could identify and fire employees and union organizers without saying why.”</p>
<div id="attachment_71106"><p><img aria-describedby="caption-attachment-71106" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/markoelez.png" alt="" width="444" height="515"></p><p id="caption-attachment-71106">Marko Elez, in a photo from a social media profile.</p></div>
<p>Berulis said the other two GitHub archives that DOGE employees downloaded to NLRB systems included <strong>Integuru</strong>, a software framework designed to reverse engineer application programming interfaces (APIs) that websites use to fetch data; and a “headless” browser called <strong>Browserless</strong>, which is made for automating web-based tasks that require a pool of browsers, such as web scraping and automated testing.</p>
<p>On February 6, someone <a href="https://github.com/markoelez/async-ip-rotator/issues/1" target="_blank" rel="noopener">posted a lengthy and detailed critique</a> of Elez’s code on the GitHub “issues” page for async-ip-rotator, calling it “insecure, unscalable and a fundamental engineering failure.”</p>
<p>“If this were a side project, it would just be bad code,” the reviewer wrote. “But if this is representative of how you build production systems, then there are much larger concerns. This implementation is fundamentally broken, and if anything similar to this is deployed in an environment handling sensitive data, it should be audited immediately.”</p>
<p>Further reading:&nbsp;<a href="https://whistlebloweraid.org/wp-content/uploads/2025/04/2025_0414_Berulis-Disclosure-with-Exhibits.s.pdf" target="_blank" rel="noopener">Berulis’s complaint</a>&nbsp;(PDF).</p>
											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[You Wouldn't Steal a Font (1259 pts)]]></title>
            <link>https://fedi.rib.gay/notes/a6xqityngfubsz0f</link>
            <guid>43775926</guid>
            <pubDate>Wed, 23 Apr 2025 19:42:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fedi.rib.gay/notes/a6xqityngfubsz0f">https://fedi.rib.gay/notes/a6xqityngfubsz0f</a>, See on <a href="https://news.ycombinator.com/item?id=43775926">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="splash"><p><img id="splashIcon" src="https://fedi.rib.gay/static-assets/splash.png?1745440201643"><span id="splashText">Loading...</span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[First Successful Lightning Triggering and Guiding Using a Drone (180 pts)]]></title>
            <link>https://group.ntt/en/newsrelease/2025/04/18/250418a.html</link>
            <guid>43775766</guid>
            <pubDate>Wed, 23 Apr 2025 19:24:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://group.ntt/en/newsrelease/2025/04/18/250418a.html">https://group.ntt/en/newsrelease/2025/04/18/250418a.html</a>, See on <a href="https://news.ycombinator.com/item?id=43775766">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

                
                <p>News Highlights:</p>
<!-- [/c-txt-2] -->

<div>
<ol>
    <li><span>◆</span>We have achieved the world's first successful lightning triggering and guiding using a drone by harnessing electric field fluctuations.</li>
    <li><span>◆</span>We developed and validated a lightning protection cage design that prevents malfunction or damage even when the drone is struck directly by lightning. This design can also be implemented on commercial drones.</li>
    <li><span>◆</span>In the future, we aim to protect cities and infrastructure with "lightning drones," working toward a society free from lightning-related damage.</li>
</ol>
</div>
<!-- [/c-txt-list-1] -->

<p><span>TOKYO - April 18, 2025 - </span>NTT Corporation (Headquarters: Chiyoda, Tokyo; President and CEO: Akira Shimada; hereinafter "NTT") has become the first in the world to successfully trigger and guide lightning using a drone. This experiment also demonstrated, under natural lightning conditions, the effectiveness of both the drone's lightning protection technology and the electric field-based lightning triggering method. These results are expected to contribute to further research on the still-mysterious mechanisms of lightning and to help reduce lightning-related damage to cities and people.</p>
<!-- [/c-box-1] -->

<h3>Background</h3>
<!-- [/c-ttl-2] -->

<p>Lightning strikes are one of the most destructive natural phenomena affecting human society. While the NTT Group has implemented various lightning protection measures for critical infrastructure—including telecommunications facilities—lightning-related damage remains a persistent issue. In Japan alone, the estimated annual cost of lightning damage ranges from 100 to 200 billion yen<sup>1</sup>. Building on its long-standing expertise in protecting communications equipment from lightning, NTT is now working to advance this technology further, with the aim of eliminating lightning strikes on infrastructure and urban areas altogether.<br>
　Traditionally, lightning protection has relied heavily on lightning rods. However, their protective range is limited, and in some cases—such as wind turbines or outdoor event venues—it may not be feasible to install them. At NTT, we are exploring the use of rapidly advancing drone technology to create a new approach: "drone-triggered lightning"<sup>2</sup>. This method involves flying drones into optimal positions beneath thunderclouds to actively trigger lightning strikes, and then guiding the discharge safely away from vulnerable areas.</p>
<!-- [/c-txt-1] -->

<h3>Overview and Key Findings of the Experiment</h3>
<!-- [/c-ttl-2] -->

<p>From December 2024 to January 2025, a lightning-triggering experiment using drones was conducted at an elevation of 900 meters in a mountainous area of Hamada City, Shimane Prefecture. In this experiment, a device called a field mill<sup>3</sup> was used to monitor the electric field at ground level. When the electric field strength increased due to the approach of a thundercloud, a drone equipped with a custom-designed lightning protection cage was launched to attempt lightning triggering (Figure 1).</p>
<!-- [/c-txt-1] -->

<p>
    <img src="https://group.ntt/en/newsrelease/2025/04/18/img/250418aa.jpg" alt="Figure 1 Lightning Protection Drone">
    <span><span><span>Figure 1 </span><span>Lightning Protection Drone</span></span></span>
</p>
<!-- [/c-img-4] -->

<p>On December 13, 2024, during the approach of a thundercloud, the electric field strength observed by the field mill increased. At that moment, a drone equipped with a conductive wire was flown to an altitude of 300 meters. The drone was then electrically connected to the ground via a switch installed on the ground (Figure 2). As a result, a large current was observed flowing through the wire, accompanied by a significant change in the surrounding electric field strength (Figure 3).<br>
　Just before the lightning strike, it was confirmed that a voltage of over 2000 volts had developed between the wire and the ground. This rapid increase in local electric field strength triggered a lightning strike directed at the drone. This marks the first successful case in the world of triggering lightning using a drone.<br>
　At the moment of the strike, a loud cracking sound was heard, a flash was observed at the winch, and partial melting occurred in the drone's lightning protection cage (Figure 4). However, the drone equipped with the protective cage continued to fly stably even after the lightning strike.</p>
<!-- [/c-txt-1] -->

<p>
    <img src="https://group.ntt/en/newsrelease/2025/04/18/img/250418ab.jpg" alt="Figure 2 Experimental Setup for Drone-Based Lightning Triggering">
    <span><span><span>Figure 2 </span><span>Experimental Setup for Drone-Based Lightning Triggering</span></span></span>
</p>
<!-- [/c-img-4] -->

<p>
    <img src="https://group.ntt/en/newsrelease/2025/04/18/img/250418ac.jpg" alt="Figure 3 Observed Waveforms During Lightning Triggering">
    <span><span><span>Figure 3 </span><span>Observed Waveforms During Lightning Triggering</span></span></span>
</p>
<!-- [/c-img-4] -->

<p>
    <img src="https://group.ntt/en/newsrelease/2025/04/18/img/250418ad.jpg" alt="Figure 4 Flash Emission from the Winch During Lightning Triggering">
    <span><span><span>Figure 4 </span><span>Flash Emission from the Winch During Lightning Triggering</span></span></span>
</p>
<!-- [/c-img-4] -->

<h3>Technical Highlights</h3>
<!-- [/c-ttl-2] -->

<p>To successfully trigger lightning using a drone, the drone must remain operational even after being struck. Moreover, simply flying a drone under a thundercloud is not sufficient to attract lightning; an active triggering method is required. To address these challenges, we proposed and demonstrated the following two key technologies:</p>
<!-- [/c-txt-1] -->

<h4>(1) Lightning Protection Technology for Drones</h4>
<!-- [/c-ttl-3] -->

<p>We developed a lightning protection cage design that prevents malfunction or damage even if the drone is directly struck by lightning. This cage, which can be mounted on commercially available drones, is made of conductive metal and functions as a shield. It redirects the high current from the lightning strike away from the drone's internal components, preventing it from flowing through the drone itself. Additionally, the cage is designed to distribute the lightning current radially, which cancels out the strong magnetic fields generated by the current and minimizes electromagnetic interference with the drone (Figure 5).<br>
　Furthermore, we conducted artificial lightning tests on drones equipped with the lightning protection cage. The results showed that the system withstood artificial strikes of up to 150 kA—five times greater than the average natural lightning strike—without any malfunction or damage, covering over 98% of naturally occurring lightning conditions.</p>
<!-- [/c-txt-1] -->

<p>
    <img src="https://group.ntt/en/newsrelease/2025/04/18/img/250418ae.jpg" alt="Figure 5 Lightning Protection Design for High Current and Strong Magnetic Fields">
    <span><span><span>Figure 5 </span><span>Lightning Protection Design for High Current and Strong Magnetic Fields</span></span></span>
</p>
<!-- [/c-img-4] -->

<h4>(2) Electric Field–Based Lightning Triggering Technology</h4>
<!-- [/c-ttl-3] -->

<p>To actively trigger lightning, we devised a method in which a conductive wire connects the drone to the ground, with a high-voltage switch installed on the ground side. By operating this switch at the optimal moment, we can rapidly change the electric field around the drone. This sharp increase in local electric field strength encourages a lightning discharge to occur toward the drone (Figure 6).</p>
<!-- [/c-txt-1] -->

<p>
    <img src="https://group.ntt/en/newsrelease/2025/04/18/img/250418af.jpg" alt="Figure 6 Principle of Electric Field–Based Lightning Triggering Technology">
    <span><span><span>Figure 6 </span><span>Principle of Electric Field–Based Lightning Triggering Technology</span></span></span>
</p>
<!-- [/c-img-4] -->

<h3>Outlook</h3>
<!-- [/c-ttl-2] -->

<p>NTT aims to protect cities and people from lightning damage by flying drones—designed to withstand direct lightning strikes—to accurately predict lightning-prone locations, actively trigger strikes, and safely guide them away. To improve the success rate of drone-based lightning triggering, we will continue to advance research and development in two key areas: high-precision lightning location prediction and a deeper understanding of lightning mechanisms. In addition, we aim to not only trigger and control lightning, but also to harness its energy. Future efforts will focus on developing technologies for capturing and storing lightning energy for potential use (Figure 7).</p>
<!-- [/c-txt-1] -->

<p>
    <img src="https://group.ntt/en/newsrelease/2025/04/18/img/250418ag.jpg" alt="Figure 7 NTT's Vision: Protecting Cities from Lightning and Harnessing Its Energy Using Drones">
    <span><span><span>Figure 7 </span><span>NTT's Vision: Protecting Cities from Lightning and Harnessing Its Energy Using Drones</span></span></span>
</p>
<!-- [/c-img-4] -->

<h3>[Glossary]</h3>
<!-- [/c-ttl-2] -->

<p><sup>1</sup><span>The Institute of Electrical Engineers of Japan, Technical Report No. 902, 2002.</span></p>
<!-- [/c-txt-9] -->

<p><sup>2</sup><span>Lightning triggering: The active process of "initiating" lightning and "guiding" it safely to a target location.</span></p>
<!-- [/c-txt-9] -->

<p><sup>3</sup><span>Field mill: A device used to measure atmospheric electric fields.</span></p>
<!-- [/c-txt-9] -->

<h3>About NTT</h3>
<!-- [/c-ttl-2] -->

<p>NTT contributes to a sustainable society through the power of innovation. We are a leading global technology company providing services to consumers and businesses as a mobile operator, infrastructure, networks, applications, and consulting provider. Our offerings include digital business consulting, managed application services, workplace and cloud solutions, data center and edge computing, all supported by our deep global industry expertise. We are over $92B in revenue and 330,000 employees, with $3.6B in annual R&amp;D investments. Our operations span across 80+ countries and regions, allowing us to serve clients in over 190 of them. We serve over 75% of Fortune Global 100 companies, thousands of other enterprise and government clients and millions of consumers.</p>
<!-- [/c-txt-2] -->

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The hidden cost of AI coding (233 pts)]]></title>
            <link>https://terriblesoftware.org/2025/04/23/the-hidden-cost-of-ai-coding/</link>
            <guid>43775358</guid>
            <pubDate>Wed, 23 Apr 2025 18:44:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://terriblesoftware.org/2025/04/23/the-hidden-cost-of-ai-coding/">https://terriblesoftware.org/2025/04/23/the-hidden-cost-of-ai-coding/</a>, See on <a href="https://news.ycombinator.com/item?id=43775358">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<p><em>“The best moments in our lives are not the passive, receptive, relaxing times… The best moments usually occur if a person’s body or mind is stretched to its limits in a voluntary effort to accomplish something difficult and worthwhile.”</em> — Mihaly Csikszentmihalyi</p>
</blockquote>



<p>I know I’ve posted some upbeat content about AI before, <a href="https://terriblesoftware.org/2024/12/14/weve-been-here-before/">celebrating its potential</a> and <a href="https://terriblesoftware.org/2025/04/07/making-ai-actually-work-on-your-team/">encouraging teams to embrace these tools</a>. And honestly, I still believe in that future. But today I want to share something more personal, more nuanced — the one thing that currently worries me most about using AI for software development: <strong>lack of joy</strong>.</p>



<p>It’s easy to talk about productivity gains, competitive advantages, and how AI will reshape our industry. <a href="https://terriblesoftware.org/tag/ai/">We’ve had those conversations</a>. What’s harder to discuss is what might be lost along the way – something intangible but vital to many of us who chose this profession not just for the paycheck, but because we genuinely love the craft of programming.</p>



<hr>



<p>It’s 8:47 AM, fresh coffee steams on the table, and my headphones cocoon me in the perfect playlist. I go to Asana, where I know <em>exactly</em> what I need to do that day. I open Neovim and code starts <em>flowing</em> through me. I’ve lost the sense of time; I’m completely present in the moment.</p>



<p>That, my friends, is what I used to describe as a happy work day. I’m sure that some of you will resonate.</p>



<p>Those days I’d emerge tired but fulfilled. Something about the direct connection between thought and creation — where my fingers were simply the conduit for translating ideas into working software — felt almost transcendent. The struggle to solve problems, the small victories along the way, and the satisfaction of building something from nothing… these weren’t just aspects of the job; they were the reason I fell in love with programming in the first place.</p>



<p>This experience I’m describing is what psychologists call “flow” — a mental state where you’re fully immersed in an activity, energized by deep focus and complete involvement. First described by <a href="https://www.amazon.com/Flow-Psychology-Experience-Perennial-Classics/dp/0061339202/">Mihaly Csikszentmihalyi</a> (the psychologist I quoted at the beginning), flow is that sweet spot where challenge meets skill, where the task at hand is neither too easy (causing boredom) nor too difficult (causing anxiety). It’s a state strongly associated with creativity, productivity, and most importantly — happiness. For software developers, it’s that magical zone where problems become puzzles rather than obstacles, where hours pass like minutes, and where the boundary between you and your code seems to dissolve.</p>



<p>Fast forward to today, and that joy of coding is decreasing rapidly. Well, I’m a manager these days, so there’s that… But even when I do get technical, I usually just open Cursor and prompt my way out of 90% of it. It’s way more productive, but more passive as well.</p>



<p>Instead of that deep immersion where I’d craft each function, I’m now more like a <em>curator</em>? I describe what I want, evaluate what the AI gives me, tweak the prompts, and iterate. It’s efficient, yes. Revolutionary, even. But something essential feels missing — that state of flow where time vanishes and you’re completely absorbed in creation. If this becomes the dominant workflow across teams, do we risk an industry full of highly productive yet strangely detached developers?</p>



<hr>



<p>So that’s what I’m worried about, and honestly, I have no idea what to think of it. On one hand, it’s clear to me that people using AI tools <em>are</em> more productive. On the other hand, I worry about long-term happiness and joy in their craft when they’re simply hitting tab to generate code rather than writing it themselves.</p>



<p>When we outsource the parts of programming that used to demand our complete focus and creativity, do we also outsource the opportunity for satisfaction? Can we find the same fulfillment in prompt engineering that we once found in problem-solving through code?</p>



<p>Perhaps what we need is a new understanding of where happiness can exist in this AI-augmented world. Maybe the joy doesn’t have to disappear completely — it just shifts. Instead of finding delight in writing the perfect algorithm, perhaps we’ll discover satisfaction in the higher-level thinking about system design, in the creative process of describing exactly what we want to build, or in the human aspects of software development that AI can’t touch.</p>



<p>I don’t have all the answers. But maybe, just maybe, we need to be intentional about preserving (some) spaces in our work where flow can still happen — where we still code by hand sometimes, not because it’s efficient, but because it make us happy.</p>



<p>After all, if we lose the joy in our craft, what exactly are we optimizing for?</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sail-Trim Simulator (131 pts)]]></title>
            <link>https://simulator.atterwind.info/</link>
            <guid>43775283</guid>
            <pubDate>Wed, 23 Apr 2025 18:36:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simulator.atterwind.info/">https://simulator.atterwind.info/</a>, See on <a href="https://news.ycombinator.com/item?id=43775283">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <a href="https://github.com/flyinggorilla/simulator.atterwind.info/wiki/Wind-Basics" target="_blank"><h2>Wind Basics</h2></a><p>
            Learn and get a better mental model about wind-gradient, apparent-wind, sail-twist at changing speeds and course
            </p><a href="https://github.com/flyinggorilla/simulator.atterwind.info/wiki/Simulation" target="_blank"><h2>Simulator and Sail Trim</h2></a><p>
            Improve trimming through boat acceleration, especially in apparent wind high-performance sailing
            </p><a href="https://github.com/flyinggorilla/simulator.atterwind.info/wiki/Real-world-comparison" target="_blank"><h2>Real world comparison</h2></a><p>
            Comparison with real-world A-Class foiling catamaran DNA F1x trim settings
            </p><a href="https://github.com/flyinggorilla/simulator.atterwind.info/wiki/Usage" target="_blank"><h2>Simulator Usage</h2></a><p>
            Mouse, keyboard, touch and Weblink sharing
            </p><a href="https://github.com/flyinggorilla/simulator.atterwind.info/wiki"><h2>More info</h2></a><p>
            Source code and documentation on <a href="https://github.com/flyinggorilla/simulator.atterwind.info/wiki" target="_blank">Github</a>
        </p></div></div>]]></description>
        </item>
    </channel>
</rss>