<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 24 Mar 2024 17:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[TinySSH is a small SSH server using NaCl, TweetNaCl (176 pts)]]></title>
            <link>https://github.com/janmojzis/tinyssh</link>
            <guid>39806139</guid>
            <pubDate>Sun, 24 Mar 2024 10:04:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/janmojzis/tinyssh">https://github.com/janmojzis/tinyssh</a>, See on <a href="https://news.ycombinator.com/item?id=39806139">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h3 tabindex="-1" dir="auto">Introduction</h3><a id="user-content-introduction" aria-label="Permalink: Introduction" href="#introduction"></a></p>
<ul dir="auto">
<li>tinysshd is a minimalistic SSH server which implements only a subset of SSHv2 features.</li>
<li>tinysshd supports only secure cryptography (minimum 128-bit security, protected against cache-timing attacks)</li>
<li>tinysshd doesn't implement older crypto (such as RSA, DSA, HMAC-MD5, HMAC-SHA1, 3DES, RC4, ...)</li>
<li>tinysshd doesn't implement unsafe features (such as password or hostbased authentication)</li>
<li>tinysshd doesn't have features such: SSH1 protocol, compression, port forwarding, agent forwarding, X11 forwarding ...</li>
<li>tinysshd doesn't use dynamic memory allocation (no allocation failures, etc.)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Crypto primitives</h3><a id="user-content-crypto-primitives" aria-label="Permalink: Crypto primitives" href="#crypto-primitives"></a></p>
<ul dir="auto">
<li>State-of-the-art crypto: ssh-ed25519, curve25519-sha256, <a href="mailto:chacha20-poly1305@openssh.com">chacha20-poly1305@openssh.com</a></li>
<li>Older standard: <strike>ecdsa-sha2-nistp256, ecdh-sha2-nistp256, aes256-ctr, hmac-sha2-256</strike> removed in version 20190101</li>
<li>Postquantum crypto: <a href="mailto:sntrup761x25519-sha512@openssh.com">sntrup761x25519-sha512@openssh.com</a>, <a href="mailto:chacha20-poly1305@openssh.com">chacha20-poly1305@openssh.com</a></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Project timelime</h3><a id="user-content-project-timelime" aria-label="Permalink: Project timelime" href="#project-timelime"></a></p>
<ul dir="auto">
<li><strike>experimental: 2014.01.01 - 2014.12.31 (experimentation)</strike></li>
<li><strike>alpha(updated): 2015.01.01 - 2017.12.31 (not ready for production use, ready for testing)</strike></li>
<li>beta(updated): 2018.01.01 - ????.??.?? (ready for production use)</li>
<li>stable: expected ????.??.?? - (ready for production use - including post-quantum crypto)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Current release (20240101)</h3><a id="user-content-current-release-20240101" aria-label="Permalink: Current release (20240101)" href="#current-release-20240101"></a></p>
<ul dir="auto">
<li>has 63899 words of code</li>
<li>beta release</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">How-to run</h3><a id="user-content-how-to-run" aria-label="Permalink: How-to run" href="#how-to-run"></a></p>
<div data-snippet-clipboard-copy-content="       TCPSERVER
              tcpserver -HRDl0 0.0.0.0 22 /usr/sbin/tinysshd -v /etc/tinyssh/sshkeydir &amp;

       BUSYBOX
              busybox tcpsvd 0 22 tinysshd -v /etc/tinyssh/sshkeydir &amp;

       INETD
           /etc/inetd.conf:
               ssh stream tcp nowait root /usr/sbin/tinysshd tinysshd -l -v /etc/tinyssh/sshkeydir

       SYSTEMD
           tinysshd.socket:
               [Unit]
               Description=TinySSH server socket
               ConditionPathExists=!/etc/tinyssh/disable_tinysshd

               [Socket]
               ListenStream=22
               Accept=yes

               [Install]
               WantedBy=sockets.target

           tinysshd@.service:
               [Unit]
               Description=Tiny SSH server
               After=network.target auditd.service

               [Service]
               ExecStartPre=-/usr/sbin/tinysshd-makekey -q /etc/tinyssh/sshkeydir
               EnvironmentFile=-/etc/default/tinysshd
               ExecStart=/usr/sbin/tinysshd ${TINYSSHDOPTS} -- /etc/tinyssh/sshkeydir
               KillMode=process
               SuccessExitStatus=111
               StandardInput=socket
               StandardError=journal

               [Install]
               WantedBy=multi-user.target"><pre><code>       TCPSERVER
              tcpserver -HRDl0 0.0.0.0 22 /usr/sbin/tinysshd -v /etc/tinyssh/sshkeydir &amp;

       BUSYBOX
              busybox tcpsvd 0 22 tinysshd -v /etc/tinyssh/sshkeydir &amp;

       INETD
           /etc/inetd.conf:
               ssh stream tcp nowait root /usr/sbin/tinysshd tinysshd -l -v /etc/tinyssh/sshkeydir

       SYSTEMD
           tinysshd.socket:
               [Unit]
               Description=TinySSH server socket
               ConditionPathExists=!/etc/tinyssh/disable_tinysshd

               [Socket]
               ListenStream=22
               Accept=yes

               [Install]
               WantedBy=sockets.target

           tinysshd@.service:
               [Unit]
               Description=Tiny SSH server
               After=network.target auditd.service

               [Service]
               ExecStartPre=-/usr/sbin/tinysshd-makekey -q /etc/tinyssh/sshkeydir
               EnvironmentFile=-/etc/default/tinysshd
               ExecStart=/usr/sbin/tinysshd ${TINYSSHDOPTS} -- /etc/tinyssh/sshkeydir
               KillMode=process
               SuccessExitStatus=111
               StandardInput=socket
               StandardError=journal

               [Install]
               WantedBy=multi-user.target
</code></pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Linux Crisis Tools (458 pts)]]></title>
            <link>https://www.brendangregg.com/blog/2024-03-24/linux-crisis-tools.html</link>
            <guid>39804214</guid>
            <pubDate>Sun, 24 Mar 2024 00:51:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.brendangregg.com/blog/2024-03-24/linux-crisis-tools.html">https://www.brendangregg.com/blog/2024-03-24/linux-crisis-tools.html</a>, See on <a href="https://news.ycombinator.com/item?id=39804214">Hacker News</a></p>
<div id="readability-page-1" class="page"><div class="page">
	

	<div>
<!-- (this is for the blog) recent books: -->
<!-- <center><a href="https://informit.com/sale/booksgiving"><img border=0 width=180 src="/Images/booksgiving2021.jpg"></center><br><b>Book sale until Dec 1, 2021: 55% off for 2 or more</b></a><br><br> -->
<center><a href="https://www.brendangregg.com/systems-performance-2nd-edition-book.html"><img src="https://www.brendangregg.com/Images/sysperf2nd_bookcover_360.jpg" width="180"></a><br><span size="-2"><i><a href="https://www.brendangregg.com/systems-performance-2nd-edition-book.html">Systems Performance 2nd Ed.</a></i></span></center><center><a href="https://www.brendangregg.com/bpf-performance-tools-book.html"><img src="https://www.brendangregg.com/Images/bpfperftools_bookcover_360.jpg" width="180"></a><br><span size="-2"><i><a href="https://www.brendangregg.com/bpf-performance-tools-book.html">BPF Performance Tools book</a></i></span></center>
<!--
<br><center><a href="https://www.portal.reinvent.awsevents.com/connect/search.ww?#loadSearch-searchPhrase=OPN303&searchType=session&tc=0&sortBy=abbreviationSort&p="><img src="/Images/Speaker/reInvent2019_200.jpg" width=180" border=0></a><br><font size=-2><i>I'm speaking at <a href="https://www.portal.reinvent.awsevents.com/connect/search.ww?#loadSearch-searchPhrase=OPN303&searchType=session&tc=0&sortBy=abbreviationSort&p=">AWS re:Invent 2019</a></i></font></center>
-->
<p>
	Recent posts:</p><ul>
	  
		   <li>24 Mar 2024 »<br>
		   <a href="https://www.brendangregg.com/blog/2024-03-24/linux-crisis-tools.html">  
		   Linux Crisis Tools</a></li>
	  
		   <li>17 Mar 2024 »<br>
		   <a href="https://www.brendangregg.com/blog/2024-03-17/the-return-of-the-frame-pointers.html">  
		   The Return of the Frame Pointers</a></li>
	  
		   <li>10 Mar 2024 »<br>
		   <a href="https://www.brendangregg.com/blog/2024-03-10/ebpf-documentary.html">  
		   eBPF Documentary</a></li>
	  
		   <li>28 Apr 2023 »<br>
		   <a href="https://www.brendangregg.com/blog/2023-04-28/ebpf-security-issues.html">  
		   eBPF Observability Tools Are Not Security Tools</a></li>
	  
		   <li>01 Mar 2023 »<br>
		   <a href="https://www.brendangregg.com/blog/2023-03-01/computer-performance-future-2022.html">  
		   USENIX SREcon APAC 2022: Computing Performance: What's on the Horizon</a></li>
	  
		   <li>17 Feb 2023 »<br>
		   <a href="https://www.brendangregg.com/blog/2023-02-17/srecon-apac-2023.html">  
		   USENIX SREcon APAC 2023: CFP</a></li>
	  
		   <li>02 May 2022 »<br>
		   <a href="https://www.brendangregg.com/blog/2022-05-02/brendan-at-intel.html">  
		   Brendan@Intel.com</a></li>
	  
		   <li>15 Apr 2022 »<br>
		   <a href="https://www.brendangregg.com/blog/2022-04-15/netflix-farewell-1.html">  
		   Netflix End of Series 1</a></li>
	  
		   <li>09 Apr 2022 »<br>
		   <a href="https://www.brendangregg.com/blog/2022-04-09/tensorflow-library-performance.html">  
		   TensorFlow Library Performance</a></li>
	  
		   <li>19 Mar 2022 »<br>
		   <a href="https://www.brendangregg.com/blog/2022-03-19/why-dont-you-use.html">  
		   Why Don't You Use ...</a></li>
	  
		   <li>26 Sep 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-09-26/the-speed-of-time.html">  
		   The Speed of Time</a></li>
	  
		   <li>06 Sep 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-09-06/zfs-is-mysteriously-eating-my-cpu.html">  
		   ZFS Is Mysteriously Eating My CPU</a></li>
	  
		   <li>30 Aug 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-08-30/high-rate-of-paging.html">  
		   Analyzing a High Rate of Paging</a></li>
	  
		   <li>27 Aug 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-08-27/slack-crashes-secret-stderr.html">  
		   Slack's Secret STDERR Messages</a></li>
	  
		   <li>05 Jul 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-07-05/computing-performance-on-the-horizon.html">  
		   USENIX LISA2021 Computing Performance: On the Horizon</a></li>
	  
		   <li>03 Jul 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-07-03/how-to-add-bpf-observability.html">  
		   How To Add eBPF Observability To Your Product</a></li>
	  
		   <li>15 Jun 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-06-15/bpf-internals.html">  
		   USENIX LISA2021 BPF Internals (eBPF)</a></li>
	  
		   <li>04 Jun 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-06-04/an-unbelievable-demo.html">  
		   An Unbelievable Demo</a></li>
	  
		   <li>29 May 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-05-29/moving-to-australia.html">  
		   Moving my US tech job to Australia</a></li>
	  
		   <li>23 May 2021 »<br>
		   <a href="https://www.brendangregg.com/blog/2021-05-23/what-is-observability.html">  
		   What is Observability</a></li>
	  
	</ul>
	<p><a href="https://www.brendangregg.com/blog/index.html">Blog index</a><br>
	<a href="https://www.brendangregg.com/blog/about.html">About</a><br>
	<a href="https://www.brendangregg.com/blog/rss.xml">RSS</a></p><!--
	<br><center><a href="https://www.usenix.org/conference/lisa18"><img src="https://www.usenix.org/sites/default/files/lisa18_banner_join-me.png" width=180></a><br><font size=-2><i>I am program co-chair for LISA 2018</i></font></center>
-->
	</div>

        <div>
          

          
<p>24 Mar 2024</p>

<div>
<p>When you have an outage caused by a performance issue, you don't want to lose precious time just to install the tools needed to diagnose it. Here is a list of "crisis tools" I recommend installing on your Linux servers by default (if they aren't already), along with the (Ubuntu) package names that they come from:</p>

<ul><table>
<tbody><tr><th>Package</th><th>Provides</th><th>Notes</th></tr>
<tr><td>procps</td><td>ps(1), vmstat(8), uptime(1), top(1)</td><td>basic stats</td></tr>
<tr><td>util-linux</td><td>dmesg(1), lsblk(1), lscpu(1)</td><td>system log, device info</td></tr>
<tr><td>sysstat</td><td>iostat(1), mpstat(1), pidstat(1), sar(1)</td><td>device stats</td></tr>
<tr><td>iproute2</td><td>ip(8), ss(8), nstat(8), tc(8)</td><td>preferred net tools</td></tr>
<tr><td>numactl</td><td>numastat(8)</td><td>NUMA stats</td></tr>
<tr><td>tcpdump</td><td>tcpdump(8)</td><td>Network sniffer</td></tr>
<tr><td>linux-tools-common<br>linux-tools-$(uname -r)</td><td>perf(1), turbostat(8)</td><td>profiler and PMU stats</td></tr>
<tr><td>bpfcc-tools (bcc)</td><td>opensnoop(8), execsnoop(8), runqlat(8), softirqs(8),<br>hardirqs(8), ext4slower(8), ext4dist(8), biotop(8),<br>biosnoop(8), biolatency(8), tcptop(8), tcplife(8),<br>trace(8), argdist(8), funccount(8), profile(8), etc.</td><td>canned eBPF tools[1]</td></tr>
<tr><td>bpftrace</td><td>bpftrace, basic versions of opensnoop(8),<br>execsnoop(8), runqlat(8), biosnoop(8), etc.</td><td>eBPF scripting[1]</td></tr>
<tr><td>trace-cmd</td><td>trace-cmd(1)</td><td>Ftrace CLI</td></tr>
<tr><td>nicstat</td><td>nicstat(1)</td><td>net device stats</td></tr>
<tr><td>ethtool</td><td>ethtool(8)</td><td>net device info</td></tr>
<tr><td>tiptop</td><td>tiptop(1)</td><td>PMU/PMC top</td></tr>
<tr><td>cpuid</td><td>cpuid(1)</td><td>CPU details</td></tr>
<tr><td>msr-tools</td><td>rdmsr(8), wrmsr(8)</td><td>CPU digging</td></tr>
</tbody></table></ul>

<p>(This is based on Table 4.1 "Linux Crisis Tools" in <a href="https://www.brendangregg.com/systems-performance-2nd-edition-book.html">SysPerf 2</a>.)</p>

<ul><span size="-1">Some longer notes: [1] bcc and bpftrace have many overlapping tools: the bcc ones are more capable (e.g., CLI options), and the bpftrace ones can be edited on the fly. But that's not to say that one is better or faster than the other: They emit the same BPF bytecode and are equally fast once running. Also note that bcc is evolving and migrating tools from Python to libbpf C (with CO-RE and BTF) but we haven't reworked the package yet. In the future "bpfcc-tools" should get replaced with a much smaller "libbpf-tools" package that's just tool binaries.</span></ul>

<p>This list is a minimum. Some servers have accelerators and you'll want their analysis tools installed as well: e.g., on Intel GPU servers, the intel-gpu-tools package; on NVIDIA, nvidia-smi. Debugging tools, like gdb(1), can also be pre-installed for immediate use in a crisis.</p>

<p>Essential analysis tools like these don't change that often, so this list may only need updating every few years. If you think I missed a package that is important today, please let me know (e.g., in the comments).</p>

<p>The main downside of adding these packages is their on-disk size. On cloud instances, adding Mbytes to the base server image can add seconds, or fractions of a second, to instance deployment time. Fortunately the packages I've listed are mostly quite small (and bcc will get smaller) and should cost little size and time. I have seen this size concern prevent debuginfo (totaling around 1 Gbyte) from being included by default.</p>

<h2>Can't I just install them later when needed?</h2>

<p>Many problems can occur when trying to install software during a production crisis. I'll step through a made-up example that combines some of the things I've learned the hard way:</p>

<ul>
<li><strong>4:00pm</strong>: Alert! Your company's site goes down. No, some people say it's still up. Is it up? It's up but too slow to be usable.</li>
<li><strong>4:01pm</strong>: You look at your monitoring dashboards and a group of backend servers are abnormal. Is that high disk I/O? What's causing that?</li>
<li><strong>4:02pm</strong>: You SSH to one server to dig deeper, but SSH takes forever to login.</li>
<li><strong>4:03pm</strong>: You get a login prompt and type "iostat -xz 1" for basic disk stats to begin with. There is a long pause, and finally "Command 'iostat' not found...Try: sudo apt install sysstat". Ugh. Given how slow the system is, installing this package could take several minutes. You run the install command.</li>
<li><strong>4:07pm</strong>: The package install has failed as it can't resolve the repositories. Something is wrong with the /etc/apt configuration. Since the server owners are now in the SRE chatroom to help with the outage, you ask: "how do you install system packages?" They respond "We never do. We only update our app." Ugh. You find a different server and copy its working /etc/apt config over.</li>
<li><strong>4:10pm</strong>: You need to run "apt-get update" first with the fixed config, but it's miserably slow.</li>
<li><strong>4:12pm</strong>: ...should it really be taking this long??</li>
<li><strong>4:13pm</strong>: apt returned "failed: Connection timed out." Maybe this system is too slow with the performance issue? Or can't it connect to the repos? You begin network debugging and ask the server team: "Do you use a firewall?" They say they don't know, ask the network security team.</li>
<li><strong>4:17pm</strong>: The network security team have responded: Yes, they have blocked any unexpected traffic, including HTTP/HTTPS/FTP outbound apt requests. Gah. "Can you edit the rules right now?" "It's not that easy." "What about turning off the firewall completely?" "Uh, in an emergency, sure."</li>
<li><strong>4:20pm</strong>: The firewall is disabled. You run apt-get update again. It's slow, but works! Then apt-get install, and...permission errors. What!? I'm root, this makes no sense. You share your error in the SRE chatroom and someone points out: Didn't the platform security team make the system <em>immutable</em>?</li>
<li><strong>4:24pm</strong>: The platform security team are now in the SRE chatroom explaining that some parts of the file system can be written to, but others, especially for executable binaries, are blocked. Gah! "How do we disable this?" "You can't, that's the point. You'd have to create new server images with it disabled." </li>
<li><strong>4:27pm</strong>: By now the SRE team has announced a major outage and informed the executive team, who want regular status updates and an ETA for when it will be fixed. Status: Haven't done much yet.</li>
<li><strong>4:30pm</strong>: You start running "cat /proc/diskstats" as a rudimentary iostat(1), but have to spend time reading the Linux source (admin-guide/iostats.rst) to make sense of it. It just confirms the disks are busy which you knew anyway from the monitoring dashboard. You really need the disk and file system tracing tools, like biosnoop(8), but you can't install them either. Unless you can hack up rudimentary tracing tools as well...You "cd /sys/kernel/debug/tracing" and start looking for the FTrace docs.</li>
<li><strong>4:55pm</strong>: New server images finally launch with all writable file systems. You login – gee it's fast – and "apt-get install sysstat". Before you can even run iostat there are messages in the chatroom: "Website's back up! Thanks! What did you do?" "We restarted the servers but we haven't fixed anything yet." You have the feeling that the outage will return exactly 10 minutes after you've fallen asleep tonight.</li>
<li><strong>12:50am</strong>: Ping! I knew this would happen. You get out of bed and open your work laptop. The site is down – it's been hacked – someone disabled the firewall and file system security.</li>
</ul>

<p>I've fortunately not experienced the 12:50am event, but the others are based on real world experiences. In my prior job this sequence can often take a different turn: a "traffic team" may initiate a cloud region failover by about the 15 minute mark, so I'd eventually get iostat installed but then these systems would be idle.</p>

<h2>Default install</h2>

<p>The above scenario explains why you ideally want to pre-install crisis tools so you can start debugging a production issue quickly during an outage. Some companies already do this, and have OS teams that create custom server images with everything included. But there are many sites still running default versions of Linux that learn this the hard way. I'd recommend Linux distros add these crisis tools to their enterprise Linux variants, so that companies large and small can hit the ground running when performance outages occur.</p>

</div>



<br><hr>








          
        </div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[After 41 years, my first assembly program on my first computer, the Tomy Tutor (126 pts)]]></title>
            <link>http://oldvcr.blogspot.com/2024/03/after-41-years-my-first-assembly.html</link>
            <guid>39804204</guid>
            <pubDate>Sun, 24 Mar 2024 00:50:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://oldvcr.blogspot.com/2024/03/after-41-years-my-first-assembly.html">http://oldvcr.blogspot.com/2024/03/after-41-years-my-first-assembly.html</a>, See on <a href="https://news.ycombinator.com/item?id=39804204">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-7597842423603032498" itemprop="description articleBody"><p>
We got it in 1983, I think, so it only took me about 41 years to get around to it. This Tomy Tutor isn't a replacement system I secondarily acquired, nor is it a Ship of Theseus Frankenstein rebuild. This is my <em>actual</em> first computer, in its original case, on its original components, with the Federated Group sticker still on the original box. And it still works.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjQ9LAGVCfrBn9_Z9yd6t7kAwVbOM-W9wqL1piD8_IM2iqNqqcC33qajRNf7PkWXeMnUZboV7IU2_7mDwoAi7gTY-g_q5VhnlmrAWMeEtJ5O7oj76rNVl6nADng7TQeqdXAR45cpSfzgCiHo6cskJ0U1C-dSLvNA6EVZzSUBJE29Y7DTsNNCwzUIL1TKKs/s3648/PXL_20240309_211811231.jpg"><img alt="" data-original-height="2736" data-original-width="3648" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjQ9LAGVCfrBn9_Z9yd6t7kAwVbOM-W9wqL1piD8_IM2iqNqqcC33qajRNf7PkWXeMnUZboV7IU2_7mDwoAi7gTY-g_q5VhnlmrAWMeEtJ5O7oj76rNVl6nADng7TQeqdXAR45cpSfzgCiHo6cskJ0U1C-dSLvNA6EVZzSUBJE29Y7DTsNNCwzUIL1TKKs/s320/PXL_20240309_211811231.jpg" width="320"></a></p><p>

Now, why so long? Well, for one thing, it was only supposed to be a training wheels computer because a full Commodore 64 system would have cost too much, but my folks wanted to see whether we'd take to a home computer and <a href="https://www.youtube.com/watch?v=9N8AzoDzQhM">His High Holy Munificence Fred R. Rated</a> was blowing these babies out for a song by then. The receipt has long since disappeared, though $99 sounds about right plus maybe around $40 or so for a joystick, cassette deck and some cartridges, compared to somewhere between $200 and $300 for the recently discounted 64 — which didn't include anything else. (It tells you something about our family finances at the time when a C64 was too <em>expensive</em>.) I immediately started writing my own BASIC programs on it in its perverse little BASIC dialect and when my folks indeed saved up and bought us a C64 system the next year (complete with 1702 monitor and 1541 disk drive), I refused to use it. In </p><s>retaliation</s><p> my best interests, my parents forcibly relocated the Tomy to storage and I went on to do even bigger things on the Commodore, making it, not the Tutor, the defining computer of my childhood. That's why there's still <a href="http://oldvcr.blogspot.com/2023/05/refurb-weekend-commodore-128dcr.html">a Commodore 128DCR on my desk</a>.
</p><p>
The other reason is that there was never really a simple way to do it. Even when I found out what CPU was actually inside (incredibly a 16-bit TMS 9995, an evolved version of the TMS 9900 in the Texas Instruments 99/4 and 99/4A), there was never a Tomy assembler, and other than its small amount of scratchpad RAM (256 bytes) the entirety of the Tutor's 16K of memory is tied up in the 9918ANL VDP video chip. That sort of architecture was typical for the family, but that also means that almost everything is stored in non-executable VDP RAM, so short of burning your own cartridge EPROMs there's no way to actually create and run a machine language program on the Tutor. The first flashcart for the Tutor didn't exist until around 2016 and it was still all ROM; furthermore, while the 99/4A could have its CPU-addressable RAM expanded (as well as the 99/8, its unreleased successor to which the Tomy Tutor is closely related), there wasn't ever a Tutor RAM expansion cartridge either until very recently. But now there are multiple homebrew options even for obscure home computers like this one, and at last I've got my own assembly language program finally running on it.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3oqNRuTTZQRkO62eUK_dbqlmAzZCEz9-CVt8CuhUHZgIFnPFNxElBe6SoBsbSFChROZumsbdi1MWXYp_OsCtfEk9jeKW5XPdXyCLxwT14rRBPunzSYfpRdQRdLtYBSorcX4sdqDj8ZRV5dTcW31Sih-UHHONKAjcJtJG3-LtqNQTcofKseu3W6dWl67I/s4080/PXL_20240309_070122354.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3oqNRuTTZQRkO62eUK_dbqlmAzZCEz9-CVt8CuhUHZgIFnPFNxElBe6SoBsbSFChROZumsbdi1MWXYp_OsCtfEk9jeKW5XPdXyCLxwT14rRBPunzSYfpRdQRdLtYBSorcX4sdqDj8ZRV5dTcW31Sih-UHHONKAjcJtJG3-LtqNQTcofKseu3W6dWl67I/s320/PXL_20240309_070122354.jpg" width="320"></a></p><p>

And it's all done with its own, better I/O routines (if I do say my own better self) as a basis for bigger projects. But first, a little tour of the Tutor itself, and then we'll dig in.
</p><p>
<a name="more"></a>

Texas Instruments' home computer series, including the famous TI 99/4A, was the logical consequence of TI's "one company, one computer architecture" policy. Indeed, the 1976 TMS 9900 CPU was basically their 16-bit 990 minicomputer architecture in an ungainly 64-pin DIP chip package and quite possibly (the only alternative is the General Instrument CP1600) the first single chip 16-bit microprocessor commercially available. It was fabbed in NMOS on a 4.5 micron process with about 8,000 transistors and initially topped out at a respectable 3MHz, though its pervasively microcoded architecture required sometimes large cycle counts per instruction. The 9918 video display processor in the original 99/4 evolved with a new bitmap mode to become the 9918A in the 99/4A, and, outlasting its originator, was one of the most common video chips of the early home computer era (Sord, MSX, CreatiVision/Dick Smith Wizzard, ColecoVision/Coleco ADAM, and many, many more). The original 99/4 was the winning design of three internal home system efforts in 1979, but was derided for its "calculator" keyboard, lack of lower case and a high MSRP; the upgraded 99/4A débuted in 1981 with an improved keyboard, better video, more expansion options and a lower price.
</p><p>
But TI was first and foremost in the chip business, and at the time was the largest semiconductor manufacturer on the planet. TI realized that the physical size of the CPU was harming its commercial viability — though TI's dubious management decisions were just as big a factor — and developed more conventional 40-pin versions, first as microcontrollers with on-board RAM and ROM, then with more typical 8-bit data buses. The most advanced of these was the TMS 9995 which had a few extra opcodes, a primitive pre-fetch facility, 256 bytes of on-chip RAM (we'll get to why this is notable when we discuss assembly language programming) and an internal decrementer for timing and event counting. It was noticeably faster than the 9900 and TI planned to implement it in its next generation of home computers, the low-end black and white 99/2 intended to compete against systems like the ZX-81 and Timex Sinclair 1000, and the high-end 99/8 with more memory, built-in peripherals and a larger keyboard.
</p><p>
Before that could happen, however, TI got deep in the weeds against their old nemesis Commodore under Jack Tramiel and ended up cancelling both the 99/2 and 99/8 in 1983 (exiting the home computer market completely in 1984), though not before there were spinoffs. It's not clear how Japanese toy manufacturer Tomy got involved but in 1982 Tomy adapted the in-development 99/8 architecture using the same 9995 CPU and 9918A VDP into their own home computer in Japan, manufactured by Matsushita (Panasonic) under contract. This computer was called the Tomy Pyuuta (ぴゅう太, also variously romanized as the Tomy Pyuta or Tomy Pyūta). 

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhGvEIAVlkDauCf5HnZ3-1wWKnE_3cGL9YC1EpY5vBfdVIjs-7Elkgzc9f-9V6qXBhKOa4Y9vJa_ZaD6fg3-ScWULzrb6iQpnvNnK_vOtjr0u2jPX7VGvHxz_RDOte9IZBFPHKrkCkGzVRJ6ElQx4vsFbLW0TL9wy5dQ6ZZToosgi4URSpffGkUL7vl0aM/s2048/IMG_20200606_142136.jpg"><img alt="" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhGvEIAVlkDauCf5HnZ3-1wWKnE_3cGL9YC1EpY5vBfdVIjs-7Elkgzc9f-9V6qXBhKOa4Y9vJa_ZaD6fg3-ScWULzrb6iQpnvNnK_vOtjr0u2jPX7VGvHxz_RDOte9IZBFPHKrkCkGzVRJ6ElQx4vsFbLW0TL9wy5dQ6ZZToosgi4URSpffGkUL7vl0aM/s320/IMG_20200606_142136.jpg" width="320"></a></p><p>

The Pyuuta wasn't, and wasn't intended as, a 99/8 clone. Unlike the 99/8's higher-end aspirations, the Pyuuta was targeted explicitly at younger children, using a friendly yet durable large plastic case and spill-resistant rubber Chiclet keys. For cartridges Tomy licensed some of Konami's arcade games like Frogger and Scramble and created a few of their own, and for peripherals they provided game controllers (included) and a cassette recorder (optional) for saving your work. Eventually <a href="http://oldvcr.blogspot.com/2020/06/tfw-you-find-last-cartridge.html">they planned to release</a> a modem, floppy disk, printer and speech synthesizer, all presumably using TI's reference designs except the printer which was a modified Astor MCP-40 plotter.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvPinNkNDr6aW6zzqYKCwGARokJenammCZinAaR88KMt68BTvyNJpyuPbG4Z5AOF5hkhG2GaVgeZO2k5qoi7QKD8hOQTELA5h204cRFg_oY4LpRnIRfQ6K0O4mmfV-inKVz8HkHyL5dvalL2jSzXyXXrtbcJrce6MNsvOggI0uSEM3MlWodkPOJes1Qy4/s720/vlcsnap-2020-06-06-16h42m05s668.png"><img alt="" data-original-height="540" data-original-width="720" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhvPinNkNDr6aW6zzqYKCwGARokJenammCZinAaR88KMt68BTvyNJpyuPbG4Z5AOF5hkhG2GaVgeZO2k5qoi7QKD8hOQTELA5h204cRFg_oY4LpRnIRfQ6K0O4mmfV-inKVz8HkHyL5dvalL2jSzXyXXrtbcJrce6MNsvOggI0uSEM3MlWodkPOJes1Qy4/s320/vlcsnap-2020-06-06-16h42m05s668.png" width="320"></a></p><p>

Although the basic BIOS was based on the TI's and the title screen in particular <a href="https://4apedia.com/index.php?title=File:Main_TI_Startup_Screen.png">is very similar</a>, Tomy prominently advertised it was a 16-bit system, yet focused more on games and graphics than programming. Like the unexpanded 99/4 and 99/4A, all of the included 16K RAM in the Pyuuta is dedicated to the VDP, for which Tomy created a built-in paint program and a highly constrained dialect of BASIC ("G-BASIC") to manipulate screen elements and sprites with katakana keywords. It ran using a 10.738635MHz 945/88 crystal divided by three for video (standard NTSC 315/88 3.579545MHz) and four for the CPU (945/352, 2.68465875MHz). The processor clock speed was slower on paper than the 3MHz 9900 in the 99/4A which came off a 12MHz crystal, but the Pyuuta was nevertheless faster because of the 9995's efficiencies and a critical architectural difference I'll discuss shortly.
</p><p>
The Pyuuta was a reasonable success in Japan and Tomy decided to export it to other markets by translating the OS and G-BASIC to English. However, British importer Adam Imports sent this first prototype back, finding G-BASIC too limited to be commercially viable. As an upgrade TI must have provided (unwittingly or otherwise) the code for TI Extended BASIC to Tomy to port, since Tomy BASIC has similar to nearly identical tokens, memory usage and syntax. This updated version was imported more or less directly by Adam Imports as the Grandstand Tutor, and its dual-BASIC system was released as an add-on device for the Pyuuta and then built-in as well to the next generation system Tomy themselves intended to sell in the United States. This was the Tomy Tutor in 1983.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgrg6HiLlKzvZYmt0UqqVjIPZQO2VwkPlCcKGhOiuhlUZhtOcEjXrgrrn19EdvIxYF3_thoFC__XrxfxwHLmgjWW4tYyAyZSZWGJBa6FTyHjyvpmYLoOA1hVMjZT8TvWYA4D3KPLus3_yFu4GQ7KARNQPy13QLAA-uILIVw4r6N19kfBFJGgv2NBlX07qs/s1256/tomy-purcell-1a.jpg"><img alt="" data-original-height="1256" data-original-width="1100" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgrg6HiLlKzvZYmt0UqqVjIPZQO2VwkPlCcKGhOiuhlUZhtOcEjXrgrrn19EdvIxYF3_thoFC__XrxfxwHLmgjWW4tYyAyZSZWGJBa6FTyHjyvpmYLoOA1hVMjZT8TvWYA4D3KPLus3_yFu4GQ7KARNQPy13QLAA-uILIVw4r6N19kfBFJGgv2NBlX07qs/s320/tomy-purcell-1a.jpg"></a></p><p>

Tomy USA hired <i>Real People</i> host Sarah Purcell as their spokeperson, who touted the computer as a system so easy to use that kids could teach themselves how to use it (it's true: I did!). She wasn't as high-profile as TI's Bill Cosby, but she was hardly unknown to the target demographic('s parents), and she hadn't committed any criminal offenses either. Unfortunately their otherwise promising marketing campaign was most notable for the most frequent use of the word "real" in a single pamphlet, as well as a five-day kick-the-tires-for-free deal which was about as successful as Apple's later "Test Drive a Macintosh" promotion. (NARRATOR: By which he means it wasn't.)
</p><p>
Like the Pyuuta, Tomy prominently touted the Tutor's 16-bit processor, but provided no way to directly access it. A couple years earlier the Tutor might have been a compelling system and one of the "real" kids on the box even wrote me a few years back to mention he rather enjoyed the games, but the video game crash was in full swing by then and Tomy's intentional toy aesthetic quickly became the kiss of death. No wonder Fred R. Rated was trying to get rid of them.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKUgrA66KPHkwuvb85aZ1A9is588VtYCRXETRBLgwi7hPuRGpKRhp9ry69UGLXcI4Y1fi3SeeYcqfLljFR5k9ffr8UWkjonwgO0XO-AZAIIbIaQePdtY3Pjbz7JImw1gIq1q5gxNZXPpQvkhrZiL2E98gmyx7jJhlMg3CCFJlb2mDyX0VyeaXy-DNdOSk/s2048/DSCN6996.JPG"><img alt="" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKUgrA66KPHkwuvb85aZ1A9is588VtYCRXETRBLgwi7hPuRGpKRhp9ry69UGLXcI4Y1fi3SeeYcqfLljFR5k9ffr8UWkjonwgO0XO-AZAIIbIaQePdtY3Pjbz7JImw1gIq1q5gxNZXPpQvkhrZiL2E98gmyx7jJhlMg3CCFJlb2mDyX0VyeaXy-DNdOSk/s320/DSCN6996.JPG" width="320"></a></p><p>

Tomy apparently lost so much money on the Tutor that they ended up producing very few peripherals for the system in either the United States or Japan. This picture shows the complete setup in the United States, namely a tape recorder with custom electronics, an Anglicized version of those disc-based joy controllers which made the Intellivision seem like a paragon of ergonomics, and a tough-as-nails single joystick sold as the Joy Stick (insert joke here). And that was it. The floppy disk drive, printer and speech synthesizer promised in both countries never appeared as other than a single picture in the Purcell pamphlet, the printer interface sold in Japan as part of the BASIC-1 add-on was never sold abroad, and most critically the "TI Adaptor" — nothing less than a Tomy rebadge of the <a href="http://unige.ch/medecine/nouspikel/ti99/pebox.htm">TI Peripheral Expansion Box</a> — that would have included additional memory and storage options was vapourware too.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVGlKWNYRy7BcQX5O-mZZci-wxRlhXuY6L8bHJUx75aJ7OOtuXeAV43JW__o8eSgePK7eKu-c2lxNZJo39F8_9uNF1sz1g99mMUk30cs_BbsN7NxCn4CF1ATfFvFiI95F2fdrEqD5Z3XBOPmfDxdy78s4w2bJUM8oZWerhR1gGdLEc1IElZ7gP-8GPXKw/s2048/DSCN6980.JPG"><img alt="" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVGlKWNYRy7BcQX5O-mZZci-wxRlhXuY6L8bHJUx75aJ7OOtuXeAV43JW__o8eSgePK7eKu-c2lxNZJo39F8_9uNF1sz1g99mMUk30cs_BbsN7NxCn4CF1ATfFvFiI95F2fdrEqD5Z3XBOPmfDxdy78s4w2bJUM8oZWerhR1gGdLEc1IElZ7gP-8GPXKw/s320/DSCN6980.JPG" width="320"></a></p><p>

The Tutor was also not an exact copy of the Pyuuta either, although the core silicon (the 9995 CPU, 9918A VDP video chip [9929A for PAL] and SN76489 DCSG sound chip) is the same, primarily differing in the BIOS ROM, the absence of a Japanese character set, the presence of Tomy BASIC, and slightly different memory banking logic. The systems are otherwise nearly totally compatible such that Japanese Pyuuta cartridges will generally run on American or PAL Tutors and vice versa, language support notwithstanding, with only one of the American cartridges — its sole explicitly educational title — being specific to the United States.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEinlUi6GbeIMaDwf3tczUSNVzj_5nipleTMMe_SsasJT4WreMUW3AGgBcnEHGg-6XTWs1Qris8EEa-hh_6X1dFVv8ipA9aFMSq0cOn4_Kkchn8GUsJMLgnN5KoIsM8Mzo7ZFC3j_QuX39uU-9O25d6zMEI5iuI64ACKIlMKqi4O4QFdQIgotYYkhh8Bs9g/s640/vlcsnap-2024-03-08-22h09m39s005.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEinlUi6GbeIMaDwf3tczUSNVzj_5nipleTMMe_SsasJT4WreMUW3AGgBcnEHGg-6XTWs1Qris8EEa-hh_6X1dFVv8ipA9aFMSq0cOn4_Kkchn8GUsJMLgnN5KoIsM8Mzo7ZFC3j_QuX39uU-9O25d6zMEI5iuI64ACKIlMKqi4O4QFdQIgotYYkhh8Bs9g/s320/vlcsnap-2024-03-08-22h09m39s005.png" width="320"></a></p><p>

The Tutor, as with the Pyuuta before it, started with the TI 99/4A's title screen but with animation, scrolling the colour bars vertically. It felt like a friendly computer from the moment you turned it on and the larger 32x24 text cells actually reinforced that somewhat (plus making it much easier to read on our little Panasonic colour TV).

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjfH146lk5ibMVqFtD2PZ2JsoFRCj2MOSbcUNjqcu5icNOfG_92gfnubhhmGz6ALnkX2nQHaTYxHPq9sykmhx5t96jauuWk3WJcMD9xP6bLQ4HWjH4WB70VkcvfunG5xbfqNt-Lw8E29pu60my5pNY6PrRbZoWTdyjQozI99w1SD2JS_Jam66vQmryrpAA/s640/vlcsnap-2024-03-08-22h09m52s550.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjfH146lk5ibMVqFtD2PZ2JsoFRCj2MOSbcUNjqcu5icNOfG_92gfnubhhmGz6ALnkX2nQHaTYxHPq9sykmhx5t96jauuWk3WJcMD9xP6bLQ4HWjH4WB70VkcvfunG5xbfqNt-Lw8E29pu60my5pNY6PrRbZoWTdyjQozI99w1SD2JS_Jam66vQmryrpAA/s320/vlcsnap-2024-03-08-22h09m52s550.png" width="320"></a></p><p>

The Tutor menu, directly translated from the Japanese menu in the Pyuuta, was also inspired by the TI's menu, but instead uses a "pointer" rather than selecting items by number. It was likewise very easy for a child to grasp. On the Tutor, the GRAPHIC and BASIC modes are always available as part of its sizeable 48K of built-in ROM. The CARTRIDGE option only appears if a cartridge is detected, which we'll talk about in a moment.
</p><p>
Unlike the TI 99/4A which used serially addressed "GROMs" for BASIC and much other software (which on top of that can't contain native code and are necessarily written in an interpreted bytecode called GPL), all of the Tutor ROMs and cartridges are directly connected to the bus and therefore tremendously faster. Although Tomy BASIC is also based on GPL, Tomy's GPL dialect is a stripped-down variant specialized for this task, and the program text is directly accessible like any other data in ROM. All of this, plus the 9995's prefetch, are why the Tutor's (and Pyuuta's) slightly slower clocked CPU runs so much more swiftly in practice than the 99/4A's.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjM-GhMCBVPKpQuRyLt6piPlv2qiSaslnBd7JvGaOxmrpOA2L9NPOFpB9jxxNjvjuLBZLEv0GPrVf4cAG_Ho4WEzulMtRzIepHlk3fx4v3Jf7yBaGs8Enb1uGoSF1rfS-5EbO3h323QGnoqk1ycc7T3yjSbFp4AafngkrVo5lKNlMNbE2ngSyf9KTHZHwM/s640/vlcsnap-2024-03-08-23h03m38s747.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjM-GhMCBVPKpQuRyLt6piPlv2qiSaslnBd7JvGaOxmrpOA2L9NPOFpB9jxxNjvjuLBZLEv0GPrVf4cAG_Ho4WEzulMtRzIepHlk3fx4v3Jf7yBaGs8Enb1uGoSF1rfS-5EbO3h323QGnoqk1ycc7T3yjSbFp4AafngkrVo5lKNlMNbE2ngSyf9KTHZHwM/s320/vlcsnap-2024-03-08-23h03m38s747.png" width="320"></a></p>

<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFncYmij7Yd-YAWLqGVu_UqKmnh21bo5ScY1Z2Jwh6tZLh65VvRWLn6f6diOZvtVq3HurP-1JFqsnToyrrJnhyMoaTgAOqy-Unbt5fe-xqx8W4KcSnClrSqoF_82KwmBe2GoNqzH8jEolLv9gOulJFuQvVko9gXuw49H0y6BYqUSTQltpPFnznyYumQY4/s640/vlcsnap-2024-03-08-23h04m30s526.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFncYmij7Yd-YAWLqGVu_UqKmnh21bo5ScY1Z2Jwh6tZLh65VvRWLn6f6diOZvtVq3HurP-1JFqsnToyrrJnhyMoaTgAOqy-Unbt5fe-xqx8W4KcSnClrSqoF_82KwmBe2GoNqzH8jEolLv9gOulJFuQvVko9gXuw49H0y6BYqUSTQltpPFnznyYumQY4/s320/vlcsnap-2024-03-08-23h04m30s526.png" width="320"></a></p><p>

The Tutor's GRAPHIC mode is a simple built-in paint program that takes full advantage of the 9918A's 256x192 bitmap mode, offering two colours per line in each 8x8 cell — substantially better than systems like the C64 or ZX Spectrum with two colours per <em>cell</em>. A little rocket cursor moved with the arrow keys indicated the current location, and when you were at the desired cell, you could then edit it using the palette and the editing square on the lower right. GRAPHIC mode also supported four large 16x16 sprites — to hide the 9918's limitation of no more than four sprites per scan line — which could be crudely moved or animated by GBASIC programs (no hyphen in the English name).

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhneCVuucKO4LIZ_gC_fYgyrtXFBX4Pj8s8D_vFS_fmg3IR8P3Xyv6DLh3n3uqlxz43TdOyqm2leb4MgxpuQi1SinWsTituvEv44GQJHhYaFMENJJYK-3zf6002ytBbizl2Yqg7QVeNniDO_x51AvO4qr_uOSq6cTIYtisfjyRZIYBCLRUjqxod7Y2VtR4/s640/vlcsnap-2024-03-08-23h05m24s256.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhneCVuucKO4LIZ_gC_fYgyrtXFBX4Pj8s8D_vFS_fmg3IR8P3Xyv6DLh3n3uqlxz43TdOyqm2leb4MgxpuQi1SinWsTituvEv44GQJHhYaFMENJJYK-3zf6002ytBbizl2Yqg7QVeNniDO_x51AvO4qr_uOSq6cTIYtisfjyRZIYBCLRUjqxod7Y2VtR4/s320/vlcsnap-2024-03-08-23h05m24s256.png" width="320"></a></p><p>

GBASIC, however, was so limited — barely any string support, small program space, terse syntax and a couple severe bugs — that I spent most of my early elementary life in Tomy BASIC. I wrote some games and some simple utilities and saved them to tape, and I still have one of these tapes, though I carelessly overwrote most of its contents later. Yet despite its lineage as a descendant of TI Extended BASIC, Tomy BASIC intentionally supported less than its ancestor, likely to keep inquisitive kids like me in a memory-safe "sandbox." There were commands for sound, character graphics and some custom character shapes, but most of these features were poorly documented (if at all), and there wasn't any supported facility for directly accessing bitmapped graphics or sprites — let alone arbitrary reads and writes to VDP memory.
</p><p>
Still, the "sandbox" concept ended up being unsuccessful because a number of Tomy BASIC commands don't bounds-check properly, and I remember very clearly crashing it multiple times one day trying to figure out how the <tt>COLOR</tt> keyword worked. (Alas, I was too young at the time to realize the significance of what I'd done.) Such bugs even facilitated a clever hack to enable sprites, though this hack unsurprisingly has notable limitations, and there was no way to directly access VDP registers for other features like high resolution or 40-column mode. BASIC was as much as you could do on a stock Tutor and other than a small user group in the Los Angeles area I didn't know anyone else who had one. It wasn't until several years later that I got the Tutor back, and by then I was knee-deep in Commodore programming, including handcoding 6502 machine language opcodes in the Epyx FastLoad monitor. The Tutor had been fun but I could do more with the Commodore 64 and the 128 we got after that.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiBeEZlV-lQ4x-ncVfMYQ7SQEOquv7EvSvZ38M2rUjLlme9e8YeaAF9_-Gxpw7b4QcB4vN5f_0QdSogkjoQXIfUIz043w8Tni__0kP9yvoTqgAkVZ6nADI9NycgRJ-qeWD1B3xx-sSGQkOJ-ylFPyh1AVGBvIOY1O1i2g5A6XzR1IZsLQ7Zfj_xHagK9TM/s743/tutti.png"><img alt="" data-original-height="743" data-original-width="728" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiBeEZlV-lQ4x-ncVfMYQ7SQEOquv7EvSvZ38M2rUjLlme9e8YeaAF9_-Gxpw7b4QcB4vN5f_0QdSogkjoQXIfUIz043w8Tni__0kP9yvoTqgAkVZ6nADI9NycgRJ-qeWD1B3xx-sSGQkOJ-ylFPyh1AVGBvIOY1O1i2g5A6XzR1IZsLQ7Zfj_xHagK9TM/s320/tutti.png"></a></p><p>

Emulation came late to the Tutor both due to its obscurity and a profound lack of hardware documentation. In 1998 yours truly wrote the first Tutor "simulator," which I christened Tutti, ironically for the Commodore 64 so that it could be run anywhere a C64 emulator was supported (back then I used C64S and later Frodo). It was designed to mimic the Tutor's look and feel using a character set I labouriously drew by eye, a custom keyboard driver, raster interrupts for the 9918A's split screen modes, simple tone audio, and colour approximations with the VIC-II's palette. It had a fully functional title screen and menu plus reasonably accurate looking but very primitive GRAPHIC, GBASIC and BASIC modes. For its behaviour I manually figured out how fast things ran and added delays and tweaks, and reverse-engineered the BASIC and GBASIC editors. Surprisingly, a portion of Tutti is actually part of the project we'll do today, so hang onto it in the back of your head.
</p><p>
It took five more years for the first true Tomy Tutor emulator, namely Ian Gledhill's 2003 TutorEm with functional 9995 and 9918A emulation; it was very slow, very buggy, incomplete and Windows-only, but it really did work and finally opened the floodgates. Later that year MESS added a driver written by Raphael Nabet in 0.70 that I helped beta-test and it is still part of modern MAME. While I have since updated TutorEm and made many fixes for my tape-enabled Tutti II emulator, we'll use MAME for debugging this entry because it is currently the only Tutor emulator that handles cartridge ROMs.
</p><p>
Tutti didn't emulate the CPU because I didn't know how its I/O worked and it would have been impossible to execute code in any performant fashion on the C64; even the relatively lightweight 6502-on-6502 emulator I maintain for <a href="http://oldvcr.blogspot.com/2023/02/instruction-fusion-and-real-serial-port.html">the KIM-1 KIMplement emulator</a> runs about 30 times slower or so than actual. I had done a little playing around with TMS9900 assembly on the 99/4A using the Editor/Assembler cartridge ("module") on a friend's machine, and I even had a basic 9900 programming book, so the 9995 wasn't really an alien architecture to me — which makes a good transition into talking about the CPU itself.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgu5-937vaMQloo_RolMe7WoNEOsNITOtReCsf1I9RNixosUeqv7kS_tARyA7gtdVBxyWVGUP8K2Zf98N9N9-V82zAOGrHWE0mFlPujPPXbN64FbZLdxDmUf-lrj4wV2R1IxFXgqsg_4nKt-gWi7MM0JngJNYhoRVaTULP6DdMCu7Huup0agMe9df8vlqM/s2846/ti990.jpg"><img alt="" data-original-height="2030" data-original-width="2846" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgu5-937vaMQloo_RolMe7WoNEOsNITOtReCsf1I9RNixosUeqv7kS_tARyA7gtdVBxyWVGUP8K2Zf98N9N9-V82zAOGrHWE0mFlPujPPXbN64FbZLdxDmUf-lrj4wV2R1IxFXgqsg_4nKt-gWi7MM0JngJNYhoRVaTULP6DdMCu7Huup0agMe9df8vlqM/s320/ti990.jpg" width="320"></a></p><p>

The original TI-990 minicomputers supported multiprogramming in a then-innovative fashion: most of their registers were actually stored in RAM. The only CPU-internal registers are the program counter (PC), a Workspace Pointer (WP) that indicated where in RAM the 16 registers (32 bytes) reside, and a Status (ST) register for flags. This meant that a context switch could be as simple as merely changing the PC, WP and ST registers to those of the new task. Though zero or direct pages on CPUs like the 6502 or 6809 is a related concept, the 990 WP was more versatile and indeed absolutely intrinsic to how the 990 operated. It has a generally orthogonal instruction set for the time (<i>ceteris paribus</i>), and aside from R0 not being valid as an index the registers can be used for any general purpose, though certain instructions are fixed to specific registers like R11 as a link register for subroutine calls or R12 as the address for bit-serial I/O over the Communications Register Unit bus. Byte operations exist but all word accesses are aligned to even addresses.
</p><p>
For the TI 99/4 in 1979 (and later the 99/4A), TI determined that designing a full 16-bit system around the 9900 would have required new chips for its exclusively 16-bit bus, making the effort too expensive for a home computer. TI solved this problem by devising <a href="http://www.unige.ch/medecine/nouspikel/ti99/architec.htm">two buses</a>. The most directly connected 16-bit bus hosted the lowest level system ROM with the GPL interpreter plus 256 bytes of "scratchpad RAM" which could store eight complete sets of registers, composed of two 128-byte 8-bit static RAMs wired as low and high bytes (the 9900 is big-endian) which the CPU could access in parallel. SRAM was expensive, however, so the remainder of the machine's RAM was 16K of dynamic RAM given to the VDP, which has its own DRAM refresh circuitry. Unfortunately, although the VDP was on this 16-bit bus also, the VDP only supported byte accesses and ignores the lower half of the word, slowing DRAM reads further. Worse, everything else was behind the second "multiplexed" 8-bit bus, where a small circuit stalled out the CPU on reads until two 8-bit fetches could assemble the full 16 bits. While this meant less expensive 8-bit parts could be used, the cost reduction also cost a significant amount of performance.
</p><p>
The use of SRAM suggests that the 99/4 was originally intended to use a different chip that had RAM on-die, where refresh circuitry wouldn't have been needed, but cost and market considerations apparently prevailed. The intended CPU may have been something like the 1979 TMS9940 with an on-chip CRU, 2K of ROM, a decrementer and 128 bytes of SRAM, or the later TMS9985 with 8K of ROM and 256 bytes of scratchpad, though neither would have been ready in time for the 99/4. As mentioned earlier, after the disadvantages of the 9900's strict 16-bit data bus became more acute TI moved the multiplex circuitry on-chip and exposed only an 8-bit bus starting with the TMS9980 — but this also doubled access time to its external scratchpad RAM, condemning it to lower-performance applications <a href="http://oldvcr.blogspot.com/2022/09/what-kim-1-really-needs-is-bubble.html">like TI's Silent 700 teletypes</a>. TI's first attempt was to turn the 9940 into the 9985 by adding the same multiplexer and bumping up the ROM and scratchpad RAM, which were both internal and thus avoided the bus problem. There was reportedly no market appetite for the 9985, so TI removed the ROM and reduced instruction latency further by using prefetch steps in the microcode which could be parallel with a preceding ALU operation. This is the 9995, released in 1981.
</p><p>
(A digression: how do you use the 9900 to implement a language like C? The simplest method is to just implement a stack, which is facilitated on the 990/9900 by its support for post-increment addressing. This is in fact the approach taken by <a href="https://forums.atariage.com/topic/164295-gcc-for-the-ti/">the GCC port for the TMS9900</a>, which treats the CPU more or less like a modern CPU with a link register [usually R11], defines an ABI for arguments and volatile/non-volatile registers, and reserves one of the registers as the stack pointer, in this case R10. R10 is a 16-bit register like all the others, so the stack can be as large as the addressing space, a significant improvement over C-hostile architectures like the 6502. Another way is to go "full Berkeley" and treat the WP as a means to implement register windows, a la SPARC: the WP can be moved to any word-aligned address, so a caller can move the WP down a few notches, set up its arguments, call the routine, capture the return value and set it back. However, the 9995 — and for that matter the stock 99/4(A) — doesn't have CPU-addressable RAM other than the scratchpad, so in the base configuration neither system would have much capacity for function calls no matter how they were implemented. The Tomy BIOS gets around this by simply moving the WP or individual registers around by hand, which is space efficient, but also makes some individual routines or subsections more difficult to use because there is no standard calling convention.)
</p><p>
For our purposes, although the 9995 has a few extra instructions, we can treat it in practical terms as a faster 9900. The main difference at the assembly level is where the scratchpad RAM lives: since it's external to the 9900, its location is wherever it gets decoded (e.g., in the $8000 range in the 99/4A), but in the 9995 the internal RAM always occupies $f000-$f0fb (for compatibility with the 9900 the last four bytes are seen at $fffc to $ffff and serve as the NMI vector). The 9995 also has an internal decrementer at $fffa but we won't need to deal with that right now for this particular project. The only other concern is that the prefetch in the 9995 will affect self-modifying code if it changes the very next instruction which our example doesn't do either. Otherwise, programming it is almost completely the same.
</p><p>
The Tomy BIOS obviously has support routines for displaying text and reading the keyboard, but we're not going to use them for several reasons: first, I'm not particularly conversant in them, second, we can probably do it faster and more flexibly ourselves, third, it's good education, and fourth, they kind of suck. For input, while we can't do anything about the Tutor's mushy Chiclets or its single SHIFT key, we certainly can improve upon the BIOS' terrible key rollover. Additionally, the Tutor's default character set is inconveniently organized for modern applications: wile you can apparently use the <tt>SCELL()</tt> (the Tomy equivalent of TI <tt>CALL HCHAR</tt>) command to store characters by their ASCII value directly into VDP screen memory, this is in fact an artifact of BASIC and not actually how the glyphs are laid out in VDP RAM. We would like to organize our character set to be <em>exactly</em> the same as true ASCII so that no translation is needed, as well as support the 9918A's 40 column text mode which the Tutor BIOS never did. To do all of these things, we'll devise our own library.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgGrhdpabw63j0O2Mdhz4PEqJXoElkcbtC0HheH-Ubfc_mIemumqNXCLhVgV7Ge9HDIoRX0FDkvl977NxVj3NI9d4B5FCK_uJkrHR4NbYxPAh82M7OYq7k-cf62oo7_1xOW4qm0seXuO6lV7fzrgmBL0Ehaf8Zw5kEz3ep5EA7YCpfkqeq93Aeq3wlHiC4/s4080/PXL_20240309_062046613.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgGrhdpabw63j0O2Mdhz4PEqJXoElkcbtC0HheH-Ubfc_mIemumqNXCLhVgV7Ge9HDIoRX0FDkvl977NxVj3NI9d4B5FCK_uJkrHR4NbYxPAh82M7OYq7k-cf62oo7_1xOW4qm0seXuO6lV7fzrgmBL0Ehaf8Zw5kEz3ep5EA7YCpfkqeq93Aeq3wlHiC4/s320/PXL_20240309_062046613.jpg" width="320"></a></p><p>

The homebrew hardware we'll use is all from TeamEurope (hi Klaus!), who made one of the earliest Tutor flash multicarts. This is <a href="https://team-europe.blogspot.com/2023/12/tomy-tutorpyuta-ram-cartridge-updated.html">his newest unit</a> which is the only currently available CPU RAM expansion for the Tomy Tutor and Pyuuta, providing 16K of CPU-accessible RAM in two 8K ranges as well as multiple 32K ROMs accessible by DIP switch from a 512K flash ROM. (This cartridge was actually conceived of first by <a href="https://tms9918.hatenablog.com/entry/2018/01/18/211846">tanam</a>, but this unit is an expansion of that design.) We'll explore this device more in <a href="http://oldvcr.blogspot.com/search/label/tomy%20tutor">a future entry</a>. However, we don't need the RAM nor the extra ROM capacity today and the device additionally requires a passive I/O port adapter for those extra addressing lines, so we'll use one of his simpler items.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj7tOBwn6hATigqw5kzvfd3nGIGywU43gr7EhRwkAM3yyL20-8aLAzFlIR5UUCug8P9JFCVQSPAmB1E3EgjQTCYJxgsIUwOT951qarJABDve9W7Nz_-Ef642OOcpHZNTavEQp-gsF-4WgTL10vZpnU9Wx1g1qGzenk-TtzGO8YFfkLBIk3nI_j0nw-wZlU/s4080/PXL_20240309_041416783.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj7tOBwn6hATigqw5kzvfd3nGIGywU43gr7EhRwkAM3yyL20-8aLAzFlIR5UUCug8P9JFCVQSPAmB1E3EgjQTCYJxgsIUwOT951qarJABDve9W7Nz_-Ef642OOcpHZNTavEQp-gsF-4WgTL10vZpnU9Wx1g1qGzenk-TtzGO8YFfkLBIk3nI_j0nw-wZlU/s320/PXL_20240309_041416783.jpg" width="320"></a></p><p>

That simpler item is <a href="https://team-europe.blogspot.com/2019/05/flashcartsmulticarts-for-tomy.html">this one, his first</a>. It has every USA and Japanese cartridge ROM except the very rare USA and Japanese Demonstration cartridges — with a little luck I'm hoping to rectify that soon. It also lacks the later "3-D" series (a misnomer, they weren't 3D with the possible exception of <i>Rescue Copter</i>) which require the extra addressing line for 32K ROMs and are provided on a separate multicart. 

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgF3tyhvlj-82eizllcz_qMSov3PPOTRp7F-2UEfGhF67ygoSrNV9KRvJnnrc-t7ThnWWsZ9q6fbTbyJe9DYDNaNGBRQcsgTDXf8_0949oPzsNFJIzdaMKU9UmnPTR_MojBVb0i-7EMTFw_Xs__DzS8WZ_Be3xPSCmDfVmBa7uwZ8GsEgIo0-_ju0rgPgU/s4080/PXL_20240309_041344629.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgF3tyhvlj-82eizllcz_qMSov3PPOTRp7F-2UEfGhF67ygoSrNV9KRvJnnrc-t7ThnWWsZ9q6fbTbyJe9DYDNaNGBRQcsgTDXf8_0949oPzsNFJIzdaMKU9UmnPTR_MojBVb0i-7EMTFw_Xs__DzS8WZ_Be3xPSCmDfVmBa7uwZ8GsEgIo0-_ju0rgPgU/s320/PXL_20240309_041344629.jpg" width="320"></a></p><p>

The flash ROM itself is a socketed off-the-shelf 512K Microchip Technology SST39SF040. These chips are end-of-life but they're still inexpensive and easy to find as DIPs or PLCCs, and by using Klaus' board I don't need to make one of my own. For this I started with another DIP 39SF040 that I got cheaply since we won't need to do too many insertion cycles on the socket to get this simple program working. There is free space in the default cartridge loadout for four more 16K ROM images and we'll use two of them.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkYqTAm_5fhqueXig4l8tzemqMWNbPG_dQ68W07363wsgiTL8h0AbBJicYi3dDAoDLkshN_h0QJe22eK84xwZx3d64srikCnO4gWoDlz2lM-3Q09OC0Qb07SiQhLsin3Zvtvb8WJHM6nIWRHresMiM67_qiYditZIOdWNA3aI7r40UPr9zVRn-KQeo5Tg/s4080/PXL_20240309_071547288.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkYqTAm_5fhqueXig4l8tzemqMWNbPG_dQ68W07363wsgiTL8h0AbBJicYi3dDAoDLkshN_h0QJe22eK84xwZx3d64srikCnO4gWoDlz2lM-3Q09OC0Qb07SiQhLsin3Zvtvb8WJHM6nIWRHresMiM67_qiYditZIOdWNA3aI7r40UPr9zVRn-KQeo5Tg/s320/PXL_20240309_071547288.jpg" width="320"></a></p><p>

Pretty much any programmer will work for this. Since my daily driver is a POWER9 Linux workstation, I use the open-source <a href="https://gitlab.com/DavidGriffith/minipro">minipro</a> and this older XGecu TL866-II+ (minipro has experimental support for the newer T48 but the TL866-II+ is well-tested with it; unfortunately you can't trust many of the eBay and Amazon sellers to get you the older model). 
</p><p>
For the cross-assembler, we'll use <a href="http://john.ccac.rwth-aachen.de:8000/as/">the AS macroassembler</a>, which is multi-architecture, cross-platform, open-source and has specific support for the 9995. It builds just fine on any modern OS, including Linux and macOS. The macroassembler will create an intermediate object which we then link with an included tool into the final executable.
</p><p>
The Tomy machines place their VDP ports at $e000 and $e002 in the 9995's regular addressing space, while the keyboard and joy controllers (which share keyboard lines) are on the CRU bus at $ec00 through $ec70 with each group of eight lines separated by 16. The "little" 8K and "medium" 16K cartridges both are mapped to $8000-$bfff, where the Tutor expects to see two $55 bytes at $8000. If these two $55 bytes are present, the CARTRIDGE option is enabled in the menu, which triggers a jump to $8002. (There are other ways to signal its presence, but this method is the simplest and the one used by the majority of official Tomy cartridges.) So we'll start off with this:
</p><div><pre>        padding off

        ; vdp ports on the tutor
vdpwd   equ 0e000h
vdpwr   equ 0e002h
        ; CRU address for reading the keyboard
keycru  equ 0ec00h

        org 08000h

        ; cartridge signature word
        word 05555h
</pre></div>
<p>
The leading zeroes for these particular 16-bit values are a required quirk of AS. Since we're using all our own routines, we don't want any interference from the BIOS, so we'll turn off all interrupts by setting the interrupt mask to zero and load the WP with the lowest address of the 9995's built-in scratchpad RAM. (We'll have more to say about interrupts later.)
</p><div><pre>        limi 0
        lwpi 0f000h     ; don't even trust the Tomy OS here
</pre></div>
<p>
The Tomy Tutor BIOS gives us literally nothing to work with anyway: before the cartridge is started, the registers are set to default values and the entire VDP RAM is cleared. That means there's no screen matrix nor a character set, and we'll have to write them to VDP RAM ourselves. (The expectation is that you'd call the BIOS' own utility routines to set those up, and that's indeed what regular Tomy cartridges do, but we're not going to do that here.) To make working with the VDP a bit more convenient, we'll construct a little utility subroutine.
</p><div><pre>vdpr    ; write to VDP registers
        ; MSB of r0: command nybble + value (8r = register,
        ; 4x = MSB VDP RAM for write, 0x = for read)
        ; LSB of r0: new register value (xx) or LSB of VDP RAM address
        ; the swapping around gives enough time for the VDP to operate,
        ; and we have no IRQs on, so nothing will interfere
        swpb r0
        movb r0, @vdpwr
        swpb r0
        movb r0, @vdpwr
        b *r11
</pre></div>
<p>
Recall that the 9918A only has an eight-bit data bus, so we must communicate with it through byte-sized operations. This subroutine takes a single 16-bit argument in r0 that either encodes an absolute VDP RAM address for reading or writing, or encodes one of the eight VDP registers and the byte to store in it. (Because of the way these addresses are represented, i.e., either $4xxx to write or $0xxx to read, a "super 9918A" would need to implement some sort of bankswitching register to handle more than 16K. The only other supported RAM size for the 9918A is 4K.) The LSB goes out on the bus first and the 9995 is big-endian, so for each byte we swap them before sending it to the 9918A's control register, exiting back to the caller through r11 as our link register. As a happy convenience the swap operation takes just long enough for the 9918A to handle the bus transaction and be ready for the next. With that, we can set the following:
</p><div><pre>        ; register 0 turn off bitmap and external video
        li r0,08000h
        bl @vdpr
        ; register 1
        ; - 16K mode
        ; screen off
        ; no IRQs
        ; no 40 column text mode (except if we asked for it?)
        ; no multicolour
        ; no bit 5
        ; normal 8x8 sprites
        ; normal sized sprites
        li r0,08180h
        bl @vdpr
        ; register 2: put screen table at 0800h
        li r0,08202h
        bl @vdpr
        ; register 3: put colour table at 0c00h
        li r0,08330h
        bl @vdpr
        ; register 4: put character set at 0000h
        li r0,08400h
        bl @vdpr
        ; register 5: put sprite attributes at 0000h
        li r0,08500h
        bl @vdpr
        ; register 6: put sprite pattern table at 1000h
        li r0,08602h
        bl @vdpr
        ; register 7: white text on green background
        ; (the only colours available for 40-column)
        li r0,087f2h
        bl @vdpr
</pre></div>
<p>
The locations for the screen table, colour table, character set, sprites and so forth are encoded as <a href="http://www.unige.ch/medecine/nouspikel/ti99/tms9918a.htm#Registers">multiples of particular alignments</a>. For our character set, we'll reorganize the Tutti one to match ASCII order (I told you we'd be coming back to that), add that to our binary and copy it in. We're only using positions 32-127, so there is plenty of space for expansion if we want to add graphics characters or an alternate font weight (for this purpose I just added a reverse/inverse set). Once we set the VDP memory address, we can just keep sending data to the data port as the VDP's address internally autoincrements with each write or read.
</p><div><pre>        ; load our font to &gt;0000
        li r0,04000h
        bl @vdpr
        li r1,fontt
lup     movb *r1+,@vdpwd
        ci r1,fontt+00800h
        jne lup
</pre></div>
<p>
We go on to clear our screen in the same way (by storing the appropriate number of space characters starting from the top left of screen memory), then set the colour matrix (if 32 columns), print our character set and display a welcome message in similar fashion.
</p><p>
Next, we want to accept keyboard input and echo it to the user. Despite the rubbery nature of the keycaps themselves and their non-standard layout, the keyboard matrix proper is actually pretty good quality: each key independently sets a particular bit in the matrix and some quick tests show there's little to no shorting or ghosting. Reading it is a simple matter of requesting every key bit in groups of eight from the CRU at their specific addresses. However, like any keyboard handler, we'll need to properly debounce the keys, and this is where the Tomy BIOS is particularly bad: if you type too quickly and multiple keys are down as you transition from one keys to the next, the keyscan routine will fail to make a match and the new key will be dropped. This makes the Tutor's already somewhat mushy keyboard even worse to type on, an absolutely needless situation since the Tomy keyboard has all the <em>hardware</em> requirements to implement N-key rollover and is only let down by its <em>software</em>. The solution is to track each individual key bit using the debounce matrix to filter out key bits we already know were previously down. This is made a bit easier by the fact there's only one modifier key to watch (i.e., SHIFT), but the principles are the same.
</p><div><pre>        ; scan keyboard
        ; needs 16 bytes of scratchpad RAM
keyzone equ 0f020h
keezc   clr r0                  ; clear debounce
        mov r0,@keyzone+8
        mov r0,@keyzone+10
        mov r0,@keyzone+12
        mov r0,@keyzone+14
keez    clr r9                  ; clear test
        li r2,keyzone
        li r12,keycru-16
keezl   ai r12,00010h
        clr r0
        stcr r0,8
        movb r0,*r2+
        socb r0,r9              ; bitwise or
        ci r2,keyzone+8
        jne keezl
        ci r9,0
        jeq keezc               ; clear debounce if nothing pressed
</pre></div>
<p>
The "keyzone" block is our current matrix followed by the debounce matrix we'll use to filter it. This section can be entered either from <tt>keezc</tt> to blank the debounce matrix, falling through to <tt>keez</tt> to read it. Reading from the CRU requires placing the CRU address (a parallel addressing space) into R12 and asking for the needed number of bits. We fetch in groups of eight bits which are in eight locations stored 16 CRU bytes apart, keeping a running logical-OR (which the 9900/9995 atypically calls <tt>soc</tt>/<tt>socb</tt> "Set Ones Corresponding" for non-immediate arguments). If the value of the running logical-OR was zero, then no key was pressed, we branch back to clear the debounce, and go scan the matrix again.
</p><p>
The simplest case is where the current state of the matrix exactly equals the last time (modulo the state of the SHIFT key). This can be checked for by exclusive-ORing with the debounce matrix, masking off the SHIFT bit. We then logical-OR all the resulting bits together and if it's zero again, we go back to scanning — but leave the debounce matrix alone.
</p><div><pre>        mov @keyzone,r2
        mov @keyzone+2,r3
        mov @keyzone+4,r4
        mov @keyzone+6,r5
        xor @keyzone+8,r2       ; xor current bits with last set
        xor @keyzone+10,r3
        xor @keyzone+12,r4
        ; clear shift bit (prevent "eeking" characters when releasing)
        andi r5,0fbffh
        xor @keyzone+14,r5
        ; if exactly equal (i.e., all zeroes), go back
        soc r3,r2
        soc r4,r2
        soc r5,r2
        jeq keez        ; don't clear debounce
</pre></div>
<p>
This is the block of code we'd use to set up key repeat, which as currently written this routine doesn't support yet (an exercise for the future). Otherwise, we need to filter the debounce to remove any keys that are now <em>up</em>, filter the new matrix to remove any keys already present in the debounce (which may give us another zero matrix again, but our keyscan table doesn't match an all zeroes matrix, so it's "fine"), and update the debounce matrix with the new bits that are down while clearing the SHIFT flag. This heavily uses the oddball <tt>szc</tt> instruction, which is an inverted logical-AND (though, like <tt>soc</tt> and <tt>ori</tt>, there is a regular immediate <tt>andi</tt> that is <em>not</em> inverted, a curious non-orthogonality in the instruction set). I won't show every store here but I'll give the overall flavour — there's probably a more efficient way to do it than I've done, but this is also pretty easy to follow conceptually:
</p><div><pre>        ; remove any bits in the debounce that aren't set currently
        mov @keyzone,r0
        inv r0
        szc r0,@keyzone+8       ; inverted and
        mov @keyzone+2,r0
        inv r0
        szc r0,@keyzone+10
[...]
        ; remove any bits in the new keyscan that were still set in debounce
        ; if we end up with a cleared keyscan, it doesn't matter since we
        ; won't be able to decode it anyway
        mov @keyzone,r0
        szc @keyzone+8,r0       ; inverted and
        mov r0,@keyzone
        mov @keyzone+2,r0
        szc @keyzone+10,r0
        mov r0,@keyzone+2
[...]
        ; update debounce, clearing shift
        ; add any new bits to debounce so they get masked off too
[...]
        mov @keyzone+4,r0
        soc @keyzone+12,r0
        mov r0,@keyzone+12
        mov @keyzone+6,r0
        soc @keyzone+14,r0
        andi r0,0fbffh
        mov r0,@keyzone+14
</pre></div>
<p>
Now with a clean set of keybits, we need to match them against a table. I organized a table of four words representing the eight matrix bytes in ASCII order so once you've found a matching set, the index into the table is the result. This table is stored at label <tt>keytab</tt> and looks like this:
</p><div><pre>[...]
        ; symbols and numbers, 32-64
        ; SPACE
        word 00000h, 00000h, 00000h, 08000h
        ; !
        word 00100h, 00000h, 00000h, 00400h
        ; "
        word 00200h, 00000h, 00000h, 00400h
        ; #
        word 00001h, 00000h, 00000h, 00400h
        ; $
        word 00002h, 00000h, 00000h, 00400h
[...]
</pre></div>
<p>
The Tutor does not have CONTROL or ALT keys, just SHIFT, nor does it have a backspace or delete. This lets us redefine our special keys (the cursor keys, MON and MOD) to generate indices in the control character range. Our table turns MOD into ^C (consistent with its use in Tomy BASIC as break), LEFT/UP/DOWN/RIGHT as ^H ^K ^M/CR ^L, RT (RETURN) as ^J/LF, and MOD as ^[/ESC. To round out other common ASCII points the default keyboard doesn't generate, ^I/TAB is encoded as SHIFT-SPACE, backtick as SHIFT-UP, tilde as SHIFT-DOWN and ^?/DEL as SHIFT-LEFT. The pipe and backslash characters remain represented by flat and degree/handaku, which have the same ASCII value. The only key our matrix table does not handle is LOCK, which would be <tt>word 00000h, 00000h, 00000h, 00200h</tt>. I'd probably implement this as a conventional CAPS LOCK defaulting to up but we'll exclude that from the logic for now. Anything not matched in the table gets a result of 0.
</p><div><pre>        ; decode key
        ; each table entry corresponds to CRUs &gt;EC00-EC70
        ; use a custom table to generate a standard ASCII value
        clr r6
        li r1,keytab
dekodl  mov *r1+,r2
        mov *r1+,r3
        mov *r1+,r4
        mov *r1+,r5
        ci r2,0ffffh            ; no key here
        jeq dekodn
        ; if the key matrix is an exact match, should be all zeroes
        xor @keyzone,r2
        xor @keyzone+2,r3
        xor @keyzone+4,r4
        xor @keyzone+6,r5
        soc r3,r2
        soc r4,r2
        soc r5,r2
        jeq dekodo
dekodn  inc r6
        ci r6,128
        jne dekodl
        b @keez
dekodo  mov r6,r0               ; got a good key
</pre></div>
<p>
Like the debounce comparator, this code XORs the current matrix value against the current table entry; if it gets all zeroes, we have a match. At the end the resulting character code is in R6 and R0. Parenthetically, the 9900 has a <tt>inct</tt> instruction that increments by two instead of just one with regular <tt>inc</tt>, useful for skipping words (you can also use an instruction like <tt>c *r1+,*r1+</tt> to increment by four in one word).
</p><p>
Because we left the VDP memory pointer at the end of our "hello world" blurb, to print the character to the screen we could simply do <tt>swpb r0</tt> to get it in the upper byte followed by <tt>movb r0,@vdpwd</tt>. This doesn't scroll at the end as there's no bounds-checking, and remember the Tutor doesn't have a backspace (control characters are simply printed as blanks anyway), but it's really really fast. However, we also want to display a cursor for we'll use our reversed space character, so we'll keep a rolling screen pointer in R7. We'll additionally have RT clear the screen and as a convenience use MON to bail out to the Tomy title.
</p><div><pre>        ; check for mon - implemented as escape
        ci r0,001bh
        jeq bye

        ; check for RT - implemented as line feed
        ci r0,000ah
        jne putc
        bl @clrscr
        b @cursor

        ; otherwise print character using a cursor
        ; overwrite previous cursor character with new character
putc    swpb r7
        movb r7, @vdpwr
        swpb r7
        movb r7, @vdpwr
        swpb r0
        ; MAME will actually allow a mov here but not the real machine
        movb r0, @vdpwd
        inc r7
        ; and print cursor
cursor  li r0,0a000h
        movb r0, @vdpwd
        b @keez
</pre></div>
<p>
The simplest way to go back to the title screen is to call the Tutor's reset vector, but paradoxically the 9900's built-in <tt>rset</tt> instruction is <em>not</em> what we want for this. There are a handful of TI-990 holdovers called <a href="https://www.unige.ch/medecine/nouspikel/ti99/tms9900.htm#External"><i>external instructions</i></a> which were used for special context switching operations, such as <tt>lrex</tt> to jump into front panel code. However, on the 9900/9995, most of the instructions with the possible exception of <tt>idle</tt> do nothing useful and in some cases could be potentially harmful depending on what's listening on the bus.
</p><p>
Instead, we'll use the low memory vectors. 9900 vectors consist of a pair of WP and PC words, with interrupt vectors starting at $0000. When an interrupt is triggered, or a vector is branched to using the <tt>blwp</tt> instruction, the WP and PC are loaded in order from those words (instantly saving the previous code's registers, assuming there is no conflict) and the previous values of WP, PC and ST are placed in the new R13, R14 and R15 respectively. The <tt>rtwp</tt> instruction then reverses everything using those registers and thus returns to the prior execution context. Theoretically the TMS9900 can support up to 16 levels of interrupt, starting at $0000 with level 0 for resets through $003c for level 15, though the 99/4 and 99/4A just wire everything to interrupt level 1. In the 9900 memory map these vectors are followed by XOP vectors for up to 16 software-defined opcodes via the <tt>xop</tt> family of instructions.
</p><p>
However, the 9995 only implements seven distinct interrupt levels, two of which are actually software interrupts (and one of those doesn't even work properly according to the manual errata). The highest level is level 0, connected to the reset pin, followed by the <tt>mid</tt> interrupt used for software opcodes, then NMIs, and then four numbered interrupts consisting of an external interrupt (1) on the INT1 pin, a not-reliably-functional arithmetic overflow interrupt (2), the on-chip decrementer (3) and another external interrupt (4) on INT2. These have their own vectors except for the MID interrupt and interrupt level 2 which share the same vector, and other than the NMI vector at $fffc all the rest come from low memory as well.
</p><p>
In this particular regard, the Tutor is no different from the 99/4A: a <tt>blwp 0</tt> will jump into the reset vector at $0000, just as if you'd powered the machine on and allowing you to go back to the menu. While the Tutor also uses the same reset vector values for levels 1 and 2, level 3 (the decrementer) runs normally to service its regular tasks and the level 4 (external INT2 triggered) interrupt is used for triggering on tape reads. On the other hand, the Tutor uses the entire XOP vector range as part of a jump table, so it isn't possible to use any XOP instructions on the Tutor with the standard ROMs (the 99/4A at least has <a href="http://www.unige.ch/medecine/nouspikel/ti99/tms9900.htm#XOP">a couple useful values there</a>). Anyway, all this is to say that a simple <tt>blwp 0</tt> will be sufficient.
</p><p>
That's pretty much it, and we're ready to assemble our first draft. I'll get to the code in a minute, but let's test it in MAME with <tt>mame tutor -skip_gameinfo -cart tello.rom</tt>. Our character set and welcome message appear beautifully though typing is a bit ... messy.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVLyQPcgPH6ZXZ9ZFDym7RWkMe848NRoMs3r5VJ0KP3kBEfzZBYNVG2Brkv9l0kRYN03QhMsbrQhSpUVR8ITZQru19OMAX0UwT9vbtpBhPqniGTK_e60yppj8v6n8rlGz-x2ltkM4RNNvlwfvtpb6f97TKX13gaprTnMk6bY35iJ0TGJDQf_PhblGGgk4/s792/mame-joy.png"><img alt="" data-original-height="630" data-original-width="792" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVLyQPcgPH6ZXZ9ZFDym7RWkMe848NRoMs3r5VJ0KP3kBEfzZBYNVG2Brkv9l0kRYN03QhMsbrQhSpUVR8ITZQru19OMAX0UwT9vbtpBhPqniGTK_e60yppj8v6n8rlGz-x2ltkM4RNNvlwfvtpb6f97TKX13gaprTnMk6bY35iJ0TGJDQf_PhblGGgk4/s320/mame-joy.png" width="320"></a></p><p>

The problem isn't our code, it's MAME's default settings. You'll find the same mojibake occurs while typing in regular BASIC as well. I mentioned that the keyboard matrix is shared with the joy controller lines (though that's actually useful because it allows you to read some keys from GBASIC which wouldn't ordinarily permit this), and because MAME defines some keys for the controller, you can't type normally with the default keyboard settings. In my case, I have a Hyperkin Trooper 2 USB joystick I use for Tutor games because it has two buttons for SL and SR, so I removed the key equivalents for the joy controllers and set it to exclusively use the joystick. Now we can type normally.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjD_pri3erbef3eNg855yPlK1RenlRvirK2xW7vB0Njp5YQLbcdhVHdrs9eeEOQYkEhu3GxAvaMVHUVLX7EZLDoePUnoHstU3cmxMku0XWsVT5CPWk80T3-h9LgOiWemgOgadyxF3U2Bk-BIH_pmFhRvqYWUUaP0f5Kr4Z-JLliJz2pOpdkTTU30sQV95g/s792/mame32.png"><img alt="" data-original-height="630" data-original-width="792" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjD_pri3erbef3eNg855yPlK1RenlRvirK2xW7vB0Njp5YQLbcdhVHdrs9eeEOQYkEhu3GxAvaMVHUVLX7EZLDoePUnoHstU3cmxMku0XWsVT5CPWk80T3-h9LgOiWemgOgadyxF3U2Bk-BIH_pmFhRvqYWUUaP0f5Kr4Z-JLliJz2pOpdkTTU30sQV95g/s320/mame32.png" width="320"></a></p><p>

And as hoped for, typing now flows beautifully. There is one more issue we need to solve, though:

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjO6ve2aurIKxK0yia2DJVsAsG0_-kAoD-JHj6ABaTZTD1nLgI58-huJw-zFymd14LlvtguZgJSqjc3amEkG2sf4dUvXPL_KYYksUJqbYazvRem-J73uBhbL9DhmyUk_N3nk0TGDi9ziLk1kQ1x8kYRXxscBJtLjh4PyNYbcGq0MBXOcQpPx5Cz-nT6Oko/s792/mame40-1.png"><img alt="" data-original-height="630" data-original-width="792" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjO6ve2aurIKxK0yia2DJVsAsG0_-kAoD-JHj6ABaTZTD1nLgI58-huJw-zFymd14LlvtguZgJSqjc3amEkG2sf4dUvXPL_KYYksUJqbYazvRem-J73uBhbL9DhmyUk_N3nk0TGDi9ziLk1kQ1x8kYRXxscBJtLjh4PyNYbcGq0MBXOcQpPx5Cz-nT6Oko/s320/mame40-1.png" width="320"></a></p><p>

I mentioned we would like this to also support the 9918A's 40 column mode, something the Tutor BIOS doesn't but would be very useful for productivity applications (the Tutor has a lot of great games but it's time it achieved its potential, darn it). With a little tweaking we can turn on the 40 column bit in VDP register 1 and adjust our message and screen layout so everything ends up in the right place. However, the 9918A can't display a 320-pixel-wide screen, so instead it displays a 240-pixel-wide screen using only the leftmost six columns of each character cell. The cells are still eight bits wide in memory; the rightmost two are simply not displayed. This sort of works for some of the characters — lowercase in particular, which makes me wonder if this was a consideration during the Tutor's development — but clearly doesn't for others.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh9Dx99AZy6ioIU-yIIt8TpypSiS3gz91djNdAJcjSQ8GoW6bjk_GvAOvjjMfV70J7VlvhlYx1s5y_ampInfslL-nFgF-sqdU35uluexLcOkTHB4u2ymSVd1K2U1xe0WpNyA5yo3u4lCF6GiyF5kg5OI6vWNGVvpdHKDgq5nFSnSLpMc_g9JhKVkZESxFA/s743/ultrafont.png"><img alt="" data-original-height="743" data-original-width="728" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh9Dx99AZy6ioIU-yIIt8TpypSiS3gz91djNdAJcjSQ8GoW6bjk_GvAOvjjMfV70J7VlvhlYx1s5y_ampInfslL-nFgF-sqdU35uluexLcOkTHB4u2ymSVd1K2U1xe0WpNyA5yo3u4lCF6GiyF5kg5OI6vWNGVvpdHKDgq5nFSnSLpMc_g9JhKVkZESxFA/s320/ultrafont.png"></a></p><p>

Since the font started as a Commodore 64 character set, after all, we'll go back into <a href="https://commodore.software/downloads/download/40-font-character-editors/2897-ultrafont-v-2">Ultrafont+</a> and start shrinking them down, leaving a bit of gutter space.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixfFQg0-d89t22RWlsLWsgrtF3LMORUHPSv22PxwkIll05fdFP28T4xJDEx97YTWQJnc8zYtCnnhKtQnST-A9gyMEv8vFeE0GIK1Su_PpyBX-jhgFXJSHss9fapD7UqymekT_yTeQteOAGty7TOHxmqjxMUqlrfnwoAzhxOFZ6dJyTefN4yondeRSKkEQ/s792/mame40-2.png"><img alt="" data-original-height="630" data-original-width="792" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixfFQg0-d89t22RWlsLWsgrtF3LMORUHPSv22PxwkIll05fdFP28T4xJDEx97YTWQJnc8zYtCnnhKtQnST-A9gyMEv8vFeE0GIK1Su_PpyBX-jhgFXJSHss9fapD7UqymekT_yTeQteOAGty7TOHxmqjxMUqlrfnwoAzhxOFZ6dJyTefN4yondeRSKkEQ/s320/mame40-2.png" width="320"></a></p><p>

I think we're ready to try it on the real thing!
</p><p>
I used minipro to dump the current contents of the multicart ROM and wrote up a little Perl script to do an inplace overwrite on the resulting file with our new binaries. We generate two ROM files called <tt>tello.rom</tt> (32 column) and <tt>tello40.rom</tt> (40 column), which we splice in at locations 0x70000 and 0x74000 and then burn it to flash.
</p><div><pre>% make burn
perl splice /home/censored/tutor.bin 0x70000 tello.rom 0x2000
successfully replaced 8192 bytes at offset 458752 in /home/censored/tutor.bin with tello.rom
perl splice /home/censored/tutor.bin 0x74000 tello40.rom 0x2000
successfully replaced 8192 bytes at offset 475136 in /home/censored/tutor.bin with tello40.rom
minipro -p SST39SF040 -z
Found TL866II+ 04.2.131 (0x283)
Pin test passed.
minipro -p SST39SF040 -w /home/censored/tutor.bin
Found TL866II+ 04.2.131 (0x283)
Chip ID OK: 0xBFB7
Erasing... 0.40Sec OK
Writing Code...  30.12Sec  OK
Reading Code...  4.30Sec  OK
Verification OK
</pre></div>
<p>
The multicart DIP settings for the 32-column version are (1=on) 00011 if you use those addresses. The first time I tried, the hello message appeared but typing generated no output. This was because I had a <tt>mov r0,@vdpwd</tt> instead of <tt>movb r0,@vdpwd</tt>; MAME will accept either instruction but not a real Tutor. With that corrected, we're in business!

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKniWgHE_hqJGJMj5MwUZyxKWTuowEU8KKqbv6Bn1ol8eFpLkLZJJFNRgQoSQaAAgJkuAsQtwq8ha-3kXIOrBv5MUIgmB7DhYBCNasghACSxtHViKduIxTjAAaq9KiNjiZc2RDvRH9g-6cua-Dvx2UoA0lvAWcACmBf5ikjZrl3sEh5ftjoQSIPcETYLw/s640/vlcsnap-2024-03-08-22h11m17s070.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKniWgHE_hqJGJMj5MwUZyxKWTuowEU8KKqbv6Bn1ol8eFpLkLZJJFNRgQoSQaAAgJkuAsQtwq8ha-3kXIOrBv5MUIgmB7DhYBCNasghACSxtHViKduIxTjAAaq9KiNjiZc2RDvRH9g-6cua-Dvx2UoA0lvAWcACmBf5ikjZrl3sEh5ftjoQSIPcETYLw/s320/vlcsnap-2024-03-08-22h11m17s070.png" width="320"></a></p><p>

For the 40-column version, set the DIP switches to 00010.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkm6sk62iiO8ZwUcIQ9LMU8yk3zTrhnPjdH0i0I8K1z_7080DK9MuT0nzF1tHnaxRujUTnOuyX903qnbC9U80YoFA766EOC99QZpygZFlG1nFXXnFQZym-j42ors_K1kMER2lCeTptg6krCOx05Xep9w33vbgOqNBBdl1WVAMkPldS_8Yt1q2Wsibvd4o/s640/vlcsnap-2024-03-08-22h18m41s523.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkm6sk62iiO8ZwUcIQ9LMU8yk3zTrhnPjdH0i0I8K1z_7080DK9MuT0nzF1tHnaxRujUTnOuyX903qnbC9U80YoFA766EOC99QZpygZFlG1nFXXnFQZym-j42ors_K1kMER2lCeTptg6krCOx05Xep9w33vbgOqNBBdl1WVAMkPldS_8Yt1q2Wsibvd4o/s320/vlcsnap-2024-03-08-22h18m41s523.png" width="320"></a></p><p>

These are real composite video captures from my real Tutor. Hurray! We did it!
</p><p>
Now, what things could you do with better keyboard support, true ASCII and fast character display? Well, obviously this whole proof of concept is the start of doing something more practical with the Tutor. <a href="http://oldvcr.blogspot.com/search/label/tomy%20tutor">I'll answer that question in a couple months</a> once all the parts arrive. The first order of business will be installing a PLCC adapter in the multicart so I don't have to pull the flash chip out repeatedly for testing.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjJKmoRaWSEhlk_RTiLGJA5P8238SBtHHY4TyZwK9_w5idE2YE7jKH7ea7WVo6Q7HmHljb6t_g6WpIc-1UOR5M7nmq0yvPnp4gdES2xsZ4nxygJp455pcGrrNumX1WnZGTtlNFanqewltrfqQTsOUhKUJVLhJ4O2a2BytwfcwKjG0RPDjPwfjAjxw__E-c/s2048/DSCN7059.JPG"><img alt="" data-original-height="1536" data-original-width="2048" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjJKmoRaWSEhlk_RTiLGJA5P8238SBtHHY4TyZwK9_w5idE2YE7jKH7ea7WVo6Q7HmHljb6t_g6WpIc-1UOR5M7nmq0yvPnp4gdES2xsZ4nxygJp455pcGrrNumX1WnZGTtlNFanqewltrfqQTsOUhKUJVLhJ4O2a2BytwfcwKjG0RPDjPwfjAjxw__E-c/s320/DSCN7059.JPG" width="320"></a></p><p>

Let's briefly finish our Tutor story. There are in fact two other members of the Tutor/Pyuuta family, both domestic to Japan: the Pyuuta Jr., a game console that came out between the Pyuuta and Tutor that implemented GRAPHIC mode (but no GBASIC) and could play most cartridges — but was entirely in English with no katakana support at all — and this, the last and final Tutor, the Pyuuta Mark II (variously Pyuuta mk II and Mark II). The mk II had proper keycaps with a rearranged layout and used the American Tutor BIOS instead of the Pyuuta's, with Tomy BASIC (also the same as the American Tutor's version) available as an add-on cartridge. Notably, neither system supported a composite monitor, only RF TV output, though they're pretty easy to comp-mod. Both systems have slight hardware differences from the Pyuuta and Tutor but both will run all the same cartridge games, and they also don't require special hardware for 32K cartridges. Unfortunately, their English-only nature probably didn't endear them to their home markets and the mk II can't load Pyuuta tapes either (only US Tutor ones). Likely as a result, both sold poorly, and Tomy exited the home computer market as well in 1984.
</p><p>
As for the 9995, in the end it was only ever implemented in three systems: the Tutor/Pyuuta family, a PEB upgrade called the Myarc Geneve 9640 which was basically a new TI-compatible computer on a card, and the <a href="http://powertrancortex.com/">Powertran Cortex</a>, a home and business computer first built at TI in the United Kingdom that never got released due to internal squabbles. Instead, its plans were published in the Electronics Today International magazine and a company called Powertran Cybernetics sold kits and fully assembled machines. The Cortex ran at a full 3MHz, had 64K of chip RAM (with a memory mapper supporting up to 1MB) and used a 16K PAL equivalent 9928/29 VDP for graphics, though the more advanced Yamaha/Maplin V9938 could also be substituted with up to 128K of VRAM. Floppy, serial and DMA were all supported along with a built-in BASIC and multiple operating system options, even a small <a href="http://www.stuartconner.me.uk/mini_cortex/mini_cortex.htm#using_unix">v6 UNIX port called LSX</a>. Although popular with enthusiasts, it was an obscure system then and now, and relatively few examples remain in operation.
</p><p>
While the 9995 was a much more tractable chip than its ancestors, the reliance of the 9900 series on RAM was what eventually stunted its technological evolution. In the days when it was taped out, CPU die space was expensive, so shifting register space onto cheaper RAM which often ran at a similar speed was a logical alternative. Indeed, tricks like 6502/6800 zero page are the same basic idea, using a special expanse of memory with faster access and special addressing as if it were CPU registers itself. As CPUs became substantially faster than memory, however, this architectural quirk became more of a liability and contemporary 16-bit CPUs like the Motorola 68000 and the Intel 8086 and 80286 eclipsed it. A chip like the 6502 only got away with it for as long as it did because it was incredibly cheap and incredibly common and even today still sells in quantity, neither advantage being one the 9900 or 9995 ever possessed. Today, modern CPUs have comparatively massive register files and caches as proof that the 9900 idea was a dead end. After the 99000 family, an upgraded 9900 with segmented memory only used in TI's last range of minicomputers, TI abandoned further development of the architecture in 1983 for the TMS320 DSP series and the exceptionally swift TMS32010, a much more popular (and, especially for a DSP, more conventional) processor.
</p><p>
The source code for our demonstration project along with a <tt>Makefile</tt>, the character set binaries and the keyscan table <a href="https://github.com/classilla/tello">are available on Github</a> under a 3-clause BSD license.
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Speaking without vocal cords, thanks to a new AI-assisted wearable device (110 pts)]]></title>
            <link>https://newsroom.ucla.edu/releases/speaking-without-vocal-cords-ucla-engineering-wearable-tech</link>
            <guid>39804138</guid>
            <pubDate>Sun, 24 Mar 2024 00:39:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newsroom.ucla.edu/releases/speaking-without-vocal-cords-ucla-engineering-wearable-tech">https://newsroom.ucla.edu/releases/speaking-without-vocal-cords-ucla-engineering-wearable-tech</a>, See on <a href="https://news.ycombinator.com/item?id=39804138">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div>
<p><span><span><span><b>Key takeaways</b></span></span></span></p>

<ul>
	<li><span><span><span></span></span></span><span><span><span>Bioengineers at UCLA have invented a thin, flexible device that adheres to the neck and translates the muscle movements of the larynx into audible speech.</span></span></span></li>
	<li><span><span><span>The device is trained through machine learning to recognize which muscle movements correspond to which words.</span></span></span></li>
	<li><span><span><span>The self-powered technology could serve as a non-invasive tool for people who have lost the ability to speak due to vocal cord problems. </span></span></span></li>
</ul>
</div>

<p><span><span><span></span></span></span><span><span><span>People with voice disorders, including those with pathological vocal cord conditions or who are recovering from laryngeal cancer surgeries, can often find it difficult or impossible to speak. That may soon change.</span></span></span></p>



<p><span><span><span>A team of UCLA engineers has invented a soft, thin, stretchy device measuring just over 1 square inch that can be attached to the skin outside the throat to help people with dysfunctional vocal cords regain their voice function. Their advance is <a href="https://www.nature.com/articles/s41467-024-45915-7">detailed this week</a> in the journal Nature Communications.</span></span></span></p>



<p><span><span><span>The new bioelectric system, developed by <a href="https://samueli.ucla.edu/people/jun-chen/">Jun Chen,</a>&nbsp;an assistant professor of bioengineering at the UCLA Samueli School of Engineering, and his colleagues, is able to detect movement in a person’s larynx muscles and translate those signals into audible speech with the assistance of machine-learning technology — with nearly 95% accuracy.</span></span></span></p>



<p><span><span><span>The breakthrough is the latest in Chen’s efforts to help those with disabilities. His team previously developed a <a href="https://newsroom.ucla.edu/releases/glove-translates-sign-language-to-speech" rel="" target="" title="">wearable glove</a> capable of translating American Sign Language into English speech in real time to help users of ASL communicate with those who don’t know how to sign.</span></span></span></p>



<div><p><img alt="Close-up of fingers stretching the small speech-enabling device" author="Jun Chen Lab/UCLA" data-imgheight="1884" data-imgwidth="1686" file_id="65f353962cfac2500a634b72" src="https://s3.amazonaws.com/cms.ipressroom.com/173/files/20242/Vocal+Cords-Stretch-Crop.jpg" title="adafdadfadfadfadfasdf" width="300"></p><p>Jun Chen Lab/UCLA</p>

<p>The wearable technology is&nbsp;designed to be flexible enough to move with and capture the activity of laryngeal muscles beneath the skin.</p>
</div>

<p><span><span><span></span></span></span><span><span><span>The tiny new patch-like device is made up of two components. One, a self-powered sensing component, detects and converts signals generated by muscle movements into high-fidelity, analyzable electrical signals; these electrical signals are then translated into speech signals using a machine-learning algorithm. The other, an actuation component, turns those speech signals into the desired voice expression. &nbsp;</span></span></span></p>



<p><span><span><span>The two components each contain two layers: a layer of biocompatible silicone compound polydimethylsiloxane, or PDMS, with elastic properties, and a magnetic induction layer made of copper induction coils. Sandwiched between the two components is a fifth layer containing PDMS mixed with micromagnets, which generates a magnetic field.</span></span></span></p>



<p><span><span><span>Utilizing a soft <a href="https://samueli.ucla.edu/ucla-bioengineers-develop-new-class-of-human-powered-bioelectronics/">magnetoelastic sensing mechanism</a> developed by Chen’s team in 2021, the device is capable of detecting changes in the magnetic field when it is altered as a result of mechanical forces — in this case, the movement of laryngeal muscles. The embedded serpentine induction coils in the magnetoelastic layers help generate high-fidelity electrical signals for sensing purposes. </span></span></span></p>



<p><span><span><span>Measuring 1.2 inches on each side, the device weighs about 7 grams and is just 0.06 inch thick. With double-sided biocompatible tape, it can easily adhere to an individual’s throat near the location of the vocal cords and can be reused by reapplying tape as needed.</span></span></span></p>



<p><span><span><span>Voice disorders are prevalent across all ages and demographic groups; research has shown that nearly 30% of people will experience at least one such disorder in their lifetime. Yet with therapeutic approaches, such as surgical interventions and voice therapy, voice recovery can stretch from three months to a year, with some invasive techniques requiring a significant period of mandatory postoperative voice rest. </span></span></span></p>



<p><span><span><span>“Existing solutions such as handheld electro-larynx devices and tracheoesophageal- puncture procedures can be inconvenient, invasive or uncomfortable,” said Chen who leads the <a href="https://www.junchenlab.com/">Wearable Bioelectronics Research Group</a> at UCLA, and has been named one the <a href="https://newsroom.ucla.edu/releases/2023-ucla-scholars-highly-cited-researchers" rel="" target="" title="">world’s most highly cited researchers</a> five years in a row. “This new device presents a wearable, non-invasive option capable of assisting patients in communicating during the period before treatment and during the post-treatment recovery period for voice disorders.” </span></span></span></p>



<div><p><img alt="Schematic with several images detailing the elements in the five different layers of the device." author="Jun Chen Lab/UCLA" data-imgheight="2950" data-imgwidth="4824" file_id="65f353af2cfac25009487845" src="https://s3.amazonaws.com/cms.ipressroom.com/173/files/20242/Vocal+Cords-Schematic.jpg" title="adsfadfadfadfadfadfadf"></p><p>Jun Chen Lab/UCLA</p>

<p><span><span>The two components — and five layers — of the device allow it to turn muscle movement into electrical signals which, with the help of machine learning, are ultimtately converted into speech signals and audible vocal expression.<span><span><span></span></span></span></span></span></p>
</div>



<p><span></span><span>How machine learning enables the wearable tech</span></p>



<p><span><span><span>In their experiments, the researchers tested the wearable technology on eight healthy adults. They collected data on laryngeal muscle movement and used a machine-learning algorithm to correlate the resulting signals to certain words. They then selected a corresponding output voice signal through the device’s actuation component. </span></span></span></p>



<p><span><span><span>The research team demonstrated the system’s accuracy by having the participants pronounce five sentences — both aloud and voicelessly — including “Hi, Rachel, how are you doing today?” and “I love you!” </span></span></span></p>



<p><span><span><span>The overall prediction accuracy of the model was 94.68%, with the participants’ voice signal amplified by the actuation component, demonstrating that the sensing mechanism recognized their laryngeal movement signal and matched the corresponding sentence the participants wished to say. </span></span></span></p>



<p><span><span><span>Going forward, the research team plans to continue enlarging the vocabulary of the device through machine learning and to test it in people with speech disorders. </span></span></span></p>



<p><span><span><span>Other authors of the paper are UCLA Samueli graduate students Ziyuan Che, Chrystal Duan, Xiao Wan, Jing Xu and Tianqi Zheng — all members of Chen’s lab. </span></span></span></p>



<p><span><span><span>The research was funded by the National Institutes of Health, the U.S. Office of Naval Research, the American Heart Association, Brain &amp; Behavior Research Foundation, the UCLA Clinical and Translational Science Institute, and the UCLA Samueli School of Engineering.</span></span></span></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Oxide Cloud Computer. No Cables. No Assembly. Just Cloud (123 pts)]]></title>
            <link>https://oxide.computer/</link>
            <guid>39804052</guid>
            <pubDate>Sun, 24 Mar 2024 00:20:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://oxide.computer/">https://oxide.computer/</a>, See on <a href="https://news.ycombinator.com/item?id=39804052">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><h2>Hardware and Software<br><span>Designed Together</span></h2></p><div><div><picture><img decoding="async" srcset="https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;dpr=1&amp;fm=webp 1x,https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;dpr=2&amp;fm=webp 2x,https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;dpr=3&amp;fm=webp 3x" src="https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;crop=entropy&amp;px=16&amp;blur=100&amp;fm=webp" width="512" height="600" alt="Front view of the oxide server rack"></picture><p><img src="https://oxide-computer.imgix.net/oxide-front-rack.webp?w=512&amp;crop=entropy&amp;px=16&amp;blur=100&amp;fm=webp" alt="Front view of the oxide server rack" width="512" height="600"></p></div><p>Vertically integrated and scale-ready.<!-- --> <span>Bringing hyperscaler agility to the mainstream enterprise.</span></p></div></div><div><div><h2>Instant IT Transformation</h2><p>Just add power, networking and go</p></div><div><h3>No Assembly Required</h3><p>Go from rack install to developer availability in a matter of hours, compared to weeks or months today.</p></div><div><h3>Power and Space Efficiency</h3><p>Takes up two-thirds as much space as traditional on-premises infrastructure.</p></div></div><div id="join-newsletter"><p><h3>Get our newsletter</h3></p></div><hr><div><p><h2>Accelerate Developer Velocity<br><span>Self-Service Environment for Developers</span></h2></p><div><div><p><img src="https://oxide.computer/img/oxide-figure-developer-cli.svg" width="343" height="274" alt="Illustration of a terminal using the oxide API"></p><div><h3>Developer-Friendly Tooling</h3><p>Work how you like - the Oxide CLI brings all the features of the web console to the command line.</p></div></div><div><p><img src="https://oxide.computer/img/oxide-figure-developer-tools.svg" width="343" height="274" alt="Logos of Kubernetes and Terraform"></p><div><h3>Compatible With Familiar Tools</h3><p>Manage with technologies you already know and use with our Kubernetes and Terraform integrations.</p></div></div><div><p><img src="https://oxide.computer/img/oxide-figure-developer-command-menu.svg" width="343" height="274" alt="Oxide web console command menu"></p><div><h3>Effortless Interface</h3><p>Use the command palette to go to any page, create resources and much more directly from your keyboard.</p></div></div></div></div><hr><div><h2>Maximise Transparency &amp; Control</h2><div><p>An experience that provides operators with comprehensive software to manage capacity, health and utilization over the entire fleet.</p><p>Drive operational efficiencies with automation and informed recommendations.</p></div></div><div><div><p><img src="https://oxide.computer/img/oxide-figure-capacity-mobile.svg" width="333" height="300" alt="Expected to run out of capacity in 287 days"></p><p><img src="https://oxide.computer/img/oxide-figure-capacity-desktop.svg" width="1058" height="352" alt="Expected to run out of capacity in 287 days"></p><p>Anticipate and resolve capacity needs</p></div><div><p><img src="https://oxide.computer/img/oxide-figure-network-diagram.svg" width="368" height="369" alt="Diagram of an example network"></p><p>Understand and debug issues faster</p></div><div><p><img src="https://oxide.computer/img/oxide-figure-overprivileged.svg" width="368" height="369" alt="Diagram of an overprivileged access alert"></p><p>Scope users to the privileges they need</p></div></div><div><p><h3>End-to-End Networking Observability</h3></p><div><p><img src="https://oxide.computer/img/oxide-issues-list.svg" width="247" height="247" alt="Representation of Oxide web console UI, showing a list of components, one is indicating an issue"></p><p><img src="https://oxide.computer/img/oxide-observability-packet-log.svg" width="247" height="247" alt="Snapshot of Oxide web console UI, showing a dropdown with one item highlighted that says 'View packet log'"></p></div><div><p><h3>End-to-End Networking Observability</h3></p><div><p>With our built-in switch and its purpose-built software, you can finally understand why your packets are not getting to where they are supposed to go.</p><a href="https://oxide.computer/product/networking">Learn more about networking<svg width="12" height="12"><use href="/build/_assets/sprite-4SZ57MXG.svg#next-arrow-12"></use></svg></a></div></div></div><div><div><h3>Understand End-to-End Performance</h3><p>Observability across physical and application-level network data, improving performance and uptime.</p></div><div><h3>Identify Bottlenecks</h3><p>Better diagnose and more quickly remediate bottlenecks across the complete infrastructure stack.</p></div><div><h3>Resolve Issues</h3><p>Single pane of glass to monitor normal operation and detect failures to enable capacity planning and debugging.</p></div><div><h3>Identify Low Utilization</h3><p>Rack-level, pooled infrastructure, with automated capacity management tooling, reducing dead capacity.</p></div></div><div><div><p><h2>Secure by <br>Design</h2></p><p>Modern on-premises, enterprise environments face a wide variety of threats. Oxide products are designed to defend against threats from internal and external attackers at application, network, and physical layers</p></div><div><div><p>First Instruction Integrity</p><p>As soon as power is applied to an Oxide rack, our purpose-built hardware root of trust – present on every Oxide server and switch – cryptographically validates that its own firmware is genuine and unmodified.</p></div><div><p>Extending Trust Through Boot</p><p>As the rack boots, trust is extended by holding processors in reset, measuring their firmware, recording those measurements in the root of trust, and finally releasing them to proceed. System software can then reliably know what firmware was booted on each processor by asking the root of trust.</p></div><div><p>Extending Trust Between Devices</p><p>During manufacturing, each hardware root of trust is provisioned with a private key and matching certificate signed by an Oxide Certificate Authority that uniquely identifies that root of trust and demonstrates that it was produced by Oxide.</p></div><div><p>Trust Quorum</p><p>Verifiable secret sharing protects customer data against at-rest and boot-time attacks.  When combined with remote attestation, this provides a strong guarantee.</p></div><div><p>Secure Secret Storage</p><p>Specialized storage service that avoids keeping secrets in RAM and has strict ACLs limiting access and use of secrets.</p></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cancer under age 50 increased 80% from 1990 to 2019 (237 pts)]]></title>
            <link>https://bmjoncology.bmj.com/content/2/1/e000049#DC1</link>
            <guid>39803845</guid>
            <pubDate>Sat, 23 Mar 2024 23:41:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bmjoncology.bmj.com/content/2/1/e000049#DC1">https://bmjoncology.bmj.com/content/2/1/e000049#DC1</a>, See on <a href="https://news.ycombinator.com/item?id=39803845">Hacker News</a></p>
Couldn't get https://bmjoncology.bmj.com/content/2/1/e000049#DC1: Error: Request failed with status code 500]]></description>
        </item>
        <item>
            <title><![CDATA[New Aztec Codices Discovered: The Codices of San Andrés Tetepilco (288 pts)]]></title>
            <link>https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/</link>
            <guid>39803508</guid>
            <pubDate>Sat, 23 Mar 2024 22:34:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/">https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/</a>, See on <a href="https://news.ycombinator.com/item?id=39803508">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
		<main id="main" role="main">

		
			
<article id="post-1199">
			<p><img width="1088" height="670" src="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=1088" alt="" decoding="async" srcset="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=1088 1088w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=150 150w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=300 300w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=768 768w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=1024 1024w, https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg 1201w" sizes="(max-width: 1088px) 100vw, 1088px" data-attachment-id="1207" data-permalink="https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/bb1kganf/" data-orig-file="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg" data-orig-size="1201,740" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="BB1kgANf" data-image-description="" data-image-caption="" data-medium-file="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=300" data-large-file="https://tlacuilollicom.files.wordpress.com/2024/03/bb1kganf.jpeg?w=739">		</p>
		<!-- .entry-header -->

	<div>
		
<p>Yesterday, a team of specialists of the National Institute of Anthropology and History of Mexico, led by the historians Baltazar Brito Guadarrama and María Castañeda de la Paz, the philologist Michel Oudijk, and the Nahuatl specialist Rafael Tena, presented to the public the discovery of three new Aztec codices, collectively known as the Codices of San Andrés Tetepilco, formerly a part of the Culhuacan polity of Central Mexico, and nowadays located within the Iztapalapa borough in Mexico City. This is one of the most exciting and spectacular discoveries regarding codical sources in recent years, and is no doubt closely related to the topic of this blog. The discovery has been already covered by the <a href="https://www.jornada.com.mx/2024/03/21/cultura/a03n1cul">Mexican press</a> and explained in detail in yesterday’s presentation at the National Museum of Anthropology in Mexico City, which can be seen in Youtube. However, an English summary will be presented for the readers of this blog.</p>



<figure><p><span><iframe width="739" height="416" src="https://www.youtube.com/embed/fw6Z4D7VecA?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en&amp;autohide=2&amp;wmode=transparent" allowfullscreen="true" sandbox="allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox"></iframe></span>
</p></figure>



<p>The newly discovered corpus was acquired by the Mexican government from a local family that wants to remain anonymous, but which were not collectors but rather traditional stewards of the cultural legacy of Culhuacan and Iztapalapa, and it is now stored at the library of the National Institute of Anthropology and History of Mexico. It comprises three codices. The first is called <em>Map of the Founding of Tetepilco</em>, and is a pictographic map which contains information regarding the foundation of San Andrés Tetepilco, as well as lists of toponyms to be found within Culhuacan, Tetepilco, Tepanohuayan, Cohuatlinchan, Xaltocan and Azcapotzalco. The second, the <em>Inventory of the Church of San Andrés Tetepilco</em>,  is unique, as Oudijk remarks, since it is a pictographic inventory of the church of San Andrés Tetepilco, comprising two pages. Sadly, it is very damaged. </p>



<p>Finally, the third document, now baptised as the <em>Tira of San Andrés Tetepilco</em>, is a pictographic history in the vein of the Boturini and the Aubin codices, comprising historical information regarding the Tenochtitlan polity from its foundation to the year 1603. It seems to belong to the same family as the Boturini, the Aubin, the Ms. 40 and the Ms. 85 of Paris, that is to say, some of the main codices dealing with Aztec imperial history, and Brito considers it as a sort of bridge between the Boturini and the Aubin, since its pictographic style is considerably close to the early colonial one of the former, rather than the late colonial one of the latter. It comprises 20 rectangular pages of amate paper, and contains new and striking iconography, including a spectacular depiction of Hernán Cortés as a Roman soldier. In the Aztec side of things, new iconography of Moctezuma Ilhuicamina during his conquest of Tetepilco is presented (Figure 1).</p>



<figure><img data-attachment-id="1208" data-permalink="https://tlacuilolli.com/2024/03/21/new-aztec-codices-the-codices-of-san-andres-tetepilco/figure-1-3/" data-orig-file="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg" data-orig-size="1243,740" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Figure 1" data-image-description="" data-image-caption="" data-medium-file="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=300" data-large-file="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=739" loading="lazy" width="1024" height="609" src="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=1024" alt="" srcset="https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=1024 1024w, https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=150 150w, https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=300 300w, https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg?w=768 768w, https://tlacuilollicom.files.wordpress.com/2024/03/figure-1.jpg 1243w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption>Figure 1. Codices of San Andrés Tetepilco: a) Map of the Founding of San Andrés Tetepilco; b) Inventory of the Church of San Andrés Tetepilco; c) <em>Tira </em>of San Andrés Tetepilco </figcaption></figure>



<p>Of course, new and very interesting examples of Aztec writing are contained throughout all these documents, including old and new toponyms, spellings of Western and Aztec names, and even some information that confirms that some glyphs formerly considered as hapax, as the <strong>chi </strong>syllabogram in the spelling of the name Motelchiuhtzin in Codex Telleriano-Remensis 43r, discussed in <a href="https://tlacuilolli.com/2022/02/16/a-christian-prayer-in-aztec-hieroglyphs-an-epigraphic-analysis/">another </a>post of this blog, were not anomalous but possibly conventional. Besides logosyllabic spellings, the presence of pictographs with alphabetic glosses in Nahuatl will be of great help to ascertain the functioning of this still controversial part of the Aztec communication system.</p>



<p>In any case, the author of this blog remains expectant of the future digital and physical publication of the Codices by Baltazar Brito’s team of experts, promised yesterday, and congratulate them for their breakthrough discovery. Cheers for Aztec writing and its everlasting cultural legacy!</p>








			</div><!-- .entry-content -->

	<!-- .entry-footer -->

	</article><!-- #post-## -->

			
	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>
			
<!-- #comments -->

		
		</main><!-- #main -->
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Marimo: Interactive Fluffy Ball (138 pts)]]></title>
            <link>https://oimo.io/works/marimo/</link>
            <guid>39803174</guid>
            <pubDate>Sat, 23 Mar 2024 21:23:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://oimo.io/works/marimo/">https://oimo.io/works/marimo/</a>, See on <a href="https://news.ycombinator.com/item?id=39803174">Hacker News</a></p>
<div id="readability-page-1" class="page">
	<a href="https://oimo.io/">
		<svg viewBox="0 0 48 48">
			<path stroke-width="4" stroke="#fff" fill="#fff" d="M 44 4 c 0 10 0 14 -2 20 s -7 9 -10 10 c -12 4 -22 -6 -18 -18 c 1 -3 4 -8 10 -10 s 10 -2 20 -2 Z M 22 6 C 14 8 8 14 6 22 S 4 35 4 44 c 10 0 15 0 22 -2 s 14 -9 16 -16 s 2 -13 2 -22 C 34 4 30 4 22 6 Z"></path>
			<path fill="#fff" d="M 20 23 A 8 8 0 1 0 36 23 A 8 8 0 1 0 20 23 Z M 32 11 A 3 3 0 1 0 38 11 A 3 3 0 1 0 32 11 Z"></path>
		</svg>
	</a>
	<a href="https://github.com/saharan/works/tree/main/marimo" target="_blank">
		<svg viewBox="0 0 24 24">
			<path fill="#fff" d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path>
		</svg>
	</a>
	<div id="menu">
		<p><label>Size</label>
		</p>
		<p><label>Hair Amount</label>
		</p>
		<p><label>Hair Length</label>
		</p>
		<p><label>Hair Volume</label>
		</p>
		<p><label>Gravity</label>
			<label>RGB</label>
		</p>
	</div>
	
	


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[What Happens to Google Maps When Tectonic Plates Move? (179 pts)]]></title>
            <link>https://nautil.us/what-happens-to-google-maps-when-tectonic-plates-move-237678/</link>
            <guid>39802934</guid>
            <pubDate>Sat, 23 Mar 2024 20:36:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nautil.us/what-happens-to-google-maps-when-tectonic-plates-move-237678/">https://nautil.us/what-happens-to-google-maps-when-tectonic-plates-move-237678/</a>, See on <a href="https://news.ycombinator.com/item?id=39802934">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><span>A</span>s a writer on physics, I’m always seeking new metaphors for understanding Einstein’s general theory of relativity, and while working on my last book, <i>Spooky Action at a Distance</i>, I thought I’d compare the warping of space and time to the motion of Earth’s tectonic plates. Einstein explained gravity as the bending of spacetime. A well-hit baseball arcs through the air to an outfielder’s glove because it is following the contours of spacetime, which the planet’s mass has resculpted. The mutability of spacetime also means that nothing in the universe has a fixed position, since the framework by which position is defined is fluid. And something like that is also true of Earth’s surface. Nothing on the ground has fixed coordinates because the landscape is ever-shifting.</p><p>But then it struck me: If nothing has fixed coordinates, then how do Google Maps, car nav systems, and all the other mapping services get you where you’re going? Presumably they must keep updating the coordinates of places, but how?  I figured I’d Google the answer quickly and get back to Einstein, yet a search turned up remarkably little on the subject. So, as happens distressingly often in my life, what I thought would take 30 seconds ended up consuming several days. I discovered a sizable infrastructure of geographers, geologists, and geodesists dedicated to ensuring that maps are accurate. But they are always a step behind the restless landscape. Geologic activity can create significant errors in the maps on your screens.</p>

<figure><img decoding="async" alt="" src="https://assets.nautil.us/16781_18dabb99ce171ea5a317521425d5c206.png"><figcaption><strong>HOUSEQUAKE:</strong> This screenshot represented my position in Google Maps while I was standing on my back deck. When I go to Google Earth and compare images taken on different dates, I find that my house jumps around by as much as 20 meters.</figcaption></figure><p>One of the people I talked to was Ken Hudnut of the United States Geological Survey, an earthquake researcher who had set up one of the first GPS networks to track plate motions. “Say that you’re standing right in the middle of a road intersection with your GPS receiver and you get the coordinates for your position,” he said. “You look at Google Earth, and instead of being located right at the middle of the road intersection, you’re off by some amount.” Several factors produce these errors. Consumer GPS units have a position uncertainty of several meters or more (represented by a circle in Google Maps). Less well known is that maps and satellite images are typically misaligned by a comparable amount. “It’s partly the GPS hardware that limits the accuracy, and part of it may also be the quality of the georeferencing,” Hudnut said. </p>
<p>An interesting, if dated, study from 2008<sup>1</sup> looked at Google Earth images in 31 cities in the developed world and found position errors ranging from 1 to 50 meters. It’s not hard to do your own experiments. The image above shows my position in Google Maps while I was standing on my back deck—a discrepancy of about 10 meters, much larger than the stated error circle. When I go to Google Earth and compare images taken on different dates, I find that my house jumps around by as much as 20 meters.</p><blockquote>
<p>If you’d been paying attention, you would have woken up to find that your house wasn’t at the same latitude and longitude anymore.</p>
</blockquote><p>In the grand scheme of things, this isn’t much, but does make you wary of high zoom levels. Hudnut said he sees map bloopers in his field work all the time. As technology progresses, so will we all. “We’re fast approaching the day when people will expect accuracies of centimeters in real time out of their handheld devices and then we’ll see a lot of head scratching as things no longer line up,” said Dru Smith of the National Geodetic Survey in Silver Spring, Maryland, the nation’s civilian chief geodesist—the go-to guy on the precise shape and size of our planet. </p><p>For the most part, misalignments don’t represent real geologic changes, but occur because it’s tricky to plop an aerial or orbital image onto the latitude and longitude grid. The image has to be aligned with reference points established on the ground. For this purpose, NGS maintains a network of fixed GPS stations and, over the past two centuries, has sprinkled the land with survey marks—typically, metallic disks mounted on exposed bedrock, concrete piers, and other fixed structures. The photo below shows one near my house. But the process of ground-truthing a map is never perfect. Moreover, the survey-mark coordinates can be imprecise or downright wrong.</p>
<figure><img decoding="async" alt="" src="https://assets.nautil.us/16768_ead8e65817265dd1346c3d2b2ba251c5.png"><figcaption><strong>X DOESN’T QUITE MARK THE SPOT:</strong> A National Geodetic Survey mark (above) near my house. Its coordinates can be imprecise or wrong.</figcaption></figure><p>NGS and other agencies recheck survey marks only very infrequently, so what a stroke of luck that a community of hobbyists—geocachers—does so for fun. “One of the many things we no longer have money to do is send out people to make sure those marks are still there,” Smith said. “Geocachers, through this creation of a new recreation of going out and finding these marks, are sending in tons of reports. … It’s been helpful to us to keep the mark recoveries up to date.”</p><p>Errors also sneak in because the latitude and longitude grid (or “datum”) is not god-given, but has to be pegged to a model of the planet’s shape. This is where plate tectonics can make itself felt. Confusingly, the U.S. uses two separate datums. Most maps are based on NAD 83, developed by NGS. Google Maps and GPS rely instead on WGS 84, maintained by a parallel military agency, which has a considerably larger budget. The civilian one is optimized for surveying within North America; the military one sacrifices domestic precision for global coverage.</p><p>When NGS introduced NAD 83, replacing an older datum that dated to 1927, it was the geographic version of the shift from the Julian to the Gregorian calendar. If you’d been paying attention, you would have woken up on Dec. 6, 1988, to find that your house wasn’t at the same latitude and longitude anymore. The shift, as large as 100 meters, reflected a more accurate model of Earth’s shape. Vestiges of the old datum linger. You still see maps based on NAD 27. Also, when the U.S. Navy developed the first satellite navigation system in the 1960s, engineers set the location of zero degrees longitude by extrapolating the old North American datum. Only later did they discover they had drawn the meridian about 100 meters east of the historic Prime Meridian marker at the Royal Observatory in Greenwich.</p>
<p>NGS and its military opposite number worked together to align their respective datums, but the two systems have drifted apart since then, creating a mismatch between maps and GPS coordinates. Plate tectonics is one reason. WGS 84 is a global standard tied to no one plate. In essence, it is fixed to Earth’s deep interior. Geodesists seeking to disentangle latitude and longitude from the movements of any one particular plate assume that tectonic plates are like interlocking gears—when one moves, all do—and that, if you add up all their rotational rates, they should sum to zero. The effect of not tying coordinates to one plate is that surveyed positions, and the maps built upon them, change over time.</p><p>In contrast, NAD 83 sits atop the North American plate like a fishnet laid out on the deck of a boat. As the plate moves, so does the datum. Other regions of the world likewise have their own local datums. That way, drivers can find their way and surveyors can draw their property lines in blissful ignorance of large-scale tectonic and polar motion. “Most surveyors and mapmakers would be happy to live in a world where the plates don’t move,” Smith explained. “We can’t fix that, but we can fix the datum so that the effect is not felt by the predominant number of users. … Generally speaking, a point in Kansas with a certain latitude and longitude this year had that exact same latitude and longitude 10 years ago or 10 years from now. … We try to make the planet non-dynamic.”</p><p>To deepen the datum discrepancy, NAD 83 has not been revamped to account for improved knowledge of Earth’s shape and size. “We are currently working with a system that is very self-consistent and very internally precise, but we know, for example, that the (0,0,0) coordinate of NAD 83, which should be the center of the Earth, is off by about two meters,” Smith said. The tradeoff for keeping surveyors happy is that the North American latitude and longitude grid is increasingly out of sync with the rest of the world (as shown in this diagram below, in which you can see how the North American plate is rotating about a point in the Yucatán). NGS plans an update in 2022, which will shift points on the continent by a meter or more.</p><figure><img decoding="async" alt="" src="https://assets.nautil.us/16769_48229fd6aa4328151e40bda429d8e182.png"><figcaption><span><strong>CHANGES IN LATITUDE:</strong> This diagram reveals how the North American latitude and longitude grid is increasingly out of sync with the rest of the world.</span><span>Courtesy of Michael Dennis of the National Geodetic Survey</span></figcaption></figure>
<p>The “rest of the world” includes Southern California, which straddles the North American and Pacific plates. The Pacific plate creeps a couple of inches toward the northwest every year relative to the rest of North America. The plate boundary is not sharp, so the actual amount of movement varies in a complicated way. The California Spatial Reference Center in La Jolla has a network of tracking stations and periodically updates the coordinates of reference points in the state. “That’s what the surveyors then use to tie themselves into NAD 83,” said the center’s director, Yehuda Bock. The last update was in 2018.</p><p>Like Smith, Bock says that more frequent updating would actually complicate matters: “Surveyors do not like it if coordinates change, so this is kind of a compromise.” For localized line-drawing, it doesn’t much matter, but large-scale projects such as the California high-speed rail system have to keep up with tectonic motion.</p><p>Things obviously get more interesting during earthquakes. “What the earthquake would do is the equivalent of what you do with a pair of scissors, if you cut diagonally across a map along a fault line and then slid one side of the map with respect to the other,” Hudnut said. For instance, in Google Earth, go to the following coordinates north of Palm Springs, near the epicenter of the 1992 Landers quake: 34.189838 degrees, –116.433842 degrees. Bring up the historical imagery, compare the July 1989 and May 1994 images, and you’ll see a lateral shift along the fault that runs from the top left to the bottom right of the frame. The alignment of Aberdeen Road, which crosses the fault, shifts noticeably. The quake displaced the land near the fault by several meters.</p><p>GPS networks can even see earthquakes in real time. A dramatic video of the 2011 Tohoku quake, made by Ronni Grapenthin at the University of California, Berkeley based on data from the Japanese Geospatial Information Authority, shows the coastline near the quake site move horizontally by as much as 4 meters. The video also shows the waves that rippled outward over Japan (and indeed the world).</p>
<p> <iframe loading="lazy" src="https://www.youtube.com/embed/rMhhyb6Yy94" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" width="733" height="412" frameborder="0"></iframe> </p><p>Adjustments for tectonic activity take time to filter down to maps. I spoke with Kari Craun, who, as director of the USGS National Geospatial Technical Operations Center near St. Louis, is in charge of producing the USGS topographic maps beloved of outdoors enthusiasts. She says the maps are updated every three years (and even that pace has been hard to maintain with budget cuts). In between, mapmakers figure, the error is swamped by the imprecision of mapping and GPS equipment. Future maps may be updated at a rate closer to real-time. “We have the technology now with GPS to be able to make those slight adjustments on a more frequent basis,” Craun said.</p><p>As someone who relies on Google Maps to get around, I look forward to that. But the romantic in me prefers seeing out-of-date maps. They never let us forget the dynamism of our planet.</p>
<p><i>George Musser is an award-winning science writer and the author of</i> Spooky Action at a Distance <i>and</i> The Complete Idiot’s Guide to String Theory. <i>Follow him at @gmusser</i></p><p><b>References</b></p><p>1. Potere, D. Horizontal position accuracy of Google Earth’s high-resolution imagery archive. <i>Sensors</i> <b>8</b>, 7973-7981 (2008).</p>
<p><i>Lead image: AngieYeoh / Shutterstock</i></p><div>
<p><img src="https://nautil.us/wp-content/themes/nautilus-block-theme/images/icons/logo-icon.svg" alt="new_letter"></p><div>
<h4>Get the Nautilus newsletter</h4>
<p>Cutting-edge science, unraveled by the very brightest living thinkers.</p>
</div>

</div> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The man who bought Pine Bluff, Arkansas (2022) (250 pts)]]></title>
            <link>https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas</link>
            <guid>39802157</guid>
            <pubDate>Sat, 23 Mar 2024 18:41:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas">https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas</a>, See on <a href="https://news.ycombinator.com/item?id=39802157">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>Since the dawn of human history, certain archetypal stories have recurred, appearing again and again in myth and legend across cultures, continents, and centuries. The Deluge. The Resurrection. The Hero’s Journey. On the internet, among the most important archetypes is “The Overconfident Optimist and His Ill-Advised DIY Project.” We see it in </span><a href="https://twitter.com/boldlybuilding2/status/1197999531671130112" rel="">Groverhaus</a><span>, in </span><a href="https://www.gawker.com/5932987/reddit-island-could-an-enthusiastic-online-community-create-a-nerd-oasis-in-real-life" rel="">Reddit Island</a><span>, in the </span><a href="https://twitter.com/foldablehuman/status/1018966179493265408?lang=en" rel="">Child-Annihilating Zipline</a><span>.</span></p><p><span>On Monday the user @i_zzzzzz -- a person to whom I feel personally indebted for </span><a href="https://twitter.com/i_zzzzzz/status/948803884738404352" rel="">their coinage of the extremely useful term “chaos meal”</a><span> -- revealed what seemed like a new instance of this time-honored archetype. “</span><a href="https://news.ycombinator.com/item?id=32465698" rel="">This guy on Hacker News</a><span> is buying up the entire town of Pine Bluff, Arkansas for reasons that seem unclear even to him. Someone please help him go home to his children,” </span><a href="https://twitter.com/i_zzzzzz/status/1559027106176286721" rel="">@i_zzzzzz wrote</a><span>.</span></p><p><span>The comment appears, it seems worth noting, underneath </span><a href="https://news.ycombinator.com/item?id=32465372" rel="">a Hackernews post from a tech worker looking to relocate for remote work, asking for advice on finding a small town</a><span> with a walkable downtown, good schools, a nearby airport, and houses that cost less than $1 million. “Pick some states, and go visit towns with colleges in them,” one commenter suggests. “The internet means there are no undiscovered places, and the economics can undermine what makes a place special in the first place,” another commenter warns. But one commenter -- writing under the name pontifier -- has very different way of thinking about the problem: why not find the biggest, cheapest warehouse building in the U.S., and buy it?</span></p><blockquote><p>My method sure hasn't worked very well... or has it? I was looking for cheap warehouse space to start a business in, and did a nation-wide search for the largest, cheapest building in the entire continental US.</p><p>I found one that seemed too good to be true. a 220,000 sqft metal warehouse and office complex on 17 acres. I thought the price was a typo at $375k.The agent assured me that the price was correct, and I flew out to see the place.</p><p>It was in a little town called Pine Bluff, Arkansas.</p><p>I offered about 3/4 what they were asking, and they accepted the offer.</p><p>Fast forward 2 1/2 years, and I've had nothing but problems. Break in after break in. Can't work through the red tape with the city so my warehouse sits empty. It feels like they are actively working against myself and other entrepreneurs I talk to. At least 2 others who bought buildings and tried to open businesses left after getting nowhere.</p><p>Maybe I'm daft, but I ended up buying about 75 more properties here... all surprisingly cheap.</p><p>The town is killing me though. I haven't seen my kids very much lately - I don't think it's safe enough for them. I'm probably going to be moving back to Utah in the next couple of months because it's just too much out here.</p></blockquote><p>It’s hard to express the number of questions that a comment like this raises. Questions like: What? What on earth, bro? Was this (as some commenters imagined) a libertarian tech bro trying to take over a depressed town? A comedian doing a weird bit? A man with some kind of mental illness?</p><p><span>Whatever it was, it wasn’t fake: “Pontifier” is the handle used across a number of platforms by a Utahn named John Fenley, a compulsive entrepreneur, amateur nuclear engineer, and, now -- public records show</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-68844027" href="https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas#footnote-1-68844027" target="_self" rel="">1</a></span><span> -- among the largest property owners in Jefferson County, Arkansas. Fenley has an extensive internet-content trail -- including, besides </span><a href="https://news.ycombinator.com/user?id=pontifier" rel="">hundreds of HackerNews comments</a><span>, </span><a href="http://twitter.com/pontifier" rel="">a Twitter account</a><span>, </span><a href="https://www.youtube.com/user/pontifier/videos" rel="">a YouTube channel</a><span>, </span><a href="https://soundcloud.com/john-fenley" rel="">a Soundcloud page</a><span>, and many different registered URLs</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-68844027" href="https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas#footnote-2-68844027" target="_self" rel="">2</a></span><span> -- some portion of which is dedicated to documenting his Pine Bluff odyssey. But none of it really clarifies what Fenley’s deal is. </span></p><p>So I called Fenley on Tuesday morning, and reached him at his home in Pine Bluff. He was an engaging, talkative interview, and I appreciated his candor and admired his ambition and his positive attitude. He was more than happy to discuss his dreams, troubles, and real-estate activity in Pine Bluff. </p><p>If I’m being honest, I can’t really promise it will clarify anything. </p><p>“Only time will tell if this was a good idea,” he told me. “I mean, yeah, I've experienced, you know, thousands, and thousands, and thousands of dollars of loss. But the upside still could be millions and millions of dollars. Because I still own a warehouse.”</p><p><span>Fenley’s story --&nbsp;this chapter, at any rate -- begins in 2019. After separating from his wife, with whom he has three kids, Fenley had moved in with his father, a sculptor, and uncle in Los Angeles, working on </span><a href="http://www.crossies.com/murfie/crossies_history.html" rel="">a start-up he’d founded called Crossies</a><span>, which stores and digitizes physical media collections and offers them for streaming on the cloud. Two weeks after his arrival, his uncle received an eviction notice, and Fenley and his father began to look for somewhere new. </span></p><p><span>Fenley had run a </span><a href="http://www.provolt.org/" rel="">a makerspace workshop called “Provolt”</a><span> in Utah until the landlord had raised the rent. “There was a 65,000 square foot jail that I'd wanted wanted to move the makerspace into in Provo, and that that whole thing hadn't worked out,” he told me on the phone. (The city only wanted to sell the asbestos-riddled jail, </span><a href="http://heraldextra.com/news/2015/jun/18/provo-city-puts-old-county-jail-on-surplus-list-gets-sued" rel="">which it described as “grim,”</a><span> to owners who would demolish it; Fenley had wanted to rehabilitate the building.) The jail’s size became his minimum lower bound. </span></p><p><span>“I didn't care where it was in the country. And I wanted to find the cheapest possible price,” he said.” So Fenley hopped on the commercial real-estate listing site Loopnet and searched, </span><a href="https://captimes.com/news/local/neighborhoods/john-fenley-shipped-murfie-customers-800-000-cds-to-arkansas-where-are-they-now/article_ef835ab8-b43c-5ec7-b390-c0bdca40e8e5.html" rel="">as he later described to </a><em><a href="https://captimes.com/news/local/neighborhoods/john-fenley-shipped-murfie-customers-800-000-cds-to-arkansas-where-are-they-now/article_ef835ab8-b43c-5ec7-b390-c0bdca40e8e5.html" rel="">The Capital Times</a></em><a href="https://captimes.com/news/local/neighborhoods/john-fenley-shipped-murfie-customers-800-000-cds-to-arkansas-where-are-they-now/article_ef835ab8-b43c-5ec7-b390-c0bdca40e8e5.html" rel=""> of Madison, Wis.</a><span>, “for properties over 65,000 square feet and sorted by price.” At the top of the list was the former home of the steel company Varco Pruden --&nbsp;a 17-acre property with a warehouse and office complex in Pine Bluff that had been vacant and decaying for 15 years. The property was listed at $375,000; Fenley initially assumed the price was a typo. In the summer of 2019, Fenley flew out to tour it, making a YouTube video of his first visit:</span></p><div id="youtube2-qdkLzioUiAE" data-attrs="{&quot;videoId&quot;:&quot;qdkLzioUiAE&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/qdkLzioUiAE?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p><span>“It was awesome,” Fenley recalled. “It didn't seem like in that bad condition. I mean, for $375,000, how picky can you be about the condition of a place? It had a roof. It had concrete slabs. It had walls, you know</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-68844027" href="https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas#footnote-3-68844027" target="_self" rel="">3</a></span><span>?” That fall, Fenley made an offer of $300,000, and the owners accepted. He started packing up his things in L.A. and Utah, preparing to relocate.</span></p><p><span>Not many people move </span><em>to </em><span>Pine Bluff. Once a prosperous manufacturing and agricultural city located about 50 miles south of Little Rock, Pine Bluff most recently made national headlines for being </span><a href="http://nytimes.com/2021/08/12/us/pine-bluff-fastest-shrinking-metro-area.html" rel="">the fastest-shrinking city in the country</a><span>. As in many other industrial and agricultural cities in the U.S., white flight, capital flight, deindustrialization, and a multi-decade conservative assault on social spending have decimated Pine Bluff’s economy, leaving it caught in a negative feedback loop between a dwindling tax base and diminished municipal resources. Varco Pruden, the steel company that once owned the 19-acre property Fenley bought for $300,000 and is now itself owned by an Australian conglomerate, </span><a href="http://arkansasonline.com/news/2022/jan/25/varco-pruden-moving-from-pb-to-white-hall" rel="">announced this year it would move its remaining 32 employees to the neighboring city of White Hall</a><span>, which is 70 percent white (Pine Bluff is 75 percent black) and has among the highest median incomes in Arkansas. Pine Bluff, where median income is about 60 percent lower, suffers under one of the worst murder rates in the country.</span></p><p><span>Fenley would not make it to Pine Bluff for a few months yet. In December of 2019, while closing the deal for the Varco Pruden property, Fenley </span><a href="https://www.theverge.com/2019/12/13/21019565/murfie-madison-wisconsin-store-stream-cd-vinyl-collection-closed" rel="">read on the Verge about the demise of a company called Murfie</a><span> -- a music storage-digitizing-streaming company very similar to Crossies, which Fenley was still trying to get off the ground. Murfie, which was based out of Madison, had gone mysteriously bankrupt and the collections of CDs it was storing for customers were about to be abandoned. To Fenley, it was “a perfect storm of opportunity”: Murfie was “basically” Crossies, and he was in the process of purchasing a perfect storage facility for all those CDs. Fenley </span><a href="https://www.theverge.com/2020/2/5/21121594/crossies-murfie-madison-wisconsin-arkansas-1-million-abandoned-cds" rel="">flew to Wisconsin and negotiated to purchase Murfie and its assets for $6,000, plus $2,000 in lawyers’ fees</a><span>. He packed two shipping containers with Murfie customers’ CD collections and sent them down to Pine Bluff.</span></p><div id="youtube2-B5KleqoyB0s" data-attrs="{&quot;videoId&quot;:&quot;B5KleqoyB0s&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/B5KleqoyB0s?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p><span>By the time the shipping containers, delayed by COVID-19, arrived in July, Fenley’s dreams had gotten more complicated. At this point his plans for the warehouse and surrounding property included not just a makerspace but a live/work business incubator, art studio, and science museum. It would be called “</span><a href="http://www.serendipic.com/#contact" rel="">Serendipic</a><span>.” “I was working with Pine Bluff City at the time,” Fenley said. “I made up my little proposal for the planning commission, submitted it, and they approved most of the stuff I wanted to do, with a notable exception exception of a go-kart track.” </span></p><p><span>But Fenley’s relationship with the city of Pine Bluff was deteriorating. </span><a href="https://captimes.com/news/local/neighborhoods/john-fenley-shipped-murfie-customers-800-000-cds-to-arkansas-where-are-they-now/article_ef835ab8-b43c-5ec7-b390-c0bdca40e8e5.html" rel="">Pine Bluff city government wanted Fenley to submit architectural and engineering drawings so it could determine the applicable building codes</a><span>, but he had not done so and the city wouldn’t approve his permits. Fenley believes something else was at stake: “They denied my go-kart track that I proposed, and now they’re spending $2.6 million to </span><a href="https://www.thv11.com/article/entertainment/go-kart-facility-pine-bluff/91-b3415ccd-8350-4ed7-be53-1080fef6ca0d" rel="">build their own go-kart track</a><span>. Yeah, surprising. I proposed residences for artists and entrepreneurs. Oh, suddenly, their little art space that they’re building is going to have residences for artists. Oh, what a surprise.” he said. “The city doesn't want any competition with anything they're trying to do. They have their own business incubator; they have their own science museum, which honestly sucks. Both of them. Their little makerspace, business incubator thing? It sucks. It's the worst one I've ever been to in my life.”</span></p><p><span>Fenley </span><a href="https://murfie.com/dist/list.html" rel="">began recording his meetings with town officials and posting them to the Murfie site</a><span>; they frequently end with Fenley being asked to calm down or leave. At one point, he told me, a zoning official “came across the room, ripped the clipboard out of my hand, and yelled at me to get out.” (He says he filed a police report over the incident.) Listening to Fenley’s recordings, the fairest thing you might say is that it seems like there is a mismatch between the scale and mutability of Fenley’s science museum–makerspace–go-kart track dreams and the capacity of Pine Bluff’s bureaucracy, not to mention between his eagerness to occupy the old warehouse and the city government’s caution over a long-abandoned space. </span></p><p><span>Permitting difficulty was not the only trouble Fenley was facing, anyway. In the early months of the process, Fenley had been staying in a tent and RV on the Varco Pruden site, sometimes with his father. (Fenley now lives in a house nearby.) “This whole time, there's this constant background of crime in this town,” he said. “People have come to the tent and put a gun in my face at one point, back in 2020 -- while I was waiting for this stuff to happen -- and my dad shot at them, and they ran away. I've got an audio recording of that.” (He does; it’s available on his Soundcloud; I can’t say I recommend listening to it.) At one point, trying to catch two thieves who’d stolen a catalytic converter from his car, </span><a href="http://bensforbars.com/" rel="">he set up a website called “Bens for Bars”</a><span> offering cash for tips leading to the thieves.</span></p><p>Fenley wasn’t exactly unaware of Pine Bluff’s reputation. “I saw some statistics,” he said on the phone. “And I was like, ‘Oh, well, I have one in X number of chance of being robbed each year or something.’ Right? Yeah. But that's on average, and well, I'm a huge target. I didn't really take that into account, I guess.” He’s mostly dealing with “career criminals,” he said, who arrive “with heavy machinery, cutting torches,” looking for metal and other materials to lift and sell for scrap.</p><p>Whatever you think of Google Forms-based private snitch sites, and whatever might expect from the circumstances, Fenley is a fraction as bloodthirsty as tough-on-crime local columnists in much less dangerous metropolises. “It’s a nice town,” he told me about Pine Bluff. “It feels like they’re trying to fix things. New York was terrible, in the ‘80s. Everything they’re saying about Pine Bluff now they were saying about New York in the ‘80s! And I sure wish I could have bought some real estate in New York in the 80s!”</p><p data-attrs="{&quot;url&quot;:&quot;https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p><p><span>For most of the next year, Fenley, living on the property and subsisting on ramen, was engaged in battle on multiple fronts: Against the city of Pine Bluff, against the scrappers stealing from his property, and against angry Murfie customers who wanted to know where their CDs were. (Still packed into the shipping containers sitting outside the Varco Pruden warehouse, as it happened.) But in the summer of 2021, he came into a windfall: He was able to sell nearly $900,000 worth of stock in a company to whom he’d sold a patent</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-68844027" href="https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas#footnote-4-68844027" target="_self" rel="">4</a></span><span>. A certain kind of person might use that money to extricate themselves from what had become a clearly stressful and likely unsustainable real-estate situation in Pine Bluff. Fenley, instead, used it to buy more property.</span></p><p>“All of a sudden I went from scraping by to having $890,000 in my bank account. And then a tax auction, like three weeks later? Of course I'm gonna buy some property.” He spent $138,000 and ended up with 74 parcels of land in Pine Bluff, to go along with his 19-acre industrial park. “I didn’t really have a plan,” he said. Fenley’s mom was a real estate agent, and he told me it was “drilled into me from a young child: You buy property when you can.” He still sounds awed by how much land he bought, and how cheaply. “There were a few hundred other people in that room. And anybody else that had the money could have done it,” he said. “But I'm the one that actually did it. That's what a lot of this boils down to, in a way. A lot of the things that I'm doing, anybody could do them. But I'm the one that's actually doing them.”</p><p><span>And yet becoming one of the top landowners (by parcel) in Jefferson County didn’t change much for Fenley’s overall situation. He moved into a house, but he still hasn’t broken ground on his dream makerspace; his YouTube feed is still taken up by increasingly apologetic messages to Murfie customers interspersed with security footage of alleged thieves. This summer, he and his 12-year-old son drove from Provo to Pine Bluff in a Volkswagen bus loaded up with electronics and supplies. “Saturday, we came to the house and played video games. And Sunday, went back over the warehouse, and the containers were robbed. Everything,” he said.” “</span><a href="https://www.youtube.com/watch?v=wHclCHqC2rE" rel="">Everything I brought from Utah was stolen</a><span>. They stole my turbomolecular vacuum pumps for my fusion reactor</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5-68844027" href="https://maxread.substack.com/p/the-man-who-bought-pine-bluff-arkansas#footnote-5-68844027" target="_self" rel="">5</a></span><span>!”</span></p><p>This seems to have been something of a final straw for even the eternally optimistic Fenley. A year after buying a chunk of Pine Bluff at auction, he’s finally decided to leave: “My finances are fine,” he told me. “I'm in no danger of losing the warehouse or any of the property that I bought. But right now, my mother and girlfriend are working on building a warehouse in Utah, and moving everything back to Utah. That's the plan at this point as of today.”</p><p>But what about the makerspace? What about the warehouse? What about his Pine Bluff holdings? I asked Fenley what his long-term plans were. He hesitated. “There's a hotel available at auction right now that I bid on three weeks ago. There's like a week left in the auction. If nobody bids on this hotel against me, I'm gonna buy a hotel for $31,400,” he said. The hotel is in Pine Bluff, with good highway access. It’s been unoccupied since 2019. “It'd be freaking fantastic to own a hotel, and like, have rooftop parties and turn the whole top floor into a penthouse for me. You know? Like, that's, like, how would I not want to do that?”</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Rotary Phone Project (183 pts)]]></title>
            <link>https://github.com/mnutt/rotary</link>
            <guid>39801991</guid>
            <pubDate>Sat, 23 Mar 2024 18:21:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/mnutt/rotary">https://github.com/mnutt/rotary</a>, See on <a href="https://news.ycombinator.com/item?id=39801991">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Rotary Phone Project</h2><a id="user-content-rotary-phone-project" aria-label="Permalink: Rotary Phone Project" href="#rotary-phone-project"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/mnutt/rotary/blob/main/images/header.jpg"><img src="https://github.com/mnutt/rotary/raw/main/images/header.jpg" alt="The phone in use"></a></p>
<p dir="auto">This is an account of a project we recently did. The files aren't intended to constitute a cohesive runnable project, they're just a loose collection of scripts. It's mostly here to remind me how it works, but hopefully it's useful to others.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Background</h2><a id="user-content-background" aria-label="Permalink: Background" href="#background"></a></p>
<p dir="auto">Recently we went to the MoMA with my 4 year old son. Some modern art is hard to appreciate as a kid, but the exhibit he <em>loved</em> was one where they had a bunch of rotary phones and you could <a href="https://www.moma.org/collection/works/294325" rel="nofollow">dial a number and it would read you a poem</a>. I wanted to replicate something like this at home.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto">Some things I wanted it to be able to do:</p>
<ul dir="auto">
<li>Dial out to a short list of family contacts. It's not something I think about much, but when I was a kid there was a phone on the wall and once I could reach it, I could use it. Now, if you're not old enough to have a cell phone, you also can't call anyone at all.</li>
<li>Allow incoming calls from that same list of family contacts. Requires an actual phone number.</li>
<li>On a different extension, hear a random joke.</li>
<li><del>Hear a random k-pop song.</del> This was an easy thing to start with, but not actually that fun. The audio quality is pretty terrible for music.</li>
<li>Get NYC MTA train status. My son loves the subway, and is already pretty proficient at using a unix terminal to query the status of different trains, but it would be fun to hear an announcement too.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Equipment</h2><a id="user-content-equipment" aria-label="Permalink: Equipment" href="#equipment"></a></p>
<p dir="auto">60 years ago, every household in America had one or more rotary phones, so they're not exactly hard to find. I bought one off of Ebay for ~$25. Not all of them are guaranteed to be in working order, but these things are pretty solid so if the outside looks undamaged, it's likely alright. Worst case you might have to spend another $25 and try again. I got a <a href="https://en.wikipedia.org/wiki/Model_500_telephone" rel="nofollow">Western Electric Bell 500</a>.</p>
<p dir="auto">If we lived in 1960 (or even 2000) I could plug it into the wall and the project would be mostly done. But if I want to do anything interesting, I need to adapt it to VoIP. My initial thought was to hack up the inside of the phone and use a Raspberry Pi or ESP32 or something, but between driving 48V DC or replacing most of the internals it seemed a bit out of reach. Instead, I used the phone unmodified and connected it to a <a href="https://www.grandstream.com/products/gateways-and-atas/analog-telephone-adaptors/product/ht802" rel="nofollow">Grandstream GS-HT802</a> which lists rotary support in the specs. This currently goes for ~$50 <a href="https://www.amazon.com/Grandstream-GS-HT802-Analog-Telephone-Adapter/dp/B01JH7MYKA" rel="nofollow">on Amazon</a>.</p>
<p dir="auto">To accomplish the other features, I wanted to use Asterisk, an open source PBX. Using Asterisk to make a phone that tells you jokes is a bit like using Kubernetes to host your blog, but I had a little bit of experience with it from ~20 years ago and it seemed to do everything I wanted. Ideally I would have been able to attach the Grandstream adapter directly to the machine running the Asterisk server. But for the equipment I had, I ended up attaching the Grandstream to the Raspberry Pi in my son's room, and having it bridge wifi to an old server under my desk running Asterisk. This hasn't flaked out yet but seems like it could be brittle. At some point I'd like to consolidate these into a more powerful Raspberry Pi 5 that runs Asterisk and is directly connected to the GrandStream.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/mnutt/rotary/blob/main/images/diagram.png"><img src="https://github.com/mnutt/rotary/raw/main/images/diagram.png" alt="Diagram of equipment setup"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Rotary Phone Setup</h2><a id="user-content-rotary-phone-setup" aria-label="Permalink: Rotary Phone Setup" href="#rotary-phone-setup"></a></p>
<p dir="auto">Pretty much just plug the RJ11 port of the phone into port 1 on the GrandStream. This should mostly Just Work, but there are some potential caveats depending on the rotary phone you receive. I'd try it first, but if you have trouble with it ringing later in the process you can try:</p>
<ul dir="auto">
<li>It's possible that your phone has been wired for a "party line" instead of regular service. This would require unscrewing the cover (make sure it's unplugged from the Grandstream) and a small amount of rewiring which differs based on your phone model.</li>
<li>The one I received <em>wasn't</em> wired for a party line, but was effectively muted. I had to take the cover off and unhook part of the ringer. I haven't seen discussion of this online anywhere.</li>
</ul>
<p dir="auto">Opening it up:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/mnutt/rotary/blob/main/images/inside.jpg"><img src="https://github.com/mnutt/rotary/raw/main/images/inside.jpg" alt="Inside the phone"></a></p>
<p dir="auto">After everything else checked out, I realized the ringer had been locked, and moved it to this position to fix:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/mnutt/rotary/blob/main/images/rotary_mute.jpg"><img src="https://github.com/mnutt/rotary/raw/main/images/rotary_mute.jpg" alt="Mute lever"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Asterisk setup</h2><a id="user-content-asterisk-setup" aria-label="Permalink: Asterisk setup" href="#asterisk-setup"></a></p>
<p dir="auto">I installed Asterisk via dpkg on Ubuntu 22. Setup was made a little more complicated by the RPi wifi bridge, which meant that the Grandstream was techically behind NAT from the perspective of Asterisk. Asterisk is trying to move from legacy <code>sip</code> module to <code>pjsip</code>, but I was only able to get <code>sip</code> to work so I stuck with that. The <code>/etc/asterisk/sip.conf</code> relevant parts:</p>
<div data-snippet-clipboard-copy-content="[rotary]
type=friend
nat=force_rport,comedia
secret=s3cr3t
host=dynamic
context=rotary-context
qualify=yes"><pre><code>[rotary]
type=friend
nat=force_rport,comedia
secret=s3cr3t
host=dynamic
context=rotary-context
qualify=yes
</code></pre></div>
<p dir="auto">The <code>nat</code> and <code>host=dynamic</code> aspects wouldn't be necessary if the Grandstream was on the same network as Asterisk.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Connecting the phone to Asterisk</h2><a id="user-content-connecting-the-phone-to-asterisk" aria-label="Permalink: Connecting the phone to Asterisk" href="#connecting-the-phone-to-asterisk"></a></p>
<p dir="auto">Plugging the Grandstream device in, it automatically obtained an IP via DHCP and I was able to log into its web interface using default credentials. Setup was pleasantly straightforward, I just configured fx-1's sip server to point to the Asterisk server's address.</p>
<p dir="auto">Relevant settings from <code>fxs-1</code>:</p>
<div data-snippet-clipboard-copy-content="Active: Yes
Primary SIP Server: [asterisk ip]
NAT Traversal: Keep-Alive *
SIP User ID: rotary
SIP Authenticate ID: rotary
SIP Registration: Yes
Enable SIP OPTIONS/Notify Keep-Alive: OPTIONS *
Enable Pulse Dialing: Yes
Enable Hook Flash: Yes
Enable High Ring Power: Yes **

* - only required because of the RPi wifi bridge
** - maybe not necessary, but makes ringer more likely to work"><pre><code>Active: Yes
Primary SIP Server: [asterisk ip]
NAT Traversal: Keep-Alive *
SIP User ID: rotary
SIP Authenticate ID: rotary
SIP Registration: Yes
Enable SIP OPTIONS/Notify Keep-Alive: OPTIONS *
Enable Pulse Dialing: Yes
Enable Hook Flash: Yes
Enable High Ring Power: Yes **

* - only required because of the RPi wifi bridge
** - maybe not necessary, but makes ringer more likely to work
</code></pre></div>
<p dir="auto">At this point, you should be able to pick up the phone's handset and get a dialtone. If you don't, there are some different debugging avenues:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Asterisk side</h3><a id="user-content-asterisk-side" aria-label="Permalink: Asterisk side" href="#asterisk-side"></a></p>
<p dir="auto">You can run <code>sudo asterisk -rvvvvv</code> to start the asterisk repl. Then:</p>
<ul dir="auto">
<li><code>sip show peers</code> should list <code>rotary/rotary</code> with the right Host and hopefully a Status of "OK"</li>
<li><code>sip set debug on</code> will give loads of SIP debug data, after enabling that you can unplug and replug the grandstream and hopefully see it trying to connect</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Grandstream side</h3><a id="user-content-grandstream-side" aria-label="Permalink: Grandstream side" href="#grandstream-side"></a></p>
<p dir="auto">If you're not seeing any peers or any sip logs from asterisk, you can also use the Grandstream web UI and enable sip logging to hopefully see what is going on.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Building Stuff in Asterisk</h2><a id="user-content-building-stuff-in-asterisk" aria-label="Permalink: Building Stuff in Asterisk" href="#building-stuff-in-asterisk"></a></p>
<p dir="auto">At this point the phone is connecting to Asterisk and the real fun can begin. :)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Play a K-Pop song</h3><a id="user-content-play-a-k-pop-song" aria-label="Permalink: Play a K-Pop song" href="#play-a-k-pop-song"></a></p>
<p dir="auto">The easiest one first. Asterisk can play back an audio file, but is relatively limited in the types of files it can play. You'll likely need to convert your file to 8KHz wav. Then put something like this in <code>/etc/asterisk/extensions.conf</code>:</p>
<div data-snippet-clipboard-copy-content="[rotary-context]
exten => 1234,1,Answer()
    same => n,Playback(/path/to/file.wav)
    same => n,Hangup()"><pre><code>[rotary-context]
exten =&gt; 1234,1,Answer()
    same =&gt; n,Playback(/path/to/file.wav)
    same =&gt; n,Hangup()
</code></pre></div>
<p dir="auto">You can reload Asterisk config with (among others) <code>sudo systemctl reload asterisk</code>. This will let you dial 1,2,3,4 on the phone, answer, play the audio, and hang up on you.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Play MTA Subway Status</h3><a id="user-content-play-mta-subway-status" aria-label="Permalink: Play MTA Subway Status" href="#play-mta-subway-status"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Speech Synthesis</h3><a id="user-content-speech-synthesis" aria-label="Permalink: Speech Synthesis" href="#speech-synthesis"></a></p>
<p dir="auto">For this one, we need some sort of text-to-speech synthesis. TTS has come a <em>long</em> way since Asterisk was initially created back in the early 2000s, so I opted for hooking in a third party TTS engine. I chose <a href="https://github.com/rhasspy/piper">piper</a> which sounds pretty good and notably is fast--it can run on a Raspberry Pi.</p>
<p dir="auto">Piper can pipe to stdout, or a file or whatever. I was hoping I could shell out to piper with my text and <em>stream</em> the result back to asterisk via stdout, but it was not meant to be. I went so far as to try to write a c Asterisk module that would accept raw audio over stdout, and eventually discovered that a) audio formats are hard, and b) I lack any sort of intuition about debugging when all I can get back are silence and a few popping noises.</p>
<p dir="auto">Instead I wound up writing an extension subroutine that calls out to piper, has it write to a tempfile, plays the tempfile, then deletes the tempfile. This means the entire speech generation has to complete before it can begin playing, but so far that has not taken longer than ~250ms on my Asterisk server. (a decade+ old core i7)</p>
<p dir="auto">The <code>speak.sh</code> bash script:</p>
<div dir="auto" data-snippet-clipboard-copy-content="#!/bin/bash

/path/to/piper/piper \
    --length_scale=5 --sentence_silence=0.5 \
    --model /path/to/piper/voices/en_US-amy-medium.onnx \
    --output-raw -f - | \
  sox -v 0.7 -t raw -e signed -r 22050 -b 16 - -r 8000 -b 16 -c 1 -t wav -"><pre><span><span>#!</span>/bin/bash</span>

/path/to/piper/piper \
    --length_scale=5 --sentence_silence=0.5 \
    --model /path/to/piper/voices/en_US-amy-medium.onnx \
    --output-raw -f - <span>|</span> \
  sox -v 0.7 -t raw -e signed -r 22050 -b 16 - -r 8000 -b 16 -c 1 -t wav -</pre></div>
<p dir="auto">This uses the "Amy" medium-fidelity model to generate some speech, then <code>sox</code> to translate it to one of the few audio formats that Asterisk can play.</p>
<p dir="auto">Then we create the subroutine in <code>extensions.conf</code>:</p>
<div data-snippet-clipboard-copy-content="[speak]
exten => s,1,NoOp(Text to speech)
 same => n,Set(filename=&quot;speech-${RAND()}${RAND()}&quot;)
 same => n,System(echo &quot;${ARG1}&quot; | /path/to/speak.sh > /tmp/${filename}.wav)
 same => n,Playback(/tmp/${filename})
 same => n,System(rm -f /tmp/${filename}.wav)
 same => n,Return()"><pre><code>[speak]
exten =&gt; s,1,NoOp(Text to speech)
 same =&gt; n,Set(filename="speech-${RAND()}${RAND()}")
 same =&gt; n,System(echo "${ARG1}" | /path/to/speak.sh &gt; /tmp/${filename}.wav)
 same =&gt; n,Playback(/tmp/${filename})
 same =&gt; n,System(rm -f /tmp/${filename}.wav)
 same =&gt; n,Return()
</code></pre></div>
<p dir="auto">Then I can call it like this from a regular extension:</p>
<div data-snippet-clipboard-copy-content="exten => 888,1,Answer() ; Say something
 same => n,GoSub(speak,s,1(&quot;Hello world&quot;))"><pre><code>exten =&gt; 888,1,Answer() ; Say something
 same =&gt; n,GoSub(speak,s,1("Hello world"))
</code></pre></div>
<p dir="auto">This works pretty well, but a very common pattern is that I want to play some audio for the dialer while at the same time accepting input from them. How maddening is it when you're trying to cancel Comcast and they're making you listen to all of the menu options because <em>they might have changed</em>? If we play audio, <em>then</em> accept input, Asterisk blocks and we're no better than Comcast. Instead of <code>Playback()</code> we can use <code>Read()</code>, which accepts some audio and waits at the same time. We can make a separate subroutine for that:</p>
<div data-snippet-clipboard-copy-content="[speak-get-digits]
exten => s,1,NoOp(Text to speech requesting digits)
    same => n,Set(filename=&quot;speech-${RAND()}${RAND()}&quot;)
    same => n,Set(digitcount=${IF($[&quot;${ARG2}&quot;=&quot;&quot;]?1:${ARG2})})
    same => n,System(echo &quot;${ARG1}&quot; | /path/to/rotary/speak.sh > /tmp/${filename}.wav)
    same => n,Read(digits,/tmp/${filename},${digitcount})
    same => n,System(rm -f /tmp/${filename}.wav)
    same => n,Return(${digits})"><pre><code>[speak-get-digits]
exten =&gt; s,1,NoOp(Text to speech requesting digits)
    same =&gt; n,Set(filename="speech-${RAND()}${RAND()}")
    same =&gt; n,Set(digitcount=${IF($["${ARG2}"=""]?1:${ARG2})})
    same =&gt; n,System(echo "${ARG1}" | /path/to/rotary/speak.sh &gt; /tmp/${filename}.wav)
    same =&gt; n,Read(digits,/tmp/${filename},${digitcount})
    same =&gt; n,System(rm -f /tmp/${filename}.wav)
    same =&gt; n,Return(${digits})
</code></pre></div>
<p dir="auto">Asterisk has a long lineage and unfortunately has some serious warts, one of them being return values. In order to call this you need to do:</p>
<div data-snippet-clipboard-copy-content="same => n,GoSub(speak-get-digits,s,1(&quot;Dial a number to hear the status of a numbered train or dial 9 for a letter train.&quot;,1))
same => n,Set(digit=${GOSUB_RETVAL})"><pre><code>same =&gt; n,GoSub(speak-get-digits,s,1("Dial a number to hear the status of a numbered train or dial 9 for a letter train.",1))
same =&gt; n,Set(digit=${GOSUB_RETVAL})
</code></pre></div>
<p dir="auto"><code>${GOSUB_RETVAL}</code> is a sort of environment variable set upon completion of your subroutine. I'd recommend immediately setting it to a different name like I've done above. The <code>1</code> we pass in as a second argument tells asterisk to only wait for one digit before proceeding.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Talking to the MTA</h4><a id="user-content-talking-to-the-mta" aria-label="Permalink: Talking to the MTA" href="#talking-to-the-mta"></a></p>
<p dir="auto">This part came from the pieces of the aforementioned unix terminal mta status project. It's a command line script that takes the number or letter of a train, fetches from the HTTP API the MTA website runs on, and returns the status in text form.</p>
<p dir="auto">What I discovered was that the response from the MTA was pretty good for viewing on a screen, but not quite suitable for text-to-speech. I had to modify the app to do a replacement pass, to change abbreviations where appropriate: Sq to Square, St to Street (but also St George to Saint George), etc. Then a secondary pass to correct mispronunciations. (Houston -&gt; Howston, Coney Island -&gt; Coaney Island etc) The last part probably varies a lot from one TTS engine to the next.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Putting it together</h4><a id="user-content-putting-it-together" aria-label="Permalink: Putting it together" href="#putting-it-together"></a></p>
<p dir="auto">The numbered trains (1-7) were a piece of cake. Read a digit, phone user dials it on the rotary, pass it to the mta script, generate audio. Letters were quite a bit harder:</p>
<ul dir="auto">
<li>While there are only 9 numbers, you can achieve the letters by doing a proto-T9 implementation where the user dials "2" for "A", "22" for "B", etc.</li>
<li>But rotary phones and the subway share an interesting mid-century oddity that they just <em>skip</em> various letters. Unfortunately these aren't the same letters. While the subway skips "I", "O", "P", etc, rotary phones skip "Q", and "Z". These are both actual subway lines so need to be mapped to something else.</li>
<li>The subway has 3 shuttle lines (Grand central, Franklin, Rockaways) and the Staten Island Railway; I just made "S" its own sub-menu with 4 options.</li>
</ul>
<p dir="auto">Dial "33" to start the subway status tree:</p>
<div data-snippet-clipboard-copy-content="exten => 33,1(start),Answer()
 same => n,GoSub(speak-get-digits,s,1(&quot;Dial a number to hear the status of a numbered train or dial 9 for a letter train.&quot;,1))
 same => n,Set(digit=${GOSUB_RETVAL})
 same => n,GotoIf($[&quot;${digit}&quot; = &quot;9&quot;]?lettertrains)
 same => n,System(/path/to/rotary/mta.sh ${digit} > /tmp/piper.wav)
 same => n,Playback(/tmp/piper)
 same => n,Goto(start)
 same => n(lettertrains),NoOp(Status for letter trains)
 same => n,GoSub(speak-get-digits,s,1(&quot;Dial the letter for your train&quot;,4))
 same => n,Set(letters=${GOSUB_RETVAL})
 same => n,Gotoif($[&quot;${letters}&quot; = &quot;777&quot;]?shuttle)
 same => n,System(/path/to/rotary/mta.sh letter:${letters} > /tmp/piper.wav)
 same => n,Playback(/tmp/piper)
 same => n,Goto(start)
 same => n(shuttle),NoOp(Status for shuttles)
 same => n,GoSub(speak-get-digits,s,1(&quot;Dial 1 for grand central shuttle, dial 2 for franklin avenue, dial 3 for far rockaway shuttle, dial 4 for staten island railway&quot;, 1))
 same => n,Set(digit=${GOSUB_RETVAL})
 same => n,System(/path/to/rotary/mta.sh shuttle:${digit} > /tmp/piper.wav)
 same => n,Playback(/tmp/piper)
 same => n,Goto(start)"><pre><code>exten =&gt; 33,1(start),Answer()
 same =&gt; n,GoSub(speak-get-digits,s,1("Dial a number to hear the status of a numbered train or dial 9 for a letter train.",1))
 same =&gt; n,Set(digit=${GOSUB_RETVAL})
 same =&gt; n,GotoIf($["${digit}" = "9"]?lettertrains)
 same =&gt; n,System(/path/to/rotary/mta.sh ${digit} &gt; /tmp/piper.wav)
 same =&gt; n,Playback(/tmp/piper)
 same =&gt; n,Goto(start)
 same =&gt; n(lettertrains),NoOp(Status for letter trains)
 same =&gt; n,GoSub(speak-get-digits,s,1("Dial the letter for your train",4))
 same =&gt; n,Set(letters=${GOSUB_RETVAL})
 same =&gt; n,Gotoif($["${letters}" = "777"]?shuttle)
 same =&gt; n,System(/path/to/rotary/mta.sh letter:${letters} &gt; /tmp/piper.wav)
 same =&gt; n,Playback(/tmp/piper)
 same =&gt; n,Goto(start)
 same =&gt; n(shuttle),NoOp(Status for shuttles)
 same =&gt; n,GoSub(speak-get-digits,s,1("Dial 1 for grand central shuttle, dial 2 for franklin avenue, dial 3 for far rockaway shuttle, dial 4 for staten island railway", 1))
 same =&gt; n,Set(digit=${GOSUB_RETVAL})
 same =&gt; n,System(/path/to/rotary/mta.sh shuttle:${digit} &gt; /tmp/piper.wav)
 same =&gt; n,Playback(/tmp/piper)
 same =&gt; n,Goto(start)
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Phone Calls</h3><a id="user-content-phone-calls" aria-label="Permalink: Phone Calls" href="#phone-calls"></a></p>
<p dir="auto">At this point many hours in, we're almost to the part you could have achieved 30 years ago by buying a phone and plugging it in to any house in America.</p>
<p dir="auto">In order for someone to use the phone to talk to another person with a regular phone, we need to connect to the phone network. Long ago it was apparently possible to use Google Voice, but from everything I've read it's no longer possible. I signed up for Twilio: not the cheapest, but it's reputable and developer-focused so pretty easy to work with.</p>
<p dir="auto">Buying a number will cost a few dollars a month. I let my son pick his own phone number. It has a lot of sevens in it.</p>
<p dir="auto">Twilio offers two different services that seem like they could be relevant: I started out exploring "Twilio Elastic Sip Trunking" which "enables you to make &amp; receive telephone calls from your IP communications infrastructure around the globe over a public or private connection" and sounds like exactly what I need. This is probably the "correct" way to bridge Asterisk into Twilio, especially if you're doing something real. But this approach assumes your Asterisk server has a public IP and mine sits behind my home router. Using this approach I was able to have Asterisk dial out, but Twilio could not make calls into Asterisk. NAT strikes again!</p>
<p dir="auto">Instead, I went the route of creating a Programmable SIP Domain in Twilio and having Asterisk just act like another SIP client. This let Asterisk register with Twilio and punch through NAT using the usual OPTIONS keepalive trick.</p>
<p dir="auto">The steps are:</p>
<ol dir="auto">
<li>Create a <a href="https://console.twilio.com/us1/develop/voice/manage/sip-domains" rel="nofollow">SIP Domain</a></li>
<li>Create a Credential List. This is how Asterisk will authenticate with Twilio. Set up Voice Authentication with the Credential List.</li>
<li>Enable SIP Registration.</li>
</ol>
<p dir="auto">On the Asterisk side, we'll need something like this in our <code>/etc/asterisk/sip.conf</code>:</p>
<div data-snippet-clipboard-copy-content="[twilio-trunk](!)
type=peer
context=from-twilio ; Which dialplan to use for incoming calls
dtmfmode=rfc4733
canreinivite=no
insecure=port,invite

[twilio](twilio-trunk)
host=replace-with-your-sip-name.sip.us1.twilio.com
defaultuser=michael        ; username
remotesecret=totallysecure ; password
defaultexpiry=605
minexpiry=605
qualify=yes"><pre><code>[twilio-trunk](!)
type=peer
context=from-twilio ; Which dialplan to use for incoming calls
dtmfmode=rfc4733
canreinivite=no
insecure=port,invite

[twilio](twilio-trunk)
host=replace-with-your-sip-name.sip.us1.twilio.com
defaultuser=michael        ; username
remotesecret=totallysecure ; password
defaultexpiry=605
minexpiry=605
qualify=yes
</code></pre></div>
<p dir="auto">Replace the host with the host from the SIP Domain you created in Twilio. And replace <code>defaultuser</code> and <code>remotesecret</code> values with the username and password from the Credentials List you created.</p>
<ul dir="auto">
<li><code>qualify=yes</code> will cause Asterisk to keep the NAT hole alive by periodically sending OPTIONS requests.</li>
<li><code>defaultexpiry</code> and <code>minexpiry</code> keep us from sending so many pings that Twilio rate-limits us.</li>
<li><code>context=from-twilio</code> means that incoming calls will wind up in the <code>from-twilio</code> context in <code>extensions.conf</code>, where you can route them to your rotary phone:</li>
</ul>
<p dir="auto">After you reload Asterisk, you can run <code>sudo asterisk -rvvvvv</code> and <code>show sip peers</code> and see both your rotary phone as well as Twilio:</p>
<div data-snippet-clipboard-copy-content="CLI> sip show peers
Name/username             Host                                    Dyn Forcerport Comedia    ACL Port     Status      Description
rotary/rotary             192.168.1.33                             D  Yes        Yes            5060     OK (22 ms)
twilio/michael            54.172.60.0                                 Yes        No             5060     OK (18 ms)"><pre><code>CLI&gt; sip show peers
Name/username             Host                                    Dyn Forcerport Comedia    ACL Port     Status      Description
rotary/rotary             192.168.1.33                             D  Yes        Yes            5060     OK (22 ms)
twilio/michael            54.172.60.0                                 Yes        No             5060     OK (18 ms)
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Dialing out</h4><a id="user-content-dialing-out" aria-label="Permalink: Dialing out" href="#dialing-out"></a></p>
<p dir="auto">With the connection established, we need to tell Asterisk how to route a call to Twilio, and need to tell Twilio what to do when it gets it.</p>
<p dir="auto">Asterisk config, in <code>extensions.conf</code>:</p>
<div data-snippet-clipboard-copy-content="exten => 81,1,Answer() ; Call Dad
 same => n,GoSub(speak,s,1(&quot;Calling dad\!\!&quot;))
 same => n,Set(CALLERID(all)=&quot;Rotary&quot;<19787777777>)
 same => n,Dial(SIP/twilio/+12565121024)"><pre><code>exten =&gt; 81,1,Answer() ; Call Dad
 same =&gt; n,GoSub(speak,s,1("Calling dad\!\!"))
 same =&gt; n,Set(CALLERID(all)="Rotary"&lt;19787777777&gt;)
 same =&gt; n,Dial(SIP/twilio/+12565121024)
</code></pre></div>
<p dir="auto">In this case you'd replace <code>19787777777</code> with the Twilio phone number you purchased, and <code>12565121024</code> with the number you're calling. I'm not entirely sure the caller ID part is necessary, but it seems like it.</p>
<p dir="auto">Back in Twilio, we want our SIP domain to receive a call and pass it right on through via our purchased phone number. To do this we can create a <a href="https://console.twilio.com/us1/develop/twiml-bins/twiml-bins" rel="nofollow">TwiML bin</a>:</p>
<div data-snippet-clipboard-copy-content="<?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>
<Response>
    <Dial answerOnBridge=&quot;true&quot; callerId=&quot;{{#e164}}{{From}}{{/e164}}&quot;>{{#e164}}{{To}}{{/e164}}</Dial>
</Response>"><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Response&gt;
    &lt;Dial answerOnBridge="true" callerId="{{#e164}}{{From}}{{/e164}}"&gt;{{#e164}}{{To}}{{/e164}}&lt;/Dial&gt;
&lt;/Response&gt;
</code></pre></div>
<p dir="auto">Give it a name like "OutboundCall", then go back to the SIP Domain configuration:</p>
<ul dir="auto">
<li>Set Call Control Configuration to configure with "Webhooks, TwiML Bins, Functions, Studio, Proxy"</li>
<li>A call comes in: set to "TwiML Bin" then select your bin name</li>
<li>The rest of the fields don't matter</li>
</ul>
<p dir="auto">Make sure SIP routing is Active.</p>
<p dir="auto">Now try dialing "81" from your rotary phone. It should route to your recipient.</p>
<p dir="auto">I went back and forth a bit on setting up emergency service. (911, in the US) If you do this, you'll absolutely want to make sure your home address in Twilio is accurate. I haven't set up emergency dialing yet because while I can impress on my son the serious nature of calling 911, his friends might treat it more like a toy. Still, something worth considering.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Receiving calls</h4><a id="user-content-receiving-calls" aria-label="Permalink: Receiving calls" href="#receiving-calls"></a></p>
<p dir="auto">With our outbound setup, Asterisk could technically dial <em>any</em> number but we limit which numbers can actually be dialed by only explicitly dialing them in <code>extensions.conf</code>. For receiving calls, we want to make sure we also limit it to specific callers. We could easily achieve "pass any call through" with the same TwiML Bin approach, but "limit to phone numbers x,y,z" is a bit too much for TwiML so I opted for a Twilio Function.</p>
<p dir="auto">In Twilio, <a href="https://console.twilio.com/us1/develop/functions/services" rel="nofollow">create a Service</a> to make a new function. I named mine <code>incoming-call</code>, with this logic:</p>
<div dir="auto" data-snippet-clipboard-copy-content="const allowed = ['+12565121024', '+13435555555', ...];

exports.handler = function(context, event, callback) {
    console.log(&quot;Receiving call&quot;, event.From);
    let twiml = new Twilio.twiml.VoiceResponse();

    if(allowed.includes(event.From)) { // Ensure the number is in E.164 format
        console.log(&quot;Matched, dialing...&quot;);
        const dial = twiml.dial({answerOnBridge: true}).sip(&quot;rotary@replace-with-your-sip-name.sip.twilio.com&quot;);
    } else {
        console.log(&quot;Call was rejected&quot;);
        twiml.reject(); // Rejects the call if the number does not match
    }

    callback(null, twiml);
};"><pre><span>const</span> <span>allowed</span> <span>=</span> <span>[</span><span>'+12565121024'</span><span>,</span> <span>'+13435555555'</span><span>,</span> ...<span>]</span><span>;</span>

<span>exports</span><span>.</span><span>handler</span> <span>=</span> <span>function</span><span>(</span><span>context</span><span>,</span> <span>event</span><span>,</span> <span>callback</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>"Receiving call"</span><span>,</span> <span>event</span><span>.</span><span>From</span><span>)</span><span>;</span>
    <span>let</span> <span>twiml</span> <span>=</span> <span>new</span> <span>Twilio</span><span>.</span><span>twiml</span><span>.</span><span>VoiceResponse</span><span>(</span><span>)</span><span>;</span>

    <span>if</span><span>(</span><span>allowed</span><span>.</span><span>includes</span><span>(</span><span>event</span><span>.</span><span>From</span><span>)</span><span>)</span> <span>{</span> <span>// Ensure the number is in E.164 format</span>
        <span>console</span><span>.</span><span>log</span><span>(</span><span>"Matched, dialing..."</span><span>)</span><span>;</span>
        <span>const</span> <span>dial</span> <span>=</span> <span>twiml</span><span>.</span><span>dial</span><span>(</span><span>{</span><span>answerOnBridge</span>: <span>true</span><span>}</span><span>)</span><span>.</span><span>sip</span><span>(</span><span>"rotary@replace-with-your-sip-name.sip.twilio.com"</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>console</span><span>.</span><span>log</span><span>(</span><span>"Call was rejected"</span><span>)</span><span>;</span>
        <span>twiml</span><span>.</span><span>reject</span><span>(</span><span>)</span><span>;</span> <span>// Rejects the call if the number does not match</span>
    <span>}</span>

    <span>callback</span><span>(</span><span>null</span><span>,</span> <span>twiml</span><span>)</span><span>;</span>
<span>}</span><span>;</span></pre></div>
<p dir="auto">Make sure you save and click "Deploy all" to actually deploy it.</p>
<p dir="auto">Then go to Phone Numbers -&gt; Manage -&gt; Active Phone Numbers and select the number you purchased to configure it. Choose "Webhooks, TwiML Bin, Function, Studio Flow, Proxy Service", then choose "Function" and the one you named <code>incoming-call</code> and choose the Environment and Function Path. (there should be only one option for each)</p>
<p dir="auto">At this point, you can go back to the Function editor, enable Live Logs, and actually try to call your Twilio number and see it route the call. It'll send it on to Asterisk, who will probably immediately dump it since you haven't configured anywhere for it to go. We can do that in <code>extensions.conf</code>:</p>
<div data-snippet-clipboard-copy-content="[from-twilio]
exten => s,1,NoOp(Incoming Call)
 same => n,Dial(SIP/rotary)
 same => n,Hangup()"><pre><code>[from-twilio]
exten =&gt; s,1,NoOp(Incoming Call)
 same =&gt; n,Dial(SIP/rotary)
 same =&gt; n,Hangup()
</code></pre></div>
<p dir="auto">This is where you could put other fancy logic, for instance if you wanted to let other people call you and hear MTA announcements or something.</p>
<p dir="auto">At this point you should be able to dial your Twilio number from your cell phone and, with a great deal of luck, your rotary phone will ring.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Tell a Joke</h3><a id="user-content-tell-a-joke" aria-label="Permalink: Tell a Joke" href="#tell-a-joke"></a></p>
<p dir="auto">This one needs the most future work. Conceptually it's mostly a simpler version of the MTA script: put list of jokes in an array, then choose one. This works okay, but somehow there is <em>absolutely no way</em> to get piper to pause, which destroys the comedic timing.</p>
<p dir="auto">While I need to figure out how to get piper to just wait a bit, I also want to add support for knock-knock jokes, where it waits for the caller to actually say "who's there?". I don't think this needs to go nearly as far as actual speech-to-text, and could instead detect any kind of sound and probably be good enough.</p>
<p dir="auto">You also don't want a random joke: unless you have a really long list, you'll eventually end up with it telling the same joke twice in a row. This may be funny the first time, but gets old fast. Instead we need some way to tell a new joke each time.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Conclusion</h2><a id="user-content-conclusion" aria-label="Permalink: Conclusion" href="#conclusion"></a></p>
<p dir="auto">The physical aspects of the project held my son's attention the best, especially taking the phone cover off. (make sure it's unplugged!) Debugging SIP connections was by far the most tedious part of the project and I did most of that at night. But building out the phone menu was also a fun activity where I let him dictate what the numbers did and we drew out how it would work.</p>
<p dir="auto">By far the best part of the project is that he'll randomly call up his grandparents to talk. As an adult I talk to loved ones on the phone, but calls tend to be scheduled and coordinated in advance via text. An unexpected call triggers annoyance or concern. Four year olds have none of that, and are happy just to chat.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Intel 8088 processor's instruction prefetch circuitry: a look inside (176 pts)]]></title>
            <link>https://www.righto.com/2024/03/8088-prefetch-circuitry.html</link>
            <guid>39801963</guid>
            <pubDate>Sat, 23 Mar 2024 18:17:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.righto.com/2024/03/8088-prefetch-circuitry.html">https://www.righto.com/2024/03/8088-prefetch-circuitry.html</a>, See on <a href="https://news.ycombinator.com/item?id=39801963">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-6945380884103902536" itemprop="description articleBody">
<p>In 1979, Intel introduced the 8088 microprocessor, a variant of the 16-bit 8086 processor.
IBM's decision to use the 8088 processor in the IBM PC (1981) was a critical point in computer history,
leading to the dominance of the x86 architecture that continues to the present.<span id="fnref:marketshare"><a href="#fn:marketshare">1</a></span>
One way that the 8086 and 8088 increased performance was by prefetching:
the processor fetches instructions from memory before they are needed,
so the processor can execute them without waiting on the relatively slow memory.
I've been reverse-engineering the 8088 from die photos and this blog post discusses what I've uncovered
about the prefetch circuitry.</p>
<p>The die photo below shows the 8088 microprocessor under a microscope.
The metal layer on top of the chip is visible, with the silicon and polysilicon mostly hidden underneath. Around the edges of the die, bond wires connect pads to
the chip's 40 external pins.
I've labeled the key functional blocks; 
this article focuses on the prefetch queue components highlighted in red.
The components in purple also play a role, and will be discussed below.
Architecturally, the chip is partitioned into a Bus Interface Unit (BIU) at the top
and an Execution Unit (EU) below.
The BIU handles memory accesses, while the Execution Unit (EU) executes instructions.
In particular, the BIU fetches instructions, which are transferred from the prefetch queue to the Execution Unit via the
queue bus.</p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/die-labeled.jpg"><img alt="The 8088 die under a microscope, with main functional blocks labeled. This photo shows the chip's single metal layer; the polysilicon and silicon are underneath. Click on this image (or any other) for a larger version." height="632" src="https://static.righto.com/images/8086-prefetch8088/die-labeled-w600.jpg" title="The 8088 die under a microscope, with main functional blocks labeled. This photo shows the chip's single metal layer; the polysilicon and silicon are underneath. Click on this image (or any other) for a larger version." width="600"></a></p><p>The 8088 die under a microscope, with main functional blocks labeled. This photo shows the chip's single metal layer; the polysilicon and silicon are underneath. Click on this image (or any other) for a larger version.</p>
<p>The 8086 and 8088 processors present the same 16-bit architecture to the programmer.
The key difference is that
the 8088 has an 8-bit data bus for communication with memory and I/O, rather than the 16-bit bus of the 8086.
The 8088's narrower bus reduced performance, since the processor only transfers one byte at a time rather than two.
However, the 8-bit bus enabled cheaper computer hardware.
The 8-bit bus was also a better match for hardware based on the older but popular 8-bit
Intel 8080 and 8085 processors, allowing the reuse of 8-bit I/O circuitry for instance.
Much of the IBM PC was based on the little-known IBM <a href="https://www.ardent-tool.com/5150/PC_origins.html">DataMaster</a>, a computer built around the Intel 8085.
Thus, selecting the 8088 processor was a natural choice for the IBM PC.</p>
<p>For the most part, the 8086 and 8088 are very similar internally, apart from trivial but numerous layout changes on the die.
The biggest differences are in the Bus Interface Unit, the circuitry that communicates with memory and I/O devices, since
this circuitry handles 16 bits in the 8086 versus 8 bits in the 8088.
There are a few microcode differences between the two chips.
One interesting change is that for performance reasons the 8088 has a smaller prefetch queue
than the 8086 (four bytes instead of six).
(I wrote about the <a href="https://www.righto.com/2023/01/inside-8086-processors-instruction.html">8086's prefetch circuity</a> earlier.)</p>
<h2>Prefetching and the architecture of the 8086 and 8088</h2>
<p>The 8086 and 8088 were introduced at an interesting point in microprocessor history, when memory was becoming slower than the CPU.
For the first microprocessors, the speed of the CPU and the speed of memory were comparable.<span id="fnref:memory-speed"><a href="#fn:memory-speed">2</a></span>
However, as processors became faster, the speed of memory failed to keep up.
The 8086 was probably the first microprocessor to prefetch instructions to improve performance.
While modern microprocessors have megabytes of fast cache<span id="fnref:cache"><a href="#fn:cache">3</a></span> to act as a buffer between the CPU and much slower main memory,
the 8088 has just 4 bytes of prefetch queue. However, this was enough to substantially increase performance.</p>
<p>Prefetching had a major impact on the design of the 8086 and thus the 8088.
Earlier processors such as the 6502, 8080, or Z80 were deterministic:
the processor fetched an instruction, executed the instruction, and so forth.
Memory accesses corresponded directly to instruction fetching and execution and
instructions took a predictable number of clock cycles.
This all changed with the introduction of the prefetch queue.
Memory operations became unlinked from instruction execution since prefetches happen as needed and when the memory bus is available.</p>
<p>To handle memory operations and instruction execution independently,
the implementors of the 8086 and 8088 divided the processors into two processing units: the Bus Interface Unit (BIU) that handles memory accesses, and the Execution Unit (EU) that executes instructions.
The Bus Interface Unit contains the instruction prefetch queue; it supplies instructions to
the Execution Unit via the Q (queue) bus.
The BIU also contains an
adder (Σ) for address calculation, adding the segment register base to an address offset, among other things.
The Execution Unit is what comes to mind when you think of a processor: it has most of the registers, the arithmetic/logic unit (ALU), and the microcode that implements instructions.
The segment registers (CS, DS, SS, ES) and the Instruction Pointer (IP) are in the Bus Interface Unit since they are directly involved in memory accesses,
while the general-purpose registers are in the Execution Unit.</p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/8088-block-diagram.jpg"><img alt="Block diagram of the 8088 processor.
This diagram differs from most 8088 block diagrams because it shows the actual physical implementation, rather than the programmer's view of the processor.
The &quot;Internal Communication Registers&quot; consist of the Indirect Register (IND) and the Operand Register (OPR). These hold a memory address and memory data value respectively.
From The 8086 Family User's Manual page 243." height="600" src="https://static.righto.com/images/8086-prefetch8088/8088-block-diagram-w800.jpg" title="Block diagram of the 8088 processor.
This diagram differs from most 8088 block diagrams because it shows the actual physical implementation, rather than the programmer's view of the processor.
The &quot;Internal Communication Registers&quot; consist of the Indirect Register (IND) and the Operand Register (OPR). These hold a memory address and memory data value respectively.
From The 8086 Family User's Manual page 243." width="800"></a></p><p>Block diagram of the 8088 processor.
This diagram differs from most 8088 block diagrams because it shows the actual physical implementation, rather than the programmer's view of the processor.
The "Internal Communication Registers" consist of the Indirect Register (IND) and the Operand Register (OPR). These hold a memory address and memory data value respectively.
From <a href="http://bitsavers.org/components/intel/8086/9800722-03_The_8086_Family_Users_Manual_Oct79.pdf">The 8086 Family User's Manual</a> page 243.</p>
<p>It may seem inefficient for the Bus Interface Unit to have its own adder instead of using the ALU,
but there are reasons for the separate adder.
First, every memory access uses the adder at least once to add the segment base and offset.
The adder is also used to increment the PC or index registers.
Since these operations are so frequent, they would create a bottleneck if they used the ALU.
Second, since the Execution Unit and the Bus Interface Unit run asynchronously with respect to each other, it would be complicated
to share the ALU without conflicts.</p>
<p>Prefetching had another major but little-known effect on the 8086 architecture: the designers were considering
making the 8086 a two-chip microprocessor.
Prefetching, however, required a one-chip design because the number of control signals required to synchronize prefetching across two chips exceeded the package pins available.
This became a compelling argument for the one-chip design that was used for the 8086.<span id="fnref:mckevitt"><a href="#fn:mckevitt">4</a></span>
(The unsuccessful Intel <a href="https://en.wikipedia.org/wiki/Intel_iAPX_432">iAPX 432</a>, which was under development at the same time, ended up being a two-chip processor: one to fetch and decode instructions, and one to execute them.)</p>
<h2>Implementing the queue</h2>
<p>The 8088's instruction prefetch queue is implemented with four 8-bit queue registers along with two hardware "pointers"
into the queue.
One two-bit counter keeps track of the current read position from 0 to 3,
i.e. the queue register that will provide the next instruction byte.
The second counter keeps track of the current write position, i.e. the queue register that will receive the next instruction from memory.<span id="fnref:read"><a href="#fn:read">5</a></span>
As bytes are fetched from the queue, the read pointer advances. As bytes are added to the queue, the write pointer advances.</p>
<p>The diagram below shows an example queue configuration with two prefetched bytes. The middle two queue registers (Q1 and Q2) hold data.
The read pointer indicates that the Execution Unit will get its next byte from Q1.
The write pointer indicates that the next prefetched byte will go into Q3.</p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/queue-diagram-2.jpg"><img alt="A queue configuration with two bytes in the prefetch queue. Bytes in blue hold prefetched data." height="200" src="https://static.righto.com/images/8086-prefetch8088/queue-diagram-2-w300.jpg" title="A queue configuration with two bytes in the prefetch queue. Bytes in blue hold prefetched data." width="300"></a></p><p>A queue configuration with two bytes in the prefetch queue. Bytes in blue hold prefetched data.</p>
<p>The diagram below shows how the queue pointers can wrap around. In this configuration, two more bytes have been written
to the queue (Q3 and Q0), so the queue is full.
The write pointer now points to Q1, the same as the read pointer.</p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/queue-diagram-4.jpg"><img alt="A queue configuration with four bytes in the prefetch queue." height="198" src="https://static.righto.com/images/8086-prefetch8088/queue-diagram-4-w300.jpg" title="A queue configuration with four bytes in the prefetch queue." width="300"></a></p><p>A queue configuration with four bytes in the prefetch queue.</p>
<p>There is an important ambiguity, however. Suppose that four bytes are read from the queue, so the read pointer
advances four positions, wrapping around back to Q1.
The queue is now empty, as shown below, but the pointers have the same position as the full case above.
Thus, if the read pointer and the write pointer both point to the same position, the queue may be empty or full.
To distinguish these cases, a flip-flop is set
if the queue enters the empty state. This flip-flop generates a signal that Intel called MT (empty).</p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/queue-diagram-0.jpg"><img alt="A queue configuration with the queue empty." height="199" src="https://static.righto.com/images/8086-prefetch8088/queue-diagram-0-w300.jpg" title="A queue configuration with the queue empty." width="300"></a></p><p>A queue configuration with the queue empty.</p>
<p>To determine how many bytes are in the queue, the queue circuitry uses a two-bit queue length value, along with the MT flip-flop value to distinguish the empty state.
Conceptually, the queue length is generated by subtracting the read position from the write position.
However, the implementation does not use a standard subtraction circuit, but instead uses hardcoded logic to
determine the two bits of the length, as shown below.</p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/length-logic.png"><img alt="The circuitry to determine the queue length." height="277" src="https://static.righto.com/images/8086-prefetch8088/length-logic-w500.png" title="The circuitry to determine the queue length." width="500"></a></p><p>The circuitry to determine the queue length.</p>
<p>The low bit of the length is the XOR of the two positions. 
In NMOS logic (used by the 8088), an AND-NOR gate is easy to implement, while an XOR gate is difficult. Thus, XOR is
implemented as shown in the top circuit.
(You can verify that if one input is 1 and the other is 0, the output is 1.)
The high-order bit of the length is also based on an AND-NOR gate, one with six inputs.
Each input is a combination of read and write positions that yields an output bit 1; each input is computed by a NOR gate,
which I haven't drawn.<span id="fnref:demorgan"><a href="#fn:demorgan">6</a></span>
As a result, the amount of logic circuitry to compute the length is fairly large.</p>
<p>The diagram below zooms in on the queue control circuitry on the die, with the main flip-flops and circuitry labeled.
The circuitry in the middle computes the queue length with
the 6-input NOR gate stretched across the whole region.
The flip-flops for the read and write positions are in the lower region.
Despite the relative simplicity of the queue circuits, they take up a substantial part of the die.
Compared to modern chips, the density of the 8088 is very low; you can almost see the flip-flops with the naked eye.
But this isn't all the circuitry as prefetching also required
queue registers and memory cycle control circuitry.
Thus, prefetching was a moderately expensive feature for the 8088, as far as die area.</p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/prefetch-die.jpg"><img alt="The queue and prefetch circuitry on the die. The metal layer has been removed for the closeup to show the silicon of the underlying transistors." height="465" src="https://static.righto.com/images/8086-prefetch8088/prefetch-die-w600.jpg" title="The queue and prefetch circuitry on the die. The metal layer has been removed for the closeup to show the silicon of the underlying transistors." width="600"></a></p><p>The queue and prefetch circuitry on the die. The metal layer has been removed for the closeup to show the silicon of the underlying transistors.</p>
<h2>The loader</h2>
<!--
The 8086 processor is implemented with microcode: most 8086 machine instructions are broken down into simple micro-instructions that are
stored in the microcode ROM.
For example, an ADD instruction is implemented through a sequence of micro-instructions to move the arguments to the Arithmetic/Logic Unit, perform the addition, and store the result.
The multiple addressing modes are implemented in micro-instruction subroutines that access index registers and compute the
memory address.

In 1978 the space available for microcode was limited, so the 8086 designers
moved a lot of control logic outside the microcode, including insruction fetching and decoding.

The relevant part for this discussion is the instruction fetch and decode loop is implemented outside the microcode.
A state machine called the "loader" fetches the first one or two bytes of an instruction. A ROM called the Group Decode ROM
does a "high-level" classification of the instruction.
Simple instructions (such as clearing the carry flag) or prefixes (such as LOCK or selecting a segment register) are performed
directly. More complex instructions are dispatched to the microcode engine, which runs the micro-instructions to carry
out the instruction.
-->

<p>To decode and execute an instruction, the Execution Unit must get instruction bytes from the Bus Interface Unit, but this is not entirely straightforward.
The main problem is that the queue can be empty, in which case instruction decoding must block until a byte is available from
the queue.
The second problem is that instruction decoding is relatively slow so it is pipelined.
For maximum performance, the decoder needs a new byte before the current instruction
is finished.
A circuit called the "loader" solves these problems by providing
synchronization between the prefetch queue and the instruction decoder.
The loader uses a small state machine to efficiently fetch bytes from the queue at the right time and to provide timing
signals to the decoder and microcode engine.</p>
<!--
To explain how instructions are fetched, I'll first give a brief overview of 8086 instructions.
The 8086 instruction format is fairly complicated, with instructions from one to six bytes long.
The first byte is the opcode, specifying the instruction.
In some cases, this byte completely specifies the instruction, for example PUSH AX to push the AX register to the stack.
Most of the instructions, however, have a second byte that specifies the addressing mode and register: the Mod R/M byte.
Depending on the addressing mode selected, this may be followed by an 8- or 16-bit memory displacement.
Finally, there can be an 8- or 16-bit immediate operand.
-->

<p>In more detail, as the loader requests the first two instruction bytes from the prefetch queue, it generates two timing signals that control the microcode execution.
The FC (First Clock) indicates that the first instruction byte is available, while the SC (Second Clock) indicates the second
instruction byte.
Note that the First Clock and Second Clock are not necessarily consecutive clock cycles because
the prefetch queue could be empty or contain just one byte, in which case the First Clock and/or Second Clock would be
delayed.
The instruction decoding circuitry and the microcode engine are controlled by the First Clock and Second Clock signals, so
they remain synchronized with the bytes supplied by the prefetch queue.</p>
<p>At the end of a microcode sequence, the Run Next Instruction (RNI) micro-operation causes the loader to fetch the next machine instruction.
However, fetching and decoding the next instruction is a bit slow so microcode execution would be blocked for a cycle.
In many cases, this slowdown can be avoided: if the microcode knows that it is one micro-instruction away from finishing,
it issues a Next-to-last (NXT) micro-operation so the loader can start loading the next instruction.
This achieves a degree of pipelining in most cases; fetching the next instruction is overlapped with finishing the execution
of the previous instruction.</p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/loader.png"><img alt="The state machine for the 8086/8088 &quot;loader&quot; circuit.
The 1BL signal indicates a 1-byte instruction implemented in logic rather than microcode.
From patent US4449184." height="345" src="https://static.righto.com/images/8086-prefetch8088/loader-w400.png" title="The state machine for the 8086/8088 &quot;loader&quot; circuit.
The 1BL signal indicates a 1-byte instruction implemented in logic rather than microcode.
From patent US4449184." width="400"></a></p><p>The state machine for the 8086/8088 "loader" circuit.
The 1BL signal indicates a 1-byte instruction implemented in logic rather than microcode.
From <a href="https://patents.google.com/patent/US4449184A">patent US4449184</a>.</p>
<p>The diagram above shows the state machine for the loader.
I won't explain it in detail, but essentially it keeps track of whether it is waiting for a First Clock byte or a
Second Clock byte, and if it is performing a fetch in advance (NXT) or at the end of an instruction (RNI).
The state machine is implemented with two flip-flops to support its four states.</p>
<h2>Microcode and the prefetch queue</h2>
<p>The loader takes care of fetching an instruction that consists of an opcode byte and a Mod R/M (addressing mode) byte.
However, many instructions have additional bytes or don't follow this format
For example, an opcode such as "ADD AX" can be followed by an 8- or 16-bit immediate value, adding that value to the AX register.
Or a "move memory to AX" instruction can be followed by a 16-bit memory address
The microcode uses a separate mechanism for fetching these instruction bytes from the queue.
Specifically, each micro-instruction contains a source register and a destination register that specify a data move.
By specifying "Q" (the queue) as the source, a byte is fetched from the prefetch queue.
If the queue is empty, microcode execution blocks until the 
Bus Interface Unit loads a byte into the prefetch queue.
Thus, the complexity of instruction fetching and the prefetch queue is invisible to the microcode.<span id="fnref:memory"><a href="#fn:memory">7</a></span></p>
<p>A jump, subroutine call, or other control flow change causes the prefetch queue to be flushed since the queue contents
are no longer useful.
This is accomplished in microcode with the <code>FLUSH</code> micro-instruction, which resets the queue read and write pointers and
sets the MT (empty) flip-flop.
Note that the queue is flushed even if the target address is in the queue, for example if you jump one byte ahead.</p>
<p>One complication due to the prefetch queue is that the processor's Instruction Pointer points to the next instruction to
be <em>fetched</em>, not the next instruction to be <em>executed</em>.
This becomes a problem for a subroutine call, which needs to push the return address.
It is also a problem for a relative jump, which is computed from the current instruction.
The solution is the <code>CORR</code> micro-instruction, which corrects the Instruction Pointer by subtracting the queue length to
determine the current execution position.
This is implemented by the Bus Interface Unit, which holds correction constants in the Constant ROM, and subtracts them
using the address adder (not the ALU).<span id="fnref:constants"><a href="#fn:constants">8</a></span></p>
<h2>The queue registers</h2>
<p>The 8086 and 8088 partition the registers into upper registers (in the Bus Interface Unit) and lower registers
(in the Execution Unit).
The upper registers are the registers associated with memory accesses (e.g. Instruction Pointer, segment registers)
while the lower registers are more general purpose (e.g. AX, BX, SI, SP).
The upper registers are connected to two 16-bit internal buses: the B bus and the C bus.</p>
<p>The queue registers are physically part of the upper registers, but are wired into the buses slightly differently, as shown below.
In particular, the 8088's queue registers are written 8 bits at a time from the C bus.
(In contrast, the 8086's queue registers can be written 16 bits at a time to support two-byte prefetches.)
When accessing the queue, the queue registers are read 16 bits at a time, but only one byte is transferred to the Q bus for instruction processing.<span id="fnref:motivation"><a href="#fn:motivation">9</a></span></p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/queue-regs.jpg"><img alt="The queue registers in the 8088." height="429" src="https://static.righto.com/images/8086-prefetch8088/queue-regs-w270.jpg" title="The queue registers in the 8088." width="270"></a></p><p>The queue registers in the 8088.</p>
<p>The diagram below shows how the queue registers appear on the die, comparing the six-byte prefetch queue in the 8086 (top) to the four-byte 8088 queue (bottom).
The 8086 prefetch registers are structured as three rows of 16-bit registers, while the 8088 prefetch registers are
structured as four rows of 8-bit registers.
In both cases, each bit is stored in a cross-coupled pair of inverters.
The bit lines (not present) are vertical, while the control lines to select a register are horizontal.
The layout is different between the processors to support 16-bit versus 8-bit writes.
Note the empty space at the bottom of the 8088 registers.
Because the rest of the chips are mostly the same, the 8088 couldn't be "compacted" to avoid this wasted space.</p>
<p><a href="https://static.righto.com/images/8086-prefetch8088/8086-vs-8088.jpg"><img alt="The prefetch registers in the 8086 (top) and 8088 (bottom). For the 8086, the metal and polysilicon layers were removed, exposing the underlying silicon. For the 8088, the polysilicon and silicon are visible." height="382" src="https://static.righto.com/images/8086-prefetch8088/8086-vs-8088-w600.jpg" title="The prefetch registers in the 8086 (top) and 8088 (bottom). For the 8086, the metal and polysilicon layers were removed, exposing the underlying silicon. For the 8088, the polysilicon and silicon are visible." width="600"></a></p><p>The prefetch registers in the 8086 (top) and 8088 (bottom). For the 8086, the metal and polysilicon layers were removed, exposing the underlying silicon. For the 8088, the polysilicon and silicon are visible.</p>
<p>Intel used simulations to determine the best queue sizes for the 8086 and 8088, balancing the performance cost of prefetching
against the benefit. (The cost is that prefetching makes the bus unavailable for other memory or I/O operations.)
The prefetch queue is discarded on a jump instruction or other change of control flow, causing the prefetched bytes to
be wasted.
Thus, as the queue gets longer, the chance of discarding a prefetched byte becomes larger,
so the potential benefit of prefetching becomes smaller.
Since the 8088 prefetches one byte at a time, compared
to two bytes at a time on the 8086,
prefetching on the 8088 costs twice as much as on the 8086 in terms of bus cycles used per byte.
This changes the tradeoffs in favor of a shorter queue.</p>
<p>Because of the difference in queue lengths, the queue control circuitry is different between the 8086 and 8088.
In particular, the 8086 needs three-bit counters for the
read and write positions, while the 8088 uses two-bit counters.
Because of this, the length computation circuitry is also different between the processors.</p>
<p>I plan to continue reverse-engineering the 8088 die so
follow me on Twitter <a href="https://twitter.com/kenshirriff">@kenshirriff</a> or <a href="https://www.righto.com/feeds/posts/default">RSS</a> for updates.
I've also started experimenting with Mastodon recently as <a href="https://oldbytes.space/@kenshirriff">@oldbytes.space@kenshirriff</a>.
If you're interested in the 8086, I wrote about the <a href="https://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html">8086 die</a>, its <a href="https://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html">die shrink process</a> and the <a href="https://www.righto.com/2020/07/the-intel-8086-processors-registers.html">8086 registers</a> earlier.</p>
<h2>Notes and references</h2>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I will NEVER add such a privacy breaking a**hole feature (104 pts)]]></title>
            <link>https://github.com/kimai/kimai/issues/3969</link>
            <guid>39801471</guid>
            <pubDate>Sat, 23 Mar 2024 17:17:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/kimai/kimai/issues/3969">https://github.com/kimai/kimai/issues/3969</a>, See on <a href="https://news.ycombinator.com/item?id=39801471">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-turbo-body="">
      


    <div>
      <p><a href="#start-of-content">Skip to content</a>
      <span data-view-component="true">
    <span data-view-component="true"></span>
</span></p><react-partial partial-name="keyboard-shortcuts-dialog" data-ssr="false">
  
  
  
</react-partial>



      

        

            


<header role="banner" data-color-mode="light" data-light-theme="light" data-dark-theme="dark">
  

  <div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Actions&quot;,&quot;label&quot;:&quot;ref_cta:Actions;&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Packages&quot;,&quot;label&quot;:&quot;ref_cta:Packages;&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Security&quot;,&quot;label&quot;:&quot;ref_cta:Security;&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Codespaces&quot;,&quot;label&quot;:&quot;ref_cta:Codespaces;&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Copilot&quot;,&quot;label&quot;:&quot;ref_cta:Copilot;&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Code review&quot;,&quot;label&quot;:&quot;ref_cta:Code review;&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Issues&quot;,&quot;label&quot;:&quot;ref_cta:Issues;&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Discussions&quot;,&quot;label&quot;:&quot;ref_cta:Discussions;&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to GitHub Sponsors&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Sponsors;&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to The ReadME Project&quot;,&quot;label&quot;:&quot;ref_cta:The ReadME Project;&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
    <a data-analytics-event="{&quot;category&quot;:&quot;Header menu top item (logged out)&quot;,&quot;action&quot;:&quot;click to go to Pricing&quot;,&quot;label&quot;:&quot;ref_cta:Pricing;&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:kimai/kimai" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="VolvjbxnlrPN1KCOXSFnsWdzKYjc0sb0f1D2tDI2g7pGUp3lLbRysrjgERzOzLA7Xe7qtwzzKEn3TFGR-7M_Uw" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="kimai/kimai" data-current-org="kimai" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-blackbird-indexed-repo-csrf="<esi:include src=&quot;/_esi/rails_csrf_token_form_hidden?r=ZfiUc3JB%2FcJBECmI0zES2lZMeGnhfy2X90%2BFuof2M8WULDiPUbIg58CHVzsP%2Fs0p35c5UDAFy9%2F0WfSkJWWuEieZmPdDkQwx7EQel2Qck7r%2FUk83xMOnwzKJlHRwStpcQuQyS61ZYH8zh6Fkc3FKHbdke4HFsUTU%2BMQz9oao8Hzgw%2FG56LgTRzjIBtw%2F8PS344Q10skxclKUAncF93T6KmSF2TyhDu1tiOinuu4Kffvyg2l3bUKlVYoBacLzfHsN5tQRPHRGAOFHEig0fnvbKfDuhcydglGy4jjcOaPXEgkPi4J1d%2BIqnMHw9%2BDl3pDFz4Pv6TYwhP9%2FLn3j%2B14aQscEPrhuB4uIdVIDgmqLVe6c%2B79KlqkjBcfe8x6zBBUbYWGJrSz3BdER%2BdFxSnNbj5d3%2BQH7MAGM%2FLJ90XcghS7qfNRBHOqsT%2Ba%2FZPZ51i77%2BdYfGUaPupL1pHHRxd%2BzQZqDMSq2MRBqOgv%2FGxhKfuXXpoCg%2Fq%2Bvnav%2FBdVNa8qL%2FcGzPzmR9lFYKht7L3piKMrFPJYeIw%3D%3D--6hcMYDpdzdVpf06W--O026LkoFzT7nbaZzIiLehw%3D%3D&quot; />">
  
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fvoltron%2Fissues_fragments%2Fissue_layout&amp;source=header-repo&amp;source_repo=kimai%2Fkimai" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/kimai/kimai/issues/3969&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="4191c25b4f71205258f38fb6e1cee27172016a02a338c9655f2f389aad07ff4c" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>/voltron/issues_fragments/issue_layout;ref_cta:Sign up;ref_loc:header logged out&quot;}">
              Sign up
            </a>
        </p></div>
      </div>
</header>

      
    </div>

  








    


    
    <include-fragment data-base-src="https://github.com/notifications/beta/shelf"></include-fragment>





  <div itemscope="" itemtype="http://schema.org/SoftwareSourceCode" data-commit-hovercards-enabled="" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="">
    <main id="js-repo-pjax-container">
      
  


  
      
    

    






  
  <div id="repository-container-header" data-turbo-replace="">

      

        


          <nav data-pjax="#js-repo-pjax-container" aria-label="Repository" data-view-component="true">

  
    <div data-view-component="true">      <action-menu data-select-variant="none" data-view-component="true">
  <focus-group direction="vertical" mnemonics="" retain="">
    <tool-tip id="tooltip-eadf8ed3-5e05-41a7-940d-109794687b52" for="action-menu-77e7cb67-98bd-48f6-b9f8-35ba61c95360-button" popover="manual" data-direction="s" data-type="label" data-view-component="true">Additional navigation options</tool-tip>


<anchored-position id="action-menu-77e7cb67-98bd-48f6-b9f8-35ba61c95360-overlay" anchor="action-menu-77e7cb67-98bd-48f6-b9f8-35ba61c95360-button" side="outside-bottom" anchor-offset="normal" popover="auto" data-view-component="true">
  </anchored-position>  </focus-group>
</action-menu></div>
</nav>

  </div>

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance">
    <div id="repo-content-pjax-container" data-channel="eyJjIjoiaXNzdWU6MTY1ODI0Njg5OTp0aW1lbGluZSIsInQiOjE3MTEyNzQ0MDV9--7f63d21a8ce5c4dfa8bafca8a1d1cb7da4a872915216484fc983e2bbd755f2ef" data-url="/kimai/kimai/issues/3969/show_partial?partial=issues%2Ftitle&amp;sticky=true" data-gid="I_kwDOBELIZs5i1tbz" data-morpheus-enabled="false" data-pjax="" data-turbo-frame="">



          
<details>
  <summary data-ga-click="Issues, create new issue, view:issue_show location:issue_header style:button logged_in:false">
    
    New issue
  </summary>
  <details-dialog aria-label="Sign up for GitHub">
            <div>
  <p>
  <strong>Have a question about this project?</strong> Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
  </p>

  <!-- '"` --><!-- </textarea></xmp> -->
  <p>By clicking “Sign up for GitHub”, you agree to our <a href="https://docs.github.com/terms" target="_blank">terms of service</a> and
  <a href="https://docs.github.com/privacy" target="_blank">privacy statement</a>. We’ll occasionally send you account related emails.</p>

  <p>
    Already on GitHub?
    <a data-ga-click="(Logged out) New issue modal, clicked Sign in, text:sign-in" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;new issue modal&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/kimai/kimai/issues/3969&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="97b661229cd0c000c9ddc7ce1535ed51b81c7a125b502d11ad759c853f6b09cb" href="https://github.com/login?return_to=%2Fkimai%2Fkimai%2Fissues%2Fnew%2Fchoose">Sign in</a>
    to your account
  </p>
</div>
  </details-dialog>
</details>
        
      </div>

</turbo-frame>


    </main>
  </div>

          




    <cookie-consent id="cookie-consent-banner" data-initial-cookie-consent-allowed="" data-cookie-consent-required="true"></cookie-consent>


  

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open="">
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog="">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0 tooltipped-no-delay" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 tooltipped-no-delay d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Lapdev, a new open-source remote dev environment management software (203 pts)]]></title>
            <link>https://github.com/lapce/lapdev</link>
            <guid>39801399</guid>
            <pubDate>Sat, 23 Mar 2024 17:07:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/lapce/lapdev">https://github.com/lapce/lapdev</a>, See on <a href="https://news.ycombinator.com/item?id=39801399">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto">
  <p><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/164527084/316242165-e8ca611c-6288-4ceb-abdd-55f50b43f2a3.svg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEyMzE1MDUsIm5iZiI6MTcxMTIzMTIwNSwicGF0aCI6Ii8xNjQ1MjcwODQvMzE2MjQyMTY1LWU4Y2E2MTFjLTYyODgtNGNlYi1hYmRkLTU1ZjUwYjQzZjJhMy5zdmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzIzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMyM1QyMjAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mYjNlMzZmYTMwNTZlY2JmNmYxYTNmODJjMTcxYjQ4OTNlMmY2MDY2NTk3OTQxZGZiY2MzMTc2ODZmYWI3NTRkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.tYII3JFh7FGAn_0g_H39SlnD76TfEBVNKG--VgpYn94"><img width="120" height="120" src="https://private-user-images.githubusercontent.com/164527084/316242165-e8ca611c-6288-4ceb-abdd-55f50b43f2a3.svg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTEyMzE1MDUsIm5iZiI6MTcxMTIzMTIwNSwicGF0aCI6Ii8xNjQ1MjcwODQvMzE2MjQyMTY1LWU4Y2E2MTFjLTYyODgtNGNlYi1hYmRkLTU1ZjUwYjQzZjJhMy5zdmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwMzIzJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDMyM1QyMjAwMDVaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mYjNlMzZmYTMwNTZlY2JmNmYxYTNmODJjMTcxYjQ4OTNlMmY2MDY2NTk3OTQxZGZiY2MzMTc2ODZmYWI3NTRkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.tYII3JFh7FGAn_0g_H39SlnD76TfEBVNKG--VgpYn94"></a></p><p dir="auto"><h2 tabindex="-1" dir="auto">Lapdev</h2><a id="user-content-lapdev" aria-label="Permalink: Lapdev" href="#lapdev"></a></p>
<p dir="auto"><strong>Self-hosted remote development enviroment management with ease</strong></p>
</div>
<p><a href="https://github.com/lapce/lapdev/actions/workflows/ci.yml">
    <img src="https://github.com/lapce/lapdev/actions/workflows/ci.yml/badge.svg">
  </a>
  <a href="https://discord.gg/DTZNfz3Ung" rel="nofollow">
    <img src="https://camo.githubusercontent.com/c1a12ca52058621a766521a3ae871f48058d5057acbd060275fb108c9692eb4b/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3934363835383736313431333332383934363f6c6f676f3d646973636f7264" data-canonical-src="https://img.shields.io/discord/946858761413328946?logo=discord">
  </a>
  <a href="https://docs.lap.dev/" rel="nofollow">
      <img src="https://camo.githubusercontent.com/eb0adf6d7b6f021167bfb5ecf4db2c5fdc3e771deb356f958994c6cfa67dc1a9/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d446f6373266d6573736167653d646f63732e6c61702e64657626636f6c6f723d626c7565" alt="Lapdev Docs" data-canonical-src="https://img.shields.io/static/v1?label=Docs&amp;message=docs.lap.dev&amp;color=blue">
  </a>
</p>

<p dir="auto"><strong>Lapdev</strong> is a self hosted application that spins up remote development environments on your own servers or clouds. It scales from a single machine in the corner to a global fleet of servers. It uses <a href="https://containers.dev/" rel="nofollow">Devcontainer open specification</a> for defining your development environment as code. If you’re interested in a deep dive into how Lapdev works, you can read about its <a href="https://docs.lap.dev/administration/architecture" rel="nofollow">architecture</a> here.</p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/bc5ae35f087608047b6d22ad73565931b4d2cc0f6b936819be9ea0e6157493bf/68747470733a2f2f6c61702e6465762f696d616765732f73637265656e73686f742e706e67"><img src="https://camo.githubusercontent.com/bc5ae35f087608047b6d22ad73565931b4d2cc0f6b936819be9ea0e6157493bf/68747470733a2f2f6c61702e6465762f696d616765732f73637265656e73686f742e706e67" alt="" data-canonical-src="https://lap.dev/images/screenshot.png"></a></p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Self hosted with ease:</strong> Lapdev is designed to be self hosted with minimum efforts for installation and maintenance. The application is designed to just work, sparing you from digging too deep into the internals for troubleshooting.</p>
</li>
<li>
<p dir="auto"><strong>Horizontal scalability:</strong> With a simple yet powerful <a href="https://docs.lap.dev/administration/architecture" rel="nofollow">architecture</a>, Lapdev can scale from a single machine to a fleet of servers, so that you can have a development environment management system that can grow with your developer teams.</p>
</li>
<li>
<p dir="auto"><strong>Development Environment as Code:</strong> Using the <a href="https://containers.dev/" rel="nofollow">Devcontainer open specification</a>, Lapdev allows you to define your development environment as code. This empowers you to standardize development environments that can be replicated across different developers, avoiding environment related issues and ensuring a consistent setup for everyone.</p>
</li>
<li>
<p dir="auto"><strong>Save Onboarding Time:</strong> Onboarding developers to new projects don't need hours or days to prepare the environment on their machines. They can start to code instantly.</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Planned Features</h2><a id="user-content-planned-features" aria-label="Permalink: Planned Features" href="#planned-features"></a></p>
<ul dir="auto">
<li><strong>More workspace types:</strong> Currently Lapdev only supports container based workspaces, which has its own limitations for example when you want to run a k8s cluster in your development flow. It's planned to have support for more than containers. VMs and bare metal machine support are on the roadmap. And more OS support is planned as well, e.g. when you are developing a cross platform desktop application for Windows, Linux and macOS, Lapdev can spin up development environments on all of them and you can develop and debug from the same local machine without the need to switch machines.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">You can see the installation steps <a href="https://docs.lap.dev/installation/quickstart" rel="nofollow">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Build from source</h2><a id="user-content-build-from-source" aria-label="Permalink: Build from source" href="#build-from-source"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>