<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 22 Dec 2024 17:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[We use our own hardware at Fastmail (522 pts)]]></title>
            <link>https://www.fastmail.com/blog/why-we-use-our-own-hardware/</link>
            <guid>42485124</guid>
            <pubDate>Sun, 22 Dec 2024 08:36:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.fastmail.com/blog/why-we-use-our-own-hardware/">https://www.fastmail.com/blog/why-we-use-our-own-hardware/</a>, See on <a href="https://news.ycombinator.com/item?id=42485124">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pagefind-body="" data-cms-edit="content"> <p>This is the twenty-second post in the <a href="https://www.fastmail.com/blog/fastmail-advent-2024/">Fastmail Advent 2024</a> series. The previous post was <a href="https://www.fastmail.com/blog/fastmail-in-a-box/">Dec 21: Fastmail In A Box</a>. Check back tomorrow for another post.</p> <h2 id="why-we-use-our-own-hardware" tabindex="-1">Why we use our own hardware</h2> <p>There has recently been talk of <a href="https://www.google.com/search?q=Cloud+Repatriation" target="_blank" rel="noopener">cloud repatriation</a> where companies are moving from the cloud to on premises, with some particularly <a href="https://basecamp.com/cloud-exit" target="_blank" rel="noopener">noisy examples</a>.</p> <p>Fastmail has a long history of using our <a href="https://www.fastmail.com/blog/standalone-mail-servers/" target="_blank" rel="noopener">own</a> <a href="https://www.fastmail.com/blog/getting-the-most-out-of-hardware/" target="_blank" rel="noopener">hardware</a>. We have over two decades of experience running and optimising our systems to use our own <a href="https://en.wikipedia.org/wiki/Bare-metal_server" target="_blank" rel="noopener">bare metal</a> servers efficiently.</p> <p>We get way better cost optimisation compared to moving everything to the cloud because:</p> <ol> <li>We understand our short, medium and long term usage patterns, requirements and growth very well. This means we can plan our hardware purchases ahead of time and don’t need the fast dynamic scaling that cloud provides.</li> <li>We have in house operations experience installing, configuring and running our own hardware and networking. These are skills we’ve had to maintain and grow in house since we’ve been doing this for 25 years.</li> <li>We are able to use our hardware for long periods. We find our hardware can provide useful life for anywhere from 5-10 years depending on what it is and when in the global technology cycle it was bought, meaning we can amortise and depreciate the cost of any hardware over many years.</li> </ol> <p>Yes, that means we have to do more ourselves, including planning, choosing, buying, installing, etc, but the tradeoff for us has and we believe continues to be significantly worth it.</p> <h2 id="hardware-over-the-years" tabindex="-1">Hardware over the years</h2> <p>Of course over the 25 years we’ve been running Fastmail we’ve been through a number of hardware changes. For many years, our IMAP server storage platform was a combination of <a href="https://www.urbandictionary.com/define.php?term=Spinning%20Rust" target="_blank" rel="noopener">spinning rust</a> drives and <a href="https://www.areca.com.tw/" target="_blank" rel="noopener">ARECA RAID controllers</a>. We tended to use faster 15k RPM SAS drives in <a href="https://en.wikipedia.org/wiki/Standard_RAID_levels#RAID_1" target="_blank" rel="noopener">RAID1</a> for our hot meta data, and 7.2k RPM SATA drives in <a href="https://en.wikipedia.org/wiki/Standard_RAID_levels#RAID_6" target="_blank" rel="noopener">RAID6</a> for our main email blob data.</p> <p>In fact it was slightly more complex than this. Email blobs were written to the fast RAID1 SAS volumes on delivery, but then a separate archiving process would move them to the SATA volumes at low server activity times. Support for all of this had been added into <a href="https://www.cyrusimap.org/" target="_blank" rel="noopener">cyrus</a> and our tooling over the years in the form of separate “meta”, “data” and <a href="https://www.cyrusimap.org/3.8/imap/reference/admin/locations/archive-partitions.html" target="_blank" rel="noopener">“archive”</a> partitions.</p> <h2 id="moving-to-nv-me-ss-ds" tabindex="-1">Moving to NVMe SSDs</h2> <p>A few years ago however we made our biggest hardware upgrade ever. We moved all our email servers to a new <a href="https://www.supermicro.com/en/aplus/system/2u/2113/as-2113s-wn24rt.cfm" target="_blank" rel="noopener">2U AMD platform</a> with pure <a href="https://www.solidigm.com/products/data-center.html" target="_blank" rel="noopener">NVMe SSDs</a>. The density increase (24 x 2.5" NVMe drives vs 12 x 3.5" SATA drives per 2U) and performance increase was enormous. We found that these new servers performed even better than our initial expectations.</p> <p>At the time we upgraded however NVMe RAID controllers weren’t widely available. So we had to decide on how to handle redundancy. We considered a RAID-less setup using raw SSDs drives on each machine with synchronous application level replication to other machines, but the software changes required were going to be more complex than expected.</p> <p>We were looking at using classic Linux <a href="https://en.wikipedia.org/wiki/Mdadm" target="_blank" rel="noopener">mdadm RAID</a>, but the <a href="https://en.wikipedia.org/wiki/RAID#Atomicity" target="_blank" rel="noopener">write hole</a> was a concern and the <a href="https://docs.kernel.org/driver-api/md/raid5-cache.html" target="_blank" rel="noopener">write cache</a> didn’t seem well tested at the time.</p> <p>We decided to have a look at <a href="https://arstechnica.com/information-technology/2020/05/zfs-101-understanding-zfs-storage-and-performance/" target="_blank" rel="noopener">ZFS</a> and at least test it out.</p> <p>Despite some of the cyrus on disk database structures being fairly hostile to <a href="https://en.wikipedia.org/wiki/ZFS#Copy-on-write_transactional_model" target="_blank" rel="noopener">ZFS Copy-on-write</a> semantics, they were still incredibly fast at all the IO we threw at them. And there were some other wins as well.</p> <h2 id="zfs-compression-and-tuning" tabindex="-1">ZFS compression and tuning</h2> <p>When we rolled out ZFS for our email servers we also enabled <a href="https://freebsdfoundation.org/wp-content/uploads/2021/05/Zstandard-Compression-in-OpenZFS.pdf" target="_blank" rel="noopener">transparent Zstandard compression</a>. This has worked very well for us, saving about 40% space on all our email data.</p> <p>We’ve also recently done some additional calculations to see if we could tune some of the parameters better. We sampled 1 million emails at random and calculated how many blocks would be required to store those emails uncompressed, and then with <a href="https://klarasystems.com/articles/tuning-recordsize-in-openzfs/" target="_blank" rel="noopener">ZFS record sizes</a> of 32k, 128k or 512k and zstd-3 or zstd-9 compression options. Although ZFS <a href="https://en.wikipedia.org/wiki/ZFS#ZFS's_approach:_RAID-Z_and_mirroring" target="_blank" rel="noopener">RAIDz2</a> seems conceptually similar to classic RAID6, the way it <a href="https://ibug.io/blog/2023/10/zfs-block-size/" target="_blank" rel="noopener">actually stores blocks of data</a> is quite different and so you have to take into account volblocksize, how files are split into logical recordsize blocks, and number of drives when doing calculations.</p> <pre><code>               Emails: 1,026,000
           Raw blocks: 34,140,142
 32k &amp; zstd-3, blocks: 23,004,447 = 32.6% saving
 32k &amp; zstd-9, blocks: 22,721,178 = 33.4% saving
128k &amp; zstd-3, blocks: 20,512,759 = 39.9% saving
128k &amp; zstd-9, blocks: 20,261,445 = 40.7% saving
512k &amp; zstd-3, blocks: 19,917,418 = 41.7% saving
512k &amp; zstd-9, blocks: 19,666,970 = 42.4% saving
</code></pre> <p>This showed that the defaults of 128k record size and zstd-3 were already pretty good. Moving to a record size of 512k improved compression over 128k by a bit over 4%. Given all meta data is cached separately, this seems a worthwhile improvement with no significant downside. Moving to zstd-9 improved compression over zstd-3 by about 2%. Given the CPU cost of compression at zstd-9 is about 4x zstd-3, even though emails are immutable and tend to be kept for a long time, we’ve decided not to implement this change.</p> <h2 id="zfs-encryption" tabindex="-1">ZFS encryption</h2> <p>We always enable <a href="https://en.wikipedia.org/wiki/Data_at_rest#Encryption" target="_blank" rel="noopener">encryption at rest</a> on all of our drives. This was usually done with <a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup" target="_blank" rel="noopener">LUKS</a>. But with ZFS this was <a href="https://arstechnica.com/gadgets/2021/06/a-quick-start-guide-to-openzfs-native-encryption/" target="_blank" rel="noopener">built in</a>. Again, this reduces overall system complexity.</p> <h2 id="going-all-in-on-zfs" tabindex="-1">Going all in on ZFS</h2> <p>So after the success of our initial testing, we decided to go all in on ZFS for all our large data storage needs. We’ve now been using ZFS for all our email servers for over 3 years and have been very happy with it. We’ve also moved over all our database, log and backup servers to using ZFS on NVMe SSDs as well with equally good results.</p> <h2 id="ssd-lifetimes" tabindex="-1">SSD lifetimes</h2> <p>The flash memory in SSDs has a finite life and <a href="https://en.wikipedia.org/wiki/Flash_memory#Write_endurance" target="_blank" rel="noopener">finite number of times it can be written to</a>. SSDs employ increasingly complex <a href="https://en.wikipedia.org/wiki/Wear_leveling" target="_blank" rel="noopener">wear levelling</a> algorithms to spread out writes and increase drive lifetime. You’ll often see the quoted endurance of an enterprise SSD as either an absolute figure of “Lifetime Writes”/“Total bytes written” like 65 PBW (petabytes written) or a relative per-day figure of “Drive writes per day” like 0.3, which you can convert to lifetime figure by multiplying by the drive size and the drive expected lifetime which is often assumed to be 5 years.</p> <p>Although we could calculate IO rates for existing <a href="https://en.wikipedia.org/wiki/Hard_disk_drive" target="_blank" rel="noopener">HDD</a> systems, we were making a significant number of changes moving to the new systems. Switching to a COW filesystem like ZFS, removing the special casing meta/data/archive partitions, and the massive latency reduction and performance improvements mean that things that might have taken extra time previously and ended up batching IO together, are now so fast it actually causes additional separated IO actions.</p> <p>So one big unknown question we had was how fast would the SSDs wear in our actual production environment? After several years, we now have some clear data. From one server at random but this is fairly consistent across the fleet of our oldest servers:</p> <pre><code># smartctl -a /dev/nvme14
...
Percentage Used:                    4%
</code></pre> <p>At this rate, we’ll replace these drives due to increased drive sizes, or entirely new physical drive formats (such <a href="https://www.snia.org/forums/cmsi/knowledge/formfactors" target="_blank" rel="noopener">E3.S</a> which appears to finally be gaining traction) long before they get close to their rated write capacity.</p> <p>We’ve also anecdotally found SSDs just to be much more reliable compared to HDDs for us. Although we’ve only ever used <a href="https://www.micron.com/products/storage/ssd/data-center-ssd/" target="_blank" rel="noopener">datacenter</a> <a href="https://www.solidigm.com/products/data-center.html" target="_blank" rel="noopener">class</a> SSDs and <a href="https://www.seagate.com/www-content/datasheets/pdfs/exos-7-e8-data-sheet-DS1957-1-1709US-en_US.pdf" target="_blank" rel="noopener">HDDs</a> failures and replacements every few weeks were a regular occurrence on the old fleet of servers. Over the last 3+ years, we’ve only seen a couple of SSD failures in total across the entire upgraded fleet of servers. This is easily less than one tenth the failure rate we used to have with HDDs.</p> <h2 id="storage-cost-calculation" tabindex="-1">Storage cost calculation</h2> <p>After converting all our email storage to NVMe SSDs, we were recently looking at our data backup solution. At the time it consisted of a number of older 2U servers with 12 x 3.5" SATA drive bays and we decided to do some cost calculations on:</p> <ol> <li>Move to cloud storage.</li> <li>Upgrade the HD drives in existing servers.</li> <li>Upgrade to SSD NVMe machines.</li> </ol> <h3 id="1-cloud-storage" tabindex="-1">1. Cloud storage:</h3> <p>Looking at various providers, the per TB per month price, and then a yearly price for 1000Tb/1Pb (prices as at Dec 2024)</p> <ul> <li><a href="https://aws.amazon.com/s3/pricing/" target="_blank" rel="noopener">Amazon S3</a> - $21 -&gt; $252,000/y</li> <li><a href="https://developers.cloudflare.com/r2/pricing/" target="_blank" rel="noopener">Cloudflare R2</a> - $15 -&gt; $180,000/y</li> <li><a href="https://wasabi.com/pricing" target="_blank" rel="noopener">Wasabi</a> - $6.99 -&gt; $83,880/y</li> <li><a href="https://www.backblaze.com/cloud-storage/pricing" target="_blank" rel="noopener">Backblaze B2</a> - $6 -&gt; $72,000/y</li> <li><a href="https://aws.amazon.com/s3/pricing/" target="_blank" rel="noopener">Amazon S3 Glacier Instant Retrieval</a> - $4 -&gt; $48,000/y</li> <li><a href="https://aws.amazon.com/s3/pricing/" target="_blank" rel="noopener">Amazon S3 Glacier Deep Archive (12 hour retrieval time)</a> - $0.99 -&gt; $11,880/y</li> </ul> <p>Some of these (e.g. Amazon) have potentially significant bandwidth fees as well.</p> <p>It’s interesting seeing the spread of prices here. Some also have a bunch of weird edge cases as well. e.g. “The S3 Glacier Flexible Retrieval and S3 Glacier Deep Archive storage classes require an additional 32 KB of data per object”. Given the large retrieval time and extra overhead per-object, you’d probably want to store small incremental backups in regular S3, then when you’ve gathered enough, build a biggish object to push down to Glacier. This adds implementation complexity.</p> <ul> <li><em>Pros</em>: No limit to amount we store. Assuming we use S3 compatible API, can choose between multiple providers.</li> <li><em>Cons</em>: Implementation cost of converting existing backup system that assumes local POSIX files to S3 style object API is uncertain and possibly significant. Lowest cost options require extra careful consideration around implementation details and special limitations. Ongoing monthly cost that will only increase as amount of data we store increases. Uncertain if prices will go down or not, or even go up. Possible significant bandwidth costs depending on provider.</li> </ul> <h3 id="2-upgrade-hd-ds" tabindex="-1">2. Upgrade HDDs</h3> <p><a href="https://www.seagate.com/au/en/products/enterprise-drives/exos-x/x24/" target="_blank" rel="noopener">Seagate Exos 24 HDs</a> are 3.5" 24T HDDs. This would allow us to triple the storage on existing servers. Each HDD is about $500, so upgrading one 2U machine would be about $6,000 and have storage of 220T or so.</p> <ul> <li><em>Pros</em>: Reuses existing hardware we already have. Upgrades can be done a machine at a time. Fairly low price</li> <li><em>Cons</em>: Will existing units handle 24T drives? What’s the rebuild time on drive failure look like? It’s almost a day for 8T drives already, so possibly nearly a week for a failed 24T drive? Is there enough IO performance to handle daily backups at capacity?</li> </ul> <h3 id="3-upgrade-to-new-hardware" tabindex="-1">3. Upgrade to new hardware</h3> <p>As we know, SSDs are denser (2.5" -&gt; 24 per 2U vs 3.5" -&gt; 12 per 2U), more reliable, and now higher capacity - <a href="https://www.solidigm.com/products/data-center/d5/p5336.html#form=U.2%2015mm&amp;cap=61.44TB" target="_blank" rel="noopener">up to 61T per 2.5" drive</a>. A single 2U server with 24 x 61T drives with 2 x 12 RAIDz2 = 1220T. Each drive is <a href="https://www.newegg.com/solidigm-61-44tb-d5-p5336/p/N82E16820318031" target="_blank" rel="noopener">about $7k</a> right now, prices fluctuate. So all up 24 x $7k = $168k + ~$20k server =~ $190k for &gt; 1000T storage one-time cost.</p> <ul> <li><em>Pros</em>: <strong>Much</strong> higher sequential and random IO than HDDs will ever have. Price &lt; 1 year of standard S3 storage. Internal to our WAN, no bandwidth costs and very low latency. No new development required, existing backup system will just work. Consolidate on single 2U platform for all storage (cyrus, db, backups) and SSD for all storage. Significant space and power savings over existing HDD based servers</li> <li><em>Cons</em>: Greater up front cost. Still need to predict and buy more servers as backups grow.</li> </ul> <p>One thing you don’t see in this calculation is datacenter space, power, cooling, etc. The reason is that compared to the amortised yearly cost of a storage server like this, these are actually reasonably minimal these days, on the order of $3000/2U/year. Calculating person time is harder. We have a lot of home built automation systems that mean installing and running one more server has minimal marginal cost.</p> <h3 id="result" tabindex="-1">Result</h3> <p>We ended up going with the the new 2U servers option:</p> <p><picture><source type="image/webp" srcset="https://www.fastmail.com/assets/images/nvme-imap-servers-eeGMRYrXlR-375.webp 375w, https://www.fastmail.com/assets/images/nvme-imap-servers-eeGMRYrXlR-750.webp 750w, https://www.fastmail.com/assets/images/nvme-imap-servers-eeGMRYrXlR-1500.webp 1500w" sizes="(max-width: 425px) 375px, 750px"><img alt="NVME IMAP Servers" loading="lazy" decoding="async" src="https://www.fastmail.com/assets/images/nvme-imap-servers-eeGMRYrXlR-375.png" width="1500" height="559" srcset="https://www.fastmail.com/assets/images/nvme-imap-servers-eeGMRYrXlR-375.png 375w, https://www.fastmail.com/assets/images/nvme-imap-servers-eeGMRYrXlR-750.png 750w, https://www.fastmail.com/assets/images/nvme-imap-servers-eeGMRYrXlR-1500.png 1500w" sizes="(max-width: 425px) 375px, 750px"></picture></p> <ul> <li>The 2U AMD NVMe platform with ZFS is a platform we have experience with already</li> <li>SSDs are much more reliable and much higher IO compared to HDDs</li> <li>No uncertainty around super large HDDs, RAID controllers, rebuild times, shuffling data around, etc.</li> <li>Significant space and power saving over existing HDD based servers</li> <li>No new development required, can use existing backup system and code</li> <li>Long expected hardware lifetime, controlled upfront cost, can depreciate hardware cost</li> </ul> <p>So far this has worked out very well. The machines have bonded 25Gbps networks and when filling them from scratch we were able to saturate the network links streaming around 5Gbytes/second of data from our IMAP servers, compressing and writing it all down to a RAIDz2 zstd-3 compressed ZFS dataset.</p> <h2 id="conclusion" tabindex="-1">Conclusion</h2> <p>Running your own hardware might not be for everyone and has distinct tradeoffs. But when you have the experience and the knowledge of how you expect to scale, the cost improvements can be significant.</p> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The essays of Michel de Montaigne online (142 pts)]]></title>
            <link>https://hyperessays.net/</link>
            <guid>42484527</guid>
            <pubDate>Sun, 22 Dec 2024 05:16:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hyperessays.net/">https://hyperessays.net/</a>, See on <a href="https://news.ycombinator.com/item?id=42484527">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><svg width="100%" height="100%" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;"><g transform="matrix(1.12327,0,0,1.12327,-18.4907,-0.775614)"><title id="logoTitle">HyperEssays’s logo</title><desc id="logoDesc">A group of three horizontal yellow bars over a thin diagonal red line balancing on a thick blue circle.</desc><path d="M150 155.935c-25.808.0-46.762 20.953-46.762 46.762.0 25.808 20.954 46.761 46.762 46.761s46.762-20.953 46.762-46.761c0-25.809-20.954-46.762-46.762-46.762zm0 32.049C158.12 187.984 164.712 194.577 164.712 202.697S158.12 217.409 150 217.409 135.288 210.817 135.288 202.697 141.88 187.984 150 187.984z" style="fill:rgb(42,103,188);"></path></g><g transform="matrix(2.77397,-0.278409,0.0786955,0.784093,-481.796,161.307)"><path d="M172.106 68.354 279.894 67.646v-12L172.106 56.354v12z" style="fill:rgb(239,64,61);"></path></g><g transform="matrix(1,0,0,0.960409,0,4.6509)"><rect x="100.855" y="94.566" width="96.29" height="22.907" style="fill:rgb(235,174,11);"></rect></g><g transform="matrix(1,0,0,0.960409,0,-26.7149)"><rect x="100.855" y="94.566" width="96.29" height="22.907" style="fill:rgb(235,174,11);"></rect></g><g transform="matrix(1,0,0,0.960409,0,-58.0808)"><rect x="100.855" y="94.566" width="96.29" height="22.907" style="fill:rgb(235,174,11);"></rect></g></svg></p></div><div><p>HyperEssays is a project to create a <b>modern and accessible online edition</b> of the <a href="https://hyperessays.net/essays/toc/"><i>Essays</i> of Michel de Montaigne</a>.</p><p>HyperEssays.net hosts <b>four editions</b> of the <i>Essays</i>:</p><ol><li>A <a href="https://hyperessays.net/gournay/toc/"><span role="text" aria-label="fifteen ninety eight">1598</span> edition, in middle French</a>, edited by Marie de Gournay. This is a slightly revised version of Gournay’s original edition published in <span role="text" aria-label="fifteen ninety five">1595.</span></li><li>A complete and searchable edition of <a href="https://hyperessays.net/florio/toc/">John Florio’s <span role="text" aria-label="sixteen o three">1603</span> translation of the <i>Essays</i></a>, in early modern English.</li><li>A <a href="https://hyperessays.net/cotton/toc/"><span role="text" aria-label="sixteen eighty five">1685</span> translation by Charles Cotton</a>, also in early modern English. Only some chapters of this edition have been copyedited and posted.</li><li>A <a href="https://hyperessays.net/essays/toc/">complete and searchable modern edition of the <i>Essays</i></a> based on W. Carew Hazlitt’s <span role="text" aria-label="eighteen seventy seven">1877</span> update of Charles Cotton’s translation. I am slowly replacing the Cotton/Hazlitt translation with a contemporary one and adding new notes.</li></ol><p>My goals with HyperEssays are to provide <b>context and tools</b> for first-time readers of the <i>Essays</i> and to design a <b>lasting resource</b> for all interested in Montaigne’s work.</p><p>To that end, I copyedit, update, and annotate the original text and its translations. I tag them for indexing and searching, and format them them for easy reading on smartphones, desktop computers, and tablets. In addition, I prepare and provide <b>free chapter PDFs</b> for offline reading.</p><p>You can help make HyperEssays a reliable online resource by <a href="https://hyperessays.net/support/">supporting this project.</a> With your contribution, this site can continue to grow and remain free and accessible to all.</p><h3>What are the <i>Essays</i> about?</h3><p>The <i>Essays</i> is not a single, cohesive book but a collection of short and long pieces on <b>various subjects</b> such as religion, horses, friendship, sleep, law, or suicide, which Montaigne wrote over more than <b>twenty years</b>. His goals for the book and the circumstances under which he worked on it <b>changed over time</b>.</p><p>The first edition, published in 1580, comprised two books. Eight years later, an updated edition included hundreds of revisions and a new, third book. By the time of his death, in 1592, Montaigne had planned many more changes, which were in­cor­po­rat­ed in the first posthumous edition of 1595.</p><p>So, while you can read the <i>Essays</i> from beginning to end, starting with Montaigne’s address <a href="https://hyperessays.net/essays/to-the-reader/"><i>To the Reader</i></a>, you can also follow John Cage’s advice and “<b>begin any­where.</b>”</p><p>Pick from a selection of some of the most well-known chapters:</p><ul><li><a href="https://hyperessays.net/essays/to-philosophize-is-to-learn-to-die/"><i>To Philosophize Is to Learn to Die</i></a>,</li><li><a href="https://hyperessays.net/essays/on-the-education-of-children/"><i>On the Education of Children</i></a>,</li><li><a href="https://hyperessays.net/essays/on-friendship/"><i>On Friendship</i></a>,</li><li><a href="https://hyperessays.net/essays/on-cannibals/"><i>On Cannibals</i></a>,</li><li><a href="https://hyperessays.net/essays/on-books/"><i>On Books</i></a>,</li><li><a href="https://hyperessays.net/essays/apology-for-raymond-sebond/"><i>Apology for Raymond Sebond</i></a>,</li><li><a href="https://hyperessays.net/essays/on-some-verses-of-virgil/"><i>On Some Verses of Virgil</i></a>,</li><li><a href="https://hyperessays.net/essays/on-coaches/"><i>On Coaches</i></a>,</li><li><a href="https://hyperessays.net/essays/on-experience/"><i>On Experience</i></a>.</li></ul><p>Or look at the <a href="https://hyperessays.net/essays/toc/">table of contents</a> and let your curiosity guide you.</p><h3>Who was Michel de Montaigne?</h3><p>Michel de Montaigne, the author of the <i>Essays,</i> is often described as a sixteenth-century French philosopher. But was Montaigne actually a philosopher? And did he really retire from the world to write in solitude for years, as is commonly believed?</p><p>In <a href="https://hyperessays.net/on-montaigne/"><i>On Montaigne</i></a>, I address these questions and provide <b>biographical context</b> to better understand the <i>Essays.</i> The companion <a href="https://hyperessays.net/timeline/">timeline</a> provides a <b>chronological overview</b> of his life.</p><p>If you want to learn more about him, I recommend these <a href="https://hyperessays.net/four-biographies-of-montaigne/">four biographies of Montaigne</a> (along with two modern translations of the <i>Essays</i>). Each one is engaging but written with a different audience in mind.</p><h3>Recent updates</h3><p>Copy<wbr>editing, translating, writing notes, updating metadata … the work never ends. This is HyperEssays’s work log, a list of the chapters I’ve been working on:</p><ul id="wip"><li>Dec 21, 2024 · <a href="https://hyperessays.net/essays/on-repentance/"><i>On Repentance</i></a></li><li>Dec 21, 2024 · <a href="https://hyperessays.net/essays/on-pedantry/"><i>On Pedantry</i></a></li><li>Dec 20, 2024 · <a href="https://hyperessays.net/essays/let-others-judge-of-our-happiness-after-our-death/"><i>Let Others Judge of Our Happiness after Our Death</i></a></li><li>Dec 18, 2024 · <a href="https://hyperessays.net/gournay/book/II/chapter/15/"><i>Que nostre desir s’accroist par la malaisance</i></a></li><li>Dec 15, 2024 · <a href="https://hyperessays.net/gournay/book/II/chapter/14/"><i>Comme nostre esprit s’empesche soy-mesmes</i></a></li><li>Dec 15, 2024 · <a href="https://hyperessays.net/essays/on-repentance/"><i>On Repentance</i></a></li><li>Dec 15, 2024 · <a href="https://hyperessays.net/gournay/book/II/chapter/13/"><i>De juger de la mort d’autruy</i></a></li><li>Dec 14, 2024 · <a href="https://hyperessays.net/gournay/book/II/chapter/12/"><i>Apologie de Raimond de Sebonde</i></a></li><li>Dec 10, 2024 · <a href="https://hyperessays.net/essays/a-consideration-on-cicero/"><i>A Consideration on Cicero</i></a></li><li>Dec 9, 2024 · <a href="https://hyperessays.net/essays/apology-for-raymond-sebond/"><i>Apology for Raymond Sebond</i></a></li><li>Nov 29, 2024 · <a href="https://hyperessays.net/gournay/book/II/chapter/11/"><i>De la cruauté</i></a></li><li>Nov 26, 2024 · <a href="https://hyperessays.net/essays/let-others-judge-of-our-happiness-after-our-death/"><i>Let Others Judge of Our Happiness after Our Death</i></a></li></ul><p>Work on <i>HyperEssays</i> started on January <span>17, 2020</span> and likely won’t be completed for many years.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Slow deployment causes meetings (2015) (159 pts)]]></title>
            <link>https://tidyfirst.substack.com/p/slow-deployment-causes-meetings</link>
            <guid>42484139</guid>
            <pubDate>Sun, 22 Dec 2024 03:12:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tidyfirst.substack.com/p/slow-deployment-causes-meetings">https://tidyfirst.substack.com/p/slow-deployment-causes-meetings</a>, See on <a href="https://news.ycombinator.com/item?id=42484139">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><blockquote><p>First published 2016.</p></blockquote><p>“I can’t get any code out with all these meetings.” What if this perennial engineer complaint has causation backwards? Adding and removing organizational overhead is relatively easy compared to increasing an organization’s capacity to deploy code. What if meetings and reviews are an organization’s adaptive response to avoid overloading deployment?</p><p>Chuck Rossi&nbsp;[ed: legendary release manager at early-to-middle Facebook] made the observation that there seem to be a fixed number of changes Facebook can handle in one deployment. If we want more changes, we need more deployments. This has led to a steady increase in deployment pace over the past five years, from weekly to daily to thrice daily deployments of our PHP code and from six to four to two week cycles for deploying our mobile apps. This improvement has been driven primarily by the release engineering team (I’m a fan, can you tell?)</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg" width="1268" height="877" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:877,&quot;width&quot;:1268,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:641969,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22d3f693-f2f5-4ea7-86bb-e01ef2f613dd_1268x877.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption><em>Approaching maximum changes/deployment triggers more frequent deployments</em></figcaption></figure></div><p>As I was drifting off to sleep yesterday, I visualized the sawtooth-shaped “changes per deployment” graph and it struck me that maybe we had organizational overhead all wrong. “Changes per deployment” seems like an inelastic metric. It’s possible to improve, but only with great effort over time. What happens when the number of changes produced exceeds the current threshold? Changes per deployment doesn’t change. The number of changes has to go down.</p><p>How? By increasing overhead—meetings, reviews, handoffs, overhead and eventually by killing enthusiasm and initiative. Nobody is going to own up to doing it on purpose, but perhaps the organization’s emergent response is locally optimal—change the thing that is easiest to change that will relieve the pressure.</p><p>Increasing overhead initiates a positive feedback loop: less getting done -&gt; more pressure -&gt; more mistakes -&gt; even fewer changes per deployment -&gt; more overhead -&gt; less getting done. Isolated efforts to reduce overhead increase pressure and increase overhead.</p><p>If you want more changes to get through, you need to expand the far end of the hose, to increase deployment capacity. You can do this the hard way, by reducing the deployment cycle and dealing with the ensuing chaos, or the harder way, by increasing the number of changes per deployment (better tests, better monitoring, better isolation between elements, better social relationships on the team). But don’t try to reduce overhead. That’ll just lead inevitably to a series of meetings on how to reduce meetings. At least that will keep you from trying to ship too much code, though.</p><blockquote><p>This essay is an example of the Thinkie Reverse Causality. It’s one of the most fun Thinkies to deploy because they ideas seem just so wrong at first.</p></blockquote></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rosetta 2 creator leaves Apple to work on Lean full-time (302 pts)]]></title>
            <link>https://www.linkedin.com/posts/leonardo-de-moura-26a27b5_leanlang-leanprover-leanfro-activity-7274523099394400256-0F0x</link>
            <guid>42483895</guid>
            <pubDate>Sun, 22 Dec 2024 02:01:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.linkedin.com/posts/leonardo-de-moura-26a27b5_leanlang-leanprover-leanfro-activity-7274523099394400256-0F0x">https://www.linkedin.com/posts/leonardo-de-moura-26a27b5_leanlang-leanprover-leanfro-activity-7274523099394400256-0F0x</a>, See on <a href="https://news.ycombinator.com/item?id=42483895">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-content" role="main">
      <section>
              <h2>                  Leonardo de Moura’s Post</h2>

                
    

    
      

    <article data-activity-urn="urn:li:activity:7274523099394400256" data-featured-activity-urn="urn:li:activity:7274523099394400256" data-attributed-urn="urn:li:share:7274523098685562880">
<!---->
      
              
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    

    
    

<!---->  
        

      <div data-test-id="main-feed-activity-card__entity-lockup">
          <a href="https://www.linkedin.com/in/leonardo-de-moura-26a27b5?trk=public_post_feed-actor-image" data-tracking-control-name="public_post_feed-actor-image" data-tracking-will-navigate="">
            
      
  
<!---->          </a>
      <div>
        

            <p>
<!---->                Senior Principal Applied Scientist at AWS, and Chief Architect at Lean FRO (non-profit)
            </p>

            <p><span>
                <time>
                  

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    

      5d
  
<!---->                </time>
<!---->            </span>
                </p></div>

<!---->    </div>

      
            
            
  <p dir="ltr" data-test-id="main-feed-activity-card__commentary">I am thrilled to welcome <a href="https://www.linkedin.com/in/cameronzwarich?trk=public_post-text" target="_self" data-tracking-control-name="public_post-text" data-tracking-will-navigate="">Cameron Zwarich</a> to the Lean FRO! As the brilliant creator of Rosetta 2 and an exceptional software developer with over 15 years of experience at Apple specializing in low-level systems software, Cameron will focus on enhancing Lean's code generator. I can’t wait to see the incredible impact his expertise will have on the Lean ecosystem!
<a href="https://www.linkedin.com/signup/cold-join?session_redirect=https%3A%2F%2Fwww.linkedin.com%2Ffeed%2Fhashtag%2Fleanlang&amp;trk=public_post-text" target="_self" data-tracking-control-name="public_post-text" data-tracking-will-navigate="">#LeanLang</a> <a href="https://www.linkedin.com/signup/cold-join?session_redirect=https%3A%2F%2Fwww.linkedin.com%2Ffeed%2Fhashtag%2Fleanprover&amp;trk=public_post-text" target="_self" data-tracking-control-name="public_post-text" data-tracking-will-navigate="">#LeanProver</a> <a href="https://www.linkedin.com/signup/cold-join?session_redirect=https%3A%2F%2Fwww.linkedin.com%2Ffeed%2Fhashtag%2Fleanfro&amp;trk=public_post-text" target="_self" data-tracking-control-name="public_post-text" data-tracking-will-navigate="">#LeanFRO</a></p>



        

        
            
<!---->  
                  

      
          
        

      
          
        

      
            
      
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    

      
  
  
        

      
                
    
    
    

    
  
                      

      
              
            

    
    
    
    
    
    

<!---->
    

    
    

      
  
  
<!---->      
        

      
              

    
    
    
    
    
    

    
  
        
    </article>
  
      
  
  
            </section>
      <section>

            <h2>
              Explore topics
            </h2>

<!---->
        
      </section>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A data table thousands of years old (2020) (218 pts)]]></title>
            <link>https://www.datafix.com.au/BASHing/2020-08-12.html</link>
            <guid>42482829</guid>
            <pubDate>Sat, 21 Dec 2024 22:25:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.datafix.com.au/BASHing/2020-08-12.html">https://www.datafix.com.au/BASHing/2020-08-12.html</a>, See on <a href="https://news.ycombinator.com/item?id=42482829">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="container">

<p><img src="https://www.datafix.com.au/BASHing/img1/banner.png" width="700" height="140" alt="banner"></p><hr>
<p>For a full list of <em>BASHing data</em> blog posts see the <a href="https://www.datafix.com.au/BASHing/index.html">index page</a>. &nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.datafix.com.au/BASHing/BASHing_data.xml"><img src="https://www.datafix.com.au/BASHing/rss.png" width="36" height="14" alt="RSS"></a></p>
<hr>



<p>I knew that data tables had been around a long time, but I didn't appreciate <em>how</em> long until I read recently about account-keeping in ancient Mesopotamia.</p>

<p>The accounts were written <a href="https://www.datafix.com.au/BASHing/2018-09-20.html">on clay tablets</a>, sometimes with impressed lines to mark off rows and columns. Here's a drawing of the front and back sides of an <a href="https://cdli.ucla.edu/search/search_results.php?SearchMode=Text&amp;ObjectID=P368686">example</a>:</p>

<p><img src="https://www.datafix.com.au/BASHing/img9/2020-08-12_1.png" width="450" height="618" alt="tablet1"></p><p>This tablet was found on the site of the old city of <a href="https://www.cemml.colostate.edu/cultural/09476/iraq05-098.html">Larsa</a> near the mouth of the Euphrates in Iraq. Someone wrote on the tablet in the Old Babylonian Period, ca 3600-4000 years ago.</p>

<p>The <a href="https://www.datafix.com.au/BASHing/2018-09-20.html">cuneiform</a> text was transliterated and translated by <a href="https://www.ucl.ac.uk/history/people/academic-staff/professor-eleanor-robson">Eleanor Robson</a>, who currently heads the History Department at University College London. You can see her efforts at <a href="http://oracc.museum.upenn.edu/obta/corpus/">this website</a> by clicking on the tablet's British Museum catalog number, BM 085232.</p>

<p>Below I've put Prof. Robson's translation into a spreadsheet. Items in square brackets are guessed fill-ins. The "s." stands for <em>shekels</em> and "m." is <em>mūšar</em>, equal to 60 shekels.</p>

<p><img src="https://www.datafix.com.au/BASHing/img9/2020-08-12_2.png" width="592" height="380" alt="tablet2"></p>

<p>It looks to me like a payroll summary from a construction project, but that's a modern-day view. What's clear is that the person who inscribed the clay was organising similar data items neatly in rows and columns (with column headers), and operating on those items in ways familiar to us moderns.</p>

<p>Column A, for example, looks like the sum of columns B (or E) and F. Column C is a base rate of pay, and column D is the base rate multiplied by the quantity in column B (or E). Each non-header row corresponds to a person or persons in column G, except the last row with column totals.</p>

<p>This remarkable record is evidence that data tables (as we understand them) were used for record-keeping more than 3500 years ago. It's tempting to think that civilisation progresses step-wise, and that you could trace the use of data tables in an unbroken path from clay tablets to today's spreadsheets. I don't think that's a realistic view. Inventions get lost or forgotten, then re-invented. What was obvious to that account-keeper in ancient Mesopotamia might not have been obvious at later times and in other places.</p>

<p>I'm pretty confident, though, that in another thousand years there will still be ancient data tables "archived" underground in Iraq, while todays' billions of spreadsheets in digital form and on non-archival paper will have long since disappeared.</p>

<hr>

<p>Last update: 2020-08-12
<br>The blog posts on this website are licensed under a<br><a href="https://creativecommons.org/licenses/by-nc/4.0/">Creative Commons Attribution-NonCommercial 4.0 International License</a></p>

<hr>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[JEP 483: Ahead-of-Time Class Loading and Linking (112 pts)]]></title>
            <link>https://openjdk.org/jeps/483</link>
            <guid>42481813</guid>
            <pubDate>Sat, 21 Dec 2024 19:53:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openjdk.org/jeps/483">https://openjdk.org/jeps/483</a>, See on <a href="https://news.ycombinator.com/item?id=42481813">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2 id="Summary">Summary</h2>
<p>Improve startup time by making the classes of an application instantly available, in a loaded and linked state, when the HotSpot Java Virtual Machine starts. Achieve this by monitoring the application during one run and storing the loaded and linked forms of all classes in a cache for use in subsequent runs. Lay a foundation for future improvements to both startup and warmup time.</p>
<h2 id="Goals">Goals</h2>
<ul>
<li>
<p>Improve startup time by exploiting the fact that most applications start up in roughly the same way every time they run.</p>
</li>
<li>
<p>Do not require any change to the code of applications, libraries, or frameworks.</p>
</li>
<li>
<p>Do not require any change to how applications are started from the command line with the <code>java</code> launcher, beyond the command-line options related directly to this feature.</p>
</li>
<li>
<p>Do not require the use of the <code>jlink</code> or <code>jpackage</code> tools.</p>
</li>
<li>
<p>Lay a foundation for continued improvements to startup time and also to warmup time, i.e., the time required for the HotSpot JVM to optimize an application’s code for peak performance.</p>
</li>
</ul>
<h2 id="Non-Goals">Non-Goals</h2>
<ul>
<li>It is not a goal to cache classes that are loaded by user-defined class loaders. Only classes loaded from the class path, the module path, and the JDK itself, by the JDK’s <a href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/ClassLoader.html#builtinLoaders">built-in class loaders</a>, can be cached. We may address this limitation in future work.</li>
</ul>
<h2 id="Motivation">Motivation</h2>
<p>The Java Platform is highly dynamic. This is a source of great strength.</p>
<p>Features such as dynamic class loading, dynamic linkage, dynamic dispatch, and dynamic reflection give vast expressive power to developers. They can create frameworks which use reflection to determine an application’s configuration by inspecting application code for annotations. They can write libraries which dynamically load and then link to plug-in components discovered at run time. They can, finally, assemble applications by composing libraries which dynamically link to other libraries, leveraging the rich Java ecosystem.</p>
<p>Features such as dynamic compilation, dynamic deoptimization, and dynamic storage reclamation give broad flexibility to the JVM. It can compile a method from bytecode to native code when it detects, by observing an application’s behavior, that doing so will be worthwhile. It can speculatively optimize native code, assuming a particular frequent path of execution, and revert to interpreting bytecode when it observes that the assumption no longer holds. It can reclaim storage when it observes that doing will be profitable. By these and related techniques, the JVM can achieve higher peak performance than is possible with traditional static approaches.</p>
<p>All this dynamism comes at a price, however, which must be paid every time an application starts.</p>
<p>The JVM does a lot of work during the startup of a typical server application, interleaving several kinds of activities:</p>
<ul>
<li>
<p>It scans hundreds of JAR files on disk and reads and parses thousands of class files into memory;</p>
</li>
<li>
<p>It <a href="https://docs.oracle.com/javase/specs/jvms/se22/html/jvms-5.html#jvms-5.4.3">loads the parsed class data into class objects</a> and <a href="https://docs.oracle.com/javase/specs/jvms/se22/html/jvms-5.html#jvms-5.3">links them together</a> so that classes can use each others’ APIs, which involves <a href="https://docs.oracle.com/javase/specs/jvms/se22/html/jvms-5.html#jvms-5.4.1">verifying bytecodes</a> and <a href="https://docs.oracle.com/javase/specs/jvms/se22/html/jvms-5.html#jvms-5.4.3">resolving symbolic references</a>, which in turn may involve <a href="https://cr.openjdk.org/~briangoetz/lambda/lambda-translation.html">instantiating lambda objects</a>; and</p>
</li>
<li>
<p>It executes the static initializers of classes — their <code>static</code> field initializers and <code>static { ... }</code> blocks — which can create many objects and even perform I/O operations such as opening log files.</p>
</li>
</ul>
<p>If, additionally, the application uses a framework, e.g., the Spring Framework, then the framework’s startup-time discovery of <code>@Bean</code>, <code>@Configuration</code>, and related annotations will trigger yet more work.</p>
<p>All this work is done on demand, lazily, just in time. It is heavily optimized, however, so many Java programs start up in milliseconds. Even so, a large server application which uses a web application framework plus libraries for XML processing, database persistence, etc., may require seconds or even minutes to start up.</p>
<p>Yet applications tend to repeat themselves, often doing essentially the same thing every time they start: Scanning the same JAR files, reading and parsing and loading and linking the same classes, executing the same static initializers, and using reflection to configure the same application objects. The key to improving startup time is to try to do at least some of this work eagerly, ahead of time, rather than just in time. To put it another way, in the terms of <a href="https://openjdk.org/projects/leyden/">Project Leyden</a>, we aim to <a href="https://openjdk.org/projects/leyden/notes/02-shift-and-constrain">shift some of this work earlier in time</a>.</p>
<h2 id="Description">Description</h2>
<p>We extend the HotSpot JVM to support an <em>ahead-of-time cache</em> which can store classes after reading, parsing, loading, and linking them. Once a cache is created for a specific application, it can be re-used in subsequent runs of that application to improve startup time.</p>
<p>To create a cache takes two steps. First, run the application once, in a <em>training run</em>, to record its AOT configuration, in this case into the file <code>app.aotconf</code>:</p>
<pre><code>$ java <b>-XX:AOTMode=record -XX:AOTConfiguration=app.aotconf</b> \
       -cp app.jar com.example.App ...
</code></pre>
<p>Second, use the configuration to create the cache, in the file <code>app.aot</code>:</p>
<pre><code>$ java <b>-XX:AOTMode=create -XX:AOTConfiguration=app.aotconf</b> \
       <b>-XX:AOTCache=app.aot</b> -cp app.jar
</code></pre>
<p>(This second step doesn’t run the application, it just creates the cache. We intend to streamline the process of cache creation in future work.)</p>
<p>Subsequently, in testing or production, run the application with the cache:</p>
<pre><code>$ java <b>-XX:AOTCache=app.aot</b> -cp app.jar com.example.App ...
</code></pre>
<p>(If the cache file is unusable or does not exist then the JVM issues a warning message and continues.)</p>
<p>With the AOT cache, the reading, parsing, loading, and linking work that the JVM would usually do just-in-time when the program runs in the third step is shifted ahead-of-time to the second step, which creates the cache. Subsequently, the program starts up faster in the third step because its classes are available instantly from the cache.</p>
<p>For example, here is a program which, though short, uses the <a href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/util/stream/package-summary.html">Stream API</a> and thus causes almost 600 JDK classes to be read, parsed, loaded, and linked:</p>
<pre><code>import java.util.*;
import java.util.stream.*;

public class HelloStream {

    public static void main(String ... args) {
        var words = List.of("hello", "fuzzy", "world");
        var greeting = words.stream()
            .filter(w -&gt; !w.contains("z"))
            .collect(Collectors.joining(", "));
        System.out.println(greeting);  // hello, world
    }

}</code></pre>
<p>This program runs in 0.031 seconds on JDK&nbsp;23. After doing the small amount of additional work required to create an AOT cache it runs in in 0.018 seconds on JDK&nbsp;NN — an improvement of 42%. The AOT cache occupies 11.4 megabytes.</p>
<p>For a representative server application, consider <a href="https://github.com/spring-projects/spring-petclinic">Spring PetClinic</a>, version 3.2.0. It&nbsp;loads and links about 21,000 classes at startup. It starts in 4.486 seconds on JDK&nbsp;23 and in 2.604 seconds on JDK&nbsp;NN when using an AOT cache — also an improvement of 42%, by coincidence. The AOT cache occupies 130 megabytes.</p>
<h3 id="How-to-train-your-JVM">How to train your JVM</h3>
<p>A training run captures application configuration and execution history for use in subsequent testing and production runs. A good candidate for a training run is, therefore, a production run. Using a production run for training, however, is not always practical, especially for server applications which, e.g., create log files, open network connections, and access databases. For such cases we recommend creating a synthetic training run that resembles actual production runs as much as possible. It should, among other things, fully configure itself and exercise typical production code paths.</p>
<p>One way to achieve this is to add a second main class to your application specifically for training, e.g., <code>com.example.AppTrainer</code>. This class can invoke the production main class to exercise the common modes of the application using a temporary log-file directory, a local network configuration, and a mocked database if required. You might already have such a main class in the form of an integration test.</p>
<p>Some additional tips:</p>
<ul>
<li>
<p>To optimize for startup time, structure the training run so that it loads the same classes that a production run loads when it starts. You can check which classes are loaded via the <code>-verbose:class</code> command-line option or the <code>jdk.ClassLoad</code> event of the <a href="https://dev.java/learn/jvm/jfr/">JDK Flight Recorder</a>.</p>
</li>
<li>
<p>To minimize the size of the AOT cache, avoid loading classes in the training run that are not used in production runs. Do not, e.g., use a test suite written with a rich test framework. We may provide a way to filter such classes from the cache in future work.</p>
</li>
<li>
<p>If, in production, your application interacts with other hosts on the network or accesses a database then, in training, you may want to mock those interactions to ensure that the necessary classes are loaded. Such mocking, if done in Java code, will cause additional classes to be cached which are not needed in production. Again, we may provide a way to filter such classes from the cache in future work. If, for some reason, you cannot mock these kinds of interactions, and therefore cannot include them in the training run, then the classes required in production to handle them will be loaded from the class path or from modules, just-in-time, as usual.</p>
</li>
<li>
<p>Focus on running a broad set of short verification scenarios, sometimes called “smoke tests” or “sanity tests.” This is often enough to load most of the classes you will need in production. Avoid large test suites that cover rare corner cases and seldom-used functionality. Also avoid stress and regression tests, which generally do not characterize typical startup activities.</p>
</li>
<li>
<p>Keep in mind that an AOT cache only helps insofar as the training run does similar things as production runs. If the training run stops short of that then the cache will be less useful.</p>
</li>
</ul>
<h3 id="Consistency-of-training-and-subsequent-runs">Consistency of training and subsequent runs</h3>
<p>To enjoy the benefits of the AOT cache generated during a training run, the training run and all subsequent runs must be essentially similar.</p>
<ul>
<li>
<p>All runs must use the same JDK release and be on the same hardware architecture (e.g., <code>x64</code> or <code>aarch64</code>) and operating system.</p>
</li>
<li>
<p>All runs must have consistent class paths. A subsequent run may specify extra class-path entries, appended to the training class path; otherwise, the class paths must be identical. Class paths must contain only JAR files; directories in class paths are not supported because the JVM cannot efficiently check them for consistency.</p>
</li>
<li>
<p>All runs must have consistent module options on the command line, and consistent module graphs. The arguments to the <code>-m</code> or <code>--module</code> options, if present, must be identical. The <code>--limit-modules</code>, <code>--patch-module</code>, and <code>--upgrade-module-path</code> options must not be used.</p>
</li>
</ul>
<p>If any of these constraints are violated then the JVM, by default, issues a warning and ignores the cache. You can insist that the JVM use the cache by adding the option <code>-XX:AOTMode=on</code> to the command line:</p>
<pre><code>$ java -XX:AOTCache=app.aot <b>-XX:AOTMode=on</b> \
       -cp app.jar com.example.App ...
</code></pre>
<p>If this option is present then the JVM reports an error and exits if any of the above constraints are violated, or if the cache does not exist.</p>
<p>(If needed, you can disable the AOT cache entirely via <code>-XX:AOTMode=off</code>. You can also specify the default mode via <code>-XX:AOTMode=auto</code>, in which case the JVM tries to use the AOT cache specified via the <code>-XX:AOTCache</code> option; if the cache is unusable or does not exist then it issues a warning message and continues.)</p>
<p>A useful exception to the requirement for consistency is that training and subsequent runs may use different garbage collectors. Another useful exception is that training and subsequent runs may use different main classes; this gives flexibility in constructing training runs, as noted above.</p>
<h3 id="History">History</h3>
<p>The ahead-of-time cache proposed here is a natural evolution of an old feature in the HotSpot JVM, <a href="https://dev.java/learn/jvm/cds-appcds/"><em>class-data sharing</em></a> (CDS).</p>
<p>CDS was <a href="https://web.archive.org/web/20040604034719/http://java.sun.com/j2se/1.5.0/docs/guide/vm/class-data-sharing.html">first introduced</a> in an update to JDK&nbsp;5, in 2004. It initially aimed to shrink the memory footprint of multiple Java applications running on the same machine. It achieved this by reading and parsing JDK class files, storing the resulting metadata in a read-only archive file that could later be mapped directly into memory by multiple JVM processes using the same virtual-memory pages. We later extended CDS so that it could also store metadata for application classes.</p>
<p>Nowadays the sharing benefit of CDS has been reduced by new security practices such as <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">address space layout randomization</a> (ASLR), which makes the address at which a file is mapped into memory unpredictable. CDS still, however, offers a significant startup-time improvement — so much so that builds of JDK&nbsp;12 and later include a <a href="https://openjdk.org/jeps/341">built-in CDS archive</a> containing the metadata of over a thousand commonly-used JDK classes. CDS is, therefore, ubiquitous, even though many Java developers have never heard of it and few have used it directly.</p>
<p>The AOT cache builds upon CDS by not only reading and parsing class files ahead-of-time but also loading and linking them. You can see the effect of the latter two optimizations by disabling them via the <code>-XX:-AOTClassLinking</code> option when creating a cache:</p>
<pre><code>$ java -XX:AOTMode=create -XX:AOTConfiguration=app.aotconf \
       -XX:AOTCache=app.aot <b>-XX:-AOTClassLinking</b>
</code></pre>
<p>When we use this option, we can see that most of the improvement to the startup time of the <code>HelloStream</code> program is due to ahead-of-time loading and linking, while most of the improvement to the startup time of the PetClinic application is due to the ahead-of-time reading and parsing already done by CDS today (all times are in seconds, and percentages are cumulative):</p>
<table>
  <tbody><tr>
    <td>
    </td><td><code>HelloStream</code></td>
    <td>PetClinic</td>
  </tr>
  <tr>
    <td>JDK 23</td>
    <td>0.031</td>
    <td>4.486</td>
  </tr>
  <tr>
    <td>AOT cache, no loading or linking</td>
    <td>0.027 (+13%)</td>
    <td>3.008 (+33%)</td>
  </tr>
  <tr>
    <td>AOT cache, with loading and linking</td>
    <td>0.018 (+42%)</td>
    <td>2.604 (+42%)</td>
  </tr>
</tbody></table>
<p>Users of <a href="https://docs.spring.io/spring-boot/how-to/class-data-sharing.html">Spring Boot</a> and, more generally, the <a href="https://docs.spring.io/spring-framework/reference/integration/cds.html">Spring Framework</a>, can therefore enjoy significant startup-time improvements, today, simply by using the CDS feature already available in previous JDK releases.</p>
<p>The new <code>-XX:AOT*</code> command-line options are, for the most part at this time, macros for existing CDS options such as <code>-Xshare</code>, <code>-XX:DumpLoadedClassList</code>, and <code>-XX:SharedArchiveFile</code>. We are introducing the <code>-XX:AOT*</code> options in order to provide a uniform user experience for both this and future ahead-of-time features, and to drop the potentially confusing words “share” and “shared.”</p>
<h3 id="Compatibility">Compatibility</h3>
<p>Ahead-of-time class loading and linking works with every existing Java application, library, and framework. It requires no changes to source code and no changes to build configurations, aside from the additional step of creating the AOT cache. It fully supports the highly dynamic nature of the Java Platform, including run-time reflection.</p>
<p>This is so because the timing and ordering of class reading, parsing, loading, and linking is immaterial to Java code. The Java language and virtual-machine specifications give the JVM broad freedom in scheduling these operations. When we shift these operations from just-in-time to ahead-of-time, the application observes classes being loaded and linked as if the JVM did that work at the exact moment requested — though unaccountably fast.</p>
<h2 id="Future-work">Future work</h2>
<ul>
<li>
<p>The two-step workflow proposed here is cumbersome. In the near future we expect to reduce this to one step which both performs the training run and creates the AOT cache.</p>
</li>
<li>
<p>At present, the only way to do a training run is to have the application run a representative workload, at least through startup, and then exit. In future work we may create new tools to help developers more flexibly define and evaluate such training runs and workloads, and perhaps also allow them to manually adjust what is stored in AOT caches. We may also enable training data to be gathered unobtrusively during production runs.</p>
</li>
<li>
<p>ZGC is not yet supported. We intend to address this limitation in <a href="https://bugs.openjdk.org/browse/JDK-8326035">future work</a>.</p>
</li>
<li>
<p>In some cases the JVM cannot load classes ahead of time, much less link them. These include classes loaded by user-defined class loaders, old classes which require an old version of the bytecode verifier, and signed classes. If a class cannot be AOT-loaded then other, AOT-loadable classes cannot be AOT-linked to it. In all such cases the JVM falls back to loading and linking just-in-time, as usual. We may address these limitations in future work, if and when they prove significant.</p>
</li>
<li>
<p>Loading and linking classes ahead-of-time enables future improvements to warmup time. In the future, during training runs we can record statistics about which code runs most frequently and cache any optimized code that is generated. This will enable applications to start immediately in an optimized state.</p>
</li>
</ul>
<h2 id="Testing">Testing</h2>
<ul>
<li>
<p>We will create new unit-test cases to cover the new command-line options.</p>
</li>
<li>
<p>Ahead-of-time loading and linking is independent of existing CDS features. Most CDS tests should pass when run with the <code>-XX:+AOTClassLinking</code> option. A few tests are sensitive to the order in which classes are loaded; we will revise them as appropriate.</p>
</li>
</ul>
<h2 id="Risks-and-Assumptions">Risks and Assumptions</h2>
<ul>
<li>
<p>We assume that the <a href="#Consistency-of-training-and-subsequent-runs">consistency</a> required across training and subsequent runs is tolerable to developers who want to use this feature. They must, especially, ensure that class paths and module configurations are consistent in all runs.</p>
</li>
<li>
<p>We assume that the limited support for user-defined class loaders is tolerable. Conversations with some potential users suggest that they are willing to accept fixed class paths and module configurations, and thus a fixed set of built-in class loaders, and to use specialized class loaders only when that flexibility is required.</p>
</li>
<li>
<p>We assume that the low-level side effects of ahead-of-time loading and linking are immaterial in practice. These include the timing of filesystem accesses, log messages, JDK-internal bookkeeping activities, and changes in CPU and memory usage. Applications that observe and depend on such subtle effects may become unstable if classes are loaded and linked ahead-of-time. We assume that such applications are rare, and that they can be adjusted to compensate.</p>
</li>
</ul>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Singlefile: A web extension to save a complete web page into a single HTML file (111 pts)]]></title>
            <link>https://github.com/gildas-lormeau/SingleFile</link>
            <guid>42481659</guid>
            <pubDate>Sat, 21 Dec 2024 19:33:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/gildas-lormeau/SingleFile">https://github.com/gildas-lormeau/SingleFile</a>, See on <a href="https://news.ycombinator.com/item?id=42481659">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">SingleFile</h2><a id="user-content-singlefile" aria-label="Permalink: SingleFile" href="#singlefile"></a></p>
<p dir="auto">SingleFile is a Web Extension (and a CLI tool) compatible with Chrome, Firefox
(Desktop and Mobile), Microsoft Edge, Safari, Vivaldi, Brave, Waterfox, Yandex
browser, and Opera. It helps you to save a complete web page into a single HTML
file.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Table of Contents</h2><a id="user-content-table-of-contents" aria-label="Permalink: Table of Contents" href="#table-of-contents"></a></p>
<ul dir="auto">
<li><a href="#singlefile">SingleFile</a>
<ul dir="auto">
<li><a href="#table-of-contents">Table of Contents</a></li>
<li><a href="#demo">Demo</a></li>
<li><a href="#install">Install</a></li>
<li><a href="#getting-started">Getting started</a></li>
<li><a href="#additional-notes">Additional notes</a></li>
<li><a href="#faq">FAQ</a></li>
<li><a href="#release-notes">Release notes</a></li>
<li><a href="#known-issues">Known Issues</a></li>
<li><a href="#troubleshooting-unknown-issues">Troubleshooting unknown issues</a></li>
<li><a href="#command-line-interface-singlefile-cli">Command Line Interface (SingleFile CLI)</a></li>
<li><a href="#integration-with-user-scripts">Integration with user scripts</a></li>
<li><a href="#file-format-comparison">File format comparison</a></li>
<li><a href="#projects-usingcompatible-with-singlefile">Projects using/compatible with SingleFile</a></li>
<li><a href="#privacy-policy">Privacy Policy</a></li>
<li><a href="#contributors">Contributors</a></li>
<li><a href="#code-derived-from-third-party-projects">Code derived from third party projects</a></li>
<li><a href="#icons">Icons</a></li>
<li><a href="#license">License</a></li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Demo</h2><a id="user-content-demo" aria-label="Permalink: Demo" href="#demo"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description Demo.SingleFile.mp4">Demo.SingleFile.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/396787/156664907-cc458e35-f41b-45ca-91eb-372213812b44.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzQ4NjczMDEsIm5iZiI6MTczNDg2NzAwMSwicGF0aCI6Ii8zOTY3ODcvMTU2NjY0OTA3LWNjNDU4ZTM1LWY0MWItNDVjYS05MWViLTM3MjIxMzgxMmI0NC5tcDQ_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQxMjIyJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MTIyMlQxMTMwMDFaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT00OTc4ODcyYzk1ODRjMzcyODA0YzIzZTFlZGFiOWVlOGUyYTg0N2Q2ODIyNDVjNTVmYjlmNzk4NzMyOTE3Zjg3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.xRg0kw20k5EGKGBAJeKhuqgqtjHejzLznNqg1AATYw8" data-canonical-src="https://private-user-images.githubusercontent.com/396787/156664907-cc458e35-f41b-45ca-91eb-372213812b44.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzQ4NjczMDEsIm5iZiI6MTczNDg2NzAwMSwicGF0aCI6Ii8zOTY3ODcvMTU2NjY0OTA3LWNjNDU4ZTM1LWY0MWItNDVjYS05MWViLTM3MjIxMzgxMmI0NC5tcDQ_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQxMjIyJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MTIyMlQxMTMwMDFaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT00OTc4ODcyYzk1ODRjMzcyODA0YzIzZTFlZGFiOWVlOGUyYTg0N2Q2ODIyNDVjNTVmYjlmNzk4NzMyOTE3Zjg3JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.xRg0kw20k5EGKGBAJeKhuqgqtjHejzLznNqg1AATYw8" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">Install</h2><a id="user-content-install" aria-label="Permalink: Install" href="#install"></a></p>
<p dir="auto">SingleFile can be installed from the store of:</p>
<ul dir="auto">
<li>Firefox: <a href="https://addons.mozilla.org/firefox/addon/single-file" rel="nofollow">https://addons.mozilla.org/firefox/addon/single-file</a></li>
<li>Firefox for Android:
<a href="https://addons.mozilla.org/android/addon/single-file" rel="nofollow">https://addons.mozilla.org/android/addon/single-file</a></li>
<li>Chrome:
<a href="https://chrome.google.com/extensions/detail/mpiodijhokgodhhofbcjdecpffjipkle" rel="nofollow">https://chrome.google.com/extensions/detail/mpiodijhokgodhhofbcjdecpffjipkle</a></li>
<li>Safari (macOS and iOS): <a href="https://apps.apple.com/us/app/singlefile-for-safari/id6444322545" rel="nofollow">https://apps.apple.com/us/app/singlefile-for-safari/id6444322545</a></li>
<li>Microsoft Edge:
<a href="https://microsoftedge.microsoft.com/addons/detail/efnbkdcfmcmnhlkaijjjmhjjgladedno" rel="nofollow">https://microsoftedge.microsoft.com/addons/detail/efnbkdcfmcmnhlkaijjjmhjjgladedno</a></li>
</ul>
<p dir="auto">You can also download the zip file
(<a href="https://github.com/gildas-lormeau/SingleFile/archive/master.zip">https://github.com/gildas-lormeau/SingleFile/archive/master.zip</a>) of the project
and install it manually by unzipping it somewhere on your disk and following
these instructions:</p>
<ul dir="auto">
<li>Firefox: <a href="https://extensionworkshop.com/documentation/develop/temporary-installation-in-firefox" rel="nofollow">https://extensionworkshop.com/documentation/develop/temporary-installation-in-firefox</a></li>
<li>Chrome and Microsoft Edge: <a href="https://github.com/gildas-lormeau/SingleFile-MV3">https://github.com/gildas-lormeau/SingleFile-MV3</a></li>
<li>Safari: <a href="https://github.com/gildas-lormeau/SingleFile-Safari-Extension">https://github.com/gildas-lormeau/SingleFile-Safari-Extension</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting started" href="#getting-started"></a></p>
<ul dir="auto">
<li>Click on the SingleFile button in the extension toolbar to save the page.</li>
<li>You can click again on the button to cancel the action when processing a page.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Additional notes</h2><a id="user-content-additional-notes" aria-label="Permalink: Additional notes" href="#additional-notes"></a></p>
<ul dir="auto">
<li>Open the context menu by right-clicking the SingleFile button in the extension
toolbar or on the webpage. It allows you to save:
<ul dir="auto">
<li>the current tab,</li>
<li>the selected content,</li>
<li>the selected frame.</li>
</ul>
</li>
<li>You can also process multiple tabs in one click and save:
<ul dir="auto">
<li>the selected tabs,</li>
<li>the unpinned tabs,</li>
<li>all the tabs.</li>
</ul>
</li>
<li>Select "Annotate and save the page..." in the context menu to:
<ul dir="auto">
<li>highlight text,</li>
<li>add notes,</li>
<li>remove content.</li>
</ul>
</li>
<li>The context menu also allows you to activate the auto-save of:
<ul dir="auto">
<li>the current tab,</li>
<li>the unpinned tabs,</li>
<li>all the tabs.</li>
</ul>
</li>
<li>With auto-save active, pages are automatically saved every time after being
loaded (or before being unloaded if not).</li>
<li>Right-click on the SingleFile button and select "Manage extension" (Firefox) /
"Options" (Chrome) to open the options page.</li>
<li>Enable the option "Destination &gt; save to Google Drive" or "Destination &gt;
upload to GitHub" to upload pages to Google Drive or GitHub respectively.</li>
<li>Enable the option "Misc. &gt; add proof of existence" to prove the existence of
saved pages by linking the SHA256 of the pages into the blockchain.</li>
<li>You can use the customizable shortkey Ctrl+Shift+Y to save the current tab or
the selected tabs. Go to about:addons and select "Manage extension shortcuts"
in the cogwheel menu to change it in Firefox. Go to
chrome://extensions/shortcuts to change it in Chrome.</li>
<li>The default save folder is the download folder configured in your browser, cf.
about:addons in Firefox and chrome://settings in Chrome.</li>
<li>See the extension help in the options page for more detailed information about
the options and technical notes.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">FAQ</h2><a id="user-content-faq" aria-label="Permalink: FAQ" href="#faq"></a></p>
<p dir="auto">See <a href="https://github.com/gildas-lormeau/SingleFile/blob/master/faq.md">https://github.com/gildas-lormeau/SingleFile/blob/master/faq.md</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Release notes</h2><a id="user-content-release-notes" aria-label="Permalink: Release notes" href="#release-notes"></a></p>
<p dir="auto">See <a href="https://addons.mozilla.org/firefox/addon/single-file/versions/" rel="nofollow">https://addons.mozilla.org/firefox/addon/single-file/versions/</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Known Issues</h2><a id="user-content-known-issues" aria-label="Permalink: Known Issues" href="#known-issues"></a></p>
<ul dir="auto">
<li>All browsers:
<ul dir="auto">
<li>For security reasons, you cannot save pages hosted on
<a href="https://chrome.google.com/" rel="nofollow">https://chrome.google.com</a>, <a href="https://addons.mozilla.org/" rel="nofollow">https://addons.mozilla.org</a> and some other Mozilla
domains. When this happens, 🛇 is displayed on top of the SingleFile icon.</li>
<li>For
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image" rel="nofollow">security reasons</a>,
SingleFile is sometimes unable to save the image representation of
<a href="https://developer.mozilla.org/docs/Web/HTML/Element/canvas" rel="nofollow">canvas</a> and
snapshots of
<a href="https://developer.mozilla.org/docs/Web/HTML/Element/video" rel="nofollow">video</a> elements.</li>
<li>The last saved path cannot be remembered by default. To circumvent this
limitation, disable the option "Misc &gt; save pages in background".</li>
<li>The following characters are replaced by their full-width equivalent
symbols in file names: ~, +, ?, %, *, :, |, ", &lt;, &gt;, . The
replacement characters are respectively: ～, ＋, ？, ％, ＊, ：, ｜, ＂, ＜, ＞, ＼.
Other invalid charcaters are replaced by _. This is done to maintain
compatibility with various OSs and file systems. If you don't need that
level of compatibility and know what you are doing, you can change the
list of forbidden characters and the replacement characters in the Hidden
options(<a href="https://github.com/gildas-lormeau/SingleFile/wiki/Hidden-options">https://github.com/gildas-lormeau/SingleFile/wiki/Hidden-options</a>).</li>
</ul>
</li>
<li>Chromium-based browsers:
<ul dir="auto">
<li>You must enable the option "Allow access to file URLs" in the extension page
to display the infobar when viewing a saved page, and to save or to annotate
a page stored on the filesystem.</li>
<li>If the file name of a saved page looks like
"56833935-156b-4d8c-a00f-19599c6513d3.html", disable the option "Misc &gt; save
pages in background". Reinstalling the browser may also fix this issue. You
can find more info about this bug
<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=892133" rel="nofollow">here</a>.</li>
<li>Disabling the option "File name &gt; open the "Save as" dialog to confirm the
file name" will work if and only if the option "Ask where to save each file
before downloading" is disabled in chrome://settings/downloads.</li>
</ul>
</li>
<li>Firefox:
<ul dir="auto">
<li>The "File name &gt; file name conflict resolution" option does not work if set
to "prompt for a name"</li>
<li>Sometimes, SingleFile is unable to save the contents of sandboxed iframes
because of <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1411641" rel="nofollow">this bug</a>.</li>
<li>When processing a page from the filesystem, external resources (e.g. images,
stylesheets, fonts etc.) will not be embedded into the saved page. You can
find more info about this bug
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1644488" rel="nofollow">here</a>. This bug has
been closed by Mozilla as "WontFix". But there is a simple workaround
proposed
<a href="https://github.com/gildas-lormeau/SingleFile/issues/7#issuecomment-618980153" data-hovercard-type="issue" data-hovercard-url="/gildas-lormeau/SingleFile/issues/7/hovercard">here</a>.</li>
</ul>
</li>
<li>Waterfox Classic
<ul dir="auto">
<li>User interface elements displayed in the page (progress bar, logs panel)
won't be displayed unless <code>dom.webcomponents.enabled</code> is enabled in
<code>about:config</code>.</li>
<li>When opening pages saved with the option "Images &gt; group duplicate images
together" enabled, some duplicate images might not displayed. It is
recommended to disable this option.</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Troubleshooting unknown issues</h2><a id="user-content-troubleshooting-unknown-issues" aria-label="Permalink: Troubleshooting unknown issues" href="#troubleshooting-unknown-issues"></a></p>
<p dir="auto">Please follow these steps if you find an unknown issue:</p>
<ul dir="auto">
<li>Save the page in incognito.</li>
<li>If saving page in incognito did not fix the issue, reset SingleFile options.</li>
<li>If resetting options did not fix the issue, restart the browser.</li>
<li>If restarting the browser did not fix the issue, try to disable all other
extensions to see if there is a conflict.</li>
<li>If there is a conflict then try to determine against which extension(s).</li>
<li>Please report the issue with a short description on how to reproduce it here:
<a href="https://github.com/gildas-lormeau/SingleFile/issues">https://github.com/gildas-lormeau/SingleFile/issues</a>.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Command Line Interface (SingleFile CLI)</h2><a id="user-content-command-line-interface-singlefile-cli" aria-label="Permalink: Command Line Interface (SingleFile CLI)" href="#command-line-interface-singlefile-cli"></a></p>
<p dir="auto">You can save web pages to HTML from the command line interface. See here for
more info: <a href="https://github.com/gildas-lormeau/single-file-cli">https://github.com/gildas-lormeau/single-file-cli</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Integration with user scripts</h2><a id="user-content-integration-with-user-scripts" aria-label="Permalink: Integration with user scripts" href="#integration-with-user-scripts"></a></p>
<p dir="auto">You can execute a user script just before (and after) SingleFile saves a page.
For more info, see
<a href="https://github.com/gildas-lormeau/SingleFile/wiki/How-to-execute-a-user-script-before-a-page-is-saved">https://github.com/gildas-lormeau/SingleFile/wiki/How-to-execute-a-user-script-before-a-page-is-saved</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">File format comparison</h2><a id="user-content-file-format-comparison" aria-label="Permalink: File format comparison" href="#file-format-comparison"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th></th>
<th>HTML</th>
<th>Self-extracting ZIP</th>
<th>MHTML</th>
<th>Webarchive (Safari)</th>
<th>HTML+folder</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pages are saved as a single file</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td></td>
</tr>
<tr>
<td>HTML and styles are minified</td>
<td>✓</td>
<td>✓</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Unused HTML and styles are removed from files</td>
<td>✓</td>
<td>✓</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Binary resources are not encoded in base 64</td>
<td></td>
<td>✓</td>
<td></td>
<td>✓</td>
<td>✓</td>
</tr>
<tr>
<td>Files are compressed</td>
<td></td>
<td>✓</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Files can be viewed without installing any extension</td>
<td>✓</td>
<td>✓¹</td>
<td>✓²</td>
<td>✓³</td>
<td>✓</td>
</tr>
<tr>
<td>Files can be viewed without running JavaScript</td>
<td>✓</td>
<td></td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
</tr>
<tr>
<td>Files can be unzipped to extract page resources</td>
<td></td>
<td>✓</td>
<td></td>
<td></td>
<td>n/a</td>
</tr>
<tr>
<td>Files contains the text of the page (plain or formatted) which can be indexed</td>
<td>✓</td>
<td>✓⁴</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">Footnotes:</p>
<p dir="auto">¹ When using the "universal" self-extracting file format</p>
<p dir="auto">² Only in Chromium-based browsers, and Internet Explorer</p>
<p dir="auto">³ Only in Safari</p>
<p dir="auto">⁴ An option must be enabled in the extension</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Projects using/compatible with SingleFile</h2><a id="user-content-projects-usingcompatible-with-singlefile" aria-label="Permalink: Projects using/compatible with SingleFile" href="#projects-usingcompatible-with-singlefile"></a></p>
<ul dir="auto">
<li>ArchiveBox - Open-source self-hosted web archiving:
<a href="https://github.com/ArchiveBox/ArchiveBox">https://github.com/ArchiveBox/ArchiveBox</a></li>
<li>htmls-to-datasette - Tool to index HTML files into a Sqlite database:
<a href="https://github.com/pjamar/htmls-to-datasette">https://github.com/pjamar/htmls-to-datasette</a></li>
<li>linkding - Bookmark manager that you can host yourself. It's designed be to
be minimal, fast, and easy to set up using Docker:
<a href="https://github.com/sissbruecker/linkding">https://github.com/sissbruecker/linkding</a></li>
<li>obsidian-html-plugin - Plugin for reading HTML pages in Obsidian:
<a href="https://github.com/nuthrash/obsidian-html-plugin">https://github.com/nuthrash/obsidian-html-plugin</a></li>
<li>Petal Cite Web Importer - Browser extension to save PDFs and capture web pages
in Petal Cite: <a href="https://github.com/ks-collab/cite-extension">https://github.com/ks-collab/cite-extension</a></li>
<li>singlefile2trilium - Tool to save faithful copy of a web page as a Trilium
note with SingleFile: <a href="https://github.com/nil0x42/singlefile2trilium">https://github.com/nil0x42/singlefile2trilium</a></li>
<li>SingleFileMac - Integration of SingleFile in a swift application using
webkit: <a href="https://github.com/david-littlefield/SingleFileMac">https://github.com/david-littlefield/SingleFileMac</a></li>
<li>Trilium-SingleFile - An addon for Trilium Notes to easily import SingleFile
html pages: <a href="https://github.com/rauenzi/Trilium-SingleFile">https://github.com/rauenzi/Trilium-SingleFile</a></li>
<li>Trilium Simple SingleFile Renderer - A plugin to add a new Template note to
Trilium for render file created by SingleFile:
<a href="https://github.com/xnohat/trilium-simple-singlefile-renderer">https://github.com/xnohat/trilium-simple-singlefile-renderer</a></li>
<li>web document - Browser extension for saving web documents locally, allowing
you to access them offline and quickly search for webpage:
<a href="https://github.com/wvit/web-document">https://github.com/wvit/web-document</a></li>
<li>Zotero Connector - Browser extension for Zotero, a tool to help you collect,
organize, cite, and share your research sources:
<a href="https://github.com/zotero/zotero-connectors">https://github.com/zotero/zotero-connectors</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Privacy Policy</h2><a id="user-content-privacy-policy" aria-label="Permalink: Privacy Policy" href="#privacy-policy"></a></p>
<p dir="auto">See <a href="https://github.com/gildas-lormeau/SingleFile/blob/master/privacy.md">https://github.com/gildas-lormeau/SingleFile/blob/master/privacy.md</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributors</h2><a id="user-content-contributors" aria-label="Permalink: Contributors" href="#contributors"></a></p>
<ul dir="auto">
<li>Chinese translation done by yfdyh000 (<a href="https://github.com/yfdyh000">https://github.com/yfdyh000</a>), Liu8Can
(<a href="https://github.com/Liu8Can">https://github.com/Liu8Can</a>), KrasnayaPloshchad
(<a href="https://github.com/KrasnayaPloshchad">https://github.com/KrasnayaPloshchad</a>), frostblazergit
(<a href="https://github.com/frostblazergit">https://github.com/frostblazergit</a>), dnknn (<a href="https://github.com/dnknn">https://github.com/dnknn</a>),
lqzhgood (<a href="https://github.com/lqzhgood">https://github.com/lqzhgood</a>)</li>
<li>Traditional Chinese translation done by frostblazergit
(<a href="https://github.com/frostblazergit">https://github.com/frostblazergit</a>), lqzhgood (<a href="https://github.com/lqzhgood">https://github.com/lqzhgood</a>)</li>
<li>Dutch translation done by jooleer (<a href="https://github.com/jooleer">https://github.com/jooleer</a>)</li>
<li>German translation done by womotroll (<a href="https://github.com/womotroll">https://github.com/womotroll</a>), bannmann
(<a href="https://github.com/bannmann">https://github.com/bannmann</a>)</li>
<li>Italian translation done by Fastbyte01 (<a href="https://github.com/Fastbyte01">https://github.com/Fastbyte01</a>)</li>
<li>Japanese translation done by Shitennouji（四天王寺)
(<a href="https://github.com/Shitennouji">https://github.com/Shitennouji</a>)</li>
<li>Polish translation done by xesarni (<a href="https://github.com/xesarni">https://github.com/xesarni</a>)</li>
<li>Portuguese translation done by Blackspirits (<a href="https://github.com/Blackspirits">https://github.com/Blackspirits</a>)</li>
<li>Portuguese-Brazilian translation done by @mezysinc, Blackspirits
(<a href="https://github.com/Blackspirits">https://github.com/Blackspirits</a>)</li>
<li>Russian translation done by rstp14, kramola-RU
(<a href="https://github.com/kramola-RU">https://github.com/kramola-RU</a>), solokot (<a href="https://github.com/solokot">https://github.com/solokot</a>),
TotalCaesar659 (<a href="https://github.com/TotalCaesar659">https://github.com/TotalCaesar659</a>)</li>
<li>Spanish translation done by strel (<a href="https://github.com/strel">https://github.com/strel</a>)</li>
<li>Turkish translation done by hbaklan943 (<a href="https://github.com/hbaklan943">https://github.com/hbaklan943</a>)</li>
<li>Ukrainian translation done by perdolka (<a href="https://github.com/perdolka">https://github.com/perdolka</a>),
gildas-lormeau</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Code derived from third party projects</h2><a id="user-content-code-derived-from-third-party-projects" aria-label="Permalink: Code derived from third party projects" href="#code-derived-from-third-party-projects"></a></p>
<ul dir="auto">
<li>csstree: <a href="https://github.com/csstree/csstree">https://github.com/csstree/csstree</a></li>
<li>postcss-media-query-parser:
<a href="https://github.com/dryoma/postcss-media-query-parser">https://github.com/dryoma/postcss-media-query-parser</a></li>
<li>postcss-selector-parser: <a href="https://github.com/postcss/postcss-selector-parser">https://github.com/postcss/postcss-selector-parser</a></li>
<li>UglifyCSS: <a href="https://github.com/fmarcia/UglifyCSS">https://github.com/fmarcia/UglifyCSS</a></li>
<li>parse-srcset: <a href="https://github.com/albell/parse-srcset">https://github.com/albell/parse-srcset</a></li>
<li>parse-css-font: <a href="https://github.com/jedmao/parse-css-font">https://github.com/jedmao/parse-css-font</a></li>
<li>Readability: <a href="https://github.com/mozilla/readability">https://github.com/mozilla/readability</a></li>
<li>whatwg-mimetype: <a href="https://github.com/jsdom/whatwg-mimetype">https://github.com/jsdom/whatwg-mimetype</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Icons</h2><a id="user-content-icons" aria-label="Permalink: Icons" href="#icons"></a></p>
<ul dir="auto">
<li>Icon made by <a href="https://www.flaticon.com/authors/kiranshastry" rel="nofollow">Kiranshastry</a>
from <a href="https://www.flaticon.com/" rel="nofollow">Flaticon</a> is licensed by
<a href="http://creativecommons.org/licenses/by/3.0/" rel="nofollow">CC 3.0 BY</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">SingleFile is licensed under AGPL. Code derived from third-party projects is
licensed under MIT. Please contact me at gildas.lormeau &lt;at&gt; gmail.com if
you are interested in licensing the SingleFile code for a commercial service or
product.</p>
<p dir="auto">Suggestions are welcome :)</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Dividing unsigned 8-bit numbers (146 pts)]]></title>
            <link>http://0x80.pl/notesen/2024-12-21-uint8-division.html</link>
            <guid>42481612</guid>
            <pubDate>Sat, 21 Dec 2024 19:25:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://0x80.pl/notesen/2024-12-21-uint8-division.html">http://0x80.pl/notesen/2024-12-21-uint8-division.html</a>, See on <a href="https://news.ycombinator.com/item?id=42481612">Hacker News</a></p>
Couldn't get http://0x80.pl/notesen/2024-12-21-uint8-division.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Demo of my web game about social persuasion (114 pts)]]></title>
            <link>https://talktomehuman.com/demo</link>
            <guid>42481249</guid>
            <pubDate>Sat, 21 Dec 2024 18:22:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://talktomehuman.com/demo">https://talktomehuman.com/demo</a>, See on <a href="https://news.ycombinator.com/item?id=42481249">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[City Roads: A tool to draw all roads in a city at once (382 pts)]]></title>
            <link>https://anvaka.github.io/city-roads/</link>
            <guid>42481206</guid>
            <pubDate>Sat, 21 Dec 2024 18:16:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://anvaka.github.io/city-roads/">https://anvaka.github.io/city-roads/</a>, See on <a href="https://news.ycombinator.com/item?id=42481206">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
    </channel>
</rss>