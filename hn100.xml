<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 11 May 2024 23:00:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Immersive Math (318 pts)]]></title>
            <link>http://immersivemath.com/ila/index.html</link>
            <guid>40329388</guid>
            <pubDate>Sat, 11 May 2024 17:16:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://immersivemath.com/ila/index.html">http://immersivemath.com/ila/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=40329388">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <h4><a href="http://immersivemath.com/ila/ch00_preface/preface.html">Preface</a></h4>
          <p>A few words about this book. </p>

          <h4><a href="http://immersivemath.com/ila/ch01_introduction/ch01.html">Chapter 1: Introduction</a></h4>

          <p>How to navigate, notation, and a recap of some math that we think you already know. </p>

          <h4><a href="http://immersivemath.com/ila/ch02_vectors/ch02.html">Chapter 2: Vectors</a></h4>
          <p>The concept of a vector is introduced, and we learn how to add and subtract vectors, and more. </p>

          <h4><a href="http://immersivemath.com/ila/ch03_dotproduct/ch03.html">Chapter 3: The Dot Product</a></h4>
          <p>A powerful tool that takes two vectors and produces a scalar.</p>

          <h4><a href="http://immersivemath.com/ila/ch04_vectorproduct/ch04.html">Chapter 4: The Vector Product</a></h4>
          <p>In three-dimensional spaces you can produce a vector from two other vectors using this tool.</p>

          <h4><a href="http://immersivemath.com/ila/ch05_gausselim/ch05.html">Chapter 5: Gaussian Elimination</a></h4>
          <p>A way to solve systems of linear equations.</p>
        </div><div>
          <h4><a href="http://immersivemath.com/ila/ch06_matrices/ch06.html">Chapter 6: The Matrix</a></h4>
          <p>Enter the matrix.</p>

          <h4><a href="http://immersivemath.com/ila/ch07_determinants/ch07.html">Chapter 7: Determinants</a></h4>
          <p>A fundamental property of square matrices.</p>

          <h4><a href="http://immersivemath.com/ila/ch08_rank/ch08.html">Chapter 8: Rank</a></h4>
          <p>Discover the behaviour of matrices.</p>

          <h4><a href="http://immersivemath.com/ila/ch09_linear_mappings/ch09.html">Chapter 9: Linear Mappings</a></h4>
          <p>Learn to harness the power of linearity...</p>

          <h4><a href="http://immersivemath.com/ila/ch10_eigen/ch10.html"> Chapter 10: Eigenvalues and Eigenvectors</a></h4>
          <p>This chapter has a value in itself.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PeaZip: Open-source file compression and encryption software (177 pts)]]></title>
            <link>https://peazip.github.io/</link>
            <guid>40327631</guid>
            <pubDate>Sat, 11 May 2024 12:19:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://peazip.github.io/">https://peazip.github.io/</a>, See on <a href="https://news.ycombinator.com/item?id=40327631">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <tbody>
          <tr>
            <td>
            <ul>
            </ul>
            <ul>
              <li>
                <p><a href="https://peazip.github.io/index.html#open_extract_rar_tar_zip_files">OPEN
SOURCE FILE COMPRESSION AND ENCRYPTION SOFTWARE</a></p>
              </li>
              <li>
                <p><a href="https://peazip.github.io/index.html#open_source_file_compression_and_encryption_software">PEAZIP
FREE ARCHIVER DOWNLOAD NOTES</a></p>
              </li>
            </ul>
            
            <a href="https://peazip.github.io/index.html#free_file_archiver_software" name="open_extract_rar_tar_zip_files"></a><br>
            <h2><a href="#free_file_archiver_software"><big><big><big>Open
Source file compression and
encryption
software</big></big></big></a></h2>
            <h3><big><span>What is
PeaZip
free
file archiver utility</span></big><br>
            </h3>
            <p>PeaZip is a free file
archiver
utility, similar to WinRar, WinZip, and 7-Zip (or File Roller, and Ark
on Linux), based on Open Source technologies of <a href="https://peazip.github.io/7zip-files-utility.html">7-Zip / p7zip archiver</a>, <a href="https://peazip.github.io/zstandard-compression-utility.html">Facebook Zstandard compressor</a>,
FreeArc, <a href="https://peazip.github.io/brotli-compression-utility.html">Google
Brotli compressor</a>, <a href="https://peazip.github.io/paq-files-compression-utility.html">PAQ
family of compressors</a>, <a href="https://peazip.github.io/pea-archiving-utility.html">PEA
(archiving and encryption) project</a>, and other Free Software file
compression tools.</p>
            <br>
            
            
            <p><big><span>What is different
in PeaZip?</span></big><br>
            </p>
            <p>The project started aiming to provide features often
overlooked in applications of the same type.<br>
            </p>
            <ul>
              <li><span>Be CLI-friendly</span>:
bridge the gap between GUI and
CLI applications to offer the best of the two worlds, blending the
archive manager into a <span>scripting
engine</span> to automate compression / archiving / backup /
extraction... <span></span>tasks.<br>
              </li>
            </ul>
            <p>From
"Console"
tab in archiving and extraction screens, the tasks defined in the GUI
can be exported as CLI scripts, i.e. for reuse, syntax learning or
inspection purpose, of for refining the tasks beyond the capabilities
of the GUI.</p>
            <ul>
              <li><span>Offer two factor
authentication</span> (password + keyfile)
for all formats supporting encryption, to increase security against
guessing and dictionary based attacks on weak passwords.</li>
            </ul>
            <ul>
              <li><span>Provide a GUI for
less commonly supported compression
formats</span> - which comes from very interesting research threads in
compression field, like the very powerful compressor zpaq or very
fast ones as brotli, and zstandard - and provide a platform-agnostic
GUI for 7z/p7zip on non-Windows systems.</li>
            </ul>
            <ul>
              <li><span>Provide multiple
file management features</span> each of
whom meeting the needs of different use cases, like verification of a
wide array of checksum and hash functions, find duplicates, <span>convert archives</span>, <span>search in
archives</span>, bookmarks, <span>tabbed
browsing</span>, etc.</li>
            </ul>
            <ul>
              <li><span>Deploy all the above
in a tool which is natively portable</span>, can
be used from removable devices or shared on a network / cloud, without
installation, and offers the same UX on all operating systems and
desktop
environments.</li>
            </ul>
            <br>
            <h2><a href="https://peazip.github.io/screenshots-peazip-1.html"><img src="https://peazip.github.io/peazip.png" alt="free file archiver utility" title="PeaZip free archiver utility"></a></h2>
            <p><span>PeaZip screenshot running on Windows in
light mode, default theme. </span><br>
            <span>Click the image to see
screenshots on different Operating Systems,
alternative themes and dark mode.<span></span></span><br>
            <span><span></span></span></p>
            <span><span></span></span> <h3><big><span>Main features of
PeaZip free archiver</span></big><br>
            </h3>
            <ul>
              <li><span>Open Source</span>,
released under LGPLv3 license which allows to easily integrate it in
any licensing environment</li>
            </ul>
            <ul>
              <li><span>Cross-platform</span>
and cross-architecture, <span>same full
featured GUI application on Linux, macOS, and Windows</span>, providing
full featured file manager and archive manager on all platforms, also <span>available as portable application</span></li>
            </ul>
            <ul>
              <li>Supports over 200 archive
formats<span>, ranging from very <span>powerful compressor</span>s like 7Z and
ZPAQ, to <span>extremely fast compressors</span>
like Brotli and Zstandard, with option to easily <span>convert archives</span></span></li>
            </ul>
            <ul>
              <li><span>Supports strong
encryption</span>, optionally <span>two
factor authentication</span> and <span>authenticated
encryption</span></li>
            </ul>
            <ul>
              <li>Can easily <span>export
tasks defined in the GUI as command line scripts</span></li>
            </ul>
            <br>
            <big><span>Safety of Open
Source
software</span></big><p>
            
PeaZip is Free Software, employing technologies from
state of art 7-Zip,
p7zip, Brotli, FreeArc, PAQ, PEA, Zstandard open source file
compression and archiving projects.</p><p>
            
This software is released under Open
Source GNU LGPLv3
copyleft license: the application is free for
any use (private and professional). </p><p>
            
All PeaZip packages are safe downloads, do not contain
advertising or harmful software, and are identified with
cryptographically secure SHA256 hash published on official download
site.</p>
            <big>Advantages of
Portable packages</big><p>
            
Portable packages, available for Linux, macOS, and
Windows
operating systems as alternative to installable packages, does not need
installation: simply extract and use the application for maximum ease
of deployment.</p><h4><big>PeaZip free archiver in
details</big></h4>
            <br>
Cross-platform (Linux, macOS, Windows), full-featured
but user-friendly
alternative to WinRar,
WinZip and similar general purpose archive manager applications, <a href="https://peazip.github.io/how-to-open-rar-tar-zip-files.html">open</a>
and <a href="https://peazip.github.io/how-to-extract-rar-zip-archives.html">extract</a>
200+ archive formats: 001, <a href="https://peazip.github.io/7z-file-format.html">7Z</a>, <a href="https://peazip.github.io/ace-files-utility.html">ACE</a> (*), <a href="https://peazip.github.io/arc-files-utility.html">ARC</a>, ARJ, <a href="https://peazip.github.io/brotli-compressed-file-format.html">BR</a>, <a href="https://peazip.github.io/bzip2-file.html">BZ2</a>, <a href="https://peazip.github.io/cab-files-utility.html">CAB</a>,
DMG, GZ, <a href="https://peazip.github.io/iso-utility.html">ISO</a>,
LHA, PAQ, <a href="https://peazip.github.io/pea-file-format.html">PEA</a>, <a href="https://peazip.github.io/what-is-rar-file.html">RAR</a> (**), <a href="https://peazip.github.io/tar-file-format.html">TAR</a>,
UDF, <a href="https://peazip.github.io/wim-files.html">WIM</a>, XZ, <a href="https://peazip.github.io/zip-file-format.html">ZIP</a>, <a href="https://peazip.github.io/zipx-file-format.html">ZIPX</a>,
            <a href="https://peazip.github.io/zst-compressed-file-format.html">ZST</a>. View
full <a href="https://peazip.github.io/peazip-free-archiver.html">list of supported archive
file formats</a>
for archiving / compression, and for extraction. <p>
            
As archive manager utility, PeaZip provides
fast,
high compression ratio multi-format archiving to 7Z, ARC, Brotli, BZ2,
GZ,
PEA,
TAR, WIM, Zstandard and ZIP archives (write supported formats), and
works as
opener
/ extractor tool
for
200+ archive types including ACE, ISO, RAR, ZIPX files, including
ability to manage encrypted archives for supported formats. </p><p>
            
This software deploys a powerful and complete file
manager for editing, viewing, browsing and searching archive files,
featuring a
wide set of data security functions: <a href="https://peazip.github.io/encrypt-files.html">strong
encryption</a> (AES, Twofish, Serpent),
encrypted password manager, optional two-factor authentication
(encryption / decryption with password and keyfile), <a href="https://peazip.github.io/secure-delete.html">secure
delete</a><span></span>, and <a href="https://peazip.github.io/verify-checksum-hash.html">file
hashing</a> tools, easily export tasks defined in the GUI to <a href="https://peazip.github.io/peazip-command-line.html">create command line scripts</a>.</p><p>
            
For more information about archive creation and
extraction performances
compared with other popular file archivers tools, read file compression
and decompression <a href="https://peazip.github.io/peazip-compression-benchmark.html">PeaZip
benchmarks</a>
page.</p><p>
            
(*) To use the application to open and extract <span>ACE </span>files
it
is needed to install WinACE's UNACE plugin from PLUGINS page, otherwise
the program will lack the (proprietary) component to read .ace format.<br>
(**) <a href="https://peazip.github.io/free-rar-create.html">RAR files creation</a> with PeaZip
is possible if WinRar
is installed on the system (autonomous support to rar compression is
not possible due to rar licensing limitations). Please note <span>RAR </span>and <span>RAR5 </span>format opening / extraction is
supported out of the box: an optional plugin based on official RarLab's
unrar code is provided as alternative .rar extraction engine on PLUGINS
page, if preferred by user over 7-Zip / p7zip's Open Source unrar
implementation.</p>
            <h3><big><big><big><a href="#free_file_archiver_software">PeaZip
free archiver download notes</a></big></big></big></h3>
            <big>Download repositories</big><p>
            
Official repositories of PeaZip are available on <a target="_blank" href="https://github.com/peazip/PeaZip/releases/">GitHub <img title="PeaZip on GitHub" alt="open source downloads" src="https://peazip.github.io/extract-zip/github.png"></a>,
and <a target="_blank" href="https://sourceforge.net/projects/peazip/">Sourceforge&nbsp;<img alt="open source software repository" title="PeaZip on SourceForge" src="https://peazip.github.io/extract-zip/sourceforge.png"></a></p><p>
            
Legacy releases can be downloaded from aforementioned
repositories; each
release contains
program's
packages for different supported operating systems, documentation, and
sources.</p><big><span>Change log and
release notes</span></big><p>
            
See complete <a href="https://peazip.github.io/changelog.html">change
log and release notes</a> for list of updates and new features of the
application, and for <span>SHA256 hash
values of each package </span> published in the current release.</p><big>TOS and Privacy</big><p>
            
PeaZip is Open Source software, released under GNU LGPLv3 license,
documentation is released under GNU FDL license.<br>
Neither PeaZip software, nor PeaZip's website collects user data.<br>
See complete <a href="https://peazip.github.io/peazip-tos-privacy.html">TOS and Privacy page</a>.
            </p><big>Verify integrity of
downloaded
packages</big><p>
            
PeaZip free archiver packages are currently not signed,
but SHA256 is a
cryptographically strong hash, and it is served here through a secure
TLS/SSL website, so it can be used for check integrity and autenticity
of
the packages you are downloading. Download pages of Win64 and Win32
installers also shows SHA256
hash value of each packages for increased security of users. </p><p>
            
Please note that websites as peazip.com, as well as some
Microsoft Store publisher listing alleged PeaZip packages, are in no
way involved in PeaZip project: it is not recommended to download
PeaZip from sources outside the aforementioned official project's
repositories, and it is absolutley not recommended to install PeaZip
packages not matching the officially published hash values.</p><ul>
            </ul>
            <p>Synopsis: All downloads page
of
PeaZip free archiver utility, freeware file compression and encryption
software. Download Open Source, cross platform file archiver software
for Linux, macOS, and Windows. Open, extract RAR TAR ZIP files and many
other
archive types,
200+ formats supported.</p>
            <p>Topics: PeaZip free archiver
all downloads, Linux, macOS, Windows, sources<br>
            </p>
            <div><p>PeaZip &gt; Free file
archiver utility, open, extract RAR TAR ZIP files | All downloads</p></div>
            <table>
              <tbody>
                <tr>
                  <td><small><span>RECOMMENDED PAGES</span> </small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/free-rar.html">FREE RAR UTILITY</a><br>
                  </small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/zip-files-utility.html">FREE ZIP FILES SOFTWARE</a><br>
                  </small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/tar-windows.html">EXTRACT TAR FILES</a></small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/extract-encrypted-files.html">OPEN ENCRYPTED ARCHIVES</a></small></td>
                </tr>
              </tbody>
            </table>
            <small><small><small>&nbsp;</small></small></small><br>
            <table>
              <tbody>
                <tr>
                  <td><small><a href="https://peazip.github.io/peazip-macos.html">MACOS ARCHIVE MANAGER</a><br>
                  </small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/peazip-linux.html">LINUX ARCHIVE MANAGER</a></small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/encrypt-files.html">FREE ENCRYPTION SOFTWARE</a></small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/peazip-portable.html">PORTABLE FILE ARCHIVER UTILITY</a></small></td>
                </tr>
              </tbody>
            </table>
            
            </td>
          </tr>
        </tbody>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Wag, MFA and Enrollment for WireGuard (112 pts)]]></title>
            <link>https://github.com/NHAS/wag</link>
            <guid>40326615</guid>
            <pubDate>Sat, 11 May 2024 07:31:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/NHAS/wag">https://github.com/NHAS/wag</a>, See on <a href="https://news.ycombinator.com/item?id=40326615">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Wag</h2><a id="user-content-wag" aria-label="Permalink: Wag" href="#wag"></a></p>
<p dir="auto">Wag adds MFA, route restriction and device enrolment to wireguard.</p>
<p dir="auto">Key Features:</p>
<ul dir="auto">
<li>Define routes which require MFA authorisation, or public always accessible routes</li>
<li>Easy API for registering new clients</li>
<li>High Availability</li>
<li>Multiple MFA options, including webauthn, oidc and more</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/6820641/326241365-3a2b2dd9-15af-40c4-bb81-3e479d48425a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU0NjUxMDUsIm5iZiI6MTcxNTQ2NDgwNSwicGF0aCI6Ii82ODIwNjQxLzMyNjI0MTM2NS0zYTJiMmRkOS0xNWFmLTQwYzQtYmI4MS0zZTQ3OWQ0ODQyNWEucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDUxMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA1MTFUMjIwMDA1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YTAxM2JkZTc3M2JjOGY0OTc4YjVmMzk4YmZiMGI2NTk5NmQyZjAyYjAxYjkyMjgxNWRiZjMwOGIwMjRiNGZkYiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.7FgIvurrZ8p5PYaCcZWm4AkeSqh8F5K-nR7xenokjHc"><img src="https://private-user-images.githubusercontent.com/6820641/326241365-3a2b2dd9-15af-40c4-bb81-3e479d48425a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU0NjUxMDUsIm5iZiI6MTcxNTQ2NDgwNSwicGF0aCI6Ii82ODIwNjQxLzMyNjI0MTM2NS0zYTJiMmRkOS0xNWFmLTQwYzQtYmI4MS0zZTQ3OWQ0ODQyNWEucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDUxMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA1MTFUMjIwMDA1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YTAxM2JkZTc3M2JjOGY0OTc4YjVmMzk4YmZiMGI2NTk5NmQyZjAyYjAxYjkyMjgxNWRiZjMwOGIwMjRiNGZkYiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.7FgIvurrZ8p5PYaCcZWm4AkeSqh8F5K-nR7xenokjHc" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/6820641/326241401-89976794-10af-493a-b8c4-3d02f50417ce.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU0NjUxMDUsIm5iZiI6MTcxNTQ2NDgwNSwicGF0aCI6Ii82ODIwNjQxLzMyNjI0MTQwMS04OTk3Njc5NC0xMGFmLTQ5M2EtYjhjNC0zZDAyZjUwNDE3Y2UucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDUxMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA1MTFUMjIwMDA1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODI4ZWE0MWU2ZTM1YmZkMGI4NTM2NWNjYmY0YzAzZmNiMTUxZjVlN2U2ZTlkNmQ0OTQ4NDRlYzI2MDNiOTAzZCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.nU5jQFWEqNYHdRiudXZvnae4S0g3S6XCsVFBt6ajYZw"><img src="https://private-user-images.githubusercontent.com/6820641/326241401-89976794-10af-493a-b8c4-3d02f50417ce.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU0NjUxMDUsIm5iZiI6MTcxNTQ2NDgwNSwicGF0aCI6Ii82ODIwNjQxLzMyNjI0MTQwMS04OTk3Njc5NC0xMGFmLTQ5M2EtYjhjNC0zZDAyZjUwNDE3Y2UucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDUxMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA1MTFUMjIwMDA1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODI4ZWE0MWU2ZTM1YmZkMGI4NTM2NWNjYmY0YzAzZmNiMTUxZjVlN2U2ZTlkNmQ0OTQ4NDRlYzI2MDNiOTAzZCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.nU5jQFWEqNYHdRiudXZvnae4S0g3S6XCsVFBt6ajYZw" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/6820641/326241420-83cae3c0-bb19-4aa0-846f-c045387a0910.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU0NjUxMDUsIm5iZiI6MTcxNTQ2NDgwNSwicGF0aCI6Ii82ODIwNjQxLzMyNjI0MTQyMC04M2NhZTNjMC1iYjE5LTRhYTAtODQ2Zi1jMDQ1Mzg3YTA5MTAucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDUxMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA1MTFUMjIwMDA1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NDdhZjQyNjRkOTI3NDk3Njk1NWQzNTAxODYyZmNhOWZhZTU2ODUxMWI1ODU5NmI3MmJkMzliMmUyZDIzNmRlNyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.nCtJjUzgBCcoC327UbGD5A8llQ7xWpRaWaeGcwrlhHY"><img src="https://private-user-images.githubusercontent.com/6820641/326241420-83cae3c0-bb19-4aa0-846f-c045387a0910.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU0NjUxMDUsIm5iZiI6MTcxNTQ2NDgwNSwicGF0aCI6Ii82ODIwNjQxLzMyNjI0MTQyMC04M2NhZTNjMC1iYjE5LTRhYTAtODQ2Zi1jMDQ1Mzg3YTA5MTAucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDUxMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA1MTFUMjIwMDA1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NDdhZjQyNjRkOTI3NDk3Njk1NWQzNTAxODYyZmNhOWZhZTU2ODUxMWI1ODU5NmI3MmJkMzliMmUyZDIzNmRlNyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.nCtJjUzgBCcoC327UbGD5A8llQ7xWpRaWaeGcwrlhHY" alt="image"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/6820641/326241440-ff237473-d522-451e-8529-92bd111d4b96.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU0NjUxMDUsIm5iZiI6MTcxNTQ2NDgwNSwicGF0aCI6Ii82ODIwNjQxLzMyNjI0MTQ0MC1mZjIzNzQ3My1kNTIyLTQ1MWUtODUyOS05MmJkMTExZDRiOTYucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDUxMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA1MTFUMjIwMDA1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YmNkZDQyOTk2YWViOWNlOTQ0MDE1NDlmZWU1YjNlOWMwZTA1N2QxZTJjNThmYjZiNWQ2ZTBjZjAxZDI0ZmE3MiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.Dle0D3ai-lhnSMfHcKwBfh7aKgeaGnmlp1HUsiJ9ZhM"><img src="https://private-user-images.githubusercontent.com/6820641/326241440-ff237473-d522-451e-8529-92bd111d4b96.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU0NjUxMDUsIm5iZiI6MTcxNTQ2NDgwNSwicGF0aCI6Ii82ODIwNjQxLzMyNjI0MTQ0MC1mZjIzNzQ3My1kNTIyLTQ1MWUtODUyOS05MmJkMTExZDRiOTYucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDUxMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA1MTFUMjIwMDA1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YmNkZDQyOTk2YWViOWNlOTQ0MDE1NDlmZWU1YjNlOWMwZTA1N2QxZTJjNThmYjZiNWQ2ZTBjZjAxZDI0ZmE3MiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.Dle0D3ai-lhnSMfHcKwBfh7aKgeaGnmlp1HUsiJ9ZhM" alt="image"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Sponsorship</h2><a id="user-content-sponsorship" aria-label="Permalink: Sponsorship" href="#sponsorship"></a></p>
<p dir="auto">This work was very kindly supported by <a href="https://www.aurainfosec.com/" rel="nofollow">Aura Information Security</a>.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/6820641/181147262-c7baa5a5-36b2-4153-b01f-5064226ec56e.png"><img src="https://user-images.githubusercontent.com/6820641/181147262-c7baa5a5-36b2-4153-b01f-5064226ec56e.png" alt="image"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Requirements</h2><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<p dir="auto"><code>iptables</code> and <code>libpam</code> must be installed.<br>
Wag must be run as root, to manage <code>iptables</code> and the <code>wireguard</code> device.</p>
<p dir="auto">Forwarding must be enabled in <code>sysctl</code>.</p>
<div data-snippet-clipboard-copy-content="sysctl -w net.ipv4.ip_forward=1"><pre><code>sysctl -w net.ipv4.ip_forward=1
</code></pre></div>
<p dir="auto">Wag does not need <code>wg-quick</code> or other equalivent as long as the kernel supports wireguard.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Setup instructions</h2><a id="user-content-setup-instructions" aria-label="Permalink: Setup instructions" href="#setup-instructions"></a></p>
<p dir="auto">Both options require a kernel newer than 5.9+</p>
<p dir="auto">Binary release (requires glibc 2.31+):</p>
<div data-snippet-clipboard-copy-content="curl -L $(curl -s https://api.github.com/repos/NHAS/wag/releases/latest | jq -M -r '.assets[0].browser_download_url') -o wag
sudo ./wag gen-config

sudo ./wag start -config <generated_config_name>"><pre><code>curl -L $(curl -s https://api.github.com/repos/NHAS/wag/releases/latest | jq -M -r '.assets[0].browser_download_url') -o wag
sudo ./wag gen-config

sudo ./wag start -config &lt;generated_config_name&gt;
</code></pre></div>
<p dir="auto">From source (will require <code>go1.19</code>, <code>npm</code>, <code>gulp</code>, <code>clang</code>, <code>llvm-strip</code>, <code>libbpf</code>):</p>
<div data-snippet-clipboard-copy-content="git clone git@github.com:NHAS/wag.git
cd wag
make

cp example_config.json config.json

sudo ./wag start"><pre><code>git clone git@github.com:NHAS/wag.git
cd wag
make

cp example_config.json config.json

sudo ./wag start
</code></pre></div>
<p dir="auto">If running behind a reverse proxy, <code>X-Forwarded-For</code> must be set.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Management</h2><a id="user-content-management" aria-label="Permalink: Management" href="#management"></a></p>
<p dir="auto">The root user is able to manage the wag server with the following command:</p>
<div data-snippet-clipboard-copy-content="wag subcommand [-options]"><pre><code>wag subcommand [-options]
</code></pre></div>
<p dir="auto">Supported commands: <code>start</code>, <code>cleanup</code>, <code>reload</code>, <code>version</code>, <code>firewall</code>, <code>registration</code>, <code>devices</code>, <code>users</code>, <code>webadmin</code>, <code>gen-config</code></p>
<p dir="auto"><code>start</code>: starts the wag server</p>
<div data-snippet-clipboard-copy-content="Usage of start:
  Start wag server (does not daemonise)
  -join string
        Cluster join token
  -config string
        Configuration file location (default &quot;./config.json&quot;)"><pre><code>Usage of start:
  Start wag server (does not daemonise)
  -join string
        Cluster join token
  -config string
        Configuration file location (default "./config.json")
</code></pre></div>
<p dir="auto"><code>cleanup</code>: Will remove all firewall forwards, and shutdown the wireguard device</p>
<p dir="auto"><code>reload</code>: Reloads ACLs from configuration</p>
<p dir="auto"><code>version</code>: Display the version of wag</p>
<p dir="auto"><code>firewall</code>: Get firewall rules</p>
<div data-snippet-clipboard-copy-content="Usage of firewall:
  -list
        List firewall rules
  -socket string
        Wag socket to act on (default &quot;/tmp/wag.sock&quot;)
"><pre><code>Usage of firewall:
  -list
        List firewall rules
  -socket string
        Wag socket to act on (default "/tmp/wag.sock")

</code></pre></div>
<p dir="auto"><code>registration</code>:  Deals with creating, deleting and listing the registration tokens</p>
<div data-snippet-clipboard-copy-content="Usage of registration:
  -add
        Create a new enrolment token
  -del
        Delete existing enrolment token
  -group value
        Manually set user group (can supply multiple -group, or use -groups for , delimited group list, useful for OIDC)
  -groups string
        Set user groups manually, ',' delimited list of groups, useful for OIDC
  -list
        List tokens
  -overwrite string
        Add registration token for an existing user device, will overwrite wireguard public key (but not 2FA)
  -socket string
        Wag socket to act on (default &quot;/tmp/wag.sock&quot;)
  -token string
        Manually set registration token (Optional)
  -username string
        User to add device to"><pre><code>Usage of registration:
  -add
        Create a new enrolment token
  -del
        Delete existing enrolment token
  -group value
        Manually set user group (can supply multiple -group, or use -groups for , delimited group list, useful for OIDC)
  -groups string
        Set user groups manually, ',' delimited list of groups, useful for OIDC
  -list
        List tokens
  -overwrite string
        Add registration token for an existing user device, will overwrite wireguard public key (but not 2FA)
  -socket string
        Wag socket to act on (default "/tmp/wag.sock")
  -token string
        Manually set registration token (Optional)
  -username string
        User to add device to
</code></pre></div>
<p dir="auto"><code>devices</code>: Manages devices</p>
<div data-snippet-clipboard-copy-content="Usage of devices:
  -address string
        Address of device
  -del
        Remove device and block wireguard access
  -list
        List wireguard devices
  -lock
        Lock device access to mfa routes
  -mfa_sessions
        Get list of devices with active authorised sessions
  -socket string
        Wag control socket to act on (default &quot;/tmp/wag.sock&quot;)
  -unlock
        Unlock device
  -username string
        Owner of device (indicates that command acts on all devices owned by user)"><pre><code>Usage of devices:
  -address string
        Address of device
  -del
        Remove device and block wireguard access
  -list
        List wireguard devices
  -lock
        Lock device access to mfa routes
  -mfa_sessions
        Get list of devices with active authorised sessions
  -socket string
        Wag control socket to act on (default "/tmp/wag.sock")
  -unlock
        Unlock device
  -username string
        Owner of device (indicates that command acts on all devices owned by user)
</code></pre></div>
<p dir="auto"><code>users</code>: Manages users MFA and can delete all users devices</p>
<div data-snippet-clipboard-copy-content="Usage of users:
  -del
        Delete user and all associated devices
  -list
        List users, if '-username' supply will filter by user
  -lockaccount
        Lock account disable authention from any device, deauthenticates user active sessions
  -reset-mfa
        Reset MFA details, invalids all session and set MFA to be shown
  -socket string
        Wag socket location, (default &quot;/tmp/wag.sock&quot;)
  -unlockaccount
        Unlock a locked account, does not unlock specific device locks (use device -unlock -username <> for that)
  -username string
        Username to act upon"><pre><code>Usage of users:
  -del
        Delete user and all associated devices
  -list
        List users, if '-username' supply will filter by user
  -lockaccount
        Lock account disable authention from any device, deauthenticates user active sessions
  -reset-mfa
        Reset MFA details, invalids all session and set MFA to be shown
  -socket string
        Wag socket location, (default "/tmp/wag.sock")
  -unlockaccount
        Unlock a locked account, does not unlock specific device locks (use device -unlock -username &lt;&gt; for that)
  -username string
        Username to act upon
</code></pre></div>
<p dir="auto"><code>webadmin</code>: Manages the administrative users for the web UI</p>
<div data-snippet-clipboard-copy-content="Usage of webadmin:
  -add
        Add web administrator user (requires -password)
  -del
        Delete admin user
  -list
        List web administration users, if '-username' supply will filter by user
  -lockaccount
        Lock admin account disable login for this web administrator user
  -password string
        Username to act upon
  -socket string
        Wag instance control socket (default &quot;/tmp/wag.sock&quot;)
  -unlockaccount
        Unlock a web administrator account
  -username string
        Admin Username to act upon"><pre><code>Usage of webadmin:
  -add
        Add web administrator user (requires -password)
  -del
        Delete admin user
  -list
        List web administration users, if '-username' supply will filter by user
  -lockaccount
        Lock admin account disable login for this web administrator user
  -password string
        Username to act upon
  -socket string
        Wag instance control socket (default "/tmp/wag.sock")
  -unlockaccount
        Unlock a web administrator account
  -username string
        Admin Username to act upon
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">User guide</h2><a id="user-content-user-guide" aria-label="Permalink: User guide" href="#user-guide"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installing wag</h2><a id="user-content-installing-wag" aria-label="Permalink: Installing wag" href="#installing-wag"></a></p>
<ol dir="auto">
<li>Copy <code>wag</code>, <code>config.json</code> to <code>/opt/wag</code></li>
<li>Generate a wireguard private key with <code>wg genkey</code> set <code>PrivateKey</code> in the example config to it</li>
<li>Copy (or link) <code>wag.service</code> to <code>/etc/systemd/system/</code> and start/enable the service</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Creating new registration tokens</h2><a id="user-content-creating-new-registration-tokens" aria-label="Permalink: Creating new registration tokens" href="#creating-new-registration-tokens"></a></p>
<p dir="auto">First generate a token.</p>
<div data-snippet-clipboard-copy-content="# ./wag registration -add -username tester
token,username
e83253fd9962c68f73aa5088604f3f425d58a963bfb5c0889cca54d63a34b2e3,tester"><pre><code># ./wag registration -add -username tester
token,username
e83253fd9962c68f73aa5088604f3f425d58a963bfb5c0889cca54d63a34b2e3,tester
</code></pre></div>
<p dir="auto">Then curl said token.</p>
<div data-snippet-clipboard-copy-content="curl http://public.server.address:8080/register_device?key=e83253fd9962c68f73aa5088604f3f425d58a963bfb5c0889cca54d63a34b2e3"><pre><code>curl http://public.server.address:8080/register_device?key=e83253fd9962c68f73aa5088604f3f425d58a963bfb5c0889cca54d63a34b2e3
</code></pre></div>
<p dir="auto">The service will return a fully templated response:</p>
<div data-snippet-clipboard-copy-content="[Interface]
PrivateKey = <omitted>
Address = 192.168.1.1

[Peer]
Endpoint =  public.server.address:51820
PublicKey = pnvl40WiRt++0NucEGexlpfwWA8QzBYg2+8ZWZJvejA=
AllowedIPs = 10.7.7.7/32, 192.168.1.1/32, 192.168.3.4/32, 192.168.3.5/32
PersistentKeepAlive = 10"><pre><code>[Interface]
PrivateKey = &lt;omitted&gt;
Address = 192.168.1.1

[Peer]
Endpoint =  public.server.address:51820
PublicKey = pnvl40WiRt++0NucEGexlpfwWA8QzBYg2+8ZWZJvejA=
AllowedIPs = 10.7.7.7/32, 192.168.1.1/32, 192.168.3.4/32, 192.168.3.5/32
PersistentKeepAlive = 10
</code></pre></div>
<p dir="auto">Which can then be written to a config file.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Entering MFA</h2><a id="user-content-entering-mfa" aria-label="Permalink: Entering MFA" href="#entering-mfa"></a></p>
<p dir="auto">To authenticate the user should browse to the servers vpn address, in the example, case <code>192.168.1.1:8080</code>, where they will be prompted for their 2fa code.<br>
The configuration file specifies how long a session can live for, before expiring.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Signing in to the Management console</h2><a id="user-content-signing-in-to-the-management-console" aria-label="Permalink: Signing in to the Management console" href="#signing-in-to-the-management-console"></a></p>
<p dir="auto">Make sure that you have <code>ManagementUI.Enabled</code> set as <code>true</code>, then do the following from the console:</p>
<div data-snippet-clipboard-copy-content="sudo ./wag webadmin -add -username <your_username> -password <your-password-here>"><pre><code>sudo ./wag webadmin -add -username &lt;your_username&gt; -password &lt;your-password-here&gt;
</code></pre></div>
<p dir="auto">Then browse to your management listening address and enter your credentials.</p>
<p dir="auto">The web interface itself cannot add administrative users.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Configuration file reference</h2><a id="user-content-configuration-file-reference" aria-label="Permalink: Configuration file reference" href="#configuration-file-reference"></a></p>
<p dir="auto"><code>NumberProxies</code>: The number of trusted reverse proxies before the client, makes wag respect the <code>X-Forward-For</code> directive and parses the client IP from it correctly
<code>HelpMail</code>: The email address that is shown on the prompt page<br>
<code>Lockout</code>: Number of times a person can attempt mfa authentication before their account locks<br>
<code>NAT</code>: Turn on or off masquerading<br>
<code>ExposePorts</code>: Expose ports on the VPN server to the client (adds rules to IPtables) example: [ "443/tcp", "100-200/udp" ]<br>
<code>CheckUpdates</code>: If enabled (off by default) the management UI will show an alert if a new version of wag is available. This talks to api.github.com<br>
<code>MFATemplatesDirectory</code>: A string path option, when set templates will be queried from disk rather than the embedded copies. Allows you to customise the MFA registration, entry, and success pages, allows custom <code>js</code> and <code>css</code> in the <code>MFATemplatesDirectory /custom/</code> directory<br>
<code>DownloadConfigFileName</code>: The filename of the wireguard config that is downloaded, defaults to <code>wg0.conf</code></p>
<p dir="auto"><code>ExternalAddress</code>: The public address of the server, the place where wireguard is listening to the internet, and where clients can reach the <code>/register_device</code> endpoint</p>
<p dir="auto"><code>MaxSessionLifetimeMinutes</code>: After authenticating, a device will be allowed to talk to privileged routes for this many minutes, if -1, timeout is disabled<br>
<code>SessionInactivityTimeoutMinutes</code>: If a device has not sent data in <code>n</code> minutes, it will be required to reauthenticate, if -1 timeout is disabled</p>
<p dir="auto"><code>DatabaseLocation</code>: Where to load the sqlite3 database from, it will be created if it does not exist<br>
<code>Socket</code>: Wag control socket, changing this will allow multiple wag instances to run on the same machine<br>
<code>Acls</code>: Defines the <code>Groups</code> and <code>Policies</code> that restrict routes<br>
<code>Policies</code>: A map of group or user names to policy objects which contain the wag firewall &amp; route capture rules. The most specific match governs the type of access a user has to a route, e.g if you have a <code>/16</code> defined as MFA, but one ip address in that range as allow that is <code>/32</code> then the <code>/32</code> will take precedence over the <code>/16</code><br>
<code>Policies.&lt;policy name&gt;.Mfa</code>: The routes and services that require Mfa to access<br>
<code>Policies.&lt;policy name&gt;.Public</code>: Routes and services that do not require authorisation
<code>Policies.&lt;policy name&gt;.Deny</code>: Deny access to this route</p>
<p dir="auto"><code>Webserver</code>: Object that contains the public and tunnel listening addresses of the webserver</p>
<p dir="auto"><code>WebServer.Public.ListenAddress</code>: Listen address for endpoint<br>
<code>WebServer.Tunnel.Port</code>: Port for in-vpn-tunnel webserver, this does not take a full IP address, as the tunnel listener should <em>never</em> be outside the wireguard device</p>
<p dir="auto"><code>WebServer.&lt;endpoint&gt;.CertPath</code>: TLS Certificate path for endpoint<br>
<code>WebServer.&lt;endpoint&gt;.KeyPath</code>: TLS key for endpoint</p>
<p dir="auto"><code>Authenticators</code>: Object that contains configurations for the authentication methods wag provides<br>
<code>Authenticators.Issuer</code>: TOTP issuer, the name that will get added to the TOTP app<br>
<code>Authenticators.DomainURL</code>: Full url of the vpn authentication endpoint, required for <code>webauthn</code> and <code>oidc</code>
<code>Authenticators.DefaultMethod</code>: String, default method the user will be presented, if not specified a list of methods is displayed to the user (possible values: <code>webauth</code>, <code>totp</code>, <code>oidc</code>, <code>pam</code>)<br>
<code>Authenticators.Methods</code>: String array, enabled authentication methods, e.g <code>["totp","webauthn","oidc", "pam"]</code>.</p>
<p dir="auto"><code>Authenticators.OIDC</code>: Object that contains <code>OIDC</code> specific configuration options
<code>Authenticators.OIDC.IssuerURL</code>: Identity provider endpoint, e.g <code>http://localhost:8080/realms/account</code>
<code>Authenticators.OIDC.ClientID</code>:  OIDC identifier for application
<code>Authenticators.OIDC.ClientSecret</code>: OIDC secret
<code>Authenticators.OIDC.GroupsClaimName</code>: Not yet used.</p>
<p dir="auto"><code>Authenticators.PAM.ServiceName</code>: Name of PAM-Auth file in <code>/etc/pam.d/</code>  will default to <code>/etc/pam.d/login</code> if unset or empty</p>
<p dir="auto"><code>Clustering</code>: Object containing the clustering details<br>
<code>Clustering.ClusterState</code>: Same as the etcd cluster state setting, can be either <code>new</code>, create a new cluster, or <code>existing</code>. If you are joining an existing cluster, use <code>start -join</code> rather than this<br>
<code>Clustering.ETCDLogLevel</code>: Level of logging for the embedded etcd server to emit, options <code>info</code>, <code>error</code><br>
<code>Clustering.Witness</code>: Is the node a witness node, i.e one that does not start a wireguard device, or management UI, but replicates events for the RAFT concensus<br>
<code>Clustering.TLSManagerListenURL</code>: URL for generating certificates for the wag cluster, must be reachable by all nodes, typically automatically set by <code>start -join</code></p>
<p dir="auto"><code>Wireguard</code>: Object that contains the wireguard device configuration<br>
<code>Wireguard.DevName</code>: The wireguard device to attach or to create if it does not exist, will automatically add peers (no need to configure peers with <code>wg-quick</code>)<br>
<code>Wireguard.ListenPort</code>: Port that wireguard will listen on<br>
<code>Wireguard.PrivateKey</code>: The wireguard private key, can be generated with <code>wg genkey</code><br>
<code>Wireguard.Address</code>: Subnet the VPN is responsible for<br>
<code>Wireguard.MTU</code>: Maximum transmissible unit defaults to 1420 if not set for IPv4 over Ethernet<br>
<code>Wireguard.DNS</code>: An array of DNS servers that will be automatically used, and set as "Allowed" (no MFA)</p>
<p dir="auto"><code>ManagementUI</code>: Object that contains configurations for the webadministration portal. It is not recommend to expose this portal, I recommend setting <code>ListenAddress</code> to <code>127.0.0.1</code>/<code>localhost</code> and then use ssh forwarding to expose it<br>
<code>ManagementUI.Enabled</code>: Enable the web UI<br>
<code>ManagementUI.ListenAddress</code>: Listen address to expose the management UI on<br>
<code>ManagementUI.CertPath</code>: TLS Certificate path for management endpoint<br>
<code>ManagementUI.KeyPath</code>: TLS key for the management endpoint</p>
<p dir="auto">Full config example</p>
<div dir="auto" data-snippet-clipboard-copy-content="{
    &quot;Proxied&quot;: true,
    &quot;ExposePorts&quot;: [
        &quot;443/tcp&quot;,
        &quot;100-200/udp&quot;
     ],
    &quot;CheckUpdates&quot;: true,
    &quot;Lockout&quot;: 5,
    &quot;NAT&quot;: true,
    &quot;HelpMail&quot;: &quot;help@example.com&quot;,
    &quot;MaxSessionLifetimeMinutes&quot;: 2,
    &quot;SessionInactivityTimeoutMinutes&quot;: 1,
    &quot;ExternalAddress&quot;: &quot;81.80.79.78&quot;,
    &quot;DatabaseLocation&quot;: &quot;devices.db&quot;,
    &quot;Socket&quot;:&quot;/tmp/wag.sock&quot;,
    &quot;Webserver&quot;: {
        &quot;Public&quot;: {
            &quot;ListenAddress&quot;: &quot;192.168.121.61:8080&quot;,
            &quot;CertPath&quot;: &quot;/etc/example/cert/path&quot;,
            &quot;KeyPath&quot;: &quot;/etc/ssl/private/somecert.key&quot;
        },
        &quot;Tunnel&quot;: {
            &quot;Port&quot;: &quot;8080&quot;
        }
    },
    &quot;ManagementUI&quot;: {
        &quot;ListenAddress&quot;: &quot;127.0.0.1:4433&quot;,
        &quot;CertPath&quot;: &quot;/etc/example/cert/path&quot;,
        &quot;KeyPath&quot;: &quot;/etc/ssl/private/somecert.key&quot;,
        &quot;Enabled&quot;: true
    },
    &quot;Authenticators&quot;: {
        &quot;Issuer&quot;: &quot;vpn.test&quot;,
        &quot;DomainURL&quot;: &quot;https://vpn.test:8080&quot;,
        &quot;DefaultMethod&quot;:&quot;webauthn&quot;,
        &quot;Methods&quot;:[&quot;totp&quot;,&quot;webauthn&quot;, &quot;oidc&quot;, &quot;pam&quot;],
        &quot;OIDC&quot;: {
            &quot;IssuerURL&quot;: &quot;http://localhost:8080/&quot;,
            &quot;ClientSecret&quot;: &quot;<OMITTED>&quot;,
            &quot;ClientID&quot;: &quot;account&quot;,
            &quot;GroupsClaimName&quot;: &quot;groups&quot;
        }
    },
    &quot;Clustering&quot;: {
        &quot;ClusterState&quot;: &quot;new&quot;,
        &quot;ETCDLogLevel&quot;: &quot;error&quot;,
        &quot;Witness&quot;: false,
        &quot;TLSManagerListenURL&quot;: &quot;https://wag.server:3434&quot;
    },
    &quot;Wireguard&quot;: {
        &quot;DevName&quot;: &quot;wg0&quot;,
        &quot;ListenPort&quot;: 53230,
        &quot;PrivateKey&quot;: &quot;AN EXAMPLE KEY&quot;,
        &quot;Address&quot;: &quot;192.168.1.1/24&quot;,
        &quot;MTU&quot;: 1420,
        &quot;DNS&quot;: [&quot;1.1.1.1&quot;]
    },
    &quot;Acls&quot;: {
        &quot;Groups&quot;: {
            &quot;group:nerds&quot;: [
                &quot;daviv.test&quot;,
                &quot;franky.someone&quot;,
                &quot;any_username&quot;
            ]
        },
        &quot;Policies&quot;: {
            &quot;*&quot;: {
                &quot;Mfa&quot;: [
                     &quot;10.0.0.2/32 8080/any&quot;
                ],
                &quot;Allow&quot;: [
                    &quot;10.7.7.7/32&quot;,
                    &quot;google.com&quot;
                ]
            },
            &quot;username&quot;: { 
                &quot;Mfa&quot;: [
                     &quot;someinternal.service 9100/tcp&quot;
                ],
                &quot;Allow&quot;:[ &quot;10.0.0.1/32&quot;]
            },
            &quot;group:nerds&quot;: {
                &quot;Mfa&quot;: [
                    &quot;192.168.3.4/32&quot;,
                    &quot;10.0.0.0/24&quot;,
                    &quot;thing.internal 443/tcp icmp&quot;
                ],
                &quot;Allow&quot;: [
                    &quot;192.168.3.5/32&quot;
                ],
                &quot;Deny&quot;: [
                    &quot;10.0.0.5/32&quot;
                 ]
            }
        }
    }
}"><pre>{
    <span>"Proxied"</span>: <span>true</span>,
    <span>"ExposePorts"</span>: [
        <span><span>"</span>443/tcp<span>"</span></span>,
        <span><span>"</span>100-200/udp<span>"</span></span>
     ],
    <span>"CheckUpdates"</span>: <span>true</span>,
    <span>"Lockout"</span>: <span>5</span>,
    <span>"NAT"</span>: <span>true</span>,
    <span>"HelpMail"</span>: <span><span>"</span>help@example.com<span>"</span></span>,
    <span>"MaxSessionLifetimeMinutes"</span>: <span>2</span>,
    <span>"SessionInactivityTimeoutMinutes"</span>: <span>1</span>,
    <span>"ExternalAddress"</span>: <span><span>"</span>81.80.79.78<span>"</span></span>,
    <span>"DatabaseLocation"</span>: <span><span>"</span>devices.db<span>"</span></span>,
    <span>"Socket"</span>:<span><span>"</span>/tmp/wag.sock<span>"</span></span>,
    <span>"Webserver"</span>: {
        <span>"Public"</span>: {
            <span>"ListenAddress"</span>: <span><span>"</span>192.168.121.61:8080<span>"</span></span>,
            <span>"CertPath"</span>: <span><span>"</span>/etc/example/cert/path<span>"</span></span>,
            <span>"KeyPath"</span>: <span><span>"</span>/etc/ssl/private/somecert.key<span>"</span></span>
        },
        <span>"Tunnel"</span>: {
            <span>"Port"</span>: <span><span>"</span>8080<span>"</span></span>
        }
    },
    <span>"ManagementUI"</span>: {
        <span>"ListenAddress"</span>: <span><span>"</span>127.0.0.1:4433<span>"</span></span>,
        <span>"CertPath"</span>: <span><span>"</span>/etc/example/cert/path<span>"</span></span>,
        <span>"KeyPath"</span>: <span><span>"</span>/etc/ssl/private/somecert.key<span>"</span></span>,
        <span>"Enabled"</span>: <span>true</span>
    },
    <span>"Authenticators"</span>: {
        <span>"Issuer"</span>: <span><span>"</span>vpn.test<span>"</span></span>,
        <span>"DomainURL"</span>: <span><span>"</span>https://vpn.test:8080<span>"</span></span>,
        <span>"DefaultMethod"</span>:<span><span>"</span>webauthn<span>"</span></span>,
        <span>"Methods"</span>:[<span><span>"</span>totp<span>"</span></span>,<span><span>"</span>webauthn<span>"</span></span>, <span><span>"</span>oidc<span>"</span></span>, <span><span>"</span>pam<span>"</span></span>],
        <span>"OIDC"</span>: {
            <span>"IssuerURL"</span>: <span><span>"</span>http://localhost:8080/<span>"</span></span>,
            <span>"ClientSecret"</span>: <span><span>"</span>&lt;OMITTED&gt;<span>"</span></span>,
            <span>"ClientID"</span>: <span><span>"</span>account<span>"</span></span>,
            <span>"GroupsClaimName"</span>: <span><span>"</span>groups<span>"</span></span>
        }
    },
    <span>"Clustering"</span>: {
        <span>"ClusterState"</span>: <span><span>"</span>new<span>"</span></span>,
        <span>"ETCDLogLevel"</span>: <span><span>"</span>error<span>"</span></span>,
        <span>"Witness"</span>: <span>false</span>,
        <span>"TLSManagerListenURL"</span>: <span><span>"</span>https://wag.server:3434<span>"</span></span>
    },
    <span>"Wireguard"</span>: {
        <span>"DevName"</span>: <span><span>"</span>wg0<span>"</span></span>,
        <span>"ListenPort"</span>: <span>53230</span>,
        <span>"PrivateKey"</span>: <span><span>"</span>AN EXAMPLE KEY<span>"</span></span>,
        <span>"Address"</span>: <span><span>"</span>192.168.1.1/24<span>"</span></span>,
        <span>"MTU"</span>: <span>1420</span>,
        <span>"DNS"</span>: [<span><span>"</span>1.1.1.1<span>"</span></span>]
    },
    <span>"Acls"</span>: {
        <span>"Groups"</span>: {
            <span>"group:nerds"</span>: [
                <span><span>"</span>daviv.test<span>"</span></span>,
                <span><span>"</span>franky.someone<span>"</span></span>,
                <span><span>"</span>any_username<span>"</span></span>
            ]
        },
        <span>"Policies"</span>: {
            <span>"*"</span>: {
                <span>"Mfa"</span>: [
                     <span><span>"</span>10.0.0.2/32 8080/any<span>"</span></span>
                ],
                <span>"Allow"</span>: [
                    <span><span>"</span>10.7.7.7/32<span>"</span></span>,
                    <span><span>"</span>google.com<span>"</span></span>
                ]
            },
            <span>"username"</span>: { 
                <span>"Mfa"</span>: [
                     <span><span>"</span>someinternal.service 9100/tcp<span>"</span></span>
                ],
                <span>"Allow"</span>:[ <span><span>"</span>10.0.0.1/32<span>"</span></span>]
            },
            <span>"group:nerds"</span>: {
                <span>"Mfa"</span>: [
                    <span><span>"</span>192.168.3.4/32<span>"</span></span>,
                    <span><span>"</span>10.0.0.0/24<span>"</span></span>,
                    <span><span>"</span>thing.internal 443/tcp icmp<span>"</span></span>
                ],
                <span>"Allow"</span>: [
                    <span><span>"</span>192.168.3.5/32<span>"</span></span>
                ],
                <span>"Deny"</span>: [
                    <span><span>"</span>10.0.0.5/32<span>"</span></span>
                 ]
            }
        }
    }
}</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Defining ACL rules</h2><a id="user-content-defining-acl-rules" aria-label="Permalink: Defining ACL rules" href="#defining-acl-rules"></a></p>
<p dir="auto">The <code>Policies</code> section allows you to define what routes should be both captured by the VPN and what ports and protocols are allowed through Wag.</p>
<p dir="auto">Rules use the subnet prefix length to determine which rule applies. The most <em>specific</em> match is use to determine the level of user access to a route.<br>
For example:</p>
<div dir="auto" data-snippet-clipboard-copy-content=" &quot;*&quot;: {
                &quot;Mfa&quot;: [
                     &quot;10.0.0.0/16&quot;
                ],
                &quot;Allow&quot;: [
                    &quot;10.0.1.1/32&quot;,
                ]
            },"><pre> <span>"*"</span>: {
                <span>"Mfa"</span>: [
                     <span><span>"</span>10.0.0.0/16<span>"</span></span>
                ],
                <span>"Allow"</span>: [
                    <span><span>"</span>10.0.1.1/32<span>"</span></span>,
                ]
            },</pre></div>
<p dir="auto">Users will be able to access 10.0.1.1 <strong>without</strong> MFA as the match is more specific. This change occured in v6.0.0, previously MFA routes would always take precedence.</p>
<p dir="auto">Additionally if multiple policies are defined for a single route they are composed with MFA rules taking preference.<br>
For example:</p>
<div dir="auto" data-snippet-clipboard-copy-content=" &quot;*&quot;: {
            &quot;Mfa&quot;: [
                  &quot;10.0.0.0/16&quot;,
                  &quot;10.0.1.1/32 22/tcp&quot;,
            ]
  },
 &quot;group:users&quot;: {
            &quot;Allow&quot;: [
                  &quot;10.0.1.1/32 443/tcp&quot;,
            ]
 }"><pre> <span>"*"</span>: {
            <span>"Mfa"</span>: [
                  <span><span>"</span>10.0.0.0/16<span>"</span></span>,
                  <span><span>"</span>10.0.1.1/32 22/tcp<span>"</span></span>,
            ]
  },
 <span>"group:users"</span>: {
            <span>"Allow"</span>: [
                  <span><span>"</span>10.0.1.1/32 443/tcp<span>"</span></span>,
            ]
 }</pre></div>
<p dir="auto">All users will be able to access <code>22/tcp</code> on the <code>10.0.1.1/32</code> host, but users in the <code>group:users</code> will be able to access <code>443/tcp</code> on that host as well, along with <code>22/tcp</code> when authorized.</p>
<p dir="auto">As of <strong>[version number, yet to be released]</strong> you can now define deny rules which will block access to a route.</p>
<p dir="auto">Example:</p>
<div dir="auto" data-snippet-clipboard-copy-content=" &quot;*&quot;: {
            &quot;Allow&quot;: [
                  &quot;10.0.0.0/16&quot;,
                  &quot;10.0.1.1/32 443/tcp&quot;,
            ]
  },
 &quot;group:users&quot;: {
            &quot;Deny&quot;: [
                  &quot;10.0.1.1/32 443/tcp&quot;,
            ]
 }"><pre> <span>"*"</span>: {
            <span>"Allow"</span>: [
                  <span><span>"</span>10.0.0.0/16<span>"</span></span>,
                  <span><span>"</span>10.0.1.1/32 443/tcp<span>"</span></span>,
            ]
  },
 <span>"group:users"</span>: {
            <span>"Deny"</span>: [
                  <span><span>"</span>10.0.1.1/32 443/tcp<span>"</span></span>,
            ]
 }</pre></div>
<p dir="auto">Its important to note that the most specific rule effectively creates a new rule "bucket", so if you do something like:</p>
<div dir="auto" data-snippet-clipboard-copy-content="&quot;group:nerds&quot;: {
      &quot;Allow&quot;: [
            &quot;10.0.0.0/24 443/tcp&quot;
      ],
      &quot;Deny&quot;: [
            &quot;10.0.0.5/32 22/tcp&quot;
      ]
}"><pre><span>"group:nerds"</span>: {
      <span>"Allow"</span>: [
            <span><span>"</span>10.0.0.0/24 443/tcp<span>"</span></span>
      ],
      <span>"Deny"</span>: [
            <span><span>"</span>10.0.0.5/32 22/tcp<span>"</span></span>
      ]
}</pre></div>
<p dir="auto">Your clients will not be able to access <code>10.0.0.5/32 443/tcp</code>, as the only rule in the <code>/32</code> "bucket" is a deny rule. You can solve this by adding the following:</p>
<div dir="auto" data-snippet-clipboard-copy-content="&quot;group:nerds&quot;: {
      &quot;Allow&quot;: [
            &quot;10.0.0.0/24 443/tcp&quot;
            &quot;10.0.0.5/32 22/tcp&quot;
      ],
      &quot;Deny&quot;: [
            &quot;10.0.0.5/32 22/tcp&quot;
      ]
}"><pre><span>"group:nerds"</span>: {
      <span>"Allow"</span>: [
            <span><span>"</span>10.0.0.0/24 443/tcp<span>"</span></span>
            <span><span>"</span>10.0.0.5/32 22/tcp<span>"</span></span>
      ],
      <span>"Deny"</span>: [
            <span><span>"</span>10.0.0.5/32 22/tcp<span>"</span></span>
      ]
}</pre></div>
<p dir="auto">or</p>
<div dir="auto" data-snippet-clipboard-copy-content="&quot;group:nerds&quot;: {
      &quot;Allow&quot;: [
            &quot;10.0.0.0/24 443/tcp&quot;
      ],
      &quot;Deny&quot;: [
            &quot;10.0.0.0/24 22/tcp&quot;
      ]
}"><pre><span>"group:nerds"</span>: {
      <span>"Allow"</span>: [
            <span><span>"</span>10.0.0.0/24 443/tcp<span>"</span></span>
      ],
      <span>"Deny"</span>: [
            <span><span>"</span>10.0.0.0/24 22/tcp<span>"</span></span>
      ]
}</pre></div>
<p dir="auto">As then you're adding the deny rule to the <code>/24</code> "bucket".</p>
<p dir="auto">Additionally, It is possible to define what services a user can access by defining port and protocol rules.<br>
Currently 3 types of port and protocol rules are supported:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Any</h3><a id="user-content-any" aria-label="Permalink: Any" href="#any"></a></p>
<p dir="auto">When no other rules are defined or the <code>any</code> keyword is used wag will allow all services and port combinations.</p>
<p dir="auto">Example:</p>
<div data-snippet-clipboard-copy-content="&quot;1.1.1.1&quot;: Allows all ports and protocols to 1.1.1.1/32
&quot;1.1.1.1 54/any&quot;: Allows both tcp and udp to 1.1.1.1/32"><pre><code>"1.1.1.1": Allows all ports and protocols to 1.1.1.1/32
"1.1.1.1 54/any": Allows both tcp and udp to 1.1.1.1/32
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Single Service</h3><a id="user-content-single-service" aria-label="Permalink: Single Service" href="#single-service"></a></p>
<p dir="auto">Example:</p>
<div data-snippet-clipboard-copy-content="192.168.1.1 22/tcp 53/udp: Fairly self explanatory, allows you to hit 22/tcp and 53/udp on a host
1.1.1.1 icmp: As icmp doesnt have ports really you dont need it either"><pre><code>192.168.1.1 22/tcp 53/udp: Fairly self explanatory, allows you to hit 22/tcp and 53/udp on a host
1.1.1.1 icmp: As icmp doesnt have ports really you dont need it either
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Ranges</h3><a id="user-content-ranges" aria-label="Permalink: Ranges" href="#ranges"></a></p>
<p dir="auto">You can also define a range of ports with a protocol. wag requires that the lower port is first.</p>
<p dir="auto">Example:</p>
<div data-snippet-clipboard-copy-content="192.168.1.1 22-1024/tcp 23-53/any: Format is low port-high port/service"><pre><code>192.168.1.1 22-1024/tcp 23-53/any: Format is low port-high port/service
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Limitations</h2><a id="user-content-limitations" aria-label="Permalink: Limitations" href="#limitations"></a></p>
<ul dir="auto">
<li>Only supports clients with one <code>AllowedIP</code>, which is perfect for site to site, or client -&gt; server based architecture.</li>
<li>IPv4 only.</li>
<li>Linux only</li>
<li>Very Modern kernel 5.9+ at least (&gt;5.9 allows loops in ebpf and <code>bpf_link</code>)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Development</h2><a id="user-content-development" aria-label="Permalink: Development" href="#development"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Custom templates</h2><a id="user-content-custom-templates" aria-label="Permalink: Custom templates" href="#custom-templates"></a></p>
<p dir="auto">With the introduction of the <code>MFATemplatesDirectory</code> option, you can now specify a directory that contains template files for customising the MFA entry, registration and wireguard config file.<br>
An example of all these files can be found in the embedded variants here: <code>internal/webserver/resources/templates</code>.</p>
<p dir="auto">When the option is set, you must define <em>all</em> the files this guide is a brief description of what each file is:<br>
<code>interface.tmpl</code>: The wireguard configuration file that is served to clients<br>
<code>oidc_error.html</code>: If a users login to the oidc provider as some issue (i.e user isnt registered for the device)<br>
<code>prompt_mfa_totp.html</code>: Page for taking TOTP code entry<br>
<code>prompt_mfa_webauthn.html</code>: Page for webauthn entry<br>
<code>qrcode_registration.html</code>: When a client registers with the <code>?type=mobile</code> option set, shows a QR code for the wireguard app on android/ios to simply registration<br>
<code>register_mfa_totp.html</code>: Registration for TOTP that should show a QR code<br>
<code>register_mfa_webauth.html</code>: Page to do webauthn registration<br>
<code>register_mfa.html</code>: If multiple MFA methods are registered this page is displayed giving the user an option of what method to use<br>
<code>success.html</code>: This page is not a template, and is displayed when a user is successfully authed, or if they attempt to access the authorisation endpoint while being authorised</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Testing</h2><a id="user-content-testing" aria-label="Permalink: Testing" href="#testing"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="cd internal/router
sudo go test -v ."><pre><span>cd</span> internal/router
sudo go <span>test</span> -v <span>.</span></pre></div>
<p dir="auto">Sudo is required to load the eBPF program into the kernel.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Building a release</h2><a id="user-content-building-a-release" aria-label="Permalink: Building a release" href="#building-a-release"></a></p>
<p dir="auto">If you havent build the release docker image (used because it has a stable version of glibc) do the following:</p>
<div data-snippet-clipboard-copy-content="cd release_builder
sudo docker build -t wag_builder .
cd ..

make docker"><pre><code>cd release_builder
sudo docker build -t wag_builder .
cd ..

make docker
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">External contributions</h2><a id="user-content-external-contributions" aria-label="Permalink: External contributions" href="#external-contributions"></a></p>
<p dir="auto">If you're looking to add your own features, or bug fixes to wag (thank you!). Please make sure that you've written a test for your changes if possible.<br>
There are a few <code>_test.go</code> files around that give example on how to do this.</p>
<p dir="auto">Then open a pull request and we can discuss it there.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Donations and Support</h2><a id="user-content-donations-and-support" aria-label="Permalink: Donations and Support" href="#donations-and-support"></a></p>
<p dir="auto">If you like <code>wag</code> and use it to support your work flow, consider donating to the project. Your donations go directly towards the time and effort I put in, and the amount of support I can provide.</p>
<p dir="auto">You can do this by either using the <code>Support</code> button on the side or the cryptocurrency wallets detailed below.</p>
<p dir="auto">Monero (XMR):<br>
<code>8A8TRqsBKpMMabvt5RxMhCFWcuCSZqGV5L849XQndZB4bcbgkenH8KWJUXinYbF6ySGBznLsunrd1WA8YNPiejGp3FFfPND</code></p>
<p dir="auto">Bitcoin (BTC):<br>
<code>bc1qm9e9sfrm7l7tnq982nrm6khnsfdlay07h0dxfr</code></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why the CORDIC algorithm lives rent-free in my head (267 pts)]]></title>
            <link>https://github.com/francisrstokes/githublog/blob/main/2024/5/10/cordic.md</link>
            <guid>40326563</guid>
            <pubDate>Sat, 11 May 2024 07:18:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/francisrstokes/githublog/blob/main/2024/5/10/cordic.md">https://github.com/francisrstokes/githublog/blob/main/2024/5/10/cordic.md</a>, See on <a href="https://news.ycombinator.com/item?id=40326563">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Why the CORDIC algorithm lives rent-free in my head</h2><a id="user-content-why-the-cordic-algorithm-lives-rent-free-in-my-head" aria-label="Permalink: Why the CORDIC algorithm lives rent-free in my head" href="#why-the-cordic-algorithm-lives-rent-free-in-my-head"></a></p>
<p dir="auto"><em>This post is an adaptation of a <a href="https://twitter.com/fstokesman/status/1787949934123049021" rel="nofollow">twitter thread</a> I put together a few days ago.</em></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/cordic.gif"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/cordic.gif" data-animated-image=""></a></p>
<p dir="auto">CORDIC is an algorithm for computing trig functions like <code>sin</code>, <code>cos</code>, <code>tan</code> etc on low powered hardware, without an FPU (i.e. no floating point) or expensive lookup tables. In fact, it reduces these complex functions to simple additions and bit shifts.</p>
<p dir="auto">I'll cut right to the chase and tell you <em>why</em> I love this algorithm so much, and then we'll dive into the details of exactly how it works. Essentially, the actual operations of the algorithm are incredibly simple - just shifts and adds, as I mentioned before - but it does this by combining vector math, trigonometry, convergence proofs, and some clever computer science. To me, it's what people are talking about when they describe things of this nature as "elegant".</p>
<p dir="auto">Let's start with an obvious point: You don't need this if you're working on high powered hardware. This technique is applicable for embedded environments; especially less capable microcontrollers and FPGAs. Even then, it's possible that more capable hardware/peripherals will be available which would be "faster", though speed is not the only measure of usefulness.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Avoiding floating point</h2><a id="user-content-avoiding-floating-point" aria-label="Permalink: Avoiding floating point" href="#avoiding-floating-point"></a></p>
<p dir="auto"><em>(if you're already familiar with fixed-point, you can safely skip this section)</em></p>
<p dir="auto">You might be wondering how are we able to avoid floating point, when functions like <code>sin(x)</code> produce values between -1.0 and 1.0? Well, floating point is not the only way of representing rational numbers. In fact, before IEEE 754 became the popular standard that it is today, <em>fixed point</em> was used all the time (go and ask any gamedev who worked on stuff between 1980 and 2000ish and they'll tell you all about it).</p>
<p dir="auto">In fact, I got nerd-sniped into this whole CORDIC investigation after listening to <a href="https://twitter.com/MicroarchClub/status/1759606520713453630" rel="nofollow">Dan Mangum's fantastic Microarch Club podcast</a>, where Philip Freidin dropped the spicy hot-take that "Floating point is a crutch", and that using it might be a sign that you don't <em>really</em> understand the algorithm you're working on. Of course I should mention this was more in the context of custom ASICs rather than your run-of-the-mill webapp, but the quote really stuck with me.</p>
<p dir="auto">So how does fixed point work? Well you take an integer type like <code>int32_t</code>, and say the top 16 bits are the whole part of the number, and the bottom 16 bits are the fractional part. You could divide the number up differently (e.g. 10 bits for the whole part and 24 for the fractional), but we'll use 16/16 as an example here.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/fixed-whole-fractional.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/fixed-whole-fractional.png"></a></p>
<p dir="auto">That gives a range of around <code>-32768.99997</code> to <code>32767.99997</code>. We've <em>fixed</em> the radix point at the 16th bit, though again, we could have put it anywhere. Moving the point allows us to trade off for precision where it makes sense (i.e. more bits for whole numbers, or more bits for fractional representation).</p>
<p dir="auto">Something worth noting here is that the number is still an <code>int32_t</code> - we the programmers have assigned the extra meaning here (though this is also true of literally every data type in computing - there are only bits in the end!).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/fixed-point.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/fixed-point.png"></a></p>
<p dir="auto">How do we get a number into this format? Well, we've got 16 bits of fractional precision, so take a float like&nbsp;<code>42.01</code>, and scale it up by <code>(1 &lt;&lt; 16)</code>. That gives us <code>2753167</code> when cast into an <code>int32_t</code>. If we want to go from fixed point back to floating point, we just do the opposite. <code>2753167 / (1 &lt;&lt; 16)</code> gives us <code>~42.0099945</code>, which is very close to <code>42.01</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="#define SCALING_FACTOR (16)

static inline int32_t fixed_from_float(float a) {
  return (int32_t)(a * (float)(1 << SCALING_FACTOR));
}

static inline float fixed_to_float(int32_t a) {
  return (float)a / (float)(1 << SCALING_FACTOR);
}"><pre><span>#define</span> <span>SCALING_FACTOR</span> (16)

<span>static</span> <span>inline</span> <span>int32_t</span> <span>fixed_from_float</span>(<span>float</span> <span>a</span>) {
  <span>return</span> (<span>int32_t</span>)(<span>a</span> <span>*</span> (<span>float</span>)(<span>1</span> &lt;&lt; <span>SCALING_FACTOR</span>));
}

<span>static</span> <span>inline</span> <span>float</span> <span>fixed_to_float</span>(<span>int32_t</span> <span>a</span>) {
  <span>return</span> (<span>float</span>)<span>a</span> / (<span>float</span>)(<span>1</span> &lt;&lt; <span>SCALING_FACTOR</span>);
}</pre></div>
<p dir="auto">We could also forgo floating point altogether and encode a number like <code>1.5</code> manually. The whole part is just <code>1</code>, so we shift that up (<code>(1 &lt;&lt; 16)</code>), and the fractional part is the halfway point between <code>0x0000</code> and <code>0xffff</code>, so call it <code>0x7fff</code>. That gives us <code>98303</code> in decimal.</p>
<p dir="auto">Operations like addition and subtraction Just Work™ - assuming you're using the same scaling factor for whichever numbers you're operating on. It is possible to mix and match scaling factors, but it increases the complexity.</p>
<p dir="auto">Multiplication is only marginally trickier. Multiplying the two fixed point numbers together essentially scales everything up by scaling factor. This can be resolved by just shifting the result back down.</p>
<div dir="auto" data-snippet-clipboard-copy-content="static inline int32_t fixed_multiply(int32_t a, int32_t b) {
  return ((int64_t)a * (int64_t)b) >> SCALING_FACTOR;
}"><pre><span>static</span> <span>inline</span> <span>int32_t</span> <span>fixed_multiply</span>(<span>int32_t</span> <span>a</span>, <span>int32_t</span> <span>b</span>) {
  <span>return</span> ((<span>int64_t</span>)<span>a</span> <span>*</span> (<span>int64_t</span>)<span>b</span>) &gt;&gt; <span>SCALING_FACTOR</span>;
}</pre></div>
<p dir="auto">Division is basically the same story, except in reverse. There's a trick to squeeze out some extra precision by prescaling the dividend by the scaling factor, and then dividing by the divisor.</p>
<div dir="auto" data-snippet-clipboard-copy-content="static inline int32_t fixed_divide(int32_t a, int32_t b) {
  return ((int64_t)a << SCALING_FACTOR) / (int64_t)b;
}"><pre><span>static</span> <span>inline</span> <span>int32_t</span> <span>fixed_divide</span>(<span>int32_t</span> <span>a</span>, <span>int32_t</span> <span>b</span>) {
  <span>return</span> ((<span>int64_t</span>)<span>a</span> &lt;&lt; <span>SCALING_FACTOR</span>) / (<span>int64_t</span>)<span>b</span>;
}</pre></div>
<p dir="auto">OK we can do basic operations, but what if I need something more complex, like I don't know, a trig function? This is where CORDIC comes in.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">The CORDIC algorithm</h2><a id="user-content-the-cordic-algorithm" aria-label="Permalink: The CORDIC algorithm" href="#the-cordic-algorithm"></a></p>
<p dir="auto">CORDIC stands for "co-ordinate rotation digital computer", and was cooked up back in the mid 50s (though the general algorithm has been known to mathematicians for hundreds of years). The core idea is that we can rotate a vector around a unit circle by progressively smaller and smaller angles, and the vector components will end up being the sine and cosine of the angle we're interested in.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/cordic.gif"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/cordic.gif" data-animated-image=""></a></p>
<p dir="auto">It's sort of like a binary search:  You move towards the target angle by some large angle and check if you're ahead or behind, and then move by half that angle either clockwise or anticlockwise. This process repeats with smaller and smaller angles until the result converges.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/binary-search.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/binary-search.png"></a></p>
<p dir="auto">If you've worked with these kinds of operations before, you'll know that rotating a vector involves multiplying it with a matrix consisting of sines and cosines of the angle to be rotated to. That seems counter productive, since those are the functions we're trying to compute!</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\begin{bmatrix}
x' \\
y'
\end{bmatrix} = \begin{bmatrix}
\cos(\theta) &amp; -\sin(\theta) \\
\sin(\theta) &amp; \cos(\theta)
\end{bmatrix} \begin{bmatrix}
x \\
y
v\end{bmatrix}
$$</math-renderer></p>
<p dir="auto">We'll put that aside for a second, and get a big picture overview before solving this problem. Now, it's fairly obvious that rotating by say <code>22.75˚</code> is the same as rotating by <code>45˚</code> and then <code>-22.5˚</code> - i.e. we can break up a rotation into smaller parts, with both positive and negative components.</p>
<p dir="auto">Let's say that we have a maximum rotation of <code>90˚</code> (𝚷/2 radians), and we're trying to figure out <code>sin(0.7)</code> (about <code>40˚</code>). Starting with a vector <code>(1, 0)</code> and a target of <code>0.7</code> radians, we rotate <code>0.7853</code> rads (<code>45˚</code>) anti-clockwise.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/0r.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/0r.png"></a></p>
<p dir="auto">Target now becomes <code>0.7 - 0.7853 = -0.0853</code>. Since it's negative, we now rotate clockwise by 0.3926 rads (22.5˚). Target becomes -0.0853 + 0.3926 = 0.3073, which is positive, so the next rotation will be anti-clockwise by 0.1963 rads (11.25˚).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/1r.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/1r.png"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/2r.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/2r.png"></a></p>
<p dir="auto">If we continue this process for a total of 16 iterations, the vector lines up almost perfectly with the original target angle. The <code>y</code> value of the vector is ~= <code>sin(a)</code>, while <code>x</code> ~= <code>cos(a)</code>! This is how CORDIC works; we rotate a vector around, and the state we keep is an approximation of various trigonometric functions.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/3r.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/3r.png"></a></p>
<p dir="auto">With some understanding in hand, we can return to the issue of, well, rotations actually requiring the functions we're trying to compute! We can use trigonometry to simplify the matrix.</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\cos(\theta) = \frac{1}{\sqrt{1 + tan^2(\theta)}}
$$</math-renderer></p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\sin(\theta) = \frac{\tan(\theta)}{\sqrt{1 + tan^2(\theta)}}
$$</math-renderer></p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\begin{bmatrix}
x' \\
y'
\end{bmatrix} = \cos(\theta)\begin{bmatrix}
1 &amp; -\tan(\theta) \\
\tan(\theta) &amp; 1
\end{bmatrix} \begin{bmatrix}
x \\
y
\end{bmatrix}
$$</math-renderer></p>
<p dir="auto">We have a few constants ones now, but we still have the <code>tan(a)</code>, plus the <code>cos(a)</code> out front. Let's ignore the <code>cos(a)</code> and focus on getting rid of <code>tan(a)</code>. As you saw when we ran through the algorithm, we're always rotating by a total of <code>~90˚</code>: First by <code>45˚</code>, then <code>22.5˚</code>, then <code>11.25˚</code>, and so on. Since we're doing this a fixed number of times, we can just precompute those values, and put them in a table. You might be thinking: <em>"You said there wouldn't be any tables!"</em>. Well, no. I said there wouldn't be any <em>expensive</em> tables. This table, in our case, will only contain 16 <code>uint32_t</code>s - a whopping 64 bytes! Even the most stripped down embedded projects can <em>usually</em> afford that. (In contrast, an <em>unoptimised</em> table for <code>sin(x)</code> that contains 4096 entries covering values from -1 to 1 would need 16KiB - and that's pretty poor precision!)</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\begin{bmatrix}
x' \\
y'
\end{bmatrix} = \cos(\theta)\begin{bmatrix}
1 &amp; -table[i] \\
table[i] &amp; 1
\end{bmatrix} \begin{bmatrix}
x \\
y
\end{bmatrix}
$$</math-renderer></p>
<p dir="auto">That means our rotation matrix now only contains constants! We do however still have that <code>cos(a)</code> term. In fact, every iteration brings it's own new <code>cos(a)</code> term. But because of algebra, we can simply multiply all those terms together and apply them at the end.</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\cos(\theta_0) \cdot \cos(\theta_1) \cdot \cos(\theta_2) \cdot ... \cdot \cos(\theta_N)
$$</math-renderer></p>
<p dir="auto">Still, that's not great. But! No matter whether we take positive or negative steps, or the number of iterations, this multiplied out series of cosines actually converge to a constant value: <code>~0.6366</code>. All we need to do is to multiply out by this value after all iterations.</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
~0.6366 = \cos(\pm45˚) \cdot \cos(\pm22.5˚) \cdot \cos(\pm11.25˚) \cdot ... \cdot \cos(\pm\theta_N)
$$</math-renderer></p>
<p dir="auto">So that gives us only multiplications by constants over a number of iterations! Not bad. But didn't I say that CORDIC only used bit shifts and addition? For that, we need to go a little deeper into the rabbit hole.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Shifts and Adds</h2><a id="user-content-shifts-and-adds" aria-label="Permalink: Shifts and Adds" href="#shifts-and-adds"></a></p>
<p dir="auto">What the angles we plugged into <code>tan(a)</code> could instead be strategically chosen so that the result would always be an inverse power-of-2? This would be great, since multiplying or dividing by a power-of-2 is just a left or right shift for integers.</p>
<p dir="auto">Well, the <code>atan(x)</code> (arc-tangent or inverse tangent) function can do that for us. We can build a new 16-entry table, where each value is <code>atan(2**-i)</code>, for i=0 to 15. The actual rotation values for each iteration are now (<code>45˚</code>, <code>26.565˚</code>, <code>14.036˚</code>, <code>7.125˚</code>, etc).</p>
<p dir="auto">It doesn't actually half the angle each time, but as it turns out: using these angles, the process will <em>still</em> converge on the correct result! Now all those multiplications by <code>tan(a)</code> have become bit shifts by the iteration number.</p>
<p dir="auto">We still need to recompute our constant for the <code>cos(a)</code> terms. That now comes out to be around <code>0.60725</code>, which would be converted to the fixed point number <code>39796</code>.
And! It turns out there's a trick that means we don't even need to multiply by this value at the end. When we initialise the vector, we set <code>x</code> to this constant instead of 1.</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
~0.60725 = \cos(\pm\arctan(2^{0})) \cdot \cos(\pm\arctan(2^{-1})) \cdot \cos(\pm\arctan(2^{-1})) \cdot ... \cdot \cos(\pm\arctan(2^{-N}))
$$</math-renderer></p>
<p dir="auto">So now the CORDIC algorithm looks like this:</p>
<p dir="auto">Precompute a table for <code>tan(a)</code>, where each entry is <code>atan(2**-i)</code>. These values are, of course, converted to fixed point, so: <code>atan(2**-i) * (1 &lt;&lt; 16)</code></p>
<p dir="auto">Then, when we want to compute a sine or a cosine, we take the angle (e.g. <code>0.9152</code>), convert it to fixed point: <code>0.9152 * (1 &lt;&lt; 16) = 59978</code></p>
<p dir="auto">Then setup initial parameters:</p>
<div data-snippet-clipboard-copy-content="x = 39796
y = 0
z = 59978"><pre><code>x = 39796
y = 0
z = 59978
</code></pre></div>
<p dir="auto">The <code>z</code> parameter here is not part of the vector, but rather tracks our target angle over time. The sign of this parameter determines if we rotate clockwise or anti-clockwise.</p>
<p dir="auto">With the parameters set up, each iteration looks like this (in pseudocode):</p>
<div dir="auto" data-snippet-clipboard-copy-content="if z >= 0:
    x_next = x - (y >> i)
    y_next = y + (x >> i)
    z -= table[i]
else:
    x_next = x + (y >> i)
    y_next = y - (x >> i)
    z += table[i]
x = x_next
y = y_next"><pre><span>if</span> <span>z</span> <span>&gt;=</span> <span>0</span>:
    <span>x_next</span> <span>=</span> <span>x</span> <span>-</span> (<span>y</span> <span>&gt;&gt;</span> <span>i</span>)
    <span>y_next</span> <span>=</span> <span>y</span> <span>+</span> (<span>x</span> <span>&gt;&gt;</span> <span>i</span>)
    <span>z</span> <span>-=</span> <span>table</span>[<span>i</span>]
<span>else</span>:
    <span>x_next</span> <span>=</span> <span>x</span> <span>+</span> (<span>y</span> <span>&gt;&gt;</span> <span>i</span>)
    <span>y_next</span> <span>=</span> <span>y</span> <span>-</span> (<span>x</span> <span>&gt;&gt;</span> <span>i</span>)
    <span>z</span> <span>+=</span> <span>table</span>[<span>i</span>]
<span>x</span> <span>=</span> <span>x_next</span>
<span>y</span> <span>=</span> <span>y_next</span></pre></div>
<p dir="auto">Now we can follow a few iterations through, and see the algorithm converge on the correct sine and cosine values. Values in parentheses are fixed point.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/0.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/0.png"></a></p>
<p dir="auto">During the first iteration, <code>z</code> was positive, so the vector is rotated anti-clockwise by <code>~0.785</code> rads. Note that the magnitude of the vector increased.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/1.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/1.png"></a></p>
<p dir="auto">In the second iteration, <code>z</code> was still positive, so again the vector is rotated anti-clockwise, by <code>~0.436</code> rads, though this time it overshot the mark. The magnitude of the vector is almost one now - that's the cos(a) product term starting to converge after we set the initial <code>x</code> value!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/2.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/2.png"></a></p>
<p dir="auto">On iteration 3, <code>z</code> was negative, so the vector is rotated clockwise by <code>~0.244</code> rads. It's clearly starting to creep up on that mark, and you can see that just a handful of iterations, we'd be able to get a fairly close approximation!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/3.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/3.png"></a></p>
<p dir="auto">On iteration 4, <code>z</code> was again negative, so clockwise rotation by <code>~0.124</code> rads. Now that the angular change is getting pretty small, and the vector is very close to the actual result, the rotations ping back and forth, getting closer and closer to the real value.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/4.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/4.png"></a></p>
<p dir="auto">Skipping forward to the last iteration, <code>y</code> now contains a very accurate approximation for <code>sin(0.9152)</code> - with an absolute deviation of just <code>0.00000956</code>. The cosine value (in <code>x</code>) deviation is slightly higher, at <code>0.0000434</code>, but still pretty good!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/16.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/16.png"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Wrapping up</h2><a id="user-content-wrapping-up" aria-label="Permalink: Wrapping up" href="#wrapping-up"></a></p>
<p dir="auto">There is <em>a lot</em> more to CORDIC than this, which I may cover in a future post. For instance, I didn't mention the special considerations you have to make if the angle of interest is outside of the first or fourth quadrant of the unit circle. I also didn't talk about how, with a few modifications, CORDIC can be used to compute many other functions, including <code>tan</code>, <code>atan</code>, <code>asin</code>, <code>acos</code>, <code>sinh</code>, <code>cosh</code>, <code>tanh</code>, <code>sqrt</code>, <code>ln</code>, <code>e^x</code>. Related algorithms also exist, such as <a href="https://en.wikipedia.org/wiki/BKM_algorithm" rel="nofollow">BKM</a>, designed specifically for computing logs and exponentials.</p>
<p dir="auto">I'm planning on covering this in some detail on the <a href="https://www.youtube.com/@LowByteProductions?subscribe" rel="nofollow">Low Byte Productions YouTube channel</a>, so follow me there if this kind of thing is something you'd like to learn more about.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Emacs Window Management Almanac (123 pts)]]></title>
            <link>https://karthinks.com/software/emacs-window-management-almanac/</link>
            <guid>40326362</guid>
            <pubDate>Sat, 11 May 2024 06:19:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://karthinks.com/software/emacs-window-management-almanac/">https://karthinks.com/software/emacs-window-management-almanac/</a>, See on <a href="https://news.ycombinator.com/item?id=40326362">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
      <p>Window management in Emacs gets a bad rap.</p>
<p>Some of this is deserved, but mostly this is a consequence of combining a very flexible and granular layout system with rather coarse controls.  This leaves the door open to creating and using tools for handling windows that employ and provide better metaphors and affordances.</p>
<p>As someone who’s spent an unnecessary amount of time trying different approaches to window management in Emacs over the decades, I decided to summarize them here.  Almanac might be overstating it a bit – this is a primer to and a collection of window management resources and tips.</p>
<p>Window management in Emacs bleeds into buffer, state, workspace and frame management, so it’s difficult to contain the scope of any article that aims to be comprehensive.  To that end,</p>
<ul>
<li>this write-up assumes that you’ve finished at least the Emacs tutorial and are familiar with basic Emacs terminology (what’s a buffer, window and a frame) and with window actions: splitting windows, deleting them or deleting other windows, and switching focus.</li>
<li>There are only a few brief mentions of tabs, as they are primarily a tool for workspace management, as opposed to window management.</li>
<li>I’m focusing on window/buffer management within an Emacs frame.  Many of the below tools work across frames just as well, but you’ll have to find the right switches to flip to enable cross-frame support.</li>
<li>Finally, this is more <em>my</em> almanac than a wiki: It covers only tools or ideas I’ve personally explored over the years, with brief mentions of potentially useful packages that I haven’t tried.  Any omissions are not value judgments, please let me know if I miss something useful.</li>
</ul>
<p>At some point this transitions from listing well known tools to tips, then hacks, and finally unvarnished opinions.  It’s front-loaded: the first chunk of the write-up gives you a 70% solution.  If you are new to Emacs, feel free to stop at 30%.  If you are an old hand, feel free to skip the first 30%.  It also lists substitutes: several ways to do the same things, <strong>so you can pick just one method</strong> and ignore the rest.   Things get progressively more opinionated and idiosyncratic in the second half.</p>
<p>If you are reading this in the future, this write-up is probably out of date.  The Emacs core is very stable, but the package ecosystem tends to drift around as packages are developed and abandoned.  The built-in solutions will still be around, but there are no guarantees on the third-party packages!  That said, the longer a package has been around the more likely it’s going to stick around in a functional state –  even if only as a frozen entry in the <a href="https://github.com/emacsorphanage">Emacs Orphanage</a>.</p>
<p>As new ideas emerge, there will be new approaches to window management that aren’t covered here.  These innovations don’t need to happen in the Emacs sphere – Emacs likes to <del>steal</del> reinvent ideas that originate elsewhere, much as other applications rediscover ideas that Emacs introduced in the 1990s.  So this topic might be worth revisiting afresh in a few years.</p>
<h2 id="what-we-mean-by-window-management">What we mean by “window management”</h2>
<figure><img src="https://karthinks.com/img/emacs-window-buffer-frame.png">
</figure>

<p>Emacs separates the idea of a <strong>window</strong> (a “viewport” or “pane” in the frame) from the <strong>buffer</strong>, a contiguous chunk of text that may or may not be the contents of a file.  These concepts are usually fused in IDEs and text editors – this reduces the cognitive load of using the application, but closes the door on more flexible behavior and free-form arrangments.  For example, many editors don’t let you have two views of the same file, which is trivial in Emacs.  They’re often uncomfortable even with the idea of a dissociated buffer – a buffer that does not represent the (possibly edited) contents of a file.  Reified concepts like Emacs’ <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Indirect-Buffers.html">indirect buffers</a> are completely foreign to them
<span><small>
Unfortunately for Emacs, its current design rules out some clever ideas that other editors have implemented.  One example of this is the <a href="https://github.com/perky/4coder_loco">4coder’s yeetsheet</a> or <a href="https://www.youtube.com/watch?v=GB_oTjVVgDc">Dion systems’ views</a>: You can have buffers whose contents are “live” substrings of multiple other buffers, <em>i.e.</em> you can mix and match <em>pieces</em> of buffers.  In Emacs the most you can have is indirect buffers, <em>i.e.</em> full “live” copies of a buffer.
</small></span>
.</p>
<p>Emacs allows you to do a lot more, but users have to contend with this cognitive cost.  New users pay thrice: they have to deal with getting windows into the right places in the frame, getting buffers into the right windows, <em>and</em> they miss out on the upside because they don’t yet realize what this decoupling makes possible.  Hopefully this write-up can address two of these costs.</p>
<p>For reference in the rest of this article, here’s a non-exploded schematic of an Emacs frame, with the left window selected:</p>
<figure><img src="https://karthinks.com/img/emacs-window-chart.png">
</figure>

<ul>
<li>Each colored block is a window, the numbers represent buffers being shown in them.</li>
<li>The active window is the one with a black border.</li>
</ul>

<h3 id="this-article-is-not-about">This article is <strong>not</strong> about…</h3>
<p>Since actions with or on windows in Emacs are primitive, common and unavoidable operations at any level of Emacs usage, this topic is suprisingly subtle, broad and deep, and there’s only so much I can explore in 15,000 words.  So we begin with some disambiguation and a narrowing of focus.  This article is <strong>not</strong> about the following things.</p>
<details open="">
<summary>Rules for displaying buffers</summary>
<div>
<blockquote>
<p>Emacs keeps popping up windows in the wrong places and destroying my window arrangement!</p>
</blockquote>
<p>The situation is… less than ideal.  Displaying buffers in the right windows <em>automagically</em> is generally possible but this configuration is involved and requires knowledge of minutiae of the Emacs API, like <code>window-parameters</code>, slots and dedicated windows.  the <code>display-buffer</code> API is so involved that describing it takes up a big chunk of the Elisp manual, and even that concludes by saying “<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Zen-of-Buffer-Display.html">just go with it</a>”.
<span><small>
And this is the one aimed at developers using elisp.  It’s not even the Emacs user manual!
</small></span>
I mention automatic window management <a href="#deal-with-windows-so-we-don-t-have-to-deal-with-windows">briefly towards the end</a>, but this article is <strong>not</strong> about reining in the behavior of <code>display-buffer</code>.  I recommend <a href="https://www.masteringemacs.org/article/demystifying-emacs-window-manager">Mickey Peterson’s article</a> on demystifying the window manager for this, this <a href="https://protesilaos.com/codelog/2024-02-08-emacs-window-rules-display-buffer-alist/">video by Protesilaos Stavrou</a>, or <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Buffers.html">the manual</a> if you’ve got the stomach for it.</p>
</div>
</details>

<details open="">
<summary>Window configuration persistence, workspaces or buffer isolation</summary>
<div>
<blockquote>
<p>I want Emacs to group together windows for a given task and persist them across sessions!</p>
</blockquote>
<p>Two common factors affecting Emacs use:</p>
<ul>
<li>Emacs sessions tend to be long lasting, and</li>
<li>its gravity pulls users into using it for an increasing number of tasks.</li>
</ul>
<p>The result is that you end up with hundreds of buffers and start looking for ways to group them, isolate the groups and then preserve them.  This is tied to window management, but only in the sense that your arrangement of windows is part of the state you want to preserve.  This is a finicky and complex subject, and well beyond the scope of this write-up.  Take your pick: between  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Tab-Bars.html">tab-bar</a>, <a href="https://github.com/mclear-tools/tabspaces">tabspaces</a>, <a href="https://depp.brause.cc/eyebrowse/">eyebrowse</a>, <a href="https://github.com/minad/tab-bookmark">tab-bookmark</a>, <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Save-Mode.html">desktop.el</a>, <a href="https://github.com/Bad-ptr/persp-mode.el">persp-mode.el</a>, <a href="https://github.com/nex3/perspective-el">perspective</a>, <a href="https://github.com/fritzgrabo/project-tab-groups">project-tab-groups</a>, <a href="https://gitlab.com/protesilaos/beframe">beframe</a> and <a href="https://github.com/alphapapa/activities.el">activities.el</a> there is no paucity of projects to help you do this.</p>
</div>
</details>
<details open="">
<summary>Paradigmatic changes to window behavior in Emacs</summary>
<div>
<blockquote>
<p>Why is window placement in Emacs so capricious? Tiling window managers solved this problem ages ago!</p>
</blockquote>
<p>Some packages provide all-encompassing, radical solutions to window arrangment and management – essentially, they are <em>window managers</em> for Emacs.  For example, <a href="https://gitlab.com/ajgrf/edwina">Edwina</a> modifies Emacs’ manual window-tree based behavior to enforce a master-and-stack <a href="https://dwm.suckless.org/tutorial/">DWM-style auto-tiling layout</a>, with a complete suite of accompanying window management commands.  <a href="https://www.gnu.org/software/hyperbole/man/hyperbole.html#HyControl">HyControl</a> provides a control panel for window layout actions and can display windows in a uniform grid on the frame, among other features.
<span><small>
Apologies for the terse and possibly inaccurate descriptions, I have only brief experience with these.
</small></span>
.</p>
<p>In my experience “complete” solutions like these are great when you start using them, but eventually cause more friction than elation.  This is the case the more you customize Emacs, as the abstractions they build on top of the Emacs API end up limiting, as opposed to liberating you in the long run.</p>
</div>
</details>
<hr>
<p>So what’s left?  In this article, <strong>we mean window management in the manual and mundane sense</strong>: switching window focus, moving buffers around windows, splitting or closing them and so on.  Even if you’ve got <code>display-buffer</code> all sorted out and your windows grouped into workspaces, these are the kinds of things you <em>have</em> to do with windows – repeatedly and often – in the course of minute-to-minute, regular editing.</p>
<p>Let’s address a couple of common concerns and dismissals before we get started in earnest.</p>
<details open="">
<summary>The two-window perspective</summary>
<div>
<blockquote>
<p>This palaver is pointless, I need two windows at most.</p>
</blockquote>
<p>Correction: You need at most two windows <em>at a time</em>.  And that’s partly because corralling windows is a mess in Emacs.  Except during bursts of writing or coding, chances are you need easy access to more than one buffer – for reference material or look-ups, search and compilation results, file access, shells and REPLs, table of contents and so on.  Whether these are on screen in windows all the time or easily displayed on demand is a matter of screen size and preference, but both involve interacting with windows and buffers <em>manually</em>.  Both approaches are thus under the purview of “window management”, and addressed in this article.</p>
</div>
</details>
<details open="">
<summary>The pointer prescription</summary>
<div>
<blockquote>
<p>Just use the mouse?  This isn’t even an issue in most software.</p>
</blockquote>
<p>The mouse is indeed the most natural way to navigate windows.  Without stepping into contentious discussions on economy of motion, RSI trouble or personal preferences, the main problem with the mouse approach is that the lack of a learning curve (relative to the keyboard) is balanced by the lack of expressivity (relative to the keyboard).</p>
<p>Even so, you can <a href="https://karthinks.com/software/different-strokes-for-different-folks/">squeeze a lot more expressivity</a> out of the mouse in Emacs than you can in most other applications
<span><small>
The <a href="https://en.wikipedia.org/wiki/Acme_(text_editor)">ACME editor</a> might be the most notable exception.
</small></span>
.  I use the mouse for managing windows in Emacs often – but only in certain contexts, see <a href="#mousing-around--built-in">Mousing around</a>.</p>
</div>
</details>
<h2 id="warming-up">Warming up</h2>
<p>Our appetizer: a short run-through of the most popular and commonly recommended window management options.  These cover changing the focused window, moving windows around and undoing oopsies, with a side of buffer management and bespoke window actions
<span><small>
This is the part you can skip if you’ve been around the block a few times.  Jump ahead to <a href="#digging-in">digging in</a>.
</small></span>
.</p>
<h3 id="other-window-and-the-next-window--built-in"><code>other-window</code> and the “next window” (built-in)</h3>
<p><code>other-window</code> offers: selecting windows</p>
<p>The <code>other-window</code> (<code>C-x o</code>) command is the baseline window switching experience.  It’s what the Emacs tutorial teaches you, and it works well enough when you have a small number of windows:</p>
<figure><img src="https://karthinks.com/img/other-window-chart.png">
</figure>

<p>The window selection cycles (roughly) clockwise across the frame.  The advantage of this approach is simplicity – it’s a single command and keybinding.  As you might expect or have experienced, it takes progressively more invocations to get somewhere as you accumulate more windows, and works best if you rarely have more than two windows showing at once.</p>
<details open="">
<summary><span><img src="https://karthinks.com/img/emacs-icon.png"></span> Basic <code>other-window</code> tips and tweaks</summary>
<div>
<ol>
<li>It’s possibly one of the most used Emacs commands – bind it to a more convenient key like <code>M-o</code>.</li>
<li>You can use digit arguments to skip windows or to cycle windows backwards.  <code>M-3 M-o</code> will select three windows ahead, and <code>M-- M-2 M-o</code> two windows back.  Unfortunately this requires a visual understanding of the order in which the cycling happens.  It’s not obvious which window is three windows away in more complex window layouts.</li>
<li>Turn on <code>repeat-mode</code> (<code>M-x repeat-mode</code>) to continue switching windows with just <code>o</code> and (backwards) <code>O</code>.  <code>C-x o o o o...</code> or <code>M-o o o o...</code> is faster than <code>C-x o C-x o C-x o...</code>.</li>
</ol>
</div>
</details>
<details>
<summary><span><img src="https://karthinks.com/img/lisp-icon.png"></span>  <code>other-window</code> hacks</summary>
<p>You can make <code>other-window</code> skip over a window by setting its <code>no-other-window</code> window parameter.  A window parameter is a property of Emacs’ window data structure, and there are Elisp functions to set them.  This is usually something you’d specify in advance for certain classes of buffers in <code>display-buffer-alist</code>, not a manual toggle.  If you’ve ever wondered why <code>other-window</code> does not select the windows of fancy file-manager listings (like dired-sidebar or dirvish-side), this is it.</p>
</details>
<p>If you only ever have two windows showing in Emacs, or if you don’t mind punching <code>o</code> a few extra times, you can stop here.  The rest is just varying degrees of optimization applied to a problem that you probably (and perhaps realistically) don’t believe needs solving!</p>

<details open="">
<summary><span><img src="https://karthinks.com/img/emacs-icon.png"></span> Understanding the “next window”</summary>
<p>The “next window” is the window that <code>other-window</code> selects, usually clockwise from the current one.  You can access it in elisp by calling the <code>next-window</code> function.  With daily usage, you automatically develop intuition for the clockwise ordering of windows in an Emacs frame – in the sense that you <em>know</em> instead of <em>think</em>.  This is handy, because the notion of the next window is useful for more than just window selection.  There are better ways to select windows, or there wouldn’t be much to this write-up!  The next window is the default window for commands that operate in another window, like <code>scroll-other-window</code>.  See <a href="#do-you-need-to-switch-windows">Do you need to switch windows?</a></p>
</details>
<h3 id="windmove--built-in"><code>windmove</code> (built-in)</h3>
<p><code>windmove</code> offers: selecting windows, swapping buffers in windows, deleting them</p>
<p>Windmove is a built-in Emacs library for moving the focus across windows – and for moving buffers across windows – by direction.  Vim users, this is what you expected.  <code>evil-mode</code> users, you already use Windmove, you just don’t know it.</p>
<p>If <code>other-window</code> is the alt-tab of Emacs, Windmove is the tiling window manager equivalent.  It makes the spatial arrangement of windows in the frame relevant to the selection, which I imagine is the most natural way to do it short of using the mouse.</p>
<p>Using Windmove is simple: bind <code>windmove-left</code> (resp <code>-right</code>, <code>-up</code> and <code>-down</code>) to a modifier or leader key plus whatever keys you associate with directions: <code>WASD</code>, <code>HJKL</code> or the arrow keys perhaps.</p>
<figure><img src="https://karthinks.com/img/windmove-chart.png">
</figure>

<p>The fork: movement to the right in this schematic depends on what window is exactly to the right of the cursor.  Calling <code>windmove-right</code> from near the top of buffer 1 moves the focus to buffer 2, starting near the bottom moves the focus to 3.</p>
<p>You can also swap the buffers of windows directionally with Windmove, a handy way of rearranging windows on the frame
<span><small>
Again, Windmove is how <code>evil-mode</code> does this.
</small></span>
.  The relevant commands are <code>windmove-swap-states-left</code>, <code>-right</code>, <code>-up</code> and <code>-down</code>.</p>
<figure><img src="https://karthinks.com/img/windmove-swap-chart.png">
</figure>

<p>Note that the focus moves along with the buffer when you do this.</p>
<p>There’s more yet to Windmove, you can delete the window next along any direction with <code>windmove-delete-*</code>, for example.  But we cover better ways to do this below.</p>
<details open="">
<summary><span><img src="https://karthinks.com/img/emacs-icon.png"></span> Tiling manager integration</summary>
<p>If you use Emacs in a tiling environment, you’ve got a nested tiling window manager situation – it might be desirable to integrate the two so you can (wind)move seamlessly across Emacs windows and OS windows with the same keys.  (Vim+tmux users should be familiar with this.)  It takes a bit of work but is quite doable: Pavel Korytov has an <a href="https://sqrtminusone.xyz/posts/2021-10-04-emacs-i3/">i3 integration</a> description for Emacs+i3wm (and possibly Sway), and I wrote one for the <a href="https://github.com/karthink/.emacs.d/blob/master/plugins/emacs-wm.el">qtile</a> window manager.  I discuss this project in <a href="#the-tiling-wm-integrator">more detail below</a>.</p>
</details>
<h3 id="frames-only-mode">frames-only-mode</h3>
<p><a href="https://github.com/davidshepherd7/frames-only-mode">frames-only-mode</a> offers: to leave Emacs window handling to the OS.</p>
<figure><img src="https://karthinks.com/img/frames-only-mode.png">
</figure>

<p>While we’re on the subject of tiling, another resolution to the nested window manager situation – Emacs inside a tiling WM – is to simply not bother with Emacs’ window management.  Opening every buffer in a new frame instead of window makes corralling them the window manager’s job.  This puts Emacs buffers on par with OS windows, and you can manage both with the same keys.</p>
<p>Most other commands described in this write-up (such as Avy, <code>winum</code>, <code>ace-window</code> or <code>scroll-other-window</code>) can work across frames just as easily as windows, meaning that you can have the best of both approaches.  There are bound to be edge cases with other Emacs commands though – many of them make assumptions about being able to split the frame at will
<span><small>
This is especially true of org-mode commands!  Thankfully the Org situation is slowly improving.
</small></span>
.</p>
<p>For Linux users:
I haven’t tried <code>frames-only-mode</code> with Wayland compositors yet.</p>
<h3 id="winum-mode"><code>winum-mode</code></h3>
<p><a href="https://github.com/deb0ch/emacs-winum">winum</a> offers: Selecting and deleting windows</p>
<p>Winum is next in the natural progression of the effort to switch between n windows: From O(n) (<code>other-window</code>) to O(√n) (<code>windmove</code>) to O(1).  It adds window numbers to the mode-line so you can select windows by number:</p>
<figure><img src="https://karthinks.com/img/winum-chart.png">
</figure>

<p>There are two convenient bonus features:</p>
<ul>
<li>Invoking the command to switch to a window with a negative prefix argument deletes the window, and</li>
<li>when the minibuffer is active, it is always assigned the number 0.</li>
</ul>
<p>It’s simple and short, and works across Emacs frames.  <code>winum-mode</code> is the method I use the most for switching windows.</p>
<details open="">
<summary><span><img src="https://karthinks.com/img/lisp-icon.png"></span> Speeding up window access with winum</summary>
<div>
<p>The default keybinding (<code>C-x w &lt;n&gt;</code> to select window <code>n</code>) is too verbose for my liking, as is any other two step keybinding.  If you don’t mind losing access to digit arguments with <code>M-0</code> through <code>M-9</code>, you can use them to select windows instead:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defvar-keymap</span> <span>winum-keymap</span>
</span></span><span><span>  <span>:doc</span> <span>"Keymap for winum-mode actions."</span>
</span></span><span><span>  <span>:suppress</span> <span>'nodigits</span>
</span></span><span><span>  <span>"M-0"</span> <span>'winum-select-window-0-or-10</span>
</span></span><span><span>  <span>"M-1"</span> <span>'winum-select-window-1</span>
</span></span><span><span>  <span>"M-2"</span> <span>'winum-select-window-2</span>
</span></span><span><span>  <span>"M-3"</span> <span>'winum-select-window-3</span>
</span></span><span><span>  <span>"M-4"</span> <span>'winum-select-window-4</span>
</span></span><span><span>  <span>"M-5"</span> <span>'winum-select-window-5</span>
</span></span><span><span>  <span>"M-6"</span> <span>'winum-select-window-6</span>
</span></span><span><span>  <span>"M-7"</span> <span>'winum-select-window-7</span>
</span></span><span><span>  <span>"M-8"</span> <span>'winum-select-window-8</span>
</span></span><span><span>  <span>"M-9"</span> <span>'winum-select-window-9</span>)
</span></span><span><span>(<span>require</span> <span>'winum</span>)
</span></span><span><span>(<span>winum-mode</span>)
</span></span></code></pre></div></div>
</details>
<p>While it is possible to extend <code>winum-mode</code> to include other actions on windows (or on buffers displayed in them) besides switching to or deleting them, there’s little reason to, thanks to the existence of…</p>
<h3 id="ace-window"><code>ace-window</code></h3>
<p>Offers: <em>Any</em> window or buffer management action</p>
<p><a href="https://github.com/abo-abo/ace-window">ace-window</a> is the endgame for keyboard-driven Emacs window control.</p>
<p>The <code>ace-window</code> command places “hints” at the top of each window, and typing in the key switches focus to the corresponding one:</p>
<figure><img src="https://karthinks.com/img/ace-window-chart.png">
</figure>

<p>So far it’s a slightly slower, two-stage version of winum.  You can turn on <code>ace-window-display-mode</code> to have the hints always showing in the mode-line like winum’s window numbers, which speeds up the process a bit:</p>
<figure><img src="https://karthinks.com/img/ace-window-display-mode.png">
</figure>

<p>ace-window is to windows what Avy is to characters on screen
<span><small>
The similar design is not a coincidence.  They’re both authored by <a href="https://oremacs.com/">Oleh Krehel</a>.
</small></span>
.  But jumping to a character on screen is the least useful of the many <a href="https://karthinks.com/software/avy-can-do-anything/">things you can do with Avy</a>.  Similarly, if all ace-window could do was switch windows, there wouldn’t be much to recommend it.  Instead, it offers a generic method to “pick” a window, across all visible Emacs frames if necessary.  What you do with this window is up to you.  Similar to Avy, ace-window can dispatch actions on any window on the screen.  So you can delete windows, move or swap them around, split them, show buffers in them and more – without moving away from your selected window.  These are just the built-in actions, provided as part of ace-window:
<span id="org-target--ace-window-default-actions"></span></p>
<figure><img src="https://karthinks.com/img/ace-dispatch-chart.png">
</figure>

<p>Pressing <code>?</code> when using <code>ace-window</code> brings up the dispatch menu
<span><small>
See <a href="https://karthinks.com/software/fifteen-ways-to-use-embark/">Fifteen ways to use Embark</a> for further explorations of this idea.
</small></span>
.</p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/7OFRShA.mp4" type="video/mp4">
<a href="https://karthinks.com/img/ace-dispatch-demo.mp4">[VIDEO: ace-window dispatch demo]</a>
</video>
<details>
<summary>Play by play</summary>
<div>
<ol>
<li>With two or more windows open, call <code>ace-window</code></li>
<li>Press <code>?</code> to bring up the dispatch menu.</li>
<li>Press the dispatch key to split a window horizontally (<code>v</code> in my video)</li>
<li>Press the ace-window key corresponding to the buffer you want to split (<code>e</code> in my video)</li>
<li>Repeat steps 1 and 2</li>
<li>Press the dispatch key to split a window vertically (<code>s</code> in my video)</li>
<li>Press the ace-window key corresponding to the buffer you want to split (<code>w</code> in my video)</li>
</ol>
</div>
</details>
<h3 id="mousing-around--built-in">Mousing around (built-in)</h3>
<p>The mouse offers: Any window or buffer management action</p>
<p>So, the pointer.  Finally.</p>
<p>The advantanges of using the mouse for window management are immediate and obvious.  Window selection is a natural extension of basic mouse usage.  Resizing windows is a snap.  Context (right-click) menus and drag and drop support, which improve with each new Emacs release, are very intuitive
<span><small>
See <code>context-menu-mode</code>.  Also, while not limited to window management, discoverability via Emacs’ menu-bar is surprisingly good.
</small></span>
.  Unfortunately, I have to address the rodent in the room before we can talk about mitigating the disadvantages, since Emacs users tend to be very opinionated about mouse usage.</p>
<p>I never use the mouse in Emacs… until I’m already using the mouse for something else.  Then driving Emacs with the mouse is actually the <a href="https://karthinks.com/software/different-strokes-for-different-folks/">path of least resistance</a>.  If your hand’s already off the keyboard, it’s pretty easy to drive Emacs with the mouse:</p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/3G9Nk4p.mp4" type="video/mp4">
<a href="https://karthinks.com/img/strokes-window-handling.mp4%22">[VIDEO: strokes window handling demo]</a>
</video>
<details>
<summary>Play by play</summary>
<div>
<p>This demo showcases the use of mouse gestures to do the following:</p>
<ul>
<li>Split the frame vertically and horizontally</li>
<li>Delete windows</li>
<li>Cycle through buffers in windows</li>
<li>Swap windows to the right and left</li>
<li>Toggle between the last two buffers shown in a window</li>
</ul>
</div>
</details>
<p>You may want to turn on focus-follows-mouse behavior:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span><span>;; Consider setting this to a negative number</span>
</span></span><span><span>(<span>setq</span> <span>mouse-autoselect-window</span> <span>t</span>)
</span></span></code></pre></div><h3 id="transpose-frame--rotation-flip-and-flop"><code>transpose-frame</code> (rotation, flip and flop)</h3>
<p><a href="https://github.com/emacsorphanage/transpose-frame">transpose-frame</a> offers: easy window layout transformations.</p>
<p>What it says on the tin: transpose-frame offers commands to rotate or mirror the window layout on the frame.  I found myself using these often enough to bind <code>rotate-frame</code>, <code>flip-frame</code> and <code>flop-frame</code> to suitable keys.  Ironically, the <code>transpose-frame</code> command itself is rarely useful – it transposes along the main diagonal of the frame.</p>
<h4 id="rotate-frame"><code>rotate-frame</code></h4>
<figure><img src="https://karthinks.com/img/rotate-frame-chart.png">
</figure>

<h4 id="flip-frame"><code>flip-frame</code></h4>
<figure><img src="https://karthinks.com/img/flop-frame-chart.png">
</figure>

<h4 id="flop-frame"><code>flop-frame</code></h4>
<figure><img src="https://karthinks.com/img/flip-frame-chart.png">
</figure>

<h3 id="the-window-prefix-map--built-in">The <code>window-prefix-map</code> (built-in)</h3>
<p><code>window-prefix-map</code> offers: Bespoke window management commands</p>
<p>The <code>window-prefix-map</code>, bound to <code>C-x w</code> by default in Emacs, collects a few useful window-management commands:</p>
<h4 id="split-root-window-right-and-split-root-window-below"><code>split-root-window-right</code> and <code>split-root-window-below</code></h4>
<p>Split the root window of the frame.  Better illustrated than explained:</p>
<figure><img src="https://karthinks.com/img/emacs-window-root-frame-split.png">
</figure>

<p>These are bound to <code>C-x w 3</code> and <code>C-x w 2</code> respectively.</p>
<details open="">
<summary><span><img src="https://karthinks.com/img/emacs-icon.png"></span> The window tree</summary>
<p>This is a good time to mention that windows in Emacs are arranged in a tree, with all “real” windows as leaves.  Each splitting action turns a leaf node into a parent of two windows: the window that was split and the new one.  This is very similar to the window arrangement in manual tiling window managers like <code>i3</code> or <code>bspwm</code>, leading to a redundancy we <a href="#the-tiling-wm-integrator">seek to patch over</a>.</p>
</details>
<p>These are the only built-in Emacs commands, to my knowledge, that allow you to modify the tree structure at a non-leaf level that doesn’t just clear the whole tree (as <code>delete-other-windows</code> does).  Practically speaking, these are often useful to create a space for a logically separate task in the frame – the default splitting commands only further dice up existing windows.</p>
<p>Getting to grips with the tree arrangment should make a lot more fine-grained control available, but the tooling isn’t there yet – <a href="#window-tree">see below</a> for a proposal.</p>
<h4 id="tab-detach-and-tear-off-window"><code>tab-detach</code> and <code>tear-off-window</code></h4>
<p>Handy commands to move a window into a new tab or a new frame.</p>
<figure><img src="https://karthinks.com/img/emacs-window-tear-off.png">
</figure>

<p>Like splitting the root window, these are quite handy for logical window management: grab a window and move it into a new tab or frame to start a new task.</p>
<p>These are bound to <code>C-x w ^ t</code> and <code>C-x w ^ f</code>, which <em>sheesh</em>.  You can do these as ace-window dispatch actions instead, since you can do <em>anything</em> with ace-window.  Alternatively you can rebind these to the slightly saner <code>C-x w t</code> and <code>C-x w f</code>, which are currently unbound.  I prefer to just use the mouse when I need to tear off a window:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span><span>;; mouse-9 is the "forward" button on my mousee</span>
</span></span><span><span>(<span>keymap-global-set</span> <span>"M-&lt;mouse-9&gt;"</span> <span>'tear-off-window</span>)
</span></span></code></pre></div><h3 id="the-other-window-prefix--built-in">The <code>other-window-prefix</code> (built-in)</h3>
<p><code>other-window-prefix</code> offers a method to decouple window selection from buffer display, and solves <strong>three</strong> window-related annoyances.</p>
<p><strong>Annoyance I</strong></p>
<p>Many Emacs commands tightly couple a primary action, a buffer and a window.  For example, running <code>find-file</code> involves selecting a file, creating a buffer and displaying it in the current window.  If you want to decouple the choice of window from the command, you have to pick one of several alternate commands: <code>find-file-other-window</code>, <code>find-file-other-tab</code> or <code>find-file-other-frame</code>, each with its own keybinding.  If you want to open the file in read-only mode, you’ve got <code>find-file-read-only</code>, <code>find-file-read-only-other-window</code>, <code>find-file-read-only-other-tab</code> and <code>find-file-read-only-other-frame</code>.  More keybindings.</p>
<p>Want the same choices when selecting a buffer?  You’ve got <code>switch-to-buffer-⋆</code>, another constellation of commands.  Opening a bookmark with <code>bookmark-jump</code>? Pick one of several <code>bookmark-jump-*</code> commands. This is the road to <em>insanity</em>.</p>
<p>The problem is the coupling: picking a window to display a buffer should be a separable action from the command’s primary function: opening a file, in this example.  The solution is to call <code>other-window-prefix</code>, bound to (<code>C-x 4 4</code>).  This makes it so that the next command – <em>any</em> command that involves displaying a buffer in a window – is shown in the <a href="#org-target--window-management-next-window">next window</a>, creating one if necessary.  Now you only need <code>find-file</code>, <code>find-file-read-only</code> and <code>switch-to-buffer</code>, and can use the prefix to redirect the resulting buffer to another window when required:</p>
<ol>
<li>Call <code>other-window-prefix</code> (<code>C-x 4 4</code>)</li>
<li>Call <code>find-file</code>, <code>find-file-read-only</code>, <code>switch-to-buffer</code>, <code>bookmark-jump</code>, or <em>any</em> command that shows a buffer.</li>
<li><em>Result</em>: the buffer is shown in the next window.</li>
</ol>
<p>In a past write-up I’ve <a href="https://karthinks.com/software/fifteen-ways-to-use-embark/#open-any-buffer-by-splitting-any-window">mentioned Embark</a> as <em>the way</em>.  Indeed, Embark solves this problem more elegantly than the built-in <code>other-window-prefix</code>.  But avoiding command proliferation is only the first of three problems <code>other-window-prefix</code> solves.</p>
<p><strong>Annoyance II</strong></p>
<p>In the above examples, we at least have the choice of calling <code>*command*-other-window</code> instead of <code>*command*</code>.  There are just too many options.  More often there are <em>none</em>, and we’re at the mercy of fixed, undesirable behavior.  This is typically the case when activating a link-like object.  In this example (from the <a href="https://github.com/magit/forge/">Forge</a> package), pressing <code>RET</code> on an issue title opens the issue in the current buffer:</p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/sKmFQh0.mp4" type="video/mp4">
<a href="https://karthinks.com/img/other-window-prefix-without.mp4%22">[VIDEO: Forge without other-window-prefix]</a></video>
<details>
<summary>Play by play</summary>
<div>
<p>This is a list of issues from a code repository, as displayed by the Forge package.</p>
<ol>
<li>Press <code>RET</code> on an issue.</li>
<li>It opens in the current window, denying us <a href="#the-back-and-forth-method">the <strong>Listing &amp; Item</strong> pattern</a>: a simultaneous view of the full listing and the selected issue.</li>
</ol>
</div>
</details>
<p>Forge provides no way, as of this writing, to “open a link” in another window.  <code>other-window-prefix</code> to the rescue:
<span id="org-target--window-management-forge-video"></span></p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/lz32LBD.mp4" type="video/mp4">
<a href="https://karthinks.com/img/other-window-prefix-with.mp4%22">[VIDEO: Forge with other-window-prefix]</a></video>
<details>
<summary>Play by play</summary>
<div>
<ol>
<li>Call <code>other-window-prefix</code>, via <code>C-x 4 4</code></li>
<li>Press <code>RET</code> on the issue.  It opens in the “next window” – there isn’t one so a new window is created.</li>
</ol>
</div>
</details>
<p><strong>Annoyance III</strong></p>
<p>The third problem it solves is the combination of the first two.  Consider: Magit, the sibling package to Forge, <em>does</em> provide a way to do this.  It generally opens “links” in the next window if you use a universal arg (<code>C-u</code>) before <code>RET</code>.  Org mode, Notmuch, Elfeed and EWW all provide either no way or mutually distinct ways of opening links in a different window.  If Forge did provide a way, it would actually make things worse in a sense.  With <code>other-window-prefix</code>, you’re blessedly free from having to customize or conform to each package author’s idea of how this should work.  Run <code>other-window-prefix</code>, then activate the “link” object – click on it with the mouse if you’d like.  It’s going to <em>uniformly</em> open in the next window.</p>
<p>See also: <code>same-window-prefix</code> (<code>C-x 4 1</code>), which forces the next command’s buffer (if there is one) to use the current window, and <code>other-frame-prefix</code> (<code>C-x 5 5</code>) and <code>other-tab-prefix</code> (<code>C-x t t</code>), which open the next command’s buffer in a new frame and tab respectively.</p>
<details>
<summary><span><img src="https://karthinks.com/img/emacs-icon.png"></span> What’s with these keybindings?</summary>
<div>
<p>There is a method to the seeming madness of keybindings like <code>C-x 4 4</code>,  <code>C-x 4 1</code> and <code>C-x 5 5</code>.</p>
<p>Keybindings involving specific window actions are grouped into prefixes, like a menu. <code>C-x 4</code>, the <code>ctl-x-4-map</code> broadly contains commands that use the <code>other-window</code>.  For instance, <code>C-x 4 .</code> jumps to the definition of the thing at point (like the default <code>M-.</code>), but in the <code>other-window</code>.  Most commands in the <code>ctl-x-5-map</code> create a new frame.  Tab-bar actions are grouped under <code>C-x t</code>.</p>
<p>The final “base” key in each map follows a consistent pattern: <code>f</code> opens files, <code>r</code> opens things in read-only mode, <code>b</code> switches to buffers and so on.  The final <code>4</code>,  <code>5</code> and <code>t</code> in <code>C-x 4 4</code>,  <code>C-x 5 5</code> and <code>C-x t t</code> reinforce the idea that the next buffer action is going to be redirected to another window, a new frame and tab respectively.</p>
</div>
</details>
<p>Further below we take <a href="#a-window-prefix-command-for-ace-window">this approach to its logical extreme</a> with (what else) ace-window, redirecting the next command’s buffer to any window, including ones we create just-in-time.</p>
<h3 id="saving-and-restoring-window-configurations">Saving and restoring window configurations</h3>
<p><code>window-configuration-to-register</code> is a bit of a blunt instrument, but perfect as a big red reset button, especially if you’re new to Emacs.  At any point, you can save the current window configuration to a register
<span><small>
A register is a named bucket that can hold many kinds of data.  Each register is assigned to a character (like <code>a</code> through <code>z</code>), and operations on register are available under the <code>C-x r</code> prefix.
</small></span>
with this command, bound to <code>C-x r w</code> by default.  After Emacs predictably messes up the frame, you can restore your saved configuration with <code>jump-to-register</code> (<code>C-x r j</code>).  That’s it.</p>
<details>
<summary><span><img src="https://karthinks.com/img/lisp-icon.png"></span> Persisting window configurations across restarts</summary>
<p>The elisp version of <code>window-configuration-to-register</code> is the function <code>current-window-configuration</code>, whose return value you can bind to a variable, and apply to the frame with <code>set-window-configuration</code>.  Coupled with a way to persist this lisp object data to disk, such as with <code>prin1</code> or via a library like <code>persist</code> or <code>multisession</code>, we have the seed of a state restoration feature that works across Emacs sessions.  Needless to say, this approach is rudimentary and you’re better off using one of the many packages listed above in <a href="#org-target--window-configuration-persistence">window configuration persistence</a>.</p>
</details>
<p>One issue with this method is that it restores the window arrangement down to each window’s cursor position, which is rarely what you want.</p>
<p>Another problem is that it requires an unreasonable level of foresight to remember to save window configurations at appropriate times.  If only Emacs could do this automatically for us every time the window configuration changed…</p>
<h3 id="the-oops-options">The “oops” options</h3>
<p>You can ask Emacs to maintain a stack of your past window arrangements, and cycle through them as you would through changes in a buffer with undo/redo.  You’ve got three minor-modes depending on how you use Emacs, and you can turn them on independently.</p>
<dl>
<dt><code>winner-mode</code></dt>
<dd>If you use a single frame and don’t use tabs.  Call <code>winner-undo</code> and <code>winner-redo</code> to undo/redo window configuration changes.</dd>
<dt><code>tab-bar-history-mode</code></dt>
<dd>If you use tabs.  Each tab gets its own history stack.  The relevant commands are <code>tab-bar-history-back</code> and <code>tab-bar-history-forward</code>.</dd>
<dt><code>undelete-frame-mode</code> and <code>tab-undo</code></dt>
<dd>If you use create and delete frames or tabs all the time.  If you close a frame by accident, you can call <code>undelete-frame</code>, bound to <code>C-x 5 u</code>.  Ditto <code>tab-undo</code>, bound to <code>C-x t u</code>.</dd>
</dl>
<p><code>winner-mode</code> &amp; co are frequently recommended as a band-aid for when Emacs messes up your careful manual window arrangement.  I think of this as an antipattern.  If you find yourself using <code>winner-undo</code> (or equivalent) all the time, the problem is Emacs displaying buffers in the wrong windows in the first place, a result of frustrating defaults.  See <a href="#deal-with-windows-so-we-don-t-have-to-deal-with-windows">the whack-a-mole problem</a>.</p>
<h2 id="digging-in">Digging in</h2>
<p>With our appetite whetted, we can move onto our main course: Tweaks, customization and variations of the above tools that I’ve found to work better.</p>
<p>Emacs can be frustrating on two levels.  It’s frustrating at first because you don’t know your way around the place, the keybindings and terminology are obtuse, and nothing works the way it does in other software.  Your attempts at mitigating its perceived shortcomings by installing packages leads to mysterious, cryptic errors.  The single-threadedness makes it too easy to accidentally slow things down to a crawl.  The garbage collector fires at the worst times.  Things that should just work, don’t.  The perceived shortcomings of Emacs are frustrating: <strong>Window management shouldn’t be this complicated!</strong></p>
<p>Over time (years, decades?) you can develop a better mental model of what’s happening under the hood: how Emacs’ event loop works, the anatomy of buffers, windows, keymaps, text properties and overlays – the data structures Emacs is built on.  Perhaps you even steal some sneaking glances at the lumbering behemoth that is <em>redisplay</em>.  You’re familiar with common Elisp idioms and macros, as well as the common traps.  Now the <em>actual</em> shortcomings of Emacs’ API are frustrating: <strong>Window management shouldn’t be this complicated!</strong></p>
<p>Oops.</p>
<p>So here we are.  The rest of this write-up is aimed at someone in between these two kinds of frustration.  It’s mostly me throwing out suggestions, many of them mutually exclusive, that might give you ideas of your own to work with windows.  Implementing these ideas will require a little tweaking, copying code verbatim might not give you the results you expect.  For this reason, I suggest coming back here with a little more Emacs mileage if you’re new to Emacs.</p>
<h3 id="the-back-and-forth-method">The back-and-forth method</h3>
<p>Offers: Quick window selection</p>
<p>An observation: no matter how many simultaneous windows you have or require on screen, most of the time you only need to switch between two of them.  Examples include the <strong>Code &amp; REPL</strong> setup, the <strong>Code &amp; Grep</strong> (search results) setup, and the <strong>Prose &amp; Notes</strong> setup.  The <strong>Listing &amp; Item</strong> pattern is an example outside of programming or prose: this includes a calendar or agenda window with an expanded entry window, or an email inbox window with an opened email.</p>
<p>The other windows on screen usually show useful information – documentation, debugging info, messages, logs or command output, table of contents, a file explorer, document previews – things you glance at often but switch to rarely.</p>
<p>Usually major-modes provide semi-consistent keybindings to switch back and forth between two associated windows – a common example is <code>C-c C-z</code>, used by several programming modes in Emacs to switch between a code window and an associated REPL
<span><small>
This works for Org-babel blocks too via <code>org-babel-switch-to-session</code>, bound via <code>org-babel-map</code> to the slightly different <code>C-c C-v C-z</code>.
</small></span>
.</p>
<p>But we can generalize the idea and provide a command to switch between any pair of windows:</p>
<figure><img src="https://karthinks.com/img/window-back-and-forth.png">
</figure>

<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defun</span> <span>other-window-mru</span> ()
</span></span><span><span>  <span>"Select the most recently used window on this frame."</span>
</span></span><span><span>  (<span>interactive</span>)
</span></span><span><span>  (<span>when-let</span> ((<span>mru-window</span>
</span></span><span><span>              (<span>get-mru-window</span>
</span></span><span><span>               <span>nil</span> <span>nil</span> <span>'not-this-one-dummy</span>)))
</span></span><span><span>    (<span>select-window</span> <span>mru-window</span>)))
</span></span><span><span>
</span></span><span><span>(<span>keymap-global-set</span> <span>"M-o"</span> <span>'other-window-mru</span>)
</span></span></code></pre></div><p>It doesn’t matter how you select the second window for the back-and-forth – you could use the <a href="#mousing-around--built-in">mouse</a>, <a href="#ace-window">ace-window</a>, <a href="#winum-mode">winum</a> or any other method.  <code>other-window-mru</code>’s got you covered from then on.</p>
<h3 id="improving-other-window">Improving <code>other-window</code></h3>
<p>We can retain the basic idea of <code>other-window</code> – move between windows in the frame in some cyclic ordering – but improve the ordering to be more of a DWIM affair
<span><small>
Do-What-I-Mean
</small></span>
.</p>
<p><code>other-window</code> is a simple idea – the simplest you’ll find in this write-up – but you can play around with the order in which windows are selected to better fit how you work.</p>
<h4 id="double-duty">Double duty</h4>
<p>First, you could make <code>other-window</code> split the frame when there’s only one window, giving the command a use when it has none.</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>advice-add</span> <span>'other-window</span> <span>:before</span>
</span></span><span><span>            (<span>defun</span> <span>other-window-split-if-single</span> (<span>&amp;rest</span> <span>_</span>)
</span></span><span><span>              <span>"Split the frame if there is a single window."</span>
</span></span><span><span>              (<span>when</span> (<span>one-window-p</span>) (<span>split-window-sensibly</span>))))
</span></span></code></pre></div><h4 id="switchy-window"><code>switchy-window</code></h4>
<figure><img src="https://karthinks.com/img/switchy-window-order.png" width="300px">
</figure>

<p>Another modification that you might find intuitive is to cycle through windows in order of last use instead of in clockwise spatial order, similar to alt-tab or how some web browsers cycle through tabs.  This is possible with some elbow grease, but this work has been done for us by the <a href="https://elpa.gnu.org/packages/switchy-window.html">switchy-window</a> package, which provides a <code>switchy-window</code> substitute command for <code>other-window</code>.</p>
<p>When cycling through windows, switchy-window waits for a window to stay selected for a couple of seconds before marking it as used and updating the recency list.  In practice this works quite seamlessly – calling <code>switchy-window</code> moves you to to where you need to be most of the time.</p>
<p>That said, I usually prefer the simpler variant described in <a href="#the-back-and-forth-method">the back-and-forth method</a>.</p>
<h4 id="other-window-alternating"><code>other-window-alternating</code></h4>
<p>And speaking of back-and-forth, here’s another <code>other-window</code> variant – it might sound confusing at first, but turns out to be a pleasingly DWIM affair.  Except when chaining <code>other-window</code>, reverse the window-switching direction after each call.  With just two windows, this makes no difference.  With more, this makes alternating between two windows natural, even when the windows are not adjacent in the cyclic ordering.</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defalias</span> <span>'other-window-alternating</span>
</span></span><span><span>    (<span>let</span> ((<span>direction</span> <span>1</span>))
</span></span><span><span>      (<span>lambda</span> (<span>&amp;optional</span> <span>arg</span>)
</span></span><span><span>        <span>"Call </span><span>`other-window'</span><span>, switching directions each time."</span>
</span></span><span><span>        (<span>interactive</span>)
</span></span><span><span>        (<span>if</span> (<span>equal</span> <span>last-command</span> <span>'other-window-alternating</span>)
</span></span><span><span>            (<span>other-window</span> (<span>*</span> <span>direction</span> (<span>or</span> <span>arg</span> <span>1</span>)))
</span></span><span><span>          (<span>setq</span> <span>direction</span> (<span>-</span> <span>direction</span>))
</span></span><span><span>          (<span>other-window</span> (<span>*</span> <span>direction</span> (<span>or</span> <span>arg</span> <span>1</span>)))))))
</span></span><span><span>
</span></span><span><span>(<span>keymap-global-set</span> <span>"M-o"</span> <span>'other-window-alternating</span>)
</span></span><span><span>
</span></span><span><span><span>;; repeat-mode integration</span>
</span></span><span><span>(<span>put</span> <span>'other-window-alternating</span> <span>'repeat-map</span> <span>'other-window-repeat-map</span>)
</span></span><span><span>(<span>keymap-set</span> <span>other-window-repeat-map</span> <span>"o"</span> <span>'other-window-alternating</span>)
</span></span></code></pre></div><h3 id="window-magic-with-ace-window-dispatch">Window magic with <code>ace-window</code> dispatch</h3>
<p><code>ace-window</code> is to windows what <code>completing-read</code> is to lists of strings, or Avy to characters on screen.  This makes it ideal as the first two of a three-step process to invoke <em>any</em> action on <em>any</em> window: the <span>filter</span> and <span>selection</span> steps:</p>
<figure><img src="https://karthinks.com/img/emacs-window-selection-pattern.png">
</figure>

<h4 id="aw-select-the-completing-read-for-emacs-windows"><code>aw-select</code>, the <code>completing-read</code> for Emacs windows</h4>
<p>The way ace-window is designed to be extended is by defining an “ace-window action” and adding a binding for it in <code>aw-dispatch-alist</code>
<span><small>
It ships with several predefined actions, captured in <a href="#org-target--ace-window-default-actions">this schematic above</a>.
</small></span>
.  This function accepts a window and does something useful with it.  The <code>ace-window</code> command acts as the entry point:</p>
<figure><img src="https://karthinks.com/img/emacs-window-selection-via-ace.png">
</figure>

<p>This control flow is generally similar to how Avy works.  But as a <code>completing-read</code> alternative, this is somewhat lacking – we’d like to flip the pattern around and use <code>ace-window</code>’s selection method in <em>our</em> commands.  Conveniently, <code>aw-select</code> does exactly that.</p>
<figure><img src="https://karthinks.com/img/emacs-window-selection-ace-inside.png">
</figure>

<p>The basic pattern is very simple: the call <code>(aw-select nil)</code>
<span><small>
The argument to <code>aw-select</code> is for adding a message to the mode-line during the selection process, we don’t bother with that.
</small></span>
returns the window we select, which we can use for our task.  One example of such a task is to <a href="#scroll-other-window--built-in">set the window</a> that <code>scroll-other-window</code> should scroll.  Here are a couple more, but don’t try them just yet!  We’re going to generalize the idea a little further below.</p>
<p><strong><code>tear-off-window</code> or <code>tab-window-detach</code></strong></p>
<p>Every interactive window command in Emacs acts on the current window.  Here we make a couple of commands in the <a href="#the-window-prefix-map--built-in"><code>window-prefix-map</code> (<code>C-x w</code>)</a> something you can apply interactively to any window.</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defun</span> <span>ace-tear-off-window</span> ()
</span></span><span><span>  <span>"Select a window with ace-window and tear it off the frame.
</span></span></span><span><span><span>
</span></span></span><span><span><span>This displays the window in a new frame, see </span><span>`tear-off-window'</span><span>."</span>
</span></span><span><span>  (<span>interactive</span>)
</span></span><span><span>  (<span>when-let</span> ((<span>win</span> (<span>aw-select</span> <span>" ACE"</span>))
</span></span><span><span>             (<span>buf</span> (<span>window-buffer</span> <span>win</span>))
</span></span><span><span>             (<span>frame</span> (<span>make-frame</span>)))
</span></span><span><span>    (<span>select-frame</span> <span>frame</span>)
</span></span><span><span>    (<span>pop-to-buffer-same-window</span> <span>buf</span>)
</span></span><span><span>    (<span>delete-window</span> <span>win</span>)))
</span></span><span><span>
</span></span><span><span>(<span>defun</span> <span>ace-tab-window-detach</span> ()
</span></span><span><span>  <span>"Select a window with ace-window and move it to a new tab."</span>
</span></span><span><span>  (<span>interactive</span>)
</span></span><span><span>  (<span>when-let</span> ((<span>win</span> (<span>aw-select</span> <span>" ACE"</span>)))
</span></span><span><span>    (<span>with-selected-window</span> <span>win</span>
</span></span><span><span>      (<span>tab-window-detach</span>))))
</span></span></code></pre></div><p>Of course, defining one ace-window-based command for each action isn’t a scalable or useful way to go about this.  It would be preferable to decouple the window selection step from the action step and generalize the latter.  We explore two distinct approaches to do this, starting with…</p>
<h4 id="ace-window-one-command-any-command-with-ace-window"><code>ace-window-one-command</code>: Any command with ace-window</h4>
<p>Generalizing the above examples gives us a pretty good idea of what the flipped <code>ace-window</code> pattern should look like.  The most general and composable version would be the following:</p>
<ol>
<li>Call <code>aw-select</code> to pick a window (the <code>completing-read</code> step)</li>
<li>Run any action in this window</li>
<li>Switch back to the original window.</li>
</ol>
<p>We can do this by simulating Emacs’ event loop, but in the chosen window: Switch windows, then read any key sequence and execute it before switching back.</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defun</span> <span>ace-window-one-command</span> ()
</span></span><span><span>  (<span>interactive</span>)
</span></span><span><span>  (<span>let</span> ((<span>win</span> (<span>aw-select</span> <span>" ACE"</span>)))
</span></span><span><span>    (<span>when</span> (<span>windowp</span> <span>win</span>)
</span></span><span><span>      (<span>with-selected-window</span> <span>win</span>
</span></span><span><span>        (<span>let*</span> ((<span>command</span> (<span>key-binding</span>
</span></span><span><span>                         (<span>read-key-sequence</span>
</span></span><span><span>                          (<span>format</span> <span>"Run in %s..."</span> (<span>buffer-name</span>)))))
</span></span><span><span>               (<span>this-command</span> <span>command</span>))
</span></span><span><span>          (<span>call-interactively</span> <span>command</span>))))))
</span></span><span><span>
</span></span><span><span>(<span>keymap-global-set</span> <span>"C-x O"</span> <span>'ace-window-one-command</span>)
</span></span></code></pre></div><p>In a demo, this looks the same as <code>ace-window</code>, except that you select the window before executing the action.  The win here is the action: it works with <em>any</em> simple command, there is no need to pre-configure actions in <code>aw-dispatch-alist</code>.  There’s nothing to set up or memorize.  In this demo I use <code>ace-window-run-command</code> to shrink an unselected window with <code>C-x -</code> (the descriptively named <code>shrink-window-if-larger-than-buffer</code>)</p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/ov2rxst.mp4" type="video/mp4">
<a href="https://karthinks.com/img/ace-window-one-command-demo.mp4%22">[VIDEO: ace-window-one-command demo]</a></video>
<details>
<summary>Play by play</summary>
<div>
<ol>
<li>Pulse the line to show which window is active.</li>
<li>Call <code>ace-window-one-action</code> and select the Occur buffer to the top left.  Emacs waits for you to execute any single command.</li>
<li>Run <code>shrink-window-if-larger-than-buffer</code>, using <code>C-x -</code>.  This shrinks the Occur buffer, our cursor position and window is unchanged.</li>
</ol>
</div>
</details>
<p><code>ace-window-one-command</code> is a convenient way to quickly run any command in a different window, an idea we explore in <a href="#switch-and-return-actions-in-other-windows">more detail below</a>.</p>
<details>
<summary><span><img src="https://karthinks.com/img/emacs-icon.png"></span> Embark much?</summary>
<p>This reversal of Emacs’ (and ace-window’s) usual paradigm of <span>action</span> → <span>selection</span> is at the heart of Embark, as covered in my write-up on <a href="https://karthinks.com/software/fifteen-ways-to-use-embark/">ways to use Embark</a>.  Of course, this “object-first” approach is only one way to look at it – Embark has many hearts.</p>
</details>
<h4 id="a-window-prefix-command-for-ace-window">A window-prefix command for <code>ace-window</code></h4>
<p>Handy as it is, the <a href="#the-other-window-prefix--built-in"><code>other-window-prefix</code> system</a> has the same problem as the <code>other-window</code> command: it enforces a rigid cyclic ordering on the window it will pick, and about the most we can consistently expect is that the active window will not be taken over by the next command.  We can do better.</p>
<p><code>aw-select</code> gives us a bespoke solution with more control: we select the window that should be used if the next command involves displaying a buffer in a window.  In this example, we explicitly pick a window to show a man page in, since the “next window” is not where we want it:</p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/2dHJZAP.mp4" type="video/mp4">
<a href="https://karthinks.com/img/ace-window-prefix-demo-alt.mp4%22">[VIDEO ace-window-prefix Man demo]</a></video>
<details>
<summary>Play by play</summary>
<div>
<ol>
<li>Pulse the line to indicate the active window (lower left)</li>
<li>Run <code>ace-window-dispatch</code> (<code>C-x 4 o</code>), then <code>M-x man</code> and choose <code>curl(1)</code>.  Emacs waits for us to pick a window.</li>
<li>Pick the window on the right with “e”.  The Man page is displayed in that window.</li>
</ol>
<p>Note that the Man elisp library actually offers a suite of options to customize where it should be displayed, in the fiddly way typical of all things Emacs.  We can sidestep that whole undertaking here.</p>
</div>
</details>
<p>Here’s the <a href="#org-target--window-management-forge-video">example from above</a> of viewing a Forge link in a busy frame with many windows.  We compare the result of using <code>other-window-prefix</code>, where a random window is chosen, to using <code>ace-window-prefix</code>, where we can pick a specific window:</p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/BBa6AJu.mp4" type="video/mp4">
<a href="https://karthinks.com/img/ace-window-prefix-demo.mp4%22">[VIDEO ace-window-prefix Forge demo]</a></video>
<details>
<summary>Play by play</summary>
<div>
<p>In this frame, the window “next” to the Forge topics window (the bottome one) is the one window at the top left.</p>
<ol>
<li>Move down to the last listed topic and pulse the line (so you can find the active window)</li>
<li>Call <code>other-window-prefix</code> (<code>C-x 4 4</code>) and press <code>RET</code> on the “link”.  It opens in the top left window, not where we’d like to see it.</li>
<li>Call <code>tab-bar-history-back</code> to restore the previous window configuration.</li>
<li>Call <code>ace-window-prefix</code> (<code>C-x 4 o</code>) instead, and press <code>RET</code>.  Emacs waits for us to pick a window to show the resulting buffer in.</li>
<li>Pick the window on the right with “r”.  Forge shows the link contents in that window.</li>
</ol>
</div>
</details>
<p><code>ace-window</code> works across visible frames, so we can pick any Emacs window on our screen.  Even better, we can use <code>ace-window</code> actions to create new windows on the fly and use them instead.  Here I use an <code>ace-window</code> action to create a new window to be used by the next command:</p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/DFNqQyC.mp4" type="video/mp4">
<a href="https://karthinks.com/img/ace-window-prefix-demo-2.mp4%22">[VIDEO: ace-window-prefix demo 2]</a></video>
<details>
<summary>Play by play</summary>
<div>
<p>Normally, activating an Org mode link opens it in the current window or the next one, depending on your Org settings.  We want something different.</p>
<ol>
<li>Press <code>RET</code> on the link to open the image in the next window.</li>
<li>Press <code>q</code> to quit and return to the Org buffer.</li>
<li>Call <code>ace-window-prefix</code> and press <code>RET</code> on the link.  Emacs waits for us to pick a window to show the linked file in.</li>
<li>Use an <code>ace-window</code> action to split a window and select the split.  The action now finishes and the linked image is shown in that window.</li>
</ol>
</div>
</details>
<p>The implementation of <code>ace-window-prefix</code> is actually simpler than <code>other-window-prefix</code>:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defun</span> <span>ace-window-prefix</span> ()
</span></span><span><span>  <span>"Use </span><span>`ace-window'</span><span> to display the buffer of the next command.
</span></span></span><span><span><span>The next buffer is the buffer displayed by the next command invoked
</span></span></span><span><span><span>immediately after this command (ignoring reading from the minibuffer).
</span></span></span><span><span><span>Creates a new window before displaying the buffer.
</span></span></span><span><span><span>When </span><span>`switch-to-buffer-obey-display-actions'</span><span> is non-nil,
</span></span></span><span><span><span></span><span>`switch-to-buffer'</span><span> commands are also supported."</span>
</span></span><span><span>  (<span>interactive</span>)
</span></span><span><span>  (<span>display-buffer-override-next-command</span>
</span></span><span><span>   (<span>lambda</span> (<span>buffer</span> <span>_</span>)
</span></span><span><span>     (<span>let</span> (<span>window</span> <span>type</span>)
</span></span><span><span>       (<span>setq</span>
</span></span><span><span>        <span>window</span> (<span>aw-select</span> (<span>propertize</span> <span>" ACE"</span> <span>'face</span> <span>'mode-line-highlight</span>))
</span></span><span><span>        <span>type</span> <span>'reuse</span>)
</span></span><span><span>       (<span>cons</span> <span>window</span> <span>type</span>)))
</span></span><span><span>   <span>nil</span> <span>"[ace-window]"</span>)
</span></span><span><span>  (<span>message</span> <span>"Use </span><span>`ace-window'</span><span> to display next command buffer..."</span>))
</span></span></code></pre></div><p>In keeping with the keybinding pattern for the <code>⋆-window-prefix</code> commands, we bind it to <code>C-x 4 o</code></p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>keymap-global-set</span> <span>"C-x 4 o"</span> <span>'ace-window-prefix</span>)
</span></span></code></pre></div><h2 id="do-you-need-to-switch-windows"><em>Do</em> you need to switch windows?</h2>
<p>Let’s pause for a moment to ask a basic question:  <em>why</em> do you need to switch windows in the first place?  A little reductive thinking distills the answer down to two – and only two – possibilities:</p>
<ol>
<li><strong>Switch and stay</strong>: To work persistently in the destination window, for some measure of “work”: this covers text editing in all its forms.  In this event the window we switch to becomes our primary work area.</li>
<li><strong>Switch and return</strong>: To interact with the window or its contents briefly.  Perhaps we want to scroll through, or copy some text before moving back, or to delete the window.  In this event the window is a temporary destination, for auxiliary purposes.</li>
</ol>
<p>In either case, switching windows is a cost, not our objective.  Ideally this should happen automatically as part of our editing process.  So why not just “fold” this little chore into our primary editing action?</p>
<h3 id="switch-and-stay-avy-as-a-window-switcher">Switch and stay: Avy as a window switcher</h3>
<p>Eventually any kind of navigation in Emacs <a href="https://karthinks.com/software/avy-can-do-anything/">comes down to Avy</a>.  If you are switching windows to edit (or select) text, you intend to move to a specific point on the screen.  Getting the cursor there is a two step process: switch windows, move the cursor to the right location.  Avy short-circuits this process into a single action.  It treats the frame as a single pool of jump locations: in helping you jump to any character(s) on the screen, it moves you across windows seamlessly:</p>
<video width="700" controls="">
<source src="https://i.imgur.com/6DP2Rnx.mp4" type="video/mp4">
<a href="https://karthinks.com/img/avy-basic-demo.mp4">[VIDEO: Jumping with Avy]</a>
</video>
<details>
<summary>Play by play</summary>
<div>
<ol>
<li>Call <code>avy-goto-char-timer</code></li>
<li>Type in “se”. This shows hints for all matches with “se”, including “sentence”.</li>
<li>Type in the hint char corresponding to “sentence”, which is <code>g</code> here.</li>
</ol>
</div>
</details>
<p>With a slight mental shift you can stop thinking of windows as distinct objects entirely, at least for the purposes of navigation.  Any character(s) – across all visible Emacs windows and frames – is a couple of keypresses away.  And it’s not the only way to jump across windows: you can jump back to your starting point (switching windows in the process) with <code>pop-global-mark</code>, for instance:</p>
<video width="700" controls="">
<source src="https://i.imgur.com/W4uUzso.mp4" type="video/mp4">
<a href="https://karthinks.com/img/avy-jump-back-demo-2.mp4">[VIDEO: Jumping with Avy and pop-global-mark]</a>
</video>
<details>
<summary>Play by play</summary>
<div>
<ol>
<li>Call <code>avy-goto-char-timer</code></li>
<li>Type in “demo”. There is only one candidate for this string, so Avy jumps to the other window.</li>
<li>Type in “jump”. This shows hints for all matches with “jump”.</li>
<li>Pick one of the matches. Avy jumps again, this time to the third window.</li>
<li>Call <code>pop-global-mark</code> (<code>C-x C-SPC</code>) to jump back to the previous location.</li>
<li>Call <code>pop-global-mark</code> (<code>C-x C-SPC</code>) again to jump back to the previous location.</li>
</ol>
</div>
</details>
<details>
<summary><span><img src="https://karthinks.com/img/emacs-icon.png"></span> Making Avy window-agnostic</summary>
<div>
<p>If Avy does not move you across windows and frames, you probably need to customize <code>avy-all-windows</code>.</p>
<p>While we’re here, consider customizing <code>avy-style</code>, there’s more than one way to jump with Avy!</p>
</div>
</details>
<p>Of course, this only scratches the surface of what you can do with Avy, but that’s well tread ground at this point.</p>
<h3 id="switch-and-return-actions-in-other-windows">Switch and return: Actions in other windows</h3>
<p>And here’s the other case.  Often the reason you switch windows is to run a single logical action – perhaps a compound action like isearching to focus the view somewhere, before switching back to your main buffer.  This is the switch → act → switch-back dance.</p>
<p>We’re going to automate this dance away in steps, working through solutions obvious and specific, through to repeatable and general, ending at the abstract and generic.</p>
<p>The obvious first: if you find yourself performing this dance repeatedly, you can automate it with a keyboard macro (left as an exercise for the reader).  If the action is something you do all the time, you can go a step further and write a general-purpose command. <a href="#ace-window-one-command-any-command-with-ace-window"><code>ace-window-one-command</code> above</a> would be one way to do it.  Emacs paves the way for us with…</p>
<h3 id="scroll-other-window--built-in"><code>scroll-other-window</code> (built-in)</h3>
<p><code>scroll-other-window</code> and <code>scroll-other-window-down</code> have been part of Emacs for ages, perhaps because it fits neatly into the two-window paradigm that Emacs’ default settings are suited for: editing in one window while using the contents of the other one as a reference.  You can scroll up and down in the other window without leaving this one.  Note that this works with any number of windows: the window that is scrolled is the “<a href="#other-window-and-the-next-window--built-in">next window</a>”, clockwise from the current one.  In this schematic, the selected window is the one with the border, the one that <code>scroll-other-window</code> scrolls is the one with the arrows:</p>
<figure><img src="https://karthinks.com/img/scroll-other-window.png">
</figure>

<p>With more than two windows this requires careful placement of windows to work as expected.  For instance, you cannot have three side-by-side buffers (1-3 above) and use 1 as a reference when working in both 2 and 3, since <code>scroll-other-window</code> in 2 will scroll 3.  Thankfully, we can specify the rule by which to select the window for scrolling.  One option is</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>setq</span> <span>other-window-scroll-default</span> <span>#'</span><span>get-lru-window</span>)
</span></span></code></pre></div><p>which will always scroll the least-recently-used window, since you won’t be wading into buffer 1 – the reference – often.  Alternatively, you might want <code>scroll-other-window</code> in buffers 2 and 3 to scroll each other as you switch between them and ignore buffer 1.  You’d then use the most-recently-used window:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>setq</span> <span>other-window-scroll-default</span>
</span></span><span><span>      (<span>lambda</span> ()
</span></span><span><span>        (<span>or</span> (<span>get-mru-window</span> <span>nil</span> <span>nil</span> <span>'not-this-one-dummy</span>)
</span></span><span><span>            (<span>next-window</span>)               <span>;fall back to next window</span>
</span></span><span><span>            (<span>next-window</span> <span>nil</span> <span>nil</span> <span>'visible</span>))))
</span></span></code></pre></div><p>This works great with <a href="#the-back-and-forth-method">The back-and-forth method</a>.</p>
<details>
<summary><span><img src="https://karthinks.com/img/lisp-icon.png"></span> Setting the window to scroll</summary>
<div>
<p>There is another way to change the window that is scrolled instead: by setting a variable (<code>other-window-scroll-buffer</code>), you can specify the buffer whose window should be scrolled instead of the next window.  But this is mostly an option for package authors.  To do it on the fly, we’d need to write another elisp command, something like</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defun</span> <span>ace-set-other-window</span> ()
</span></span><span><span>  <span>"Select a window with ace-window and set it as the \"other
</span></span></span><span><span><span>window\" for the current one."</span>
</span></span><span><span>  (<span>when-let*</span> ((<span>win</span> (<span>aw-select</span> <span>" ACE"</span>))
</span></span><span><span>              (<span>buf</span> (<span>window-buffer</span> <span>buf</span>)))
</span></span><span><span>    (<span>setq-local</span> <span>other-window-scroll-buffer</span> <span>buf</span>)))
</span></span></code></pre></div><p>This is only useful if we want this association to be persistent.  Otherwise the LRU/MRU method does what we need most of the time.  See also <a href="#master-mode-and-scroll-all-mode">master-mode</a> below.</p>
</div>
</details>
<details open="">
<summary><span><img src="https://karthinks.com/img/emacs-icon.png"></span> Scrolling other windows: minutiae</summary>
<div>
<ol>
<li>
<p>The viability of the default bindings for <code>scroll-other-window</code> (<code>C-M-v</code> and <code>C-M-S-v</code>) depends on your tolerance for modifiers.  A good candidate for remapping, especially if you use a modal input method.  <code>C-M-v</code> can be invoked as <code>ESC C-v</code> already, I bind the other one to <code>ESC M-v</code>.</p>
</li>
<li>
<p><code>scroll-other-window</code> works from the minibuffer too.  The window scrolled is usually the one that the minibuffer-using command was invoked from, and can be set explicitly as the value of <code>minibuffer-scroll-window</code>.</p>
</li>
<li>
<p>From Emacs 29 onwards, <code>scroll-other-window</code> is better at handling non-text buffers like PDFs, where scrolling is handled by special functions.  It now calls whatever the standard scrolling commands (<code>scroll-up-command</code> and <code>scroll-down-command</code>) are bound to.  To scroll PDF buffers managed by the pdf-tools package in the “next window” position, for instance:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>   (<span>with-eval-after-load</span> <span>'pdf-tools</span>
</span></span><span><span>     (<span>keymap-set</span> <span>pdf-view-mode-map</span> <span>"&lt;remap&gt; &lt;scroll-up-command&gt;"</span>
</span></span><span><span>                 <span>#'</span><span>pdf-view-scroll-up-or-next-page</span>)
</span></span><span><span>     (<span>keymap-set</span> <span>pdf-view-mode-map</span> <span>"&lt;remap&gt; &lt;scroll-down-command&gt;"</span>
</span></span><span><span>                 <span>#'</span><span>pdf-view-scroll-down-or-previous-page</span>))
</span></span></code></pre></div><p>Another example: after rebinding the regular paging commands via <code>pixel-scroll-precision-mode</code>, <code>scroll-other-window</code> will smooth-scroll the other window:</p>
<video preload="metadata" width="600" controls="">
<source src="https://i.imgur.com/24MKcsv.mp4" type="video/mp4">
<a href="https://karthinks.com/img/scroll-other-window-precision-demo.mp4%22">[VIDEO: smooth-scrolling with scroll-other-window]</a></video>
</li>
</ol>
</div>
</details>
<h3 id="isearch-other-window"><code>isearch-other-window</code></h3>
<p>Continuing with the idea of using a buffer in another window as a reference, a straightforward extension of <code>scroll-other-window</code> is to search the “next window” instead
<span><small>
<code>isearch</code> is a fantastic navigational tool.
</small></span>
.  We make sure to search in the same window that we’ve configured to scroll with <code>scroll-other-window</code> above.</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defun</span> <span>isearch-other-window</span> (<span>regexp-p</span>)
</span></span><span><span>    <span>"Function to isearch-forward in the next window.
</span></span></span><span><span><span>
</span></span></span><span><span><span>With prefix arg REGEXP-P, perform a regular expression search."</span>
</span></span><span><span>    (<span>interactive</span> <span>"P"</span>)
</span></span><span><span>    (<span>unless</span> (<span>one-window-p</span>)
</span></span><span><span>      (<span>with-selected-window</span> (<span>other-window-for-scrolling</span>)
</span></span><span><span>        (<span>isearch-forward</span> <span>regexp-p</span>))))
</span></span><span><span>
</span></span><span><span>(<span>keymap-global-set</span> <span>"C-M-s"</span> <span>#'</span><span>isearch-other-window</span>)
</span></span></code></pre></div><p>The function <code>other-window-for-scrolling</code> returns a suitable window, respecting our choice of <code>other-window-scroll-default</code> above.</p>
<p>Here’s an example of using <code>isearch-other-window</code> to work in a shell and a documentation (Man) buffer together:</p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/5BDYIsk.mp4" type="video/mp4">
<a href="https://karthinks.com/img/isearch-other-window-demo.mp4%22">[VIDEO: isearch-other-window demo]</a></video>
<details>
<summary>Play by play</summary>
<div>
<ol>
<li>Type in a partial Curl command</li>
<li>Invoke <code>isearch-other-window</code> (<code>C-M-s</code> here), which starts searching the Man buffer</li>
<li>Search for <code>--ssl revoke</code>, which finds the option we’re looking for.  (This special matching behavior is from setting <code>isearch-whitespace-regexp</code>.)</li>
<li>Pressing <code>RET</code> ends isearch and we’re back in the shell.</li>
<li>Scroll the other window with <code>scroll-other-window</code>, then use <code>hippie-expand</code> to type in the argument we want.</li>
</ol>
</div>
</details>
<p>The keybinding <code>C-M-s</code> is already bound to <code>isearch-forward-regexp</code>, but there are many other ways to call that command: via a prefix arg to <code>isearch-forward</code> (<code>C-u C-s</code>), or by toggling regexp search with <code>M-r</code> when isearching, for instance.</p>
<details>
<summary><span><img src="https://karthinks.com/img/lisp-icon.png"></span> Performing actions in other windows</summary>
<div>
<p>There are two simple ways to temporarily switch to another window in elisp: <code>(save-window-excursion (select-window somewin) ...)</code> and <code>(with-selected-window somewin ...)</code>.</p>
<p>For our purposes, the difference between them is that the former restores the window configuration at the time it was executed, which includes the buffer positions relative to the windows and the values of <code>(point)</code> in the buffer.  The latter persists changes across the frame, and is typically what we want.  If the changes were not persistent, there would be no point to this exercise!</p>
</div>
</details>
<h3 id="switch-buffers-in-the-next-window-dot">Switch buffers in the next window.</h3>
<p>You can have hundreds of buffers in Emacs but only a handful of windows.  This is, in fact, the source of the window management problem.  So any comprehensive solution has to involve changing buffers shown in existing windows.  The ace-window <a href="#ace-window">dispatch system</a> is one solution.  But the built-in <code>next-buffer</code> and <code>previous-buffer</code> commands offer another easy 80% solution to changing buffers shown in other windows: we just automate away the window switching dance.  We don’t need a dedicated <code>next-buffer-other-window</code> command for this – we can just replace <code>next-buffer</code> with the new function.</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defun</span> <span>my/next-buffer</span> (<span>&amp;optional</span> <span>arg</span>)
</span></span><span><span>  <span>"Switch to the next ARGth buffer.
</span></span></span><span><span><span>
</span></span></span><span><span><span>With a universal prefix arg, run in the next window."</span>
</span></span><span><span>  (<span>interactive</span> <span>"P"</span>)
</span></span><span><span>  (<span>if-let</span> (((<span>equal</span> <span>arg</span> <span>'</span>(<span>4</span>)))
</span></span><span><span>           (<span>win</span> (<span>other-window-for-scrolling</span>)))
</span></span><span><span>      (<span>with-selected-window</span> <span>win</span>
</span></span><span><span>        (<span>next-buffer</span>)
</span></span><span><span>        (<span>setq</span> <span>prefix-arg</span> <span>current-prefix-arg</span>))
</span></span><span><span>    (<span>next-buffer</span> <span>arg</span>)))
</span></span><span><span>
</span></span><span><span>(<span>defun</span> <span>my/previous-buffer</span> (<span>&amp;optional</span> <span>arg</span>)
</span></span><span><span>  <span>"Switch to the previous ARGth buffer.
</span></span></span><span><span><span>
</span></span></span><span><span><span>With a universal prefix arg, run in the next window."</span>
</span></span><span><span>  (<span>interactive</span> <span>"P"</span>)
</span></span><span><span>  (<span>if-let</span> (((<span>equal</span> <span>arg</span> <span>'</span>(<span>4</span>)))
</span></span><span><span>           (<span>win</span> (<span>other-window-for-scrolling</span>)))
</span></span><span><span>      (<span>with-selected-window</span> <span>win</span>
</span></span><span><span>        (<span>previous-buffer</span>)
</span></span><span><span>        (<span>setq</span> <span>prefix-arg</span> <span>current-prefix-arg</span>))
</span></span><span><span>    (<span>previous-buffer</span> <span>arg</span>)))
</span></span></code></pre></div><p>And we can take over <code>next-buffer</code> and <code>previous-buffer</code>:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>keymap-global-set</span> [<span>remap</span> <span>next-buffer</span>] <span>'my/next-buffer</span>)
</span></span><span><span>(<span>keymap-global-set</span> [<span>remap</span> <span>previous-buffer</span>] <span>'my/previous-buffer</span>)
</span></span></code></pre></div><p>Finally, we define a fallback version of <code>switch-to-buffer</code> and shove all of these into a repeat-map so we can call them consecutively with <code>n</code>, <code>p</code> and <code>b</code>:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span><span>;; switch-to-buffer, but possibly in the next window</span>
</span></span><span><span>(<span>defun</span> <span>my/switch-buffer</span> (<span>&amp;optional</span> <span>arg</span>)
</span></span><span><span>  (<span>interactive</span> <span>"P"</span>)
</span></span><span><span>  (<span>run-at-time</span>
</span></span><span><span>   <span>0</span> <span>nil</span>
</span></span><span><span>   (<span>lambda</span> (<span>&amp;optional</span> <span>arg</span>)
</span></span><span><span>     (<span>if-let</span> (((<span>equal</span> <span>arg</span> <span>'</span>(<span>4</span>)))
</span></span><span><span>              (<span>win</span> (<span>other-window-for-scrolling</span>)))
</span></span><span><span>         (<span>with-selected-window</span> <span>win</span>
</span></span><span><span>           (<span>switch-to-buffer</span>
</span></span><span><span>            (<span>read-buffer-to-switch</span>
</span></span><span><span>             (<span>format</span> <span>"Switch to buffer (%S)"</span> <span>win</span>))))
</span></span><span><span>       (<span>call-interactively</span> <span>#'</span><span>switch-to-buffer</span>)))
</span></span><span><span>   <span>arg</span>))
</span></span><span><span>
</span></span><span><span>(<span>defvar-keymap</span> <span>buffer-cycle-map</span>
</span></span><span><span>  <span>:doc</span> <span>"Keymap for cycling through buffers, intended for </span><span>`repeat-mode'</span><span>."</span>
</span></span><span><span>  <span>:repeat</span> <span>t</span>
</span></span><span><span>  <span>"n"</span> <span>'my/next-buffer</span>
</span></span><span><span>  <span>"p"</span> <span>'my/previous-buffer</span>
</span></span><span><span>  <span>"b"</span> <span>'my/switch-buffer</span>)
</span></span></code></pre></div><p>The result of this keymap gymnastics, with key descriptions in the top right:</p>
<video preload="metadata" width="700" controls="">
<source src="https://i.imgur.com/kfZiyqZ.mp4" type="video/mp4">
<a href="https://karthinks.com/img/next-buffer-with-repeat.mp4%22">[VIDEO: next-buffer with repeat]</a></video>
<details open="">
<summary>Play by play</summary>
<div>
<ul>
<li>Call <code>my/next-buffer</code> or <code>my/previous-buffer</code> (I’ve bound them to <code>C-x C-n</code> and <code>C-x C-p</code> instead of remapping the default <code>next-buffer</code> binding <code>C-x &lt;right&gt;</code>).</li>
<li>This activates the repeat-map <code>buffer-cycle-map</code>, so I can continue cycling through buffers with <code>n</code> and <code>p</code>.</li>
<li>Exit the repeat-map by pressing any other key.</li>
<li>Call <code>my/next-buffer</code> with a prefix argument (<code>C-u C-x C-n</code>).  This activates the <code>buffer-cycle-map</code>, but in the <em>other</em> window, so you can cycle buffers in the other window with <code>n</code> and <code>p</code>.</li>
<li>Pressing <code>b</code> when the repeat map is active calls <code>switch-to-buffer</code> in the window that is selected.  This is a fallback when the buffer you need is not one or two away in the window’s buffer history.</li>
</ul>
</div>
</details>
<p>Using <code>b</code> to display a buffer in another window is consistent with how <code>ace-window</code>’s dispatch version works.</p>
<h3 id="master-mode-and-scroll-all-mode"><code>master-mode</code> and <code>scroll-all-mode</code></h3>
<p>A passing note: Emacs provides <code>master-mode</code>, a bespoke solution for performing actions in other windows without leaving this one.  You can designate a buffer as the “slave” buffer of the current buffer (the “master”).  This opens up a keymap for scrolling the slave buffer without leaving the current one.  By itself, this is a worse alternative to the more transparent and immediate solutions involving <code>other-window-scroll-default</code> above.  But you can add to this keymap with the plumbing command <code>master-says</code>, which helps you set up keys to do predefined actions in the slave buffer.  This built-in action, for example, recenters the slave buffer:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defun</span> <span>master-says-recenter</span> (<span>&amp;optional</span> <span>arg</span>)
</span></span><span><span>  <span>"Recenter the slave buffer.
</span></span></span><span><span><span>See </span><span>`recenter'</span><span>."</span>
</span></span><span><span>  (<span>interactive</span>)
</span></span><span><span>  (<span>master-says</span> <span>'recenter</span> <span>arg</span>))
</span></span></code></pre></div><p>But this can be <em>any</em> action: you could set a shell or compilation buffer as the slave buffer of every project buffer, and use <code>master-mode</code> to page through them, copy the latest output, send commands and so on.</p>
<p>And while we’re focused on scrolling, <code>scroll-all-mode</code> is a simple way of tying together scroll actions in all windows on the frame.  On occasions where you want to keep two more more window views in sync, this is a handier method than scrolling the active window and then the other window.</p>
<h3 id="with-other-window-an-elisp-helper"><code>with-other-window</code>: An elisp helper</h3>
<p>What’s better than writing a general-purpose command to automate one switch → act → switch-back dance?  A general-purpose macro to automate writing the general-purpose command!  We can decouple the action from the switching with a macro:</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defmacro</span> <span>with-other-window</span> (<span>&amp;rest</span> <span>body</span>)
</span></span><span><span>  <span>"Execute forms in BODY in the other-window."</span>
</span></span><span><span>  <span>`</span>(<span>unless</span> (<span>one-window-p</span>)
</span></span><span><span>    (<span>with-selected-window</span> (<span>other-window-for-scrolling</span>)
</span></span><span><span>      <span>,@</span><span>body</span>)))
</span></span></code></pre></div><p>The above examples become straightforward applications of this macro</p>
<div><pre tabindex="0"><code data-lang="emacs-lisp"><span><span>(<span>defun</span> <span>isearch-other-window</span> (<span>regexp-p</span>)
</span></span><span><span>  (<span>interactive</span> <span>"P"</span>)
</span></span><span><span>  (<span>with-other-window</span> (<span>isearch-forward</span> <span>regexp-p</span>)))
</span></span><span><span>
</span></span><span><span>(<span>defun</span> <span>isearch-other-window-backwards</span> (<span>regexp-p</span>)
</span></span><span><span>  (<span>interactive</span> <span>"P"</span>)
</span></span><span><span>  (<span>with-other-window</span> (<span>isearch-backward</span> <span>regexp-p</span>)))
</span></span></code></pre></div><p>This is the elisp counterpart to the interactive <code>ace-window-one-command</code>.</p>
<h2 id="do-you-need-many-windows">Do you <em>need</em> many windows?</h2>
<p>The world seems to have converged on a single UI for editors: one main window, a tab bar at the top (with one window per tab), a directory or contents sidebar on the left, an optional doodad on the right, and a terminal emulator below.</p>
<figure><img src="https://karthinks.com/img/modern-editor-layouts.jpeg" alt="Modern text and code editor window layouts.  Clockwise from top left -- Zed, Neovim, Obsidian, VSCode.">
</figure>

<p>Every editor got the memo… except Emacs, it appears.  You could recreate this window layout and workflow in Emacs.  Or any other, for that matter.  But all this furious window management behooves us to ask an even more basic question:  <em>Why even have more than one window?</em></p>
<p>There’s some merit to this: the screen could be devoted to one buffer at a time, with buffer-switching taking the place of window switching.  There’s no need to worry about resizing windows, and anything that pops up in the course of introspection or regular editing (like documentation windows) can be dismissed with a keypress, typically <code>q</code>.  Special buffers like the file browser are accessible via dedicated commands like <code>dired-jump</code>.</p>
<p>Relaxing this requirement to two-windows-at-a-time helps retain most of the hassle-free behavior while adding the benefits of using the second window as a live reference.  By default, Emacs is set up to do this well, as evidenced by <code>scroll-other-window</code> and other commands.  No rigid layout imposed via decree from on high, but no chaotic structureless and windows popping up like weeds either.</p>
<p>Effectively, we’ve circled our way back to <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Zen-of-Buffer-Display.html">The Zen of Buffer Display</a>.  While it would be ironic if the window management freedom Emacs provides causes us to reject it, we <em>can</em> route around the problem and not deal with windows at all, irrespective of how many we’d like to have on screen simultaneously.</p>
<p>So here are two more strategies for window management, both of which involve minimizing dealing with windows.  The first one is “window management” in the loosest sense of the term:</p>
<h3 id="windows-are-made-up-let-s-ignore-them">Windows are made up, let’s ignore them</h3>
<p><a href="#switch-and-stay-avy-as-a-window-switcher">Window-agnostic jumping with Avy</a> is a special case of a general idea: when using Emacs, we are primarily concerned with text.  As a container for text, a window can be an unnecessary abstraction.  This framing is natural when a destination is outside the screen contents, such as when jumping to definitions with <code>xref-find-definitions</code>.</p>
<p>But there are several other ways to apply this window-agnosticism.  The <code>mark-ring</code> and <code>global-mark-ring</code> keep track of locations we jump from, letting us jump back with <code>pop-to-mark-command</code> (<code>C-u C-SPC</code>) and <code>pop-global-mark</code> (<code>C-x C-SPC</code>).  The latter works across windows and buffers.  A package like <a href="https://github.com/alphapapa/dogears.el">dogears</a> can provide more granular control and a nicer UI to retrace your steps.</p>
<p>To manually pin a position to jump back to later, there is <code>point-to-register</code> (<code>C-x r SPC</code>) and <code>jump-to-register</code> (<code>C-x r j</code>).  Again, this switches windows as a side-effect.</p>
<p>For more permanent records, you can create and jump to bookmarks with <code>bookmark-set</code> (<code>C-x r m</code>) and <code>bookmark-jump</code> (<code>C-x r b</code>).</p>
<p>Between these, you have plenty of options for navigating across windows to locations that are meaningful, as ascertained by either Emacs or you.  These work just as well with a single window in an Emacs frame as they do with the canonical twenty-first century IDE window layout.</p>
<h3 id="deal-with-windows-so-we-don-t-have-to-deal-with-windows">Deal with windows so we don’t have to deal with windows</h3>
<p><em>i.e.</em> Fixing the Whack-A-Mole window problem.</p>
<p>As much as this write-up is about manual actions involving Emacs windows, it was unavoidable: at some point I was going to have to mention <code>display-buffer-alist</code> and automatic window behavior.  The idea is simple.  Every time elisp code wants to show you a buffer, it tries to match the buffer it is displaying against a list of rules in this variable.  The matching entry specifies how it should be displayed.</p>
<p>If we set up rules – specifying window sizes, positions, roles, focus – for every kind of buffer we see in our daily Emacs use, that’s most window management sorted… right?</p>
<p>Right, actually.  The reality hews close to the aspiration.  The problem with <code>display-buffer-alist</code> is not that it <em>doesn’t</em> work, but that it’s a <em>lot</em> of work.  Creating rules for displaying buffers involves understanding many more aspects of Emacs’ API than is reasonable for most users: buffer and mode predicates, window types and slots, display-buffer action functions, window parameters, and a whole lot more gibberish.  And at the end of this expedition into the elisp manual, there is no easy way to express a simple intention, like “do <em>not</em> disturb my window arrangement”
<span><small>
Specifying overreaching and overriding display-buffer preferences can do this, but they lead to dozens of edge cases and unintended behavior.
</small></span>
.  As such, it’s a tool primarily used by package authors to surface a more approachable interface to specifying automatic window behaviors for their package.</p>
<p>But in the spirit of the almanac, let’s not leave this topic empty handed.</p>
<ul>
<li>
<p>The <a href="https://depp.brause.cc/shackle/">Shackle</a> package papers over the <code>display-buffer-alist</code> oddness and presents a simplified elisp interface for specifying window rules.  If you want to corral a couple of pesky buffer types that always ruin your window arrangement and have you reaching for <code>winner-undo</code>, this is your best bet.</p>
</li>
<li>
<p>Emacs distributions usually provide a simple interface for specifying these preferences.
<span><small>
Doom Emacs provides a convenient <code>set-popup-rule!</code> command for this.
</small></span>
If you’re using one, you’re probably covered.</p>
</li>
<li>
<p>And if you’ve got a hankering for tinkering, <a href="https://www.masteringemacs.org/article/demystifying-emacs-window-manager">Mickey Peterson’s article</a> on demystifying the window manager, this <a href="https://protesilaos.com/codelog/2024-02-08-emacs-window-rules-display-buffer-alist/">video by Protesilaos Stavrou</a> and <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Buffers.html">the elisp manual</a> are all fine resources, as alluded to in the preface.</p>
</li>
</ul>
<h3 id="popper-popwin-shell-pop-and-vterm-toggle">Popper, Popwin, shell-pop and vterm-toggle</h3>
<p>While we’re aiming at the ideal of the minimal workspace uncluttered by windows, a popup manager is another helpful tool.</p>
<p><a href="https://github.com/emacsorphanage/popwin">Popwin</a> and <a href="https://github.com/karthink/popper">Popper</a> are Emacs packages based on the observation that not all buffers are created equal.  There are (primary) buffers we spend most of our time in, and (popup) buffers we’d like to access temporarily – to use as a reference, page through documentation, run shell commands, check a task or compilation status, access search results, read messages, and so on.  Using <code>display-buffer-alist</code> or an equivalent method, you can make these buffers use smaller, auxiliary windows and not grab the cursor when they appear.  But that doesn’t solve the access problem: what we’d like is one key access to summon these popup buffers, and easy ways to dismiss their windows, cycle through or kill them.</p>
<p>Popper provides this for all kinds of buffers you choose to (pre-)designate as popups, helping you stick to the one (or two) window paradigm, raising and dismissing these auxiliary windows as needed.  This image shows popups available in the current context as a line of tabs that can be accessed or cycled through with one key:</p>
<figure><img src="https://karthinks.com/img/popper-tab-line-demo.png">
</figure>

<p>Popwin is an older and more comprehensive implementation of this idea, but it bundles together quick key access and its own bespoke display-buffer configuration, which may not be what you want.  If you only want one key-access to summon and dismiss shell buffers, <a href="https://github.com/kyagi/shell-pop-el">shell-pop</a> or <a href="https://github.com/jixiuf/vterm-toggle">vterm-toggle</a> might be all you need instead.</p>
<h2 id="the-missing-pieces">The Missing Pieces</h2>
<p>We conclude with window management options that should exist… but don’t.</p>
<h3 id="window-tree">window-tree</h3>
<p>There is a fundamental disconnect between how Emacs represents windows and how we manipulate them using the approaches discussed above.</p>
<p>Windows in a frame in Emacs are arranged in a tree: the leaf nodes are “live” (real) windows, and the rest are “internal” (virtual) windows
<span><small>
The minibuffer is technically not part of this tree, although it can be reached by traversing it.  (See the <code>window-tree</code> function.)
</small></span>
.</p>
<figure><img src="https://karthinks.com/img/emacs-window-tree-illustration.png">
</figure>

<p>Most user-facing operations on windows, such as moving between them with <code>other-window</code> or Windmove, ignore the tree structure and work by examining their spatial positions instead.  This often causes unexpected and unintuitive behavior when splitting or deleting windows, or imposes confusing constraints on what splits you can create.  For example, there is no way to perform these transformations:</p>
<figure><img src="https://karthinks.com/img/emacs-window-tree-deficit.png">
</figure>

<p>The window that needs to be split here is neither the frame root nor a leaf window – it’s some internal node in the tree.</p>
<p>Adding commands for window-tree operations opens the door to many new possibilities.  Frame transformations like splitting, transposing, mirroring and so on are elementary operations on window-tree branches.  Multiple window selection is possible via “selecting” internal windows, and <em>partial</em> window configurations can then be operated on, handed off to other tabs or frames, duplicated or persisted.  Tree branches can be protected from being mangled by <code>display-buffer</code> and friends
<span><small>
This kind of all-or-nothing window behavior is currently enabled via Elisp’s atomic windows API, which is a significantly more restrictive approach.
</small></span>
, and you can have sections of a frame devoted to one task, with the sibling branch tolerating flexible, looser behavior.</p>
<p>How do we write this hypothetical wintree package?</p>
<ol>
<li>Elisp already provides functions to query the window tree: <code>window-tree</code> returns the tree itself.  <code>frame-root-window</code> returns the tree root, and <code>window-parent</code>, <code>window-child</code>, <code>window-*-sibling</code> do what you’d expect.</li>
<li>There is some support for tree traversal via <code>walk-window-tree</code> and <code>walk-windows</code>.</li>
<li>There are no elementary functions for mutating the tree, except via splitting and deleting live windows the usual way.</li>
<li>There is no concept of “selecting” an internal window, so this will have to be simulated via the UI, perhaps by <a href="https://github.com/captainflasmr/selected-window-accent-mode">adding a border</a> inside each window in the sub-tree.</li>
</ol>
<p>So some of the required elements are present.  The missing ingredient is a motivated Emacs user (perhaps you) stepping into <code>window.el</code> and getting their hands dirty!</p>
<h3 id="the-tiling-wm-integrator">The tiling-wm integrator</h3>
<p>Emacs’ window-tree model is almost exactly that of manual tiling window managers like i3 or bspwm, sans some affordances like i3’s tabbed windows.  This leads us to a natural question: why use a tiling window manager inside of another one?
<span><small>
Yo dawg, I heard you like tiling…
</small></span>
If you use i3, bspwm or Emacs inside tmux, it’s natural to want to be able to navigate both seamlessly, with the same keybindings.  There are a couple of Emacs packages for this: Pavel Korytov’s <a href="https://sqrtminusone.xyz/posts/2021-10-04-emacs-i3/">i3-integration</a>, and something I hacked up for <a href="https://github.com/karthink/.emacs.d/blob/master/plugins/emacs-wm.el">qtile</a>.  But providing a cleaner and more unified interface for this from Emacs can make integrating with all window managers much easier.  Again, most elements we need are already present:</p>
<ol>
<li>The window manager should provide some way to identify the active window class, and to move across and manipulate windows programmatically.  This can be via a shell command, socket or server-based IPC, or (on Linux) via D-Bus methods.  This covers most window managers and terminal multiplexers.</li>
<li>On the Emacs side, we need a communication method-agnostic interface for window operations that mimics how most window managers do them, supporting a common subset of operations or (more ambitiously) their union.</li>
<li>When switching windows in the window manager, we check if the active window is Emacs, and yield control to it if required.  Emacs then performs the window operation within or without the Emacs frame as required.</li>
</ol>
<p>As before, the missing ingredient is you!</p>
<hr>
<h2 id="the-view-from-here">The view from here</h2>
<p>Believe it or not, this was the short version.  To keep the scope of this piece under check, there are several window management strategies I had to exclude, such as anything involving <code>tab-line-mode</code>, or window types and properties like atomic, dedicated or side windows.  And we are all safer for skirting around the issue of <code>display-buffer</code>.</p>
<p>Where does that leave us?  With about a dozen ways to switch, move, jump around, create, delete and otherwise manipulate windows and window configurations in Emacs, many ways to control window display on the fly when invoking commands, and half a dozen ways to work across windows and avoid thinking about them at all.  Once again, this collection is colored and limited by my experience with window wrangling in Emacs, and thus it’s not an exhaustive list.  If I’ve missed something simple and useful please let me know!</p>
<p>For better or worse, window management in Emacs is not so much complicated as it is open-ended.  Emacs provides the ingredients and some instructions, and the ingredients can work as basic meals by themselves.</p>
<p>But with a little cooking we can make something delicious.  Bon appétit.</p>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The derivative of a number (2014) (111 pts)]]></title>
            <link>https://rjlipton.com/2014/08/19/the-derivative-of-a-number/</link>
            <guid>40326305</guid>
            <pubDate>Sat, 11 May 2024 06:03:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rjlipton.com/2014/08/19/the-derivative-of-a-number/">https://rjlipton.com/2014/08/19/the-derivative-of-a-number/</a>, See on <a href="https://news.ycombinator.com/item?id=40326305">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
								<p><em> Are you kidding? </em></p>
<p><a href="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?ssl=1"><img decoding="async" data-attachment-id="11866" data-permalink="https://rjlipton.com/2014/08/19/the-derivative-of-a-number/unknown-101/" data-orig-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?fit=190%2C143&amp;ssl=1" data-orig-size="190,143" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Unknown" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?fit=190%2C143&amp;ssl=1" data-large-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?fit=190%2C143&amp;ssl=1" src="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?w=160&amp;ssl=1" alt="Unknown" data-recalc-dims="1"></a></p>
<p>Edward Barbeau is now a professor emeritus of mathematics at the University of Toronto. Over the years he has been working to increase the interest in mathematics in general, and enhancing education in particular. He has published several <a href="http://www.amazon.com/Mathematical-Fallacies-Flaws-Flimflam-Spectrum/dp/0883855291">books</a> that are targeted to help both students and teachers see the joys of mathematics: one is called <em>Power Play</em>; another <em>Fallacies, Flaws and Flimflam</em>; and another <em>After Math</em>.</p>
<p>Today I want to discuss his <a href="http://cms.math.ca/cmb/v4/cmb1961v04.0117-0122.pdf">definition</a> of the derivative of a number, yes a number.<br>
<span id="more-11864"></span></p>
<p>We all know the concept of a derivative of a function. It is one of the foundational concepts of calculus, and is usually defined by using limits. For the space of polynomials it can be viewed as a linear operator <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> so</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+D%28x%5E%7Bn%7D%29+%3D+nx%5E%7Bn-1%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle D(x^{n}) = nx^{n-1}. "></p>
<p>The derivative operator in general satisfies many properties; one is the product law:</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+D%28fg%29%3DfD%28g%29+%2B+gD%28f%29.+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle D(fg)=fD(g) + gD(f). "></p>
<p>This <a href="http://en.wikipedia.org/wiki/Product_rule">rule</a> is usually credited to Gottfried Leibniz. Somehow the great Issac Newton did not know this rule—at least that is what is claimed by some.</p>
<h2>Definition</h2>
<p>Barbeau defined the derivative of a natural number in 1961. Define <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> for a natural number by the following <a href="http://en.wikipedia.org/wiki/Arithmetic_derivative">rules</a>:</p>
<ol>
<li><img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28p%29%3D1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(p)=1}"> for all primes <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bp%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{p}">.</li>
<li><img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%281%29%3D0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(1)=0}">.</li>
<li><img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28kl%29%3DkD%28l%29%2BlD%28k%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(kl)=kD(l)+lD(k)}"> for all numbers <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bk%2Cl%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{k,l}">.</li>
</ol>
<p>Here is a picture from his <a href="http://cms.math.ca/cmb/v4/cmb1961v04.0117-0122.pdf">paper</a>:</p>
<p><a href="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?ssl=1"><img decoding="async" data-attachment-id="11869" data-permalink="https://rjlipton.com/2014/08/19/the-derivative-of-a-number/def/" data-orig-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?fit=1882%2C592&amp;ssl=1" data-orig-size="1882,592" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="def" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?fit=300%2C94&amp;ssl=1" data-large-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?fit=600%2C189&amp;ssl=1" src="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?w=400&amp;ssl=1" alt="def" data-recalc-dims="1"></a></p>
<p>This proves that he really did it a long time ago. Note the typewriter type face: no LaTeX back then. He proved the basic result that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> is well defined. This is not hard, is necessary to make the definition meaningful, but we will leave it unproved here. See his <a href="http://cms.math.ca/cmb/v4/cmb1961v04.0117-0122.pdf">paper</a> for details.</p>
<p>A simple consequence of the rules is that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28p%5E%7Bk%7D%29+%3D+kp%5E%7Bk-1%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(p^{k}) = kp^{k-1}}"> for <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bp%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{p}"> a prime. This follows by induction on <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bk%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{k}">. For <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bk%3D1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{k=1}"> it is rule (1). Suppose that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bk%3E1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{k>1}">:</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cbegin%7Barray%7D%7Brcl%7D+D%28p%5E%7Bk%7D%29+%26%3D%26+pD%28p%5E%7Bk-1%7D%29+%2B+D%28p%29p%5E%7Bk-1%7D+%5Ctextit%7B+by+the+product+rule%3B%7D+%5C%5C+%26%3D%26+p%28k-1%29p%5E%7Bk-2%7D+%2B+p%5E%7Bk-1%7D+%5Ctextit%7B+by+rule+%281%29+and+by+induction%3B%7D+%5C%5C+%26%3D%26+kp%5E%7Bk-1%7D.+%5Cend%7Barray%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle \begin{array}{rcl} D(p^{k}) &amp;=&amp; pD(p^{k-1}) + D(p)p^{k-1} \textit{ by the product rule;} \\ &amp;=&amp; p(k-1)p^{k-2} + p^{k-1} \textit{ by rule (1) and by induction;} \\ &amp;=&amp; kp^{k-1}. \end{array} "></p>
<p>Unfortunately this does not hold in general. Also <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> is not a linear operator: <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%285%29%3D1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(5)=1}"> and <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%283%29%2BD%282%29%3D2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(3)+D(2)=2}">. This double failure, the derivative of a power is not simple and the derivative is not linear in general, makes <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> difficult to use. One of the beauties of the usual derivative, even just for polynomials, is that it is a linear operator.</p>
<h2>Results</h2>
<p>The derivative notion of Barbeau is interesting, yet it does not seem to have been intensively studied. I am not sure why—it may be because it is a strange function—I am not sure.</p>
<p>There is hope. Recently there have been a number of papers on his notion. Perhaps researchers are finally starting to realize there may be gold hidden in the derivative of a number. We will see.</p>
<p>Most of the papers on <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> have been more about intrinsic properties of <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> rather than applications. A small point: most of the papers replace <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> by <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%27%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n'}">: so if you look at papers be prepared for this notation shift. I decided to follow the original paper’s notation.</p>
<p>The papers have results of three major kinds. One kind is the study of what are essentially differential equations. For example, what can we say about the solutions of</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+D%28D%28n%29%29+%3D+a%2C+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle D(D(n)) = a, "></p>
<p>where <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{a}"> is a constant? The others are growth or inequality results: how fast and how slow does <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> grow? For example, for <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n}"> not a prime,</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Csqrt%7Bn%7D+%5Cle+D%28n%29+%5Cle+n%5Clog%28n%29%2F2.+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle \sqrt{n} \le D(n) \le n\log(n)/2. "></p>
<p>A third natural class of questions is: can we extend <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> to more than just the natural numbers? It is easy to extend to integers, a bit harder to rationals, and not so easy beyond that.</p>
<p>Here are two interesting papers to look at:</p>
<ul>
<li><i>Investigations on the properties of the arithmetic derivative</i>, which is a <a href="http://arxiv.org/pdf/1108.4762v1.pdf">paper</a> by Niklas Dahl, Jonas Olsson, and Alexander Loiko.</li>
<li><i>How to Differentiate a Number</i>, which is a <a href="https://cs.uwaterloo.ca/journals/JIS/VOL6/Ufnarovski/ufnarovski.pdf">paper</a> by Victor Ufnarovski and Bo Åhlander.</li>
</ul>
<h2>An Application</h2>
<p>I tried to use <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> to prove something interesting. I think if we could use <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> to prove something not about <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> but about something that does not mention <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> at all, that would be exciting. Tools must be developed in mathematics, but the key test of their power is their ability to solve problems from other areas. One example: the power of complex analysis was manifest when it was used to prove deep theorems from number theory. Another example: the power of the theory of Turing machines was clear when it was used to yield an alternate proof of the Incompleteness Theorem.</p>
<p>The best I could do is use <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> to prove an ancient result: that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B%5Csqrt%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{\sqrt{2}}"> is not rational. Well I may be able to prove a bit more.</p>
<p>We note that from the product rule: <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28w%5E%7B2%7D%29+%3D+wD%28w%29+%2B+wD%28w%29+%3D+2wD%28w%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(w^{2}) = wD(w) + wD(w) = 2wD(w)}">, for any <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bw%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{w}">. Recall if <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bw%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{w}"> were prime this would be <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28w%5E%7B2%7D%29+%3D+2w%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(w^{2}) = 2w}">.</p>
<p>Now assume by way of contradiction that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B%5Csqrt%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{\sqrt{2}}"> is rational number. Then for some <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%2Cy%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x,y}"> positive numbers we have</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+x%5E%7B2%7D+%3D+2y%5E%7B2%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle x^{2} = 2y^{2}. "></p>
<p>As usual we can assume that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%2Cy%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x,y}"> are co-prime.</p>
<p>So let’s take derivatives of both sides of the equation—we have to use <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> sometime, might as well start with it.</p>
<blockquote><p>Note that it is valid to apply <img decoding="async" src="https://s0.wp.com/latex.php?latex=D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0&amp;c=20201002" alt="D"> to both sides of an equation, so long as one is careful to obey the rules. For example <img decoding="async" src="https://s0.wp.com/latex.php?latex=5%3D2%2B3+&amp;bg=e8e8e8&amp;fg=000000&amp;s=0&amp;c=20201002" alt="5=2+3 "> allows <img decoding="async" src="https://s0.wp.com/latex.php?latex=D%285%29+%3D+D%283%2B2%29%2C&amp;bg=e8e8e8&amp;fg=000000&amp;s=0&amp;c=20201002" alt="D(5) = D(3+2),"> but there is no additive rule to make the right-hand side become <img decoding="async" src="https://s0.wp.com/latex.php?latex=D%283%29%2BD%282%29%2C&amp;bg=e8e8e8&amp;fg=000000&amp;s=0&amp;c=20201002" alt="D(3)+D(2),"> which would make the equation false.</p></blockquote>
<p>The result of taking the derviative of both sides is:</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cbegin%7Barray%7D%7Brcl%7D+D%28x%5E%7B2%7D%29+%26%3D%26+D%282y%5E%7B2%7D%29+%5C%5C+2xD%28x%29+%26%3D%26+D%282%29y%5E%7B2%7D+%2B+2D%28y%5E%7B2%7D%29+%5C%5C+2xD%28x%29+%26%3D%26+y%5E%7B2%7D+%2B+2D%28y%5E%7B2%7D%29+%5C%5C+2xD%28x%29+%26%3D%26+y%5E%7B2%7D+%2B+4yD%28y%29.+%5Cend%7Barray%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle \begin{array}{rcl} D(x^{2}) &amp;=&amp; D(2y^{2}) \\ 2xD(x) &amp;=&amp; D(2)y^{2} + 2D(y^{2}) \\ 2xD(x) &amp;=&amp; y^{2} + 2D(y^{2}) \\ 2xD(x) &amp;=&amp; y^{2} + 4yD(y). \end{array} "></p>
<p>Now square both sides and substitute <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x^{2}}"> for <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B2y%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{2y^{2}}"> to get:</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cbegin%7Barray%7D%7Brcl%7D+4+x%5E%7B2%7D+D%28x%29%5E%7B2%7D+%26%3D%26+y%5E%7B4%7D+%2B+8+y%5E%7B3%7D+D%28y%29+%2B+16+y%5E%7B2%7D+D%28y%29%5E%7B2%7D+%5C%5C+4+x%5E%7B2%7D+D%28x%29%5E%7B2%7D+%26%3D%26+y%5E%7B4%7D+%2B+4x%5E%7B2%7D+y+D%28y%29+%2B+8+x%5E%7B2%7D+D%28y%29%5E%7B2%7D+%5C%5C+x%5E%7B2%7D+%284D%28x%29%5E%7B2%7D+-+4yD%28y%29+-+8D%28y%29%5E%7B2%7D%29+%26%3D%26+y%5E%7B4%7D.+%5Cend%7Barray%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle \begin{array}{rcl} 4 x^{2} D(x)^{2} &amp;=&amp; y^{4} + 8 y^{3} D(y) + 16 y^{2} D(y)^{2} \\ 4 x^{2} D(x)^{2} &amp;=&amp; y^{4} + 4x^{2} y D(y) + 8 x^{2} D(y)^{2} \\ x^{2} (4D(x)^{2} - 4yD(y) - 8D(y)^{2}) &amp;=&amp; y^{4}. \end{array} "></p>
<p>This implies that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%5E2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x^2}"> divides <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7By%5E%7B4%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{y^{4}}">. This leads to a contradiction, since it implies that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%2Cy%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x,y}"> are not co-prime.&nbsp; Whether we also get that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x}"> divides <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7By%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{y^{2}}"> is possibly circular, but anyway this is enough.&nbsp; The point is that owing to <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%282%29+%3D+1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(2) = 1}">, the derivative removed the problematic factor of <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{2}">.</p>
<p>Note from the original equation, <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%7B2%7D%3D2y%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x^{2}=2y^{2}}"> we only get that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x}"> divides <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B2y%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{2y^{2}}"> which is too weak to immediately get a contradiction. Admittedly ours is not the greatest proof, not better than the usual one especially owing to the squaring step, but it does use the derivative of an number.</p>
<p>One idea: I believe that this idea can be used to prove more that the usual fact that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%7B2%7D%3D2y%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x^{2}=2y^{2}}"> has no nonzero solutions over the integers. I believe we can extend it to prove the same result in any ring where <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> can be defined, possibly modulo issues about lack of unique factorization. This handles the Gaussian integers, for example.</p>
<h2>Open Problems</h2>
<p>Can we use this strange function <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> to shed light on some open problem in number theory? Can we use it in complexity theory? A simple question is: what is the complexity of computing <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}">? If <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%3Dpq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n=pq}"> where <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bp%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{p}"> and <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{q}"> are primes, then <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%3DD%28pq%29%3Dp%2Bq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)=D(pq)=p+q}"> by the rules. But we know that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%3Dpq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n=pq}"> and thus we have two equations in two unknowns and we can solve for <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bp%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{p}"> and <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{q}">. So in this case computing <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> is equivalent to factoring <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n}">. What happens in the general case? An obvious conjecture is that computing <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> is equivalent to factoring.</p>
<p>[fixed error in proof that owed to typo <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28y%5E2%29+%3D+y%5E2+D%28y%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(y^2) = y^2 D(y)}">, as <a href="http://atomic-temporary-6472207.wpcomstaging.com/2014/08/19/the-derivative-of-a-number/#comment-54945">noted</a> by user “Sniffnoy” and others, and changed some following text accordingly; further fix to that proof; fixed typo p^k to p^{k-1}]</p>

											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Thread: Tech we can’t use or teach? (353 pts)]]></title>
            <link>https://overengineer.dev/blog/2024/05/10/thread/</link>
            <guid>40326269</guid>
            <pubDate>Sat, 11 May 2024 05:51:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://overengineer.dev/blog/2024/05/10/thread/">https://overengineer.dev/blog/2024/05/10/thread/</a>, See on <a href="https://news.ycombinator.com/item?id=40326269">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="content"> <h2>Thread - the tech we can't use or teach</h2> <section id="main_content">  <p> <span> <i role="img" aria-label="This item was published on:"></i> 2024-05-10 </span>  <span> <i role="img" aria-label="This item was tagged with:"></i> <a href="https://overengineer.dev/blog/tags/electronics/">electronics</a>, <a href="https://overengineer.dev/blog/tags/hacking/">hacking</a>, <a href="https://overengineer.dev/blog/tags/hardware/">hardware</a>, <a href="https://overengineer.dev/blog/tags/overengineering/">overengineering</a>, <a href="https://overengineer.dev/blog/tags/rant/">rant</a> </span> </p> <p>A lot of my projects don’t work out. That’s fine, failing is a very healthy way to learn. However, there are cases where the reasons behind failures are absolutely infuriating. So please, allow me a rant. I’ll spend a few words on how I got where I am. If you don’t care, feel free to skip to the large “Thread?” headline. I won’t judge<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup>.</p>
<p>In 2022, <a href="https://overengineer.dev/blog/2022/01/07/overengineering-coffee-bean-storage/">I published an article on how I created a severely over-engineered coffee bean storage and inventory-keeping solution</a>. Since then, many people reached out to me to say that they appreciate my post and took it as inspiration to start similar projects for different needs. I absolutely love that!</p>
<p>More recently, I’ve been actively working on two related projects. One is a sensor I’m not going to talk about yet, but another is a “version 2” of that coffee storage display. My primary motivation for version 2 of that display was to increase the battery runtime. The displays averaged 40 days on a charge when my article was published. That’s alright, but it could be better. I managed to get this up to 55 days with a few software tweaks, but I wanted to explore how to push this further.</p>
<p>So, I started learning about low-power electronics, leading me down a few complicated but fascinating rabbit holes. To start off, I purchased <a href="https://www.nordicsemi.com/Products/Development-hardware/Power-Profiler-Kit-2" rel="nofollow" target="_blank">a very nice power profiler from Nordic Semiconductors</a> and profiled my whole system. If you’re curios, <a href="https://overengineer.dev/__generated__/power-profile-screenshot.Q36a-FjR.png" target="_blank">this is how such a profile looks like</a>. Long story short: I re-wrote parts of the display firmware, identified some problematic components on the DevKit, and bypassed them. Ultimately, it became clear that one of the big factors is… WiFi.</p>
<p>You should know that while I love working on projects like this, I’m also inherently lazy. Using WiFi for such a project made sense to me, as I already have all the required infrastructure set up, and letting the display hardware talk to a service I run is super easy: just connecting to WiFi and sending a request to another device in the LAN. But sadly, WiFi is also really inefficient for a use-case like this. Even just establishing a connection can take a long time; it requires high transmission powers depending on where your access points are set up; it’s all less than ideal. So I explored alternatives, and as it turns out, there’s much to choose from! I didn’t want to build my own hardware<sup><a href="#user-content-fn-2" id="user-content-fnref-2" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup>, so I wanted to pick something with a good availability of DevKits and ready-to-use modules. Standards like <a href="https://en.wikipedia.org/wiki/LoRa" rel="nofollow" target="_blank">LoRa</a> and <a href="https://en.wikipedia.org/wiki/Zigbee" rel="nofollow" target="_blank">Zigbee</a> came to mind, of course.</p>
<p>As nice (and usually power-efficient) as those technologies are, there’s a huge downside compared to WiFi: I can’t just build the display module and use it - I also need to build “the other end”, a receiver/transmitter/hub or whatever, that acts as a connection point for the displays to exchange data with. That’s not only a whole other piece of hardware I have to run; it’s also another piece of software and firmware I have to write. And as I mentioned earlier, I am lazy. Luckily, there’s a really interesting alternative!</p>
<h2 id="thread">Thread?</h2>
<p>Despite its awful name<sup><a href="#user-content-fn-3" id="user-content-fnref-3" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup>, the Thread network stack is really cool. Thread uses the same physical layer as Zigbee, IEEE 802.15.4, and it’s also a meshed network. But two things made Thread stand out for me. Thread is based on top off 6LoWPAN, short for “IPv6 over Low-Power Wireless Personal Area Networks”, and that’s kinda cool. In short, this means that each of your devices gets one or more IPv6 addresses, the internal addressing is done via IPv6, and you just throw IP packets around in the network. Even cooler is that the Thread network connects to your regular home network via a bridge called “Border Router” - so your devices can use IPv6 to talk to your applications, and vice-versa.</p>
<p>Wait, a bridge? Didn’t I say I don’t want to run a bridge? Well, yes, but that’s another cool thing about Thread: you might already have a Thread Border Router running. For example, if you have an Apple HomePod or a Nest Hub, you already own a Thread Border Router. If you run Home Assistant, you can buy a dongle for ~40 euros and <a href="https://www.home-assistant.io/integrations/thread/" rel="nofollow" target="_blank">turn your Home Assistant node into a Thread Border Router</a>. It’s all <em>really</em> approachable. And if you use your existing Thread network, things get even more awesome! I did mention that Thread is a mesh network, and this feature is actively used and supported by a lot of commercial hardware. I have several <a href="https://www.evehome.com/en/eve-energy" rel="nofollow" target="_blank">Eve Energy</a> “smart plugs” in my home, and since they are always connected to power, they function as a Thread repeater<sup><a href="#user-content-fn-4" id="user-content-fnref-4" data-footnote-ref="" aria-describedby="footnote-label">4</a></sup>, expanding your network’s reach without you doing any work!</p>
<p>So all of that sounds pretty neat, huh? And it is! I got two Thread DevKits to explore more (if you’re curious, I got a <a href="https://www.nordicsemi.com/Products/Development-hardware/nRF52840-DK" rel="nofollow" target="_blank">nRF52840-DK</a> and a <a href="https://www.nordicsemi.com/Products/Development-hardware/nRF5340-DK" rel="nofollow" target="_blank">nRF5340-DK</a>, as well as a <a href="https://www.nordicsemi.com/Products/Development-hardware/nRF52840-Dongle" rel="nofollow" target="_blank">nRF52840-Dongle</a> for debugging<sup><a href="#user-content-fn-5" id="user-content-fnref-5" data-footnote-ref="" aria-describedby="footnote-label">5</a></sup>), and learned a lot. Within a reasonably short timeframe, I managed to hack my own border router into my Apple-based Thread network, I managed to use Wireshark to sniff on my Thread network, and I shoved my own Thread devices (based on the two DevKits) into the network, and confirmed that everything worked as I hoped it would. So, of course, I started roughly outlining a series of blog posts about all of this. Ultimately, my goal was to get other hobbyists into exploring Thread, switching away their projects from WiFi or Bluetooth, and making their projects a whole lot better.</p>
<p>And this is the point where this post turns into a rant.</p>
<h2 id="no-thread">No Thread.</h2>
<p>So far, I have only talked about the nice things around Thread. However, I also have to talk about the <em>ugly</em> parts: <a href="https://www.threadgroup.org/" rel="nofollow" target="_blank">The Thread Group</a>. While Thread builds on many free and open standards like IEEE 802.15.4, IPv6, and <a href="https://en.wikipedia.org/wiki/Constrained_Application_Protocol" rel="nofollow" target="_blank">CoAP</a>, Thread is very much neither free nor open. Quite the opposite, actually.</p>
<p>You can <em>request</em> the Thread Specification <a href="https://www.threadgroup.org/ThreadSpec" rel="nofollow" target="_blank">for free on their website</a>, and you will get it delivered to your inbox very quickly, but you’ll notice a few odd things. For once, there’s an “I agree to the End User License Agreement” checkbox on that page you ignored, but even more obvious: the specification PDF document is password-protected, DRM’ed, and heavily watermarked. To understand why, let’s look at that license agreement again. Partial quote, emphasis mine:</p>
<blockquote>
<p>Thread Group, Inc. […] hereby grants you a […] license […] to view, download, save, reproduce and use the Specification <strong>solely for your own internal purposes</strong> in accordance with the terms of this License Agreement. […] <strong>No right to implementation of the Specification is granted</strong> to you by this License Agreement. […] <strong>Membership in Thread Group is necessary to implement, practice, and ship Thread technology</strong> and Thread Group specifications. Failure to maintain active Thread Group membership while shipping Thread technology may result in legal action, including but not limited to licensing fees.</p>
</blockquote>
<p>Oh. So even though you can buy freely available DevKits, you aren’t actually allowed to … well, use them. Unless you’re a Thread Group member, of course. The least expensive membership level that will enable you to implement the Thread Group IP, <a href="https://www.threadgroup.org/thread-group" rel="nofollow" target="_blank">called “Implementer”</a>, is a cheap USD 7,500. Per year, that is. But hey, don’t worry, if you’re an “innovative IoT start-up company”, you can <a href="https://www.threadgroup.org/Innovation-Enabler-Award" rel="nofollow" target="_blank">apply to get a two-year membership for free</a>! But of course, you have to pay afterward, and this program isn’t even applicable to hobbyists.</p>
<p>This whole mess isn’t helped by <a href="https://openthread.io/" rel="nofollow" target="_blank">OpenThread, an open-source implementation of Thread</a>. The project <a href="https://github.com/openthread/openthread/blob/3bf281d32da7ccde2153c5c90076e327a488d38e/LICENSE" rel="nofollow" target="_blank">is licensed under a BSD 3-Clause license</a>, so it looks very open and friendly to use. However, their repo also includes a <a href="https://github.com/openthread/openthread/blob/3bf281d32da7ccde2153c5c90076e327a488d38e/NOTICE" rel="nofollow" target="_blank">fun little notice</a> highlighting that “members of the Thread Group may hold patents and other intellectual property rights”. And, in fact, the Thread Group website <a href="https://www.threadgroup.org/support#OpenThread" rel="nofollow" target="_blank">has a dedicated FAQ-section on OpenThread</a>, which is fairly clear:</p>
<blockquote>
<p>Q: What Would Prevent A Company From Shipping A Product Based On OpenThread Without Joining The Thread Group?</p>
<p>A: If developers choose not to join Thread Group and ship products using Thread technology, they are not conferred the IP rights required to practice and ship Thread technology, and may subject themselves to legal action, including but not limited to licensing fees.</p>
</blockquote>
<p>To summarize: if you’re a hobbyist without access to some serious throwaway money to join the Thread Group, there is no way to use Thread legally - the license does not include an exception for non-commercial uses. If you’re like me and want to write a series of blog posts about how Thread works, there’s also no legal way.</p>
<p>A commercial membership program for technology stacks like Thread isn’t new; it’s somewhat common in that space. Same with requiring certifications for your commercial products if you want to use a logo like the “Works with Thread” banner. And that’s fine with me. If you’re selling a commercial electronics product, you have to go through many certification processes anyway, so that seems fair. But having a blanket ban on implementations, even for non-commercial projects, is absolutely bonkers. This means that no hobbyist should ever get close to it, and that means that the next generation of electrical engineers and decision-makers don’t get to play around with the tech before they enter the industry. But of course, that doesn’t really matter to the Thread Group: <a href="https://www.threadgroup.org/thread-group#OurMembers" rel="nofollow" target="_blank">their members list</a> includes companies like Apple, Google, Amazon, Nordic, NXP, and Qualcomm - they can just <em>force</em> Thread into being successful by making sure it’s shipped in the most popular “home hubs”. So it’s just us that get screwed over.</p>
<p>Anyway, if you planned to look at Thread… well, don’t. You’re not allowed to use it.</p>
<p><em>I contacted the Thread Group’s support email address on 2024-04-19 to request clarification on non-commercial Thread use. I did receive an “I have forwarded your message” from a member immediately, but no further response arrived. On 2024-05-01, I contacted the Thread Group’s press contact, requesting a comment. As of publishing this post, the Thread Group has not responded.</em></p>

<section data-footnotes="">
<ol>
<li id="user-content-fn-1">
<p>Okay, maybe just a little bit. I mean, did you really expect a <em>short</em> post on <em>my</em> blog?! <a href="#user-content-fnref-1" data-footnote-backref="" aria-label="Back to reference 1">↩</a></p>
</li>
<li id="user-content-fn-2">
<p>Also motivated by the intention to blog about this. Building your own RF hardware is <em>hard</em>, but it’s also illegal for most of my audience unless they have the proper certifications. <a href="#user-content-fnref-2" data-footnote-backref="" aria-label="Back to reference 2">↩</a></p>
</li>
<li id="user-content-fn-3">
<p>No, seriously. Can we please not name new things using terms that are already widely used? I hate that I have to specify whether I’m talking about sewing, screwing, parallel computing, a social network from Meta, or a networking stack. Stop it. <a href="#user-content-fnref-3" data-footnote-backref="" aria-label="Back to reference 3">↩</a></p>
</li>
<li id="user-content-fn-4">
<p>If you feel the urge to email me to inform me that it’s not called “Repeater” but “Router”, please read the rest of this article first. This is not meant as a Thread introduction post; you will learn why. <a href="#user-content-fnref-4" data-footnote-backref="" aria-label="Back to reference 4">↩</a></p>
</li>
<li id="user-content-fn-5">
<p>Nordic Semiconductors isn’t sponsoring me, even though I already linked four of their products. I just really like their stuff. That said, hey, if you’re from Nordic and you want to sponsor me, … <a href="https://overengineer.dev/me/card/">reach out</a>! :p <a href="#user-content-fnref-5" data-footnote-backref="" aria-label="Back to reference 5">↩</a></p>
</li>
</ol>
</section>  </section> </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple finalizing deal with OpenAI to bring ChatGPT features to iOS 18 (114 pts)]]></title>
            <link>https://9to5mac.com/2024/05/10/ios-18-chatgpt-features-apple-openai/</link>
            <guid>40325876</guid>
            <pubDate>Sat, 11 May 2024 04:03:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://9to5mac.com/2024/05/10/ios-18-chatgpt-features-apple-openai/">https://9to5mac.com/2024/05/10/ios-18-chatgpt-features-apple-openai/</a>, See on <a href="https://news.ycombinator.com/item?id=40325876">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
					
<figure>
	<img width="1600" height="800" src="https://9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?quality=82&amp;strip=all&amp;w=1600" alt="OpenAI ChatGPT" srcset="https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?w=320&amp;quality=82&amp;strip=all&amp;ssl=1 320w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?w=640&amp;quality=82&amp;strip=all&amp;ssl=1 640w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?w=1024&amp;quality=82&amp;strip=all&amp;ssl=1 1024w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?w=1500&amp;quality=82&amp;strip=all&amp;ssl=1 1500w" decoding="async" fetchpriority="high"></figure>

<p>Apple is finalizing an agreement with OpenAI to bring some of its technology to the iPhone this year, according to a new <a href="https://www.theinformation.com/articles/openai-develops-ai-voice-assistant-as-it-chases-google-apple?offer=rtsu-engagement-24&amp;utm_campaign=RTSU+-+OpenAI+AI+ass&amp;utm_content=4159&amp;utm_medium=email&amp;utm_source=cio&amp;utm_term=2797&amp;rc=x5svxc" target="_blank" rel="noreferrer noopener">report from <em>Bloomberg</em></a><em>.</em> With this deal, the report explains that Apple will be able to offer “a popular chatbot” powered by ChatGPT as part of its AI-focused features in iOS 18.</p>



<p>While Apple is also <a href="https://9to5google.com/2024/03/17/gemini-apple-iphone-talks/" target="_blank" rel="noreferrer noopener">still in talks with Google</a> about an AI partnership, tonight’s report says Apple has “closed in on an agreement with OpenAI.”</p>



<p>“An OpenAI accord would let Apple offer a popular chatbot as part of a flurry of new AI features that it’s planning to announce next month,” the report explains. More specific details about how these features and integrations might work remain unclear for now.</p>



<p>From Mark Gurman at <em>Bloomberg</em>:</p>



<blockquote>
<p>The two sides have been finalizing terms for a pact to use ChatGPT features in Apple’s iOS 18, the next iPhone operating system, said the people, who asked not to be identified because the situation is private. Apple also has held talks with Alphabet Inc.’s Google about licensing that company’s Gemini chatbot. Those discussions haven’t led to an agreement, but are ongoing.</p>
</blockquote>



<p>The report cautions that there’s still “no guarantee” that a deal between Apple and OpenAI “will be announced imminently.” </p>



<p>A report on Thursday emphasized that iOS 18’s AI features will be powered (in part) by Apple data centers with Apple Silicon processors. The majority of iOS 18’s AI features, however, will be <a href="https://9to5mac.com/2024/04/21/gurman-ios-18-ai-features-on-device/">powered entirely on-device</a>, allowing Apple to tout privacy and speed benefits.</p>



<p>Apple is slated to announce iOS 18 and its new AI features at WWDC, which kicks off with a special <a href="https://9to5mac.com/2024/03/26/wwdc-2024-official-date-confirmed/" target="_blank" rel="noreferrer noopener">event on June 10.</a></p>



<p>OpenAI is set to make its own, separate announcement during an event on Monday. <em>The Information</em> has <a href="https://www.theinformation.com/articles/openai-develops-ai-voice-assistant-as-it-chases-google-apple?offer=rtsu-engagement-24&amp;utm_campaign=RTSU+-+OpenAI+AI+ass&amp;utm_content=4159&amp;utm_medium=email&amp;utm_source=cio&amp;utm_term=2797&amp;rc=x5svxc">reported</a> that one feature in development at OpenAI is an AI voice assistant to compete with Siri and Google Assistant. </p>



<p><strong>Follow Chance</strong>:&nbsp;<a href="https://www.threads.net/@ChanceHMiller">Threads</a>,&nbsp;<a href="https://twitter.com/chancehmiller">Twitter</a>,&nbsp;<a href="https://www.instagram.com/chancehmiller/">Instagram</a>, and&nbsp;<a href="https://mastodon.social/@ChanceHMiller">Mastodon</a>.&nbsp;</p>
	<p>
		<a target="_blank" rel="nofollow" href="https://news.google.com/publications/CAAqBggKMLOFATDAGg?hl=en-US&amp;gl=US&amp;ceid=US:en">
			<em>Add 9to5Mac to your Google News feed.</em>&nbsp;
					</a>
	</p>
	<div><p><em>FTC: We use income earning auto affiliate links.</em> <a href="https://9to5mac.com/about/#affiliate">More.</a></p><p><a href="https://bit.ly/4b7b06Y"><img src="https://9to5mac.com/wp-content/uploads/sites/6/2024/05/2024.05-9to5mac-750x150-1.webp" alt="" width="750" height="150"></a></p></div>				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Adam Curtis on the dangers of self-expression (2017) (111 pts)]]></title>
            <link>https://thecreativeindependent.com/people/adam-curtis-on-the-dangers-of-self-expression/</link>
            <guid>40325542</guid>
            <pubDate>Sat, 11 May 2024 02:16:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thecreativeindependent.com/people/adam-curtis-on-the-dangers-of-self-expression/">https://thecreativeindependent.com/people/adam-curtis-on-the-dangers-of-self-expression/</a>, See on <a href="https://news.ycombinator.com/item?id=40325542">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
            <h2 id="art">Art</h2>

<p>Art is good; self-expression is great. What it isn’t is a substitute for political action to transform the world and challenge power.</p>

<p>Art is a very good way of distilling and describing the world and the mood of a time. Some of the painters who painted the wives and families of the robber barons of the 19th century tell you a great deal about what that world was like.</p>

<p>What happened from the early 1970s on was a shift, which said self-expression is the new politics. Self-expression is the new way of challenging the bad things in the world. But it can’t, because the whole world is actually based upon self-expression.</p>

<p>Maybe there is a new radical way of looking at the world. A new exciting, fresh way which we haven’t seen yet because it doesn’t fit with our preconceptions. Every age has a thing that it deeply believes in that 50 years later people will look back and say, “My God, look how conformist they all were.” You look at photographs of men in bars in the 1930s. They’re all wearing exactly the same clothes and same hats.</p>

<p><span>We may look back at self-expression as the terrible deadening conformity of our time.</span> It doesn’t mean it’s bad and it doesn’t mean it’s a fake thing. It’s gotten so that everyone does it—so what’s the point? Everyone expresses themselves every day.</p>

<p>We’re all self-expressing. It’s the conformity of our time. They’ll look back and say, “My God! It’s a bit like they all wore the same hats in the ’30s. They were all self-expressing.”</p>

<p>That’s the thing we can’t see. It’s not to say you can’t make art if you want to do it, but it’s not the radical outsider. It’s not the hipster cool outsider. It’s everything. It’s conformity.</p>

<h2 id="individualism">Individualism</h2>

<p>The history of modern self-expression dates from the hippies. It comes into focus with the collapse of the new left at the end of the ’60s and early ’70s. Patti Smith wrote a very interesting book called <em>Just Kids</em>, which is a memoir documenting her relationship with Robert Mapplethorpe. She’s very clear that people like her are absolutely fed up with the idea of giving themselves up to marching with groups, because what’s it doing? It’s doing nothing.</p>

<p>Instead what you do is express yourself. You express your anger with the system in an imaginative way as an alternative to the failure of the left. That’s where it starts, and it’s exciting. You can feel the excitement in her book.</p>

<p>I made a series called “The Century of the Self” where I showed that in the ’70s capitalism went through a great big shift. It went away from this idea that it was just selling goods that are all like each other, so everyone looked the same and wore the same clothes. Capitalism reinvented itself and started to sell you a much wider range of products so you could express yourself.</p>

<p>What seemed rebellious to the artists was actually a reflection of something much deeper that was happening within the very power structure they didn’t like. Capitalism was actually becoming like them.</p>

<p>The interesting thing about our time is that however radical the message in your art, if you do your criticism through self-expression, you’re actually feeding the very power structure you’re trying to overthrow. The power structure you’re criticizing also believes in self-expression as the ultimate goal.</p>

<p><span>Capitalism is about self-expression; art is about self-expression. Art is far from being a radical outside movement.</span> It’s at the heart of the modern conformity. That’s why nothing ever changes, because the radicals have gone to a form of expression at the very center of the power structure they disapprove of. So they’re neutered.</p>

<h2 id="power">Power</h2>

<p>If you want to make the world a better place, you have to start with where power has gone. It’s very difficult to see. We live in a world where we see ourselves as independent individuals. If you’re an independent individual, you don’t really think in terms of power. You think only in terms of your own influence on the world.</p>

<p>What you don’t see is what people in the past were more able to see. When you are in groups, you can be very powerful. You can change things. You have confidence when things go wrong that you don’t when you’re on your own. That’s why the whole concept of power has dwindled. We’re encouraged just to talk about ourselves and our feelings towards others.  We’re not encouraged to see ourselves as part of anything.</p>

<p>But the computers know the truth. They see us as a group. We’re actually quite similar to each other. We have the same desires, ambitions, and fears. Computers spot this through correlations and patterns.</p>

<p><span>Computers can see us as large groups, but they’re glum and only aggregate us to sell us stuff. In reality, the computers give great insight into the power of common identity between groups. No one’s using that. What’s sitting with the computers is a way of seeing new groups, new common identities between people.</span></p>

<h2 id="freedom">Freedom</h2>

<p>Collective self-expression is what was politics. You express your unity with people by surrendering yourself up to it. The most recent powerful example of it in the US was the Civil Rights Movement.</p>

<p>In the 1950s, young white activists went down to the South, worked with the young black activists for years. Many of them were beaten up; some of them were killed. They surrendered themselves to something, and they changed the world using that power.</p>

<p>There are different definitions of freedom. <span>The contemporary idea of freedom is very much an individualist one. I, as an individual, want to be free to do what I want to do.</span></p>

<p>There is another definition of freedom which simply says, “In whose service is perfect freedom.” By giving yourself up to the Lord, you free yourself of the narrow cage of your own desires and your own selfishness. You become bigger. You become a bigger person and part of something.</p>

<p>The idea of individual self-expression—whilst feeling limitless because the ideology of our age is individualism—looked at from another perspective is limiting because all you have is your own desires. There are other things that could free you from that. It’s a different kind of freedom.</p>

<h2 id="myth">Myth</h2>

<p>I was reading a sociologist called Max Weber the other day. Back in the 1920s, he was predicting that we would all be taken over in a bureaucratic age. It could be left wing or right wing, but we would enter into what he called an iron cage of rationality. It would be a wonderful world where everything was managed, everything was rationally done. But what you would lose was enchantment. It would become a disenchanted age. You would miss the sense that there are things that are mysterious and wonderful in their mysteriousness. He said, “The price you pay for going into the iron cage is you become disenchanted.” <span>I sometimes wonder whether conspiracy theories are an attempt to re-enchant the world in a distorted way.</span></p>

<p>It’s like religion knocking on the door and trying to come back in a strange and distorted form. A sense of mystery beyond our own understanding of the world. If you ever talk to conspiracy theorists, that’s the sense you get from them. A sort of almost romantic sense of awe that there is this dark mysterious thing that a rational thing could never penetrate. That’s sort of religious.</p>

<p><span>Maybe what’s trying to get back into our world is enchantment, and the only way it can come back in is in these strange distorted ways.</span> The downfall of capitalism is that it’s become appropriated by rational technocratic disenchantment. It’s become an iron cage. It’s trapped us. Some new form of enchanted myth is going to have to come back in.</p>

<p>A myth that tries to explain the things you don’t understand and gives you a sense of consolation beyond your own existence. I think that’s really good. We’re missing that. Take a mythical force like religion and talk about things like power that normal, boring, limited, rational technocratic journalism can’t. It dramatizes them beautifully.</p>

<p>Melodrama is the next thing. The heightened sense of things as a way of jumping out of this failed rational technocratic cage that we’re in where finance says you’ve got to do this, or austerity says you have to do that. It’s so limited. It’s so dull.</p>

<p>The trick has to be that it allows you still to feel you are an independent individual. The hyperindividualism of our age is not going to be going back into the bottle. You’ve got to square the circle. You’ve got to let people still feel they’re independent individuals, yet they are giving themselves up to something that is awesome, greater, and more powerful that carries them into the future beyond their own existence. That’s what people are yearning for.</p>

<div id="recommendation"><p><strong>Essential Adam Curtis:</strong></p>

<ul>
  <li>
    <p><a href="https://www.youtube.com/watch?v=eJ3RzGoQC4s"><em>The Century of Self</em></a> — The four episode series explores the rise of individualism and capitalism through Freud and the invention of PR.</p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=6eMhuOJ2KVY"><em>The Power of Nightmares</em></a> — Politicians realize that people no longer believe in their promise of a better world, so instead they scare us with nightmares.</p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=OW-5cyE0ec8"><em>All Watched Over by Machines of Loving Grace</em></a> — Hippies and technology.</p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=weAFLcaa8nI&amp;list=PLB293FF4481E9ACC0"><em>It Felt Like a Kiss</em></a> — No narration, his trippiest work.</p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=-fny99f8amM"><em>HyperNormalisation</em></a> — His newest. Why the world doesn’t make sense.</p>
  </li>
</ul>
</div>




            
            
          </div></div>]]></description>
        </item>
    </channel>
</rss>