<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 19 Dec 2024 20:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[A Replacement for Bert (143 pts)]]></title>
            <link>https://huggingface.co/blog/modernbert</link>
            <guid>42463315</guid>
            <pubDate>Thu, 19 Dec 2024 16:53:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://huggingface.co/blog/modernbert">https://huggingface.co/blog/modernbert</a>, See on <a href="https://news.ycombinator.com/item?id=42463315">Hacker News</a></p>
Couldn't get https://huggingface.co/blog/modernbert: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Nullboard: Kanban board in a single HTML file (212 pts)]]></title>
            <link>https://github.com/apankrat/nullboard</link>
            <guid>42461688</guid>
            <pubDate>Thu, 19 Dec 2024 14:29:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/apankrat/nullboard">https://github.com/apankrat/nullboard</a>, See on <a href="https://news.ycombinator.com/item?id=42461688">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Nullboard</h2><a id="user-content-nullboard" aria-label="Permalink: Nullboard" href="#nullboard"></a></p>
<p dir="auto">Nullboard is a minimalist take on a kanban board / a task list manager, designed to be compact, readable and quick in use.</p>
<p dir="auto"><a href="https://nullboard.io/preview" rel="nofollow">https://nullboard.io/preview</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-example-alt.png"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-example-alt.png" alt="Nullboard"></a></p>
<p dir="auto">The name also happens to abbreviate to <a href="https://en.wikipedia.org/wiki/Nota_bene" rel="nofollow">NB</a>, which I think is a nice touch.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dead simple</h2><a id="user-content-dead-simple" aria-label="Permalink: Dead simple" href="#dead-simple"></a></p>
<ul dir="auto">
<li>Single-page web app - just one HTML file, an ancient jQuery package and a webfont pack.</li>
<li>Can be used completely offline. In fact, it's written exactly with this use in mind.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Locally stored</h2><a id="user-content-locally-stored" aria-label="Permalink: Locally stored" href="#locally-stored"></a></p>
<ul dir="auto">
<li>All data is stored locally, for now using <a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage" rel="nofollow">localStorage</a>.</li>
<li>The data can be exported to- or imported from a plain text file in a simple JSON format.</li>
<li>The data can also be automatically backed up to a local disk with the help of:
<ul dir="auto">
<li><a href="https://nullboard.io/backups" rel="nofollow">Nullboard Agent</a> - a native Windows app</li>
<li><a href="https://github.com/justinpchang/nullboard-agent-express">Nullboard Agent Express Port</a> - an express.js-based portable app</li>
<li><a href="https://github.com/luismedel/nbagent">nbagent</a> - a version for Unix systems, in Python</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Beta</h2><a id="user-content-beta" aria-label="Permalink: Beta" href="#beta"></a></p>
<p dir="auto">Still very much in beta. Caveat emptor and all that.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">UI &amp; UX</h2><a id="user-content-ui--ux" aria-label="Permalink: UI &amp; UX" href="#ui--ux"></a></p>
<p dir="auto">The whole thing is largely about making it convenient to use.</p>
<p dir="auto">Everything is editable in place, all changes are saved automatically and last 50 revisions are kept for undo/redo:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-inplace-editing.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-inplace-editing.gif" alt="In-place editing" data-animated-image=""></a></p>
<p dir="auto">New notes can be quickly added directly where they are needed, e.g. before or after existing notes:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-ctrl-add-note.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-ctrl-add-note.gif" alt="Ctrl-add note" data-animated-image=""></a></p>
<p dir="auto">Notes can also be dragged around, including to and from other lists:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-drag-n-drop.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-drag-n-drop.gif" alt="Drag-n-drop" data-animated-image=""></a></p>
<p dir="auto">Nearly all controls are hidden by default to reduce visual clutter to its minimum:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-hidden-controls.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-hidden-controls.gif" alt="Hidden controls" data-animated-image=""></a></p>
<p dir="auto">Longer notes can be collapsed to show just the first line, for even more compact view of the board:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-collapsed-notes.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-collapsed-notes.gif" alt="Collapsed notes" data-animated-image=""></a></p>
<p dir="auto">The default font is <a href="https://tribby.com/fonts/barlow/" rel="nofollow">Barlow</a> - it's both narrow <em>and</em> still very legible. Absolutely fantastic design!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/barlow-specimen.png"><img src="https://github.com/apankrat/nullboard/raw/master/images/barlow-specimen.png" alt="Barlow speciment"></a></p>
<p dir="auto">Notes can also be set to look a bit different. This is useful for partitioning lists into sections:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-raw-notes.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-raw-notes.gif" alt="Raw notes" data-animated-image=""></a></p>
<p dir="auto">Links starting with https:// and http:// are recognized. They will "pulse" on mouse hover and can be opened via the right-click menu.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-links-on-hover.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-links-on-hover.gif" alt="Links on hover" data-animated-image=""></a></p>
<p dir="auto">Pressing CapsLock will highlight all links and make them left-clickable.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-links-reveal.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-links-reveal.gif" alt="Links reveal" data-animated-image=""></a></p>
<p dir="auto">Lists can be moved around as well, though not as flashy as notes:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-list-swap.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-list-swap.gif" alt="List swapping" data-animated-image=""></a></p>
<p dir="auto">The font can be changed; its size and line height can be adjusted:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-ui-preferences.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-ui-preferences.gif" alt="Theme and zoom" data-animated-image=""></a></p>
<p dir="auto">The color theme can be inverted:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-dark-theme.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-dark-theme.gif" alt="Dark theme" data-animated-image=""></a></p>
<p dir="auto">Also:</p>
<ul dir="auto">
<li>Support for multiple boards with near-instant switching</li>
<li>Undo/redo for 50 revisions per board (configurable in the code)</li>
<li>Keyboard shortcuts, including Tab'ing through notes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Caveats</h2><a id="user-content-caveats" aria-label="Permalink: Caveats" href="#caveats"></a></p>
<ul dir="auto">
<li>Written for desktop and keyboard/mouse use</li>
<li>Essentially untested on mobile devices and against tap/touch input</li>
<li>Works in Firefox, tested in Chrome, should work in Safari and may work in Edge (or what it's called now)</li>
<li>Uses localStorage for storing boards/lists/notes, so be careful around <a href="https://stackoverflow.com/questions/9948284/how-persistent-is-localstorage" rel="nofollow">clearing your cache</a></li>
</ul>
<p dir="auto">You spot a bug, file an issue.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dockerized version</h2><a id="user-content-dockerized-version" aria-label="Permalink: Dockerized version" href="#dockerized-version"></a></p>
<p dir="auto">See <a href="https://github.com/rsoper/nullboard">this fork</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Background</h2><a id="user-content-background" aria-label="Permalink: Background" href="#background"></a></p>
<p dir="auto">Nullboard is something that handles ToDo lists in the way that works really well. For <em>me</em> that is.</p>
<p dir="auto">Tried a lot of options, some were almost <em>it</em>, but none was 100%.</p>
<p dir="auto"><strong>Trello</strong> wasn't bad, but never was comfortable with the idea of storing my data in cloud without any actual need.</p>
<p dir="auto"><strong>Wekan</strong> looked promising, but ultimately too heavy and had no offline usage support or a local storage option.</p>
<p dir="auto"><strong>Things</strong> was beautiful, but not the right tool for the job.</p>
<p dir="auto"><strong>Inkscape</strong> - I kid you not - with a laundry list of text items was actually OK, but didn't scale well.</p>
<p dir="auto">Ditto for the plain <strong>text files</strong>.</p>
<p dir="auto">Pieces of <strong>paper</strong> were almost there, but rearranging items can be quite a hassle.</p>
<p dir="auto">So finally got annoyed enough to sit down and write exactly what I wanted.</p>
<p dir="auto">And, voilà, Nullboard came out  =&gt;  <a href="https://nullboard.io/preview" rel="nofollow">https://nullboard.io/preview</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">The <a href="https://opensource.org/licenses/BSD-2-Clause/" rel="nofollow">2-clause BSD license</a> with the <a href="https://commonsclause.com/" rel="nofollow">Commons Clause</a>.</p>
<p dir="auto">That is, you can use, change and re-distribute it for as long as you don't try and sell it.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Updates</h2><a id="user-content-updates" aria-label="Permalink: Updates" href="#updates"></a></p>
<p dir="auto">Primary feed is through <a href="https://twitter.com/nullboard" rel="nofollow">@nullboard</a> on Twitter.</p>
<p dir="auto">The changelog is here =&gt; <a href="https://nullboard.io/changes" rel="nofollow">https://nullboard.io/changes</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How do you do, fellow web developers? A growing disconnect (123 pts)]]></title>
            <link>https://rakhim.exotext.com/web-developers-a-growing-disconnect</link>
            <guid>42461264</guid>
            <pubDate>Thu, 19 Dec 2024 13:39:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rakhim.exotext.com/web-developers-a-growing-disconnect">https://rakhim.exotext.com/web-developers-a-growing-disconnect</a>, See on <a href="https://news.ycombinator.com/item?id=42461264">Hacker News</a></p>
Couldn't get https://rakhim.exotext.com/web-developers-a-growing-disconnect: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Alignment faking in large language models (230 pts)]]></title>
            <link>https://www.anthropic.com/research/alignment-faking</link>
            <guid>42458752</guid>
            <pubDate>Thu, 19 Dec 2024 05:43:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.anthropic.com/research/alignment-faking">https://www.anthropic.com/research/alignment-faking</a>, See on <a href="https://news.ycombinator.com/item?id=42458752">Hacker News</a></p>
Couldn't get https://www.anthropic.com/research/alignment-faking: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Markov Keyboard: keyboard layout that changes by Markov frequency (156 pts)]]></title>
            <link>https://github.com/shapr/markovkeyboard</link>
            <guid>42458599</guid>
            <pubDate>Thu, 19 Dec 2024 05:12:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/shapr/markovkeyboard">https://github.com/shapr/markovkeyboard</a>, See on <a href="https://news.ycombinator.com/item?id=42458599">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">markovkeyboard</h2><a id="user-content-markovkeyboard" aria-label="Permalink: markovkeyboard" href="#markovkeyboard"></a></p>
<p dir="auto">keyboard layout that changes by markov frequency</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/shapr/markovkeyboard/blob/master/screenshot.png"><img src="https://github.com/shapr/markovkeyboard/raw/master/screenshot.png" alt="screenshot"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">the big idea</h2><a id="user-content-the-big-idea" aria-label="Permalink: the big idea" href="#the-big-idea"></a></p>
<p dir="auto">Static keyboard layouts are boring and predictable. Let's spice up the whole idea of keyboard layouts by having the layout <em>CHANGE WHILE YOU ARE TYPING</em>!</p>
<p dir="auto">The layout will update itself to move the keys that most frequently come next to the home row.
For example, if you type only "the" all day, then when you press the letter 't' the letter 'h' will be on the home row.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">how do I type?</h2><a id="user-content-how-do-i-type" aria-label="Permalink: how do I type?" href="#how-do-i-type"></a></p>
<p dir="auto">There are minor challenges involved if your keyboard layout could change with every keypress, thus this prototype is an emacs library that displays and updates the current layout with every keypress.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">does it work?</h2><a id="user-content-does-it-work" aria-label="Permalink: does it work?" href="#does-it-work"></a></p>
<p dir="auto">Pretty much! It only remaps the letters from a-zA-Z, but it does work!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">how do I make it go?</h2><a id="user-content-how-do-i-make-it-go" aria-label="Permalink: how do I make it go?" href="#how-do-i-make-it-go"></a></p>
<p dir="auto">Use the pre-trained markov-all.el with M-x load-file then type in /path/to/markovkeyboard/markov-all.el</p>
<p dir="auto">After that, use M-x set-input-method and choose markov-insanity-a or replace a with any letter you prefer!</p>
<p dir="auto">If you want a different set of 26 keymaps:</p>
<p dir="auto">Download a plain text file for training the markov chain, then run "python crunch_freqs.py filename.txt" and that will generate a markov-all.el file that you can use with M-x load-file .</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">how do I make it stop?</h2><a id="user-content-how-do-i-make-it-stop" aria-label="Permalink: how do I make it stop?" href="#how-do-i-make-it-stop"></a></p>
<p dir="auto">C-\ is bound to toggle-input-method in stock emacs, and the keybindings are all buffer local, so the code shouldn't make your life too difficult.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">what needs to be done?</h2><a id="user-content-what-needs-to-be-done" aria-label="Permalink: what needs to be done?" href="#what-needs-to-be-done"></a></p>
<ul>
<li> define a new input-method for markov</li>
<li> display the keyboard layout when enabling the mode</li>
<li> port to X11 to ease getting started</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amazon workers to strike at multiple US warehouses during busy holiday season (340 pts)]]></title>
            <link>https://www.reuters.com/technology/amazon-workers-strike-multiple-us-warehouses-during-busy-holiday-season-2024-12-19/</link>
            <guid>42458431</guid>
            <pubDate>Thu, 19 Dec 2024 04:27:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/technology/amazon-workers-strike-multiple-us-warehouses-during-busy-holiday-season-2024-12-19/">https://www.reuters.com/technology/amazon-workers-strike-multiple-us-warehouses-during-busy-holiday-season-2024-12-19/</a>, See on <a href="https://news.ycombinator.com/item?id=42458431">Hacker News</a></p>
Couldn't get https://www.reuters.com/technology/amazon-workers-strike-multiple-us-warehouses-during-busy-holiday-season-2024-12-19/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Firenvim – Turn the browser into a Neovim client (150 pts)]]></title>
            <link>https://github.com/glacambre/firenvim</link>
            <guid>42457816</guid>
            <pubDate>Thu, 19 Dec 2024 02:34:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/glacambre/firenvim">https://github.com/glacambre/firenvim</a>, See on <a href="https://news.ycombinator.com/item?id=42457816">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">
<p dir="auto">Turn your browser¹ into a Neovim client (demos: <a href="https://www.youtube.com/watch?v=suvh0yFfIB8" rel="nofollow">justinmk 🇺🇸</a>, <a href="https://www.youtube.com/watch?v=dNQJONKnJrg" rel="nofollow">Sean Feng 🇨🇳</a>).</p>
<p dir="auto">¹ <sub>Firefox and Chrome are specifically supported. Other Chromium based browsers such as Brave, Vivaldi, Opera, and Arc should also work but are not specifically tested.</sub></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/glacambre/firenvim/blob/master/firenvim.gif"><img src="https://github.com/glacambre/firenvim/raw/master/firenvim.gif" alt="Firenvim demo" data-animated-image=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How to use</h2><a id="user-content-how-to-use" aria-label="Permalink: How to use" href="#how-to-use"></a></p>
<p dir="auto">Just click on any textarea and it will be immediately replaced by an instance of Firenvim. To set the content of the now hidden textarea to the content of the Neovim instance, simply <code>:w</code>. If you want to close the Firenvim overlay and return to the textarea, use <code>:q</code>. If you selected an element where you expected the Firenvim frame to appear and it didn't, try pressing <code>&lt;C-e&gt;</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installing</h2><a id="user-content-installing" aria-label="Permalink: Installing" href="#installing"></a></p>
<p dir="auto">Before installing anything please read <a href="https://github.com/glacambre/firenvim/blob/master/SECURITY.md">SECURITY.md</a> and make sure you're okay with everything mentioned. In the event you think of a way to compromise Firenvim, please send me an email (you can find my address on my website).</p>
<ol dir="auto">
<li>
<p dir="auto">Install Firenvim as a regular NeoVim plugin, then run the built-in post-install script.</p>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/folke/lazy.nvim">lazy</a></p>
<div dir="auto" data-snippet-clipboard-copy-content="{ 'glacambre/firenvim', build = &quot;:call firenvim#install(0)&quot; }
"><pre>{ <span><span>'</span>glacambre/firenvim<span>'</span></span>, <span>build</span> <span>=</span> <span><span>"</span>:call firenvim#install(0)<span>" </span></span>}
</pre></div>
</li>
<li>
<p dir="auto"><a href="https://github.com/junegunn/vim-plug">vim-plug</a></p>
<div dir="auto" data-snippet-clipboard-copy-content="Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }"><pre>Plug <span><span>'</span>glacambre/firenvim<span>'</span></span>, { <span><span>'</span>do<span>'</span></span>: { _ <span>-</span>&gt; <span>firenvim#install</span>(<span>0</span>) } }</pre></div>
</li>
<li>
<p dir="auto"><a href="https://github.com/k-takata/minpac">minpac</a></p>
<div dir="auto" data-snippet-clipboard-copy-content="call minpac#add('glacambre/firenvim', { 'type': 'opt', 'do': 'packadd firenvim | call firenvim#install(0)'})
if exists('g:started_by_firenvim')
  packadd firenvim
endif"><pre><span>call</span> <span>minpac#add</span>(<span><span>'</span>glacambre/firenvim<span>'</span></span>, { <span><span>'</span>type<span>'</span></span>: <span><span>'</span>opt<span>'</span></span>, <span><span>'</span>do<span>'</span></span>: <span><span>'</span>packadd firenvim | call firenvim#install(0)<span>'</span></span>})
<span>if</span> <span>exists</span>(<span><span>'</span>g:started_by_firenvim<span>'</span></span>)
  <span>packadd</span> firenvim
<span>endif</span></pre></div>
</li>
<li>
<p dir="auto"><a href="https://github.com/VundleVim/Vundle.vim">vundle</a>, others</p>
<p dir="auto">Install the plugin as you usually would, then run this shell command:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ nvim --headless &quot;+call firenvim#install(0) | q&quot;"><pre>$ nvim --headless <span><span>"</span>+call firenvim#install(0) | q<span>"</span></span></pre></div>
</li>
</ul>
</li>
<li>
<p dir="auto">Install the Firenvim addon for your browser from <a href="https://addons.mozilla.org/en-US/firefox/addon/firenvim/" rel="nofollow">Mozilla's store</a> or <a href="https://chrome.google.com/webstore/detail/firenvim/egpjdkipkomnmjhjmdamaniclmdlobbo" rel="nofollow">Google's</a>.</p>
</li>
</ol>
<p dir="auto">If you would rather build and install Firenvim from source, check <a href="https://github.com/glacambre/firenvim/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Other browsers</h4><a id="user-content-other-browsers" aria-label="Permalink: Other browsers" href="#other-browsers"></a></p>
<p dir="auto">Other browsers aren't supported for now. Opera, Vivaldi and other Chromium-based browsers should however work just like in Chromium and have similar install steps. Brave, Edge, and Arc might work, Safari doesn't (it doesn't support Webextensions).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Permissions</h2><a id="user-content-permissions" aria-label="Permalink: Permissions" href="#permissions"></a></p>
<p dir="auto">Firenvim currently requires the following permissions for the following reasons:</p>
<ul dir="auto">
<li><a href="https://support.mozilla.org/en-US/kb/permission-request-messages-firefox-extensions?as=u&amp;utm_source=inproduct#w_access-your-data-for-all-websites" rel="nofollow">Access your data for all websites</a>: this is necessary in order to be able to append elements (= the neovim iframe) to the DOM.</li>
<li><a href="https://support.mozilla.org/en-US/kb/permission-request-messages-firefox-extensions?as=u#w_exchange-messages-with-programs-other-than-firefox" rel="nofollow">Exchange messages with programs other than Firefox</a>: this is necessary in order to be able to start neovim instances.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Configuring Firenvim</h2><a id="user-content-configuring-firenvim" aria-label="Permalink: Configuring Firenvim" href="#configuring-firenvim"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Manually triggering Firenvim</h3><a id="user-content-manually-triggering-firenvim" aria-label="Permalink: Manually triggering Firenvim" href="#manually-triggering-firenvim"></a></p>
<p dir="auto">You can configure the keybinding to manually trigger Firenvim (<code>&lt;C-e&gt;</code> by default) in <a href="https://support.mozilla.org/en-US/kb/manage-extension-shortcuts-firefox" rel="nofollow">the shortcuts menu in <code>about://addons</code></a> on Firefox, or in <code>chrome://extensions/shortcuts</code> on Chrome.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Temporarily disabling Firenvim in a tab</h3><a id="user-content-temporarily-disabling-firenvim-in-a-tab" aria-label="Permalink: Temporarily disabling Firenvim in a tab" href="#temporarily-disabling-firenvim-in-a-tab"></a></p>
<p dir="auto">Temporarily disabling (and re-enabling) Firenvim in a tab can be done either by clicking on the Firenvim button next to the urlbar or by configuring a browser shortcut (see the previous section to find out how browser shortcuts can be configured).</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building a Firenvim-specific config</h3><a id="user-content-building-a-firenvim-specific-config" aria-label="Permalink: Building a Firenvim-specific config" href="#building-a-firenvim-specific-config"></a></p>
<p dir="auto">Note: If you would prefer VimScript examples, you can consult the (outdated) readme from commit 132979166a02319f0b49815135e60a4e4599de91 or earlier.</p>
<p dir="auto"><strong>New</strong>: With Neovim nightly builds from 2023/02/17 or more recent, you can use <a href="https://neovim.io/doc/user/starting.html#$NVIM_APPNAME" rel="nofollow">$NVIM_APPNAME</a> to define a completely separate firenvim config. In order to do that, make sure "NVIM_APPNAME" is appropriately set when you run firenvim#install().</p>
<p dir="auto">When it starts Neovim, Firenvim sets the variable <code>g:started_by_firenvim</code> which you can check to run different code in your init.lua. For example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="if vim.g.started_by_firenvim == true then
  vim.o.laststatus = 0
else
  vim.o.laststatus = 2
end"><pre><span>if</span> <span>vim</span>.<span>g</span>.<span>started_by_firenvim</span> <span>==</span> <span>true</span> <span>then</span>
  <span>vim</span>.<span>o</span>.<span>laststatus</span> <span>=</span> <span>0</span>
<span>else</span>
  <span>vim</span>.<span>o</span>.<span>laststatus</span> <span>=</span> <span>2</span>
<span>end</span></pre></div>
<p dir="auto">Alternatively, you can detect when Firenvim connects to Neovim by using the <code>UIEnter</code> autocmd event:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'UIEnter'}, {
    callback = function(event)
        local client = vim.api.nvim_get_chan_info(vim.v.event.chan).client
        if client ~= nil and client.name == &quot;Firenvim&quot; then
            vim.o.laststatus = 0
        end
    end
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>UIEnter<span>'</span></span>}, {
    <span>callback</span> <span>=</span> <span>function</span>(<span>event</span>)
        <span>local</span> <span>client</span> <span>=</span> <span>vim</span>.<span>api</span>.<span>nvim_get_chan_info</span>(<span>vim</span>.<span>v</span>.<span>event</span>.<span>chan</span>).<span>client</span>
        <span>if</span> <span>client</span> <span>~=</span> <span>nil</span> <span>and</span> <span>client</span>.<span>name</span> <span>==</span> <span><span>"</span>Firenvim<span>" </span></span><span>then</span>
            <span>vim</span>.<span>o</span>.<span>laststatus</span> <span>=</span> <span>0</span>
        <span>end</span>
    <span>end</span>
})</pre></div>
<p dir="auto">Similarly, you can detect when Firenvim disconnects from a Neovim instance with the <code>UILeave</code> autocommand.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Using different settings depending on the url/page/element being edited</h3><a id="user-content-using-different-settings-depending-on-the-urlpageelement-being-edited" aria-label="Permalink: Using different settings depending on the url/page/element being edited" href="#using-different-settings-depending-on-the-urlpageelement-being-edited"></a></p>
<p dir="auto">The nvim buffer loaded into a textarea is given a unique name. All buffers are named something like this: <code>domainname_page_selector.txt</code> (see the <a href="https://github.com/glacambre/firenvim/blob/master/src/utils/utils.ts">toFileName function</a>).</p>
<p dir="auto">This alows you to configure different settings by creating autocommands targeting/matching the buffername for that url/page/element. For example, this will set file type to markdown for all GitHub buffers:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'BufEnter'}, {
    pattern = &quot;github.com_*.txt&quot;,
    command = &quot;set filetype=markdown&quot;
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>BufEnter<span>'</span></span>}, {
    <span>pattern</span> <span>=</span> <span><span>"</span>github.com_*.txt<span>"</span></span>,
    <span>command</span> <span>=</span> <span><span>"</span>set filetype=markdown<span>"</span></span>
})</pre></div>
<p dir="auto">To view the buffername of your nvim instance in a textarea, use <code>:buffers</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Understanding Firenvim's configuration object</h3><a id="user-content-understanding-firenvims-configuration-object" aria-label="Permalink: Understanding Firenvim's configuration object" href="#understanding-firenvims-configuration-object"></a></p>
<p dir="auto">You can configure everything else about Firenvim by creating a dictionary named <code>vim.g.firenvim_config</code> in your init.lua and setting the keys "globalSettings" and "localSettings". In the dictionary <code>vim.g.firenvim_config["localSettings"]</code> you can map Javascript patterns that match against the full URL to settings that are used for all URLs matched by that pattern. When multiple patterns match a URL, the pattern with the highest "priority" value is used. Here is an example (the settings and their possible values will be explained in the next subsections):</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    globalSettings = { alt = &quot;all&quot; },
    localSettings = {
        [&quot;.*&quot;] = {
            cmdline  = &quot;neovim&quot;,
            content  = &quot;text&quot;,
            priority = 0,
            selector = &quot;textarea&quot;,
            takeover = &quot;always&quot;
        }
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>globalSettings</span> <span>=</span> { <span>alt</span> <span>=</span> <span><span>"</span>all<span>" </span></span>},
    <span>localSettings</span> <span>=</span> {
        [<span><span>"</span>.*<span>"</span></span>] <span>=</span> {
            <span>cmdline</span>  <span>=</span> <span><span>"</span>neovim<span>"</span></span>,
            <span>content</span>  <span>=</span> <span><span>"</span>text<span>"</span></span>,
            <span>priority</span> <span>=</span> <span>0</span>,
            <span>selector</span> <span>=</span> <span><span>"</span>textarea<span>"</span></span>,
            <span>takeover</span> <span>=</span> <span><span>"</span>always<span>"</span></span>
        }
    }
}</pre></div>
<p dir="auto">With this configuration, <code>takeover</code> will be set to <code>always</code> on all websites. If we wanted to override this value on british websites, we could add the following lines to our init.vim. Notice how the priority of this new regex is higher than that of the <code>.*</code> regex:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings[&quot;https?://[^/]+\\.co\\.uk/&quot;] = { takeover = 'never', priority = 1 }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>"</span>https?://[^/]+<span>\\</span>.co<span>\\</span>.uk/<span>"</span></span>] <span>=</span> { <span>takeover</span> <span>=</span> <span><span>'</span>never<span>'</span></span>, <span>priority</span> <span>=</span> <span>1</span> }</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Configuring what elements Firenvim should appear on</h3><a id="user-content-configuring-what-elements-firenvim-should-appear-on" aria-label="Permalink: Configuring what elements Firenvim should appear on" href="#configuring-what-elements-firenvim-should-appear-on"></a></p>
<p dir="auto">The <code>selector</code> attribute of a localSetting controls what elements Firenvim automatically takes over. Here's the default value:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { selector = 'textarea:not([readonly], [aria-readonly]), div[role=&quot;textbox&quot;]' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>selector</span> <span>=</span> <span><span>'</span>textarea:not([readonly], [aria-readonly]), div[role="textbox"]<span>' </span></span>}</pre></div>
<p dir="auto">If you don't want to use Firenvim with rich text editors (e.g. Gmail, Outlook, Slack…) as a general rule, you might want to restrict Firenvim to simple textareas:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { selector = 'textarea' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>selector</span> <span>=</span> <span><span>'</span>textarea<span>' </span></span>}</pre></div>
<p dir="auto">Since <code>selector</code> is just a CSS selector, you have access to all of CSS's pseudo selectors, including <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:not" rel="nofollow"><code>:not()</code></a>, which allows you to exclude elements that have certain attributes, like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { selector = 'textarea:not([class=xxx])' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>selector</span> <span>=</span> <span><span>'</span>textarea:not([class=xxx])<span>' </span></span>}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Configuring Firenvim to not always take over elements</h3><a id="user-content-configuring-firenvim-to-not-always-take-over-elements" aria-label="Permalink: Configuring Firenvim to not always take over elements" href="#configuring-firenvim-to-not-always-take-over-elements"></a></p>
<p dir="auto">Firenvim has a setting named <code>takeover</code> that can be set to <code>always</code>, <code>empty</code>, <code>never</code>, <code>nonempty</code> or <code>once</code>. When set to <code>always</code>, Firenvim will always take over elements for you. When set to <code>empty</code>, Firenvim will only take over empty elements. When set to <code>never</code>, Firenvim will never automatically appear, thus forcing you to use a keyboard shortcut in order to make the Firenvim frame appear. When set to <code>nonempty</code>, Firenvim will only take over elements that aren't empty. When set to <code>once</code>, Firenvim will take over elements the first time you select them, which means that after <code>:q</code>'ing Firenvim, you'll have to use the keyboard shortcut to make it appear again. Here's how to use the <code>takeover</code> setting:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { takeover = 'always' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>takeover</span> <span>=</span> <span><span>'</span>always<span>' </span></span>}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Choosing a command line</h3><a id="user-content-choosing-a-command-line" aria-label="Permalink: Choosing a command line" href="#choosing-a-command-line"></a></p>
<p dir="auto">You can chose between neovim's built-in command line, firenvim's command line and no command line at all by setting the localSetting named <code>cmdline</code> to either <code>neovim</code>, <code>firenvim</code> or <code>none</code>, e.g.:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { cmdline = 'firenvim' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>cmdline</span> <span>=</span> <span><span>'</span>firenvim<span>' </span></span>}</pre></div>
<p dir="auto">Choosing <code>none</code> does not make sense unless you have alternative way to display the command line such as <a href="https://github.com/folke/noice.nvim">noice.nvim</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Editing HTML directly</h3><a id="user-content-editing-html-directly" aria-label="Permalink: Editing HTML directly" href="#editing-html-directly"></a></p>
<p dir="auto">The <code>content</code> localSetting controls how Firenvim should read the content of an element. Setting it to <code>html</code> will make Firenvim fetch the content of elements as HTML, <code>text</code> will make it use plaintext. The default value is <code>text</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { content = 'html' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>content</span> <span>=</span> <span><span>'</span>html<span>' </span></span>}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Special characters on MacOS</h3><a id="user-content-special-characters-on-macos" aria-label="Permalink: Special characters on MacOS" href="#special-characters-on-macos"></a></p>
<p dir="auto">On MacOS, the default keyboard layouts emit special characters when the alt (i.e. option) key is held down. From the perspective of the browser, these special characters replace the underlying "main" character of a keystroke event while retaining the modifier. For example, in the standard US layout the key chord alt-o is received in the browser as alt-ø rather than alt-o. Further, certain alt-chords represent "dead keys", which apply a diacritic to the next character entered. Pressing alt-e followed by a produces the single character "á" while alt-u followed by a produces "ä". To produce this behavior, diacritic-mapped strokes like alt-e and alt-u are themselves mapped to a <a href="https://en.wikipedia.org/wiki/Dead_key" rel="nofollow">"Dead key" character</a>.</p>
<p dir="auto">These behaviors complicate the support of special character and alt/meta (A- or M-) vim mappings on MacOS in two ways:</p>
<ol dir="auto">
<li>
<p dir="auto">There is no way to generate unmodified special character key events. For example, since the only way to generate the character "ø" via the keyboard is by holding down alt, any key event with the "ø" character will also have an alt modifier. If we forward this directly to Vim, it will be received as <code>&lt;M-ø&gt;</code>.</p>
</li>
<li>
<p dir="auto">There is no way to generate alt-modified plain alphanumeric characters. For example, an <code>&lt;M-o&gt;</code> mapping won't work because pressing alt-o generates <code>&lt;M-ø&gt;</code> rather than <code>&lt;M-o&gt;</code>.</p>
</li>
</ol>
<p dir="auto">Terminal and standalone GUI applications can solve these problems by changing the interpretation of the alt key at the application level. <code>Terminal.app</code> and <code>iTerm2</code>, for instance, both provide a "use Option as Meta key" preference that converts incoming alt-chords at the application level. Firenvim, however, is a browser extension that operates off of browser keystroke events rather than application-level events. At present, we are unsure how to implement this "use option as meta" functionality at the browser event level (help here is welcome!). However, there are some workarounds.</p>
<p dir="auto">For problem (1), Firenvim will by default drop the alt key on MacOS for any special character, defined here as non-alphanumeric (not matching <code>/[a-zA-Z0-9]/</code>). This means alt-o will be forwarded to NeoVim as "ø" rather than "M-ø". Note that this behavior can be changed by setting the <code>alt</code> setting of the <code>globalSettings</code> configuration to <code>all</code>, like this:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Making Firenvim ignore keys</h3><a id="user-content-making-firenvim-ignore-keys" aria-label="Permalink: Making Firenvim ignore keys" href="#making-firenvim-ignore-keys"></a></p>
<p dir="auto">You can make Firenvim ignore key presses (thus letting the browser handle them) by setting key-value pairs in <code>globalSettings.ignoreKeys</code>. The key needs to be the neovim mode the key press should be ignored in and the value should be an array containing the textual representation of the key press you want ignored. If you want to ignore a key press in all modes, you can use <code>all</code> as mode key.</p>
<p dir="auto">For example, if you want to make Firenvim ignore <code>&lt;C-1&gt;</code> and <code>&lt;C-2&gt;</code> in normal mode and <code>&lt;C--&gt;</code> in all modes to let your browser handle them, you should define ignoreKeys like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    globalSettings = {
        ignoreKeys = {
            all = { '<C-->' },
            normal = { '<C-1>', '<C-2>' }
        }
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>globalSettings</span> <span>=</span> {
        <span>ignoreKeys</span> <span>=</span> {
            <span>all</span> <span>=</span> { <span><span>'</span>&lt;C--&gt;<span>' </span></span>},
            <span>normal</span> <span>=</span> { <span><span>'</span>&lt;C-1&gt;<span>'</span></span>, <span><span>'</span>&lt;C-2&gt;<span>' </span></span>}
        }
    }
}</pre></div>
<p dir="auto">Mode names are defined in <a href="https://github.com/neovim/neovim/blob/master/src/nvim/cursor_shape.c">Neovim's cursor_shape.c</a>. Note that if the key press contains multiple modifiers, Shift needs to be first, Alt second, Control third and OS/Meta last (e.g. <code>Ctrl+Alt+Shift+1</code> needs to be <code>&lt;SAC-1&gt;</code>). If your keyboard layout requires you to press shift in order to press numbers, shift should be present in the key representation (e.g. on french azerty keyboards, <code>&lt;C-1&gt;</code> should actually be <code>&lt;SC-1&gt;</code>).</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Interacting with the page</h3><a id="user-content-interacting-with-the-page" aria-label="Permalink: Interacting with the page" href="#interacting-with-the-page"></a></p>
<p dir="auto">You can execute javascript in the page by using <code>firenvim#eval_js</code>. The code has to be a valid javascript expression (NOT a statement). You can provide the name of a function that should be executed with the result of the expression. Note that some pages prevent evaluating JavaScript with their <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" rel="nofollow">CSP</a> and this can't be worked around. Here's an example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.fn['firenvim#eval_js']('alert(&quot;Hello World!&quot;)', 'MyFunction')"><pre><span>vim</span>.<span>fn</span>[<span><span>'</span>firenvim#eval_js<span>'</span></span>](<span><span>'</span>alert("Hello World!")<span>'</span></span>, <span><span>'</span>MyFunction<span>'</span></span>)</pre></div>
<p dir="auto">You can move focus from the editor back to the page or the input field by calling <code>firenvim#focus_page</code> or <code>firenvim#focus_input</code>. Here's an example that does exactly this if you press <code>&lt;Esc&gt;</code> twice while in normal mode:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_set_keymap(&quot;n&quot;, &quot;<Esc><Esc>&quot;, &quot;<Cmd>call firenvim#focus_page()<CR>&quot;, {})"><pre><span>vim</span>.<span>api</span>.<span>nvim_set_keymap</span>(<span><span>"</span>n<span>"</span></span>, <span><span>"</span>&lt;Esc&gt;&lt;Esc&gt;<span>"</span></span>, <span><span>"</span>&lt;Cmd&gt;call firenvim#focus_page()&lt;CR&gt;<span>"</span></span>, {})</pre></div>
<p dir="auto">There is also a function named <code>firenvim#hide_frame()</code> which will temporarily hide the Firenvim frame. You will then be able to bring the neovim frame back either by unfocusing and refocusing the textarea or by using the <a href="https://github.com/glacambre/firenvim#manually-triggering-firenvim">keybinding to manually trigger Firenvim</a>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_set_keymap(&quot;n&quot;, &quot;<C-z>&quot;, &quot;<Cmd>call firenvim#hide_frame()<CR>&quot;, {})"><pre><span>vim</span>.<span>api</span>.<span>nvim_set_keymap</span>(<span><span>"</span>n<span>"</span></span>, <span><span>"</span>&lt;C-z&gt;<span>"</span></span>, <span><span>"</span>&lt;Cmd&gt;call firenvim#hide_frame()&lt;CR&gt;<span>"</span></span>, {})</pre></div>
<p dir="auto">A function named <code>firenvim#press_keys()</code> will allow you to send key events to the underlying input field by taking a list of vim-like keys (e.g. <code>a</code>, <code>&lt;CR&gt;</code>, <code>&lt;Space&gt;</code>…) as argument. Note that this only "triggers" an event, it does not add text to the input field. For example if you'd like firenvim to send <code>&lt;CR&gt;</code> to the webpage when you press <code>&lt;CR&gt;</code> in the editor, you can use the following mapping which is useful with chat apps:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'BufEnter', {
    pattern = &quot;riot.im_*&quot;,
    command = [[inoremap <CR> <Esc>:w<CR>:call firenvim#press_keys(&quot;<LT>CR>&quot;)<CR>ggdGa]],
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>BufEnter<span>'</span></span>, {
    <span>pattern</span> <span>=</span> <span><span>"</span>riot.im_*<span>"</span></span>,
    <span>command</span> <span>=</span> <span><span>[[</span>inoremap &lt;CR&gt; &lt;Esc&gt;:w&lt;CR&gt;:call firenvim#press_keys("&lt;LT&gt;CR&gt;")&lt;CR&gt;ggdGa<span>]]</span></span>,
})</pre></div>
<p dir="auto">Note that our goal is to make the mapping type <code>firenvim#press_keys("&lt;CR&gt;")</code> in vim's command prompt and then execute it. Since we want the keys <code>&lt;CR&gt;</code> to be typed and not <kbd>Enter</kbd> to be pressed, we can't use <code>&lt;CR&gt;</code> because it would be interpreted by <code>inoremap</code>. Hence we use <code>&lt;LT&gt;CR&gt;</code> in order to type the keys <code>&lt;CR&gt;</code>. Similarly, if you want to type the keys <code>&lt;C-CR&gt;</code> you'd use <code>&lt;LT&gt;C-CR&gt;</code>.</p>
<p dir="auto">Known Issues: some websites do not react to <code>firenvim#press_keys</code> (e.g. Slack).</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Automatically syncing changes to the page</h3><a id="user-content-automatically-syncing-changes-to-the-page" aria-label="Permalink: Automatically syncing changes to the page" href="#automatically-syncing-changes-to-the-page"></a></p>
<p dir="auto">Since Firenvim simply uses the BufWrite event in order to detect when it needs to write neovim's buffers to the page, Firenvim can be made to automatically synchronize all changes like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'TextChanged', 'TextChangedI'}, {
    nested = true,
    command = &quot;write&quot;
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>TextChanged<span>'</span></span>, <span><span>'</span>TextChangedI<span>'</span></span>}, {
    <span>nested</span> <span>=</span> <span>true</span>,
    <span>command</span> <span>=</span> <span><span>"</span>write<span>"</span></span>
})</pre></div>
<p dir="auto">Depending on how large the edited buffer is, this could be a little slow. This more sophisticated approach will throttle writes:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'TextChanged', 'TextChangedI'}, {
    callback = function(e)
        if vim.g.timer_started == true then
            return
        end
        vim.g.timer_started = true
        vim.fn.timer_start(10000, function()
            vim.g.timer_started = false
            vim.cmd('silent write')
        end)
    end
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>TextChanged<span>'</span></span>, <span><span>'</span>TextChangedI<span>'</span></span>}, {
    <span>callback</span> <span>=</span> <span>function</span>(<span>e</span>)
        <span>if</span> <span>vim</span>.<span>g</span>.<span>timer_started</span> <span>==</span> <span>true</span> <span>then</span>
            <span>return</span>
        <span>end</span>
        <span>vim</span>.<span>g</span>.<span>timer_started</span> <span>=</span> <span>true</span>
        <span>vim</span>.<span>fn</span>.<span>timer_start</span>(<span>10000</span>, <span>function</span>()
            <span>vim</span>.<span>g</span>.<span>timer_started</span> <span>=</span> <span>false</span>
            <span>vim</span>.<span>cmd</span>(<span><span>'</span>silent write<span>'</span></span>)
        <span>end</span>)
    <span>end</span>
})</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Configuring message timeout</h3><a id="user-content-configuring-message-timeout" aria-label="Permalink: Configuring message timeout" href="#configuring-message-timeout"></a></p>
<p dir="auto">Due to space constraints, the external command line covers part of the buffer. This can be a problem as sometimes neovim will send a message that tells Firenvim to draw the command line, and then never send the message to tell Firenvim to stop displaying it. In order to work around this problem, a "cmdlineTimeout" configuration option has been implemented, which makes Firenvim hide the external command line after the cursor has moved and some amount of milliseconds have passed:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    globalSettings = {
        cmdlineTimeout = 3000
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>globalSettings</span> <span>=</span> {
        <span>cmdlineTimeout</span> <span>=</span> <span>3000</span>
    }
}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Configuring the filename</h3><a id="user-content-configuring-the-filename" aria-label="Permalink: Configuring the filename" href="#configuring-the-filename"></a></p>
<p dir="auto">It is possible to configure the name of the file used by Firenvim with the <code>filename</code> localSetting. This setting is a format string where each element in curly braces will be replaced with a value and where the maximum length can be specified with a percentage. Possible format elements are <code>hostname</code> (= the domain name of the website), <code>pathname</code> (= the path of the page), <code>selector</code> (= the CSS selector of the text area), <code>timestamp</code> (= the current date) and <code>extension</code> (the language extension when using Firenvim on a code editor or <code>txt</code> otherwise). For example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    localSettings = {
        ['.*'] = {
            filename = '/tmp/{hostname}_{pathname%10}.{extension}'
        }
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>localSettings</span> <span>=</span> {
        [<span><span>'</span>.*<span>'</span></span>] <span>=</span> {
            <span>filename</span> <span>=</span> <span><span>'</span>/tmp/{hostname}_{pathname%10}.{extension}<span>'</span></span>
        }
    }
}</pre></div>
<p dir="auto">Will result in Firenvim using <code>/tmp/github.com_issues-new.txt</code> on Github's new issue page. The default value of this setting is <code>{hostname%32}_{pathname%32}_{selector%32}_{timestamp%32}.{extension}</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Drawbacks</h2><a id="user-content-drawbacks" aria-label="Permalink: Drawbacks" href="#drawbacks"></a></p>
<p dir="auto">Some keybindings, such as <code>&lt;C-n&gt;</code>, <code>&lt;C-t&gt;</code> and <code>&lt;C-w&gt;</code> are not overridable through usual means. This means that you have to tell your browser to let Firenvim override them by using <a href="https://support.mozilla.org/en-US/kb/manage-extension-shortcuts-firefox" rel="nofollow">the shortcuts menu in <code>about://addons</code></a> on Firefox and <code>chrome://extensions/shortcuts</code> in Chrome.</p>
<p dir="auto">When it is possible to do so, if you press one of these keyboard shortcuts while not in a Firenvim frame, Firenvim will attempt to emulate the expected behavior of the shortcut. For example, pressing <code>&lt;C-w&gt;</code> in a Firenvim frame will tell neovim you pressed <code>&lt;C-w&gt;</code>, but outside of it it will tell the browser to close the current tab.</p>
<p dir="auto">Controlling whether Firenvim should attempt to emulate the browser's default behavior can be done with global settings. The following snippet will tell Firenvim to simulate <code>&lt;C-n&gt;</code>'s default behavior while never simulating <code>&lt;C-w&gt;</code>'s:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    globalSettings = {
      ['<C-w>'] = 'noop',
      ['<C-n>'] = 'default'
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>globalSettings</span> <span>=</span> {
      [<span><span>'</span>&lt;C-w&gt;<span>'</span></span>] <span>=</span> <span><span>'</span>noop<span>'</span></span>,
      [<span><span>'</span>&lt;C-n&gt;<span>'</span></span>] <span>=</span> <span><span>'</span>default<span>'</span></span>
    }
}</pre></div>
<p dir="auto">Note that on Firefox on Linux some keyboard shortcuts might not be overridable. I circumvent this issue by running a <a href="https://github.com/glacambre/firefox-patches">patched</a> version of Firefox (note: once Firefox is patched, you won't need to setup webextension keyboard shortcuts).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">You might also like</h2><a id="user-content-you-might-also-like" aria-label="Permalink: You might also like" href="#you-might-also-like"></a></p>
<ul dir="auto">
<li><a href="https://github.com/tridactyl/tridactyl">Tridactyl</a>, provides vim-like keybindings to use Firefox. Also lets you edit input fields and text areas in your favourite editor with its <code>:editor</code> command.</li>
<li><a href="https://github.com/GhostText/GhostText">GhostText</a>, lets you edit text areas in your editor with a single click. Requires installing a plugin in your editor too. Features live updates!</li>
<li><a href="https://github.com/jlebon/textern">Textern</a>, a Firefox addon that lets you edit text areas in your editor without requiring you to install a plugin in your editor.</li>
<li><a href="https://github.com/asamuzaK/withExEditor">withExEditor</a>, same thing as Textern, except you can also edit/view a page's source with your editor.</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Postgres as a VectorDB GUI (146 pts)]]></title>
            <link>https://github.com/Z-Gort/Reservoirs-Lab</link>
            <guid>42457782</guid>
            <pubDate>Thu, 19 Dec 2024 02:28:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Z-Gort/Reservoirs-Lab">https://github.com/Z-Gort/Reservoirs-Lab</a>, See on <a href="https://news.ycombinator.com/item?id=42457782">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-turbo-body="">
      


    <div>
      <p><a href="#start-of-content" data-skip-target-assigned="false">Skip to content</a>

      <span data-view-component="true">
    <span data-view-component="true"></span>
</span></p>

<react-partial partial-name="keyboard-shortcuts-dialog" data-ssr="false" data-attempted-ssr="false">
  
  
  
</react-partial>




      

          

              


<header role="banner" data-is-top="true" data-color-mode="light" data-light-theme="light" data-dark-theme="dark">
  <h2>Navigation Menu</h2>

  

  <div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_product_navbar&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code Review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_product_navbar&quot;}" href="https://github.com/features/code-search">
      
      <div>
        <p>Code Search</p><p>
        Find more, search less
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>

                  <li>
      
      
</li>

                  <li>
      
      <div>
                    <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;white_papers_ebooks_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;white_papers_ebooks_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      White papers, Ebooks, Webinars

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      
      <div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

                </ul>
              </div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

                </ul>
              </div>
              
          </div>
</li>


                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:Z-Gort/Reservoirs-Lab" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="mMZRUmfSbewDk1rfMthq-GjYs1MGtwVz0lLjHYBqMX_QAKh6fdmyvZUoh8Rd-J8wdPA3XPZkmzl_EKpSPc787w" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="Z-Gort/Reservoirs-Lab" data-current-org="" data-current-owner="Z-Gort" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=Z-Gort%2FReservoirs-Lab" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/Z-Gort/Reservoirs-Lab&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="4f5066cf2da688fe4d25c3034f3408989151ba042595bff7b696cd03b810cd00" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>
          
        </p></div>
      </div>
</header>

      
    </div>

  








    


    






  <div itemscope="" itemtype="http://schema.org/SoftwareSourceCode" data-commit-hovercards-enabled="" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="" data-project-hovercards-enabled="">
    <main id="js-repo-pjax-container">
      
  





    






  
  

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance">
    <div data-view-component="true" id="repo-content-pjax-container">      


















<react-partial partial-name="repos-overview" data-ssr="true" data-attempted-ssr="true">
  
  
  <div data-target="react-partial.reactRoot"><div itemscope="" itemtype="https://schema.org/abstract"><h2>Repository files navigation</h2><nav aria-label="Repository files"><ul role="list"><li><a href="#" aria-current="page"><span data-component="icon"></span><span data-component="text" data-content="README">README</span></a></li></ul></nav></div><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Reservoirs Lab: Postgres VectorDB GUI and Data Insights 🐘✨</h2><a id="user-content-reservoirs-lab-postgres-vectordb-gui-and-data-insights-" aria-label="Permalink: Reservoirs Lab: Postgres VectorDB GUI and Data Insights 🐘✨" href="#reservoirs-lab-postgres-vectordb-gui-and-data-insights-"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Overview</h2><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">Reservoirs lab is a lightweight Electron app designed to connect directly to a Postgres database and visualize high-dimensional vector embeddings stored alongside structured data. It allows users to explore their data interactively and see correlations between metadata and semantic similarity of vector embeddings.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li><strong>Postgres Integration</strong>: Connect directly to your Postgres database via a connection string. 🛠️</li>
<li><strong>Vector Visualization</strong>: Plot and explore high-dimensional vectors interactively. 📊</li>
<li><strong>Neighborhood Exploration</strong>: Click on a data point to view points by cosine similarity from point (while maintaining clustering). 🔍</li>
<li><strong>Lightweight and Local</strong>: Runs locally on your machine, keeping your data private. 🖥️</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Prerequisites</h3><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<ul dir="auto">
<li>Node.js and npm installed on your machine.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Running the App Locally</h3><a id="user-content-running-the-app-locally" aria-label="Permalink: Running the App Locally" href="#running-the-app-locally"></a></p>
<ol dir="auto">
<li>Clone this repository:
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/z-gort/reservoirs-lab.git"><pre>git clone https://github.com/z-gort/reservoirs-lab.git</pre></div>
</li>
<li>Navigate to the project directory:

</li>
<li>Install dependencies:

</li>
<li>Start the app:

</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<ol dir="auto">
<li><strong>Connect to Your Database</strong>:
<ul dir="auto">
<li>Enter your Postgres database connection string in the app's connection window.</li>
</ul>
</li>
<li><strong>Visualize Vectors</strong>:
<ul dir="auto">
<li>View an interactive plot of your vector data.</li>
</ul>
</li>
<li><strong>Explore Neighborhoods</strong>:
<ul dir="auto">
<li>Click on a point to view data points by similarity and metadata correlated with semantic similarity to a point.</li>
</ul>
</li>
</ol>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/141419204/397082773-6efe0ff6-9dba-4254-b5eb-79e2a742448a.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzQ2MTE3MDEsIm5iZiI6MTczNDYxMTQwMSwicGF0aCI6Ii8xNDE0MTkyMDQvMzk3MDgyNzczLTZlZmUwZmY2LTlkYmEtNDI1NC1iNWViLTc5ZTJhNzQyNDQ4YS5naWY_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQxMjE5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MTIxOVQxMjMwMDFaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yZDFmMmM0ODIyYzVkYWQxN2Q2ZTcxZmE1NzE5OGQzOTBhMzVlZmYyOWYwNjlmZjEyYzdiYTBlYzdjZTM4MDU0JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.E0tIf4Eg0oAM8NWdXT-xqE9-1oZSVSu1JcVK7PQ2VH0"><img src="https://private-user-images.githubusercontent.com/141419204/397082773-6efe0ff6-9dba-4254-b5eb-79e2a742448a.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzQ2MTE3MDEsIm5iZiI6MTczNDYxMTQwMSwicGF0aCI6Ii8xNDE0MTkyMDQvMzk3MDgyNzczLTZlZmUwZmY2LTlkYmEtNDI1NC1iNWViLTc5ZTJhNzQyNDQ4YS5naWY_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQxMjE5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MTIxOVQxMjMwMDFaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0yZDFmMmM0ODIyYzVkYWQxN2Q2ZTcxZmE1NzE5OGQzOTBhMzVlZmYyOWYwNjlmZjEyYzdiYTBlYzdjZTM4MDU0JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.E0tIf4Eg0oAM8NWdXT-xqE9-1oZSVSu1JcVK7PQ2VH0" alt="res-labs-gif" data-animated-image=""></a></p>
</article></div></div>
</react-partial>

      </div>

</turbo-frame>


    </main>
  </div>

          




    <ghcc-consent id="ghcc" data-initial-cookie-consent-allowed="" data-cookie-consent-required="true"></ghcc-consent>


  

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open="">
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog="">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Exposing the Clearingstelle Urheberrecht Im Internet (CUII) (138 pts)]]></title>
            <link>https://damcraft.de/blog/exposing-the-cuii</link>
            <guid>42457712</guid>
            <pubDate>Thu, 19 Dec 2024 02:19:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://damcraft.de/blog/exposing-the-cuii">https://damcraft.de/blog/exposing-the-cuii</a>, See on <a href="https://news.ycombinator.com/item?id=42457712">Hacker News</a></p>
Couldn't get https://damcraft.de/blog/exposing-the-cuii: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Error Stacking in Rust (119 pts)]]></title>
            <link>https://greptime.com/blogs/2024-05-07-error-rust</link>
            <guid>42457515</guid>
            <pubDate>Thu, 19 Dec 2024 01:47:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://greptime.com/blogs/2024-05-07-error-rust">https://greptime.com/blogs/2024-05-07-error-rust</a>, See on <a href="https://news.ycombinator.com/item?id=42457515">Hacker News</a></p>
Couldn't get https://greptime.com/blogs/2024-05-07-error-rust: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[There's No Such Thing as Software Productivity (2012) (121 pts)]]></title>
            <link>https://www.benrady.com/2012/11/theres-no-such-thing-as-software-productivity.html</link>
            <guid>42457436</guid>
            <pubDate>Thu, 19 Dec 2024 01:34:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.benrady.com/2012/11/theres-no-such-thing-as-software-productivity.html">https://www.benrady.com/2012/11/theres-no-such-thing-as-software-productivity.html</a>, See on <a href="https://news.ycombinator.com/item?id=42457436">Hacker News</a></p>
Couldn't get https://www.benrady.com/2012/11/theres-no-such-thing-as-software-productivity.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Piccolo OS, a Small Multitasking OS for the Raspberry Pi Pico (180 pts)]]></title>
            <link>https://github.com/garyexplains/piccolo_os_v1</link>
            <guid>42457321</guid>
            <pubDate>Thu, 19 Dec 2024 01:14:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/garyexplains/piccolo_os_v1">https://github.com/garyexplains/piccolo_os_v1</a>, See on <a href="https://news.ycombinator.com/item?id=42457321">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Piccolo OS</h2><a id="user-content-piccolo-os" aria-label="Permalink: Piccolo OS" href="#piccolo-os"></a></p>
<p dir="auto">Piccolo OS is a small multitasking OS for the Raspberry Pi Pico. It is designed primarily as a teaching tool.
It demonstrates the fundamentals of a co-operative multitasking OS and the Arm Cortex-M0+.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Limitations</h2><a id="user-content-limitations" aria-label="Permalink: Limitations" href="#limitations"></a></p>
<p dir="auto">Many! Including lack of per-task memory, multicore support, mutexes, queues, a file system, networking, a shell, and so on...</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">A Comma A Day Keeps The Pedants Away</h2><a id="user-content-a-comma-a-day-keeps-the-pedants-away" aria-label="Permalink: A Comma A Day Keeps The Pedants Away" href="#a-comma-a-day-keeps-the-pedants-away"></a></p>
<p dir="auto">Since the Internet seems to be full of people with way too much time on their hands, I would just like to kindly shoo away any C/C++ pedants out there.
Yes, I am sure there are a million different ways to achieve many of the same results. Yes, I am sure there are some fine points of language semantics that could be argued about. Yes, I am sure you have a more efficient way of writing some of the functions.</p>
<p dir="auto">To be honest, I am not interested.</p>
<p dir="auto">Having said that, like-minded people who wish to contribute and extend Piccolo OS are welcome. See <strong>Contributing</strong></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Build Instructions</h2><a id="user-content-build-instructions" aria-label="Permalink: Build Instructions" href="#build-instructions"></a></p>
<p dir="auto">Make sure you have the Pico C/C++ SDK installed and working on your machine. <a href="https://datasheets.raspberrypi.org/pico/getting-started-with-pico.pdf" rel="nofollow">Getting started with Raspberry Pi Pico is
the best place to start.</a></p>
<p dir="auto">You need to have PICO_SDK_PATH defined, e.g. <code>export PICO_SDK_PATH=/home/pi/pico/pico-sdk/</code></p>
<p dir="auto">Clone the code from the repository. Change directory into <code>build</code> and run <code>cmake -DCMAKE_BUILD_TYPE=Debug ..</code> (for a debug build) or <code>cmake ..</code> (for a release build).</p>
<p dir="auto">Run <code>make</code></p>
<p dir="auto">The resulting file <code>piccolo_os_demo.elf</code> can be flashed on your Pico in the normal way.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Design</h2><a id="user-content-design" aria-label="Permalink: Design" href="#design"></a></p>
<p dir="auto">First to define some terminology. The <em>kernel</em> is the <code>main()</code> function (and later <code>piccolo_start()</code> which is called by <code>main()</code> and never returns.) The job of the
kernel is to allow for tasks to be created and then, in a round-robin fashion, pick the next task that needs to be run, save the kernel stack, restore the task's stack and jump to the program counter (PC) last used by the user task.</p>
<p dir="auto">A <em>task</em> (i.e. <em>user task</em>) is a function that is run by Piccolo in a round-robin fashion along with the other <em>tasks</em>. For example, a function that flashes the onboard LED. Each <em>task</em> has its own stack, separate from the main stack (which is used by the kernel).</p>
<p dir="auto">So, there are two types of stack, the Main Stack Pointer (MSP) and Process Stack Pointer (PSP). The Process Stack Pointer (PSP) is used by the current task, and the MSP is used by OS Kernel and exception handlers.</p>
<p dir="auto">To switch from the kernel to a task, Piccolo needs to save the kernel state on the main stack, restore the user state from the process stack, and jump to the task PC that was saved. To switch from a task to the kernel, the opposite happens, in that the user stack is saved, the kernel stack is restored. The task to kernel switch happens via an interrupt, a SVC.</p>
<p dir="auto">Piccolo OS uses a set of stacks, one for each task. The stacks are defined in <code>piccolo_os_internals_t</code> along with the number of created tasks, plus the index to the current task.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_init()</h3><a id="user-content-piccolo_init" aria-label="Permalink: piccolo_init()" href="#piccolo_init"></a></p>
<p dir="auto"><code>piccolo_init()</code> initializes the number of created tasks to zero, then calls the standard Pico SDK initialization function <code>stdio_init_all()</code>. After reset, the processor is
in thread (privileged) mode. __piccolo_task_init_stack() switches to handler mode to ensure an appropriate exception return.</p>
<p dir="auto">Once <code>piccolo_init()</code> has been called the rest of <code>main()</code>, and any other functions like <code>piccolo_start()</code> will be run in handler mode. This can cause problems with the Pico C/C++ SDK, especially with the timers as they are hardware/interrupt based.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_create_task()</h3><a id="user-content-piccolo_create_task" aria-label="Permalink: piccolo_create_task()" href="#piccolo_create_task"></a></p>
<p dir="auto">To create a task the initial stack frame is created. It needs to mimic what would be saved by hardware and by the software. Once the stack is initialized, <code>__piccolo_pre_switch()</code> is called to simulate a return from the exception state. The stack is then ready to be used for context switching.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_start()</h3><a id="user-content-piccolo_start" aria-label="Permalink: piccolo_start()" href="#piccolo_start"></a></p>
<p dir="auto">This is an infinite loop that picks the next stack (i.e. next task) to use in a round-robin fashion. When <code>piccolo_yield()</code> or <code>piccolo_syscall()</code> is called an exception is raised (a SVC exception), which causes the interrupt handler <code>isr_svcall</code> to be called.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_yield() / piccolo_syscall()</h3><a id="user-content-piccolo_yield--piccolo_syscall" aria-label="Permalink: piccolo_yield() / piccolo_syscall()" href="#piccolo_yield--piccolo_syscall"></a></p>
<p dir="auto">This function is very simple:</p>

<p dir="auto">The SVC instruction causes an exception which is handled by <code>isr_svcall</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">isr_svcall()</h3><a id="user-content-isr_svcall" aria-label="Permalink: isr_svcall()" href="#isr_svcall"></a></p>
<p dir="auto">This is invoked via the SVC exception. It saves the current user task onto the PSP and then restores the kernel stack. It then returns to the last PC used by the kernel before it was switched out. Control returns to the kernel (<code>main()</code> or  <code>piccolo_start()</code>).</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">__piccolo_pre_switch()</h3><a id="user-content-__piccolo_pre_switch" aria-label="Permalink: __piccolo_pre_switch()" href="#__piccolo_pre_switch"></a></p>
<p dir="auto"><code>__piccolo_pre_switch()</code> saves the kernel state, i.e. R4 to R12 (which contains the PSR) and the LR (the return address), onto the main stack. Then, the task state (the register R4 to R11 and the LR) are restored from the task's PSP stack. This is in R0, which is used to set the PSP register. The code then jumps to the LR (restored from the PSP).</p>
<p dir="auto">If the LR is THREAD_PSP (i.e. 0xFFFFFFFD, a special return address recognized by the CPU) then THREAD_PSP forces a return to Thread mode, execution continues using the PSP.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_sleep()</h3><a id="user-content-piccolo_sleep" aria-label="Permalink: piccolo_sleep()" href="#piccolo_sleep"></a></p>
<p dir="auto">Since Piccolo OS isn't preemptive, then using the Pico's C/C++ sleep functions will cause execution to block. <code>piccolo_sleep()</code> is a replacement function that calls <code>piccolo_yield()</code> while waiting for the specified amount of time to pass.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Thread mode and Handler mode in the Cortex-M0+</h2><a id="user-content-thread-mode-and-handler-mode-in-the-cortex-m0" aria-label="Permalink: Thread mode and Handler mode in the Cortex-M0+" href="#thread-mode-and-handler-mode-in-the-cortex-m0"></a></p>
<p dir="auto">When the Cortex-M0+ processor is running a program it can be either in Thread mode or Handler mode. Thread mode and Handler mode are almost completely the same.
The only difference is that Thread mode uses (if desired) the Process Stack Pointer (PSP) rather than the Main Stack Pointer (MSP).</p>
<p dir="auto">After reset, the&nbsp;processor is in Thread mode.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Context Switching</h2><a id="user-content-context-switching" aria-label="Permalink: Context Switching" href="#context-switching"></a></p>
<p dir="auto">The Cortex-M0 and Cortex-M0+ processors (also applicable to Cortex-M3/M4/M7) have two Stack Pointers (SPs).
There are two types of stack, the Main Stack Pointer (MSP) and Process Stack Pointer (PSP).
The Process Stack Pointer (PSP) is used by the current task, and the MSP is used by OS Kernel and exception handlers. The stack pointer selection is
determined by the CONTROL register, a special registers.
When a context switch occurs the status is saved on the stack.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Overview</h3><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<ol dir="auto">
<li>Piccolo OS -&gt; save kernel state on MSP -&gt;</li>
<li>restore TASK1 state from PSP_1 -&gt; TASK1 -&gt; save TASK1 state to PSP_1 -&gt;</li>
<li>restore kernel state from MSP -&gt; Piccolo OS -&gt; save kernel on MSP -&gt;</li>
<li>restore TASK2 state from PSP_2 -&gt; TASK2 -&gt; save TASK2 state to PSP_2 -&gt;</li>
<li>restore kernel state from MSP -&gt; Piccolo OS -&gt; save kernel on MSP -&gt;</li>
<li>restore TASK3 state from PSP_3 -&gt; TASK3 -&gt; save TASK3 state to PSP_3 -&gt;</li>
<li>restore kernel state from MSP -&gt; Go to step 1.</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Process Stack Pointer</h3><a id="user-content-process-stack-pointer" aria-label="Permalink: Process Stack Pointer" href="#process-stack-pointer"></a></p>
<div data-snippet-clipboard-copy-content="&nbsp; &nbsp; &nbsp; &nbsp; Exception frame saved by the hardware onto stack:
&nbsp; &nbsp; &nbsp; &nbsp; +------+
&nbsp; &nbsp; &nbsp; &nbsp; | xPSR | 0x01000000 i.e. PSR Thumb bit
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;PC &nbsp;| Pointer to task function
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;LR &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R12 | 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R3 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R2 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R1 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R0 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; +------+
&nbsp; &nbsp; &nbsp; &nbsp; Registers saved by the software (isr_svcall):
&nbsp; &nbsp; &nbsp; &nbsp; +------+
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;LR &nbsp;| THREAD_PSP i.e. 0xFFFFFFFD
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R7 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R6 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R5 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R4 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R11 | 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R10 | 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R9 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R8 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; +------+"><pre><code>&nbsp; &nbsp; &nbsp; &nbsp; Exception frame saved by the hardware onto stack:
&nbsp; &nbsp; &nbsp; &nbsp; +------+
&nbsp; &nbsp; &nbsp; &nbsp; | xPSR | 0x01000000 i.e. PSR Thumb bit
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;PC &nbsp;| Pointer to task function
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;LR &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R12 | 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R3 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R2 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R1 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R0 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; +------+
&nbsp; &nbsp; &nbsp; &nbsp; Registers saved by the software (isr_svcall):
&nbsp; &nbsp; &nbsp; &nbsp; +------+
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;LR &nbsp;| THREAD_PSP i.e. 0xFFFFFFFD
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R7 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R6 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R5 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R4 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R11 | 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R10 | 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R9 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R8 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; +------+
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Main Stack Pointer</h3><a id="user-content-main-stack-pointer" aria-label="Permalink: Main Stack Pointer" href="#main-stack-pointer"></a></p>
<div data-snippet-clipboard-copy-content="&nbsp; &nbsp; &nbsp; &nbsp; Registers saved by the software (__piccolo_pre_switch):
&nbsp; &nbsp; &nbsp; &nbsp; +------+
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;LR &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R7 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R6 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R5 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R4 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R12 | NB: R12 &nbsp;(i.e IP) is included, unlike user state
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R11 |
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R10 |
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R9 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R8 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; +------+"><pre><code>&nbsp; &nbsp; &nbsp; &nbsp; Registers saved by the software (__piccolo_pre_switch):
&nbsp; &nbsp; &nbsp; &nbsp; +------+
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;LR &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R7 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R6 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R5 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R4 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R12 | NB: R12 &nbsp;(i.e IP) is included, unlike user state
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R11 |
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R10 |
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R9 &nbsp;|
&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp;R8 &nbsp;| 
&nbsp; &nbsp; &nbsp; &nbsp; +------+
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">R0 to R3</h3><a id="user-content-r0-to-r3" aria-label="Permalink: R0 to R3" href="#r0-to-r3"></a></p>
<p dir="auto">When the CPU is interrupted, the hardware will store R0 to R3, the PC etc., onto the stack. It is automatic. The interrupt handler <code>isr_svcall()</code> needs to save <strong>all</strong> the registers (the whole context) so it saves R4 to R11, etc. This means all the registered are saved. However, you may have noticed that when there is a switch from the <em>kernel</em> to a <em>task</em> via <code>__piccolo_pre_switch()</code> then this is software only (no SVC instruction, no interrupt) and so the kernel's R0 to R3 are not saved on the main stack. The reason is that the calling ARM calling convention (when you call a function) states that R0 to R3 are scratch registers and you can't rely on their contents after a branch to another bit of code. So R0 to R3 don't need to be saved as the C compiler knows not to rely on the value of those registers after a function call, and invoking <code>__piccolo_pre_switch()</code> is a function call!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Typical sequence of events</h2><a id="user-content-typical-sequence-of-events" aria-label="Permalink: Typical sequence of events" href="#typical-sequence-of-events"></a></p>
<p dir="auto">Let say you have two tasks, <em>task1</em> and <em>task2</em>. All they do is yield control back to the kernel. Like this:</p>
<div data-snippet-clipboard-copy-content="void task1(void) {
&nbsp; while (true) {
&nbsp; &nbsp; piccolo_yield();
&nbsp; }
}"><pre><code>void task1(void) {
&nbsp; while (true) {
&nbsp; &nbsp; piccolo_yield();
&nbsp; }
}
</code></pre></div>
<p dir="auto">Below, {T} means Thread mode, {H} means Handler mode, {HI} means Handler mode, but in actual Interrupt handler.</p>
<p dir="auto">Remember that, the <em>kernel</em> is the <code>main()</code> function and later <code>piccolo_start()</code> (which is called by <code>main()</code> and never returns).</p>
<p dir="auto">The typical sequence of events, from start-up, is:</p>
<ol dir="auto">
<li>{T} The processor starts in Thread mode</li>
<li>{T} <code>piccolo_init()</code> which calls <code>__piccolo_task_init()</code></li>
</ol>
<ul dir="auto">
<li><code>__piccolo_task_init()</code> creates a dummy stack and calls <code>__piccolo_task_init_stack()</code></li>
<li><code>__piccolo_task_init_stack()</code> saves the kernel state, i.e. R4 to R12 (which contains the PSR) and the LR (the return address), onto the main stack.</li>
<li>It then switches to the PSP (which is, in fact, a dummy stack) and triggers an interrupt</li>
</ul>
<ol start="3" dir="auto">
<li>{HI} <code>isr_svcall()</code> handles the interrupt. It saves the current task state (R4 to R11 and the LR) onto the PSP (the dummy stack).</li>
</ol>
<ul dir="auto">
<li>{HI} It then restores the kernel state from the main stack and returns to the kernel using the LR saved on the main stack in 2.</li>
</ul>
<ol start="4" dir="auto">
<li>{H} After the interrupt, processing continues in <code>__piccolo_task_init()</code> and eventually <code>piccolo_init()</code> but now in Handler mode.</li>
<li>{H} Next <em>task1</em> is created via <code>piccolo_create_task(&amp;task1);</code></li>
<li>{H} In <code>__piccolo_os_create_task()</code> a new stack is initialized for the task, including the frames saved by the hardware when an interrupt is called (see Context Switching above).</li>
<li>{H} Once the stack has been set up, <code>__piccolo_pre_switch()</code> is called passing the stack as a parameter.</li>
<li>{H} <code>__piccolo_pre_switch()</code> saves the kernel state, i.e. R4 to R12 (which contains the PSR) and the LR (the return address), onto the main stack.</li>
<li>{H} The task state (the register R4 to R11 and the LR) are restored from the stack passed in at step 7. This is in R0.</li>
<li>{H} R0 is set as the PSP and a jump is made to the LR, which is actually THREAD_PSP (i.e. 0xFFFFFFFD, a special return address recognized by the CPU)</li>
<li>{T} THREAD_PSP forces a return to Thread mode, execution continues using the PSP. The PSP has the address of <em>task1</em>, as set up in step 6. See <code>stack[15] = (unsigned int)start;</code> in <code>__piccolo_os_create_task()</code></li>
<li>{T} <em>task1</em> is just a loop that calls <code>piccolo_yield()</code></li>
<li>{T} <code>piccolo_yield()</code> intentionally calls SVC and forces an interrupt that will be handled by <code>isr_svcall()</code></li>
<li>{HI} <code>isr_svcall()</code> handles the interrupt. It saves the state of <em>tasks1</em> task (R4 to R11 and the LR) onto the PSP belonging <em>task1</em> (see steps 10. and 11.).</li>
</ol>
<ul dir="auto">
<li>{HI} It then restores the kernel state from the main stack and returns to the kernel using the LR saved on the main stack in 8.</li>
</ul>
<ol start="15" dir="auto">
<li>{H} After the interrupt, processing continues in <code>main()</code></li>
<li>{H} Next <em>task2</em> is created via <code>piccolo_create_task(&amp;task2);</code></li>
<li>Steps 6. to 15. are repeated, but now for <em>task2</em></li>
<li>{H} After the interrupt, processing continues in <code>main()</code>. Now that our tasks are created and running, we call <code>piccolo_start();</code></li>
<li>{H} Using a simple round-robin algorithm, <code>piccolo_start();</code> just picks the next task and calls <code>__piccolo_pre_switch()</code> passing the tasks stack as a parameter.</li>
</ol>
<ul dir="auto">
<li>{H} <code>__piccolo_pre_switch()</code> saves the kernel state, i.e. R4 to R12 (which contains the PSR) and the LR (the return address), onto the main stack.</li>
<li>{H} The task state (the register R4 to R11 and the LR) are restored from the stack passed as the parameter to <code>__piccolo_pre_switch()</code>. This is in R0.</li>
<li>{H} R0 is set as the PSP and a jump is made to the LR, which is actually THREAD_PSP (i.e. 0xFFFFFFFD, a special return address recognized by the CPU)</li>
<li>{T} THREAD_PSP forces a return to Thread mode, execution continues using the PSP. The PSP has the address of where to continue in the task. This address was saved into the LR (and saved onto the PSP stack) when the call to <code>piccolo_yield()</code> was made.</li>
<li>{T} Execution continues until <code>piccolo_yield()</code> is called again.</li>
</ul>
<ol start="20" dir="auto">
<li>{T} <code>piccolo_yield()</code> intentionally calls SVC and forces an interrupt that will be handled by <code>isr_svcall()</code></li>
<li>{HI} <code>isr_svcall()</code> handles the interrupt. It saves the state of the current task (R4 to R11 and the LR) onto the PSP belonging to the task.</li>
</ol>
<ul dir="auto">
<li>{HI} It then restores the kernel state from the main stack and returns to the kernel using the LR saved on the main stack.</li>
</ul>
<ol start="22" dir="auto">
<li>{H} After the interrupt, processing continues in <code>piccolo_start();</code></li>
<li>Jump to step 19.</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">TL;DR</h3><a id="user-content-tldr" aria-label="Permalink: TL;DR" href="#tldr"></a></p>
<p dir="auto">Below, {T} means Thread mode, {H} means Handler mode, {HI} means Handler mode, but in actual Interrupt handler.</p>
<p dir="auto">Remember that, the <em>kernel</em> is the <code>main()</code> function and later <code>piccolo_start()</code> (which is called by <code>main()</code> and never returns).</p>
<ol dir="auto">
<li>{T} The processor starts in Thread mode, switch to Handler mode</li>
<li>{H} Create <em>task1</em></li>
</ol>
<ul dir="auto">
<li>{H} Initialize a stack for the task, including the frames saved by the hardware when an interrupt is called (see Context Switching above).</li>
<li>{H} <code>__piccolo_pre_switch()</code> saves the kernel state, onto the main stack; and restores the task state from the process stack (PSP).</li>
<li>{T} Force a return to Thread mode, execution continues using the program counter stored in the PSP.</li>
<li>{T} Execution continues until <code>piccolo_yield()</code> is called.</li>
</ul>
<ol start="3" dir="auto">
<li>{T} <code>piccolo_yield()</code> intentionally calls SVC and forces an interrupt that will be handled by <code>isr_svcall()</code></li>
<li>{HI} <code>isr_svcall()</code> saves the state of <em>tasks1</em> onto the PSP.  It then restores the kernel state from the main stack and returns to the kernel.</li>
<li>{H} Create <em>task2</em></li>
</ol>
<ul dir="auto">
<li>{H} Initialize a stack for the task, including the frames saved by the hardware when an interrupt is called (see Context Switching above).</li>
<li>{H} <code>__piccolo_pre_switch()</code> saves the kernel state, onto the main stack; and restores the task state from the process stack (PSP).</li>
<li>{T} Force a return to Thread mode, execution continues using the program counter stored in the PSP.</li>
<li>{T} Execution continues until <code>piccolo_yield()</code> is called.</li>
</ul>
<ol start="6" dir="auto">
<li>Now that our tasks are created and running, we call <code>piccolo_start();</code></li>
<li>{H} Using a simple round-robin algorithm, <code>piccolo_start();</code> just picks the next task and calls <code>__piccolo_pre_switch()</code> passing the tasks stack as a parameter.</li>
</ol>
<ul dir="auto">
<li>{H} <code>__piccolo_pre_switch()</code> saves the kernel state, onto the main stack.</li>
<li>{H} The task state are restored from the task's PSP</li>
<li>{T} Force a return to Thread mode, execution continues using the program counter stored in the PSP.</li>
<li>{T} Execution continues until <code>piccolo_yield()</code> is called again.</li>
</ul>
<ol start="8" dir="auto">
<li>{T} <code>piccolo_yield()</code> intentionally calls SVC and forces an interrupt that will be handled by <code>isr_svcall()</code></li>
<li>{HI} <code>isr_svcall()</code> saves the state of the task onto its PSP.  It then restores the kernel state from the main stack and returns to the kernel (i.e. <code>piccolo_start();</code>)</li>
<li>Go to step 7.</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Still too long</h3><a id="user-content-still-too-long" aria-label="Permalink: Still too long" href="#still-too-long"></a></p>
<p dir="auto">Below, {T} means Thread mode, {H} means Handler mode.</p>
<p dir="auto">Remember that, the <em>kernel</em> is the <code>main()</code> function and later <code>piccolo_start()</code> (which is called by <code>main()</code> and never returns).</p>
<ol dir="auto">
<li>{T} The processor starts in Thread mode, switch to Handler mode</li>
<li>{H} Create <em>task1</em></li>
</ol>
<ul dir="auto">
<li>{H} Initialize a stack for it (PSP) then save the kernel state, onto the main stack; and restore the task state from the process stack (PSP).</li>
<li>{T} Force a return to Thread mode, execution continues using the program counter stored in the PSP until <code>piccolo_yield()</code> is called.</li>
</ul>
<ol start="3" dir="auto">
<li>{T} <code>piccolo_yield()</code> intentionally forces an interrupt that saves the state of <em>tasks1</em> onto the PSP and restores the kernel state from the main stack. Execution continues in the kernel.</li>
<li>{H} Create <em>task2</em></li>
</ol>
<ul dir="auto">
<li>{H} Initialize a stack for it (PSP) then save the kernel state, onto the main stack; and restore the task state from the process stack (PSP).</li>
<li>{T} Force a return to Thread mode, execution continues using the program counter stored in the PSP until <code>piccolo_yield()</code> is called.</li>
</ul>
<ol start="5" dir="auto">
<li>{T} <code>piccolo_yield()</code> intentionally forces an interrupt that saves the state of <em>tasks2</em> onto the PSP and restores the kernel state from the main stack. Execution continues in the kernel.</li>
<li>Now that our tasks are created and running, we call <code>piccolo_start()</code></li>
<li><code>piccolo_start()</code> just picks the next task and calls <code>__piccolo_pre_switch()</code> to saves the kernel state, onto the main stack; and then restored the next task from the task's PSP</li>
</ol>
<ul dir="auto">
<li>{T} Force a return to Thread mode, execution continues using the program counter stored in the PSP.</li>
<li>{T} Execution continues until <code>piccolo_yield()</code> is called again.</li>
</ul>
<ol start="8" dir="auto">
<li><code>piccolo_yield()</code> forces an interrupt that saves the state of the task onto its PSP.  It then restores the kernel state from the main stack and returns to the kernel (i.e. <code>piccolo_start();</code>)</li>
<li>Go to step 7.</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Give me the Tom and Jerry version</h3><a id="user-content-give-me-the-tom-and-jerry-version" aria-label="Permalink: Give me the Tom and Jerry version" href="#give-me-the-tom-and-jerry-version"></a></p>
<p dir="auto">Remember that, the <em>kernel</em> is the <code>main()</code> function and later <code>piccolo_start()</code> (which is called by <code>main()</code> and never returns).</p>
<ol dir="auto">
<li>Create <em>task1</em> and start running it using its own stack (PSP). It will run until <code>piccolo_yield()</code> is called.</li>
<li>Via an interrupt <code>piccolo_yield()</code> will saves the state of <em>tasks1</em> onto its PSP and restore the kernel state from the main stack. Execution continues in the kernel.</li>
<li>Create <em>task2</em> and start running it using its own stack (PSP). It will run until <code>piccolo_yield()</code> is called.</li>
<li>Via an interrupt <code>piccolo_yield()</code> will saves the state of <em>tasks2</em> onto its PSP and restore the kernel state from the main stack. Execution continues in the kernel.</li>
<li>Now that our tasks are created and running, we call <code>piccolo_start()</code></li>
<li><code>piccolo_start()</code> just picks the next task, saves the kernel state, onto the main stack; and then restores the next task from the task's PSP</li>
<li>Continue executing the next task using its own stack until <code>piccolo_yield()</code> is called.</li>
<li>Via an interrupt <code>piccolo_yield()</code> will saves the state of the current task onto its PSP and restores the kernel state from the main stack. Execution continues in the kernel (i.e. in <code>piccolo_start()</code>).</li>
<li>Go to 6.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Keep track of all those stacks!</h2><a id="user-content-keep-track-of-all-those-stacks" aria-label="Permalink: Keep track of all those stacks!" href="#keep-track-of-all-those-stacks"></a></p>
<p dir="auto">Here is a brief look at some of the stacks and switches in and out of handler mode, which should help you visual what is happening with all those stacks!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_init()</h3><a id="user-content-piccolo_init-1" aria-label="Permalink: piccolo_init()" href="#piccolo_init-1"></a></p>
<p dir="auto">After call to <code>piccolo_init()-&gt;__piccolo_task_init()-&gt;__piccolo_task_init_stack()</code></p>
<div data-snippet-clipboard-copy-content="Main stack (MSP)			
+---------------+
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			Saved by __piccolo_task_init_stack(), LR is back to main()
+---------------+"><pre><code>Main stack (MSP)			
+---------------+
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			Saved by __piccolo_task_init_stack(), LR is back to main()
+---------------+
</code></pre></div>
<p dir="auto"><code>__piccolo_task_init_stack()</code> switches to using PSP0, the dummy stack from <code>__piccolo_task_init()</code>, and then drops into <code>piccolo_syscall()</code> which raises an SVC interrupt</p>
<div data-snippet-clipboard-copy-content="Dummy stack (PSP0)
+---------------+			Saved by isr_svcall() using r0 which is the address of PSP0
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR will be 0xFFFFFFFD as this is an exception (interrupt).
+---------------+
| &nbsp;R0-R3,LR,PC &nbsp;|			Saved by hardware on PSP0
+---------------+"><pre><code>Dummy stack (PSP0)
+---------------+			Saved by isr_svcall() using r0 which is the address of PSP0
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR will be 0xFFFFFFFD as this is an exception (interrupt).
+---------------+
| &nbsp;R0-R3,LR,PC &nbsp;|			Saved by hardware on PSP0
+---------------+
</code></pre></div>
<p dir="auto">The kernel, that is <code>main()</code>, context is restored from the stack, MSP is now empty
The last instruction is <code>POP {PC}</code> which pops off the LR and causes a jump back to the
kernel, i.e. <code>main()</code></p>
<div data-snippet-clipboard-copy-content="Main stack (MSP)			
+---------------+
+---------------+"><pre><code>Main stack (MSP)			
+---------------+
+---------------+
</code></pre></div>
<p dir="auto">Back in <code>main()</code> now, but the CPU is in handler mode because it has not yet returned from the exception.</p>
<p dir="auto">The dummy stack is discarded and never used again.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_create_task(&amp;task1_func)</h3><a id="user-content-piccolo_create_tasktask1_func" aria-label="Permalink: piccolo_create_task(&amp;task1_func)" href="#piccolo_create_tasktask1_func"></a></p>
<p dir="auto">Create task1: <code>piccolo_create_task() -&gt; __piccolo_os_create_task()</code></p>
<p dir="auto">Create an initial process stack PSP1 that mimics the stack from an interrupt call:</p>
<div data-snippet-clipboard-copy-content="Task 1 stack (PSP1)
+---------------+			As would be saved by software, LR needs to be 0xFFFFFFFD
| &nbsp;R4-R12,LR &nbsp; &nbsp;|					
+---------------+			As would be saved by hardware on PSP1
| &nbsp;R0-R3,LR,PC &nbsp;|			PC is pointer task function (i.e. task1_func)
+---------------+"><pre><code>Task 1 stack (PSP1)
+---------------+			As would be saved by software, LR needs to be 0xFFFFFFFD
| &nbsp;R4-R12,LR &nbsp; &nbsp;|					
+---------------+			As would be saved by hardware on PSP1
| &nbsp;R0-R3,LR,PC &nbsp;|			PC is pointer task function (i.e. task1_func)
+---------------+
</code></pre></div>
<p dir="auto">Then call <code>__piccolo_pre_switch(task_stack)</code> using the newly created stack:</p>
<p dir="auto"><code>__piccolo_pre_switch()</code> saves the kernel state on the main stack:</p>
<div data-snippet-clipboard-copy-content="Main stack (MSP)			
+---------------+			Saved by __piccolo_pre_switch(), 
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR is back to __piccolo_os_create_task() after call to __piccolo_pre_switch()
+---------------+"><pre><code>Main stack (MSP)			
+---------------+			Saved by __piccolo_pre_switch(), 
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR is back to __piccolo_os_create_task() after call to __piccolo_pre_switch()
+---------------+
</code></pre></div>
<p dir="auto">Load the state (the registers) for task1 from the stack created above. The address of that stack is in r0.
Set the PSP register to R0 and then branch to LR. Since LR is 0xFFFFFFFD then this causes the CPU to end
exit handler mode and return to thread mode.</p>
<div data-snippet-clipboard-copy-content="Task 1 stack (PSP1)
+---------------+			As would be saved by hardware on PSP1
| &nbsp;R0-R3,LR,PC &nbsp;|			PC is pointer task function (i.e. task1_func)
+---------------+"><pre><code>Task 1 stack (PSP1)
+---------------+			As would be saved by hardware on PSP1
| &nbsp;R0-R3,LR,PC &nbsp;|			PC is pointer task function (i.e. task1_func)
+---------------+
</code></pre></div>
<p dir="auto">It now restores R0 to R3 and uses the PC to carry on execution using PSP1. PC is the pointer to <code>task1_func()</code>.</p>
<p dir="auto">PSP1 is now empty:</p>
<div data-snippet-clipboard-copy-content="Task 1 stack (PSP1)
+---------------+
+---------------+"><pre><code>Task 1 stack (PSP1)
+---------------+
+---------------+
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_yield()</h3><a id="user-content-piccolo_yield" aria-label="Permalink: piccolo_yield()" href="#piccolo_yield"></a></p>
<p dir="auto">Task 1 will run until it calls <code>piccolo_yield()</code>. <code>piccolo_yield()</code> intentionally calls SVC and forces an interrupt that will be handled by <code>isr_svcall()</code></p>
<div data-snippet-clipboard-copy-content="Task 1 stack (PSP1)
+---------------+			Saved by isr_svcall() using r0 which is the address of PSP1
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR will be 0xFFFFFFFD as this is an exception (interrupt).
+---------------+
| &nbsp;R0-R3,LR,PC &nbsp;|			Saved by hardware on PSP1
+---------------+"><pre><code>Task 1 stack (PSP1)
+---------------+			Saved by isr_svcall() using r0 which is the address of PSP1
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR will be 0xFFFFFFFD as this is an exception (interrupt).
+---------------+
| &nbsp;R0-R3,LR,PC &nbsp;|			Saved by hardware on PSP1
+---------------+
</code></pre></div>
<p dir="auto">PSP1 is now ready to be used later to return to Task 1 when needed. Using a similar setup to how Task 1 was created in the first place.</p>
<p dir="auto">Remember the main stack from earlier? It is still intact, as it was:</p>
<div data-snippet-clipboard-copy-content="Main stack (MSP)			
+---------------+			Saved by __piccolo_pre_switch(), 
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR is back to __piccolo_os_create_task() after call to __piccolo_pre_switch()
+---------------+"><pre><code>Main stack (MSP)			
+---------------+			Saved by __piccolo_pre_switch(), 
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR is back to __piccolo_os_create_task() after call to __piccolo_pre_switch()
+---------------+
</code></pre></div>
<p dir="auto"><code>isr_svcall()</code> restores the kernel state from the main stack and returns to the kernel using the LR. Execution continues in <code>__piccolo_pre_switch()</code>, which eventually returns to
<code>piccolo_create_task()</code> and then <code>main()</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_create_task(&amp;task2_func) and ultimatley piccolo_yield()</h3><a id="user-content-piccolo_create_tasktask2_func-and-ultimatley-piccolo_yield" aria-label="Permalink: piccolo_create_task(&amp;task2_func) and ultimatley piccolo_yield()" href="#piccolo_create_tasktask2_func-and-ultimatley-piccolo_yield"></a></p>
<p dir="auto">Task 2 and PSP2 are created in exactly the same way as Task 1. Eventually Task 2 calls <code>piccolo_yield()</code>, then ultimately the execution returns to main(). After all the tasks have been created then <code>piccolo_start()</code> is called.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">piccolo_start()</h3><a id="user-content-piccolo_start-1" aria-label="Permalink: piccolo_start()" href="#piccolo_start-1"></a></p>
<p dir="auto"><code>piccolo_start()</code> selects the next task and calls <code>__piccolo_pre_switch()</code> passing the pointer to the PSP. Let's assume Task 1 is next, so it passed in PSP1.</p>
<p dir="auto">Remember the state of PSP?</p>
<div data-snippet-clipboard-copy-content="Task 1 stack (PSP1)
+---------------+			Saved by isr_svcall() using r0 which is the address of PSP1
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR will be 0xFFFFFFFD as this is an exception (interrupt).
+---------------+
| &nbsp;R0-R3,LR,PC &nbsp;|			Saved by hardware on PSP1
+---------------+"><pre><code>Task 1 stack (PSP1)
+---------------+			Saved by isr_svcall() using r0 which is the address of PSP1
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR will be 0xFFFFFFFD as this is an exception (interrupt).
+---------------+
| &nbsp;R0-R3,LR,PC &nbsp;|			Saved by hardware on PSP1
+---------------+
</code></pre></div>
<p dir="auto"><code>__piccolo_pre_switch()</code> saves the kernel state on the main stack:</p>
<div data-snippet-clipboard-copy-content="Main stack (MSP)			
+---------------+			Saved by __piccolo_pre_switch(), 
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR is back to __piccolo_os_create_task() after call to __piccolo_pre_switch()
+---------------+"><pre><code>Main stack (MSP)			
+---------------+			Saved by __piccolo_pre_switch(), 
| &nbsp;R4-R12,LR &nbsp; &nbsp;|			LR is back to __piccolo_os_create_task() after call to __piccolo_pre_switch()
+---------------+
</code></pre></div>
<p dir="auto">It then loads the state (the registers) for task1 from PSP1.
It sets the PSP register to R0 and then branches to LR. Since LR is 0xFFFFFFFD then this causes the CPU to end
exit handler mode and return to thread mode.</p>
<div data-snippet-clipboard-copy-content="Task 1 stack (PSP1)
+---------------+			Saved by hardware on PSP1
| &nbsp;R0-R3,LR,PC &nbsp;|			PC is a pointer to somewhere in the task function, 
+---------------+ 			just after the call to piccolo_yield()"><pre><code>Task 1 stack (PSP1)
+---------------+			Saved by hardware on PSP1
| &nbsp;R0-R3,LR,PC &nbsp;|			PC is a pointer to somewhere in the task function, 
+---------------+ 			just after the call to piccolo_yield()
</code></pre></div>
<p dir="auto">It now restores R0 to R3 and uses the PC to carry on execution using PSP1. PC is the pointer to somewhere in the task function, just after the call to <code>piccolo_yield()</code></p>
<p dir="auto">PSP1 is now empty or in whatever state it was before Task 1 called <code>piccolo_yield()</code></p>
<div data-snippet-clipboard-copy-content="Task 1 stack (PSP1)
+---------------+
+---------------+"><pre><code>Task 1 stack (PSP1)
+---------------+
+---------------+
</code></pre></div>
<p dir="auto">Execution continues until <code>piccolo_yield()</code> is called again.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Pre-emptive</h2><a id="user-content-pre-emptive" aria-label="Permalink: Pre-emptive" href="#pre-emptive"></a></p>
<p dir="auto">At the moment Piccolo OS is co-operative, in that a task will continue to run until <code>piccolo_yield()</code> is called.</p>
<p dir="auto">It should be possible to force a context switch using a timer or an interrupt like SysTick which in turn triggers a PendSV. However, my attempts to implement this have so far failed. I have ported the same code to an STM32 BluePill with a Cortex-M3 and pre-emptive tasking works via SysTick/PendSV.</p>
<p dir="auto">My initial thoughts are that once <code>main()</code> is running in handler mode then the Pico C/C++ SDK doesn't process interrupts as expected. The "traditional" approach is to set the
interrupt priorities so that the SysTick has a high priority, however my attempts to do that that have so far been without success.</p>
<p dir="auto">More work is needed.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">I would like to keep this basic version of Piccolo OS intact, as a learning tool. I don't plan on expanding it, even to including pre-emptive multi-tasking (see above).</p>
<p dir="auto">However, if there is interest then a V2.0 could be started which expands on V1.0 to include pre-emptive multitasking, as well as other things like mutexes, queues, per task memory, etc.</p>
<p dir="auto">If there is interest then I will start a V2.0 repo and start accepting pull requests.</p>
<p dir="auto">Having said that, please feel free to fork and continue working on Piccolo OS as you see fit.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Resources</h2><a id="user-content-resources" aria-label="Permalink: Resources" href="#resources"></a></p>
<p dir="auto"><a href="https://datasheets.raspberrypi.org/pico/raspberry-pi-pico-c-sdk.pdf" rel="nofollow">https://datasheets.raspberrypi.org/pico/raspberry-pi-pico-c-sdk.pdf</a></p>
<p dir="auto"><a href="https://raspberrypi.github.io/pico-sdk-doxygen/index.html" rel="nofollow">https://raspberrypi.github.io/pico-sdk-doxygen/index.html</a></p>
<p dir="auto"><a href="https://interrupt.memfault.com/blog/cortex-m-rtos-context-switching" rel="nofollow">https://interrupt.memfault.com/blog/cortex-m-rtos-context-switching</a></p>
<p dir="auto"><a href="https://www.adamh.cz/blog/2016/07/context-switch-on-the-arm-cortex-m0/" rel="nofollow">https://www.adamh.cz/blog/2016/07/context-switch-on-the-arm-cortex-m0/</a></p>
<p dir="auto"><a href="https://chromium.googlesource.com/chromiumos/platform/ec/" rel="nofollow">https://chromium.googlesource.com/chromiumos/platform/ec/</a></p>
<p dir="auto"><a href="https://github.com/n-k/cortexm-threads">https://github.com/n-k/cortexm-threads</a></p>
<p dir="auto"><a href="https://github.com/scttnlsn/cmcm">https://github.com/scttnlsn/cmcm</a></p>
<p dir="auto"><a href="https://github.com/chris-stones/ShovelOS">https://github.com/chris-stones/ShovelOS</a></p>
<p dir="auto"><a href="https://github.com/jserv/mini-arm-os">https://github.com/jserv/mini-arm-os</a></p>
<p dir="auto"><a href="https://stackoverflow.com/questions/48537618/cortex-m0-setting-the-priority-of-the-system-exception" rel="nofollow">https://stackoverflow.com/questions/48537618/cortex-m0-setting-the-priority-of-the-system-exception</a></p>
<p dir="auto"><a href="https://developer.arm.com/documentation/dui0552/a/the-cortex-m3-processor/exception-model/exception-entry-and-return" rel="nofollow">https://developer.arm.com/documentation/dui0552/a/the-cortex-m3-processor/exception-model/exception-entry-and-return</a></p>
<p dir="auto"><a href="https://developer.arm.com/documentation/dui0497/a/the-cortex-m0-processor/programmers-model/core-registers" rel="nofollow">https://developer.arm.com/documentation/dui0497/a/the-cortex-m0-processor/programmers-model/core-registers</a></p>
<p dir="auto"><a href="https://github.com/dwelch67/raspberrypi-pico">https://github.com/dwelch67/raspberrypi-pico</a></p>
<p dir="auto"><a href="https://github.com/davidgiven/FUZIX/tree/rpipico/Kernel/platform-rpipico">https://github.com/davidgiven/FUZIX/tree/rpipico/Kernel/platform-rpipico</a></p>
<p dir="auto"><a href="https://archive.fosdem.org/2018/schedule/event/multitasking_on_cortexm/attachments/slides/2602/export/events/attachments/multitasking_on_cortexm/slides/2602/Slides.pdf" rel="nofollow">https://archive.fosdem.org/2018/schedule/event/multitasking_on_cortexm/attachments/slides/2602/export/events/attachments/multitasking_on_cortexm/slides/2602/Slides.pdf</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License - 3-Clause BSD License</h2><a id="user-content-license---3-clause-bsd-license" aria-label="Permalink: License - 3-Clause BSD License" href="#license---3-clause-bsd-license"></a></p>
<p dir="auto">Copyright (C) 2021, Gary Sims
All rights reserved.</p>
<p dir="auto">SPDX short identifier: BSD-3-Clause</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Additional Copyrights</h2><a id="user-content-additional-copyrights" aria-label="Permalink: Additional Copyrights" href="#additional-copyrights"></a></p>
<p dir="auto">Some portions of code,&nbsp;intentionally or&nbsp;unintentionally, may or may not be attributed to the following people:</p>
<p dir="auto">Copyright (C) 2017 Scott Nelson: CMCM - <a href="https://github.com/scttnlsn/cmcm">https://github.com/scttnlsn/cmcm</a></p>
<p dir="auto">Copyright (C) 2015-2018 National Cheng Kung University, Taiwan: mini-arm-os - <a href="https://github.com/jserv/mini-arm-os">https://github.com/jserv/mini-arm-os</a></p>
<p dir="auto">Copyright (C) 2014-2017 Chris Stones: Shovel OS - <a href="https://github.com/chris-stones/ShovelOS">https://github.com/chris-stones/ShovelOS</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Genesis – a generative physics engine for general-purpose robotics (156 pts)]]></title>
            <link>https://genesis-world.readthedocs.io/en/latest/</link>
            <guid>42457213</guid>
            <pubDate>Thu, 19 Dec 2024 00:54:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://genesis-world.readthedocs.io/en/latest/">https://genesis-world.readthedocs.io/en/latest/</a>, See on <a href="https://news.ycombinator.com/item?id=42457213">Hacker News</a></p>
Couldn't get https://genesis-world.readthedocs.io/en/latest/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Half My Life with Perl (141 pts)]]></title>
            <link>https://perladvent.org/2024/2024-12-19.html</link>
            <guid>42457182</guid>
            <pubDate>Thu, 19 Dec 2024 00:49:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://perladvent.org/2024/2024-12-19.html">https://perladvent.org/2024/2024-12-19.html</a>, See on <a href="https://news.ycombinator.com/item?id=42457182">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
          


<p>Randal Schwartz - 2024-12-19</p>

<div><p>I had never met Randal Schwartz before, but when I reached out to him about contributing to year 25 of the Perl Advent Calendar, he immediately agreed. This year I wanted to try some new things and Randal suggested giving a Perl-specific talk which he had given once before, but which was lacking in recording quality. This gave Randal a chance to re-record his talk and it gave the Perl communities a chance to watch in real time. We've never before had a video recording as a Perl Advent article, but I believe quite strongly that this is in the spirit of the Advent Calendar project, which is about giving something back. Also, when I mentioned it to Mark Fowler back in October, he didn't object, so I'll take that as a seal of approval.</p>

<p>-- Olaf Alders</p>

<p>Randal's advance summary of this talk:</p>

<pre><code>    Having been there, at the beginning with Perl, I will recount the early
    days through the modern era (or as much as I can cover in the time
    provided). I’ll deliver first-hand experience of the creation of the Camel
    Book, the Llama book, and the way I invaded comp.unix.questions with Perl 2
    answers so often that people would post “no Perl please”. Oh, and my
    version of the story of the Schwartzian Transform.</code></pre>

<p>If you enjoyed the video below, you may also enjoy the next in the series, which will be presented by Dave Cross: <a href="https://lu.ma/3b8ekn8y">Still Munging Data with Perl</a>. If you are at all interested, please register now, even if you cannot attend, as that will allow us to share the recording URL with you after the fact.</p>

<p>Now, please enjoy Randal Schwartz's "Half My Life with Perl":</p>

<p> <iframe width="560" height="315" src="https://www.youtube.com/embed/fffJnNTcLog?si=DfxCTe_AF2fRNU4e" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe> </p>





</div>







        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Advanced Civilizations Could Be Indistinguishable from Nature (126 pts)]]></title>
            <link>https://www.universetoday.com/169993/advanced-civilizations-could-be-indistinguishable-from-nature/</link>
            <guid>42457178</guid>
            <pubDate>Thu, 19 Dec 2024 00:48:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.universetoday.com/169993/advanced-civilizations-could-be-indistinguishable-from-nature/">https://www.universetoday.com/169993/advanced-civilizations-could-be-indistinguishable-from-nature/</a>, See on <a href="https://news.ycombinator.com/item?id=42457178">Hacker News</a></p>
Couldn't get https://www.universetoday.com/169993/advanced-civilizations-could-be-indistinguishable-from-nature/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Self-sorting arrays reveal unexpected competencies in minimal intelligence (157 pts)]]></title>
            <link>https://arxiv.org/abs/2401.05375</link>
            <guid>42456585</guid>
            <pubDate>Wed, 18 Dec 2024 23:17:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2401.05375">https://arxiv.org/abs/2401.05375</a>, See on <a href="https://news.ycombinator.com/item?id=42456585">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2401.05375">View PDF</a></p><blockquote>
            <span>Abstract:</span>The emerging field of Diverse Intelligence seeks to identify, formalize, and understand commonalities in behavioral competencies across a wide range of implementations. Especially interesting are simple systems that provide unexpected examples of memory, decision-making, or problem-solving in substrates that at first glance do not appear to be complex enough to implement such capabilities. We seek to develop tools to help understand the minimal requirements for such capabilities, and to learn to recognize and predict basal forms of intelligence in unconventional substrates. Here, we apply novel analyses to the behavior of classical sorting algorithms, short pieces of code which have been studied for many decades. To study these sorting algorithms as a model of biological morphogenesis and its competencies, we break two formerly-ubiquitous assumptions: top-down control (instead, showing how each element within a array of numbers can exert minimal agency and implement sorting policies from the bottom up), and fully reliable hardware (instead, allowing some of the elements to be "damaged" and fail to execute the algorithm). We quantitatively characterize sorting activity as the traversal of a problem space, showing that arrays of autonomous elements sort themselves more reliably and robustly than traditional implementations in the presence of errors. Moreover, we find the ability to temporarily reduce progress in order to navigate around a defect, and unexpected clustering behavior among the elements in chimeric arrays whose elements follow one of two different algorithms. The discovery of emergent problem-solving capacities in simple, familiar algorithms contributes a new perspective to the field of Diverse Intelligence, showing how basal forms of intelligence can emerge in simple systems without being explicitly encoded in their underlying mechanics.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Michael Levin [<a href="https://arxiv.org/show-email/a9c1ba28/2401.05375" rel="nofollow">view email</a>]      <br>    <strong>[v1]</strong>
        Fri, 15 Dec 2023 20:11:16 UTC (2,252 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The RAM Myth (168 pts)]]></title>
            <link>https://purplesyringa.moe/blog/the-ram-myth/</link>
            <guid>42456310</guid>
            <pubDate>Wed, 18 Dec 2024 22:43:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://purplesyringa.moe/blog/the-ram-myth/">https://purplesyringa.moe/blog/the-ram-myth/</a>, See on <a href="https://news.ycombinator.com/item?id=42456310">Hacker News</a></p>
Couldn't get https://purplesyringa.moe/blog/the-ram-myth/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Java in the Small (336 pts)]]></title>
            <link>https://horstmann.com/unblog/2024-12-11/index.html</link>
            <guid>42454929</guid>
            <pubDate>Wed, 18 Dec 2024 20:42:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://horstmann.com/unblog/2024-12-11/index.html">https://horstmann.com/unblog/2024-12-11/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=42454929">Hacker News</a></p>
<div id="readability-page-1" class="page"><h2>Java in the Small</h2>
    <blockquote><p>Java has many features that make it well suited for large, long-lasting projects. But I find it surprisingly good for small tasks as well. Recent language features make it even better. The killer features are compile-time typing and great tool support. </p><p>This article also appeared in the <a href="https://javaadvent.com/">Java Advent</a> calendar.</p></blockquote>

    <p><img src="https://horstmann.com/unblog/2024-12-11/rc24-duke-java-mascot.jpg" alt=".jpg" loading="lazy"></p>

    <p>In my job as author and teacher, I have many repetitive tasks, such as moving files around and transforming their content in tedious ways. In my quest to automate the boring stuff, I look at a task and think “no big deal, I'll write a shell script”. Then the inevitable happens. As more special cases arise, the script turns into a festering mess of bash code. And I wish that I had written it in a real programming language instead.</p>
    <p>The “obvious” choice is Python, but the Python API isn't all that wonderful, and dynamic typing means that I spend too much time debugging. So I tried Java. I know the API by heart—at least for collections, files, regex, and so on. Java is statically typed so I am saved early from my foolishness. And the development environments are terrific. </p>
    <p>But, I hear you say, really, a separate POM file and <code>src/main/java</code> hierarchy for every script? Ugh.</p>
    <p>I don't do that. Fortunately, modern Java and tools don't require it. Read on for the details!</p>
    
    <h2>Launching without Compiling</h2>
    <p>Consider a simple, but not too simple, task. As an example, I have a procedure to verify that my backups actually work. I retrieve ten random files once a day, in a scheduled job. (This is a really good idea that has saved me more than once from unreliable backups.) A script randomly picks ten files from a directory tree. It's written in Java. And it sits in a directory with quite a few utility scripts.</p>
    <p>Of course, I could compile it. But then my utility script directory would be cluttered with class files. Or I could make a JAR file. But that's work. When you write a script whose value may not yet be evident, who has the patience for JARs and uber JARs?</p>
    <p>That's why I love <a href="https://openjdk.org/jeps/330">JEP 330</a> and <a href="https://openjdk.org/jeps/458">JEP 458</a>. Now I can put my code in a <code>.java</code> file and just launch it as</p>
    <pre>java RandomFiles.java 10 /home/cay/data</pre> 
    <p>The file gets compiled on the fly, every time that I run the script. And that's just the way I want it during development or later tinkering. And I don't care during regular use because it's not that slow. The Python crowd never loses sleep over that, so why should I?</p>
    <p>You can compile scripts into native executables with Graal for faster startup time. I have experimented with that, but don't find it makes a meaningful difference for most of my use cases.  </p>
    <p>Why not use JShell? I love using JShell for quick experiments (most of which seem to involve debugging regular expressions  😿).  But it's not great for scripts. The JShell tool itself has a very rudimentary editor integration, and the JShell support in IDEs is poor.  </p>
    <h2>Instance Main Methods and Implicit Classes</h2>
    <p><a href="https://openjdk.org/jeps/477">JEP 477</a> reduces the verbosity of writing small Java programs. This effort is motivated by two desires. First, to make it easier to learn Java. And to simplify “other kinds of small programs, such as scripts and command-line utilities”.  Having taught Java for many years, I never ran into students who said “my head hurts when I copy/paste the <code>public static void main</code> thing”. But I knew plenty of professors who were bothered by it. So it's a good thing it is going away.</p>
    <p>And for us scripters, it's nice not to look at clutter.</p> 
    <pre>var someVariable = initialValue;
String helper(int param) { ... }
void main(String[] args) {
    ...
}
</pre>
    <p>No pesky class, no <code>static</code>.</p>
    <p>Technically, any Java file with a top-level <code>main</code> method becomes an implicit class whose instance variables and methods are the top-level variables and methods in the file. Note that it is perfectly ok, and even desirable, to have classes, interfaces, enumerations, or records, in an implicit class. They turn into nested types.</p>
    <p>As an added, benefit, all of the <code>java.base</code> module is automatically imported. Hooray, no more 
      </p><pre>import java.util.List;
</pre>
    <p>(As it turns out, the class names in <code>java.base</code> have been carefully curated not to conflict with each other.)</p>
    <p>As of Java 23, three methods are automatically imported from <code>java.io.IO</code>: <code>println</code>, <code>print</code>, <code>readln</code>. From a teaching perspective, that's not ideal because it is yet another factoid to remember. But as a scripter, I'll take it.</p>
    <p>We get to enjoy these automatic imports only in an implicit class. But that's ok for many scripts.</p>
    <p><img src="https://horstmann.com/unblog/2024-12-11/eclipse.png" alt=".png" loading="lazy"></p>
    <h2>Records and Enums</h2>
    <p>Python programmers often use ad-hoc dictionaries (i.e. maps) to aggregate related information. In Java, we have records:</p>
    <pre>record Window(int id, int desktop, int x, int y, int width, int height, String title) {}
</pre>
    <p>They make the code easier to read, and they become natural spots for methods:</p>
    <pre>record Window(...) {
   int xmax() { return x + width; }
   int ymax() { return y + height; }
}
</pre>
    <p>The same holds for enumerations:</p>
    <pre>enum Direction { NORTH, EAST, SOUTH, WEST };
</pre>
    <p>Much nicer than the clunky Python enumerations.</p>
    <h2>Other Helpful Language Features</h2>
    <p>With complex programs, I am conservative with the use of <code>var</code> and only use it when the type is blindingly obvious, e.g.</p>
    <pre>var builder = new StringBuilder();</pre>
    
    <p>But in a script, I use <code>var</code> liberally. It's almost like in Python, except that you still have compile-time typing. In fact, it is better syntax than Python because you can distinguish between declaration and assignment.</p>
    <p>I am also more aggressive with static import:</p>
    <pre>import static java.lang.Math.*;

diagonal = sqrt(pow(width, 2) + pow(height, 2));
</pre>
    <p>(It's just an example, you can actually use <code>hypot(width, height)</code>.)</p>
    <p>Text blocks are nice to keep data with your code. They play the same role as “here documents” in scripts. I hope that interpolation will come back soon, but in the meantime I use <code>String.formatted</code> for variable text parts.</p>
    <h2>Helpful API Features</h2>
    <p>The Java library for strings, regex, collections, and date/time is excellent and extremely well documented. I much prefer it to the equivalent in Python, JavaScript, or (ugh) Bash. </p>
    <p>For example, reading a file into a string is simply:</p>
    <pre>var content = Files.readString(Path.of(filename));
</pre>
    <p>I use a helper for running an external process:</p>
    <pre>String run(String... cmd) throws Exception {
    var process = new ProcessBuilder(cmd).redirectErrorStream(true).start();
    process.waitFor();
    return new String(process.getInputStream().readAllBytes());
}
</pre>
    <p>Note, by the way, that since <a href="https://openjdk.org/jeps/400">JEP 400</a>, I can rely on UTF-8 as the default encoding.</p>
    <p>For HTTP, there is the <code>HTTPClient</code> (<a href="https://openjdk.org/jeps/321">JEP 321</a>) and the simple web server (<a href="https://openjdk.org/jeps/408">JEP 408</a>).</p>
    <p>The XML support is serviceable. The API is antiquated and cumbersome, but at least it works predictably. In Python, you get a multitude of choices, each partially broken in its own way.</p>
    <p>There are two things that are sorely missing in the standard library: JSON and command-line processing. For a large Java program, this isn't a big issue. Just add your favorite library, such as Jackson or PicoCLI, to the POM. But it is a roadblock when writing scripts. You don't want to manually get all of the dependencies of Jackson downloaded, and then added to the class path.</p>
    <p>One trick is to use really simple libraries that fit into a single file. I've used <a href="https://github.com/arkanovicz/essential-json">Essential JSON</a> and <a href="https://github.com/purcell/jargs">JArgs</a>. Just toss the file into the same directory as your script.</p>
    <h2>Checked Exceptions</h2>
    <p>Depending on your circumstances, it may well be acceptable if the script terminates with a stack trace when something went wrong. But of course, you still need to declare or catch checked exceptions. In a large program, this makes sense, but it can feel like a burden in a script. </p>
    <p>The simplest remedy is to add <code>throws Exception</code> to each method that may throw a checked exception, including <code>main</code>. </p>
    <p>As an aside, this could be another “ceremony reduction” for beginning students. Why not do that automatically in methods of implicit classes? But I don't make the rules.</p>
    <p>There is still a problem with checked exceptions in lambda expressions. Scripts do a lot of file handling, and sometimes the API provides streams of file paths. So you want to go on with something like</p>
    <pre>streamOfPaths.map(Files::readString)
</pre>
    <p>But you can't since the <code>readString</code> method may throw an <code>IOException</code>.</p>
    <p>The correct remedy is, of course, to handle the exception in some way. Return an empty string. Log the exception. Turn it into an <code>UncheckedIOException</code>. Only you can make the appropriate decision.</p>
    <p>But in a script, you may not care, and just want the program to terminate. There are a number of “sneaky throw” libraries, such as <a href="https://github.com/ciechanowiec/sneakyfun/">Sneaky Fun</a> to address this problem. They take advantage of a hole in the Java type system. Through a clever use of generics, one can turn a method with <code>throws</code> specifiers into one that doesn't have any. The details are, well, sneaky, but you don't need to know them to use the feature. Simply write:</p>
    <pre>streamOfPaths.map(sneaky(Files::readString))
</pre>
    <p>I am pretty sure this will never be a part of the JDK, because it is arguably bad for large and serious programs. But in a quick and dirty script, why not? Just remember to take it out if your script scales to the point where it no longer quick and dirty.</p>
    <h2>IDEs and File Organization</h2>
    <p>You don't want to write a script with a barebones text editor. The whole point of using Java is that it is a statically typed language where the IDE can help you out with code completion and instant display of programming errors.</p>
    <p>I usually start with a middle-weight editor such as Visual Studio Code or Emacs with LSP mode. That gives me Java integration, but without the need to set up a separate project for every script. Just open the Java file and start editing.</p>
    <p>As I already mentioned, I find it demotivating to start a new <code>src/main/java</code> directory structure whenever an idea for a script occurs to me. So, I get going with my favorite editor. Eventually the script grows to the point where I no longer want to debug with print statements. You can debug a Java program inside VS Code, but I don't find it particularly convenient. At that point, I would like the comfort of an actual IDE. But without <code>src/main/java</code>. </p>
    <p>It is actually possible to coax your heavy-weight IDE into using the project base directory as the source directory. If you “seed” your project base directory with a Java file, and then create a project from existing sources in your IDE, it should recognize your intent automatically. With an existing project, edit the project setup. In Eclipse, right-click on the project name, select Properties and Java Build Path, then the Source tab. In IntelliJ, go to Menu → Project structure... → Modules, remove the “content root”, and add the project base directory as a new “content root” that is marked as “Sources”. It sounds weird but it works.</p>
    <h2>JBang</h2>
    <p>The biggest pain point with Java scripting is the use of third party libraries. Why is it that the single-file <code>java</code> launcher can't import stuff from Maven? Well, for starters, Java has no idea that Maven exists. There is nothing in the Java language standard that says anything about the Maven ecosystem. This is where Java shows its age. More modern programming languages have a unified mechanism for third party libraries. But I don't think that this is something that Oracle can or wants to fix. So, you need some tooling to integrate with the Maven ecosystem, and it won't be a part of the JDK.</p>
    <p>As a quick remedy (adapted from <a href="https://advancedweb.hu/using-external-libraries-in-jshell/">this hack</a>), I sometimes make a trivial Gradle script with Maven coordinates to get the files fetched, and to print a class path. But that's only when I am not allowed to use JBang. (See <a href="https://www.javaadvent.com/2021/12/jbang-gift-that-keeps-on-giving.html">this JavaAdvent article</a> for an introduction to JBang.)</p>
    <p>The killer feature of JBang is that you can add Maven dependencies right into the source file:</p>
    <pre>//DEPS org.eclipse.angus:jakarta.mail:2.0.3
</pre>
    <p>Then you can run</p>
    <pre>jbang MailMerge.java
</pre>
    <p>In Linux and Mac OS, you can also turn the file into an executable script with a “shebang” line:</p>
    <pre>///usr/bin/env jbang "$0" "$@" ; exit $?
</pre>
    <p>Note that the <code>//</code> hide the shebang from Java, and the <code>exit $?</code> masks the rest of the Java file from the shell. (Three slashes are used for an <a href="https://pubs.opengroup.org/onlinepubs/000095399/basedefs/xbd_chap04.html#tag_04_11">arcane Posix compliance reason</a>.)</p>
    <p>The rest of JBang is just gravy. You can launch JShell with your file and its dependencies loaded. You can launch an IDE with symlinks to your source inside a temporary <code>src/main/java</code>. There are many more thoughtful features, but not too many. If you are serious about scripting in Java, and are able to use third-party tools, get JBang.</p>
    <h2>Notebooks</h2>
    <p>So far I focused on scripts—short programs that one runs regularly. Another aspect of programming in the small is exploratory programming: writing code once or a few times, to get some result out of a data set. Data scientists favor <em>notebooks</em> for this work. A notebook consists of code and text cells. The result of each code cell is displayed as text, a table, an image, or even as an audio or video clip. The code cells invite a trial-and-error approach. Once the desired result is obtained, the computation can be annotated with the text cells.</p>
    <p>Why is this better than JShell? It is much easier to tinker with the cells than with lines of code in JShell. You can see tabular data and graphs. It is easy to save and share notebooks.</p>
    <p>The most common notebook in Python is called “Jupyter”. You can run it locally, usually with a web interface, or it can be hosted. A popular hosted service is Google Colab.</p>
    <p>Actually, the core Jupyter technology is language independent. One can install different <em>kernels</em> for various programming languages. The kernel installation process can be fussy, but <a href="https://www.javaadvent.com/2023/12/jupyter-notebooks-and-java.html">this JavaAdvent article</a> describes Jupyter Java Anywhere, a simple mechanism (using JBang) for installing a Java kernel.</p>
    <p>Confusingly, there are a number of different Java kernels (including <a href="https://github.com/SpencerPark/IJava">IJava</a>, <a href="https://github.com/dflib/jjava">JJava</a>, <a href="https://github.com/allen-ball/ganymede">Ganymede</a>, and <a href="https://github.com/padreati/rapaio-jupyter-kernel">Rapaio</a>). Each kernel has its own way for installing Maven dependencies, displaying non-text results, and so on. Juypter Java Anywhere installs the classic IJava kernel, which has some open issues around dependency resolution. It really would be desirable for Oracle or another major vendor to step up, curate a kernel, and even—dare we hope—provide a Colab-like Java notebook service. Something more useful than the <a href="https://dev.java/playground/">Java playground.</a>
    </p>
    <p>Python notebook coders are blessed with a couple of libraries for number crunching, in particular NumPy and Matplotlib. I have not found either of them to be God's gift in terms of API design, but they are ubiquitous, and therefore StackOverflow and your favorite chatbot will offer suggestions, many of them useful, for tweaking computations and graphs.</p>
    <p>Exploratory coding in Java is not (yet) common, and there isn't a deep bench of support libraries. I think <a href="https://github.com/jtablesaw/tablesaw">tablesaw</a> could be a reasonable NumPy equivalent. It has a wrapper for the well-regarded Plot.ly JavaScript drawing package.</p>
<!--     〈p I tried using the admirable 〈a href=https://github.com/fair-acc/chart-fx ChartFX〉 package in a notebook, but it requires JavaFX, which I could not get to run with the IJava kernel. 〉 -->
    <p>Sven Reimers is developing the <a href="https://github.com/svenreimers/jtaccuino">JTaccuino</a> notebook to offer a better experience. This is a JavaFX implementation with a friendlier user interface than the web-based Jupyter notebook. It uses JShell under the hood. The project is still in its early stages but worth watching.</p>
    <p><img src="https://horstmann.com/unblog/2024-12-11/jtaccuino.png" alt=".png" loading="lazy"></p>
    <p>For Kotlin, there is the <a href="https://kotlinlang.org/docs/kotlin-notebook-overview.html">Kotlin Notebook</a> IntelliJ plugin.</p>
    <p>While Java notebooks may not be ready for prime time, there is hope for the future.</p>
    <h2>Conclusion</h2>
    <p>With the right tooling, Java is a surprisingly effective choice for small programs. For simple scripts that use only the Java API, you can simply launch a Java source file. JBang makes it very easy to launch programs with third-party libraries. You benefit from compile-time typing and an upgrade path for when your programs get more complex, as they often do.</p>
    <p>For the same reasons, Java can become an attractive choice for exploratory programming, but the tooling is not yet where it could be.</p>
    
    
    
    <!-- You can specify a per page discussion id on the next line, if your URLs might change. -->
    
    
    
  

</div>]]></description>
        </item>
    </channel>
</rss>