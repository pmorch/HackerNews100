<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 12 Aug 2024 20:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Tim Sweeney: " Now Apple is demanding a 30% cut of all Patreon DONATIONS (133 pts)]]></title>
            <link>https://twitter.com/TimSweeneyEpic/status/1823027135784558842</link>
            <guid>41226754</guid>
            <pubDate>Mon, 12 Aug 2024 17:04:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/TimSweeneyEpic/status/1823027135784558842">https://twitter.com/TimSweeneyEpic/status/1823027135784558842</a>, See on <a href="https://news.ycombinator.com/item?id=41226754">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Repair and Remain: How to do the slow, hard, good work of staying put (324 pts)]]></title>
            <link>https://comment.org/repair-and-remain/</link>
            <guid>41226039</guid>
            <pubDate>Mon, 12 Aug 2024 16:06:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://comment.org/repair-and-remain/">https://comment.org/repair-and-remain/</a>, See on <a href="https://news.ycombinator.com/item?id=41226039">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				
				
				
				
				<div>
				
				
				
				
				<p><h2>I</h2></p>
			</div><div><p>I’ve never had anything like a real career, only a long and varied string of jobs. I grew up working on the family farm, and then had jobs as a roofer, a groundskeeper at a rural hospital, and a mineral-bagging-machine operator in an unheated feed mill one frigid Manitoba winter. I spent a year as a photographer and store manager in a tiny portrait studio just as digital cameras were beginning to consign film cameras to obsolescence. I worked for three years as a barista at one of Vancouver’s top-rated independent coffee shops. I’ve been a magazine editor, a sessional lecturer in a couple of liberal arts schools, a glazier’s assistant, a mason tender, a plumber’s labourer, and a daycare worker. One winter I lived in a simple little cabin—no plumbing, no electricity—and I made homemade soap over a wood stove and sold it at craft sales. In my twenties and thirties I spent many of my summers planting close to half a million trees on countless logging clear-cuts between Hyder, Alaska, and Dryden, Ontario.</p>
<p>And for twelve years now I’ve had a hybrid operation, juggling a one-man autodidact home-repair business and part-time lay ministry at a little Anglican church in Winnipeg. My basic MO in both roles is simple: repair and remain.</p>
<p>I don’t have the know-how to build you a brand-new house, but I can help fix pretty much anything in your old one. If you do, in fact, need a new house, I’ll send you to Francesco or Myron, or James and Fiona, all of them trustworthy builders and fine people. Odds are the house you’re in right now needs a few updates and minor upgrades, and I’d be happy to help with whatever you need done: add some new windows, open up some walls, replace the old basement stairs, tile the backsplash. Repair and remain.</p>
<p>Same with pastoring: no point thinking you need a brand-new life, but, well, let’s not kid around—you could use some serious updates and upgrades yourself.</p>
<p>Let’s say time comes to gut and renovate your bathroom: I can help you with that—demolition, framing, reworking the plumbing, moving some electrical, installing some mould-resistant drywall, maybe some nice tile for the floor and some classic glazed ceramic three-by-six subway tile for the tub surround. Should take a month or two, depending on what all’s involved. And as for you, hey, for the sake of your wife and kids, I think you better quit the flurry of furtive late-night texts to the sexy young co-worker and cut back a bit on your recreational drinking because wine is a mocker, so goes the proverb, as if those Facebook posts of you at the bar last week weren’t proof enough.</p>
<p>Repair and remain. Work with what you’ve got. Sit still for a moment, take stock, make some changes. Big changes, if necessary.</p></div>
			</div><div>
				
				
				
				
				<p><h3>Repair and remain. Work with what you’ve got. Sit still for a moment, take stock, make some changes. Big changes, if necessary.</h3></p>
			</div><div><p>David and Ruth called me once to unclog their bathroom sink. Someone had dropped a nail clipper into it a decade ago, but now the drain was rusted and when I went to loosen the nut, the steel sink cracked and split, but it was an old sink so I couldn’t find a matching one to replace it with, so that meant the old vanity had to go too, but that left an odd footprint on the curled, old linoleum, so then the flooring had to go too, and, well, if you’re going that far, you might as well put in a new tub. And so on. You get the picture. Renominoes. In the end, a house call to help deal with a bathroom sink with a nail clipper jammed in it led to six weeks’ work and a bill in the teens with three zeros.</p>
<p>Last year, in the middle of the pandemic, a man I haven’t seen in more than fifteen years called me up to weep on the phone because he was having a difficult time loving his kids. He had started to feel resentment toward them because, he said, the kids had taken so much away from him he barely knew who he was anymore. “I called you because I knew you’d be gentle with me,” he said. That I can do.</p>
<p>Six years ago a guy I barely knew cornered me after church and asked if I could meet him for breakfast, and when we met, he told me he was <em>this </em>close to walking out on his wife and kids. Since then, he and I have been meeting up every couple of months or so. Last year he told me he wouldn’t still be married if it weren’t for all those conversations over greasy bacon and eggs over easy. Well and good, I say, but the truth is he’s the one doing the hard work. He’s the one who’s got to live his life. All I have to do is buy breakfast, and sit, and listen.</p>
<p>Repair and remain.</p>
<p>That’s how I work, and it’s what I advise. I don’t know how things are going to turn out in your life or in your marriage or with your kids. Nobody does. Maybe it will all get a whole lot worse, who’s to say. But a brand-new house won’t fix your troubles any more than a fresh start with a fascinating new somebody will. Don’t tell me; I already know it would be easier to just cut and run, because I know how hard it is to live with other people, four of whom are also stuck having to live with brooding, melancholy me. I have planted spruce saplings on the steep, thorny, overgrown slopes of the Rocky Mountains in snowstorms in June. I once heaved a three-hundred-pound cast-iron tub up and out the second-story window of an old house. And when I worked for a bricklayer, he and I took down a concrete-and-rebar-reinforced cinderblock wall with sledgehammers. But this—doing my best to be a loving husband and father in the trauma and tedium of the day-to-day—is without question the hardest thing I’ve ever done.</p></div><div><p>Over the past dozen years I have had hundreds of pastoral conversations, mostly with young men, about the challenges of family life. They tell me it’s exhausting, that there’s no more free time, that they’re having a hard time setting aside their dreams and wishes, that kids can be unbearably frustrating. I get it. They tell me that the marriage isn’t what it used to be, that they don’t really have anything in common anymore, that the passion’s gone, that she isn’t who she used to be, that the sex isn’t what it used to be, that they’re tired of all of it. I sip my coffee and nod in agreement with every word. I understand. I feel it too. It’s the same at my house. Marriage is hard.</p>
<p>But when they say, “I’m thinking of leaving,” I think, Now hang on a sec. You had me right up to that last bit. Fine: you’ve changed; she’s changed; life has changed. And the kids—well, they’ve disrupted, interrupted, confronted, confounded, and otherwise fundamentally altered <em>everything</em>. All very, very hard. And yes, sometimes it feels impossible. I know what it’s like to feel trapped, and my wife undoubtedly knows what it’s like to feel trapped, because she’s stuck with me, <a href="https://comment.org/varieties-of-the-noonday-demon/">the more irritable and moody ingredient</a> in our marriage. But you’re thinking of leaving? What is that going to fix?</p>
<p>We have, all of us and to varying degrees, been duped by the sales pitches, the flashing cascade of advertisements traipsing through the sidebar. That jam-packed flow of ads is full of shiny new things, new techniques, new experiences that promise to finally alleviate the so-far insatiable, burning, lonely, primordial ache. Bono laments, “I still haven’t found what I’m looking for.” Springsteen cries out, “Everybody’s got a hungry heart.” k.d. lang bemoans the “constant craving.” Augustine says, “Our hearts are restless.”</p>
<p>I used to blame advertisers for that restlessness and dissatisfaction, but I don’t think that’s right. We were already restless; we always have been. The advertisers just figured out how to nurture, tend, exacerbate, and capitalize on the pre-existing condition, that innate restlessness, promising that something new is going to set all to rights. When the flashing sidebar connects that hand lotion, those hiking boots, a beach vacation, or some rugged SUV with satisfaction, joy, and inner peace, it sure <em>feels</em> like we’d be suckers <em>not </em>to buy it. And when that thing inevitably disappoints, we hardly even notice. There’s always something new to buy. That narrative of elusive satisfaction isn’t just something we’re repeatedly being told; it is a story we’re literally buying into all the time. No surprise, then, that when our beloved to whom we once upon a time “pledged our troth” inevitably disappoints, we start thinking it might be time to get a new beloved.</p></div><div>
				
				
				
				
				<p><h3>That narrative of elusive satisfaction isn’t just something we’re repeatedly being told; it is a story we’re literally buying into all the time.</h3></p>
			</div><div><p>I have come to think that renovation work is not inherently a sign of fashion-driven, bourgeois, consumerist excess; that beauty is not superfluous; and that a good renovation is a good investment. Taking care of your house is a wise and pragmatic thing to do. The integrity of a house means that all the parts and systems work as a whole, from ridge cap to footing and everything in between. Roof trusses, studs, joists, shiplap, plumbing supply and waste, eaves, windows, flooring, faucets, switches: your house will function as a house when it is well built and well maintained. Integrity of form, function, usability, and beauty. If it’s poorly made, or when it starts to fall apart, the integrity of the whole thing suffers. Give it enough time and a leak in the roof or a leak from a drain will ruin the whole thing.</p>
<p>If you ignore the little things long enough, something as small as a nail clipper can make for two days of demolition and a trailer filled with an old sink, outdated vanity, faded linoleum, some lath and plaster, old plumbing, a thirsty old toilet, and so on. I can haul those few thousand pounds of junk to the landfill and rebuild your bathroom. But in the end, when it’s all put back together again, what you have will still be the spot to do the same basic grooming and human-waste disposal. Pay attention and mind the details and you save yourself a lot of hassle and money. That slow corrosion that comes if you ignore the small, nagging troubles of your life has the potential to wreck a family the way a nail clipper can wreck a bathroom. And somebody’s going to pay for it, even if it isn’t you. Mostly it will be the kids, plus the ongoing emotional and spiritual costs divvied up among the friends, family, and community who witnessed your vows, who backed you as you struggled along, who loved you then and still love you now.</p>
<p>Because however it may sometimes seem that circumstance, fortune, and your exasperating spouse are conspiring to sabotage your happiness and peace of mind, the one certain, irrefutable common factor in all your circumstances is you. You are the bearer and carrier of grief, disappointment, frustration, and heartache, just as you are also the source of much of the same. So it goes. I’ve said it more than once to some guy across the table who tells me he’s planning to leave his marriage: You should stay. Sit in the awful, agonizing sorrow of it all, and figure some things out. Your life is very hard. I know you’ve thought it through more than I can imagine; I know you’ve calculated the cost-benefit, weighed your options; and all that is fine and good. There is no way of knowing how this will play out in your very real life. Nobody can predict the future. Something has to give, yes. But it doesn’t need to be this. <a href="https://ifstudies.org/blog/should-couples-in-unhappy-marriages-stay-together" target="_blank" rel="noopener">I think you should stay</a>.</p>
<p>It’s a tough sell. I understand, because my undisciplined imagination, formed like everyone else’s by countless half-minute ads and building-sized billboards, frolics among fantastic, glamorous possibilities of something other than what I’ve already got. It’s a cornucopia of options, with countless cathedrals and priests promising salvation at the marketplace, be it a new app, new phone, new car, new house, new job, new city, or new spouse. The promise is always the same: <em>this </em>thing will make you happy. Never mind trying to fix what you’ve got. Just get a new one and start over.</p>
<p>Repair and remain sounds simple because it is. But simple is not the same as easy. “For better, for worse,” we say, and everyone likes to stay when it’s the better. But staying through the worse—that’s the whole point of the vow, for Christ’s sake.</p></div><div>
				
				
				
				
				<p><h3>Repair and remain sounds simple because it is. But simple is not the same as easy.</h3></p>
			</div><div><p>Mostly they do what they’ve already decided to do, and they leave. My track record for counselling couples to stick it out is pretty poor. I still think the better part of wisdom says stay. Endure. Wrestle. Suffer. Struggle. Keep working. Your heart is restless, my heart is restless, all our hearts are restless, “until they find their rest in Thee”—a rest that may well be found in full only after our death. So be it. Until then: stay.</p>
<p>Repair and remain.</p>
<p>Repair and remain.</p>
<p>Repair and remain.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple's requirements are about to hit creators and fans on Patreon (472 pts)]]></title>
            <link>https://news.patreon.com/articles/understanding-apple-requirements-for-patreon</link>
            <guid>41224853</guid>
            <pubDate>Mon, 12 Aug 2024 14:34:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.patreon.com/articles/understanding-apple-requirements-for-patreon">https://news.patreon.com/articles/understanding-apple-requirements-for-patreon</a>, See on <a href="https://news.ycombinator.com/item?id=41224853">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article data-fetch-key="data-v-0d6194c9:0" data-v-0d6194c9=""><section data-v-0accbd0e="" data-v-0d6194c9=""><h2 data-v-0accbd0e="">Apple’s requirements are about to hit creators and fans on Patreon. Here’s what you need to know.</h2> <p data-v-0accbd0e="">
    August 12, 2024
  </p> <!---->  <p data-sz="md" data-v-0accbd0e="">Apple is requiring that Patreon switch to their iOS in-app purchase system starting this November, or risk being removed from the App Store. Here’s what’s coming, and what you can do about it.</p> <hr data-v-0accbd0e=""></section> <div data-v-0d6194c9=""><div block-id="528" id="article-blade-528"><p>Patreon exists to let creators make what they love for their biggest fans, and earn an income doing it on their own terms. Everything we build is to make those two things easier for creators. For <strong><em>you</em></strong>.</p>
<p>Unfortunately, Apple is requiring us to switch over to their in-app purchase system for all iOS transactions or else risk being kicked out of the App Store altogether – and their in-app purchase system is not built with our same level of creator-first flexibility.<br>
In situations like this — where a partner is forcing us into a change that we don't believe is best for creators — we use these three principles to guide our decisions:</p>
<ol>
<li><strong>Transparency</strong> – Communicating to you early and clearly to help you understand exactly what is happening and what your options are.</li>
<li><strong>Control</strong> – Giving you a clear understanding of the tradeoffs, so that you can decide what’s right for your business.</li>
<li><strong>Stability</strong> – Making sure that you’re able to maintain your earnings and continue to grow your business throughout this process.</li>
</ol>
</div><div block-id="529" id="article-blade-529"><h4><strong>Apple’s requirements</strong></h4>
<p>As we<a href="https://news.patreon.com/articles/an-update-on-commerce-purchases-in-the-ios-app/" target="_blank" rel="noreferrer noopener"> first announced last year</a>, Apple is requiring that Patreon use their in-app purchasing system and remove all other billing systems from the Patreon iOS app by November 2024.</p>
<p>This has two major consequences for creators:</p>
<ol>
<li>Apple will be applying their <strong>30% App Store fee to all new memberships purchased in the Patreon iOS app</strong>, in addition to anything bought in your Patreon shop.</li>
<li>Any creator currently on first-of-the-month or per-creation billing plans will have to <strong>switch over to subscription billing to continue earning in the iOS app</strong>, because that’s the only billing type Apple’s in-app purchase system supports.</li>
</ol>
<p>Before we go any further, we want to be crystal clear about one thing: <strong>Apple’s fee will not impact your existing members</strong>. It will only affect new memberships purchased in the iOS app from November onward.</p>
<p>Here’s everything you need to know to navigate this change in the least disruptive way possible.</p>
</div><div block-id="530" id="article-blade-530"><h4><strong>Navigating Apple’s fee</strong></h4>
<p>We’ve been working closely with creators to figure out the best way to help you avoid earnings disruptions stemming from Apple’s 30% App Store fee.</p>
<p>Based on creator feedback, we've built <strong>an optional tool that can automatically increase your prices — only in the iOS app — to offset the cost of Apple's fee</strong>. This way, you’ll continue to earn at least the same amount per membership as you do on all other platforms.</p>
<p>That said, you deserve the chance to decide whether that’s something you want. So, while the automatic price increase is the default option, you also have the choice to keep your prices the same and pay the 30% fee from your earnings. We don’t recommend this, because it means you’d earn less per membership on in-app iOS transactions – but ultimately we believe it's important to give you agency to make your own decisions.</p>
<p>Obviously, neither of these solutions are ideal. But remember, Apple’s fees are only in the iOS app. Your prices on the web and the Android app will remain completely unaffected. You can always send your fans to <a href="https://support.patreon.com/hc/articles/27992185537037-How-iOS-in-app-purchases-works-for-fans" target="_blank" rel="noreferrer noopener">this Help Center article</a> which explains the iOS in-app fees relative to other platforms, so they can better understand the implications of where they choose to make their purchases.</p>
<p>In any case, the decision you end up making doesn’t have to be final: you can change how you apply the fee at any time. For a breakdown of fees and earnings check out our <a href="https://support.patreon.com/hc/en-us/articles/27991664769677-How-iOS-in-app-purchases-work-on-Patreon" target="_blank" rel="noreferrer noopener">Help Center article</a>.</p>
</div><div block-id="531" id="article-blade-531"><h4><strong>Navigating Apple’s billing requirement</strong></h4>
<p>Patreon is home to an incredible range of creators, all with unique circumstances and billing needs. Apple’s in-app purchase system, on the other hand, <strong>only supports Patreon’s subscription billing model</strong>. Apple has also made clear that if creators on Patreon continue to use unsupported billing models or disable transactions in the iOS app, we will be at risk of having the entire app removed from their App Store.</p>
<p>Apple’s billing mandates mean that if you’re on a first-of-the-month or per-creation billing model, your membership will no longer be available to fans in the iOS app starting this November until you switch over to subscription billing.</p>
<p>As a result of Apple’s mandates and in order to make sure that you can continue getting new members in the iOS app, <strong>we've started a 16-month-long migration process to bring all creators onto subscription billing by November 2025</strong>, supported by a <a href="https://support.patreon.com/hc/articles/27992241435533-Patreon-will-support-with-migration-to-subscription-billing" target="_blank" rel="noreferrer noopener">roadmap</a> of new features and tools to make sure the billing model works for you, your community, and your business. To be clear, this means that first-of-the-month and per-creation billing models will be discontinued in November 2025.</p>
<p>Most creators on Patreon use subscription billing. Over the past few years, we’ve slowly rolled it out, tackling each hurdle that has come up to ensure that the migration is not disruptive for creators. That’s the way we like to roll out products. Unfortunately, because of Apple’s timelines and constraints, we can’t continue to do it this way. Instead of helping creators move to subscription billing if and when they feel like it’s right for them, we’re now forced to migrate all creators on Apple’s timeline.</p>
<p>How this change will affect you depends on your current billing model. If you’re not sure what billing model you’re on, you can find out in <a href="https://www.patreon.com/settings-creator/payout" target="_blank" rel="noreferrer noopener">your settings</a>.</p>
<ul>
<li><strong>Subscription billing</strong> – You do not have to make any changes to your billing model and can adjust how you handle Apple's fees at any time.</li>
<li><strong>First-of-the-month billing</strong> – In order to let you keep earning in the iOS app, we are going to automatically switch you over to subscription billing beginning in November 2024. However, if you’d like more time, you can delay your migration in your settings to keep your current billing model until November 2025. To be clear: even if you delay your migration, Apple’s requirements still apply. If you have not switched to subscription billing by this November, your fans will not be able to purchase new memberships in the iOS app. If you delay the migration but then change your mind, you can migrate to subscription billing at any time in <a href="https://www.patreon.com/settings-creator/payout" target="_blank" rel="noreferrer noopener">your settings</a>.</li>
<li><strong>Per-creation billing</strong> – Because this is such a big change to how you run your business, our Product Support will offer 1-1 support to help you migrate, which takes more time. You will be able to keep your current billing model until November 2025, at which point you’ll be migrated to subscription billing automatically. However, Apple’s requirements still take effect in November 2024. If you have not switched to subscription billing by this November, your fans will not be able to purchase new memberships in the iOS app. You can start the migration process in <a href="https://www.patreon.com/settings-creator/payout" target="_blank" rel="noreferrer noopener">your settings</a>.</li>
</ul>
</div></div>  <!----></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Postgres.new (171 pts)]]></title>
            <link>https://postgres.new/</link>
            <guid>41224749</guid>
            <pubDate>Mon, 12 Aug 2024 14:25:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://postgres.new/">https://postgres.new/</a>, See on <a href="https://news.ycombinator.com/item?id=41224749">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main><div><div><div data-state="active" data-orientation="horizontal" role="tabpanel" aria-labelledby="radix-:Rbjtaja:-trigger-diagram" id="radix-:Rbjtaja:-content-diagram" tabindex="0" dir="ltr"><div><div data-testid="rf__wrapper"><svg style="position:absolute;width:100%;height:100%;top:0;left:0" data-testid="rf__background"><pattern id="pattern-1undefined" x="0" y="0" width="32" height="32" patternUnits="userSpaceOnUse" patternTransform="translate(-0.5,-0.5)"><circle cx="0.5" cy="0.5" r="0.5" fill="hsl(var(--muted-foreground)/.5)"></circle></pattern><rect x="0" y="0" width="100%" height="100%" fill="url(#pattern-1undefined)"></rect></svg><div><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2v4"></path><path d="m16.2 7.8 2.9-2.9"></path><path d="M18 12h4"></path><path d="m16.2 16.2 2.9 2.9"></path><path d="M12 18v4"></path><path d="m4.9 19.1 2.9-2.9"></path><path d="M2 12h4"></path><path d="m4.9 4.9 2.9 2.9"></path></svg><p>Loading schema...</p></div></div><div><ul><li><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4"></path><path d="m21 2-9.6 9.6"></path><circle cx="7.5" cy="15.5" r="5.5"></circle></svg>Primary key</li><li><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><line x1="4" x2="20" y1="9" y2="9"></line><line x1="4" x2="20" y1="15" y2="15"></line><line x1="10" x2="8" y1="3" y2="21"></line><line x1="16" x2="14" y1="3" y2="21"></line></svg>Identity</li><li><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4"></path><path d="M14 13.12c0 2.38 0 6.38-1 8.88"></path><path d="M17.29 21.02c.12-.6.43-2.3.5-3.02"></path><path d="M2 12a10 10 0 0 1 18-6"></path><path d="M2 16h.01"></path><path d="M21.8 16c.2-2 .131-5.354 0-6"></path><path d="M5 19.5C5.5 18 6 15 6 12a6 6 0 0 1 .34-2"></path><path d="M8.65 22c.21-.66.45-1.32.57-2"></path><path d="M9 6.8a6 6 0 0 1 9 5.2v2"></path></svg>Unique</li><li><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z"></path></svg>Nullable</li><li><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z"></path></svg>Non-Nullable</li></ul></div></div><div><p><a href="https://github.com/supabase-community/postgres-new" target="_blank" rel="noopener noreferrer">Learn about postgres.new</a></p></div></div><div><div><form></form><p>AI can make mistakes. Check important information.</p></div></div></div><p>Please connect from a laptop or desktop to use postgres.new.</p></div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: PGlite – in-browser WASM Postgres with pgvector and live sync (334 pts)]]></title>
            <link>https://pglite.dev/</link>
            <guid>41224689</guid>
            <pubDate>Mon, 12 Aug 2024 14:20:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pglite.dev/">https://pglite.dev/</a>, See on <a href="https://news.ycombinator.com/item?id=41224689">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-v-4d2e0cc9="" data-v-b447a6fc="" id="VPContent" data-v-52b0c991=""><!--[--><!--]--><div data-v-70d6fb81="" data-v-b447a6fc=""><div data-v-70d6fb81=""><!--[--><!--]--><!--[--><p data-v-70d6fb81="">Embeddable Postgres</p><p data-v-70d6fb81="">Run a full Postgres database locally in your app with reactivity and server sync</p><!--]--><!--[--><!--]--><div data-v-70d6fb81=""><!--[--><div data-v-70d6fb81=""><p><a href="https://pglite.dev/docs/" data-v-70d6fb81="" data-v-321d5de2="">Get Started</a></p></div><div data-v-70d6fb81=""><p><a href="https://github.com/electric-sql/pglite" target="_blank" rel="noreferrer" data-v-70d6fb81="" data-v-321d5de2="">Star on GitHub</a></p></div><!--]--></div><!--[--><!--]--></div><div data-v-f0e325c8="" data-v-70d6fb81=""><p><img src="https://pglite.dev/img/brand/icon-light.svg" data-v-f0e325c8=""></p><div data-v-f0e325c8=""><!--[--><p><img src="https://pglite.dev/img/brand/icon-light.svg" data-v-f0e325c8=""></p><p><img src="https://pglite.dev/img/brand/icon-light.svg" data-v-f0e325c8=""></p><p><img src="https://pglite.dev/img/brand/icon-light.svg" data-v-f0e325c8=""></p><p><img src="https://pglite.dev/img/brand/icon-light.svg" data-v-f0e325c8=""></p><p><img src="https://pglite.dev/img/brand/icon-light.svg" data-v-f0e325c8=""></p><!--]--></div></div></div><!--[--><!--]--><!--[--><!--]--><div data-v-97e2a943="" data-v-b447a6fc=""><!--[--><div data-v-97e2a943="" data-v-b5aa6769=""><!--[--><article data-v-b5aa6769=""><!----><h2 data-v-b5aa6769="">Lightweight</h2><p data-v-b5aa6769="">A complete WASM build of Postgres that's under 3MB Gzipped.</p><!----></article><!--]--></div><div data-v-97e2a943="" data-v-b5aa6769=""><!--[--><article data-v-b5aa6769=""><!----><h2 data-v-b5aa6769="">Extendable</h2><p data-v-b5aa6769="">Dynamic extension loading mechanism, including support for pgvector and PostGIS.</p><!----></article><!--]--></div><div data-v-97e2a943="" data-v-b5aa6769=""><!--[--><article data-v-b5aa6769=""><!----><h2 data-v-b5aa6769="">Reactive</h2><p data-v-b5aa6769="">Built in support for data loading, synchronisation and live query primitives.</p><!----></article><!--]--></div><!--]--></div><!--[--><!--]--><div data-v-29672710="" data-v-b447a6fc="" data-v-45370b1f=""><div data-v-29672710=""><div data-v-29672710=""><h3 data-v-29672710="">Experience PGlite with <a href="https://postgres.new/" data-v-29672710="">postgres.new</a></h3><p data-v-29672710=""> Create and publish a Postgres database using AI<br data-v-29672710=""> build on PGlite by <a href="https://supabase.com/" data-v-29672710="">Supabase</a></p></div><video controls="" poster="https://static.pglite.dev/videos/postgres-new-showcase-loop.png" data-v-29672710=""><source src="https://static.pglite.dev/videos/postgres-new-showcase-loop-1080p.mp4" type="video/mp4" data-v-29672710=""></video><p><a href="https://postgres.new/" data-v-29672710="">What would you like to create?</a></p></div><div data-v-29672710=""><div data-v-29672710=""><h3 data-v-29672710="">Try PGlite Now</h3><p data-v-29672710=""> This is a full PGlite Postgres running in your browser<br data-v-29672710=""> It even includes <a href="https://pglite.dev/extensions/#pgvector" data-v-29672710="">pgvector</a>!</p></div><!----><p><a href="https://pglite.dev/repl" data-v-29672710="">Try more extensions in the playground</a></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AMD records its highest server market share in decades (180 pts)]]></title>
            <link>https://www.tomshardware.com/pc-components/cpus/amd-records-its-highest-server-market-share-in-decades-but-intel-fights-back-in-client-pcs</link>
            <guid>41224253</guid>
            <pubDate>Mon, 12 Aug 2024 13:40:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomshardware.com/pc-components/cpus/amd-records-its-highest-server-market-share-in-decades-but-intel-fights-back-in-client-pcs">https://www.tomshardware.com/pc-components/cpus/amd-records-its-highest-server-market-share-in-decades-but-intel-fights-back-in-client-pcs</a>, See on <a href="https://news.ycombinator.com/item?id=41224253">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">

<section>

<div id="article-body">
<p>AMD enjoyed another great quarter in Q2 2024 as it gained share in data center and laptop CPU markets, according to a new report from CPU market tracker&nbsp;<a data-analytics-id="inline-link" href="http://www.mercuryresearch.com/" data-url="http://www.mercuryresearch.com/" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">Mercury Research</a>. Still, Intel gained share in desktops and continues to lead in terms of units in general.&nbsp;</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-320-80.png.webp 320w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-1200-80.png.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-320-80.png" alt="Mercury Research" srcset="https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-320-80.png 320w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK-1200-80.png 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/GYTqQczjjDFR8H6pTrC3RK.png"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: AMD/Mercury Research)</span></figcaption></figure><p>Intel continued to dominate the client PC market in the second quarter of 2024, securing a 78.9% market share, while AMD held 21.1%. This outcome is expected, considering the strength and variety of Intel's client product lineup. Still, AMD managed to increase its unit share by 0.5% sequentially and by 3.8% year-over-year. Despite AMD's ongoing success, it will likely take the company years to achieve the sales growth needed to fully shift the market in its favor, not only because Intel dominates corporate PC sales but also because of Intel's access to vast production capacity.&nbsp;</p><div id="slice-container-table-PNonTt2eYea2mu8LE47VfS-4"><div><p>Swipe to scroll horizontally</p><svg viewBox="0 0 23 30" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21.554 15.726a2.878 2.878 0 0 0-1.705-.374 2.881 2.881 0 0 0-1.388-3.068 2.877 2.877 0 0 0-1.992-.333 2.884 2.884 0 0 0-.1-.766 2.865 2.865 0 0 0-1.346-1.75c-.47-.27-.996-.4-1.527-.385l2.742-4.73a2.87 2.87 0 0 0 .323-.83h2.612V2.084h-2.661A2.861 2.861 0 0 0 15.18.385a2.903 2.903 0 0 0-3.952 1.055l-.373.644H2.983l1.003-1L2.99.09 1.28 1.793l-.999.995L2.99 5.484l.998-.994-1.003-.999h7.054L6.505 9.586c-.34.066-.905.186-1.523.366-1.405.41-2.321.895-2.8 1.483-.742.911-1.159 2.513-1.277 4.898l-.001.01c-.067 1.816.946 6.943.99 7.16a.688.688 0 0 0 1.35-.266c-.01-.051-1.023-5.177-.963-6.84.127-2.556.598-3.64.97-4.098.133-.163.602-.587 2.104-1.027l.206-.058-1.425 2.458a.685.685 0 0 0 .252.937c.33.19.75.077.94-.251L12.42 2.126a1.52 1.52 0 0 1 2.07-.552c.35.2.6.527.705.916.105.39.051.797-.15 1.145l-4.767 8.222a.685.685 0 0 0 .252.937c.33.19.75.077.94-.25l.794-1.368c.201-.348.529-.597.92-.702a1.508 1.508 0 0 1 1.854 1.066c.105.39.052.796-.15 1.144l-.377.652-.002.002-.898 1.55a.685.685 0 0 0 .252.938c.329.189.75.077.94-.251l.9-1.551c.201-.348.528-.597.92-.702a1.512 1.512 0 0 1 1.703 2.21l-1.223 2.11a.685.685 0 0 0 .252.938c.33.189.75.076.941-.252l.5-.862c.202-.348.529-.597.92-.702.392-.104.8-.051 1.15.15.723.416.972 1.34.554 2.06l-3.525 6.08c-.517.892-1.57 1.795-3.044 2.611-1.156.64-2.163.998-2.173 1.002a.685.685 0 0 0 .23 1.333.688.688 0 0 0 .229-.04c.18-.062 4.419-1.575 5.952-4.22l3.524-6.08a2.878 2.878 0 0 0-1.059-3.934Z" fill="#333"></path></svg></div><div><table tabindex="0"><caption>Desktop CPUs via Mercury Research</caption><tbody><tr><td colspan="1"><span>Row 0 - Cell 0 </span></td><td colspan="1"><strong>2Q24</strong></td><td colspan="1"><strong>1Q24</strong></td><td colspan="1"><strong>4Q23</strong></td><td colspan="1"><strong>3Q23</strong></td><td colspan="1"><strong>2Q23</strong></td><td colspan="1"><strong>1Q23</strong></td><td colspan="1"><strong>4Q22</strong></td><td colspan="1"><strong>3Q22</strong></td><td colspan="1"><strong>2Q22</strong></td><td colspan="1"><strong>1Q22</strong></td><td colspan="1"><strong>4Q21</strong></td><td colspan="1"><strong>3Q21</strong></td><td colspan="1"><strong>2Q21</strong></td><td colspan="1"><strong>1Q21</strong></td><td colspan="1"><strong>4Q20</strong></td><td colspan="1"><strong>3Q20</strong></td><td colspan="1"><strong>2Q20</strong></td><td colspan="1"><strong>1Q20</strong></td><td colspan="1"><strong>4Q19</strong></td><td colspan="1"><strong>3Q19</strong></td><td colspan="1"><strong>2Q19</strong></td><td colspan="1"><strong>1Q2019</strong></td><td colspan="1"><strong>4Q18</strong></td><td colspan="1"><strong>3Q18</strong></td><td colspan="1"><strong>2Q18</strong></td><td colspan="1"><strong>1Q18</strong></td><td colspan="1"><strong>4Q17</strong></td><td colspan="1"><strong>3Q17</strong></td><td colspan="1"><strong>2Q17</strong></td><td colspan="1"><strong>1Q17</strong></td><td colspan="1"><strong>4Q16</strong></td><td colspan="1"><strong>3Q16</strong></td></tr><tr><td colspan="1"><strong>AMD Desktop Unit Share</strong></td><td colspan="1">23.0%</td><td colspan="1">23.9%</td><td colspan="1">19.8%</td><td colspan="1">19.2%</td><td colspan="1">19.4%</td><td colspan="1">19.2%</td><td colspan="1">18.6%</td><td colspan="1">13.9%</td><td colspan="1">20.5%</td><td colspan="1">18.3%</td><td colspan="1">16.2%</td><td colspan="1">17.0%</td><td colspan="1">17.1%</td><td colspan="1">19.3%</td><td colspan="1">19.3%</td><td colspan="1">20.1%</td><td colspan="1">19.2%</td><td colspan="1">18.6%</td><td colspan="1">18.3%</td><td colspan="1">18%</td><td colspan="1">17.1%</td><td colspan="1">17.1%</td><td colspan="1">15.8%</td><td colspan="1">13%</td><td colspan="1">12.3%</td><td colspan="1">12.2%</td><td colspan="1">12.0%</td><td colspan="1">10.9%</td><td colspan="1">11.1%</td><td colspan="1">11.4%</td><td colspan="1">9.9%</td><td colspan="1">9.1%</td></tr><tr><td colspan="1"><strong>Quarter over Quarter / Year over Year (pp)</strong></td><td colspan="1">-1% / +3.6</td><td colspan="1">+4.1 / +4.7</td><td colspan="1">+0.6 / +1.2</td><td colspan="1">-0.2 / +0.5</td><td colspan="1">+0.1 / -1.02</td><td colspan="1">+0.6 / +0.9</td><td colspan="1">+4.7 / +2.4</td><td colspan="1">-6.6 / -3.1</td><td colspan="1">+2.2 / +3.4</td><td colspan="1">+2.1 / -1.0</td><td colspan="1">-0.8 / -3.1</td><td colspan="1">-0.1 / -3.1</td><td colspan="1">-2.3 / -2.1</td><td colspan="1">+0.1 / +0.7</td><td colspan="1">-0.8 / +1.0</td><td colspan="1">+0.9 / +2.1</td><td colspan="1">+0.6 / +2.1</td><td colspan="1">+0.3 / +1.5</td><td colspan="1">+0.3 / +2.4</td><td colspan="1">+0.9 / +5</td><td colspan="1">Flat / +4.8</td><td colspan="1">+1.3 / +4.9</td><td colspan="1">+2.8 / +3.8</td><td colspan="1">+0.7 / +2.1</td><td colspan="1">+0.1 / +1.2</td><td colspan="1">+0.2 / +0.8</td><td colspan="1">+1.1 / +2.1</td><td colspan="1">-0.2 / +1.8</td><td colspan="1">-0.3 / -</td><td colspan="1">+1.5 / -</td><td colspan="1">+0.8 / -</td><td colspan="1">-</td></tr></tbody></table></div></div><p>AMD lost 1% of market share to Intel in desktop PCs in the second quarter of 2024 and now controls 23%, leaving 77% to Intel. Considering that AMD was preparing to release its all-new Zen 5-based CPUs for desktops in August, we doubt the company was too aggressive with stuffing the channel with its previous-generation Zen 4-based offerings, which might be one of the reasons why the company lost a small chunk of the market to its rival. Then again, when compared to the second quarter of 2023, AMD gained a 3.6% share in Q2 2024, which is quite a good result.&nbsp;</p><div id="slice-container-table-PNonTt2eYea2mu8LE47VfS-8"><div><p>Swipe to scroll horizontally</p><svg viewBox="0 0 23 30" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21.554 15.726a2.878 2.878 0 0 0-1.705-.374 2.881 2.881 0 0 0-1.388-3.068 2.877 2.877 0 0 0-1.992-.333 2.884 2.884 0 0 0-.1-.766 2.865 2.865 0 0 0-1.346-1.75c-.47-.27-.996-.4-1.527-.385l2.742-4.73a2.87 2.87 0 0 0 .323-.83h2.612V2.084h-2.661A2.861 2.861 0 0 0 15.18.385a2.903 2.903 0 0 0-3.952 1.055l-.373.644H2.983l1.003-1L2.99.09 1.28 1.793l-.999.995L2.99 5.484l.998-.994-1.003-.999h7.054L6.505 9.586c-.34.066-.905.186-1.523.366-1.405.41-2.321.895-2.8 1.483-.742.911-1.159 2.513-1.277 4.898l-.001.01c-.067 1.816.946 6.943.99 7.16a.688.688 0 0 0 1.35-.266c-.01-.051-1.023-5.177-.963-6.84.127-2.556.598-3.64.97-4.098.133-.163.602-.587 2.104-1.027l.206-.058-1.425 2.458a.685.685 0 0 0 .252.937c.33.19.75.077.94-.251L12.42 2.126a1.52 1.52 0 0 1 2.07-.552c.35.2.6.527.705.916.105.39.051.797-.15 1.145l-4.767 8.222a.685.685 0 0 0 .252.937c.33.19.75.077.94-.25l.794-1.368c.201-.348.529-.597.92-.702a1.508 1.508 0 0 1 1.854 1.066c.105.39.052.796-.15 1.144l-.377.652-.002.002-.898 1.55a.685.685 0 0 0 .252.938c.329.189.75.077.94-.251l.9-1.551c.201-.348.528-.597.92-.702a1.512 1.512 0 0 1 1.703 2.21l-1.223 2.11a.685.685 0 0 0 .252.938c.33.189.75.076.941-.252l.5-.862c.202-.348.529-.597.92-.702.392-.104.8-.051 1.15.15.723.416.972 1.34.554 2.06l-3.525 6.08c-.517.892-1.57 1.795-3.044 2.611-1.156.64-2.163.998-2.173 1.002a.685.685 0 0 0 .23 1.333.688.688 0 0 0 .229-.04c.18-.062 4.419-1.575 5.952-4.22l3.524-6.08a2.878 2.878 0 0 0-1.059-3.934Z" fill="#333"></path></svg></div><div><table tabindex="0"><caption>Mobile CPUs via Mercury Research</caption><tbody><tr><td colspan="1"><span>Row 0 - Cell 0 </span></td><td colspan="1"><strong>2Q24</strong></td><td colspan="1"><strong>1Q24</strong></td><td colspan="1"><strong>4Q23</strong></td><td colspan="1"><strong>3Q23</strong></td><td colspan="1"><strong>2Q23</strong></td><td colspan="1"><strong>1Q23</strong></td><td colspan="1"><strong>4Q22</strong></td><td colspan="1"><strong>3Q22</strong></td><td colspan="1"><strong>2Q22</strong></td><td colspan="1"><strong>1Q22</strong></td><td colspan="1"><strong>4Q21</strong></td><td colspan="1"><strong>3Q21</strong></td><td colspan="1"><strong>2Q21</strong></td><td colspan="1"><strong>1Q21</strong></td><td colspan="1"><strong>4Q20</strong></td><td colspan="1"><strong>3Q20</strong></td><td colspan="1"><strong>2Q20</strong></td><td colspan="1"><strong>1Q20</strong></td><td colspan="1"><strong>Q419</strong></td><td colspan="1"><strong>3Q19</strong></td><td colspan="1"><strong>2Q19</strong></td><td colspan="1"><strong>1Q2019</strong></td><td colspan="1"><strong>4Q18</strong></td><td colspan="1"><strong>3Q18</strong></td><td colspan="1"><strong>2Q18</strong></td></tr><tr><td colspan="1"><strong>AMD Mobile Unit Share</strong></td><td colspan="1">20.3%</td><td colspan="1">19.3%</td><td colspan="1">20.3%</td><td colspan="1">19.5%</td><td colspan="1">16.5%</td><td colspan="1">16.2%</td><td colspan="1">16.4%</td><td colspan="1">15.7%</td><td colspan="1">24.8%</td><td colspan="1">22.5%</td><td colspan="1">21.6%</td><td colspan="1">22.0%</td><td colspan="1">20.0%</td><td colspan="1">18.0%</td><td colspan="1">19%</td><td colspan="1">20.2%</td><td colspan="1">19.9%</td><td colspan="1">17.1%</td><td colspan="1">16.2%</td><td colspan="1">14.7%</td><td colspan="1">14.1%</td><td colspan="1">13.1%</td><td colspan="1">12.2%</td><td colspan="1">10.9%</td><td colspan="1">8.8%</td></tr><tr><td colspan="1"><strong>Quarter over Quarter / Year over Year (pp)</strong></td><td colspan="1">+1 / +3.8</td><td colspan="1">-1 / +3.1</td><td colspan="1">0.8 / 3.9</td><td colspan="1">2.9 / 3.8</td><td colspan="1">0.3 / -8.3</td><td colspan="1">-0.2 / -6.3</td><td colspan="1">+0.8 / -5.1</td><td colspan="1">-9.1 / -6.4</td><td colspan="1">+2.3 / +4.8</td><td colspan="1">+0.9 / +4.4</td><td colspan="1">-0.4 / +2.6</td><td colspan="1">+2.0 / +1.8</td><td colspan="1">+1.9 / +0.01</td><td colspan="1">-1.0 / +1.1</td><td colspan="1">-1.2 / +2.8 </td><td colspan="1">+0.3 / +5.5</td><td colspan="1">+2.9 / +5.8</td><td colspan="1">+0.9 / +3.2</td><td colspan="1">+1.5 / +4.0</td><td colspan="1">+0.7 / +3.8</td><td colspan="1">+1.0 / +5.3</td><td colspan="1">+0.9 / ?</td><td colspan="1"><span>Row 2 - Cell 23 </span></td><td colspan="1"><span>Row 2 - Cell 24 </span></td><td colspan="1"><span>Row 2 - Cell 25 </span></td></tr></tbody></table></div></div><p>On the laptop front, AMD made gains both sequentially and year-over-year. The company commanded 20.3% of x86 processors for laptops in Q2 2024: this is 1% higher than in the first quarter of this year and 3.8% higher than in the same quarter a year ago.&nbsp;</p><div><p>Apparently, even the upcoming launch of Zen 5-based Ryzen AI and Copilot+ and the AI PC frenzy are not expected to lower demand for AMD's existing offerings for <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/notebooks" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.tomshardware.com/tag/notebooks">notebooks</a>, which is why PC makers accelerated purchases of these products. Another reason for AMD's success could be Intel's issues with supplying enough Meteor Lake PCs.&nbsp;</p><p>

Still, AMD does not seem to have sold many expensive ('expensive' does not mean highest-end, though) Ryzen CPUs. Its laptop CPU revenue share is 17.7%, which is well below its 20.3% unit market share. Again, AMD's position improved as it increased its revenue share by 2.8% compared to the second quarter of this year and by a rather noticeable 4.5% compared to the second quarter of 2023.</p></div><div id="slice-container-table-PNonTt2eYea2mu8LE47VfS-11"><div><p>Swipe to scroll horizontally</p><svg viewBox="0 0 23 30" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21.554 15.726a2.878 2.878 0 0 0-1.705-.374 2.881 2.881 0 0 0-1.388-3.068 2.877 2.877 0 0 0-1.992-.333 2.884 2.884 0 0 0-.1-.766 2.865 2.865 0 0 0-1.346-1.75c-.47-.27-.996-.4-1.527-.385l2.742-4.73a2.87 2.87 0 0 0 .323-.83h2.612V2.084h-2.661A2.861 2.861 0 0 0 15.18.385a2.903 2.903 0 0 0-3.952 1.055l-.373.644H2.983l1.003-1L2.99.09 1.28 1.793l-.999.995L2.99 5.484l.998-.994-1.003-.999h7.054L6.505 9.586c-.34.066-.905.186-1.523.366-1.405.41-2.321.895-2.8 1.483-.742.911-1.159 2.513-1.277 4.898l-.001.01c-.067 1.816.946 6.943.99 7.16a.688.688 0 0 0 1.35-.266c-.01-.051-1.023-5.177-.963-6.84.127-2.556.598-3.64.97-4.098.133-.163.602-.587 2.104-1.027l.206-.058-1.425 2.458a.685.685 0 0 0 .252.937c.33.19.75.077.94-.251L12.42 2.126a1.52 1.52 0 0 1 2.07-.552c.35.2.6.527.705.916.105.39.051.797-.15 1.145l-4.767 8.222a.685.685 0 0 0 .252.937c.33.19.75.077.94-.25l.794-1.368c.201-.348.529-.597.92-.702a1.508 1.508 0 0 1 1.854 1.066c.105.39.052.796-.15 1.144l-.377.652-.002.002-.898 1.55a.685.685 0 0 0 .252.938c.329.189.75.077.94-.251l.9-1.551c.201-.348.528-.597.92-.702a1.512 1.512 0 0 1 1.703 2.21l-1.223 2.11a.685.685 0 0 0 .252.938c.33.189.75.076.941-.252l.5-.862c.202-.348.529-.597.92-.702.392-.104.8-.051 1.15.15.723.416.972 1.34.554 2.06l-3.525 6.08c-.517.892-1.57 1.795-3.044 2.611-1.156.64-2.163.998-2.173 1.002a.685.685 0 0 0 .23 1.333.688.688 0 0 0 .229-.04c.18-.062 4.419-1.575 5.952-4.22l3.524-6.08a2.878 2.878 0 0 0-1.059-3.934Z" fill="#333"></path></svg></div><div><table tabindex="0"><caption>Server CPUs via Mercury Research</caption><tbody><tr><td colspan="1"><span>Row 0 - Cell 0 </span></td><td colspan="1"><strong>1Q24</strong></td><td colspan="1"><strong>1Q24</strong></td><td colspan="1"><strong>4Q23</strong></td><td colspan="1"><strong>3Q23</strong></td><td colspan="1"><strong>2Q23</strong></td><td colspan="1"><strong>1Q23</strong></td><td colspan="1"><strong>4Q22</strong></td><td colspan="1"><strong>3Q22</strong></td><td colspan="1"><strong>2Q22</strong></td><td colspan="1"><strong>1Q22</strong></td><td colspan="1"><strong>4Q21</strong></td><td colspan="1"><strong>3Q21</strong></td><td colspan="1"><strong>2Q21</strong></td><td colspan="1"><strong>1Q21</strong></td><td colspan="1"><strong>4Q20</strong></td><td colspan="1"><strong>3Q20</strong></td><td colspan="1"><strong>2Q20</strong></td><td colspan="1"><strong>1Q20</strong></td><td colspan="1"><strong>4Q19</strong></td><td colspan="1"><strong>3Q19</strong></td><td colspan="1"><strong>2Q19</strong></td><td colspan="1"><strong>1Q2019</strong></td><td colspan="1"><strong>4Q18</strong></td><td colspan="1"><strong>3Q18</strong></td><td colspan="1"><strong>2Q18</strong></td><td colspan="1"><strong>4Q17</strong></td></tr><tr><td colspan="1"><strong>AMD Server Unit Share</strong></td><td colspan="1">24.1%</td><td colspan="1">23.6%</td><td colspan="1">23.1%</td><td colspan="1">23.3%</td><td colspan="1">18.6%</td><td colspan="1">18%</td><td colspan="1">17.6%</td><td colspan="1">17.5%</td><td colspan="1">13.9%</td><td colspan="1">11.6%</td><td colspan="1">10.7%</td><td colspan="1">10.2%</td><td colspan="1">9.5%</td><td colspan="1">8.9%</td><td colspan="1">7.1%</td><td colspan="1">6.6%</td><td colspan="1">5.8%</td><td colspan="1">5.1%</td><td colspan="1">4.5%</td><td colspan="1">4.3%</td><td colspan="1">3.4%</td><td colspan="1">2.9%</td><td colspan="1">3.2%</td><td colspan="1">1.6%</td><td colspan="1">1.4%</td><td colspan="1">0.8%</td></tr><tr><td colspan="1"><strong>Quarter over Quarter / Year over Year (pp)</strong></td><td colspan="1">+0.5 / + 5.6</td><td colspan="1">+0.5 / +5.6</td><td colspan="1">-0.2 / 5.5</td><td colspan="1">4.7 / 5.8</td><td colspan="1">0.6 / 4.7</td><td colspan="1">+0.4 / +6.3</td><td colspan="1">+0.1 / +6.9</td><td colspan="1">+3.6 / +7.3</td><td colspan="1">+2.3 / +4.4</td><td colspan="1">+0.9 / +2.7</td><td colspan="1">+0.5% / +3.6</td><td colspan="1">+0.7 / +3.6</td><td colspan="1">+0.6 / +3.7</td><td colspan="1">+1.8 / +3.8</td><td colspan="1">+0.5 / +2.6 </td><td colspan="1">+0.8 / +2.3</td><td colspan="1">+0.7 / +2.4</td><td colspan="1">+0.6 / 2.2</td><td colspan="1">+0.2 / +1.4</td><td colspan="1">+0.9 / +2.7</td><td colspan="1">+0.5 / +2.0</td><td colspan="1">-0.3 / -</td><td colspan="1">+1.6 / 2.4</td><td colspan="1">+0.2 / -</td><td colspan="1"><span>Row 2 - Cell 25 </span></td><td colspan="1"><span>Row 2 - Cell 26 </span></td></tr></tbody></table></div></div><p>AMD's biggest success for the second quarter probably lies in the server space. The company has managed to capture another 0.5% share away from Intel and now controls 24.1% of the data center CPU market with its EPYC CPUs. When compared to the second quarter of 2024, AMD's gain looks even more impressive, as the company grabbed 5.6% from Intel.&nbsp;</p><p>Although Intel is an indisputable leader when it comes to volumes, as it still controlled some 75.9% of datacenter CPU shipments in the second quarter, it is necessary to note that AMD seems to lead in high-end crème-de-la-crème machines that require the most powerful and expensive processors, as we can conclude from the financial results of the two companies in Q2 2024. While&nbsp;<a data-analytics-id="inline-link" href="https://www.tomshardware.com/pc-components/cpus/intel-loses-dollar16-billion-as-data-center-cpus-and-foundry-struggles" data-before-rewrite-localise="https://www.tomshardware.com/pc-components/cpus/intel-loses-dollar16-billion-as-data-center-cpus-and-foundry-struggles">Intel earned $3.0 billion selling 75.9% of data center CPUs</a>&nbsp;(in terms of units),&nbsp;<a data-analytics-id="inline-link" href="https://www.tomshardware.com/pc-components/cpus/amds-gaming-revenue-falls-59-but-company-still-posts-a-9-year-over-year-revenue-increase" data-before-rewrite-localise="https://www.tomshardware.com/pc-components/cpus/amds-gaming-revenue-falls-59-but-company-still-posts-a-9-year-over-year-revenue-increase">AMD earned $2.8 billion selling 24.1% of server CPUs</a>&nbsp;(in terms of units), which signals that the average selling price of an AMD EPYC is considerably higher than the ASP of an Intel Xeon.&nbsp;&nbsp;</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-PNonTt2eYea2mu8LE47VfS"><section><p>Get Tom's Hardware's best news and in-depth reviews, straight to your inbox.</p></section></div><p>Indeed, AMD's revenue share of the server market in Q2 2024 was 33.7%, as calculated by AMD itself based on data from Mercury Research. That is up 0.7% QoQ and 6.6% YoY, an impressive result. Then again, Intel has nothing to offer against AMD's 96-core and 128-core processors for now, so AMD controls the market for high-end servers.</p>
</div>
<div id="slice-container-authorBio-PNonTt2eYea2mu8LE47VfS"><p>Anton Shilov is a contributing writer at Tom’s Hardware. Over the past couple of decades, he has covered everything from CPUs and GPUs to supercomputers and from modern process technologies and latest fab tools to high-tech industry trends.</p></div>



<!-- Drop in a standard article here maybe? -->



</section>





<div id="slice-container-relatedArticles"><p><h5>Most Popular</h5></p></div>








</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[There Is No Antimemetics Division (2018) (393 pts)]]></title>
            <link>https://qntm.org/scp</link>
            <guid>41224225</guid>
            <pubDate>Mon, 12 Aug 2024 13:37:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://qntm.org/scp">https://qntm.org/scp</a>, See on <a href="https://news.ycombinator.com/item?id=41224225">Hacker News</a></p>
Couldn't get https://qntm.org/scp: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA["Does astrology work? We tested the ability of 152 astrologers" (130 pts)]]></title>
            <link>https://threadreaderapp.com/thread/1822663687145972105.html</link>
            <guid>41224173</guid>
            <pubDate>Mon, 12 Aug 2024 13:32:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://threadreaderapp.com/thread/1822663687145972105.html">https://threadreaderapp.com/thread/1822663687145972105.html</a>, See on <a href="https://news.ycombinator.com/item?id=41224173">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-controller="mentions">

<div>
<p><a href="https://threadreaderapp.com/user/SpencrGreenberg"><img src="https://pbs.twimg.com/profile_images/1524915487657844736/nyy8e3Yy_bigger.jpg" alt="Spencer Greenberg 🔍 Profile picture" data-controller="twitter-profile" data-twtrid="440506882" data-action="error->twitter-profile#error"></a>
</p>

</div> 
<div id="tweet_1" data-controller="thread" data-action="click->thread#showTweet" data-screenname="SpencrGreenberg" data-tweet="1822663687145972105" dir="auto"><p>
Does astrology work? We tested the ability of 152 astrologers to see if they could demonstrate genuine astrological skill.</p><p>

Here is how the study was designed and what we found (including a result that really surprised me):</p><p>

🧵 <span><a href="https://pbs.twimg.com/media/GUtlavoWgAE_SrX.jpg" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtlavoWgAE_SrX.jpg"></a></span>
<sup><i></i></sup></p></div>
<p>
Back in January, we ran a study trying to predict 37 facts about people's lives using their astrological sun signs (whether they are Pisces, Aries, etc.) While personality tests were able to predict these facts decently well, sun signs couldn't predict even a single 1 of them... <span><a href="https://pbs.twimg.com/media/GUtlewTX0AAXspJ.jpg" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtlewTX0AAXspJ.jpg"></a></span>
<sup><i></i></sup>
</p>
<div id="tweet_3" data-controller="thread" data-action="click->thread#showTweet" data-screenname="SpencrGreenberg" data-tweet="1822663692892188890" dir="auto"><p>
Some astrologers criticized us for this, saying that sun signs/zodiac signs are just tabloid astrology - real astrologers use a person's entire astrological chart. </p><p>

And they're right! </p><p>

Taking into account this criticism, we got the help of 6 astrologers to design a new study. <span><a href="https://pbs.twimg.com/media/GUtlkzKXgAAYnMu.jpg" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtlkzKXgAAYnMu.jpg"></a></span>
<sup><i></i></sup></p></div>
<p>
Here's how the study worked to test astrologers:<br>
• in each round, each astrologer gets LOTS of information about a real person (answers to 43 questions) along with 5 full astrological charts<br>
• they then predict which is the person's real natal chart (the other 4 are decoys) <span><a href="https://pbs.twimg.com/media/GUtlnpvXwAAxqj_.jpg" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtlnpvXwAAxqj_.jpg"></a></span>
<sup><i></i></sup>
</p>
<div id="tweet_5" data-controller="thread" data-action="click->thread#showTweet" data-screenname="SpencrGreenberg" data-tweet="1822663698378281055" dir="auto"><p>
Why this study design?</p><p>

One of the most fundamental claims of astrology is that a person's natal chart contains information about that person's life and character. </p><p>

If true, astrologers should be able to correctly choose a person's chart at a rate well above random guessing.
<sup><i></i></sup></p></div>
<p>
Each astrologer tries to match people to their correct chart 12 times. If they're guessing completely at random (e.g., they have no skill because astrology doesn't actually work), then they'll get about 20% of questions right, or about 2.4 questions right (on average) out of 12.
<sup><i></i></sup>
</p>
<p>
Neat aspects of this study design are that (1) if astrology doesn't work, it's impossible for astrologers to do better than random guessing at this task, while (2) for the study to come out in support of astrology, astrologers only need to do slightly better than random guessing
<sup><i></i></sup>
</p>
<p>
But this is only a fair test if astrologers believe they can do this task - so we limit our analyses only to participants with prior astrological experience who predicted they would do better than random guessing at the task. Our results are based on 152 such astrologers. <span><a href="https://pbs.twimg.com/media/GUtmg8mXgAAB0vD.png" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtmg8mXgAAB0vD.png"></a></span>
<sup><i></i></sup>
</p>
<p>
These astrologers were quite confident in their ability to match people to charts. Those with the least experience believed (after they had completed participation) that they'd gotten 5 out of 12 right, and those with the most experience thought they'd gotten 10 out of 12 right. <span><a href="https://pbs.twimg.com/media/GUtly4lWQAANEmC.jpg" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtly4lWQAANEmC.jpg"></a></span>
<sup><i></i></sup>
</p>
<p>
So, how did astrologers do overall? If they'd gotten even 23% of questions right (slightly above the 20% of random guessing), the study would have come out in favor of astrology. But astrologers as a group performed indistinguishable from random guessing, getting &lt; 21% right. <span><a href="https://pbs.twimg.com/media/GUtl1yEWUAAiTx-.png" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtl1yEWUAAiTx-.png"></a></span>
<sup><i></i></sup>
</p>
<div id="tweet_11" data-controller="thread" data-action="click->thread#showTweet" data-screenname="SpencrGreenberg" data-tweet="1822663714056626636" dir="auto"><p>
We can compare how frequently astrologers got different numbers of questions correct to how often we'd expect them to get different numbers correct if they were all guessing totally at random with no skill. </p><p>

The two distributions match very closely. <span><a href="https://pbs.twimg.com/media/GUtl3RpWUAAIHsz.jpg" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtl3RpWUAAIHsz.jpg"></a></span>
<sup><i></i></sup></p></div>
<div id="tweet_12" data-controller="thread" data-action="click->thread#showTweet" data-screenname="SpencrGreenberg" data-tweet="1822663716669739369" dir="auto"><p>
But perhaps the less experienced astrologers were just dragging down the performance of the group? </p><p>

We looked at how performance varied based on astrological experience. More experienced astrologers did not do better than less experienced ones despite being far more confident. <span><a href="https://pbs.twimg.com/media/GUtl6j7XMAAOHDo.jpg" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtl6j7XMAAOHDo.jpg"></a></span>
<sup><i></i></sup></p></div>
<p>
Even if most astrologers have no skill, there's another way astrology could prove itself. If even 1 of the 152 astrologers performed exceptionally well, that could provide meaningful evidence for astrology. We offered a $1000 prize for anyone getting at least 11 out of 12.
<sup><i></i></sup>
</p>
<p>
Unfortunately, despite more than half of the astrologers believing that they had gotten 6 or more questions right (after completing the task), in actual fact, not a single astrologer got more than 5 right. <span><a href="https://pbs.twimg.com/media/GUtmlDpW8AAaydi.png" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtmlDpW8AAaydi.png"></a></span>
<sup><i></i></sup>
</p>
<p>
Okay, so despite them believing they could do this task, astrologers seemed to have no ability to match people to their astrological charts. But, even if they aren't getting the answers right, do they at least agree with each other on what the right answers are?
<sup><i></i></sup>
</p>
<p>
Much to my surprise, astrologers had very low agreement with each other on the chart for each person. If astrologers picked charts at random, they would agree with each other 20% of the time. In our study, even the most experienced astrologers only agreed 28% of the time. <span><a href="https://pbs.twimg.com/media/GUtmqoJXIAAEizC.jpg" target="_blank"><img alt="Image" src="https://threadreaderapp.com/images/1px.png" data-src="https://pbs.twimg.com/media/GUtmqoJXIAAEizC.jpg"></a></span>
<sup><i></i></sup>
</p>
<div id="tweet_17" data-controller="thread" data-action="click->thread#showTweet" data-screenname="SpencrGreenberg" data-tweet="1822663729407791572" dir="auto"><p>
In conclusion, despite believing they could do it, the 152 astrologers seemed to lack any ability to match people to their astrological charts.</p><p>

You can learn a lot more about the study (including its limitations and how we sought to address them) here:</p><p>

<a data-preview="true" href="https://www.clearerthinking.org/post/can-astrologers-use-astrological-charts-to-understand-people-s-character-and-lives-our-new-study-pu">clearerthinking.org/post/can-astro…</a>
<sup><i></i></sup></p></div>
<div id="tweet_18" data-controller="thread" data-action="click->thread#showTweet" data-screenname="SpencrGreenberg" data-tweet="1822663731660341572" dir="auto"><p>
If you believe you have astrological skill, you can try the same questions that we used in the study (and find out the right answers at the end) in order to test yourself:</p><p>



We also open-sourced the data from the study if you want to analyze it.<a data-preview="true" href="https://programs.clearerthinking.org/astrology_challenge.html">programs.clearerthinking.org/astrology_chal…</a>
<sup><i></i></sup></p></div>
<div id="tweet_19" data-controller="thread" data-action="click->thread#showTweet" data-screenname="SpencrGreenberg" data-tweet="1822715786605281443" dir="auto"><p>
If you found this interesting, I'd appreciate a follow at @SpencrGreenberg !</p><p>

You may also enjoy my newsletter (One Helpful Idea) - where I send out one idea weekly (a 30 sec read) about psychology, philosophy, or society:</p><p>

<a data-preview="true" href="http://www.bit.ly/onehelpfulidea">bit.ly/onehelpfulidea</a>
<sup><i></i></sup></p></div>
<p>• • •</p>
<p><span>
Missing some Tweet in this thread? You can try to
<a id="force-click" href="#" data-category="refresh" data-action="1822663687145972105">force a refresh</a>
</span>
</p>
　
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Okay, I Like WezTerm (329 pts)]]></title>
            <link>https://alexplescan.com/posts/2024/08/10/wezterm/</link>
            <guid>41223934</guid>
            <pubDate>Mon, 12 Aug 2024 13:02:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://alexplescan.com/posts/2024/08/10/wezterm/">https://alexplescan.com/posts/2024/08/10/wezterm/</a>, See on <a href="https://news.ycombinator.com/item?id=41223934">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main">
        <article role="article">
  

  <div><p>A while back <a href="https://blog.lambo.land/">my friend</a> recommended that I try <a href="https://wezfurlong.org/wezterm/">WezTerm</a>. I’d been an iTerm 2 stalwart for the better part of a decade, but not to be <em>too</em> narrow-minded I conceded, started it up, and saw this:</p>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/01_default_look-720-7c9bad525.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/01_default_look-1440-7c9bad525.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/01_default_look-1520-7c9bad525.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/01_default_look-720-7c9bad525.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/01_default_look-1440-7c9bad525.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/01_default_look-1520-7c9bad525.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/01_default_look-800-dd3151c15.png" alt="screenshot of WezTerm's default look"></picture>

<p>Does the job, sure, but doesn’t feel quite right. Okay then, experiment over. Back to iTerm…</p>

<p>Fast forward a couple of months and I got the itch to try a new terminal again. I wanted to use one whose config was entirely text based so I could pop it in to my dotfiles and share it across my work and personal machines. A few terminals already do this, but whispers of WezTerm’s powerful API and Lua config got me particularly interested.</p>

<p>I tried it again with a bit more patience and I’m glad I did. My terminal is prettier than it’s ever been, more functional, and I can finally justify my mechanical keyboard purchase with all the keybindings I’ve configured.</p>

<p>This post is an introduction to configuring WezTerm based on the setup that I eventually landed on. I’d consider it relatively low-frills. Most of what I talk about here can already be found in WezTerm’s <a href="https://wezfurlong.org/wezterm/config/lua/general.html">docs</a>, but as they’ve got a large surface area, I’m hoping this post will be a useful jumping off point for WezTerm beginners.</p>

<p>We <em>won’t</em> be looking at some of WezTerm’s key features, like custom hyperlinks highlighting rules, searchable scrollback, quick copy mode, and image support (you can find <a href="https://wezfurlong.org/wezterm/features.html">more details here</a>).</p>

<p>The feature I find most exciting about WezTerm is the flexibility of its Lua config, so we’ll be focusing on that. This includes configuring appearance, keybindings, multiplexing, workspace navigation, status bar setup, and dynamic theming. By the end of it all, we’ll have a terminal that looks like this:</p>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/02_pretty_look-720-7c6c65470.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/02_pretty_look-1440-7c6c65470.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/02_pretty_look-1518-7c6c65470.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/02_pretty_look-720-7c6c65470.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/02_pretty_look-1440-7c6c65470.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/02_pretty_look-1518-7c6c65470.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/02_pretty_look-800-df2e5e6df.png" alt="screenshot of the WezTerm look we'll end up with at the end of this post"></picture>

<p>Subtly prettier than the default, and with some great features to boot.</p>

<p>I use macOS, so what follows is focused on ergonomics that make WezTerm great there. I haven’t tested my config on other systems, but I’m not doing anything too bespoke so things should be portable (WezTerm works pretty much everywhere).</p>

<p><strong>tl;dr</strong>? Here’s <a href="https://gist.github.com/alexpls/83d7af23426c8928402d6d79e72f9401">a gist</a> containing the config we’ll end up with.</p>

<h2 id="pre-flight-checks">Pre-flight checks</h2>

<p>Start by installing WezTerm. Instructions for this are on <a href="https://wezfurlong.org/wezterm/installation.html">WezTerm’s site</a>. If you’re on macOS and reading this you probably have Homebrew installed, so <code>$ brew install wezterm</code> will do the trick.</p>

<p>Now launch WezTerm, and you’re already winning.</p>

<h3 id="a-note-on-lua">A note on Lua</h3>

<p>My favourite WezTerm feature is its use of Lua for defining config. Unlike terminals where your settings are adjusted via the UI (iTerm 2), your WezTerm config lives in your dotfiles and is portable across all your machines.</p>

<p>And unlike other terminals where your configuration is written using a data serialization format like YAML or TOML (Alacritty, kitty), with Lua you can more easily achieve complex configs by leveraging dynamic scripts.</p>

<p>Granted, Lua is a programming language so it is trickier to learn than YAML or TOML, but it’s still remarkably simple. If you’ve used another dynamic programming language (e.g. Ruby, Python, JavaScript) - you should be able to read the Lua code in this post easily. For achieving more complex configs, I’d recommend diving deeper into the language. Its <a href="https://www.lua.org/start.html">Getting Started guide</a> is a good place to… get started.</p>

<h3 id="config-files-and-the-best-feedback-loop-in-town">Config files, and the best feedback loop in town</h3>

<p>WezTerm supports loading in its config from all the usual places on your system (<a href="https://wezfurlong.org/wezterm/config/files.html#configuration-files">docs</a>). For this guide we’re going to be creating our config in <code>$XDG_CONFIG_HOME/wezterm/wezterm.lua</code>. On most systems (including macOS) this resolves to <code>~/.config/wezterm/wezterm.lua</code>. Using a directory to store our config instead of dumping it in <code>~/.wezterm.lua</code> will let us keep our config logically grouped as we split some of it out into different files.</p>

<p>Create the <code>wezterm.lua</code> file on that path, and add this boilerplate to it:</p>

<div><pre><code><span>-- Import the wezterm module</span>
<span>local</span> <span>wezterm</span> <span>=</span> <span>require</span> <span>'wezterm'</span>
<span>-- Creates a config object which we will be adding our config to</span>
<span>local</span> <span>config</span> <span>=</span> <span>wezterm</span><span>.</span><span>config_builder</span><span>()</span>

<span>-- (This is where our config will go)</span>

<span>-- Returns our config to be evaluated. We must always do this at the bottom of this file</span>
<span>return</span> <span>config</span>
</code></pre></div>

<p>Save the file and all going well… nothing will happen. Well, at least nothing <em>appeared</em> to happen, but what WezTerm did behind the scenes is quite magical. It watched your config file, and when it changed it auto-reloaded instantly. This feature makes for a wonderfully tight feedback loop where you don’t need to restart your terminal to see the effects of your new config.</p>

<p>We can quickly test this auto-reload by adding some invalid syntax and seeing what happens. Replace the call to <code>wezterm.config_builder()</code> with <code>wezterm.config_builderZ()</code>, save, and you should immediately see a window pop-up with:</p>

<div><pre><code>runtime error: [string "/Users/alex/.config/wezterm/wezterm.lua"]:2: attempt
to call a nil value (field 'config_builderZ')
stack traceback:
        [string "/Users/alex/.config/wezterm/wezterm.lua"]:2: in main chunk
</code></pre></div>

<p>How’s that for a feedback loop? Fix the error and save the file again.</p>

<p>This time, have your config log something:</p>

<div><pre><code><span>wezterm</span><span>.</span><span>log_info</span><span>(</span><span>"hello world! my name is "</span> <span>..</span> <span>wezterm</span><span>.</span><span>hostname</span><span>())</span>
</code></pre></div>

<p>Save. Now… where did that log go? Press <code>CTRL + SHIFT + L</code> to bring up the debug overlay (<a href="https://wezfurlong.org/wezterm/troubleshooting.html#debug-overlay">docs</a>) and lo and behold, your beautiful log was waiting for you all along. Not only that but what you’re looking at is a full Lua REPL. Enter <code>1 + 1</code> and you’ll see the result. Enter <code>wezterm.home_dir</code> and you’ll see the result of accessing the <code>home_dir</code> entry on the <code>wezterm</code> module (<a href="https://wezfurlong.org/wezterm/config/lua/wezterm/home_dir.html">docs</a>).</p>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/03_debug_overlay-720-5d57e63cc.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/03_debug_overlay-1440-5d57e63cc.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/03_debug_overlay-1520-5d57e63cc.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/03_debug_overlay-720-5d57e63cc.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/03_debug_overlay-1440-5d57e63cc.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/03_debug_overlay-1520-5d57e63cc.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/03_debug_overlay-800-31f78c8d4.png" alt="screenshot of the WezTerm's debug overlay"></picture>

<p>The combination of hot reloading and the debug overlay makes experimenting with WezTerm configs extremely low friction and low consequence. The feedback loop is so tight now it’s more like a feedback lp.</p>

<h2 id="configuring-appearance">Configuring appearance</h2>

<p>Okay enough gushing - let’s cut to the chase and make this thing prettier. Add a few lines to the config to start customising the look of the terminal. We’ll start with a colour scheme (<a href="https://wezfurlong.org/wezterm/config/appearance.html">docs</a>):</p>

<div><pre><code><span>-- Pick a colour scheme. WezTerm ships with more than 1,000!</span>
<span>-- Find them here: https://wezfurlong.org/wezterm/colorschemes/index.html</span>
<span>config</span><span>.</span><span>color_scheme</span> <span>=</span> <span>'Tokyo Night'</span>
</code></pre></div>

<p>Save, and you should immediately see it update. Thanks Wez!</p>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/04_colour_scheme-720-5ed5e3bf1.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/04_colour_scheme-1440-5ed5e3bf1.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/04_colour_scheme-1520-5ed5e3bf1.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/04_colour_scheme-720-5ed5e3bf1.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/04_colour_scheme-1440-5ed5e3bf1.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/04_colour_scheme-1520-5ed5e3bf1.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/04_colour_scheme-800-b30942129.png" alt="screenshot of applying a colour scheme to WezTerm"></picture>

<p>(if the hot config reload doesn’t work for whatever reason, you can manually reload it by pressing <code>CMD + R</code>).</p>

<h3 id="many-colours-all-at-once">Many colours, all at once</h3>

<p>With over 1,000 colour choices to choose from, it’s tough to decide on your favourite. Why not outsource that work to your computer? Let’s explore the power of WezTerm’s dynamic config by randomly assigning a colour scheme for each new window you open:</p>

<div><pre><code><span>-- Creates a lua table containing the name of every color scheme WezTerm</span>
<span>-- ships with.</span>
<span>local</span> <span>scheme_names</span> <span>=</span> <span>{}</span>
<span>for</span> <span>name</span><span>,</span> <span>scheme</span> <span>in</span> <span>pairs</span><span>(</span><span>wezterm</span><span>.</span><span>color</span><span>.</span><span>get_builtin_schemes</span><span>())</span> <span>do</span>
  <span>table.insert</span><span>(</span><span>scheme_names</span><span>,</span> <span>name</span><span>)</span>
<span>end</span>

<span>-- When the config for a window is reloaded (i.e. when you save this file</span>
<span>-- or open a new window)...</span>
<span>wezterm</span><span>.</span><span>on</span><span>(</span><span>'window-config-reloaded'</span><span>,</span> <span>function</span><span>(</span><span>window</span><span>,</span> <span>pane</span><span>)</span>
  <span>-- Don't proceed if the config has already been overriden, otherwise</span>
  <span>-- we'll enter an infinite loop of neverending colour scheme changes.</span>
  <span>-- If that sounds like your kinda thing, then remove this line ;) - but</span>
  <span>-- don't say you haven't been warned.</span>
  <span>if</span> <span>window</span><span>:</span><span>get_config_overrides</span><span>()</span> <span>then</span> <span>return</span> <span>end</span>
  <span>-- Pick a random colour scheme name.</span>
  <span>local</span> <span>scheme</span> <span>=</span> <span>scheme_names</span><span>[</span><span>math.random</span><span>(</span><span>#</span><span>scheme_names</span><span>)]</span>
  <span>-- Assign it as an override for this window.</span>
  <span>window</span><span>:</span><span>set_config_overrides</span> <span>{</span> <span>color_scheme</span> <span>=</span> <span>scheme</span> <span>}</span>
  <span>-- And log it for good measure</span>
  <span>wezterm</span><span>.</span><span>log_info</span><span>(</span><span>"Your colour scheme is now: "</span> <span>..</span> <span>scheme</span><span>)</span>
<span>end</span><span>)</span>
</code></pre></div>

<p>Open up a few windows (<code>CMD + N</code> on macOS) and each one will have a different colour scheme. A cornucopia of terminals, each more surprising than the last. We, my friends, are truly innovating now.</p>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/05_cornucopia-720-bfc375d64.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/05_cornucopia-1440-bfc375d64.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/05_cornucopia-1520-bfc375d64.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/05_cornucopia-720-bfc375d64.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/05_cornucopia-1440-bfc375d64.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/05_cornucopia-1520-bfc375d64.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/05_cornucopia-800-06950f034.png" alt="screenshot of many WezTerm terminal windows, each with a distinctive colour scheme"></picture>

<p>But really, that was kind of a dumb idea meant to prove a point. Now that you’ve gotten a taste for dynamic config, you probably wanna remove those lines and stick to a colour scheme you <em>do</em> like.</p>

<p>(You may find that after you remove that code and add your static <code>color_scheme</code> config back in, it doesn’t hot reload. That’s because our script set an <em>override</em> on the config specific to each window. To clear your overrides, you can go to your debug terminal and type <code>window:set_config_overrides({})</code> - or you can just close and reopen your WezTerm window).</p>

<h3 id="respecting-the-systems-appearance">Respecting the system’s appearance</h3>

<p>Light themes, dark themes… why not both? Let’s have the terminal’s colour scheme automatically change when the operating system’s appearance changes. While we’re at it, we’ll learn how to split up WezTerm config into different modules.</p>

<p>Create a new file alongside <code>wezterm.lua</code> and call it <code>appearance.lua</code>. Add this to it:</p>

<div><pre><code><span>-- We almost always start by importing the wezterm module</span>
<span>local</span> <span>wezterm</span> <span>=</span> <span>require</span> <span>'wezterm'</span>
<span>-- Define a lua table to hold _our_ module's functions</span>
<span>local</span> <span>module</span> <span>=</span> <span>{}</span>

<span>-- Returns a bool based on whether the host operating system's</span>
<span>-- appearance is light or dark.</span>
<span>function</span> <span>module</span><span>.</span><span>is_dark</span><span>()</span>
  <span>-- wezterm.gui is not always available, depending on what</span>
  <span>-- environment wezterm is operating in. Just return true</span>
  <span>-- if it's not defined.</span>
  <span>if</span> <span>wezterm</span><span>.</span><span>gui</span> <span>then</span>
    <span>-- Some systems report appearance like "Dark High Contrast"</span>
    <span>-- so let's just look for the string "Dark" and if we find</span>
    <span>-- it assume appearance is dark.</span>
    <span>return</span> <span>wezterm</span><span>.</span><span>gui</span><span>.</span><span>get_appearance</span><span>():</span><span>find</span><span>(</span><span>"Dark"</span><span>)</span>
  <span>end</span>
  <span>return</span> <span>true</span>
<span>end</span>

<span>return</span> <span>module</span>
</code></pre></div>

<p>Back in <code>wezterm.lua</code>:</p>

<div><pre><code><span>-- Import our new module (put this near the top of your wezterm.lua)</span>
<span>local</span> <span>appearance</span> <span>=</span> <span>require</span> <span>'appearance'</span>

<span>-- Use it!</span>
<span>if</span> <span>appearance</span><span>.</span><span>is_dark</span><span>()</span> <span>then</span>
  <span>config</span><span>.</span><span>color_scheme</span> <span>=</span> <span>'Tokyo Night'</span>
<span>else</span>
  <span>config</span><span>.</span><span>color_scheme</span> <span>=</span> <span>'Tokyo Night Day'</span>
<span>end</span>
</code></pre></div>

<p>Toggle your system appearance between dark mode and light mode, and watch your theme change right before your eyes.</p>

<!-- hackily putting this into a p to have the margin to next heading look good. need to review
     stylesheet to fix this properly -->
<p><picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/06_light_v_dark-720-807cf36b1.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/06_light_v_dark-1440-807cf36b1.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/06_light_v_dark-1520-807cf36b1.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/06_light_v_dark-720-807cf36b1.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/06_light_v_dark-1440-807cf36b1.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/06_light_v_dark-1520-807cf36b1.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/06_light_v_dark-800-1e54dcccb.png" alt="screenshot of WezTerm in light and dark mode"></picture>
</p>

<h3 id="fonts">Fonts</h3>

<p>Next up let’s look at fonts. WezTerm ships with the lovely JetBrains Mono, and Nerd Font Symbols (<a href="https://wezfurlong.org/wezterm/config/fonts.html">docs</a>) so there’s nothing to complain about there. I do prefer Berkeley Mono at 13 points though, so:</p>

<div><pre><code><span>-- Choose your favourite font, make sure it's installed on your machine</span>
<span>config</span><span>.</span><span>font</span> <span>=</span> <span>wezterm</span><span>.</span><span>font</span><span>({</span> <span>family</span> <span>=</span> <span>'Berkeley Mono'</span> <span>})</span>
<span>-- And a font size that won't have you squinting</span>
<span>config</span><span>.</span><span>font_size</span> <span>=</span> <span>13</span>
</code></pre></div>

<p>There’s good support for ligatures and other fancy font settings if you’re into that (<a href="https://wezfurlong.org/wezterm/config/font-shaping.html">docs</a>), but I’m not so let’s move on.</p>

<h3 id="window-styling">Window styling</h3>

<p>Let’s style our terminal’s window. This controls the chrome that appears around it, and can vary between operating systems. On macOS, I like the below:</p>

<div><pre><code><span>-- Slightly transparent and blurred background</span>
<span>config</span><span>.</span><span>window_background_opacity</span> <span>=</span> <span>0</span><span>.</span><span>9</span>
<span>config</span><span>.</span><span>macos_window_background_blur</span> <span>=</span> <span>30</span>
<span>-- Removes the title bar, leaving only the tab bar. Keeps</span>
<span>-- the ability to resize by dragging the window's edges.</span>
<span>-- On macOS, 'RESIZE|INTEGRATED_BUTTONS' also looks nice if</span>
<span>-- you want to keep the window controls visible and integrate</span>
<span>-- them into the tab bar.</span>
<span>config</span><span>.</span><span>window_decorations</span> <span>=</span> <span>'RESIZE'</span>
<span>-- Sets the font for the window frame (tab bar)</span>
<span>config</span><span>.</span><span>window_frame</span> <span>=</span> <span>{</span>
  <span>-- Berkeley Mono for me again, though an idea could be to try a</span>
  <span>-- serif font here instead of monospace for a nicer look?</span>
  <span>font</span> <span>=</span> <span>wezterm</span><span>.</span><span>font</span><span>({</span> <span>family</span> <span>=</span> <span>'Berkeley Mono'</span><span>,</span> <span>weight</span> <span>=</span> <span>'Bold'</span> <span>}),</span>
  <span>font_size</span> <span>=</span> <span>11</span><span>,</span>
<span>}</span>
</code></pre></div>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/07_window_styling-720-87031f878.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/07_window_styling-1440-87031f878.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/07_window_styling-1520-87031f878.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/07_window_styling-720-87031f878.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/07_window_styling-1440-87031f878.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/07_window_styling-1520-87031f878.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/07_window_styling-800-4b12b9e39.png" alt="screenshot of WezTerm after we've styled its window"></picture>

<p>Now, let’s do something a little kitsch. See that empty space to the right of our terminal’s tab bar? Let’s fill it with a powerline looking status bar. We’ll add an <code>update-status</code> callback:</p>

<div><pre><code><span>wezterm</span><span>.</span><span>on</span><span>(</span><span>'update-status'</span><span>,</span> <span>function</span><span>(</span><span>window</span><span>)</span>
  <span>-- Grab the utf8 character for the "powerline" left facing</span>
  <span>-- solid arrow.</span>
  <span>local</span> <span>SOLID_LEFT_ARROW</span> <span>=</span> <span>utf8.char</span><span>(</span><span>0xe0b2</span><span>)</span>

  <span>-- Grab the current window's configuration, and from it the</span>
  <span>-- palette (this is the combination of your chosen colour scheme</span>
  <span>-- including any overrides).</span>
  <span>local</span> <span>color_scheme</span> <span>=</span> <span>window</span><span>:</span><span>effective_config</span><span>().</span><span>resolved_palette</span>
  <span>local</span> <span>bg</span> <span>=</span> <span>color_scheme</span><span>.</span><span>background</span>
  <span>local</span> <span>fg</span> <span>=</span> <span>color_scheme</span><span>.</span><span>foreground</span>

  <span>window</span><span>:</span><span>set_right_status</span><span>(</span><span>wezterm</span><span>.</span><span>format</span><span>({</span>
    <span>-- First, we draw the arrow...</span>
    <span>{</span> <span>Background</span> <span>=</span> <span>{</span> <span>Color</span> <span>=</span> <span>'none'</span> <span>}</span> <span>},</span>
    <span>{</span> <span>Foreground</span> <span>=</span> <span>{</span> <span>Color</span> <span>=</span> <span>bg</span> <span>}</span> <span>},</span>
    <span>{</span> <span>Text</span> <span>=</span> <span>SOLID_LEFT_ARROW</span> <span>},</span>
    <span>-- Then we draw our text</span>
    <span>{</span> <span>Background</span> <span>=</span> <span>{</span> <span>Color</span> <span>=</span> <span>bg</span> <span>}</span> <span>},</span>
    <span>{</span> <span>Foreground</span> <span>=</span> <span>{</span> <span>Color</span> <span>=</span> <span>fg</span> <span>}</span> <span>},</span>
    <span>{</span> <span>Text</span> <span>=</span> <span>' '</span> <span>..</span> <span>wezterm</span><span>.</span><span>hostname</span><span>()</span> <span>..</span> <span>' '</span> <span>},</span>
  <span>}))</span>
<span>end</span><span>)</span>
</code></pre></div>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/08_status_bar-720-716b8e09a.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/08_status_bar-1440-716b8e09a.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/08_status_bar-1520-716b8e09a.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/08_status_bar-720-716b8e09a.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/08_status_bar-1440-716b8e09a.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/08_status_bar-1520-716b8e09a.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/08_status_bar-800-7eee51cfe.png" alt="screenshot of WezTerm with a right status bar showing the system's hostname"></picture>

<p>A few interesting things happening here:</p>
<ol>
  <li>We just used WezTerm’s events API with <code>wezterm.on</code>. Events are things that happen to the terminal (e.g. window resize) that we can define callbacks for. The <code>update-status</code> event is emitted periodically when the terminal is ready to have its status updated. WezTerm manages this cleverly to ensure that only one such update can run at any given time, and if your code takes too long to execute, a timeout will be hit and your handler will be abandoned… protecting your terminal from bogging down.</li>
  <li>We’re grabbing the <code>effective_config()</code> of the window to get the “effective” configuration, which is the config with any overrides applied. From this we can get the <code>resolved_palette</code>, which is the currently active colour scheme. To see what this data looks like you can enter the debug overlay (<code>CTRL + SHIFT + L</code>) and execute <code>window:effective_config().resolved_palette</code>.</li>
  <li>We’re using the <code>wezterm.format</code> function (<a href="https://wezfurlong.org/wezterm/config/lua/wezterm/format.html">docs</a>) to style our string with colours. Other ways you could format text include setting font weight, underlining text, and more.</li>
  <li>Finally, the <code>wezterm.hostname()</code> function (<a href="https://wezfurlong.org/wezterm/config/lua/wezterm/hostname.html">docs</a>) gives us the hostname of the machine we’re running on. WezTerm ships with a bunch of useful functions for getting the state of your system, and also… we’re doing stuff in Lua - so you have full access to your file system, are able to make network requests, etc.</li>
</ol>

<p>Altogether this gives us a powerline…ish. It’s a bit sad with only one segment isn’t it? Don’t you worry, we’ll be adding more soon…</p>

<h2 id="keys">Keys</h2>

<p>Here’s the part where we justify our mechanical keyboard purchases. Let’s set up some key assignments. During this section we’ll look at WezTerm’s deep key handling capabilities and ability to take action based on your input.</p>

<p>By default, WezTerm defines some standard key assignments (<a href="https://wezfurlong.org/wezterm/config/default-keys.html">docs</a>). I leave them on because they’re very sensible, but if you wanna <em>really</em> wrest total control of your config, you can turn them off with <code>config.disable_default_key_bindings = true</code>.</p>

<p>Our first key assignment will be a humble start for us macOS users… you might be used to <code>Option + Left Arrow</code> and <code>Option + Right Arrow</code> jumping between words on your terminal. That’s the default in iTerm 2 and Terminal.app, but not in WezTerm. However, we can map it!</p>

<p>We do this by adding a <code>keys</code> table to our <code>config</code>:</p>

<div><pre><code><span>-- Table mapping keypresses to actions</span>
<span>config</span><span>.</span><span>keys</span> <span>=</span> <span>{</span>
  <span>-- Sends ESC + b and ESC + f sequence, which is used</span>
  <span>-- for telling your shell to jump back/forward.</span>
  <span>{</span>
    <span>-- When the left arrow is pressed</span>
    <span>key</span> <span>=</span> <span>'LeftArrow'</span><span>,</span>
    <span>-- With the "Option" key modifier held down</span>
    <span>mods</span> <span>=</span> <span>'OPT'</span><span>,</span>
    <span>-- Perform this action, in this case - sending ESC + B</span>
    <span>-- to the terminal</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>SendString</span> <span>'\x1bb'</span><span>,</span>
  <span>},</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>'RightArrow'</span><span>,</span>
    <span>mods</span> <span>=</span> <span>'OPT'</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>SendString</span> <span>'\x1bf'</span><span>,</span>
  <span>},</span>
<span>}</span>
</code></pre></div>

<p>By now you’ve probably figured out that you’re gonna be spending more time configuring WezTerm than doing actual work. There’s no shame in admitting this reality, so let’s encode it into our config. On macOS, the default shortcut for opening an application’s preferences is <code>CMD + ,</code> - let’s make it so when we press this, our favourite editor opens up the WezTerm config. I’m using neovim, but feel free to substitute with your own:</p>

<div><pre><code><span>config</span><span>.</span><span>keys</span> <span>=</span> <span>{</span>
  <span>-- ... add these new entries to your config.keys table</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>','</span><span>,</span>
    <span>mods</span> <span>=</span> <span>'SUPER'</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>SpawnCommandInNewTab</span> <span>{</span>
      <span>cwd</span> <span>=</span> <span>wezterm</span><span>.</span><span>home_dir</span><span>,</span>
      <span>args</span> <span>=</span> <span>{</span> <span>'nvim'</span><span>,</span> <span>wezterm</span><span>.</span><span>config_file</span> <span>},</span>
    <span>},</span>
  <span>},</span>
<span>}</span>
</code></pre></div>

<p>Try that out, but you may see an error along the lines of:</p>

<div><pre><code>Unable to spawn nvim because:
No viable candidates found in PATH "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
</code></pre></div>

<p>If that error showed up, it’s typically because the process that launched WezTerm didn’t include a <code>PATH</code> environment variable that led to your editor’s binary (e.g. on macOS, Finder is usually WezTerm’s parent). We can work around this by specifying the full path to your editor in the <code>SpawnCommandInNewTab</code> properties (<a href="https://wezfurlong.org/wezterm/config/lua/SpawnCommand.html">docs</a>), or by updating the default environment variables WezTerm spawns commands with. I prefer the latter, since it means that any other places in our config where we might spawn new commands will also inherit the same env vars:</p>

<div><pre><code><span>config</span><span>.</span><span>set_environment_variables</span> <span>=</span> <span>{</span>
  <span>PATH</span> <span>=</span> <span>'/opt/homebrew/bin:'</span> <span>..</span> <span>os.getenv</span><span>(</span><span>'PATH'</span><span>)</span>
<span>}</span>
</code></pre></div>

<p>Try that again, and it should work.</p>

<p>We really are just scratching the surface of all the commands available (<a href="https://wezfurlong.org/wezterm/config/lua/keyassignment/index.html">WezTerm supports a lot</a>). In the next section, we’ll be growing our key bindings further.</p>

<h2 id="multiplexing-terminals-levelling-up-key-assignments">Multiplexing terminals, levelling up key assignments</h2>

<p>Let’s move on to WezTerm’s multiplexing capabilities. If you make use of a multiplexer (i.e. tmux) then you may consider using WezTerm’s builtin capabilities instead. They’ll generally give you a more integrated experience, with individual scrollback buffers per pane, better mouse control, easier selection functionality, and generally faster performance.</p>

<p>Hit <code>CTRL + SHIFT + P</code> to bring up WezTerm’s command palette. (Yes, WezTerm has a command palette. Yes, it’s as customisable as everything else we’ve seen so far. No, we won’t dwell on it here). Type <code>split horizontally</code> until the “Shell: Split Horizontally” option is selected and hit <code>ENTER</code>. Ta-da! Your shell split horizontally! Do the same for <code>split vertically</code> and… you get the idea.</p>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/09_command_palette-720-5e12352ea.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/09_command_palette-1440-5e12352ea.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/09_command_palette-1520-5e12352ea.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/09_command_palette-720-5e12352ea.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/09_command_palette-1440-5e12352ea.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/09_command_palette-1520-5e12352ea.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/09_command_palette-800-74d2ff2ad.png" alt="screenshot of WezTerm's command palette"></picture>

<p>You may have noticed that the command palette displays the keyboard shortcut assigned to each action. The ones for splitting are quite a fingerful, e.g. <code>SHIFT + CTRL + OPTION + "</code>. I get why they’re this complicated - because they’re trying not to clash with any other shortcuts you may have on your system, but we can do a lot better - and WezTerm gives us the tools do so easily!</p>

<h3 id="splitting-panes-leader-key">Splitting panes, leader key</h3>

<p>A leader key (<a href="https://wezfurlong.org/wezterm/config/keys.html#leader-key">docs</a>) is a special key combination that you press first, followed by another key combination, to perform a specific action. It can help you create complex shortcuts without needing to push a lot of keys all at once.</p>

<p>Sounds like a perfect fit for splitting panes, right? We’ll bind our leader to <code>CTRL + A</code>, and in case you accidentally type the leader without following it up with another key, we’ll have it automatically deactivate after 1,000 milliseconds.</p>

<div><pre><code><span>-- If you're using emacs you probably wanna choose a different leader here,</span>
<span>-- since we're gonna be making it a bit harder to CTRL + A for jumping to </span>
<span>-- the start of a line</span>
<span>config</span><span>.</span><span>leader</span> <span>=</span> <span>{</span> <span>key</span> <span>=</span> <span>'a'</span><span>,</span> <span>mods</span> <span>=</span> <span>'CTRL'</span><span>,</span> <span>timeout_milliseconds</span> <span>=</span> <span>1000</span> <span>}</span>
</code></pre></div>

<p>Next let’s define some key assignments for splitting panes:</p>

<div><pre><code><span>config</span><span>.</span><span>keys</span> <span>=</span> <span>{</span>
  <span>-- ... add these new entries to your config.keys table</span>
  <span>{</span>
    <span>-- I'm used to tmux bindings, so am using the quotes (") key to</span>
    <span>-- split horizontally, and the percent (%) key to split vertically.</span>
    <span>key</span> <span>=</span> <span>'"'</span><span>,</span>
    <span>-- Note that instead of a key modifier mapped to a key on your keyboard</span>
    <span>-- like CTRL or ALT, we can use the LEADER modifier instead.</span>
    <span>-- This means that this binding will be invoked when you press the leader</span>
    <span>-- (CTRL + A), quickly followed by quotes (").</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>SplitHorizontal</span> <span>{</span> <span>domain</span> <span>=</span> <span>'CurrentPaneDomain'</span> <span>},</span>
  <span>},</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>'%'</span><span>,</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>SplitVertical</span> <span>{</span> <span>domain</span> <span>=</span> <span>'CurrentPaneDomain'</span> <span>},</span>
  <span>},</span>
<span>}</span>
</code></pre></div>

<p>Give it a go now. Press <code>CTRL + A</code>, quickly followed by <code>"</code>, and you’ll get a horizontal split. Use the other assignment and you’ll get a vertical split.</p>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/10_splits-720-79750a1ee.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/10_splits-1440-79750a1ee.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/10_splits-1520-79750a1ee.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/10_splits-720-79750a1ee.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/10_splits-1440-79750a1ee.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/10_splits-1520-79750a1ee.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/10_splits-800-8e0e76173.png" alt="screenshot of WezTerm's with split panes"></picture>

<p>Before we move on - you might be wondering what happens if you actually want to send the <code>CTRL + A</code> keypress <em>without</em> invoking the leader? <code>CTRL + A</code> is useful in and of its own as pressing it jumps to the start of a line on your shell (and on operating systems like Emacs).</p>

<p>Well there’s a solution for that. We can map <code>CTRL + A</code> quickly followed by <code>CTRL + A</code> to send a <code>CTRL + A</code> to our terminal. That’s a confusing sentence! It’ll be simpler to just look at the config:</p>

<div><pre><code><span>config</span><span>.</span><span>keys</span> <span>=</span> <span>{</span>
  <span>-- ... add these new entries to your config.keys table</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>'a'</span><span>,</span>
    <span>-- When we're in leader mode _and_ CTRL + A is pressed...</span>
    <span>mods</span> <span>=</span> <span>'LEADER|CTRL'</span><span>,</span>
    <span>-- Actually send CTRL + A key to the terminal</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>SendKey</span> <span>{</span> <span>key</span> <span>=</span> <span>'a'</span><span>,</span> <span>mods</span> <span>=</span> <span>'CTRL'</span> <span>},</span>
  <span>},</span>
<span>},</span>
</code></pre></div>

<h3 id="moving-around-panes">Moving around panes</h3>

<p>Okay with that done, let’s get back to multiplexing. Next up, navigating our splits. I like to use vim direction keybindings, but feel free to replace with arrow keys instead.</p>

<div><pre><code><span>config</span><span>.</span><span>keys</span> <span>=</span> <span>{</span>
  <span>-- ... add these new entries to your config.keys table</span>
  <span>{</span>
    <span>-- I like to use vim direction keybindings, but feel free to replace</span>
    <span>-- with directional arrows instead.</span>
    <span>key</span> <span>=</span> <span>'j'</span><span>,</span> <span>-- or DownArrow</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>ActivatePaneDirection</span><span>(</span><span>'Down'</span><span>),</span>
  <span>},</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>'k'</span><span>,</span> <span>-- or UpArrow</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>ActivatePaneDirection</span><span>(</span><span>'Up'</span><span>),</span>
  <span>},</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>'h'</span><span>,</span> <span>-- or LeftArrow</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>ActivatePaneDirection</span><span>(</span><span>'Left'</span><span>),</span>
  <span>},</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>'l'</span><span>,</span> <span>-- or RightArrow</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>ActivatePaneDirection</span><span>(</span><span>'Right'</span><span>),</span>
  <span>},</span>
<span>}</span>
</code></pre></div>

<p>Look at all that duplication - We’re using a dynamic language for our config here, we don’t need to stand for that! Let’s go on a little side quest and see if we can extract it to a function.</p>

<div><pre><code><span>local</span> <span>function</span> <span>move_pane</span><span>(</span><span>key</span><span>,</span> <span>direction</span><span>)</span>
  <span>return</span> <span>{</span>
    <span>key</span> <span>=</span> <span>key</span><span>,</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>ActivatePaneDirection</span><span>(</span><span>direction</span><span>),</span>
  <span>}</span>
<span>end</span>

<span>config</span><span>.</span><span>keys</span> <span>=</span> <span>{</span>
  <span>-- ... remove the previous move bindings, and replace with</span>
  <span>move_pane</span><span>(</span><span>'j'</span><span>,</span> <span>'Down'</span><span>),</span>
  <span>move_pane</span><span>(</span><span>'k'</span><span>,</span> <span>'Up'</span><span>),</span>
  <span>move_pane</span><span>(</span><span>'h'</span><span>,</span> <span>'Left'</span><span>),</span>
  <span>move_pane</span><span>(</span><span>'l'</span><span>,</span> <span>'Right'</span><span>),</span>
<span>}</span>
</code></pre></div>

<p>Ooh so much smaller, but it could be smaller still. I dare you to keep code golfing this down to 6 lines. Go on - I believe in you!</p>

<h3 id="resizing-panes-and-introducing-key-tables">Resizing panes, and introducing key tables</h3>

<p>You might’ve figured out that you can resize panes by dragging the edge of one with your mouse, but we’re developers here, not olympic athletes. What’re we expected to <em>move</em> our hands away from the safety of our keyboard and over to the mouse?! No! I won’t stand for it and neither should you!</p>

<p>It’d be really nice to use the same keys that we use for moving between the panes for resizing (h, j, k, l)… but they’ve already been mapped… we <em>could</em> add another key modifier that needs to be held down when we want to resize vs. move between the panes:</p>

<div><pre><code><span>config</span><span>.</span><span>keys</span> <span>=</span> <span>{</span>
  <span>-- ... add this new entry to your config.keys table</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>'h'</span><span>,</span>
    <span>mods</span> <span>=</span> <span>'LEADER|CTRL'</span><span>,</span>
    <span>-- "3" here is the amount of cells we wish to resize</span>
    <span>-- the terminal by</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>AdjustPaneSize</span> <span>{</span> <span>'Left'</span><span>,</span> <span>3</span> <span>},</span>
  <span>},</span>
<span>}</span>
</code></pre></div>

<p>But that’s no good really. We have to first push our leader <code>CTRL + A</code>, then push <code>CTRL + H</code>, and keep repeating that each time we wanna resize the pane to the left. Fingers getting sore. Send help. Oh, here comes WezTerm with the antidote: <a href="https://wezfurlong.org/wezterm/config/key-tables.html">key tables</a>.</p>

<p>When you activate a key table you’re entering a different mode with its own set of assignments for whatever you’re doing. This allows you to have multiple layers of assignments that are context specific.</p>

<p>It’s a similar kind of concept to the leader key, but unlike it, our key table will not automatically deactivate after an action is invoked, so it’ll be a good fit for resizing, where we want to keep pressing the same button over and over again until we’re happy with our pane’s new size.</p>

<p>With all that… this is easier <em>done</em> that said, so let’s check out the code:</p>

<div><pre><code><span>local</span> <span>function</span> <span>resize_pane</span><span>(</span><span>key</span><span>,</span> <span>direction</span><span>)</span>
  <span>return</span> <span>{</span>
    <span>key</span> <span>=</span> <span>key</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>AdjustPaneSize</span> <span>{</span> <span>direction</span><span>,</span> <span>3</span> <span>}</span>
  <span>}</span>
<span>end</span>

<span>config</span><span>.</span><span>keys</span> <span>=</span> <span>{</span>
  <span>-- ... remove the yucky keybinding from above and replace it with this</span>
  <span>{</span>
    <span>-- When we push LEADER + R...</span>
    <span>key</span> <span>=</span> <span>'r'</span><span>,</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>-- Activate the `resize_panes` keytable</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>ActivateKeyTable</span> <span>{</span>
      <span>name</span> <span>=</span> <span>'resize_panes'</span><span>,</span>
      <span>-- Ensures the keytable stays active after it handles its</span>
      <span>-- first keypress.</span>
      <span>one_shot</span> <span>=</span> <span>false</span><span>,</span>
      <span>-- Deactivate the keytable after a timeout.</span>
      <span>timeout_milliseconds</span> <span>=</span> <span>1000</span><span>,</span>
    <span>}</span>
  <span>},</span>
<span>}</span>

<span>config</span><span>.</span><span>key_tables</span> <span>=</span> <span>{</span>
  <span>resize_panes</span> <span>=</span> <span>{</span>
    <span>resize_pane</span><span>(</span><span>'j'</span><span>,</span> <span>'Down'</span><span>),</span>
    <span>resize_pane</span><span>(</span><span>'k'</span><span>,</span> <span>'Up'</span><span>),</span>
    <span>resize_pane</span><span>(</span><span>'h'</span><span>,</span> <span>'Left'</span><span>),</span>
    <span>resize_pane</span><span>(</span><span>'l'</span><span>,</span> <span>'Right'</span><span>),</span>
  <span>},</span>
<span>}</span>
</code></pre></div>

<p>Now you can push <code>CTRL + A</code> to activate leader, then <code>R</code> to activate the resizing layer… and movement keys to resize to your heart’s content. When 1,000 milliseconds have elapsed, you’ll automatically exit the resizing layer and be back to the default keytable.</p>

<p>WezTerm intensifies…</p>

<p>(While we’re on multiplexing, if you’re using neovim, I’d recommend checking out <a href="https://github.com/mrjones2014/smart-splits.nvim">smart-splits.nvim</a> - that’ll let you jump between your vim panes and your WezTerm ones).</p>

<h2 id="project-workspaces">Project workspaces</h2>

<p>Okay let’s graduate from WezTerm university with one final assignment… project workspaces.</p>

<p>I’m often working across a few different projects at a time, and need to be able to quickly switch between them. I want each project to maintain its own multiplexer instance with its own windows, panes, and tabs. In tmux you might achieve this with different sessions. In WezTerm we’ll do it with <a href="https://wezfurlong.org/wezterm/recipes/workspaces.html">workspaces</a>.</p>

<h3 id="creating-and-switching-between-workspaces">Creating and switching between workspaces</h3>

<p>Create a new file in your config directory and call it <code>projects.lua</code>. We’ll use this to provide some project switching functions to our main config file.</p>

<div><pre><code><span>local</span> <span>wezterm</span> <span>=</span> <span>require</span> <span>'wezterm'</span>
<span>local</span> <span>module</span> <span>=</span> <span>{}</span>

<span>local</span> <span>function</span> <span>project_dirs</span><span>()</span>
  <span>return</span> <span>{</span>
    <span>'~/Projects/mailgrip'</span><span>,</span>
    <span>'~/Projects/alexplescan.com'</span><span>,</span>
    <span>'~/Projects/wezterm_love_letters'</span><span>,</span>
    <span>-- ... keep going, list all your projects</span>
    <span>-- (or don't if you value your time. we'll improve on this soon)</span>
  <span>}</span>
<span>end</span>

<span>function</span> <span>module</span><span>.</span><span>choose_project</span><span>()</span>
  <span>local</span> <span>choices</span> <span>=</span> <span>{}</span>
  <span>for</span> <span>_</span><span>,</span> <span>value</span> <span>in</span> <span>ipairs</span><span>(</span><span>project_dirs</span><span>())</span> <span>do</span>
    <span>table.insert</span><span>(</span><span>choices</span><span>,</span> <span>{</span> <span>label</span> <span>=</span> <span>value</span> <span>})</span>
  <span>end</span>

  <span>-- The InputSelector action presents a modal UI for choosing between a set of options</span>
  <span>-- within WezTerm.</span>
  <span>return</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>InputSelector</span> <span>{</span>
    <span>title</span> <span>=</span> <span>'Projects'</span><span>,</span>
    <span>-- The options we wish to choose from</span>
    <span>choices</span> <span>=</span> <span>choices</span><span>,</span>
    <span>-- Yes, we wanna fuzzy search (so typing "alex" will filter down to</span>
    <span>-- "~/Projects/alexplescan.com")</span>
    <span>fuzzy</span> <span>=</span> <span>true</span><span>,</span>
    <span>-- The action we want to perform. Note that this doesn't have to be a</span>
    <span>-- static definition as we've done before, but can be a callback that</span>
    <span>-- evaluates any arbitrary code.</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action_callback</span><span>(</span><span>function</span><span>(</span><span>child_window</span><span>,</span> <span>child_pane</span><span>,</span> <span>id</span><span>,</span> <span>label</span><span>)</span>
      <span>-- As a placeholder, we'll log the name of what you picked</span>
      <span>wezterm</span><span>.</span><span>log_info</span><span>(</span><span>"you chose "</span> <span>..</span> <span>label</span><span>)</span>
    <span>end</span><span>),</span>
  <span>}</span>
<span>end</span>

<span>return</span> <span>module</span>
</code></pre></div>

<p>… and in your <code>wezterm.lua</code>:</p>

<div><pre><code><span>local</span> <span>projects</span> <span>=</span> <span>require</span> <span>'projects'</span>

<span>config</span><span>.</span><span>keys</span> <span>=</span> <span>{</span>
  <span>-- ... add these new entries to your config.keys table</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>'p'</span><span>,</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>-- Present in to our project picker</span>
    <span>action</span> <span>=</span> <span>projects</span><span>.</span><span>choose_project</span><span>(),</span>
  <span>},</span>
  <span>{</span>
    <span>key</span> <span>=</span> <span>'f'</span><span>,</span>
    <span>mods</span> <span>=</span> <span>'LEADER'</span><span>,</span>
    <span>-- Present a list of existing workspaces</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>ShowLauncherArgs</span> <span>{</span> <span>flags</span> <span>=</span> <span>'FUZZY|WORKSPACES'</span> <span>},</span>
  <span>},</span>
<span>}</span>
</code></pre></div>

<p>Lots going on here, take your time to read it and the comments. And give it a go! Push <code>LEADER + P</code>, and you’ll see the project input selector come up. Pick a project by highlighting one and pushing <code>ENTER</code>, or push <code>CTRL + C</code> to close the picker. Once you’ve picked a project you’ll see its directory logged to your debug overlay (<code>CTRL + SHIFT + L</code>).</p>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/11_workspace_switcher-720-835177f65.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/11_workspace_switcher-1440-835177f65.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/11_workspace_switcher-1520-835177f65.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/11_workspace_switcher-720-835177f65.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/11_workspace_switcher-1440-835177f65.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/11_workspace_switcher-1520-835177f65.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/11_workspace_switcher-800-86fb3a529.png" alt="screenshot of WezTerm's with the workspace switcher we've configured"></picture>

<p>Still a couple of issues though… it’s really annoying to type out all your projects by hand in that file, and, uh, what was the other issue? Oh yeah! When you pick a project nothing happens. Okay, let’s fix these. Back in <code>projects.lua</code>, we’ll start by having the list of projects automatically populate.</p>

<div><pre><code><span>-- The directory that contains all your projects.</span>
<span>local</span> <span>project_dir</span> <span>=</span> <span>wezterm</span><span>.</span><span>home_dir</span> <span>..</span> <span>"/Projects"</span>

<span>local</span> <span>function</span> <span>project_dirs</span><span>()</span>
  <span>-- Start with your home directory as a project, 'cause you might want</span>
  <span>-- to jump straight to it sometimes.</span>
  <span>local</span> <span>projects</span> <span>=</span> <span>{</span> <span>wezterm</span><span>.</span><span>home_dir</span> <span>}</span>

  <span>-- WezTerm comes with a glob function! Let's use it to get a lua table</span>
  <span>-- containing all subdirectories of your project folder.</span>
  <span>for</span> <span>_</span><span>,</span> <span>dir</span> <span>in</span> <span>ipairs</span><span>(</span><span>wezterm</span><span>.</span><span>glob</span><span>(</span><span>project_dir</span> <span>..</span> <span>'/*'</span><span>))</span> <span>do</span>
    <span>-- ... and add them to the projects table.</span>
    <span>table.insert</span><span>(</span><span>projects</span><span>,</span> <span>dir</span><span>)</span>
  <span>end</span>

  <span>return</span> <span>projects</span>
<span>end</span>
</code></pre></div>

<p>(This all assumes that you like to keep your projects grouped together in a folder, if not… well you’ve got Lua at your fingertips to implement whatever you want!)</p>

<p>Now launch the project picker, and what do you see? All those projects staring back at thee.</p>

<p>One thing left to do, let’s add the functionality that opens your project in a new WezTerm workspace. Still in <code>projects.lua</code> let’s change up <code>choose_project</code>:</p>

<div><pre><code><span>function</span> <span>module</span><span>.</span><span>choose_project</span><span>()</span>
  <span>local</span> <span>choices</span> <span>=</span> <span>{}</span>
  <span>for</span> <span>_</span><span>,</span> <span>value</span> <span>in</span> <span>ipairs</span><span>(</span><span>project_dirs</span><span>())</span> <span>do</span>
    <span>table.insert</span><span>(</span><span>choices</span><span>,</span> <span>{</span> <span>label</span> <span>=</span> <span>value</span> <span>})</span>
  <span>end</span>

  <span>return</span> <span>wezterm</span><span>.</span><span>action</span><span>.</span><span>InputSelector</span> <span>{</span>
    <span>title</span> <span>=</span> <span>"Projects"</span><span>,</span>
    <span>choices</span> <span>=</span> <span>choices</span><span>,</span>
    <span>fuzzy</span> <span>=</span> <span>true</span><span>,</span>
    <span>action</span> <span>=</span> <span>wezterm</span><span>.</span><span>action_callback</span><span>(</span><span>function</span><span>(</span><span>child_window</span><span>,</span> <span>child_pane</span><span>,</span> <span>id</span><span>,</span> <span>label</span><span>)</span>
      <span>-- "label" may be empty if nothing was selected. Don't bother doing anything</span>
      <span>-- when that happens.</span>
      <span>if</span> <span>not</span> <span>label</span> <span>then</span> <span>return</span> <span>end</span>

      <span>-- The SwitchToWorkspace action will switch us to a workspace if it already exists,</span>
      <span>-- otherwise it will create it for us.</span>
      <span>child_window</span><span>:</span><span>perform_action</span><span>(</span><span>wezterm</span><span>.</span><span>action</span><span>.</span><span>SwitchToWorkspace</span> <span>{</span>
        <span>-- We'll give our new workspace a nice name, like the last path segment</span>
        <span>-- of the directory we're opening up.</span>
        <span>name</span> <span>=</span> <span>label</span><span>:</span><span>match</span><span>(</span><span>"([^/]+)$"</span><span>),</span>
        <span>-- Here's the meat. We'll spawn a new terminal with the current working</span>
        <span>-- directory set to the directory that was picked.</span>
        <span>spawn</span> <span>=</span> <span>{</span> <span>cwd</span> <span>=</span> <span>label</span> <span>},</span>
      <span>},</span> <span>child_pane</span><span>)</span>
    <span>end</span><span>),</span>
  <span>}</span>
<span>end</span>
</code></pre></div>

<p>Try that out, select a new project, and you’ll see a workspace get created for it. Switch back to your default workspace (we bound so <code>LEADER, CTRL + F</code>  to show you a list of active workspaces) and you’ll see everything is right where you left it.</p>

<h3 id="bonus-improving-the-powerline-and-more-colour-stuff">Bonus: improving the powerline, and more colour stuff</h3>

<p>Let’s add a couple of polishing touches to this workflow and then I promise we’ll be done…</p>

<p>Remember that sad powerline we set up earlier? Let’s make it happier by adding another segment to it which contains the name of the current workspace. In true powerline fashion, each subsequent segment on the powerline will display in a different colour. We’ll explore some of WezTerm’s colour maths support and do this all dynamically based on our theme. Back in <code>wezterm.lua</code>:</p>

<div><pre><code><span>-- Replace the old wezterm.on('update-status', ... function with this:</span>

<span>local</span> <span>function</span> <span>segments_for_right_status</span><span>(</span><span>window</span><span>)</span>
  <span>return</span> <span>{</span>
    <span>window</span><span>:</span><span>active_workspace</span><span>(),</span>
    <span>wezterm</span><span>.</span><span>strftime</span><span>(</span><span>'%a %b %-d %H:%M'</span><span>),</span>
    <span>wezterm</span><span>.</span><span>hostname</span><span>(),</span>
  <span>}</span>
<span>end</span>

<span>wezterm</span><span>.</span><span>on</span><span>(</span><span>'update-status'</span><span>,</span> <span>function</span><span>(</span><span>window</span><span>,</span> <span>_</span><span>)</span>
  <span>local</span> <span>SOLID_LEFT_ARROW</span> <span>=</span> <span>utf8.char</span><span>(</span><span>0xe0b2</span><span>)</span>
  <span>local</span> <span>segments</span> <span>=</span> <span>segments_for_right_status</span><span>(</span><span>window</span><span>)</span>

  <span>local</span> <span>color_scheme</span> <span>=</span> <span>window</span><span>:</span><span>effective_config</span><span>().</span><span>resolved_palette</span>
  <span>-- Note the use of wezterm.color.parse here, this returns</span>
  <span>-- a Color object, which comes with functionality for lightening</span>
  <span>-- or darkening the colour (amongst other things).</span>
  <span>local</span> <span>bg</span> <span>=</span> <span>wezterm</span><span>.</span><span>color</span><span>.</span><span>parse</span><span>(</span><span>color_scheme</span><span>.</span><span>background</span><span>)</span>
  <span>local</span> <span>fg</span> <span>=</span> <span>color_scheme</span><span>.</span><span>foreground</span>

  <span>-- Each powerline segment is going to be coloured progressively</span>
  <span>-- darker/lighter depending on whether we're on a dark/light colour</span>
  <span>-- scheme. Let's establish the "from" and "to" bounds of our gradient.</span>
  <span>local</span> <span>gradient_to</span><span>,</span> <span>gradient_from</span> <span>=</span> <span>bg</span>
  <span>if</span> <span>appearance</span><span>.</span><span>is_dark</span><span>()</span> <span>then</span>
    <span>gradient_from</span> <span>=</span> <span>gradient_to</span><span>:</span><span>lighten</span><span>(</span><span>0</span><span>.</span><span>2</span><span>)</span>
  <span>else</span>
    <span>gradient_from</span> <span>=</span> <span>gradient_to</span><span>:</span><span>darken</span><span>(</span><span>0</span><span>.</span><span>2</span><span>)</span>
  <span>end</span>

  <span>-- Yes, WezTerm supports creating gradients, because why not?! Although</span>
  <span>-- they'd usually be used for setting high fidelity gradients on your terminal's</span>
  <span>-- background, we'll use them here to give us a sample of the powerline segment</span>
  <span>-- colours we need.</span>
  <span>local</span> <span>gradient</span> <span>=</span> <span>wezterm</span><span>.</span><span>color</span><span>.</span><span>gradient</span><span>(</span>
    <span>{</span>
      <span>orientation</span> <span>=</span> <span>'Horizontal'</span><span>,</span>
      <span>colors</span> <span>=</span> <span>{</span> <span>gradient_from</span><span>,</span> <span>gradient_to</span> <span>},</span>
    <span>},</span>
    <span>#</span><span>segments</span> <span>-- only gives us as many colours as we have segments.</span>
  <span>)</span>

  <span>-- We'll build up the elements to send to wezterm.format in this table.</span>
  <span>local</span> <span>elements</span> <span>=</span> <span>{}</span>

  <span>for</span> <span>i</span><span>,</span> <span>seg</span> <span>in</span> <span>ipairs</span><span>(</span><span>segments</span><span>)</span> <span>do</span>
    <span>local</span> <span>is_first</span> <span>=</span> <span>i</span> <span>==</span> <span>1</span>

    <span>if</span> <span>is_first</span> <span>then</span>
      <span>table.insert</span><span>(</span><span>elements</span><span>,</span> <span>{</span> <span>Background</span> <span>=</span> <span>{</span> <span>Color</span> <span>=</span> <span>'none'</span> <span>}</span> <span>})</span>
    <span>end</span>
    <span>table.insert</span><span>(</span><span>elements</span><span>,</span> <span>{</span> <span>Foreground</span> <span>=</span> <span>{</span> <span>Color</span> <span>=</span> <span>gradient</span><span>[</span><span>i</span><span>]</span> <span>}</span> <span>})</span>
    <span>table.insert</span><span>(</span><span>elements</span><span>,</span> <span>{</span> <span>Text</span> <span>=</span> <span>SOLID_LEFT_ARROW</span> <span>})</span>

    <span>table.insert</span><span>(</span><span>elements</span><span>,</span> <span>{</span> <span>Foreground</span> <span>=</span> <span>{</span> <span>Color</span> <span>=</span> <span>fg</span> <span>}</span> <span>})</span>
    <span>table.insert</span><span>(</span><span>elements</span><span>,</span> <span>{</span> <span>Background</span> <span>=</span> <span>{</span> <span>Color</span> <span>=</span> <span>gradient</span><span>[</span><span>i</span><span>]</span> <span>}</span> <span>})</span>
    <span>table.insert</span><span>(</span><span>elements</span><span>,</span> <span>{</span> <span>Text</span> <span>=</span> <span>' '</span> <span>..</span> <span>seg</span> <span>..</span> <span>' '</span> <span>})</span>
  <span>end</span>

  <span>window</span><span>:</span><span>set_right_status</span><span>(</span><span>wezterm</span><span>.</span><span>format</span><span>(</span><span>elements</span><span>))</span>
<span>end</span><span>)</span>
</code></pre></div>

<picture><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/12_status_bar_enhanced-720-d88a78af8.webp 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/12_status_bar_enhanced-1440-d88a78af8.webp 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/12_status_bar_enhanced-1520-d88a78af8.webp 2.11x" type="image/webp"><source srcset="https://alexplescan.com/generated/assets/posts/wezterm/12_status_bar_enhanced-720-d88a78af8.jpg 1.0x, https://alexplescan.com/generated/assets/posts/wezterm/12_status_bar_enhanced-1440-d88a78af8.jpg 2.0x, https://alexplescan.com/generated/assets/posts/wezterm/12_status_bar_enhanced-1520-d88a78af8.jpg 2.11x" type="image/jpeg"><img src="https://alexplescan.com/generated/assets/posts/wezterm/12_status_bar_enhanced-800-df09b5aaf.png" alt="screenshot of WezTerm with an enhanced status line, showing multiple segments in different colours"></picture>

<p>WezTerm delivers yet again. This updated callback supports arbitrary numbers of segments for its powerline. We’ve specified 3 but you could add way more. All this without needing to manually configure what colour we want on each segment, but rather have WezTerm do it for us by creating a gradient based on the currently active theme. Some highlights:</p>

<ul>
  <li>We use <code>wezterm.color.parse</code> to convert a string containing a hex colour code into a <code>Color</code> object (<a href="https://wezfurlong.org/wezterm/config/lua/color/index.html">docs</a>) - this lets us perform more advanced operations on the color.</li>
  <li>The colour scheme’s background colour is still what we want to use as the value that our gradient draws <em>to</em>, but to figure out where the gradient should start, we use either <code>color:darken</code> (<a href="https://wezfurlong.org/wezterm/config/lua/color/darken.html">docs</a>) or <code>color:lighten</code> to create a new colour.</li>
  <li>The gradient itself is made with <code>wezterm.color.gradient</code> (<a href="https://wezfurlong.org/wezterm/config/lua/wezterm.color/gradient.html">docs</a>), which returns a table containing a evenly spaced colours between our <code>gradient_to</code> and <code>gradient_from</code>.</li>
  <li>We then iterate over our powerline segments to create the items required for <code>wezterm.format</code>.</li>
</ul>

<h2 id="where-to-from-here">Where to from here?</h2>

<p>There’s a <a href="https://wezfurlong.org/wezterm/features.html">lot more that WezTerm does</a> and that <a href="https://wezfurlong.org/wezterm/config/lua/general.html">you can do with WezTerm</a>. By now you’ll have a good understanding of WezTerm config fundamentals, but I encourage you to keep exploring!</p>

<p>If you’ve followed this guide step by step, I’d recommend pruning the config down to things that you’ll actually use, rewriting it in your own style, then start sprinkling in your own stuff. Take ownership of this thing! Make your own beautiful WezTerm snowflake!</p>

<p>When you want some inspiration for what you could do next, browse through the <a href="https://wezfurlong.org/wezterm/config/lua/general.html">WezTerm API docs</a> to see what’s possible.</p>

<p>And if you find that you too really like WezTerm, please consider <a href="https://wezfurlong.org/sponsor/">supporting Wez</a> for his great open-source work.</p>
</div>

  
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Go is my hammer, and everything is a nail (109 pts)]]></title>
            <link>https://www.maragu.dev/blog/go-is-my-hammer-and-everything-is-a-nail</link>
            <guid>41223902</guid>
            <pubDate>Mon, 12 Aug 2024 12:59:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.maragu.dev/blog/go-is-my-hammer-and-everything-is-a-nail">https://www.maragu.dev/blog/go-is-my-hammer-and-everything-is-a-nail</a>, See on <a href="https://news.ycombinator.com/item?id=41223902">Hacker News</a></p>
<div id="readability-page-1" class="page"><div hx-boost="true"><p>You know that old saying:</p>

<blockquote>
Always choose the right tool for the job.<cite>Shakespeare, or someone like that</cite>
</blockquote>

<p>Well, I’ve turned that one on its head. I’m using one tool for all possible tasks, for what I believe are good reasons. But I’m getting ahead of myself.</p>

<p>Let’s start somewhere else. I’m Markus, a solo developer and digital product builder. It’s just me. I have no team or subcontractors, and I intend to keep it that way. I’ve pursued a lifestyle that includes having my own business, because it gives me the most flexibility of how and when I want to work. To structure my work around the rest of my life, so to speak. I want to collaborate, but not manage other people.</p>

<p>As a solo developer, I believe it’s a good idea to choose your tools wisely. Even more so than when in a team setting, having a tech stack that is too complex can bury you in unnecessary busy-work; you’ll end up building infrastructure and nursing your layers of technology all day, instead of, you know, talking to customers and building what they want. Delivering value to someone, to anyone, to the world.</p>

<p>In 2016, I started building stuff in Go. I originally didn’t like it, but I started “getting it”, and it stuck with me. So much that I eventually turned my back on other programming languages. I was writing a lot of Python and Javascript at the time, but I dropped that. I ended up <a href="https://www.golang.dk/">making a course for Go developers</a>, as well as sort-of kind-of <a href="https://www.gomponents.com/">reinventing React for backend Go HTML generation</a>. I now build basically all my software in Go, from tiny one-off tools, to web services, CLIs, and everything in between.</p>

<p>But why? When the common wisdom is to always take the problem at hand, analyze it, and then choose the tools, why would I ignore that and go: “nah, I’ll just use Go again”?</p>

<p>Well, I present to you: REASONS.</p>

<h2>Reason 1: Go can do basically anything</h2>

<p>Yeah, Go can do basically anything. Actually, I’ll widen that statement to <em>all popular programming languages can do basically anything</em>. Yes, most are known for one thing or another, and they definitely have their strengths and weaknesses. But I think at the end of the day, it basically comes down to opinion and taste.</p>

<p>I like Go. It’s simple enough, easy to read, consistent, and a lot of other good things that align well with how I want to build software. There are certainly also things I don’t like, but I don’t care enough to let it bother me. But you probably know all of those things already.</p>

<p>Go is good for the obvious things: building CLIs, cloud infrastructure, HTTP servers, network stuff.</p>

<p>But people also <a href="https://ebitengine.org/">build games for the Nintendo Switch in Go</a>. They build <a href="https://wails.io/">GUI</a> <a href="https://fyne.io/">apps</a> using Go. I’ve even tried a <a href="https://github.com/crnbaker/gostringsynth">string synthesizer in the terminal</a> built in Go, which I thought was beyond cool. You get the point: it’s often possible to do what you want, regardless of the tool you use.</p>

<h2>Reason 2: Less context switching</h2>

<p>Do you know the feeling when you start writing syntax for one programming language, realize that, nope, you’re supposed to be using a different one, and try to switch your brain into another mode while feeling slightly dumb? I know I used to.</p>

<p>But I don’t anymore, because I only use one programming language! Ha! Joke’s on past me.</p>

<p>But it goes much deeper than that. A programming language isn’t just a bunch of syntax to build stuff. It’s <em>also</em> a compiler, an IDE, a toolchain. A community to engage with. A never-ending news machine to keep up with. An ecosystem of libraries, tools, programs, idioms, styles. It can be quite a mouthful on its own, so I found it overwhelming to try to keep up with several. Is it possible? Sure. Will it be more superficial? Also yep.</p>

<p>Which brings me to my third reason.</p>

<h2>Reason 3: Depth of knowledge</h2>

<p>When I don’t have to keep up with everything around several languages, and build everything in just one language, I can go deep. Learn stuff I wouldn’t have gone into otherwise. Investigate nooks and crannies I wouldn’t have given a thought. Learn esoteric language features, history, read obscure blog posts on details I wouldn’t necessarily have bothered with.</p>

<p>That doesn’t mean I ignore the rest of the world, obviously. You and I both know there’s always more to learn in this field. Cutting away programming languages doesn’t make software development less complex in a multitude of other aspects, but it does so in one very concrete setting, and one which I spend a lot of time on.</p>

<h2>So, what, I’m going to limit my career options?</h2>

<p>The world is laaaarge. The number of projects are basically infinite. Even if I carve out a tiny subset of infinite, that’s still infinite. Good enough for me and my career ambitions.</p>

<p>And I’ll be <em>really</em> good at at least this one thing. I’m way more productive in Go than when I was just starting out (obviously, otherwise I should probably have switched to plumbing), and I hope to stay on that path, and maybe even increase the slope. EXPONENTIALLY. Okay, less will do as well.</p>

<p>Anyhoo, these are my thoughts. Bring on the nails, and I’ll beat them with a bloody, determined gopher who is screaming “IS THAT ALL YOU GOT?!?”.</p>

<p>(Also see the <a href="https://news.ycombinator.com/item?id=41223902">Hacker News</a> and <a href="https://www.reddit.com/r/golang/comments/1eqah5h/go_is_my_hammer_and_everything_is_a_nail/">Reddit</a> discussions about this post.)</p><div><p><img src="https://www.maragu.dev/images/markus.jpg" alt="A picture of me, Markus." title="A picture of me, Markus."></p><p>I’m Markus, a professional software consultant and developer. 🤓✨ You can reach me at <a href="mailto:markus@maragu.dk">markus@maragu.dk</a>, or check social links in the page footer.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US Government wants to make it easier for you to click the 'unsubscribe' button (405 pts)]]></title>
            <link>https://apnews.com/article/consumer-protection-ftc-fcc-biden-250f6eece6e2665535019128e8fa38da</link>
            <guid>41223774</guid>
            <pubDate>Mon, 12 Aug 2024 12:46:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://apnews.com/article/consumer-protection-ftc-fcc-biden-250f6eece6e2665535019128e8fa38da">https://apnews.com/article/consumer-protection-ftc-fcc-biden-250f6eece6e2665535019128e8fa38da</a>, See on <a href="https://news.ycombinator.com/item?id=41223774">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                        <p>WASHINGTON (AP) — In the name of consumer protection, a slew of U.S. federal agencies are working to make it easier for Americans to click the unsubscribe button for unwanted memberships and recurring payment services. </p><p>A broad new government initiative, dubbed “Time Is Money,” includes a rollout of new regulations and the promise of more for industries spanning from healthcare and fitness memberships to media subscriptions.</p><p>“The administration is cracking down on all the ways that companies, through paperwork, hold times and general aggravation waste people’s money and waste people’s time and really hold onto their money,” Neera Tanden, White House domestic policy adviser, told reporters Friday in advance of the announcement.</p><p>“Essentially in all of these practices, companies are delaying services to you or really trying to make it so difficult for you to cancel the service that they get to hold onto your money for longer and longer,” Tanden said. “These seemingly small inconveniences don’t happen by accident — they have huge financial consequences.”</p>
    

<p>Efforts being rolled out Monday include a new Federal Communications Commission inquiry into whether to impose requirements on communications companies that would make it as easy to cancel a subscription or service as it was to sign up for one. </p>

<p>The Federal Trade Commission in <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://www.ftc.gov/news-events/news/press-releases/2023/03/federal-trade-commission-proposes-rule-provision-making-it-easier-consumers-click-cancel-recurring" target="_blank" rel="noopener">March 2023 initiated</a></span> “click to cancel” rulemaking requiring companies to let customers end subscriptions as easily as they started them. </p>
    
<p>Also Monday, the heads of the departments of Labor and of Health and Human Services are asking health insurance companies and group health plans to make improvements to customer interactions with their health coverage, and “in the coming months will identify additional opportunities to improve consumers’ interactions with the health care system,” according to a White House summary.</p>
    

<p>The government already has launched several initiatives aimed at improving the consumer experience.</p><p>In October, the FTC announced a proposed rule to <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://apnews.com/article/biden-junk-fees-ftc-hidden-bogus-80e5c17dc7607b99aa92c6c816b96e52">ban hidden and bogus junk fees</a></span>, which can mask the total cost of concert tickets, hotel rooms and utility bills.</p><p>In April, the Transportation Department finalized rules that would require airlines to automatically issue cash refunds for things like delayed flights and to better disclose <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://apnews.com/article/american-airlines-points-raising-bag-fees-1530a7ba48a0c6685ce2ef7da58a983a">fees for baggage</a></span> or reservation cancellations.</p><p>The department also has taken actions against individual companies accused of misleading customers. </p><p>In June, the Justice Department, referred by the FTC, <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://www.ftc.gov/system/files/ftc_gov/pdf/040-UnredactedComplaint.pdf" target="_blank" rel="noopener">filed a lawsuit against software maker Adobe</a></span> and two of its executives, Maninder Sawhney and David Wadhwani, for allegedly pushing consumers toward the firm’s “annual paid monthly” subscription without properly disclosing that canceling the plan in the first year could cost hundreds of dollars. </p><p>Dana Rao, Adobe’s general counsel, said in an emailed statement that Adobe disagrees with the lawsuit’s characterization of its business and “we will refute the FTC’s claims in court.”</p><p> “The early termination fees equate to minimal impact to our revenue, accounting for less than half a percent of our total revenue globally, but is an important part of our ability to offer customers a choice in plans that balance cost and commitment,” Rao said.</p>
    

<p>Some business advocates are not a fan of the government’s overall efforts to crack down on junk fees. </p><p>Sean Heather, senior vice president of international regulatory affairs and antitrust at the U.S. Chamber of Commerce, said the initiative is “nothing more than an attempt to micromanage businesses’ pricing structures, often undermining businesses’ ability to give consumers options at different price points.”</p>
                                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Interstellar movie is implemented with Einstein's equations in 40k lines C++ (126 pts)]]></title>
            <link>https://twitter.com/bitfield/status/1020632237493112833</link>
            <guid>41222862</guid>
            <pubDate>Mon, 12 Aug 2024 10:04:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/bitfield/status/1020632237493112833">https://twitter.com/bitfield/status/1020632237493112833</a>, See on <a href="https://news.ycombinator.com/item?id=41222862">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Blitz: A lightweight, modular, extensible web renderer (390 pts)]]></title>
            <link>https://github.com/DioxusLabs/blitz</link>
            <guid>41221252</guid>
            <pubDate>Mon, 12 Aug 2024 04:52:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/DioxusLabs/blitz">https://github.com/DioxusLabs/blitz</a>, See on <a href="https://news.ycombinator.com/item?id=41221252">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Blitz: A lightweight, modular, extensible web renderer</h2><a id="user-content-blitz-a-lightweight-modular-extensible-web-renderer" aria-label="Permalink: Blitz: A lightweight, modular, extensible web renderer" href="#blitz-a-lightweight-modular-extensible-web-renderer"></a></p>
<p dir="auto">Blitz is a "native" HTML/CSS renderer built to support the "Dioxus Native" project. It is effectively a lightweight webview except that the JavaScript engine is replaced with a native Rust API which allows Rust reactivity / state management libraries like Dioxus to interface with it directly.</p>
<p dir="auto">Talk to us in: the #native channel in the <a href="https://discord.gg/v4mwT25E" rel="nofollow">Dioxus Discord</a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">It currenly has two frontends:</h4><a id="user-content-it-currenly-has-two-frontends" aria-label="Permalink: It currenly has two frontends:" href="#it-currenly-has-two-frontends"></a></p>
<ul dir="auto">
<li>An HTML/markdown frontend that can render an HTML string. This is useful for previewing HTML and/or markdown files but currently lacks interactivity.</li>
<li>A Dioxus frontend that can render a Dioxus VirtualDom. This has full interactivity support via Dioxus's event handling.</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">Blitz builds upon:</h4><a id="user-content-blitz-builds-upon" aria-label="Permalink: Blitz builds upon:" href="#blitz-builds-upon"></a></p>
<ul dir="auto">
<li><a href="https://github.com/servo/stylo">Stylo</a> (Firefox's parallel browser-grade CSS engine) for CSS resolution</li>
<li><a href="https://github.com/linebender/vello">Vello</a> + <a href="https://github.com/gfx-rs/wgpu">WGPU</a> for rendering</li>
<li><a href="https://github.com/DioxusLabs/taffy">Taffy</a> for box-level layout</li>
<li><a href="https://github.com/linebender/parley">Parley</a> for text/inline-level layout</li>
<li><a href="https://github.com/AccessKit/accesskit">AccessKit</a> for accessibility</li>
<li><a href="https://github.com/rust-windowing/winit">Winit</a> for windowing and input handling</li>
</ul>
<blockquote>
<p dir="auto">Note: This repo contains a new version of Blitz which uses Stylo. The source code for the old version is still available on the <a href="https://github.com/DioxusLabs/blitz/tree/legacy">legacy</a> branch but is not under active development.</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Screenshots</h2><a id="user-content-screenshots" aria-label="Permalink: Screenshots" href="#screenshots"></a></p>
<p dir="auto">The Dioxus renderer:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/DioxusLabs/blitz/blob/main/examples/screenshot.png"><img src="https://github.com/DioxusLabs/blitz/raw/main/examples/screenshot.png" alt="screenshot"></a></p>
<p dir="auto">The HTML renderer (rendering google.com):</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/DioxusLabs/blitz/blob/main/examples/google.png"><img src="https://github.com/DioxusLabs/blitz/raw/main/examples/google.png" alt="screenshot"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Trying it out</h2><a id="user-content-trying-it-out" aria-label="Permalink: Trying it out" href="#trying-it-out"></a></p>
<ol dir="auto">
<li>Clone this repo</li>
<li>Run an example:
<ul dir="auto">
<li><code>cargo run --example google</code></li>
<li><code>cargo run --example url https://myurl.com</code></li>
<li>Other example available</li>
<li>Add <code>--release</code> for better runtime performance</li>
</ul>
</li>
<li>Press <code>Ctrl/Cmd + +</code> / <code>Ctrl/Cmd + -</code> to change the scaling, press F1 to show layout rectangles</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Goals</h2><a id="user-content-goals" aria-label="Permalink: Goals" href="#goals"></a></p>
<p dir="auto">Blitz is designed to render HTML and CSS - we <em>don't</em> want to support the entirety of browser features (or at least we want to make all such "extra" features opt-in). In our opinion, the browser is bloated for the basic usecase of rendering HTML/CSS.</p>
<p dir="auto">We do intend to support:</p>
<ul dir="auto">
<li>Modern HTML layout (flexbox, grid, table, block, inline, absolute/fixed, etc).</li>
<li>Advanced CSS (complex selectors, media queries, css variables)</li>
<li>HTML Form controls</li>
<li>Accessibility using AccessKit</li>
<li>Extensibility via custom widgets</li>
</ul>
<p dir="auto">Notably we <em>don't</em> provide features like webrtc, websockets, bluetooth, localstorage, etc. In a native app, much of this functionality can be fulfilled using regular Rust crates and doesn't need to be coupled with the renderer.</p>
<p dir="auto">We don't yet have Blitz bindings for other languages (JavaScript, Python, etc) but would accept contributions along those lines.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Architecture</h2><a id="user-content-architecture" aria-label="Permalink: Architecture" href="#architecture"></a></p>
<p dir="auto">Blitz is split into several pieces:</p>
<ul dir="auto">
<li><code>blitz-dom</code>: The core DOM abstraction that includes style resolution and layout but not drawing/painting. Combines the best of Stylo and Taffy that allows you to build extendable dom-like structures.</li>
<li><code>blitz</code>: Adds a Vello/WGPU based renderer to <code>blitz-dom</code></li>
<li><code>dioxus-blitz</code>: A dioxus integration layer for blitz. Render your Dioxus app using Blitz. Currently <code>dioxus-blitz</code> also contains the HTML renderer but this will likely be split out into it's own package in future.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Status</h2><a id="user-content-status" aria-label="Permalink: Status" href="#status"></a></p>
<p dir="auto">Blitz is currently <strong>experimental</strong>. We are actively working on bringing into a usable state but we would not yet recommend building apps with it.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">TODO</h3><a id="user-content-todo" aria-label="Permalink: TODO" href="#todo"></a></p>
<ul>
<li> Core DOM tree abstraction</li>
<li> Parse styles using html5ever</li>
<li> Compute styles for html5ever document</li>
<li> Compute layout with Taffy</li>
<li> Render using WGPU</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Rendering</h3><a id="user-content-rendering" aria-label="Permalink: Rendering" href="#rendering"></a></p>
<ul>
<li> Render to window</li>
<li> Render to image</li>
<li> Gradients</li>
<li> Border/Outline</li>
<li> Raster images (png, jpeg, etc)</li>
<li> Zoom</li>
<li> SVG
<ul>
<li> External SVGs (basic support)</li>
<li> Inline SVGs</li>
</ul>
</li>
<li> Shadows</li>
<li> Animations/Transitions</li>
<li> Standard form controls (Checkbox/Dropdown/slider/etc)</li>
<li> Custom widgets</li>
<li> Shadow elements</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Layout</h3><a id="user-content-layout" aria-label="Permalink: Layout" href="#layout"></a></p>
<ul>
<li> Inline (partial support - implementation still immature)</li>
<li> Block</li>
<li> Flexbox</li>
<li> Grid
<ul>
<li> Named grid lines</li>
<li> Subgrid</li>
</ul>
</li>
<li> Table</li>
<li> Z-index</li>
<li> Additional CSS features
<ul>
<li> <code>box-sizing: content-box</code></li>
<li> <code>calc()</code></li>
<li> <code>position: static</code></li>
<li> <code>direction: rtl</code></li>
<li> <code>transform</code></li>
</ul>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Text</h3><a id="user-content-text" aria-label="Permalink: Text" href="#text"></a></p>
<ul>
<li> Font loading
<ul>
<li> System font loading</li>
<li> Web font loading</li>
</ul>
</li>
<li> Text
<ul>
<li> Shaping / Bidi</li>
<li> Layout / line breaking</li>
<li> Font size / line height</li>
<li> Text color</li>
<li> Bold / Italic</li>
<li> Underline / Strikethrough</li>
</ul>
</li>
<li> Text selection</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Input</h3><a id="user-content-input" aria-label="Permalink: Input" href="#input"></a></p>
<ul>
<li> Scrolling
<ul>
<li> The root view</li>
<li> Any <code>overflow: scroll</code> element</li>
</ul>
</li>
<li> Hover detection</li>
<li> Click handling</li>
<li> Text input</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Performance</h3><a id="user-content-performance" aria-label="Permalink: Performance" href="#performance"></a></p>
<ul>
<li> Hot reloading</li>
<li> Scrolling without re-resolving style and layout</li>
<li> Style caching</li>
<li> Layout caching</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Other</h3><a id="user-content-other" aria-label="Permalink: Other" href="#other"></a></p>
<ul>
<li> Multiwindow</li>
<li> Accessibility tree</li>
<li> Focus</li>
<li> Devtools</li>
<li> Hooks for context menu</li>
<li> use_wgpu_context() to grab an element as an arbitrary render surface</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is dual licensed under the Apache 2.0 and MIT licenses</p>
<p dir="auto">Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in stylo-dioxus by you, shall be licensed as MIT, without any additional terms or conditions.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Comma.ai: Refactoring for Growth (128 pts)]]></title>
            <link>https://blog.comma.ai/refactoring-for-growth/</link>
            <guid>41220284</guid>
            <pubDate>Mon, 12 Aug 2024 00:43:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.comma.ai/refactoring-for-growth/">https://blog.comma.ai/refactoring-for-growth/</a>, See on <a href="https://news.ycombinator.com/item?id=41220284">Hacker News</a></p>
<div id="readability-page-1" class="page"><section itemprop="text"><p>In 2020, we announced the <a href="https://blog.comma.ai/the-unconjoined-triangle-of-success/">unconjoined triangle of success</a> made up of the research, openpilot, and operations teams. Over the last four years, those teams shipped <a href="https://blog.comma.ai/comma-three-press-release">two</a> <a href="https://blog.comma.ai/comma3X">products</a>, a <a href="https://commabody.com/" target="_blank" rel="noopener noreferrer">robotics platform</a>, 3 major and 30 minor openpilot <a href="https://github.com/commaai/openpilot/blob/master/RELEASES.md" target="_blank" rel="noopener noreferrer">releases</a>, the first end-to-end <a href="https://blog.comma.ai/end-to-end-lateral-planning/">driving</a> <a href="https://blog.comma.ai/090release/#experimental-mode">agent</a>, and a drive to <a href="https://blog.comma.ai/taco-bell">Taco Bell</a> without a disengagement.</p>
<p>As the company has grown, it’s time to refactor things a bit. Remember that our mission is to:</p>
<blockquote><p><strong>Solve self-driving cars while delivering shippable intermediaries.</strong></p></blockquote>
<p>comma is fundamentally a consumer electronics company that ships the latest AI to you as a product. Consumer electronics is a good business to be in; we’re building products that we’d like to buy, and it allows us to <a href="https://github.com/commaai/" target="_blank" rel="noopener noreferrer">build in the open</a>.</p>
<h2 id="the-new-triangle">The New Triangle</h2>
<figure><picture> <source srcset="https://blog.comma.ai/img/refactoring_for_growth/teams.webp" type="image/webp"> <img src="https://blog.comma.ai/img/refactoring_for_growth/teams.png" alt=""> </picture><figcaption></figcaption></figure><p>The <strong>operations team</strong> is in charge of company infrastructure. This includes money, people, logistics, the comma fleet, and keeping everything running.</p>
<p>The <strong>product team</strong> designs and manufactures the product. This includes the hardware, low level <a href="https://github.com/commaai/openpilot/tree/master/system" target="_blank" rel="noopener noreferrer">software</a> needed to run the autonomous agent software, as well the <a href="https://comma.ai/connect" target="_blank" rel="noopener noreferrer">app</a>.</p>
<p>The <a href="https://blog.comma.ai/autonomy"><strong>autonomy team</strong></a> is responsible for making the <a href="https://github.com/commaai/openpilot/tree/master/selfdrive" target="_blank" rel="noopener noreferrer">autonomous agent software</a>, and all of the infrastructure needed for that.</p>
<p>The operations and product teams work together to ship you the comma 3X, and the autonomy and product teams ship openpilot to run on your comma 3X.</p>
<h2 id="lets-take-a-look-at-where-were-at-now">Let’s take a look at where we’re at now</h2>
<p>comma is a 21 person company made up of mostly engineers, and we build and ship all our hardware and software from our San Diego, CA <a href="https://youtu.be/PFjssb7r_uU" target="_blank" rel="noopener noreferrer">office</a>.</p>
<p>We’re shipping <a href="https://blog.comma.ai/097release">openpilot 0.9.7</a>, with 54% of miles and 29% of time engaged.</p>
<figure><picture> <source srcset="https://blog.comma.ai/img/refactoring_for_growth/engagement.webp" type="image/webp"> <img src="https://blog.comma.ai/img/refactoring_for_growth/engagement.png" alt=""> </picture><figcaption></figcaption></figure><p>We’re shipping <a href="https://x.com/comma_ai/status/1794107930016416001" target="_blank" rel="noopener noreferrer">comma 3Xs</a> to a growing fleet, where every comma 3X sold makes us money.</p>
<figure><picture> <source srcset="https://blog.comma.ai/img/refactoring_for_growth/daily_drivers.webp" type="image/webp"> <img src="https://blog.comma.ai/img/refactoring_for_growth/daily_drivers.jpeg" alt=""> </picture><figcaption></figcaption></figure><p>This is our <a href="https://www.mycronic.com/product-areas/pcb-assembly/products/smt/jet-printing/my700jp/" target="_blank" rel="noopener noreferrer">MY700</a> jetting a comma 3X panel. We’re scaling up the factory to output 10x more devices.</p>
<figure> <video loop="true" autoplay="autoplay" muted="" playsinline=""> <source src="https://blog.comma.ai/img/comma3X/jetprinting.mp4"> </video><figcaption></figcaption></figure><h2 id="whats-next">What’s next?</h2>
<p>It should be clear now that widespread deployment of driverless cars is still years away. Meanwhile, openpilot’s partial autonomy improves driving on 10 million compatible cars currently on the road, with more sold every day.</p>
<p>With user growth on a product that’s profitable and machine learning simulation <a href="https://youtu.be/dfIZGEXvXis" target="_blank" rel="noopener noreferrer">working</a>, the path forward is clear:</p>
<ol>
<li>Drive down disengagements with our new simulator</li>
<li>Improve the product until it looks like something you can buy at Best Buy and drive out of the parking lot with</li>
<li>Scale up production until we have a lights-out factory</li>
</ol>
<h2 id="join-us">Join Us</h2>
<p>We’re growing the team by ~5 people to help solve autonomy, improve the product, and scale up production. You’ll hear more about each team in the following posts from the head of each team.</p>
<p>Check out our new <a href="https://comma.ai/leaderboard" target="_blank" rel="noopener noreferrer">leaderboard</a> and <a href="https://comma.ai/jobs" target="_blank" rel="noopener noreferrer">jobs page</a>. It’s got some fun programming challenges that also happen to be hiring challenges.</p>
<h3 id="faq">FAQ</h3>
<p><em>&gt; If the software is open source, how will comma make money?</em></p>
<p>We sell a <a href="https://comma.ai/shop" target="_blank" rel="noopener noreferrer">hardware product</a> and offer a (very optional) <a href="https://comma.ai/connect" target="_blank" rel="noopener noreferrer">software subscription</a>.</p>
<p>And we’re already making money. We last raised money <a href="https://www.crunchbase.com/organization/comma" target="_blank" rel="noopener noreferrer">two years ago</a>, and since then, have been profitable from sales in our <a href="https://comma.ai/shop" target="_blank" rel="noopener noreferrer">shop</a>.</p>
<p><em>&gt; Why open source the software at all?</em></p>
<p>We like working on open source projects, and it leaves no room for <a href="https://x.com/comma_ai/status/1793018640968863829" target="_blank" rel="noopener noreferrer">rent seeking</a>.</p>
<p><em>&gt; If the software is open source, won’t there be clones?</em></p>
<p>Like <a href="https://github.com/commaai/openpilot/forks" target="_blank" rel="noopener noreferrer">forks</a> of openpilot, clones grow the ecosystem. The openpilot software and hardware ecosystem has grown well beyond us, and we’ll continue to do fine as long as we offer a good product for a fair price.</p>
<p><em>&gt; What happens when cars ship with openpilot-quality ADAS?</em></p>
<p>Have the auto manufacturers even shipped you a CarPlay-level infotainment system? How about OTA updates?</p>
<p><em>&gt; Why not partner with the car companies?</em></p>
<p>The quality of the product is currently the bottleneck for getting openpilot in more cars. And it’s not clear that <a href="https://x.com/alvinfoo/status/1812713741785440381" target="_blank" rel="noopener noreferrer">they</a> can give us better interfaces to the car than <a href="https://github.com/commaai/opendbc" target="_blank" rel="noopener noreferrer">opendbc</a>.</p>
<p>Cars will eventually <a href="https://blog.comma.ai/working-with-comma-a-guide-for-car-companies/">ship with openpilot</a>, but it remains to be seen how this plays out. Maybe a Tier 1 will do it for the existing manufacturers, or perhaps some <a href="https://aptera.us/openpilot-release/" target="_blank" rel="noopener noreferrer">new manufacturer</a> will be the first.</p></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[China's total wind and solar capacity outstrips coal (168 pts)]]></title>
            <link>https://renewablesnow.com/news/chinas-total-wind-and-solar-capacity-outstrips-coal-rystad-says-865106/</link>
            <guid>41220098</guid>
            <pubDate>Sun, 11 Aug 2024 23:54:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://renewablesnow.com/news/chinas-total-wind-and-solar-capacity-outstrips-coal-rystad-says-865106/">https://renewablesnow.com/news/chinas-total-wind-and-solar-capacity-outstrips-coal-rystad-says-865106/</a>, See on <a href="https://news.ycombinator.com/item?id=41220098">Hacker News</a></p>
Couldn't get https://renewablesnow.com/news/chinas-total-wind-and-solar-capacity-outstrips-coal-rystad-says-865106/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[How to avoid losing items? Holding pens (356 pts)]]></title>
            <link>https://blog.alexwendland.com/2024-07-07-holding-pens/</link>
            <guid>41220059</guid>
            <pubDate>Sun, 11 Aug 2024 23:47:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.alexwendland.com/2024-07-07-holding-pens/">https://blog.alexwendland.com/2024-07-07-holding-pens/</a>, See on <a href="https://news.ycombinator.com/item?id=41220059">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><blockquote>
<p>I put it in a safe spot.</p>
<p>-- a phrase my mom would always say when she’d lost something.</p>
</blockquote>
<p><strong>Why do we lose things inside our homes?</strong></p>
<p>When we are interrupted or need to hastily respond to a new demand, we often make quick decisions about where to place physical items. We always place them in locations which make sense given our current state of mind, but often that state of mind is fleeting, and so we forget where we put our things.</p>
<p>The ideal solution is to have assigned place(s) for each item, and only ever store items in their assigned places. For example, my keys are only ever allowed in my back right pocket, the keychain hook in my backpack, or the bottom-left cubby of my nightstand.</p>
<p>However, we regularly run into 1.) items which are too transient/unimportant to have memorable assigned place, 2.) instances where we don’t have time to take the item to it’s assigned place (e.g., because it’s in another room).</p>
<p><strong>Solution</strong></p>
<p><em>Holding Pens</em>: designated areas in every room which exist to hold anchorless items.</p>
<p>A holding pen:</p>
<ol>
<li>Is a tray roughly 12" x 18", so it can fit most items you need to put down.</li>
<li>Has a small lip on the sides, so items don’t fall out.</li>
<li>Is located in every room, so the activation energy to use a holding pen is approximately the same as placing the item down randomly.</li>
<li>Is always used to store items, unless an item is being placed in its permanent location.</li>
<li>Is cleaned out regularly—ideally daily, at most weekly—, so that it doesn’t become a storage area.</li>
</ol>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Generating Simpson's Paradox with Z3 (167 pts)]]></title>
            <link>https://kevinlynagh.com/z3-simpsons-paradox/</link>
            <guid>41219562</guid>
            <pubDate>Sun, 11 Aug 2024 21:53:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kevinlynagh.com/z3-simpsons-paradox/">https://kevinlynagh.com/z3-simpsons-paradox/</a>, See on <a href="https://news.ycombinator.com/item?id=41219562">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><a href="https://kevinlynagh.com/">← Back to Kevin's homepage</a><span>Published: 2024 August 11</span></p><p>I’ve been reading Pearl’s <a href="https://amzn.to/3M0TwON">Causal Inference in Statistics</a>, and one of the exercises poses this problem:</p>

<blockquote>
<p>Baseball batter A has a better batting average than his teammate B. However, someone notices that B has a better batting average than A against both right-handed and left-handed pitchers. How can this happen?</p>
</blockquote>

<p>The <a href="https://github.com/Z3Prover/z3">Z3 Theorem Prover</a> is a great lil’ tool for solving these sorts of problems.
The following generates an example of this situation, which is more commonly known as <a href="https://en.wikipedia.org/wiki/Simpson%27s_paradox">Simpson’s Paradox</a>.</p>
<div><pre><span></span>;; Player A's hits and misses against left-handed pitchers
(declare-const A_L_hits Int)
(declare-const A_L_misses Int)

;; and right-handed ones.
(declare-const A_R_hits Int)
(declare-const A_R_misses Int)

;; ditto for player B
(declare-const B_L_hits Int)
(declare-const B_L_misses Int)
(declare-const B_R_hits Int)
(declare-const B_R_misses Int)

;; All hits and miss counts must be positive
(assert (&lt; 0 A_L_hits))
(assert (&lt; 0 A_L_misses))
(assert (&lt; 0 A_R_hits))
(assert (&lt; 0 A_R_misses))
(assert (&lt; 0 B_L_hits))
(assert (&lt; 0 B_L_misses))
(assert (&lt; 0 B_R_hits))
(assert (&lt; 0 B_R_misses))

;; overall batting averages
(define-const A Real
  (/ (+ A_L_hits A_R_hits)
     (+ A_L_hits A_R_hits A_L_misses A_R_misses)))
(define-const B Real
  (/ (+ B_L_hits B_R_hits)
     (+ B_L_hits B_R_hits B_L_misses B_R_misses)))

;; batting averages against left and right-handed pitches
(define-const A_L Real
  (/ A_L_hits (+ A_L_hits A_L_misses)))
(define-const A_R Real
  (/ A_R_hits (+ A_R_hits A_R_misses)))
(define-const B_L Real
  (/ B_L_hits (+ B_L_hits B_L_misses)))
(define-const B_R Real
  (/ B_R_hits (+ B_R_hits B_R_misses)))

;; A has a higher overall batting average
(assert (&lt; B A))

;; B has a better average against left-handed pitchers
(assert (&lt; A_L B_L))

;; B has a better average against right-handed pitchers
(assert (&lt; A_R B_R))

(set-option :pp.decimal true)
(check-sat)
(get-model)
(get-value (A A_L A_R A_L_hits A_L_misses A_R_hits A_R_misses))
(get-value (B B_L B_R B_L_hits B_L_misses B_R_hits B_R_misses))
</pre></div>
<p>Running Z3 against this file generates this output, showing an example satisyfing our constraints:</p>
<div><pre><span></span>((A 0.2352941176?)
 (A_L 0.4)
 (A_R 0.1666666666?)
 (A_L_hits 2)
 (A_L_misses 3)
 (A_R_hits 2)
 (A_R_misses 10))

((B 0.2307692307?)
 (B_L 0.5)
 (B_R 0.1818181818?)
 (B_L_hits 1)
 (B_L_misses 1)
 (B_R_hits 2)
 (B_R_misses 9))
</pre></div>
<p>The batting avergaes in tabular form:</p>

<table><thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead><tbody>
<tr>
<td>Player</td>
<td>Left</td>
<td>Right</td>
<td>Overall</td>
</tr>
<tr>
<td>A</td>
<td>0.4</td>
<td>0.167</td>
<td>0.235</td>
</tr>
<tr>
<td>B</td>
<td>0.5</td>
<td>0.182</td>
<td>0.230</td>
</tr>
</tbody></table>

<p>The key to understanding the paradox is that the players did not bat against the same set of pitchers. A batted against 5 lefties and 12 righties; B against 2 and 11.</p>
</div></div>]]></description>
        </item>
    </channel>
</rss>