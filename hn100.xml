<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 02 Sep 2024 19:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Sleep on it: How the brain processes many experiences – even when 'offline' (130 pts)]]></title>
            <link>https://news.yale.edu/2024/08/14/sleep-it-how-brain-processes-many-experiences-even-when-offline</link>
            <guid>41425563</guid>
            <pubDate>Mon, 02 Sep 2024 14:17:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.yale.edu/2024/08/14/sleep-it-how-brain-processes-many-experiences-even-when-offline">https://news.yale.edu/2024/08/14/sleep-it-how-brain-processes-many-experiences-even-when-offline</a>, See on <a href="https://news.ycombinator.com/item?id=41425563">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

  <p>Humans and other animals encounter and remember countless experiences each day; when we sleep, groups of cells in the brain known as neuronal ensembles replay these experiences to consolidate them into memories and “preplay” futures ones, which enables faster encoding of new experiences into memories later on.</p>
<p>Better understanding how these neuronal ensembles represent, or depict, these experiences would offer important insights into how memory and the mind function. But most studies to date have focused solely on animals undergoing just one or a small handful of sequential experiences — and it remains unclear how exactly the brain is able to process numerous experiences simultaneously during sleep.</p>
<p>In a new study, Yale scientists revealed a generative coding capacity in the brain’s hippocampus — an area responsible for memory and learning — which enables the brain to bundle together the representations of some 15 unrelated experiences that occurred across one full day within single sub-second events, known as frames, during sleep.</p>
<p>This computer-like capacity for parallel processing of different chains of information helps explain why humans and other animals are able to process a cascade of experiences and either keep separate or combine their meanings.</p>
<p>The findings were <a href="https://www.nature.com/articles/s41593-024-01703-6">published in the journal Nature Neuroscience</a>.</p>
<p><span>“</span>The brain mechanisms we uncovered are relevant for how we form and express internally generated representations about the world, like memories, imagining, and insight,” said <a href="https://medicine.yale.edu/profile/george-dragoi/">George Dragoi</a>, an associate professor of psychiatry and of neuroscience at Yale School of Medicine and corresponding author of the study.</p>
<p>An increasing amount of neuroscience research is exploring how neuronal ensembles represent experiences in the brain, a complex process that has implications for learning and memory, cognitive mapping, and spatial navigation. The fact that most studies involve animals undergoing a single experience, however, has prevented researchers from assembling a more complete picture.</p>
<p><span>“</span>In real life we are continuously experiencing new contexts and events that all need to be encoded distinctly and remembered later without a major interference between them,” Dragoi said. “The way the brain solves this problem is not known and experiments attempting to address this topic are essentially missing.</p>
<p><span>“</span>Computational models have proposed that exposure to multiple experiences would lead to a ‘catastrophic interference’ between the brain representations of new and older experiences, causing the individual to forget the latter,” Dragoi said. “That, of course, is not how daily life works.”</p>
<p>For the new study, the researchers recorded the activity of hippocampal neurons in rats that were allowed to move freely through 15 different spatial contexts over 19 ½ hours, a time span that included periods of extended sleep, during a single day. (The periods of sleep were used to investigate “offline” activity in the animals’ brains, in terms of preplay and replay of experiences.)</p>
<p>Using innovative data analysis, they identified several coding schemes in the hippocampus that boost its network capacity and efficiency during sleep and allow the brain to process representations of several experiences without interference.</p>
<p>Specifically, they found that the brain is able to “flicker” between time-compressed representations from two or more distinct experiences within the same sleep preplay and replay events, a feature that greatly increases network capacity for parallel information processing without interference during sleep. In addition, independent experiences can be bound together into longer preplay/replay episodes representing sequential aspects of day-long experiences in the order in which they occurred compressed into replay episodes less than a second in duration.</p>
<p>The researchers also identified a kind of serial position effect in this process, whereby the first and most recent experiences had the strongest representations during the animals’ sleep, a phenomenon similar to the effect observed in human memory in which people tend to recall the first and last events in a series of events or items.</p>
<p>Other authors of the paper are Kefei Liu and Jeremie Sibille, a former associate research scientist and postdoctoral associate, respectively, in Dragoi’s lab at Yale School of Medicine.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[They don't make 'em like that any more: the 3.5mm headphone jack socket (110 pts)]]></title>
            <link>https://kevinboone.me/headphonejack.html</link>
            <guid>41425383</guid>
            <pubDate>Mon, 02 Sep 2024 13:51:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kevinboone.me/headphonejack.html">https://kevinboone.me/headphonejack.html</a>, See on <a href="https://news.ycombinator.com/item?id=41425383">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">




<h2 id="they-dont-make-em-like-that-any-more-the-3.5mm-headphone-jack-socket">They
don’t make ’em like that any more: the 3.5mm headphone jack socket</h2>
<p><img src="https://kevinboone.me/img/plug.png"></p>
<blockquote>
<p>“It it ain’t broke, replace it with something that is.”</p>
</blockquote>
<p>About five years ago I was suddenly, unexpectedly taken ill.&nbsp;Not just
‘that’s a bit nasty’ ill, but ‘prepare for the worst’ ill.&nbsp;One thing
that kept my spirits up in hospital, in the long watches of the night,
was listening to comedy shows and audiobooks. I used my smartphone for
this, since I had it with me, and a pair of old, wired headphones that I
just had time to grab on my way to the ambulance.</p>
<p>I survived, of course, as evidenced by my continued ramblings on this
site. But it was an unpleasant experience, made just a little better by
a simple piece of technology: the 3.5mm headphone jack.</p>
<p>Now, of course, I do own wireless headphones and earbuds – I think
almost everybody does. I also own several of those irritating USB
dongles, that provide a 3.5mm port for devices that don’t have one. But
here’s the problem: I can’t use my Bluetooth earbuds while they’re
charging. And I can’t easily charge my phone whilst it’s connected to
the USB dongle. In a critical-care facility, it’s hard enough to find
one free mains socket to connect a charger to, let alone two.</p>
<p>In the debate about the benefits of wired and wireless headphones, I
doubt anybody is thinking “What if I get sick?” It certainly wasn’t
something I was thinking, either, until I actually did. Still, that
experience made me think about all the advantages of having a headphone
jack, some of which I’d thought about before, and some I hadn’t.</p>
<ul>
<li>Sound quality is better. Maybe that won’t always be the case, but it
is now. All decent headphones have an analog jack.</li>
<li>Almost any headphone or earphone will work with almost anything with
a standard jack socket. That isn’t the case for USB dongles. Maybe that
won’t always be the case, but it is now.</li>
<li>I can use the headphone jack to connect my phone or tablet to an
amplifier, should the need arise. For certain headphones, that need
<em>does</em> arise.</li>
<li>I can charge my phone whilst listening to music, which I do all
day.</li>
<li>I don’t have to carry around a stupid dongle, which I will
invariably lose.</li>
<li>Ordinary wired earbuds can be small enough to wear whilst sleeping.
I’ve never seen Bluetooth earbuds that are.</li>
</ul>
<p>The headphone jack is a “just works” kind of technology: there’s
nothing complicated about it, and its not encumbered by patents, so
anybody can make compatible equipment.</p>
<p>So, although “What if I get sick?” probably isn’t at the top of the
list of questions that will guide your buying decision, we have to
wonder what other things we lose, by replacing a well-established,
robust technology with a complicated, flaky one.</p>
<p>On the other hand, the <em>advantages</em> of doing away with the
headphone jack are:</p>
<ul>
<li>Your cellphone is about ten pence cheaper.</li>
<li>Er… that’s it.</li>
</ul>
<p>What makes the loss of the headphone jack so hard to bear is that
<em>it wasn’t done for the consumer’s benefit</em>. To be sure,
manufacturers made certain claims about the alleged benefits of losing
the jack, but few of them stand up to much logical scrutiny.</p>
<p>The first manufacturer to make a point of dropping the headphone jack
(I believe) was not Apple – as is commonly believed – but Oppo, and back
in 2014. Their reason for doing so was at least a credible technical
one: they said it made their phones about half a millimetre thinner.
Maybe that was a selling point, maybe it wasn’t. But Apple couldn’t fall
back even on this claim, because people found ways to fit a 3.5mm jack
socket into the iPhones that lacked one, and even posted videos on
Youtube showing how they did it. It wasn’t easy, but it was clearly
<em>possible</em>. If Apple genuinely thought that omitting the jack
would leave more room for other features, they didn’t actually provide
any.</p>
<p>It’s notable that a number of companies mocked Apple’s decision to
drop the headphone jack, before quietly doing the same themselves:
Samsung and Google in particular. Samsung even cynically tried to
withdraw all the advertising in which they had mocked Apple. Of course,
nothing is ever really gone on the Internet, so we can continue to
marvel at Samsung’s barefaced duplicity.</p>
<p>Some manufacturers claimed that the presence of the headphone jack
made it difficult to keep their phones waterproof; but there’s a whole
range of good-quality phones from around 2019-2020 that are waterproof
to a reasonable degree, without sacrificing the jack.</p>
<p>No.&nbsp;All of these weak excuses are simply distractions from the
<em>real</em> reason Apple, Samsung, and Google dropped the headphone
jack: they all have a substantial investment in the manufacture of
wireless headphones.</p>
<p>Apple owns Beats – this was a multi-billion dollar investment, in a
company that manufactures Bluetooth headphones.</p>
<p>Samsung owns Harmon, which is know for the Harmon-Kardon and JBL
audio brands. Again, these were multi-billion dollar acquisitions for
Samsung, in companies with a strong interest in wireless audio.</p>
<p>Google owns Synaptics, Dysonics, RevX, and Tempow, all of which are
active in the development of wireless audio. Google also hired Peter Liu
from Bose, who was one of the original developers of the Bluetooth Low
Energy specification.</p>
<p>It is very much in the interest of companies like Apple, Samsung, and
Google to encourage their customers to buy into wireless Bluetooth
headphones. Or, better yet, to force them to do so, by taking away the
means to do anything else. After all, their executives have to justify
the billions of dollars they’ve spent, acquiring suppliers and
developers of wireless audio equipment.</p>
<p>The 3.5mm headphone jack has almost nothing to recommend it,
technically speaking. It was criticized by hi-fi enthusiasts almost from
its inception. The only things it has going for it are its simplicity,
and the fact that everybody uses it. Well, everybody outside the world
of mobile gadgets, anyway. This simplicity and ubiquity is a great
benefit to consumers, which is why Apple, et al., don’t want to provide
it – they have nothing to gain if consumers spend less money on their
products.</p>
<p>The loss of the headphone jack would have hurt even if there were
good technical reasons for it. As it turns out, there are none – it’s
just another cynical way for big businesses to gouge consumers. A side
effect of their strategy is that wired headphones themselves are
becoming less available, as cellphone users were until recently major
purchasers of these devices. It’s not difficult to get top-quality
headphones with a jack – they all have one; but there are fewer and
fewer mid-priced wired earbuds on the market.</p>
<p>The way to discourage companies behaving this way is for us all to
take our business elsewhere. It’s still possible to get decent
cellphones from Motorola, Asus, and Sony that retain the 3.5mm jack. I
don’t believe that anything recent from Apple, Samsung, or Google has
one, for reasons I explained earlier. Still, there are older cellphone
models from these suppliers that do have a jack, and which are still
good phones. I own the Samsung S10+, S10e, and Note 9, for example.
They’re a few years old, but they still do everything I want and
more.</p>
<p>If you’re a fan of the 3.5mm jack, it’s time to vote with your
wallet.</p>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DOjS – A DOS JavaScript Canvas with Sound (119 pts)]]></title>
            <link>https://github.com/SuperIlu/DOjS</link>
            <guid>41425259</guid>
            <pubDate>Mon, 02 Sep 2024 13:33:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/SuperIlu/DOjS">https://github.com/SuperIlu/DOjS</a>, See on <a href="https://news.ycombinator.com/item?id=41425259">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">DOjS</h2><a id="user-content-dojs" aria-label="Permalink: DOjS" href="#dojs"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">A DOS JavaScript Canvas with sound.</h2><a id="user-content-a-dos-javascript-canvas-with-sound" aria-label="Permalink: A DOS JavaScript Canvas with sound." href="#a-dos-javascript-canvas-with-sound"></a></p>
<p dir="auto"><a href="https://github.com/SuperIlu/DOjS">DOjS</a> is a JavaScript programming environment for systems running MS-DOS, <a href="http://freedos.org/" rel="nofollow">FreeDOS</a> or any DOS based Windows (like 95, 98, ME).
It features an integrated editor, graphics &amp; sound output, mouse/keyboard/joystick input and more (see below).
It was inspired by <a href="https://processing.org/" rel="nofollow">Processing</a> which is described on <a href="https://en.wikipedia.org/wiki/Processing_(programming_language)" rel="nofollow">Wikipedia</a> as:</p>
<blockquote>
<p dir="auto">Processing is an open-source graphical library and integrated development environment (IDE) / playground built for the electronic arts, new media art, and visual design communities with the purpose of teaching non-programmers the fundamentals of computer programming in a visual context.</p>
</blockquote>
<p dir="auto">It also has a p5js compatibility mode where some of the functions of <a href="https://p5js.org/" rel="nofollow">p5js</a> are available and scripts can have a similar structure to Processing sketches.</p>
<p dir="auto">You can type in a script with the builtin or your favorite text editor and then run it on a DOS command prompt.</p>
<p dir="auto">DOjS is pronounces like <a href="https://en.wikipedia.org/wiki/Doge_(meme)" rel="nofollow">doge</a>, but ending with an "s".</p>
<p dir="auto">DOjS was only possible due to the work of these people/projects:</p>
<ul dir="auto">
<li><a href="https://mujs.com/" rel="nofollow">MuJS</a> JavaScript interpreter</li>
<li>The <a href="https://liballeg.org/" rel="nofollow">Allegro library</a> and <a href="https://github.com/msikma/allegro-4.2.2-xc">Allegro XC</a></li>
<li><a href="http://www.delorie.com/djgpp/" rel="nofollow">DJGPP</a> from DJ Delorie and the <a href="https://github.com/jwt27/build-gcc">Linux compile scripts</a> by jwt27.</li>
<li>The people that contributed to <a href="https://p5js.org/" rel="nofollow">p5js</a>.</li>
<li>The Glide source cleanup of <a href="https://github.com/sezero/glide">Ozkan Sezer</a>.</li>
<li><a href="http://alpng.sourceforge.net/" rel="nofollow">AllegroPNG</a> PNG loader for Allegro</li>
<li><a href="http://dzcomm.sourceforge.net/" rel="nofollow">DZCOMM</a> COM port library</li>
<li><a href="https://github.com/anrieff/libcpuid">libcpuid</a> for cpuid module</li>
<li><a href="https://curl.se/" rel="nofollow">curl</a> and <a href="https://www.openssl.org/" rel="nofollow">OpenSSL</a> for curl module</li>
<li><a href="https://sourceforge.net/projects/cylindrix/" rel="nofollow">cylindrix</a> for IPX module</li>
<li><a href="https://github.com/memononen/nanosvg">nanosvg</a> for SVG loading</li>
<li><a href="https://github.com/stegu/perlin-noise">noise</a> for perlin noise generation</li>
<li><a href="https://github.com/codeplea/genann">genann</a> for neural network engine</li>
<li><a href="https://www.sqlite.org/index.html" rel="nofollow">SQLite</a> for sqlite module</li>
<li><a href="https://github.com/gvanem/Watt-32.git">Watt32</a> for TCP/IP networking</li>
<li><a href="https://github.com/kuba--/zip">zip</a> for ZIP file access</li>
<li><a href="http://zlib.net/" rel="nofollow">zlib</a> for compression</li>
<li><a href="https://github.com/nothings/stb/blob/master/stb_image.h">stb_image.h</a> for JPEG loading</li>
<li><a href="https://github.com/bitbank2/AnimatedGIF/">AnimatedGIF</a> for rendering GIF animations.</li>
<li><a href="https://github.com/phoboslab/pl_mpeg">PL_MPEG</a> for mpeg1 decoding</li>
<li><a href="https://github.com/AndreRenaud/PDFGen">pdfgen</a> for PDF rendering.</li>
<li><a href="https://github.com/martincameron/micromod">micromod</a> for MOD playback.</li>
<li><a href="https://github.com/martincameron/micromod">ibxm</a> for MOD, S3M and XM playback.</li>
<li><a href="https://github.com/rxi/ini">ini</a> for INI file reading.</li>
<li><a href="https://www.mesa3d.org/" rel="nofollow">Mesa</a> for OpenGL</li>
<li><a href="https://chromium.googlesource.com/webm/libwebp" rel="nofollow">libwebp</a> for WebP decoding/encoding</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contact</h2><a id="user-content-contact" aria-label="Permalink: Contact" href="#contact"></a></p>
<p dir="auto">You can find me on <a href="https://mastodon.social/@dec_hl" rel="nofollow">Mastodon</a>, in the <a href="https://discord.gg/J7MUTap9fM" rel="nofollow">DOjS Discord</a> or on <a href="https://twitter.com/dec_hl" rel="nofollow">Twitter</a> if you want...</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Download and quick start</h2><a id="user-content-download-and-quick-start" aria-label="Permalink: Download and quick start" href="#download-and-quick-start"></a></p>
<p dir="auto"><strong>You can find binary releases on the <a href="https://github.com/SuperIlu/DOjS/releases">GitHub release page</a>.</strong> Just extract the contents of the archive and run <code>DOjS.exe</code>.</p>
<p dir="auto">DOjS runs in <a href="https://www.dosbox.com/" rel="nofollow">Dosbox</a> and on real hardware or a virtual machine with MS-DOS, <a href="https://www.freedos.org/" rel="nofollow">FreeDOS</a> or any DOS based Windows like Windows 95/98/ME. To use 3Dfx/Glide support you need a Voodoo card or <a href="https://github.com/joncampbell123/dosbox-x/releases">DOSBox-X</a> (see below).</p>
<p dir="auto">If you run it on real hardware you need at least a <strong>80386 with 4MB</strong>. I recommend a <strong>Pentium class machine (&gt;= 100MHz) with at least 32MB RAM</strong>. The example files run fine on an Athlon 1GHz and with 256MB RAM.</p>
<p dir="auto">The following hardware/functions are available:</p>
<ul dir="auto">
<li>8/16/24 and 32 bit 2D graphics. On 24/32bit display modes alpha channel transparency is available.</li>
<li>BMP, PCX, TGA, QOI and PNG image reading and writing, JPEG and SVG loading</li>
<li>GRX font loading and rendering</li>
<li>Keyboard input</li>
<li>Mouse input</li>
<li>Joystick/Joyport input</li>
<li>File IO</li>
<li>MIDI output</li>
<li>WAV output</li>
<li>Audio input/sampling</li>
<li>Allegro 3D rendering (software)</li>
<li>3dfx/Glide3 3D rendering output (hardware)</li>
<li>Mesa/OpenGL wrapper with 3dfx based hardware acceleration</li>
<li>p5js compatibility</li>
<li>direct io-port access (inb, outb, etc)</li>
<li>LPT or parallel port access (bi-directional)</li>
<li>COM or serial port access</li>
<li>IPX and TCP/IP networking</li>
<li>ZIP file access</li>
<li>GIF-Animation, FLC/FLI, MPEG1 or OggVorbis playback</li>
<li>HTTPS support through libcurl and mbedTLS</li>
<li>PDF generation</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Examples</h2><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_003.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_003.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_010.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_010.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_019.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_019.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_034.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_034.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_004.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_004.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_013.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_013.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_025.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_025.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/gltixy.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/gltixy.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_009.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_009.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_018.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_018.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_026.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/dojs_026.png" alt="DOjS example" width="200"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/SuperIlu/DOjS/raw/master/images/ogl02.png"><img src="https://github.com/SuperIlu/DOjS/raw/master/images/ogl02.png" alt="DOjS example" width="200"></a></p>
<p dir="auto">See <a href="https://github.com/SuperIlu/DOStodon">DOStodon</a> for an complex examples. It is a full Mastodon client implemented using DOjS.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">A minimal script</h2><a id="user-content-a-minimal-script" aria-label="Permalink: A minimal script" href="#a-minimal-script"></a></p>
<p dir="auto">You can find the following example in <code>examples/exampl.js</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="/*
** This function is called once when the script is started.
*/
function Setup() {
    pink = new Color(241, 66, 244, 255); // define the color pink
}

/*
** This function is called repeatedly until ESC is pressed or Stop() is called.
*/
function Loop() {
    ClearScreen(EGA.BLACK);
    TextXY(SizeX() / 2, SizeY() / 2, &quot;Hello World!&quot;, pink, NO_COLOR);

    TextXY(10, 10, &quot;rate=&quot; + GetFramerate(), EGA.BLACK, EGA.LIGHT_BLUE);
}

/*
** This function is called on any input.
*/
function Input(event) {
    str = JSON.stringify(event);
}"><pre><span>/*</span>
<span>** This function is called once when the script is started.</span>
<span>*/</span>
<span>function</span> <span>Setup</span><span>(</span><span>)</span> <span>{</span>
    <span>pink</span> <span>=</span> <span>new</span> <span>Color</span><span>(</span><span>241</span><span>,</span> <span>66</span><span>,</span> <span>244</span><span>,</span> <span>255</span><span>)</span><span>;</span> <span>// define the color pink</span>
<span>}</span>

<span>/*</span>
<span>** This function is called repeatedly until ESC is pressed or Stop() is called.</span>
<span>*/</span>
<span>function</span> <span>Loop</span><span>(</span><span>)</span> <span>{</span>
    <span>ClearScreen</span><span>(</span><span>EGA</span><span>.</span><span>BLACK</span><span>)</span><span>;</span>
    <span>TextXY</span><span>(</span><span>SizeX</span><span>(</span><span>)</span> <span>/</span> <span>2</span><span>,</span> <span>SizeY</span><span>(</span><span>)</span> <span>/</span> <span>2</span><span>,</span> <span>"Hello World!"</span><span>,</span> <span>pink</span><span>,</span> <span>NO_COLOR</span><span>)</span><span>;</span>

    <span>TextXY</span><span>(</span><span>10</span><span>,</span> <span>10</span><span>,</span> <span>"rate="</span> <span>+</span> <span>GetFramerate</span><span>(</span><span>)</span><span>,</span> <span>EGA</span><span>.</span><span>BLACK</span><span>,</span> <span>EGA</span><span>.</span><span>LIGHT_BLUE</span><span>)</span><span>;</span>
<span>}</span>

<span>/*</span>
<span>** This function is called on any input.</span>
<span>*/</span>
<span>function</span> <span>Input</span><span>(</span><span>event</span><span>)</span> <span>{</span>
    <span>str</span> <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>event</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto">Open this script with <code>DOjS.EXE examples\exampl.js</code> or use <code>DOjS.EXE -r examples\exampl.js</code> to run it without starting the integrated editor first. If the script does not exist the editor loads the template for a new script.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">p5js compatibility</h2><a id="user-content-p5js-compatibility" aria-label="Permalink: p5js compatibility" href="#p5js-compatibility"></a></p>
<p dir="auto">If you want to write scripts using the syntax of <a href="https://p5js.org/" rel="nofollow">p5js</a> you need to use <code>Include('p5');</code> as first line of your script. You can find the following example in <code>examples/examplp5.js</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="Include('p5');

/*
** This function is called once when the script is started.
*/
function setup() {
    pink = color(241, 66, 244); // define the color pink
}

/*
** This function is called repeatedly until ESC is pressed or Stop() is called.
*/
function draw() {
    background(EGA.BLACK);
    stroke(pink);
    fill(pink);
    text(&quot;Hello p5js World!&quot;, width / 2, height / 2);

    stroke(EGA.LIGHT_BLUE);
    fill(EGA.LIGHT_BLUE);
    text(&quot;rate=&quot; + getFrameRate(), 10, 10);
}"><pre><span>Include</span><span>(</span><span>'p5'</span><span>)</span><span>;</span>

<span>/*</span>
<span>** This function is called once when the script is started.</span>
<span>*/</span>
<span>function</span> <span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>pink</span> <span>=</span> <span>color</span><span>(</span><span>241</span><span>,</span> <span>66</span><span>,</span> <span>244</span><span>)</span><span>;</span> <span>// define the color pink</span>
<span>}</span>

<span>/*</span>
<span>** This function is called repeatedly until ESC is pressed or Stop() is called.</span>
<span>*/</span>
<span>function</span> <span>draw</span><span>(</span><span>)</span> <span>{</span>
    <span>background</span><span>(</span><span>EGA</span><span>.</span><span>BLACK</span><span>)</span><span>;</span>
    <span>stroke</span><span>(</span><span>pink</span><span>)</span><span>;</span>
    <span>fill</span><span>(</span><span>pink</span><span>)</span><span>;</span>
    <span>text</span><span>(</span><span>"Hello p5js World!"</span><span>,</span> <span>width</span> <span>/</span> <span>2</span><span>,</span> <span>height</span> <span>/</span> <span>2</span><span>)</span><span>;</span>

    <span>stroke</span><span>(</span><span>EGA</span><span>.</span><span>LIGHT_BLUE</span><span>)</span><span>;</span>
    <span>fill</span><span>(</span><span>EGA</span><span>.</span><span>LIGHT_BLUE</span><span>)</span><span>;</span>
    <span>text</span><span>(</span><span>"rate="</span> <span>+</span> <span>getFrameRate</span><span>(</span><span>)</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto">More info can be found at the end of this README in the section <strong>Usage</strong> and in the API documentation. Take a look at the <code>examples/</code> as well.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">additional packages</h2><a id="user-content-additional-packages" aria-label="Permalink: additional packages" href="#additional-packages"></a></p>
<p dir="auto">DOjS has a very simple integrated package manager (DPM). It can be started with <code>DPM.BAT</code>.
A working packet driver is needed to connect to the package index and download packages using HTTPS.
Packages (and the package index) are fetched from the <a href="https://github.com/SuperIlu/DOjSHPackages">DOjS/jSH package repository</a>.
Downloaded packages are put into <code>JSBOOT.ZIP</code> in the <code>PACKAGE/</code> directory.
Feel free to submit any packages you want to include in that repository using a pull request.
DPM commands:</p>
<ul dir="auto">
<li>installed - list installed packages.</li>
<li>remove    - remove package.</li>
<li>fetch     - fetch package index from server.</li>
<li>install   - install a package (and its dependencies) from package index.</li>
<li>list      - list available packages in index.</li>
<li>setindex  - set index URL (HTTP or HTTPS).</li>
<li>help      - this help.;</li>
<li>quit      - exit dpm.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">3dfx/Glide support</h2><a id="user-content-3dfxglide-support" aria-label="Permalink: 3dfx/Glide support" href="#3dfxglide-support"></a></p>
<p dir="auto">DOjS supports most of the Glide3 API that was used with <a href="https://en.wikipedia.org/wiki/3dfx_Interactive" rel="nofollow">3dfx</a> accelerator cards. The following hardware is supported:</p>
<ul dir="auto">
<li>Voodoo 1 [tested]</li>
<li>Voodoo 2 [tested]</li>
<li>Voodoo 3 [tested]</li>
<li>Voodoo 4 [tested by <a href="https://twitter.com/tunguska82" rel="nofollow">tunguska</a>]</li>
<li>Voodoo 5 [tested by <a href="https://twitter.com/tunguska82" rel="nofollow">tunguska</a>]</li>
<li>Voodoo Rush (all versions) [tested]</li>
<li>Voodoo Banshee (PCI and AGP) [tested]</li>
</ul>
<p dir="auto">Additionally you can use <a href="https://github.com/joncampbell123/dosbox-x/releases">DOSBox-X</a> which emulates a Voodoo 1 card. Glide functions can be found in the 3dfx-module in the documentation, Javascript support functions have a "FX" prefix, all native functions are prefixed with "fx". Detailed Glide3-API documentation can be found on the internet, e.g. on <a href="http://falconfly.3dfx.pl/reference.htm" rel="nofollow">FalconFly Central</a>. <strong>Make sure you grab the Glide3 SDK and not Glide2!</strong></p>
<p dir="auto">You can use the included DOS version of <code>TEXUS.EXE</code> to convert bitmaps to <code>3df</code> texture files that can be loaded as textures.</p>
<p dir="auto"><strong>!!! Attention !!!</strong>
3dfx/Glide3 support ONLY works in plain DOS, NOT in the DOS/command window of Windows 9x! Be sure to always boot into a pure DOS prompt before trying to use any of the fx-functions!
Before using 3dfx/Glide3 support you need to copy the appropriate <code>GLIDE3X.DXE</code> into the same directory as <code>DOJS.EXE</code>. You can do so by using the <code>V_XXX.BAT</code> scripts in the distribution ZIP archive.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Software created with DOjS</h2><a id="user-content-software-created-with-dojs" aria-label="Permalink: Software created with DOjS" href="#software-created-with-dojs"></a></p>
<ul dir="auto">
<li>DutchTux has created a GUI toolkit for DOjS: <a href="https://github.com/dutchtux3000/jiyuai">https://github.com/dutchtux3000/jiyuai</a></li>
<li>I created a Mastodon client for MS-DOS using DOjS: <a href="https://github.com/SuperIlu/DOStodon">https://github.com/SuperIlu/DOStodon</a></li>
<li>I made a text adventure with DOjS: <a href="https://superilu.itch.io/spacebutton" rel="nofollow">https://superilu.itch.io/spacebutton</a></li>
<li>And also a match-numbers-game: <a href="https://superilu.itch.io/numgam" rel="nofollow">https://superilu.itch.io/numgam</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Compilation</h2><a id="user-content-compilation" aria-label="Permalink: Compilation" href="#compilation"></a></p>
<p dir="auto">You can compile DOjS on any modern Linux (the instructions below are for Debian based distributions) or on Windows 10 using Windows Subsystem for Linux (WSL).
Setup Windows Subsystem for Linux (WSL) according to <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" rel="nofollow">this</a> guide (I used Ubuntu 18.04 LTS).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Preparation</h2><a id="user-content-preparation" aria-label="Permalink: Preparation" href="#preparation"></a></p>
<p dir="auto">Build and install DJGPP 12.2.0 according to <a href="https://github.com/jwt27/build-djgpp">this</a> guide.
Install <a href="https://github.com/nvm-sh/nvm#installing-and-updating">NVM</a>.
I used the following command lines to update/install my dependencies:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo apt-get update
sudo apt-get dist-upgrade
sudo apt-get install bison flex curl gcc g++ make texinfo zlib1g-dev g++ unzip htop screen git bash-completion build-essential zip dos2unix python3
nvm install node
npm install -g jsdoc
npm install -g better-docs"><pre>sudo apt-get update
sudo apt-get dist-upgrade
sudo apt-get install bison flex curl gcc g++ make texinfo zlib1g-dev g++ unzip htop screen git bash-completion build-essential zip dos2unix python3
nvm install node
npm install -g jsdoc
npm install -g better-docs</pre></div>
<p dir="auto">And the following commands to build and install DJGPP to <code>/home/ilu/cross</code>.:</p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/jwt27/build-djgpp.git
cd build-djgpp
./build-djgpp.sh --target=i586-pc-msdosdjgpp --prefix=/home/ilu/cross all"><pre>git clone https://github.com/jwt27/build-djgpp.git
<span>cd</span> build-djgpp
./build-djgpp.sh --target=i586-pc-msdosdjgpp --prefix=/home/ilu/cross all</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting &amp; Compiling DOjS</h2><a id="user-content-getting--compiling-dojs" aria-label="Permalink: Getting &amp; Compiling DOjS" href="#getting--compiling-dojs"></a></p>
<p dir="auto">Open a shell/command line in the directory where you want the source to reside.</p>
<p dir="auto">Checkout DOjS from Github:</p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/SuperIlu/DOjS.git"><pre>git clone https://github.com/SuperIlu/DOjS.git</pre></div>
<p dir="auto">Make sure DJGPP is in your PATH and DJDIR is set (e.g. I have these lines in my ~/.profile):</p>
<div data-snippet-clipboard-copy-content="# DJGPP
export PATH=/home/ilu/djgpp/bin/:/home/ilu/djgpp/i586-pc-msdosdjgpp/bin/:$PATH
export DJDIR=/home/ilu/djgpp/"><pre><code># DJGPP
export PATH=/home/ilu/djgpp/bin/:/home/ilu/djgpp/i586-pc-msdosdjgpp/bin/:$PATH
export DJDIR=/home/ilu/djgpp/
</code></pre></div>
<p dir="auto">If you used Windows-Tools to check out DOjS from git you may need to fix the newlines of the shell scripts by using <code>make fixnewlines</code>.</p>
<p dir="auto">Now you are ready to compile DOjS with <code>make clean all</code>. This might take some time as the dependencies are quite large.
<code>make distclean</code> will clean dependencies as well. <code>make zip</code> will create the distribution ZIP and <code>make doc</code> will re-create the HTML help.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Compile the Linux version of DOjS</h2><a id="user-content-compile-the-linux-version-of-dojs" aria-label="Permalink: Compile the Linux version of DOjS" href="#compile-the-linux-version-of-dojs"></a></p>
<p dir="auto">There is an experimental Linux version of DOjS. It only supports a subset of the DOS version and should be considered ALPHA! See <a href="https://github.com/SuperIlu/DOjS/blob/master/README_Linux.md">this</a> file for more information.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Notes</h2><a id="user-content-notes" aria-label="Permalink: Notes" href="#notes"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">3dfx/Glide3</h2><a id="user-content-3dfxglide3" aria-label="Permalink: 3dfx/Glide3" href="#3dfxglide3"></a></p>
<p dir="auto">In order to compile DOjS you need Glide3 includes and binaries. The ones included with the DOjS sources were created using my <a href="https://github.com/SuperIlu/glide">glide repository</a> on GitHub.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">GRX Fonts</h2><a id="user-content-grx-fonts" aria-label="Permalink: GRX Fonts" href="#grx-fonts"></a></p>
<p dir="auto">DOjS comes pre-bundled with all fonts included with GRX (files ending with ".FNT"). If you want/need additional fonts you can find a very simple tool to convert TTF/BDF fonts to GRX format <a href="https://github.com/SuperIlu/GrxFntConv">here</a>. Results may vary...
A minimal version capable of converting BDF fonts to FNT is included with DOjS (<code>FONTCONV.EXE</code>).
You can find information on how to convert a TTF to BDF <a href="https://learn.adafruit.com/custom-fonts-for-pyportal-circuitpython-display/conversion" rel="nofollow">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Live coding</h2><a id="user-content-live-coding" aria-label="Permalink: Live coding" href="#live-coding"></a></p>
<p dir="auto">If you run DOjS on a computer with network interface and a matching packet driver you can (sort of) live code using the <a href="https://code.visualstudio.com/" rel="nofollow">VSCode</a> extension in <code>vscode\livedojs-0.0.4.vsix</code>. You need to start <code>DOjS -r examples/websvr.js</code> and then set the IP address in VSCode using the command <code>DOjS: Set hostname</code>. Live coding sketches must look like below to work:</p>
<div data-snippet-clipboard-copy-content="// livedojs
exports.Setup = function () {
}

exports.Loop = function () {
    ClearScreen(EGA.BLACK);

    FilledBox(10, 10, 70, 20, EGA.GREEN);
}"><pre><code>// livedojs
exports.Setup = function () {
}

exports.Loop = function () {
    ClearScreen(EGA.BLACK);

    FilledBox(10, 10, 70, 20, EGA.GREEN);
}
</code></pre></div>
<ul dir="auto">
<li>The first line must be exactly <code>// livedojs</code></li>
<li>The file must end with <code>.js</code></li>
<li>Only <code>Setup()</code> and <code>Loop()</code> are available, <code>Input()</code> does not work.</li>
<li>p5js compatibility does not work, you must code using DOjS native API</li>
<li>If the hostname is set the sketch will be automatically be uploaded on save</li>
<li>The sketch can be uploaded using <code>DOjS: Upload sketch</code> manually</li>
<li>you can access the JSLOG.TXT of the running server by using <code>DOjS: get logfile</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">History</h2><a id="user-content-history" aria-label="Permalink: History" href="#history"></a></p>
<p dir="auto">See the <a href="https://github.com/SuperIlu/DOjS/blob/master/CHANGELOG.md">changelog</a> for the projects history.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Planed work</h2><a id="user-content-planed-work" aria-label="Permalink: Planed work" href="#planed-work"></a></p>
<ul dir="auto">
<li>Stack trace selector in the editor</li>
<li>TCP/IP remote logging/debugging.</li>
<li>add FFT module</li>
<li>add webp decoder (<a href="https://github.com/webmproject/libwebp/blob/main/doc/api.md">https://github.com/webmproject/libwebp/blob/main/doc/api.md</a>)</li>
<li>Add ZIP file functions (e.g. <a href="https://libzip.org/users/" rel="nofollow">https://libzip.org/users/</a> or <a href="https://github.com/kuba--/zip">https://github.com/kuba--/zip</a>).
<ul dir="auto">
<li>Implement 3df file loading from ZIP</li>
</ul>
</li>
<li>add/implement some more math functions
<ul dir="auto">
<li><a href="https://mathjs.org/" rel="nofollow">https://mathjs.org/</a></li>
<li><a href="https://github.com/evanw/lightgl.js">https://github.com/evanw/lightgl.js</a></li>
</ul>
</li>
<li>Fix bugs!</li>
<li>Anything fun...
<ul dir="auto">
<li><a href="http://www.speech.cs.cmu.edu/flite/" rel="nofollow">http://www.speech.cs.cmu.edu/flite/</a></li>
<li><a href="http://speect.sourceforge.net/" rel="nofollow">http://speect.sourceforge.net/</a></li>
<li><a href="http://espeak.sourceforge.net/" rel="nofollow">http://espeak.sourceforge.net/</a></li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Licenses</h2><a id="user-content-licenses" aria-label="Permalink: Licenses" href="#licenses"></a></p>
<p dir="auto">See <a href="https://github.com/SuperIlu/DOjS/blob/master/LICENSE">LICENSE</a> file for all licenses.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">DOjS</h2><a id="user-content-dojs-1" aria-label="Permalink: DOjS" href="#dojs-1"></a></p>
<p dir="auto">All code from me is released under <strong>MIT license</strong>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">MuJS</h2><a id="user-content-mujs" aria-label="Permalink: MuJS" href="#mujs"></a></p>
<p dir="auto">MuJS is released under <strong>ISC license</strong>. See <em>COPYING</em> in the MuJS folder for details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Allegro</h2><a id="user-content-allegro" aria-label="Permalink: Allegro" href="#allegro"></a></p>
<p dir="auto">Allegro 4 is released under the <strong>Giftware license</strong> (<a href="https://liballeg.org/license.html" rel="nofollow">https://liballeg.org/license.html</a>).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">GRX fonts</h2><a id="user-content-grx-fonts-1" aria-label="Permalink: GRX fonts" href="#grx-fonts-1"></a></p>
<p dir="auto">The GRX fonts are under <strong>MIT and other licenses</strong>. See copying.grx in <code>LICENSE</code> for details.
The converted fonts from the Linux Font Project are in the public domain.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">IPX and dosbuffer sub-system</h2><a id="user-content-ipx-and-dosbuffer-sub-system" aria-label="Permalink: IPX and dosbuffer sub-system" href="#ipx-and-dosbuffer-sub-system"></a></p>
<p dir="auto">This code is taken from the game <a href="https://www.allegro.cc/depot/Cylindrix" rel="nofollow">Cylindrix</a> by Hotwarez LLC, Goldtree Enterprises.
It was <a href="https://sourceforge.net/projects/cylindrix/" rel="nofollow">released</a> under <strong>GPLv2</strong>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">CWSDPMI.EXE</h2><a id="user-content-cwsdpmiexe" aria-label="Permalink: CWSDPMI.EXE" href="#cwsdpmiexe"></a></p>
<p dir="auto"><a href="http://sandmann.dotster.com/cwsdpmi/" rel="nofollow">CWSDPMI</a> DPMI host is licensed under <strong>GPL</strong>. The documentation states:</p>
<blockquote>
<p dir="auto">The files in this binary distribution may be redistributed under the GPL (with source) or without the source code provided.</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">3dfx/Glide3</h2><a id="user-content-3dfxglide3-1" aria-label="Permalink: 3dfx/Glide3" href="#3dfxglide3-1"></a></p>
<p dir="auto">The code is licensed under "3DFX GLIDE Source Code General Public License".
Source code is available at <a href="https://github.com/SuperIlu/glide">https://github.com/SuperIlu/glide</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">DZComm</h2><a id="user-content-dzcomm" aria-label="Permalink: DZComm" href="#dzcomm"></a></p>
<p dir="auto">DZComm serial library is release as <strong>gift-ware</strong>. See <em>readme.txt</em> in the dzcomm folder for details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Logo</h2><a id="user-content-logo" aria-label="Permalink: Logo" href="#logo"></a></p>
<p dir="auto">The DOjS logo dog was downloaded from <a href="https://www.pexels.com/photo/animal-cachorro-doge-pug-1753686/" rel="nofollow">Pexels</a> and kindly provided by Iago Garcia Garcia.</p>
<p dir="auto">The logo font is <a href="https://www.fontsquirrel.com/fonts/comic-relief" rel="nofollow">Comic relief</a> by Jeff Davis provided under <strong>SIL OPEN FONT LICENSE Version 1.1</strong>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">WAVs</h2><a id="user-content-wavs" aria-label="Permalink: WAVs" href="#wavs"></a></p>
<p dir="auto">All WAV files were downloaded from <a href="https://bigsoundbank.com/" rel="nofollow">BigSoundBank</a> and are licensed under <a href="https://bigsoundbank.com/droit.html" rel="nofollow">WTFPL</a></p>
<ul dir="auto">
<li><a href="https://bigsoundbank.com/detail-0283-song-of-rooster.html" rel="nofollow">https://bigsoundbank.com/detail-0283-song-of-rooster.html</a></li>
<li><a href="https://bigsoundbank.com/detail-1102-bell-bike-5.html" rel="nofollow">https://bigsoundbank.com/detail-1102-bell-bike-5.html</a></li>
<li><a href="https://bigsoundbank.com/detail-1023-explosion-far-away.html" rel="nofollow">https://bigsoundbank.com/detail-1023-explosion-far-away.html</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">MIDs</h2><a id="user-content-mids" aria-label="Permalink: MIDs" href="#mids"></a></p>
<p dir="auto">The MIDI files were downloaded from the <a href="https://github.com/freedoom/freedoom">FreeDOOM</a> project and are licensed under <a href="https://github.com/freedoom/freedoom/blob/master/COPYING.adoc">this</a> license.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">p5js and examples</h2><a id="user-content-p5js-and-examples" aria-label="Permalink: p5js and examples" href="#p5js-and-examples"></a></p>
<p dir="auto">p5js is is released under <strong>LGPL</strong>.</p>
<p dir="auto">The examples are licensed under a <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="nofollow">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">zlib</h2><a id="user-content-zlib" aria-label="Permalink: zlib" href="#zlib"></a></p>
<p dir="auto"><a href="http://www.zlib.net/" rel="nofollow">zlib</a> is released under <a href="http://www.zlib.net/zlib_license.html" rel="nofollow">zlib license</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">alpng</h2><a id="user-content-alpng" aria-label="Permalink: alpng" href="#alpng"></a></p>
<p dir="auto">Copyright (c) 2006 Michal Molhanec</p>
<p dir="auto">This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.</p>
<p dir="auto">Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute
it freely, subject to the following restrictions:</p>
<ol dir="auto">
<li>
<p dir="auto">The origin of this software must not be misrepresented;
you must not claim that you wrote the original software.
If you use this software in a product, an acknowledgment
in the product documentation would be appreciated but
is not required.</p>
</li>
<li>
<p dir="auto">Altered source versions must be plainly marked as such,
and must not be misrepresented as being the original software.</p>
</li>
<li>
<p dir="auto">This notice may not be removed or altered from any
source distribution.</p>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">zip code</h2><a id="user-content-zip-code" aria-label="Permalink: zip code" href="#zip-code"></a></p>
<p dir="auto">See UNLICENSE in zip directory.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">WATTCP</h2><a id="user-content-wattcp" aria-label="Permalink: WATTCP" href="#wattcp"></a></p>
<p dir="auto">See manual.txt in watt32 directory.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">OpenSSL</h2><a id="user-content-openssl" aria-label="Permalink: OpenSSL" href="#openssl"></a></p>
<p dir="auto">The OpenSSL toolkit stays under a double license, i.e. both the conditions of
the OpenSSL License and the original SSLeay license apply to the toolkit.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">cURL</h2><a id="user-content-curl" aria-label="Permalink: cURL" href="#curl"></a></p>
<p dir="auto">See COPYING in curl directory.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">genann</h2><a id="user-content-genann" aria-label="Permalink: genann" href="#genann"></a></p>
<p dir="auto">See LICENSE in neural.dxelib.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">sqlite</h2><a id="user-content-sqlite" aria-label="Permalink: sqlite" href="#sqlite"></a></p>
<p dir="auto">See LICENSE.md in sqlite.dxelib.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">libcpuid</h2><a id="user-content-libcpuid" aria-label="Permalink: libcpuid" href="#libcpuid"></a></p>
<p dir="auto">See COPYING in cpuid.dxelib.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">nanosvg</h2><a id="user-content-nanosvg" aria-label="Permalink: nanosvg" href="#nanosvg"></a></p>
<p dir="auto">See LICENSE.txt in nanosvg.dxelib.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">noise</h2><a id="user-content-noise" aria-label="Permalink: noise" href="#noise"></a></p>
<p dir="auto">See LICENSE.md in noise.dxelib.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">nanojpeg</h2><a id="user-content-nanojpeg" aria-label="Permalink: nanojpeg" href="#nanojpeg"></a></p>
<p dir="auto">See nanojpeg.c in jpeg.dxelib.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">nanojpeg</h2><a id="user-content-nanojpeg-1" aria-label="Permalink: nanojpeg" href="#nanojpeg-1"></a></p>
<p dir="auto">See LICENSE in gifanim.dxelib.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Command line</h2><a id="user-content-command-line" aria-label="Permalink: Command line" href="#command-line"></a></p>
<div data-snippet-clipboard-copy-content="Usage: DOjS.EXE [<flags>] <script> [script parameters]
    -r             : Do not invoke the editor, just run the script.
    -l             : Use 50-line mode in the editor.
    -w <width>     : Screen width: 320 or 640, Default: 640.
    -b <bpp>       : Bit per pixel:8, 16, 24, 32. Default: 32.
    -s             : No wave sound.
    -f             : No FM sound.
    -a             : Disable alpha (speeds up rendering).
    -x             : Allow raw disk write (CAUTION!)
    -t             : Disable TCP-stack
    -n             : Disable JSLOG.TXT.
    -j <file>      : Redirect JSLOG.TXT to <file>."><pre><code>Usage: DOjS.EXE [&lt;flags&gt;] &lt;script&gt; [script parameters]
    -r             : Do not invoke the editor, just run the script.
    -l             : Use 50-line mode in the editor.
    -w &lt;width&gt;     : Screen width: 320 or 640, Default: 640.
    -b &lt;bpp&gt;       : Bit per pixel:8, 16, 24, 32. Default: 32.
    -s             : No wave sound.
    -f             : No FM sound.
    -a             : Disable alpha (speeds up rendering).
    -x             : Allow raw disk write (CAUTION!)
    -t             : Disable TCP-stack
    -n             : Disable JSLOG.TXT.
    -j &lt;file&gt;      : Redirect JSLOG.TXT to &lt;file&gt;.
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">dojs.ini</h2><a id="user-content-dojsini" aria-label="Permalink: dojs.ini" href="#dojsini"></a></p>
<p dir="auto">All command line options can also be provided in <code>dojs.ini</code> (which is read at startup from the current directory). See the included example for details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Editor keys</h2><a id="user-content-editor-keys" aria-label="Permalink: Editor keys" href="#editor-keys"></a></p>
<div data-snippet-clipboard-copy-content="    F1        : Open/Close help
    SHIFT-F1  : Function context help
    F3        : Save script
    F4        : Run script
    F7        : Find text
    F9        : Show/Close logfile
    F10       : Quit

    Shift-F4       : Truncate logfile and run script
    Shift-F7       : Find again
    CTRL-D         : Delete current line
    SHIFT+Movement : Select text, releasing SHIFT deselects
    CTRL-C         : Copy selection
    CTRL-X         : Cut selection
    CTRL-V         : Paste
    CTRL-LEFT      : Previous word
    CTRL-RIGHT     : Next word
    CTRL/PAGE-UP   : One page up
    CTRL/PAGE-DOWN : One page down
    HOME           : Go to start of line
    END            : Go to end of line
    CTRL-HOME      : Go to start of line
    CTRL-END       : Go to end of line
    TAB            : Insert spaces until next TAB-stop at cursor
    SHIFT-TAB      : Reduce indentation of line

    TAB size is 4.
    The help viewer will remember the current position.

    The logfile can be truncated by pressing DEL in the log viewer."><pre><code>    F1        : Open/Close help
    SHIFT-F1  : Function context help
    F3        : Save script
    F4        : Run script
    F7        : Find text
    F9        : Show/Close logfile
    F10       : Quit

    Shift-F4       : Truncate logfile and run script
    Shift-F7       : Find again
    CTRL-D         : Delete current line
    SHIFT+Movement : Select text, releasing SHIFT deselects
    CTRL-C         : Copy selection
    CTRL-X         : Cut selection
    CTRL-V         : Paste
    CTRL-LEFT      : Previous word
    CTRL-RIGHT     : Next word
    CTRL/PAGE-UP   : One page up
    CTRL/PAGE-DOWN : One page down
    HOME           : Go to start of line
    END            : Go to end of line
    CTRL-HOME      : Go to start of line
    CTRL-END       : Go to end of line
    TAB            : Insert spaces until next TAB-stop at cursor
    SHIFT-TAB      : Reduce indentation of line

    TAB size is 4.
    The help viewer will remember the current position.

    The logfile can be truncated by pressing DEL in the log viewer.
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Scripts and resources</h2><a id="user-content-scripts-and-resources" aria-label="Permalink: Scripts and resources" href="#scripts-and-resources"></a></p>
<p dir="auto">Scripts, as well as resources can either be stored in the file system or in ZIP files. To load data from a zip file the format is <code>&lt;ZIP filename&gt;=&lt;ZIP entry name&gt;</code> (e.g. <code>data.zip=mypic.bmp</code>). DOjS can be started with a script, a script in a ZIP file or no parameters. If the script was loaded from a ZIP file the running script can obtain resources from the same ZIP file by using <code>ZipPrefix()</code> to obtain paths refering to that ZIP. If the script was not started from a ZIP <code>ZipPrefix()</code> just passes through the file name (thus loading the file from HDD). If no arameters are supplied DOjS will first try to load <code>&lt;name of the EXE&gt;.ZIP=MAIN.JS</code> and then <code>JSBOOT.ZIP=MAIN.JS</code>.
Examples:</p>
<ul dir="auto">
<li><code>DOJS.EXE -r script.js</code> will start <code>script.js</code> from the HDD, <code>ZipPrefix("pic.bmp")</code> will yield <code>pic.bmp</code>.</li>
<li><code>DOJS.EXE -r data.zip=script.js</code> will start <code>script.js</code> from the ZIP file <code>data.zip</code>, <code>ZipPrefix("pic.bmp")</code> will yield <code>data.zip=pic.bmp</code>.</li>
<li><code>HURTZ.EXE</code> DOjS was renamed to <code>HURTZ.EXE</code>. It will start <code>MAIN.JS</code> from the ZIP file <code>HURTZ.ZIP</code>, <code>ZipPrefix("pic.bmp")</code> will yield <code>HURTZ.ZIP=pic.bmp</code>.</li>
<li><code>DOJS.EXE</code> The script was added to <code>JSBOOT.ZIP</code>. DOjS will start <code>MAIN.JS</code> from the ZIP file <code>JSBOOT.ZIP</code>, <code>ZipPrefix("pic.bmp")</code> will yield <code>JSBOOT.ZIP=pic.bmp</code>.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">API documentation</h2><a id="user-content-api-documentation" aria-label="Permalink: API documentation" href="#api-documentation"></a></p>
<p dir="auto">You can find the full API doc in the <a href="http://htmlpreview.github.io/?https://github.com/SuperIlu/DOjS/blob/master/doc/html/index.html" rel="nofollow">doc/html/</a> directory.
Go to the p5.js hompage for <a href="https://p5js.org/reference/" rel="nofollow">p5.js reference</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Script format</h2><a id="user-content-script-format" aria-label="Permalink: Script format" href="#script-format"></a></p>
<p dir="auto">Scripts need to provide three functions: <code>Setup()</code>, <code>Loop()</code> and <code>Input()</code>. Scripts are loaded and executed top-own. After that <code>Setup()</code> is called once and then <code>Loop()</code> repeatedly. <code>Input()</code> is called whenever mouse of keyboard input happens.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Setup()</h3><a id="user-content-setup" aria-label="Permalink: Setup()" href="#setup"></a></p>
<p dir="auto">This function is called once at startup. It can initialize variables, setup hardware, etc.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Loop()</h3><a id="user-content-loop" aria-label="Permalink: Loop()" href="#loop"></a></p>
<p dir="auto">This function is called after setup repeatedly until <code>Stop()</code> is called. After calling <code>Stop()</code> the program ends when <code>Loop()</code> exits.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Input(event)</h3><a id="user-content-inputevent" aria-label="Permalink: Input(event)" href="#inputevent"></a></p>
<p dir="auto">This function is called whenever mouse/keyboard input happens.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">IPX networking</h2><a id="user-content-ipx-networking" aria-label="Permalink: IPX networking" href="#ipx-networking"></a></p>
<p dir="auto">DOjS supports IPX networking. Node addresses are arrays of 6 numbers between 0-255. Default socket number and broadcast address definitions can be found in <code>jsboot/ipx.js</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Drawing functions</h2><a id="user-content-drawing-functions" aria-label="Permalink: Drawing functions" href="#drawing-functions"></a></p>
<p dir="auto">See API doc for details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Processing/p5js compatibility layer</h2><a id="user-content-processingp5js-compatibility-layer" aria-label="Permalink: Processing/p5js compatibility layer" href="#processingp5js-compatibility-layer"></a></p>
<p dir="auto">Add <code>Include('p5');</code> as first line to your script. After that you have (limited) <a href="https://p5js.org/reference/" rel="nofollow">p5.js</a> compatibility.
Things that don't work:</p>
<ul dir="auto">
<li>Anything 3D (objects, lights camera, etc)</li>
<li>Key release events work different for Allegro and are simulated for p5js.</li>
<li>Only simple vertices are supported.</li>
<li>no DOM</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Logfile</h2><a id="user-content-logfile" aria-label="Permalink: Logfile" href="#logfile"></a></p>
<p dir="auto">All output via <code>Print()</code> and <code>Println()</code> is sent to the file <code>JSLOG.TXT</code>. You can use <code>Debug()</code> instead and output is only generated when you set the global variable <code>DEBUG=true</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Remote logging/debugging</h2><a id="user-content-remote-loggingdebugging" aria-label="Permalink: Remote logging/debugging" href="#remote-loggingdebugging"></a></p>
<p dir="auto">This feature allows you to debug a running script via IPX networking and a second machine. To use remote logging do the following:</p>
<ul dir="auto">
<li>Put both machines on the same network.</li>
<li>Run <code>DOJS.EXE -r JSBOOT\LOGVIEW.JS</code> on one machine.</li>
<li>Enable debugging by setting <code>DEBUG=true</code> and enable remote debugging by <code>REMOTE_DEBUG=true</code>. You can either modify <code>JSBOOT\FUNC.JS</code> or change the variables at the very beginning of your script.</li>
</ul>
<p dir="auto">This works fine with two instances of DOSBox as well.
Please note that if the log messages are transmitted to fast the receiving instance of DOJS might skip some of these when displaying.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Defrag the Game (222 pts)]]></title>
            <link>https://defrag-game.com</link>
            <guid>41424371</guid>
            <pubDate>Mon, 02 Sep 2024 11:08:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://defrag-game.com">https://defrag-game.com</a>, See on <a href="https://news.ycombinator.com/item?id=41424371">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><span>Choose a drive to defrag:</span></p><div><div><p><span>Drive C</span></p><p><span>Size: 1KB</span><span>(Easy)</span></p></div><div><p><span>Drive D</span></p><p><span>Size: 128Kb</span><span>(Normal)</span></p></div><div><p><span>Drive E</span></p><p><span>Size: 1MB</span><span>(Hard)</span></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Upgrading a Toshiba NAS HDD Firmware on Linux (131 pts)]]></title>
            <link>https://syscall.eu/blog/2024/08/28/toshiba_hdd_firmware/</link>
            <guid>41423577</guid>
            <pubDate>Mon, 02 Sep 2024 08:20:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://syscall.eu/blog/2024/08/28/toshiba_hdd_firmware/">https://syscall.eu/blog/2024/08/28/toshiba_hdd_firmware/</a>, See on <a href="https://news.ycombinator.com/item?id=41423577">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <h2>Upgrading a Toshiba NAS HDD firmware on Linux</h2>
  <p><span>28 Aug 2024</span></p><h2 id="tldr">TL;DR</h2>

<p>I reversed the firmware updater of my Toshiba HDD to be able to update it on Linux.
The following commands <strong>should</strong> work, <strong>USE AT YOUR OWN RISK</strong>:</p>

<div><pre><code>$ wget https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/ISFw.dat
$ grep -C2 MODELNAME ISFw.dat
 # ^
 #&nbsp;|___ identify the right filename here
$ wget https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/sk060202.ftd
# hdparm --fwdownload-mode3 sk060202.ftd /dev/sdX
</code></pre></div>

<h2 id="context">Context</h2>

<p>I bought a Toshiba HDWG480 HDD for my NAS. <code>hdparm -I /dev/XXX</code> gives the following output:</p>

<div><pre><code>ATA device, with non-removable media
        Model Number:       TOSHIBA HDWG480
        Serial Number:      3430A00RFR0H
        Firmware Revision:  0601
        Transport:          Serial, ATA8-AST, SATA 1.0a, SATA II Extensions, SATA Rev 2.5, SATA Rev 2.6, SATA Rev 3.0
Standards:
        Used: unknown (minor revision code 0x006d)
        Supported: 10 9 8 7 6 5
        Likely used: 10
[...]
</code></pre></div>

<p>As usual, I wanted to check if any firmware update is available. Toshiba’s <a href="https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/en.htm">dedicated webpage</a> lists version <code>0602</code> as available for my model.</p>

<p>Unfortunately, as expected, there’s no firmware update process provided for Linux users, only an “Internal Storage Firmware Update Utility” is provided for Windows.</p>

<p>Update files are not provided either.</p>

<h3 id="goals">Goals</h3>

<p>So, our goals are:</p>

<ul>
  <li>understand where the updater gets its update files from</li>
  <li>reverse engineer the flashing process itself to reimplement it on Linux</li>
</ul>

<h2 id="reversing-the-windows-updater">Reversing the Windows Updater</h2>

<h3 id="intro">Intro</h3>

<p>Running the <a href="https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/exe/InternalStorageFwUpdateUtility_1.20.0410.exe">installer</a><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup> with Wine works perfectly, resulting in the following files being installed under <code>Program Files (x86)</code>:</p>

<div><pre><code>  18312 ISFw.exe:        PE32 executable (native) Intel 80386, for MS Windows, 4 sections
2434952 TosISFw.exe:     PE32 executable (GUI) Intel 80386, for MS Windows, 5 sections
2172296 TosISFwSvc.exe:  PE32 executable (GUI) Intel 80386, for MS Windows, 5 sections
2362248 TosISFwTray.exe: PE32 executable (GUI) Intel 80386, for MS Windows, 5 sections
</code></pre></div>

<p>A quick look (filename, imports) hints at the following goals for each program:</p>

<ul>
  <li><code>ISFW.exe</code> is a driver (<code>DriverEntry</code> export), probably in charge of effectively flashing the update.</li>
  <li><code>TosISFw.exe</code> is the GUI</li>
  <li><code>TosISFwSvc.exe</code> is the userland service (as the service related imports show)</li>
  <li><code>TosISFwTray.exe</code> most probably handles a tray icon</li>
</ul>

<h3 id="finding-the-update-files">Finding the update files</h3>

<p>The obvious move is too grep for URLs in the various installed binaries. Unfortunately, it leads nowhere apart from URLs related to the digital signatures. However, grepping for <code>HttpOpenRequest</code>, an API often used by Windows programs to download files, gives two results: <code>TosISFw.exe</code> and <code>TosISFwSvc.exe</code>.</p>

<p>Let’s look at <code>TosISFwSvc.exe</code> which is smaller and let’s see if we can find the URL by checking the xrefs.</p>

<p>The call is in the function at 0x00401040, and looks like this:</p>

<div><pre><code><span>v15</span> <span>=</span> <span>HttpOpenRequestW</span><span>(</span><span>v14</span><span>,</span> <span>L"GET"</span><span>,</span> <span>&amp;</span><span>v36</span><span>[(</span><span>_DWORD</span><span>)</span><span>lpBuffer</span><span>],</span> <span>0</span><span>,</span> <span>(</span><span>LPCWSTR</span><span>)</span><span>szReferrer</span><span>,</span> <span>0</span><span>,</span> <span>0x84000000</span><span>,</span> <span>0</span><span>);</span>
</code></pre></div>

<p>the function is obviously a “download” helper, as all the API calls show. Let’s rename it <code>dlfile</code>. There are only two Xrefs to dlfile:</p>

<div><pre><code><span>if</span> <span>(</span> <span>!</span><span>RegOpenKeyExW</span><span>(</span>
        <span>HKEY_LOCAL_MACHINE</span><span>,</span>
        <span>L"SYSTEM</span><span>\\</span><span>CurrentControlSet</span><span>\\</span><span>Services</span><span>\\</span><span>TosISFwSvc"</span><span>,</span>
        <span>0</span><span>,</span>
        <span>0x20019u</span><span>,</span>
        <span>&amp;</span><span>phkResult</span><span>)</span>
  <span>&amp;&amp;</span> <span>readregstring</span><span>((</span><span>LPBYTE</span><span>)</span><span>&amp;</span><span>String</span><span>,</span> <span>&amp;</span><span>phkResult</span><span>,</span> <span>L"FwURL"</span><span>)</span>
  <span>&amp;&amp;</span> <span>lstrlenW</span><span>(</span><span>&amp;</span><span>String</span><span>)</span> <span>)</span>
<span>{</span>
  <span>sub_401000</span><span>();</span>
  <span>LOBYTE</span><span>(</span><span>v47</span><span>)</span> <span>=</span> <span>2</span><span>;</span>
  <span>if</span> <span>(</span> <span>dlfile</span><span>(</span><span>&amp;</span><span>String</span><span>,</span> <span>(</span><span>int</span><span>)</span><span>v38</span><span>)</span> <span>)</span>


<span>[...]</span>

<span>sub_4052E0</span><span>(</span><span>&amp;</span><span>lpValueName</span><span>,</span> <span>L"%s%d"</span><span>,</span> <span>L"URL"</span><span>,</span> <span>phkResult</span><span>);</span>
<span>v25</span> <span>=</span> <span>0</span><span>;</span>
<span>if</span> <span>(</span> <span>!</span><span>RegOpenKeyExW</span><span>(</span>
        <span>HKEY_LOCAL_MACHINE</span><span>,</span>
        <span>L"SYSTEM</span><span>\\</span><span>CurrentControlSet</span><span>\\</span><span>Services</span><span>\\</span><span>TosISFwSvc"</span><span>,</span>
        <span>0</span><span>,</span>
        <span>0x20019u</span><span>,</span>
        <span>&amp;</span><span>v25</span><span>)</span>
  <span>&amp;&amp;</span> <span>readregstring</span><span>((</span><span>LPBYTE</span><span>)</span><span>&amp;</span><span>String</span><span>,</span> <span>&amp;</span><span>v25</span><span>,</span> <span>lpValueName</span><span>)</span>
  <span>&amp;&amp;</span> <span>lstrlenW</span><span>(</span><span>&amp;</span><span>String</span><span>)</span>
  <span>&amp;&amp;</span> <span>dlfile</span><span>(</span><span>&amp;</span><span>String</span><span>,</span> <span>(</span><span>int</span><span>)</span><span>v36</span><span>)</span> <span>)</span>
</code></pre></div>

<p>The first one gives us our answer: the URL is stored in the registry. It’s actually written by the InstallShield setup.</p>

<p><a href="https://syscall.eu/blog/public/toshiba/regedit.png"><img src="https://syscall.eu/blog/public/toshiba/regedit.png" alt="disk"></a></p>

<p>The value is <code>http://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/ISFw.dat</code></p>

<h3 id="parsing-the-update-file">Parsing the update file</h3>

<p>The file is an ini file, which is trivial to read and parse:</p>

<div><pre><code><span>[VERS]</span>
<span>VERSION</span><span>=</span><span>"20240513"</span>
<span>[Firmware]</span>
<span>0000</span><span>=</span><span>qa060378.ftd</span>
<span>0000model</span><span>=</span><span>"TOSHIBA HDWG21E"</span>
<span>0000rev</span><span>=</span><span>"0603"</span>
<span>0000rev0000</span><span>=</span><span>"0601"</span>
<span>0000native</span><span>=</span><span>0</span>
<span>0000option</span><span>=</span><span>0</span>
<span>0001</span><span>=</span><span>qa060378.ftd</span>
<span>0001model</span><span>=</span><span>"TOSHIBA HDWG21C"</span>
<span>0001rev</span><span>=</span><span>"0603"</span>
<span>0001rev0000</span><span>=</span><span>"0601"</span>
<span>0001native</span><span>=</span><span>0</span>
<span>0001option</span><span>=</span><span>0</span>
<span>[...]</span>
<span>0008</span><span>=</span><span>sk060202.ftd</span>
<span>0008model</span><span>=</span><span>"TOSHIBA HDWG480 "</span>
<span>0008rev</span><span>=</span><span>"0602"</span>
<span>0008rev0000</span><span>=</span><span>"0601"</span>
<span>0008native</span><span>=</span><span>0</span>
<span>0008option</span><span>=</span><span>0</span>
<span>[...]</span>
<span>; 905CBD24
</span></code></pre></div>

<p>in my case, the drive is number 8. What’s interesting is the checksum at the end. It’s the CRC32 of the file, minus the last 10 bytes, which can be easily checked with the <code>slice</code> and <code>crc32</code> tools of my hacking Swiss army knife <a href="https://github.com/trou/rsbkb">rsbkb</a>:</p>

<div><pre><code>$ slice -- ISFw.dat 0 -10 | crc32
905cbd24
</code></pre></div>

<p>Now obviously, let’s try to download the relevant file:</p>

<div><pre><code>$ wget https://www.canvio.jp/en/support/download/hdd/ot_ihdd/fw/sk060202.ftd
Resolving www.canvio.jp (www.canvio.jp)... 23.72.248.205, 23.72.248.202
Connecting to www.canvio.jp (www.canvio.jp)|23.72.248.205|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1171456 (1.1M)
[...]
</code></pre></div>

<p>Just for fun we can check if <a href="https://github.com/trou/cpu_rec_rs"><code>cpu_rec_rs</code></a> can identify any code in the binary:</p>

<div><pre><code><span>$</span><span> </span>~/tools/cpu_rec_rs/cpu_rec_rs sk060202.ftd
<span>Loading corpus from "/home/trou/tools/cpu_rec_rs/cpu_rec_corpus/*.corpus"
-------------------------------------------------
    File     |   Range    | Detected Architecture
-------------------------------------------------
sk060202.ftd | Whole file | ARMhf
-------------------------------------------------
</span></code></pre></div>

<p>So the firmware is probably running on an ARM SoC (it is).</p>

<h3 id="understanding-the-update-process">Understanding the update process</h3>

<p>Now, how is the file sent to the drive to actually perform the update? Recall that we have 4 binaries and we saw the <code>ISFW.exe</code> is actually a driver.</p>

<p>The <code>DriverEntry</code> function is actually extremely simple:</p>

<div><pre><code><span>NTSTATUS</span> <span>__stdcall</span> <span>DriverEntry</span><span>(</span><span>PDRIVER_OBJECT</span> <span>DriverObject</span><span>,</span> <span>PUNICODE_STRING</span> <span>RegistryPath</span><span>)</span>
<span>{</span>
  <span>int</span> <span>v2</span><span>;</span> <span>// eax</span>

  <span>readregistry</span><span>();</span>
  <span>v2</span> <span>=</span> <span>flashfirmware</span><span>();</span>
  <span>sub_1001812</span><span>(</span><span>v2</span> <span>%</span> <span>100</span> <span>==</span> <span>0</span><span>,</span> <span>1</span><span>,</span> <span>v2</span><span>);</span>
  <span>return</span> <span>NtTerminateProcess</span><span>((</span><span>HANDLE</span><span>)</span><span>0xFFFFFFFF</span><span>,</span> <span>0</span><span>);</span>
<span>}</span>
</code></pre></div>

<p>I’ve already renamed <code>readregistry</code> and <code>flashfirmware</code> as the functions are easy to identify:</p>

<div><pre><code><span>char</span> <span>readregistry</span><span>()</span>
<span>{</span>
  <span>[...]</span>
  <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>DestinationString</span><span>,</span> <span>L"</span><span>\\</span><span>REGISTRY</span><span>\\</span><span>MACHINE</span><span>\\</span><span>SYSTEM</span><span>\\</span><span>CurrentControlSet</span><span>\\</span><span>Services</span><span>\\</span><span>TosISFwSvc"</span><span>);</span>
  <span>[...]</span>
  <span>if</span> <span>(</span> <span>NtOpenKey</span><span>(</span><span>&amp;</span><span>KeyHandle</span><span>,</span> <span>0x20019u</span><span>,</span> <span>&amp;</span><span>ObjectAttributes</span><span>)</span> <span>&gt;=</span> <span>0</span> <span>)</span>
  <span>{</span>
    <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_Serial"</span><span>);</span>
    <span>if</span> <span>(</span> <span>NtQueryValueKey</span><span>(</span><span>KeyHandle</span><span>,</span> <span>&amp;</span><span>ValueName</span><span>,</span> <span>KeyValuePartialInformation</span><span>,</span> <span>KeyValueInformation</span><span>,</span> <span>0x800u</span><span>,</span> <span>&amp;</span><span>ResultLength</span><span>)</span> <span>&gt;=</span> <span>0</span> <span>)</span>
    <span>{</span>
      <span>memcpy</span><span>(</span><span>&amp;</span><span>fwserial</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
       <span>[...]</span>
       <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_CurRev"</span><span>);</span>
       <span>memcpy</span><span>(</span><span>&amp;</span><span>fw_cur</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
        <span>[...]</span>
        <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_NewRev"</span><span>);</span>
        <span>memcpy</span><span>(</span><span>fw_new</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
          <span>[...]</span>
          <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_Model"</span><span>);</span>
          <span>memcpy</span><span>(</span><span>fw_model</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
            <span>[...]</span>
            <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>ValueName</span><span>,</span> <span>L"FW_FWFile"</span><span>);</span>
            <span>wmemcpy</span><span>(</span><span>path</span><span>,</span> <span>L"</span><span>\\</span><span>??</span><span>\\</span><span>"</span><span>,</span> <span>4</span><span>);</span>
            <span>memcpy</span><span>(</span><span>&amp;</span><span>path</span> <span>+</span> <span>4</span><span>,</span> <span>&amp;</span><span>KeyValueInformation</span><span>[</span><span>3</span><span>],</span> <span>KeyValueInformation</span><span>[</span><span>2</span><span>]);</span>
  <span>[...]</span>
<span>}</span>
</code></pre></div>

<p>Registry values (set by <code>TosISFwSvc.exe</code>) are read and copied into global variables, which I renamed according the registry value name.</p>

<p>Here’s the start of <code>flashfirmware</code>:</p>

<div><pre><code><span>int</span> <span>flashfirmware</span><span>()</span>
<span>{</span>
  <span>[...]</span>
  <span>Handle</span> <span>=</span> <span>0</span><span>;</span>
  <span>fwdata</span> <span>=</span> <span>0</span><span>;</span>
  <span>fwsize</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>&amp;</span><span>drivedata</span><span>,</span> <span>0</span><span>,</span> <span>sizeof</span><span>(</span><span>drivedata</span><span>));</span>
  <span>printf</span><span>(</span><span>L"%s Firmware: %s -&gt; %s</span><span>\n</span><span>"</span><span>,</span> <span>fw_model</span><span>,</span> <span>&amp;</span><span>fw_cur</span><span>,</span> <span>fw_new</span><span>);</span>
  <span>printf</span><span>(</span><span>L"DO NOT TURN OFF THE PC WHILE ANY FIRMWARE UPDATE IS RUNNING.</span><span>\n</span><span>"</span><span>);</span>
  <span>printf</span><span>(</span>
    <span>L"Your device may become unusable if you do this and Toshiba is not </span><span>\n</span><span>"</span>
     <span>"responsible for any damage, including any necessary replacement of </span><span>\n</span><span>"</span>
     <span>"the unit, caused by your doing so.</span><span>\n</span><span>"</span><span>);</span>
  <span>HeapHandle</span> <span>=</span> <span>RtlCreateHeap</span><span>(</span><span>2u</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>);</span>
  <span>if</span> <span>(</span> <span>HeapHandle</span> <span>)</span>
  <span>{</span>
    <span>status</span> <span>=</span> <span>readfile</span><span>(</span><span>&amp;</span><span>path</span><span>,</span> <span>&amp;</span><span>fwdata</span><span>,</span> <span>&amp;</span><span>fwsize</span><span>);</span>
    <span>if</span> <span>(</span> <span>!</span><span>(</span><span>status</span> <span>%</span> <span>100</span><span>)</span> <span>)</span>
    <span>{</span>
      <span>Handle</span> <span>=</span> <span>verifydisk</span><span>(</span><span>&amp;</span><span>fwserial</span><span>,</span> <span>&amp;</span><span>fw_cur</span><span>,</span> <span>fw_model</span><span>,</span> <span>&amp;</span><span>drivedata</span><span>);</span>
<span>[...]</span>
</code></pre></div>

<p><code>verifydisk</code> is very important, yet relatively simple (with everything already renamed):</p>

<div><pre><code><span>HANDLE</span> <span>__stdcall</span> <span>verifydisk</span><span>(</span><span>PCWSTR</span> <span>serial</span><span>,</span> <span>PCWSTR</span> <span>cur</span><span>,</span> <span>WCHAR</span> <span>*</span><span>model</span><span>,</span> <span>IDENTIFY_DEVICE_DATA</span> <span>*</span><span>devdata</span><span>)</span>
<span>{</span>
  <span>HANDLE</span> <span>hdl</span><span>;</span> <span>// edi</span>
  <span>UNICODE_STRING</span> <span>cur_</span><span>;</span> <span>// [esp+10h] [ebp-104h] BYREF</span>
  <span>struct</span> <span>_UNICODE_STRING</span> <span>serial_</span><span>;</span> <span>// [esp+18h] [ebp-FCh] BYREF</span>
  <span>UNICODE_STRING</span> <span>model_from_drive_u</span><span>;</span> <span>// [esp+20h] [ebp-F4h] BYREF</span>
  <span>UNICODE_STRING</span> <span>serial_from_drive_u</span><span>;</span> <span>// [esp+28h] [ebp-ECh] BYREF</span>
  <span>UNICODE_STRING</span> <span>model_</span><span>;</span> <span>// [esp+30h] [ebp-E4h] BYREF</span>
  <span>UNICODE_STRING</span> <span>fwrev_from_drive_u</span><span>;</span> <span>// [esp+38h] [ebp-DCh] BYREF</span>
  <span>DWORD</span> <span>*</span><span>drivenumber</span><span>;</span> <span>// [esp+40h] [ebp-D4h]</span>
  <span>HANDLE</span> <span>hdl_</span><span>;</span> <span>// [esp+44h] [ebp-D0h]</span>
  <span>char</span> <span>v14</span><span>;</span> <span>// [esp+4Bh] [ebp-C9h] BYREF</span>
  <span>WCHAR</span> <span>model_from_drive</span><span>[</span><span>50</span><span>];</span> <span>// [esp+4Ch] [ebp-C8h] BYREF</span>
  <span>WCHAR</span> <span>serial_from_drive</span><span>[</span><span>30</span><span>];</span> <span>// [esp+B0h] [ebp-64h] BYREF</span>
  <span>WCHAR</span> <span>fwrev_from_drive</span><span>[</span><span>18</span><span>];</span> <span>// [esp+ECh] [ebp-28h] BYREF</span>

  <span>[...]</span>
  <span>for</span> <span>(</span> <span>drivenumber</span> <span>=</span> <span>0</span><span>;</span> <span>(</span><span>unsigned</span> <span>int</span><span>)</span><span>drivenumber</span> <span>&lt;</span> <span>0x20</span><span>;</span> <span>drivenumber</span> <span>=</span> <span>(</span><span>DWORD</span> <span>*</span><span>)((</span><span>char</span> <span>*</span><span>)</span><span>drivenumber</span> <span>+</span> <span>1</span><span>)</span> <span>)</span>
  <span>{</span>
    <span>[...]</span>
    <span>hdl</span> <span>=</span> <span>opendrive</span><span>((</span><span>char</span><span>)</span><span>drivenumber</span><span>);</span>
    <span>if</span> <span>(</span> <span>!</span><span>hdl</span> <span>)</span>
      <span>break</span><span>;</span>
    <span>if</span> <span>(</span> <span>!</span><span>getdevprop</span><span>(</span><span>hdl</span><span>,</span> <span>&amp;</span><span>bustype</span><span>)</span> <span>||</span> <span>bustype</span> <span>==</span> <span>BusTypeUsb</span> <span>)</span> <span>{</span>
      <span>NtClose</span><span>(</span><span>hdl</span><span>);</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>if</span> <span>(</span> <span>get_IDENTIFY_DEVICE_DATA</span><span>(</span><span>hdl_</span><span>,</span> <span>devdata</span><span>,</span> <span>0x200u</span><span>)</span> <span>)</span> <span>{</span>
        <span>get_drive_serial</span><span>(</span><span>devdata</span><span>,</span> <span>serial_from_drive</span><span>,</span> <span>30</span><span>,</span> <span>1</span><span>);</span>
        <span>get_drive_fw_rev</span><span>(</span><span>devdata</span><span>,</span> <span>fwrev_from_drive</span><span>,</span> <span>18</span><span>,</span> <span>1</span><span>);</span>
        <span>get_drive_model</span><span>(</span><span>devdata</span><span>,</span> <span>model_from_drive</span><span>,</span> <span>50</span><span>,</span> <span>1</span><span>);</span>
        <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>serial_from_drive_u</span><span>,</span> <span>serial_from_drive</span><span>);</span>
        <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>fwrev_from_drive_u</span><span>,</span> <span>fwrev_from_drive</span><span>);</span>
        <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>model_from_drive_u</span><span>,</span> <span>model_from_drive</span><span>);</span>
        <span>if</span> <span>(</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>serial_</span><span>,</span> <span>&amp;</span><span>serial_from_drive_u</span><span>,</span> <span>0</span><span>)</span> <span>)</span>
        <span>{</span>
          <span>if</span> <span>(</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>cur_</span><span>,</span> <span>&amp;</span><span>fwrev_from_drive_u</span><span>,</span> <span>0</span><span>)</span>
            <span>&amp;&amp;</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>model_</span><span>,</span> <span>&amp;</span><span>model_from_drive_u</span><span>,</span> <span>0</span><span>)</span> <span>)</span>
          <span>{</span>
            <span>return</span> <span>hdl_</span><span>;</span>
          <span>}</span>
        <span>}</span>
      <span>}</span>
      <span>NtClose</span><span>(</span><span>hdl_</span><span>);</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>0</span><span>;</span>
<span>}</span>
</code></pre></div>

<h3 id="interacting-with-the-drive">Interacting with the drive</h3>

<h4 id="verifying-the-drive-type">Verifying the drive type</h4>

<p>Let’s dive into the <code>opendrive</code> and <code>getdevprop</code> functions:</p>

<div><pre><code><span>HANDLE</span> <span>__stdcall</span> <span>opendrive</span><span>(</span><span>char</span> <span>Args</span><span>)</span>
<span>{</span>
  <span>[...]</span>
  <span>HANDLE</span> <span>FileHandle</span><span>;</span> <span>// [esp+30h] [ebp-88h] BYREF</span>
  <span>WCHAR</span> <span>SourceString</span><span>[</span><span>64</span><span>];</span> <span>// [esp+34h] [ebp-84h] BYREF</span>

  <span>DestinationString</span><span>.</span><span>Length</span> <span>=</span> <span>0</span><span>;</span>
  <span>*</span><span>(</span><span>_DWORD</span> <span>*</span><span>)</span><span>&amp;</span><span>DestinationString</span><span>.</span><span>MaximumLength</span> <span>=</span> <span>0</span><span>;</span>
  <span>HIWORD</span><span>(</span><span>DestinationString</span><span>.</span><span>Buffer</span><span>)</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>SourceString</span><span>,</span> <span>0</span><span>,</span> <span>sizeof</span><span>(</span><span>SourceString</span><span>));</span>
  <span>FileHandle</span> <span>=</span> <span>0</span><span>;</span>
  <span>wsprintf</span><span>(</span><span>SourceString</span><span>,</span> <span>64</span><span>,</span> <span>(</span><span>wchar_t</span> <span>*</span><span>)</span><span>L"</span><span>\\</span><span>??</span><span>\\</span><span>PhysicalDrive%u"</span><span>,</span> <span>Args</span><span>);</span>
  <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>DestinationString</span><span>,</span> <span>SourceString</span><span>);</span>
  <span>[...]</span>
  <span>NtOpenFile</span><span>(</span><span>&amp;</span><span>FileHandle</span><span>,</span> <span>0x100003u</span><span>,</span> <span>&amp;</span><span>ObjectAttributes</span><span>,</span> <span>&amp;</span><span>IoStatusBlock</span><span>,</span> <span>3u</span><span>,</span> <span>0x20u</span><span>);</span>
  <span>return</span> <span>FileHandle</span><span>;</span>
<span>}</span>

<span>char</span> <span>__stdcall</span> <span>getdevprop</span><span>(</span><span>HANDLE</span> <span>hdl</span><span>,</span> <span>char</span> <span>*</span><span>bustype</span><span>)</span>
<span>{</span>
  <span>char</span> <span>tmp</span><span>;</span> <span>// al</span>
  <span>struct</span> <span>_IO_STATUS_BLOCK</span> <span>IoStatusBlock</span><span>;</span> <span>// [esp+Ch] [ebp-1018h] BYREF</span>
  <span>char</span> <span>*</span><span>bustype_</span><span>;</span> <span>// [esp+14h] [ebp-1010h]</span>
  <span>HANDLE</span> <span>FileHandle</span><span>;</span> <span>// [esp+18h] [ebp-100Ch]</span>
  <span>char</span> <span>retvalue</span><span>;</span> <span>// [esp+1Fh] [ebp-1005h]</span>
  <span>STORAGE_DEVICE_DESCRIPTOR</span> <span>InputBuffer</span><span>;</span> <span>// [esp+20h] [ebp-1004h] BYREF</span>

  <span>FileHandle</span> <span>=</span> <span>hdl</span><span>;</span>
  <span>bustype_</span> <span>=</span> <span>bustype</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Status</span> <span>=</span> <span>0</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Information</span> <span>=</span> <span>0</span><span>;</span>
  <span>retvalue</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0</span><span>,</span> <span>0x1000u</span><span>);</span>
  <span>if</span> <span>(</span> <span>NtDeviceIoControlFile</span><span>(</span> <span>hdl</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>&amp;</span><span>IoStatusBlock</span><span>,</span>
        <span>IOCTL_STORAGE_QUERY_PROPERTY</span><span>,</span>
         <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x1000u</span><span>,</span> <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x1000u</span><span>)</span> <span>&lt;</span> <span>0</span> <span>)</span> <span>{</span>
    <span>tmp</span> <span>=</span> <span>0</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>tmp</span> <span>=</span> <span>InputBuffer</span><span>.</span><span>BusType</span><span>;</span>
    <span>retvalue</span> <span>=</span> <span>1</span><span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span> <span>bustype_</span> <span>)</span>
    <span>*</span><span>bustype_</span> <span>=</span> <span>tmp</span><span>;</span>
  <span>return</span> <span>retvalue</span><span>;</span>
<span>}</span>
</code></pre></div>

<p><code>opendrive</code> returns a handle on a given <code>PhysicalDrive</code>, which is then used by <code>getdevprop</code>’s <a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntdeviceiocontrolfile"><code>NtDeviceIoControlFile</code></a>.
Using IDA’s “standard enums”, I remapped <code>0x2D1400</code> to its readable definition: <a href="https://learn.microsoft.com/en-us/windows/win32/api/winioctl/ni-winioctl-ioctl_storage_query_property"><code>IOCTL_STORAGE_QUERY_PROPERTY</code></a>.</p>

<p>As <code>InputBuffer</code> is set to 0 before the call, the returned data is a <code>STORAGE_DEVICE_DESCRIPTOR</code> structure, which is used by <code>verifydisk</code> to verify if the drive is connected through USB (<code>BusTypeUsb</code>) and bails out if that’s the case.</p>

<h4 id="verifying-the-drive-model">Verifying the drive model</h4>

<p><code>get_IDENTIFY_DEVICE_DATA</code> is then called by <code>verifydisk</code>:</p>

<div><pre><code><span>char</span> <span>__stdcall</span> <span>get_IDENTIFY_DEVICE_DATA</span><span>(</span><span>HANDLE</span> <span>hdl</span><span>,</span> <span>void</span> <span>*</span><span>buff</span><span>,</span> <span>size_t</span> <span>Size</span><span>)</span>
<span>{</span>
  <span>struct</span> <span>_IO_STATUS_BLOCK</span> <span>IoStatusBlock</span><span>;</span> <span>// [esp+Ch] [ebp-3Ch] BYREF</span>
  <span>HANDLE</span> <span>FileHandle</span><span>;</span> <span>// [esp+14h] [ebp-34h]</span>
  <span>char</span> <span>v6</span><span>;</span> <span>// [esp+1Bh] [ebp-2Dh]</span>
  <span>ATA_PASS_THROUGH_DIRECT</span> <span>InputBuffer</span><span>;</span> <span>// [esp+1Ch] [ebp-2Ch] BYREF</span>

  <span>FileHandle</span> <span>=</span> <span>hdl</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Status</span> <span>=</span> <span>0</span><span>;</span>
  <span>v6</span> <span>=</span> <span>0</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Information</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>buff</span><span>,</span> <span>0</span><span>,</span> <span>Size</span><span>);</span>
  <span>memset</span><span>(</span><span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0</span><span>,</span> <span>sizeof</span><span>(</span><span>InputBuffer</span><span>));</span>
  <span>InputBuffer</span><span>.</span><span>Length</span> <span>=</span> <span>0x28</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>AtaFlags</span> <span>=</span> <span>ATA_FLAGS_DRDY_REQUIRED</span><span>|</span><span>ATA_FLAGS_DATA_IN</span><span>|</span><span>ATA_FLAGS_NO_MULTIPLE</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>DataTransferLength</span> <span>=</span> <span>Size</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>TimeOutValue</span> <span>=</span> <span>10</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>DataBuffer</span> <span>=</span> <span>buff</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Command</span><span>]</span> <span>=</span> <span>0xEC</span><span>;</span>
  <span>if</span> <span>(</span> <span>NtDeviceIoControlFile</span><span>(</span><span>hdl</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>&amp;</span><span>IoStatusBlock</span><span>,</span>
         <span>IOCTL_ATA_PASS_THROUGH_DIRECT</span><span>,</span>
         <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x28u</span><span>,</span> <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x28u</span><span>)</span> <span>&gt;=</span> <span>0</span>
    <span>&amp;&amp;</span> <span>(</span><span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Status</span><span>]</span> <span>&amp;</span> <span>9</span><span>)</span> <span>==</span> <span>0</span> <span>)</span>
  <span>{</span>
    <span>return</span> <span>1</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>v6</span><span>;</span>
<span>}</span>
</code></pre></div>

<p><code>NtDeviceIoControlFile</code> is now used with <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddscsi/ni-ntddscsi-ioctl_ata_pass_through_direct"><code>IOCTL_ATA_PASS_THROUGH_DIRECT</code></a>, which as the name implies, sends a raw ATA command to the drive. Actually understanding the request is a bit complex as the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddscsi/ns-ntddscsi-_ata_pass_through_direct"><code>ATA_PASS_THROUGH_DIRECT</code></a> structure specifies both data buffers and “registers” through the <code>CurrentTaskFile</code> field.</p>

<p><code>CurrentTaskFile</code> is an array used to index 8 registers, both as input and output. Using the documentation, we can create two enums to use in IDA:</p>

<div><pre><code><span>enum</span> <span>ATA_INPUT_REGISTERS</span> <span>:</span> <span>__int32</span>
<span>{</span>
  <span>reg_Features</span> <span>=</span> <span>0x0</span><span>,</span>
  <span>reg_Sector_Count_in</span> <span>=</span> <span>0x1</span><span>,</span>
  <span>reg_Sector_Number_in</span> <span>=</span> <span>0x2</span><span>,</span>
  <span>reg_Cylinder_Low_in</span> <span>=</span> <span>0x3</span><span>,</span>
  <span>reg_Cylinder_High_in</span> <span>=</span> <span>0x4</span><span>,</span>
  <span>reg_Device_Head_in</span> <span>=</span> <span>0x5</span><span>,</span>
  <span>reg_Command</span> <span>=</span> <span>0x6</span><span>,</span>
  <span>reg_Reserved</span> <span>=</span> <span>0x7</span><span>,</span>
<span>};</span>

<span>enum</span> <span>ATA_OUTPUT_REGISTERS</span> <span>:</span> <span>__int32</span>
<span>{</span>
  <span>reg_Error</span> <span>=</span> <span>0x0</span><span>,</span>
  <span>reg_Sector_Count_out</span> <span>=</span> <span>0x1</span><span>,</span>
  <span>reg_Sector_Number_out</span> <span>=</span> <span>0x2</span><span>,</span>
  <span>reg_Cylinder_Low_out</span> <span>=</span> <span>0x3</span><span>,</span>
  <span>reg_Cylinder_High_out</span> <span>=</span> <span>0x4</span><span>,</span>
  <span>reg_Device_Head_out</span> <span>=</span> <span>0x5</span><span>,</span>
  <span>reg_Status</span> <span>=</span> <span>0x6</span><span>,</span>
  <span>reg_Reserved_out</span> <span>=</span> <span>0x7</span><span>,</span>
<span>};</span>
</code></pre></div>

<p>So the command here is <code>0xEC</code>. The ATA/ATAPI command set specification, found <a href="https://read.seas.harvard.edu/cs161/2024/pdf/ata-atapi-8.pdf">here</a>, describes the <code>IDENTIFY DEVICE – ECh, PIO Data-In</code> command, which returns a <em>lot</em> of data. Thankfully, Microsoft gives us the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ata/ns-ata-_identify_device_data"><code>IDENTIFY_DEVICE_DATA</code></a> structure which has everything.</p>

<p>The following code then verify we have the “right” drive by comparing the serial, model and firmware version from the returned data to the ones stored in the registry.</p>

<div><pre><code><span>int</span> <span>__stdcall</span> <span>get_drive_serial</span><span>(</span><span>IDENTIFY_DEVICE_DATA</span> <span>*</span><span>drivedata</span><span>,</span> <span>wchar_t</span> <span>*</span><span>dest</span><span>,</span> <span>int</span> <span>destlen</span><span>,</span> <span>char</span> <span>stripflag</span><span>)</span>
<span>{</span>
  <span>return</span> <span>(</span><span>int</span><span>)</span><span>getdrive_data_string</span><span>(</span> <span>drivedata</span><span>,</span> <span>dest</span><span>,</span> <span>destlen</span><span>,</span>
                <span>offsetof</span><span>(</span><span>IDENTIFY_DEVICE_DATA</span><span>,</span> <span>SerialNumber</span><span>),</span> <span>20</span><span>,</span>
                <span>stripflag</span><span>);</span>
<span>}</span>

  <span>[...]</span>
  <span>get_drive_serial</span><span>(</span><span>devdata</span><span>,</span> <span>serial_from_drive</span><span>,</span> <span>30</span><span>,</span> <span>1</span><span>);</span>
  <span>[...]</span>
  <span>RtlInitUnicodeString</span><span>(</span><span>&amp;</span><span>serial_from_drive_u</span><span>,</span> <span>serial_from_drive</span><span>);</span>
  <span>[...]</span>
  <span>if</span> <span>(</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>serial_</span><span>,</span> <span>&amp;</span><span>serial_from_drive_u</span><span>,</span> <span>0</span><span>)</span> <span>)</span>
        <span>{</span>
          <span>if</span> <span>(</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>cur_</span><span>,</span> <span>&amp;</span><span>fwrev_from_drive_u</span><span>,</span> <span>0</span><span>)</span>
            <span>&amp;&amp;</span> <span>RtlEqualUnicodeString</span><span>(</span><span>&amp;</span><span>model_</span><span>,</span> <span>&amp;</span><span>model_from_drive_u</span><span>,</span> <span>0</span><span>)</span> <span>)</span>
</code></pre></div>

<h4 id="actually-sending-the-firmware-file">Actually sending the firmware file</h4>

<p>Once the driver has identified and verified the disk is actually flashable, it proceeds with the actual update:</p>

<div><pre><code><span>[...]</span>
      <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>=</span> <span>drivedata</span><span>.</span><span>MaxBlocksPerDownloadMicrocodeMode03</span><span>;</span>
      <span>if</span> <span>(</span> <span>!</span><span>drivedata</span><span>.</span><span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>||</span> <span>drivedata</span><span>.</span><span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>==</span> <span>0xFFFF</span> <span>)</span> <span>{</span>
        <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>=</span> <span>128</span><span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span> <span>drivedata</span><span>.</span><span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>&gt;=</span> <span>0x80u</span> <span>)</span> <span>{</span>
        <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>=</span> <span>128</span><span>;</span>
      <span>}</span>
      <span>if</span> <span>(</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>&gt;=</span> <span>drivedata</span><span>.</span><span>MinBlocksPerDownloadMicrocodeMode03</span>
        <span>&amp;&amp;</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>)</span> <span>{</span>
        <span>fwblocks</span> <span>=</span> <span>fwsize</span> <span>&gt;&gt;</span> <span>9</span><span>;</span>
        <span>fwblocks2</span> <span>=</span> <span>fwsize</span> <span>&gt;&gt;</span> <span>9</span><span>;</span>
        <span>v1</span> <span>=</span> <span>60</span><span>;</span>
        <span>do</span> <span>{</span>
          <span>printprogress</span><span>();</span>
          <span>wait</span><span>((</span><span>LARGE_INTEGER</span><span>)</span><span>500LL</span><span>);</span>
          <span>--</span><span>v1</span><span>;</span>
        <span>}</span> <span>while</span> <span>(</span> <span>v1</span> <span>);</span>
        <span>for</span> <span>(</span> <span>fwsize</span> <span>=</span> <span>0</span><span>;</span> <span>(</span><span>int</span><span>)</span><span>fwsize</span> <span>&lt;</span> <span>30</span><span>;</span> <span>++</span><span>fwsize</span> <span>)</span> <span>{</span>
          <span>currentblock</span> <span>=</span> <span>0</span><span>;</span>
          <span>status</span> <span>=</span> <span>6000</span><span>;</span>
          <span>if</span> <span>(</span> <span>fwblocks</span> <span>)</span> <span>{</span>
            <span>fwdata1</span> <span>=</span> <span>fwdata</span><span>;</span>
            <span>MaxBytesPerDL</span> <span>=</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>&lt;&lt;</span> <span>9</span><span>;</span>
            <span>while</span> <span>(</span> <span>1</span> <span>)</span> <span>{</span>
              <span>printprogress</span><span>();</span>
              <span>blocks_to_flash</span> <span>=</span> <span>fwblocks2</span> <span>-</span> <span>currentblock</span><span>;</span>
              <span>if</span> <span>(</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span> <span>&lt;</span> <span>fwblocks2</span> <span>-</span> <span>currentblock</span> <span>)</span>
                <span>blocks_to_flash</span> <span>=</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span><span>;</span>
              <span>if</span> <span>(</span> <span>!</span><span>ATA_CMD_DOWNLOAD_MICRO</span><span>(</span><span>Handle</span><span>,</span> <span>currentblock</span><span>,</span> <span>blocks_to_flash</span><span>,</span> <span>fwdata1</span><span>)</span> <span>)</span>
                <span>break</span><span>;</span>
              <span>currentblock</span> <span>+=</span> <span>MaxBlocksPerDownloadMicrocodeMode03</span><span>;</span>
              <span>fwdata1</span> <span>+=</span> <span>MaxBytesPerDL</span><span>;</span>
              <span>if</span> <span>(</span> <span>currentblock</span> <span>&gt;=</span> <span>fwblocks2</span> <span>)</span>
                <span>goto</span> <span>LABEL_25</span><span>;</span>
            <span>}</span>
            <span>status</span> <span>=</span> <span>6009</span><span>;</span>
<span>LABEL_25:</span>
            <span>fwblocks</span> <span>=</span> <span>fwblocks2</span><span>;</span>
          <span>}</span>
          <span>if</span> <span>(</span> <span>!</span><span>(</span><span>status</span> <span>%</span> <span>100</span><span>)</span> <span>)</span>
            <span>break</span><span>;</span>
          <span>v5</span> <span>=</span> <span>2</span><span>;</span>
          <span>do</span> <span>{</span>
            <span>printprogress</span><span>();</span>
            <span>wait</span><span>((</span><span>LARGE_INTEGER</span><span>)</span><span>500LL</span><span>);</span>
            <span>--</span><span>v5</span><span>;</span>
          <span>}</span> <span>while</span> <span>(</span> <span>v5</span> <span>);</span>
        <span>}</span>
        <span>if</span> <span>(</span> <span>!</span><span>(</span><span>status</span> <span>%</span> <span>100</span><span>)</span> <span>)</span>
        <span>{</span>
          <span>if</span> <span>(</span> <span>get_IDENTIFY_DEVICE_DATA</span><span>(</span><span>Handle</span><span>,</span> <span>&amp;</span><span>drivedata</span><span>,</span> <span>0x200u</span><span>)</span> <span>)</span> <span>{</span>
            <span>get_drive_fw_rev</span><span>(</span><span>&amp;</span><span>drivedata</span><span>,</span> <span>newfwrev</span><span>,</span> <span>18</span><span>,</span> <span>1</span><span>);</span>
            <span>if</span> <span>(</span> <span>wcsncmp</span><span>(</span><span>fw_new</span><span>,</span> <span>newfwrev</span><span>,</span> <span>wcslen</span><span>(</span><span>fw_new</span><span>))</span> <span>)</span>
              <span>status</span> <span>=</span> <span>6011</span><span>;</span>
          <span>}</span> <span>else</span> <span>{</span>
            <span>status</span> <span>=</span> <span>6010</span><span>;</span>
          <span>}</span>
        <span>}</span>
      <span>}</span> <span>else</span> <span>{</span>
<span>LABEL_35:</span>
        <span>status</span> <span>=</span> <span>6006</span><span>;</span>
      <span>}</span>
  <span>[...]</span>
  <span>if</span> <span>(</span> <span>status</span> <span>%</span> <span>100</span> <span>)</span>
    <span>printf</span><span>(</span><span>L"Update Failed.      </span><span>\n</span><span>"</span><span>);</span>
  <span>else</span>
    <span>printf</span><span>(</span><span>L"Update Succeeded.   </span><span>\n</span><span>"</span><span>);</span>
</code></pre></div>

<p>As you can see, the updater verifies an interesting field from the drive information data: <code>MaxBlocksPerDownloadMicrocodeMode03</code>. Let’s check what this means.</p>

<h3 id="sending-ata-firmware-update-commands">Sending ATA firmware update commands</h3>

<h4 id="documentation">Documentation</h4>

<p>The following excerpt from the ATA command set describes the meaning of the field:</p>

<div><pre><code>A.11.5.3.4 DM MAXIMUM TRANSFER SIZE field
If:
a) the value of the DM MAXIMUM TRANSFER SIZE field (see table A.30) is greater than zero;
b) the value of the DM MAXIMUM TRANSFER SIZE field is less than FFFFh;
c) the DOWNLOAD MICROCODE SUPPORTED bit (see A.11.5.2.20) is set to one or the DOWNLOAD MICROCODE DMA SUPPORTED bit (see A.11.5.2.6) is set to one; and
d) the DM OFFSETS DEFERRED SUPPORTED bit (see A.11.5.3.1) is set to one, or the DM OFFSETS IMMEDIATE
SUPPORTED bit (see A.11.5.3.3) is set to one, then the DM MAXIMUM TRANSFER SIZE field indicates the maximum number of 512-byte data blocks permitted by a DOWNLOAD MICROCODE command (see 7.7) or a DOWNLOAD MICROCODE DMA command (see 7.8) that specifies a subcommand of:
a) Download with offsets and save microcode for immediate and future use (i.e., 03h); or
b) Download with offsets and save microcode for future use (i.e., 0Eh).
Otherwise, no maximum is indicated (i.e., there is no maximum number of 512-byte data blocks).
The IDENTIFY DEVICE data contains a copy of the DM MAXIMUM TRANSFER SIZE field (see IDENTIFY DEVICE
data word 235 in table 45).
</code></pre></div>

<p>Of course, we want to check this <code>DOWNLOAD MICROCODE</code> command:</p>

<div><pre><code>The DOWNLOAD MICROCODE command allows the host to alter the device’s microcode. The data transferred
using the DOWNLOAD MICROCODE command and the DOWNLOAD MICROCODE DMA command is vendor
specific.
[...]
Downloading and activating microcode involves the following steps:
1) download: the host transfers updated microcode data to the device in one or more DOWNLOAD
MICROCODE commands or DOWNLOAD MICROCODE DMA commands;
2) save: after receiving the complete updated microcode data, if specified by the download microcode
mode, then the device shall save the updated microcode data to nonvolatile storage; and
3) activate: the device begins using the saved or deferred microcode data for the first time after an event
specified by the download microcode mode and the saved or deferred microcode data becomes the
active microcode data.

The BLOCK COUNT field specifies the number of 512-byte data blocks that shall be transferred. The BLOCK COUNT
field is specified in the COUNT field and the LBA field (see table 37).
</code></pre></div>

<p><code>DOWNLOAD</code> Subcommands actually define the update behavior:</p>

<p><a href="https://syscall.eu/blog/public/toshiba/download_subcommands.png"><img src="https://syscall.eu/blog/public/toshiba/download_subcommands.png" alt="disk"></a></p>

<h3 id="actual-code">Actual code</h3>

<div><pre><code><span>char</span> <span>ATA_CMD_DOWNLOAD_MICRO</span><span>(</span><span>HANDLE</span> <span>FileHandle</span><span>,</span> <span>__int16</span> <span>currentblock</span><span>,</span> <span>int</span> <span>blocks_to_flash</span><span>,</span> <span>void</span> <span>*</span><span>fwdata</span><span>)</span>
<span>{</span>
  <span>struct</span> <span>_IO_STATUS_BLOCK</span> <span>IoStatusBlock</span><span>;</span> <span>// [esp+Ch] [ebp-38h] BYREF</span>
  <span>char</span> <span>v6</span><span>;</span> <span>// [esp+17h] [ebp-2Dh]</span>
  <span>ATA_PASS_THROUGH_DIRECT</span> <span>InputBuffer</span><span>;</span> <span>// [esp+18h] [ebp-2Ch] BYREF</span>

  <span>IoStatusBlock</span><span>.</span><span>Status</span> <span>=</span> <span>0</span><span>;</span>
  <span>IoStatusBlock</span><span>.</span><span>Information</span> <span>=</span> <span>0</span><span>;</span>
  <span>memset</span><span>(</span><span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0</span><span>,</span> <span>sizeof</span><span>(</span><span>InputBuffer</span><span>));</span>
  <span>InputBuffer</span><span>.</span><span>Length</span> <span>=</span> <span>0x28</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>AtaFlags</span> <span>=</span> <span>ATA_FLAGS_DRDY_REQUIRED</span><span>|</span><span>ATA_FLAGS_DATA_OUT</span><span>|</span><span>ATA_FLAGS_NO_MULTIPLE</span><span>;</span>
  <span>*</span><span>(</span><span>_WORD</span> <span>*</span><span>)</span><span>&amp;</span><span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Sector_Count_in</span><span>]</span> <span>=</span> <span>blocks_to_flash</span><span>;</span><span>// BLOCK COUNT</span>
  <span>*</span><span>(</span><span>_WORD</span> <span>*</span><span>)</span><span>&amp;</span><span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Cylinder_Low_in</span><span>]</span> <span>=</span> <span>currentblock</span><span>;</span><span>// BUFFER OFFSET</span>
  <span>v6</span> <span>=</span> <span>0</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>DataTransferLength</span> <span>=</span> <span>blocks_to_flash</span> <span>&lt;&lt;</span> <span>9</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>TimeOutValue</span> <span>=</span> <span>70</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>DataBuffer</span> <span>=</span> <span>fwdata</span><span>;</span>
  <span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Features</span><span>]</span> <span>=</span> <span>3</span><span>;</span><span>// mode 3</span>
  <span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Device_Head_in</span><span>]</span> <span>=</span> <span>0xE0</span><span>;</span><span>// OBSOLETE7|N/A|OBSOLETE5</span>
  <span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>reg_Command</span><span>]</span> <span>=</span> <span>IDE_COMMAND_DOWNLOAD_MICROCODE</span><span>;</span>
  <span>if</span> <span>(</span> <span>NtDeviceIoControlFile</span><span>(</span><span>FileHandle</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>&amp;</span><span>IoStatusBlock</span><span>,</span>
         <span>IOCTL_ATA_PASS_THROUGH_DIRECT</span><span>,</span>
         <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x28u</span><span>,</span> <span>&amp;</span><span>InputBuffer</span><span>,</span> <span>0x28u</span><span>)</span> <span>&gt;=</span> <span>0</span>
    <span>&amp;&amp;</span> <span>(</span><span>InputBuffer</span><span>.</span><span>CurrentTaskFile</span><span>[</span><span>6</span><span>]</span> <span>&amp;</span> <span>9</span><span>)</span> <span>==</span> <span>0</span> <span>)</span><span>// status</span>
  <span>{</span>
    <span>return</span> <span>1</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>v6</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>As you can see, the <code>ATA_CMD_DOWNLOAD_MICRO</code> just follows the specification. The only weird point is the <code>Device</code> register, which is basically obsolete, but is set to <code>0xE0</code>.
Just to be sure, I checked <code>hdparm</code> source code to see the value set in the command, and indeed, they also set it to <code>0xE0</code>, so it’s probably legacy cruft:</p>

<div><pre><code><span>enum</span> <span>{</span>
	<span>ATA_USING_LBA</span>		<span>=</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>6</span><span>),</span>
	<span>ATA_STAT_DRQ</span>		<span>=</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>3</span><span>),</span>
	<span>ATA_STAT_ERR</span>		<span>=</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>0</span><span>),</span>
<span>};</span>

    <span>[...]</span>
	<span>r</span><span>-&gt;</span><span>lob</span><span>.</span><span>dev</span>   <span>=</span> <span>0xa0</span> <span>|</span> <span>ATA_USING_LBA</span><span>;</span>
</code></pre></div>

<h3 id="conclusion">Conclusion</h3>

<p>So basically, the updater does:</p>

<ul>
  <li>download the list of updates</li>
  <li>check if a drive matches, set registry values</li>
  <li>the driver takes over and:
    <ul>
      <li>checks if the drive is not connected through USB</li>
      <li>verifies it’s the actual drive specified in the registry using the <code>IDENTIFY DEVICE</code> command</li>
      <li>loops and sends the firmware update, 128 512-bytes chunks at a time, using the <code>DOWNLOAD MICROCODE</code> command</li>
      <li>verifies the drive was updated using the <code>IDENTIFY DEVICE</code> command</li>
    </ul>
  </li>
</ul>

<h4 id="actually-doing-the-update">Actually doing the update</h4>

<p>YOLO, I tried on my main NAS drive:</p>

<div><pre><code><span># hdparm -I /dev/sdb | grep Firmware
</span>	<span>Firmware</span> <span>Revision</span><span>:</span>  <span>0601</span>
<span># hdparm --fwdownload-mode3 sk060202.ftd --yes-i-know-what-i-am-doing --please-destroy-my-drive /dev/sdb
</span><span>/</span><span>dev</span><span>/</span><span>sdb</span><span>:</span>
<span>fwdownload</span><span>:</span> <span>xfer_mode</span><span>=</span><span>3</span> <span>min</span><span>=</span><span>1</span> <span>max</span><span>=</span><span>4224</span> <span>size</span><span>=</span><span>512</span>
<span>...............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span>
<span>.</span> <span>Done</span><span>.</span>
<span># hdparm -I /dev/sdb | grep Firmware
</span>	<span>Firmware</span> <span>Revision</span><span>:</span>  <span>0602</span>
</code></pre></div>

<p><strong>\o/</strong></p>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Telephone Line Rural Outside Plant (154 pts)]]></title>
            <link>http://cityinfrastructure.com/single.php?d=RuralOutsidePlant&amp;t=Rural%20Outside%20Plant</link>
            <guid>41423303</guid>
            <pubDate>Mon, 02 Sep 2024 07:21:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://cityinfrastructure.com/single.php?d=RuralOutsidePlant&#x26;t=Rural%20Outside%20Plant">http://cityinfrastructure.com/single.php?d=RuralOutsidePlant&#x26;t=Rural%20Outside%20Plant</a>, See on <a href="https://news.ycombinator.com/item?id=41423303">Hacker News</a></p>
<div id="readability-page-1" class="page">

<br><br>
<span size="-1" color="888888"><br> <a name="1">1</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/OutsidePlant.png" alt="OutsidePlant.png                      ">
</p>
Another section of this web site talked about outside plant, which is the telephone company's term for the cabling and other equipment which connects your home telephone to their Central Office.
<p>This diagram shows an overview, and below are some pictures and descriptions of how outside plant is different for rural areas.
</p><div><p>The main differences are that the Central Offices are typically smaller, and the cable distances are much greater.</p><p><span size="-1" color="888888"><br> <a name="2">2</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3005.jpg" alt="DSCN3005.jpg                          ">
</p>
Here is a typical Central Office. Note it is only one storey, but is still well-kept, and mostly windowless.<span size="-1" color="888888"><br> <a name="3">3</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3008.jpg" alt="DSCN3008.jpg                          ">
</p>
Around back are some air conditioners, technician's trucks, and even a small aluminum motor boat (the technicians working in this area often have to run telephone lines to islands). Also, at the right are some Jumpered Wire Interfaces (JWI), which split the high pair count cables from the Central Office (such as 1,200 pairs) to smaller cables (such as 200 pairs) for distribution to terminals and people's houses.<span size="-1" color="888888"><br> <a name="4">4</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2859.jpg" alt="DSCN2859.jpg                          ">
</p>
Here's another Central Office. This one has a few meters of unused 1,200-pair feeder cable in front (much more attractive than plastic pink flamingos).<span size="-1" color="888888"><br> <a name="5">5</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2852.jpg" alt="DSCN2852.jpg                          ">
</p>
Around back, no security cameras, but there is good lighting, and of course, air conditioners.<span size="-1" color="888888"><br> <a name="6">6</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2853.jpg" alt="DSCN2853.jpg                          ">
</p>
The front door has a mechanical push-button lock, and a discrete sign.<span size="-1" color="888888"><br> <a name="7">7</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2854-1200-pair-PIC.jpg" alt="DSCN2854-1200-pair-PIC.jpg            ">
</p>
Here's a close-up of the 1,200 pair cable. It is about 4 cm in diameter.<span size="-1" color="888888"><br> <a name="8">8</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2858.jpg" alt="DSCN2858.jpg                          ">
</p>
The feeder cables coming out of the Central Office are all buried, but within a few meters of the building, they surface to come be run up a utility pole. Note the ancient lead-covered splice enclosure.<span size="-1" color="888888"><br> <a name="9">9</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2857.jpg" alt="DSCN2857.jpg                          ">
</p>
Here's the top of that utility pole. These cables carry everything that this Central Office does (this is what is called a “single point of failure” – one car accident, and there's a lot of people with no phone service).
<div><p>There's another lead closure at the top-left.</p><p><span size="-1" color="888888"><br> <a name="10">10</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2856.jpg" alt="DSCN2856.jpg                          ">
</p>
As shown in the close-up of the 1,200-pair feeder cable above, cable construction is to have twisted pairs covered by a thick plastic protective jacket. After enough sun and flexing in the wind, the cable jacket can develop leaks, which could allow water to seep in between the cable pairs. This would change the electrical characteristics of the cable, and cause many problems (such as cross-talk between telephone lines and distorted signals). Therefore paper insulated cable (these cables will all be more than 40 years old) and sometimes newer cable) are pressurized with air, typically less than 9 pounds per square inch (for comparison, automobile tires typically have a pressure of more than 30 pounds per square inch). This provides several benefits:
<ul><li>Rather than water seeping into the cable, air will leak out, and this keeps the cable dry.</li>
<li>The flow of air through the cable will dry and remove any moisture that does get into the cable.</li> 
<li>By measuring the pressure along test points in the cable, and graphing this, a technician can determine approximately where the cable jacket is bad (the pressure will be lower where the air leaks out).</li></ul>
<div><p>I'm sure you've seen the little packages of <b>dessicant</b> (which look like restaurant coffee sugar packets) of that often come (along with a warning not to eat it) with electronic and other products which have been shipped from overseas. This stuff is a chemical that likes to absorb water (from the damp ocean crossing), so the moisture won't damage the goods. Similarly, there is a need to ensure that the air used to pressurize the cable is dry, and this blue crystalline material is dessicant, and does just that. The air compressor (or “bottled gas”, where the air comes from a compressed air tank) would be in the Central Office, and feeds the black hose, so the air passes through the dessicant, and the hose continues up the utility pole to pressurize the cables father along.</p><p><span size="-1" color="888888"><br> <a name="11">11</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN2855.jpg" alt="DSCN2855.jpg                          ">
</p>
Here's a close-up of the dessicant canister. It reminds technicians to:
<ul><li>Change the desiccant when it turns pink.</li>
<li>That the maximum pressure allowed is 25 pounds per square inch (automobile tires typically have a pressure of 28 to 40 pounds per square inch).</li>
<li>And to be gentle with it.</li></ul>
This device is made by Jameson Corporation, and is model J-100-8.<span size="-1" color="888888"><br> <a name="12">12</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3431.jpg" alt="DSCN3431.jpg">
</p>
Here is a new air pipe (in an urban location) from a central office, waiting to be connected through to a cable vault farther down the road.<span size="-1" color="888888"><br> <a name="13">13</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3436.jpg" alt="DSCN3436.jpg">
</p>
This air pipe is made by Superior Essex. Their catalogue page is <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/SuperiorEssexAirPipe.pdf" target="_blank">here</a>. It shows that this type of pipe is typically installed in ducts (underground plastic conduits), the pipe has an outside diameter of 18 mm, and has a 4 mil (about the thickness of paper) aluminum tape inside the pipe (since the plastic used would otherwise allow water vapour to pass through the pipe wall (it is important to keep the air dry).<span size="-1" color="888888"><br> <a name="14">14</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3422.jpg" alt="DSCN3422.jpg">
</p>
To split a feeder cable into smaller cables (to each go in different directions) a splice enclosure is needed. Here is a really old lead one (on top), and a newer plastic (and openable) one below it.
<p>Cables with a lead splice closure are old enough that the wires are likely paper insulated (as the bundle of spliced wires is covered in a protective and insulating cloth before the lead closure is sealed with solder, plastic insulated wires can also be enclosed in lead closures, without damage when the lead is sealed with solder).
</p><p>Due to the difficulty of opening and resealing the lead closures, and the health concerns for technicians working with the lead, telephone companies are working at removing this type of closure.
</p><p>Modern buried telephone cables are generally <b>grease filled</b>: when the cable is manufactured, a gel is injected to fill the interstitial spaces between the twisted pairs, so water cannot seep in. In contrast, aerial cables are generally <b>dry</b>, and do not have this gunk.
</p><p>Attached to the lead splice cover is a pressure transducer to enable remote monitoring of the pressure in the cable.
</p><p>A web page for a typical outside plant pressure transducer made by TX Technology Corporation is <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/Type100F_PressureTransducers.pdf" target="_blank">here</a>. This points out that the transducer is designed to measure pressures from 0 to 9.5 pounds per square inch, and has a corresponding output from 100 kΩ to 3,820 kΩ. More detailed information is <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/TX_Technology_PressureTransducerInstallation.pdf" target="_blank">here</a>. It points out that the transducer has a water-tight screw cap (with a knurled edge for finger tightening, and a little ball-chain so it won't be lost if dropped) a which can be removed to set the zero-pressure point for the transducer, according to the altitude at which it is installed.
</p><p>The flexible cable hanging down is the electrical signal from the transducer, and is connected to a pair of wires in the lower cable so the pressure at this location can be remotely monitored at the central office. Because most central office activities (such as changing the telephone line features which subscribers receive and trouble-shooting problems) can now be done remotely, most central offices are not normally staffed. Therefore, the system (at the nearest central office) which monitors all the remote pressure transducers will usually be itself monitored remotely.
</p><div><p>When pressurized cable is spliced to dry or greased-filled cable, a <b>plug</b> must be poured into the end of the pressurized cable, so the air does not leak out.</p><p><span size="-1" color="888888"><br> <a name="15">15</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3036.jpg" alt="DSCN3036.jpg                          ">
</p>
Now we get to a really interesting part. As you drive along rural roads, you'll see what appear to be paint cans, each with a this cable coming out the top. If you're really bored, you may also notice that they are exactly 6,000 feet apart (that would be 1.14 miles, and 1.83 km).
<p>Just as you can walk slowly through water, but cannot easily run (since water is more viscous than air), higher-frequency electrical signals are attenuated (made quieter) more than lower-frequency signals.
</p><p>In urban areas, there are generally enough customers within a 5 km radius of Central Offices to justify building a Central Office, and in 5 km of cable, the signals are not distorted too much. In rural areas, customers are farther apart, and the cable runs to customers are longer. The capacitance of the cable (which is analogous to the greater viscosity of water) would attenuate the high-frequency signals (distorting the sound), so inductors (which counter-act the capacitance) are connected to each pair of wires.
</p><div><p>Since the capacitance is spread-out along the length of the cable, the inductance also has to be distributed along the cable. A popular scheme is called <b>H88</b>: the “H” refers to a distance of 6,000 feet between inductors, and the “88” refers to the inductance value of 88 mH (milliHenrys).</p><p><span size="-1" color="888888"><br> <a name="16">16</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3025.jpg" alt="DSCN3025.jpg                          ">
</p>
As you might have guessed, these therefore are not paint cans, but are the enclosures for the loading coils. If there is a 600-pair cable, then you need 600 loading coils (these look something like little spools of thread), and you need to attach each to the feeder cable.
<div><p>Here there are three old loading coils (two large, and one smaller metal enclosure mounted on the utility pole), and one newer black plastic loading coil enclosure attached (with stainless steel straps) to the cable at the left. A splice enclosure allows the cable from the loading coil enclosures to be spliced to the feeder cable</p><p><span size="-1" color="888888"><br> <a name="17">17</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3026.jpg" alt="DSCN3026.jpg                          ">
</p>
Here's a close-up of those big old loading coil enclosures.<span size="-1" color="888888"><br> <a name="18">18</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3027.jpg" alt="DSCN3027.jpg                          ">
</p>
As more cables are installed, more loading coils are needed. Here's the newest loading coil (cute, isn't it).<span size="-1" color="888888"><br> <a name="19">19</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3030.jpg" alt="DSCN3030.jpg                          ">
</p>
That's it for the loading coils, but on the very next utility pole (and this does generally happen, it will be on a directly adjacent utility pole, as the spacing is also 6,000 feet, likely to simplify installation), there's something else. Rather than being up high, these are generally a waist-height.<span size="-1" color="888888"><br> <a name="20">20</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3028%203M%20Closure.jpg" alt="DSCN3028 3M Closure.jpg               ">
</p>
So we have the feeder cables running along, and a 3M splice enclosure bringing a few of the twisted pairs in the cable down the utility pole ...<span size="-1" color="888888"><br> <a name="21">21</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3029.jpg" alt="DSCN3029.jpg                          ">
</p>
Down to these, which are <b>T1 repeaters</b>. Rather than the analogue signals carried by telephone lines, a T1 is a digital signal which carries data at 1,544,000 bits/s (on the exact same type of twisted pairs as the voice telephone lines). There are many advantages to T1 signals, including being able to carry 24 conversations over two twisted pairs, not gathering cumulative noise along the length of the cable run, and being able to carry (somewhat) high-speed data. But, the problem is that the signal needs to be amplified periodically – every 6,000 feet in fact. The amplifier is actually called a repeater, since it outputs a binary signal (which has only two states, on or off).<span size="-1" color="888888"><br> <a name="22">22</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3031.jpg" alt="DSCN3031.jpg                          ">
</p>
This is the older of the two. The feeder cable is pressurized, and so is the cable coming down to this repeater enclosure, and in fact, the repeater enclosure is pressurized as well. At the base of the white enclosure, you can see the clamp (with padlock) which provides the air-tight seal. Since there are active electronics in this enclosure, and they can't have cooling fans (since it is an air-tight enclosure), these enclosures are always white to reflect the sunlight (and some of the heat) as these bake in the summer sun.<span size="-1" color="888888"><br> <a name="23">23</a> of 24<br></span>
<p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3035.jpg" alt="DSCN3035.jpg                          ">
</p>
Here's the newer enclosure, it is an HRE-458 HiGain Remote Therm-O-Nator Enclosure from ADC DSL Systems, Inc. Some documentation for it is <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/2409_ADC_HRE-458.pdf" target="_blank">here</a>, and it can hold up to ten cards, such as this <a href="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/ADC_HiGain_HDU-409_HDSL_Extender,UserManual.pdf" target="_blank">HDSL line extender</a> which extends the range of two full-duplex 784 kbits/s DSL connections by up to 12,000' using two 24 gauge copper twisted pairs.
<div><p>The enclosure has heat sink fins on top (since heat rises, this will be where it gets the hottest). These help cool the enclosure by providing more surface area, so it can radiate more heat.</p><p><span size="-1" color="888888"><br> <a name="24">24</a> of 24<br></span>
</p></div><p><img src="http://cityinfrastructure.com/RuralOutsidePlant/Webfiles/DSCN3034.jpg" alt="DSCN3034.jpg                          ">
</p>
Here's a look at the bottom, showing the cable entry, and also a pressure relief valve to release the pressure before opening the enclosure. Another opening allows the pressure to be measures. The thinner black wire is to ground the enclosure, so goes to a metal stake driven into the ground.</div>]]></description>
        </item>
        <item>
            <title><![CDATA[1M Users (674 pts)]]></title>
            <link>https://blog.spacehey.com/entry?id=1245177</link>
            <guid>41422311</guid>
            <pubDate>Mon, 02 Sep 2024 03:13:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.spacehey.com/entry?id=1245177">https://blog.spacehey.com/entry?id=1245177</a>, See on <a href="https://news.ycombinator.com/item?id=41422311">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
      <p>Hello everyone - it's been a while!</p><p>I was super busy with 
university and my mandatory internship in a software company for the 
past 6 months, so I haven't posted in a while. But that doesn't mean 
that I was inactive - I spent nearly every evening and every weekend 
working on SpaceHey. I didn't develop any new ground-breaking features, 
but instead I focused on improving the overall SpaceHey experience - 
making it smoother, more stable, easier to use and safer.</p><p>But before I get into the details, let's have a look at a huge milestone first: SpaceHey hit 1 Million registered users!! That's crazy!!<br></p><h2>1 Million users</h2><p>I
 launched SpaceHey at the end of 2020 - I had just graduated high-school,
 and the world was on Covid lockdown. I made SpaceHey, so my generation 
could experience the early days of social media - without a feed, likes 
and whatnot - but instead with colorful, customizable profiles, bulletins and forums. I didn't plan to create anything <i>big</i> - I just had some fun creating this site and improving my coding skills at the same time.</p><p>Still, three and a half years later - SpaceHey has indeed become <i>big</i>.
 One million people is an incredibly huge number of people - it's&nbsp; simply crazy! If someone would've told my 18-year-old self in 2020, I 
would've never believed them. And yet - here we are. I am so incredibly 
thankful for all the support over the past three and a half years - the 
friends I made along the way and the lessons I've learned - both in 
running a community as big as this one as well as the technical challenges that came along.</p><p>One
 million people from all over the world have used SpaceHey so far - an 
independently run platform that does not track you and does not show 
you personalized feeds nor ads. My mission is not to become another big 
social network like <i>Facebook</i> or <i>Twitter</i> (I don't think 
I'll ever call it "X") - but rather trying to be different. More 
personal, more fun to use, and more humane. And I'm proud to say that 
this mission is still very much alive - no matter if there were 500 
users or 1,000,000.<br></p><p>If you like SpaceHey and want to support the platform, you can support me <a href="https://spacehey.com/support" target="_self" rel="ugc">here</a>, and there is also a special #1 Million Merch drop available <a href="https://shop.spacehey.com/" target="_self" rel="ugc">here</a>
 to support SpaceHey. Your support - no matter if it's a donation or a 
Merch order - is what keeps SpaceHey running: thank you!!<br></p><h2>Improving SpaceHey</h2><p>I've
 stopped myself from working on any new features in the past months, but
 rather improve the existing ones and make SpaceHey overall a bit 
smoother. It wasn't easy - but I think it was worth it. You may have 
already noticed less downtime and less App crashes in the past weeks - 
and there are some more improvements coming soon.</p><p>I'm now also 
starting to work on some new features again - which is super fun - and I can't 
wait to share more with you soon (T8 👀) - so stay tuned!<br></p><h2>Keeping SpaceHey safe</h2><p>Another
 big topic I worked on in the past months is safety. As more and more 
people joined SpaceHey, the bots and spammers also increased. Spam, 
hate speech, and other kinds of harmful content has no place on SpaceHey -
 that's why a solution was needed, and eventually found.<br></p><p>The 
solution isn't actually one solution - but a combination of multiple. On
 the one hand, I've implemented more ways to prevent spam in the first 
place - and on the other hand, I've developed more ways to combat 
existing spam. I've expanded the <a href="https://spacehey.com/modapplication" target="_self" rel="ugc">volunteer moderation team</a> and improved the ways the team can discover spam, react to <a href="https://spacehey.com/report" target="_self" rel="ugc">reports</a>
 and keep track of rule violations. I am immensely thankful to the 
volunteers helping me, and I think we are on a great path to keep 
SpaceHey safe.</p><p>If you come across harmful content on SpaceHey, 
please click the "Report" icon next to it, and we'll check it. Thank you
 for doing your part!<br></p><h2>The next steps</h2><p>I am super 
thrilled to keep working on SpaceHey - there are so many awesome, 
talented and fun people here. I can't wait to keep improving the site 
and the App and keep working on some great new features in the near 
future. I am super happy to have you all here, and I hope you are 
enjoying this journey as much as I do!<br></p><h2>Thank you!</h2><p>Last but not least, a <b>huge thank you</b> to every single one of you - you are the people who make SpaceHey what it is - you make it awesome. Thank you so, so much!<br></p><p>Have an awesome day &amp; thank you for using SpaceHey!<br><i>An</i><br></p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How the Oldest Company in the World Survived Nearly 1,500 Years (205 pts)]]></title>
            <link>https://www.openculture.com/2024/08/how-the-oldest-company-in-the-world-has-survived-nearly-1500-years.html</link>
            <guid>41422126</guid>
            <pubDate>Mon, 02 Sep 2024 02:25:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.openculture.com/2024/08/how-the-oldest-company-in-the-world-has-survived-nearly-1500-years.html">https://www.openculture.com/2024/08/how-the-oldest-company-in-the-world-has-survived-nearly-1500-years.html</a>, See on <a href="https://news.ycombinator.com/item?id=41422126">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<p><img loading="lazy" fetchpriority="high" decoding="async" src="https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda.png" alt="" width="1380" height="1080" srcset="https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda.png 1380w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-360x282.png 360w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-1024x801.png 1024w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-240x188.png 240w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-768x601.png 768w" sizes="(max-width: 1380px) 100vw, 1380px" data-old-src="https://www.openculture.com/wp-content/plugins/native-lazyload/assets/images/placeholder.svg" data-src="https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda.png" data-srcset="https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda.png 1380w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-360x282.png 360w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-1024x801.png 1024w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-240x188.png 240w, https://cdn8.openculture.com/2024/08/21224830/1380px-Shitenno-ji_main_hall_and_pagoda-768x601.png 768w"></p>
<p><small><em><a href="https://en.wikipedia.org/wiki/Kong%C5%8D_Gumi#/media/File:Shitenn%C5%8D-ji_main_hall_and_pagoda.png">Image from New York Pub­lic Library, via Wiki­me­dia Com­mons</a></em></small></p>
<p>If you vis­it Osa­ka, you’ll be urged to see two old build­ings in par­tic­u­lar: Osa­ka Cas­tle and Shiten­nō-ji (above), Japan’s first Bud­dhist tem­ple. In behold­ing both, you’ll behold the work of con­struc­tion firm <a href="https://en.wikipedia.org/wiki/Kong%C5%8D_Gumi">Kongō Gumi</a> (金剛組), the old­est con­tin­u­ous­ly run com­pa­ny in the world. It was with the build­ing of Shiten­nō-ji, com­mis­sioned by Prince Shō­toku Taishi in the year 578, that brought it into exis­tence in the first place. Back then, “Japan was pre­dom­i­nant­ly Shin­to and had no <em>miyadaiku</em> (car­pen­ters trained in the art of build­ing Bud­dhist tem­ples),” <a href="https://worksthatwork.com/3/kongo-gumi">writes Irene Her­rera at <em>Works that Work</em></a><em>,</em> “so the prince hired three skilled men from Baek­je, a Bud­dhist state in what is now Korea,” among them a cer­tain Kongō Shiget­su.</p>
<p>There­after, Kongō Gumi con­tin­ued to oper­ate inde­pen­dent­ly for more than 1,400 years, run by 40 gen­er­a­tions of Kongō Shiget­su’s descen­dants. By the time Toy­oto­mi Hideyoshi had the com­pa­ny build Osa­ka Cas­tle in 1583, it had been estab­lished for near­ly a mil­len­ni­um. In the cen­turies since, “the cas­tle has been destroyed repeat­ed­ly by fire and light­ning,” Her­rera writes. “Kongō Gumi pros­pered because of these major recon­struc­tions, which pro­vid­ed them with plen­ty of work.” Through­out most of its long his­to­ry, an even stead­ier busi­ness came from their spe­cial­ty of build­ing Bud­dhist tem­ples, at least until seri­ous chal­lenges to that busi­ness mod­el arose in the twen­ti­eth cen­tu­ry.</p>
<div>
<p><span><iframe title="YouTube video player" type="text/html" width="640" height="505" src="//www.youtube.com/embed/IiNJik3gfZ0?wmode=transparent&amp;fs=1&amp;hl=en&amp;showsearch=0&amp;rel=0&amp;theme=dark" frameborder="0" allowfullscreen="" loading="lazy"></iframe></span>
	</p>
</div>

<p>“World War II brought sig­nif­i­cant changes to Japan, and the demand for tem­ple con­struc­tion waned,” <a href="https://www.toki.tokyo/blogt/2023/8/9/kong-gumi-co-ltd-the-enduring-legacy-of-japans-oldest-company">says the tourism com­pa­ny Toki</a>. “Sens­ing the shift­ing tides of the time, the com­pa­ny made a strate­gic deci­sion to piv­ot its exper­tise towards a new endeav­or: the craft­ing of coffins.” Gov­ern­men­tal per­mis­sion was arranged by the wid­ow of Kongō Haruichi, Kongō Gumi’s 37th leader, who’d tak­en his own life out of finan­cial despair inflict­ed by the Shōwa Depres­sion of the nine­teen-twen­ties. Here time at the head of the com­pa­ny illus­trates its long-held will­ing­ness to grant lead­er­ship duties not just to first sons, but to fam­i­ly mem­bers best suit­ed to do the job; for that rea­son, the his­to­ry of the Kongō clan involves many sons-in-law delib­er­ate­ly sought out for that pur­pose.</p>
<div>
<p><span><iframe title="YouTube video player" type="text/html" width="640" height="505" src="//www.youtube.com/embed/jnmGgHUWdFg?wmode=transparent&amp;fs=1&amp;hl=en&amp;showsearch=0&amp;rel=0&amp;theme=dark" frameborder="0" allowfullscreen="" loading="lazy"></iframe></span>
	</p>
</div>

<p>The com­bined forces of the decline of Bud­dhism and the pop­ping of Japan’s real-estate bub­ble in the nineties even­tu­al­ly forced Kongō Gumi to become a sub­sidiary of Taka­mat­su Con­struc­tion Group in Jan­u­ary 2006. “The cur­rent Kongō Gumi work­force has only one mem­ber of the Kongō fam­i­ly,” <a href="https://asia.nikkei.com/Business/Companies/Japan-s-oldest-company-defies-time-with-merit-based-succession">the Nikkei Asia report­ed in 2020</a>, “a daugh­ter of the 40th head of the fam­i­ly” who “now serves as the 41st head.” But its <em>miyadaiku</em> — dis­tinc­tive­ly orga­nized into eight inde­pen­dent <em>kumi</em>, or groups — con­tin­ue to do the work they always have, with ever-more-refined ver­sions of the tra­di­tion­al tools and tech­niques they’ve been using for near­ly a mil­len­ni­um and a half. Kongō Gumi con­tin­ues to receive inter­na­tion­al atten­tion for main­tain­ing its high lev­el of crafts­man­ship, but view­ers of Amer­i­can TV dra­ma in recent years will also appre­ci­ate that its hav­ing solved the prob­lem of suc­ces­sion.</p>
<p><strong>Relat­ed Con­tent:</strong></p>
<p><a href="https://www.openculture.com/2020/12/japans-1300-year-old-hotel.html">Why Japan Has the Old­est Busi­ness­es in the World?: Hōshi, a 1300-Year-Old Hotel, Offers Clues</a></p>
<p><a href="https://www.openculture.com/2021/09/building-without-nails-the-genius-of-japanese-carpentry.html#google_vignette">Build­ing With­out Nails: The Genius of Japan­ese Car­pen­try</a></p>
<p><a href="https://www.openculture.com/2018/04/hoshi-a-short-documentary-on-the-1300-year-old-hotel-run-by-the-same-japanese-family-for-46-generations.html">Hōshi: A Short Doc­u­men­tary on the 1300-Year-Old Hotel Run by the Same Japan­ese Fam­i­ly for 46 Gen­er­a­tions</a></p>
<p><a href="https://www.openculture.com/2017/02/japanese-priest-tries-to-revive-buddhism-by-bringing-techno-music-into-the-temple.html">Japan­ese Priest Tries to Revive Bud­dhism by Bring­ing Tech­no Music into the Tem­ple: Attend a Psy­che­del­ic 23-Minute Ser­vice</a></p>
<p><a href="https://www.openculture.com/2023/03/a-visit-to-the-worlds-oldest-hotel-japans-nisiyama-onsen-keiunkan-established-in-705-ad.html">A Vis­it to the World’s Old­est Hotel, Japan’s Nisiya­ma Onsen Keiunkan, Estab­lished in 705 AD</a></p>
<p><a href="https://www.openculture.com/2020/03/see-how-traditional-japanese-carpenters-can-build-a-whole-building-using-no-nails-or-wood.html">See How Tra­di­tion­al Japan­ese Car­pen­ters Can Build a Whole Build­ing Using No Nails or Screws</a></p>
<p><em>Based in Seoul,&nbsp;</em><em><a href="http://blog.colinmarshall.org/">Col­in</a></em><em><a href="http://blog.colinmarshall.org/">&nbsp;M</a></em><em><a href="http://blog.colinmarshall.org/">a</a></em><em><a href="http://blog.colinmarshall.org/">rshall</a>&nbsp;writes and broad­cas</em><em>ts on cities, lan­guage, and cul­ture. His projects include the Sub­stack newslet­ter</em>&nbsp;<a href="https://colinmarshall.substack.com/">Books on Cities</a><em>&nbsp;and the book&nbsp;</em>The State­less City: a Walk through 21st-Cen­tu­ry Los Ange­les.&nbsp;<em>Fol­low him on Twit­ter at&nbsp;<a href="https://twitter.com/#%21/colinmarshall">@colinm</a></em><em><a href="https://twitter.com/#%21/colinmarshall">a</a></em><em><a href="https://twitter.com/#%21/colinmarshall">rshall</a>&nbsp;or on&nbsp;<a href="https://www.facebook.com/colinmarshallessayist">Face­book</a>.</em></p>
<br>		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OrbStack: The fast, light, and easy way to run Docker containers and Linux (253 pts)]]></title>
            <link>https://orbstack.dev/</link>
            <guid>41421846</guid>
            <pubDate>Mon, 02 Sep 2024 01:35:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://orbstack.dev/">https://orbstack.dev/</a>, See on <a href="https://news.ycombinator.com/item?id=41421846">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><nav data-headlessui-state=""></nav><section id="hero"><div><a href="https://orbstack.dev/blog/dynamic-memory"></a><p>Say&nbsp;goodbye to slow, clunky <span>containers and&nbsp;VMs</span></p><p>OrbStack is the fast, light, and easy way to run Docker containers and Linux. Develop at lightspeed with our Docker&nbsp;Desktop alternative.</p></div><p><img alt="OrbStack running a Compose project with domain names, image files open in Finder, and an Arch Linux machine" loading="lazy" width="900" height="900" decoding="async" data-nimg="1" srcset="https://orbstack.dev/_next/image?url=%2Fimg%2Fhero.png&amp;w=1080&amp;q=75 1x, https://orbstack.dev/_next/image?url=%2Fimg%2Fhero.png&amp;w=1920&amp;q=75 2x" src="https://orbstack.dev/_next/image?url=%2Fimg%2Fhero.png&amp;w=1920&amp;q=75"></p></section><section id="companies"><h2>Loved by developers at</h2></section><section id="features"><p>No more battery drain or complicated VMs. OrbStack respects your machine, with powerful capabilities. No compromises.</p><div><div><h3>Lightning fast</h3><p>Starts in seconds with turbocharged networking, smooth Rosetta x86 emulation, VirtioFS file sharing, and other optimizations for some workloads.</p></div><div><h3>Light as a feather</h3><p>Keep it breezy with low CPU and disk usage, minimal memory consumption, and a native Swift app. Battery drain is a thing of the past.</p></div><div><h3>Effortless integration</h3><p>Enjoy seamless containers, plus CLI integration, file sharing, and remote SSH editing with Linux machines.</p></div><div><h3>Unbelievably simple</h3><p><a href="https://orbstack.dev/docs/compare/docker-desktop">Drop-in replacement</a> for Docker Desktop. Easily get started with Linux machines in 1 minute with the simple, yet powerful, app and command line.</p></div><div><h3>Endlessly capable</h3><p>Run containers, Kubernetes, and Linux distros all with robust integration. Manage containers &amp; machines from anywhere with the menu bar app.</p></div><div><h3>Robust connectivity</h3><p>Connect between containers and machines, and use IPv6 painlessly. VPNs and DNS become friends, not foes.</p></div></div></section><section id="demos"><h2>See the <span>magic</span></h2><p>Embark on a seamless journey towards better development, within a matter of seconds.</p></section><div><div><h3>Containers like they’re native</h3><p>Build images quickly and enjoy fast, reliable networking and file sharing. Bind mounts and port forwards just work. Debug containers easily with access to volumes. Run x86 containers with Rosetta. Compose and other tools included.</p></div><div><h3>Linux machines without the fuss</h3><p>Run full-blown Linux machines with your favorite distro. Work seamlessly with Visual Studio Code (or your favorite editor) and SSH agent forwarding. Run Intel machines on Apple Silicon with Rosetta.</p></div><div><h3>First-class command line integration</h3><p>Live in the terminal? We think our native app is great, but everything can be done from the command line. Run commands and copy files between Mac and Linux with ease. Send notifications and open files and links from Linux.</p></div><div><div><p><img alt="OrbStack virtual machine service in Activity Monitor, using 0.1% CPU" loading="lazy" width="800" height="800" decoding="async" data-nimg="1" srcset="https://orbstack.dev/_next/image?url=%2Fimg%2Fcpu-boxed.png&amp;w=828&amp;q=75 1x, https://orbstack.dev/_next/image?url=%2Fimg%2Fcpu-boxed.png&amp;w=1920&amp;q=75 2x" src="https://orbstack.dev/_next/image?url=%2Fimg%2Fcpu-boxed.png&amp;w=1920&amp;q=75"></p></div><h3>Light as a feather</h3><p>With less than 0.1% background CPU usage on Apple Silicon, OrbStack sips power and stays out of your way. Less than 10 MB of disk space is used out of the box. You’ll never notice it’s running.</p></div></div><section id="benchmarks"><h2>Feel the <span>difference</span></h2><p>Skip the wait and leave your charger behind with OrbStack's unmatched performance and efficiency.</p><div data-state="active" data-orientation="horizontal" role="tabpanel" aria-labelledby="radix-:R6lplm:-trigger-tab-perf-edx" id="radix-:R6lplm:-content-tab-perf-edx" tabindex="0" dir="ltr"><p><span>Time to provision development environment (lower is better)</span></p></div></section><section id="detailed-features"><h2>Packed with <span>helpful</span> features</h2><p>No matter the use case, OrbStack has you covered with features that simplify your workflow and help you move faster.</p><div><p>Instant startup</p><p>Fast network</p><p>Local domain names</p><p>Seamless integration</p><p>Linux machines</p><p>Rosetta x86 emulation</p><p>Optimized for Apple Silicon</p><p>Low CPU usage</p><p>Dynamic disk</p><p>Native Swift app</p><p>SSH agent forwarding</p><p>File sharing</p><p>2-way CLI integration</p><p>15 Linux distros</p><p>SSH</p><p>Remote VS Code</p><p>VPN-friendly</p><p>IPv6</p><p>ICMP</p><p>Ping</p><p>Traceroute</p><p>Low initial memory usage</p><p>Accurate clock</p><p>Works without admin</p><p>Bind mounts</p><p>Volume files on Mac</p><p>Image files on Mac</p><p>Host networking</p><p>eBPF support</p><p>Native UI</p><p>Menu bar app</p><p>Quick global actions</p><p>Kubernetes</p></div></section><section id="testimonials"><h2>See what people say</h2></section><section id="faq"><h2>Frequently asked questions</h2></section><section id="end"><h2>Ready to love containers again?</h2><a href="https://orbstack.dev/download">Get OrbStack</a></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tbsp – treesitter-based source processing language (192 pts)]]></title>
            <link>https://git.peppe.rs/languages/tbsp/</link>
            <guid>41421650</guid>
            <pubDate>Mon, 02 Sep 2024 01:04:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://git.peppe.rs/languages/tbsp/">https://git.peppe.rs/languages/tbsp/</a>, See on <a href="https://news.ycombinator.com/item?id=41421650">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><table summary="repository info"><tbody><tr><th>Branch</th><th>Commit message</th><th>Author</th><th colspan="2">Age</th></tr>
<tr><td><a href="https://git.peppe.rs/languages/tbsp/log/">master</a></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/">add lists and index exprs</a></td><td>Akshay</td><td colspan="2"><span title="2024-08-23 23:00:52 +0100">9 days</span></td></tr>
<tr><td colspan="5">&nbsp;</td></tr><tr><td colspan="5">&nbsp;</td></tr><tr><th>Age</th><th>Commit message</th><th>Author</th><th>Files</th><th>Lines</th></tr>
<tr><td><span title="2024-08-23 23:00:52 +0100">9 days</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=1702f955a4546828cd535be6cecad57b90128de8">add lists and index exprs</a><span><a href="https://git.peppe.rs/languages/tbsp/commit/?id=1702f955a4546828cd535be6cecad57b90128de8">HEAD</a><a href="https://git.peppe.rs/languages/tbsp/log/">master</a></span></td><td>Akshay</td><td>3</td><td><span>-13</span>/<span>+229</span></td></tr>
<tr><td><span title="2024-08-08 22:19:14 +0100">2024-08-08</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=32de8bd5dac80a2c09e7106144cab5a8e16accc4">store nodes as usize</a></td><td>Akshay</td><td>4</td><td><span>-82</span>/<span>+170</span></td></tr>
<tr><td><span title="2024-08-05 21:52:22 +0100">2024-08-05</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=3ad5ba1f6d3f4c5944bbf29a7d761c93cf3740e3">add string::substr</a></td><td>Akshay</td><td>3</td><td><span>-12</span>/<span>+150</span></td></tr>
<tr><td><span title="2024-07-14 21:00:26 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=ba102d6162d046f7ed7b139355e81da0c9f89acb">add usage and roadmap to readme</a></td><td>Akshay</td><td>1</td><td><span>-0</span>/<span>+56</span></td></tr>
<tr><td><span title="2024-07-14 19:39:41 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=52ea89604e1bc2f7b38698e38ee256218e879a08">fix link to tree-viz</a></td><td>Akshay</td><td>1</td><td><span>-1</span>/<span>+1</span></td></tr>
<tr><td><span title="2024-07-14 14:00:55 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=58b651418ee59eb576595718439352f244b23ddc">add readme</a></td><td>Akshay</td><td>2</td><td><span>-1</span>/<span>+149</span></td></tr>
<tr><td><span title="2024-07-14 13:01:23 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=9ad06d721c1e481c82b4f43df819d76e35757282">add examples</a></td><td>Akshay</td><td>8</td><td><span>-0</span>/<span>+260</span></td></tr>
<tr><td><span title="2024-07-14 13:00:51 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=83b537bb860643ebdabc43ab47cb8645da8a2e6d">rename: trawk -&gt; tbsp</a></td><td>Akshay</td><td>4</td><td><span>-155</span>/<span>+307</span></td></tr>
<tr><td><span title="2024-07-14 10:16:15 +0100">2024-07-14</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=7ae7e42eb1eb981483cc4183368bec4932b8f1c2">add trawk cli</a></td><td>Akshay</td><td>6</td><td><span>-71</span>/<span>+297</span></td></tr>
<tr><td><span title="2024-07-13 18:32:41 +0100">2024-07-13</span></td><td><a href="https://git.peppe.rs/languages/tbsp/commit/?id=8eb38033e0c615983c4490354dad4abb00031042">init trawk</a></td><td>Akshay</td><td>8</td><td><span>-0</span>/<span>+1862</span></td></tr>
<tr><td colspan="5">&nbsp;</td></tr><tr><th colspan="5">Clone</th></tr>
<tr><td colspan="5"><a rel="vcs-git" href="https://git.peppe.rs/languages/tbsp" title="tbsp Git repository">https://git.peppe.rs/languages/tbsp</a></td></tr>
</tbody></table></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Extreme Pi Boot Optimization (477 pts)]]></title>
            <link>https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/</link>
            <guid>41420597</guid>
            <pubDate>Sun, 01 Sep 2024 21:36:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/">https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/</a>, See on <a href="https://news.ycombinator.com/item?id=41420597">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>🚀 3.5 sec to Linux userspace code</p><h3 id="motivation">Motivation<a href="#motivation" aria-label="Heading self-link"></a></h3><p>A while ago, the <a href="https://kittenlabs.de/solarcampi/">SolarCamPi</a> project, a off-grid solar-powered WiFi camera, was built.</p><p>In this project, a Raspberry Pi Zero 2 W is being booted into Linux, a picture is taken, WiFi connectivity is established and the Pi is shut down again (to save power).
This repeats every couple of minutes to always deliver a fresh image to a cloud service.</p><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/IMG_4607.jpg" width="49%" alt="Weatherproof enclosure, with 7.2Ah lead-gel battery and SolarCamPi inside"> <img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/IMG_4629.jpg" width="49%" alt="Mast, with solar panel, WiFi antenna and SolarCamPi enclosure mounted to it, in nature"></p><p>Each second the Pi Zero is powered up uses valuable electricity, which is a scarce resource in a solar-powered device (at least in West European winters…).<br>The user space application (server connection, picture upload, etc.) was already optimized as best as possible.<br>The electronics setup was also specifically designed to use as little power as possible while asleep.</p><p>There a 2 possible ways to reduce total energy consumption further:</p><ul><li>decrease power consumption / current</li><li>decrease time spent running</li></ul><p>However, in some situations a balance needs to be found between the two.
For example: Disabling CPU turbo just to save some current consumption is a bad choice, because the resulting extra time will use more energy than just getting the job done quickly and shutting off.
We want the least area under the graph (of current vs. time) possible.</p><h3 id="hardware-setup">Hardware setup<a href="#hardware-setup" aria-label="Heading self-link"></a></h3><p>Having a short cycle time between making a change and actually seeing it run is critical when optimizing embedded boot processes.
Swapping SD cards, messing with card readers and power supplies while working is distracting and annoying.</p><p>In order to avoid this, a number of useful tools exist:</p><ul><li><a href="https://www.nordicsemi.com/Products/Development-hardware/Power-Profiler-Kit-2" target="_blank">Nordic Power Profiler Kit II</a></li><li><a href="https://github.com/linux-automation/usbsdmux" target="_blank">USB-SD-Mux Fast</a></li><li>USB-UART converter</li></ul><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/featured-DSC01414.jpg" width="80%" alt="Hardware setup, Raspberry Pi Zero 2 W, USB-SD-Mux and PPK2"></p><h5 id="power-profiler-kit">Power Profiler Kit<a href="#power-profiler-kit" aria-label="Heading self-link"></a></h5><p>The Power Profiler Kit II (now called PPK) can supply power to a device-under-test (DUT) and will measure it accurately over time.
You can enable/disable the DUT, see the power consumption at any point and also see the status of 8 digital inputs!
We’ll connect one of the digital inputs to a GPIO pin on the Raspberry Pi.</p><p>This way, the first action of “our application” (aka the finish line) will be to toggle the GPIO pin.
We then just have to measure the time between power-up and GPIO toggle.</p><h5 id="usb-sd-mux">USB-SD-Mux<a href="#usb-sd-mux" aria-label="Heading self-link"></a></h5><p>The USB-SD-Mux is a very useful tool for hardware hackers - it’s an interposer between a microSD card and a DUT with a USB-C interface.
A computer can “steal” the microSD card from the DUT, rewrite its contents and then plug the microSD card back into the DUT, without ever having to touch the device.</p><p>This makes the workflow of testing changes <em>much</em> easier and faster by avoiding unplugging the card, plugging it into a microSD reader, flashing it, plugging the card back into the DUT, etc. It can even be used to automate the reset or power of the DUT with on-board GPIOs.</p><h5 id="usb-uart-converter">USB-UART converter<a href="#usb-uart-converter" aria-label="Heading self-link"></a></h5><p>Some form of UART interface is pretty much required. These changes will break system boot, WiFi connectivity, etc. at some point and without a UART console we would be flying blind. A standard CP2102, FTDI, etc. will work well.</p><h3 id="measurement--test-setup">Measurement / Test setup<a href="#measurement--test-setup" aria-label="Heading self-link"></a></h3><p>On a clean Debian 12 (bookworm) arm64 Lite image, the <code>/boot/firmware/cmdline.txt</code> file was modified to include <code>init=/init.sh</code>.
This means that the kernel will execute the script at <code>/init.sh</code> as the very first thing in userspace (before running systemd or anything else).</p><p>Such an <code>init.sh</code> script might look like this:</p><div><pre tabindex="0"><code data-lang="bash"><span><span><span>#!/bin/bash
</span></span></span><span><span><span></span>
</span></span><span><span>gpioset <span>0</span> <span>4</span><span>=</span><span>0</span>
</span></span><span><span>sleep <span>1</span>
</span></span><span><span>gpioset <span>0</span> <span>4</span><span>=</span><span>1</span>
</span></span><span><span>sleep <span>1</span>
</span></span><span><span>gpioset <span>0</span> <span>4</span><span>=</span><span>0</span>
</span></span><span><span>
</span></span><span><span><span>exec</span> /sbin/init
</span></span></code></pre></div><p>which will toggle the GPIO4 and then resume normal boot by replacing itself with <code>/sbin/init</code> (aka systemd).</p><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/debian12-lite-arm64-initsh.png" alt="Power Profiler screenshot, showing GPIO4 going low after about 12s"></p><p>In this screenshot from Nordic’s Power Profiler software, you can see the current consumption of the Raspberry Pi (at 5V) while booting.
After about 12 seconds, digital input 0 is going low, showing that our <code>init.sh</code> was executed.</p><p>In doing so, a total charge of 1.90 coulomb (coulomb and ampere-seconds are equivalent) was used.<br>Calculating <code>1.9As * 5.0V</code> comes out to <code>9.5Ws</code> energy usage for this boot process.</p><p>For reference: A single AA-alkaline battery can deliver about 13500 Ws of energy.</p><h3 id="reducing-current">Reducing current<a href="#reducing-current" aria-label="Heading self-link"></a></h3><p>Let’s get the easy part out of the way first and reduce the operating current as much as possible.</p><h5 id="disabling-hdmi">Disabling HDMI<a href="#disabling-hdmi" aria-label="Heading self-link"></a></h5><p>We can disable the HDMI encoder entirely. Disabling the GPU is not possible, because we need it to encode our camera data.
If your application doesn’t require camera/GPU support, try disabling the GPU entirely.</p><p>This reduces the current consumption from 136.7mA down to 122.6mA (over 10%!).</p><p>Relevant config.txt parameters:</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># disable HDMI (saves power)</span>
</span></span><span><span><span>dtoverlay</span><span>=</span><span>vc4-kms-v3d,nohdmi</span>
</span></span><span><span><span>max_framebuffers</span><span>=</span><span>1</span>
</span></span><span><span><span>disable_fw_kms_setup</span><span>=</span><span>1</span>
</span></span><span><span><span>disable_overscan</span><span>=</span><span>1</span>
</span></span><span><span>
</span></span><span><span><span># disable composite video output</span>
</span></span><span><span><span>enable_tvout</span><span>=</span><span>0</span>
</span></span></code></pre></div><h5 id="disabling-activity-led">Disabling Activity LED<a href="#disabling-activity-led" aria-label="Heading self-link"></a></h5><p>Just by disabling the activity LED, we can save 2mA (122.6mA down to 120.6mA).</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span>dtparam</span><span>=</span><span>act_led_trigger=none</span>
</span></span><span><span><span>dtparam</span><span>=</span><span>act_led_activelow=on</span>
</span></span></code></pre></div><h5 id="disabling-camera-led">Disabling Camera LED<a href="#disabling-camera-led" aria-label="Heading self-link"></a></h5><p>Repeat the same for the camera LED (if present). It will also reduce the chance of the LED reflecting back into the image.</p><h4 id="turbo-tweaking">Turbo tweaking<a href="#turbo-tweaking" aria-label="Heading self-link"></a></h4><p>As mentioned before, saving current while wasting time might not be ideal.</p><p>With our current changes, the Pi can boot while using 1.62As.
<img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/turbo-defaults.png" alt="Power Profiler screenshot, showing a total current usage of 1.62C/As"></p><div><pre tabindex="0"><code data-lang="ini"><span><span><span>force_turbo</span><span>=</span><span>0</span>
</span></span><span><span><span>initial_turbo</span><span>=</span><span>10</span>
</span></span><span><span><span>arm_boost</span><span>=</span><span>0</span>
</span></span></code></pre></div><p>Without forced turbo mode, 1.58As were used:
<img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/turbo-disabled.png" alt="Power Profiler screenshot, showing a total current usage of 1.58C/As"></p><p>For some, unknown reason, disabling the turbo/boost mode also inverts the default state of GPIO4 (thus I’ve switched the polarity in init.sh).</p><h3 id="reducing-time">Reducing time<a href="#reducing-time" aria-label="Heading self-link"></a></h3><p>The ~13% reduction in current is helpful, but there’s still a long way to go.</p><p>The Pi takes 8s (while consuming ~1As) before the first line of Linux output appears on the console.<br>Luckily, there a number of ways to get more info about those 8 seconds.</p><h4 id="debug-boot">Debug boot<a href="#debug-boot" aria-label="Heading self-link"></a></h4><p>In the boot process of the Raspberry Pi family, the GPU initializes first.<br>It talks to the SD card and looks for a <code>bootcode.bin</code> file (Pi 4 and newer use an EEPROM instead).</p><p>We can modify this bootcode.bin to <a href="https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#bootcode-bin-uart-enable" target="_blank">enable detailed UART logging</a>:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>sed -i -e <span>"s/BOOT_UART=0/BOOT_UART=1/"</span> /boot/firmware/bootcode.bin
</span></span></code></pre></div><p><strong>Backup the original bootcode.bin first, this process is potentially destructive.</strong></p><p>Rebooting with <code>BOOT_UART</code> enabled gives us loads of nice information:</p><pre tabindex="0"><code>Raspberry Pi Bootcode

Found SD card, config.txt = 1, start.elf = 1, recovery.elf = 0, timeout = 0
Read File: config.txt, 1322 (bytes)

Raspberry Pi Bootcode
Read File: config.txt, 1322
Read File: start.elf, 2981376 (bytes)
Read File: fixup.dat, 7303 (bytes)
MESS:00:00:01.295242:0: brfs: File read: /mfs/sd/config.txt
MESS:00:00:01.300131:0: brfs: File read: 1322 bytes
MESS:00:00:01.335680:0: HDMI0:EDID error reading EDID block 0 attempt 0
[..]
MESS:00:00:01.392537:0: HDMI0:EDID error reading EDID block 0 attempt 9
MESS:00:00:01.398632:0: HDMI0:EDID giving up on reading EDID block 0
MESS:00:00:01.406335:0: brfs: File read: /mfs/sd/config.txt
MESS:00:00:01.411272:0: gpioman: gpioman_get_pin_num: pin LEDS_PWR_OK not defined
MESS:00:00:01.918176:0: gpioman: gpioman_get_pin_num: pin LEDS_PWR_OK not defined
MESS:00:00:01.923999:0: *** Restart logging
MESS:00:00:01.927872:0: brfs: File read: 1322 bytes
MESS:00:00:01.933328:0: hdmi: HDMI0:EDID error reading EDID block 0 attempt 0
[..]
MESS:00:00:01.995436:0: hdmi: HDMI0:EDID error reading EDID block 0 attempt 9
MESS:00:00:02.002052:0: hdmi: HDMI0:EDID giving up on reading EDID block 0
MESS:00:00:02.007955:0: hdmi: HDMI0:EDID error reading EDID block 0 attempt 0
[..]
MESS:00:00:02.070610:0: hdmi: HDMI0:EDID error reading EDID block 0 attempt 9
MESS:00:00:02.077225:0: hdmi: HDMI0:EDID giving up on reading EDID block 0
MESS:00:00:02.082840:0: hdmi: HDMI:hdmi_get_state is deprecated, use hdmi_get_display_state instead
MESS:00:00:02.091586:0: HDMI0: hdmi_pixel_encoding: 162000000
MESS:00:00:02.799203:0: brfs: File read: /mfs/sd/initramfs8
MESS:00:00:02.803082:0: Loaded 'initramfs8' to 0x0 size 0xb0898e
MESS:00:00:02.821799:0: initramfs loaded to 0x1b4e7000 (size 0xb0898e)
MESS:00:00:02.836318:0: dtb_file 'bcm2710-rpi-zero-2-w.dtb'
MESS:00:00:02.840194:0: brfs: File read: 11569550 bytes
MESS:00:00:02.849171:0: brfs: File read: /mfs/sd/bcm2710-rpi-zero-2-w.dtb
MESS:00:00:02.854262:0: Loaded 'bcm2710-rpi-zero-2-w.dtb' to 0x100 size 0x8258
MESS:00:00:02.876038:0: brfs: File read: 33368 bytes
MESS:00:00:02.892755:0: brfs: File read: /mfs/sd/overlays/overlay_map.dtb
MESS:00:00:02.927145:0: brfs: File read: 5255 bytes
MESS:00:00:02.933541:0: brfs: File read: /mfs/sd/config.txt
MESS:00:00:02.937568:0: dtparam: audio=on
MESS:00:00:02.948005:0: brfs: File read: 1322 bytes
MESS:00:00:02.971952:0: brfs: File read: /mfs/sd/overlays/vc4-kms-v3d.dtbo
MESS:00:00:03.023016:0: Loaded overlay 'vc4-kms-v3d'
MESS:00:00:03.026278:0: dtparam: nohdmi=true
MESS:00:00:03.031105:0: dtparam: act_led_trigger=none
MESS:00:00:03.048180:0: dtparam: act_led_activelow=on
MESS:00:00:03.149316:0: brfs: File read: 2760 bytes
MESS:00:00:03.154502:0: brfs: File read: /mfs/sd/cmdline.txt
MESS:00:00:03.158504:0: Read command line from file 'cmdline.txt':
MESS:00:00:03.164369:0: 'console=serial0,115200 console=tty1 root=PARTUUID=26bbce6b-02 rootfstype=ext4 fsck.repair=yes rootwait cfg80211.ieee80211_regdom=DE init=/init.sh'
MESS:00:00:03.195926:0: gpioman: gpioman_get_pin_num: pin EMMC_ENABLE not defined
MESS:00:00:03.269361:0: brfs: File read: 146 bytes
MESS:00:00:03.812401:0: brfs: File read: /mfs/sd/kernel8.img
MESS:00:00:03.816343:0: Loaded 'kernel8.img' to 0x200000 size 0x8d8bd7
MESS:00:00:05.364579:0: Device tree loaded to 0x1b4de900 (size 0x8605)
MESS:00:00:05.370571:0: uart: Set PL011 baud rate to 103448.300000 Hz
MESS:00:00:05.377080:0: uart: Baud rate change done...
MESS:00:00:05.380495:0: uart: Baud rate[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034]
</code></pre><h3 id="disabling-hdmi-probing">Disabling HDMI probing<a href="#disabling-hdmi-probing" aria-label="Heading self-link"></a></h3><p>The bootloader spends a lot of time trying to auto-detect video parameters for a possibly attached HDMI monitor.<br>We don’t have HDMI (it’s disabled anyway, remember?), so it doesn’t make much sense to wait for an I2C response with EDID (resolution, frame rate, etc.) information.</p><p>By simply hardcoding an EDID string, we can disable any probing:</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># don't try to read HDMI eeprom</span>
</span></span><span><span><span>hdmi_blanking</span><span>=</span><span>2</span>
</span></span><span><span><span>hdmi_ignore_edid</span><span>=</span><span>0xa5000080</span>
</span></span><span><span><span>hdmi_ignore_cec_init</span><span>=</span><span>1</span>
</span></span><span><span><span>hdmi_ignore_cec</span><span>=</span><span>1</span>
</span></span></code></pre></div><h3 id="disable-hat-poe-and-lcd-probing">Disable HAT, PoE and LCD probing<a href="#disable-hat-poe-and-lcd-probing" aria-label="Heading self-link"></a></h3><p>The boot process will additionally try to detect I2C EEPROMs on HATs, will try to detect a PoE hat (which needs a fan) and some other things.
We can safely disable those:</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># all these options cause a wait for an I2C bus response, we don't need any of them, so let's disable them.</span>
</span></span><span><span><span>force_eeprom_read</span><span>=</span><span>0</span>
</span></span><span><span><span>disable_poe_fan</span><span>=</span><span>1</span>
</span></span><span><span><span>ignore_lcd</span><span>=</span><span>1</span>
</span></span><span><span><span>disable_touchscreen</span><span>=</span><span>1</span>
</span></span><span><span><span>disable_fw_kms_setup</span><span>=</span><span>1</span>
</span></span></code></pre></div><h3 id="disable-camera--display-probing">Disable camera &amp; display probing<a href="#disable-camera--display-probing" aria-label="Heading self-link"></a></h3><p>Probing for an attached MIPI camera or display will also take some time.
We know which camera is attached (HQ Camera, IMX477 in this case), so let’s hardcode this:</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># no autodetection for anything (will wait for I2C answers)</span>
</span></span><span><span><span>camera_auto_detect</span><span>=</span><span>0</span>
</span></span><span><span><span>display_auto_detect</span><span>=</span><span>0</span>
</span></span><span><span>
</span></span><span><span><span># load HQ camera IMX477 sensor manually</span>
</span></span><span><span><span>dtoverlay</span><span>=</span><span>imx477</span>
</span></span></code></pre></div><h3 id="disabling-initramfs">Disabling initramfs<a href="#disabling-initramfs" aria-label="Heading self-link"></a></h3><p>The above changes brought the (self reported) boot time from 5.38s down to 4.75s.<br>We can disable the initramfs entirely by removing <code>auto_initramfs=1</code>.</p><p>Savings depend on the size of the initramfs of course, but this brings us down to 4.47s.</p><h3 id="tested-with-no-significant-difference">Tested, with no significant difference<a href="#tested-with-no-significant-difference" aria-label="Heading self-link"></a></h3><p>Overclocking the SD peripheral to 100 MHz is often recommended online but did not create a measurable difference in boot performance.</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># not recommended! data corruption risk!</span>
</span></span><span><span><span>dtoverlay</span><span>=</span><span>sdtweak,overclock_50=100</span>
</span></span></code></pre></div><p>Operating the SD peripheral at such high speeds also risks data corruption (on write accesses), which is very undesirable in remote IoT devices.</p><h3 id="kernel-load">Kernel load<a href="#kernel-load" aria-label="Heading self-link"></a></h3><p>At this point, loading the kernel is one of the slowest operations:</p><pre tabindex="0"><code>MESS:00:00:03.816343:0: Loaded 'kernel8.img' to 0x200000 size 0x8d8bd7
MESS:00:00:05.364579:0: Device tree loaded to 0x1b4de900 (size 0x8605)
</code></pre><p>Loading 9276375 Bytes takes about 1.54s -&gt; about 6 MiB/s transfer speed.</p><p>This load is being done by the GPU (!) with the internal, proprietary VideoCoreIV processor.<br>It’s possible that the loader code is just inefficient and slow, it’s also possible that it is using very conservative settings.<br>Sadly, it’s a black box and we can’t touch registers or mess with the parameters in any other useful way.</p><p>I haven’t found a good way to optimize this yet, so a smaller kernel is needed.</p><p>Overclocking the GPU processor core is theoretically possible with</p><div><pre tabindex="0"><code data-lang="ini"><span><span><span># Overclock GPU VideoCore IV processor (not recommended!)</span>
</span></span><span><span><span>core_freq_min</span><span>=</span><span>500</span>
</span></span><span><span><span>core_freq</span><span>=</span><span>550</span>
</span></span></code></pre></div><p>which does lead to a 20% reduction in kernel load time. The side effects (reliability, etc.) of this are unknown.</p><h3 id="buildroot--custom-kernel">Buildroot / Custom kernel<a href="#buildroot--custom-kernel" aria-label="Heading self-link"></a></h3><p>It’s time to migrate the system from Raspbian/Debian to a custom built Buildroot distro (especially to get the custom kernel).</p><p>Using buildroot 2024.02.1, a very stripped down system was configured.<br>Native aarch64 toolchain, still with full glibc and the Raspberry Pi userland tools (like camera utilities).</p><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/buildroot-menuconfig.png" alt="Buildroot ncurses menuconfig screenshot"></p><p>The kernel was configured:</p><ul><li>without sound support</li><li>without most of the block device &amp; filesystem drivers (except SD/MMC and ext4)</li><li>without RAID support</li><li>without USB support</li><li>without HID support</li><li>without DVB support</li><li>without video &amp; framebuffer support (HDMI is disabled anyway)</li><li>without advanced networking features (tunnels, bridging, firewalling, etc.)</li><li>uncompressed (not Gzip)</li><li>modules uncompressed (not Gzip)</li></ul><p>In testing, having both the kernel and the modules uncompressed results in a net-positive energy result (even if more time is spent in the GPU loading the kernel).
Decompressing Gzip takes a lot of energy (and effectively involves another relocation step).</p><p>A security feature called KASLR was also disabled.<br>KASLR randomizes the load address of the kernel in memory, making it harder to write exploit code (because the memory location of the kernel is unknown).
This requires the kernel to be re-located after it has been loaded by the GPU.</p><p>In our usecase, the network attack surface is very limited, so KASLR can be disabled (all application software runs as root anyway).
Mitigations for speculative execution vulnurabilies like Spectre were also disabled.</p><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/buildroot-linux-menuconfig.png" alt="Linux 6.6.26 menuconfig screenshot"></p><p>The resulting kernel is 8.5MiB (uncompressed) in size, 4.1MiB compressed as Gzip (which isn’t used here, just for comparison).<br>The original Raspbian kernel was 25 MiB (uncompressed), 8.9 MiB compressed as Gzip.</p><h3 id="final-result">Final result<a href="#final-result" aria-label="Heading self-link"></a></h3><p><img src="https://kittenlabs.de/blog/2024/09/01/extreme-pi-boot-optimization/buildroot-kernel.png" alt="Power Profiler screenshot, showing GPIO4 going low after 3.4s"></p><p><strong>We can now boot into a Linux user space program in less than 3.5s!</strong><br>~400ms is spent in the Linux kernel (difference between pin 0 and pin 1)</p><p>Total energy consumption: <strong>0.364 As * 5.0 V = 1.82 Ws</strong><br>We reduced the energy required by a factor of 5 (compared to stock Debian at 9.5 Ws until user space).</p><h3 id="links">Links<a href="#links" aria-label="Heading self-link"></a></h3><ul><li><a href="https://github.com/Manawyrm/SolarCamPi-Buildroot/blob/v2/buildroot/board/raspberrypi0w/config.txt" target="_blank">SolarCamPi config.txt</a>: Complete config.txt</li><li><a href="https://github.com/Manawyrm/SolarCamPi-Buildroot/blob/v2/buildroot/configs/linux_solarcampi_defconfig" target="_blank">SolarCamPi Linux kernel defconfig</a>: Stripped down kernel config</li><li><a href="https://github.com/Manawyrm/SolarCamPi-Buildroot/tree/v2" target="_blank">SolarCamPi-Buildroot (v2 branch)</a>: Full Buildroot tree (work-in-progress!)</li></ul></div></div>]]></description>
        </item>
    </channel>
</rss>