<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Wed, 31 Jul 2024 11:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Rustgo: Calling Rust from Go with near-zero overhead (2017) (107 pts)]]></title>
            <link>https://words.filippo.io/rustgo/</link>
            <guid>41116639</guid>
            <pubDate>Wed, 31 Jul 2024 05:43:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://words.filippo.io/rustgo/">https://words.filippo.io/rustgo/</a>, See on <a href="https://news.ycombinator.com/item?id=41116639">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
            <p>
[<a href="https://habrahabr.ru/post/337348/?ref=words.filippo.io">русский</a><!-- — 日本語]-->]
</p>
<p>Go has good support for calling into assembly, and a lot of the fast cryptographic code in the stdlib is carefully optimized assembly, bringing speedups of over 20 times.</p>
<p>However, writing assembly code is hard, reviewing it is possibly harder, and <a href="https://groups.google.com/forum/?ref=words.filippo.io#!topic/golang-announce/B5ww0iFt1_Q">cryptography is unforgiving</a>. Wouldn't it be nice if we could write these hot functions in a higher level language?</p>
<p>This post is the story of a slightly-less-than-sane experiment to call Rust code from Go fast enough to replace assembly. No need to know Rust, or compiler internals, but knowing what a linker is would help.</p>
<blockquote>
<p>Hello, readers from the future! In the seven years since writing this a couple things changed, but note that this was always a fun technical exploration, not a production guide.</p>
<p>If you're looking for <em>serious</em> ways to call Rust from Go, know that cgo these days <a href="https://shane.ai/posts/cgo-performance-in-go1.21/?ref=words.filippo.io">is faster</a> and <a href="https://github.com/golang/go/issues/56378?ref=words.filippo.io">is still getting faster</a>. There are also some experimental cgo-less alternatives, like <a href="https://github.com/ebitengine/purego?ref=words.filippo.io">purego</a> and <a href="https://wazero.io/?ref=words.filippo.io">wazero</a>. I toyed for years with the idea of using Wasm for cross-platform Go FFI withg better DX. I admit I even used a tecnique similar to this in the standard library, to <a href="https://go-review.googlesource.com/c/go/+/227037?ref=words.filippo.io">invoke the macOS X.509 verifier</a>.</p>
<p>As for me, I gave <a href="https://www.youtube.com/watch?v=eymMKjymgGA&amp;list=PLwiyx1dc3P2KWbISzXf3T63_fenq7sOoL&amp;index=10&amp;t=227&amp;ref=words.filippo.io">a talk</a> about this at a Go conference wearing a (freshly printed) Rust Evangelism Strike Force t-shirt. That kind of landed me a job on the Go team at Google, which I left to <a href="https://words.filippo.io/geomys/">become an independent Go maintainer</a>.</p>
<p>The fight against cryptographic assembly continues, but now with <a href="https://go.dev/wiki/AssemblyPolicy?ref=words.filippo.io">strict policies</a> and <a href="https://github.com/mmcloughlin/avo?ref=words.filippo.io">dedicated generators</a>. Just yesterday I [livestreamed a benchmarking session to replace some P-256 curve assembly] with formally verified Go code.</p>
</blockquote>
<h2 id="why-rust">Why Rust</h2>
<p>I'll be upfront: I don't know Rust, and don't feel compelled to do my day-to-day programming in it. However, I know Rust is a very tweakable and optimizable language, while still more readable than assembly. (After all, everything is more readable than assembly!)</p>
<p>Go strives to find defaults that are good for its core use cases, and only accepts features that are fast enough to be enabled by default, in a constant and successful fight against knobs. I love it for that. But for what we are doing today we need a language that won't flinch when asked to generate stack-only functions with manually hinted away safety checks.</p>
<p>So if there's a language that we might be able to constrain enough to behave like assembly, and to optimize enough to be as useful as assembly, it might be Rust.</p>
<p>Finally, Rust is safe, actively developed, and not least, there's already a good ecosystem of high-performance Rust cryptography code to tap into.</p>
<h2 id="why-not-cgo">Why not cgo</h2>
<p>Go has a <a href="https://en.wikipedia.org/wiki/Foreign_function_interface?ref=words.filippo.io">Foreign Function Interface</a>, <em>cgo</em>. <a href="https://golang.org/cmd/cgo/?ref=words.filippo.io">cgo</a> allows Go programs to call C functions in the most natural way possible—which is unfortunately not very natural at all. (I know <a href="https://speakerdeck.com/filosottile/from-cgo-back-to-go-gophercon-2016?ref=words.filippo.io">more than I'd like to about cgo</a>, and I can tell you <a href="https://dave.cheney.net/2016/01/18/cgo-is-not-go?ref=words.filippo.io">it's not fun</a>.)</p>
<p>By using the C <a href="https://en.wikipedia.org/wiki/Application_binary_interface?ref=words.filippo.io">ABI</a> as <a href="https://en.wikipedia.org/wiki/Lingua_franca?ref=words.filippo.io">lingua franca</a> of FFIs, we can call anything from anything: Rust can compile into a library exposing the C ABI, and cgo can use that. It's awkward, but it works.</p>
<p>We can even use reverse-cgo to build Go into a C library and call it from random languages, like <a href="https://blog.filippo.io/building-python-modules-with-go-1-5/?ref=words.filippo.io">I did with Python as a stunt</a>. (It was a stunt folks, stop taking me seriously.)</p>
<p>But cgo does a lot of things to enable that bit of Go naturalness it provides: it will setup a whole stack for C to live in, it makes defer calls to prepare for a panic in a Go callback... this <s>could be</s> will be a whole post of its own.</p>
<p>As a result, the performance cost of each cgo call is way too high for the use case we are thinking about—<em>small hot functions</em>.</p>
<h2 id="linking-it-together">Linking it together</h2>
<p>So here's the idea: if we have Rust code that is as constrained as assembly, we should be able to use it <strong>just like assembly</strong>, and call straight into it. Maybe with a thin layer of glue.</p>
<p>We don't have to work at the <a href="https://idea.popcount.org/2013-07-24-ir-is-better-than-assembly/?ref=words.filippo.io">IR</a> level: the Go compiler converts both code and high-level assembly into machine code before linking <a href="https://talks.golang.org/2016/asm.slide?ref=words.filippo.io">since Go 1.3</a>.</p>
<p>This is confirmed by the existence of "<a href="https://docs.google.com/document/d/1nr-TQHw_er6GOQRsF6T43GGhFDelrAP0NqSS_00RgZQ/preview?ref=words.filippo.io">external linking</a>", where the system linker is used to put together a Go program. It's how cgo works, too: it compiles C with the C compiler, Go with the Go compiler, and links it all together with <code>clang</code> or <code>gcc</code>. We can even pass flags to the linker with <code>CGO_LDFLAGS</code>.</p>
<p>Underneath all the safety features of cgo, we surely find a cross-language function call, after all.</p>
<p>It would be nice if we could figure out how to do this without patching the compiler, though. First, let's figure out how to link a Go program with a Rust archive.</p>
<p>I could not find a decent way to link against a foreign blob with <code>go build</code> (why should there be one?) except using <code>#cgo</code> directives. However, invoking cgo <a href="https://github.com/golang/go/issues/19448?ref=words.filippo.io">makes <code>.s</code> files go to the C compiler instead of the Go one</a>, and my friends, we <em>will</em> need Go assembly.</p>
<p>Thankfully <a href="https://golang.org/pkg/go/build/?ref=words.filippo.io">go/build</a> is nothing but a frontend! Go offers a set of low level tools to <a href="https://golang.org/cmd/compile/?ref=words.filippo.io">compile</a> and <a href="https://golang.org/cmd/link/?ref=words.filippo.io">link</a> programs, <code>go build</code> just collects files and invokes those tools. We can follow what it does by using the <code>-x</code> flag.</p>
<p>I built this small Makefile by following a <code>-x -ldflags "-v -linkmode=external '-extldflags=-v'"</code> invocation of a cgo build.</p>
<pre><code>rustgo: rustgo.a
        go tool link -o rustgo -extld clang -buildmode exe -buildid b01dca11ab1e -linkmode external -v rustgo.a

rustgo.a: hello.go hello.o
        go tool compile -o rustgo.a -p main -buildid b01dca11ab1e -pack hello.go
        go tool pack r rustgo.a hello.o

hello.o: hello.s
        go tool asm -I "$(shell go env GOROOT)/pkg/include" -D GOOS_darwin -D GOARCH_amd64 -o hello.o hello.s
</code></pre>
<p>This compiles a simple main package composed of a Go file (<code>hello.go</code>) and a Go assembly file (<code>hello.s</code>).</p>
<p>Now, if we want to link in a Rust object we first build it as a static library...</p>
<pre><code>libhello.a: hello.rs
        rustc -g -O --crate-type staticlib hello.rs
</code></pre>
<p>... and then just tell the external linker to link it together.</p>
<pre><code>rustgo: rustgo.a libhello.a
        go tool link -o rustgo -extld clang -buildmode exe -buildid b01dca11ab1e -linkmode external -v -extldflags='-lhello -L"$(CURDIR)"' rustgo.a
</code></pre>
<pre><code>$ make
go tool asm -I "/usr/local/Cellar/go/1.8.1_1/libexec/pkg/include" -D GOOS_darwin -D GOARCH_amd64 -o hello.o hello.s
go tool compile -o rustgo.a -p main -buildid b01dca11ab1e -pack hello.go
go tool pack r rustgo.a hello.o
rustc --crate-type staticlib hello.rs
note: link against the following native artifacts when linking against this static library

note: the order and any duplication can be significant on some platforms, and so may need to be preserved

note: library: System

note: library: c

note: library: m

go tool link -o rustgo -extld clang -buildmode exe -buildid b01dca11ab1e -linkmode external -v -extldflags="-lhello -L/Users/filippo/code/misc/rustgo" rustgo.a
HEADER = -H1 -T0x1001000 -D0x0 -R0x1000
searching for runtime.a in /usr/local/Cellar/go/1.8.1_1/libexec/pkg/darwin_amd64/runtime.a
searching for runtime/cgo.a in /usr/local/Cellar/go/1.8.1_1/libexec/pkg/darwin_amd64/runtime/cgo.a
 0.00 deadcode
 0.00 pclntab=166785 bytes, funcdata total 17079 bytes
 0.01 dodata
 0.01 symsize = 0
 0.01 symsize = 0
 0.01 reloc
 0.01 dwarf
 0.02 symsize = 0
 0.02 reloc
 0.02 asmb
 0.02 codeblk
 0.03 datblk
 0.03 sym
 0.03 headr
 0.06 host link: "clang" "-m64" "-gdwarf-2" "-Wl,-headerpad,1144" "-Wl,-no_pie" "-Wl,-pagezero_size,4000000" "-o" "rustgo" "-Qunused-arguments" "/var/folders/ry/v14gg02d0y9cb2w9809hf6ch0000gn/T/go-link-412633279/go.o" "/var/folders/ry/v14gg02d0y9cb2w9809hf6ch0000gn/T/go-link-412633279/000000.o" "-g" "-O2" "-lpthread" "-lhello" "-L/Users/filippo/code/misc/rustgo"
 0.34 cpu time
12641 symbols
5764 liveness data
</code></pre>
<h2 id="jumping-into-rust">Jumping into Rust</h2>
<p>Alright, so we linked it, but the symbols are not going to do anything just by sitting next to each other. We need to somehow call the Rust function from our Go code.</p>
<p>We know how to call a Go function from Go. In assembly the same call looks like <code>CALL hello(SB)</code>, where SB is a virtual register all global symbols are relative to.</p>
<p>If we want to call an assembly function from Go we make the compiler aware of its existence like a C header, by writing <code>func hello()</code> without a function body.</p>
<p>I tried all combinations of the above to call an external (Rust) function, but they all complained that they couldn't find either the symbol name, or the function body.</p>
<p>But cgo, which at the end of the day is just a giant code generator, somehow manages to eventually invoke that foreign function! How?</p>
<p>I stumbled upon <a href="https://github.com/golang/go/blob/c3c2e453c968c7b450c59a47dc9502bd44257164/src/cmd/cgo/out.go?ref=words.filippo.io#L1475-L1478">the answer</a> a couple days later.</p>
<pre><code>//go:cgo_import_static _cgoPREFIX_Cfunc__Cmalloc
//go:linkname __cgofn__cgoPREFIX_Cfunc__Cmalloc _cgoPREFIX_Cfunc__Cmalloc
var __cgofn__cgoPREFIX_Cfunc__Cmalloc byte
var _cgoPREFIX_Cfunc__Cmalloc = unsafe.Pointer(&amp;__cgofn__cgoPREFIX_Cfunc__Cmalloc)
</code></pre>
<p>That looks like an interesting pragma! <code>//go:linkname</code> just creates a symbol alias in the local scope (which <a href="https://sitano.github.io/2016/04/28/golang-private/?ref=words.filippo.io">can be used to call private functions</a>!), and I'm pretty sure the <code>byte</code> trick is only cleverness to have something to take the address of, but <code>//go:cgo_import_static</code>... this imports an external symbol!</p>
<blockquote>
<p><strong>2024 note</strong>: <code>cgo_import_static</code> is <a href="https://github.com/golang/go/issues/23672?ref=words.filippo.io">not usable anymore</a>, but there are <a href="https://github.com/FiloSottile/ed25519-dalek-rustgo/pull/1?ref=words.filippo.io">alternative strategies</a>.</p>
</blockquote>
<p>Armed with this new tool and the Makefile above, we have a chance to invoke this Rust function (<code>hello.rs</code>)</p>
<pre><code>#[no_mangle]
pub extern fn hello() {
    println!("Hello, Rust!");
}
</code></pre>
<p>(The no-mangle-pub-extern incantation is from <a href="https://doc.rust-lang.org/1.5.0/book/rust-inside-other-languages.html?ref=words.filippo.io">this tutorial</a>.)</p>
<p>from this Go program (<code>hello.go</code>)</p>
<pre><code>package main

//go:cgo_import_static hello

func trampoline()

func main() {
    println("Hello, Go!")
    trampoline()
}
</code></pre>
<p>with the help of this assembly snippet. (<code>hello.s</code>)</p>
<pre><code>TEXT ·trampoline(SB), 0, $2048
    JMP hello(SB)
    RET
</code></pre>
<p><code>CALL</code> was a bit too smart to work, but using a simple <code>JMP</code>...</p>
<pre><code>Hello, Go!
Hello, Rust!
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x0]
</code></pre>
<p>💥</p>
<p>Well, it crashes when it tries to return. Also that <code>$2048</code> value is the whole stack size Rust is allowed (if it's even putting the stack in the right place), and don't ask me what happens if Rust tries to touch a heap... but hell, I'm surprised it works at all!</p>
<h2 id="calling-conventions">Calling conventions</h2>
<p>Now, to make it return cleanly, and take some arguments, we need to look more closely at the Go and Rust calling conventions. A <a href="https://en.wikipedia.org/wiki/Calling_convention?ref=words.filippo.io">calling convention</a> defines where arguments and return values sit across function calls.</p>
<p>The Go calling convention is described <a href="https://github.com/golang/go/files/447163/GoFunctionsInAssembly.pdf?ref=words.filippo.io">here</a> and <a href="https://golang.org/doc/asm?ref=words.filippo.io">here</a>. For Rust we'll look at the <a href="https://doc.rust-lang.org/beta/book/first-edition/ffi.html?ref=words.filippo.io#calling-rust-code-from-c">default for FFI</a>, which is the standard C calling convention.</p>
<p>To keep going we're going to need a debugger. (LLDB supports Go, but <a href="https://github.com/golang/go/issues/20568?ref=words.filippo.io">breakpoints are somehow broken on macOS</a>, so I had to play inside a privileged Docker container.)</p>

<p>
![Zelda dangerous to go alone](/content/images/2017/08/zelda-2.png)
</p>
<h3 id="the-go-calling-convention">The Go calling convention</h3>
<p><img src="https://words.filippo.io/content/images/2017/08/Go-stack-layout-3.png" alt="Go calling convention diagram" loading="lazy"></p>
<p>The Go calling convention is mostly <a href="https://github.com/golang/go/issues/16922?ref=words.filippo.io">undocumented</a>, but we'll need to understand it to proceed, so here is what we can learn from a disassembly (amd64 specific). Let's look at a very simple function.</p>
<pre><code>// func foo(x, y uint64) uint64
TEXT ·foo(SB), 0, $256-24
    MOVQ x+0(FP), DX
    MOVQ DX, ret+16(FP)
    RET
</code></pre>
<p><code>foo</code> has 256 (0x100) bytes of local frame, 16 bytes of arguments, 8 bytes of return value, and it returns its first argument.</p>
<pre><code>func main() {
    foo(0xf0f0f0f0f0f0f0f0, 0x5555555555555555)
</code></pre>
<pre><code>rustgo[0x49d785]:  movabsq $-0xf0f0f0f0f0f0f10, %rax
rustgo[0x49d78f]:  movq   %rax, (%rsp)
rustgo[0x49d793]:  movabsq $0x5555555555555555, %rax
rustgo[0x49d79d]:  movq   %rax, 0x8(%rsp)
rustgo[0x49d7a2]:  callq  0x49d8a0                  ; main.foo at hello.s:14
</code></pre>
<p>The caller, seen above, does very little: it places the arguments on the stack in reverse order, at the bottom of its own frame (<code>rsp</code> to <code>16(rsp)</code>, remember that the stack grows down) and executes <code>CALL</code>. The <code>CALL</code> will push the return pointer to the stack and jump. There's no caller cleanup, just a plain <code>RET</code>.</p>
<p>Notice that <code>rsp</code> is fixed, and we have <code>movq</code>s, not <code>push</code>s.</p>
<pre><code>rustgo`main.foo at hello.s:14:
rustgo[0x49d8a0]:  movq   %fs:-0x8, %rcx
rustgo[0x49d8a9]:  leaq   -0x88(%rsp), %rax
rustgo[0x49d8b1]:  cmpq   0x10(%rcx), %rax
rustgo[0x49d8b5]:  jbe    0x49d8ee                  ; main.foo + 78 at hello.s:14
                   [...]
rustgo[0x49d8ee]:  callq  0x495d10                  ; runtime.morestack_noctxt at asm_amd64.s:405
rustgo[0x49d8f3]:  jmp    0x49d8a0                  ; main.foo at hello.s:14
</code></pre>
<p>The first 4 and last 2 instructions of the function are checking if there is enough space for the stack, and if not calling <code>runtime.morestack</code>. They are probably skipped for <code>NOSPLIT</code> functions.</p>
<pre><code>rustgo[0x49d8b7]:  subq   $0x108, %rsp
                   [...]
rustgo[0x49d8e6]:  addq   $0x108, %rsp
rustgo[0x49d8ed]:  retq
</code></pre>
<p>Then there's the <code>rsp</code> management, which subtracts 0x108, making space for the entire 0x100 bytes of frame in one go, and the 8 bytes of frame pointer. So <code>rsp</code> points to the bottom (the end) of the function frame, and is callee managed. Before returning, <code>rsp</code> is returned to where it was (just past the return pointer).</p>
<pre><code>rustgo[0x49d8be]:  movq   %rbp, 0x100(%rsp)
rustgo[0x49d8c6]:  leaq   0x100(%rsp), %rbp
                   [...]
rustgo[0x49d8de]:  movq   0x100(%rsp), %rbp
</code></pre>
<p>Finally the <a href="https://stackoverflow.com/questions/579262/what-is-the-purpose-of-the-ebp-frame-pointer-register?ref=words.filippo.io">frame pointer</a>, which is effectively pushed to the stack just after the return pointer, and updated at <code>rbp</code>. So <code>rbp</code> is also callee saved, and should be updated to point at where the caller's <code>rbp</code> is stored to enable stack trace unrolling.</p>
<pre><code>rustgo[0x49d8ce]:  movq   0x110(%rsp), %rdx
rustgo[0x49d8d6]:  movq   %rdx, 0x120(%rsp)
</code></pre>
<p>Finally, from the body itself we learn that return values go just above the arguments.</p>
<h4 id="virtual-registers">Virtual registers</h4>
<p>The Go docs say that <code>SP</code> and <code>FP</code> are virtual registers, not just aliases of <code>rsp</code> and <code>rbp</code>.</p>
<p>Indeed, when accessing <code>SP</code> from Go assembly, the offsets are adjusted relative to the real <code>rsp</code> so that <code>SP</code> points to the top, not the bottom, of the frame. That's convenient because it means not having to change all offsets when changing the frame size, but it's just syntactic sugar. Naked access to the register (like <code>MOVQ SP, DX</code>) accesses <code>rsp</code> directly.</p>
<p>The <code>FP</code> virtual register is simply an adjusted offset over <code>rsp</code>, too. It points to the bottom of the caller frame, where arguments are, and there's no direct access.</p>
<p>Note: Go maintains <code>rbp</code> and frame pointers to help debugging, but then uses a fixed <code>rsp</code> and <code>omit-stack-pointer</code>-style <code>rsp</code> offsets for the virtual <code>FP</code>. You can learn more about frame pointers and not using them from <a href="https://www.imperialviolet.org/2017/01/18/cfi.html?ref=words.filippo.io">this Adam Langley blog post</a>.</p>
<h3 id="the-c-calling-convention">The C calling convention</h3>
<p>"<a href="https://en.wikipedia.org/wiki/X86_calling_conventions?ref=words.filippo.io#System_V_AMD64_ABI">sysv64</a>", the default C calling convention on x86-64, is quite different:</p>
<ul>
<li>The arguments are passed via registers: RDI, RSI, RDX, RCX, R8, and R9.</li>
<li>The return value goes to RAX.</li>
<li>Some registers are callee-saved: RBP, RBX, and R12–R15.
<ul>
<li>We care little about this, since in Go all registers are caller-saved.</li>
</ul>
</li>
<li>The stack must be aligned to 16-bytes.
<ul>
<li>(I think this is why <code>JMP</code> worked and <code>CALL</code> didn't, we failed to align the stack!)</li>
</ul>
</li>
</ul>
<p>Frame pointers work the same way (and are generated by <code>rustc</code> with <code>-g</code>).</p>
<h3 id="gluing-them-together">Gluing them together</h3>
<p>Building a simple trampoline between the two conventions won't be hard. We can also look at <a href="https://github.com/golang/go/blob/57bf6aca711a53aa7fea877b98896cd0445c6ad0/src/runtime/asm_amd64.s?ref=words.filippo.io#L585"><code>asmcgocall</code></a> for inspiration, since it does approximately the same job, but for cgo.</p>
<p>We need to remember that we want the Rust function to use the stack space of our assembly function, since Go ensured for us that it's present. To do that, we have to rollback <code>rsp</code> from the end of the stack.</p>
<pre><code>package main

//go:cgo_import_static increment
func trampoline(arg uint64) uint64

func main() {
    println(trampoline(41))
}
</code></pre>
<center>⬇</center>
<pre><code>TEXT ·trampoline(SB), 0, $2048-16
    MOVQ arg+0(FP), DI // Load the argument before messing with SP
    MOVQ SP, BX        // Save SP in a callee-saved registry
    ADDQ $2048, SP     // Rollback SP to reuse this function's frame
    ANDQ $~15, SP      // Align the stack to 16-bytes
    CALL increment(SB)
    MOVQ BX, SP        // Restore SP
    MOVQ AX, ret+8(FP) // Place the return value on the stack
    RET
</code></pre>
<center>⬇</center>
<pre><code>#[no_mangle]
pub extern fn increment(a: u64) -&gt; u64 {
    return a + 1;
}
</code></pre>
<h3 id="call-on-macos">CALL on macOS</h3>
<p><code>CALL</code> didn't quite work on macOS. For some reason, there the function call was replaced with an intermediate call to <code>_cgo_thread_start</code>, which is not that incredible considering we are using something called <code>cgo_import_static</code> and that <code>CALL</code> is virtual in Go assembly.</p>
<pre><code>callq  0x40a27cd                 ; x_cgo_thread_start + 29
</code></pre>
<p>We can bypass that "helper" by using the full <code>//go:linkname</code> incantation we found in the standard library to take a pointer to the function, and then calling the function pointer, like this.</p>
<pre><code>import _ "unsafe"

//go:cgo_import_static increment
//go:linkname increment increment
var increment uintptr
var _increment = &amp;increment
</code></pre>
<pre><code>    MOVQ ·_increment(SB), AX
    CALL AX
</code></pre>
<h2 id="is-it-fast">Is it fast?</h2>
<p>The point of this whole exercise is to be able to call Rust instead of assembly for cryptographic operations (and to have fun). So a rustgo call will have to be almost <a href="https://speakerdeck.com/gtank/i-wanna-go-fast?ref=words.filippo.io">as fast as an assembly call</a> to be useful.</p>
<p>Benchmark time!</p>
<p>We'll compare incrementing a uint64 inline, with a <code>//go:noinline</code> function, with the rustgo call above, and with a cgo call to the exact same Rust function.</p>
<p>Rust was compiled with <code>-g -O</code>, and the benchmarks were run on macOS on a 2.9GHz Intel Core i5.</p>
<pre><code>name                 time/op
CallOverhead/Inline  1.72ns ± 3%
CallOverhead/Go      4.60ns ± 2%
CallOverhead/rustgo  5.11ns ± 4%
CallOverhead/cgo     73.6ns ± 0%
</code></pre>
<p>rustgo is 11% slower than a Go function call, and almost 15 times faster than cgo!</p>
<p>The performance is even better when run on Linux without the function pointer workaround, with only a 2% overhead.</p>
<pre><code>name                 time/op
CallOverhead/Inline  1.67ns ± 2%
CallOverhead/Go      4.49ns ± 3%
CallOverhead/rustgo  4.58ns ± 3%
CallOverhead/cgo     69.4ns ± 0%
</code></pre>
<h2 id="a-real-example">A real example</h2>
<p>For a real-world demo, I picked the excellent curve25519-dalek library, and specifically the task of multiplying the curve basepoint by a scalar and returning its Edwards representation.</p>
<p>The Cargo benchmarks swing widely between executions because of <a href="https://wiki.debian.org/HowTo/CpuFrequencyScaling?ref=words.filippo.io">CPU frequency scaling</a>, but they suggest the operation will take 22.9µs ± 17%.</p>
<pre><code>test curve::bench::basepoint_mult    ... bench:      17,276 ns/iter (+/- 3,057)
test curve::bench::edwards_compress  ... bench:       5,633 ns/iter (+/- 858)
</code></pre>
<p>On the Go side, we'll expose a simple API.</p>
<pre><code>func ScalarBaseMult(dst, in *[32]byte)
</code></pre>
<p>On the Rust side, it's not different from building <a href="https://doc.rust-lang.org/beta/book/first-edition/ffi.html?ref=words.filippo.io#calling-rust-code-from-c">an interface for normal FFI</a>.</p>
<p>I'll be honest, it took me forever to figure out enough Rust to make this work.</p>
<pre><code>#![no_std]

extern crate curve25519_dalek;
use curve25519_dalek::scalar::Scalar;
use curve25519_dalek::constants;

#[no_mangle]
pub extern fn scalar_base_mult(dst: &amp;mut [u8; 32], k: &amp;[u8; 32]) {
    let res = &amp;constants::ED25519_BASEPOINT_TABLE * &amp;Scalar(*k);
    dst.clone_from(res.compress_edwards().as_bytes());
}
</code></pre>
<p>To build the <code>.a</code> we use <code>cargo build --release</code> with a <code>Cargo.toml</code> that defines the dependencies, enables frame pointers, and configures curve25519-dalek to use its most efficient math and no standard library.</p>
<pre><code>[package]
name = "ed25519-dalek-rustgo"
version = "0.0.0"

[lib]
crate-type = ["staticlib"]

[dependencies.curve25519-dalek]
version = "^0.9"
default-features = false
features = ["nightly"]

[profile.release]
debug = true
</code></pre>
<p>Finally, we need to adjust the trampoline to take two arguments and return no value.</p>
<pre><code>TEXT ·ScalarBaseMult(SB), 0, $16384-16
    MOVQ dst+0(FP), DI
    MOVQ in+8(FP), SI

    MOVQ SP, BX
    ADDQ $16384, SP
    ANDQ $~15, SP

    MOVQ ·_scalar_base_mult(SB), AX
    CALL AX

    MOVQ BX, SP
    RET
</code></pre>
<p>The result is a transparent Go call with performance that closely resembles the pure Rust benchmark, and is almost 6% faster than cgo!</p>
<pre><code>name            old time/op  new time/op  delta
RustScalarBaseMult  23.7µs ± 1%  22.3µs ± 4%  -5.88%  (p=0.003 n=5+7)
</code></pre>
<p>For comparison, similar functionality is provided by github.com/agl/ed25519/edwards25519, and that pure-Go library takes almost 3 times as long.</p>
<pre><code>h := &amp;edwards25519.ExtendedGroupElement{}
edwards25519.GeScalarMultBase(h, &amp;k)
h.ToBytes(&amp;dst)
</code></pre>
<pre><code>name            time/op
GoScalarBaseMult  66.1µs ± 2%
</code></pre>
<h2 id="packaging-up">Packaging up</h2>
<p>Now we know it actually works, that's exciting! But to be usable it will have to be an importable package, not forced into <code>package main</code> by a weird build process.</p>
<p>This is where <a href="https://github.com/golang/proposal/blob/master/design/2775-binary-only-packages.md?ref=words.filippo.io"><code>//go:binary-only-package</code></a> comes in! That annotation allows us to tell the compiler to ignore the source of the package, and to only use the pre-built <code>.a</code> library file in <code>$GOPATH/pkg</code>.</p>
<blockquote>
<p><strong>2024 note</strong>: <code>binary-only-package</code> is <a href="https://github.com/golang/go/issues/28152?ref=words.filippo.io">also gone</a>, but <a href="https://github.com/FiloSottile/ed25519-dalek-rustgo/pull/1?ref=words.filippo.io">using a .syso file</a> was probably the correct answer back then, too. Still, this was a fun detour into linking tooling.</p>
</blockquote>
<p>If we can manage to build a <code>.a</code> file that works with Go's native linker (<a href="https://godoc.org/cmd/link?ref=words.filippo.io">cmd/link</a>, referred to also as the <em>internal</em> linker), <strong>we can redistribute that and it will let our users import the package as if it was a native one</strong>, including cross-compiling (provided we included a <code>.a</code> for that platform)!</p>
<p>The Go side is easy, and pairs with the assembly and Rust we already have. We can even include docs for <code>go doc</code>'s benefit.</p>
<pre><code>//go:binary-only-package

// Package edwards25519 implements operations on an Edwards curve that is
// isomorphic to curve25519.
//
// Crypto operations are implemented by calling directly into the Rust
// library curve25519-dalek, without cgo.
//
// You should not actually be using this.
package edwards25519

import _ "unsafe"

//go:cgo_import_static scalar_base_mult
//go:linkname scalar_base_mult scalar_base_mult
var scalar_base_mult uintptr
var _scalar_base_mult = &amp;scalar_base_mult

// ScalarBaseMult multiplies the scalar in by the curve basepoint, and writes
// the compressed Edwards representation of the resulting point to dst.
func ScalarBaseMult(dst, in *[32]byte)
</code></pre>
<p>The Makefile will have to change quite a bit—since we aren't building a binary anymore we don't get to keep using <code>go tool link</code>.</p>
<p>A <code>.a</code> archive is just a pack of <code>.o</code> object files in <a href="https://en.wikipedia.org/wiki/Ar_(Unix)?ref=words.filippo.io">an ancient format with a symbol table</a>. If we could get the symbols from the Rust <code>libed25519_dalek_rustgo.a</code> library into the <code>edwards25519.a</code> archive that <code>go tool compile</code> made, we <em>should</em> be golden.</p>
<p><code>.a</code> archives are managed by the <code>ar</code> UNIX tool, or by its Go internal counterpart, <a href="https://godoc.org/cmd/pack?ref=words.filippo.io">cmd/pack</a> (as in <code>go tool pack</code>). The two formats are ever-so-subtly different, of course. We'll need to use the platform <code>ar</code> for <code>libed25519_dalek_rustgo.a</code> and the Go cmd/pack for <code>edwards25519.a</code>.</p>
<p>(For example, the platform <code>ar</code> on my macOS uses <a href="https://en.wikipedia.org/wiki/Ar_(Unix)?ref=words.filippo.io#BSD_variant">the BSD convention</a> of calling files <code>#1/LEN</code> and then embedding the filename of length LEN at the beginning of the file, to exceed the 16 bytes max file length. That was confusing.)</p>
<p>To bundle the two libraries I tried doing the simplest (read: hackish) thing: extract <code>libed25519_dalek_rustgo.a</code> into a temporary folder, and then pack the objects back into <code>edwards25519.a</code>.</p>
<pre><code>edwards25519/edwards25519.a: edwards25519/rustgo.go edwards25519/rustgo.o target/release/libed25519_dalek_rustgo.a
               go tool compile -N -l -o $@ -p main -pack edwards25519/rustgo.go
               go tool pack r $@ edwards25519/rustgo.o # from edwards25519/rustgo.s
               mkdir -p target/release/libed25519_dalek_rustgo &amp;&amp; cd target/release/libed25519_dalek_rustgo &amp;&amp; \
                       rm -f *.o &amp;&amp; ar xv "$(CURDIR)/target/release/libed25519_dalek_rustgo.a"
               go tool pack r $@ target/release/libed25519_dalek_rustgo/*.o

.PHONY: install
install: edwards25519/edwards25519.a
               mkdir -p "$(shell go env GOPATH)/pkg/darwin_amd64/$(IMPORT_PATH)/"
               cp edwards25519/edwards25519.a "$(shell go env GOPATH)/pkg/darwin_amd64/$(IMPORT_PATH)/"
</code></pre>
<p>Imagine my surprise when it worked!</p>
<p>With the <code>.a</code> in place it's just a matter of making a simple program using the package.</p>
<pre><code>package main

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519"
)

func main() {
	input, _ := hex.DecodeString("39129b3f7bbd7e17a39679b940018a737fc3bf430fcbc827029e67360aab3707")
	expected, _ := hex.DecodeString("1cc4789ed5ea69f84ad460941ba0491ff532c1af1fa126733d6c7b62f7ebcbcf")

	var dst, k [32]byte
	copy(k[:], input)

	edwards25519.ScalarBaseMult(&amp;dst, &amp;k)
	if !bytes.Equal(dst[:], expected) {
		fmt.Println("rustgo produces a wrong result!")
	}

	fmt.Printf("BenchmarkScalarBaseMult\t%v\n", testing.Benchmark(func(b *testing.B) {
		for i := 0; i &lt; b.N; i++ {
			edwards25519.ScalarBaseMult(&amp;dst, &amp;k)
		}
	}))
}
</code></pre>
<p>And running <code>go build</code>!</p>
<pre><code>$ go build -ldflags '-linkmode external -extldflags -lresolv'
$ ./ed25519-dalek-rustgo
BenchmarkScalarBaseMult	  100000	     19914 ns/op
</code></pre>
<p>Well, it almost worked. We cheated. The binary would not compile unless we linked it to <code>libresolv</code>. To be fair, the Rust compiler tried to tell us. (But who listens to everything the Rust compiler tells you anyway?)</p>
<pre><code>note: link against the following native artifacts when linking against this static library

note: the order and any duplication can be significant on some platforms, and so may need to be preserved

note: library: System

note: library: resolv

note: library: c

note: library: m
</code></pre>
<p>Now, linking against system libraries would be a problem, because it will never happen with internal linking and cross-compilation...</p>
<p>But hold on a minute, <em>libresolv</em>?! Why does our <code>no_std</code>, "should be like assembly", stack only Rust library want to <em>resolve DNS names</em>?</p>
<h3 id="i-really-meant-nostd">I really meant <code>no_std</code></h3>
<p>The problem is that the library is not actually <code>no_std</code>. Look at all that stuff in there! We want nothing to do with allocators!</p>
<pre><code>$ ar t target/release/libed25519_dalek_rustgo.a
__.SYMDEF
ed25519_dalek_rustgo-742a1d9f1c101d86.0.o
ed25519_dalek_rustgo-742a1d9f1c101d86.crate.allocator.o
curve25519_dalek-03e3ca0f6d904d88.0.o
subtle-cd04b61500f6e56a.0.o
std-72653eb2361f5909.0.o
panic_unwind-d0b88496572d35a9.0.o
unwind-da13b913698118f9.0.o
arrayref-2be0c0ff08ae2c7d.0.o
digest-f1373d68da35ca45.0.o
generic_array-95ca86a62dc11ddc.0.o
nodrop-7df18ca19bb4fc21.0.o
odds-3bc0ea0bdf8209aa.0.o
typenum-a61a9024d805e64e.0.o
rand-e0d585156faee9eb.0.o
alloc_system-c942637a1f049140.0.o
libc-e038d130d15e5dae.0.o
alloc-0e789b712308019f.0.o
std_unicode-9735142be30abc63.0.o
compiler_builtins-8a5da980a34153c7.0.o
absvdi2.o
absvsi2.o
absvti2.o
[... snip ...]
truncsfhf2.o
ucmpdi2.o
ucmpti2.o
core-9077840c2cc91cbf.0.o
</code></pre>
<p>So how do we actually make it <code>no_std</code>? This turned out to be <a href="https://twitter.com/FiloSottile/status/894663496410988544?ref=words.filippo.io">an entire side-quest</a>, but I'll give you a recap.</p>
<ul>
<li>If any dependency is not <code>no_std</code>, your <code>no_std</code> flag is nullified. One of the <code>curve25519-dalek</code> dependencies had this problem, <code>cargo update</code> fixed that.</li>
<li>Actually making a <code>no_std</code> <em>staticlib</em> (that is, an library for external use, as opposed to for inclusion in a Rust program) is more like making a <code>no_std</code> <em>executable</em>, which is much harder as it must be self-contained.</li>
<li>The docs on how to make a <code>no_std</code> <em>executable</em> are sparse. I mostly used <a href="https://doc.rust-lang.org/1.5.0/book/no-stdlib.html?ref=words.filippo.io">an old version of the Rust book</a> and eventually found <a href="https://doc.rust-lang.org/beta/unstable-book/language-features/lang-items.html?ref=words.filippo.io#writing-an-executable-without-stdlib">this section in the lang_items chapter</a>. <a href="https://os.phil-opp.com/set-up-rust/?ref=words.filippo.io">This blog post</a> was useful.</li>
<li>For starters, you need to define "lang_items" functions to handle functionality that is normally in the stdlib, like <code>panic_fmt</code>.</li>
<li>Then you are without the Rust equivalents of <code>compiler-rt</code>, so you have to import the crate compiler_builtins. (<a href="https://github.com/rust-lang/rust/issues/43264?ref=words.filippo.io">rust-lang/rust#43264</a>)</li>
<li>Then there's a problem with <code>rust_begin_unwind</code> being unexported, which don't ask me why but is solved by marking <code>panic_fmt</code> as <code>no_mangle</code>, which the linter is not happy about. (<a href="https://github.com/rust-lang/rust/issues/38281?ref=words.filippo.io">rust-lang/rust#38281</a>)</li>
<li>Then you are without <code>memcpy</code>, but thankfully there's a native Rust reimplementation in the <a href="https://github.com/alexcrichton/rlibc?ref=words.filippo.io">rlibc</a> crate. Super useful <a href="https://github.com/rust-lang-nursery/compiler-builtins/issues/182?ref=words.filippo.io">learning</a> that <code>nm -u</code> will tell you what symbols are missing from an object.</li>
</ul>
<p>This all boils down to a bunch of arcane lines at the top of our <code>lib.rs</code>.</p>
<pre><code>#![no_std]
#![feature(lang_items, compiler_builtins_lib, core_intrinsics)]
use core::intrinsics;
#[allow(private_no_mangle_fns)] #[no_mangle] // rust-lang/rust#38281
#[lang = "panic_fmt"] fn panic_fmt() -&gt; ! { unsafe { intrinsics::abort() } }
#[lang = "eh_personality"] extern fn eh_personality() {}
extern crate compiler_builtins; // rust-lang/rust#43264
extern crate rlibc;
</code></pre>
<p>And with that, <code>go build</code> works (!!!) on macOS.</p>
<h3 id="linux">Linux</h3>
<p>On Linux nothing works.</p>
<p>External linking complains about <code>fmax</code> and other symbols missing, and it seems to be right.</p>
<pre><code>$ ld -r -o linux.o target/release/libed25519_dalek_rustgo/*.o
$ nm -u linux.o
                 U _GLOBAL_OFFSET_TABLE_
                 U abort
                 U fmax
                 U fmaxf
                 U fmaxl
                 U logb
                 U logbf
                 U logbl
                 U scalbn
                 U scalbnf
                 U scalbnl
</code></pre>
<p>A friend thankfully suggested making sure that I was using <code>--gc-sections</code> to strip dead code, which might reference things I don't actually need. And sure enough, this worked. (That's three layers of flag-passing right there.)</p>
<pre><code>$ go build -ldflags '-extld clang -linkmode external -extldflags -Wl,--gc-sections'
</code></pre>
<p>But umh, in the Makefile we aren't using a linker at all, so where do we put <code>--gc-sections</code>? The answer is to stop hacking <code>.a</code>s together and actually reading the <a href="https://linux.die.net/man/1/ld?ref=words.filippo.io">linker man page</a>.</p>
<p>We can build a <code>.o</code> containing a given symbol and all the symbols it references with <code>ld -r --gc-sections -u $SYMBOL</code>. <code>-r</code> makes the object reusable for a later link, and <code>-u</code> marks a symbol as needed, or everything would end up garbage collected. <code>$SYMBOL</code> is <code>scalar_base_mult</code> in our case.</p>
<p>Why wasn't this a problem on macOS? It would have been if we linked manually, but the macOS compiler apparently does dead symbol stripping by default.</p>
<pre><code>$ ld -e _scalar_base_mult target/release/libed25519_dalek_rustgo/*.o
Undefined symbols for architecture x86_64:
  "___assert_rtn", referenced from:
      _compilerrt_abort_impl in int_util.o
  "_copysign", referenced from:
      ___divdc3 in divdc3.o
      ___muldc3 in muldc3.o
  "_copysignf", referenced from:
      ___divsc3 in divsc3.o
      ___mulsc3 in mulsc3.o
  "_copysignl", referenced from:
      ___divxc3 in divxc3.o
      ___mulxc3 in mulxc3.o
  "_fmax", referenced from:
      ___divdc3 in divdc3.o
  "_fmaxf", referenced from:
      ___divsc3 in divsc3.o
  "_fmaxl", referenced from:
      ___divxc3 in divxc3.o
  "_logb", referenced from:
      ___divdc3 in divdc3.o
  "_logbf", referenced from:
      ___divsc3 in divsc3.o
  "_logbl", referenced from:
      ___divxc3 in divxc3.o
  "_scalbn", referenced from:
      ___divdc3 in divdc3.o
  "_scalbnf", referenced from:
      ___divsc3 in divsc3.o
  "_scalbnl", referenced from:
      ___divxc3 in divxc3.o
ld: symbol(s) not found for inferred architecture x86_64
$ ld -e _scalar_base_mult -dead_strip target/release/libed25519_dalek_rustgo/*.o
</code></pre>
<p>This is also the part where <a href="https://github.com/rust-lang/rust/issues/35052?ref=words.filippo.io">we learn painfully that the macOS platform prepends a <code>_</code> to all symbol names</a>, because reasons.</p>
<p>So here's the Makefile portion that will work with external linking out of the box.</p>
<pre><code>edwards25519/edwards25519.a: edwards25519/rustgo.go edwards25519/rustgo.o edwards25519/libed25519_dalek_rustgo.o
		go tool compile -N -l -o $@ -p main -pack edwards25519/rustgo.go
		go tool pack r $@ edwards25519/rustgo.o edwards25519/libed25519_dalek_rustgo.o

edwards25519/libed25519_dalek_rustgo.o: target/$(TARGET)/release/libed25519_dalek_rustgo.a
ifeq ($(shell go env GOOS),darwin)
		$(LD) -r -o $@ -arch x86_64 -u "_$(SYMBOL)" $^
else
		$(LD) -r -o $@ --gc-sections -u "$(SYMBOL)" $^
endif
</code></pre>
<p>The last missing piece is internal linking on Linux. In short, <a href="https://gist.github.com/FiloSottile/0d938bc4e8a7f3eab1fa4f672c334842?ref=words.filippo.io#file-internal-linking-issue-diff">it was not linking the Rust code</a>, even if the compilation seemed to succeed. The relocations were not happening and the <code>CALL</code> instructions in our Rust function left pointing at meaningless addresses.</p>
<p>At that point I felt like it had to be a silent linker bug, the final boss in implementing rustgo, and reached out to people much smarter than me. One of them was guiding me in <a href="https://gist.github.com/FiloSottile/0d938bc4e8a7f3eab1fa4f672c334842?ref=words.filippo.io#file-relocations-txt">debugging cmd/link</a> (which was fascinating!) when Ian Lance Taylor, the author of cgo, helpfully pointed out that <code>//cgo:cgo_import_static</code> is not enough for internal linking, and that I also wanted <code>//cgo:cgo_import_dynamic</code>.</p>
<pre><code>//go:cgo_import_static scalar_base_mult
//go:cgo_import_dynamic scalar_base_mult
</code></pre>
<p>I still have no idea <em>why</em> leaving it out would result in that issue, but adding it finally made our rustgo package compile both with external and internal linking, on Linux and macOS, out of the box.</p>
<h3 id="redistributable">Redistributable</h3>
<p>Now that we can build a <code>.a</code>, we can take the suggestion in the <a href="https://github.com/golang/proposal/blob/master/design/2775-binary-only-packages.md?ref=words.filippo.io"><code>//go:binary-only-package</code></a> spec, and build a tarball with <code>.a</code>s for <code>linux_amd64</code>/<code>darwin_amd64</code> and the package source, to untar into a GOPATH to install.</p>
<pre><code>$ tar tf ed25519-dalek-rustgo_go1.8.3.tar.gz
src/github.com/FiloSottile/ed25519-dalek-rustgo/
src/github.com/FiloSottile/ed25519-dalek-rustgo/.gitignore
src/github.com/FiloSottile/ed25519-dalek-rustgo/Cargo.lock
src/github.com/FiloSottile/ed25519-dalek-rustgo/Cargo.toml
src/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519/
src/github.com/FiloSottile/ed25519-dalek-rustgo/main.go
src/github.com/FiloSottile/ed25519-dalek-rustgo/Makefile
src/github.com/FiloSottile/ed25519-dalek-rustgo/release.sh
src/github.com/FiloSottile/ed25519-dalek-rustgo/src/
src/github.com/FiloSottile/ed25519-dalek-rustgo/target.go
src/github.com/FiloSottile/ed25519-dalek-rustgo/src/lib.rs
src/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519/rustgo.go
src/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519/rustgo.s
pkg/linux_amd64/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519.a
pkg/darwin_amd64/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519.a
</code></pre>
<p>Once installed like that, the package will be usable just like a native one, cross-compilation included (as long as we packaged a <code>.a</code> for the target)!</p>
<p>The only thing we have to worry about is that if we build Rust with <code>-Ctarget-cpu=native</code> it might not run on older CPUs. Thankfully benchmarks (<a href="https://twitter.com/isislovecruft/status/887787163072507904?ref=words.filippo.io">and the curve25519-dalek authors</a>) tell us that the only real difference is between post and pre-Haswell processors, so we only have to make a universal build and a Haswell one.</p>
<pre><code>$ benchstat bench-none.txt bench-haswell.txt
name                   old time/op  new time/op  delta
ScalarBaseMult/rustgo  22.0µs ± 3%  20.2µs ± 2%  -8.41%  (p=0.001 n=7+6)
$ benchstat bench-haswell.txt bench-native.txt
name                   old time/op  new time/op  delta
ScalarBaseMult/rustgo  20.2µs ± 2%  20.1µs ± 2%   ~     (p=0.945 n=6+7)
</code></pre>
<p>As the cherry on top, I made the Makefile obey GOOS/GOARCH, converting them as needed into Rust target triples, so if you have Rust set up for cross-compilation you can even cross-compile the <code>.a</code> itself.</p>
<p>Here's the result: <a href="https://github.com/FiloSottile/ed25519-dalek-rustgo?ref=words.filippo.io">github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519</a>. It's even on <a href="https://godoc.org/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519?ref=words.filippo.io">godoc</a>.</p>
<h2 id="turning-it-into-a-real-thing">Turning it into a real thing</h2>
<p>Well, this was fun.</p>
<p>But to be clear, rustgo is not a real thing that you should use <s>in production</s>. For example, I suspect I should be saving <code>g</code> before the jump, the stack size is completely arbitrary, and shrinking the trampoline frame like that will probably confuse the hell out of debuggers. Also, a panic in Rust might get weird.</p>
<p>To make it a real thing I'd start by calling <code>morestack</code> manually from a <code>NOSPLIT</code> assembly function to ensure we have enough goroutine stack space (instead of rolling back <code>rsp</code>) with a size obtained maybe from static analysis of the Rust function (instead of, well, made up).</p>
<p>It could all be analyzed, generated and built by some "rustgo" tool, instead of hardcoded in Makefiles and assembly files. cgo itself is little more than a code-generation tool after all. It might make sense as a <code>go:generate</code> thing, but I know someone who wants to make it a cargo command. (Finally some Rust-vs-Go fighting!) Also, a Rust-side collection of FFI types like, say, <code>GoSlice</code> would be nice.</p>
<pre><code>#[repr(C)]
struct GoSlice {
    array: *mut u8,
    len: i32,
    cap: i32,
}
</code></pre>
<p>Or maybe a Go or Rust adult will come and tell us to stop before we get hurt.</p>
<p>In the meantime, you might want to <a href="https://twitter.com/FiloSottile?ref=words.filippo.io">follow me on Twitter</a>.</p>
<p>EDIT: It was pointed out to me that if we simply named the Rust object file <code>libed25519_dalek_rustgo.syso</code>, we could skip all the <code>go tool</code> invocations and simply use <code>go build</code> which automatically links <code>.syso</code> files found in the package. But what's the fun in that.</p>
<blockquote>
<p>Thanks (in no particular order) to David, Ian, Henry, Isis, Manish, Zaki, Anna, George, Kaylyn, Bill, David, Jess, Tony and Daniel for making this possible. Don't blame them for the mistakes and horrors, those are mine.</p>
</blockquote>
<center>
<blockquote data-cards="hidden" data-lang="en-gb">— Filippo Valsorda (@FiloSottile) <a href="https://twitter.com/FiloSottile/status/897434109613674496?ref=words.filippo.io">15 August 2017</a></blockquote>

</center>
<p>P.S. Before anyone tries to compare this to cgo (which has many more safety features) or pure Go, it's not meant to replace either. It's meant to replace manually written assembly with something much safer and more readable, with comparable performance. Or better yet, it was meant to be a fun experiment.</p>

        </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta introduces Segment Anything Model 2 (224 pts)]]></title>
            <link>https://ai.meta.com/sam2/</link>
            <guid>41116635</guid>
            <pubDate>Wed, 31 Jul 2024 05:42:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ai.meta.com/sam2/">https://ai.meta.com/sam2/</a>, See on <a href="https://news.ycombinator.com/item?id=41116635">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><hr><div><p>Key capabilities</p><p><h2>Segment any object, now in any video or image</h2></p><div><p>SAM 2 is the first unified model for segmenting objects across images and videos. You can use a click, box, or mask as the input to select an object on any image or frame of video.</p><a href="https://ai.meta.com/research/publications/sam-2-segment-anything-in-images-and-videos/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;sam2_key_capabilities_read_the_research_paper_cta&quot;}" target="_self"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg>Read the research paper</a></div></div><div><div><h3>Select objects and make adjustments across video frames</h3><div><p>Using SAM 2, you can select one or multiple objects in a video frame. Use additional prompts to refine the model predictions.</p></div></div><div><h3>Robust segmentation, even in <br>unfamiliar videos</h3><div><p>SAM 2 is capable of strong zero-shot performance for objects, images and videos not previously seen during model training, enabling use in a wide range of real-world applications.</p></div></div><div><h3>Real-time interactivity and results</h3><p>SAM 2 is designed for efficient video processing with streaming inference to enable real-time, interactive applications.</p></div></div><div><div><p><h2>State-of-the-art performance for object segmentation</h2></p><p>SAM 2 outperforms the best models in the field for object segmentation in videos and images. </p></div><div><h3>Highlights</h3><div><ul><li>SAM 2 improves on SAM for segmentation in images</li><li>SAM 2 outperforms existing video object segmentation models, especially for tracking parts</li><li>SAM 2 requires less interaction time than existing interactive video segmentation methods</li></ul></div></div></div><div><h2>Try it yourself</h2><div><p>Track an object across any video interactively with as little as a single click on one frame, and create fun effects.</p><a href="https://sam2.metademolab.com/?utm_source=ai_meta_site&amp;utm_medium=web&amp;utm_content=AI_demos_page&amp;utm_campaign=July_moment" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;try_demos_SAM2_tryyourself_CTA&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_g_k9"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path></svg>Try the demo</a></div></div><div><p>Our approach</p><h2>The next generation of Meta Segment Anything</h2><p>SAM 2 brings state-of-the-art video and image segmentation capabilities into a single model, while preserving a simple design and fast inference speed.</p></div><div><p>Model architecture</p><div><p>The SAM 2 model extends the promptable capability of SAM to the video domain by adding a per session memory module that captures information about the target object in the video. This allows SAM 2 to track the selected object throughout all video frames, even if the object temporarily disappears from view, as the model has context of the object from previous frames. SAM 2 also supports the ability to make corrections in the mask prediction based on additional prompts on any frame. </p><p>SAM 2’s streaming architecture—which processes video frames one at a time—is also a natural generalization of SAM to the video domain. When SAM 2 is applied to images, the memory module is empty and the model behaves like SAM.</p></div></div><hr><div><p>The Segment Anything Video Dataset</p><h2>A large and diverse video segmentation dataset</h2><p>SAM 2 was trained on a large and diverse set of videos and masklets (object masks over time), created by applying SAM 2 interactively in a model in the loop data-engine. The training data includes the SA-V dataset, which we are open sourcing.</p><p>Please email <a href="mailto:support@segment-anything.com" target="_blank" data-lnfb-mode="ie">support@segment-anything.com</a> with any issues or questions regarding the SA-V dataset.</p><a href="https://ai.meta.com/datasets/segment-anything-video/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;sam2_the_segment_anything_video_dataset_explore_the_dataset_cta&quot;}" target="_self"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg>Explore the dataset</a><div><h3>Highlights</h3><div><ul><li>~600K+ masklets collected on ~51K videos</li><li>Geographically diverse, real world scenarios collected across 47 countries</li><li>Annotations include whole objects, parts, and challenging occlusions</li></ul></div></div></div><div><div><p>Access our research</p><h2>Open innovation</h2><p>To enable the research community to build upon this work, we’re publicly releasing a pretrained Segment Anything 2 model, along with the SA-V dataset, a demo, and code.</p><a href="https://github.com/facebookresearch/segment-anything-2" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;download_model_SAM2&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_q_Ll"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path></svg>Download the model</a><div><h3>Highlights</h3><div><ul><li>We are providing transparency into the SAM 2 training data </li><li>We prioritized geographic diversity in the SA-V dataset for real-world representation</li><li>We conducted a fairness evaluation of SAM 2</li></ul></div></div></div><div><p><img src="https://static.xx.fbcdn.net/rsrc.php/v3/y4/r/-PAXP-deijE.gif" alt="Person coding on desktop computer"></p></div></div><hr><div><h2>Potential model applications</h2><div><p>SAM 2 can be used by itself, or as part of a larger system with other models in future work to enable novel experiences. </p><a href="https://github.com/facebookresearch/segment-anything-2" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;download_model_SAM2&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_r_ft"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path></svg>Download the model</a></div><div><div><h3>Extensible outputs</h3><div><p>The video object segmentation outputs from SAM 2 could be used as input to other AI systems such as modern video generation models to enable precise editing capabilities.</p></div></div><div><h3>Extensible inputs </h3><p>SAM 2 can be extended to take other types of input prompts such as in the future enabling creative ways of interacting with objects in real-time or live video.</p></div></div></div><hr><div><p><h2>Explore additional resources</h2></p></div><div><div><p><h5>Read the AI at Meta blog</h5></p></div><div><p><h5>Read the research paper</h5></p></div><div><p><h5>Download the dataset</h5></p></div><div><p><h5>Explore the dataset</h5></p></div><div><p><h5>Download the model</h5></p></div><div><p><h5>Try the demo</h5></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[macOS in Docker Container (164 pts)]]></title>
            <link>https://github.com/sickcodes/Docker-OSX</link>
            <guid>41116473</guid>
            <pubDate>Wed, 31 Jul 2024 04:51:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/sickcodes/Docker-OSX">https://github.com/sickcodes/Docker-OSX</a>, See on <a href="https://news.ycombinator.com/item?id=41116473">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Docker-OSX · <a href="https://twitter.com/sickcodes" rel="nofollow">Follow @sickcodes on Twitter</a></h2><a id="user-content-docker-osx--follow-sickcodes-on-twitter" aria-label="Permalink: Docker-OSX · Follow @sickcodes on Twitter" href="#docker-osx--follow-sickcodes-on-twitter"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/sickcodes/Docker-OSX/blob/master/running-mac-inside-docker-qemu.png?raw=true"><img src="https://github.com/sickcodes/Docker-OSX/raw/master/running-mac-inside-docker-qemu.png?raw=true" alt="Running Mac OS X in a Docker container" title="OSX KVM DOCKER"></a></p>
<p dir="auto">Run Mac OS X in Docker with near-native performance! X11 Forwarding! iMessage security research! iPhone USB working! macOS in a Docker container!</p>
<p dir="auto">Conduct Security Research on macOS using both Linux &amp; Windows!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Docker-OSX now has a Discord server &amp; Telegram!</h2><a id="user-content-docker-osx-now-has-a-discord-server--telegram" aria-label="Permalink: Docker-OSX now has a Discord server &amp; Telegram!" href="#docker-osx-now-has-a-discord-server--telegram"></a></p>
<p dir="auto">The Discord is active on #docker-osx and anyone is welcome to come and ask questions, ideas, etc.</p>
<p dir="auto">
    <a href="https://hub.docker.com/r/sickcodes/docker-osx" rel="nofollow"><img src="https://camo.githubusercontent.com/bf743a6fa27847ac2915bc2ffa2653921caed101282db02299576d635582d7f6/68747470733a2f2f646f636b6572692e636f2f696d6167652f7369636b636f6465732f646f636b65722d6f7378" data-canonical-src="https://dockeri.co/image/sickcodes/docker-osx"></a><a href="https://discord.gg/sickchat" rel="nofollow"></a><a href="https://discord.gg/sickchat" rel="nofollow"><img src="https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/discord-logo.svg"></a>
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Click to join the Discord server <a href="https://discord.gg/sickchat" rel="nofollow">https://discord.gg/sickchat</a></h3><a id="user-content-click-to-join-the-discord-server-httpsdiscordggsickchat" aria-label="Permalink: Click to join the Discord server https://discord.gg/sickchat" href="#click-to-join-the-discord-server-httpsdiscordggsickchat"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Click to join the Telegram server <a href="https://t.me/sickcodeschat" rel="nofollow">https://t.me/sickcodeschat</a></h3><a id="user-content-click-to-join-the-telegram-server-httpstmesickcodeschat" aria-label="Permalink: Click to join the Telegram server https://t.me/sickcodeschat" href="#click-to-join-the-telegram-server-httpstmesickcodeschat"></a></p>
<p dir="auto">Or reach out via Linkedin if it's private: <a href="https://www.linkedin.com/in/sickcodes" rel="nofollow">https://www.linkedin.com/in/sickcodes</a></p>
<p dir="auto">Or via <a href="https://sick.codes/contact/" rel="nofollow">https://sick.codes/contact/</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Author</h2><a id="user-content-author" aria-label="Permalink: Author" href="#author"></a></p>
<p dir="auto">This project is maintained by <a href="https://sick.codes/" rel="nofollow">Sick.Codes</a>. <a href="https://twitter.com/sickcodes" rel="nofollow">(Twitter)</a></p>
<p dir="auto">Additional credits can be found here: <a href="https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md">https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md</a></p>
<p dir="auto">Additionally, comprehensive list of all contributors can be found here: <a href="https://github.com/sickcodes/Docker-OSX/graphs/contributors">https://github.com/sickcodes/Docker-OSX/graphs/contributors</a></p>
<p dir="auto">Big thanks to <a href="https://twitter.com/kholia" rel="nofollow">@kholia</a> for maintaining the upstream project, which Docker-OSX is built on top of: <a href="https://github.com/kholia/OSX-KVM">OSX-KVM</a>.</p>
<p dir="auto">Also special thanks to <a href="https://github.com/thenickdude">@thenickdude</a> who maintains the valuable fork <a href="https://github.com/thenickdude/KVM-Opencore">KVM-OpenCore</a>, which was started by <a href="https://github.com/Leoyzen/">@Leoyzen</a>!</p>
<p dir="auto">Extra special thanks to the OpenCore team over at: <a href="https://github.com/acidanthera/OpenCorePkg">https://github.com/acidanthera/OpenCorePkg</a>. Their well-maintained bootloader provides much of the great functionality that Docker-OSX users enjoy :)</p>
<p dir="auto">If you like this project, consider contributing here or upstream!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick Start Docker-OSX</h2><a id="user-content-quick-start-docker-osx" aria-label="Permalink: Quick Start Docker-OSX" href="#quick-start-docker-osx"></a></p>
<p dir="auto">Video setup tutorial is also available here: <a href="https://www.youtube.com/watch?v=wLezYl77Ll8" rel="nofollow">https://www.youtube.com/watch?v=wLezYl77Ll8</a></p>
<p dir="auto"><strong>Windows users:</strong> <a href="#id-like-to-run-docker-osx-on-windows">click here to see the notes below</a>!</p>
<p dir="auto">
  <a href="https://www.youtube.com/watch?v=wLezYl77Ll8" rel="nofollow"><img src="https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/Youtube-Screenshot-Docker-OSX-Setup.png"></a>
</p>
<p dir="auto">First time here? try <a href="#initial-setup">initial setup</a>, otherwise try the instructions below to use either Catalina or Big Sur.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Any questions, ideas, or just want to hang out?</h2><a id="user-content-any-questions-ideas-or-just-want-to-hang-out" aria-label="Permalink: Any questions, ideas, or just want to hang out?" href="#any-questions-ideas-or-just-want-to-hang-out"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto"><a href="https://discord.gg/sickchat" rel="nofollow">https://discord.gg/sickchat</a></h2><a id="user-content-httpsdiscordggsickchat" aria-label="Permalink: https://discord.gg/sickchat" href="#httpsdiscordggsickchat"></a></p>
<div dir="auto"><h3 tabindex="-1" dir="auto">Catalina <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/800ac0f5869ed01e2fa3eaa86a829f4ea97bfab5660efec131e32c69fd5a79f1/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6c61746573743f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416c6174657374" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest"></a></h3><a id="user-content-catalina-" aria-label="Permalink: Catalina " href="#catalina-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:latest

# docker build -t docker-osx ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:latest

<span><span>#</span> docker build -t docker-osx .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Big Sur <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/e85e5f2ef4f14005a66b133a9100e4c02d0e6b49b5eebc178d310fc06f3f0a6e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6269672d7375723f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416269672d737572" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur"></a></h3><a id="user-content-big-sur-" aria-label="Permalink: Big Sur " href="#big-sur-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:big-sur

# docker build -t docker-osx --build-arg SHORTNAME=big-sur ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:big-sur

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=big-sur .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Monterey <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/c971a2c633cfd64b8ad87f02d0b4cf930a9995630e46d08a10292b184a632f02/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6d6f6e74657265793f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416d6f6e7465726579" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey"></a></h3><a id="user-content-monterey-" aria-label="Permalink: Monterey " href="#monterey-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \
    sickcodes/docker-osx:monterey

# docker build -t docker-osx --build-arg SHORTNAME=monterey ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=<span><span>'</span>https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist<span>'</span></span> \
    sickcodes/docker-osx:monterey

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=monterey .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Ventura <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/0191c41f0e53e834e55a977cc0ee5f6ac98e4e2a2a0580190c8f96f34441cc18/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f76656e747572613f6c6162656c3d7369636b636f646573253246646f636b65722d6f737825334176656e74757261" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura"></a></h3><a id="user-content-ventura-" aria-label="Permalink: Ventura " href="#ventura-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \
    sickcodes/docker-osx:ventura

# docker build -t docker-osx --build-arg SHORTNAME=ventura ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=<span><span>'</span>https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist<span>'</span></span> \
    sickcodes/docker-osx:ventura

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=ventura .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Sonoma <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/ee50b5efe3f58f87263a527d444e405f197349b0429fba1039f871161486d685/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f736f6e6f6d613f6c6162656c3d7369636b636f646573253246646f636b65722d6f7378253341736f6e6f6d61" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma"></a></h3><a id="user-content-sonoma-" aria-label="Permalink: Sonoma " href="#sonoma-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e CPU='Haswell-noTSX' \
    -e CPUID_FLAGS='kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on' \
    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom-sonoma.plist' \
    sickcodes/docker-osx:sonoma

# docker build -t docker-osx --build-arg SHORTNAME=sonoma ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e CPU=<span><span>'</span>Haswell-noTSX<span>'</span></span> \
    -e CPUID_FLAGS=<span><span>'</span>kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on<span>'</span></span> \
    -e MASTER_PLIST_URL=<span><span>'</span>https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom-sonoma.plist<span>'</span></span> \
    sickcodes/docker-osx:sonoma

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=sonoma .</span></pre></div>
<div dir="auto"><h4 tabindex="-1" dir="auto">Run Catalina Pre-Installed <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/95a8f30ec42cff4f909e34a85cd8ecccce74926271a1832380c1e8c2b4f506b5/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto"></a></h4><a id="user-content-run-catalina-pre-installed-" aria-label="Permalink: Run Catalina Pre-Installed " href="#run-catalina-pre-installed-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="# 40GB disk space required: 20GB original image 20GB your container.
docker pull sickcodes/docker-osx:auto

# boot directly into a real OS X shell with a visual display [NOT HEADLESS]
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    sickcodes/docker-osx:auto

# username is user
# passsword is alpine"><pre><span><span>#</span> 40GB disk space required: 20GB original image 20GB your container.</span>
docker pull sickcodes/docker-osx:auto

<span><span>#</span> boot directly into a real OS X shell with a visual display [NOT HEADLESS]</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    sickcodes/docker-osx:auto

<span><span>#</span> username is user</span>
<span><span>#</span> passsword is alpine</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Older Systems</h3><a id="user-content-older-systems" aria-label="Permalink: Older Systems" href="#older-systems"></a></p>
<div dir="auto"><h3 tabindex="-1" dir="auto">High Sierra <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/9a31843e25f47091192eb461f3312da533152aac69f963507efa139c4c88c58f/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f686967682d7369657272613f6c6162656c3d7369636b636f646573253246646f636b65722d6f7378253341686967682d736965727261" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra"></a></h3><a id="user-content-high-sierra-" aria-label="Permalink: High Sierra " href="#high-sierra-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:high-sierra

# docker build -t docker-osx --build-arg SHORTNAME=high-sierra ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:high-sierra

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=high-sierra .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Mojave <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/13bdf6e99e80c5b166024ade608e0ac2466f506884dd65edba64b04144074006/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6d6f6a6176653f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416d6f6a617665" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave"></a></h3><a id="user-content-mojave-" aria-label="Permalink: Mojave " href="#mojave-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:mojave

# docker build -t docker-osx --build-arg SHORTNAME=mojave ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:mojave

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=mojave .</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Download the image manually and use it in Docker</h4><a id="user-content-download-the-image-manually-and-use-it-in-docker" aria-label="Permalink: Download the image manually and use it in Docker" href="#download-the-image-manually-and-use-it-in-docker"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/18ebff76cdd5b97ba8c4f154fc69ce16aab9850f3a57dfae97f2e06e6d1a37cc/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65643f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b6564" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked"></a></p>
<p dir="auto">This is a particularly good way for downloading the container, in case Docker's CDN (or your connection) happens to be slow.</p>
<div dir="auto" data-snippet-clipboard-copy-content="wget https://images2.sick.codes/mac_hdd_ng_auto.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng_auto.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    sickcodes/docker-osx:naked"><pre>wget https://images2.sick.codes/mac_hdd_ng_auto.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng_auto.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Use your own image and manually and automatically log into a shell</h4><a id="user-content-use-your-own-image-and-manually-and-automatically-log-into-a-shell" aria-label="Permalink: Use your own image and manually and automatically log into a shell" href="#use-your-own-image-and-manually-and-automatically-log-into-a-shell"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/f79b81264c3f053603393cea79957ba913a1c75b7ed13dc9ef4e681013336ce6/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65642d6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b65642d6175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto"></a></p>
<p dir="auto">Enable SSH in network sharing inside the guest first. Change <code>-e "USERNAME=user"</code> and <code>-e "PASSWORD=password"</code> to your credentials. The container will add itself to <code>~/.ssh/authorized_keys</code></p>
<p dir="auto">Since you can't see the screen, use the PLIST with nopicker, for example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Catalina
# wget https://images2.sick.codes/mac_hdd_ng_auto.img
# Monterey
wget https://images.sick.codes/mac_hdd_ng_auto_monterey.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng_auto_monterey.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e &quot;USERNAME=user&quot; \
    -e &quot;PASSWORD=alpine&quot; \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    sickcodes/docker-osx:naked-auto"><pre><span><span>#</span> Catalina</span>
<span><span>#</span> wget https://images2.sick.codes/mac_hdd_ng_auto.img</span>
<span><span>#</span> Monterey</span>
wget https://images.sick.codes/mac_hdd_ng_auto_monterey.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng_auto_monterey.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e <span><span>"</span>USERNAME=user<span>"</span></span> \
    -e <span><span>"</span>PASSWORD=alpine<span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    sickcodes/docker-osx:naked-auto</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Share directories, sharing files, shared folder, mount folder</h2></p>
<p dir="auto">The easiest and most secure way is <code>sshfs</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="# on Linux/Windows
mkdir ~/mnt/osx
sshfs user@localhost:/ -p 50922 ~/mnt/osx
# wait a few seconds, and ~/mnt/osx will have full rootfs mounted over ssh, and in userspace
# automated: sshpass -p <password> sshfs user@localhost:/ -p 50922 ~/mnt/osx"><pre><span><span>#</span> on Linux/Windows</span>
mkdir <span>~</span>/mnt/osx
sshfs user@localhost:/ -p 50922 <span>~</span>/mnt/osx
<span><span>#</span> wait a few seconds, and ~/mnt/osx will have full rootfs mounted over ssh, and in userspace</span>
<span><span>#</span> automated: sshpass -p &lt;password&gt; sshfs user@localhost:/ -p 50922 ~/mnt/osx</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">(VFIO) iPhone USB passthrough (VFIO)</h2><a id="user-content-vfio-iphone-usb-passthrough-vfio" aria-label="Permalink: (VFIO) iPhone USB passthrough (VFIO)" href="#vfio-iphone-usb-passthrough-vfio"></a></p>
<p dir="auto">If you have a laptop see the next usbfluxd section.</p>
<p dir="auto">If you have a desktop PC, you can use <a href="https://github.com/Silfalion">@Silfalion</a>'s instructions: <a href="https://github.com/Silfalion/Iphone_docker_osx_passthrough">https://github.com/Silfalion/Iphone_docker_osx_passthrough</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">(USBFLUXD) iPhone USB -&gt; Network style passthrough OSX-KVM Docker-OSX</h2><a id="user-content-usbfluxd-iphone-usb---network-style-passthrough-osx-kvm-docker-osx" aria-label="Permalink: (USBFLUXD) iPhone USB -> Network style passthrough OSX-KVM Docker-OSX" href="#usbfluxd-iphone-usb---network-style-passthrough-osx-kvm-docker-osx"></a></p>
<p dir="auto">Video setup tutorial for usbfluxd is also available here: <a href="https://www.youtube.com/watch?v=kTk5fGjK_PM" rel="nofollow">https://www.youtube.com/watch?v=kTk5fGjK_PM</a></p>
<p dir="auto">
  <a href="https://www.youtube.com/watch?v=kTk5fGjK_PM" rel="nofollow"><img alt="iPhone USB passthrough on macOS virtual machine Linux &amp; Windows" src="https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/Youtube-USBFLUXD-Screenshot-Docker-OSX.png"></a>
</p>
<p dir="auto">This method WORKS on laptop, PC, anything!</p>
<p dir="auto">Thank you <a href="https://github.com/nikias">@nikias</a> for <a href="https://github.com/corellium/usbfluxd">usbfluxd</a> via <a href="https://github.com/corellium">https://github.com/corellium</a>!</p>
<p dir="auto"><strong>This is done inside Linux.</strong></p>
<p dir="auto">Open 3 terminals on Linux</p>
<p dir="auto">Connecting your device over USB on Linux allows you to expose <code>usbmuxd</code> on port <code>5000</code> using <a href="https://github.com/corellium/usbfluxd">https://github.com/corellium/usbfluxd</a> to another system on the same network.</p>
<p dir="auto">Ensure <code>usbmuxd</code>, <code>socat</code> and <code>usbfluxd</code> are installed.</p>
<p dir="auto"><code>sudo pacman -S libusbmuxd usbmuxd avahi socat</code></p>
<p dir="auto">Available on the AUR: <a href="https://aur.archlinux.org/packages/usbfluxd/" rel="nofollow">https://aur.archlinux.org/packages/usbfluxd/</a></p>
<p dir="auto"><code>yay usbfluxd</code></p>
<p dir="auto">Plug in your iPhone or iPad.</p>
<p dir="auto">Terminal 1</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo systemctl start usbmuxd
sudo avahi-daemon"><pre>sudo systemctl start usbmuxd
sudo avahi-daemon</pre></div>
<p dir="auto">Terminal 2:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# on host
sudo systemctl restart usbmuxd
sudo socat tcp-listen:5000,fork unix-connect:/var/run/usbmuxd"><pre><span><span>#</span> on host</span>
sudo systemctl restart usbmuxd
sudo socat tcp-listen:5000,fork unix-connect:/var/run/usbmuxd</pre></div>
<p dir="auto">Terminal 3:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Connect to a host running usbfluxd</h3><a id="user-content-connect-to-a-host-running-usbfluxd" aria-label="Permalink: Connect to a host running usbfluxd" href="#connect-to-a-host-running-usbfluxd"></a></p>
<p dir="auto"><strong>This is done inside macOS.</strong></p>
<p dir="auto">Install homebrew.</p>
<p dir="auto"><code>172.17.0.1</code> is usually the Docker bridge IP, which is your PC, but you can use any IP from <code>ip addr</code>...</p>
<p dir="auto">macOS Terminal:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# on the guest
brew install make automake autoconf libtool pkg-config gcc libimobiledevice usbmuxd

git clone https://github.com/corellium/usbfluxd.git
cd usbfluxd

./autogen.sh
make
sudo make install"><pre><span><span>#</span> on the guest</span>
brew install make automake autoconf libtool pkg-config gcc libimobiledevice usbmuxd

git clone https://github.com/corellium/usbfluxd.git
<span>cd</span> usbfluxd

./autogen.sh
make
sudo make install</pre></div>
<p dir="auto">Accept the USB over TCP connection, and appear as local:</p>
<p dir="auto">(you may need to change <code>172.17.0.1</code> to the IP address of the host. e.g. check <code>ip addr</code>)</p>
<div dir="auto" data-snippet-clipboard-copy-content="# on the guest
sudo launchctl start usbmuxd
export PATH=/usr/local/sbin:${PATH}
sudo usbfluxd -f -r 172.17.0.1:5000"><pre><span><span>#</span> on the guest</span>
sudo launchctl start usbmuxd
<span>export</span> PATH=/usr/local/sbin:<span>${PATH}</span>
sudo usbfluxd -f -r 172.17.0.1:5000</pre></div>
<p dir="auto">Close apps such as Xcode and reopen them and your device should appear!</p>
<p dir="auto"><em>If you need to start again on Linux, wipe the current usbfluxd, usbmuxd, and socat:</em></p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo killall usbfluxd
sudo systemctl restart usbmuxd
sudo killall socat"><pre>sudo killall usbfluxd
sudo systemctl restart usbmuxd
sudo killall socat</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Make container FASTER using <a href="https://github.com/sickcodes/osx-optimizer">https://github.com/sickcodes/osx-optimizer</a></h2><a id="user-content-make-container-faster-using-httpsgithubcomsickcodesosx-optimizer" aria-label="Permalink: Make container FASTER using https://github.com/sickcodes/osx-optimizer" href="#make-container-faster-using-httpsgithubcomsickcodesosx-optimizer"></a></p>
<p dir="auto">SEE commands in <a href="https://github.com/sickcodes/osx-optimizer">https://github.com/sickcodes/osx-optimizer</a>!</p>
<ul dir="auto">
<li>Skip the GUI login screen (at your own risk!)</li>
<li>Disable spotlight indexing on macOS to heavily speed up Virtual Instances.</li>
<li>Disable heavy login screen wallpaper</li>
<li>Disable updates (at your own risk!)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Increase disk space by moving /var/lib/docker to external drive, block storage, NFS, or any other location conceivable.</h2><a id="user-content-increase-disk-space-by-moving-varlibdocker-to-external-drive-block-storage-nfs-or-any-other-location-conceivable" aria-label="Permalink: Increase disk space by moving /var/lib/docker to external drive, block storage, NFS, or any other location conceivable." href="#increase-disk-space-by-moving-varlibdocker-to-external-drive-block-storage-nfs-or-any-other-location-conceivable"></a></p>
<p dir="auto">Move /var/lib/docker, following the tutorial below</p>
<ul dir="auto">
<li>Cheap large physical disk storage instead using your server's disk, or SSD.</li>
<li>Block Storage, NFS, etc.</li>
</ul>
<p dir="auto">Tutorial here: <a href="https://sick.codes/how-to-run-docker-from-block-storage/" rel="nofollow">https://sick.codes/how-to-run-docker-from-block-storage/</a></p>
<p dir="auto">Only follow the above tutorial if you are happy with wiping all your current Docker images/layers.</p>
<p dir="auto">Safe mode: Disable docker temporarily so you can move the Docker folder temporarily.</p>
<ul dir="auto">
<li>Do NOT do this until you have moved your image out already <a href="https://github.com/dulatello08/Docker-OSX/#quick-start-your-own-image-naked-container-image">https://github.com/dulatello08/Docker-OSX/#quick-start-your-own-image-naked-container-image</a></li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="killall dockerd
systemctl disable --now docker
systemctl disable --now docker.socket
systemctl stop docker
systemctl stop docker.socket"><pre>killall dockerd
systemctl disable --now docker
systemctl disable --now docker.socket
systemctl stop docker
systemctl stop docker.socket</pre></div>
<p dir="auto">Now, that Docker daemon is off, move /var/lib/docker somewhere</p>
<p dir="auto">Then, symbolicly link /var/lib/docker somewhere:</p>
<div dir="auto" data-snippet-clipboard-copy-content="mv /var/lib/docker /run/media/user/some_drive/docker
ln -s /run/media/user/some_drive/docker /var/lib/docker

# now check if /var/lib/docker is working still
ls /var/lib/docker"><pre>mv /var/lib/docker /run/media/user/some_drive/docker
ln -s /run/media/user/some_drive/docker /var/lib/docker

<span><span>#</span> now check if /var/lib/docker is working still</span>
ls /var/lib/docker</pre></div>
<p dir="auto">If you see folders, then it worked. You can restart Docker, or just reboot if you want to be sure.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Important notices:</h2><a id="user-content-important-notices" aria-label="Permalink: Important notices:" href="#important-notices"></a></p>
<p dir="auto"><strong>2021-11-14</strong> - Added High Sierra, Mojave</p>
<p dir="auto">Pick one of these while <strong>building</strong>, irrelevant when using docker pull:</p>
<div data-snippet-clipboard-copy-content="--build-arg SHORTNAME=high-sierra 
--build-arg SHORTNAME=mojave
--build-arg SHORTNAME=catalina
--build-arg SHORTNAME=big-sur
--build-arg SHORTNAME=monterey
--build-arg SHORTNAME=ventura
--build-arg SHORTNAME=sonoma"><pre><code>--build-arg SHORTNAME=high-sierra 
--build-arg SHORTNAME=mojave
--build-arg SHORTNAME=catalina
--build-arg SHORTNAME=big-sur
--build-arg SHORTNAME=monterey
--build-arg SHORTNAME=ventura
--build-arg SHORTNAME=sonoma
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Technical details</h2><a id="user-content-technical-details" aria-label="Permalink: Technical details" href="#technical-details"></a></p>
<p dir="auto">There are currently multiple images, each with different use cases (explained <a href="#container-images">below</a>):</p>
<ul dir="auto">
<li>High Sierra</li>
<li>Mojave</li>
<li>Catalina</li>
<li>Big Sur</li>
<li>Monterey</li>
<li>Ventura</li>
<li>Sonoma</li>
<li>Auto (pre-made Catalina)</li>
<li>Naked (use your own .img)</li>
<li>Naked-Auto (user your own .img and SSH in)</li>
</ul>
<p dir="auto">High Sierra:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/9a31843e25f47091192eb461f3312da533152aac69f963507efa139c4c88c58f/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f686967682d7369657272613f6c6162656c3d7369636b636f646573253246646f636b65722d6f7378253341686967682d736965727261" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra"></a></p>
<p dir="auto">Mojave:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/13bdf6e99e80c5b166024ade608e0ac2466f506884dd65edba64b04144074006/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6d6f6a6176653f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416d6f6a617665" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave"></a></p>
<p dir="auto">Catalina:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/800ac0f5869ed01e2fa3eaa86a829f4ea97bfab5660efec131e32c69fd5a79f1/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6c61746573743f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416c6174657374" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest"></a></p>
<p dir="auto">Big-Sur:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/e85e5f2ef4f14005a66b133a9100e4c02d0e6b49b5eebc178d310fc06f3f0a6e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6269672d7375723f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416269672d737572" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur"></a></p>
<p dir="auto">Monterey make your own image:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/c971a2c633cfd64b8ad87f02d0b4cf930a9995630e46d08a10292b184a632f02/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6d6f6e74657265793f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416d6f6e7465726579" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey"></a></p>
<p dir="auto">Ventura make your own image:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/0191c41f0e53e834e55a977cc0ee5f6ac98e4e2a2a0580190c8f96f34441cc18/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f76656e747572613f6c6162656c3d7369636b636f646573253246646f636b65722d6f737825334176656e74757261" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura"></a></p>
<p dir="auto">Sonoma make your own image:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/ee50b5efe3f58f87263a527d444e405f197349b0429fba1039f871161486d685/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f736f6e6f6d613f6c6162656c3d7369636b636f646573253246646f636b65722d6f7378253341736f6e6f6d61" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma"></a></p>
<p dir="auto">Pre-made <strong>Catalina</strong> system by <a href="https://sick.codes/" rel="nofollow">Sick.Codes</a>: username: <code>user</code>, password: <code>alpine</code></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/95a8f30ec42cff4f909e34a85cd8ecccce74926271a1832380c1e8c2b4f506b5/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto"></a></p>
<p dir="auto">Naked: Bring-your-own-image setup (use any of the above first):</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/18ebff76cdd5b97ba8c4f154fc69ce16aab9850f3a57dfae97f2e06e6d1a37cc/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65643f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b6564" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked"></a></p>
<p dir="auto">Naked Auto: same as above but with <code>-e USERNAME</code> &amp; <code>-e PASSWORD</code> and <code>-e OSX_COMMANDS="put your commands here"</code></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/f79b81264c3f053603393cea79957ba913a1c75b7ed13dc9ef4e681013336ce6/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65642d6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b65642d6175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Capabilities</h2><a id="user-content-capabilities" aria-label="Permalink: Capabilities" href="#capabilities"></a></p>
<ul dir="auto">
<li>use iPhone OSX KVM on Linux using <a href="https://github.com/corellium/usbfluxd">usbfluxd</a>!</li>
<li>macOS Monterey VM on Linux!</li>
<li>Folder sharing-</li>
<li>USB passthrough (hotplug too)</li>
<li>SSH enabled (<code>localhost:50922</code>)</li>
<li>VNC enabled (<code>localhost:8888</code>) if using ./vnc version</li>
<li>iMessage security research via <a href="https://github.com/sickcodes/osx-serial-generator">serial number generator!</a></li>
<li>X11 forwarding is enabled</li>
<li>runs on top of QEMU + KVM</li>
<li>supports Big Sur, custom images, Xvfb headless mode</li>
<li>you can clone your container with <code>docker commit</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Requirements</h3><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>20GB+++ disk space for bare minimum installation (50GB if using Xcode)</li>
<li>virtualization should be enabled in your BIOS settings</li>
<li>a x86_64 kvm-capable host</li>
<li>at least 50 GBs for <code>:auto</code> (half for the base image, half for your runtime image</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">TODO</h3><a id="user-content-todo" aria-label="Permalink: TODO" href="#todo"></a></p>
<ul dir="auto">
<li>documentation for security researchers</li>
<li>gpu acceleration</li>
<li>support for virt-manager</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Docker</h2><a id="user-content-docker" aria-label="Permalink: Docker" href="#docker"></a></p>
<p dir="auto">Images built on top of the contents of this repository are also available on <strong>Docker Hub</strong> for convenience: <a href="https://hub.docker.com/r/sickcodes/docker-osx" rel="nofollow">https://hub.docker.com/r/sickcodes/docker-osx</a></p>
<p dir="auto">A comprehensive list of the available Docker images and their intended purpose can be found in the <a href="#instructions">Instructions</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Kubernetes</h2><a id="user-content-kubernetes" aria-label="Permalink: Kubernetes" href="#kubernetes"></a></p>
<p dir="auto">Docker-OSX supports Kubernetes.</p>
<p dir="auto">Kubernetes Helm Chart &amp; Documentation can be found under the <a href="https://github.com/sickcodes/Docker-OSX/blob/master/helm/README.md">helm directory</a>.</p>
<p dir="auto">Thanks <a href="https://github.com/cephasara">cephasara</a> for contributing this major contribution.</p>
<p dir="auto"><a href="https://artifacthub.io/packages/search?repo=docker-osx" rel="nofollow"><img src="https://camo.githubusercontent.com/049a10bf953328bd6a4fe7a2628ca0aae05b165d1e22fad2201b3fc23cfca453/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f61727469666163746875622e696f2f62616467652f7265706f7369746f72792f646f636b65722d6f7378" alt="Artifact HUB" data-canonical-src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/docker-osx"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Support</h2><a id="user-content-support" aria-label="Permalink: Support" href="#support"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Small questions &amp; issues</h3><a id="user-content-small-questions--issues" aria-label="Permalink: Small questions &amp; issues" href="#small-questions--issues"></a></p>
<p dir="auto">Feel free to open an <a href="https://github.com/sickcodes/Docker-OSX/issues/new/choose">issue</a>, should you come across minor issues with running Docker-OSX or have any questions.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Resolved issues</h4><a id="user-content-resolved-issues" aria-label="Permalink: Resolved issues" href="#resolved-issues"></a></p>
<p dir="auto">Before you open an issue, however, please check the <a href="https://github.com/sickcodes/Docker-OSX/issues?q=is%3Aissue+is%3Aclosed">closed issues</a> and confirm that you're using the latest version of this repository — your issues may have already been resolved! You might also see your answer in our questions and answers section <a href="#more-questions-and-answers">below</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Feature requests and updates</h3><a id="user-content-feature-requests-and-updates" aria-label="Permalink: Feature requests and updates" href="#feature-requests-and-updates"></a></p>
<p dir="auto">Follow <a href="https://twitter.com/sickcodes" rel="nofollow">@sickcodes</a>!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Professional support</h3><a id="user-content-professional-support" aria-label="Permalink: Professional support" href="#professional-support"></a></p>
<p dir="auto">For more sophisticated endeavours, we offer the following support services:</p>
<ul dir="auto">
<li>Enterprise support, business support, or casual support.</li>
<li>Custom images, custom scripts, consulting (per hour available!)</li>
<li>One-on-one conversations with you or your development team.</li>
</ul>
<p dir="auto">In case you're interested, contact <a href="https://twitter.com/sickcodes" rel="nofollow">@sickcodes on Twitter</a> or click <a href="https://sick.codes/contact" rel="nofollow">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License/Contributing</h2><a id="user-content-licensecontributing" aria-label="Permalink: License/Contributing" href="#licensecontributing"></a></p>
<p dir="auto">Docker-OSX is licensed under the <a href="https://github.com/sickcodes/Docker-OSX/blob/master/LICENSE">GPL v3+</a>. Contributions are welcomed and immensely appreciated. You are in fact permitted to use Docker-OSX as a tool to create proprietary software.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Other cool Docker/QEMU based projects</h3><a id="user-content-other-cool-dockerqemu-based-projects" aria-label="Permalink: Other cool Docker/QEMU based projects" href="#other-cool-dockerqemu-based-projects"></a></p>
<ul dir="auto">
<li><a href="https://github.com/sickcodes/dock-droid">Run Android in a Docker Container with Dock Droid</a></li>
<li><a href="https://github.com/sickcodes/droid-native">Run Android fully native on the host!</a></li>
<li><a href="https://github.com/sickcodes/Docker-eyeOS">Run iOS 12 in a Docker container with Docker-eyeOS</a> - <a href="https://github.com/sickcodes/Docker-eyeOS">https://github.com/sickcodes/Docker-eyeOS</a></li>
<li><a href="https://bluebubbles.app/" rel="nofollow">Run iMessage relayer in Docker with Bluebubbles.app</a> - <a href="https://github.com/BlueBubblesApp/BlueBubbles-Server/wiki/Running-via-Docker">Getting started wiki</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Disclaimer</h2><a id="user-content-disclaimer" aria-label="Permalink: Disclaimer" href="#disclaimer"></a></p>
<p dir="auto">If you are serious about Apple Security, and possibly finding 6-figure bug bounties within the Apple Bug Bounty Program, then you're in the right place! Further notes: <a href="https://sick.codes/is-hackintosh-osx-kvm-or-docker-osx-legal/" rel="nofollow">Is Hackintosh, OSX-KVM, or Docker-OSX legal?</a></p>
<p dir="auto">Product names, logos, brands and other trademarks referred to within this project are the property of their respective trademark holders. These trademark holders are not affiliated with our repository in any capacity. They do not sponsor or endorse this project in any way.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Instructions</h2><a id="user-content-instructions" aria-label="Permalink: Instructions" href="#instructions"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Container images</h2><a id="user-content-container-images" aria-label="Permalink: Container images" href="#container-images"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Already set up or just looking to make a container quickly? Check out our <a href="#quick-start-docker-osx">quick start</a> or see a bunch more use cases under our <a href="#container-creation-examples">container creation examples</a> section.</h3><a id="user-content-already-set-up-or-just-looking-to-make-a-container-quickly-check-out-our-quick-start-or-see-a-bunch-more-use-cases-under-our-container-creation-examples-section" aria-label="Permalink: Already set up or just looking to make a container quickly? Check out our quick start or see a bunch more use cases under our container creation examples section." href="#already-set-up-or-just-looking-to-make-a-container-quickly-check-out-our-quick-start-or-see-a-bunch-more-use-cases-under-our-container-creation-examples-section"></a></p>
<p dir="auto">There are several different Docker-OSX images available that are suitable for different purposes.</p>
<ul dir="auto">
<li><code>sickcodes/docker-osx:latest</code> - <a href="#quick-start-docker-osx">I just want to try it out.</a></li>
<li><code>sickcodes/docker-osx:latest</code> - <a href="#quick-start-your-own-image-naked-container-image">I want to use Docker-OSX to develop/secure apps in Xcode (sign into Xcode, Transporter)</a></li>
<li><code>sickcodes/docker-osx:naked</code> - <a href="#building-a-headless-container-from-a-custom-image">I want to use Docker-OSX for CI/CD-related purposes (sign into Xcode, Transporter)</a></li>
</ul>
<p dir="auto">Create your personal image using <code>:latest</code> or <code>big-sur</code>. Then, pull the image out the image. Afterwards, you will be able to duplicate that image and import it to the <code>:naked</code> container, in order to revert the container to a previous state repeatedly.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>sickcodes/docker-osx:auto</code> - <a href="#prebuilt-image-with-arbitrary-command-line-arguments">I'm only interested in using the command line (useful for compiling software or using Homebrew headlessly).</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:naked</code> - <a href="#generating-serial-numbers">I need iMessage/iCloud for security research.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:big-sur</code> - <a href="#quick-start-docker-osx">I want to run Big Sur.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:monterey</code> - <a href="#quick-start-docker-osx">I want to run Monterey.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:ventura</code> - <a href="#quick-start-docker-osx">I want to run Ventura.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:sonoma</code> - <a href="#quick-start-docker-osx">I want to run Sonoma.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:high-sierra</code> - I want to run High Sierra.</p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:mojave</code> - I want to run Mojave.</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Initial setup</h2><a id="user-content-initial-setup" aria-label="Permalink: Initial setup" href="#initial-setup"></a></p>
<p dir="auto">Before you do anything else, you will need to turn on hardware virtualization in your BIOS. Precisely how will depend on your particular machine (and BIOS), but it should be straightforward.</p>
<p dir="auto">Then, you'll need QEMU and some other dependencies on your host:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# ARCH
sudo pacman -S qemu libvirt dnsmasq virt-manager bridge-utils flex bison iptables-nft edk2-ovmf

# UBUNTU DEBIAN
sudo apt install qemu qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager libguestfs-tools

# CENTOS RHEL FEDORA
sudo yum install libvirt qemu-kvm"><pre><span><span>#</span> ARCH</span>
sudo pacman -S qemu libvirt dnsmasq virt-manager bridge-utils flex bison iptables-nft edk2-ovmf

<span><span>#</span> UBUNTU DEBIAN</span>
sudo apt install qemu qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager libguestfs-tools

<span><span>#</span> CENTOS RHEL FEDORA</span>
sudo yum install libvirt qemu-kvm</pre></div>
<p dir="auto">Then, enable libvirt and load the KVM kernel module:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo systemctl enable --now libvirtd
sudo systemctl enable --now virtlogd

echo 1 | sudo tee /sys/module/kvm/parameters/ignore_msrs

sudo modprobe kvm"><pre>sudo systemctl <span>enable</span> --now libvirtd
sudo systemctl <span>enable</span> --now virtlogd

<span>echo</span> 1 <span>|</span> sudo tee /sys/module/kvm/parameters/ignore_msrs

sudo modprobe kvm</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">I'd like to run Docker-OSX on Windows</h3><a id="user-content-id-like-to-run-docker-osx-on-windows" aria-label="Permalink: I'd like to run Docker-OSX on Windows" href="#id-like-to-run-docker-osx-on-windows"></a></p>
<p dir="auto">Running Docker-OSX on Windows is possible using WSL2 (Windows 11 + Windows Subsystem for Linux).</p>
<p dir="auto">You must have Windows 11 installed with build 22000+ (21H2 or higher).</p>
<p dir="auto">First, install WSL on your computer by running this command in an administrator powershell. For more info, look <a href="https://docs.microsoft.com/en-us/windows/wsl/install" rel="nofollow">here</a>.</p>
<p dir="auto">This will install Ubuntu by default.</p>

<p dir="auto">You can confirm WSL2 is enabled using <code>wsl -l -v</code> in PowerShell. To see other distributions that are available, use <code>wsl -l -o</code>.</p>
<p dir="auto">If you have previously installed WSL1, upgrade to WSL 2. Check <a href="https://docs.microsoft.com/en-us/windows/wsl/install#upgrade-version-from-wsl-1-to-wsl-2" rel="nofollow">this link to upgrade from WSL1 to WSL2</a>.</p>
<p dir="auto">After WSL installation, go to <code>C:/Users/&lt;Your_Name&gt;/.wslconfig</code> and add <code>nestedVirtualization=true</code> to the end of the file (If the file doesn't exist, create it). For more information about the <code>.wslconfig</code> file check <a href="https://docs.microsoft.com/en-us/windows/wsl/wsl-config#wslconfig" rel="nofollow">this link</a>. Verify that you have selected "Show Hidden Files" and "Show File Extensions" in File Explorer options.
The result should be like this:</p>
<div data-snippet-clipboard-copy-content="[wsl2]
nestedVirtualization=true"><pre><code>[wsl2]
nestedVirtualization=true
</code></pre></div>
<p dir="auto">Go into your WSL distro (Run <code>wsl</code> in powershell) and check if KVM is enabled by using the <code>kvm-ok</code> command. The output should look like this:</p>
<div data-snippet-clipboard-copy-content="INFO: /dev/kvm exists
KVM acceleration can be used"><pre><code>INFO: /dev/kvm exists
KVM acceleration can be used
</code></pre></div>
<p dir="auto">Use the command <code>sudo apt -y install bridge-utils cpu-checker libvirt-clients libvirt-daemon qemu qemu-kvm</code> to install it if it isn't.</p>
<p dir="auto">Now download and install <a href="https://docs.docker.com/desktop/windows/install/" rel="nofollow">Docker for Windows</a> if it is not already installed.</p>
<p dir="auto">After installation, go into Settings and check these 2 boxes:</p>
<div data-snippet-clipboard-copy-content="General -> &quot;Use the WSL2 based engine&quot;;
Resources -> WSL Integration -> &quot;Enable integration with my default WSL distro&quot;, "><pre><code>General -&gt; "Use the WSL2 based engine";
Resources -&gt; WSL Integration -&gt; "Enable integration with my default WSL distro", 
</code></pre></div>
<p dir="auto">Ensure <code>x11-apps</code> is installed. Use the command <code>sudo apt install x11-apps -y</code> to install it if it isn't.</p>
<p dir="auto">Finally, there are 3 ways to get video output:</p>
<ul dir="auto">
<li>WSLg: This is the simplest and easiest option to use. There may be some issues such as the keyboard not being fully passed through or seeing a second mouse on the desktop - <a href="https://github.com/microsoft/wslg/issues/376" data-hovercard-type="issue" data-hovercard-url="/microsoft/wslg/issues/376/hovercard">Issue on WSLg</a> - but this option is recommended.</li>
</ul>
<p dir="auto">To use WSLg's built-in X-11 server, change these two lines in the docker run command to point Docker-OSX to WSLg.</p>
<div data-snippet-clipboard-copy-content="-e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \"><pre><code>-e "DISPLAY=${DISPLAY:-:0.0}" \
-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \
</code></pre></div>
<p dir="auto">Or try:</p>
<div data-snippet-clipboard-copy-content="-e &quot;DISPLAY=${DISPLAY:-:0}&quot; \
-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \"><pre><code>-e "DISPLAY=${DISPLAY:-:0}" \
-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \
</code></pre></div>
<p dir="auto">For Ubuntu 20.x on Windows, see <a data-error-text="Failed to load title" data-id="3908501" data-permission-text="Title is private" data-url="https://github.com/sickcodes/Docker-OSX/discussions/458" data-hovercard-type="discussion" data-hovercard-url="/sickcodes/Docker-OSX/discussions/458/hovercard" href="https://github.com/sickcodes/Docker-OSX/discussions/458">#458</a></p>
<ul dir="auto">
<li>VNC: See the <a href="#building-a-headless-container-which-allows-insecure-vnc-on-localhost-for-local-use-only">VNC section</a> for more information. You could also add -vnc argument to qemu. Connect to your mac VM via a VNC Client. <a href="https://wiki.archlinux.org/title/QEMU#VNC" rel="nofollow">Here is a how to</a></li>
<li>Desktop Environment: This will give you a full desktop linux experience but it will use a bit more of the computer's resources. Here is an example guide, but there are other guides that help set up a desktop environment. <a href="https://www.makeuseof.com/tag/linux-desktop-windows-subsystem/" rel="nofollow">DE Example</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Additional boot instructions for when you are <a href="#container-creation-examples">creating your container</a></h2><a id="user-content-additional-boot-instructions-for-when-you-are-creating-your-container" aria-label="Permalink: Additional boot instructions for when you are creating your container" href="#additional-boot-instructions-for-when-you-are-creating-your-container"></a></p>
<ul dir="auto">
<li>
<p dir="auto">Boot the macOS Base System (Press Enter)</p>
</li>
<li>
<p dir="auto">Click <code>Disk Utility</code></p>
</li>
<li>
<p dir="auto">Erase the BIGGEST disk (around 200gb default), DO NOT MODIFY THE SMALLER DISKS.
-- if you can't click <code>erase</code>, you may need to reduce the disk size by 1kb</p>
</li>
<li>
<p dir="auto">(optional) Create a partition using the unused space to house the OS and your files if you want to limit the capacity. (For Xcode 12 partition at least 60gb.)</p>
</li>
<li>
<p dir="auto">Click <code>Reinstall macOS</code></p>
</li>
<li>
<p dir="auto">The system may require multiple reboots during installation</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Troubleshooting</h2><a id="user-content-troubleshooting" aria-label="Permalink: Troubleshooting" href="#troubleshooting"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Routine checks</h3><a id="user-content-routine-checks" aria-label="Permalink: Routine checks" href="#routine-checks"></a></p>
<p dir="auto">This is a great place to start if you are having trouble getting going, especially if you're not that familiar with Docker just yet.</p>
<p dir="auto">Just looking to make a container quickly? Check out our <a href="#container-creation-examples">container creation examples</a> section.</p>
<p dir="auto">More specific/advanced troubleshooting questions and answers may be found in <a href="#more-questions-and-answers">More Questions and Answers</a>. You should also check out the <a href="https://github.com/sickcodes/Docker-OSX/issues?q=is%3Aissue+is%3Aclosed">closed issues</a>. Someone else might have gotten a question like yours answered already even if you can't find it in this document!</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Confirm that your CPU supports virtualization</h4><a id="user-content-confirm-that-your-cpu-supports-virtualization" aria-label="Permalink: Confirm that your CPU supports virtualization" href="#confirm-that-your-cpu-supports-virtualization"></a></p>
<p dir="auto">See <a href="#initial-setup">initial setup</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Docker Unknown Server OS error</h4><a id="user-content-docker-unknown-server-os-error" aria-label="Permalink: Docker Unknown Server OS error" href="#docker-unknown-server-os-error"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker: unknown server OS: .
See 'docker run --help'."><pre><span>docker: unknown server OS: .</span>
<span>See 'docker run --help'.</span></pre></div>
<p dir="auto">This means your docker daemon is not running.</p>
<p dir="auto"><code>pgrep dockerd</code> should return nothing</p>
<p dir="auto">Therefore, you have a few choices.</p>
<p dir="auto"><code>sudo dockerd</code> for foreground Docker usage. I use this.</p>
<p dir="auto">Or</p>
<p dir="auto"><code>sudo systemctl --start dockerd</code> to start dockerd this now.</p>
<p dir="auto">Or</p>
<p dir="auto"><code>sudo systemctl --enable --now dockerd</code> for start dockerd on every reboot, and now.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Use more CPU Cores/SMP</h4><a id="user-content-use-more-cpu-coressmp" aria-label="Permalink: Use more CPU Cores/SMP" href="#use-more-cpu-coressmp"></a></p>
<p dir="auto">Examples:</p>
<p dir="auto"><code>-e EXTRA='-smp 6,sockets=3,cores=2'</code></p>
<p dir="auto"><code>-e EXTRA='-smp 8,sockets=4,cores=2'</code></p>
<p dir="auto"><code>-e EXTRA='-smp 16,sockets=8,cores=2'</code></p>
<p dir="auto">Note, unlike memory, CPU usage is shared. so you can allocate all of your CPU's to the container.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Confirm your user is part of the Docker group, KVM group, libvirt group</h3><a id="user-content-confirm-your-user-is-part-of-the-docker-group-kvm-group-libvirt-group" aria-label="Permalink: Confirm your user is part of the Docker group, KVM group, libvirt group" href="#confirm-your-user-is-part-of-the-docker-group-kvm-group-libvirt-group"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Add yourself to the Docker group</h4><a id="user-content-add-yourself-to-the-docker-group" aria-label="Permalink: Add yourself to the Docker group" href="#add-yourself-to-the-docker-group"></a></p>
<p dir="auto">If you use <code>sudo dockerd</code> or dockerd is controlled by systemd/systemctl, then you must be in the Docker group.
If you are not in the Docker group:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo usermod -aG docker &quot;${USER}&quot;"><pre>sudo usermod -aG docker <span><span>"</span><span>${USER}</span><span>"</span></span></pre></div>
<p dir="auto">and also add yourself to the kvm and libvirt groups if needed:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo usermod -aG libvirt &quot;${USER}&quot;
sudo usermod -aG kvm &quot;${USER}&quot;"><pre>sudo usermod -aG libvirt <span><span>"</span><span>${USER}</span><span>"</span></span>
sudo usermod -aG kvm <span><span>"</span><span>${USER}</span><span>"</span></span></pre></div>
<p dir="auto">See also: <a href="#initial-setup">initial setup</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Is the docker daemon enabled?</h4><a id="user-content-is-the-docker-daemon-enabled" aria-label="Permalink: Is the docker daemon enabled?" href="#is-the-docker-daemon-enabled"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# run ad hoc
sudo dockerd

# or daemonize it
sudo nohup dockerd &amp;

# enable it in systemd (it will persist across reboots this way)
sudo systemctl enable --now docker

# or just start it as your user with systemd instead of enabling it
systemctl start docker"><pre><span><span>#</span> run ad hoc</span>
sudo dockerd

<span><span>#</span> or daemonize it</span>
sudo nohup dockerd <span>&amp;</span>

<span><span>#</span> enable it in systemd (it will persist across reboots this way)</span>
sudo systemctl <span>enable</span> --now docker

<span><span>#</span> or just start it as your user with systemd instead of enabling it</span>
systemctl start docker</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">More Questions and Answers</h2><a id="user-content-more-questions-and-answers" aria-label="Permalink: More Questions and Answers" href="#more-questions-and-answers"></a></p>
<p dir="auto">Big thank you to our contributors who have worked out almost every conceivable issue so far!</p>
<p dir="auto"><a href="https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md">https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Start the same container later (persistent disk)</h3><a id="user-content-start-the-same-container-later-persistent-disk" aria-label="Permalink: Start the same container later (persistent disk)" href="#start-the-same-container-later-persistent-disk"></a></p>
<p dir="auto">Created a container with <code>docker run</code> and want to reuse the underlying image again later?</p>
<p dir="auto">NB: see <a href="#container-creation-examples">container creation examples</a> first for how to get to the point where this is applicable.</p>
<p dir="auto">This is for when you want to run the SAME container again later. You may need to use <code>docker commit</code> to save your container before you can reuse it. Check if your container is persisted with <code>docker ps --all</code>.</p>
<p dir="auto">If you don't run this you will have a new image every time.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# look at your recent containers and copy the CONTAINER ID
docker ps --all

# docker start the container ID
docker start -ai abc123xyz567

# if you have many containers, you can try automate it with filters like this
# docker ps --all --filter &quot;ancestor=sickcodes/docker-osx&quot;
# for locally tagged/built containers
# docker ps --all --filter &quot;ancestor=docker-osx&quot;
"><pre><span><span>#</span> look at your recent containers and copy the CONTAINER ID</span>
docker ps --all

<span><span>#</span> docker start the container ID</span>
docker start -ai abc123xyz567

<span><span>#</span> if you have many containers, you can try automate it with filters like this</span>
<span><span>#</span> docker ps --all --filter "ancestor=sickcodes/docker-osx"</span>
<span><span>#</span> for locally tagged/built containers</span>
<span><span>#</span> docker ps --all --filter "ancestor=docker-osx"</span>
</pre></div>
<p dir="auto">You can also pull the <code>.img</code> file out of the container, which is stored in <code>/var/lib/docker</code>, and supply it as a runtime argument to the <code>:naked</code> Docker image.</p>
<p dir="auto">See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/197" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/197/hovercard">here</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">I have used Docker-OSX before and want to restart a container that starts automatically</h3><a id="user-content-i-have-used-docker-osx-before-and-want-to-restart-a-container-that-starts-automatically" aria-label="Permalink: I have used Docker-OSX before and want to restart a container that starts automatically" href="#i-have-used-docker-osx-before-and-want-to-restart-a-container-that-starts-automatically"></a></p>
<p dir="auto">Containers that use <code>sickcodes/docker-osx:auto</code> can be stopped while being started.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# find last container
docker ps -a

# docker start old container with -i for interactive, -a for attach STDIN/STDOUT
docker start -ai -i <Replace this with your ID>"><pre><span><span>#</span> find last container</span>
docker ps -a

<span><span>#</span> docker start old container with -i for interactive, -a for attach STDIN/STDOUT</span>
docker start -ai -i <span>&lt;</span>Replace this with your ID<span>&gt;</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">LibGTK errors "connection refused"</h3><a id="user-content-libgtk-errors-connection-refused" aria-label="Permalink: LibGTK errors &quot;connection refused&quot;" href="#libgtk-errors-connection-refused"></a></p>
<p dir="auto">You may see one or more libgtk-related errors if you do not have everything set up for hardware virtualisation yet. If you have not yet done so, check out the <a href="#initial-setup">initial setup</a> section and the <a href="#routine-checks">routine checks</a> section as you may have missed a setup step or may not have all the needed Docker dependencies ready to go.</p>
<p dir="auto">See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/174" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/174/hovercard">here</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Permissions denied error</h4><a id="user-content-permissions-denied-error" aria-label="Permalink: Permissions denied error" href="#permissions-denied-error"></a></p>
<p dir="auto">If you have not yet set up xhost, try the following:</p>
<div dir="auto" data-snippet-clipboard-copy-content="echo $DISPLAY

# ARCH
sudo pacman -S xorg-xhost

# UBUNTU DEBIAN
sudo apt install x11-xserver-utils

# CENTOS RHEL FEDORA
sudo yum install xorg-x11-server-utils

# then run
xhost +
"><pre><span>echo</span> <span>$DISPLAY</span>

<span><span>#</span> ARCH</span>
sudo pacman -S xorg-xhost

<span><span>#</span> UBUNTU DEBIAN</span>
sudo apt install x11-xserver-utils

<span><span>#</span> CENTOS RHEL FEDORA</span>
sudo yum install xorg-x11-server-utils

<span><span>#</span> then run</span>
xhost +
</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">RAM over-allocation</h3><a id="user-content-ram-over-allocation" aria-label="Permalink: RAM over-allocation" href="#ram-over-allocation"></a></p>
<p dir="auto">You cannot allocate more RAM than your machine has. The default is 3 Gigabytes: <code>-e RAM=3</code>.</p>
<p dir="auto">If you are trying to allocate more RAM to the container than you currently have available, you may see an error like the following: <code>cannot set up guest memory 'pc.ram': Cannot allocate memory</code>. See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/188" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/188/hovercard">here</a>, <a href="https://github.com/sickcodes/Docker-OSX/pull/189" data-hovercard-type="pull_request" data-hovercard-url="/sickcodes/Docker-OSX/pull/189/hovercard">here</a>.</p>
<p dir="auto">For example (below) the <code>buff/cache</code> already contains 20 Gigabytes of allocated RAM:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[user@hostname ~]$ free -mh
               total        used        free      shared  buff/cache   available
Mem:            30Gi       3.5Gi       7.0Gi       728Mi        20Gi        26Gi
Swap:           11Gi          0B        11Gi"><pre><span>[user@hostname ~]</span>$ <span>free -mh</span>
<span>               total        used        free      shared  buff/cache   available</span>
<span>Mem:            30Gi       3.5Gi       7.0Gi       728Mi        20Gi        26Gi</span>
<span>Swap:           11Gi          0B        11Gi</span></pre></div>
<p dir="auto">Clear the buffer and the cache:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo tee /proc/sys/vm/drop_caches <<< 3"><pre>sudo tee /proc/sys/vm/drop_caches <span>&lt;&lt;&lt;</span> <span>3</span></pre></div>
<p dir="auto">Now check the RAM again:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[user@hostname ~]$ free -mh
               total        used        free      shared  buff/cache   available
Mem:            30Gi       3.3Gi        26Gi       697Mi       1.5Gi        26Gi
Swap:           11Gi          0B        11Gi"><pre><span>[user@hostname ~]</span>$ <span>free -mh</span>
<span>               total        used        free      shared  buff/cache   available</span>
<span>Mem:            30Gi       3.3Gi        26Gi       697Mi       1.5Gi        26Gi</span>
<span>Swap:           11Gi          0B        11Gi</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">PulseAudio</h3><a id="user-content-pulseaudio" aria-label="Permalink: PulseAudio" href="#pulseaudio"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Use PulseAudio for sound</h4><a id="user-content-use-pulseaudio-for-sound" aria-label="Permalink: Use PulseAudio for sound" href="#use-pulseaudio-for-sound"></a></p>
<p dir="auto">Note: <a href="https://github.com/acidanthera/AppleALC">AppleALC</a>, <a href="https://dortania.github.io/OpenCore-Post-Install/universal/audio.html" rel="nofollow"><code>alcid</code></a> and <a href="https://github.com/chris1111/VoodooHDA-OC">VoodooHDA-OC</a> do not have <a href="https://osy.gitbook.io/hac-mini-guide/details/hda-fix#hda-codec" rel="nofollow">codec support</a>. However, <a href="https://github.com/vulgo/IORegistryExplorer">IORegistryExplorer</a> does show the controller component working.</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v &quot;/run/user/$(id -u)/pulse/native:/tmp/pulseaudio.socket&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    sickcodes/docker-osx"><pre>docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v <span><span>"</span>/run/user/<span><span>$(</span>id -u<span>)</span></span>/pulse/native:/tmp/pulseaudio.socket<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    sickcodes/docker-osx</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">PulseAudio debugging</h4><a id="user-content-pulseaudio-debugging" aria-label="Permalink: PulseAudio debugging" href="#pulseaudio-debugging"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v &quot;/run/user/$(id -u)/pulse/native:/tmp/pulseaudio.socket&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e PULSE_SERVER=unix:/tmp/pulseaudio.socket \
    sickcodes/docker-osx pactl list"><pre>docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v <span><span>"</span>/run/user/<span><span>$(</span>id -u<span>)</span></span>/pulse/native:/tmp/pulseaudio.socket<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e PULSE_SERVER=unix:/tmp/pulseaudio.socket \
    sickcodes/docker-osx pactl list</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">PulseAudio with WSLg</h4><a id="user-content-pulseaudio-with-wslg" aria-label="Permalink: PulseAudio with WSLg" href="#pulseaudio-with-wslg"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v /mnt/wslg/runtime-dir/pulse/native:/tmp/pulseaudio.socket \
    -v /mnt/wslg/.X11-unix:/tmp/.X11-unix \
    sickcodes/docker-osx"><pre>docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v /mnt/wslg/runtime-dir/pulse/native:/tmp/pulseaudio.socket \
    -v /mnt/wslg/.X11-unix:/tmp/.X11-unix \
    sickcodes/docker-osx</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Forward additional ports (nginx hosting example)</h3><a id="user-content-forward-additional-ports-nginx-hosting-example" aria-label="Permalink: Forward additional ports (nginx hosting example)" href="#forward-additional-ports-nginx-hosting-example"></a></p>
<p dir="auto">It's possible to forward additional ports depending on your needs. In this example, we'll use Mac OSX to host nginx:</p>
<div data-snippet-clipboard-copy-content="host:10023 <-> 10023:container:10023 <-> 80:guest"><pre><code>host:10023 &lt;-&gt; 10023:container:10023 &lt;-&gt; 80:guest
</code></pre></div>
<p dir="auto">On the host machine, run:</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e ADDITIONAL_PORTS='hostfwd=tcp::10023-:80,' \
    -p 10023:10023 \
    sickcodes/docker-osx:auto"><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e ADDITIONAL_PORTS=<span><span>'</span>hostfwd=tcp::10023-:80,<span>'</span></span> \
    -p 10023:10023 \
    sickcodes/docker-osx:auto</pre></div>
<p dir="auto">In a Terminal session running the container, run:</p>
<div dir="auto" data-snippet-clipboard-copy-content="/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;

brew install nginx
sudo sed -i -e 's/8080/80/' /usr/local/etc/nginx/nginx.confcd
# sudo nginx -s stop
sudo nginx"><pre>/bin/bash -c <span><span>"</span><span><span>$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span>)</span></span><span>"</span></span>

brew install nginx
sudo sed -i -e <span><span>'</span>s/8080/80/<span>'</span></span> /usr/local/etc/nginx/nginx.confcd
<span><span>#</span> sudo nginx -s stop</span>
sudo nginx</pre></div>
<p dir="auto"><strong>nginx should now be reachable on port 10023.</strong></p>
<p dir="auto">Additionally, you can string multiple statements together, for example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="    -e ADDITIONAL_PORTS='hostfwd=tcp::10023-:80,hostfwd=tcp::10043-:443,'
    -p 10023:10023 \
    -p 10043:10043 \"><pre>    -e ADDITIONAL_PORTS=<span><span>'</span>hostfwd=tcp::10023-:80,hostfwd=tcp::10043-:443,<span>'</span></span>
    -p 10023:10023 \
    -p 10043:10043 \</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Bridged networking</h3><a id="user-content-bridged-networking" aria-label="Permalink: Bridged networking" href="#bridged-networking"></a></p>
<p dir="auto">You might not need to do anything with the default setup to enable internet connectivity from inside the container. Additionally, <code>curl</code> may work even if <code>ping</code> doesn't.</p>
<p dir="auto">See discussion <a href="https://github.com/sickcodes/Docker-OSX/issues/177" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/177/hovercard">here</a> and <a href="https://github.com/sickcodes/Docker-OSX/issues/72" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/72/hovercard">here</a> and <a href="https://github.com/sickcodes/Docker-OSX/issues/88" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/88/hovercard">here</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Enable IPv4 forwarding for bridged network connections for remote installations</h3><a id="user-content-enable-ipv4-forwarding-for-bridged-network-connections-for-remote-installations" aria-label="Permalink: Enable IPv4 forwarding for bridged network connections for remote installations" href="#enable-ipv4-forwarding-for-bridged-network-connections-for-remote-installations"></a></p>
<p dir="auto">This is not required for LOCAL installations.</p>
<p dir="auto">Additionally note it may <a href="https://sick.codes/cve-2020-15590/" rel="nofollow">cause the host to leak your IP, even if you're using a VPN in the container</a>.</p>
<p dir="auto">However, if you're trying to connect to an instance of Docker-OSX remotely (e.g. an instance of Docker-OSX hosted in a datacenter), this may improve your performance:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# enable for current session
sudo sysctl -w net.ipv4.ip_forward=1

# OR
# sudo tee /proc/sys/net/ipv4/ip_forward <<< 1

# enable permanently
sudo touch /etc/sysctl.conf
sudo tee -a /etc/sysctl.conf <<EOF
net.ipv4.ip_forward = 1
EOF

# or edit manually with the editor of your choice
nano /etc/sysctl.conf || vi /etc/sysctl.conf || vim /etc/sysctl.conf

# now reboot"><pre><span><span>#</span> enable for current session</span>
sudo sysctl -w net.ipv4.ip_forward=1

<span><span>#</span> OR</span>
<span><span>#</span> sudo tee /proc/sys/net/ipv4/ip_forward &lt;&lt;&lt; 1</span>

<span><span>#</span> enable permanently</span>
sudo touch /etc/sysctl.conf
sudo tee -a /etc/sysctl.conf <span><span>&lt;&lt;</span><span>EOF</span></span>
<span>net.ipv4.ip_forward = 1</span>
<span><span>EOF</span></span>

<span><span>#</span> or edit manually with the editor of your choice</span>
nano /etc/sysctl.conf <span>||</span> vi /etc/sysctl.conf <span>||</span> vim /etc/sysctl.conf

<span><span>#</span> now reboot</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Share folder with Docker-OSX QEMU macOS</h2></p>
<p dir="auto">Sharing a folder with guest is quite simple.</p>
<p dir="auto">Your folder, will go to /mnt/hostshare inside the Arch container which is then passed over QEMU.</p>
<p dir="auto">Then mount using <code>sudo -S mount_9p hostshare</code> from inside the mac.</p>
<p dir="auto">For example,</p>

<div dir="auto" data-snippet-clipboard-copy-content="    -v &quot;${FOLDER}:/mnt/hostshare&quot; \
    -e EXTRA=&quot;-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare&quot; \"><pre>    -v <span><span>"</span><span>${FOLDER}</span>:/mnt/hostshare<span>"</span></span> \
    -e EXTRA=<span><span>"</span>-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare<span>"</span></span> \</pre></div>
<p dir="auto">Full example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# stat mac_hdd_ng.img
SHARE=~/somefolder

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -v &quot;${PWD}/mac_hdd_ng.img:/home/arch/OSX-KVM/mac_hdd_ng.img&quot; \
    -v &quot;${SHARE}:/mnt/hostshare&quot; \
    -e EXTRA=&quot;-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare&quot; \
    sickcodes/docker-osx:latest

# !!! Open Terminal inside macOS and run the following command to mount the virtual file system
# sudo -S mount_9p hostshare
"><pre><span><span>#</span> stat mac_hdd_ng.img</span>
SHARE=<span>~</span>/somefolder

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/home/arch/OSX-KVM/mac_hdd_ng.img<span>"</span></span> \
    -v <span><span>"</span><span>${SHARE}</span>:/mnt/hostshare<span>"</span></span> \
    -e EXTRA=<span><span>"</span>-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare<span>"</span></span> \
    sickcodes/docker-osx:latest

<span><span>#</span> !!! Open Terminal inside macOS and run the following command to mount the virtual file system</span>
<span><span>#</span> sudo -S mount_9p hostshare</span>
</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Share Linux NFS Drive into macOS</h3></p>
<p dir="auto">To share a folder using NFS, setup a folder for on the host machine, for example, <code>/srv/nfs/share</code> and then append to <code>/etc/exports</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="/srv/nfs/share      127.0.0.1/0(insecure,rw,all_squash,anonuid=1000,anongid=985,no_subtree_check)"><pre>/srv/nfs/share      127.0.0.1/0(insecure,rw,all_squash,anonuid=1000,anongid=985,no_subtree_check)</pre></div>
<p dir="auto">You may need to reload exports now, which will begin sharing that directory.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# reload shared folders
sudo exportfs -arv"><pre><span><span>#</span> reload shared folders</span>
sudo exportfs -arv</pre></div>
<p dir="auto"><a href="https://serverfault.com/questions/716350/mount-nfs-volume-on-ubuntu-linux-server-from-macos-client" rel="nofollow">Source &amp; Explanation</a></p>
<p dir="auto">Give permissions on the shared folder for the <code>anonuid</code> and <code>anongid</code>, where <code>anonuid</code> and <code>anongid</code> matches that of your linux user; <code>id -u</code></p>
<p dir="auto"><code>id -u ; id -g</code> will print <code>userid:groupid</code></p>
<div data-snippet-clipboard-copy-content="chown 1000:985 /srv/nfs/share
chmod u+rwx /srv/nfs/share"><pre><code>chown 1000:985 /srv/nfs/share
chmod u+rwx /srv/nfs/share
</code></pre></div>
<p dir="auto">Start the Docker-OSX container with the additional flag <code>--network host</code></p>
<p dir="auto">Create and mount the nfs folder from the mac terminal:</p>
<div data-snippet-clipboard-copy-content="mkdir -p ~/mnt
sudo mount_nfs -o locallocks 10.0.2.2:/srv/nfs/share ~/mnt"><pre><code>mkdir -p ~/mnt
sudo mount_nfs -o locallocks 10.0.2.2:/srv/nfs/share ~/mnt
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Share USB Drive into macOS over QEMU</h3></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mount USB Drive (Hotplug/Hot Plug USB)</h2><a id="user-content-mount-usb-drive-hotplughot-plug-usb" aria-label="Permalink: Mount USB Drive (Hotplug/Hot Plug USB)" href="#mount-usb-drive-hotplughot-plug-usb"></a></p>
<p dir="auto">Start your container.</p>
<p dir="auto">Pick a port, for example, <code>7700</code>.</p>
<p dir="auto"><code>lsusb</code> to get <code>vid:pid</code></p>
<p dir="auto">On Linux:
<code>sudo usbredirserver -p 7700 1e3d:2096</code></p>
<p dir="auto">Now, in the Docker window hit Enter to see the <code>(qemu)</code> console.</p>
<p dir="auto">You can add/remove the disk using commands like this, even once the machine is started:</p>
<p dir="auto"><code>chardev-add socket,id=usbredirchardev1,port=7700,host=172.17.0.1</code></p>
<p dir="auto"><code>device_add usb-redir,chardev=usbredirchardev1,id=usbredirdev1,debug=4</code></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mount USB Drive inside macOS at boot Docker OSX</h2><a id="user-content-mount-usb-drive-inside-macos-at-boot-docker-osx" aria-label="Permalink: Mount USB Drive inside macOS at boot Docker OSX" href="#mount-usb-drive-inside-macos-at-boot-docker-osx"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="PORT=7700
IP_ADDRESS=172.17.0.1

-e EXTRA=&quot;-chardev socket,id=usbredirchardev1,port=${PORT},host=${IP_ADDRESS} -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1,debug=4&quot; \`"><pre>PORT=7700
IP_ADDRESS=172.17.0.1

-e EXTRA=<span><span>"</span>-chardev socket,id=usbredirchardev1,port=<span>${PORT}</span>,host=<span>${IP_ADDRESS}</span> -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1,debug=4<span>"</span></span> <span>\`</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Fedora: enable internet connectivity with a bridged network</h3><a id="user-content-fedora-enable-internet-connectivity-with-a-bridged-network" aria-label="Permalink: Fedora: enable internet connectivity with a bridged network" href="#fedora-enable-internet-connectivity-with-a-bridged-network"></a></p>
<p dir="auto">Fedora's default firewall settings may prevent Docker's network interface from reaching the internet. In order to resolve this, you will need to whitelist the interface in your firewall:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Set the docker0 bridge to the trusted zone
sudo firewall-cmd --permanent --zone=trusted --add-interface=docker0
sudo firewall-cmd --reload"><pre><span><span>#</span> Set the docker0 bridge to the trusted zone</span>
sudo firewall-cmd --permanent --zone=trusted --add-interface=docker0
sudo firewall-cmd --reload</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Nested Hardware Virtualization</h3><a id="user-content-nested-hardware-virtualization" aria-label="Permalink: Nested Hardware Virtualization" href="#nested-hardware-virtualization"></a></p>
<p dir="auto">Check if your machine has hardware virtualization enabled:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo tee /sys/module/kvm/parameters/ignore_msrs <<< 1

egrep -c '(svm|vmx)' /proc/cpuinfo"><pre>sudo tee /sys/module/kvm/parameters/ignore_msrs <span>&lt;&lt;&lt;</span> <span>1</span>

egrep -c <span><span>'</span>(svm|vmx)<span>'</span></span> /proc/cpuinfo</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Virtual network adapters</h3><a id="user-content-virtual-network-adapters" aria-label="Permalink: Virtual network adapters" href="#virtual-network-adapters"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Fast internet connectivity</h4><a id="user-content-fast-internet-connectivity" aria-label="Permalink: Fast internet connectivity" href="#fast-internet-connectivity"></a></p>
<p dir="auto"><code>-e NETWORKING=vmxnet3</code></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Slow internet connectivity</h4><a id="user-content-slow-internet-connectivity" aria-label="Permalink: Slow internet connectivity" href="#slow-internet-connectivity"></a></p>
<p dir="auto"><code>-e NETWORKING=e1000-82545em</code></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">CI/CD Related Improvements</h3><a id="user-content-cicd-related-improvements" aria-label="Permalink: CI/CD Related Improvements" href="#cicd-related-improvements"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Tips for reducing the size of the image</h4><a id="user-content-tips-for-reducing-the-size-of-the-image" aria-label="Permalink: Tips for reducing the size of the image" href="#tips-for-reducing-the-size-of-the-image"></a></p>
<ul dir="auto">
<li>Start the container as usual, and remove unnecessary files. A useful way
to do this is to use <code>du -sh *</code> starting from the <code>/</code> directory, and find
large directories where files can be removed. E.g. unnecessary cached files,
Xcode platforms, etc.</li>
<li>Once you are satisfied with the amount of free space, enable trim with <code>sudo trimforce enable</code>, and reboot.</li>
<li>Zero out the empty space on the disk with <code>dd if=/dev/zero of=./empty &amp;&amp; rm -f empty</code></li>
<li>Shut down the VM and copy out the qcow image with <code>docker cp stoppedcontainer:/home/arch/OSX-KVM/mac_hdd_ng.img .</code></li>
<li>Run <code>qemu-img check -r all mac_hdd_ng.img</code> to fix any errors.</li>
<li>Run <code>qemu-img convert -O qcow2 mac_hdd_ng.img deduped.img</code> and check for errors again</li>
<li><strong>OPTIONAL:</strong> Run <code>qemu-img convert -c -O qcow2 deduped.img compressed.img</code> to further compress the image. This may reduce the runtime speed though, but it should reduce the size by roughly 25%.</li>
<li>Check for errors again, and build a fresh docker image. E.g. with this Dockerfile</li>
</ul>
<div data-snippet-clipboard-copy-content="FROM sickcodes/docker-osx
USER arch
COPY --chown=arch ./deduped.img /home/arch/OSX-KVM/mac_hdd_ng.img"><pre><code>FROM sickcodes/docker-osx
USER arch
COPY --chown=arch ./deduped.img /home/arch/OSX-KVM/mac_hdd_ng.img
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Run Docker-OSX headlessly with Telnet</h3><a id="user-content-run-docker-osx-headlessly-with-telnet" aria-label="Permalink: Run Docker-OSX headlessly with Telnet" href="#run-docker-osx-headlessly-with-telnet"></a></p>
<p dir="auto">First make sure <a href="#autoboot-into-osx-after-youve-installed-everything">autoboot is enabled</a></p>
<p dir="auto">Next, you will want to set up SSH to be automatically started.</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo systemsetup -setremotelogin on"><pre>sudo systemsetup -setremotelogin on</pre></div>
<p dir="auto">Make sure to commit the new docker image and save it, or rebuild as described in the <a href="#how-to-reduce-the-size-of-the-image">section on reducing disk space</a>.</p>
<p dir="auto">Then run it with these arguments.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Run with the -nographic flag, and enable a telnet interface
  docker run \
    --device /dev/kvm \
    -p 50922:10022 \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e EXTRA=&quot;-monitor telnet::45454,server,nowait -nographic -serial null&quot; \
    mycustomimage"><pre><span><span>#</span> Run with the -nographic flag, and enable a telnet interface</span>
  docker run \
    --device /dev/kvm \
    -p 50922:10022 \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e EXTRA=<span><span>"</span>-monitor telnet::45454,server,nowait -nographic -serial null<span>"</span></span> \
    mycustomimage</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">What mirrors are appropriate to use to build Docker-OSX locally?</h3><a id="user-content-what-mirrors-are-appropriate-to-use-to-build-docker-osx-locally" aria-label="Permalink: What mirrors are appropriate to use to build Docker-OSX locally?" href="#what-mirrors-are-appropriate-to-use-to-build-docker-osx-locally"></a></p>
<p dir="auto">If you are building Docker-OSX locally, you'll probably want to use Arch Linux's mirrors.</p>
<p dir="auto">Mirror locations can be found here (uses two-letter country codes): <a href="https://archlinux.org/mirrorlist/all/" rel="nofollow">https://archlinux.org/mirrorlist/all/</a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker build -t docker-osx:latest \
    --build-arg RANKMIRRORS=true \
    --build-arg MIRROR_COUNTRY=US \
    --build-arg MIRROR_COUNT=10 \
    --build-arg SHORTNAME=catalina \
    --build-arg SIZE=200G ."><pre>docker build -t docker-osx:latest \
    --build-arg RANKMIRRORS=true \
    --build-arg MIRROR_COUNTRY=US \
    --build-arg MIRROR_COUNT=10 \
    --build-arg SHORTNAME=catalina \
    --build-arg SIZE=200G <span>.</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Custom QEMU Arguments (passthrough devices)</h3><a id="user-content-custom-qemu-arguments-passthrough-devices" aria-label="Permalink: Custom QEMU Arguments (passthrough devices)" href="#custom-qemu-arguments-passthrough-devices"></a></p>
<p dir="auto">Pass any devices/directories to the Docker container &amp; the QEMU arguments using the handy runtime argument provider option <code>-e EXTRA=</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# example customizations
docker run \
    -e RAM=4 \
    -e SMP=4 \
    -e CORES=4 \
    -e EXTRA='-usb -device usb-host,hostbus=1,hostaddr=8' \
    -e INTERNAL_SSH_PORT=23 \
    -e MAC_ADDRESS=&quot;$(xxd -c1 -p -l 6 /dev/urandom | tr '\n' ':' | cut -c1-17)&quot; \
    -e AUDIO_DRIVER=alsa \
    -e IMAGE_PATH=/image \
    -e SCREEN_SHARE_PORT=5900 \
    -e DISPLAY=:0 \
    -e NETWORKING=vmxnet3 \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    docker-osx:latest"><pre><span><span>#</span> example customizations</span>
docker run \
    -e RAM=4 \
    -e SMP=4 \
    -e CORES=4 \
    -e EXTRA=<span><span>'</span>-usb -device usb-host,hostbus=1,hostaddr=8<span>'</span></span> \
    -e INTERNAL_SSH_PORT=23 \
    -e MAC_ADDRESS=<span><span>"</span><span><span>$(</span>xxd -c1 -p -l 6 /dev/urandom <span>|</span> tr <span><span>'</span>\n<span>'</span></span> <span><span>'</span>:<span>'</span></span> <span>|</span> cut -c1-17<span>)</span></span><span>"</span></span> \
    -e AUDIO_DRIVER=alsa \
    -e IMAGE_PATH=/image \
    -e SCREEN_SHARE_PORT=5900 \
    -e DISPLAY=:0 \
    -e NETWORKING=vmxnet3 \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    docker-osx:latest</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Generating serial numbers</h3><a id="user-content-generating-serial-numbers" aria-label="Permalink: Generating serial numbers" href="#generating-serial-numbers"></a></p>
<p dir="auto">Generate serial numbers in <code>./custom</code> OR make docker generate them at runtime (see below).</p>
<p dir="auto">At any time, verify your serial number before logging into iCloud, etc.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# this is a quick way to check your serial number via cli inside OSX
ioreg -l | grep IOPlatformSerialNumber

# test some commands
sshpass -p 'alpine' ssh user@localhost -p 50922 'ping google.com'

# check your serial number
sshpass -p 'alpine' ssh user@localhost -p 50922 'ioreg -l | grep IOPlatformSerialNumber'"><pre><span><span>#</span> this is a quick way to check your serial number via cli inside OSX</span>
ioreg -l <span>|</span> grep IOPlatformSerialNumber

<span><span>#</span> test some commands</span>
sshpass -p <span><span>'</span>alpine<span>'</span></span> ssh user@localhost -p 50922 <span><span>'</span>ping google.com<span>'</span></span>

<span><span>#</span> check your serial number</span>
sshpass -p <span><span>'</span>alpine<span>'</span></span> ssh user@localhost -p 50922 <span><span>'</span>ioreg -l | grep IOPlatformSerialNumber<span>'</span></span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Getting started with serial numbers</h4><a id="user-content-getting-started-with-serial-numbers" aria-label="Permalink: Getting started with serial numbers" href="#getting-started-with-serial-numbers"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# ARCH
pacman -S libguestfs

# UBUNTU DEBIAN
apt install libguestfs -y

# RHEL FEDORA CENTOS
yum install libguestfs -y"><pre><span><span>#</span> ARCH</span>
pacman -S libguestfs

<span><span>#</span> UBUNTU DEBIAN</span>
apt install libguestfs -y

<span><span>#</span> RHEL FEDORA CENTOS</span>
yum install libguestfs -y</pre></div>
<p dir="auto">Inside the <code>./custom</code> folder you will find <code>4</code> scripts.</p>
<ul dir="auto">
<li><code>config-nopicker-custom.plist</code></li>
<li><code>opencore-image-ng.sh</code></li>
</ul>
<p dir="auto">These two files are from OSX-KVM.</p>
<p dir="auto">You don't need to touch these two files.</p>
<p dir="auto">The config.plist has 5 values replaced with placeholders. <a href="https://github.com/sickcodes/Docker-OSX/blob/master/custom/config-nopicker-custom.plist#L705">Click here to see those values for no reason.</a></p>
<ul dir="auto">
<li><code>generate-unique-machine-values.sh</code>
This script will generate serial numbers, with Mac Addresses, plus output to CSV/TSV, plus make a <code>bootdisk image</code>.</li>
</ul>
<p dir="auto">You can create hundreds, <code>./custom/generate-unique-machine-values.sh --help</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="./custom/generate-unique-machine-values.sh \
    --count 1 \
    --tsv ./serial.tsv \
    --bootdisks \
    --output-bootdisk OpenCore.qcow2 \
    --output-env source.env.sh"><pre>./custom/generate-unique-machine-values.sh \
    --count 1 \
    --tsv ./serial.tsv \
    --bootdisks \
    --output-bootdisk OpenCore.qcow2 \
    --output-env source.env.sh</pre></div>
<p dir="auto">Or if you have some specific serial numbers...</p>
<ul dir="auto">
<li><code>generate-specific-bootdisk.sh</code></li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="generate-specific-bootdisk.sh \
    --model &quot;${DEVICE_MODEL}&quot; \
    --serial &quot;${SERIAL}&quot; \
    --board-serial &quot;${BOARD_SERIAL}&quot; \
    --uuid &quot;${UUID}&quot; \
    --mac-address &quot;${MAC_ADDRESS}&quot; \
    --output-bootdisk OpenCore-nopicker.qcow2"><pre>generate-specific-bootdisk.sh \
    --model <span><span>"</span><span>${DEVICE_MODEL}</span><span>"</span></span> \
    --serial <span><span>"</span><span>${SERIAL}</span><span>"</span></span> \
    --board-serial <span><span>"</span><span>${BOARD_SERIAL}</span><span>"</span></span> \
    --uuid <span><span>"</span><span>${UUID}</span><span>"</span></span> \
    --mac-address <span><span>"</span><span>${MAC_ADDRESS}</span><span>"</span></span> \
    --output-bootdisk OpenCore-nopicker.qcow2</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">This example generates a random set of serial numbers at runtime, headlessly</h4><a id="user-content-this-example-generates-a-random-set-of-serial-numbers-at-runtime-headlessly" aria-label="Permalink: This example generates a random set of serial numbers at runtime, headlessly" href="#this-example-generates-a-random-set-of-serial-numbers-at-runtime-headlessly"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# proof of concept only, generates random serial numbers, headlessly, and quits right after.
docker run --rm -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_UNIQUE=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    sickcodes/docker-osx:auto

# -e OSX_COMMANDS='ioreg -l | grep IOPlatformSerialNumber' \"><pre><span><span>#</span> proof of concept only, generates random serial numbers, headlessly, and quits right after.</span>
docker run --rm -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_UNIQUE=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    sickcodes/docker-osx:auto

<span><span>#</span> -e OSX_COMMANDS='ioreg -l | grep IOPlatformSerialNumber' \</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">This example generates a specific set of serial numbers at runtime</h4><a id="user-content-this-example-generates-a-specific-set-of-serial-numbers-at-runtime" aria-label="Permalink: This example generates a specific set of serial numbers at runtime" href="#this-example-generates-a-specific-set-of-serial-numbers-at-runtime"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# run the same as above 17gb auto image, with SSH, with nopicker, and save the bootdisk for later.
# you don't need to save the bootdisk IF you supply specific serial numbers!

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -e SERIAL=&quot;C02TW0WAHX87&quot; \
    -e BOARD_SERIAL=&quot;C027251024NJG36UE&quot; \
    -e UUID=&quot;5CCB366D-9118-4C61-A00A-E5BAF3BED451&quot; \
    -e MAC_ADDRESS=&quot;A8:5C:2C:9A:46:2F&quot; \
    -e OSX_COMMANDS='ioreg -l | grep IOPlatformSerialNumber' \
    sickcodes/docker-osx:auto"><pre><span><span>#</span> run the same as above 17gb auto image, with SSH, with nopicker, and save the bootdisk for later.</span>
<span><span>#</span> you don't need to save the bootdisk IF you supply specific serial numbers!</span>

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -e SERIAL=<span><span>"</span>C02TW0WAHX87<span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span>C027251024NJG36UE<span>"</span></span> \
    -e UUID=<span><span>"</span>5CCB366D-9118-4C61-A00A-E5BAF3BED451<span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span>A8:5C:2C:9A:46:2F<span>"</span></span> \
    -e OSX_COMMANDS=<span><span>'</span>ioreg -l | grep IOPlatformSerialNumber<span>'</span></span> \
    sickcodes/docker-osx:auto</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">This example generates a specific set of serial numbers at runtime, with your existing image, at 1000x1000 display resolution</h4><a id="user-content-this-example-generates-a-specific-set-of-serial-numbers-at-runtime-with-your-existing-image-at-1000x1000-display-resolution" aria-label="Permalink: This example generates a specific set of serial numbers at runtime, with your existing image, at 1000x1000 display resolution" href="#this-example-generates-a-specific-set-of-serial-numbers-at-runtime-with-your-existing-image-at-1000x1000-display-resolution"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# run an existing image in current directory, with a screen, with SSH, with nopicker.

stat mac_hdd_ng.img # make sure you have an image if you're using :naked

docker run -it \
    -v &quot;${PWD}/mac_hdd_ng.img:/image&quot; \
    --device /dev/kvm \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -e SERIAL=&quot;C02TW0WAHX87&quot; \
    -e BOARD_SERIAL=&quot;C027251024NJG36UE&quot; \
    -e UUID=&quot;5CCB366D-9118-4C61-A00A-E5BAF3BED451&quot; \
    -e MAC_ADDRESS=&quot;A8:5C:2C:9A:46:2F&quot; \
    -e WIDTH=1000 \
    -e HEIGHT=1000 \
    sickcodes/docker-osx:naked"><pre><span><span>#</span> run an existing image in current directory, with a screen, with SSH, with nopicker.</span>

stat mac_hdd_ng.img <span><span>#</span> make sure you have an image if you're using :naked</span>

docker run -it \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/image<span>"</span></span> \
    --device /dev/kvm \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -e SERIAL=<span><span>"</span>C02TW0WAHX87<span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span>C027251024NJG36UE<span>"</span></span> \
    -e UUID=<span><span>"</span>5CCB366D-9118-4C61-A00A-E5BAF3BED451<span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span>A8:5C:2C:9A:46:2F<span>"</span></span> \
    -e WIDTH=1000 \
    -e HEIGHT=1000 \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto">If you want to generate serial numbers, either make them at runtime using
<code>    -e GENERATE_UNIQUE=true \</code></p>
<p dir="auto">Or you can generate them inside the <code>./custom</code> folder. And then use:</p>
<div dir="auto" data-snippet-clipboard-copy-content="    -e GENERATE_SPECIFIC=true \
    -e SERIAL=&quot;&quot; \
    -e BOARD_SERIAL=&quot;&quot; \
    -e UUID=&quot;&quot; \
    -e MAC_ADDRESS=&quot;&quot; \"><pre>    -e GENERATE_SPECIFIC=true \
    -e SERIAL=<span><span>"</span><span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span><span>"</span></span> \
    -e UUID=<span><span>"</span><span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span><span>"</span></span> \</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Making serial numbers persist across reboots</h4><a id="user-content-making-serial-numbers-persist-across-reboots" aria-label="Permalink: Making serial numbers persist across reboots" href="#making-serial-numbers-persist-across-reboots"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="
stat mac_hdd_ng_testing.img
touch ./output.env

# generate fresh random serial numbers, with a screen, using your own image, and save env file with your new serial numbers for later.

docker run -it \
    --device /dev/kvm \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_UNIQUE=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -v &quot;${PWD}/output.env:/env&quot; \
    -v &quot;${PWD}/mac_hdd_ng_testing.img:/image&quot; \
    sickcodes/docker-osx:naked"><pre>stat mac_hdd_ng_testing.img
touch ./output.env

<span><span>#</span> generate fresh random serial numbers, with a screen, using your own image, and save env file with your new serial numbers for later.</span>

docker run -it \
    --device /dev/kvm \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_UNIQUE=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -v <span><span>"</span><span>${PWD}</span>/output.env:/env<span>"</span></span> \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng_testing.img:/image<span>"</span></span> \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto">To use iMessage or iCloud you need to change <code>5</code> values.</p>
<ul dir="auto">
<li><code>SERIAL</code></li>
<li><code>BOARD_SERIAL</code></li>
<li><code>UUID</code></li>
<li><code>MAC_ADDRESS</code></li>
</ul>
<p dir="auto"><em><code>ROM</code> is just the lowercased mac address, without <code>:</code> between each word.</em></p>
<p dir="auto">You can tell the container to generate them for you using <code>-e GENERATE_UNIQUE=true</code></p>
<p dir="auto">Or tell the container to use specific ones using <code>-e GENERATE_SPECIFIC=true</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -e SERIAL=&quot;C02TW0WAHX87&quot; \
    -e BOARD_SERIAL=&quot;C027251024NJG36UE&quot; \
    -e UUID=&quot;5CCB366D-9118-4C61-A00A-E5BAF3BED451&quot; \
    -e MAC_ADDRESS=&quot;A8:5C:2C:9A:46:2F&quot; \"><pre>    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -e SERIAL=<span><span>"</span>C02TW0WAHX87<span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span>C027251024NJG36UE<span>"</span></span> \
    -e UUID=<span><span>"</span>5CCB366D-9118-4C61-A00A-E5BAF3BED451<span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span>A8:5C:2C:9A:46:2F<span>"</span></span> \</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Changing display resolution</h3><a id="user-content-changing-display-resolution" aria-label="Permalink: Changing display resolution" href="#changing-display-resolution"></a></p>
<p dir="auto">The display resolution is controlled by this line:</p>
<p dir="auto"><a href="https://github.com/sickcodes/Docker-OSX/blob/master/custom/config-nopicker-custom.plist#L819">https://github.com/sickcodes/Docker-OSX/blob/master/custom/config-nopicker-custom.plist#L819</a></p>
<p dir="auto">Instead of mounting that disk, Docker-OSX will generate a new <code>OpenCore.qcow2</code> by using this one cool trick:</p>
<div dir="auto" data-snippet-clipboard-copy-content="-e GENERATE_UNIQUE=true \
-e WIDTH=800 \
-e HEIGHT=600 \"><pre>-e GENERATE_UNIQUE=true \
-e WIDTH=800 \
-e HEIGHT=600 \</pre></div>
<p dir="auto">To use <code>WIDTH</code>/<code>HEIGHT</code>, you must use with either <code>-e GENERATE_UNIQUE=true</code> or <code>-e GENERATE_SPECIFIC=true</code>.</p>
<p dir="auto">It will take around 30 seconds longer to boot because it needs to make a new boot partition using <code>libguestfs</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="-e GENERATE_SPECIFIC=true \
-e WIDTH=1920 \
-e HEIGHT=1080 \
-e SERIAL=&quot;&quot; \
-e BOARD_SERIAL=&quot;&quot; \
-e UUID=&quot;&quot; \
-e MAC_ADDRESS=&quot;&quot; \"><pre>-e GENERATE_SPECIFIC=true \
-e WIDTH=1920 \
-e HEIGHT=1080 \
-e SERIAL=<span><span>"</span><span>"</span></span> \
-e BOARD_SERIAL=<span><span>"</span><span>"</span></span> \
-e UUID=<span><span>"</span><span>"</span></span> \
-e MAC_ADDRESS=<span><span>"</span><span>"</span></span> \</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Change Docker-OSX Resolution Examples</h4><a id="user-content-change-docker-osx-resolution-examples" aria-label="Permalink: Change Docker-OSX Resolution Examples" href="#change-docker-osx-resolution-examples"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# using an image in your current directory
stat mac_hdd_ng.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -e SERIAL=&quot;C02TW0WAHX87&quot; \
    -e BOARD_SERIAL=&quot;C027251024NJG36UE&quot; \
    -e UUID=&quot;5CCB366D-9118-4C61-A00A-E5BAF3BED451&quot; \
    -e MAC_ADDRESS=&quot;A8:5C:2C:9A:46:2F&quot; \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    -e WIDTH=1600 \
    -e HEIGHT=900 \
    sickcodes/docker-osx:naked"><pre><span><span>#</span> using an image in your current directory</span>
stat mac_hdd_ng.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -e SERIAL=<span><span>"</span>C02TW0WAHX87<span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span>C027251024NJG36UE<span>"</span></span> \
    -e UUID=<span><span>"</span>5CCB366D-9118-4C61-A00A-E5BAF3BED451<span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span>A8:5C:2C:9A:46:2F<span>"</span></span> \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    -e WIDTH=1600 \
    -e HEIGHT=900 \
    sickcodes/docker-osx:naked</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="# generating random serial numbers, using the DIY installer, along with the screen resolution changes.
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e WIDTH=800 \
    -e HEIGHT=600 \
    sickcodes/docker-osx:latest"><pre><span><span>#</span> generating random serial numbers, using the DIY installer, along with the screen resolution changes.</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e WIDTH=800 \
    -e HEIGHT=600 \
    sickcodes/docker-osx:latest</pre></div>
<p dir="auto">Here's a few other resolutions! If your resolution is invalid, it will default to 800x600.</p>
<div data-snippet-clipboard-copy-content="    -e WIDTH=800 \
    -e HEIGHT=600 \"><pre><code>    -e WIDTH=800 \
    -e HEIGHT=600 \
</code></pre></div>
<div data-snippet-clipboard-copy-content="    -e WIDTH=1280 \
    -e HEIGHT=768 \"><pre><code>    -e WIDTH=1280 \
    -e HEIGHT=768 \
</code></pre></div>
<div data-snippet-clipboard-copy-content="    -e WIDTH=1600 \
    -e HEIGHT=900 \"><pre><code>    -e WIDTH=1600 \
    -e HEIGHT=900 \
</code></pre></div>
<div data-snippet-clipboard-copy-content="    -e WIDTH=1920 \
    -e HEIGHT=1080 \"><pre><code>    -e WIDTH=1920 \
    -e HEIGHT=1080 \
</code></pre></div>
<div data-snippet-clipboard-copy-content="    -e WIDTH=2560 \
    -e HEIGHT=1600 \"><pre><code>    -e WIDTH=2560 \
    -e HEIGHT=1600 \
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">This example shows how to change resolution after the container is created.</h4><a id="user-content-this-example-shows-how-to-change-resolution-after-the-container-is-created" aria-label="Permalink: This example shows how to change resolution after the container is created." href="#this-example-shows-how-to-change-resolution-after-the-container-is-created"></a></p>
<p dir="auto">First step is to stop the docker daemon</p>
<div data-snippet-clipboard-copy-content="sudo systemctl stop docker"><pre><code>sudo systemctl stop docker
</code></pre></div>
<p dir="auto">The second step is to change container config in</p>
<div data-snippet-clipboard-copy-content="/var/lib/docker/containers/[container-id]/config.v2.json"><pre><code>/var/lib/docker/containers/[container-id]/config.v2.json
</code></pre></div>
<p dir="auto">(Suppose your original WIDTH is 1024 and HEIGHT is 768, you can search 1024 and replace it with the new value. Same for 768.)</p>
<p dir="auto">The last step is to restart the docker daemon</p>
<div data-snippet-clipboard-copy-content="sudo systemctl restart docker"><pre><code>sudo systemctl restart docker
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Mounting physical disks in Mac OSX</h3><a id="user-content-mounting-physical-disks-in-mac-osx" aria-label="Permalink: Mounting physical disks in Mac OSX" href="#mounting-physical-disks-in-mac-osx"></a></p>
<p dir="auto">Pass the disk into the container as a volume and then pass the disk again into QEMU command line extras with.</p>
<p dir="auto">Use the <code>config-custom.plist</code> because you probably want to see the boot menu, otherwise omit the first line:</p>
<div dir="auto" data-snippet-clipboard-copy-content="DISK_TWO=&quot;${PWD}/mount_me.img&quot;"><pre>DISK_TWO=<span><span>"</span><span>${PWD}</span>/mount_me.img<span>"</span></span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="-e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \
-v &quot;${DISK_TWO}:/disktwo&quot; \
-e EXTRA='-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2' \"><pre>-e MASTER_PLIST_URL=<span>'https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist'</span> \
-v <span>"${DISK_TWO}:/disktwo"</span> \
-e EXTRA=<span>'-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2'</span> \</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Physical disk mounting example</h4><a id="user-content-physical-disk-mounting-example" aria-label="Permalink: Physical disk mounting example" href="#physical-disk-mounting-example"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="OSX_IMAGE=&quot;${PWD}/mac_hdd_ng_xcode_bigsur.img&quot;
DISK_TWO=&quot;${PWD}/mount_me.img&quot;

docker run -it \
    --device /dev/kvm \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \
    -v &quot;${OSX_IMAGE}&quot;:/image \
    -v &quot;${DISK_TWO}&quot;:/disktwo \
    -e EXTRA='-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2' \
    sickcodes/docker-osx:naked"><pre>OSX_IMAGE=<span><span>"</span><span>${PWD}</span>/mac_hdd_ng_xcode_bigsur.img<span>"</span></span>
DISK_TWO=<span><span>"</span><span>${PWD}</span>/mount_me.img<span>"</span></span>

docker run -it \
    --device /dev/kvm \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e MASTER_PLIST_URL=<span><span>'</span>https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist<span>'</span></span> \
    -v <span><span>"</span><span>${OSX_IMAGE}</span><span>"</span></span>:/image \
    -v <span><span>"</span><span>${DISK_TWO}</span><span>"</span></span>:/disktwo \
    -e EXTRA=<span><span>'</span>-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2<span>'</span></span> \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto">See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/222" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/222/hovercard">here</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Extracting the APFS disk on Linux</h4><a id="user-content-extracting-the-apfs-disk-on-linux" aria-label="Permalink: Extracting the APFS disk on Linux" href="#extracting-the-apfs-disk-on-linux"></a></p>
<p dir="auto">In Docker-OSX, we are using <code>qcow2</code> images.</p>
<p dir="auto">This means the image grows as you use it, but the guest OS thinks you have 200GB available.</p>
<p dir="auto"><strong>READ ONLY</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="# mount the qemu image like a real disk
sudo modprobe nbd max_part=8
sudo qemu-nbd --connect=/dev/nbd0 ./image.img
sudo fdisk /dev/nbd0 -l

mkdir -p ./mnt
sudo mount /dev/nbd0p1 ./mnt

# inspect partitions (2 partitions)
sudo fdisk /dev/nbd0 -l

# mount using apfs-linux-rw OR apfs-fuse
mkdir -p ./part

sudo mount /dev/nbd0p2 ./part
sudo apfs-fuse -o allow_other /dev/nbd0p2 ./part
"><pre><span><span>#</span> mount the qemu image like a real disk</span>
sudo modprobe nbd max_part=8
sudo qemu-nbd --connect=/dev/nbd0 ./image.img
sudo fdisk /dev/nbd0 -l

mkdir -p ./mnt
sudo mount /dev/nbd0p1 ./mnt

<span><span>#</span> inspect partitions (2 partitions)</span>
sudo fdisk /dev/nbd0 -l

<span><span>#</span> mount using apfs-linux-rw OR apfs-fuse</span>
mkdir -p ./part

sudo mount /dev/nbd0p2 ./part
sudo apfs-fuse -o allow_other /dev/nbd0p2 ./part
</pre></div>
<p dir="auto">When you are finishing looking at your disk, you can unmount the partition, the disk, and remove the loopback device:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo umount ./part
sudo umount ./mnt
sudo qemu-nbd --disconnect /dev/nbd0
sudo rmmod nbd"><pre>sudo umount ./part
sudo umount ./mnt
sudo qemu-nbd --disconnect /dev/nbd0
sudo rmmod nbd</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">USB Passthrough</h3><a id="user-content-usb-passthrough" aria-label="Permalink: USB Passthrough" href="#usb-passthrough"></a></p>
<p dir="auto">Firstly, QEMU must be started as root.</p>
<p dir="auto">It is also potentially possible to accomplish USB passthrough by changing the permissions of the device in the container.
See <a href="https://www.linuxquestions.org/questions/slackware-14/qemu-usb-permissions-744557/#post3628691" rel="nofollow">here</a>.</p>
<p dir="auto">For example, create a new Dockerfile with the following</p>
<div dir="auto" data-snippet-clipboard-copy-content="FROM sickcodes/docker-osx
USER arch
RUN sed -i -e s/exec\ qemu/exec\ sudo\ qemu/ ./Launch.sh
COPY --chown=arch ./new_image.img /home/arch/OSX-KVM/mac_hdd_ng.img"><pre>FROM sickcodes/docker-osx
USER arch
RUN sed -i -e s/exec<span>\ </span>qemu/exec<span>\ </span>sudo<span>\ </span>qemu/ ./Launch.sh
COPY --chown=arch ./new_image.img /home/arch/OSX-KVM/mac_hdd_ng.img</pre></div>
<p dir="auto">Where <code>new_image.img</code> is the qcow2 image you extracted. Then rebuild with <code>docker build .</code></p>
<p dir="auto">Next we need to find out the bus and port numbers of the USB device we want to pass through to the VM:</p>
<div dir="auto" data-snippet-clipboard-copy-content="lsusb -t
/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/6p, 5000M
/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/12p, 480M
    |__ Port 2: Dev 5, If 0, Class=Human Interface Device, Driver=usbhid, 12M
    |__ Port 2: Dev 5, If 1, Class=Chip/SmartCard, Driver=, 12M
    |__ Port 3: Dev 2, If 0, Class=Wireless, Driver=, 12M
    |__ Port 3: Dev 2, If 1, Class=Wireless, Driver=, 12M
    |__ Port 5: Dev 3, If 0, Class=Video, Driver=uvcvideo, 480M
    |__ Port 5: Dev 3, If 1, Class=Video, Driver=uvcvideo, 480M"><pre>lsusb -t
/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/6p, 5000M
/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/12p, 480M
    <span>|</span>__ Port 2: Dev 5, If 0, Class=Human Interface Device, Driver=usbhid, 12M
    <span>|</span>__ Port 2: Dev 5, If 1, Class=Chip/SmartCard, Driver=, 12M
    <span>|</span>__ Port 3: Dev 2, If 0, Class=Wireless, Driver=, 12M
    <span>|</span>__ Port 3: Dev 2, If 1, Class=Wireless, Driver=, 12M
    <span>|</span>__ Port 5: Dev 3, If 0, Class=Video, Driver=uvcvideo, 480M
    <span>|</span>__ Port 5: Dev 3, If 1, Class=Video, Driver=uvcvideo, 480M</pre></div>
<p dir="auto">In this example, we want to pass through a smartcard device. The device we want is on bus 1 and port 2.</p>
<p dir="auto">There may also be differences if your device is usb 2.0 (ehci) vs usb 3.0 (xhci).
See <a href="https://unix.stackexchange.com/a/452946/101044" rel="nofollow">here</a> for more details.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# hostbus and hostport correspond to the numbers from lsusb
# runs in privileged mode to enable access to the usb devices.
docker run \
  --privileged \
  --device /dev/kvm \
  -e RAM=4 \
  -p 50922:10022 \
  -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
  -e EXTRA=&quot;-device virtio-serial-pci -device usb-host,hostbus=1,hostport=2&quot; \
  mycustomimage"><pre><span><span>#</span> hostbus and hostport correspond to the numbers from lsusb</span>
<span><span>#</span> runs in privileged mode to enable access to the usb devices.</span>
docker run \
  --privileged \
  --device /dev/kvm \
  -e RAM=4 \
  -p 50922:10022 \
  -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
  -e EXTRA=<span><span>"</span>-device virtio-serial-pci -device usb-host,hostbus=1,hostport=2<span>"</span></span> \
  mycustomimage</pre></div>
<p dir="auto">You should see the device show up when you do <code>system_profiler SPUSBDataType</code> in the MacOS shell.</p>
<p dir="auto">Important Note: this will cause the host system to lose access to the USB device while the VM is running!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Container creation examples</h2><a id="user-content-container-creation-examples" aria-label="Permalink: Container creation examples" href="#container-creation-examples"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Quick Start your own image (naked container image)</h4><a id="user-content-quick-start-your-own-image-naked-container-image" aria-label="Permalink: Quick Start your own image (naked container image)" href="#quick-start-your-own-image-naked-container-image"></a></p>
<p dir="auto">This is my favourite container. You can supply an existing disk image as a Docker command line argument.</p>
<ul dir="auto">
<li>
<p dir="auto">Pull images out using <code>sudo find /var/lib/docker -name mac_hdd_ng.img -size +10G</code></p>
</li>
<li>
<p dir="auto">Supply your own local image with the command argument <code>-v "${PWD}/mac_hdd_ng.img:/image"</code> and use <code>sickcodes/docker-osx:naked</code> when instructing Docker to create your container.</p>
<ul dir="auto">
<li>
<p dir="auto">Naked image is for booting any existing .img file, e.g in the current working directory (<code>$PWD</code>)</p>
</li>
<li>
<p dir="auto">By default, this image has a variable called <code>NOPICKER</code> which is <code>"true"</code>. This skips the disk selection menu. Use <code>-e NOPICKER=false</code> or any other string than the word <code>true</code> to enter the boot menu.</p>
<p dir="auto">This lets you use other disks instead of skipping the boot menu, e.g. recovery disk or disk utility.</p>
</li>
</ul>
</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="docker pull sickcodes/docker-osx:naked

# run your own image + SSH
# change mac_hdd_ng.img
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:naked

# run local copy of the auto image + SSH + Boot menu
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng_auto.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e &quot;NOPICKER=false&quot; \
    sickcodes/docker-osx:naked"><pre>docker pull sickcodes/docker-osx:naked

<span><span>#</span> run your own image + SSH</span>
<span><span>#</span> change mac_hdd_ng.img</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:naked

<span><span>#</span> run local copy of the auto image + SSH + Boot menu</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng_auto.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e <span><span>"</span>NOPICKER=false<span>"</span></span> \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building an OSX container with video output</h3><a id="user-content-building-an-osx-container-with-video-output" aria-label="Permalink: Building an OSX container with video output" href="#building-an-osx-container-with-video-output"></a></p>
<p dir="auto">The Quick Start command should work out of the box, provided that you keep the following lines. Works in <code>auto</code> &amp; <code>naked</code> machines:</p>
<div data-snippet-clipboard-copy-content="    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \"><pre><code>    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e "DISPLAY=${DISPLAY:-:0.0}" \
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Prebuilt image with arbitrary command line arguments</h4><a id="user-content-prebuilt-image-with-arbitrary-command-line-arguments" aria-label="Permalink: Prebuilt image with arbitrary command line arguments" href="#prebuilt-image-with-arbitrary-command-line-arguments"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/95a8f30ec42cff4f909e34a85cd8ecccce74926271a1832380c1e8c2b4f506b5/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto"></a></p>
<p dir="auto"><code>-e OSX_COMMANDS</code> lets you run any commands inside the container</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker pull sickcodes/docker-osx:auto

# boot to OS X shell + display + specify commands to run inside OS X!
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e &quot;OSX_COMMANDS=/bin/bash -c \&quot;put your commands here\&quot;&quot; \
    sickcodes/docker-osx:auto

# Boots in a minute or two!"><pre>docker pull sickcodes/docker-osx:auto

<span><span>#</span> boot to OS X shell + display + specify commands to run inside OS X!</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e <span><span>"</span>OSX_COMMANDS=/bin/bash -c <span>\"</span>put your commands here<span>\"</span><span>"</span></span> \
    sickcodes/docker-osx:auto

<span><span>#</span> Boots in a minute or two!</span></pre></div>
<p dir="auto">OR if you have an image already and just want to log in and execute arbitrary commands:</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker pull sickcodes/docker-osx:naked-auto

# boot to OS X shell + display + specify commands to run inside OS X!
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e USERNAME=yourusername \
    -e PASSWORD=yourpassword \
    -e &quot;OSX_COMMANDS=/bin/bash -c \&quot;put your commands here\&quot;&quot; \
    sickcodes/docker-osx:naked-auto

# Boots in a minute or two!
"><pre>docker pull sickcodes/docker-osx:naked-auto

<span><span>#</span> boot to OS X shell + display + specify commands to run inside OS X!</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e USERNAME=yourusername \
    -e PASSWORD=yourpassword \
    -e <span><span>"</span>OSX_COMMANDS=/bin/bash -c <span>\"</span>put your commands here<span>\"</span><span>"</span></span> \
    sickcodes/docker-osx:naked-auto

<span><span>#</span> Boots in a minute or two!</span>
</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Further examples</h3><a id="user-content-further-examples" aria-label="Permalink: Further examples" href="#further-examples"></a></p>
<p dir="auto">There's a myriad of other potential use cases that can work perfectly with Docker-OSX, some of which you'll see below!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building a headless OSX container</h3><a id="user-content-building-a-headless-osx-container" aria-label="Permalink: Building a headless OSX container" href="#building-a-headless-osx-container"></a></p>
<p dir="auto">For a headless container, <strong>remove</strong> the following two lines from your <code>docker run</code> command:</p>
<div data-snippet-clipboard-copy-content="    # -v /tmp/.X11-unix:/tmp/.X11-unix \
    # -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \"><pre><code>    # -v /tmp/.X11-unix:/tmp/.X11-unix \
    # -e "DISPLAY=${DISPLAY:-:0.0}" \
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Building a headless container from a custom image</h4><a id="user-content-building-a-headless-container-from-a-custom-image" aria-label="Permalink: Building a headless container from a custom image" href="#building-a-headless-container-from-a-custom-image"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/18ebff76cdd5b97ba8c4f154fc69ce16aab9850f3a57dfae97f2e06e6d1a37cc/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65643f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b6564" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked"></a></p>
<p dir="auto">This is particularly helpful for CI/CD pipelines.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# run your own image headless + SSH
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng.img:/image&quot; \
    sickcodes/docker-osx:naked"><pre><span><span>#</span> run your own image headless + SSH</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/image<span>"</span></span> \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building a headless container that allows insecure VNC on localhost (!for local use only!)</h3><a id="user-content-building-a-headless-container-that-allows-insecure-vnc-on-localhost-for-local-use-only" aria-label="Permalink: Building a headless container that allows insecure VNC on localhost (!for local use only!)" href="#building-a-headless-container-that-allows-insecure-vnc-on-localhost-for-local-use-only"></a></p>
<p dir="auto"><strong>Must change -it to -i to be able to interact with the QEMU console</strong></p>
<p dir="auto"><strong>To exit a container using -i you must <code>docker kill &lt;containerid&gt;</code>. For example, to kill everything, <code>docker ps | xargs docker kill</code>.</strong></p>
<p dir="auto">Native QEMU VNC example</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -i \
    --device /dev/kvm \
    -p 50922:10022 \
    -p 5999:5999 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e EXTRA=&quot;-display none -vnc 0.0.0.0:99,password=on&quot; \
    sickcodes/docker-osx:big-sur

# type `change vnc password myvncusername` into the docker terminal and set a password
# connect to localhost:5999 using VNC
# qemu 6 seems to require a username for vnc now"><pre>docker run -i \
    --device /dev/kvm \
    -p 50922:10022 \
    -p 5999:5999 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e EXTRA=<span><span>"</span>-display none -vnc 0.0.0.0:99,password=on<span>"</span></span> \
    sickcodes/docker-osx:big-sur

<span><span>#</span> type `change vnc password myvncusername` into the docker terminal and set a password</span>
<span><span>#</span> connect to localhost:5999 using VNC</span>
<span><span>#</span> qemu 6 seems to require a username for vnc now</span></pre></div>
<p dir="auto"><strong>NOT TLS/HTTPS Encrypted at all!</strong></p>
<p dir="auto">Or <code>ssh -N root@1.1.1.1 -L  5999:127.0.0.1:5999</code>, where <code>1.1.1.1</code> is your remote server IP.</p>
<p dir="auto">(Note: if you close port 5999 and use the SSH tunnel, this becomes secure.)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building a headless container to run remotely with secure VNC</h3><a id="user-content-building-a-headless-container-to-run-remotely-with-secure-vnc" aria-label="Permalink: Building a headless container to run remotely with secure VNC" href="#building-a-headless-container-to-run-remotely-with-secure-vnc"></a></p>
<p dir="auto">Add the following line:</p>
<p dir="auto"><code>-e EXTRA="-display none -vnc 0.0.0.0:99,password=on"</code></p>
<p dir="auto">In the Docker terminal, press <code>enter</code> until you see <code>(qemu)</code>.</p>
<p dir="auto">Type <code>change vnc password someusername</code></p>
<p dir="auto">Enter a password for your new vnc username^.</p>
<p dir="auto">You also need the container IP: <code>docker inspect &lt;containerid&gt; | jq -r '.[0].NetworkSettings.IPAddress'</code></p>
<p dir="auto">Or <code>ip n</code> will usually show the container IP first.</p>
<p dir="auto">Now VNC connects using the Docker container IP, for example <code>172.17.0.2:5999</code></p>
<p dir="auto">Remote VNC over SSH: <code>ssh -N root@1.1.1.1 -L  5999:172.17.0.2:5999</code>, where <code>1.1.1.1</code> is your remote server IP and <code>172.17.0.2</code> is your LAN container IP.</p>
<p dir="auto">Now you can direct connect VNC to any container built with this command!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">I'd like to use SPICE instead of VNC</h3><a id="user-content-id-like-to-use-spice-instead-of-vnc" aria-label="Permalink: I'd like to use SPICE instead of VNC" href="#id-like-to-use-spice-instead-of-vnc"></a></p>
<p dir="auto">Optionally, you can enable the SPICE protocol, which allows use of <code>remote-viewer</code> to access your OSX container rather than VNC.</p>
<p dir="auto">Note: <code>-disable-ticketing</code> will allow unauthenticated access to the VM. See the <a href="https://www.spice-space.org/spice-user-manual.html" rel="nofollow">spice manual</a> for help setting up authenticated access ("Ticketing").</p>
<div dir="auto" data-snippet-clipboard-copy-content="  docker run \
    --device /dev/kvm \
    -p 3001:3001 \
    -p 50922:10022 \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e EXTRA=&quot;-monitor telnet::45454,server,nowait -nographic -serial null -spice disable-ticketing,port=3001&quot; \
    mycustomimage"><pre>  docker run \
    --device /dev/kvm \
    -p 3001:3001 \
    -p 50922:10022 \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e EXTRA=<span><span>"</span>-monitor telnet::45454,server,nowait -nographic -serial null -spice disable-ticketing,port=3001<span>"</span></span> \
    mycustomimage</pre></div>
<p dir="auto">Then simply do <code>remote-viewer spice://localhost:3001</code> and add <code>--spice-debug</code> for debugging.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Creating images based on an already configured and set up container</h4><a id="user-content-creating-images-based-on-an-already-configured-and-set-up-container" aria-label="Permalink: Creating images based on an already configured and set up container" href="#creating-images-based-on-an-already-configured-and-set-up-container"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# You can create an image of an already configured and setup container.
# This allows you to effectively duplicate a system.
# To do this, run the following commands

# make note of your container id
docker ps --all
docker commit containerid newImageName

# To run this image do the following
docker run \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    newImageName"><pre><span><span>#</span> You can create an image of an already configured and setup container.</span>
<span><span>#</span> This allows you to effectively duplicate a system.</span>
<span><span>#</span> To do this, run the following commands</span>

<span><span>#</span> make note of your container id</span>
docker ps --all
docker commit containerid newImageName

<span><span>#</span> To run this image do the following</span>
docker run \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    newImageName</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="docker pull sickcodes/docker-osx:auto

# boot directly into a real OS X shell with no display (Xvfb) [HEADLESS]
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    sickcodes/docker-osx:auto

# username is user
# passsword is alpine
# Wait 2-3 minutes until you drop into the shell."><pre>docker pull sickcodes/docker-osx:auto

<span><span>#</span> boot directly into a real OS X shell with no display (Xvfb) [HEADLESS]</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    sickcodes/docker-osx:auto

<span><span>#</span> username is user</span>
<span><span>#</span> passsword is alpine</span>
<span><span>#</span> Wait 2-3 minutes until you drop into the shell.</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Run the original version of Docker-OSX</h4><a id="user-content-run-the-original-version-of-docker-osx" aria-label="Permalink: Run the original version of Docker-OSX" href="#run-the-original-version-of-docker-osx"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="
docker pull sickcodes/docker-osx:latest

docker run -it \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:latest

# press CTRL + G if your mouse gets stuck
# scroll down to troubleshooting if you have problems
# need more RAM and SSH on localhost -p 50922?"><pre>docker pull sickcodes/docker-osx:latest

docker run -it \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:latest

<span><span>#</span> press CTRL + G if your mouse gets stuck</span>
<span><span>#</span> scroll down to troubleshooting if you have problems</span>
<span><span>#</span> need more RAM and SSH on localhost -p 50922?</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Run but enable SSH in OS X (Original Version)!</h4><a id="user-content-run-but-enable-ssh-in-os-x-original-version" aria-label="Permalink: Run but enable SSH in OS X (Original Version)!" href="#run-but-enable-ssh-in-os-x-original-version"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -it \
    --device /dev/kvm \
    --device /dev/snd \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:latest

# turn on SSH after you've installed OS X in the &quot;Sharing&quot; settings.
ssh user@localhost -p 50922"><pre>docker run -it \
    --device /dev/kvm \
    --device /dev/snd \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:latest

<span><span>#</span> turn on SSH after you've installed OS X in the "Sharing" settings.</span>
ssh user@localhost -p 50922</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Autoboot into OS X after you've installed everything</h4><a id="user-content-autoboot-into-os-x-after-youve-installed-everything" aria-label="Permalink: Autoboot into OS X after you've installed everything" href="#autoboot-into-os-x-after-youve-installed-everything"></a></p>
<p dir="auto">Add the extra option <code>-e NOPICKER=true</code>.</p>
<p dir="auto">Old machines:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# find your containerID
docker ps

# move the no picker script on top of the Launch script
# NEW CONTAINERS
docker exec containerID mv ./Launch-nopicker.sh ./Launch.sh

# VNC-VERSION-CONTAINER
docker exec containerID mv ./Launch-nopicker.sh ./Launch_custom.sh

# LEGACY CONTAINERS
docker exec containerID bash -c &quot;grep -v InstallMedia ./Launch.sh > ./Launch-nopicker.sh
chmod +x ./Launch-nopicker.sh
sed -i -e s/OpenCore\.qcow2/OpenCore\-nopicker\.qcow2/ ./Launch-nopicker.sh
&quot;"><pre><span><span>#</span> find your containerID</span>
docker ps

<span><span>#</span> move the no picker script on top of the Launch script</span>
<span><span>#</span> NEW CONTAINERS</span>
docker <span>exec</span> containerID mv ./Launch-nopicker.sh ./Launch.sh

<span><span>#</span> VNC-VERSION-CONTAINER</span>
docker <span>exec</span> containerID mv ./Launch-nopicker.sh ./Launch_custom.sh

<span><span>#</span> LEGACY CONTAINERS</span>
docker <span>exec</span> containerID bash -c <span><span>"</span>grep -v InstallMedia ./Launch.sh &gt; ./Launch-nopicker.sh</span>
<span>chmod +x ./Launch-nopicker.sh</span>
<span>sed -i -e s/OpenCore\.qcow2/OpenCore\-nopicker\.qcow2/ ./Launch-nopicker.sh</span>
<span><span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">The big-sur image starts slowly after installation. Is this expected?</h3><a id="user-content-the-big-sur-image-starts-slowly-after-installation-is-this-expected" aria-label="Permalink: The big-sur image starts slowly after installation. Is this expected?" href="#the-big-sur-image-starts-slowly-after-installation-is-this-expected"></a></p>
<p dir="auto">Automatic updates are still on in the container's settings. You may wish to turn them off. <a href="https://github.com/sickcodes/Docker-OSX/issues/227" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/227/hovercard">We have future plans for development around this.</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">What is <code>${DISPLAY:-:0.0}</code>?</h3><a id="user-content-what-is-display-00" aria-label="Permalink: What is ${DISPLAY:-:0.0}?" href="#what-is-display-00"></a></p>
<p dir="auto"><code>$DISPLAY</code> is the shell variable that refers to your X11 display server.</p>
<p dir="auto"><code>${DISPLAY}</code> is the same, but allows you to join variables like this:</p>
<ul dir="auto">
<li>e.g. <code>${DISPLAY}_${DISPLAY}</code> would print <code>:0.0_:0.0</code></li>
<li>e.g. <code>$DISPLAY_$DISPLAY</code>     would print <code>:0.0</code></li>
</ul>
<p dir="auto">...because <code>$DISPLAY_</code> is not <code>$DISPLAY</code></p>
<p dir="auto"><code>${variable:-fallback}</code> allows you to set a "fallback" variable to be substituted if <code>$variable</code> is not set.</p>
<p dir="auto">You can also use <code>${variable:=fallback}</code> to set that variable (in your current terminal).</p>
<p dir="auto">In Docker-OSX, we assume, <code>:0.0</code> is your default <code>$DISPLAY</code> variable.</p>
<p dir="auto">You can see what yours is</p>

<p dir="auto">That way, <code>${DISPLAY:-:0.0}</code> will use whatever variable your X11 server has set for you, else <code>:0.0</code></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">What is <code>-v /tmp/.X11-unix:/tmp/.X11-unix</code>?</h3><a id="user-content-what-is--v-tmpx11-unixtmpx11-unix" aria-label="Permalink: What is -v /tmp/.X11-unix:/tmp/.X11-unix?" href="#what-is--v-tmpx11-unixtmpx11-unix"></a></p>
<p dir="auto"><code>-v</code> is a Docker command-line option that lets you pass a volume to the container.</p>
<p dir="auto">The directory that we are letting the Docker container use is a X server display socket.</p>
<p dir="auto"><code>/tmp/.X11-unix</code></p>
<p dir="auto">If we let the Docker container use the same display socket as our own environment, then any applications you run inside the Docker container will show up on your screen too! <a href="https://www.x.org/archive/X11R6.8.0/doc/RELNOTES5.html" rel="nofollow">https://www.x.org/archive/X11R6.8.0/doc/RELNOTES5.html</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">ALSA errors on startup or container creation</h3><a id="user-content-alsa-errors-on-startup-or-container-creation" aria-label="Permalink: ALSA errors on startup or container creation" href="#alsa-errors-on-startup-or-container-creation"></a></p>
<p dir="auto">You may when initialising or booting into a container see errors from the <code>(qemu)</code> console of the following form:
<code>ALSA lib blahblahblah: (function name) returned error: no such file or directory</code>. These are more or less expected. As long as you are able to boot into the container and everything is working, no reason to worry about these.</p>
<p dir="auto">See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/174" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/174/hovercard">here</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[`find` + `mkdir` is Turing complete (195 pts)]]></title>
            <link>https://ogiekako.vercel.app/blog/find_mkdir_tc</link>
            <guid>41115941</guid>
            <pubDate>Wed, 31 Jul 2024 02:22:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ogiekako.vercel.app/blog/find_mkdir_tc">https://ogiekako.vercel.app/blog/find_mkdir_tc</a>, See on <a href="https://news.ycombinator.com/item?id=41115941">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Call of Duty: Warzone Caldera Data Set for Academic Use (108 pts)]]></title>
            <link>https://blog.activision.com/activision/2024/activision-releases-call-of-duty-warzone-caldera-data-set</link>
            <guid>41115619</guid>
            <pubDate>Wed, 31 Jul 2024 01:06:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.activision.com/activision/2024/activision-releases-call-of-duty-warzone-caldera-data-set">https://blog.activision.com/activision/2024/activision-releases-call-of-duty-warzone-caldera-data-set</a>, See on <a href="https://news.ycombinator.com/item?id=41115619">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <h2><b>Announcing the Open-Source Caldera Map Release</b></h2>
<p>With a vision to expand the knowledge base of the gaming industry, Activision is excited to share the release of an open-source data set featuring the map Caldera from <i>Call of Duty®: Warzone™</i> for non-commercial use.</p>
<p>This first-of-its-kind data set release for <i>Call of Duty</i><span>, now available in OpenUSD, contains the near-complete geometry of Caldera as well as a collection of randomly selected anonymized time samples showing how players move around the map. This initiative represents Activision’s commitment to innovation and growth in multiple fields, including AI learning, within the communities of academia and research, while propelling the advancement of game development. It brings to life the colossal and carefully crafted map that was home to many epic brawls in </span><i>Call of Duty: Warzone</i><span> and is production-proven and battle-tested.</span><br>
</p>

</div><div>
    
<h2><b>Why Open-Source Matters</b></h2>
<p>In an era where AI training and the evolution of authoring tools are pivotal, the availability of production-proven maps is crucial. By releasing Caldera as an open-source asset for non-commercial use, the technology teams at Activision aim to empower developers and educators with high-quality, production-validated and accessible resources. This is about collaborating with the gaming and research community to build a foundation for responsible innovation and learning across the industry.</p>

<h2><b>A Resource for Education and Training</b></h2>
<p>Our commitment to open source goes beyond development; Activision envisions these assets as invaluable educational resources. Students, educators, and professionals can utilize Caldera for training, demonstrations, and experimentation. This initiative encourages learning and skill development within the gaming community and beyond.</p>

<h2><b>Supporting AI Development</b></h2>
<p>Open-source assets like Caldera play a vital role in the advancement of artificial intelligence. By providing a rich, diverse environment, we facilitate the training of AI models, enhancing the industry’s understanding of complex geometries and interactions. This can lead to more intelligent systems, paving the way for the next generation of gaming and simulation technologies.</p>

<h2><b>Evolving Authoring Tools</b></h2>
<p>The gaming industry is consistently evolving with new authoring tools emerging regularly. By contributing assets to the open-source community, the Activision technology teams encourage the development of robust tools that can handle complex geometries and environments. This collaborative approach will drive innovation, making it easier for developers to create immersive experiences.</p>
<p>In a brief discussion with Activision’s Chief Technology Officer Natalya Tatarchuk and Senior Vice President, Fellow Software Engineer Michael Vance, the technology team details everything included in the set, the vision for the release, and how providing Caldera to academics and researchers can benefit the <i>Call of Duty</i> Community and positively impact the future of gaming.</p>

<p><b><u>What is the size and scale of the Caldera Data Set?</u></b></p>
<p><b>Michael Vance:</b> The <i>Call of Duty </i>Data Set featuring Caldera represents an extensive, in terms of world-size, scene-graph depth and geometric complexity, production-quality map, used for multiplayer games in <i>Call of Duty:</i> <i>Warzone</i>. The release of this map represents one of the largest production-validated open data set releases from the gaming industry in terms of complexity of geometry and instance counts. It also is one of the largest publicly available <a href="https://openusd.org/release/index.html">OpenUSD</a> data sets, providing an excellent test harness for OpenUSD itself.</p>

</div><div>
    <p><b>Natalya Tatarchuk</b>: We, at Activision, believe that it’s important for the gaming industry to help foster growth and innovation within the industry, to help evolve authoring tools, as well as provide excellent data for AI training and evolution of content generation techniques, and we believe that this data set provides a unique benefit for these goals.</p>
<p>The map's geometry data is approximately 4 GB but is comprised of more than five million meshes, 28 million primitives, and more than one-billion-point instances, which can also represent scene metadata such as volumes that we use for lighting processing. Its complexity is also a testament to the richness and detail that the team at Raven Software built, with help from Beenox, High Moon Studios, and the broader <i>Call of Duty</i> development teams.</p>

</div><div>
    
<p><u><b>Besides the geometry representing the Caldera map, what other data did you include in this data set?</b></u></p>
<p><b>Vance: </b>We have also included in-game character pathing and time samples showing how players behave on the map. For instance, one of the sets shows the paths players take throughout a match. While we have not included specific visualizations of these, the data is easily accessible, allowing different ways to explore and visualize them.</p>

</div><div>
    
<p><b><u>Why was Caldera selected as the map to release as part of this set?</u></b></p>
<p><b>Vance:</b> As our team looked through a variety of scenarios for the best data set, including multiple smaller multi-player maps, our priority was to choose a map that best represents the scale and complexity of our current design philosophy. It’s exciting for us to see Caldera continue to live on and help expand the games industry through academia and research. The hierarchical arrangement of the map also allows users to select sub-sections of the map to limit the scope of analysis or providing multiple smaller areas for comparison, which is useful in avoiding over-fitting issues by leaving other sections of the map for validation.</p>

<p><b><u>What do academics and researchers typically do with data sets such as this?</u></b></p>
<p><b>Tatarchuk:</b> Researchers are constantly in search of data sets that represent the fullness and complexity of modern-day production data, which is difficult for them to approximate in a traditional academic setting.</p>

</div><div>
    <p>The computer graphics industry has a strong legacy of canonical data sets—some may be familiar with for example the <a href="https://graphics.stanford.edu/data/3Dscanrep/">Stanford bunny</a>, <a href="https://casual-effects.com/g3d/data10/index.html#mesh10">Dabrovic Sponza</a>, or more recently <a href="https://www.disneyanimation.com/resources/moana-island-scene/">Disney’s Moana Island</a>, or <a href="https://animallogic.com/alab/">Animal Logic’s ALab</a>. Each of these has become an important part of research in the broader graphics and gaming industries, fostering innovation in areas such as mesh simplification, deferred rendering, and other modern lighting and shading approaches. With the lack of available production data at this scale, Caldera provides researchers an opportunity to explore these types of sets with more rigor.</p>

<p><b><u>What is your vision for what can come from the Caldera Data Set being released publicly?</u></b></p>
<p><b>Tatarchuk: </b>Activision is committed to continuously being innovative in technology and AI space to further the development of video games and to help drive the gaming community forward.</p>
<p>Responsible innovation in AI technologies can help propel industry-wide development of video games forward in a way that creates richer gaming experiences for players in the future.</p>
<p>One element of releasing Caldera is giving back to the community of research that has been so beneficial to the industry over the past decades. One of our goals is to broaden access to production data, allowing researchers to test their approaches in real-world scenarios, which will help accelerate the development of new solutions, as well as provide confidence that solutions can be deployed at production scale. We believe that Caldera’s release will be an impactful and material benefit to that effort.</p>
<p><b>Vance: </b>We are also interested in what new insights the research community will develop around object relationships, scene creation and editing, and other topics related to environmental construction with Caldera. The tabular data and metadata include providing opportunities for richer understanding of how players interact with the game, which can potentially lead to new insights on what makes specific layouts compelling for users.</p>
<p>As we learn what the research and academic community finds useful in the set, we want to create an ongoing dialog with them so we can continuously make updates that are helpful.</p>

<p><b><u>How can new technology or learnings from the Caldera Data Set benefit the Call of Duty community?</u></b></p>
<p><b>Vance:</b> While our game environments are already enormously complex, we feel a constant need to improve the play experience and deliver even more richness and detail. Innovations that come from this data set release could give more freedom and flexibility for our content teams to find the most engaging scenarios for our players. Insights into object relationships, procedural approaches to our world data, and other ideas could lead to more compact data representations on both disk and in memory. We are excited about what the academic community will produce based on Caldera and look forward to seeing new techniques that we could never have imagined.</p>

</div><div>
    
<h3><b>Join the Movement</b></h3>
<p>We believe that the industry can greatly benefit from more open-source contributions. Our motivation stems from a shared desire to inspire creativity and collaboration. We invite everyone—students, studios, vendors, partners, and beyond—to explore, utilize, and contribute to the further growth of our incredible industry.</p>
<p><a href="https://github.com/Activision/caldera"><b>Download the Call of Duty Data Set Now</b></a></p>
<p>Join us in this exciting journey and become part of a vibrant community dedicated to innovation, education, and collaboration.</p>

<p><b>Together, let’s shape the future of gaming and beyond!</b></p>

<p><i>© 2024 Activision Publishing, Inc. ACTIVISION, and CALL OF DUTY are trademarks of Activision Publishing, Inc. All other trademarks and trade names are the property of their respective owner</i></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Our Audit of Homebrew (568 pts)]]></title>
            <link>https://blog.trailofbits.com/2024/07/30/our-audit-of-homebrew/</link>
            <guid>41114839</guid>
            <pubDate>Tue, 30 Jul 2024 22:39:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.trailofbits.com/2024/07/30/our-audit-of-homebrew/">https://blog.trailofbits.com/2024/07/30/our-audit-of-homebrew/</a>, See on <a href="https://news.ycombinator.com/item?id=41114839">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page" role="main">

			
				
<article id="post-107865">
	<!-- .entry-header -->

	<div>
		<p><em>By William Woodruff</em></p>
<p>This is a joint post with the Homebrew maintainers; <a href="https://brew.sh/2024/07/30/homebrew-security-audit/">read their announcement here</a>!</p>
<p>Last summer, we performed an audit of <a href="https://brew.sh/">Homebrew</a>. Our audit’s scope included <a href="https://github.com/Homebrew/brew">Homebrew/brew</a> itself (home of the brew CLI), and three adjacent repositories responsible for various security-relevant aspects of Homebrew’s operation:</p>
<ul>
<li><a href="https://github.com/Homebrew/actions">Homebrew/actions</a>: a repository of custom GitHub Actions used throughout Homebrew’s CI/CD;</li>
<li><a href="https://github.com/Homebrew/formulae.brew.sh">Homebrew/formulae.brew.sh</a>: the codebase responsible for Homebrew’s JSON index of installable packages;</li>
<li><a href="https://github.com/Homebrew/homebrew-test-bot">Homebrew/homebrew-test-bot</a>: Homebrew’s core CI/CD orchestration and lifecycle management routines.</li>
</ul>
<p>We found issues within Homebrew that, while not critical, could allow an attacker to load executable code at unexpected points and undermine the integrity guarantees intended by Homebrew’s use of sandboxing. Similarly, we found issues in Homebrew’s CI/CD that could allow an attacker to surreptitiously modify binary (“<a href="https://docs.brew.sh/Bottles">bottle</a>”) builds of formulae and potentially pivot from triggering CI/CD workflows to controlling the execution of CI/CD workflows and exfiltrating their secrets.</p>
<p>This audit was sponsored by the <a href="https://www.opentech.fund/">Open Tech Fund</a> as part of their larger mission to secure critical pieces of internet infrastructure. You can read the full report in <a href="https://github.com/trailofbits/publications#technology-product-reviews">our publications repository</a>.</p>
<h3>Homebrew</h3>
<p>Homebrew is the self-described “missing package manager for macOS (or Linux).” It serves as the <em>de facto</em> standard package manager for software developers on macOS, and <a href="https://formulae.brew.sh/analytics/install/365d/">serves hundreds of millions of package installs</a> annually. These installations include “keystone” packages such as <a href="https://formulae.brew.sh/formula/go#default">Golang</a>, <a href="https://formulae.brew.sh/formula/node#default">Node.js</a>, and <a href="https://formulae.brew.sh/formula/openssl@3#default">OpenSSL</a>, making Homebrew’s security (and the integrity of its builds) critical to the security of downstream software ecosystems as a whole. Homebrew’s core (not to be confused with <a href="https://github.com/Homebrew/homebrew-core">homebrew-core</a>) is a Ruby monolith responsible for providing the <a href="https://docs.brew.sh/Manpage"><code>brew</code> CLI</a> to users along with an <a href="https://rubydoc.brew.sh/">importable Ruby API</a>.</p>
<p>Since its inception in 2009, Homebrew has undergone several architectural shifts aimed at improving the reliability and usability of packages delivered to users: binary builds (bottles) were implemented, made into the default installation mechanism (replacing local source builds), and subsequently built solely on CI/CD to limit the risk of a compromised developer machine. Despite this increasingly static approach, Homebrew’s core codebase is fundamentally dynamic and, in many places, reflects Homebrew’s historical need for dynamic loading of <a href="https://docs.brew.sh/Formula-Cookbook">DSL-specified formulae</a> via user-controlled Ruby code.</p>
<h3>Scope</h3>
<p>Homebrew is both a user-installable package manager (the <code>brew</code> CLI) and a packaging ecosystem, with an extensive and bespoke CI/CD configuration for reviewing, building, and distributing bottles to end users. Our audit focused on aspects of both of these, and aimed to answer questions like (but not limited to) the following:</p>
<ul>
<li>Can a local actor induce unexpected execution of a formula’s DSL, e.g. without an explicit invocation of <code>brew install</code>?</li>
<li>Can a local actor induce unexpected evaluation of a tap’s formulae, e.g. from just <code>brew tap</code> with no subsequent user actions?</li>
<li>Can a local actor induce namespace confusions or conflicts within brew, resulting in <code>brew install foo</code> installing an unexpected formula?</li>
<li>Can a locally installed formula surreptitiously subvert or bypass Homebrew’s build isolation mechanisms?</li>
<li>Can an unprivileged or low-privilege CI/CD actor (such as a third-party contributor) pivot to a higher privilege in Homebrew’s CI/CD?</li>
<li>Can an unprivileged or low-privilege CI/CD actor surreptitiously taint or compromise a bottle build?</li>
<li>Can an unprivileged or low-privilege CI/CD actor establish persistence in Homebrew’s CI/CD?</li>
</ul>
<h3>Highlighted findings</h3>
<h4>brew</h4>
<p>During our review of the <code>brew</code> CLI’s codebase, we uncovered a number of findings that, while not critical, could potentially undermine Homebrew’s per-formula integrity and isolation properties. We also uncovered findings that could allow loading of formulae (i.e., executable code) from surprising sources, such as remote URLs.</p>
<p>Some findings of interest include:</p>
<ul>
<li>TOB-BREW-2, wherein a formula can influence the construction of its sandbox through string injection, resulting in a sandbox escape.</li>
<li>TOB-BREW-5, wherein Homebrew used a collision-prone hash function (MD5) for a synthetic namespace (<code>FormulaNamespace</code>) could allow an attacker to induce runtime confusion between formulae.</li>
<li>TOB-BREW-8, wherein a formula can surreptitiously include networked resources in its build without explicitly listing them via <code>resource</code> stanzas.</li>
<li>TOB-BREW-11, wherein a formula can potentially use a socket pivot to escape its build sandbox on macOS.</li>
<li>TOB-BREW-12, wherein a formula could opportunistically perform a privilege escalation through a user’s previously activated <code>sudo</code> token.</li>
<li>TOB-BREW-13, wherein <code>brew install</code> can be induced to install formulae from non-local URLs for any protocol supported by the version of <code>curl</code> being used, such as SFTP or SCP.</li>
</ul>
<p>Our overall evaluation of <a href="https://github.com/Homebrew/brew">Homebrew/brew</a> is reflected in our report: while extensively tested, Homebrew’s large API and CLI surface and informal local behavioral contract offer a large variety of avenues for unsandboxed, local code execution to an opportunistic attacker. These avenues do not necessarily violate Homebrew’s core security assumptions (which assume trustworthy formulae), but may be subverted either by malicious formulae or through unexpected sources of formula loading (such as insufficiently sanitized inputs).</p>
<h4>Homebrew’s CI/CD</h4>
<p>Our review of Homebrew’s CI/CD workflows and actions uncovered findings that, while not critical, could undermine the integrity of Homebrew’s CI/CD runs and allow a less-privileged user to pivot to a position of higher privilege or even obtain persistence on Homebrew’s self-hosted GitHub Actions runners.</p>
<p>Some findings of interest include:</p>
<ul>
<li>TOB-BREW-18, wherein multiple CI/CD workflows use the <code>pull_request_target</code> trigger to allow third-party pull requests to run code in the context of Homebrew’s upstream repository, potentially enabling either credential disclosure or tampering with Homebrew’s bottle builds.</li>
<li>TOB-BREW-23, wherein multiple CI/CD workflows inadvertently allow shell injection via unsanitized <code>workflow_dispatch</code> inputs, potentially enabling vertical movement by a less-privileged user (i.e., one who can dispatch workflows but not modify them).</li>
</ul>
<p>Beyond CI/CD-specific findings, many brew findings are also salient in the CI/CD setting:</p>
<ul>
<li>TOB-BREW-6, which describes a lack of sandboxing/isolation during archive extraction, could be used by a less-privileged CI actor to pivot into a higher-privileged context by inducing extraction of a formula or other executable code that gets auto-loaded and executed during the CI’s lifecycle.</li>
<li>TOB-BREW-13, described above, could be used by a less-privileged CI actor to pivot into a higher-privileged context, by inducing arbitrary code execution through <code>brew install</code> of a formula not present in the CI’s pre-configured (presumed trusted) context.</li>
</ul>
<p>Our report concludes that Homebrew’s CI/CD, while mature and effective at reducing the number of human touch-points in Homebrew’s package lifecycle, is complex and relies on misuse-prone patterns common in GitHub Actions workflows (such as dangerous workflow triggers and mixing of configuration, code, and data via template expansion). These patterns do not necessarily enable persistence or pivoting by a fully external actor, but may be leveraged by a lower-privileged insider (such as a rogue maintainer) to undermine the integrity and isolation assumptions made by Homebrew’s CI/CD.</p>
<h3>Takeaways</h3>
<p>Auditing a package management ecosystem such as Homebrew poses unique challenges. Local package management tools install and execute arbitrary third-party code by design and, as such, typically have informal and loosely defined boundaries between expected and unexpected code execution. This is especially true in packaging ecosystems like Homebrew, where the “carrier” format for packages (formulae) is itself executable code (Ruby scripts, in Homebrew’s case).</p>
<p>Throughout the audit, we worked closely with the <a href="https://github.com/Homebrew/brew?tab=readme-ov-file#who-we-are">Homebrew maintainers</a> and the <a href="https://docs.brew.sh/Homebrew-Governance">Homebrew PLC</a> and would like to thank them for sharing their extensive knowledge and expertise. We would also like to thank <a href="https://github.com/p-linnane">Patrick Linnane</a>, Homebrew’s security manager, in particular for his triage and coordination efforts on behalf of Homebrew.</p>

			</div><!-- .entry-content -->

	
</article><!-- #post-107865 -->
						<!-- #nav-below -->
		
					<!-- #comments .comments-area -->

			
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Creativity fundamentally comes from memorization (141 pts)]]></title>
            <link>https://shwin.co/blog/creativity-fundamentally-comes-from-memorization</link>
            <guid>41114825</guid>
            <pubDate>Tue, 30 Jul 2024 22:37:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://shwin.co/blog/creativity-fundamentally-comes-from-memorization">https://shwin.co/blog/creativity-fundamentally-comes-from-memorization</a>, See on <a href="https://news.ycombinator.com/item?id=41114825">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="block-blog-creativity-fundamentally-comes-from-memorization"><p id="block-b294026f0085409aa8083c2ba28086bb">July 2024</p><p id="block-13c08ff8edaa462fb8c83ec3719a40c6">I'm often made fun of for bringing a "system" into creative outlets.</p><p id="block-c048424fee404b37b3b7a95b1d3bc957">Things like:</p><ul><li id="block-6680669f67f645c5aa7a44d5746724db">written-down heuristics on best DJ transitions</li><li id="block-3aee7afa7481460b982a09507f4862f6">breaking down the humor patterns of comedians and memes</li><li id="block-3973a2736bfc486c82eefa8e35488322">or a checklist of best practices for competitive video games (e.g. Rocket League, Call of Duty).</li></ul><p id="block-b5ce1052ad514429b7b2e6b54d2edc4b">But I think this critique misunderstands what creativity truly is: </p><p id="block-17becdb07d9d4765830940e025f7fb80">a flash of inspiration connecting internalized concepts.</p><p id="block-6264bddc13e5415abf9f3248b0ebb897">The inspirational lightning bolt writers and artists experience can't happen unless they know how to write or draw. A pun can't be created unless the author sees the similarity between one word and another they already know. A DJ can't mashup two songs unless they're familiar with both.</p><p id="block-84e00f4ae01b454ba45792c9f4bf6bb6">By definition, you can't even be certain of novelty without familiarity of existing works.</p><p id="block-d75e7185a08b4e798f0ab38112d7367a">Creativity comes to those who have internalized the patterns of their art -- they can see the connection or novelty because it's all in their head.</p><p id="block-63a9acfe180645bf97d0853ddcf1c3ab">Therefore autonomy enables creativity, and a system helps achieve autonomy quicker.</p><span id="e40b61990d524cdc833da032c37b103f"></span><h2 id="block-e40b61990d524cdc833da032c37b103f">It all starts with learning</h2><p id="block-1a59aab06cbb45b795069d6a5b770ce3">Some time back I discovered a method for learning anything quickly.</p><p id="block-9cfd275902ec421db980418a21772263">It involved two steps:</p><ol type="1"><li id="block-75684240e00246ee947a919579aa3174">Memorizing the different classifications/patterns in a concept [1]</li><li id="block-51b5b44c29f240bd9283217c7ff9d2f4">Exposing myself to a breadth of cases so I could match the real-world example to one of the previously learned patterns</li></ol><p id="block-468e43b751dc4a70acbc0127594a2e2e">For many that remember school, this won't sound novel. Yet what's often missed is the application beyond academic subjects:</p><ul><li id="block-9103cf62851048c1893434742f057a23">sports - learning to recognize weaknesses in a defense</li><li id="block-248cb6c7a0e440d08a3ec9aaffde0db5">sales - learning to recognize someone's "conversational type"</li><li id="block-0946c6799975459abbf56d49fdd2866f">humor - recognizing common opportunities for humor in a situation</li></ul><p id="block-a570b4558af044b19a50e6ea03791202">Even academically, while older western curriculums seemed to emphasize memorization, new school teaching seems to have shifted towards understanding-based, which is just a memorization aid. [1]</p><p id="block-d9f9da27b8064bbf9fc0002e19950143">Eastern cultures, on the other hand, have maintained focus on drilling these primitives to unlock autonomy, as shown by popular tutoring services like Kumon -- which involve daily, timed tests to develop speed.</p><p id="block-a0a2ffe5bc5542bdaa16fa3a4de0916c">Growing up with Indian parents in California, I was exposed to both. My mom would write daily Kumon sheets out by hand for me to do, and teach me from Indian textbooks from the same grade (which were much more advanced than the US equivalents). The result was me breezing through the US school system without much thought. [2]</p><p id="block-23ddb919f3d9432587ddf91968620ffb">The key here is memorization's role in learning. We often tout the difference between memorization and true "understanding", which are indeed distinct. Memorizing the different methods of attacking mathematical integrations is different from being able to use the right one in the moment.</p><p id="block-33938c60a47b47c4821fc05d78ab52a9">But I maintain that such pattern recognition is just another form of memorization, though often a more subconscious one. This is learned from repeated exposure, and what I'm attempting to do when I try to see a "breadth" of cases after learning the framework and available patterns to use.</p><p id="block-db98f257a6974f7a988966612384332a">What this is really doing under the hood, is creating a heuristic and... wait for it... memorizing it!</p><p id="block-72ceb407a5b04463a1b49732298cb23d">Once this heuristic is internalized, it becomes a new primitive and we focus our attention to higher-level problems.</p><p id="block-0d1890092d36484f90c9fd2c60088982">Yet even if knowledge is memorized without understanding (as high schoolers so often do) — this creates an opportunity for understanding to manifest at a later date. I’ll never forget the shock I received when working through a proof in college on electromagnetic waves and suddenly ending up with 3e8 — a value I’d memorized blindly as the speed of light.</p><span id="fd8cda833b8b485d8345b1aab87b426b"></span><h2 id="block-fd8cda833b8b485d8345b1aab87b426b">But doesn't this make things mechanical instead of creative and intuitive?</h2><p id="block-885b86d619314dcdb1fefc4775a1bef4">But doesn't this stifle creativity? Making things mechanical instead of creative and intuitive?</p><p id="block-fce16ad752d8478a99274dc9f5afcf67">On the contrary, it enables creativity and intuitiveness by reducing energy needed for the basics, freeing you up to focus on higher-level novelty.</p><p id="block-5a6f30e22974482e93c57f4dc8218007">Once a dancer learns the fundamental movements of their specialization, they're able to improvise. So are pianists once they learn scales, and mathematicians (though sadly many of us never experience the joy of mathematical improvisation -- as Paul Lockhart covers in his <a href="https://worrydream.com/refs/Lockhart_2002_-_A_Mathematician's_Lament.pdf" target="_blank" rel="noopener noreferrer">Mathematician's Lament</a>).</p><p id="block-10abebbfd3c649d88df90feae9396612">The key is understanding that a system doesn't directly <em>make</em> creativity, it just <em>enables</em> it. Memorization’s role is similar.</p><p id="block-9574f3d9f6b442bbb0077ee0afe0a2f6">Another strategy that works well in both humor and famous EDM drops is "violating the expectation", but you need to know the expectation before you can violate it. Once you learn music theory, you're able to violate it in ways that resonate. Avant-garde art requires knowing what the establishment is to push the boundaries as orthogonally as possible.</p><p id="block-e1c59eb2795a4e419601b64a07acd0b4">One of my best personal examples is learning sales (which eventually be another blog post). As a not-intuitively charismatic guy, I had to learn systems for it. Things like tactical delivery skills:</p><ul><li id="block-3d0b3cca2e734e8a8e4b383357a3f649">pause for 2 seconds before responding</li><li id="block-2bddb45f76014d739c80ebac80b69011">don't use too many conditionals in a sentence</li><li id="block-8c3e8ad888ca432485921ea2315d36c4">start with the answer, then go into detail (McKinsey Pyramid Principle)</li></ul><p id="block-76fb363a4e494cacb4cc4e3ec952d78a">As well as what questions to ask (from SPIN selling):</p><ul><li id="block-5516d55a56864f8ab016db873c858c78">situation questions</li><li id="block-eb073e09f82a41e1a492cb92c42d1239">problem questions</li><li id="block-2a33b15957f5401281ea0cf160ccd03d">impact questions</li><li id="block-3478f81fc7ca4d71885b8d178186a0f0">needs-payoff questions</li></ul><p id="block-7bc9c8e3a14d49d283bfd238a7471b3f">While at first calls were clunky, once internalized -- creativity abounds. Recognizing when the convo is naturally jumping straight to the "Impact" section of questions means I don't force us back to the "Problem" questions, we just shift forward.</p><p id="block-065b1194e7584e5c9ef232ad17104fe6">All of a sudden sales calls (and human interactions in general) get fun, life improves.</p><span id="0aed9d6f394e49c19136d90e64a857c2"></span><h2 id="block-0aed9d6f394e49c19136d90e64a857c2">Ramifications</h2><p id="block-bb43b4245463422e8efa20685f1d1ca6">The obvious thing I've taken from this is my learning system: using the steps above I can learn things quickly to accomplish personal/career goals.</p><p id="block-767586cab08944559da65a647bca8c41">Most recently:</p><ul><li id="block-011dd87820b541f5aecf8084b16a755c">how to sell</li><li id="block-4b8745b5876c47d893c46a783a9b8bd5">how to fundraise</li><li id="block-9989bcf871d44f639334364dcd75eed6">how to be wittier</li></ul><p id="block-338f1fd91b3f467e8d267786db568e96">The less obvious thing is a creativity system.</p><p id="block-42576caa39a8496fa27998579d07406d">If creativity is born from autonomy in multiple areas, then one way to become more creative is to become autonomous in many areas!</p><p id="block-a53459bb1f4e46b49639652cea8cdf21">This can be within a single domain, like music. Deeply studying and learning the patterns of hip-hop and country can lead to the creation of a hit fusion like Lil Nas X's Old Town Road.</p><p id="block-33d26ef64bfd4241bf4b50b00e40b85d">But it can also be across domains -- like we see in most startups today. I used to work as a reverse engineer hacking drones at Skysafe, which was a company born of intersecting expertise in information security + radio. Even Dopplio emerged from my understanding of information security exploits, magic tricks, and sales.</p><p id="block-91e726f78d7f4408a4619cfdc22e8c10">As the internet democratizes information and low-hanging fruit is harder to come by, we're seeing that expertise in multiple fields like this is needed to create something novel and valuable (as seen in startups, music).</p><p id="block-4d03755ad2504e19b94345ee5a3dd0c5">"Generalists" these days are more like "repeat specialists".</p><p id="block-d7607d36130e47548a3ab0f0fc60e31c">So if you want to be creative, learn lots of things in-depth, and learn how to learn them fast. Embrace systems to achieve this, and use them to free you up from the basics -- so you can focus on the novel.</p><p id="block-5d2355bf4be04ad0ada7e58f45a8adc8">If you’re interested in more dissections like this you can follow me on <a href="https://x.com/shw1nm" target="_blank" rel="noopener noreferrer">Twitter</a></p><p id="block-268092c36654412da099e07798ebe5e2"><u>Footnotes</u></p><p id="block-6e05ca4f05b94101970d45a23334d3d0">[1] I made both the "memorization" step and "US schools shifting to understanding-based" footnotes point here b/c they touch on something I call the "web of knowledge". Understanding something deeply means fitting into your model of the world and seeing how it connects to other learned patterns. Besides the connections to other subjects, the biggest value in this is ease of recall from having multiple "entryways" via the connected subjects. This is extremely valuable, and I naturally do this during my memorization step, but functionally is just another way to aid recall imo.</p><p id="block-d88538040b004cac87650bb2735d9ef9">[2] Yet America tends to dominate when it comes to creativity, why?</p><p id="block-f56eeb46828e44ec82005801e5020477">My theory is that while eastern students start with a much stronger base from this discipline, many never unlock the exponential gains that come from the joy of learning. Part of this is probably due to more stability in the US, with a more developed safety system, stable (although it may not seem like it) political and financial system relatively, with lots of opportunity -- we can focus on higher Maslow's-hierarchy needs like passion and self actualization.</p><p id="block-a47bc2bdfe74441da9dec316b0a849b0">This is partly why I think we're seeing (and will continue to see) Indians and Asians rise in prominence as kids raised with eastern fundamentals but the US love of learning unlock new levels of creativity. And as generational wealth builds, a branch out from the more traditionally "Asian" fields like STEM and into arts and US politics (we're already seeing this, with Vivek, Nikki Haley, etc.)</p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Building static binaries with Go on Linux (120 pts)]]></title>
            <link>https://eli.thegreenplace.net/2024/building-static-binaries-with-go-on-linux/</link>
            <guid>41114601</guid>
            <pubDate>Tue, 30 Jul 2024 22:07:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://eli.thegreenplace.net/2024/building-static-binaries-with-go-on-linux/">https://eli.thegreenplace.net/2024/building-static-binaries-with-go-on-linux/</a>, See on <a href="https://news.ycombinator.com/item?id=41114601">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                
                <p>One of Go's advantages is being able to produce statically-linked
binaries <a href="#footnote-1" id="footnote-reference-1">[1]</a>. This doesn't mean that Go always produces such binaries by default,
however; in some scenarios it requires extra work to make this happen.
Specifics here are OS-dependent; here we focus on Unix systems.</p>
<div id="basics-hello-world">
<h2>Basics - hello world</h2>
<p>This post goes over a series of experiments: we take simple programs and use
<tt>go build</tt> to produce binaries on a Linux machine. We then examine whether
the produced binary is statically or dynamically linked. The first example is
a simple "hello, world":</p>
<div><pre><span></span><span>package</span><span> </span><span>main</span><span></span>

<span>import</span><span> </span><span>"fmt"</span><span></span>

<span>func</span><span> </span><span>main</span><span>()</span><span> </span><span>{</span><span></span>
<span>  </span><span>fmt</span><span>.</span><span>Println</span><span>(</span><span>"hello world"</span><span>)</span><span></span>
<span>}</span><span></span>
</pre></div>
<p>After building it with <tt>go build</tt>, we get a binary. There are a few ways on
Linux to determine whether a binary is statically or dynamically linked. One
is the <tt>file</tt> tool:</p>
<div><pre><span></span>$ file ./helloworld
helloworld: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=Flm7stIXKLPfvBhTgXmR/PPwdjFUEkc9NCSPRC7io/PofU_qoulSqJ0Ktvgx5g/eQXbAL15zCEIXOBSPZgY, with debug_info, not stripped
</pre></div>
<p>You can see it says "statically linked". Another way is to use <tt>ldd</tt>, which
prints the shared object dependencies of a given binary:</p>
<div><pre><span></span>$ ldd ./helloworld
  not a dynamic executable
</pre></div>
<p>Alternatively, we can also use the ubiquitous <tt>nm</tt> tool, asking it to list the
undefined symbols in a binary (these are symbols the binary expects the dynamic
linker to provide at run-time from shared objects):</p>
<div><pre><span></span>$ nm -u ./helloworld
&lt;empty output&gt;
</pre></div>
<p>All of these tell us that a simple <tt>helloworld</tt> is a statically-linked binary.
Throughout the post I'll mostly be using <tt>ldd</tt> (out of habit), but you can
use any approach you like.</p>
</div>
<div id="dns-and-user-groups">
<h2>DNS and user groups</h2>
<p>There are two pieces of functionality the Go standard library defers to the
system's <tt>libc</tt> on Unix machines, when some conditions are met. When cgo
is enabled (as it often - but not always - is on Unix machines), Go will call
the C library for DNS lookups in the <tt>net</tt> package and for user and group
ID lookups in the <tt>os/user</tt> package.</p>
<p>Let's observe this with an experiment:</p>
<div><pre><span></span><span>package</span><span> </span><span>main</span><span></span>

<span>import</span><span> </span><span>(</span><span></span>
<span>  </span><span>"fmt"</span><span></span>
<span>  </span><span>"net"</span><span></span>
<span>)</span><span></span>

<span>func</span><span> </span><span>main</span><span>()</span><span> </span><span>{</span><span></span>
<span>  </span><span>fmt</span><span>.</span><span>Println</span><span>(</span><span>net</span><span>.</span><span>LookupHost</span><span>(</span><span>"go.dev"</span><span>))</span><span></span>
<span>}</span><span></span>
</pre></div>
<p>If we build this program, we notice it's <em>dynamically</em> linked, expecting to
load a <tt>libc</tt> shared object at run-time:</p>
<div><pre><span></span>$ go build lookuphost.go
$ ldd ./lookuphost
  linux-vdso.so.1 (0x00007b50cb22a000)
  libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007b50cae00000)
  /lib64/ld-linux-x86-64.so.2 (0x00007b50cb22c000)
</pre></div>
<p>This is explained in the <a href="https://pkg.go.dev/net#hdr-Name_Resolution">net package documentation</a> in some detail. The Go
standard library does have a pure Go implementation of this functionality
(although it may lack some advanced features). We can ask the toolchain to use
it in a couple of ways. First, we can set the <tt>netgo</tt> build tag:</p>
<div><pre><span></span>$ go build -tags netgo lookuphost.go
$ ldd ./lookuphost
  not a dynamic executable
</pre></div>
<p>Second, we can disable cgo entirely with the <tt>CGO_ENABLED</tt> env var. This env
var is usually on by default on Unix systems:</p>

<p>If we disable it explicitly for our build, we'll get a static binary again:</p>
<div><pre><span></span>$ CGO_ENABLED=0 go build lookuphost.go
$ ldd ./lookuphost
  not a dynamic executable
</pre></div>
<p>Similarly, some of the functionality of the <tt>os/user</tt> package uses <tt>libc</tt>
by default. Here's an example:</p>
<div><pre><span></span><span>package</span><span> </span><span>main</span><span></span>

<span>import</span><span> </span><span>(</span><span></span>
<span>  </span><span>"encoding/json"</span><span></span>
<span>  </span><span>"log"</span><span></span>
<span>  </span><span>"os"</span><span></span>
<span>  </span><span>"os/user"</span><span></span>
<span>)</span><span></span>

<span>func</span><span> </span><span>main</span><span>()</span><span> </span><span>{</span><span></span>
<span>  </span><span>user</span><span>,</span><span> </span><span>err</span><span> </span><span>:=</span><span> </span><span>user</span><span>.</span><span>Lookup</span><span>(</span><span>"bob"</span><span>)</span><span></span>
<span>  </span><span>if</span><span> </span><span>err</span><span> </span><span>!=</span><span> </span><span>nil</span><span> </span><span>{</span><span></span>
<span>    </span><span>log</span><span>.</span><span>Fatal</span><span>(</span><span>err</span><span>)</span><span></span>
<span>  </span><span>}</span><span></span>

<span>  </span><span>je</span><span> </span><span>:=</span><span> </span><span>json</span><span>.</span><span>NewEncoder</span><span>(</span><span>os</span><span>.</span><span>Stdout</span><span>)</span><span></span>
<span>  </span><span>je</span><span>.</span><span>Encode</span><span>(</span><span>user</span><span>)</span><span></span>
<span>}</span><span></span>
</pre></div>
<p>This produces a dynamically-linked binary:</p>
<div><pre><span></span>$ go build userlookup.go
$ ldd ./userlookup
  linux-vdso.so.1 (0x0000708301084000)
  libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x0000708300e00000)
  /lib64/ld-linux-x86-64.so.2 (0x0000708301086000)
</pre></div>
<p>As with <tt>net</tt>, we can ask the Go toolchain to use the pure Go implementation
of this user lookup functionality. The build tag for this is <tt>osusergo</tt>:</p>
<div><pre><span></span>$ go build -tags osusergo userlookup.go
$ ldd ./userlookup
  not a dynamic executable
</pre></div>
<p>Or, we can disable cgo:</p>
<div><pre><span></span>$ CGO_ENABLED=0 go build userlookup.go
$ ldd ./userlookup
  not a dynamic executable
</pre></div>
</div>
<div id="linking-c-into-our-go-binary">
<h2>Linking C into our go binary</h2>
<p>We've seen that the standard library has some functionality that may require
dynamic linking by default, but this is relatively easy to override. What
happens when we actually have C code as part of our Go program, though?</p>
<p>Go supports C extensions and FFI using <a href="https://pkg.go.dev/cmd/cgo">cgo</a>.
For example:</p>
<div><pre><span></span><span>package</span><span> </span><span>main</span><span></span>

<span>// #include &lt;stdio.h&gt;</span><span></span>
<span>// void helloworld() {</span><span></span>
<span>//   printf("hello, world from C\n");</span><span></span>
<span>// }</span><span></span>
<span>import</span><span> </span><span>"C"</span><span></span>

<span>func</span><span> </span><span>main</span><span>()</span><span> </span><span>{</span><span></span>
<span>  </span><span>C</span><span>.</span><span>helloworld</span><span>()</span><span></span>
<span>}</span><span></span>
</pre></div>
<p>A program built from this source will be dynamically linked, due to cgo:</p>
<div><pre><span></span>$ go build cstdio.go
$ ldd ./cstdio
  linux-vdso.so.1 (0x00007bc6d68e3000)
  libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007bc6d6600000)
  /lib64/ld-linux-x86-64.so.2 (0x00007bc6d68e5000)
</pre></div>
<p>In our C code, <tt>printf</tt> is a call to <tt>libc</tt>; even if we don't explicitly
call into the C runtime in our C code, cgo may do it in the scaffolding code
it generates.</p>
<p>Note that cgo may be involved even if your project has no C code of its own;
several dependencies may bring in cgo. Some popular packages - like the
<a href="https://pkg.go.dev/github.com/mattn/go-sqlite3">go-sqlite3</a> driver - depend
on cgo, and importing them will impose a cgo requirement on a program.</p>
<p>Obviously, building with <tt>CGO_ENABLED=0</tt> is no longer an option.
So what's the recourse?</p>
</div>
<div id="linking-a-libc-statically">
<h2>Linking a <tt>libc</tt> statically</h2>
<p>To recap, once we have C code as part of our Go binary, it's going to be
dynamically linked on Unix, because:</p>
<ol>
<li>The C code calls into <tt>libc</tt> (the C runtime)</li>
<li>The <tt>libc</tt> typically used on Unix systems is <a href="https://en.wikipedia.org/wiki/Glibc">glibc</a></li>
<li>The recommended way to link to <tt>glibc</tt> is dynamically (for various
technical and license-related reasons that are outside the scope of this
post)</li>
<li>Therefore, <tt>go build</tt> produces dynamically-linked Go binaries</li>
</ol>
<p>To change this flow of events, we can interpose at step (2) - use a <em>different</em>
<tt>libc</tt> implementation, one that's statically linked. Luckily, such an
implementation exists and is well used and tested - <a href="https://wiki.musl-libc.org/">musl</a>.</p>
<p>To follow along, start by installing musl. The standard instructions using
<tt>./configure <span>--prefix=&lt;MUSLDIR&gt;</span></tt> and <tt>make</tt> / <tt>make install</tt> work well.
We'll use <tt>$MUSLDIR</tt> to refer to the directory where musl is installed.
musl comes with a <tt>gcc</tt> wrapper that makes it easy to pass all the right
flags. To re-build our <tt>cstdio</tt> example using musl, run:</p>
<div><pre><span></span>$ CC=$MUSLDIR/bin/musl-gcc go build --ldflags '-linkmode external -extldflags "-static"' cstdio.go
$ ldd ./cstdio
  not a dynamic executable
</pre></div>
<p>The <tt>CC</tt> env var tells <tt>go build</tt> which C compiler to use for cgo; the
linker flags instruct it to use an external linker for the final build
(<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.22.0:src/cmd/cgo/doc.go;l=830">read this for the gory details</a>)
and then to perform a static link.</p>
<p>This approach works for more complex use cases as well! I won't paste the code
here, but the <a href="https://github.com/eliben/code-for-blog/tree/main/2024/go-static-linking">sample repository accompanying this post</a> has a file
called <tt><span>use-sqlite.go</span></tt>; it uses the <tt><span>go-sqlite3</span></tt> package. Try
<tt>go build</tt>-ing it normally and observe the dynamically linked binary produced;
next, try to build it with the flags shown above to use musl, and observe
that the produced binary will be statically linked.</p>
<p>Another curious tidbit is that we now have another way to build a statically-linked
<tt>lookuphost</tt> program - by linking it with musl:</p>
<div><pre><span></span>$ CC=$MUSLDIR/bin/musl-gcc go build --ldflags '-linkmode external -extldflags "-static"' lookuphost.go
$ ldd ./lookuphost
  not a dynamic executable
</pre></div>
<p>Since we didn't provide <tt><span>-tags</span> netgo</tt> and didn't disable cgo, the Go toolchain
uses calls into <tt>libc</tt> to implement DNS lookup; however, since these calls
end up in the statically-linked musl, the final binary is statically linked!</p>
</div>
<div id="using-zig-as-our-c-compiler">
<h2>Using Zig as our C compiler</h2>
<p>Another alternative emerged recently to achieve what we want: using the Zig
toolchain. <a href="https://ziglang.org/">Zig</a> is a new systems programming language,
which uses a bundled toolchain approach similar to Go. Its toolchain bundles
together a Zig compiler, C/C++ compiler, linker and <tt>libc</tt> for static linking.
Therefore, Zig can actually be used to link Go binaries statically with C code!</p>
<p><em>Instead</em> of installing musl, we could instead install Zig and use its
<tt><span>x86_64-linux-musl</span></tt> target (adjust the architecture if needed). This is
done by pointing to the <tt>zig</tt> binary as our <tt>CC=</tt> env var; assuming Zig
is installed in <tt>$ZIGDIR</tt>:</p>
<div><pre><span></span>$ CC="$ZIGDIR/zig cc -target x86_64-linux-musl" go build cstdio.go
$ CC="$ZIGDIR/zig cc -target x86_64-linux-musl" go build use-sqlite.go
</pre></div>
<p>These will produce statically-linked Go binaries; the <tt>zig</tt> driver takes
care of setting the right linker flags automatically, so the command-line ends
up being slightly simpler than invoking <tt><span>musl-gcc</span></tt>. Another advantage of Zig
here is that enables cross-compilation of Go programs that include C code <a href="#footnote-2" id="footnote-reference-2">[2]</a>.</p>
<p>I did find some issues with this approach, however; for example, attempting to
link the <tt>lookuphost.go</tt> sample fails with a slew of linker errors.</p>
</div>
<div id="summary">
<h2>Summary</h2>
<p>Making sure Go produces a statically-linked binary on Linux takes a little
bit of effort, but works well overall.</p>
<p>There's a <a href="https://github.com/golang/go/issues/26492">long standing accepted proposal</a>
about adding a <tt><span>-static</span></tt> flag to <tt>go build</tt> that would take care of setting
up all the flags required for a static build. AFAICT, the proposal is just
waiting for someone with enough grit and dedication to implement and test it
in all the interesting scenarios.</p>
</div>
<div id="code">
<h2>Code</h2>
<p>The code for all the experiments described in this post
<a href="https://github.com/eliben/code-for-blog/tree/main/2024/go-static-linking">is available on GitHub</a>.</p>
<hr>
<table id="footnote-1">
<colgroup><col><col></colgroup>
<tbody>
<tr><td><a href="#footnote-reference-1">[1]</a></td><td>A <em>statically-linked</em> binary doesn't have run-time dependencies on
other libraries (typically in the form of shared objects), not even
the C runtime library (<tt>libc</tt>). I wrote much more about this topic
<a href="https://eli.thegreenplace.net/2012/08/13/how-statically-linked-programs-run-on-linux">in the past</a>.</td></tr>
</tbody>
</table>
<table id="footnote-2">
<colgroup><col><col></colgroup>
<tbody>
<tr><td><a href="#footnote-reference-2">[2]</a></td><td>Go is well-known for its cross-compilation capabilities, but it
depends on the C toolchain to compile C code. Therefore, when cgo is
involved, cross-compilation is challenging. Zig can help with this
because <em>its</em> toolchain supports cross compilation for Zig <em>and</em> C! It
does so by bundling LLVM with a bunch of targets linked in.</td></tr>
</tbody>
</table>
</div>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Troubleshooting: Terminal Lag (149 pts)]]></title>
            <link>https://lock.cmpxchg8b.com/slowterm.html</link>
            <guid>41114569</guid>
            <pubDate>Tue, 30 Jul 2024 22:04:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lock.cmpxchg8b.com/slowterm.html">https://lock.cmpxchg8b.com/slowterm.html</a>, See on <a href="https://news.ycombinator.com/item?id=41114569">Hacker News</a></p>
<div id="readability-page-1" class="page">

<nav id="TOC" role="doc-toc">
<ul>
<li><a href="#background">Background</a></li>
<li><a href="#window-effects">Window Effects</a></li>
<li><a href="#profiling">Profiling</a>
<ul>
<li><a href="#features">Features</a></li>
</ul></li>
<li><a href="#caching">Caching</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
</nav>
<p>I think I should blog more about random troubleshooting sessions, if nothing else it will remind me what steps I took when it inevitably happens again!</p>
<p>Okay, here is the first one – why is my <code>xterm</code> opening so slowly?</p>
<section id="background">
<h2>Background</h2>
<p>I have two similarly specced machines at my desk – my primary workstation running Fedora Linux, and a Windows 11 machine. They share the same monitor and input devices, and I switch between them with an iogear KVM.</p>
<p>I do the bulk of my work in either a browser or a terminal. This is true even on Windows, where I rely heavily on <abbr title="Windows Subsystem for Linux"> WSL</abbr>.</p>
<p>This works well for me, and I’m happy enough with the setup.</p>
<section id="issue">
<h4>Issue</h4>
<p>I have the shortcut <kbd><abbr title="Windows Key">Super</abbr></kbd>+<kbd>1</kbd> bound to <code>xterm</code> on both machines, and I probably use this hundreds of times per day.</p>
<p>Here is how that looks on Fedora:</p>
<blockquote>
<figure>
<img src="https://lock.cmpxchg8b.com/img/fedora_terminal_open.gif" alt=""><figcaption>Fedora Terminal</figcaption>
</figure>
</blockquote>
<p>It takes about <abbr title="9 frames @ 30fps">300ms</abbr> from key activation to a terminal being ready. This is fine, I’ve never noticed any problem.</p>
<p>However, let’s compare that to Windows:</p>
<blockquote>
<figure>
<img src="https://lock.cmpxchg8b.com/img/windows_terminal_open.gif" alt=""><figcaption>Windows Terminal</figcaption>
</figure>
</blockquote>
<p>That’s about <abbr title="48 frames @ 30fps">1600ms</abbr> before I can type, over 5 times slower! This <em>is</em> slow enough that it bothers me, and I use this shortcut so often that I want to solve it.</p>
<p>I don’t think many people care about <code>xterm</code> performance on Windows, so I guess that means it’s up to me to solve this 🙂</p>
</section>
</section>
<section id="window-effects">
<h2>Window Effects</h2>
<p>Hey, wait a minute… <big><em><strong>ENHANCE!</strong></em></big> 👀</p>
<blockquote>
<figure>
<img src="https://lock.cmpxchg8b.com/img/windows_terminal_fade.gif" alt=""><figcaption>Windows Fading Effect</figcaption>
</figure>
</blockquote>
<p>Why does the window fade in like that? It looks like the Window is ready when the effect starts, but I can’t interact with it until it completes. If I count those frames, this animation must be costing me ~200ms! 🤬</p>
<p>I always disable anything like animation or compositing effects, so I’m confused where this is coming from.</p>
<blockquote>
<figure>
<img src="https://lock.cmpxchg8b.com/img/windows_performance.png" alt=""><figcaption>Windows Performance Settings</figcaption>
</figure>
</blockquote>
<p>I tested with some native windows programs like <code>notepad</code> and <code>calc</code> – they just appear instantly… so what is causing that?</p>
<p>I experimented with it a bit, I can see other windows behind it as it fades in, so I think something must be changing the opacity. Searching msdn, it looks like the function for that is <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setlayeredwindowattributes"><code>SetLayeredWindowAttributes()</code></a>.</p>
<p>Could something be calling that, is my X server betraying me?</p>
<pre><code>$ dumpbin /imports X410.exe  | grep SetLayeredWindowAttributes
                         33A SetLayeredWindowAttributes</code></pre>
<p>This looks like the culprit!! I’m using a server called <a href="https://x410.dev/">X410</a>, it seems like it’s adding it’s own animation effects, and doesn’t have any way to disable it. I’m reluctant to switch to an alternative – that could just replace this issue with a different issue to troubleshoot.</p>
<p>Is it possible I can just stop it from doing that with a debugger?</p>
<pre><code>$ cdb -p 6624
(19e0.2ad0): Break instruction exception - code 80000003 (first chance)
ntdll!DbgBreakPoint:
00007ff9`1f9b3c90 cc              int     3
0:014&gt; eb win32u!NtUserSetLayeredWindowAttributes c3
0:014&gt; .detach
Detached
NoTarget&gt; q
quit:</code></pre>
<p>Ah-ha, that actually worked!!!</p>
<p>I’ve added that <code>cdb</code> command into my xinit initialization, and it looks a lot snappier. That saved nearly 300ms, so we’re down to just 4 times slower than Fedora!</p>
</section>
<section id="profiling">
<h2>Profiling</h2>
<p>Okay, let’s try get some real numbers. I like the tool <a href="https://github.com/sharkdp/hyperfine">hyperfine</a> for this, here are the initial results:</p>
<blockquote>
<figure>
<img src="https://lock.cmpxchg8b.com/img/hyperfine_windows.png" alt=""><figcaption>Hyperfine Windows</figcaption>
</figure>
</blockquote>
<p>If we run it under optimal conditions, it takes about 900ms on Windows, and about 100ms on Fedora.</p>
<p>Now that I can reproduce the delay reliably, I can start exploring some theories…</p>
<section id="filesystem">
<h4>Filesystem</h4>
<p>My first thought is that filesystem performance under WSL can be very slow, could that explain the difference?</p>
<pre><code>taviso@WORKSTATION:~$ strace -wc -efile xterm -e true
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 43.93    0.014870          56       261        56 openat
 23.79    0.008053          31       257        33 access
 20.48    0.006932          32       211        12 newfstatat
  7.07    0.002394          23       100        54 readlink
  4.72    0.001596        1596         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00    0.033845          40       830       155 total</code></pre>
<p>Nope, it’s actually a bit faster on Windows! If I browse the logs, it looks related to fonts, and I do have fewer fonts installed on Windows. I suspect that causes <code>fontconfig</code> to query less files on initialization.</p>
<p>Whatever the reason, I concluded it wasn’t a big proportion of startup time, so it doesn’t seem worth worrying about.</p>
</section>
<section id="x-server">
<h4>X Server</h4>
<p>The issue must be the X server, how fast is a very simple X client?</p>
<pre><code>taviso@fedora:~$ hyperfine xdpyinfo
Benchmark 1: xdpyinfo
  Time (mean ± σ):       4.6 ms ±   0.8 ms    [User: 1.9 ms, System: 1.6 ms]
  Range (min … max):     3.1 ms …   9.4 ms    317 runs
</code></pre>
<p>That <em>does</em> run slower on Windows, but not significantly slower – perhaps I actually need to create a window to see a difference?</p>
<pre><code>taviso@fedora:~$ x11perf -repeat 1 -subs 8 -popup
    5600000 reps @   0.0010 msec (1040000.0/sec): Hide/expose window via popup (8 kids)
</code></pre>
<p>That is also slower on Windows – this is understandable, it has to translate from X11 to win32 – but not so slow that it adequately explains the problem alone.</p>
</section>
<section id="freetype">
<h4>FreeType</h4>
<p>Could it be a FreeType or FontConfig issue?</p>
<pre><code>taviso@WORKSTATION:~$ ftbench -p consola.ttf
executing tests:
  Load                           2.491 us/op     809010 done
  Load_Advances (Normal)         2.437 us/op     827190 done
  Load_Advances (Fast)           0.022 us/op   88575990 done
  Load_Advances (Unscaled)       0.013 us/op  147448890 done
  Render                         2.039 us/op     390870 done
  Get_Glyph                      0.921 us/op     509040 done
  Get_Char_Index                 0.018 us/op  111551968 done
  Iterate CMap                  21.539 us/op      88503 done
  New_Face                       6.271 us/op     284029 done
  Embolden                       2.491 us/op     357540 done
  Stroke                        24.663 us/op      69690 done
  Get_BBox                       0.865 us/op     487830 done
  Get_CBox                       0.679 us/op     506010 done</code></pre>
<p>Loading fonts is slightly slower, but the other numbers seem fine, and it’s not <em>that</em> much slower. I don’t think it’s this.</p>
</section>
<section id="features">
<h3>Features</h3>
<p>Maybe I can get some clues from ltrace?</p>
<pre><code>$ ltrace -c xterm -e true
% time     seconds  usecs/call     calls      function
------ ----------- ----------- --------- --------------------
 26.74    1.977389      988694         2 XtRealizeWidget
 22.18    1.640132       14139       116 XtSetValues
 13.39    0.989966      197993         5 XtVaCreateManagedWidget
  6.42    0.474410         200      2361 strlen
  5.51    0.407617      203808         2 read
  4.21    0.311086         197      1572 FcCharSetHasChar
  2.92    0.215975        2571        84 XtCreateManagedWidget
  2.80    0.207397       69132         3 XtVaCreatePopupShell
  2.39    0.176458         218       808 XftTextExtents32
  1.51    0.111306      111306         1 XpmReadFileToPixmap
  1.48    0.109486      109486         1 XtOpenApplication
  1.44    0.106786         203       524 malloc</code></pre>
<p>This <code>XtRealizeWidget</code> call does seem slow, and I don’t see that on Fedora, what is calling that?</p>
<pre><code>$ gdb --args ./xterm -e true
Reading symbols from ./xterm...
(gdb) b XtRealizeWidget
Breakpoint 1 at 0x2db20
(gdb) r
Breakpoint 1, 0x00007fffff43d940 in XtRealizeWidget () from /lib/x86_64-linux-gnu/libXt.so.6
(gdb) bt
#0  0x00007fffff43d940 in XtRealizeWidget () from /lib/x86_64-linux-gnu/libXt.so.6
...
#4  0x00007fffff44c4f6 in XtSetValues () from /lib/x86_64-linux-gnu/libXt.so.6
#5  0x0000000008086683 in UpdateMenuItem (menu=0x811c5c0 &lt;mainMenuEntries&gt;, which=0, val=1)
    at ./menu.c:1026
#6  0x000000000808a763 in update_toolbar () at ./menu.c:3366</code></pre>
<p>Ah-ha – it’s the toolbar feature. It’s disabled at compile time on Fedora, but I quite like it and enable it on Windows.</p>
<p>If I disable that, startup is a little faster, I wonder if there are any other features that are slowing down initialization…?</p>
<section id="parameter-scanning">
<h4>Parameter Scanning</h4>
<p>The <code>hyperfine</code> utility has a feature called <em>parameter scan</em>, where it it will try a bunch of settings for you and tell you which one is fastest.</p>
<p>Let’s ask XTerm what features are available, and toggle each one on and off.</p>
<pre><code>$ xterm -report-xres -e true
activeIcon              : default
allowBoldFonts          : true
allowC1Printable        : false
allowColorOps           : true
allowFontOps            : false
allowMouseOps           : true
...</code></pre>
<p>I’ll start by extracting all the settings that are booleans.</p>
<pre><code>$ xterm -report-xres -e true | grep -Po '^\S+(?=\s+: (true|false))' | tr '\n' ','
allowBoldFonts,allowColorOps,allowMouseOps...</code></pre>
<blockquote>
<p>Note: <code>xterm</code> has a <em>lot</em> of features, I’m truncating the list for brevity!</p>
</blockquote>
<p>Now we can give each of those to <code>hyperfine</code>, and let it figure out which settings have the most noticable effect.</p>
<p>That took about 20 minutes to run, and reports:</p>
<pre><code>$ hyperfine --parameter-list res allowBoldFonts,allow... \
            --parameter-list bool true,false \
            "xterm -xrm 'XTerm*{res}: {bool}' -e true"
...
Benchmark 240: xterm -xrm 'XTerm*xftTrackMemUsage: false' -e true
  Time (mean ± σ):     140.1 ms ±   7.4 ms    [User: 30.8 ms, System: 23.4 ms]
  Range (min … max):   129.2 ms … 153.4 ms    21 runs
 
Summary
  xterm -xrm 'XTerm*tekInhibit: true' -e true ran
    1.01 ± 0.08 times faster than xterm -xrm 'XTerm*allowSendEvents: false' -e true
    ...</code></pre>
<p>This helped a little, I found a combination of options that saved around 200ms total. One example was <code>tekInhibit</code>, which disables the Tektronix emulation. That’s usually used as a graphing mode – it’s actually <a href="https://web.archive.org/web/20100305175059/http://dim13.org/tek/">pretty cool</a>.</p>
<p>Still, it isn’t a big enough difference, and this is as far as I was able to get through tweaking settings.</p>
<p>I’m starting to think that this is just death by a thousand cuts, everything just has some small overhead on Windows and it adds up…</p>
</section>
</section>
</section>
<section id="caching">
<h2>Caching</h2>
<p>There’s a simple generic solution to slow startup performance: server mode.</p>
<p>The idea is to cache a few processes in the background, then all the slow stuff will already be done, ready for you to start working immediately.</p>
<p>XTerm doesn’t have this feature natively, but it’s not complicated, I can add it.</p>
<p>To do this, I will use <em>deferred mapping</em> – that just means that a program is running, but the window is not visible yet.</p>
<p>I tried a few solutions and found one that works well, an <code>LD_PRELOAD</code> library. All it does is intercept any toplevel <a href="https://linux.die.net/man/3/xmapwindow"><code>XMapWindow()</code></a> calls, then pause execution until it receives a signal.</p>
<p>It’s a bit hacky, but my code is <a href="https://github.com/taviso/defermap">here</a>, if you’re interested.</p>
<p>To use it, you need something to manage the cache for you in the background, <code>xargs</code> will work!</p>
<pre><code>$ xargs --null --arg-file=/dev/zero --max-procs=3 --replace -- \
     env LD_PRELOAD=defermap.so xterm -display :0 [PARAMS...]</code></pre>
<p>This will keep three xterms running in the background.</p>
<blockquote>
<p>Note: If you often rapidly start terminals in quick succession, increase <code>max-procs</code>.</p>
</blockquote>
<p>When you want a new terminal, instead of running <code>xterm</code> as you normally would, do this instead:</p>
<pre><code>$ pkill --oldest --signal SIGUSR1 xtermserver</code></pre>
<p>A terminal should appear near-instantly. You can now execute that instead of <code>xterm</code>, and startup performance should be solved.</p>
</section>
<section id="conclusion">
<h2>Conclusion</h2>
<p>This whole process took a while! Now I need to adjust my shortcuts to run <code>pkill</code> instead of <code>xterm</code>, and I can compare the results.</p>
<blockquote>
<figure>
<img src="https://lock.cmpxchg8b.com/img/windows_terminal_fixed.gif" alt=""><figcaption>Windows Terminal</figcaption>
</figure>
</blockquote>
<p>Counting the frames in that video, it’s down to about <abbr title="11 frames @
30fps">366ms</abbr>, just 60ms slower than Fedora, this is totally acceptable!</p>
<p>I’ve been using this configuration for a few days, so far it’s working great. I haven’t noticed any issues running it this way.</p>
<p>I highly doubt anyone else will find this useful, who else is using XTerm on Windows? 😆</p>
<p>Nevertheless, if you have a better solution, or can think of something else I can try, let me know!</p>
</section>



</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fake Job Interviews Are Securities Fraud (264 pts)]]></title>
            <link>https://www.bloomberg.com/opinion/articles/2024-07-30/fake-job-interviews-are-securities-fraud</link>
            <guid>41112855</guid>
            <pubDate>Tue, 30 Jul 2024 18:55:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/opinion/articles/2024-07-30/fake-job-interviews-are-securities-fraud">https://www.bloomberg.com/opinion/articles/2024-07-30/fake-job-interviews-are-securities-fraud</a>, See on <a href="https://news.ycombinator.com/item?id=41112855">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Porffor: A from-scratch ahead-of-time JS engine (370 pts)]]></title>
            <link>https://porffor.dev/</link>
            <guid>41112854</guid>
            <pubDate>Tue, 30 Jul 2024 18:55:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://porffor.dev/">https://porffor.dev/</a>, See on <a href="https://news.ycombinator.com/item?id=41112854">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
    <h2>A from-scratch experimental ahead-of-time JS engine</h2>
    <p>Porffor is a unique JS engine/compiler/runtime, compiling JS code to WebAssembly or native ahead-of-time.<br>It is seriously limited for now; intended for research, not serious use!</p>

    <section>
      <div>
        <h2>Wasm compilation</h2>
        <p>Porffor's WebAssembly output is much faster and smaller compared to existing JS -&gt; Wasm projects. This is because Porffor compiles JS AOT instead of bundling an interpreter.</p>
        <ul>
          <li>Wasm size: <b>32x smaller</b> than Javy (~1.3MB -&gt; ~40KB)</li>
          <li>Wasm perf: <b>18x faster</b> than Javy (~70m -&gt; ~4m)</li>
        </ul>
      </div>

      <div>
        <h2>Native compilation</h2>
        <p>Due to compiling JS ahead-of-time, Porffor can compile to real native binaries without just packaging a runtime like existing solutions. This leads to:</p>
        <ul>
          <li>Binary sizes <b>over 1000x smaller</b> (~90MB -&gt; &lt;50KB)</li>
          <li>Memory usage <b>over 40x less</b> (~50MB -&gt; ~1MB)</li>
          <li>Performance <b>up to 3x faster</b></li>
        </ul>
      </div>

      <div>
        <h2>Plus...</h2>
        <p><b>Porffor is safe</b> as it compiles to Wasm (and then native). It is also written in a memory safe language (JS).</p>
        <p><b>Porffor is written from the ground-up</b> with AOT in mind instead of being based on any existing JS engine. The only dependency is a JS parser.</p>
        <p><b>Porffor supports TypeScript input</b>, no clunky transpiler step needed: just feed it a TS file.</p>
      </div>
    </section>

    <!-- <section class="bars">
      <div>
        <span>Porffor</span>
        <div style="--time: 19; --color: var(--accent-light)"><div></div></div>
        <span>19s</span>
      </div>

      <div>
        <span>Bun</span>
        <div style="--time: 43; --color: #fbf0df"><div></div></div>
        <span>43s</span>
      </div>

      <div>
        <span>Node</span>
        <div style="--time: 67; --color: #68bc4a"><div></div></div>
        <span>67s</span>
      </div>

      <p>
        Execution time for a benchmark (running a BF interpreter running <code>mandelbrot.bf</code>). Porffor ran using native compilation.
      </p>
    </section> -->

    <h2>Playground <span>You can try Porffor here online or locally with <code>npm i -g porffor@latest &amp;&amp; porf</code></span></h2>
    
    <!-- Valtype <select id="valtype_dropdown"></select> -->
    <!-- <span title="Optimization level">-O</span> <select id="opt_dropdown"></select> -->
    <span title="JS parser to use">Parser</span> 
    <span title="Experimental!">Target</span> 
    
    
    
    

    <h2>Test262 <span id="test262_percent"></span> <span><a href="https://github.com/tc39/test262">Test262</a> is the official ECMAScript conformance test suite. Porffor is ran against it each commit to track conformance progress!</span></h2>
    <div id="test262">
        
        <div id="graph_time">
          <p>3 months</p>
          <p>6 months</p>
          <p>all-time</p>
        </div>
        <svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" id="svg"></svg>
      </div>
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Federal regulator says Amazon can be held responsible for faulty goods (125 pts)]]></title>
            <link>https://www.cnbc.com/2024/07/30/cpsc-says-amazon-responsible-for-faulty-goods-sold-on-its-marketplace.html</link>
            <guid>41111317</guid>
            <pubDate>Tue, 30 Jul 2024 16:53:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnbc.com/2024/07/30/cpsc-says-amazon-responsible-for-faulty-goods-sold-on-its-marketplace.html">https://www.cnbc.com/2024/07/30/cpsc-says-amazon-responsible-for-faulty-goods-sold-on-its-marketplace.html</a>, See on <a href="https://news.ycombinator.com/item?id=41111317">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="RegularArticle-ArticleBody-5" data-module="ArticleBody" data-test="articleBody-2" data-analytics="RegularArticle-articleBody-5-2"><div id="ArticleBody-InlineImage-107157826" data-test="InlineImage"><p>Packages move along a conveyor belt at an Amazon Fulfillment center on Cyber Monday in Robbinsville, New Jersey, on Nov. 28, 2022.</p><p>Stephanie Keith | Bloomberg | Getty Images</p></div><div><p>Federal regulators <a href="https://www.cpsc.gov/Newsroom/News-Releases/2024/CPSC-Finds-Amazon-Responsible-Under-Federal-Safety-Law-for-Hazardous-Products-Sold-by-Third-Party-Sellers-on-Amazon-com" target="_blank">have determined</a> that <span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-2"><a href="https://www.cnbc.com/quotes/AMZN/">Amazon</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> can be held responsible for defective goods sold by third-party merchants on its online marketplace, rejecting the company's position that it's merely an intermediary between consumers and sellers.</p><p>In <a href="https://www.cpsc.gov/s3fs-public/pdfs/recall/lawsuits/abc/142%20-%20In%20the%20Matter%20of%20Amazon.com%20Inc.%20Decision%20and%20Order.pdf?" target="_blank">a landmark order</a> released Tuesday, the U.S. Consumer Product Safety Commission said the agency unanimously agreed Amazon "fits squarely" within the definition of a distributor of goods, "and therefore bears legal responsibility for their recall."</p><p>As part of the agency's decision, Amazon is required to develop a plan to notify purchasers and the public about the product hazards, as well as offer shoppers refunds or replacements for the affected products.</p><p>Amazon's marketplace, which hosts millions of third-party sellers, now accounts for&nbsp;<a href="https://blog.aboutamazon.com/policy/statement-by-jeff-bezos-to-the-u-s-house-committee-on-the-judiciary" target="_blank">approximately 60%</a>&nbsp;of the company's e-commerce sales. While the marketplace has helped Amazon bring in record revenue, it has also proven to host&nbsp;<a href="https://www.cnbc.com/2016/05/25/amazon-counterfeiters-wreak-havoc-on-artists-and-small-businesses.html">counterfeit</a>,&nbsp;<a href="https://www.cnbc.com/2019/08/29/senators-ask-jeff-bezos-to-crack-down-on-unsafe-products-on-amazon.html">unsafe</a>&nbsp;and even&nbsp;<a href="https://www.cnbc.com/2019/10/20/amazon-is-shipping-expired-baby-formula-and-other-out-of-date-foods.html">expired goods</a>. The company has previously said it invests hundreds of millions of dollars per year to ensure products sold are safe and compliant.</p><p>The decision addresses a thorny issue that's been debated for years. In numerous lawsuits, Amazon has maintained it just serves as the conduit between buyers and sellers on its marketplace and that it's not involved in the sourcing or distribution of products sold by third-party sellers, removing it from liability. That has been a successful defense for Amazon in the past, including&nbsp;<a href="https://www.cnbc.com/2018/06/02/amazon-not-liable-for-exploding-hoverboard-marketplace-argument-wins.html">in a 2018 case</a>&nbsp;concerning the purchase of a faulty hoverboard that exploded and burned down an Amazon shopper's house in Tennessee.&nbsp;In other cases, <a href="https://www.cnbc.com/2020/08/13/amazon-can-be-held-liable-for-faulty-goods-court-rules.html">federal courts</a> and <a href="https://www.cnbc.com/2020/08/31/controversial-ca-consumer-bill-will-not-advance-in-its-present-form.html">legislators</a> have said the e-commerce giant should be held liable.</p><p>In 2021, the CPSC <a href="https://www.cnbc.com/2021/07/14/us-regulator-sues-amazon-demands-recall-of-hazardous-products.html">sued</a> Amazon to force it to recall hundreds of thousands of products that it deemed hazardous. At issue were 418,818 goods sold through Amazon, including faulty carbon monoxide detectors, hairdryers without electrocution protection and children's sleepwear that posed a burn risk.</p><p>Amazon argued in its response to the agency complaint that it should be characterized as a third-party logistics provider, saying it only receives and transports the products sold through its site.</p><p>Still, Amazon removed all the products flagged by the CPSC and prohibited merchants from selling them on its marketplace. The company informed shoppers who purchased the items of "potential safety issues," told them to destroy the items and offered a credit.</p><p>The CPSC called these actions "inadequate," saying the company should've offered refunds to incentivize consumers to destroy or return the product.</p><p>In Tuesday's ruling, the agency said an administrative law judge dismissed Amazon's argument that it should be classified as a third-party logistics provider. The judge pointed to Amazon's Fulfilled by Amazon service, where sellers ship inventory into the company's warehouses, and those products are stored until they're purchased.</p><p>This program gives Amazon "far-reaching control" over the products sold on its platform, the judge said.</p><p>"Amazon cannot sidestep its obligations under the [Consumer Product Safety Act] simply because some portion of its extensive services involve logistics," the decision states. "Amazon must therefore comply with the CPSA to protect consumers from injury."</p><p>An Amazon spokesperson said in a statement that the company is "disappointed" by the CPSC's decision and plans to appeal. They added that Amazon stands behind the safety of every product in its store, regardless of whether it's sold by the company our a third-party seller. </p><p>If a product is recalled, Amazon removes them from its platform and informs shoppers of any product safety information, the spokesperson said. In 2021, the company <a href="https://www.cnbc.com/2021/08/10/amazon-lets-consumers-file-complaints-for-faulty-goods-from-3p-sellers.html">updated its returns policy</a> to allow shoppers to contact Amazon directly with any complaints of faulty goods, rather than communicating with the third-party merchant. </p></div><div id="RegularArticle-RelatedContent-1"><h2>Don’t miss these insights from CNBC PRO</h2><div><ul><li><a href="https://www.cnbc.com/2024/07/26/nvidia-may-face-a-massive-technical-sell-off-chart-analyst-warns.html">Nvidia could be on the verge of a massive technical sell-off, chart analyst warns</a></li><li><a href="https://www.cnbc.com/2024/07/25/tom-lee-says-the-rotation-out-of-large-caps-is-just-beginning-small-caps-to-surge-15percent-in-august.html">Tom Lee says the rotation out of large caps is just beginning, small caps to surge 15% in August</a></li><li><a href="https://www.cnbc.com/2024/07/24/5-attractively-valued-growth-stocks-to-buy-hold-for-next-decade-pros5-attractively-valued-growth-stocks-to-buy-hold-for-next-decade-pros.html">Buy and hold these 5 attractively valued growth stocks for the next decade, the pros say</a></li><li><a href="https://www.cnbc.com/2024/07/23/magnificent-7-alternatives-buy-these-stocks-instead-wealth-manager-says.html">Avoid the ‘Magnificent 7’ and buy these lesser-known stocks instead, wealth manager says</a></li></ul></div></div><div id="Placeholder-ArticleBody-Video-107131531" data-test="VideoPlaceHolder" role="region" tabindex="0" data-vilynx-id="7000267761" aria-labelledby="Placeholder-ArticleBody-Video-107131531"><p><img src="https://image.cnbcfm.com/api/v1/image/107132294-1665466235480-bags.jpg?v=1665579541&amp;w=750&amp;h=422&amp;vtcrop=y" alt="How Amazon private labels work, from AmazonBasics to its 100+ other owned brands"><span></span><span></span></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta to pay Texas $1.4B for using facial recognition without users' permission (361 pts)]]></title>
            <link>https://www.texastribune.org/2024/07/30/texas-meta-facebook-biometric-data-settlement/</link>
            <guid>41111145</guid>
            <pubDate>Tue, 30 Jul 2024 16:41:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.texastribune.org/2024/07/30/texas-meta-facebook-biometric-data-settlement/">https://www.texastribune.org/2024/07/30/texas-meta-facebook-biometric-data-settlement/</a>, See on <a href="https://news.ycombinator.com/item?id=41111145">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
    
      


    
      <p><em><a href="https://www.texastribune.org/newsletters/the-brief/?utm_medium=website&amp;utm_source=trib-ads-owned&amp;utm_campaign=trib-marketing&amp;utm_term=inline-CTA-brief">Sign up for The Brief</a>, The Texas Tribune’s daily newsletter that keeps readers up to speed on the most essential Texas news.</em>
</p>
<hr>
    
      <p>Facebook’s parent company Meta will pay Texas $1.4 billion to settle a lawsuit that accused the company of using personal biometric data without users’ authorization.</p>

    
      <p>The 2022 lawsuit, filed by Texas Attorney General Ken Paxton in state court, alleged that Meta had been using facial recognition software on photos uploaded to Facebook without Texans’ consent.</p>

    
      <p>Paxton’s office said this is the largest settlement ever obtained by a single state and the largest related to privacy ever secured by a state attorney general. The settlement will be paid over five years. The attorney general’s office did not say whether the money from the settlement would go into the state’s general fund or if it would be distributed in some other way.</p>

    
      <p>“This historic settlement demonstrates our commitment to standing up to the world’s biggest technology companies and holding them accountable for breaking the law and violating Texans’ privacy rights. Any abuse of Texans’ sensitive data will be met with the full force of the law,” Paxton said in a statement.</p>

    
      


    
      <p>The settlement, announced Tuesday, does not act as an admission of guilt and Meta maintains no wrongdoing.</p>

    
      <p>This was the first lawsuit Paxton’s office argued under a 2009 state law that protects Texans’ biometric data, like fingerprints and facial scans. The law requires businesses to inform and get consent from individuals before collecting such data. It also limits sharing this data, except in certain cases like helping law enforcement or completing financial transactions. Businesses must protect this data and destroy it within a year after it's no longer needed.</p>

    
      <p>In 2011, Meta introduced a feature known as Tag Suggestions to make it easier for users to tag people in their photos. According to Paxton’s office, the feature was turned on by default and ran facial recognition on users’ photos, automatically capturing data protected by the 2009 law. That system was discontinued in 2021, with Meta saying it deleted over 1 billion people’s individual facial recognition data.</p>

    
      <p>As part of the settlement, Meta must notify the attorney general’s office of anticipated or ongoing activities that may fall under the state’s biometric data laws. If Texas objects, the parties have 60 days to attempt to resolve the issue.</p>

    
      


    
      <p>Meta officials said the settlement will make it easier for the company to discuss the implications and requirements of the state’s biometric data laws with the attorney general’s office, adding that data protection and privacy are core priorities for the firm.</p>

    
      <p>“We are pleased to resolve this matter, and look forward to exploring future opportunities to deepen our business investments in Texas, including potentially developing data centers,” a Meta spokesperson said Tuesday.</p>

    
      <p>Meta has about a month to pay the first installment of $500 million to the state. Subsequent installments of $225 million each will be paid annually from 2025 to 2028.</p>

    
      <p><i>Disclosure: Facebook has been a financial supporter of The Texas Tribune, a nonprofit, nonpartisan news organization that is funded in part by donations from members, foundations and corporate sponsors. Financial supporters play no role in the Tribune's journalism. Find a complete <a href="https://www.texastribune.org/support-us/corporate-sponsors/">list of them here</a>.</i></p>

    
      


    
      <hr>

    
      <p><em>The full program is now LIVE for the <a href="https://trib.it/X3GApE" rel="noopener" target="_blank"><strong>2024 Texas Tribune Festival</strong></a>, happening Sept. 5–7 in downtown Austin. Explore the program featuring more than 100 unforgettable conversations on topics covering education, the economy, Texas and national politics, criminal justice, the border, the 2024 elections and so much more. <a href="https://trib.it/dKMrcr" rel="noopener" target="_blank"><strong>See the full program.</strong></a></em></p>

    
  
</div><p><strong>
    <a href="https://www.texastribune.org/corrections/"><em>Correction, <time datetime="2024-07-30T12:03:38.033540">July 30, 2024 at 12:03 p.m.</time></em></a>:
</strong>

An earlier version of this story said the Texas attorney general's office announced the settlement on Monday. It was on Tuesday.</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Swift Homomorphic Encryption (264 pts)]]></title>
            <link>https://www.swift.org/blog/announcing-swift-homomorphic-encryption/</link>
            <guid>41111129</guid>
            <pubDate>Tue, 30 Jul 2024 16:40:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.swift.org/blog/announcing-swift-homomorphic-encryption/">https://www.swift.org/blog/announcing-swift-homomorphic-encryption/</a>, See on <a href="https://news.ycombinator.com/item?id=41111129">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main">
<article>
  <header>
    

    <time pubdate="" datetime="2024-07-30T06:00:00-04:00">July 30, 2024</time>
    
  </header>

  <p>We’re excited to announce a new open source Swift package for homomorphic
encryption in Swift:
<a href="https://github.com/apple/swift-homomorphic-encryption">swift-homomorphic-encryption</a>.</p>

<p>Homomorphic encryption (HE) is a cryptographic technique that enables
computation on encrypted data <em>without</em> revealing the underlying unencrypted
data to the operating process. It provides a means for clients to send encrypted
data to a server, which operates on that encrypted data and returns a result
that the client can decrypt. During the execution of the request, the server
itself never decrypts the original data or even has access to the decryption
key. Such an approach presents new opportunities for cloud services to operate
while protecting the privacy and security of a user’s data, which is obviously
highly attractive for many scenarios.</p>

<p>At Apple, we’re using homomorphic encryption in our own work; we’re therefore
delighted to share this Swift implementation in the community for others to use
and contribute to.</p>

<p>One example of how we’re using this implementation in iOS 18, is the new <a href="https://developer.apple.com/documentation/sms_and_call_reporting/getting_up-to-date_calling_and_blocking_information_for_your_app">Live
Caller ID
Lookup</a>
feature, which provides caller ID and spam blocking services. Live Caller ID
Lookup uses homomorphic encryption to send an encrypted query to a server that
can provide information about a phone number without the server knowing the
specific phone number in the request. To demonstrate this, we are also sharing
<a href="https://github.com/apple/live-caller-id-lookup-example">live-caller-id-lookup-example</a>,
which provides a functional example backend to test the Live Caller ID Lookup
feature using homomorphic encryption.</p>

<p>These two packages take full advantage of features such as:</p>
<ul>
  <li><a href="https://www.swift.org/documentation/server/">Swift on Server</a>, including the Hummingbird HTTP framework and cross-platform support</li>
  <li>easy benchmarking with the <a href="https://github.com/ordo-one/package-benchmark">Benchmark</a> library</li>
  <li>performant low-level cryptography primitives in <a href="https://github.com/apple/swift-crypto">Swift Crypto</a>.</li>
</ul>


<p>Live Caller ID Lookup relies on <em>Private Information Retrieval (PIR)</em>, a form of private key-value database lookup.
In the PIR setting, a client has a private keyword (such as a phone number) and wants to retrieve the associated value from a server.
Because the keyword is private, the client wants to perform this lookup without the server learning the keyword.</p>

<p>A trivial implementation of PIR is to have the server send the entire database to the client for local processing.
While this does prevent the server from knowing what queries are being made, it is only feasible for small databases with infrequent updates.</p>

<p>In contrast, our PIR implementation, which relies on homomorphic encryption, only needs to sync a small amount of database metadata with the client.
This metadata changes infrequently, which allows efficient handling of very large databases with a high volume of updates.</p>


<p>As mentioned above, homomorphic encryption enables computation on encrypted data without decryption or access to the decryption key.</p>

<p>A typical workflow for homomorphic encryption might be as follows:</p>
<ul>
  <li>The client encrypts its sensitive data and sends the result to the server.</li>
  <li>The server performs computation on the ciphertext (perhaps incorporating its
own plaintext inputs), without learning what any ciphertext decrypts to.</li>
  <li>The server sends the resulting ciphertext response to the client.</li>
  <li>The client decrypts the resulting response.</li>
</ul>

<p>The Swift implementation of homomorphic encryption implements the
Brakerski-Fan-Vercauteren (BFV) HE scheme
(<a href="https://eprint.iacr.org/2012/078">https://eprint.iacr.org/2012/078</a>,
<a href="https://eprint.iacr.org/2012/144">https://eprint.iacr.org/2012/144</a>). BFV
is based on the ring learning with errors (RLWE) hardness problem, which is
quantum resistant.</p>

<p>The Live Caller ID Lookup feature requires BFV parameters
with post-quantum 128-bit security, to provide strong security against both classical and
potential future quantum attacks, previously explained in https://security.apple.com/blog/imessage-pq3/.</p>


<p>We believe developers will find homomorphic encryption useful for a wide variety
of standalone privacy-preserving applications both inside and outside the Apple
ecosystem, including private set intersection, secure aggregation, and machine
learning.</p>

<p>Below is a basic example for how to use Swift Homomorphic Encryption.</p>
<div><pre><code><span>import</span> <span>HomomorphicEncryption</span>

<span>// We start by choosing some encryption parameters for the Bfv&lt;UInt64&gt; scheme.</span>
<span>// *These encryption parameters are insecure, suitable for testing only.*</span>
<span>let</span> <span>encryptParams</span> <span>=</span>
    <span>try</span> <span>EncryptionParameters</span><span>&lt;</span><span>Bfv</span><span>&lt;</span><span>UInt64</span><span>&gt;&gt;</span><span>(</span><span>from</span><span>:</span> <span>.</span><span>insecure_n_8_logq_5x18_logt_5</span><span>)</span>
<span>// Perform pre-computation for HE computation with these parameters.</span>
<span>let</span> <span>context</span> <span>=</span> <span>try</span> <span>Context</span><span>(</span><span>encryptionParameters</span><span>:</span> <span>encryptParams</span><span>)</span>

<span>// We encode N values using coefficient encoding.</span>
<span>let</span> <span>values</span><span>:</span> <span>[</span><span>UInt64</span><span>]</span> <span>=</span> <span>[</span><span>8</span><span>,</span> <span>5</span><span>,</span> <span>12</span><span>,</span> <span>12</span><span>,</span> <span>15</span><span>,</span> <span>0</span><span>,</span> <span>8</span><span>,</span> <span>5</span><span>]</span>
<span>let</span> <span>plaintext</span><span>:</span> <span>Bfv</span><span>&lt;</span><span>UInt64</span><span>&gt;.</span><span>CoeffPlaintext</span> <span>=</span> <span>try</span> <span>context</span><span>.</span><span>encode</span><span>(</span>
    <span>values</span><span>:</span> <span>values</span><span>,</span>
    <span>format</span><span>:</span> <span>.</span><span>coefficient</span><span>)</span>

<span>// We generate a secret key and use it to encrypt the plaintext.</span>
<span>let</span> <span>secretKey</span> <span>=</span> <span>try</span> <span>context</span><span>.</span><span>generateSecretKey</span><span>()</span>
<span>let</span> <span>ciphertext</span> <span>=</span> <span>try</span> <span>plaintext</span><span>.</span><span>encrypt</span><span>(</span><span>using</span><span>:</span> <span>secretKey</span><span>)</span>

<span>// Decrypting the plaintext yields the original values.</span>
<span>let</span> <span>decrypted</span> <span>=</span> <span>try</span> <span>ciphertext</span><span>.</span><span>decrypt</span><span>(</span><span>using</span><span>:</span> <span>secretKey</span><span>)</span>
<span>let</span> <span>decoded</span><span>:</span> <span>[</span><span>UInt64</span><span>]</span> <span>=</span> <span>try</span> <span>decrypted</span><span>.</span><span>decode</span><span>(</span><span>format</span><span>:</span> <span>.</span><span>coefficient</span><span>)</span>
<span>precondition</span><span>(</span><span>decoded</span> <span>==</span> <span>values</span><span>)</span>
</code></pre></div>

<p>We look forward to working with others to enhance this package: you can read more about contributing at the repositories on GitHub.
We also encourage you to file issues to <a href="https://github.com/apple/swift-homomorphic-encryption/issues">swift-homomorphic-encryption</a> and <a href="https://github.com/apple/live-caller-id-lookup-example/issues">live-caller-id-lookup-examples</a> if you encounter any problems or have suggestions for improvements.</p>

<p>We’re excited to see how homomorphic encryption can empower developers and
researchers in the Swift community to enable new use cases!</p>


  
</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Truth About Linear Regression (2015) (257 pts)]]></title>
            <link>https://www.stat.cmu.edu/~cshalizi/TALR/</link>
            <guid>41111115</guid>
            <pubDate>Tue, 30 Jul 2024 16:38:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.stat.cmu.edu/~cshalizi/TALR/">https://www.stat.cmu.edu/~cshalizi/TALR/</a>, See on <a href="https://news.ycombinator.com/item?id=41111115">Hacker News</a></p>
Couldn't get https://www.stat.cmu.edu/~cshalizi/TALR/: Error: unable to verify the first certificate]]></description>
        </item>
        <item>
            <title><![CDATA[JavaScript garbage collection and closures (121 pts)]]></title>
            <link>https://jakearchibald.com/2024/garbage-collection-and-closures/</link>
            <guid>41111062</guid>
            <pubDate>Tue, 30 Jul 2024 16:35:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jakearchibald.com/2024/garbage-collection-and-closures/">https://jakearchibald.com/2024/garbage-collection-and-closures/</a>, See on <a href="https://news.ycombinator.com/item?id=41111062">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><time datetime="2024-07-30">Posted 30 July 2024 </time></p><div><p>Me, <a href="https://twitter.com/DasSurma">Surma</a>, and <a href="https://twitter.com/_developit">Jason</a> were hacking on a thing, and discovered that garbage collection within a function doesn't quite work like we expected.</p>
<div><pre><code><span>function</span> <span>demo</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> bigArrayBuffer <span>=</span> <span>new</span> <span>ArrayBuffer</span><span>(</span><span>100_000_000</span><span>)</span><span>;</span>
  <span>const</span> id <span>=</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>bigArrayBuffer<span>.</span>byteLength<span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>

  <span>return</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>clearTimeout</span><span>(</span>id<span>)</span><span>;</span>
<span>}</span>

globalThis<span>.</span>cancelDemo <span>=</span> <span>demo</span><span>(</span><span>)</span><span>;</span></code></pre></div><p>With the above, <code>bigArrayBuffer</code> is leaked forever. I didn't expect that, because:</p>
<ul>
<li>After a second, the function referencing <code>bigArrayBuffer</code> is no longer callable.</li>
<li>The returned cancel function doesn't reference <code>bigArrayBuffer</code>.</li>
</ul>
<p>But that doesn't matter. Here's why:</p>
<h2 id="javascript-engines-are-reasonably-smart"><a href="#javascript-engines-are-reasonably-smart">JavaScript engines are reasonably smart</a></h2>
<p>This doesn't leak:</p>
<div><pre><code><span>function</span> <span>demo</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> bigArrayBuffer <span>=</span> <span>new</span> <span>ArrayBuffer</span><span>(</span><span>100_000_000</span><span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span>bigArrayBuffer<span>.</span>byteLength<span>)</span><span>;</span>
<span>}</span>

<span>demo</span><span>(</span><span>)</span><span>;</span></code></pre></div><p>The function executes, <code>bigArrayBuffer</code> is no longer needed, so it's garbage collected.</p>
<p>This also doesn't leak:</p>
<div><pre><code><span>function</span> <span>demo</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> bigArrayBuffer <span>=</span> <span>new</span> <span>ArrayBuffer</span><span>(</span><span>100_000_000</span><span>)</span><span>;</span>

  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>bigArrayBuffer<span>.</span>byteLength<span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
<span>}</span>

<span>demo</span><span>(</span><span>)</span><span>;</span></code></pre></div><p>In this case:</p>
<ol>
<li>The engine knows it needs to retain <code>bigArrayBuffer</code> beyond the initial execution of the function, so it's kept around. It's associated with the scope that was created when <code>demo()</code> was called.</li>
<li>After a second, the function referencing <code>bigArrayBuffer</code> is no longer callable.</li>
<li>Since nothing within the scope is callable, the scope is garbage collected, along with <code>bigArrayBuffer</code>.</li>
</ol>
<p>This also doesn't leak:</p>
<div><pre><code><span>function</span> <span>demo</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> bigArrayBuffer <span>=</span> <span>new</span> <span>ArrayBuffer</span><span>(</span><span>100_000_000</span><span>)</span><span>;</span>

  <span>const</span> id <span>=</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'hello'</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>

  <span>return</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>clearTimeout</span><span>(</span>id<span>)</span><span>;</span>
<span>}</span>

globalThis<span>.</span>cancelDemo <span>=</span> <span>demo</span><span>(</span><span>)</span><span>;</span></code></pre></div><p>In this case, the engine knows it doesn't need to retain <code>bigArrayBuffer</code> beyond the initial execution of the function, as none of the future-callables access it.</p>
<h2 id="the-problem-case"><a href="#the-problem-case">The problem case</a></h2>
<p>Here's where it gets messy:</p>
<div><pre><code><span>function</span> <span>demo</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> bigArrayBuffer <span>=</span> <span>new</span> <span>ArrayBuffer</span><span>(</span><span>100_000_000</span><span>)</span><span>;</span>

  <span>const</span> id <span>=</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>bigArrayBuffer<span>.</span>byteLength<span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>

  <span>return</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>clearTimeout</span><span>(</span>id<span>)</span><span>;</span>
<span>}</span>

globalThis<span>.</span>cancelDemo <span>=</span> <span>demo</span><span>(</span><span>)</span><span>;</span></code></pre></div><p>This leaks, because:</p>
<ol>
<li>The engine knows it needs to retain <code>bigArrayBuffer</code> beyond the initial execution of the function, so it's kept around. It's associated with the scope that was created when <code>demo()</code> was called.</li>
<li>After a second, the function referencing <code>bigArrayBuffer</code> is no longer callable.</li>
<li>But, the scope remains, because the cleanup function within is still callable.</li>
<li><code>bigArrayBuffer</code> is associated with the scope, so it remains in memory.</li>
</ol>
<p>I thought engines would be smarter, and GC <code>bigArrayBuffer</code> since it's no longer referenceable, but that isn't the case.</p>
<div><pre><code>globalThis<span>.</span>cancelDemo <span>=</span> <span>null</span><span>;</span></code></pre></div><p><em>Now</em> <code>bigArrayBuffer</code> is GC'd, since nothing within the scope is callable.</p>
<p>This isn't specific to timers, it's just how I encountered the issue. For example:</p>
<div><pre><code><span>function</span> <span>demo</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> bigArrayBuffer <span>=</span> <span>new</span> <span>ArrayBuffer</span><span>(</span><span>100_000_000</span><span>)</span><span>;</span>

  globalThis<span>.</span><span>innerFunc1</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>bigArrayBuffer<span>.</span>byteLength<span>)</span><span>;</span>
  <span>}</span><span>;</span>

  globalThis<span>.</span><span>innerFunc2</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'hello'</span><span>)</span><span>;</span>
  <span>}</span><span>;</span>
<span>}</span>

<span>demo</span><span>(</span><span>)</span><span>;</span>
<span>// bigArrayBuffer is retained, as expected.</span>

globalThis<span>.</span>innerFunc1 <span>=</span> <span>undefined</span><span>;</span>
<span>// bigArrayBuffer is still retained, as unexpected.</span>

globalThis<span>.</span>innerFunc2 <span>=</span> <span>undefined</span><span>;</span>
<span>// bigArrayBuffer can now be collected.</span></code></pre></div><p>TIL!</p>
</div><p><small><a href="https://github.com/jakearchibald/jakearchibald.com/blob/main/static-build/posts/2024/07/garbage-collection-and-closures/index.md">View this page on GitHub</a></small></p></div><section><figure><h2><picture><source srcset="https://jakearchibald.com/c/me-cat-2a46b6f2.avif" type="image/avif"><source srcset="https://jakearchibald.com/c/me-cat-29ff6dc5.webp" type="image/webp"><img width="800" height="844" src="https://jakearchibald.com/c/me-cat-862e9e16.jpg" alt="Jake Archibald in a garden with a black cat"></picture></h2></figure><p>Hello, I'm Jake and that's me there. The one that isn't a cat. I'm a developer of sorts.</p><h2>Elsewhere</h2><h2>Contact</h2><p>Feel free to <a href="mailto:jaffathecake@gmail.com">throw me an email</a>, unless you're a recruiter, or someone trying to offer me 'sponsored content' for this site, in which case write your request on a piece of paper, and fling it out the window.</p></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Launch HN: SSOReady (YC W24) – Making SAML SSO painless and open source (265 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=41110850</link>
            <guid>41110850</guid>
            <pubDate>Tue, 30 Jul 2024 16:19:45 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=41110850">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="41110850">
      <td><span></span></td>      <td><center><a id="up_41110850" href="https://news.ycombinator.com/vote?id=41110850&amp;how=up&amp;goto=item%3Fid%3D41110850"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=41110850">Launch HN: SSOReady (YC W24) – Making SAML SSO painless and open source</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_41110850">108 points</span> by <a href="https://news.ycombinator.com/user?id=ucarion">ucarion</a> <span title="2024-07-30T16:19:45"><a href="https://news.ycombinator.com/item?id=41110850">3 hours ago</a></span> <span id="unv_41110850"></span> | <a href="https://news.ycombinator.com/hide?id=41110850&amp;goto=item%3Fid%3D41110850">hide</a> | <a href="https://hn.algolia.com/?query=Launch%20HN%3A%20SSOReady%20(YC%20W24)%20%E2%80%93%20Making%20SAML%20SSO%20painless%20and%20open%20source&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=41110850&amp;auth=136767a880b85e046625fe9d6b781c656b3492cf">favorite</a> | <a href="https://news.ycombinator.com/item?id=41110850">45&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><div><p>Hey everyone, I'm Ulysse, CTO at SSOReady (<a href="https://github.com/ssoready/ssoready">https://github.com/ssoready/ssoready</a>).</p><p>SSOReady is an open-source (MIT) service that lets you implement SAML single sign-on without ever touching SAML yourself. You just need to implement two API endpoints: one to initiate SAML logins and another to receive incoming SAML messages. And then you're pretty much done.</p><p>Here's me setting up SAML single sign-on in under a minute: (<a href="https://www.youtube.com/watch?v=_HVtFkW8xCI" rel="nofollow">https://www.youtube.com/watch?v=_HVtFkW8xCI</a>).</p><p>You can use our service with whatever tech stack or programming language you prefer.</p><p>Earlier in my career, I worked on SAML authentication at Segment. I've been pretty obsessed with SAML since then. In the depths of the COVID pandemic, I even wrote an implementation of SAML in Go to entertain myself (<a href="https://github.com/ucarion/saml">https://github.com/ucarion/saml</a>).</p><p>Over the years, I've gotten really itchy to build better SAML tooling. There just aren't a lot of great options out there. Almost no one seems interested in making SAML easy for developers. Almost no one seems interested in writing clear documentation.</p><p>We're hoping to change that with SSOReady. We've open-sourced our codebase on an MIT license. You can do pretty much whatever you want with the code. Fork us. Self-host us.</p><p>We've also made the product entirely free.</p><p>Why free and open source? We're focused solitarily on becoming developers' first choice for SAML SSO. If it makes developers' lives easier, it works for us. We expect to monetize in the future by building extra features that serve large companies with complex needs. We don't see any point to being secretive or squeezing dollars out of small companies.</p><p>I'd be thrilled if you gave the product a try, and I'd be really grateful for any feedback on your experience.</p><p>If you have any questions or concerns, my cofounder Ned and I will stay active on this thread throughout the day. You can also reach us directly at founders@ssoready.com. (We really mean this! We want to hear from you!)</p></div></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DARPA: Translating All C to Rust (Tractor) (302 pts)]]></title>
            <link>https://www.darpa.mil/program/translating-all-c-to-rust</link>
            <guid>41110269</guid>
            <pubDate>Tue, 30 Jul 2024 15:42:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.darpa.mil/program/translating-all-c-to-rust">https://www.darpa.mil/program/translating-all-c-to-rust</a>, See on <a href="https://news.ycombinator.com/item?id=41110269">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="ContentPane" role="main">

						





						















						<div>
							<h2>Tags</h2>
						</div>
						<!-- need a horizontal datalist control so that tag values can be bound to the anchor tag with the id of the tag -->

						<p><span>|</span>

						</p>


						







						<div id="myRelatedContent_dRelated">
								<h2>Similarly&nbsp;&nbsp;&nbsp;&nbsp;Tagged&nbsp;&nbsp;&nbsp;&nbsp;Content</h2>
								
							</div>

						<div id="divMedia">
							<p>
								<h2>Images</h2>
							</p>
							<ul id="ulMedia">
							</ul>
						</div>

					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Dear AI Companies, instead of scraping OpenStreetMap, how about a $10k donation? (378 pts)]]></title>
            <link>https://en.osm.town/@Firefishy/112875549871566269</link>
            <guid>41109926</guid>
            <pubDate>Tue, 30 Jul 2024 15:11:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://en.osm.town/@Firefishy/112875549871566269">https://en.osm.town/@Firefishy/112875549871566269</a>, See on <a href="https://news.ycombinator.com/item?id=41109926">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Why doesn't advice work? (267 pts)]]></title>
            <link>https://dynomight.substack.com/p/advice</link>
            <guid>41109891</guid>
            <pubDate>Tue, 30 Jul 2024 15:07:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dynomight.substack.com/p/advice">https://dynomight.substack.com/p/advice</a>, See on <a href="https://news.ycombinator.com/item?id=41109891">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>In ancient India, there was a long-running feud between the </span><a href="https://en.wikipedia.org/wiki/Pandava" rel="">Pandavas</a><span> and the </span><a href="https://en.wikipedia.org/wiki/Kaurava" rel="">Kauravas</a><span>. </span><a href="https://en.wikipedia.org/wiki/Duryodhana" rel="">Duryodhana</a><span>, leader of the Kauravas, planned a huge war to end things forever. </span><a href="https://en.wikipedia.org/wiki/Krishna" rel="">Krishna</a><span> warned that this would lead to the total destruction of both sides and made every effort to forge a peace.</span></p><p>Duryodhana refused to listen and launched his war. There were 4 million warriors at the start. After 18 days, all but 11 were dead.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg" width="703" height="367" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/cc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:367,&quot;width&quot;:703,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc07d16b-a9b5-426f-8507-0ebc2557dda1_703x367.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>It’s unclear if Duryodhana knew Krishna was a god. Duryodhana may have been an atheist, despite having seen Krishna in his extremely multi-armed/multi-headed </span><a href="https://en.wikipedia.org/wiki/Vishvarupa" rel="">Vishvarupa</a><span> form. But Krishna had certainly proven himself to be a master tactician and strategist—also he was blue.</span></p><p>So why didn’t Duryodhana listen?</p><p>It seems like this happens a lot. Someone has a problem, they ask you for advice, and you give it to them. Your advice is impeccable, pragmatic, human, wise. But they ignore you and suffer the predictable consequences. All they had to do is listen. So why didn’t they?</p><p>Big picture, my impression is that advice just doesn’t seem to do all that much. Why?</p><p>Maybe your advice is terrible and if people followed it, they’d do even worse. Or maybe your advice is good for the situation as you understand it, but not for the real world because of details you don’t know about.</p><p><span>I’m sure there’s lots of this. The median nutrition advice is appalling. In 1962, President Kennedy’s Joint Chiefs of Staff </span><em>all</em><span> advised air strikes on Soviet missile installations in Cuba. Internet people seem to think you should divorce your spouse for misdeeds as minor as forgetting to buy shampoo.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif" width="600" height="507" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:507,&quot;width&quot;:600,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3180c6e2-7251-4e5c-bbe6-ae3dc27d1425_600x507.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>But I’m still convinced that lots of good advice gets ignored. Because—people sometimes ask me for advice, ignore it, struggle, and then finally come back and </span><em>explain my advice to me</em><span> as if it was novel. (Presumably I do the same thing.)</span></p><p><span>When I was learning to climb, everyone said things like, “if in doubt, move your feet up” or “don’t pull yourself up with your arms, push yourself up with your legs”. These people were much better than me, and I could </span><em>see</em><span> them moving their feet up. I knew their advice was good and I tried to follow it, but I couldn’t understand how.</span></p><p>After learning to climb, I found myself telling newcomers the same things, with the same result.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg" width="775" height="966" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/caabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:966,&quot;width&quot;:775,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcaabd7cb-488a-4aeb-ae59-607d8661f43b_775x966.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I’m now convinced that “move your feet up” simply isn’t enough information. In reality you need to find the right holds, grab them in the right way, hang your arms the right way, get your center of gravity into the right position, and twist your hips and knees and ankles into the right angles. Then you need to move the right foot to the right new position while shifting your weight with the right speed. All these things are hard to explain in words and experienced climbers often don’t even think about them.</p><p><span>“Move your feet up” </span><em>seems</em><span> like a good explanation, because it’s the most visible action, and the one that you’ll most likely think about consciously. But it only works once you’ve internalized lots of other stuff through trial and error.</span></p><p><span>Sometimes I’ll have a personal revelation and then it will dawn on me that—oh </span><em>yeah</em><span>—people have been dropping hints about this for years, haven’t they? (Common themes include, “Wow you sure drink a lot of coffee!” and “I hear lavender oil is relaxing!” and “Have you ever tried yoga?”)</span></p><p>Often the advice was good and there wasn’t anything difficult about it. But I didn’t understand it and didn’t take it seriously. Looking back, I should have thought, “There must be a reason all these smart people keep bringing this up.” But instead my brain sort of converted their words into a big whooshing sound.</p><p><span>Maybe ignoring stuff we don’t understand is a cognitive bias. I suspect this bias has an evil sibling: Our brains often </span><em>make</em><span> us not understand advice that we don’t </span><em>want</em><span> to follow.</span></p><p><span>You’ve surely known someone who, after dating someone for 6-12 months was constantly stressed and anxious, but their relationship hasn’t progressed to the stage that they’d feel comfortable even </span><em>discussing</em><span> if they are “in a relationship”.</span></p><p>The conventional wisdom is to end things, or at least have a tough conversation, damn the consequences. Everyone knows this. But people in this situation often convince themselves their situation is exceptional, because ending the relationship (or whatever it is) would be so painful.</p><p><span>My theory of </span><a href="https://dynomight.net/procrastination/" rel="">procrastination</a><span> is that a guy named Jim lives in your head. Before you try to do something, Jim calculates how hard it will be and what benefits it’s likely to bring. If he doesn’t like the ratio, he adds a “tax” that makes it very hard to do the thing. Jim is stubborn and not very bright.</span></p><p>But Jim Theory, if correct, explains more than just procrastination. A childhood friend of mine always wanted to be a programmer. He did it for fun as a teenager and was good at it, but in college he had to major in something else for financial reasons. Afterwards, he felt stuck in a career he didn’t like very much.</p><p><span>I was sure he could still transition into programming. I begged him to try taking a night class, or get a low-level tech support job, or get some kind of online certification, or start an open-source project. I promised him that he could surely find </span><em>someone</em><span> who would pay him a below-market salary to do </span><em>something</em><span> programming-related. As I said these things, he would nod his head, but in his heart I think he never </span><em>felt</em><span> it could work. So he never did anything. It’s incredibly hard to do things when Jim isn’t on board.</span></p><p>Some time ago, my dog died. One very caring and empathetic friend sensed that I was devastated and promised me that I’d feel better if I binged on reality TV. But I would not have felt better if I binged on reality TV.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg" width="1024" height="822" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/db4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:822,&quot;width&quot;:1024,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb4cba5a-361a-4e07-b4d6-9069b7a2b690_1024x822.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>(My “reality TV” is goat videos.)</p><p><span>I often wonder—how different are people? The trouble is that we’re all trapped inside of ourselves. I can’t truly know what it’s like to be you without </span><em><a href="https://en.wikipedia.org/wiki/What_Is_It_Like_to_Be_a_Bat%3F" rel="">being you</a></em><span>. But my guess is that people vary a </span><em>lot</em><span> and often along unsuspected dimensions. So it’s hard to predict what advice will transfer.</span></p><p><span>Of all the advice I’ve given out on this blog, I think people would benefit the most from following my advice on </span><a href="https://dynomight.net/2021/01/25/how-to-run-without-all-the-agonizing-pain/" rel="">how to start running</a><span>. A bunch of people have told me they tried this advice and went running at least a few times. But I’m not aware of a single case of this leading to a new long-term running habit.</span></p><p><span>Meanwhile, </span><em>many</em><span> people have told me I convinced them to start using </span><a href="https://dynomight.net/noise/" rel="">noise cancelling headphones</a><span> and even more have told me I convinced them to get an </span><a href="https://dynomight.net/air/" rel="">air purifier</a><span>.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg" width="1341" height="1085" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1085,&quot;width&quot;:1341,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe65f3067-a74f-4f5e-aefe-9834092cefce_1341x1085.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Why? Probably because running is hard. I maintain that if you run the right way, it isn’t nearly </span><em>as hard</em><span> as it first seems. But it’s still hard. Buying headphones or installing an air purifier is incredibly easy.</span></p><p>Maybe we ask for advice because we want reassurance that our pre-determined choices are right. If you ask enough people, eventually someone will give you validation.</p><p>Or maybe we ask for advice to have something fun to talk about. Asking someone for advice is a genuinely great way to start a conversation—though it might work best with hypotheticals.</p><p>Or maybe advice is a “guardrail”. Even if we know what we want to do, we want to make sure other people don’t have irrefutable proof it will lead to catastrophe. That could still be worth it even if we only change our minds 1% of the time.</p><p>Or, if you’re an economist, try this: Advice is cheap. So maybe we keep asking for advice in more and more situations where it’s increasingly unlikely to be helpful, until expected benefit matches the (tiny) cost.</p><p>Sometimes we have too much information. We’re too close to the situation, too overloaded to see the big picture.</p><p><span>You could probably name some “obvious” things that would make my writing better. (Really, you could probably do this!) But I might struggle to implement your advice because it’s hard to see your own writing objectively—to separate what you </span><em>mean</em><span> to say from what you’ve actually said. (Tell me anyway.)</span></p><p>A few years ago, I lived overseas. I liked living there and wanted to stay, but changes were coming that would make my then-amazing job into a nightmare. I spent months asking everyone what I should do. But in retrospect, I’m not sure what I was hoping to hear. There was no solution. I could stay with a worse job, or I could leave. Somehow I couldn’t see that.</p><p>Here’s some advice, from me:</p><ul><li><p>Avoid drinking pond water.</p></li><li><p>If you want to get better at math, try doing practice problems.</p></li><li><p>If people have a good “user experience” when they interact with you, then they will want to interact with you more in the future.</p></li></ul><p>Maybe when advice works, we reclassify it as something other than “advice”.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png" width="520" height="572" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:572,&quot;width&quot;:520,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:54486,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F649e79ae-8752-4d5b-8884-40126cac76cf_520x572.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>I struggle to answer my email. I accumulate ever-larger numbers of emails marked </span><em>REPLY ASAP</em><span> feeling ever-more guilty until after some months I “declare bankruptcy”, mark everything as resolved, and begin the cycle anew. If you’ve emailed me and I haven’t written back, I genuinely feel terrible about it.</span></p><p>Unless you have the same problem, you probably have questions like:</p><ul><li><p>Why don’t you just answer everything as it comes in?</p></li><li><p>Why don’t you just set aside some time every day to answer emails?</p></li></ul><p><span>Why don’t I do these very obvious things which would clearly 100% solve my problem? That’s hard to explain. But if I </span><em>could</em><span> do them, then I wouldn’t bloody have this problem in the first place, would I?</span></p><p><span>Probably everyone has </span><em>some</em><span> issues and struggles to deal with </span><em>some</em><span> things. Maybe the same issues that make them </span><em>need</em><span> your advice also make them unable to use it.</span></p><p>What lessons does this exercise offer for how to “fix” advice? I think… not a lot?</p><p><span>For </span><strong>consumers</strong><span> of advice, I guess there are two meager lessons:</span></p><ol><li><p>If people you respect are repeatedly giving you advice that doesn’t make sense, consider that you might be missing something.</p></li><li><p>Maybe consider blindly following advice sometimes? If you’ve repeatedly made terrible choices in some domain, maybe try the wisdom of the crowds instead?</p><p>(I’m particularly thinking of people who have a track record of picking terrible romantic partners here, but I’m not sure it’s realistic.)</p></li></ol><p><span>And for </span><strong>producers</strong><span> of advice:</span></p><ol><li><p>Have realistic expectations. Most advice isn’t followed.</p></li><li><p>If you really want to have impact, focus on giving advice that is easy to follow.</p><p><span>If you </span><em>really</em><span> want to have an impact, I think there’s a specific category of advice, one that people are particularly interested in and particularly likely to follow: Advice about ways to spend money.</span></p><p>What’s so attractive about this type of advice? I think it’s that the space of “things one could buy” seems so much vaster than the space of “things one could do”. It seems like there’s a higher chance there’s some hidden secret that could move the needle.</p></li></ol><p>So I guess that’s my advice on advice? Embrace consumerism? Not what I expected.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta Launches AI Studio in US (184 pts)]]></title>
            <link>https://ai.meta.com/ai-studio/</link>
            <guid>41109822</guid>
            <pubDate>Tue, 30 Jul 2024 15:00:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ai.meta.com/ai-studio/">https://ai.meta.com/ai-studio/</a>, See on <a href="https://news.ycombinator.com/item?id=41109822">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2>Get inspired and discover AIs </h2><div><div><p>Whether you’re a creator who wants to save time by using AI to help engage with your audience, or a travel influencer who creates a guide on local experiences, AI Studio can help you engage in new ways. </p></div><a href="https://aistudio.instagram.com/?utm_source=ai_meta_site&amp;utm_medium=web&amp;utm_content=AI_studio_page&amp;utm_campaign=July_moment" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;ai_studio_get_inspired_and_discover_AIs_ai_explore_AI_studio_cta&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_8_9f"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg>Explore AI Studio</a></div><div><div><div><p><img src="https://static.xx.fbcdn.net/rsrc.php/v3/y4/r/-PAXP-deijE.gif" alt="violetbenson Creator AI image"></p></div><h3>Creator AI</h3><div><p>Entertaining comedian, dating expert and podcast host.</p><a href="https://www.instagram.com/violetbenson/profilecard/?igsh=NTVmMGE0ZDQxNA%3D%3D" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;ai_studio_get_inspired_and_discover_AIs_ai_chat_with_violetbenson_cta&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_9_dK"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg>Chat with violetbenson</a></div></div><div><div><p><img src="https://static.xx.fbcdn.net/rsrc.php/v3/y4/r/-PAXP-deijE.gif" alt="Eat like you live there AI character image"></p></div><h3>AI character</h3><div><p>Get etiquette tips and advice on embracing local dining customs.</p><a href="https://aistudio.instagram.com/ai/974785541030953/?utm_source=mshare" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;ai_studio_get_inspired_and_discover_AIs_ai_chat_with_eat_like_you_live_there_cta&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_a_UA"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg>Chat with Eat like you live there!</a></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Eulogy for Dark Sky, a Data Visualization Masterpiece (2023) (330 pts)]]></title>
            <link>https://nightingaledvs.com/dark-sky-weather-data-viz/</link>
            <guid>41109799</guid>
            <pubDate>Tue, 30 Jul 2024 14:58:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nightingaledvs.com/dark-sky-weather-data-viz/">https://nightingaledvs.com/dark-sky-weather-data-viz/</a>, See on <a href="https://news.ycombinator.com/item?id=41109799">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>On January 1, 2023, Apple sunsetted (pun intended) the Dark Sky mobile app on iOS. Apple purchased the company behind the popular weather application in early 2020, then announced that it would be shutting down the Dark Sky applications (first on Android, then on iOS and web), and finally stated in 2022 that the forecast technology would be integrated into the Apple Weather app with iOS 16.</p>


<div>
<figure><img fetchpriority="high" decoding="async" width="720" height="669" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky1.png?resize=720%2C669&amp;ssl=1" alt="A comparison of Dark Sky with Apple Weather. The Dark Sky app is white. It's interface has a simple location marker with a list of forecasted temperature readings. Buttons at the bottom allow users to toggle between maps, forecasts, notifications and reports. The Apple Weather app has an image of the sky. It has current weather, hourly weather temperatures, and a 10-day forecast. " data-recalc-dims="1"><figcaption>Comparison of Dark Sky with Apple Weather. </figcaption></figure></div>


<p>But Dark Sky was<em> much </em>more than just an API or a set of “forecast technologies.” The design of the Dark Sky mobile application represented a hallmark of information design because the team clearly obsessed over how people would actually use the app on a daily basis.</p>



<p>Here’s a gallery of screenshots I personally took in the last year.</p>







<p>The design of Dark Sky was so wonderful that I could understand the <em>shape</em> of the weather at a glance, even from a zoomed out view of the app.</p>



<h2>Common use cases for a weather app</h2>



<p>Before we can dissect what makes the design of this app so special, let’s define the most common use cases for a weather app. A good weather app attempts to address a range of use cases in a person’s life. Here are some common use cases for a weather app, starting with the contextual goals first:</p>







<p>You’ll notice that the questions I want to answer vary based on the context and situation I’m in. This is the perfect situation for software that embraces good information design principles.</p>



<p>In <a href="http://worrydream.com/MagicInk/" target="_blank" rel="noreferrer noopener">Magic Ink</a>, Bret Victor defined information design “as the design of context-sensitive information graphics.” Unlike static graphics, like a weather map in a newspaper, information graphics in software can be highly dynamic and can incorporate <a href="http://worrydream.com/MagicInk/#inferring_context_from_the_environment" target="_blank" rel="noreferrer noopener">context from the user’s environment.</a>&nbsp;</p>



<p>Dark Sky aggressively leaned into these ideas, and the team worked hard to turn nearly everything in the application into a context-sensitive information graphic. Let’s dive deeper into some examples where this notion is in full display.</p>



<h2><strong>Weather forecast for the day at a precise location</strong></h2>



<p>I’ll start by listing my goals when trying to understand the upcoming weather for the day:</p>











<p>The default experience for the Dark Sky application is to show weather for the next 12 hours at my precise location. Here are three screenshots from the app, from different days and locations. <strong>What do you notice?</strong></p>


<div>
<figure><img loading="lazy" decoding="async" width="720" height="503" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=720%2C503&amp;ssl=1" alt="Screenshots of the app showing 1) a storm system passing over the Northeast U.S., with a temperature chart by the hour and a note of precipitation at some of those hours, 2) the same same map, but with a change-of-precipitation chart, and 3) an extended hourly temperature chart with buttons allowing the user to choose to focus on temperature, feels-like temperature and precipitation." srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=1024%2C716&amp;ssl=1 1024w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=300%2C210&amp;ssl=1 300w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=768%2C537&amp;ssl=1 768w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=1536%2C1074&amp;ssl=1 1536w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=500%2C350&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=800%2C559&amp;ssl=1 800w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=1280%2C895&amp;ssl=1 1280w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=1920%2C1343&amp;ssl=1 1920w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=450%2C315&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=1144%2C800&amp;ssl=1 1144w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=1360%2C951&amp;ssl=1 1360w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=250%2C175&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=550%2C385&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=257%2C180&amp;ssl=1 257w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=429%2C300&amp;ssl=1 429w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?resize=715%2C500&amp;ssl=1 715w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?w=1999&amp;ssl=1 1999w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky3.png?w=1440&amp;ssl=1 1440w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></figure></div>






<p>The app contextualizes the information that’s presented based on what’s most relevant.</p>



<p>In the left-most screenshot, the context of the weather storm that’s passing by my location and some potential light rain is emphasized to the user. The wind advisory and dip in the “feels like” temperature also make honorable mentions. In combination with the clickable <strong>Wind Advisory</strong> warning, I can quickly understand that the storm has passed my specific location but I should still be mindful of the wind.</p>


<div>
<figure><img loading="lazy" decoding="async" width="720" height="679" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=720%2C679&amp;ssl=1" alt="Screenshot of the app showing a storm system passing over the Northeast U.S., with a temperature chart by the hour and a note of precipitation at some of those hours, plus a wind advisory. " srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=1024%2C965&amp;ssl=1 1024w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=300%2C283&amp;ssl=1 300w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=768%2C724&amp;ssl=1 768w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=1536%2C1448&amp;ssl=1 1536w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=500%2C471&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=800%2C754&amp;ssl=1 800w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=1280%2C1206&amp;ssl=1 1280w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=1920%2C1810&amp;ssl=1 1920w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=450%2C424&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=849%2C800&amp;ssl=1 849w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=1360%2C1282&amp;ssl=1 1360w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=250%2C236&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=550%2C518&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=191%2C180&amp;ssl=1 191w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=318%2C300&amp;ssl=1 318w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?resize=531%2C500&amp;ssl=1 531w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?w=1999&amp;ssl=1 1999w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky4.png?w=1440&amp;ssl=1 1440w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></figure></div>






<p>In the middle screenshot, the storm front heading my direction, the imminent rain starting within the hour, and the hours of rain later in the day are emphasized front and center. Based on my interest in the rain, I scrolled down (not shown in screenshot) to switch from temperature to rain probability for the main weather view.</p>


<div>
<figure><img loading="lazy" decoding="async" width="720" height="681" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=720%2C681&amp;ssl=1" alt="Screenshot of the app showing the storm map, but with a change-of-precipitation chart over the coming hours." srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=1024%2C968&amp;ssl=1 1024w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=300%2C283&amp;ssl=1 300w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=768%2C726&amp;ssl=1 768w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=1536%2C1451&amp;ssl=1 1536w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=500%2C472&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=800%2C756&amp;ssl=1 800w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=1280%2C1210&amp;ssl=1 1280w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=1920%2C1814&amp;ssl=1 1920w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=450%2C425&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=847%2C800&amp;ssl=1 847w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=1360%2C1285&amp;ssl=1 1360w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=250%2C236&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=550%2C520&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=190%2C180&amp;ssl=1 190w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=317%2C300&amp;ssl=1 317w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?resize=529%2C500&amp;ssl=1 529w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?w=1999&amp;ssl=1 1999w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky5.png?w=1440&amp;ssl=1 1440w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></figure></div>






<p>In the right-most screenshot, the temperature distribution throughout the day is emphasized.</p>


<div>
<figure><img loading="lazy" decoding="async" width="720" height="729" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=720%2C729&amp;ssl=1" alt="Screenshot of the app showing an extended hourly temperature chart with buttons allowing the user to choose to focus on temperature, feels-like temperature and precipitation." srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=1011%2C1024&amp;ssl=1 1011w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=296%2C300&amp;ssl=1 296w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=768%2C778&amp;ssl=1 768w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=1516%2C1536&amp;ssl=1 1516w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=500%2C507&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=800%2C811&amp;ssl=1 800w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=1280%2C1297&amp;ssl=1 1280w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=1920%2C1946&amp;ssl=1 1920w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=70%2C70&amp;ssl=1 70w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=450%2C456&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=789%2C800&amp;ssl=1 789w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=1360%2C1378&amp;ssl=1 1360w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=48%2C48&amp;ssl=1 48w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=250%2C253&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=550%2C557&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=178%2C180&amp;ssl=1 178w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?resize=493%2C500&amp;ssl=1 493w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?w=1954&amp;ssl=1 1954w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky6.png?w=1440&amp;ssl=1 1440w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></figure></div>






<p>There are lots of little details that are easy to miss, as well. For example, all three screenshots above start showing weather information starting at the current moment (“now”) and onwards. This is brilliant, because I only occasionally care about weather from a few hours or days ago. (To accommodate those situations, the app did have a unique Time Machine view to explore past weather data.)</p>



<h2>Weather forecast for the week</h2>



<p>Let’s revisit our goals when trying to understand the weather for the week:</p>











<p>While many other weather apps focus on helping me understand the weather at the city level, the Dark Sky app differentiates itself by enabling me to understand the weather with a <em>hyperlocal</em> view. I can view the weather at specific addresses and landmarks and understand how the weather might be different in a city center compared to the towns around it.</p>



<p>By default, the Dark Sky app shows the weekly weather summary at my current location (screenshot on the left).&nbsp; I can <em>contextualize</em> the weekly weather view by clicking the search icon and typing in the alternative location I’m interested in (screenshot on the right).</p>


<div>
<figure><img loading="lazy" decoding="async" width="720" height="659" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=720%2C659&amp;ssl=1" alt="Two screenshots of the DarkSky app for different locations, showing the coming days' high and low temperatures, rain chance, and the extent of rain, sun, wind, and cloudcover." srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=1024%2C937&amp;ssl=1 1024w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=300%2C275&amp;ssl=1 300w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=768%2C703&amp;ssl=1 768w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=1536%2C1406&amp;ssl=1 1536w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=500%2C458&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=800%2C732&amp;ssl=1 800w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=1280%2C1172&amp;ssl=1 1280w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=1920%2C1758&amp;ssl=1 1920w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=450%2C412&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=874%2C800&amp;ssl=1 874w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=1360%2C1245&amp;ssl=1 1360w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=250%2C229&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=550%2C504&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=197%2C180&amp;ssl=1 197w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=328%2C300&amp;ssl=1 328w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?resize=546%2C500&amp;ssl=1 546w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?w=1999&amp;ssl=1 1999w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky7.png?w=1440&amp;ssl=1 1440w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></figure></div>






<p>At a glance, I can quickly understand:</p>



<ul>
<li>Which days are likely to rain.</li>



<li>Which days have wide temperature ranges (low lows and high highs).</li>



<li>The general shape of the weather (micro-trends).</li>
</ul>



<figure><img loading="lazy" decoding="async" width="720" height="399" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=720%2C399&amp;ssl=1" alt="The same screenshot as before, showing daily temperatures, precipitation and other elements with author annotations calling out 
the highs and lows for the week. The chart presenting this information shows the &quot;shape&quot; of the weather as the temperature lines move up and down." srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=1024%2C567&amp;ssl=1 1024w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=300%2C166&amp;ssl=1 300w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=768%2C425&amp;ssl=1 768w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=1536%2C851&amp;ssl=1 1536w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=500%2C277&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=800%2C443&amp;ssl=1 800w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=1280%2C709&amp;ssl=1 1280w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=450%2C249&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=1445%2C800&amp;ssl=1 1445w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=1360%2C753&amp;ssl=1 1360w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=250%2C138&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=550%2C305&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=325%2C180&amp;ssl=1 325w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=542%2C300&amp;ssl=1 542w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?resize=903%2C500&amp;ssl=1 903w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky8.png?w=1618&amp;ssl=1 1618w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></figure>







<h2>Gallery of subtle design elements</h2>



<p>In the first few sections, I laid the groundwork by diving a bit more deeply into specific aspects of Dark Sky. Now that I’ve hopefully engaged your critical design eye, I’d like to elevate other elements in the app’s design in a more rapid-fire fashion. I hope that this section will provide some ideas and inspiration for people designing their own data-rich applications.</p>



<p><strong>Preserving temperature magnitudes in ranges</strong></p>



<p>To represent data visually, the data needs to be mapped from “data space” to “pixel space”. In some domains and scenarios, you want to ensure the magnitudes are carried over, and in others you want to <a href="https://en.wikipedia.org/wiki/Feature_scaling#Rescaling_(min-max_normalization)" target="_blank" rel="noreferrer noopener">rescale the values</a> to a fixed scale so the resulting charts are more consistent in the space and pixels they take up.</p>



<p>In the Dark Sky app, the “temperature pills” representing the forecasted temperatures for the upcoming week preserve their existing magnitude more effectively in the visualization. The temperature values are more tightly <em>integrated</em> with the visual representation, making the combined experience more amenable to quick comparison across multiple days.</p>



<p>Many weather apps opt for the design pattern on the right, where all temperature ranges are rescaled to take up the same amount of space in the app.</p>


<div>
<figure><img loading="lazy" decoding="async" width="720" height="501" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=720%2C501&amp;ssl=1" alt="In the DarkSky weather app, the highs and lows were placed in bars that were relative to each other. In the Apple Weather app, the lows are aligned on the left side and the highs are aligned on the right side so the user has to read each temperature number for each day to know how it compares with other days" srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=1024%2C713&amp;ssl=1 1024w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=300%2C209&amp;ssl=1 300w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=768%2C534&amp;ssl=1 768w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=500%2C348&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=800%2C557&amp;ssl=1 800w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=1280%2C891&amp;ssl=1 1280w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=450%2C313&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=1150%2C800&amp;ssl=1 1150w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=250%2C174&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=550%2C383&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=259%2C180&amp;ssl=1 259w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=431%2C300&amp;ssl=1 431w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?resize=718%2C500&amp;ssl=1 718w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky9.png?w=1322&amp;ssl=1 1322w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></figure></div>






<p><strong>Replacing numbers with rough categories</strong></p>



<p>Interpreting hourly distributions of rainfall or snowfall can be difficult. Is 0.25 inches of rain a lot over the next hour? What about 0.2 inches of snow per hour for the next hour, then 0.15 for the hour after that? How do I prepare for these circumstances?</p>



<p>To help users stay informed and take action, the app will often replace precise forecast distributions of rainfall and snowfall with <em>rough</em> categories instead. This design choice has two positive effects on users:</p>



<ul>
<li>It contextualizes the forecast to simpler categories that can help us quickly make changes in our life if needed.
<ul>
<li>Light snow that starts and stops means that my snow shoveling company won’t come out, but heavy snow means they likely will.</li>



<li>Heavy snow means I should probably make sure my outdoor furniture is better covered and ready to take the snow.</li>
</ul>
</li>



<li>It removes a sense of artificial precision that doesn’t <em>really</em> exist because weather forecasts fundamentally have very high uncertainty and error bands.</li>
</ul>


<div>
<figure><img loading="lazy" decoding="async" width="720" height="266" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=720%2C266&amp;ssl=1" alt="Screenshots of snow and rain line charts, where the x-axis is time and the y-axis is a vague gauge of the precipitation. Instead of the precise values, the y-axis has &quot;light,&quot; &quot;medium,&quot; and &quot;heavy&quot; ranges.  " srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=1024%2C378&amp;ssl=1 1024w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=300%2C111&amp;ssl=1 300w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=768%2C283&amp;ssl=1 768w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=1536%2C566&amp;ssl=1 1536w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=500%2C184&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=800%2C295&amp;ssl=1 800w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=1280%2C472&amp;ssl=1 1280w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=1920%2C708&amp;ssl=1 1920w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=450%2C166&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=1360%2C501&amp;ssl=1 1360w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=250%2C92&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=550%2C203&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=488%2C180&amp;ssl=1 488w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=814%2C300&amp;ssl=1 814w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?resize=1356%2C500&amp;ssl=1 1356w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?w=1999&amp;ssl=1 1999w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky10.png?w=1440&amp;ssl=1 1440w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></figure></div>






<p><strong>Contextualized storm map</strong></p>



<p>Simple color scales combined with arrows go a very long way to conveying relevant storm information.</p>


<div>
<figure><img loading="lazy" decoding="async" width="720" height="158" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=720%2C158&amp;ssl=1" alt="Screenshots of different storm systems with colors that indicate the intensity of the storm, and directional arrows showing where the storm system is headed." srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=1024%2C225&amp;ssl=1 1024w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=300%2C66&amp;ssl=1 300w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=768%2C169&amp;ssl=1 768w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=1536%2C337&amp;ssl=1 1536w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=500%2C110&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=800%2C176&amp;ssl=1 800w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=1280%2C281&amp;ssl=1 1280w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=1920%2C422&amp;ssl=1 1920w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=450%2C99&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=1360%2C299&amp;ssl=1 1360w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=250%2C55&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=550%2C121&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=820%2C180&amp;ssl=1 820w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?resize=1366%2C300&amp;ssl=1 1366w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?w=1999&amp;ssl=1 1999w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky11.png?w=1440&amp;ssl=1 1440w" sizes="(max-width: 720px) 100vw, 720px" data-recalc-dims="1"></figure></div>






<p><b>W</b><strong>ind direction</strong></p>



<p>Instead of conveying wind direction using text (“NW” or “Northwest”), the app uses arrows! If the wind shifts directions throughout the day, I can <em>feel</em> the wind direction changing using my body.</p>


<div>
<figure><img loading="lazy" decoding="async" width="473" height="1024" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=473%2C1024&amp;ssl=1" alt="Screen shot of DarkSky app showing the wind speeds for each hour in a horizontal bar chart. At the end of each bar is a directional arrow. " srcset="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=473%2C1024&amp;ssl=1 473w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=138%2C300&amp;ssl=1 138w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=500%2C1083&amp;ssl=1 500w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=450%2C975&amp;ssl=1 450w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=369%2C800&amp;ssl=1 369w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=250%2C542&amp;ssl=1 250w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=550%2C1191&amp;ssl=1 550w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=83%2C180&amp;ssl=1 83w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?resize=231%2C500&amp;ssl=1 231w, https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/darksky12.jpg?w=602&amp;ssl=1 602w" sizes="(max-width: 473px) 100vw, 473px" data-recalc-dims="1"></figure></div>






<h2><strong>Complaints from former Dark Sky users</strong></h2>



<p>As you can tell, I could probably write an <em>entire book</em> about the design of Dark Sky.</p>



<p>Instead, I want to share some passionate comments from other Dark Sky fans. While most of them aren’t data viz or design nerds, they <em>feel</em> that the Apple Weather app is not a sufficient replacement. These people relied on Dark Sky to make decisions and grew very attached to an application that integrated deeply into their lives.</p>



<p>Here are some examples:</p>



<ul>
<li><a href="https://www.reddit.com/r/ios/comments/z11dr9/comment/ix8hqjp/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3" target="_blank" rel="noreferrer noopener">0000GKP on Reddit</a>: “I have already made the transition to the Weather app. <strong>The information is presented in a much less efficient manner than Dark Sky so it takes more effort to get it</strong>, but it is all there (except for cloud cover).”</li>



<li><a href="https://www.reddit.com/r/ios/comments/z11dr9/comment/j0bh6j7/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3" target="_blank" rel="noreferrer noopener">TheGeckoDude on Reddit</a>: “Is there anything that has the precipitation graph similar to dark sky? <strong>The biggest thing I will miss from dark sky is that graph. I’m outside a lot and it is super helpful for knowing when to take cover or when it might rain</strong>. I need to find a feature like that because the vague weather precipitation info will not cut it for me.”</li>
</ul>



<h2>Let’s make data shine!</h2>



<p>Dark Sky started with publicly available data, augmented it with contextualized predictions, rigorously iterated on data visualization design, and packaged all of this into a contextualized experience to make weather data <em>useful</em> for me in my daily life.</p>



<p>While the availability of data has never been higher, we’re still missing software experiences that contextualize that data to make our lives better. Data alone isn’t enough.</p>



<p>The world needs more Dark Sky-like experiences to help us improve our spending habits, help us sleep better, and more. If you’re working on information software, I hope you can be inspired by the body of design and engineering work that Dark Sky pioneered.</p>

<!-- MOLONGUI AUTHORSHIP PLUGIN 4.9.5 -->
<!-- https://www.molongui.com/wordpress-plugin-post-authors -->

<div data-profile-layout="layout-1" data-author-ref="guest-16419" itemscope="" itemid="#molongui-disabled-link" itemtype="https://schema.org/Person" id="mab-6219593189" data-box-layout="stacked" data-box-position="below" data-multiauthor="false" data-author-id="16419" data-author-type="guest" data-author-archived=""><p><span><img loading="lazy" decoding="async" width="129" height="150" src="https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/srini1.png?fit=129%2C150&amp;ssl=1" alt="Headshot of author Srini Kadamati" itemprop="image"></span></p><div><p><h5><span>Srini Kadamati</span></h5></p><div><p>Srini Kadamati currently helps build&nbsp;better data management tools for biomedical research at Manifold.ai. Previously, he taught data visualization and data skills at Dataquest.io and Preset.io.</p></div></div></div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Was the Internet created to survive a nuclear strike? (183 pts)]]></title>
            <link>https://siliconfolklore.com/internet-history/</link>
            <guid>41108884</guid>
            <pubDate>Tue, 30 Jul 2024 13:20:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://siliconfolklore.com/internet-history/">https://siliconfolklore.com/internet-history/</a>, See on <a href="https://news.ycombinator.com/item?id=41108884">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<section>

<h2>Was The Internet designed to survive a nuclear attack?
<small>The History of the Narrative History of the Internet</small>
</h2>
<h2>Was The Internet Designed to Survive a Nuclear Attack?
</h2>
<p><img alt="Nine images depicting the layout of the ARPANET between 1969 and 1978 as a stylized header for the article." title="Nine images depicting the layout of the ARPANET between 1969 and 1978 as a stylized header for the article." src="https://siliconfolklore.com/internet-history/Report4799AHistoryOfArpanetTheFirstDecade_0023.png">
<img src="https://siliconfolklore.com/internet-history/Report4799AHistoryOfArpanetTheFirstDecade_0024.png">
<img src="https://siliconfolklore.com/internet-history/Report4799AHistoryOfArpanetTheFirstDecade_0025.png">
<img src="https://siliconfolklore.com/internet-history/Report4799AHistoryOfArpanetTheFirstDecade_0026.png">
<img src="https://siliconfolklore.com/internet-history/Report4799AHistoryOfArpanetTheFirstDecade_0027.png">
<img src="https://siliconfolklore.com/internet-history/Report4799AHistoryOfArpanetTheFirstDecade_0028.png">
<img src="https://siliconfolklore.com/internet-history/Report4799AHistoryOfArpanetTheFirstDecade_0030.png">
<img src="https://siliconfolklore.com/internet-history/Report4799AHistoryOfArpanetTheFirstDecade_0031.png">
<img src="https://siliconfolklore.com/internet-history/Report4799AHistoryOfArpanetTheFirstDecade_0032.png">
</p>
<center><h4><em>(Note: The print version has videos and some artwork removed. Hyperlinks are numbered like so <tt>[L##]</tt> with a corresponding list at the end)</em></h4></center>
<p>You've probably heard the story of how the Internet was designed to withstand a nuclear attack. It usually goes "DARPA was doing cold war planning and was eager for a distributed resilient command-and-contro"… actually let's hear Professor Rob Larson, author of <cite><a href="https://www.haymarketbooks.org/books/1381-bit-tyrants">Bit Tyrants: The Political Economy of Silicon Valley</a></cite>, <a href="https://kpfa.org/episode/against-the-grain-october-18-2022/">give it on Oct 18, 2022</a>:
</p><figure>
<audio controls="" src="https://siliconfolklore.com/internet-history/rob-larson.mp3"></audio>
<figcaption>Is any of this true?</figcaption>
</figure>
<p>Apparently, the Internet is from "back in the 1980s", was called DARPAnet and was built to defend against a nuclear attack.</p>

<p>Is that true? Let's find out.</p>

<p>This is the story of the various histories of the Internet, where they came from and which ones are real.</p>

<p>The early Internet didn't look like the mountainside NORAD bunkers you see in movies. Instead it was computers sitting in normal offices in university buildings without any backup power, fortification, security (network or physical) and no connections to military communication. Designed for World War 3? The children in <cite><a href="https://www.youtube.com/watch?v=LWH4tWkZpPU">"Duck and Cover"</a></cite> from 1951 had a better chance of surviving.</p>
<p>The "Computing on Doomsday" story is disputed by people who did the actual designing of the Internet and an older network, ARPANET.<sup><a href="#jcr">1</a></sup></p>
<p>In texts giving Internet history a serious treatment, such as the 1996 <cite><a href="https://archive.org/details/wherewizardsstay00haf_vgj/">“Where Wizards Stay Up Late - The Origin of the Internet”</a></cite> you can <a href="https://archive.org/details/wherewizardsstay00haf_vgj/page/n4/mode/2up?q=nuclear">search the word “nuclear”</a> and come up with passages like:</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Robert_Taylor_(computer_scientist)">Bob Taylor</a>… was also on a personal mission to correct an inaccuracy of long standing. Rumors had persisted for years that the ARPANET had been built to protect national security in the face of a nuclear attack. It was a myth that had gone unchallenged long enough to become widely accepted as fact.</p>
</blockquote>
<p>and:</p>
<blockquote>
<p>Lately, the mainstream press had picked up the grim myth of a nuclear survival scenario and had presented it as an established truth. When <a href="http://content.time.com/time/magazine/0,9263,7601940725,00.html">TIME magazine committed the error</a>, Taylor wrote a letter to the editor, but the magazine didn’t print it. The effort to set the record straight was like chasing the wind</p>
</blockquote>
<p>Here’s <a href="https://en.wikipedia.org/wiki/Vint_Cerf">Vint Cerf</a>, one of the key architects of the Internet, in <a href="https://youtu.be/lWyv4wU-WNA?t=4441">July 2022 still trying to correct things</a>. Apparently, the "Networking for the Post-Apocalypse" story has gotten out of hand and people who were there have been trying to politely fix things in vain for decades.</p>
<p>It's understandable how it could spread. Military communications during Nuclear War makes a more memorable story than designing a way to remote access what would become the first massively parallel computer, the <a href="https://en.wikipedia.org/wiki/ILLIAC_IV">ILLIAC IV</a>. The funding and motivation for building ARPANET was partially to get this computer, once built, to be "online" in order to justify the cost of building it. This way more scientists could use the expensive machine.<sup><a href="#cerf">2</a></sup></p>
<p>See you glazed over that. I know it. Isn’t <a href="https://jacobin.com/2022/06/internet-privatization-profit-centralization-democracy"><q>bringing the mainframe to the battlefield</q></a> more sexy? That’s from June 2022.</p>
<p>To find out where this story comes from we're going back to when hard drives were measured in megabytes and colorful floppies arrived in your mail promising you 100 free hours online.</p>
</section>
<section>
<h2>The origin of the origin myth</h2>
<p>That's not a typo. We're trying to find out when the folklore began; the history of this "History of the Internet".</p>
<p>Prior to 1991 there is no history narrative which has the nuclear origin story so let's look at what came before.<sup><a href="#prior">3</a></sup></p>
<p>Back then, the stories more closely resembled the one Cerf and Taylor of the ARPANET project advocate for. In April 1988 for instance, <a href="https://twitter.com/slfisher">Sharon Fisher</a><sup><a href="#sharon">4</a></sup> in <cite><a href="https://books.google.com/books?id=pj0EAAAAMBAJ&amp;pg=PA57&amp;hl=en&amp;sa=X#v=onepage&amp;q&amp;f=false">Infoworld</a></cite> says:</p>
<blockquote>
<p>The network was originally set up for universities and research organizations to exchange information efficiently.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/DARPA">DARPA</a>, the organization that funded the development of ARPANET in the 1960s (The "D" was added to ARPA in 1972) has a similar story in <cite><a href="https://www.researchgate.net/publication/235051902_DARPA_Technical_Accomplishments_An_Historical_Review_of_Selected_DARPA_Projects_Volume_1">“DARPA Technical Accomplishments”</a></cite>, from 1990. ARPANET is in the “Information Processing” section claiming it's part of a larger “batch-processing” to “time-sharing” revolution (<a href="#time-sharing">more about this later</a>). From section 20-1:</p>
<blockquote>
<p>After time sharing had been demonstrated and its impact began to be widespread in the mid 1960’s, the next logical step in this program was the linking of computers and terminals by communications networks, so that computer capabilities, programs and file resources could be accessed readily and shared remotely. The mainstream of ARPANET development involved individuals and institutions in the computer research communities which were supported by the growing ARPA <a href="https://en.wikipedia.org/wiki/Information_Processing_Techniques_Office">IPTO</a> program.</p>
</blockquote>
<p>So what happened? We're going to set our Wayback machine to 1991 to find out. But first, homework!</p>
</section>
<section>
<h4>Common Knowledge or "Come on! Knowledge!"</h4>
<p>Before we continue we need a headache-inducing distinction between <a href="https://en.wikipedia.org/wiki/Common_knowledge">"common knowledge or wisdom"</a> and <a href="https://en.wikipedia.org/wiki/General_knowledge">"general knowledge"</a>. Common knowledge is specific to a community and general knowledge is not. For instance, cultural customs are common knowledge.</p>
<p>This difference is important. If you meet a foreigner, you'll likely tell them about regional laws or customs. You don't need to cite anything or know the history to be correct. It's not general knowledge because you also presume the foreigner doesn't know it.</p>
<p>In our context, <b><em>common knowledge is a statement which can be falsified and verified wherein the one who states feels an obligation to share the information but doesn't feel an obligation to falsify or verify the statement or provide a mechanism for others to do so</em></b>. In more coarse language, these are facts that go uncited.</p>
<p>You may notice there is a requisite of commonality for common knowledge. When trying to figure out narrative histories, whether someone cites a passage or not is a forensic tool of how common they considered the knowledge. Generally speaking, presuming good intent, the more careful a narration is, the more likely we are to an early version of it. This is of course a statistical and not anecdotal statement.</p>
<p>Alright, good homework. You get an A+. Let's continue.</p>
</section>
<section>
<h3>1991: Network World Vol.8-33 P65§12. It Begins.</h3>
<p>The first instance<sup><a href="#first">5</a></sup> of the misattribution is both a victim of how chronology works and slight journalistic error. The <cite><a href="https://books.google.com/books?id=mREEAAAAMBAJ&amp;pg=PA65&amp;hl=en&amp;sa=X#v=onepage&amp;q&amp;f=false">August 19, 1991 issue of Network World</a></cite> has a biography on someone who will be important in our story, <a href="https://en.wikipedia.org/wiki/Paul_Baran">Paul Baran</a>. It’s a long passage. I snipped the relevant parts below:</p>
<blockquote>
  <p>… questions were being asked regarding the U.S.’s ability to survive a pre-emptive nuclear attack with enough of its military capability intact … Baran and his RAND colleagues decided to keep the packet-switching research unclassified… After delays caused by political issues, the government commissioned a public net based on Baran’s research <b>(my note: false)</b>. In 1969, the Defense Advanced Research Projects Agency completed the first packet switched net, dubbed ARPANET.</p>
</blockquote>
<p>This is the correct timeline, but not the correct chain of events. It’s not the last time that mistake will be made.</p>
<p>This passage is buried right near the end of the magazine, after the small back-of-the issue black and white ads. But this is 1991, 13 days after <a href="https://en.wikipedia.org/wiki/Tim_Berners-Lee">Tim Berners-Lee</a> <a href="https://www.w3.org/People/Berners-Lee/1991/08/art-6484.txt">announced the WorldWideWeb</a>. Who cares about the Internet except for a bunch of nerds and weirdos? I'm sure it will continue to be obscure and irrelevant!</p>
<p>Let's move on to 1992.</p>
</section>
<section>
<h3>1992: The Inter-what?!</h3>
<p>So apparently the Internet is becoming a big deal. The first prominent and more direct "Internet was designed to survive bombs" connection is in <cite><a href="https://archive.org/details/wholeinternetuse00krol/page/10/mode/2up">“The Whole Internet User’s Guide &amp; Catalog” from September 1992</a></cite> by <a href="https://en.wikipedia.org/wiki/Ed_Krol">Ed Krol</a>. This is one of those books that’s so successful he came back to pen two sequels. <a href="https://www.amazon.com/Internet-Catalog-Intanetto-yuzazu-Japanese/dp/4900718122/">Amazon even sells a Japanese version</a>. Here, near the beginning of the book, we get our narrative. However, instead of “nuclear” it’s an unspecified “bomb attack”:</p>
<figure>
<img src="https://siliconfolklore.com/internet-history/first-reference.png" alt="An image of the first page of the book. The important text is 'research about how to build networks that could withstand partial outages (like bomb attacks) and still function'" title="An image of the first page of the book. The important text is 'research about how to build networks that could withstand partial outages (like bomb attacks) and still function'"><figcaption><b id="img-1">Figure 1.</b> Is this the beginning?</figcaption>
</figure>
<p>This is an honest error connecting a project that didn’t get approved, the bomb resilient network Paul Baran proposed to the Air Force, with the ARPA Network project (more on both of these later). Specifically this is referring to what Baran called <a href="https://www.rand.org/content/dam/rand/pubs/research_memoranda/2006/RM3103.pdf"><q>hot-potato routing</q></a> in 1964.</p>
<p>Without knowing the individuals involved in each project it is understandable to assume they are connected; that a later effort was a result of an earlier effort as opposed to an independent one.</p>
<p>The ARPA narrative continues to persist as well such as in the 1992 <cite><a href="https://archive.org/details/dnsbindinnutshel00albi/page/n29/mode/2up">“DNS and BIND in a nutshell”</a></cite> by <a href="https://www.linkedin.com/in/paul-albitz-9602294/">Paul Albitz</a> and <a href="https://www.linkedin.com/in/cricketliu/">Cricket Liu</a>:</p>
<blockquote>
<p>The original goal of the ARPANET was to allow government contractors to share expensive or scarce computing resources. <b>(my note: time-sharing)</b> From the beginning, however, users of the ARPANET also used the network for collaboration. This collaboration ranged from sharing files and software and exchanging electronic mail - to joint development and research using shared remote computers.</p>
</blockquote>
<p>Looks like there's now two fairly incompatible stories. Well I'm sure this will be tidied right up. Hold on, I heard from the future. Apparently no, it's just a bigger mess.</p>
</section>
<section>
<h3>1993: This thing's getting popular…</h3>
<p>By 1993, second generation references start to pop up. For instance, <cite><a href="https://archive.org/details/internetfordummi03levi/page/11/mode/1up">"The Internet for Dummies"</a></cite>, in a section written by <a href="https://en.wikipedia.org/wiki/John_R._Levine">John Levine</a> elaborates multiple narratives including from Ed Krol's 1992 work down to oddly specific details:</p> 
<figure>
<picture>
<source srcset="https://siliconfolklore.com/internet-history/inet-for-dummies.webp" type="image/webp">
<img src="https://siliconfolklore.com/internet-history/inet-for-dummies.jpg" alt="Two screenshots comparing an almost identical passage between the two books. The text is 'these days backhoes cutting cables are more of a threat' compared with 'an errant backhoe cutting a cable is just as much of a threat'" title="Two screenshots comparing an almost identical passage between the two books. The text is 'these days backhoes cutting cables are more of a threat' compared with 'an errant backhoe cutting a cable is just as much of a threat'">
</picture>
<figcaption><b id="img-2">Figure 2.</b> “The Whole Internet User’s Guide &amp; Catalog”, 1992 versus "Internet for Dummies", 1993.</figcaption>
</figure>
<p>(<b>Note:</b> John Levine responded to and disputed this section. Please <a href="#backhoe">see the note below for more information</a>.)</p> 
<p>The generic bomb gets an upgrade in what was at the time, a best-seller, the 1993 text, “The Internet Navigator” by <a href="https://www.planetary.org/profiles/paul-gilster">Paul Gilster</a> which, <a href="https://archive.org/details/internetnavigato00paul/page/14/mode/2up">on page 14 says in an uncited passage</a>:</p>
<blockquote>
<p>The ARPANET was a network connecting university, military, and defense contractors; it was established to aid researchers in the process of sharing information, and not coincidentally to study how communications could be maintained in the event of nuclear attack.</p>
</blockquote>
<p>Ladies and gentlemen, we’ve gone nuclear.</p>

<p>Also, notably, in February of 1993, the science fiction author <a href="https://en.wikipedia.org/wiki/Bruce_Sterling">Bruce Sterling</a> writes perhaps the most compelling narrative fixture of what becomes a later source. This text <a href="https://groups.google.com/g/alt.politics.datahighway/c/FNqaxfFk2hU/m/2E8hxTU823UJ">was shared around USENET</a> throughout 1993. USENET was in practice, social networking over email.</p>
<p>In it there’s a clean narrative line that’s drawn between Paul Baran and ARPANET. It’s a long passage so some cutting was done:</p>
<blockquote>
<p>…the RAND Corporation, America’s foremost Cold War think-tank, faced a strange strategic problem. How could the US authorities successfully communicate after a nuclear war?</p>
<p>Postnuclear America would need a command-and-control network, linked from city to city, state to state, base to base. But no matter how thoroughly that network was armored or protected, its switches and wiring would always be vulnerable to the impact of atomic bombs. A nuclear attack would reduce any conceivable network to tatters. …</p>
<p>RAND mulled over this grim puzzle in deep military secrecy, and arrived at a daring solution. The RAND proposal (the brainchild of RAND staffer Paul Baran) was made public in 1964. In the first place, the network would <em>have no central authority.</em> Furthermore, it would be <em>designed from the beginning to operate while in tatters.</em> …</p>
<p>During the 60s, this intriguing concept of a decentralized, blastproof, packet-switching network was kicked around by RAND, MIT and UCLA. The National Physical Laboratory in Great Britain set up the first test network on these principles in 1968. <b>(my note: this is the transition)</b> Shortly afterward, the Pentagon’s Advanced Research Projects Agency decided to fund a larger, more ambitious project in the USA. The nodes of the network were to be high-speed supercomputers (or what passed for supercomputers at the time). These were rare and valuable machines which were in real need of good solid networking, for the sake of national research-and-development projects.</p>
</blockquote>
<p>Look how smooth that is with the phrase "Shortly afterward". He's not exactly <em>saying</em> they're explicitly connected, just that's the chronology. Someone misreading this as a claim of attribution probably can't be faulted.</p>
<p>This connection can be found in other texts such as 1994’s <cite><a href="https://archive.org/details/internetconnecti0000quar/page/20/mode/2up">“The Internet Connection: System Connectivity and Configuration”</a></cite> where the author, <a href="https://en.wikipedia.org/wiki/John_Quarterman">John Quarterman</a> states without citation (going back to our "common knowledge" definition above) in a section titled “Surviving a Nuclear War” a very similar passage he stated in a 1993 text co-authored with <a href="https://www.linkedin.com/in/carlmitchell/">Smoot Carl-Mitchell</a>†, <cite><a href="https://archive.org/details/practicalinterne0000carl/page/4/mode/2up">“Practical Internetworking with TCP/IP and Unix”</a></cite>:</p>
<figure>
<img src="https://siliconfolklore.com/internet-history/quarterman.png" alt="Another split image demonstrating an almost identical passage between two books. The passage reads 'The ARPANET was a direct product of the Cold War. ARPA itself was formed in response to the launching of the Sputnik satellite by the Soviet Union in 1957. It was intended to ensure the US got ahead in military research and stayed there. As DoD urgently wanted military command and control networks that could survive a nuclear war...'" title="Another split image demonstrating an almost identical passage between two books. The passage reads 'The ARPANET was a direct product of the Cold War. ARPA itself was formed in response to the launching of the Sputnik satellite by the Soviet Union in 1957. It was intended to ensure the US got ahead in military research and stayed there. As DoD urgently wanted military command and control networks that could survive a nuclear war...'"><figcaption><b id="img-3">Figure 3.</b> Quite similar</figcaption>
</figure>
<p>It’s worth noting that John Quarterman might have had his mind changed on this. In an earlier, widely cited, 1990 text by him, <cite><a href="https://archive.org/details/matrixcomputernet00quar/page/142/mode/2up">"The Matrix: Computer Networks and Conferencing Systems Worldwide"</a></cite>, he used a citation, suggesting we haven't entered a common knowledge phase, and told a much more ARPA history as follows:</p>
<blockquote>
<p>In the beginning, ARPA…noticed that its contractors were tending to request the same resources (such as databases, powerful CPUs, and graphics facilities) and decided to develop a network among the contractors that would allow sharing such resources [Roberts 1974].</p>
</blockquote>
<p>Why didn’t he stick with that?</p>

<p>Indeed, it looks like Quarterman had multiple tracks in his writing. For our purposes we can say there was one for a general audience and one with much more rigor (he claims this is a too primitive split see the <a href="#all-emails">full email dump below if interested</a>). For instance, in the <a href="https://archive.org/details/sim_unix-review_1993-08_11_8/page/n79/mode/2up">before August</a>, 1993 more academic text with <a href="https://dl.acm.org/profile/81100325226">Susanne Wilhelm</a>, <cite><a href="https://archive.org/details/unixposixopensys0000quar/page/194/mode/2up">"UNIX, POSIX, and Open Systems: The Open Standards Puzzle"</a></cite>, the story given is:</p>
<blockquote>
  <p>
  …The ARPANET was created by DARPA as an experiment in and platform for research in packet switched networking.
  </p>
</blockquote>
<p>Regardless, the "common knowledge" narrative continues to evolve.</p>
</section>
<section>
<h3>1994: The Cathedral Becomes a Bazaar</h3>
<p>It's 1994! Along with GeoCitites, Lycos and CDNow, we get perhaps the first claim of a direct causal connection from <cite><a href="https://www.google.com/books/edition/INSCOM_Journal/wqkrAAAAYAAJ?hl=en&amp;gbpv=1&amp;pg=RA3-PA10&amp;printsec=frontcover">INSCOM (Army Intelligence &amp; Security Command) in March 1994 on page 10</a></cite>:</p>
<blockquote>
<p>…says University of Pennsylvania Telecommunications Professor David Farber, “that the Internet is actually a cold war relic, designed in the 1960s as a decentralized military communications system <b>capable of surviving a nuclear attack</b>. The Internet, which has grown explosively ever since Hurricane Andrew in 1992, has now proved its usefulness for emergency action in the civilian world.”</p>
</blockquote>
<p>There's that popular phrase "capable of surviving a nuclear attack" starting up. It's a good search term if you just feel like reading a mountainful of versions of this narrative. <a href="https://en.wikipedia.org/wiki/David_J._Farber">David Farber</a> is not a nobody. Designer of predecessor networks such as <a href="https://en.wikipedia.org/wiki/CSNET">CSNET</a>, <a href="https://en.wikipedia.org/wiki/National_Science_Foundation_Network">NSFNet</a>, and <a href="https://en.wikipedia.org/wiki/National_research_and_education_network">NREN</a>, he’s a <a href="https://en.wikipedia.org/wiki/Bell_Labs">Bell Labs</a>, <a href="https://en.wikipedia.org/wiki/Scientific_Data_Systems">SDS</a> and <a href="https://en.wikipedia.org/wiki/RAND_Corporation">RAND Corporation</a> alumni. That last one, RAND, will be more important in our story.</p>
<p>We also find the older narrative “ARPANET is an indirect consequence of nuclear war planning” starting to become "common knowledge" such as in <cite><a href="https://www.google.com/books/edition/Japanese_Technical_Literature_Bulletin/gLIvm9n9a3EC?hl=en&amp;gbpv=1&amp;pg=RA7-PA5&amp;printsec=frontcover">“Japan’s Information Highway” from Nov 26, 1994</a></cite>, also uncited:</p>
<blockquote>
<p>Spawned by a Pentagon doomsday scheme to keep US military computers operating in the event of a nuclear war, the Internet…</p>
</blockquote>
<p>In all these claims the statement was ARPA was looking for a resilient network due to cold war politics with the risk of nuclear war playing somewhere in the background and the ARPANET came out of this dynamic.</p>
<p>Also by 1994 the ARPA people have started to hear the nuclear narrative a bit too much. In <cite><a href="https://books.google.com/books?id=URcEAAAAMBAJ&amp;lpg=PA61&amp;pg=PA61#v=onepage&amp;q&amp;f=false">"Network World" from Aug 22, 1994</a></cite> there's “Myth vs.&nbsp;Reality” inset from <a href="https://en.wikipedia.org/wiki/Leonard_Kleinrock">Leonard Kleinrock</a> in an absolutely futile effort to try and dislodge things:</p>
<figure>
<picture>
<source srcset="https://siliconfolklore.com/internet-history/myth-v-reality.webp" type="image/webp">
<img src="https://siliconfolklore.com/internet-history/myth-v-reality.jpg" alt="The text of the image reads: Myth: ARPANET was conceived as a way to maintain government data communications after a nuclear war. Reality: ARPANET was conceived as a way to save money by getting government-funded researchers to share computers rather than each of them buying their own. Source: Leonard Kleinrock, UCLA" title="The text of the image reads: Myth: ARPANET was conceived as a way to maintain government data communications after a nuclear war. Reality: ARPANET was conceived as a way to save money by getting government-funded researchers to share computers rather than each of them buying their own. Source: Leonard Kleinrock, UCLA"><figcaption><b id="img-4">Figure 4.</b> Sigh, we’re still trying to correct this</figcaption>
</picture>
</figure>
<p>It was hopeless. Network World was the first source we found for spreading it to begin with.</p>
<p>While we're here, the article that was referenced in "Where the Wizards Stay Up Late" from the beginning is the lead for the <cite><a href="https://content.time.com/time/subscriber/article/0,33009,981132,00.html">July 25, 1994 issue of TIME Magazine</a></cite><sup><a href="#time-date">6</a></sup>. Here's the now common story:</p>
<blockquote>
  <p>The Internet evolved from a computer system built 25 years ago by the Defense Department to enable academic and military researchers to continue to do government work even if part of the network were taken out in a nuclear attack. It eventually linked universities, government facilities and corporations around the world, and they all shared the costs and technical work of running the system.</p>
</blockquote>
</section>
<section>
<h3>1995: The extended universe</h3>
<p>1995! Let's log on to AOL and use the keyword MovieLink to find the screentimes for The Net with Sandra Bullock. Then we'll hop in the minivan and watch it at the mall!</p>
<div>
<p>"Oh what do you mean we have to watch PBS instead?! Alright alright fine, let's <a href="https://archive.org/details/The_Internet_Show_KCET_PBS_1994">watch the documentary</a>!":</p>
<figure>
<iframe alt="The predecessor of the internet was a child of the Cold War first developed by the defense departments advanced research projects agency or ARPA partly to ensure the data communications could survive in case of a nuclear attack. Created in the late 1960s ARPANET first connected four computers in California and Utah campuses using a new networking technique. It allowed researchers to run programs on remote computers. Later other research institutions and military sites were added. The idea was even if one part of the system were damaged, the rest would still function and it worked." title="The predecessor of the internet was a child of the Cold War first developed by the defense departments advanced research projects agency or ARPA partly to ensure the data communications could survive in case of a nuclear attack. Created in the late 1960s ARPANET first connected four computers in California and Utah campuses using a new networking technique. It allowed researchers to run programs on remote computers. Later other research institutions and military sites were added. The idea was even if one part of the system were damaged, the rest would still function and it worked." width="560" height="315" src="https://www.youtube.com/embed/S_JzUBP_1wM" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
<figcaption><b id="vid-1">Video 1.</b> We even get to see the explosion! (♿ <a href="#pbs-text">Transcript</a>)</figcaption>
</figure>
</div>
<p>By now the nuclear narrative has become "common knowledge" so people start making logical inferences from it in official documents such as the US Congressional Office of Technology Assessment's <cite><a href="https://www.google.com/books/edition/Global_Communications/m4keIKypadcC?hl=en&amp;gbpv=1&amp;pg=PA102&amp;printsec=frontcover">“Global Communications: Opportunities for Trade and Aid”</a></cite> from 1995, page 102:</p>
<blockquote>
<p>…the desire for a computer network that would remain operational in the event that part of the network was destroyed by a nuclear explosion. The ARPANET therefore had no central control.</p>
</blockquote>
<p>You even get hybrids combining multiple narrative strains. Watch it grow in the 1995 academic text, <cite><a href="https://www.google.com/books/edition/Technology_in_the_national_interest/jEqFQv1P_UYC?hl=en&amp;gbpv=1&amp;pg=PA66&amp;printsec=frontcover">“Technology in The National Interest”</a></cite>:</p>
<blockquote>
<p>war planners undertook and effort to ensure the survivability of America’s computing and communication capabilities in a nuclear first strike to preserve a credible U.S. retaliatory capability. From this initiative the first network, ARPANET, was established, allowing geographically separated researchers to share computer resources.</p>
</blockquote>
<p>After that it was off to the races, such as in this 1995 text, <cite><a href="https://archive.org/details/vrmlbrowsingbuil00pesc/page/10/mode/2up">"VRML Browsing &amp; Building Cyberspace: The Definitive Resource for VRML Technology"</a></cite>:</p>
<figure>
<img src="https://siliconfolklore.com/internet-history/routing-errors.png" alt="The text of the image is 'To ARPAnet, nuclear war is no more than a bunch of routing errors that it could immediately correct'" title="The text of the image is 'To ARPAnet, nuclear war is no more than a bunch of routing errors that it could immediately correct'"><figcaption><b id="img-5">Figure 5.</b> What have we done?!</figcaption>
</figure>
<p>This story has serious sticking power and other than for the people who actually built the Internet, nobody seems to have any desire to correct it.</p>
</section>
<section>
<h2 id="survey">Narrative Survey</h2>
<p>The history narrative appears to be able to be clustered in three general camps:</p>
<ul>
  <li><b>ARPA:</b> Documents bearing the ARPA name or people directly involved with the ARPANET project. (A)</li>
  <li><b>Peers:</b> Either scholars or people who worked on other networks. (P)</li>
  <li><b>Outsiders:</b> Those who are not in the first two groups but are what we called knowledge staters, such as reporters. They either credit members of either of the first two groups or nobody. (A<sub>o</sub>, P<sub>o</sub>, or N<sub>o</sub>). Outsiders Nobody (N<sub>o</sub>) is possibly equivalent to "common knowledge".</li>
</ul>
<p>
The narrative has been broken down into a number of story points and were arranged as chronologically as possible. The methodology <a href="#survey-method">can be found at the end</a>.</p>
<ul>
  <li>Blue cells with a ✓ mean a claim was made. For instance, "Paul Baran invented packet-switching at RAND which led to ARPAnet".</li>
  <li>Grey cells with a § sign means things were mentioned but not causally linked. For instance, "Before ARPAnet, Paul Baran also had a packet-switching project at RAND" would be "sectional" and not "causal".</li>
  <li>Red cells with a ✗ mean a claim was refuted. For instance, "ARPAnet's architecture was distinct from Paul Baran's and both groups say they're unrelated".</li>
  <li>Empty cells mean nothing either way was said.</li>
  <li>Word count is the number of words dedicated to the telling of the narrative.</li>
  <li>The "faction" is approximately where the narrative split is (see below).</li>
  <li>The columns with the <span>thicker border</span><span>green background (♿ titled "arpa" and for the color-blind, vertical lines)</span> are ARPA faction narratives. They are additionally stylized to demonstrate a point made below.</li>
</ul>
<div>
<h4>Table headers</h4>
<ol>
<li>1988/04: <a href="https://books.google.com/books?id=pj0EAAAAMBAJ&amp;pg=PA57&amp;hl=en&amp;sa=X#v=onepage&amp;q&amp;f=false">Infoworld</a></li>
<li>1990/01: <a href="https://archive.org/details/matrixcomputernet00quar/page/142/mode/2up">Matrix</a></li>
<li>1990/02: <a href="https://www.researchgate.net/publication/235051902_DARPA_Technical_Accomplishments_An_Historical_Review_of_Selected_DARPA_Projects_Volume_1">DARPA</a></li>
<li>1990/09: <a href="https://www.nytimes.com/1990/09/02/business/creating-a-giant-computer-highway.html">NYT</a></li>
<li>1991/08: <a href="https://books.google.com/books?id=mREEAAAAMBAJ&amp;pg=PA65&amp;hl=en&amp;sa=X&amp;q&amp;f=false">Network World</a></li>
<li>1991/09: <a href="https://archive.org/details/computer-magazine-1991-09/page/n69/mode/2up">Computer Magazine</a></li>
<li>1992/09: <a href="https://archive.org/details/wholeinternetuse00krol/page/10/mode/2up">Krol</a></li>
<li>1992/10: <a href="https://archive.org/details/dnsbindinnutshel00albi/page/n29/mode/2up">DNS/BIND</a></li>
<li>1993/02: <a href="https://groups.google.com/g/alt.politics.datahighway/c/FNqaxfFk2hU/m/2E8hxTU823UJ">Sterling</a></li>
<li>1993/<a href="https://archive.org/details/sim_special-libraries_fall-1993_84_4/page/n13/mode/2up">09</a>: <a href="https://archive.org/details/internetnavigato00paul/page/14/mode/2up">Gilster</a></li>
<li>1993/<a href="https://greensboro.com/internet-s-growli-is-catching-lie-eye-of-businesses-for/article_23e4343f-2d3f-53e1-88ee-a0a2943cf95f.html">11</a>: <a href="https://archive.org/details/internetfordummi03levi/page/11/mode/1up">The Internet For Dummies</a></li>
<li>1994/<a href="https://archive.org/details/login_mar94/page/n43/mode/2up">02</a>: <a href="https://archive.org/details/internetconnecti0000quar/page/20/mode/2up">Quarterman</a></li>
<li>1994/03: <a href="https://www.google.com/books/edition/INSCOM_Journal/wqkrAAAAYAAJ?hl=en&amp;gbpv=1&amp;pg=RA3-PA10&amp;printsec=frontcover">INSCOM</a></li>
<li>1994/<a href="https://archive.org/details/ConneXions.08.07/page/26/mode/2up">07</a>: <a href="https://archive.org/details/internetguidefor00dani/page/8/mode/2up">The Internet Guide for New Users</a></li>
<li>1994/07: <a href="https://content.time.com/time/subscriber/article/0,33009,981132,00.html">Time</a></li>
<li>1994/08: <a href="https://books.google.com/books?id=URcEAAAAMBAJ&amp;lpg=PA61&amp;pg=PA61#v=onepage&amp;q&amp;f=false">Network World</a></li>
<li>1994/08: <a href="https://www.latimes.com/archives/la-xpm-1994-08-11-me-26027-story.html">LA Times</a></li>
<li>1995/??: <a href="https://archive.org/details/teachyourselfint00rand/page/34/mode/2up">Teach yourself the Internet in a Week</a></li>
<li>1995/<a href="https://www.imdb.com/title/tt7076054/">08</a>: <a href="https://archive.org/details/TheInternetShow1995IzqMrhG50q0/The+Internet+Show+(1995)-IzqMrhG50q0.mp4">The Internet Show</a></li>
<li>1995/09: <a href="https://www.google.com/books/edition/Global_Communications/m4keIKypadcC?hl=en&amp;gbpv=1&amp;pg=PA102&amp;printsec=frontcover">Global Communications</a></li>
<li>2022/02: <a href="#narrative">Siliconfolklore.com</a></li>
</ol>
</div>
<center>

</center>
<section>
<h4>The Winner's Circle Theory</h4>
<p>There appears to roughly be two schools. The Peer group gave more encompassing histories then the ARPA group. The ARPA group told a history to more or less the exclusion or omission of other projects.</p>
<p>Because the Peer group had more moving pieces, a wider diversity of narratives could be constructed from it.</p>
<p>This is more a social phenomena than anything intentional and will be explored in other articles. People in "the winner's circle", defined by that which became dominant, tend to narrow the narrative and give their efforts a higher priority while the outsiders in other notable projects, tend to broaden the narrative and level things out.</p>
<p>They both play an important role in the documentation. The outsiders carefully document the important contributions of others while the winner's circle carefully document their own contributions. They pair together to form a complete picture.</p>
</section>
<h3 id="narrative">The evidence supported story</h3>
<p>Before we go on let's untangle things. I believe this is what has direct evidence. As this is yet an additional narrative, it's been included as the right-most column in <a href="#tbl-1">Table 1</a>:</p>
<ul>
  <li><a href="https://archive.org/details/RecommendationToTheAirStaff/mode/2up">Paul Baran and RAND had a proposed network in 1965 to USAF</a>.</li>
  <li>(same reference) It was not intended to use the phone system but instead, be an independent network built parallel to the electric grid.</li>
  <li><a href="https://www.rand.org/pubs/research_memoranda/RM3103.html">It was designed to be redundant, but not to scale</a>.</li>
  <li>(same reference) It was meant to be used for command and control loads and not intended to be expanded beyond military communication and use.</li>
  <li><a href="https://archive.org/details/DraftReportForDataCommunicationFacilities/page/n1/mode/2up">The 1967 ARPA Network proposal by BBN says it's for research, sharing, and cost cutting</a>.</li>
  <li>(same reference) It was to run on normal phone lines and be focused on connecting nodes, presumed the network would be cared for, and did not offer extreme redundancy.</li>
</ul>
<p>
Additionally, Cerf claims the following in personal email correspondances, with verifications below:</p>
<blockquote><p>
Kleinrock did queueing theoretic analysis of capacity, delay, throughput of store-and-forward networks. The routing protocols of ARPANET were developed at Bolt, Beranek and Newman. Bob Kahn, John McQuillan and William Crowther and maybe David Walden (?) were principal architects of the routing system of the ARPANET.</p>
</blockquote>
<p>Kleinrock did lots of networking work. This is a claim of the work he did specifically for ARPANET. It can be confirmed in the 1970 ARPA document, <a href="https://archive.org/details/DTIC_AD0711342/page/n9/mode/2up">DTIC AD0711342</a>.</p>
<blockquote><p>BBN did its routing work independent of Davies <b>(my note: Paul Baran believes it was based on Davies work <a href="#baran-agrees">in a 2001 Wired article</a>)</b> Roberts learned of the <a href="https://en.wikipedia.org/wiki/NPL_network">NPL work</a> while at a 1967 ACM conference in Gatlinburg, TN. One of the NPL team, Roger Scantlebury, was there and told Roberts about the NPL packet network (Davies coined the term "packet" to describe the system he had designed). The NPL network was a single node so there was no real routing in the system. Davies did invent something he called "isarhythmic networking" but it did not scale and was not implemented as far as I am aware.</p></blockquote>
<p>Here's the <a href="https://dblp.org/db/conf/sosp/sosp67.html">1967 ACM Conference</a> proceedings. There are two adjacent records in the proceedings:
</p><ol>
  <li>Donald W. <b>Davies</b>, Keith A. Bartlett, Roger A. <b>Scantlebury</b>, Peter T. Wilkinson:<br>
  A digital <b>communication network for computers</b> giving rapid response at remote terminals.</li>
  <li>Lawrence G. <b>Roberts</b>:<br>
  Multiple computer networks and intercomputer communication.</li>
</ol>

<p>Additionally Cerf backs the claim of the scaling over reliability aspect of ARPANET which really lays bare any design for nuclear survivability hypothesis:</p>
<blockquote><p>
Regarding unreliability - yes, alternative, adaptive routing was part of the ARPANET design to deal with link and/or node (packet switch) failures but the protocols internal to the ARPANET were designed to include end-to-end retransmission WITHIN THE NETWORK. The Host-Host protocol (also known as the Network Control Protocol) basically assumed the network was reliable. The Internet design, which had to cope with unreliable radio communications of the Packet Radio and Packet Satellite networks, required end-to-end retransmission at the HOST level. 
</p></blockquote>
<p>Probably the most approachable narrative history of ARPA's side of the story is from a 1999 documentary, Nerds 2.0.1. The history goes from the timestamp at 19:22 to the end of the video with a bunch of interludes that make you think they're moving on from the narrative, but then they go right back. I clicked the gear, then playback speed and I know you will too.</p>
<figure>
<iframe width="560" height="315" src="https://www.youtube.com/embed/L4D2nxQBmOM?start=1162" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
<figcaption><b id="vid-2">Video 2.</b> I'll hold my tongue on the narrator. However, <a href="https://en.wikipedia.org/wiki/Robert_X._Cringely#InfoWorld">Wikipedia does not</a>.</figcaption></figure>

<p>
The first article about ARPANET I could find was before it was called ARPANET. In September of 1968, <cite><a href="https://archive.org/details/bitsavers_Electronic9680916_134517369/page/62/mode/2up">Electronics Magazine</a></cite>:
</p><blockquote>
  <p>
The first time-sharing network using incompatible computers has come a big step closer to reality. The project, announced last year, now has a timetable and is ready to buy hardware, says Lawrence G. Roberts, assistant to the director of information processing at the Pentagon’s Advanced Research
Projects Agency.
In the ARPA network, a user of one computer will have access to programs in all other machines, even if those programs won’t run on the computer to which he’s directly connected.
  </p>
</blockquote>
<p>This was followed up two weeks later by a <a href="https://archive.org/details/bitsavers_Electronic9680930_123128184/page/130/mode/2up">4-page article</a>. The analysis of this text is amazing. And I quote, from 1968, before the ARPANET was built:</p>
<blockquote>
  <p><em>(Distributed Denial of Service Attacks):</em> Roberts notes that sites with smaller computers could start “ganging up” on those with larger processors. This could mean that a lot of work could be thrust upon, say, the Univac 1108’s in the network.</p>
  <p><em>(Societal Implications of the Network):</em> …geographical separation and user isolation may limit the network’s utility. Mills believes the problem may grow as the user population increases. “There should have been a definition of the relationship between a man and his program, as a unit, and the distant central machine or other data processing gear with which they are working.” In other words, Mills believes ARPA put the cart before the horse by going ahead on interconnecting computers before determining what the benefits of such a network would be.</p>
</blockquote>
<p>I think this is prescient but I might be reading too much into this. Vint Cerf thinks it was impossible to predict things.<sup><a href="#cerf">2</a></sup></p>
</section>
<section>
<h3 id="common">How common are the narratives</h3>
<p>Barry Gerber, who <a href="https://siliconfolklore.com/internet-history/gerber-email.txt">was contacted for this story</a> and did some early social science research about the ARPAnet at UCLA presented an interesting question: "I have to wonder how widespread the belief in this particular myth is today".</p>
<p>To make an attempt to discover this, a corpus of 13.5 billion <a href="https://files.pushshift.io/reddit/comments/">Reddit comments</a> were analyzed with <a href="https://github.com/kristopolous/sf/blob/main/narrative-extractor.sh">a complex regex yielding 191,725 candidate comments</a>. Then <a href="https://github.com/kristopolous/sf/blob/main/narrative-counter.py">a second pass was done</a> using a naive Regex classifier with another naive way to see if the user is negating (as in saying "arpanet was not about ww3"). No stemming, tokenizing or lemmatization was done; scikit wasn't even included. This is certainly ongoing research. (<a href="https://en.wikipedia.org/wiki/BERT_(language_model)">BERT Transformers</a> are the most likely next approach along with also using the <a href="https://files.pushshift.io/hackernews/">HackerNews corpus</a>.)</p>
<p>The first column are affirmatives of the story point and the second columns are instances where negation appeared. The "sample size" is the total number of comments considered for a given year. You can hover over each cell to see the value on desktop.</p>
<center>
<h2>This table does not work on the print version due to being based on cell opacity and background colors. Sorry, I'll get around to fixing this.</h2>
<div>
<!-- This is generated from the python program linked above. -->
<table id="heat">
<caption><b id="tbl-2">Table 2.</b> Heatmap of Internet history narrative story points from Reddit comments.</caption>
<thead><tr><th>Year</th><th>Sample Size</th><th colspan="2">Paul Baran/RAND</th><th colspan="2">Bomb</th><th colspan="2">Nuclear</th><th colspan="2">Decentralized</th><th colspan="2">Cost Reduction</th><th colspan="2">Research</th><th colspan="2">Collaboration</th></tr></thead><tbody>
<tr><td>2009</td><td>75</td><td title="8%"></td><td title="1%"></td><td title="0%"></td><td title="0%"></td><td title="16%"></td><td title="1%"></td><td title="8%"></td><td title="6%"></td><td title="6%"></td><td title="2%"></td><td title="25%"></td><td title="13%"></td><td title="9%"></td><td title="1%"></td></tr>
<tr><td>2010</td><td>150</td><td title="8%"></td><td title="5%"></td><td title="4%"></td><td title="2%"></td><td title="12%"></td><td title="5%"></td><td title="7%"></td><td title="2%"></td><td title="8%"></td><td title="3%"></td><td title="16%"></td><td title="8%"></td><td title="17%"></td><td title="4%"></td></tr>
<tr><td>2011</td><td>221</td><td title="8%"></td><td title="3%"></td><td title="2%"></td><td title="2%"></td><td title="19%"></td><td title="6%"></td><td title="8%"></td><td title="4%"></td><td title="5%"></td><td title="3%"></td><td title="23%"></td><td title="14%"></td><td title="10%"></td><td title="4%"></td></tr>
<tr><td>2012</td><td>512</td><td title="8%"></td><td title="3%"></td><td title="5%"></td><td title="0%"></td><td title="16%"></td><td title="6%"></td><td title="5%"></td><td title="2%"></td><td title="7%"></td><td title="2%"></td><td title="25%"></td><td title="9%"></td><td title="13%"></td><td title="5%"></td></tr>
<tr><td>2013</td><td>504</td><td title="9%"></td><td title="3%"></td><td title="3%"></td><td title="1%"></td><td title="14%"></td><td title="4%"></td><td title="5%"></td><td title="3%"></td><td title="8%"></td><td title="2%"></td><td title="25%"></td><td title="13%"></td><td title="14%"></td><td title="3%"></td></tr>
<tr><td>2014</td><td>655</td><td title="8%"></td><td title="4%"></td><td title="3%"></td><td title="1%"></td><td title="16%"></td><td title="6%"></td><td title="7%"></td><td title="4%"></td><td title="8%"></td><td title="4%"></td><td title="22%"></td><td title="9%"></td><td title="13%"></td><td title="4%"></td></tr>
<tr><td>2015</td><td>671</td><td title="9%"></td><td title="4%"></td><td title="4%"></td><td title="2%"></td><td title="15%"></td><td title="4%"></td><td title="6%"></td><td title="2%"></td><td title="7%"></td><td title="3%"></td><td title="23%"></td><td title="11%"></td><td title="12%"></td><td title="5%"></td></tr>
<tr><td>2016</td><td>731</td><td title="11%"></td><td title="3%"></td><td title="3%"></td><td title="1%"></td><td title="17%"></td><td title="4%"></td><td title="7%"></td><td title="2%"></td><td title="8%"></td><td title="3%"></td><td title="23%"></td><td title="9%"></td><td title="11%"></td><td title="3%"></td></tr>
<tr><td>2017</td><td>946</td><td title="11%"></td><td title="2%"></td><td title="4%"></td><td title="1%"></td><td title="15%"></td><td title="3%"></td><td title="9%"></td><td title="3%"></td><td title="10%"></td><td title="4%"></td><td title="24%"></td><td title="7%"></td><td title="10%"></td><td title="5%"></td></tr>
<tr><td>2018</td><td>1023</td><td title="9%"></td><td title="2%"></td><td title="3%"></td><td title="1%"></td><td title="14%"></td><td title="4%"></td><td title="10%"></td><td title="4%"></td><td title="7%"></td><td title="2%"></td><td title="23%"></td><td title="8%"></td><td title="15%"></td><td title="4%"></td></tr>
<tr><td>2019</td><td>1182</td><td title="10%"></td><td title="3%"></td><td title="3%"></td><td title="1%"></td><td title="16%"></td><td title="4%"></td><td title="7%"></td><td title="3%"></td><td title="5%"></td><td title="2%"></td><td title="25%"></td><td title="9%"></td><td title="17%"></td><td title="4%"></td></tr>
<tr><td>2020</td><td>1294</td><td title="10%"></td><td title="3%"></td><td title="3%"></td><td title="1%"></td><td title="16%"></td><td title="3%"></td><td title="7%"></td><td title="2%"></td><td title="7%"></td><td title="2%"></td><td title="25%"></td><td title="6%"></td><td title="17%"></td><td title="5%"></td></tr>
<tr><td>2021</td><td>1622</td><td title="11%"></td><td title="4%"></td><td title="3%"></td><td title="1%"></td><td title="14%"></td><td title="4%"></td><td title="9%"></td><td title="3%"></td><td title="7%"></td><td title="2%"></td><td title="21%"></td><td title="6%"></td><td title="17%"></td><td title="4%"></td></tr>
<tr><td>2022</td><td>1188</td><td title="12%"></td><td title="2%"></td><td title="4%"></td><td title="0%"></td><td title="19%"></td><td title="4%"></td><td title="10%"></td><td title="2%"></td><td title="5%"></td><td title="2%"></td><td title="20%"></td><td title="5%"></td><td title="15%"></td><td title="4%"></td></tr>
</tbody></table>
</div>
</center>
<h4>Notes</h4>
<p>When filtering strictly on "ARPANET", the nuclear affirmative numbers dropped by about ~4 percentage points which is to be expected if we are to assume those familiar with ARPANET may be more likely to know the (A) narrative. To answer the posed question, it looks to be, at least according to those opining on Reddit in a way that matches my filters, about <b>1/6</b> affirm the nuclear narrative and this appears to be more or less stable over the 13 year range.</p>
<p>The robustness of this result is interesting. The most likely cause is my own incompetent execution. Ignoring that possibility, it's of unique interest simply because of Reddit's growth and demographic change over time.</p>
<p>The graph below is the month-by-month line count for the archival comments linked above. Every comment in the archives is one line of encoded JSON.</p>
<figure>
<img src="https://siliconfolklore.com/internet-history/comments-per-month.png" alt="A chart showing how Reddit has grown to 250 million comments per month since the start of the data dump in 2007'" title="A chart showing how Reddit has grown to 250 million comments per month since the start of the data dump in 2007'">
<figcaption><b id="img-6">Figure 6.</b> Monthly comments on Reddit in millions.</figcaption>
</figure>
<p>Then again, this is something that was communicated by University professors that had been publishing on networks since the 1970s. Newspapers, textbooks, congressional documents, a certain percentage all gave part of a (P) narrative. There could be more fundamental reasons for its continued persistence.</p>
</section>
<section>
<h3 id="why-it-sticks">Why the Nuclear story sticks</h3>
<p>Like good conspiracy theories, there’s related truths that make the core message believable. The ARPANET project was by DARPA, which was under the Department of Defense. This organization was launched after Sputnik. The military had something called <a href="https://en.wikipedia.org/wiki/MILNET">MILNET</a>, it’s own split-off from the Internet from 1983 which became NIPRnet.</p>
<p>In 1971 the command and control <a href="https://en.wikipedia.org/wiki/Worldwide_Military_Command_and_Control_System">WWMCCS</a> had an ARPANET like system using BBN IMPs. <a href="https://en.wikipedia.org/wiki/ALOHAnet">ALOHAnet</a> did lead to <a href="https://en.wikipedia.org/wiki/PRNET">PRNET</a> and a packet-radio van which interacted with a satellite network, SATNET.<sup><a href="#cerf-note">14</a></sup> Before that there was a trans-atlantic link, NORSAR connecting to seismic units in Norway to, among other things, <a href="https://en.wikipedia.org/wiki/NORSAR">enforce the Comprehensive Nuclear Test Ban Treaty</a>.</p>
<p>There is some cold war connection, just like there is in much of computer technology from the era. The generalized statement that DARPA money funded Silicon Valley is true and it’s understandable how fuzzy memories and a bit less rigor can fuse connections.</p>
<p>Also there’s a conspiracy tendency when it comes to grim folklore. Perhaps people denying the nuclear war connection have a political agenda, they were misinformed or they are too scared to admit it. It has its own defense built in that permits people trying to correct the narrative to be dismissed as trying to push an opinion or occluded political agenda.</p>
<p>However, the documentation is voluminous and the people who were in the room have all given a consistent story about how it was to build a network for time-sharing of expensive computers and better collaboration.</p>
<p>People also have a tendency to not be careful with chronologies and often attribute events in a narrative structure that would require people time-traveling to be possible.</p>
<p>To put this in perspective let’s use living recent memory. It would be like seeing a connection between say COVID-19 pandemic outcomes being related to political governance, that there was a 2012 Ebola outbreak and then claim the outcome of the Obama/Romney 2012 election was a direct consequence of the federal COVID-19 response.</p>
<p>That’s really the same dynamic. Events in the 1970s are being placed categorically adjacent to events in the 1960s and after the table is set, a narrative is drawn between them.</p>
<figure>
<picture>
<source srcset="https://siliconfolklore.com/internet-history/cerf1.webp" type="image/webp">
<img src="https://siliconfolklore.com/internet-history/cerf1.jpg" alt="A crop of a comic book where the hero says 'This is worse than I imagined cerf boy. The writer has completely lost control of the plot'" title="A crop of a comic book where the hero says 'This is worse than I imagined cerf boy. The writer has completely lost control of the plot'">
</picture>
<figcaption><b id="img-7">Figure 7.</b> From <a href="https://archive.org/details/CaptainInternetAndCERFBoyNumber1October1991/page/n13/mode/2up">The Adventures of Captain Internet And CERF Boy - Number 1 October 1991</a>.</figcaption>
</figure>
</section>
<section>
<h2>Right Click, View Source</h2>
<p>As I’ll cover in further articles in this series, there’s no expectation that an engineer be a historian or that accurate scholarship can be expected in the days before mass digitization especially in texts where the history isn’t a focus of the scholarship.</p>
<p>Also, the prevailing assumption is to look for mistakes before assuming malice. Not just because it’s more polite to do so but also because these statements are small buried passages in much larger, often dry technical works. There’s no evidence these authors are fabulists trying to tell compelling stories.</p>
<p>To dig deeper on this we’ll refer back to the 1990 DARPA document.</p>
<p>From “DARPA Technical Accomplishments”, section 20-2 we find this:</p>
<blockquote>
<p>Notable early contributions had been made by P. Baran and collaborators at RAND. Baran’s work in the early 1960’s outlined a distributed, survivable digital communications system for the Air Force, in which a data stream would be broken near the point of initiation into addressed subunits of less than two hundred bits, which would then be routed by “intelligent” nodes over multiple paths which could include satellites as well as telephone communication lines. Baran’s group also ran a simplified computer simulation of such a network, using six nodes, which demonstrated its workability and survivability and indicated that the nodes did not need to store many message segments in order to be effective… A 1962 thesis by L. Kleinrock, then at Lincoln Laboratory, came to a similar conclusion.</p>
</blockquote>
<p>With the important part coming after:</p>
<blockquote>
<p>The Air Force did not follow up Baran’s work, apparently because of skepticism from the communications community, which felt that data hang-ups would be common and buffer storage requirements large. Baran’s work, apparently, was not well known to members of the DARPA community when they began their plans for computer communications networks.</p>
</blockquote>
<p>Vint Cerf says as much in the YouTube link provided above in the first section.</p>
<p>The work they are referring to is entitled <cite><a href="https://archive.org/details/RecommendationToTheAirStaff/mode/2up">“Recommendation to the Air Staff”</a></cite> by RAND, from August 1965. Quoting page 2:</p>
<blockquote>
<p>In our view it is possible to build a new large common-user communication network able to withstand heavy damage. Such a network can provide a major step forward in Air Force military communication capability.</p>
</blockquote>
<p>and then page 40 for more lurid detail:</p>
<blockquote>
<p>The cloud-of-doom attitude that nuclear war spells the end of the earth is slowly lifting from the minds of the many. … If war does not mean the end of the earth in a black and white manner, then it follows that we should do those things that make the shade of gray as light as possible: to plan now to minimize potential destruction and to do all those things necessary to permit the survivors of the holocaust to shuck their ashes and reconstruct the economy swiftly.</p>
</blockquote>
<p>So this failed proposal in 1965 matches our claim by David Farber. They both worked at RAND. In a <a href="https://www.kgri.keio.ac.jp/en/news-event/051657.html">2019 interview Farber stated</a>:</p>
<blockquote>
<p>It allowed me to broaden out, quite a bit…. This is also the place where Paul Baran and I became good friends. We remained so for the rest of our lives.</p>
</blockquote>
<p>This is consistent. In a <a href="https://historyofcomputercommunications.info/interviews/david-farber/">1988 interview he stated similarly</a>:</p>
<blockquote>
<p>He next joined RAND Corporation in Southern California where he was “heavily involved with, and affected” by, Paul Baran’s work.</p>
</blockquote>
<p>So we have two possible strains, both sourcing back to early 1960s RAND work by Paul Baran; a connection between Baran and ARPANET made by a good friend of his and an understandable scholarship mistake.</p>
<h3 id="baran-agrees">Paul Baran's side</h3>
<p>After being rejected just to see another network take off a few years later, Paul Baran could have lived the life of <a href="https://en.wikipedia.org/wiki/Miss_Havisham">Miss Havisham</a> in contemptuous bitterness and obscurity but that’s not what he did. He dusted off his shoes, moved on and did many other great things. In <a href="https://www.wired.com/2001/03/baran/">March 2001, Wired interviewed him</a>:</p>
<blockquote>
<p><b>Wired</b>: The myth of the Arpanet - which still persists - is that it was developed to withstand nuclear strikes. That’s wrong, isn’t it?</p>
<p><b>Baran</b>: Yes. Bob Taylor had a couple of computer terminals speaking to different machines, and his idea was to have some way of having a terminal speak to any of them and have a network. That’s really the origin of the Arpanet. The method used to connect things together was an open issue for a time.</p>
</blockquote>
<p>But some contention remained. First, as a 2016 article in <a href="https://theconversation.com/how-the-internet-was-born-the-network-begins-to-take-shape-67904">The Conversation</a> points out, RAND in Santa Monica and the original ARPANET node at UCLA were a short bus ride away from each other.</p>
<p>Could be a coincidence. Baran is a little skeptical of it though. Going back to the Wired article:</p>
<blockquote>
<p><b>Wired</b>: Taylor heard about not through you, but through Donald Davies originally?</p>
<p><b>Baran</b>: I have two different views on that. I didn’t pay much attention to it then, but with all the nonsense about it, I went back and started digging through the old records. I don’t believe anything unless I can find it in writing, in contemporaneous documentation. I had many, many discussions with the folks at Arpa, starting in the very early ’60s. The information about packet switching was not a surprise, not new. People can listen to things and put them in the back of their mind. So you don’t know. People say they’d never heard of me at the time, yet I’d chaired a session with them in it.</p>
</blockquote>
<p>Baran claims the ARPA people say they didn’t know about or were influenced by Baran’s work yet Baran finds that implausible. Vint Cerf responds to this via a personal email:</p>
<blockquote><p>
Roberts likely knew about Paul's report and had done a point-to-point experiment in 1966 (?) linking the TX-2 machine at Lincoln Labs to the ANS/Q-32 at System Development Corporation (Santa Monica spinout from RAND) using a packet-switching format.</p>
</blockquote>

<p>A pont-by-point, design decision by design decision analysis could be made and it might be possible to empirically favor a single narrative but that's out of scope here. Don't worry though, it actually falls within the scope of a planned article so I should get to it eventually.</p>
</section>
<section>
<h3>Final words</h3>
<p>There's earlier notable history to the Internet. Vannevar Bush's <a href="https://www.theatlantic.com/magazine/archive/1945/07/as-we-may-think/303881/">"As We May Think"</a> in July 1945 describes a mechanical microfilm archival machine he dubs the Memex. The IPTO of ARPA, JCR Licklider's April 1963, <a href="http://worrydream.com/refs/Licklider-IntergalacticNetwork.pdf">"Members and Affiliates of the Intergalactic Computer Network"</a>.
</p><p>There's also many other networks long forgotten. The best reference is in the April 1972 issue of Datamation which isn't digitized yet. However, I went to the archives at UCLA and painfully montaged some photocopies. David Farber, who was mentioned above, is the author. Pages <a href="https://siliconfolklore.com/internet-history/farber-datamation-0472-01.png">36, 37</a> and <a href="https://siliconfolklore.com/internet-history/farber-datamation-0472-02.png">38, 39</a>. No mention of Paul Baran or nuclear war this time in his description of ARPANET and we even got a shout out to Slotnick's ILLIAC IV which is also called out in the DARPA document, section 18-1.</p>
<p>Also any scholar reading this will be yelling at their computer screen right now because I seemed to have forgotten the French <a href="https://en.wikipedia.org/wiki/CYCLADES">CYCLADES</a> network. Disarm your keyboards, comrades, we're good.</p>
<p>Also, the Internet is not the ARPANET, as Quarterman pointed out in a few texts, this one from <cite><a href="https://archive.org/details/sim_computerworld_1993-02-22_27_7/page/n85/mode/2up">Computerworld, February 22, 1993</a></cite>:</p>
<blockquote><p>The Arpanet was merely one network within the Internet. Started in 1969, Arpanet was the first distributed packet-switched com- puter network. In 1977, the Arpanet became one of the Internet’s backbone networks, and the protocol research done on the Arpanet was very influential in the development of the TCP/IP currently used on the Internet. Arpanet’s technology became obsolete, however, and it was retired in 1990.</p></blockquote>
<p>For an exhaustive survey of 133 (yes, one hundred and thirty three) networks from 1990, refer to <a href="https://archive.org/details/directoryofelect00frey/mode/2up">"!%@:: a directory of electronic mail addressing and networks"</a> (yes, pages vi and vii were somehow included twice).
</p><h4 id="time-sharing">The Batch-Processing to Time-Sharing Revolution</h4>
<p>This was alluded to above. The Internet can be seen as part of a larger movement in computing away from single monolith installations doing something called "batch-processing" to a world of "time-sharing".</p>
<p>At one time there was a computing center with cubby holes. You’d place your program in a cubby hole and the machine operator would eventually feed it in, generate output, and you’d come back later to see the results.</p>
<p>There’s all kinds of problems with this. You aren’t actually touching the computer. Syntax errors would have the turnaround time of days to correct. You had to go, physically, to the machine.</p>
<p>The fix was time-sharing: the ability of the computer to multi-task. This meant multiple people could interact with one computer simultaneously.</p>
<p>In order to do that you needed multiple input terminals. It wasn’t long before people realized it’d be nice to be able to roll their terminal home with them and just call it in.</p>
<p>This led to remote terminals.</p>
<p>Then people realized they could call up any computer once it got a phone number if only they had some agreed way to talk to it. This is still 1960s.</p>
<p>So you had terminals talking to computers. Surely this will be followed up by computers talking to computers. That’s an obvious next step.</p>
  <p>ARPA even had a separate project, called project MAC, which along with having legends like <a href="https://en.wikipedia.org/wiki/Marvin_Minsky">Marvin Minsky</a> and <a href="https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)">John McCarthy</a> made a time-sharing system called <a href="https://en.wikipedia.org/wiki/Compatible_Time-Sharing_System">CTSS</a>.
</p><p>The point is that Paul Baran wasn’t chartering a path through the wilderness. For instance, here's a <a href="https://ieeexplore.ieee.org/document/1088726">1963 text on "Communication Network … Subject to Random Failure (or Destruction)"</a>. Baran's work with hot-potato routing was a year later. Robust networked time-sharing and resource combination was the clear eventual trajectory. The obvious way to achieve this was to time-share the communication channel as well. That’s where you get packets and switching.</p>
<p>Or hey, there’s probably more to it. There always is.</p>
<figure>
<picture>
<source srcset="https://siliconfolklore.com/internet-history/web.avif" type="image/avif">
<img src="https://siliconfolklore.com/internet-history/web.png" alt="A black and white adventurous drawing of a woman with a keyboard strapped to her shoulder like a purse admiring an abstract frame surrounded by a cloud titled 'Internetland' which depicts E-mail, usenet, gopher and other internet technologies that were common in 1994" title="A black and white adventurous drawing of a woman with a keyboard strapped to her shoulder like a purse admiring an abstract frame surrounded by a cloud titled 'Internetland' which depicts E-mail, usenet, gopher and other internet technologies that were common in 1994">
</picture>
<figcaption><b id="img-8">Figure 8.</b> From <a href="https://archive.org/details/internetguidefor00dani/page/n33/mode/2up">The Internet Guide for New Users, 1994</a>. Artist is <a href="http://www.pyracantha.com/">Hannah MG Shapero</a>.</figcaption>
</figure>
</section>
<section>
<hr>
<h3>Notes</h3>
<h4>Timeline &amp; Thanks</h4>
<p>I'd like to thank the following for helping put this together: Barry Gerber, Cricket Liu, John Levine, John Quarterman, Matt Campbell, Paul Albitz, Paul Gilster, Sharon Fisher and Vint Cerf.</p>
<p id="all-emails">In the spirit of full disclosure, <a href="https://en.wikipedia.org/wiki/Mbox">here are all email correspondences</a> (with personal information removed) in <a href="https://en.wikipedia.org/wiki/Mbox">Berkeley mbox</a>. Some parts refer to older drafts of the article, <a href="https://github.com/kristopolous/sf">all of which are publicly available on github</a>.
</p><p>I was unable to find a way to reach Ed Krol or Bruce Sterling and David Farber has not responded.</p>
<p>Corrections and comments are welcome at <a href="mailto:info@siliconfolklore.com">info@siliconfolklore.com</a>. You can also <a href="https://github.com/kristopolous/sf">open up an issue on the github or even do a pull request</a>.</p>
<p>The nine colorful diagrams at the beginning forming the 3x3 motif are from the 1981 text, <a href="https://archive.org/details/Report4799AHistoryOfArpanetTheFirstDecade/page/n23/mode/2up">"A History Of ARPANet. The First Decade"</a>.</p>
<h4>Footnotes</h4>
<ol id="footnotes">
  <li id="jcr"><p>But not, perhaps, by ARPA IPTO (basically the CEO), JCR Licklider as John Quarterman points out in an email, linking to an excerpt from a 2017 book by <a href="https://en.wikipedia.org/wiki/Sharon_Weinberger">Sharon Weinberger</a>, <a href="https://aeon.co/essays/how-nuclear-fears-helped-inspire-creation-of-the-internet">"The Imagineers of War"</a> (not yet available in digital libraries, excerpt from Aeon.co included) where she quotes Licklider, "Who can direct a battle when he’s got to write a program in the middle of that battle?"</p></li>
  <li id="cerf"><p>Thanks to Vint Cerf for helping me on these sections.</p></li>
  <li id="prior"><p>This includes histories of the ARPANET "DARPANET" and “ARPA Network”. <a href="mailto:info@siliconfolklore.com?subject=Before+1991">Please reach out if you know of any</a> and I'll be happy to update.</p></li>
  <li id="sharon"><p>I had a brief chat with Sharon over Facebook. She also wrote a 1993 text, <a href="https://archive.org/details/ridinginternethi00fish/page/12/mode/2up">"Riding the Internet Highway"</a> which contained a similar origin narrative. In our conversation she recommended a <a href="https://vintageapple.org/byte/pdf/199107_Byte_Magazine_Vol_16-07_DOS_5.0.pdf">July 1991 Byte</a> (PDF) article she wrote. It starts on PDF page 209 and cites Quarterman's Matrix as she does in the InfoWorld article work for his 1986 work, <a href="https://dl.acm.org/doi/abs/10.1145/6617.6618">"Notable Computer Networks"</a>.</p>
  </li><li id="first"><p>Calling something "first" is so risky. Let me clarify. First as far as ProQuest, archive.org and Google books is concerned. Have an earlier one? <a href="mailto:info@siliconfolklore.com?subject=Earlier+Reference">Please send it over</a>.</p></li>
  <li id="time-date"><p>This article has been misdated on Times website. It can also be found at <tt>/time/072594/07259925.000</tt> in the <a href="https://archive.org/details/cd_TIME_Magazine_Almanac_-_All_TIME_Magazine_articles_1989-1995_Win3.1">TIME Magazine Almanac CD-ROM from 1995</a> to confirm the 1994 date.</p></li>
  <li id="infoworld"><p>Quarterman's Matrix is included in Fisher's bibliography and her description mirrors the one from The Matrix. Going over the names referenced there's three without Wikipedia pages: David Wasley, David Buerger, John Rugo and <a href="https://en.wikipedia.org/wiki/Robert_Metcalfe">Bob Metcalfe</a> who wasn't used in the history section and is just as much a Peer as an ARPA for our imagined framework. No models are perfect.</p></li>
  <li id="krol"><p>I was unable to determine a source for Krol here. He mentions Quarterman's Matrix but that does not have the (P) bomb narrative. Krol has earlier work such as <a href="https://www.rfc-editor.org/rfc/rfc1118.html">"The Hitchhikers Guide to the Internet"</a> but nothing I could find had an origin story. He references Douglas Comer's "Internetworking TCP/IP" which is a 3-volume set also without an origin story. Comer's work references Cerf's "The History of the ARPANET" but Cerf is (A) while Krol is a (P) narrative. Also mentioned is Craig Hunt's <a href="https://archive.org/details/tcpipnetworkadmi00hunt/page/n25/mode/2up">"TCP/IP network administration"</a> which has an origin story but it's (A) style.</p>
<p>An additional reference later in the work is <a href="https://archive.org/details/computersecurity00russ/page/210/mode/2up">"Computer Security Basics"</a> which references ARPANET but has no origin story. Another reference <a href="https://archive.org/details/practicalunixsec00garf_0/page/6/mode/2up">"Practical UNIX Security"</a> only historical reference is a brief description of Project MAC without referring to it by name.</p>
<p>The section from his book photographed above even gets published as <a href="https://www.rfc-editor.org/rfc/rfc1462">RFC 1462</a> and here is where we find our first potential (P) link. The other author here, <a href="https://dblp.org/pid/86/5409.html">Ellen S Hoffman</a> is from the alternative <a href="https://en.wikipedia.org/wiki/Merit_Network">Merit Network</a> which is older than the ARPANET. It plays a very important role in the history of the Internet which is outside our scope.</p>
<p>Also the author page of a later work from 1995, <a href="https://archive.org/details/wholeinternetfor00krol/page/n649/mode/2up">"The Whole Internet for Windows 95"</a> claims Krol was part of the original NSFnet installation at UIUC which was part of Merit and arguably puts him in the (P) group.</p>
<p>These two (P) links might negate the (A) links and his direct participation does fall under the definition (albeit 15 years later so maybe not). Unless I can find a way to contact Krol, I'll have to leave that question mark there.
  </p></li><li id="dns-note"><p>There's two authors listed, Paul Albitz and Cricket Liu. At first I believed the author of the passage was most likely Paul Albitz because it was repeated in <a href="https://archive.org/details/dnsonwindowsnt00albi/page/n17/mode/2up">"DNS on Windows NT"</a> in 1998 and cannot be found in other work by Cricket Liu such as <a href="https://archive.org/details/dnsbindcookbook0000liuc/mode/2up">"DNS and BIND Cookbook"</a> in 2003 or <a href="https://archive.org/details/managinginternet00jerr/mode/2up">"Managing Internet Information Services"</a> from 1994.</p>
  <p>However, after effort was made to reach out to him via LinkedIn to inquire about the source, he claimed that Cricket Liu wrote that chapter. After reaching out to Liu and a few back and forth emails, his final statement is "I no longer have notes on this.  I’m sorry I couldn’t find anything". </p>
  <p>The text is not robust enough in references to lead to a factional claim, citing a few RFCs. For acknowledgments we get Ken Stone, <a href="https://www.linkedin.com/in/jerry-mccollom-a552316">Jerry McCollom</a>† (HP), <a href="https://www.linkedin.com/in/peterjeffe/">Peter Jeffe</a>† (IBM), Christopher Durham, Hal Stern, Bill Wisner, Dave Curry and Jeff Okamoto. All dead-ends. Paul Albitz credits his spouse, Katherine Albitz, who is also an engineer but without any obvious ARPA or Peer connection. Further searches in google groups, proquest, and archive.org found only references to the aforementioned texts and no other works. This makes it N<sub>o</sub> unless further documentation comes forth.</p></li>
  <li id="sterling"><p>Sterling doesn't directly quote anyone in his February 1993 story however, in his November 1992 text, <cite><a href="https://www.mit.edu/hacker/hacker.html">"The Hacker Crackdown: Law and Disorder on the Electronic Frontier"</a></cite> he talks about a <a href="https://www.mit.edu/hacker/part4.html">1991 CPSR roundtable</a> mentioning two Peers:</p>
    <blockquote><p>Sixty people attended, myself included -- in this instance, not so much as a journalist as a cyberpunk author. Many of the luminaries of the field took part: <a href="https://en.wikipedia.org/wiki/Mitch_Kapor">Kapor</a> and <a href="https://en.wikipedia.org/wiki/Mike_Godwin">Godwin</a> as a matter of course. Richard Civille and <a href="https://en.wikipedia.org/wiki/Marc_Rotenberg">Marc Rotenberg</a> of CPSR. Jerry Berman of the ACLU. <b>John Quarterman</b>, author of The Matrix. <a href="https://en.wikipedia.org/wiki/Steven_Levy">Steven Levy</a>, author of Hackers. George Perry and Sandy Weiss of Prodigy Services, there to network about the civil-liberties troubles their young commercial network was experiencing. <a href="https://en.wikipedia.org/wiki/Dorothy_E._Denning">Dr. Dorothy Denning</a>. Cliff Figallo, manager of the Well. <a href="https://en.wikipedia.org/wiki/Steve_Jackson_(American_game_designer)">Steve Jackson</a> was there, having finally found his ideal target audience, and so was <a href="https://en.wikipedia.org/wiki/Craig_Neidorf">Craig Neidorf</a>, "Knight Lightning" himself, with his attorney, Sheldon Zenner. <a href="https://en.wikipedia.org/wiki/Katie_Hafner">Katie Hafner</a>, science journalist, and co-author of Cyberpunk: Outlaws and Hackers on the Computer Frontier. <b>Dave Farber</b>, ARPAnet pioneer and fabled Internet guru. <a href="https://its.law.nyu.edu/facultyprofiles/index.cfm?fuseaction=profile.overview&amp;personid=43007">Janlori Goldman</a> of the ACLU's Project on Privacy and Technology. John Nagle of Autodesk and the Well. Don Goldberg of the House Judiciary Committee. Tom Guidoboni, the defense attorney in the Internet Worm case. <a href="https://en.wikipedia.org/wiki/Lance_Hoffman">Lance Hoffman</a>, computer-science professor at The George Washington University. Eli Noam of Columbia. And a host of others no less distinguished.</p></blockquote>
  <p>I've failed to find a way to contact Sterling to further elaborate.</p>
  </li>
  <li id="time"><p> Time names the following in the article: <a href="https://en.wikipedia.org/wiki/Laurence_Canter_and_Martha_Siegel">Laurence Canter, Martha Siegel</a>, <a href="https://en.wikipedia.org/wiki/Howard_Rheingold">Howard Rheingold</a>, <a href="https://en.wikipedia.org/wiki/Clifford_Stoll">Clifford Stoll</a> (quoted for article, author of The Cuckoo's Egg), Steven Levy, <a href="https://en.wikipedia.org/wiki/Thomas_Kalil">Tom Kalil</a>, <a href="https://en.wikipedia.org/wiki/Bruce_Fancher">Bruce Fancher</a> (quoted), <a href="https://en.wikipedia.org/wiki/A._J._Liebling">AJ Liebling</a>, <a href="https://en.wikipedia.org/wiki/Adam_Curry">Adam Curry</a>, <a href="https://en.wikipedia.org/wiki/Brad_Templeton"><b>Brad Templeton</b></a>, <a href="https://en.wikipedia.org/wiki/Brock_Meeks">Brock Meeks</a> (quoted), <a href="https://en.wikipedia.org/wiki/Martin_Nisenholtz">Martin Nisenholtz</a> (quoted), <a href="https://en.wikipedia.org/wiki/Dale_Dougherty">Dale Dougherty</a> (quoted), <b>Dave Farber</b>, <a href="https://en.wikipedia.org/wiki/Esther_Dyson">Esther Dyson</a> (quoted) and <a href="https://en.wikipedia.org/wiki/Stacy_Horn">Stacy Horn</a> (quoted). 
  </p></li><li id="pbs"><p> The documentary has a date of 1994 but an air date of 08/1995. Everything takes more than zero time to produce so we're using "release date" for the timestamping.</p>
  <p>This is a co-production of Rice University and there's a few names I've contacted: John Levine, <a href="https://en.wikipedia.org/wiki/Gina_Smith_(author)">Gina Smith</a> (the hosts), <a href="https://www.wattsrunning.com/">Bill Watts</a> (who gets a writer credit), <a href="https://www.uh.edu/nsm/computer-science/people/faculty/">Kevin Brook Long</a> (credited as "Internet Consultant"). <a href="https://en.wikipedia.org/wiki/G._Anthony_Gorry">G. Anthony Gorry</a> (Special Thanks section, Computer Science Professor at Rice University) <a href="https://yale62.org/george-anthony-gorry-jr/">died in 2018</a>. <a href="https://siliconfolklore.com/internet-history/levine-email.txt">John Levine responded</a> giving it an "Other/Nobody" or "common knowledge" mark.</p></li>
  <li id="pbs-text">The 96-word transcript of the narrative is as follows:
<blockquote>
<p>
<b>Gina Smith</b>: The predecessor of the Internet was a child of the Cold War first developed by the Defense Department's Advanced Research Projects Agency or ARPA partly to ensure the data communications could survive in case of a nuclear attack.
</p><p>
<b>John Levine</b>: Created in the late 1960s, ARPANET first connected four computers in California and Utah campuses using a new networking technique. It allowed researchers to run programs on remote computers. Later other research institutions and military sites were added. The idea was even if one part of the system were damaged, the rest would still function and it worked.</p>
</blockquote></li>
    <li id="gore"><p>As Senator and eventual Vice Presidential candidate, Al Gore not only popularized the term "Information Superhighway" but also spearheaded legislation like the <a href="https://en.wikipedia.org/wiki/High_Performance_Computing_Act_of_1991">High Performance Computing Act of 1991</a> which funded the development of the Mosaic Browser.</p>
      <p>The US Presidential campaign cycle of 1992 was arguably the first time (excluding the <a href="https://en.wikipedia.org/wiki/Morris_worm">1988/89 Morris worm</a>) that significant effort was made to explain the concept of the Internet and (in 1993 after assuming office) demonstrate it to general audiences.  See the 24:06 mark of the <a href="https://youtu.be/BIq_mW-nSnQ?t=1446">1992 Stockdale Vice Presidential Debate</a> and <a href="https://www.nytimes.com/1992/11/10/science/clinton-to-promote-high-technology-with-gore-in-charge.html">"Clinton to Promote High Technology, With Gore in Charge"</a> from the November 10, 1992 New York Times as examples.</p>
      </li>
</ol>
<p><a name="unconfirmed"><b>†</b></a> Efforts were made to confirm these links are accurate but there has not been any response.</p>
</section>
<section>
<h4 id="backhoe">Backhoe Section</h4>
<p>Here's John Levine's <a href="https://siliconfolklore.com/internet-history/levine-email-backhoe.txt">response to my claim</a> of the Krol source:</p>
<blockquote>
<p>The research is impressive but sometimes you just guessed wrong.</p>
<p>For example, the reference in Internet for Dummies about backhoe attacks didn't come from Krol's book.  It was and is a cliche in the telecom world (memes hadn't been invented yet) and we both used it independently. </p>
</blockquote>
<p>As a practice and a discipline, a source's claim takes precedence over any interpretation and should be disclosed. However, every subsequent claim needs to be subject to the same rigor and scrutiny and as of now, the phrasing similarity is just too close for me to claim they are disconnected. Additionally, there is no source that I could find that had such similarity prior to Krol. Of course it may not yet be digitized.</p>
<p>The origin of the backhoe seems to be a now obscure December 12, 1986 White Plains ARPAnet Northeast disconnect incident when 7 fiber optic cables going through the same conduit were cut. This has its own narrative history. All New England trunk lines were cut at 1:11 AM and were knocked off until about 12:11.</p>
<p>As far as I can tell, a backhoe started to be associated with this 1AM disconnect around 1988 and later was commonly claimed to be accidental. I was unable to find any criminal investigation, admittance of guilt, or direct evidence as to how the conduit was cut. Being an obscure event, a trip to archival rooms in New York libraries would probably be required to find out more information. Alternatively, it's possible that AT&amp;T, which restored the line, could have a report somewhere.</p>
<p>I will happily annotate the section as false if more instances of backhoes or related narratives comes forward as removing it could lead to Mandela effects and further folklore.</p>
</section>
<section>
<h4 id="survey-method">Survey Methodology</h4>
<p>Search queries were performed on archive.org text search, Google books, Google groups and ProQuest Central with the access covered by the LA public library card between February 18 2022 and March 6 2022.</p>
<p>Terms searched were "arpanet", "arpa network", "darpanet", "internet 1969", "internet history", "internet started", "internet atomic", "internet bomb", "internet nuclear", and "internet war"</p>
  <li><a href="https://archive.org/details/tcpiparchitectur00feit/page/4/mode/2up">Feit, Sidnie. "TCP/IP: Architecture, Protocols, and Implementation", 1993</a>: Description too short. (Scientific Research)</li>
  <li><a href="https://archive.org/details/sim_newsweek_1993-09-06_122_10/page/36/mode/2up">Newsweek, Sep 9, 1993</a>: Description too short. (Collaboration by design)</li>
  <li><a href="https://www-proquest-com.ezproxy.lapl.org/central/docview/294801007/F9B76FC7236D4899PQ/9">(Proquest) Hyatt, Josh. "Network difficulties Computer world's Internet sees clash of cultures", Boston Globe, Sep 15 1993</a>: Description too short (Collaboration by design)</li>
  <li><a href="https://archive.org/details/zenartofinternet00keho/mode/2up">Kehoe, Brendan P. "Zen and The Art of The Internet: A Beginner's Guide", 1994</a>: Frequently referenced, no origin story.</li>
  <li><a href="https://www.proquest.com/central/docview/307909591/CDE810A37ADD4A38PQ/90">(Proquest) Swisher, Kara. "The Frenzy Over the Internet's Fee Enterprise", The Washington Post, Oct 16, 1995</a>: Description too short. ("Since the Internet's founding in 1969 to aid government communications in wartime")</li>
    
<h5><b>You made it to the end. Epic.</b><br>I guess you could also <a href="https://twitter.com/emoRobot">follow me on twitter</a>, ok sure.</h5>
</section>
<section>
<p id="print-links">
<h2>Links</h2>
</p>
</section>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenSSL bug exposed up to 255 bytes of server heap and existed since 2011 (136 pts)]]></title>
            <link>https://jbp.io/2024/06/27/cve-2024-5535-openssl-memory-safety.html</link>
            <guid>41108465</guid>
            <pubDate>Tue, 30 Jul 2024 12:29:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jbp.io/2024/06/27/cve-2024-5535-openssl-memory-safety.html">https://jbp.io/2024/06/27/cve-2024-5535-openssl-memory-safety.html</a>, See on <a href="https://news.ycombinator.com/item?id=41108465">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post">
  <p>
    27 June 2024 
    
  </p>
  <h2>CVE-2024-5535: `SSL_select_next_proto` buffer overread
  <span>celebrating a decade of publishing your heap over the internet</span>
  </h2>
  <p>Since 2011, a bug has existed in OpenSSL that means innocuous code like:</p>

<div><pre><code><span>require</span><span>(</span><span>'</span><span>tls</span><span>'</span><span>).</span><span>connect</span><span>({</span><span>port</span><span>:</span> <span>443</span><span>,</span> <span>NPNProtocols</span><span>:</span> <span>new</span> <span>Uint8Array</span><span>()},</span> <span>function</span><span>(</span><span>c</span><span>)</span> <span>{})</span>
</code></pre></div>

<p>or (equivalently, in Python):</p>

<div><pre><code><span>import</span> <span>ssl</span><span>,</span> <span>socket</span>
<span>assert</span> <span>ssl</span><span>.</span><span>HAS_NPN</span>

<span>ctx</span> <span>=</span> <span>ssl</span><span>.</span><span>create_default_context</span><span>()</span>
<span>ctx</span><span>.</span><span>set_npn_protocols</span><span>([])</span>
<span>ctx</span><span>.</span><span>load_verify_locations</span><span>(</span><span>'root.crt'</span><span>)</span>
<span>sock</span> <span>=</span> <span>socket</span><span>.</span><span>create_connection</span><span>((</span><span>'127.0.0.1'</span><span>,</span> <span>443</span><span>))</span>
<span>sock</span> <span>=</span> <span>ctx</span><span>.</span><span>wrap_socket</span><span>(</span><span>sock</span><span>,</span> <span>server_hostname</span><span>=</span><span>'localhost'</span><span>)</span>
<span>sock</span><span>.</span><span>write</span><span>(</span><span>'hello'</span><span>)</span>
</code></pre></div>

<p><strong>Silently sends up to 255 bytes of the client’s heap to the server</strong>.  The server
must support <a href="https://datatracker.ietf.org/doc/html/draft-agl-tls-nextprotoneg-04">NPN</a>, and the heap data is encrypted in transit.</p>

<p>This is confirmed to affect Python &lt;= 3.9 and Node &lt;= 9.  It may equally
affect any program that calls <code>SSL_select_next_proto</code> with a <code>client</code>
buffer that is not a valid list of protocols (this includes an empty buffer).</p>

<p>Meeting those constraints is quite unlikely nowadays:</p>

<ul>
  <li>NPN is a precursor to ALPN and was abandoned in 2012.  It is very uncommon on internet servers now.</li>
  <li>Node.js 10 and later removed NPN support, and is well past end-of-life.</li>
  <li>Python 3.10 and later removed NPN support.</li>
</ul>

<p>However, they <em>were</em> much more common in the lifetime of this bug.  <strong>You should review your historic usage</strong>
of <code>SSL_select_next_proto</code> and if you could have ever triggered this bug, I would suggest rolling any
secrets available to affected programs.</p>

<p>Android was affected <a href="https://android.googlesource.com/platform/libcore/+/9c5e545bc78132ee8d27fd77ccaea6d3a6090ac0%5E%21/">up until 2014</a>, with the heap leak behaviour
observed <a href="https://github.com/square/okhttp/issues/437#issuecomment-35860090">independently by an okhttp developer</a>.</p>

<h2 id="affected-versions">Affected versions</h2>

<ul>
  <li>All versions of OpenSSL 1.0.x, 1.1.x, 3.x.</li>
  <li>BoringSSL was also affected, and <a href="https://boringssl.googlesource.com/boringssl/+/c1d9ac02514a138129872a036e3f8a1074dcb8bd">have already landed their fix</a>.</li>
  <li>LibreSSL retains the faulty <code>SSL_select_next_proto</code>, however NPN support was removed in 2017
so is not meaningfully broken.</li>
</ul>

<h2 id="timeline">Timeline</h2>

<ul>
  <li><strong>2011-11-13</strong> - Bug introduced.</li>
  <li><strong>2014-04-10</strong> - Work-around for bug added to Android after discovery by okhttp developer.</li>
  <li><strong>2024-04-23</strong> - Discovery of <code>SSL_select_next_proto</code> memory unsafety while <a href="https://github.com/rustls/rustls-openssl-compat/tree/main/rustls-libssl">rewriting it in rust</a>.</li>
  <li><strong>2024-05-02</strong> - Discovery that Python 3.9 was practically affected</li>
  <li><strong>2024-05-02</strong> - Report to OpenSSL project</li>
  <li><strong>2024-05-08</strong> - Chase-up</li>
  <li><strong>2024-05-08</strong> - Acknowledgement from OpenSSL project</li>
  <li><strong>2024-05-22</strong> - Report to BoringSSL</li>
  <li><strong>2024-05-23</strong> - Discovery that Node.js 9 was practically affected</li>
  <li><strong>2024-05-30</strong> - Assigned CVE-2024-5535 and assessed as “Low” severity</li>
  <li><strong>2024-05-31</strong> - Reported to security@python.org by David Benjamin</li>
  <li><strong>2024-06-04</strong> - Python security confirm “Low” severity</li>
  <li><strong>2024-06-25</strong> - In preparing this blog post, discovery that Android was affected until 2014.</li>
  <li><strong>2024-06-27</strong> - <a href="https://www.openssl.org/news/secadv/20240627.txt">Advisory</a> released.</li>
</ul>

<h2 id="conclusions">Conclusions</h2>

<ul>
  <li>
    <p>The various audits, code reviews, static analysis, dynamic analysis, fuzzing,
and popularity were not sufficient to remedy this bug earlier.</p>

    <p>Though valgrind immediately points it out once triggered, and a really basic
static pointer bounds analysis should also find it (though likely with a huge
false-positive rate in other code.)</p>
  </li>
  <li>
    <p>The known exposures to this bug (Python, Node, Android) are probably not all
of them, but most likely will be historic.</p>
  </li>
</ul>

<h2 id="acknowledgements">Acknowledgements</h2>

<ul>
  <li>This discovery was made in the course of building <a href="https://github.com/rustls/rustls-openssl-compat/tree/main/rustls-libssl">rustls-libssl</a>: this work
was funded by <a href="https://www.memorysafety.org/">ISRG Prossimo</a>.</li>
  <li>Thanks to <a href="https://github.com/cpu">Daniel McCarney</a> for pointing out the divergence in our <code>SSL_select_next_proto</code>.</li>
  <li>Thanks to Rich Salz @ Akamai for advice on communications with the OpenSSL project.</li>
  <li>Thanks to David Benjamin @ Google for advice and analysis, and taking care of the report to Python.</li>
</ul>

<h2 id="report">Report<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup></h2>

<p><code>SSL_select_next_proto</code> called with <code>client_len == 0</code> unconditionally reads
<code>client[0]</code> and returns the pointer <code>client + 1</code>.  Thereafter, <code>*out</code> points
outside a valid address, and <code>*outlen</code> contains an undefined value.</p>

<p>Minimal reproducer:</p>

<div><pre><code><span>#include</span> <span>&lt;openssl/ssl.h&gt;</span><span>
#include</span> <span>&lt;stdint.h&gt;</span><span>
#include</span> <span>&lt;stdio.h&gt;</span><span>
</span>
<span>int</span> <span>main</span><span>()</span> <span>{</span>
  <span>uint8_t</span> <span>client_input</span><span>[]</span> <span>=</span> <span>{};</span>
  <span>uint8_t</span> <span>*</span><span>output</span> <span>=</span> <span>NULL</span><span>;</span>
  <span>uint8_t</span> <span>output_len</span> <span>=</span> <span>0</span><span>;</span>
  <span>const</span> <span>uint8_t</span> <span>server_input</span><span>[]</span> <span>=</span> <span>{</span><span>2</span><span>,</span> <span>'h'</span><span>,</span> <span>'2'</span><span>};</span>

  <span>int</span> <span>ret</span> <span>=</span> <span>SSL_select_next_proto</span><span>(</span><span>&amp;</span><span>output</span><span>,</span> <span>&amp;</span><span>output_len</span><span>,</span> <span>server_input</span><span>,</span>
                                  <span>sizeof</span><span>(</span><span>server_input</span><span>),</span> <span>client_input</span><span>,</span> <span>0</span><span>);</span>
  <span>printf</span><span>(</span><span>"ret = %d</span><span>\n</span><span>"</span><span>,</span> <span>ret</span><span>);</span>
  <span>printf</span><span>(</span><span>"output = %p</span><span>\n</span><span>"</span><span>,</span> <span>output</span><span>);</span>
  <span>printf</span><span>(</span><span>"output_len = %u</span><span>\n</span><span>"</span><span>,</span> <span>(</span><span>unsigned</span><span>)</span><span>output_len</span><span>);</span>
  <span>return</span> <span>0</span><span>;</span>
<span>}</span>
</code></pre></div>

<h2 id="impact">Impact</h2>

<p><code>SSL_select_next_proto</code> is a normal API function so the parameters passed
to it are ultimately up to the application.  However it is almost always used inside
an ALPN or NPN callback:</p>

<p>If <code>SSL_select_next_proto</code> is used straightforwardly in a server’s ALPN callback,
there is no impact because other code in openssl validates the client’s extension as being
non-empty.</p>

<p>If <code>SSL_select_next_proto</code> is used straightforwardly in a client’s NPN callback,
the client data and its length is typically a matter of local configuration and
not under openssl’s control.  Most importantly, the impact of the wrong length and
pointer being returned from this function is a catastrophic memory safety failure:
the memory is copied, placed into the <code>selected_protocol</code> field of the
<code>NextProtocolNegotiationEncryptedExtension</code> and sent to the peer!</p>

<p>As a realistic demonstration, in python3.9<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" rel="footnote">2</a></sup> the following code sees OpenSSL
send a chunk of heap to the server:</p>

<div><pre><code><span>import</span> <span>ssl</span><span>,</span> <span>socket</span>
<span>assert</span> <span>ssl</span><span>.</span><span>HAS_NPN</span>

<span>ctx</span> <span>=</span> <span>ssl</span><span>.</span><span>create_default_context</span><span>()</span>
<span>ctx</span><span>.</span><span>set_npn_protocols</span><span>([])</span>
<span>ctx</span><span>.</span><span>load_verify_locations</span><span>(</span><span>'root.crt'</span><span>)</span>

<span>sock</span> <span>=</span> <span>socket</span><span>.</span><span>create_connection</span><span>((</span><span>'127.0.0.1'</span><span>,</span> <span>443</span><span>))</span>
<span>sock</span> <span>=</span> <span>ctx</span><span>.</span><span>wrap_socket</span><span>(</span><span>sock</span><span>,</span> <span>server_hostname</span><span>=</span><span>'localhost'</span><span>)</span>
<span>sock</span><span>.</span><span>write</span><span>(</span><span>'hello'</span><span>)</span>
</code></pre></div>

<p>The peer receives (for example):</p>

<div><pre><code>NextProtocolNegotiationEncryptedExtension {
  selected_protocol: c2d60ba35f00000000000000000000000000000000000031000000000000000
                     00000000000000060f3030d5e7f0000e0f5b9f1a65f00002006aaf1a65f0000
                     d04b0f0d5e7f0000210000000000000000f6b9f1a65f000030f6b9f1a65f000
                     0d0ebb9f1a65f00003100000000000000,
  padding: 000000000000000000000000000000,
}
</code></pre></div>


</div></div>]]></description>
        </item>
    </channel>
</rss>