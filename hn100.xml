<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 09 Feb 2025 17:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Don't "optimize" conditional moves in shaders with mix()+step() (199 pts)]]></title>
            <link>https://iquilezles.org/articles/gpuconditionals/</link>
            <guid>42990324</guid>
            <pubDate>Sun, 09 Feb 2025 12:42:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://iquilezles.org/articles/gpuconditionals/">https://iquilezles.org/articles/gpuconditionals/</a>, See on <a href="https://news.ycombinator.com/item?id=42990324">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">



<h3>Intro</h3><hr><p>
In this article I want to correct a popular misconception that's been making the rounds in computer graphics aficionado circles for a long time now. It has to do with branching in the GPUs. Unfortunately there are a couple of educational websites out there that are spreading some misinformation and it would be nice correcting that. I tried contacting the authors without success, so without further ado, here goes my attempt to fix things up:</p><h3>The issue</h3><hr><p>
So, say I have this code, which I actually published the other day:</p><p><span>vec2</span> snap45( <span>in vec2</span> v )
{
    <span>vec2</span> s = <span>sign</span>(v);
    <span>float</span> x = <span>abs</span>(v.x);
    <span>return</span> x&gt;<span>0.923880</span>?<span>vec2</span>(s.x,<span>0.0</span>):
           x&gt;<span>0.382683</span>?s*<span>sqrt</span>(<span>0.5</span>):
                      <span>vec2</span>(<span>0.0</span>,s.y);
}</p>
<p>
The exact details of what it does don't matter for this discussion. All we care about is the two ternary operations, which as you know, implement conditional execution. Indeed, depending on the value of the variable <b>x</b>, the function will return different results. This could be implemented also with regular <b>if</b> statements, and all that I'm going to say stays the same.</p><p>

But here's the problem - when seeing code like this, somebody somewhere will invariably propose the following "optimization", which replaces what they believe (erroneously) are "conditional branches" by arithmetical operations. They will suggest something like this:</p><p><span>vec2</span> snap45( <span>in vec2</span> v )
{
    <span>vec2</span> s = <span>sign</span>(v);
    <span>float</span> x = <span>abs</span>(v.x);

    <span>float</span> w0 = <span>step</span>(<span>0.92387953</span>,x);
    <span>float</span> w1 = <span>step</span>(<span>0.38268343</span>,x)*(<span>1.0</span>-w0);
    <span>float</span> w2 = <span>1.0</span>-w0-w1;

    <span>vec2</span> res0 = <span>vec2</span>(s.x,<span>0.0</span>);
    <span>vec2</span> res1 = <span>vec2</span>(s.x,s.y)*<span>sqrt</span>(<span>0.5</span>);
    <span>vec2</span> res2 = <span>vec2</span>(<span>0.0</span>,s.y);

    <span>return</span> w0*res0 + w1*res1 + w2*res2;
}</p>
<p>
There are two things wrong with this practice. The first one shows an incorrect understanding of how the GPU works. In particular, the original shader code had no conditional branching in it. Selecting between a few registers with a ternary operator or with a plain <b>if</b> statement does not lead to conditional branching; all it involves is a conditional move (a.k.a. "select"), which is a simple instruction to route the correct bits to the destination register. You can think of it as a bitwise AND+NAND+OR on the source registers, which is a simple combinational circuit. Again, there is no branching - the instruction pointer isn't manipulated, there's no branch prediction involved, no instruction cache to invalidation, no nothing.</p><p>

For the record, of course real branches do happen in GPU code, but those are not what's used by the GPU for small moves between registers like we have here. This is true for any GPU made in the last 20+ years. While I'm not an expert in CPUs, I am pretty sure this is true for them as well.</p><p>

The second wrong thing with the supposedly optimizer version is that it actually runs much slower than the original version. The reason is that the <b>step()</b> function is actually implemented like this:</p><p><span>float</span> step( <span>float</span> x, <span>float</span> y )
{
    <span>return</span> x &lt; y ? <span>1.0</span> : <span>0.0</span>;
}</p>
<p>
So people using the step() "optimization" are using the ternary operation anyways, which produces the <b>0.0</b> or <b>1.0</b> which they will use to select the output, only wasting two multiplications and one or two additions. The values could have been conditionally moved directly, which is what the original shader code did.</p><p>

But don't take my word for it, let's look at the generated machine code for the relevant part of the shader I published:</p><div>

<div><p>
GLSL</p><hr>
<p><span>return</span> x&gt;<span>0.923880</span>?<span>vec2</span>(s.x,<span>0.0</span>):
       x&gt;<span>0.382683</span>?s*<span>sqrt</span>(<span>0.5</span>):
                  <span>vec2</span>(<span>0.0</span>,s.y);</p>
</div>
<div><p>
AMD Compiler</p><hr>
<p><span>s_mov_b32</span>     s0, <span>0x3ec3ef15</span>
<span>v_mul_f32</span>     v3, <span>0x3f3504f3</span>, v1
<span>v_mul_f32</span>     v4, <span>0x3f3504f3</span>, v0
<span>s_mov_b32</span>     s1, <span>0x3f6c835e</span>
<span>v_cmp_gt_f32</span>  vcc, <span>abs</span>(v2), s0
<span>v_cndmask_b32</span> v3, 0, v3, vcc
<span>v_cndmask_b32</span> v0, v0, v4, vcc
<span>v_cmp_ngt_f32</span> vcc, <span>abs</span>(v2), s1
<span>v_cndmask_b32</span> v1, v1, v3, vcc
<span>v_cndmask_b32</span> v0, 0, v0, vcc</p>
</div>
<div><p>
Microsoft Compiler</p><hr>
<p><span>lt</span>   r0.xy, l(<span>0</span>, <span>0</span>), v0.xy
<span>lt</span>   r0.zw, v0.xy, l(<span>0</span>, <span>0</span>)
<span>iadd</span> r0.xy, -r0.xyxx, r0.zwzz
<span>itof</span> r0.xy, r0.xyxx
<span>mul</span>  r1.xyzw, r0.xyxy, l4(<span>0.707107</span>)
<span>lt</span>   r2.xy, l(<span>0.923880</span>,<span>0.382683</span>), <span>|</span>v0.xx<span>|</span>
<span>mov</span>  r0.z, l(<span>0</span>)
<span>movc</span> r1.xyzw, r2.yyyy, r1.xyzw, r0.zyzy
<span>movc</span> o0.xyzw, r2.xxxx, r0.xzxz, r1.xyzw</p>
</div>
</div><p>
Here we can see that the GPU is not branching. Instead, according to the AMD compiler, it's performing the required comparisons (<span>v_cmp_gt_f32</span> and <span>v_cmp_ngt_f32</span> - cmp=compare, gt=greater than, ngt=not greated than), and then using the result to mask the results with the bitwise operations mentioned earlier (<span>v_cndmask_b32</span> - cnd=conditional).</p><p>

The Microsoft compiler has expressed the same idea/implementation in a different format, but you can still see the comparison (<span>lt</span> - "lt"=less than) and the masking or conditional move (<span>movc</span> - mov=move, c=conditionally).</p><p>

Not related to the discussion, but also note that the <b>abs()</b> call does not become a GPU instruction and instead becomes an instruction modifier, which is free.</p><h3>Conclusion</h3><hr>
<p>
So, if you ever see somebody proposing this</p><p><span>float</span> a = <span>mix</span>( b, c, <span>step</span>( y, x ) );</p><p>
as an optimization to</p><p><span>float</span> a = x &lt; y ? b : c</p><p>
then please correct them for me. The misinformation has been around for 20 years / 10 GPU generation, and that's more than too long.</p><p>

Thanks!
</p><!-- -------------------------------------------------------------------------------------------- -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Classic Data science pipelines built with LLMs (111 pts)]]></title>
            <link>https://github.com/Pravko-Solutions/FlashLearn/tree/main/examples</link>
            <guid>42990036</guid>
            <pubDate>Sun, 09 Feb 2025 11:39:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Pravko-Solutions/FlashLearn/tree/main/examples">https://github.com/Pravko-Solutions/FlashLearn/tree/main/examples</a>, See on <a href="https://news.ycombinator.com/item?id=42990036">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">FlashLearn – Examples Directory</h2><a id="user-content-flashlearn--examples-directory" aria-label="Permalink: FlashLearn – Examples Directory" href="#flashlearn--examples-directory"></a></p>
<p dir="auto">Below you’ll find an overview of each file, what it showcases, and links to the actual code. You can run these examples (assuming you’ve installed FlashLearn and set your “OPENAI_API_KEY”) simply by using:</p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">How to Run</h2><a id="user-content-how-to-run" aria-label="Permalink: How to Run" href="#how-to-run"></a></p>
<ol dir="auto">
<li>Clone or download the FlashLearn repository (or just copy the examples folder).</li>
<li>Install FlashLearn:

</li>
<li>Set your “OPENAI_API_KEY” (or other provider keys) in your environment:
<div dir="auto" data-snippet-clipboard-copy-content="export OPENAI_API_KEY=&quot;YOUR_API_KEY&quot;"><pre><span>export</span> OPENAI_API_KEY=<span><span>"</span>YOUR_API_KEY<span>"</span></span></pre></div>
</li>
<li>Navigate to the “examples” folder and pick any script. Then run, for example:
<div dir="auto" data-snippet-clipboard-copy-content="python sentiment_classification.py"><pre>python sentiment_classification.py</pre></div>
</li>
<li>Check the console output and JSON results files (e.g., “results.jsonl”).</li>
</ol>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Modern-Day Oracles or Bullshit Machines (351 pts)]]></title>
            <link>https://thebullshitmachines.com</link>
            <guid>42989320</guid>
            <pubDate>Sun, 09 Feb 2025 08:24:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thebullshitmachines.com">https://thebullshitmachines.com</a>, See on <a href="https://news.ycombinator.com/item?id=42989320">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="article" role="main">
      <header id="section-Title-2kXZCkIeDI" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsInRleHRGYWRlIjoibm9uZSIsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
        
        
      </header>
      <div data-scrollymoly-basis="true" data-testid="ENG-5457" id="section-EqRDrghv5N" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsInRleHRGYWRlIjoiYm90aCIsInRleHRCbHVyIjoiYm90aCIsImJhY2tncm91bmRCbHVyIjoiYm90aCIsImJhY2tncm91bmRHcmF5c2NhbGUiOiJvdXQiLCJoYXNFZmZlY3RzIjp0cnVlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6dHJ1ZSwiZW5jb2RlZCI6IiJ9">
                  <h2><span>MODERN-DAY </span><span>ORACLES  </span><br><span>or </span><span>BULLSHIT</span><span><strong> </strong>MACHINES?</span></h2>
                  <p><span>How to thrive in a ChatGPT world  </span></p>
                  
                  <h4><span>Developed by Carl T. Bergstrom and Jevin D. West</span></h4>
                </div>
      
      
      <div id="section-Effects-on-life-gXGw9X23fi" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
              <div>
                    <p>Technologists and publicists gush about how Large Language Models (LLMs) will revolutionize the way we work, learn, play, communicate, create, and connect to another. </p>
                    <p>They are right that artificial intelligence (AI) will affect nearly every aspect of our daily lives. </p>
                    <p>And they are right that by providing a way for people to talk with machines in ordinary language, LLMs constitute a dramatic step forward in making computing accessible to everyone. </p>
                    <p>Yet for all the good that AI systems will do, they will also saturate our information environment with bullshit at a scale we’ve never before encountered.</p>
                    
                  </div>
              <div>
                      <blockquote><span>I think it's going to be the most transformative technology humanity has ever created, potentially on par with or exceeding the invention of the printing press, electricity, and the internet.</span>
                        
                      </blockquote>
                    </div>
            </div>
      <div data-scrollymoly-basis="true" data-testid="ENG-5457" id="section-Course-goals-We6QHjJFqp" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
                  <p><span>For better or for worse, LLMs are here to stay. We all read content that they produce online, most of us interact with LLM chatbots, and many of us use them to produce content of our own.</span></p>
                  
                  <p>In a series of five- to ten-minute lessons, we will explain what these machines are, how they work, and how to thrive in a world where they are everywhere.</p>
                  
                  <p>You will learn when these systems can save you a lot of time and effort. You will learn when they are likely to steer you wrong. And you will discover how to see through the hype to tell the difference. <span><em>?</em></span></p>
                </div>
      <div id="section-O0UgCe5GaC" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
                    <p><strong>Notice of Rights. </strong>The materials provided on this website are freely accessible for personal self-study and for non-commercial educational use in K-12 schools, colleges, and universities. For any commercial or corporate use, please <a href="mailto:cbergst@uw.edu,jevinw@uw.edu">contact the authors</a> to discuss terms and obtain the necessary permissions. Redistribution of website content is prohibited without prior written consent from the authors. However, individual copies may be created to accommodate accessibility needs directly related to educational instruction. </p>
                    <p>Unless otherwise stated, all content is copyrighted © 2025 by the authors. All rights reserved.</p>
                  </div>
      
      
    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Brain Hyperconnectivity in Children with Autism and Its Links to Social Deficits (2013) (107 pts)]]></title>
            <link>https://www.cell.com/cell-reports/fulltext/S2211-1247(13)00570-6</link>
            <guid>42988303</guid>
            <pubDate>Sun, 09 Feb 2025 03:54:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cell.com/cell-reports/fulltext/S2211-1247(13)00570-6">https://www.cell.com/cell-reports/fulltext/S2211-1247(13)00570-6</a>, See on <a href="https://news.ycombinator.com/item?id=42988303">Hacker News</a></p>
Couldn't get https://www.cell.com/cell-reports/fulltext/S2211-1247(13)00570-6: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Is software abstraction killing civilization? (2021) (208 pts)]]></title>
            <link>https://datagubbe.se/endofciv/</link>
            <guid>42986485</guid>
            <pubDate>Sat, 08 Feb 2025 21:49:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://datagubbe.se/endofciv/">https://datagubbe.se/endofciv/</a>, See on <a href="https://news.ycombinator.com/item?id=42986485">Hacker News</a></p>
Couldn't get https://datagubbe.se/endofciv/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Jacksonpollock.org (450 pts)]]></title>
            <link>https://jacksonpollock.org/</link>
            <guid>42986320</guid>
            <pubDate>Sat, 08 Feb 2025 21:22:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jacksonpollock.org/">https://jacksonpollock.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42986320">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Tips for mathematical handwriting (2007) (263 pts)]]></title>
            <link>https://johnkerl.org/doc/ortho/ortho.html</link>
            <guid>42985427</guid>
            <pubDate>Sat, 08 Feb 2025 19:20:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://johnkerl.org/doc/ortho/ortho.html">https://johnkerl.org/doc/ortho/ortho.html</a>, See on <a href="https://news.ycombinator.com/item?id=42985427">Hacker News</a></p>
<div id="readability-page-1" class="page">

<center>


John Kerl
<br><tt>kerl.john.r@gmail.com</tt>
<br>Feb. 25, 2007
</center>

<!-- ================================================================ -->
<hr>


<p>Now that you’re majoring in one of the technical disciplines
(engineering, science, or math), you’re going to be spending a
significant amount of time communicating in writing with others.  You may find
that previously unimportant details, such as crossing your <i>z</i>’s,
now become essential — not only so that others can understand you, but
also so that you can avoid mistaking your own 2<sup><i>z</i></sup> for
<i>z</i><sup>2</sup> and so on.  This is especially important if your
handwriting (like mine!) is less than perfect.

</p><p>Before I continue, take a fresh look at our Roman alphabet, the digits, and
the Greek alphabet:

</p><center><img src="https://johnkerl.org/doc/ortho/texortho.jpg"></center>

<p>Notice that these mechanically typeset symbols are all clear and distinct
(except that lowercase omicron and most of the uppercase Greek letters look
like Roman letters — we don’t use these “duplicates”).

</p><p> When we write by hand, though, symbols can become ambiguous —
we’re not machines, and things get a little loopy when we hurry.  In
prose, surrounding letters can disambiguate a questionable letter — e.g.
you can guess that the fourth letter of <i>hou*e</i> has to be an <i>s</i>.
But in mathematical expressions we mix symbols from different alphabets, in
different orders, so context can’t assist us — and when we guess,
we often guess wrong.  So it now becomes very important that each letter be
clearly recognizable on its own merits.

</p><p>Here are samples, followed by the points I consider most important.

</p><center><img src="https://johnkerl.org/doc/ortho/jkortho.jpg"></center>

<p>
<b>Lowercase Roman letters:</b>
</p><ul>

<li>Always make the lowercase <i>l</i> cursive —
otherwise it looks like a 1.
Make sure it’s taller than an <i>e</i>:
<img src="https://johnkerl.org/doc/ortho/letters/jkell.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk1.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jke.jpg">.
The lowercase <i>l</i> isn’t a good variable name to use (since it can
look like a 1), but lots of people use it and so you’ll be seeing more of
it.

</li><li>Make a point come out of the top of the <i>p</i>, to distinguish it from a
rho:
<img src="https://johnkerl.org/doc/ortho/letters/jkp.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkrho.jpg">.

</li><li>Put a stroke on the <i>q</i>, to avoid confusion with 9 — and not a loop, to avoid confusion with 8:
<img src="https://johnkerl.org/doc/ortho/letters/jkq.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk9.jpg">.

</li><li>Put a hook at the bottom of the <i>t</i> so it doesn’t look like a
plus sign:
<img src="https://johnkerl.org/doc/ortho/letters/jkt.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkplus.jpg">.

</li><li>Put a tail on the <i>u</i>, so it doesn’t look like a <i>v</i>:
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">.

</li><li>Keep the <i>v</i> and <i>w</i> pointy on the bottom so they don’t
look like nu and omega, respectively:
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkw.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jknu.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkomega.jpg">.

</li><li>Put a hook on the <i>x</i> to distinguish it from a times sign:
<img src="https://johnkerl.org/doc/ortho/letters/jkx.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jktimes.jpg">.
In 3rd-semester calculus and onward you’ll be using the times sign quite
often.

</li><li>Cross your <i>z</i>’s.  Else they look like 2’s:
<img src="https://johnkerl.org/doc/ortho/letters/jkz.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk2.jpg">.

</li></ul>

<p>
<b>Uppercase Roman letters:</b>
</p>

<p>
<b>Digits:</b>
</p>

<p>
<b>Lowercase Greek letters:</b>
</p><ul>

<li>Many incoming freshmen aren’t accustomed to Greek letters, and
substitute alphas with <i>a</i>’s, and so on.  The fact is, though,
you’re going to be seeing more and more Greek letters as you go on.  Your
mathematical world is growing — accept it, and learn to use this
beautiful alphabet.

</li><li>Draw the alpha in one easy swoosh.  Be careful it doesn’t look like a
2:
<img src="https://johnkerl.org/doc/ortho/letters/jkalpha.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk2.jpg">.

</li><li>Put a long tail on the eta and mu to keep them from looking like <i>n</i>
and cursive <i>u</i>, respectively:
<img src="https://johnkerl.org/doc/ortho/letters/jketa.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkmu.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkn.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">.

</li><li>Put a hook on the top of the lambda:
<img src="https://johnkerl.org/doc/ortho/letters/jklambda.jpg">.

</li><li>The nu is a very bad letter — it looks like too many others!
Unfortunately, lots of people use it.  Include the hook on the left, and the
point at the bottom, to keep it from looking like a <i>u</i> or <i>v</i> or
upsilon:
<img src="https://johnkerl.org/doc/ortho/letters/jknu.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkupsilon.jpg">.

</li><li>We don’t use omicron — it’s identical to a Roman
<i>o</i>.

</li><li>The upsilon is just as bad as the nu.  Happily, not many people use it.
Make sure it doesn’t look like a <i>u</i>, <i>v</i>, or nu:
<img src="https://johnkerl.org/doc/ortho/letters/jkupsilon.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jknu.jpg">.

</li><li>Keep the slash in the phi vertical; keep the slash in the empty-set symbol
slanted:
<img src="https://johnkerl.org/doc/ortho/letters/jkphi.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkemptyset.jpg">.

</li><li>The lower-case chi is tricky, and unfortunately it gets used a lot.  Make
the upward slash far bigger than the downward slash to distinguish this letter
from lowercase <i>x</i> and uppercase <i>X</i>:
<img src="https://johnkerl.org/doc/ortho/letters/jkchi.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkx.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkcapX.jpg">.

</li><li>Keep the omega rounded to distinguish it from <i>w</i>.  This one gets used
a lot in physics courses.
<img src="https://johnkerl.org/doc/ortho/letters/jkomega.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkw.jpg">.

</li></ul>

<p>
<b>Uppercase Greek letters:</b>
</p>

<!-- ================================================================ -->
<!--
<hr>
<p>John Kerl
<br><tt>kerl at math dot arizona dot edu</tt>
<br>Feb. 25, 2007
-->

<!-- ================================================================ -->
<hr>
<p>

<a href="https://johnkerl.org/index.html"><i>← Back</i></a>


</p></div>]]></description>
        </item>
    </channel>
</rss>