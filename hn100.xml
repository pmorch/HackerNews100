<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 16 Nov 2023 18:00:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Privacy is priceless, but Signal is expensive (276 pts)]]></title>
            <link>https://signal.org/blog/signal-is-expensive/</link>
            <guid>38291427</guid>
            <pubDate>Thu, 16 Nov 2023 16:18:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://signal.org/blog/signal-is-expensive/">https://signal.org/blog/signal-is-expensive/</a>, See on <a href="https://news.ycombinator.com/item?id=38291427">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img src="https://signal.org/blog/images/signal-is-expensive-header.jpg" alt="An illustration of a phone screen displaying the Signal interface. Every interface element is represented by photos of currencies from around the world."></p><p>Signal is the world’s most widely used truly private messaging app, and our cryptographic technologies provide extra layers of privacy beyond the Signal app itself. Since launching in 2013, the Signal Protocol—our end-to-end encryption technology—has become the de facto standard for private communication, protecting the contents of billions of conversations in WhatsApp, Google Messages, and many others. Signal also continues to invest in research and development in the pursuit of extending communications privacy. This commitment underlies our recent work to add a layer of <a href="https://signal.org/blog/pqxdh/">quantum resistance</a> to the Signal Protocol, and our previous work on <a href="https://signal.org/blog/sealed-sender/">metadata protection technologies</a> that help keep personal details like your <a href="https://signal.org/blog/building-faster-oram/">contact list</a>, <a href="https://signal.org/blog/signal-private-group-system/">group membership</a>, <a href="https://signal.org/blog/signal-profiles-beta/">profile name</a>, and other intimate information secure. This singular focus on preserving the ability to communicate privately is one reason that we work in the open, documenting our thinking and <a href="https://github.com/signalapp">making our code open source</a> and open to scrutiny—so you don’t have to take our word for it.</p><p>Signal is also a nonprofit, unlike almost every other consumer tech company.<sup id="fnref:1"><a href="#fn:1">1</a></sup> This provides an essential structural safeguard ensuring that we stay true to our privacy-focused mission. To put it bluntly, as a nonprofit we don’t have investors or profit-minded board members knocking during hard times, urging us to “sacrifice a little privacy” in the name of hitting growth and monetary targets. This is important in an industry where “free” consumer tech is almost always underwritten by monetizing surveillance and invading privacy. Such practices are often accompanied by “growth hacking” and engagement maximization techniques that leverage <a href="https://en.wikipedia.org/wiki/Dark_pattern">dark patterns</a> to keep people glued to feeds and notifications. While Signal is also free to use, we reject this kind of manipulation, focusing instead on creating a straightforward interpersonal communications app. We also reject business models that incentivize such practices.</p><p>Instead of monetizing surveillance, we’re supported by donations, including a generous initial loan from Brian Acton. Our goal is to move as close as possible to becoming fully supported by small donors, relying on a large number of modest contributions from people who care about Signal. We believe this is the safest form of funding in terms of sustainability: ensuring that we remain accountable to the people who use Signal, avoiding any single point of funding failure, and rejecting the widespread practice of monetizing surveillance.</p><p>But our nonprofit structure doesn’t mean it costs less for Signal to produce a globally distributed communications app. Signal is a nonprofit, but we’re playing in a lane dominated by multi-billion-dollar corporations that have defined the norms and established the tech ecosystem, and whose business models directly contravene our privacy mission. So in order to provide a genuinely useful alternative, Signal spends tens of millions of dollars every year. <strong>We estimate that by 2025, Signal will require approximately $50 million dollars a year to operate—<em>and this is very lean compared to other popular messaging apps that don’t respect your privacy</em></strong>.</p><p>Here we review some of these costs and where this money goes, in the name of providing more transparency into Signal. But we hope to do more than that. Where money goes and how it’s made is a bit of a taboo in tech, something that most tech companies avoid talking about. The actual costs of consumer tech are generally hidden behind stories of innovation and the word “free,” and the connection between the product marketing of a highly profitable tech industry and the ingress and egress of profit and revenue is usually unclear. We believe a material map of these dynamics can help clarify just what is required to fulfill the dream of privacy-preserving alternative technology, and contribute to establishing a solid foundation from which we can grow alternatives that contest tech surveillance and the incentives behind it.</p><p>This is not a comprehensive overview—this post isn’t meant to provide a full accounting or to review every line item in detail. Instead, we focus on illustrative examples, looking at infrastructure and labor in particular. We’ll also explore average costs that in practice vary dynamically in relation to factors that are often outside of our control.<sup id="fnref:2"><a href="#fn:2">2</a></sup></p><h2 id="infrastructurally-different">Infrastructurally Different</h2><p>We’ll start with an overview of some of Signal’s biggest infrastructural costs—what we pay for the utilities and services that let Signal reach you. These include the temporary storage of end-to-end encrypted data for message delivery; the global server network that processes billions of requests every day; the registration fees that cover the delivery of verification codes during the sign-up process to help verify phone numbers and prevent spam accounts; the bandwidth that is required to efficiently route end-to-end encrypted messages and calls around the world; and some of the additional services that keep everything running smoothly. We’ll dive into each of these in more detail, but here’s a quick breakdown:</p><p><strong>Storage:</strong> $1.3 million dollars per year.<br> <strong>Servers:</strong> $2.9 million dollars per year.<br> <strong>Registration Fees:</strong> $6 million dollars per year.<br> <strong>Total Bandwidth:</strong> $2.8 million dollars per year.<br> <strong>Additional Services:<sup id="fnref:3"><a href="#fn:3">3</a></sup></strong> $700,000 dollars per year.</p><p><strong>Current Infrastructure Costs (as of November 2023):</strong> Approximately $14 million dollars per year.</p><h3 id="the-cost-of-storing-nothing-and-serving-everyone">The Cost of Storing Nothing and Serving Everyone</h3><p>Data is profitable, and we’re a nonprofit focused on collecting as little data as possible.</p><p>Most tech companies collect and create as much data as they can. They build large <a href="https://en.wikipedia.org/wiki/Data_warehouse">data warehouses</a>, and then later invent new terms like <a href="https://en.wikipedia.org/wiki/Data_lake">“data lake”</a> when their unquenchable thirst for more of your private information can no longer fit within the confines of a single warehouse. Their default move is to store everything for as long as they can in an easily accessible and unencrypted format, suffering <a href="https://www.theverge.com/2022/11/28/23481786/meta-fine-facebook-data-leak-ireland-dpc-gdpr">data breach</a>, after <a href="https://news.bloomberglaw.com/privacy-and-data-security/google-tax-firms-see-data-privacy-suits-after-congress-report">data breach</a>, after <a href="https://www.npr.org/2023/07/12/1187208383/china-hack-us-government-microsoft">data breach</a>, hoping to monetize this data by indirectly (or directly) selling it to advertisers or using it to train AI models. Again, data is profitable.</p><p>In contrast, Signal’s default move is to <a href="https://signal.org/blog/looking-back-as-the-world-moves-forward/">end-to-end encrypt everything that we possibly can</a> and to <a href="https://signal.org/bigbrother/">store as little as possible</a>—all while making sure your messages are delivered promptly and your calls are clear and free of delays. We do this by taking advantage of globally distributed hosting infrastructure and by paying for significant amounts of bandwidth from some of the top providers in the world.</p><p>Just like everything else in Signal, messages and files are always end-to-end encrypted. When you send a message, the Signal service <em>temporarily queues</em> that message for delivery. As soon as your message is delivered, that small bundle of encrypted data (i.e. your message) can be dropped from the queue. The storage of end-to-end encrypted files is temporary too, and any undelivered end-to-end encrypted data is automatically purged after a period of inactivity. Even though everything is only temporary, <strong>this storage still costs Signal around $1.3 million dollars per year</strong>.</p><p>This is a lot of money, although it’s less than it would cost if we stored everything forever. But unlike the tech companies that collect and store everything, we don’t have (and do not want to have) any surveillance data to sell or use to recoup these costs. We can’t read or access any end-to-end encrypted messages because the keys that are required to decrypt them are in your hands, not ours. And it’s not just about your messages. Signal also uses our metadata encryption technology to protect intimate information about who is communicating with whom—we <a href="https://signal.org/blog/sealed-sender/">don’t know who is sending you messages</a>, and we <a href="https://signal.org/blog/building-faster-oram/">don’t have access to your address book</a> or <a href="https://signal.org/blog/signal-profiles-beta/">profile information</a>. We believe that the inability to monetize encrypted data is one of the reasons that strong end-to-end encryption technology has not been widely deployed across the commercial tech industry.</p><p>In order to provide a globally accessible, reliable, and high-performance communications service for the many millions of people around the world who depend on Signal, it’s necessary for Signal’s servers to be globally distributed. Having a geographically distributed network of servers is particularly important for end-to-end encrypted voice and video calls, because latency can result in audio delays or degraded video connections that quickly make the app unusable for real-time communication.</p><p>Because everything in Signal is end-to-end encrypted, we can rent server infrastructure from a variety of providers like <a href="https://aws.amazon.com/">Amazon AWS</a>, <a href="https://cloud.google.com/compute">Google Compute Engine</a>, <a href="https://azure.microsoft.com/en-us">Microsoft Azure</a>, and others while ensuring that your messages and calls remain private and secure. We can’t access them, and neither can the companies that provide any of the infrastructure we rent. As a small nonprofit organization, we cannot afford to purchase all of the physical computers that are necessary to support everyone who relies on Signal while also placing them in independent data centers around the world. Only a select few of the very largest companies globally are still capable of doing this, which is a hallmark of a troublingly concentrated industry.<sup id="fnref:4"><a href="#fn:4">4</a></sup></p><p>Signal’s addition of novel privacy-preserving features also affects our server costs. To pick one example, we developed a new approach to private contact discovery in 2017 that uses a <a href="https://en.wikipedia.org/wiki/Trusted_execution_environment">trusted execution environment</a>. This made us the first large-scale messaging app to let people automatically find their friends and contacts without revealing their address book to us, keeping these connections private. Because other mainstream apps don’t have this layer of privacy protection in place, they can often access details about your network and relationships without restrictions, and many of them store this highly sensitive information for later use.<sup id="fnref:5"><a href="#fn:5">5</a></sup></p><p>When we first deployed this system in 2017, only a few servers were necessary. But as the number of people using Signal increased, the number of servers required to support private contact discovery also rose. At its peak, nearly 600 servers were dedicated to private contact discovery alone, at a total cost of <strong>more than $2 million dollars per year</strong>.</p><p>This significant cost would have continued to rise. However, thanks to <a href="https://signal.org/blog/building-faster-oram/">algorithmic research advances</a> and hardware updates, we’ve been able to reduce the total number of private contact discovery servers to around 10 total—despite the fact that the service is handling more traffic than ever. A significant amount of money and engineering resources have been dedicated to ensuring that your address book remains completely inaccessible to us, and Signal will continue to push the envelope and introduce new techniques to enhance your privacy even when the initial costs are high.</p><h3 id="registration-fees">Registration Fees</h3><p>Signal incurs expenses when people download Signal and sign up for an account, or when they re-register on a new device. We use third-party services to send a registration code via SMS or voice call in order to verify that the person in possession of a given phone number actually intended to sign up for a Signal account. This is a critical step in helping to prevent spam accounts from signing up for the service and rendering it completely unusable—a non-trivial problem for any popular messaging app.</p><p>Signal’s registration service routes registration codes over multiple telephony providers to optimize delivery across the globe, and the fees we pay to third-party vendors for every verification code we send can be very high. This is in part, we believe, because legacy telecom operators have realized that SMS messages are now used primarily for app registration and two-factor authentication in many places, as people switch to calling and texting services that rely on network data. In response to increased verification traffic from apps like Signal, and decreased SMS revenue from their own customers, these service providers have significantly raised their SMS rates in many locations, assuming (correctly) that tech companies will have to pay anyway.</p><p><strong>The cost of these registration services for verifying phone numbers when people first install Signal, or when they re-register on a new device, currently averages around $6 million dollars per year.</strong></p><p>These costs vary dramatically from month to month, and the rates that we pay are sometimes inflated due to <a href="https://www.twilio.com/docs/verify/preventing-toll-fraud#what-is-sms-pumping">“toll fraud”</a>—a practice where some network operators split revenue with fraudulent actors to drive increased volumes of SMS and calling traffic on their network. The telephony providers that apps like Signal rely on to send verification codes during the registration process still charge their own customers for this make-believe traffic, which can increase registration costs in ways that are often unpredictable. Of course, Signal does everything we can to reduce or eliminate the impact of toll fraud. We work closely with our voice and SMS verification providers to detect and shut down fraudulent registrations as quickly as possible. But it’s still a game of cat and mouse, with unavoidable expenses along the way.</p><h3 id="the-going-rate-for-transfer-rates">The Going Rate for Transfer Rates</h3><p>You are probably familiar with the concept of paying for bandwidth in the form of buying a data plan from your cellular provider or signing up with an Internet Service Provider (ISP) for your home. But it may surprise you to learn that every website, app, and service also pays for the bandwidth they use whenever you connect to them.</p><p>Some pay more than others. Most of the major tech companies (like Amazon, Google, and Microsoft) own and operate their own data centers. After spending billions of dollars to build massive hosting facilities, they install their own fiber optic cables and custom networking equipment. This also means they get to earn a lot of money by charging others for the privilege of using that equipment.<sup id="fnref:6"><a href="#fn:6">6</a></sup> Smaller organizations like Signal can’t afford to build matching infrastructure from scratch, so we (along with almost every startup and tech company) pay rent to the big players in order to access the bandwidth we need.</p><p>Millions of people use Signal every day, and it takes a <em>lot</em> of bandwidth to provide a fast and reliable service. <strong>Signal spends around $2.8 million dollars per year on bandwidth</strong> to support sending messages and files (such as photos, videos, voice notes, documents, etc.) and to enable voice and video calls.</p><p>Voice and video calls require significantly more bandwidth than text messages, and Signal’s end-to-end encrypted calling functionality is one of the most expensive services that we provide. Signal also goes far beyond other messaging apps when it comes to protecting your privacy during voice and video calls, and we do this in ways that substantially increase how much bandwidth we use in order to provide a high-quality calling experience.</p><p>To take one example, Signal always routes end-to-end encrypted calls from people who aren’t in your contacts through a relay server that obscures <a href="https://en.wikipedia.org/wiki/IP_address">IP address</a> information.<sup id="fnref:7"><a href="#fn:7">7</a></sup></p><p>Almost none of our competitors do this, and Signal’s default behavior is much more expensive than the alternative. Automatically relaying 1-on-1 voice and video calls from unknown contacts (instead of always using a <a href="https://en.wikipedia.org/wiki/Peer-to-peer">peer-to-peer connection</a> whenever possible) provides an extra layer of privacy, but results in considerably higher bandwidth costs for Signal’s calling-related relay servers. At current traffic levels, the amount of outbound bandwidth that is required to support Signal voice and video calls is around 20 petabytes per year (that’s 20 million <a href="https://en.wikipedia.org/wiki/Gigabyte">gigabytes</a>) <strong>which costs around $1.7 million dollars per year in bandwidth fees <em>just for calling</em></strong>, and that figure doesn’t include the development costs associated with hiring experienced engineers to maintain our calling software, or the cost of the necessary server infrastructure to support those calls.</p><h2 id="the-human-touch">The Human Touch</h2><p>Signal isn’t just a collection of privacy-preserving services that route end-to-end encrypted messages and calls around the world. It’s also a set of cross-platform apps and modular development components (commonly called libraries) that make this type of private communication possible in the first place. Because the norm is surveillance, we’re often required to create or modify our own libraries from scratch, swapping in privacy instead of using more common frameworks that assume surveillant defaults. Swimming against the tide of an ecosystem whose incentives and infrastructure promote surveillance and privacy invasions is, of course, more time-intensive and more expensive, and requires dedicated and experienced people.</p><p>First, we have three distinct client teams, one for each platform (Android, Desktop, and iOS). These teams are constantly working: adjusting to operating system updates, building new features, and making sure the app works on a wide variety of devices and hardware configurations. We also have dedicated engineering teams that handle the development and maintenance of the <a href="https://github.com/signalapp/signal-server">Signal Server</a> and all of its infrastructure, our calling libraries like <a href="https://github.com/signalapp/RingRTC">RingRTC</a>, and core libraries like <a href="https://github.com/signalapp/libsignal">libsignal</a>. These also need constant development and monitoring.</p><p>Product and design teams help shape the future of the app and determine how it will look and function, while our localization team coordinates translation efforts across more than sixty languages. We even have a full-time, in-house support group that interfaces with people who use Signal and provides detailed technical feedback and real-time troubleshooting information to every other team. This is an essential function, particularly at Signal, because we don’t collect analytics or telemetry data about how people are using Signal.</p><p>This is a lot of work, and we do it with a small and mighty team. In total, around 50 full-time employees currently work on Signal, a number that is shockingly small by industry standards. For example, LINE Corporation, the developers of the <a href="https://line.me/en/">LINE</a> messaging app popular in Japan, has around 3,100 employees,<sup id="fnref:8"><a href="#fn:8">8</a></sup> while the division of Kakao Corp that develops <a href="https://en.wikipedia.org/wiki/KakaoTalk">KakaoTalk</a>, a messaging app popular in Korea, has around 4,000 employees.<sup id="fnref:9"><a href="#fn:9">9</a></sup> Employee counts at bigger corporations like Apple, Meta, and Google’s parent company (Alphabet) are much, much higher.<sup id="fnref:10"><a href="#fn:10">10</a></sup></p><p>To sustain our ongoing development efforts, about half of Signal’s overall operating budget goes towards recruiting, compensating, and retaining the people who build and care for Signal. When benefits, HR services, taxes, recruiting, and salaries are included, this <strong>translates to around $19 million dollars per year.</strong></p><p>We are proud to pay people well. Our goal is to compensate our staff at as close to industry wages as possible within the boundaries of a nonprofit organization. We know that we can’t provide equity, expensive playpen offices, or other benefits common to large tech companies. We also know that we need to recruit and retain a highly experienced and specialized workforce in an extremely competitive industry if we’re going to offer a service that provides a meaningful alternative to apps with far more people and resources. And we don’t believe that precarity should be the cost of doing good. Compared to most tech companies, Signal’s numbers are a drop in the bucket.<sup id="fnref:11"><a href="#fn:11">11</a></sup></p><p>Growth in Signal translates into increased infrastructure costs, and having more infrastructure requires more labor. As of November 2023, Signal’s server network is regularly responding to around 100,000 requests per second, and we routinely break our previous records. A funny thing happens when a globally accessible service starts handling billions of requests every day. Suddenly one-in-a-million possibilities are no longer unique or rare, and unlikely situations become more and more common as Signal grows. It’s not unusual for our engineers to do things like write custom code to reproduce an esoteric and complicated <a href="https://en.wikipedia.org/wiki/IPv6">IPv6</a> connectivity issue that’s affecting people running an arcane operating system configuration in specific regions, but only when connected via a certain set of internet service providers.<sup id="fnref:12"><a href="#fn:12">12</a></sup> Troubleshooting such infrastructure issues can be very expensive, because isolating a problem and developing a fix can take a lot of time and expertise.</p><p>Identifying and fixing arcane problems is not the only thing that takes time and skill. In the context of building for privacy, adding a common feature or service in a way that avoids surveillance frequently requires significant work and creativity. To take one example, profile pictures and profile names are always end-to-end encrypted in Signal. This means that Signal does not have access to your profile name or chosen profile photo. This approach is unique in the industry. In fact, it has been <a href="https://signal.org/blog/signal-profiles-beta/">more than six years</a> since we first announced this additional layer of protection, and as far as we know none of our competitors have yet adopted it. Other messengers can easily see your profile photo, profile name, and other sensitive information that Signal cannot access. Our choice here reflects our staunch commitment to privacy, but it also means that it took Signal more effort to implement support for profile photos. Instead of a weekend project for a single engineer, our teams were required to develop new approaches and concepts within the codebase (like profile keys), which they worked to roll out across multiple platforms after an extended testing period.</p><p>The same dynamic played out again when Signal introduced support for animated GIF searches on Android and iOS. Instead of quickly and easily integrating the standard GIF search SDK that most other apps were using, engineers spent considerable time and creativity developing <a href="https://signal.org/blog/giphy-experiment">another unique privacy-preserving technique</a> that hides GIF search terms from Signal’s servers, while also hiding who is searching for those terms from the GIF search engine itself. We later <a href="https://signal.org/blog/signal-and-giphy-update/">expanded those techniques</a> to further obfuscate GIF search information by obscuring the amount of traffic that passes through the proxied connection.</p><p>When Meta <a href="https://techcrunch.com/2020/05/15/facebook-to-acquire-giphy-in-a-deal-reportedly-worth-400-million/">acquired GIPHY</a>, and many other apps were scrambling to <a href="https://www.theverge.com/2020/5/16/21260104/facebook-giphy-acquisition-twitter-slack-snapchat-apple-imessage-signal-facebook-tinder">contend with the privacy implications of the deal</a>, Signal employees slept soundly knowing that we had already built this feature correctly several years earlier.<sup id="fnref:13"><a href="#fn:13">13</a></sup></p><p>Even more recently, Signal has started taking steps to protect today’s conversations from future threats by <a href="https://signal.org/blog/pqxdh/">adding post-quantum resistance to the Signal Protocol</a>. The financial costs associated with these research and development initiatives are substantial. They’re also essential for building privacy-preserving technology in a dynamic industry where surveillance is the norm.</p><p>By offering a competitive compensation package, Signal helps make it easy for people to choose to develop privacy-preserving technology that benefits the world instead of going to work for the surveillance-advertising-industrial complex. We’re proud of our healthcare plans, family-friendly policies like extended parental leave, flexible schedules, and the many other benefits that help make Signal a <a href="https://signal.org/workworkwork/">great place to work</a>.</p><p>These things cost money, but a world where Signal can attract talented people to work on privacy-preserving technology is a world that looks a lot more attractive.</p><h2 id="future-tense">Future Tense</h2><p>We hope that this cursory tour of some of Signal’s operations and costs helps provide a greater understanding of Signal’s unique place in the tech ecosystem, and of the tech ecosystem itself.</p><p>Our goal of developing an open source private messenger that is supported and sustained by small donations is both highly ambitious and, we believe, existentially important. The cost of most consumer technology is underwritten by surveillance, which has allowed people to assume that “free” is the default, and a handful of industry players have accrued eye-watering amounts of personal data and the unprecedented power to use that data in ways that are shaping our lives and institutions globally.</p><p>To put it another way, the social costs of normalized privacy invasion are staggeringly high, and maintaining and caring for alternative technology has never been more important.</p><p>Signal is working to show that a different approach is possible—an approach that puts privacy at the center, and where organizations are accountable to the people who use and rely on their services, not to investors, or to the endless pursuit of growth and profit.</p><p>Thank you for your support. It’s an honor and privilege to work on Signal every day, and we—very literally—couldn’t do it without you. Please consider donating to Signal via <a href="https://signal.org/donate/">our website</a> or learn how to <a href="https://support.signal.org/hc/en-us/articles/360031949872#how">give using the app</a>.</p><hr></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Linux realtime preemption endgame is near (198 pts)]]></title>
            <link>https://lwn.net/SubscriberLink/951337/e9139cdb65a9cb93/</link>
            <guid>38290145</guid>
            <pubDate>Thu, 16 Nov 2023 14:47:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/SubscriberLink/951337/e9139cdb65a9cb93/">https://lwn.net/SubscriberLink/951337/e9139cdb65a9cb93/</a>, See on <a href="https://news.ycombinator.com/item?id=38290145">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<!-- $Id: slink-none,v 1.2 2005-11-04 22:11:18 corbet Exp $ -->
<blockquote>
<div>
<h3>Welcome to LWN.net</h3>
<p>
The following subscription-only content has been made available to you 
by an LWN subscriber.  Thousands of subscribers depend on LWN for the 
best news from the Linux and free software communities.  If you enjoy this 
article, please consider <a href="https://lwn.net/subscribe/">subscribing to LWN</a>.  Thank you
for visiting LWN.net!
</p></div>
</blockquote>
<p>
The addition of realtime support to Linux is a long story; it first 
<a href="https://lwn.net/Articles/106010/">shows up in LWN</a> in 2004.  For much of that
time, it has seemed like only a little more work was needed to get across
the finish line; thus we ran headlines like <a href="https://lwn.net/Articles/345076/">the
realtime preemption endgame</a> — in 2009.  At the <a href="https://lpc.events/">2023 Linux Plumbers Conference</a>, Thomas
Gleixner informed the group that, now, the end truly is near.  There is
really only one big problem left to be solved before all of that work can
land in the mainline.
</p><p>

<a href="https://lwn.net/Articles/951340/"><img src="https://static.lwn.net/images/conf/2023/lpc/ThomasGleixner-sm.png" alt="[Thomas Gleixner]" title="Thomas Gleixner"></a>

The point of realtime preemption is to ensure that the highest-priority
process will always be able to run with a minimum (and predictable) delay.
To that end, it makes the kernel preemptible in as many situations as
possible, with the exceptions being tightly limited in scope.  The basic
mechanics of how that works have been established for a long time, but
there have been a lot of details to resolve along the way.  The realtime
preemption work has resulted in the rewriting of much of the core kernel
over the years, with benefits that extend far beyond the realtime use case.
</p><p>
Gleixner started by noting that, while the realtime preemption project has
been underway for nearly 20&nbsp;years, it is actually closer to
25&nbsp;years for him — he started working on realtime support for Linux in
1999.  Once it's done, he said, there will be "a big party".  Is that point
at hand?  The answer, he said, is "yes — kind of".  There is one last
holdout to be dealt with: <tt>printk()</tt>.
</p><p>
Whenever code in the kernel needs to send something to the system consoles
and logs, it calls <tt>printk()</tt> or one of the numerous functions built
on top of it.  One might not think that printing a message would be a
challenging task, but it is.  A call to <tt>printk()</tt> can come from any
context, including in non-maskable-interrupt handlers or other
<tt>printk()</tt> calls.  The information being printed may be crucial,
especially in the case of a system crash, so <tt>printk()</tt> calls have
to work regardless of the context.  As a result, there are a lot of
concurrency and locking issues, and lots of driver-related complications.
</p><p>
<tt>printk()</tt>, Gleixner said, is fully synchronous in current kernels;
a call will not return until the message has been sent to all of the
configured destinations.  That is "stupid"; much of what is printed is
simply noise, especially during the boot process, and there is no point to
waiting for it all to go out.  Beyond being pointless, that waiting
introduces latency, which runs counter to the goals of the realtime work,
so the realtime developers have long since moved <tt>printk()</tt> output
into separate threads, making it asynchronous.  That code is a bunch of
hacks rather than a real solution, though.  A better job must be done to
make this work useful for the rest of the kernel.
</p><p>
The <tt>printk()</tt> problem has been worked on seriously since 2018,
resulting in about 300 patches that have either gone upstream or are
waiting in linux-next; this work has been <a href="https://lwn.net/Articles/780556/">covered here</a> at times.  There are, he said,
three final patch sets currently in the works to finish the job.  A few
tricky details are still being worked on.  One of those is the handover
mechanism; if the kernel has an emergency message to put out (it's
crashing, for example), it may need to grab control of a console that is
currently printing a lower-priority message.  Doing that safely from any
context is not an easy thing to do.
</p><p>
Another ongoing task is marking console drivers that are not safe to use in
some contexts; if, for example, outputting a message during a non-maskable
interrupt requires doing video-mode setting, it's just not going to work.
</p><p>
Gleixner finished the prepared part of his talk by saying that, even
though it's getting close, nobody should ask him when the work will be
done.  <tt>printk()</tt> is unpredictable, and he is no longer willing to
even try.  Even so, he expressed hopes that the rest of the realtime
preemption code would be in mainline before the 20th anniversary comes late
in 2024.
</p><p>


<a href="https://lwn.net/Articles/951341/"><img src="https://static.lwn.net/images/conf/2023/lpc/JohnOgness-sm.png" alt="[John Ogness]" title="John Ogness"></a>


An audience member asked whether there had been any interesting changes in
the <tt>printk()</tt> code over the last year; Gleixner answered that there
have been no fundamental conceptual changes.  John Ogness, who has done
much of the <tt>printk()</tt> work, said that the handover code has been
reduced somewhat, but that some work remains; there are 76 console drivers
in the kernel that need to be fixed, and it may take a while until they are
all done.  The handover code has been changed to allow drivers to be
updated one at a time rather than requiring that this work all be done at
once.  (See <a href="https://lwn.net/Articles/909980/">this article</a> for more
discussion on the recent <tt>printk()</tt> work).
</p><p>
Masami Hiramatsu asked which kernel messages need to be printed
synchronously; Gleixner answered that almost everything should be made
asynchronous.  Beyond reducing latency associated with <tt>printk()</tt>
calls, asynchronous output allows the creation of a separate kernel thread for
each console, letting the faster consoles go at full speed rather than
waiting for the slowest one.  He also said that the code has been changed
to ensure that important messages are fully copied into the message buffer
before the first line is output, just in case a faulty console driver brings
the whole system down in flames.  Further safety is obtained by writing to
the known-safe consoles first.  If, for example, there is a
persistent-memory store available, messages are put there before being sent
to physical devices, once again preserving the output even if a faulty
driver kills the system.
</p><p>
As the session closed, Clark Williams asked whether, once the
<tt>printk()</tt> patches go upstream, Gleixner would try to push the rest
of the realtime code (which wasn't discussed in this session) in the same
merge window.  The answer was a qualified "yes"; he might try if all of the
code is staged in linux-next and seems ready to go.
</p><div><p>
[Thanks to the Linux Foundation, LWN's travel sponsor, for supporting our
travel to this event.]
</p></div><table>
           <tbody><tr><th colspan="2">Index entries for this article</th></tr>
           <tr><td><a href="https://lwn.net/Kernel/Index">Kernel</a></td><td><a href="https://lwn.net/Kernel/Index#Kernel_messages">Kernel messages</a></td></tr>
            <tr><td><a href="https://lwn.net/Kernel/Index">Kernel</a></td><td><a href="https://lwn.net/Kernel/Index#Realtime">Realtime</a></td></tr>
            <tr><td><a href="https://lwn.net/Archives/ConferenceIndex/">Conference</a></td><td><a href="https://lwn.net/Archives/ConferenceIndex/#Linux_Plumbers_Conference-2023">Linux Plumbers Conference/2023</a></td></tr>
            </tbody></table><br clear="all">

               <br clear="all">
               <hr><p>
           (<a href="https://lwn.net/Login/?target=/Articles/951337/">Log in</a> to post comments)
           </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenSubtitles is not open anymore (154 pts)]]></title>
            <link>https://blog.opensubtitles.com/opensubtitles/saying-goodbye-to-opensubtitles-org-api-embrace-the-20-black-friday-treat</link>
            <guid>38289582</guid>
            <pubDate>Thu, 16 Nov 2023 14:01:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.opensubtitles.com/opensubtitles/saying-goodbye-to-opensubtitles-org-api-embrace-the-20-black-friday-treat">https://blog.opensubtitles.com/opensubtitles/saying-goodbye-to-opensubtitles-org-api-embrace-the-20-black-friday-treat</a>, See on <a href="https://news.ycombinator.com/item?id=38289582">Hacker News</a></p>
Couldn't get https://blog.opensubtitles.com/opensubtitles/saying-goodbye-to-opensubtitles-org-api-embrace-the-20-black-friday-treat: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Printed robots with bones, ligaments, and tendons (134 pts)]]></title>
            <link>https://ethz.ch/en/news-and-events/eth-news/news/2023/11/printed-robots-with-bones-ligaments-and-tendons.html</link>
            <guid>38288980</guid>
            <pubDate>Thu, 16 Nov 2023 12:56:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ethz.ch/en/news-and-events/eth-news/news/2023/11/printed-robots-with-bones-ligaments-and-tendons.html">https://ethz.ch/en/news-and-events/eth-news/news/2023/11/printed-robots-with-bones-ligaments-and-tendons.html</a>, See on <a href="https://news.ycombinator.com/item?id=38288980">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="content">
                
                    
    
    <!-- Panorama header -->
    

    <!-- Blog header -->
    
    <!-- Tags when not blog -->
    
        
    
    
    

    <!-- Articleheader -->
    <div>
    <p>
            For the first time, researchers have succeeded in printing a robotic hand with bones, ligaments and tendons made of different polymers using a new laser scanning technique.
        </p>
    

</div>

    <!-- Nav & News images -->
    

    <!-- Details -->
    <div>
        <p><span>
            <time datetime="2023-11-15T00:00:00Z">15.11.2023</time>
            
                by
                
                    <a href="https://ethz.ch/en/news-and-events/eth-news/news.html?AUTHOR=RmFiaW8gQmVyZ2FtaW4&amp;path=L2NvbnRlbnQvbWFpbi9lbi9uZXdzLXVuZC12ZXJhbnN0YWx0dW5nZW4vZXRoLW5ld3MvbmV3cy9qY3I6Y29udGVudA" title="Fabio Bergamin">
                
                Fabio Bergamin
                
                    </a>
                
            
            
            
        </span></p><ul>
            <li>
                <a id="newsCommentsLink" href="#comment-system">
                    
                    <span>Number of comments</span>
                </a>
            </li>
            <!-- Socialsharing (configurable) -->
            
    
        
            
                <li>
            
            
            
                </li>
            
        
        
    

        </ul>
    </div>

    <!-- ArticleLeadImage -->
    
        <div>
            <figure>
            <img alt="Two hands printed by a 3D-printer. The left one holds an Eding-Pen and the right one holds a bottle of water" src="https://ethz.ch/en/news-and-events/eth-news/news/2023/11/printed-robots-with-bones-ligaments-and-tendons/_jcr_content/articleLeadImage/image.imageformat.carousel.1442261976.jpg">
			<figcaption>
			    <p>
			      3D printed in one go: A robotic hand made of varyingly rigid and elastic polymers. (Photograph: ETH Zurich/Thomas Buchner)</p>
			  </figcaption>
			</figure>
    
          </div>
    

    <!-- Parsys 1 --> 
    <div>

<div>
                
                	<h2>In brief</h2>
                
                
                <ul> 
 <li><span>By making 3D printing suitable for slow-curing polymers, researchers have greatly expanded the possibilities of soft robotics. The new materials have advantages over the previous ones.</span></li> 
 <li><span>The advances were possible thanks to a new technology that combines 3D printing with a laser scanner and a feedback mechanism.</span></li> 
 <li><span>A spin-off in the US now offers this technology and prints complex objects on customer request.</span></li> 
</ul>
            </div>
<div>
                
                
                <p>3D printing is advancing rapidly, and the range of materials that can be used has expanded considerably. While the technology was previously limited to fast-curing plastics, it has now been made suitable for slow-curing plastics as well. These have decisive advantages as they have enhanced elastic properties and are more durable and robust.</p>
<p>The use of such polymers is made possible by a new technology developed by researchers at ETH Zurich and a US start-up. As a result, researchers can now 3D print complex, more durable robots from a variety of high-quality materials in one go. This new technology also makes it easy to combine soft, elastic, and rigid materials. The researchers can also use it to create delicate structures and parts with cavities as desired.</p>
<h2><b>Materials that return to their original state</b></h2>
<p>Using the new technology, researchers at ETH Zurich have succeeded for the first time in printing a robotic hand with bones, ligaments and tendons made of different polymers in one go. “We wouldn’t have been able to make this hand with the fast-curing polyacrylates we’ve been using in 3D printing so far,” explains Thomas Buchner, a doctoral student in the group of ETH Zurich robotics professor Robert Katzschmann and first author of the study. “We’re now using slow-curing thiolene polymers. These have very good elastic properties and return to their original state much faster after bending than polyacrylates.” This makes thiolene polymers ideal for producing the elastic ligaments of the robotic hand.</p>

            </div>
<div>
            <figure>
            <div>
                <a onclick="javascript:ETHZ_Design.Video.showOverlay(event, this);" onkeypress="javascript:ETHZ_Design.Video.showOverlay(event, this);" tabindex="0" aria-label="YouTube video -  Agree to privacy policy to play video.">
                    <div>
                        <p><img src="https://ethz.ch/bin/ethz/components/previewImage/youtube/54jg4uduIt0.jpg"></p>
                        </div>
                    
                </a>
                <p>
                    By playing the video you accept the privacy policy of YouTube.<a href="https://policies.google.com/privacy?gl=CH&amp;hl=en">Learn more</a>
                    <a onclick="javascript:ETHZ_Design.Video.loadIframe(event, this, 'youtube');" onkeypress="javascript:ETHZ_Design.Video.loadIframe(event, this, 'youtube');" tabindex="0" role="button">OK</a>
                </p>
            </div>
            <figcaption>(Video: ETH Zurich / Nicole Davidson)</figcaption>
                </figure>
            </div>
<div>
                
                
                <p>In addition, the stiffness of thiolenes can be fine-tuned very well to meet the requirements of soft robots. “Robots made of soft materials, such as the hand we developed, have advantages over conventional robots made of metal. Because they’re soft, there is less risk of injury when they work with humans, and they are better suited to handling fragile goods,” Katzschmann explains.</p>
<h2><b>Scanning instead of scraping</b></h2>
<p>3D printers typically produce objects layer by layer: nozzles deposit a given material in viscous form at each point; a UV lamp then cures each layer immediately. Previous methods involved a device that scraped off surface irregularities after each curing step. This works only with fast-curing polyacrylates. Slow-curing polymers such as thiolenes and epoxies would gum up the scraper.</p>

            </div>
<div>
                        <figure>
            <img alt="Creation process of a hand being printed" src="https://ethz.ch/en/news-and-events/eth-news/news/2023/11/printed-robots-with-bones-ligaments-and-tendons/_jcr_content/wide_content/image/image.imageformat.1286.1632000253.jpg">
			<figcaption>
			    <p>
			      The robotic hand is printed layer by layer using polymers of varying elasticity (left: schematic, right: computer graphics). (Visualisations: Buchner TJK et al., Nature 2023)</p>
			  </figcaption>
			</figure>
    
                    </div>
<div>
            <p>To accommodate the use of slow-curing polymers, the researchers developed 3D printing further by adding a 3D laser scanner that immediately checks each printed layer for any surface irregularities. “A feedback mechanism compensates for these irregularities when printing the next layer by calculating any necessary adjustments to the amount of material to be printed in real time and with pinpoint accuracy,” explains Wojciech Matusik, a professor at the Massachusetts Institute of Technology (MIT) in the US and co-author of the study. This means that instead of smoothing out uneven layers, the new technology simply takes the unevenness into account when printing the next layer.</p>
        </div>
<div>
                        <figure>
            <img alt="Two examples of a 3D-printing" src="https://ethz.ch/en/news-and-events/eth-news/news/2023/11/printed-robots-with-bones-ligaments-and-tendons/_jcr_content/wide_content/image_1286535002/image.imageformat.1286.1443377098.jpg">
			<figcaption>
			    <p>
			      Other examples of 3D-printing include a legged robot and metamaterials. The latter could be used to absorb vibrations. (Photographs: ETH Zurich / Thomas Buchner)</p>
			  </figcaption>
			</figure>
    
                    </div>
<div>
                
                
                <p>Inkbit, an MIT spin-off, was responsible for developing the new printing technology. The ETH Zurich researchers developed several robotic applications and helped optimise the printing technology for use with slow-curing polymers. The researchers from Switzerland and the US have now jointly published the technology and their sample applications in the journal <i>Nature</i>.</p>
<p>At ETH Zurich, Katzschmann’s group will use the technology to explore further possibilities and to design even more sophisticated structures and develop additional applications. Inkbit is planning to use the new technology to offer a 3D printing service to its customers and to sell the new printers.<br>
</p>

            </div>
<div>
                
                	<h2><b>Reference</b></h2>
                
                
                <p>Buchner TJK, Rogler S, Weirich S, Armati Y, Cangan BG, Ramos J, Twiddy S, Marini D, Weber A, Chen D, Ellson G, Jacob J, Zengerle W, Katalichenko D, Keny C, Matusik W, Katzschmann RK: Vision-Controlled Jetting for Composite Systems and Robots, Nature, 15. November 2023, doi: <a href="https://doi.org/10.1038/s41586-023-06684-3"><span>external page</span>10.1038/s41586-023-06684-3</a></p>
            </div>

</div>
    <!-- Socialsharing (display only) -->
    
    
        
            
            
            
        
        
    


    <!-- Parsys 2 -->
    
    <!-- Taglist -->
    
        
            
        
    

    <!-- Comments -->
    
    	
	    
    

                
                
            </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I think I need to go lie down (446 pts)]]></title>
            <link>https://twitter.com/multikev/status/1724908185361011108</link>
            <guid>38288130</guid>
            <pubDate>Thu, 16 Nov 2023 11:07:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/multikev/status/1724908185361011108">https://twitter.com/multikev/status/1724908185361011108</a>, See on <a href="https://news.ycombinator.com/item?id=38288130">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="ScriptLoadFailure"><form action="" method="GET"><div><p><span>Something went wrong, but don’t fret — let’s give it another shot.</span></p><br></div></form></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DOS_deck: Play DOS games in the browser with full controller support (202 pts)]]></title>
            <link>https://dosdeck.com/</link>
            <guid>38287554</guid>
            <pubDate>Thu, 16 Nov 2023 09:52:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dosdeck.com/">https://dosdeck.com/</a>, See on <a href="https://news.ycombinator.com/item?id=38287554">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="grid">
          <p><img src="https://dosdeck.com/static/img/logo-text.png" width="300"></p><h2>What is DOS_deck?</h2>
          <p>
            Experience <b>classic games</b> with <b>modern convenience</b> at DOS_deck. With full controller support and a carefully curated game collection, enjoy timeless classics and hidden gems, readily available for instant play in your web browser on devices you already own. 
          </p>
          <p>
            DOS_deck runs seamlessly on Steam Deck, Mac, and Windows using Chrome, Edge or Safari. Whether you prefer playing on a TV or a laptop screen, using a gamepad or mouse and keyboard, DOS_deck adapts to your gaming style.
          </p>
          <h2>Why choose DOS_deck?</h2>
          <p>DOS_deck features:</p>
          <ul>
            <li>
              <em>🕹️</em> <b>Instant Play</b><br>
              Dive into your favorite MS-DOS games without downloading, installation or configuration. Click, play, and relive the nostalgia.</li>
            <li>
              <em>🎮</em> <b>Controller Support</b><br>
              Enhance your gaming experience by connecting your gamepad for a modern convenient experience.
            </li>
            <li>
              <em>📺</em> <b>Go Full Screen</b><br>
              Play distraction-free by going full screen and enjoying your games to the max.
            </li>
            <li>
              <em>💾</em> <b>Automatic Game Progress Saving</b><br>
              Never worry about losing your progress. DOS_deck automatically saves your game state when you exit, so you can pick up where you left off.
            </li>
            <li>
              <em>⌨️</em> <b>Virtual Keyboard</b><br>
              A virtual keyboard is available for when you need to input text and don't want to leave the couch.
            </li>
            <li>
              <em>❤️</em> <b>Game Favorites</b><br>
              Keep track of your preferred games by adding them to your list of favorites. Easily access your beloved titles in one place.
            </li>
            <li>
              <em>ℹ️</em> <b>Detailed Control Info</b><br>
              Each game is pre-configured for using a controller and DOS_deck lists keyboard keys and controller buttons to provide you with the best gaming experience.
            </li>
            <li>
              <em>🔗</em> <b>Deeplinking</b><br>
              Share your gaming adventures with friends through deeplinking to specific games. It's gaming nostalgia at your fingertips.
            </li>
            <li>
              <em>💻</em> <b>Cross-Platform Support</b><br>
              Whether you're on Mac, Windows, Linux, or the Steam Deck, DOS_deck has you covered.
            </li>
            <li>
              <em>🌐</em> <b>Browser Compatibility</b><br>
              DOS_deck works seamlessly with Chrome, Safari, Edge and Firefox, ensuring you can play your favorite games on your preferred browser.
            </li>
          </ul>
          <h2>Unlocking the Gaming Past with DOS_deck</h2>
          <p>
            In the modern era of gaming, we're spoiled for choice with instant access to games, thanks to game consoles and streaming services, all seamlessly controlled with our trusty gamepads. But let's rewind the clock. Long before these conveniences, there was an era where the gaming world was defined by the MS-DOS operating system, and it laid the foundation for what we enjoy today.
          </p>
          <p>
            Between 1980 and 1995, MS-DOS reigned as the standard computer operating system. It was a period of innovation and creativity that introduced entirely new gaming genres. Wolfenstein pioneered the first-person shooter (FPS) genre, while Dune 2 set the stage for real-time strategy (RTS) games. Moreover, it was the birthplace of legendary franchises we adore today, including Grand Theft Auto, Fallout, Need for Speed and Warcraft.
          </p>
          <p>
            However, as technology progressed, MS-DOS fell by the wayside, and in 2001, Microsoft ceased support for this iconic system. Many of these classic games became incompatible with modern versions of Windows, leaving a void in the hearts of gamers.
          </p>
          <p>
            Enter a dedicated group of enthusiasts who weren't ready to let the classics fade into obscurity. They developed a PC emulator aimed at preserving the MS-DOS experience, and thus, <a href="https://dosbox.com/" target="_blank">DOSBox</a> was born. This remarkable piece of software was the key to resurrecting the past.
          </p>
          <p>
            DOSBox allowed these classic games to run, but it required installation on a computer, limiting accessibility. Fortunately, the magic of modern web technology came to the rescue. Some ingenious individuals managed to make DOSBox run within a web browser, giving rise to the marvelous software package known as <a href="https://js-dos.com/" target="_blank">JS-DOS</a>.
          </p>
          <p>
            DOS_deck is built upon the foundation of JS-DOS, which, in turn, relies on DOSBox. Together, they breathe new life into MS-DOS games by bringing them to your browser. However, there's a twist. Games from that era were designed for keyboard and mouse input, without established standards for interaction or control patterns. Here at DOS_deck, a tremendous effort was put into creating a seamless experience, enabling you to effortlessly navigate and play these games, ideally with the comfort of a controller in hand.
          </p>
          <p>
            Rediscover a golden age of gaming with DOS_deck. It's the bridge between the past and the present, connecting you to a world of digital memories and timeless adventures.
          </p>
          <h2>A few tips</h2>
          <p>
            Playing these games in a browser is a blast. But browsers behave a certain way and it's good to know a few things:
          </p>
          <ol>
            <li>Browsers only play sound effects and music after you've "interacted" with the page at least once. So click or press a key once to activate audio.</li>
            <li>In many games, Escape activates a menu. But Escape also exits full screen in a browser. Therefore, you can press the equals key ("=") to simulate Escape at all times.</li>
            <li>Some browsers require you to click on the game once before you can actually use the mouse or emulate the mouse with a controller.</li>
          </ol>
          <h2>Steam Deck Installation</h2>
          <p>DOS_deck runs great on Chrome or Edge on a Steam Deck, but it needs a few steps to activate the controller properly. By default, browsers cannot detect the controller. Instead, controller input is received by Chrome and Edge as if you pressed a keyboard key. So follow these steps to install DOS_deck in Steam Deck game mode:</p>
          <ol>
            <li>Press the Steam button, select Power &gt; Switch to Desktop.</li>
            <li>Open the Discover Software Center.</li>
            <li>Select Applications &gt; Internet &gt; Web Browsers.</li>
            <li>Find Chrome or Edge and select Install.</li>
            <li>Once it's installed, return to the Desktop. Select Application Launcher.</li>
            <li>Select Internet, right-click on Chrome or Edge and select Add to Steam.</li>
            <li>Check the box next to Chrome or Edge. Select Add Selected Programs.</li>
            <li>Back on the Desktop, open Application Launcher &gt; System &gt; Konsole (terminal window).</li>
            <li>Chrome or Edge needs access to the Steam Deck controller.<br>Enter this command in Konsole and press Enter:
              <p>
              For Chrome:<br>
              <code>
                flatpak override --user --filesystem=/run/udev:ro com.google.Chrome
              </code></p><p>For Edge:<br>
              <code>
                flatpak override --user --filesystem=/run/udev:ro com.microsoft.Edge
              </code></p></li>
            <li>Open Steam</li>
            <li>Navigate to Chrome or Edge, right-click and select Properties.</li>
            <li>Change the name to <b>DOS_deck</b></li>
            <li>Append this to launch options (after @@u @@):
              <p>
              <code>
                --window-size=1200,800 --kiosk "https://dosdeck.com"
              </code></p></li>
            <li>Restart your Steam Deck back into Game Mode</li>
            <li>Go to DOS_deck in your library and select Manage &gt; Controller Layout</li>
            <li>Select BROWSE CONFIGS &gt; Gamepad with Mouse Trackpad &gt; APPLY CONFIGURATION &gt; Done</li>
            <li>Enjoy!</li>
          </ol>
          <h2>Are these games legal?</h2>
          <p>
            Yes. DOS_deck only offers legally distributable games. Each and every game is checked and verified to be either:
          </p>
          <ul>
            <li>
              <b>Shareware</b> - Games that provide one episode for free, encouraging players to purchase remaining episodes.
            </li>
            <li>
              <b>Freeware</b> - Games released without monetary charge to the public.
            </li>
            <li>
              <b>Demo</b> - Game demonstrations, either playable or not, encouraging players to purchase the full game.
            </li>
            <li>
              <b>Liberated</b> - Games initially released commercially, of which the original developer or publisher eventually released the game into public domain.
            </li>
          </ul>
          <h2>FAQ</h2>
          <p>
            <b>Question</b>: Will you add <i>[my favorite game]</i> ?
            <br><b>Answer</b>: Probably, in time. Please be patient.
          </p>
          <p>
            <b>Question</b>: Can I upload games I own?
            <br><b>Answer</b>: Not right now, but in the future this might become possible.
          </p>
          <p>
            For other questions and dicussions, please visit <a href="https://reddit.com/r/dosdeck" target="_blank">reddit.com/r/dosdeck</a>
          </p>
          <h2>Contact</h2>
          <p>
            My name is Martin Kool and I like hobbies. Post your questions on <a href="https://reddit.com/r/dosdeck" target="_blank">reddit.com/r/dosdeck</a> or send me an email at <a href="mailto:martin@q42.nl">martin@q42.nl</a>.
          </p>
          <p>Big <em>❤️</em> to Sander van Houdt for the logo design.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Smart drugs reduce quality of effort, and slow decision-making (162 pts)]]></title>
            <link>https://www.bps.org.uk/research-digest/smart-drugs-arent-so-smart-after-all</link>
            <guid>38287257</guid>
            <pubDate>Thu, 16 Nov 2023 09:12:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bps.org.uk/research-digest/smart-drugs-arent-so-smart-after-all">https://www.bps.org.uk/research-digest/smart-drugs-arent-so-smart-after-all</a>, See on <a href="https://news.ycombinator.com/item?id=38287257">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>According to previous research, most university students <a href="https://www.theguardian.com/education/2017/may/10/universities-do-more-tackle-smart-drugs-say-experts-uk-exams">think it’s normal</a> to use drugs prescribed for conditions such as ADHD and narcolepsy as ‘cognitive enhancers’. Many students have few qualms taking a dose with the aim of improving focus and academic performance.&nbsp;&nbsp;</p>

<p>For those that use these medications to manage a condition, they can be life changing. However, a <a href="https://doi.org/10.1126/sciadv.add4165">recent study</a> in <em>Science Advances</em> has found that for cognitively healthy people, several ‘smart drugs’ aren’t so smart after all.&nbsp;</p>

<p>Elizabeth Bowman at the University of Melbourne and colleagues studied 40 healthy people aged between 18 and 35. On four test days, held at least a week apart, these participants were presented with eight versions of a problem known as the <a href="https://www.nature.com/articles/srep34851">knapsack optimisation problem</a>, or knapsack task, which is designed to mimic the kind of complex decision-making and problem-solving challenges that we face in daily life.&nbsp;</p>

<p>The knapsack task involved presenting the participant with a virtual empty bag with a weight limit, along with 10 to 12 different items of different values and weights that could be placed inside. To succeed at the task, the participants had to pack the bag with the combination of items totalling the greatest possible value, while staying under the weight limit. While they worked on this, they were shown the cumulative weight and value of their selected items, but had to complete their packing within a four-minute time limit. By varying the values, weights and number of items, as well as the weight limit, the researchers were able to vary the difficulty level of each individual challenge.&nbsp;</p>

<p>On each test day, the participants were also given a different identical-looking white pill. One contained a dose of methylphenidate (aka Ritalin, a stimulant used to treat ADHD), one a dose of modafinil (used to treat narcolepsy), and one a dose of dextroamphetamine (another stimulant used for ADHD). The final pill was a placebo. All of three drugs are known to increase levels of dopamine as well as noradrenaline. The team expected that the increased dopamine would boost the participants’ level of motivation to complete the task and, with the increased noradrenaline, raise their effort levels, leading to a better performance.&nbsp;</p>

<p>The results showed that on average, the drugs didn’t affect the chance of a participant finding the solution to a knapsack problem. Contrary to perhaps many students’ expectations, however, participants tended to perform worse after taking one of the drugs, packing a lower total value of items.&nbsp;</p>

<p>Not only that, but they spent substantially more time working on their solution while on the smart drugs than they did after taking the placebo. In fact, participants spent almost as much time on the easiest presentations of the knapsack task while on methylphenidate (Ritalin) as they did on the hardest instances of the task after taking the placebo, without any corresponding improvement in performance.&nbsp;</p>

<p>All of the drugs also increased the number of times the participants moved items in and out of the knapsack. “Thus, if one measures motivation in terms of time spent or number of items moved, drugs clearly enhanced motivation,” the team writes. However, on average, the drugs did not increase ‘effort quality’ or productivity, measured as the average gain in knapsack value per move. Productivity was lower in all three drug conditions, compared with placebo.&nbsp;</p>

<p>Looking at performances on a group level, though, masks what the team referred to as a “disturbing reversal” in individual performances. Those who’d scored above average after taking the placebo tended to fall below average while on one of the drugs. While on a drug, participants made a poorer, more random first attempt at filling a knapsack than they did after taking the placebo, and this had an especially negative impact on the subsequent performance of those who’d been above average in the placebo condition, explaining why they dropped below the mean. Overall, the results suggest that the participants’ approach to solving the knapsack task became less systematic while they were on each of the three drugs, the researchers write.</p>

<p>The results have clear implications: healthy people who take these drugs hoping for cognitive gains may work harder and longer at a problem, but without any benefit. For people who are already pretty good at solving complex problems that require systematic thought — likely many university students — these drugs could even be detrimental. More work will be needed to establish exactly why these drugs have these effects in those without a medical need for them, as well as to explore the potential impacts of other so-called smart drugs.&nbsp;</p>

<p><em>Read the paper in full:</em>&nbsp;<a href="https://doi.org/10.1126/sciadv.add4165">https://doi.org/10.1126/sciadv.add4165</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The push to save the Itanium architecture in Linux (112 pts)]]></title>
            <link>https://lwn.net/SubscriberLink/950466/0999d63fdf270781/</link>
            <guid>38287095</guid>
            <pubDate>Thu, 16 Nov 2023 08:46:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/SubscriberLink/950466/0999d63fdf270781/">https://lwn.net/SubscriberLink/950466/0999d63fdf270781/</a>, See on <a href="https://news.ycombinator.com/item?id=38287095">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<!-- $Id: slink-none,v 1.2 2005-11-04 22:11:18 corbet Exp $ -->
<blockquote>
<div>
<h3>Welcome to LWN.net</h3>
<p>
The following subscription-only content has been made available to you 
by an LWN subscriber.  Thousands of subscribers depend on LWN for the 
best news from the Linux and free software communities.  If you enjoy this 
article, please consider <a href="https://lwn.net/subscribe/">subscribing to LWN</a>.  Thank you
for visiting LWN.net!
</p></div>
</blockquote>
<p>
It is (relatively) easy to add code to the kernel; it tends to be much
harder to remove that code later.  The most recent example of this dynamic
can be seen in the story of the ia64 ("Itanium") architecture, support for
which was removed during the 6.7 merge window.  That removal has left a
small group of dedicated ia64 users unhappy and clinging to a faint hope
that this support could return in a year's time.
</p><p>
At the end of the 1990s, it had become clear that 32-bit processors were
approaching the end of their useful life for many applications; in
particular, 32&nbsp;bits is not enough to address the memory sizes that
were beginning to show up on higher-end systems.  In response, Intel
launched into a program that it called "Merced" to create the successor to
the x86.  It was a RISC architecture, wholly incompatible with anything
that Intel had sold before.  But it was going to be the Next Big Thing
because that was what Intel was doing.
</p><p>
At the time, information about this new architecture was being held under
nondisclosure agreements, and it was far from clear when Linux developers
would be able to port the kernel to Merced, if ever.  This was before
Intel's <a href="https://lwn.net/1998/1001/">investment in Red Hat</a> that signaled the
beginning of the arrival of big money into Linux.  It seemed entirely
possible that Linux would be cut out of the processor that, we were all
reliably informed, would be the future of computing; choices would be
limited to Windows and proprietary Unix.
</p><p>
That, of course, is not how things worked out.  Intel became one of the
earliest corporate supporters of Linux and ensured, under a project known
as <a href="https://www.redhat.com/en/about/press-releases/35">Trillian</a>, that
Linux ran well on this new architecture, which was eventually named ia64
(or "Itanium" in the sales literature).  Initial Itanium support found its
way into the 2.3.43 development kernel release in early 2000.  The way was
clear for our bright Linux-on-Itanium future.
</p><p>
The only problem, of course, is that things didn't work out that way
either.  Early Itanium systems failed to perform at anything close to the
speeds that the hype had promised.  Meanwhile, AMD created the x86-64
architecture, adding 64-bit operation while maintaining as much
compatibility with the vast world of deployed 32-bit software as possible.
This new architecture quickly won over the market, forcing Intel to follow
in AMD's footsteps; Itanium ended up as a nearly forgotten footnote.  Some
systems were sold, and Intel continued manufacturing the CPUs for many
years, but their market was limited.  Red Hat dropped ia64 support in 2010.
</p><p>
Through all of this, the ia64 architecture code was maintained in the
kernel, but interest dropped rapidly.  In recent years, the ia64 code has
often been seen as a drag on kernel development in general.  After a bug
originating in the ia64 code was <a href="https://lwn.net/Articles/920259/">tracked
down</a> in January, kernel developers started talking more seriously about
just removing support for that architecture entirely.  There was some
discussion at the time, with a few hobbyist users complaining about the
idea, but no changes were made then.
</p><p>
The topic came back in May, though, When Ard Biesheuvel <a href="https://lore.kernel.org/all/CAMj1kXFCMh_578jniKpUtx_j8ByHnt=s7S+yQ+vGbKt9ud7+kQ@mail.gmail.com/">pushed
for the removal of ia64 support</a> from the kernel, saying that the
architecture was impeding his work in the EFI subsystem:
</p><blockquote>
	As a maintainer, I feel uncomfortable asking contributors to build
	test their changes for Itanium, and boot testing is infeasible for
	most, even if some people are volunteering access to infrastructure
	for this purpose. In general, hacking on kernels or bootloaders
	(which is where the EFI pieces live) is tricky using remote access.
<p>
	The bottom line is that, while I know of at least 2 people (on cc)
	that test stuff on itanium, and package software for it, I don't
	think there are any actual users remaining, and so it is doubtful
	whether it is justified to ask people to spend time and effort on
	this.
</p></blockquote>
<p>
In that discussion, John Paul Adrian Glaubitz (who maintains the Debian
ia64 port) <a href="https://lore.kernel.org/all/ff58a3e76e5102c94bb5946d99187b358def688a.camel@physik.fu-berlin.de/">suggested</a>
that ia64 support should be kept until after the next long-term-support
kernel release, after which it could be dropped.  That would, he said,
maximize the amount of time in which ia64 would be supported for any
remaining users out there.  That is how it appears to have played out:
during the 6.7 merge window, <a href="https://git.kernel.org/linus/cf8e8658100d">ia64 support was
removed</a>.  The ia64 story is now done, as far as Linux is concerned.
</p><p>
Except that, seemingly, it is not.  Shortly after ia64 support disappeared
from the kernel, Frank Scheiner <a href="https://lwn.net/ml/linux-kernel/8ff191a0-41fa-4f36-86e8-3d32ff3fe75c@web.de/">complained</a>
to the mailing list, saying that he and others had been working to resolve
the problems with this architecture and had been rewarded by seeing it
removed anyway.  Linus Torvalds <a href="https://lwn.net/ml/linux-kernel/CAHk-=whFLZ67ffzt1juryCYcYz6eL_XjQF8WucDzwUR5H65+rA@mail.gmail.com/">responded</a>
that he might be willing to see it come back — eventually:
</p><blockquote>
	So I'd be willing to come back to the "can we resurrect it"
	discussion, but not immediately - more along the lines of a "look,
	we've been maintaining it out of tree for a year, the other
	infrastructure is still alive, there is no impact on the rest of
	the kernel, can we please try again"?
</blockquote>
<p>
Scheiner was <a href="https://lwn.net/ml/linux-kernel/6e745433-d7eb-45df-b607-5589f1e04e86@web.de/">not
entirely pleased</a> with the removal of ia64 support, but Glaubitz <a href="https://lwn.net/ml/linux-kernel/396c3aebd6a382aa5a9cbf333f93d876467e12e9.camel@physik.fu-berlin.de/">described</a>
the one-year plan as "<q>very reasonable</q>".
</p><p>
So the hobbyists who want to keep Linux support for this architecture
alive, and who faced a difficult task before, have now seen the challenge
become more severe.  Maintaining support for an architecture out of tree is
not a task for the faint of heart, especially as the mainline kernel goes
forward with changes that had been held back by the need to keep ia64
working until now.  To complicate the picture, as Tony Luck <a href="https://lore.kernel.org/all/SJ1PR11MB60833AF98E6E9D3CD89AB393FC439@SJ1PR11MB6083.namprd11.prod.outlook.com/">pointed
out</a> in May, it is entirely possible that future kernel changes may,
when backported to the stable kernel updates, break ia64 in those kernels.
Since nobody working on the stable updates is able to test ia64 systems
(even if they wanted to), such problems could go unnoticed for some time.
</p><p>
One should also not miss the other condition that Torvalds placed on a
return of ia64: that "<q>the other infrastructure is still alive</q>".  The
ia64 enthusiasts did not miss that, so it is unsurprising that they were
concerned when Adhemerval Zanella <a href="https://lwn.net/ml/libc-alpha/445c5c7c-315f-495d-81ce-a5bdc30e2b8e@linaro.org/">proposed</a>
removing ia64 support from the GNU C Library (glibc) — one of the most
important pieces of other infrastructure.  Zanella pointed out that the
ia64 port is in poor shape, with a number of outstanding problems that seem
unlikely to be solved.  Scheiner <a href="https://lwn.net/ml/libc-alpha/37fcf02a-6977-42ff-bed2-e1813f3f61ef@web.de/">answered</a>
that it might be possible to provide (limited) access to ia64 machines for
library testing, and asked for more time to address some of the problems.
</p><p>
Zanella, though, followed up with <a href="https://lwn.net/ml/libc-alpha/20231104190225.2060378-1-adhemerval.zanella@linaro.org/">a
patch</a> to remove ia64 support.  Scheiner <a href="https://lwn.net/ml/libc-alpha/fbdeb854-ca42-4835-8cdc-fb130ea2b747@web.de/">responded</a>:
"<q>The speed this happens really surprises me and I hope there is no need
to rush with this removal</q>".  Other developers, though, including <a href="https://lwn.net/ml/libc-alpha/e5e9a6f8-f391-51f5-f4d9-384810c3c3aa@codesourcery.com/">Joseph
Myers</a>, <a href="https://lwn.net/ml/libc-alpha/8734xiyhgu.fsf@mid.deneb.enyo.de/">Florian Weimer</a>,
and glibc maintainer <a href="https://lwn.net/ml/libc-alpha/a53a3413-bb07-9d29-d692-777f54ad3065@redhat.com/">Carlos
O'Donell</a>, are all in favor of dropping ia64 support.  It would, thus,
not be surprising to see the removal happen as soon as the 2.39 release,
due in February, or at the latest in the release after that.
</p><p>
That, needless to say, raises the bar for ia64 supporters even further.
While one should never discount what a group of determined developers can
accomplish, it is probably safe to conclude that ia64 support is gone from
the kernel for good.  Some may see this as a disappointment, but it is also
a testament to how hard the community will work to keep an architecture
alive even though it never had a lot of users and has almost none now.
This support, arguably, could have been removed years ago without causing
any great discomfort, but taking code out of the kernel is hard.  As
has been seen here, though, it is occasionally possible.<br clear="all"></p><table>
           <tbody><tr><th colspan="2">Index entries for this article</th></tr>
           <tr><td><a href="https://lwn.net/Kernel/Index">Kernel</a></td><td><a href="https://lwn.net/Kernel/Index#Architectures-ia64">Architectures/ia64</a></td></tr>
            <tr><td><a href="https://lwn.net/Kernel/Index">Kernel</a></td><td><a href="https://lwn.net/Kernel/Index#Releases-6.7">Releases/6.7</a></td></tr>
            </tbody></table><br clear="all">

               <br clear="all">
               <hr><p>
           (<a href="https://lwn.net/Login/?target=/Articles/950466/">Log in</a> to post comments)
           </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google: Transforming the Future of Music Creation (167 pts)]]></title>
            <link>https://deepmind.google/discover/blog/transforming-the-future-of-music-creation/</link>
            <guid>38287043</guid>
            <pubDate>Thu, 16 Nov 2023 08:39:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://deepmind.google/discover/blog/transforming-the-future-of-music-creation/">https://deepmind.google/discover/blog/transforming-the-future-of-music-creation/</a>, See on <a href="https://news.ycombinator.com/item?id=38287043">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <h4 data-block-key="q9ez6">Announcing our most advanced music generation model and two new AI experiments, designed to open a new playground for creativity</h4><p data-block-key="7nl3h">From jazz to heavy metal, techno to opera, music is a much loved form of creative expression. With complex and densely layered lyrics, melodies, rhythms, and vocals, creating music that’s compelling has been especially challenging for artificial intelligence (AI) systems — until now.</p><p data-block-key="5jl9j">Today, in <a href="https://blog.youtube/inside-youtube/ai-and-music-experiment/" rel="noopener" target="_blank">partnership with YouTube</a>, we’re announcing Google DeepMind’s <b>Lyria</b>, our most advanced AI music generation model to date, and two AI experiments designed to open a new playground for creativity:</p><ul><li data-block-key="4ap86"><b>Dream Track</b> – an experiment in YouTube Shorts designed to help deepen connections between artists, creators, and fans through music creation.</li><li data-block-key="dc6pr"><b>Music AI tools</b> – a set of tools we’re designing with artists, songwriters, and producers to help bolster their creative processes.</li></ul><p data-block-key="dos1i">To develop these projects, we’ve brought together technical experts from across Google with a diverse range of world-renowned artists and songwriters to explore how generative music technologies can responsibly shape the future of music creation. We’re excited about building new technologies that can enhance the work of professional musicians and the artist community, and deliver a positive contribution to the future of music.</p>
</div><div>
  <h2 data-block-key="k94yy">Introducing the Lyria model</h2><p data-block-key="f18pr">Music contains huge amounts of information — consider every beat, note, and vocal harmony in every second. When generating long sequences of sound, it’s difficult for AI models to maintain musical continuity across phrases, verses, or extended passages. Since music often includes multiple voices and instruments at the same time, it's much harder to create than speech.</p><p data-block-key="4ct57">Built by Google DeepMind, the Lyria model excels at generating high-quality music with instrumentals and vocals, performing transformation and continuation tasks, and giving users more nuanced control of the output’s style and performance.</p>
</div><div>
  <h2 data-block-key="k94yy">Inspiring new music on YouTube Shorts</h2><p data-block-key="9o3lc">We’re trialing Lyria in an experiment called Dream Track, which is designed to test new ways for artists to connect with their fans and developed in collaboration with YouTube.</p><p data-block-key="8gm3m">Within the experiment, a limited set of creators will be able to use Dream Track for producing a unique soundtrack with the AI-generated voice and musical style of artists including Alec Benjamin, Charlie Puth, Charli XCX, Demi Lovato, John Legend, Sia, T-Pain, Troye Sivan, and Papoose. Each participating artist has partnered with us and will have a hand in helping us test and learn to shape the future of AI in music.</p><p data-block-key="463ho">Dream Track users can simply enter a topic and choose an artist from the carousel to generate a 30 second soundtrack for their Short. Using our Lyria model, Dream Track simultaneously generates the lyrics, backing track, and AI-generated voice in the style of the participating artist selected.</p><p data-block-key="5p011">Here are a couple of samples generated in the styles of Charlie Puth or T-Pain:</p>
</div><div>
  <h2 data-block-key="v3onl">Exploring music AI tools with the industry</h2><p data-block-key="v6e8">Our researchers have been exploring with artists, songwriters, and producers in <a href="https://blog.youtube/inside-youtube/partnering-with-the-music-industry-on-ai/" rel="noopener" target="_blank">YouTube’s Music AI Incubator</a> how generative AI can best support the creative process, and working together to responsibly design a suite of music AI tools.</p><p data-block-key="fuose">Imagine singing a melody to create a horn line, transforming chords from a MIDI keyboard into a realistic vocal choir, or adding an instrumental accompaniment to a vocal track.</p>
</div><p data-block-key="zt2dw">With our music AI tools, users can create new music or instrumental sections from scratch, transform audio from one music style or instrument to another, and create instrumental and vocal accompaniments. This work draws on our history of research and experimentation with AI and music, and we’ll continue testing our music AI tools with incubator participants throughout their development.</p><div>
  <h2 data-block-key="0b7d2">Watermarking AI-generated audio with SynthID</h2><p data-block-key="3fd2c">Our team is also pioneering responsible deployment of our technologies with best-in-class tools for watermarking and identifying synthetically generated content. Any content published by our Lyria model will be watermarked with <a href="https://www.deepmind.com/synthid" rel="noopener" target="_blank">SynthID</a>, the same technology toolkit we’re using for identifying images generated by <a href="https://cloud.google.com/vertex-ai/docs/generative-ai/image/overview" rel="noopener" target="_blank">Imagen on Google Cloud’s Vertex AI</a>.</p>
</div><div>
  <p data-block-key="bbw1f">SynthID embeds a watermark into AI-generated audio content that’s inaudible to the human ear and doesn’t compromise the listening experience. It does this by converting the audio wave into a two-dimensional visualization that shows how the spectrum of frequencies in a sound evolves over time. This novel method is unlike anything that exists today, especially in the context of audio.</p><p data-block-key="708fm">The watermark is designed to maintain detectability even when the audio content undergoes many common modifications such as noise additions, MP3 compression, or speeding up and slowing down the track. SynthID can also detect the presence of a watermark throughout a track to help determine if parts of a song were generated by Lyria.</p>
</div><div>
  <h2 data-block-key="k94yy">Developing and deploying our technologies responsibly</h2><p data-block-key="26j9i">To maximize the benefits of our generative music technologies, while mitigating potential risks, it’s critical these are developed with best-in-class protections. We’ve worked closely with artists and the music industry to ensure these technologies are widely beneficial.</p><p data-block-key="4pb1k">Our music AI experiments have been designed in line with <a href="https://blog.youtube/inside-youtube/partnering-with-the-music-industry-on-ai/" rel="noopener" target="_blank">YouTube’s AI principles</a>, which aim to enable creative expression while protecting music artists and the integrity of their work.</p><p data-block-key="4b7ba">Going forward, we’ll continue engaging artists, the music industry, and wider creative community to set the standard for the responsible development and deployment of music generation tools.</p>
</div><div>
  <h2 data-block-key="k94yy">The future of generative music tools</h2><p data-block-key="2abao">Generative music technologies could transform the future of music creation and use. Our cutting-edge work in this space will unlock an exciting new wave of artist tools that can inspire creativity for artists, songwriters, producers, and fans everywhere.</p><p data-block-key="emh35">We've only just begun to explore how AI can bolster people's musical creativity and we can't wait to see what we can accomplish next in partnership with artists, the music industry, and wider creative community.</p>
</div><div>
      <p data-block-key="ksbsm"><b>Acknowledgements:</b> Lyria was made possible by key research and engineering contributions from Kazuya Kawakami, David Ding, Björn Winckler, Cătălina Cangea, Tobenna Peter Igwe, Will Grathwohl, Yan Wu, Yury Sulsky, Jacob Kelly, Charlie Nash, Conor Durkan, Yaroslav Ganin, Tom Eccles, Zach Eaton-Rosen, Jakob Bauer, Mikita Sazanovich, Morgane Rivière, Evgeny Gladchenko, Mikolaj Binkowski, Ali Razavi, Jeff Donahue, Benigno Uria, Sander Dieleman, Sherjil Ozair, John Schultz, Ankush Gupta, Junlin Zhang, Drew Jaegle, and Aäron van den Oord.</p><p data-block-key="aiigh">Music AI tools were developed by Adam Roberts, Alex Tudor, Arathi Sethumadhavan, Aäron van den Oord, Chris Reardon, Christian Frank, Cătălina Cangea, Doug Fritz, Drew Jaegle, Ethan Manilow, Felix Riedel, Hema Manickavasagam, Jesse Engel, Mahlet Seyoum, Mahyar Bordbar, Mauricio Zuluaga, Michael Chang, Sander Dieleman and Tom Hume. Additional research contributions from Andrea Agostinelli, Antoine Caillon, Brian McWilliams, Chris Donahue, Matej Kastelic, Marco Tagliasacchi, Mauro Verzetti, Mike Dooley, Mikolaj Binkowksi, Noah Constant, Timo Denk, Yunpeng Li and Zalán Borsos.</p><p data-block-key="4met7">SynthID for audio was developed with contributions from Sven Gowal, Rudy Bunel, Jamie Hayes, Sylvestre-Alvise Rebuffi, Florian Stimberg, David Stutz, Nidhi Vyas, Zahra Ahmed, and Pushmeet Kohli.</p><p data-block-key="b65to">Thanks to Myriam Hamed Torres, Rushil Mistry, Mahyar Bordbar, Berenice Cowan, Tom Hume, Nick Pezzotti, Felix Riedel, Arun Nair, Will Hawkins, Sasha Brown, Dawn Bloxwich, Ben Bariach, Michael Chang, Dawid Górny, Richard Green, Rich Galt, Ross West, Jaume Sanchez Elias, Seth Odoom, Doug Fritz, and Jonathan Evens for driving delivery; Adrian Bolton, Paul Komarek, Nando de Freitas, Oriol Vinyals, Douglas Eck, Eli Collins, and Demis Hassabis for their advice.</p><p data-block-key="dlmmi">Other contributors include Adriana Fernandez Lara, Arielle Bier, Jonathan Fildes, Aliya Ahmad, Jane Park, Adam Cain, Katie McAtackney, Dimple Vijaykumar, Armin Senoner, Dex Hunter-Torricke, Priya Jhakra, James Besley, Rebeca Santamaria-Fernandez, Richard Ives, Jakub Kúdela, James Manyika, and Mira Lane. Thanks also to many others who contributed across Google DeepMind and Alphabet, including our partners at YouTube.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Last Post, Please Read (219 pts)]]></title>
            <link>http://zandarvts.blogspot.com/2023/11/last-post-please-read.html</link>
            <guid>38286130</guid>
            <pubDate>Thu, 16 Nov 2023 05:38:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://zandarvts.blogspot.com/2023/11/last-post-please-read.html">http://zandarvts.blogspot.com/2023/11/last-post-please-read.html</a>, See on <a href="https://news.ycombinator.com/item?id=38286130">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-2246785094785754215" itemprop="description articleBody">
<p>&nbsp;Good morning. This is Zandar's Dad. I am sorry to tell you that he passed away over the weekend, peacefully in his sleep. Fortunately, his computer was on and open to this page but I don't know if I will be able to post again. This blog was Jon's passion. He was an ardent advocate for justice and for our Democracy. He was brilliant. He was funny. He never stopped believing in our country but he never stopped fighting the "stupid" and there was plenty of it for him to fight. He was thrilled with KY reelecting a Democratic governor, and he posted up until Friday, but he was feeling sick over the weekend and when he went to bed Saturday night, he thought that he would feel better when he woke up, but he never did.&nbsp;</p><p>I posted a few replies to his recent posts, hoping to get the word out, before I located this page. As I said, this blog is his pride and joy. In many ways, it is his legacy. He greatly appreciated all of you who read the blog, who posted, and who supported ZandarVTS financially. If you are inclined to make a financial donation in his memory, the chosen organization is the American Heart Association, but the BESTthing you can do to honor Jon's memory is to VOTE like your life and your Democracy depend on it, because they do.&nbsp;</p><p>Zandar's full name was Jonathan David Mott. He was born on 6/8/75 in Omaha, NE. His obituary should appear soon on the the Hickory Daily Record website, www.hickoryrecord.com.</p><p>Thanks and please VOTE.<br></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to build trust as a new engineering manager (108 pts)]]></title>
            <link>https://becomingaleader.substack.com/p/how-to-build-trust</link>
            <guid>38285251</guid>
            <pubDate>Thu, 16 Nov 2023 02:29:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://becomingaleader.substack.com/p/how-to-build-trust">https://becomingaleader.substack.com/p/how-to-build-trust</a>, See on <a href="https://news.ycombinator.com/item?id=38285251">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><h5>Earning your team's trust can take time but the benefits are worth the effort.</h5><p>I once worked under a manager that I didn’t, or couldn’t, trust, and it was a disaster. Once that distrust set in, I began to second-guess everything they said, and my confidence and performance dropped as a result.</p><p>So when I started managing a team, I put a lot of energy into asking questions, reading, and taking courses related to building trust.</p><p><span>I learned that you earn somebody’s trust through your actions — this is true for any relationship, and it’s </span><em>essential</em><span> for new managers who want to lead a group of people.</span><br></p><p><span>In this blog, I’ll share what I’ve learned about earning and retaining trust so that you can </span><em>help your team be productive and deliver for your customers.</em></p><p><span>I came across Frei and Morriss’s ‘Trust Triangle’ </span><a href="https://hbr.org/2020/05/begin-with-trust" rel="nofollow ugc noopener">in the Harvard Business Review</a><span>, and it’s now the basis for my understanding and assessment of how well I’m promoting trust within my team.&nbsp;</span></p><p>I try to embody the triangle’s three points — authenticity, empathy, and logic —&nbsp;in everything I do as a manager. Doing so helps me establish a culture of trust and psychological safety day-to-day.</p><p>New managers often want to get everything right from the get-go. But, ironically, that would be their first mistake. In fact, I’d say one of the worst things you can do would be to pretend to have all the answers. Why? Because that’s the total opposite of authenticity.</p><p>I showed my real self and my vulnerability right from the first meeting I held as a manager. I said to the team, “Look, I’m new to this. I’m going to be learning as I go but I’m going to do my very best.” I explained how excited I was to be managing them and why, but I never claimed to be perfect (or anywhere close, actually).&nbsp;</p><p>This authenticity set the tone for our team as somewhere mistakes could be made and not vilified. And when I have constructive feedback to share, I try to avoid framing it in an “I’m right, you’re wrong” kind of way. Instead, I say, “I have an observation I’d like to share with you if that’s okay?”</p><p>I believe my team is more receptive to these observations when framed as something to discuss and either give merit to or discredit together.&nbsp;</p><p>It’s no secret that empathy and leadership go hand-in-hand.&nbsp;</p><p>The good news for new managers is that simply committing to get to know your team members is a great, and very easy, first step. Regular one-on-ones are a big part of how I spend my time as a manager — these sessions allow me to engage with people on a personal level and better empathize with their individual employee experience.&nbsp;</p><p>But getting to know the team as people isn’t enough. You have to also act on what you’re learning and take their insights on board.&nbsp;</p><p>One employee, for example, came to me a little concerned about a corporate restructuring that the team recently found out about. For many of us, the phrase ‘corporate restructure’ is enough to send shivers down the spine and it was hardly surprising that the team was feeling nervous. So being empathetic to their needs, I took the time to gather some intel, prepare a short announcement for our next team meeting, and dedicate time for a Q&amp;A.</p><p><span>I couldn’t stop the change but I did have the power to reassure and inspire my team — and that’s a power that </span><em>they</em><span> granted, through trusting in my approach.</span></p><p><span>It’s also important to remain empathetic when delivering feedback or, worse, disappointing news. If you know a team member was </span><em>really</em><span> gunning for promotion but now isn’t their time, or </span><em>really</em><span> put their all into a task but still missed the mark, come back to what your observations of the situation are and ask them about theirs.&nbsp;</span></p><p><span>As a manager, you’re also the bearer of bad news. And as much as you might want to mute your emotions in order to protect yourself, you should put your employee’s need for empathy first because these conversations are actually </span><em>not</em><span> about you. More on this later.</span></p><p>Lastly, we come to logic. I’ve just explained how important it is to speak person-to-person, so being logical isn’t about being unemotional. It’s about ensuring you’ve got your facts straight, that your team is on track to achieve its goals, and that all your activities are underpinned by organizational strategy.</p><p><span>To me, logic also means acting quickly when you know someone needs support. New managers may be tempted to wait an employee's issue out, thinking, “Well, they said they were okay, so even though it looks like they are struggling, I’ll give them time.” What I’ve learned is that you </span><em>cannot</em><span> delay. One small struggle grows into a big disruption —&nbsp;and </span><em>fast</em><span>. If you fail to help when you should have, you risk losing the trust of that employee and the rest of the team.</span></p><p>There’s no such thing as the perfect manager and high-performing teams don’t actually benefit from having a manager who’s right 100% of the time. Managers who they can trust to have their back — managers who lead with authenticity, empathy, and logic —&nbsp;are far, far more valuable.</p><p>So my message for new managers is not to worry so much. If you’ve got the right values and you’re following the best practices, then you’re on the right track. And when you feel like you’re under pressure to succeed, remember that as a manager, you are not the star of the show — or you shouldn’t be, at least. It’s your job to make your team look good by helping them deliver results.&nbsp;</p><p>Can you win trust back once it’s been broken? I think you can. But you’ll need to appreciate that you have to rebuild their trust. Admit that you made a mistake, show that you understand why it was a mistake, and what you’ll do to make sure it doesn’t happen again. This will help you earn credibility from which trust can start to be rebuilt.</p><ul><li><p>Set the tone for your team as somewhere mistakes can be made (and will not be vilified). You can do this by being authentic, admitting your mistakes when you don’t know something, and by making feedback a team norm.</p></li><li><p>Get to know each person on your team by setting up a one-on-one. Focus on the Person, Position, and their Goals.</p></li><li><p><span>Prepare for your conversations and lead with empathy. Preparation will help you position yourself as someone people </span><em>want</em><span> to be led by and empathy will show that you care.</span></p></li><li><p>Adapt a servant leadership mindset. It’s no longer all about you, you have to focus on the team.&nbsp;</p></li><li><p>With that said, find time to focus on your individual tasks too. Otherwise, you won’t be prepared to lead your team and you’ll likely lose their trust.</p></li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Convert any screenshot into clean HTML code using GPT Vision (OSS tool) (261 pts)]]></title>
            <link>https://github.com/abi/screenshot-to-code</link>
            <guid>38285228</guid>
            <pubDate>Thu, 16 Nov 2023 02:27:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/abi/screenshot-to-code">https://github.com/abi/screenshot-to-code</a>, See on <a href="https://news.ycombinator.com/item?id=38285228">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">screenshot-to-code</h2>
<p dir="auto">This is a simple app that converts a screenshot to HTML/Tailwind CSS. It uses GPT-4 Vision to generate the code, and DALL-E 3 to generate similar looking images.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description Youtube.Clone.mp4">Youtube.Clone.mp4</span>
    <span></span>
  </summary>

  <video src="https://user-images.githubusercontent.com/23818/283006443-6cebadae-2fe3-4986-ac6a-8fb9db030045.mp4" data-canonical-src="https://user-images.githubusercontent.com/23818/283006443-6cebadae-2fe3-4986-ac6a-8fb9db030045.mp4" controls="controls" muted="muted">

  </video>
</details>

<h2 tabindex="-1" dir="auto">Updates</h2>
<ul dir="auto">
<li>🔥 You can now instruct the AI to update the code as you wish. Useful if the AI messed up some styles or missed a section.</li>
</ul>
<h2 tabindex="-1" dir="auto">Getting Started</h2>
<p dir="auto">The app has a React/Vite frontend and a FastAPI backend. You will need an OpenAI API key with access to the GPT-4 Vision API.</p>
<p dir="auto">Run the backend (make sure you have poetry installed on your system):</p>
<div dir="auto" data-snippet-clipboard-copy-content="cd backend
echo &quot;OPENAI_API_KEY=sk-your-key&quot; > .env
poetry install
poetry shell
poetry run uvicorn main:app --reload --port 7000"><pre><span>cd</span> backend
<span>echo</span> <span><span>"</span>OPENAI_API_KEY=sk-your-key<span>"</span></span> <span>&gt;</span> .env
poetry install
poetry shell
poetry run uvicorn main:app --reload --port 7000</pre></div>
<p dir="auto">Run the frontend:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cd frontend
yarn
yarn dev"><pre><span>cd</span> frontend
yarn
yarn dev</pre></div>
<p dir="auto">Open <a href="http://localhost:5173/" rel="nofollow">http://localhost:5173</a> to use the app.</p>
<p dir="auto">If you prefer to run the backend on a different port, update VITE_WS_BACKEND_URL in <code>frontend/.env.local</code></p>
<h2 tabindex="-1" dir="auto">Feedback</h2>
<p dir="auto">If you have feature requests, bug reports or other feedback, open an issue or ping me on <a href="https://twitter.com/_abi_" rel="nofollow">Twitter</a>.</p>
<h2 tabindex="-1" dir="auto">Hosted Version</h2>
<p dir="auto">Hosted version coming soon on <a href="https://picoapps.xyz/?ref=github" rel="nofollow">Pico</a>.</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SpaceX Starship/Super Heavy OFT-2 Launch Authorized (151 pts)]]></title>
            <link>https://www.faa.gov/media/69476</link>
            <guid>38284150</guid>
            <pubDate>Thu, 16 Nov 2023 00:00:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.faa.gov/media/69476">https://www.faa.gov/media/69476</a>, See on <a href="https://news.ycombinator.com/item?id=38284150">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[The Guardian Deletes Osama Bin Laden's 'Letter to America' (121 pts)]]></title>
            <link>https://www.404media.co/guardian-deletes-osama-bin-ladens-letter-to-america-after-it-goes-viral-on-tiktok/</link>
            <guid>38284020</guid>
            <pubDate>Wed, 15 Nov 2023 23:45:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.404media.co/guardian-deletes-osama-bin-ladens-letter-to-america-after-it-goes-viral-on-tiktok/">https://www.404media.co/guardian-deletes-osama-bin-ladens-letter-to-america-after-it-goes-viral-on-tiktok/</a>, See on <a href="https://news.ycombinator.com/item?id=38284020">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <article>
          <div>
              
<!--kg-card-begin: html-->

<!--kg-card-end: html-->

<!--kg-card-begin: html-->
  <div>
    <h5>Subscribe</h5>
    <div>
      <p>Join the newsletter to get the latest updates.</p>
      <form data-members-form="subscribe">
        
        
        <div>
          
          <p>
            Great! Check your inbox and click the link.
          </p>
        </div>
        <div>
          
          <p>
            Please enter a valid email address.
          </p>
        </div>
      </form>
    </div>
  </div>

<!--kg-card-end: html-->
<p><em>The Guardian</em> has removed a letter written by Osama Bin Laden, explaining his war against the United States is partly because of its support of Israel, after it had gone viral on TikTok.</p><p>“This page previously displayed a document containing, in translation, the full text of Osama bin Laden’s ‘letter to the American people,’ as <a href="https://www.theguardian.com/world/2002/nov/24/alqaida.terrorism?ref=404media.co"><u>reported</u></a> in the Observer on Sunday 24 November 2002,” a <a href="https://www.theguardian.com/info/2023/nov/15/removed-document?ref=404media.co"><u>note</u></a> on the Guardian’s site where the letter previously appeared now reads. “The document, which was published here on the same day, was removed on 15 November 2023.”</p><p>“The transcript published on our website 20 years ago has been widely shared today on social media without its original context,” a spokesperson for <em>The Guardian</em> told 404 Media. “Therefore we have decided to take it down and direct readers to the news article that originally contextualized it instead.”&nbsp;</p><p>The letter was originally published alongside <a href="https://www.theguardian.com/world/2002/nov/24/alqaida.terrorism?ref=404media.co"><u>another article</u></a> that explained the letter “was originally posted in Arabic on a Saudi Arabian website previously used by al-Qaeda to disseminate messages” and “was sent to hundreds of subscribers to an email list run by Mohammed al-Massari, the UK-based Saudi Arabian dissident.” It added the UK and American governments’ response to it.&nbsp;</p><p>It is highly unusual for news sites to delete articles or primary source documents unless there is a major error in them or a direct and urgent threat to life through their publication.</p><p>Searching for “letter to America” on TikTok brings up a few dozen results, and some of the videos have tens of thousands or hundreds of thousands of views. In many of these videos TikTok users are expressing shock that they don’t entirely disagree with some of what Bin Laden’s letter said, namely that he is at war with the United States because the United States attacked the Muslim world first, that Jewish people have no claim to Israel, and that Israel has occupied Palestine for decades “overflowing with oppression, tyranny, crimes, killing, expulsion, destruction and devastation.”</p><p>Searching for “letter to America” on TikTok also shows that other users searched for terms like “letter to america read outloud,” “letter to America osama summary,” and “letter to america antisemitic.” An accompanying hashtag #LettertoAmerica is also being used on the platform.</p><figure><img src="https://lh7-us.googleusercontent.com/DBkhkPuAKTHGXsnMmqyKaTtatRU1iLtQuEG-8QPXqCYI38LC1JHPXwAzu9NVu16_U5J1XL8yoKvCrolhnzKZBl3d5o3OppiBpiKev6t7JVG8L_3LJ8Yqok81wDrQeJQKSyu3xsx-I12eshDjxsEZy7Y" alt="" loading="lazy" width="374" height="384"></figure><p>Many of the TikToks about #LettertoAmerica are not particularly viral by TikTok standards. The top liked TikTok about the letter, and one that started a moral panic on Twitter, was posted by a user named Lynette Atkins. It has 75,000 likes on a platform where truly viral videos and concepts are regularly viewed tens or hundreds of millions of times. Many of the videos are also simply explaining what the letter is, commenting on the fact that people are talking about the letter on TikTok, or explaining the 9/11 attacks more broadly to an audience of people who were born after 9/11.</p><p>Videos that use #LettertoAmerica have a total combined view count of 1.3 million views, according to TikTok’s hashtag search function.</p><p>Frederick Joseph, author of two <em>New York Times </em>bestselling books about racism and social justice, <a href="https://www.tiktok.com/t/ZT8Dtyv8q/?ref=404media.co"><u>posted a video about the removal on TikTok</u></a>: “This is a really good example of narrative control and censorship,” he said. “It started going viral, not because people were necessarily agreeing with Osama Bin Laden’s actions or his moral clarity, but rather because the letter offered perspective into the hypocrisy of America, the hypocrisy of settler colonial nations, so on and so forth, and discussing the atrocities people in the Middle East have faced.”</p><p>“The Guardian decided to take it down. People on TikTok are talking about the letter, reading it, having this discourse about the issues, with, you know, places like the United States,” Joseph added. “They’re afraid of people having information so they decided to take it down.”<em> </em>&nbsp;</p><p>The popularity of the letter on TikTok and the Guardian’s decision to take it down comes in the middle of a raging debate about TikTok’s role during the Israel-Gaza war.&nbsp;</p>
<!--kg-card-begin: html-->

<!--kg-card-end: html-->
<p>Some Israelis and Jewish people, as well as prominent politicians and Silicon Valley venture capitalists, are saying that TikTok is promoting antisemitism. Senator Josh Hawley <a href="https://twitter.com/HawleyMO/status/1722381329122181389?ref=404media.co"><u>said</u></a> that TikTok specifically is a “hotspot for antisemitic, pro-Hamas propaganda.” There is no evidence to support the claim that TikTok is exceptional in this regard, aside from the fact that, like every other social media platform, TikTok hosts a lot of bigoted and antisemitic content, and that many TikTok users are horrified by Israel’s relentless bombing of the densely populated Gaza Strip, which so far has killed more than 11,000 people, 4,500 of which were children, <a href="https://www.nytimes.com/2023/11/14/us/politics/gaza-hospitals-cancer-israel.html?action=click&amp;pgtype=LegacyCollection&amp;state=default&amp;module=styln-israel-gaza&amp;variant=show&amp;region=BELOW_MAIN_CONTENT&amp;block=storyline_flex_guide_recirc&amp;ref=404media.co"><u>according to health officials in Gaza</u></a>. In fact, <a href="https://www.semafor.com/article/11/07/2023/tiktok-tells-advertisers-israel-is-trending-but-not-palestine?ref=404media.co"><u>according to Semafor</u></a>, #Israel is trending on the platform despite the fact TikTok users have created twice the number of videos that are tagged #Palestine. </p>
          </div>
        </article>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Push ifs up and fors down (555 pts)]]></title>
            <link>https://matklad.github.io/2023/11/15/push-ifs-up-and-fors-down.html</link>
            <guid>38282950</guid>
            <pubDate>Wed, 15 Nov 2023 21:41:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://matklad.github.io/2023/11/15/push-ifs-up-and-fors-down.html">https://matklad.github.io/2023/11/15/push-ifs-up-and-fors-down.html</a>, See on <a href="https://news.ycombinator.com/item?id=38282950">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <article>

    <h2>
    <a href="#Push-Ifs-Up-And-Fors-Down"><span>Push Ifs Up And Fors Down</span> <time datetime="2023-11-15">Nov 15, 2023</time></a>
    </h2>
<p><span>A short note on two related rules of thumb.</span></p>
<section id="Push-Ifs-Up">

    
<p><span>If there</span>’<span>s an </span><code>if</code><span> condition inside a function, consider if it could be moved to the caller instead:</span></p>

<figure>


<pre><code><span><span>// GOOD</span></span>
<span><span>fn</span> <span>frobnicate</span>(walrus: Walrus) {</span>
<span>    ...</span>
<span>}</span>
<span></span>
<span><span>// BAD</span></span>
<span><span>fn</span> <span>frobnicate</span>(walrus: <span>Option</span>&lt;Walrus&gt;) {</span>
<span>  <span>let</span> <span>walrus</span> = <span>match</span> walrus {</span>
<span>    <span>Some</span>(it) =&gt; it,</span>
<span>    <span>None</span> =&gt; <span>return</span>,</span>
<span>  };</span>
<span>  ...</span>
<span>}</span></code></pre>

</figure>
<p><span>As in the example above, this often comes up with preconditions: a function might check precondition</span>
<span>inside and </span>“<span>do nothing</span>”<span> if it doesn</span>’<span>t hold, or it could push the task of precondition checking to</span>
<span>its caller, and enforce via types (or an assert) that the precondition holds. With preconditions</span>
<span>especially, </span>“<span>pushing up</span>”<span> can become viral, and result in fewer checks overall, which is one</span>
<span>motivation for this rule of thumb.</span></p>
<p><span>Another motivation is that control flow and </span><code>if</code><span>s are complicated, and are  a source of bugs. By</span>
<span>pushing </span><code>if</code><span>s up, you often end up centralizing control flow in a single function, which has a</span>
<span>complex branching logic, but all the actual work is delegated to straight line subroutines.</span></p>
<p><em><span>If</span></em><span> you have complex control flow, better to fit it on a screen in a single function, rather than</span>
<span>spread throughout the file. What</span>’<span>s more, with all the flow in one place it often is possible to</span>
<span>notice redundancies and dead conditions. Compare:</span></p>

<figure>


<pre><code><span><span>fn</span> <span>f</span>() {</span>
<span>  <span>if</span> foo &amp;&amp; bar {</span>
<span>    <span>if</span> foo {</span>
<span></span>
<span>    } <span>else</span> {</span>
<span></span>
<span>    }</span>
<span>  }</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>g</span>() {</span>
<span>  <span>if</span> foo &amp;&amp; bar {</span>
<span>    <span>h</span>()</span>
<span>  }</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>h</span>() {</span>
<span>  <span>if</span> foo {</span>
<span></span>
<span>  } <span>else</span> {</span>
<span></span>
<span>  }</span>
<span>}</span></code></pre>

</figure>
<p><span>For </span><code>f</code><span>, it</span>’<span>s much easier to notice a dead branch than for a combination of </span><code>g</code><span> and </span><code>h</code><span>!</span></p>
<p><span>A related pattern here is what I call </span>“<span>dissolving enum</span>”<span> refactor. Sometimes, the code ends up</span>
<span>looking like this:</span></p>

<figure>


<pre><code><span><span>enum</span> <span>E</span> {</span>
<span>  <span>Foo</span>(<span>i32</span>),</span>
<span>  <span>Bar</span>(<span>String</span>),</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>main</span>() {</span>
<span>  <span>let</span> <span>e</span> = <span>f</span>();</span>
<span>  <span>g</span>(e)</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>f</span>() <span>-&gt;</span> E {</span>
<span>  <span>if</span> condition {</span>
<span>    E::<span>Foo</span>(x)</span>
<span>  } <span>else</span> {</span>
<span>    E::<span>Bar</span>(y)</span>
<span>  }</span>
<span>}</span>
<span></span>
<span><span>fn</span> <span>g</span>(e: E) {</span>
<span>  <span>match</span> e {</span>
<span>    E::<span>Foo</span>(x) =&gt; <span>foo</span>(x),</span>
<span>    E::<span>Bar</span>(y) =&gt; <span>bar</span>(y)</span>
<span>  }</span>
<span>}</span></code></pre>

</figure>
<p><span>There are two branching instructions here and, by pulling them up, it becomes apparent that it is</span>
<span>the exact same condition, triplicated (the third time reified as a data structure):</span></p>

<figure>


<pre><code><span><span>fn</span> <span>main</span>() {</span>
<span>  <span>if</span> condition {</span>
<span>    <span>foo</span>(x)</span>
<span>  } <span>else</span> {</span>
<span>    <span>bar</span>(y)</span>
<span>  }</span>
<span>}</span></code></pre>

</figure>
</section>
<section id="Push-Fors-Down">

    <h2>
    <a href="#Push-Fors-Down"><span>Push Fors Down</span> </a>
    </h2>
<p><span>This comes from data oriented school of thought. Few things are few, many things are many. Programs</span>
<span>usually operate with bunches of objects. Or at least the hot path usually involves handling many</span>
<span>entities. It is the volume of entities that makes the path hot in the first place. So it often is</span>
<span>prudent to introduce a concept of a </span>“<span>batch</span>”<span> of objects, and make operations on batches the base</span>
<span>case, with a scalar version being a special case of a batched ones:</span></p>

<figure>


<pre><code><span><span>// GOOD</span></span>
<span><span>frobnicate_batch</span>(walruses)</span>
<span></span>
<span><span>// BAD</span></span>
<span><span>for</span> <span>walrus</span> <span>in</span> walruses {</span>
<span>  <span>frobnicate</span>(walrus)</span>
<span>}</span></code></pre>

</figure>
<p><span>The primary benefit here is performance. Plenty of performance, </span><a href="http://venge.net/graydon/talks/VectorizedInterpretersTalk-2023-05-12.pdf"><span>in extreme</span>
<span>cases</span></a><span>.</span></p>
<p><span>If you have a whole batch of things to work with, you can amortize startup cost and be flexible</span>
<span>about the order you process things. In fact, you don</span>’<span>t even need to process entities in any</span>
<span>particular order, you can do vectorized/struct-of-array tricks to process one field of all entities</span>
<span>first, before continuing with other fields.</span></p>
<p><span>Perhaps the most fun example here is </span><a href="https://en.wikipedia.org/wiki/Sch%C3%B6nhage%E2%80%93Strassen_algorithm"><span>FFT-based polynomial</span>
<span>multiplication</span></a><span>: turns out,</span>
<span>evaluating a polynomial at a bunch of points simultaneously could be done faster than a bunch of</span>
<span>individual point evaluations!</span></p>
<p><span>The two pieces of advice about </span><code>for</code><span>s and </span><code>if</code><span>s even compose!</span></p>

<figure>


<pre><code><span><span>// GOOD</span></span>
<span><span>if</span> condition {</span>
<span>  <span>for</span> <span>walrus</span> <span>in</span> walruses {</span>
<span>    walrus.<span>frobnicate</span>()</span>
<span>  }</span>
<span>} <span>else</span> {</span>
<span>  <span>for</span> <span>walrus</span> <span>in</span> walruses {</span>
<span>    walrus.<span>transmogrify</span>()</span>
<span>  }</span>
<span>}</span>
<span></span>
<span><span>// BAD</span></span>
<span><span>for</span> <span>walrus</span> <span>in</span> walruses {</span>
<span>  <span>if</span> condition {</span>
<span>    walrus.<span>frobnicate</span>()</span>
<span>  } <span>else</span> {</span>
<span>    walrus.<span>transmogrify</span>()</span>
<span>  }</span>
<span>}</span></code></pre>

</figure>
<p><span>The </span><code>GOOD</code><span> version is good, because it avoid repeatedly re-evaluation </span><code>condition</code><span>, removes a branch</span>
<span>from the hot loop, and potentially unlocks vectorization. This pattern works on a micro level and on</span>
<span>a macro level </span>—<span> the good version is the architecture of TigerBeetle, where in the data plane we</span>
<span>operate on batches of objects at the same time, to amortize the cost of decision making in the</span>
<span>control plane.</span></p>
<p><span>While performance is perhaps the primary motivation for the </span><code>for</code><span> advice, sometimes it helps with</span>
<span>expressiveness as well. </span><code>jQuery</code><span> was quite successful back in the day, and it operates on</span>
<span>collections of elements. The language of abstract vector spaces is often a better tool for thought</span>
<span>than bunches of coordinate-wise equations.</span></p>
<p><span>To sum up, push the </span><code>if</code><span>s up and the </span><code>for</code><span>s down!</span></p>
</section>
</article>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Blender 16yo winner of UK younganimator of the year (1505 pts)]]></title>
            <link>https://younganimator.uk/winner/1699875910225x437970782709919500</link>
            <guid>38282166</guid>
            <pubDate>Wed, 15 Nov 2023 20:42:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://younganimator.uk/winner/1699875910225x437970782709919500">https://younganimator.uk/winner/1699875910225x437970782709919500</a>, See on <a href="https://news.ycombinator.com/item?id=38282166">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Is my toddler a stochastic parrot? (381 pts)]]></title>
            <link>https://www.newyorker.com/humor/sketchbook/is-my-toddler-a-stochastic-parrot</link>
            <guid>38281848</guid>
            <pubDate>Wed, 15 Nov 2023 20:17:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newyorker.com/humor/sketchbook/is-my-toddler-a-stochastic-parrot">https://www.newyorker.com/humor/sketchbook/is-my-toddler-a-stochastic-parrot</a>, See on <a href="https://news.ycombinator.com/item?id=38281848">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><nav aria-label="Notices" data-testid="navigation"><ul data-testid="navigation__list"><li data-testid="navigation__list-item"><a href="https://www.newyorker.com/about/us" data-testid="navigation__internal-link" role="link">About</a></li><li data-testid="navigation__list-item"><a href="https://www.newyorker.com/about/careers" data-testid="navigation__internal-link" role="link">Careers</a></li><li data-testid="navigation__list-item"><a href="https://www.newyorker.com/about/contact" data-testid="navigation__internal-link" role="link">Contact</a></li><li data-testid="navigation__list-item"><a href="https://www.newyorker.com/about/faq" data-testid="navigation__internal-link" role="link">F.A.Q.</a></li><li data-testid="navigation__list-item"><a href="https://www.condenast.com/advertising" data-testid="navigation__internal-link" role="link">Media Kit</a></li><li data-testid="navigation__list-item"><a href="https://www.newyorker.com/about/press" data-testid="navigation__internal-link" role="link">Press</a></li><li data-testid="navigation__list-item"><a href="https://www.newyorker.com/about/accessibility-help" data-testid="navigation__internal-link" rel="nofollow" role="link">Accessibility Help</a></li></ul></nav><p data-testid="dangerous-legalese-brand-text">© <!-- -->2023<!-- --> Condé Nast. All rights reserved. Use of this site constitutes acceptance of our<!-- --> <a data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.condenast.com/user-agreement/&quot;}" href="https://www.condenast.com/user-agreement/" rel="nofollow noopener" target="_blank">User Agreement</a> and <a data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;http://www.condenast.com/privacy-policy#privacypolicy&quot;}" href="http://www.condenast.com/privacy-policy#privacypolicy" rel="nofollow noopener" target="_blank">Privacy Policy and Cookie Statement</a> and <a data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;http://www.condenast.com/privacy-policy#privacypolicy-california&quot;}" href="http://www.condenast.com/privacy-policy#privacypolicy-california" rel="nofollow noopener" target="_blank">Your California Privacy Rights.</a> <em>The New Yorker</em> may earn a portion of sales from products that are purchased through our site as part of our Affiliate Partnerships with retailers. The material on this site may not be reproduced, distributed, transmitted, cached or otherwise used, except with the prior written permission of Condé Nast.<!-- --> <a data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;http://www.condenast.com/privacy-policy#privacypolicy-optout&quot;}" href="http://www.condenast.com/privacy-policy#privacypolicy-optout" rel="nofollow noopener" target="_blank">Ad Choices</a></p><div><ul data-testid="socialIconslist"><li><a aria-label="Follow us on Facebook" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.facebook.com/newyorker/&quot;}" href="https://www.facebook.com/newyorker/" rel="nofollow noopener" target="_blank"><p><svg focusable="false" width="7.2" height="16" viewBox="0 0 7.2 16" xmlns="http://www.w3.org/2000/svg"><title>Facebook</title><path d="M1.548 3.099v2.203H0v2.693h1.548V16h3.179V7.995H6.86s.2-1.291.297-2.703H4.739V3.45c0-.275.346-.646.689-.646H7.16V0H4.805C1.47 0 1.548 2.696 1.548 3.099z"></path></svg></p></a></li><li><a aria-label="Follow us on X" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://twitter.com/NewYorker/&quot;}" href="https://twitter.com/NewYorker/" rel="nofollow noopener" target="_blank"><p><svg focusable="false" width="30" height="30" viewBox="0 0 1200 1227" fill="none" xmlns="http://www.w3.org/2000/svg" style="width:45%;height:45%"><title>X</title><path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" fill="black"></path></svg></p></a></li><li><a aria-label="Follow us on Snapchat" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.snapchat.com/add/newyorkermag&quot;}" href="https://www.snapchat.com/add/newyorkermag" rel="nofollow noopener" target="_blank"><p><svg focusable="false" viewBox="0 0 32 32" width="32" height="32" fill="none" xmlns="http://www.w3.org/2000/svg"><title>Snapchat</title><path d="M16.134 9H16.094L15.818 9.003C15.16 9.003 12.928 9.186 11.876 11.546C11.522 12.34 11.606 13.689 11.675 14.772L11.699 15.161C11.6031 15.2095 11.4964 15.2329 11.389 15.229C11.179 15.229 10.932 15.163 10.654 15.032C10.5745 14.9966 10.4881 14.9792 10.401 14.981C10.076 14.981 9.68601 15.195 9.62601 15.514C9.58201 15.744 9.68501 16.079 10.424 16.371C10.491 16.398 10.571 16.423 10.656 16.45C10.961 16.547 11.423 16.693 11.548 16.988C11.613 17.141 11.587 17.338 11.471 17.573L11.464 17.589C11.423 17.684 10.446 19.91 8.27701 20.268C8.19659 20.2814 8.12395 20.324 8.07302 20.3877C8.02209 20.4514 7.99645 20.5316 8.00101 20.613C8.00301 20.663 8.01501 20.713 8.03601 20.761C8.19901 21.141 8.88601 21.421 10.136 21.615C10.177 21.671 10.221 21.871 10.247 21.992C10.274 22.112 10.3 22.236 10.339 22.367C10.377 22.495 10.474 22.649 10.726 22.649C10.828 22.649 10.948 22.625 11.086 22.598C11.295 22.558 11.58 22.501 11.937 22.501C12.135 22.501 12.34 22.519 12.547 22.553C12.95 22.62 13.293 22.863 13.69 23.143C14.259 23.545 14.902 24 15.88 24C15.908 24 15.935 24 15.962 23.997C15.993 23.999 16.034 24 16.078 24C17.058 24 17.701 23.545 18.268 23.143C18.667 22.863 19.009 22.62 19.413 22.553C19.619 22.519 19.824 22.501 20.023 22.501C20.363 22.501 20.633 22.545 20.873 22.591C21.023 22.621 21.145 22.636 21.233 22.636H21.252C21.3361 22.6404 21.419 22.6152 21.4865 22.5648C21.5539 22.5143 21.6015 22.4419 21.621 22.36C21.658 22.232 21.685 22.111 21.712 21.99C21.738 21.868 21.782 21.67 21.823 21.613C23.074 21.419 23.761 21.141 23.923 20.762C23.9437 20.7145 23.9559 20.6637 23.959 20.612C23.9638 20.5304 23.9381 20.4499 23.8869 20.3862C23.8357 20.3225 23.7627 20.28 23.682 20.267C21.512 19.91 20.536 17.683 20.496 17.589C20.4935 17.5836 20.4909 17.5782 20.488 17.573C20.372 17.338 20.347 17.141 20.412 16.988C20.537 16.693 20.998 16.547 21.304 16.45C21.389 16.423 21.469 16.397 21.535 16.371C22.076 16.158 22.348 15.895 22.342 15.591C22.337 15.353 22.152 15.141 21.856 15.035H21.855C21.7492 14.9921 21.6362 14.9701 21.522 14.97C21.4171 14.9687 21.3131 14.9898 21.217 15.032C20.959 15.153 20.728 15.219 20.529 15.227C20.4358 15.2258 20.3441 15.2032 20.261 15.161L20.281 14.819L20.284 14.773C20.353 13.689 20.438 12.339 20.084 11.545C19.03 9.184 16.793 9 16.133 9H16.134Z" fill="black"></path></svg></p></a></li><li><a aria-label="Follow us on YouTube" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.youtube.com/user/NewYorkerDotCom/&quot;}" href="https://www.youtube.com/user/NewYorkerDotCom/" rel="nofollow noopener" target="_blank"><p><svg focusable="false" viewBox="0 0 32 32" width="32" height="32" fill="none" xmlns="http://www.w3.org/2000/svg"><title>YouTube</title><path d="M23.666 11.76C23.5755 11.4196 23.3971 11.109 23.1488 10.8593C22.9005 10.6095 22.5909 10.4294 22.251 10.337C21.003 10 16 10 16 10C16 10 10.997 10 9.749 10.337C9.40915 10.4294 9.09955 10.6095 8.85121 10.8593C8.60287 11.109 8.42451 11.4196 8.334 11.76C8 13.016 8 15.636 8 15.636C8 15.636 8 18.256 8.334 19.512C8.42436 19.8526 8.60265 20.1634 8.851 20.4133C9.09934 20.6632 9.40903 20.8435 9.749 20.936C10.997 21.273 16 21.273 16 21.273C16 21.273 21.003 21.273 22.251 20.936C22.591 20.8435 22.9007 20.6632 23.149 20.4133C23.3974 20.1634 23.5756 19.8526 23.666 19.512C24 18.257 24 15.636 24 15.636C24 15.636 24 13.016 23.666 11.76ZM14.364 18.015V13.257L18.545 15.637L14.364 18.015Z" fill="black"></path></svg></p></a></li><li><a aria-label="Follow us on Instagram" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://instagram.com/newyorkermag/&quot;}" href="https://instagram.com/newyorkermag/" rel="nofollow noopener" target="_blank"><p><svg focusable="false" viewBox="0 0 32 32" width="32" height="32" fill="none" xmlns="http://www.w3.org/2000/svg"><title>Instagram</title><path d="M16 8C18.173 8 18.445 8.01 19.298 8.048C20.15 8.087 20.731 8.222 21.24 8.42C21.766 8.624 22.213 8.898 22.657 9.343C23.102 9.787 23.376 10.233 23.58 10.76C23.778 11.269 23.913 11.85 23.952 12.702C23.991 13.555 24 13.827 24 16C24 18.173 23.99 18.445 23.952 19.298C23.913 20.15 23.778 20.731 23.58 21.24C23.379 21.7738 23.064 22.2574 22.657 22.657C22.213 23.102 21.767 23.376 21.24 23.58C20.731 23.778 20.15 23.913 19.298 23.952C18.445 23.991 18.173 24 16 24C13.827 24 13.555 23.99 12.702 23.952C11.85 23.913 11.269 23.778 10.76 23.58C10.2262 23.379 9.74259 23.064 9.343 22.657C8.93593 22.2574 8.62093 21.7738 8.42 21.24C8.222 20.731 8.087 20.15 8.048 19.298C8.01 18.445 8 18.173 8 16C8 13.827 8.01 13.555 8.048 12.702C8.087 11.85 8.222 11.269 8.42 10.76C8.624 10.234 8.898 9.787 9.343 9.343C9.787 8.898 10.233 8.624 10.76 8.42C11.269 8.222 11.85 8.087 12.702 8.048C13.555 8.01 13.827 8 16 8ZM16 10C14.046 10 13.814 10.007 13.043 10.043C12.329 10.075 11.942 10.194 11.683 10.295C11.3657 10.4124 11.0787 10.5993 10.843 10.842C10.586 11.098 10.427 11.342 10.295 11.684C10.195 11.942 10.075 12.329 10.043 13.043C10.007 13.814 10 14.046 10 16C10 17.954 10.007 18.186 10.043 18.957C10.075 19.671 10.194 20.058 10.295 20.317C10.427 20.658 10.586 20.902 10.842 21.157C11.098 21.414 11.342 21.573 11.684 21.705C11.942 21.805 12.329 21.925 13.043 21.957C13.814 21.993 14.046 22 16 22C17.954 22 18.186 21.993 18.957 21.957C19.671 21.925 20.058 21.806 20.317 21.705C20.658 21.573 20.902 21.414 21.157 21.158C21.414 20.902 21.573 20.658 21.705 20.316C21.805 20.058 21.925 19.671 21.957 18.957C21.993 18.186 22 17.954 22 16C22 14.046 21.993 13.814 21.957 13.043C21.925 12.329 21.806 11.942 21.705 11.683C21.5876 11.3657 21.4007 11.0787 21.158 10.843C20.9219 10.5997 20.6341 10.4124 20.316 10.295C20.058 10.195 19.671 10.075 18.957 10.043C18.186 10.007 17.954 10 16 10ZM16 11.768C16.5558 11.768 17.1061 11.8775 17.6195 12.0901C18.133 12.3028 18.5995 12.6145 18.9925 13.0075C19.3855 13.4005 19.6972 13.867 19.9099 14.3805C20.1225 14.8939 20.232 15.4442 20.232 16C20.232 16.5558 20.1225 17.1061 19.9099 17.6195C19.6972 18.133 19.3855 18.5995 18.9925 18.9925C18.5995 19.3855 18.133 19.6972 17.6195 19.9099C17.1061 20.1225 16.5558 20.232 16 20.232C14.8776 20.232 13.8012 19.7861 13.0075 18.9925C12.2139 18.1988 11.768 17.1224 11.768 16C11.768 14.8776 12.2139 13.8012 13.0075 13.0075C13.8012 12.2139 14.8776 11.768 16 11.768ZM16 18.368C16.628 18.368 17.2303 18.1185 17.6744 17.6744C18.1185 17.2303 18.368 16.628 18.368 16C18.368 15.372 18.1185 14.7697 17.6744 14.3256C17.2303 13.8815 16.628 13.632 16 13.632C15.372 13.632 14.7697 13.8815 14.3256 14.3256C13.8815 14.7697 13.632 15.372 13.632 16C13.632 16.628 13.8815 17.2303 14.3256 17.6744C14.7697 18.1185 15.372 18.368 16 18.368ZM21.3 11.85C21.3 12.155 21.1788 12.4475 20.9632 12.6632C20.7475 12.8788 20.455 13 20.15 13C19.845 13 19.5525 12.8788 19.3368 12.6632C19.1212 12.4475 19 12.155 19 11.85C19 11.545 19.1212 11.2525 19.3368 11.0368C19.5525 10.8212 19.845 10.7 20.15 10.7C20.455 10.7 20.7475 10.8212 20.9632 11.0368C21.1788 11.2525 21.3 11.545 21.3 11.85Z" fill="black"></path></svg></p></a></li></ul></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Firefox Is Going to Try and Ship with Wayland Enabled by Default (208 pts)]]></title>
            <link>https://www.phoronix.com/news/Firefox-Change-Wayland-Release</link>
            <guid>38281264</guid>
            <pubDate>Wed, 15 Nov 2023 19:31:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/news/Firefox-Change-Wayland-Release">https://www.phoronix.com/news/Firefox-Change-Wayland-Release</a>, See on <a href="https://news.ycombinator.com/item?id=38281264">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="MOZILLA" src="https://www.phoronix.com/assets/categories/mozilla.webp" width="100" height="100"></p><p>
Guardrails have been in place where the Firefox browser has enabled Wayland by default (when running on recent GTK versions) but as of today that code has been removed... Firefox will try to move forward with stable releases where Wayland will ship by default!
</p><p>
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1752398">Mozilla Bug 1752398</a> to "ship the Wayland backend to release" has been closed this evening! After the ticket was open for  the past two years, it's now deemed ready to hopefully ship enabled for Firefox 121!
</p><p><img src="https://www.phoronix.net/image.php?id=2023&amp;image=firefox_wayland_default" alt="Firefox Wayland default!"></p>
<p><a href="https://hg.mozilla.org/mozilla-central/rev/5ea5f3e31d58">This patch</a> drops the "early beta or earlier" check to let Wayland support be enabled by default when running on recent GTK versions (GTK 3.24.30 threshold).
</p><p>
Firefox 121 is due for release around 19 December and if all continues to hold, it will finally ship with the Wayland back-end enabled by default as another big step forward. With <a href="https://www.phoronix.com/news/Plasma-6.0-Wayland-Default">KDE Plasma 6.0 using Wayland by default</a>, <a href="https://www.phoronix.com/news/XWayland-Rootful-HiDPI-Open">XWayland rootful mode improving</a>, and other (X)Wayland progress, 2024 could very well be the year of Wayland shining in the Linux desktop limelight.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Australia's overuse of antibiotics driving rate of drug-resistant infections (210 pts)]]></title>
            <link>https://www.theguardian.com/society/2023/nov/16/australia-antibiotics-overuse-drug-resistant-infections</link>
            <guid>38281137</guid>
            <pubDate>Wed, 15 Nov 2023 19:21:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/society/2023/nov/16/australia-antibiotics-overuse-drug-resistant-infections">https://www.theguardian.com/society/2023/nov/16/australia-antibiotics-overuse-drug-resistant-infections</a>, See on <a href="https://news.ycombinator.com/item?id=38281137">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>Australia’s continued overuse of antibiotics is driving common and potentially dangerous infections to become increasingly resistant to drugs, including last resort treatments.</p><p>A major government report on antimicrobial use, published on Wednesday, found more than one-third (36.6%) of the population had at least one antimicrobial prescription subsidised by the Australian government in 2022, up from 32.9% in 2021.</p><p>The misuse and overuse of antibiotics and antifungals is driving bugs to mutate so that common drugs are no longer effective to kill them, a phenomenon known as antimicrobial resistance.</p><figure id="cc96c251-735e-4179-aa64-49a4cb74ed61" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:3,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/australia-news/2023/nov/01/babies-mutated-infections-rates-high-drug-resistant-asia-pacific-australia&quot;,&quot;text&quot;:&quot;‘Alarming’ rates of babies with antibiotic-resistant bugs in Asia-Pacific, Australian study finds&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;cc96c251-735e-4179-aa64-49a4cb74ed61&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:0,&quot;design&quot;:0}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;,&quot;darkModeAvailable&quot;:false}"></gu-island></figure><p>Drug resistant infections kill “hundreds” of Australians each year, the report from the Australian Commission on Safety and Quality in <a href="https://www.theguardian.com/australia-news/health" data-link-name="in body link" data-component="auto-linked-tag">Health</a> Care found.</p><p>Australia ranks seventh-highest in the developed world for antimicrobial community prescribing rates. Australia’s hospital antimicrobial use is estimated to be nearly three times that of the European country with the lowest use, the Netherlands.</p><ul>
 <li><p><strong><a href="https://www.theguardian.com/email-newsletters?CMP=copyembed" data-link-name="in body link">Sign up for Guardian Australia’s free morning and afternoon email newsletters for your daily news roundup</a></strong></p></li>
</ul><p>The report attributed this high prescribing to “ongoing lack of improvement in the appropriateness of prescribing in public and private hospitals”. The drugs were being overused to prevent infections during and post-surgery, and the report found there was also “increasing antifungal use in hospitals, which could drive resistance in the future”.</p><p>A senior medical adviser for the commission, infectious diseases physician Prof Peter Collignon, said there was also a “cultural expectation in Australia that there’s a pill or a tablet for every problem”.</p><p>But antibiotics do not work against viruses, such as those that can cause colds and flu, with rest and treating symptoms often the best option.</p><p>“The reality is we’re giving out a lot of antibiotics when we don’t need to, Collignon said.</p><p>“People need to realise if you’re taking antibiotics when they’re not needed it can drive the rise in superbugs, which can then be spread to others. There can also be side effects from use in about 5% of people and, while these are usually minor, some can be serious.</p><p>“So there are a lot of good reasons to change the culture and start to ask questions every time we are prescribed an antibiotic, such as ‘Do I definitely have an infection that can be treated with this?’”</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-13">skip past newsletter promotion</a><p id="EmailSignup-skip-link-13" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>While the report found antimicrobial use in the community fell significantly, and for the first time in 2020 and 2021, this was largely due to the Covid-19 pandemic which saw public health measures such as lockdowns, mask wearing and social distancing lead to less sickness overall and less need for treatments.</p><figure id="e090f461-6676-4627-8ec1-ddcd83f310aa" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:15,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/australia-news/2023/nov/16/head-injuries-in-australia-rise-nearly-7-after-covid-dip-new-report-finds&quot;,&quot;text&quot;:&quot;Head injuries in Australia rise nearly 7% after Covid dip, new report finds&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;e090f461-6676-4627-8ec1-ddcd83f310aa&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:0,&quot;design&quot;:0}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;,&quot;darkModeAvailable&quot;:false}"></gu-island></figure><p>Prescribing rates began rising again in 2022, with antimicrobial use highest in Queensland, New South Wales and Victoria. Collignon said it was important people continued to maintain good hygiene regardless of the pandemic including frequent hand washing and staying home when sick.</p><p>The report described common pathogens such as gonorrhoea, golden staph and E coli as increasingly resistant to common antibiotics.</p><p>Meanwhile, a number of pathogens have been reported by laboratories as increasingly failing to respond to last-line antimicrobial drugs. The most common of these was CPE, a bacteria that in rare cases can invade the blood or tissues and cause serious infections. Nationally, there was a 37.4% increase in reports of CPE being resistant to last-line treatments in 2022 compared with 2021.</p><p>The World Health Organization estimates that antimicrobial resistance could result in up to 10m deaths each year by 2050.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[David Attenborough is now narrating my life (393 pts)]]></title>
            <link>https://twitter.com/charliebholtz/status/1724815159590293764</link>
            <guid>38281079</guid>
            <pubDate>Wed, 15 Nov 2023 19:19:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/charliebholtz/status/1724815159590293764">https://twitter.com/charliebholtz/status/1724815159590293764</a>, See on <a href="https://news.ycombinator.com/item?id=38281079">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="ScriptLoadFailure"><form action="" method="GET"><div><p><span>Something went wrong, but don’t fret — let’s give it another shot.</span></p><br></div></form></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Diskomator – NVMe-TCP at your fingertips (133 pts)]]></title>
            <link>https://github.com/poettering/diskomator</link>
            <guid>38280472</guid>
            <pubDate>Wed, 15 Nov 2023 18:35:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/poettering/diskomator">https://github.com/poettering/diskomator</a>, See on <a href="https://news.ycombinator.com/item?id=38280472">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">Diskomator</h2>
<p dir="auto"><em>🦠 NVMe-TCP at your fingertips 🦠</em></p>
<p dir="auto">Diskomator is an OS-in-an-EFI-binary whose only job is to expose all
local disks as NVMe-TCP network block devices, as they appear.</p>
<p dir="auto">When built, it results in a single UEFI binary, that embeds a full OS
root file system so that it does not need any further disk access
while it runs. The EFI binary can be invoked directly from the UEFI
firmware, for example by placing it an EFI System Partition (ESP). The
OS root file system contains:</p>
<ol dir="auto">
<li>
<p dir="auto">A Fedora Linux OS tree</p>
</li>
<li>
<p dir="auto">A current version of systemd (v255-rc2),
including
<a href="https://www.freedesktop.org/software/systemd/man/latest/systemd-storagetm.html" rel="nofollow">systemd-storagetm</a>
and
<a href="https://www.freedesktop.org/software/systemd/man/latest/systemd-networkd.html" rel="nofollow">systemd-networkd</a>.</p>
</li>
<li>
<p dir="auto">An SSH server (just to make things easy to debug)</p>
</li>
<li>
<p dir="auto">The Plymouth boot splash tool to make things pretty at boot and during runtime.</p>
</li>
</ol>
<p dir="auto">The image is built via <a href="https://github.com/systemd/mkosi"><code>mkosi</code></a>.</p>
<p dir="auto">All this then does is boot up into a minimal mode where
<code>systemd-storagetm</code> and <code>systemd-networkd</code> are running. The former
exposes all local block devices via NVMe-TCP, the latter configures
all local network devices.</p>
<p dir="auto">The resulting EFI binary is relatively large (~300M), because it
embeds all kinds of network drivers and graphics devices, plus their
firmware. To keep things simply this stays close to upstream Fedora,
without any attempts to minimize footprint.</p>
<h2 tabindex="-1" dir="auto">Why Even?</h2>
<p dir="auto">My personal usecase for this goes something like this: I build
immutable OS images for physical systems regularly and try them out. I
could always write them to an USB stick on my development machine and
then unplug it, and plug it into my testing machine. But that's
cumbersome. My way out: just have a way how the test machine's disk
can be written to directly from my development machine. And that's
what Diskomator is.</p>
<p dir="auto">Other usecases:</p>
<ul dir="auto">
<li>Debugging</li>
<li>Remote installation of OSes</li>
<li>Turn your 2000 USD laptop into a very expensive USB stick</li>
<li>It's a fantastic show-case for UKIs, <code>mkosi</code>, Linux and <code>systemd</code> I think</li>
</ul>
<h2 tabindex="-1" dir="auto">Caveats</h2>
<ul dir="auto">
<li>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> This currently does not enable NVME authentication nor
encryption. If you boot from this your disk will be readable and
writable to anyone with access to your local network!</p>
</li>
<li>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> The <code>root</code> user is accessible via SSH with the password <em>test</em>,
again to anyone with access to your local network!</p>
</li>
<li>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> A debug shell is always available on Alt-F9.</p>
</li>
<li>
<p dir="auto">This requires an EFI system, with a bit of RAM. After all the OS
is entirely kept in memory.</p>
</li>
<li>
<p dir="auto">The resulting EFI binary is not SecureBoot signed, you thus have to
disable SecureBoot if you want to use this. (You can easily add that
though, if you have a suitable key pair. <code>mkosi</code> will help with
that, see documentation.)</p>
</li>
</ul>
<h2 tabindex="-1" dir="auto">Building</h2>
<p dir="auto">You'll need:</p>
<ol dir="auto">
<li>
<p dir="auto">A build tree of a current systemd development version, to get the
newest version of <code>systemd-repart</code>. Once distributions started to
regularly ship v255, this manual step will go away. On a Fedora
system you'd do it like this:</p>
<div data-snippet-clipboard-copy-content="sudo dnf builddep systemd
git clone https://github.com/systemd/systemd.git
cd systemd
meson build
ninja -C build"><pre><code>sudo dnf builddep systemd
git clone https://github.com/systemd/systemd.git
cd systemd
meson build
ninja -C build
</code></pre></div>
<p dir="auto">And with that you should have a version of systemd built in the
<code>build</code> sub-directory. No need to install this, BTW, just keep it
around, we can use the build tree directly in step 4.</p>
</li>
<li>
<p dir="auto">v19 of <a href="https://github.com/systemd/mkosi"><code>mkosi</code></a> or newer. If
your distribution doesn't have that yet, you can trivially check it
out too:</p>
<div data-snippet-clipboard-copy-content="sudo dnf builddep mkosi
git clone https://github.com/systemd/mkosi.git"><pre><code>sudo dnf builddep mkosi
git clone https://github.com/systemd/mkosi.git
</code></pre></div>
</li>
<li>
<p dir="auto">A checkout of <code>diskomator</code>:</p>
<div data-snippet-clipboard-copy-content="git clone https://github.com/poettering/diskomator.git
cd diskomator
git submodule update --init"><pre><code>git clone https://github.com/poettering/diskomator.git
cd diskomator
git submodule update --init
</code></pre></div>
</li>
<li>
<p dir="auto">Now edit <code>mkosi.conf</code> in the diskomator directory locally on your
system, and adjust the (by default commented) <code>ExtraSearchPaths=</code>
line to point to the build tree from step 1.</p>
</li>
<li>
<p dir="auto">You are now ready to build the image. In the <code>diskomator</code> git
checkout run:</p>
<div data-snippet-clipboard-copy-content="sudo ../mkosi/bin/mkosi -T -i -f build"><pre><code>sudo ../mkosi/bin/mkosi -T -i -f build
</code></pre></div>
<p dir="auto">(The <code>-T -i -f</code> you can theoretically drop BTW, I only specify them
here since it improves rebuild times in case you hack on this.)</p>
<p dir="auto">Adjust the <code>mkosi</code> path to match where you placed the checkout tree
from step 3.</p>
<p dir="auto">Once this completes you'll have two things in the <code>mkosi.output/</code>
subdirectory: <code>diskomator.efi</code> and <code>diskomator.raw</code>. The former is
the EFI binary that we care about. The latter is a GPT disk image
with an ESP with that very EFI binary in it (and no other
partitions). The latter you can directly <code>dd</code> to an USB stick if
you like, to boot another system from.</p>
<p dir="auto">You can even let <code>mkosi</code> do the <code>dd</code>'ing for you. Which is actually
a good idea, since it will make sure the image is adapted to your
chosen target device's sector and disk size 🔥🔥🔥:</p>
<div data-snippet-clipboard-copy-content="sudo ../mkosi/bin/mkosi burn /dev/disk/by-id/usb-SanDisk_Ultra_Fit_4C530000190505109123-0\:0"><pre><code>sudo ../mkosi/bin/mkosi burn /dev/disk/by-id/usb-SanDisk_Ultra_Fit_4C530000190505109123-0\:0
</code></pre></div>
<p dir="auto">Replace the last argument in that command line by the path to the
device node you want to write this to. As you can see I have a
SanDisk USB stick I am testing this with.</p>
</li>
</ol>
<p dir="auto">And that's really all.</p>
<p dir="auto">Once systemd v255 and mkosi v19 entered the various distributions step
1, 2 and 4 will become unnecessary (and the git submodule thing from
step 3). Once that happened you only have to do 3 and 5.</p>
<h2 tabindex="-1" dir="auto">Future</h2>
<p dir="auto">I'd like to live to see a future where people build appliances like
this for various purposes, not just this specific NVMe one. For
example, a nice thing to have would be an appliance whose only job is
to make all local displays available via Miracast. I hope this
repository is inspiration enough for an interested soul, to get this
off the ground.</p>
<p dir="auto">Ideally, distributions would build images like this on their
own. Specifically, I'd be delighted if Fedora (for example) would
build an image like this and SecureBoot sign it, within their own
build infrastructure and make that an offering to their users.</p>
<p dir="auto">In the meantime it might be nice to build diskomator on the usually
available Open Source build infrastructure somewhere, so that people
can just download a <code>.raw</code> or <code>.efi</code> file, instead of the cumbersome
build steps listed above. Anyone interested in setting this up?</p>
<p dir="auto">Anyway, I hope this piqued your interest, now run and do with all this
whatever you want!</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Decline of Usability: Revisited (204 pts)]]></title>
            <link>https://datagubbe.se/usab2/</link>
            <guid>38280201</guid>
            <pubDate>Wed, 15 Nov 2023 18:15:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://datagubbe.se/usab2/">https://datagubbe.se/usab2/</a>, See on <a href="https://news.ycombinator.com/item?id=38280201">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>



<p>
<b>In which we once more delve into the world of user interface design.</b>
</p>
<p>
<i>Autumn 2023</i>
</p>

<p>
Three years ago, I wrote <a href="https://datagubbe.se/decusab/">a rant about the problems</a> of our current UI paradigm. The complaints I voiced were hardly new or unique, neither was the text what I'd consider my best writing. It was, honestly, mostly a way to blow off steam. It seems I struck a nerve, though, because it's proven to be one of the most popular texts I've published here. For some time, I've thought about writing a follow-up, and a recent resurgence in the text's popularity prompted me to finally do so.
</p>

<p>
I didn't (and still don't) have any delusions that my ramblings will somehow affect anything. And, in three years' time, nothing has indeed changed - at least not for the better. The most depressing part is perhaps that the debate around these issues hasn't changed one iota, either. The same non-arguments crop up all the time when discussing these issues:
</p>

<p>
"Well, gramps, maybe things weren't super duper great in the past, either?" "Where's the research, dude?" "It's progress, man. Progress! You can't stop progress!" "Uhhhhm, actually, compadre, we can do so much stuff with computers nowadays! That's usability, broseph!"
</p>

<p>
If I sound salty, it's because I am. Deal with it.
</p>

<h3>What were we talking about?</h3>

<p>
Usability, as defined by Wikipedia, is "the capacity of a system to provide a condition for its users to perform the tasks safely, effectively, and efficiently while enjoying the experience." Its relation to software is further specified: "In software engineering, usability is the degree to which a software can be used by specified consumers to achieve quantified objectives with effectiveness, efficiency, and satisfaction in a quantified context of use."
</p>

<p>
Let's go on with Wikipedia:
</p>

<p>
"The primary notion of usability is that an object designed with a generalized users' psychology and physiology in mind is, for example:
</p>
<ul>
<li>
More efficient to use — takes less time to accomplish a particular task.
</li>
<li>
Easier to learn — operation can be learned by observing the object.
</li>
<li>
More satisfying to use."
</li>
</ul>

<p>
In short, <b>usability is the ease with which a predetermined task can be accomplished.</b> Consequently, "It looks fresh" isn't usability; it's aesthetics. Likewise, the lack of a specific program feature isn't the same as being able to use it as easily, efficiently and safely as possible. Looking for the power switch on a hand-cranked drill is silly, but maybe we should complain if we had to operate power tools with our pinky fingers. Similarly, a word processor without a mail merge function is perhaps intended for other types of word processing - such as writing novels. Hence, <i>being usable in many different situations</i> isn't automatically the same as <i>having a high level of usability</i>.
</p>

<h3>Conceptual consistency</h3>

<p>
In my original text, some arguments deal with static GUI design (such as low contrast or excessive use of screen real estate), but many do not. Some are about consistency: consistency over time, consistency across applications and consistency across platforms.
</p>

<p>
Pure, static GUI design is a <i>subset</i> of usability: poor design choices, such as low contrast and illegible fonts, will lead to worse usability. It is, however, not always clear where to draw the line between what we call GUI (toolkit) design, UI design, usability and UX. One affects the other, roughly in the order listed, from the ground up.
</p>

<p>
All three forms of consistency (across time, application and platform) were, until roughly the release of Windows 8, honoured by most major vendors. When I talk about consistency, it's not to be understood as the exact same look, widget for widget and icon for icon -  it means adhering to basic standard principles of operation. <i>One</i> such example are the "File, Edit, View, Help" dropdown menus, recognizable between different operating systems, programs and UI toolkits. Sure, Java Swing looked a bit different than Win32, but they were still based around the same basic notions and concepts as all the other toolkits on the market.
</p>

<p>
This is not to say that consistency always trumps everything else: sometimes, real improvement of usability <i>can</i> be obtained through a complete interface overhaul. Windows 95 is a good example of that.
</p>

<h3>Show us the research, dude!</h3>

<p>
In discussions like these, there's usually at least one person who shows up to demand data or research, but curiously never presents anything to back up their own claims about modern UI superiority. But, by all means. The concepts I champion have been around for decades. Many of them have been studied in detail, some of them even build on ideas as old as - or older than - computers themselves.
</p>

<p>
One such concept is that of <a href="https://en.wikipedia.org/wiki/Affordance">affordances</a>, meaning how the look and shape of certain objects communicate information about how the object can be operated. A push button that protrudes from the surrounding surface, for example. Some affordances come more or less naturally, such as the taper and curve of a knife blade indicating the location of the sharpened edge.
</p>

<p>
Affordances can be constructed in computer interfaces using <a href="https://en.wikipedia.org/wiki/Skeuomorph">skeuomorphism</a>, for example emulating a protruding button through the use of light and dark borders to indicate a 3D bevel around button borders.
</p>

<p>
These are fundamental concepts in all types of industrial design and have been for a long time. Another example is why the Mac, Atari and Amiga all put the menu bar at the top of the screen: it's an oft-used target and should be easy to move the pointer to. This is an adaptation of <a href="https://en.wikipedia.org/wiki/Fitts%27s_law">Fitt's law</a>.
</p>

<h3>Industry Standards</h3>

<p>
The basic construction of this menu bar, starting with "File, Edit" was invented at Apple and introduced with the Lisa in 1983. It was then picked up in some similar fashion by nearly all desktops following it: Windows, Mac, GEM, Amiga, OS/2 - the list goes on - until it converged almost completely.
</p>

<p>
Another widespread source of influence was <a href="https://en.wikipedia.org/wiki/IBM_Common_User_Access">IBM Common User Access</a> from 1987, which among other things introduced the kind of keyboard shortcuts we're still familiar with, and the ellipsis ("...") to indicate menu choices that opened a dialog window.
</p>

<p>
CDE - the <a href="https://en.wikipedia.org/wiki/Common_Desktop_Environment">Common Desktop Environment</a> - was an effort of several major Unix vendors to standardize a graphical environment across platforms. This was adopted by <i>at least</i> Sun, Hewlett Packard, IBM, DEC (including in OpenVMS), Fujitsu, SCO and (for a short time) Silicon Graphics.
</p>

<p>
In short, anyone claiming that there weren't efforts in creating and maintaining an industry standard regarding UI design is either deeply ignorant or blatantly dishonest.
</p>

<h3>Further principles</h3>

<p>
A lot of my complaints can be described using the <a href="https://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction#Thirteen_principles_of_display_design">Thirteen Principles of Display Design</a>, from the book "An Introduction to Human Factors Engineering" by <a href="https://fabbs.org/about/in-honor-of/christopher-wickens-phd/">Christopher D. Wickens</a>, Sallie E. Gordon and Yili Liu. I'll be using Wikipedia's summarized principles here:
</p>

<p>
<b>#2: Avoid absolute judgment limits.</b> Do not ask the user to determine the level of a variable based on a single sensory variable (e.g., color, size, loudness).
</p>
<p>
<b>#5: Similarity causes confusion:</b> Use distinguishable elements.
</p>
<p>
<b>#6: Principle of pictorial realism:</b> A display should look like the variable that it represents.
</p>

<p>
Both judgment limits and similarity apply to window focus indicators: A clearly visible title bar and border in a distinctly different colour from the surrounding windows is a dissimilarity that makes the active window stand out clearly, making it easy to identify.
</p>

<p>
All three principles apply to icons. They used to be colourful little works of art, using both shape and colour make them discernible. Even during the monochrome days, most of them were carefully drawn, pixel by pixel, to represent something clearly distinguishable and identifiable.
</p>

<p>
Today's icons are often extremely stylized to the point of being meaningless, at least without knowing what their predecessors once looked like. Coupled with designs that often make a point of using monochrome icons and low contrast colours, they blur together into an indistinguishable mass of similar-looking geometric primitives.
</p>

<p>
Consider the below icons from Microsoft Outlook, for example. What is the "Archive" icon even supposed to depict? The lower part of a printer, with a sheet of paper sticking out? "Sweep" is most likely a broom - but would you be able to determine that without the text? In the lower toolbar, what's probably a flag might also just be a sketch by Mondrian. I have honestly zero idea what the rightmost icon is supposed to resemble.
</p>

<p>
<img src="https://datagubbe.se/usab2/pics/outlook_icons.png" alt="A screenshot of Outlook icons.">
<br>
<img src="https://datagubbe.se/usab2/pics/outlook_icons2.png" alt="Another screenshot of Outlook icons.">
</p>

<p>
<b>#8: Minimizing information access cost or interaction cost.</b> (...) A display design should minimize this cost by allowing frequently accessed sources to be located at the nearest possible position.
</p>
<p>
<b>#9: Proximity compatibility principle.</b> Divided attention between two information sources may be necessary for the completion of one task. These sources must be mentally integrated and are defined to have close mental proximity. Information access costs should be low.
</p>

<p>
The modern design paradigm is all about running applications in full screen mode, with large UI elements and ample white space. It's true that information density must be balanced. Interfaces that are too cramped will become illegible and distracting - but interfaces that rely on full screen hegemony don't work as well when a user needs to see two programs at once on one screen.
</p>

<p>
MDI:s (multiple document interfaces) do exist in modern apps, but they're often less flexible than in traditional programs, where free-floating sub-windows could be tiled, stacked, resized and placed according to the user's desire. Users of the old IRC client mIRC will perhaps remember its in-app window management facilities, sorely lacking from modern counterparts like Teams, Slack and Discord.
</p>

<p>
The hamburger menu also comes to mind. Compared to traditional menu bars, it counteracts Fitt's law, impedes discoverability and often increases the amount of clicks needed to navigate.
</p>

<p>
Hidden scroll bars not only hides information from the user - they also completely disregard Fitt's law: you cannot reliably aim your mouse at an invisible object.
</p>

<p>
<b>#13: Principle of consistency.</b> Old habits from other displays will easily transfer to support the processing of new displays if they are designed consistently.
</p>

<p>
I guess throwing out 30-40 years of design and interaction tenets basically overnight can be described as slightly counter to this principle.
</p>

<h3>Counterexample: Considering mIRC</h3>

<p>
The mIRC interface was in no way <i>perfect</i>, and yet it was so advanced we're apparently no longer able to recreate it:
</p>

<p>
<img src="https://datagubbe.se/usab2/pics/mirc1.png" alt="A screenshot of the mIRC IRC client.">
</p>

<ul>
<li>
A look and feel that corresponds exactly to a large number of
other Windows programs at the time.
</li>
<li>
Unambiguous demarcation of window focus.
</li>
<li>
Clear visual separation of content and program functionality.
</li>
<li>
A menu bar with categorized commands for fast discoverability.
</li>
<li>
Beveled separators indicating related functions.
</li>
<li>
Icons discernible through both shape and colour.
</li>
<li>
Always visible scroll bars, clearly indicating the current position in the chat backlog.
</li>
<li>
Complete user freedom of window - and thus information - positioning.
</li>
</ul>

<h3>How about showing me some research?</h3>

<p>
The above principles can be used to critique many other trends in contemporary UI crafting. The following examples have been reiterated ad nauseam, but let's do another round:
</p>


<ul>
<li>
Lack of affordances, E.G. buttons and other clickable elements that don't clearly and distinctly communicate their function.
</li>
<li>
Ambiguous state, E.G. highly stylized slide switches instead of checkboxes.
</li>
<li>
Flat design and low contrast in general. 3D bevels help with many different concepts including discoverability (what's clickable), distinction (raised above or sunk into the UI) and Fitt's law (clear demarcation of borders makes the size of a target easy to identify).
</li>
</ul>

<p>
I'm deeply interested in seeing "data and research" from proponents of modern UI concepts. What kind of research was behind Microsoft's various changes in Windows 8, for example? I'm unsure, since they immediately backtracked plenty of them in version 8.1 and 10 - including reinstating the Start menu.
</p>

<p>
Putting UI elements in Window titlebars is often rationalized by "saving screen real estate". How, then, is Microsoft's gargauntan "ribbon"-style toolbars rationalized - and what type of research and data prompted their introduction? There are many more examples, but I'm specifically picking Microsoft here because if there's one company with enough cash to fund some science, it's got to be them.
</p>

<p>
Auto-hiding scroll bars, shrinking the draggable area of window titles and cramming the bulk of a program's functionality inside a cramped hamburger menu are, as discussed above, blatantly breaking a number of well known UI design principles. Surely - <i>surely</i> - that's because of the incredible amount of meticulous research underpinning those decisions. And surely - <i>surely</i> - considering how prevalent this paradigm is today, any UI designer worth their salt can recite the very good reasons for and many benefits of these concepts in their sleep?
</p>

<h3>Consistency over time</h3>

<p>
Plenty of programs change something about the UI in some way in almost every new version - and new versions are released very often these days. Firefox is a prime example of this, shuffling things around or changing the way they look and behave in nearly every update. A lot of Firefox users then get very angry and either 1) Find ways to patch away the new changes, or 2) Simply power through and get used to them, having to relearn workflows and recondition muscle memory. Then a new version comes along, and the cycle repeats.
</p>

<p>
<b>Is there any reflection here?</b> Do software vendors research how this affects usability? Do they actually learn something from these constant redesigns - as in, are new patterns and best practices formed and adhered to - or is it just, in fact, tweaking things randomly for the sake of tweaking? Are things genuinely getting gradually <i>better</i> or are they just getting gradually <i>different</i>? I'm genuinely curious about the processes and methods behind our new, supposedly superior UI paradigm, because <i>I can't seem to discern any</i>.
</p>

<p>
A perfect example of this Sudden Redesign Syndrome occurred very recently. Yes, it's Slack again, going about their usual crazy antics. This time it's not inconsistency over time or across platforms. No, I was recently blessed with <i>two completely different UI designs in the very same application, on the very same device</i>. One of the two "slacks" I'm a member of recently got a UI update - and the other didn't. The effect is that when I switch between the slacks, inside the same program instance, the whole UI changes. This has now been the case for several months, on both iOS and Linux, which leads me to believe it's intentional.
</p>

<p>
<img src="https://datagubbe.se/usab2/pics/slack_ed.png" alt="A screenshot comparison of old and new Slack interfaces.">
<br>
<i>Yes, this is how two different "slacks" look in the same instance of the same program.</i>
</p>

<p>
Slack is not some backwater cottage industry. It's a big company with thousands of employees and millions of users - many of whom are paying good money for their software. It would be interesting indeed to see the research, data and rationale behind this particular decision. It would also be interesting to know what the new design offers in usability that the old one didn't, and if these improvements (if, indeed, there are any) are significant enough to force every single user to re-learn the application interface once more.
</p>

<p>
I'm not advocating for complete rigidity in all programs forever, but there's great value in consistency over time. As an end user, the constant redesigns I'm now subjected to makes me feel more like a lab rat than someone entrusted to use a tool. I'm running around in a maze built by a bunch of developers and designers, hunting for a piece of cheese that constantly teleports to a new location. All the while I'm thinking: If modern application design is so great, why does everyone feel the need to change it all the time?
</p>

<h3>Yes, it's usability</h3>

<p>
The above examples and counterexamples are all about usability, as in the ease with which a computer environment lets a user accomplish a specific, predefined task. Identifying basic UI components, pointing at and clicking on them, and being able to quickly locate program features are all crucial and fundamental activities when using software.
</p>

<p>
Most (though not all) programs with the modern design approach seem to focus on one or a few major functions and hide everything else. I don't know where this idea originates, but a quote from web usability bigwig Jakob Nielsen comes to mind: "There is no such thing as a training class or a manual for a website. People have to be able to grasp the functioning of the site immediately after scanning the home page for a few seconds."
</p>

<p>
Many contemporary application designers seem to have this quote as their sole tenet, and forget that it was uttered in the year 2000, about shopping sites, when the expression "home page" was still used unironically.
</p>

<p>
This approach may still be of value in phone apps with similar purposes, such as immediately letting the user get started with "creating" funny AI selfie edits while bombarding them with ads and siphoning off their location data. However, mobile apps designed for leisurely entertainment translate badly into complex desktop applications built for power user productivity. The old desktop design paradigm may not have been perfect, but it did at the very least offer basic, transferable patterns for finding and operating advanced features.
</p>

<p>
This translation of mobile paradigms to the desktop ends after the first few clicks for completing basic tasks. After that, designers/developers (and hence users) no longer have a clearly defined set of rules to adhere and adapt to. Instead, we're treated to various new inventions that differ not only between platforms and applications, but is also constantly and suddenly changing between versions of the same program.
</p>

<h3>Nonstandard and Poor</h3>

<p>
Consider <a href="https://developer.gnome.org/hig/principles.html">Gnome's human interface guidelines</a>. Their basic principles aren't all bad, but once a program grows more complex, they break down fast. The end result for both developers, designers and users is <b>conceptual poverty</b>. By that I mean that developers using only Gnome are likely to start <i>losing valuable concepts</i> when thinking about UI - and thus program - design.
</p>

<p>
Take Blender, for example. The below screenshot was kindly provided by a friend who is a professional graphics artist. Yes, it looks complex, but that's because modern graphics creation is a highly complex process. Blender has a massive feature set and a plethora of parameters that can (and must) be tweaked to create the kind of stunning 3D scenes we've come to expect today.
</p>

<p>
<a href="https://datagubbe.se/usab2/pics/blender/image1.png" alt="A screenshot of a complex Blender session."><img src="https://datagubbe.se/usab2/pics/blender/image1_scaled.jpg"></a><br>
<i>Click to view full resolution.</i>
</p>

<p>
I honestly can't see how a program like Blender could possibly be created using Gnome's guidelines - or indeed toolkit: certain time-tested UI elements aren't even allowed in Gnome anymore, such as menu bars and hierarchical pull down menus. "Progressive disclosure" and the prevailing interpretation of "navigation structures" means completely replacing certain parts of the interface with others - instead of letting the user decide what's relevant for them to see at any given moment. "Frequently used actions should be close at hand" - but in a program like Blender, frequently used actions vary profoundly with what kind of project is being worked on and what stage that project is in. I find it unlikely that a developer can make such judgement calls better than a user spending tens of thousands of hours in the program during the span of a career. Then again, "Focus on one situation, one type of experience." is rather telling. Using software professionally isn't about having a chic, boutique <i>experience</i> - it's about getting the job done as quickly and efficiently as possible. <b>Sometimes, that means working with irreducible complexity.</b>
</p>

<p>
This applies to a multitude of other professional software titles used in actually productive work, whether it's photo editing, CAD, software development or corporate management. There have been some efforts to "modernize" the UI of, for example, Excel - but in contrast to Teams, the olden ways are still prevalent in Microsoft's spreadsheet offering. I dare say it's impossible to replace its pull down menus, floating settings windows and other time-tested concepts, because the program is too complex and too powerful to fit into any dumbed-down, modern paradigm. Incidentally, Outlook is perhaps now at a point where it combines the worst of both worlds.
</p>

<h3>Getting old</h3>

<p>
I have personally, in some capacity, used Amiga Workbench, Atari GEM/TOS, MacOS Classic (6.x, 7.x, 8.x, 9.x), MacOS X (various versions), Windows (3.1, 95, 98, NT4, 2000, XP, Vista, 7, 8 and 10), SGI's IndigoMagic, Sun's OpenLook, BeOS, CDE, OS/2 Warp, NeXTStep, RiscOS, Gnome (1, 2, 3), KDE (various versions), Plan 9 and probably a handful more. I've used computers for 35 years and worked as a software developer for a quarter century. I've used a wide variety of software packages for photo editing, image creation, 3D graphics, spreadsheets, word processing, text editing, composing music, sound editing, desktop publishing, online communication and software development - to name a few. In short, I think it's safe to say that I have some experience with user interfaces and experimenting my way around systems and programs.
</p>

<p>
With the exception of Plan 9 and RiscOS, all of those systems, and a majority of the applications running on them, were instantly recognizable and usable for me up until (roughly) the release of Gnome 3 and Windows 8. Of course they each had their own quirks and idiosyncrasies, but the mental model I had built when using one system was easily translatable to all the other ones.
</p>

<p>
I could swiftly accomplish basic tasks in programs on the various platforms, including management of the programs themselves, such as determining which window was focused, what was a button and not, how to find advanced features, how to learn keyboard shortcuts, etc. Fundamental functions had fixed homes (Save and Open under File, for example) and the way to access them was sufficiently similar. This was efficient (learn one concept, apply it everywhere), easy to use (observe one system/program, operate all of them) and thus satisfying: my skills are transferable!
</p>

<p>
Today, I struggle with a lot of applications in <i>very basic ways</i>. In some incarnation of Outlook for iOS, for example, I couldn't figure out how to <i>compose a new mail</i> without scrutinizing every single element on the screen meticulously. The similar basic task of creating a new ticket in Jira once had me taking a long, hard survey of the entire screen before I figured out where the relevant button was - and that it was, in fact, a button. These are core functions of both applications, and someone with my background struggling to find them isn't exactly a testament to an overall improvement in usability.
</p>

<p>
Being able to quickly discern window focus isn't a mere aesthetic preference. When I was running Windows 10 on a multi-screen setup, I often came back to my computer from lunch or a meeting and started typing - but no text appeared where I expected it to. I then had to hunt across screens to locate the window which did in fact have focus. This ventures way past "ease of task accomplishment" and well into "safety" territory: accidentally spreading sensitive information to the wrong audience, for example.
</p>

<p>
Yes, these are both anecdotal accounts - but the solutions to both of these problems have been known <i>and</i> implemented for a very long time. These existing solutions were then removed on mere whims, and replacements have yet to materialize. This is not progress - it is, at best, a regression to the early days of experimental GUI prototypes at Xerox PARC.
</p>

<h3>Finally</h3>
<p>
I understand it's tempting to dismiss my views as those of some old codger unable to get with the times. In some ways, I freely admit that's an accurate assessment - but is that really an argument <i>for</i> the current UI paradigm?
</p>

<p>
Surely - <i>surely</i> - the point of all the alleged usability research being carried out today isn't to make experienced power users feel downright stupid. Surely - <i>surely</i> - the goal of usability shouldn't be to rob such users of time-tested, well-researched, efficient, effective, safe and satisfying ways to do things.
</p>

<p>
And surely - <i>surely</i> - if the modern UI paradigm is in fact well-established, well-researched and efficient, UI:s wouldn't change so damn much all the time.
</p>


</div></div>]]></description>
        </item>
    </channel>
</rss>