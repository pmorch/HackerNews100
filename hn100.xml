<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 03 Jul 2023 04:00:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Illegal Life Pro Tip: Want to ruin your competitors business? (193 pts)]]></title>
            <link>https://oppositeinvictus.com/illegal-life-pro-tip-want-to-ruin-your-competitors-business</link>
            <guid>36566634</guid>
            <pubDate>Sun, 02 Jul 2023 22:51:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://oppositeinvictus.com/illegal-life-pro-tip-want-to-ruin-your-competitors-business">https://oppositeinvictus.com/illegal-life-pro-tip-want-to-ruin-your-competitors-business</a>, See on <a href="https://news.ycombinator.com/item?id=36566634">Hacker News</a></p>
Couldn't get https://oppositeinvictus.com/illegal-life-pro-tip-want-to-ruin-your-competitors-business: Error: incorrect header check]]></description>
        </item>
        <item>
            <title><![CDATA[JavaScript Gom Jabbar (295 pts)]]></title>
            <link>https://frantic.im/javascript-gom-jabbar/</link>
            <guid>36564010</guid>
            <pubDate>Sun, 02 Jul 2023 18:12:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://frantic.im/javascript-gom-jabbar/">https://frantic.im/javascript-gom-jabbar/</a>, See on <a href="https://news.ycombinator.com/item?id=36564010">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
  <header>
    
    
  </header>
  <p>You have been using JavaScript for 10 years. It’s time for your test. You are sitting in front of a computer. The test is simple: you have to open a package.json file and read it. The <code>package.json</code> is full of pain. You have to read it all.</p>
<p>You look at <code>version</code>, you haven’t reached 1.0 yet. Semver causes unpleasant memories, but you’ve learned to ignore them for so long that you don’t even notice the tickling sensation in your skull.</p>
<p>You wish you used a different <code>name</code> for your package, but some random internet person has squatted that name 7 years ago and never updated their package since. It’s only mildly discomforting. Maybe the test isn’t so bad after all?</p>
<p>Both <code>main</code> and <code>browser</code> fields are present, you sense traces of Isomorphic JavaScript. In a flash, you remember requiring <code>fs</code> module from your browser bundle. These memories are very unpleasant. The hacks you had to do to make it work were even more unpleasant.</p>
<p>The <code>type</code> is set to <code>module</code>. This has something to do with the migration from <code>requires</code> to <code>imports</code>. Why do we have to care about this, again? The extensive pain you’ve experienced trying to importing ES5 modules from ESM modules and vice versa overwhelms you again.</p>
<p>You make your way to <code>scripts</code>. What a hot, painful mess it is. You can’t look at them without your heart rate going to 150. lint, lintall, lintfast, lintdiff. Parallel runs, obscure arguments, double-escaping JSON-formatted arguments. Subcommands calling npm even through you switched to yarn and then pnpm. Thousands of variations, premutations and details make you shiver. Why do these things have to be here? Why do they need to be so complicated?</p>
<p>Some scripts still use <code>watchman</code>. Gotta remember to not use symlinks because it doesn’t support them (and the issue has been open since 2015). There’s also this gulp-based script that nobody has the guts to replace with anything else that’s considered more modern. You think that there’s actually no modern version of gulp but it feels outdated and you definitely want to get rid of it. The pains spreads from your head into your neck and shoulders.</p>
<p>The pain is barely tolerable when you reach <code>dependencies</code>. So, so many of them. There’s <code>left-pad</code>, the legendary tiny package that broke all internet, collectively causing the amount of pain and drama comparable to the destruction of Alderaan.</p>
<p>Every time you modify dependency list, some of the dependencies print out screens-worth of messages to your console, asking for donations, warning about breaking changes. You gave up trying to understand these. You only hope none of them are malicious enough to steal your secrets or ruin your computer. The threat of potential pain of that magnitute is frighting.</p>
<p>There’s also moment.js. You love that library, it has a really pleasent API. But the internet decided it’s too “mutable”, too fat, it doesn’t support treeshaking and now you have to migrate to date-fns. You haven’t started yet, but you already feel the painful refactoring in your bones.</p>
<p>Looking at every package in that list causes some amount of trauma recall. But what’s even more concerning is that the version of these packages are way behind what’s considered “current”. You know that you should upgrade them. But you also have tried that before and you know how much suffering it brings. Things will break in so many ways, big and loud ways, small and subtle ways.</p>
<p>The next thing in this damn file is <code>resolutions</code>. Yes, you remember this one. It’s a suffering you choose to avoid dealing with package upgrades.</p>
<p>You scroll down to <code>devDependencies</code>. You can’t remember the time when you only needed non-dev dependencies. Why do we have this split? Yes, right, to cause more pain.</p>
<p><code>eslint</code>. Its configuration got so strict that you can’t even write code anymore. Any small misstep and you get an angry red underline. Your CI is configured to treat any lint problem as the end of the world. It gives a false sense of security to your junior engineers on the team. You survived serveral holy wars on which rules to enable. The pain is proportional to the amount of <code>eslint-ignore</code>s you have all over your codebase. There’s a lot.</p>
<p>You also notice <code>postcss</code> hiding there. This package is a mystery to you. You don’t use it directly, it’s a requirement of a dependency of a dependency. But it’s the package that’s constantly causing you pain by throwing obscure C++ compilation errors on any new platform you try to <code>npm install</code> on. If CSS itself wasn’t painful enough.</p>
<p>Oh, dear <code>jest</code>. It started as a fast test runner. But now it’s big and fat, it depends on some babel packages while the rest of your app is transpiled by a mix of esbuild and swc. Properly configuring it with ESM and TypeScript was a PhD science project.</p>
<p>You stop to count how many tools and parsers work on your codebase: TypeScript, esbuild, swc, babel, eslint, prettier, jest, webpack, rollup, terser. You are not sure if you missed any. You are not sure if you want to know. The level of pain is so high you forget about anything else.</p>
<p><code>engines</code> prominently lists <code>node</code>. And while you hate it with the depth of your soul, you are not going to Bun or Deno because you know this will not stop the pain. This will only make the pain worse.</p>
<p>It’s the end of the file now. Final closing curly brace. You close the tab and take a breath. Look around. You are still alive, your hands and your brain intact. You survived. For now.</p>

  
  






  <div>
    <p>Hello! This text lives here to convince you to subscribe. If you are reading this, consider clicking that subscribe button for more details.</p>
    <p>I write about programming, software design and side projects <a href="https://frantic.im/subscribe/" target="_blank"><svg viewBox="0 0 800 800"><path d="M493 652H392c0-134-111-244-244-244V307c189 0 345 156 345 345zm71 0c0-228-188-416-416-416V132c285 0 520 235 520 520z"></path><circle cx="219" cy="581" r="71"></circle></svg> Subscribe</a></p>
  </div>

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AMD CPU Use Among Linux Gamers Approaching 70% Marketshare (254 pts)]]></title>
            <link>https://www.phoronix.com/news/AMD-CPU-Linux-Gaming-67p</link>
            <guid>36563979</guid>
            <pubDate>Sun, 02 Jul 2023 18:09:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/news/AMD-CPU-Linux-Gaming-67p">https://www.phoronix.com/news/AMD-CPU-Linux-Gaming-67p</a>, See on <a href="https://news.ycombinator.com/item?id=36563979">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="AMD" src="https://www.phoronix.com/assets/categories/amd.webp" width="100" height="100"></p><p>
Besides being curious about the Steam Survey results for indicating the size of the Linux gaming marketshare as an overall percentage, one of the interesting metrics we are curious about each month is the AMD vs. Intel CPU marketshare for Linux gaming. AMD has been on quite an upward trajectory among Linux gamers/enthusiasts in recent years not only for their Radeon graphics cards with their popular open-source driver stack but their Ryzen CPUs have become extremely popular with Linux users. With <a href="https://www.phoronix.com/news/Steam-June-2023-Statistics">the new Steam Survey results for June</a>, AMD CPUs are found on nearly 70% of Linux gaming systems polled by Steam.
</p><p>
The June results put the AMD CPU marketshare for Linux users at 67%, a remarkable 7% increase month-over-month. In part that's due to the Steam Deck being powered by an AMD SoC but it's been a trend building for some time of AMD's increasing Ryzen CPU popularity among Linux users to their open-source driver work and continuing to build more good will with the community.
</p><p><img src="https://www.phoronix.net/image.php?id=2023&amp;image=steam_june_4"></p>
<p>In comparison, last June the AMD CPU Linux gaming marketshare <a href="https://www.phoronix.com/news/Steam-Linux-June-2022">came in at 45%</a> while Intel was at 54%. Or at the start of 2023, <a href="https://www.phoronix.com/news/Steam-Survey-January-2023">AMD CPUs were at a 55% marketshare</a> among Linux gamers. Or if going back six years, <a href="https://www.phoronix.com/news/Steam-Survey-July-2017">AMD CPU use among Linux gamers was a mere 18%</a> during the early Ryzen days.
</p><p><img src="https://www.phoronix.net/image.php?id=2023&amp;image=windows_cpu_gamers_june" alt="Windows CPU stats for June"></p>
<p>It's also the direct opposite on the Windows side. When looking at the Steam Survey results for June limited to Windows, there Intel has a 68% marketshare to AMD at 32%.
</p><p><a href="https://www.phoronix.com/image-viewer.php?id=2023&amp;image=amd_gaming_cpus_june_lrg" target="_blank"><img src="https://www.phoronix.net/image.php?id=2023&amp;image=amd_gaming_cpus_june_med" alt="AMD Ryzen boxes, cheers"></a></p>
<p>Beyond the Steam Deck, it's looking like AMD's efforts around open-source drivers, <a href="https://www.phoronix.com/news/Dell-Mario-On-AMD-Linux-Team">AMD expanding their Linux client (Ryzen) development efforts</a> over the past two years, promises around <a href="https://www.phoronix.com/search/OpenSIL">OpenSIL</a>, and other efforts commonly covered on Phoronix are paying off for AMD in wooing over their Linux gaming customer base.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Chinese Tech Terms Explained in English (150 pts)]]></title>
            <link>https://16x.engineer/2022/10/18/chinese-tech-terms.html</link>
            <guid>36563956</guid>
            <pubDate>Sun, 02 Jul 2023 18:06:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://16x.engineer/2022/10/18/chinese-tech-terms.html">https://16x.engineer/2022/10/18/chinese-tech-terms.html</a>, See on <a href="https://news.ycombinator.com/item?id=36563956">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
            <p>
              Chinese tech companies like ByteDance and Tencent are setting up
              engineering offices outside China. Local hires in these global
              offices are becoming a norm.
            </p>
            <p>
              These locally hired engineers typically have limited Chinese
              language proficiency. It is a challenge for them to understand the
              Chinese tech terms used in their daily work, and to communicate
              with their Chinese colleagues.
            </p>
            <p>
              Here are 5 common Chinese tech terms, along with explanations and
              examples of usage in a sentence.
            </p>
            <h2 id="huidu">Huidu</h2>
            <blockquote>
              <p>灰度 <span>huī dù</span></p>
            </blockquote>
            <p>
              <img src="https://16x.engineer/public/post-images/optimized/chinese-huidu.webp" alt="Huidu in English example screenshot">
            </p>
            <p>
              Huidu is a widely used Chinese technical term in companies like
              Tencent and Alibaba. Huidu means rolling out experimental new
              features to a small subset of users for testing.
            </p>
            <p>
              The implication of huidu is that the new feature may be launched
              officially (at a later date), or scrapped if it did not have the
              desired outcome.
            </p>
            <h2 id="huidu-in-english">Huidu in English</h2>
            <p>
              The literal translation of huidu is “grayscale”. Intuitively,
              huidu represents the transition state between black and white.
            </p>
            <p>
              Note that huidu can be used to describe product features,
              functionalities, or code deployment.
            </p>
            <p>
              When describing a product feature, the close equivalent would be
              <strong>beta release</strong> or
              <strong>phased rollout</strong> in English.
            </p>
            <p>
              When used for describe code deployment,
              <strong>canary release</strong> is also an accurate translation.
            </p>
            <h2 id="examples-of-huidu-in-a-sentence">
              Examples of huidu in a sentence
            </h2>
            <ul>
              <li>
                <p>
                  <em>WeChat is <strong>huidu</strong> testing a new feature that
                    allows users to register an additional WeChat account with
                    an existing phone number.</em>
                </p>
              </li>
              <li>
                <p>
                  <em>Lenovo started <strong>huiduing</strong> new version of
                    operating system for its tablets.</em>
                </p>
              </li>
            </ul>
            <h2 id="lunzi">Lunzi</h2>
            <blockquote><p>轮子 lún zi</p></blockquote>
            <p>
              <img src="https://16x.engineer/public/post-images/optimized/chinese-lunzi.webp" alt="Lunzi in English example screenshot">
            </p>
            <p>
              Lunzi describes tools, libraries or frameworks that have been
              invented or reinvented multiple times.
            </p>
            <p>
              Typically it is used for new things that are created to solve a
              specific problem, but bear resemblance to something existing.
            </p>
            <h2 id="lunzi-in-english">Lunzi in English</h2>
            <p>
              The literal translation for lunzi is “wheel”, and the origin of
              the word is likely from the English phrase “reinvent the wheel”.
            </p>
            <p>
              Despite the apparent origin from English, lunzi as a word has no
              equivalent translation in English.
            </p>
            <p>
              The literal translation “<strong>wheel</strong>” might be the best
              candidate.
            </p>
            <h2 id="example-of-lunzi-in-a-sentence">
              Example of lunzi in a sentence
            </h2>
            <ul>
              <li>
                <p>
                  <em>Engineers need create <strong>lunzi</strong> to fulfill
                    KPIs or get promoted.</em>
                </p>
              </li>
              <li>
                <p>
                  <em><strong>Lunzi</strong> created by others do not fulfil our
                    specific needs.</em>
                </p>
              </li>
            </ul>
            <h2 id="chendian">Chendian</h2>
            <blockquote><p>沉淀 chén diàn</p></blockquote>
            <p>
              <img src="https://16x.engineer/public/post-images/optimized/chinese-chendian.webp" alt="Chendian in English example screenshot">
            </p>
            <p>
              Chendian is not a technical term, but it is commonly used in
              Chinese tech companies. It means consolidating learnings from past
              experience.
            </p>
            <p>
              It also implies coming up with a systematic solution to a
              recurring problem.
            </p>
            <h2 id="chendian-in-english">Chendian in English</h2>
            <p>
              The literal translation for chendian is “chemical precipitation”,
              drawing from the intuition that things are consolidated from
              liquid form to solid state.
            </p>
            <p>
              At the beginning, things are messy and fluid. But as you learn and
              progress, they because more clear and structured.
            </p>
            <p>
              There seems to be no equivalent term in English to describe this
              concept.
            </p>
            <h2 id="example-of-chendian-in-a-sentence">
              Example of chendian in a sentence
            </h2>
            <ul>
              <li>
                <p>
                  <em>Team lead has some expectations for new interns, such as
                    critical thinking, <strong>chendian</strong> and knowledge
                    sharing.</em>
                </p>
              </li>
              <li>
                <p>
                  <em>Our team managed to <strong>chendian</strong> tools and
                    organizational capabilities from the double 11 sale.</em>
                </p>
              </li>
            </ul>
            <h2 id="dapan">Dapan</h2>
            <blockquote><p>大盘 dà pán</p></blockquote>
            <p>
              <img src="https://16x.engineer/public/post-images/optimized/chinese-dapan.webp" alt="Dapan in English example screenshot">
            </p>
            <p>
              In Chinese tech companies, dapan is used to describe dashboards
              with various charts, where you can monitor key system metrics or
              business metrics in real time.
            </p>
            <p>
              It is especially important for e-commerce companies like Alibaba
              and JD who run big sales events like double 11.
            </p>
            <h2 id="dapan-in-english">Dapan in English</h2>
            <p>
              Dapan originally refers to the big screens in stock exchanges
              showing market data.
            </p>
            <p>
              The close equivalent of dapan in English would be “<strong>monitoring dashboard</strong>”.
            </p>
            <h2 id="examples-of-dapan-in-a-sentence">
              Examples of dapan in a sentence
            </h2>
            <ul>
              <li>
                <p>
                  <em>Remember to monitor <strong>dapan</strong> closely when
                    performing production deployment.</em>
                </p>
              </li>
              <li>
                <p>
                  <em>Popular <strong>dapan</strong> products usually come with
                    WYSIWYG editors.</em>
                </p>
              </li>
            </ul>
            <h2 id="maidian">Maidian</h2>
            <blockquote>
              <p>埋点 <span>mái diǎn</span></p>
            </blockquote>
            <p>
              <img src="https://16x.engineer/public/post-images/optimized/chinese-maidian.webp" alt="Maidian in English example screenshot">
            </p>
            <p>
              In Chinese companies, maidian refers to embedding of tracking code
              to monitor and analyse user behaviour.
            </p>
            <p>
              This is typically required by product and data analytics teams,
              and the tracking code is embedded in the product by front-end
              engineers.
            </p>
            <h2 id="maidian-in-english">Maidian in English</h2>
            <p>
              As individual characters, “mai” means burying, and “dian” means
              points. The phrase “maidian” literally means “embedding points” or
              “burying seeds”.
            </p>
            <p>
              The intuition is that by “embedding” the “seed” in the product,
              the user journey can be mapped out later.
            </p>
            <p>
              It can be translated into <strong>tracking</strong>,
              <strong>tagging</strong> or
              <strong>user data analytics</strong> depending on the context.
            </p>
            <h2 id="examples-of-maidian-in-a-sentence">
              Examples of maidian in a sentence
            </h2>
            <ul>
              <li>
                <p>
                  <em>Data analytics team need to design a rigorous
                    <strong>maidian</strong> system and produce
                    <strong>maidian</strong> document to support subsequent user
                    behaviour analysis.</em>
                </p>
              </li>
              <li>
                <p>
                  <em>The cost of <strong>maidian</strong> is high because every
                    widget with user interactions needs to embed
                    <strong>maidian</strong> code.</em>
                </p>
              </li>
            </ul>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Economic inequality cannot be explained by individual bad choices, study finds (128 pts)]]></title>
            <link>https://phys.org/news/2023-06-economic-inequality-individual-bad-choices.html</link>
            <guid>36563815</guid>
            <pubDate>Sun, 02 Jul 2023 17:53:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://phys.org/news/2023-06-economic-inequality-individual-bad-choices.html">https://phys.org/news/2023-06-economic-inequality-individual-bad-choices.html</a>, See on <a href="https://news.ycombinator.com/item?id=36563815">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
										
<div data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2023/economic-inequality-ca.jpg" data-src="https://scx2.b-cdn.net/gfx/news/2023/economic-inequality-ca.jpg" data-sub-html="Correlation between ten biases within 3346 participants showed each bias was largely unique and not collinear with other biases assessed, with the exception of overplacement&nbsp;and overestimation (which rely on the presence of some biases). Credit: <i>Scientific Reports</i> (2023). DOI: 10.1038/s41598-023-36339-2">
        <figure>
            <img src="https://scx1.b-cdn.net/csz/news/800a/2023/economic-inequality-ca.jpg" alt="Economic inequality cannot be explained by individual bad choices" title="Correlation between ten biases within 3346 participants showed each bias was largely unique and not collinear with other biases assessed, with the exception of overplacement&nbsp;and overestimation (which rely on the presence of some biases). Credit: Scientific Reports (2023). DOI: 10.1038/s41598-023-36339-2" width="685" height="530">
             <figcaption>
                Correlation between ten biases within 3346 participants showed each bias was largely unique and not collinear with other biases assessed, with the exception of overplacement&nbsp;and overestimation (which rely on the presence of some biases). Credit: <i>Scientific Reports</i> (2023). DOI: 10.1038/s41598-023-36339-2
            </figcaption>        </figure>
    </div>
<p>A global study led by a researcher at Columbia University Mailman School of Public Health and published in the journal <i>Scientific Reports</i> finds that economic inequality on a social level cannot be explained by bad choices among the poor nor by good decisions among the rich. Poor decisions were the same across all income groups, including for people who have overcome poverty.

										  
											        </p>
										 
										 											  
<p>While <a href="https://phys.org/tags/economic+inequality/" rel="tag">economic inequality</a> continues to rise within countries, efforts to address it have been largely ineffective, particularly those involving behavioral approaches. It has been often implied, but until now not tested, that choice patterns among low-income individuals may be a factor impeding behavioral interventions aimed at improving upward economic mobility.
</p><p>The study is based on online surveys in 22 languages with close to 5,000 participants from 27 countries in Asia, Europe, North America, and South America. Decision-making ability was measured through 10 individual biases, including (1) temporal discounting, not preferring immediate funds over larger future gains; (2) overestimation, or thinking you are better than you are at making decisions; (3) over-placement, or thinking you are better than the <a href="https://phys.org/tags/average+person/" rel="tag">average person</a> at making decisions; and (4) extremeness aversion, or taking the "middle option" simply because it seems safer than the highest or lowest.
</p><p>Taken along with <a href="https://phys.org/news/2022-07-economic-inequality-instability-impacts-long-term.html">related work</a> showing that temporal discounting is tied more to the broader societal economic environment rather than individual financial circumstances, the new findings are a major validation of arguments stating that poorer individuals are not uniquely prone to <a href="https://phys.org/tags/cognitive+biases/" rel="tag">cognitive biases</a> that alone explain protracted poverty.
</p><p>"Our research does not reject the notion that individual behavior and decision-making may directly relate to upward economic mobility. Instead, we narrowly conclude that biased decision-making does not alone explain a significant proportion of population-level economic inequality," says first author Kai Ruggeri, Ph.D., assistant professor in the Department of Health Policy and Management at Columbia Public Health.
</p><p>"Low-income individuals are not uniquely prone to cognitive biases linked to bad financial decisions. Instead, scarcity is more likely a greater driver of these decisions," Ruggeri adds.
										 																				
																				</p><div>
																						<p><strong>More information:</strong>
												Kai Ruggeri et al, The persistence of cognitive biases in financial decisions across economic groups, <i>Scientific Reports</i> (2023).  <a data-doi="1" href="https://dx.doi.org/10.1038/s41598-023-36339-2" target="_blank">DOI: 10.1038/s41598-023-36339-2</a>
																						
																						</p>
																					</div>
                               											
																					
                              										                                        
										<!-- print only -->
										<div>
											 <p><strong>Citation</strong>:
												Economic inequality cannot be explained by individual bad choices, study finds (2023, June 29)
												retrieved 2 July 2023
												from https://phys.org/news/2023-06-economic-inequality-individual-bad-choices.html
											 </p>
											 <p>
											 This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no
											 part may be reproduced without the written permission. The content is provided for information purposes only.
											 </p>
										</div>
                                        
									</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[First 'tooth regrowth' medicine moves toward clinical trials in Japan (634 pts)]]></title>
            <link>https://mainichi.jp/english/articles/20230609/p2a/00m/0sc/026000c</link>
            <guid>36563590</guid>
            <pubDate>Sun, 02 Jul 2023 17:33:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mainichi.jp/english/articles/20230609/p2a/00m/0sc/026000c">https://mainichi.jp/english/articles/20230609/p2a/00m/0sc/026000c</a>, See on <a href="https://news.ycombinator.com/item?id=36563590">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<!-- cxenseparse_start -->

<div>
<figure>
<div>
<a data-href="https://cdn.mainichi.jp/vol1/2023/06/09/20230609p2a00m0na021000p/9.jpg?1" data-lightbox="photos" data-title="(Getty)">
<span>
<img src="https://cdn.mainichi.jp/vol1/2023/06/09/20230609p2a00m0na021000p/6.jpg?1" alt="">

</span>

</a>
</div>
<figcaption>(Getty)</figcaption>
</figure>
</div>

<div>
<figure>
<div>
<a data-href="https://cdn.mainichi.jp/vol1/2023/06/09/20230609p2a00m0na022000p/9.jpg?1" data-lightbox="photos" data-title="Katsu Takahashi, head of the dentistry and oral surgery department at the Medical Research Institute Kitano Hospital, is seen in the city of Osaka's Kita Ward on May 16, 2023. (Mainichi/Mirai Nagira)">
<span>
<img src="https://cdn.mainichi.jp/vol1/2023/06/09/20230609p2a00m0na022000p/7.jpg?1" alt="">

</span>

</a>
</div>
<figcaption>Katsu Takahashi, head of the dentistry and oral surgery department at the Medical Research Institute Kitano Hospital, is seen in the city of Osaka's Kita Ward on May 16, 2023. (Mainichi/Mirai Nagira)</figcaption>
</figure>
</div>
<p>
    TOKYO -- A Japanese research team is making progress on the development of a groundbreaking medication that may allow people to grow new teeth, with clinical trials set to begin in July 2024.
</p>
<!-- cxenseparse_end -->

<!-- cxenseparse_start -->
<p>
    The tooth regrowth medicine is intended for people who lack a full set of adult teeth due to congenital factors. The team is aiming to have it ready for general use in 2030.
</p>
<p>
    In prior animal experiments, the medicine prompted the growth of "third-generation" teeth following baby teeth and then permanent adult teeth.
</p>
<p>
    "The idea of growing new teeth is every dentist's dream. I've been working on this since I was a graduate student. I was confident I'd be able to make it happen," said Katsu Takahashi, lead researcher and head of the dentistry and oral surgery department at the Medical Research Institute Kitano Hospital in the city of Osaka.
</p>

<div>
<figure>
<div>
<a data-href="https://cdn.mainichi.jp/vol1/2023/06/09/20230609p2a00m0na023000p/7.jpg?1" data-lightbox="photos" data-title="A new tooth is seen growing in a mouse treated with the tooth regrowth medicine. (Photo provided by Katsu Takahashi, head of the dentistry and oral surgery department at the Medical Research Institute Kitano Hospital)">
<span>
<img src="https://cdn.mainichi.jp/vol1/2023/06/09/20230609p2a00m0na023000p/6.jpg?1" alt="">

</span>

</a>
</div>
<figcaption>A new tooth is seen growing in a mouse treated with the tooth regrowth medicine. (Photo provided by Katsu Takahashi, head of the dentistry and oral surgery department at the Medical Research Institute Kitano Hospital)</figcaption>
</figure>
</div>
<p>
    Anodontia is a congenital condition that causes the growth of fewer than a full set of teeth, present in around 1% of the population. Genetic factors are thought to be the major cause for the one-tenth of anodontia patients who lack six or more teeth, a condition categorized as oligodontia. These conditions are also known as tooth agenesis. People who grow up with tooth agenesis struggle with basic abilities like chewing, swallowing and speaking from a young age, which can negatively impact their development.
</p>
<p>
    After completing a dentistry degree, Takahashi went on to graduate studies in molecular biology at Kyoto University in 1991. Afterwards, he studied in the U.S.
</p>
<p>
    Around that time, research around the world had begun to pinpoint genes that, when deleted, would cause genetically modified mice to grow fewer teeth. "The number of teeth varied through the mutation of just one gene. If we make that the target of our research, there should be a way to change the number of teeth (people have)," Takahashi said of his thoughts at the time.
</p>
<p>
    <b>Global attention</b>
</p>

<div>
<figure>
<div>
<a data-href="https://cdn.mainichi.jp/vol1/2023/06/09/20230609p2a00m0na024000p/6.jpg?1" data-lightbox="photos" data-title="The front teeth of a ferret treated with tooth regrowth medicine are seen in a photo provided by Katsu Takahashi, head of the dentistry and oral surgery department at the Medical Research Institute Kitano Hospital. The medicine induced the growth of an additional seventh tooth (center).">
<span>
<img src="https://cdn.mainichi.jp/vol1/2023/06/09/20230609p2a00m0na024000p/6.jpg?1" alt="">

</span>

</a>
</div>
<figcaption>The front teeth of a ferret treated with tooth regrowth medicine are seen in a photo provided by Katsu Takahashi, head of the dentistry and oral surgery department at the Medical Research Institute Kitano Hospital. The medicine induced the growth of an additional seventh tooth (center).</figcaption>
</figure>
</div>
<p>
    It was around 2005, when he delved further into the subject at Kyoto University after returning to Japan, that he began to see a bright path for his continued research. The researchers found that mice lacking a certain gene had an increased number of teeth. A protein called USAG-1, synthesized by the gene, was found to limit the growth of teeth. In other words, blocking the action of that protein could allow more teeth to grow.
</p>
<p>
    Takahashi's research team narrowed their focus onto USAG-1, and developed a neutralizing antibody medicine able to block the protein's function. In experiments in 2018, mice with a congenitally low number of teeth were given medicine that resulted in new teeth coming through. The research results were published in a U.S. scientific paper in 2021, and gained much attention as the beginnings of the world's first tooth regeneration medicine.
</p>
<p>
    Work is now underway to get the drug ready for human use. Once confirmed to have no ill effects on the human body, it will be aimed at treating children aged 2 to 6 who exhibit anodontia. "We hope to pave the way for the medicine's clinical use," Takahashi said.
</p>
<p>
    <b> Medicine could be game-changer</b>
</p>
<p>
    If successful, a drug to regenerate teeth may be a game-changer for the entire field of dentistry.
</p>
<p>
    Animals including sharks and some reptile species can continuously regrow teeth. It's been assumed that humans only grow two sets of teeth in their lifetime, but in fact, there is evidence that we also have the "buds" for a third set.
</p>
<p>
    Around 1% of the population exhibits the converse of anodontia: hyperdontia, a congenital condition causing a higher-than-normal number of teeth. According to research by Takahashi's team, one in three such cases manifests as the growth of a third set of teeth. Takahashi believes that in most cases, humans' ability to grow a third set was lost over time.
</p>
<p>
    When the researchers applied the drug to ferrets, they grew an additional seventh front tooth. As the new teeth grew in between the existing front teeth and were of the same shape, the medicine is thought to have induced the generation of third-set teeth in the animals.
</p>
<p>
    When treatment of teeth is no longer possible due to severe cavities or erosion of the dental sockets, known as pyorrhea, people lose them and need to rely on dental appliances such as dentures. The ability to grow third-generation teeth could change that. "In any case, we're hoping to see a time when tooth-regrowth medicine is a third choice alongside dentures and implants," Takahashi said.
</p>
<p>
    For further information or inquiries about Takahashi's research, please visit https://www.kitano-hp.or.jp/toothreg/ (in Japanese).
</p>
<p>
    (Japanese original by Mirai Nagira, Science &amp; Environment News Department)
</p>
<!-- cxenseparse_end -->

<!--| tools BGN |-->

<!--| tools END |-->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Are You Sure You Want to Use MMAP in Your Database Management System? (2022) (136 pts)]]></title>
            <link>https://db.cs.cmu.edu/mmap-cidr2022/</link>
            <guid>36563187</guid>
            <pubDate>Sun, 02 Jul 2023 16:48:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://db.cs.cmu.edu/mmap-cidr2022/">https://db.cs.cmu.edu/mmap-cidr2022/</a>, See on <a href="https://news.ycombinator.com/item?id=36563187">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>
                <i>Memory-mapped</i> (<tt>MMAP</tt>) file I/O is an OS-provided feature that
                maps the contents of a file on secondary storage into a program’s
                address space. The program then accesses pages via pointers as if
                the file resided entirely in memory. The OS transparently loads
                pages only when the program references them and automatically evicts
                pages if memory fills up.
            </p>
            <p>
                <tt>MMAP</tt>‘s perceived ease of use has seduced <i>database management system</i>
                (DBMS) developers for decades as a viable alternative to
                implementing a buffer pool. There are, however, severe correctness
                and performance issues with <tt>MMAP</tt> that are not immediately apparent.
                Such problems make it difficult, if not impossible, to use <tt>MMAP</tt>
                correctly and efficiently in a modern DBMS. In fact, several popular
                DBMSs initially used <tt>MMAP</tt> to support larger-than-memory databases
                but soon encountered these hidden perils, forcing them to switch to
                managing file I/O themselves after significant engineering costs.
            </p>
            <p>
                In this way, <tt>MMAP</tt> and DBMSs are like coffee and spicy food: an
                unfortunate combination that becomes obvious after the fact.
            </p>
            <p>
                Since developers keep trying to use <tt>MMAP</tt> in new DBMSs, we wrote this
                paper to provide a warning to others that <tt>MMAP</tt> is not a suitable
                replacement for a traditional buffer pool. We discuss the main
                shortcomings of <tt>MMAP</tt> in detail, and our experimental analysis
                demonstrates clear performance limitations. Based on these findings,
                we conclude with a prescription for when DBMS developers might
                consider using <tt>MMAP</tt> for file I/O.
            </p>
            <p><small><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"> <path d="M14.5.5a.5.5 0 0 0-1 0V2H1a1 1 0 0 0-1 1v2h16V3a1 1 0 0 0-1-1h-.5V.5ZM2.5 4a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm2 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm7.5-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm1.5.5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1Zm-7-1h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1Zm-2 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm.5-1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm6.5 1.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm0-1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z"></path> <path d="M16 6H0v8a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V6ZM4.5 13a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5Zm7 0a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5Z"></path> </svg> Recommended Music for this Paper:<br><a href="https://youtu.be/JW8mwaw2-xc" target="_youtube" rel="noopener">Dr. Dre – High Powered (featuring RBX)</a></small></p>
          </div><div>
                <h3>Citation</h3>
                <pre>@inproceedings{crotty22-mmap💩,
  author = {Crotty, Andrew and Leis, Viktor and Pavlo, Andrew},
  title = {Are You Sure You Want to Use MMAP in Your Database Management System?},
  booktitle = {{CIDR} 2022, Conference on Innovative Data Systems Research},
  year = {2022},
}</pre>
            </div><div>
            <h3>Acknowledgments</h3>
            <p>
                This paper is the culmination of an unhealthy, years-long obsession with the idea of developers incorrectly using mmap in their DBMSs. The authors would like to thank everyone who contributed and provided helpful feedback: <a href="https://lcy.im/">Chenyao Lou</a> (PKU), <a href="https://en.wikipedia.org/wiki/File:David_Andersen_-_Professor_Street_Urchin.jpg">David “Greasy” Andersen</a> (CMU), <a href="https://www.cs.cmu.edu/~kaminsky/">Michael Kaminsky</a> (BrdgAI), <a href="https://db.in.tum.de/~neumann/">Thomas Neumann</a> (TUM), <a href="https://osg.tuhh.de/People/dietrich/">Christian Dietrich</a> (TUHH), <a href="https://www.linkedin.com/in/toddlipcon/">Todd Lipcon</a> (<a href="https://lipcon.org/">lipcon.org</a>), and <a href="https://people.ece.ubc.ca/sasha/">Sasha Fedorova</a> (UBC).
            </p>
            <p>
                This work was supported (in part) by the NSF (<a href="http://www.nsf.gov/awardsearch/showAward?AWD_ID=1846158">IIS-1846158</a>, <a href="http://www.nsf.gov/awardsearch/showAward?AWD_ID=1423210">III-1423210</a>, <a href="http://www.nsf.gov/awardsearch/showAward?AWD_ID=1252522">DGE-1252522</a>), research grants from Google and Snowflake, and the <a href="https://sloan.org/grant-detail/8638">Alfred P. Sloan Research Fellowship</a> program.
            </p>
            
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What Do We Owe Our Teams? (104 pts)]]></title>
            <link>https://www.mironov.com/owe/</link>
            <guid>36562868</guid>
            <pubDate>Sun, 02 Jul 2023 16:15:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.mironov.com/owe/">https://www.mironov.com/owe/</a>, See on <a href="https://news.ycombinator.com/item?id=36562868">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
          <div>
            
            <p>Many of my discussions with product leaders (CPOs, VPs and others who manage teams of product folks) are about the substance of product management: portfolios, competing stakeholders, pricing &amp; packaging, tarot cards as a revenue forecasting model. &nbsp;Last week, though, in my <a href="https://maven.com/richmironov/pmleaders/?ref=mironov.com">product leadership workshop</a>, we had an extended discussion about the <strong>core people-and-organizational obligations we have toward those who work for us</strong>.<br>(If you’re running some other department, these should sound familiar.)</p><h2 id="1-be-umbrellas-not-funnels">1. &nbsp;Be Umbrellas, Not Funnels</h2><p>Companies, especially executive teams, can generate a lot of chaos: “<a href="https://www.mironov.com/cake/">small</a>” interrupts, sudden shifts, cross-functional blame, budget jousting. &nbsp;In the colorful MBA vernacular, we’re either <a href="https://www.urbandictionary.com/define.php?term=Shit+Umbrella&amp;ref=mironov.com">poop umbrellas</a> or poop funnels: buffering our teams from the noise and confusion as best we can, or letting it all fall on their heads.</p><p>Umbrella-wielding is a skill: anticipating politics; de-escalating &nbsp;drama; being ready with in-the-moment analysis and insights about whether a problem is actually important; articulating which department is best equipped to handle today’s small crisis; practicing organizational <em>jiu jitsu</em>.</p><p>Examples:</p><ul><li>A Fortune 50 financial company light-years away from our core manufacturing market expresses interest. &nbsp;Sales (inevitably) wants to expand our European SMB tech manufacturing <a href="https://www.portent.com/blog/cro/ideal-customer-profiles-beginners-guide.htm?ref=mironov.com">ICP</a> to include US-based global banks. Product fit will probably be catastrophic. &nbsp;This requires a quick-but-urgent review of the opportunity with Product and Engineering before it’s committed to the revenue pipeline.</li><li>Our CEO thinks that a new product manager is doing a poor job because her product has falling revenue and poor customer feedback. &nbsp;But she’s newly assigned to a decrepit old widget that’s in a shrinking segment and hasn’t been maintained for years. &nbsp;In your opinion, she’s very talented and just inherited a mess. &nbsp;Best to walk back the CEO’s misimpression quickly, before the discussion turns to firings.</li><li>A competitor announces ChatGPT-based retirement investment advice. &nbsp;<em>(Probably doesn't work yet, or gives generically bad advice 100x faster than humans.) </em> With generative AI at the very top of its hype cycle, the Board wants a 90-day meet-the-competition development plan, and says they are willing to sacrifice everything on the roadmap to staff it. &nbsp;You’ll need to spend some political capital to slow this down just a little – then sell the idea of a prototype, so we can find out whether it makes any sense.</li></ul><p>Also, when there’s a hot issue with unclear ownership, &nbsp;we don’t throw our subordinates under the bus. &nbsp;So <a href="https://www.mironov.com/pronouns/">pronouns</a> matter: “<em><strong>I </strong></em>think this tax calculation issue crosses products and departments: give <em><strong>me</strong></em> a day to chase down which group can fix it” is much better than “Sandeep screwed up again – let me pull <em><strong>him</strong></em> into the meeting” or “those losers in BizOps were supposed to keep the pricing database 100% accurate.”</p><h2 id="2-merchandize-good-work">2. &nbsp;Merchandize Good Work</h2><p>People who are invisible – or whose work is invisible – miss out on raises and promotions and invitations to do cool stuff. &nbsp;And most of the good things our product (and engineering and design and research and documentation and test automation and support) teams do isn’t very visible. &nbsp;So it’s incumbent on us as leaders to gently – but relentlessly – <a href="https://www.mironov.com/merchandizing/">merchandize</a> our teams’ good work and accomplishments and business-relevant wins.</p><ul><li>If we’ve fixed some poor UX in our sign-up funnel, consider a 90-second video where the product manager introduces the problem, the designer who fixed it <a href="https://www.mironov.com/show-tell/">shows</a> a brief before-and-after, and the product manager recaps with outcome/impact. <em> (“1.1% higher top-of-funnel conversion means $3-4M more per quarter in top-line revenue.”)</em></li><li>Shortening onboarding time/effort lets us add more customers faster, at lower cost. &nbsp;Maybe in our monthly All-Hands we call out the Customer Success person who suggested the fix, the content creator whose “onboard yourself faster” checklist sped up onboarding by 11%, and the product manager overseeing new customer tools.</li><li>I love having my teams identify unappreciated heroes in other departments, so I can <a href="https://www.mironov.com/ty/">send their VPs a thank-you note</a> on behalf of Product. &nbsp;Recognizing good work can be habit-forming.</li></ul><p>BTW, there’s a reverse halo effect here. &nbsp;If my extended team is seen as successful and hardworking and smart, I get some of the reflected glow. &nbsp;Other leaders give us the benefit of the doubt, and talented folks want to move into our group.</p><h2 id="3-provide-honest-career-pathing">3. Provide Honest Career Pathing</h2><p>At scale, product managers might be 2-3% of a company’s employees. &nbsp;The role is vaguely defined, challenging, and demands an unusual mix of skills. People come in all shapes, sizes, styles, and talents – that mostly fit <em><strong>other</strong></em> roles. So we owe our team gentle-but-clear-and-frequent communication about how they are doing and where we see them going next. &nbsp;(When I’ve parachuted into companies as interim CPO, my first order of business has been to quickly evaluate the team I’ve inherited.) &nbsp;Examples:</p><ul><li>Someone<strong> green but smart, humble, curious, and coachable</strong>... we might map out 4-6 areas for intense mentoring through the year. &nbsp;Talk through the theory of <a href="https://www.mironov.com/moneystories/">thumbnail business cases</a>, work the first 3 or 4 together with lots of coaching, then move down the skills list.</li><li>A <strong>deeply opinionated subject expert </strong>with visible disdain for average users will focus on rarely used expert features and tend to ignore opinions from the bottom 95% of customers. &nbsp;Maybe an evangelist or implementation architect role is a better match: worth a frank talk about fit and attitudes and where to make the biggest contributions to the company.</li><li>A<strong> product veteran</strong> who is effortlessly juggling a maker team, represents product management on a strategy task force, and coaches the newbies may need a bigger challenge. &nbsp;Are there open slots for directors? &nbsp;Can we create one? Is there a juicy assignment coming up? &nbsp;A win for the company even if they move out of my team.</li></ul><h2 id="4-play-the-long-game">4. Play the Long Game</h2><p>The half-life of any particular job is short, and most companies don’t last. &nbsp;So the great people we nurture will eventually be somewhere else. &nbsp;In the long game, we’re investing in the larger product community and relationships that span years and organizations. &nbsp;Ideally, you have a portfolio of trusted peers<em> (for moral support, shared challenges)</em> and a few mentors <em>(for career advice, realistic POV)</em> and up-and-comers <em>(<a href="https://www.mironov.com/pif/">paying it forward</a>)</em>. &nbsp;As we move up through organizations, our informal external networks get more and more valuable. &nbsp;</p><p>Which raises a “what do we owe them” quandary: what if your best player signals that she wants to leave? &nbsp;I see competing obligations to my company <em>(keep the best talent)</em> and myself <em>(run a strong department)</em> and to her <em>(support new opportunities and challenges)</em>. &nbsp;It might go this way:</p><ul><li>First, an honest closed-door conversation about her real concerns or goals. &nbsp;Is she unhappy with the company? &nbsp;Frustrated by my management style? Needing flexibility or some recharge/refresh time? &nbsp;Bored and ready to move onto greener pastures? &nbsp;Different issues, different answers. &nbsp;(As product folks, we should never offer solutions until we’re clear on the underlying problem.)</li><li>If there are some reasonable solutions or accommodations, explore and sell them – but don’t oversell or promise something you can’t deliver. &nbsp;Product folks have pretty good BS detectors. &nbsp;I’d rather have her be my peer or lead a peer organization in my company than lose her.</li><li>But if not, I usually feel the obligation to help her reach/find her next adventure. &nbsp;<strong>To play the long game.</strong> &nbsp;To continue being a coach/mentor outside the company. &nbsp;To value the person, not just the work. &nbsp;That might include <a href="https://www.mironov.com/exiting/">talking about outside opportunities, exit timelines and career implications</a>; being a (quiet, careful) job reference; voicing honest opinions about trends or industries; sharing contacts at a few non-competing companies; offering to be a sounding board for her inevitable next challenges.</li></ul><p>If we cherish our people as much as our products and end users, we should be supporting their goals and dreams as much as our own.</p><h2 id="sound-byte">Sound Byte</h2><p>Leading an organization and managing people carries a substantial responsibility to those who work for us. &nbsp; We need to support and protect them so that they can do their best work; build recognition for them; and help them look ahead to what’s next. &nbsp;Not that different from building a product or <a href="https://www.mironov.com/parenting_and_pm/">raising a child</a>.</p>
          </div>
        </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Make Your Renders Unnecessarily Complicated by Modeling a Film Camera in Blender [video] (220 pts)]]></title>
            <link>https://www.youtube.com/watch?v=YE9rEQAGpLw</link>
            <guid>36562757</guid>
            <pubDate>Sun, 02 Jul 2023 16:03:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=YE9rEQAGpLw">https://www.youtube.com/watch?v=YE9rEQAGpLw</a>, See on <a href="https://news.ycombinator.com/item?id=36562757">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Aspartame: Once More Unto the Breach (164 pts)]]></title>
            <link>https://dynomight.net/aspartame/</link>
            <guid>36562739</guid>
            <pubDate>Sun, 02 Jul 2023 16:02:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dynomight.net/aspartame/">https://dynomight.net/aspartame/</a>, See on <a href="https://news.ycombinator.com/item?id=36562739">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <p>Look, I get it. Diet Coke tastes sweet because it has aspartame in it. Aspartame is a weird synthetic molecule that’s 200 times sweeter than sucrose. Half of the world’s aspartame is made by Ajinomoto of Tokyo—the same company that first brought us MSG back in 1909.</p>

<p><img src="https://dynomight.net/img/aspartame/ajinomoto-headquarters.jpg" alt="ajinomoto headquarters"></p>

<p>If you look on <a href="https://en.wikipedia.org/wiki/Aspartame">Wikipedia</a>, you’ll see that aspartame is a <em>methyl ester of the aspartic acid phenylalanine dipeptide</em>, which isn’t, like, comforting.</p>

<p>It’s normal to have a prior that aspartame might be bad for you. Certainly, that was <em>my</em> prior. Without looking at any evidence, any reasonable person would think like this:</p>

<table>
  <thead>
    <tr>
      <th>aspartame is…</th>
      <th>odds</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>…good for you</td>
      <td>very unlikely</td>
    </tr>
    <tr>
      <td>…harmless</td>
      <td>plausible</td>
    </tr>
    <tr>
      <td>…bad for you</td>
      <td>plausible</td>
    </tr>
  </tbody>
</table>

<p>This makes the decision theory pretty simple: Consuming aspartame has little upside, but substantial downside.</p>

<p>The thing is, we do have evidence. We have a lot of evidence. The FDA calls aspartame “one of the most exhaustively studied substances in the human food supply”.</p>

<p>The other thing is, the alternative to aspartame often isn’t <em>no aspartame</em> but rather <em>sugar</em> or <a href="https://dynomight.net/cola/#mexican-coke"><em>corn syrup</em></a> or even perhaps even <a href="https://dynomight.net/alcohol/"><em>alcohol</em></a>.</p>

<p>I don’t want to convince anyone to consume aspartame. But if we’re choosing between aspartame and other risky things, we should evaluate the relative risks.</p>

<h2 id="what-happens-to-aspartame-after-it-goes-into-your-body">What happens to aspartame after it goes into your body</h2>

<p>Let’s forget about safety for a second, and just look at the causal chain. Say you drink a Diet Coke. What happens next?</p>

<h3 id="fact-1-aspartame-is-quickly-broken-down-in-the-gut">Fact 1: Aspartame is quickly broken down in the gut.</h3>

<p>After you drink a Diet Coke, the aspartame goes to your guts. After that, it’s very quickly broken down into 50% phenylalanine, 40% aspartic acid, and 10% methanol. For example, a can of Diet Coke contains 184 mg of aspartame. This becomes:</p>

<ul>
  <li>92 mg of phenylalanine</li>
  <li>73.6 mg aspartic acid</li>
  <li>18.4 mg methanol</li>
</ul>

<details>
  <summary>This happens quickly and completely. No aspartame ever enters your bloodstream. The rest of your body only ever sees these three other chemicals. (<u>click here or on any paragraph with a triangle for more details</u>)</summary>

  <p>The European Food Safety Authority Report (EFSA) report: <a href="https://www.efsa.europa.eu/en/efsajournal/pub/3496">Scientific Opinion on the re-evaluation of aspartame as a food additive</a> gives this figure (slightly modified):</p>

  <p><img src="https://dynomight.net/img/aspartame/metabolism-bigger2.svg" alt="metabolism"></p>

  <p>The same report gives this discussion:</p>

  <p><img src="https://dynomight.net/img/aspartame/EFSA-breakdown.svg" alt="EFSA breakdown"></p>

</details>

<h3 id="fact-2-phenylalanine-is-a-standard-amino-acid-you-consume-all-the-time">Fact 2: Phenylalanine is a standard amino acid you consume all the time.</h3>

<p>We recently talked about <a href="https://dynomight.net/diet-coke-nootropic/">phenylalanine</a>. It is an essential amino acid. If you didn’t consume any of it then when your body tried to make certain proteins those proteins would get truncated, and then they wouldn’t do what they are supposed to do, and then you would die.</p>

<p>Fortunately, that’s almost impossible. From 2% to 5% of all protein in food is phenylalanine. The recommended dietary allowance for a 70 kg (154 lb) person is at least 2130 mg. Meat-eating men in the UK average 3500 mg per day, while vegetarians and vegans get slightly less.</p>

<p>Here are the amounts of phenylalanine in a few foods:</p>

<table>
  <tbody>
    <tr>
      <td>potato</td>
      <td>170 mg</td>
    </tr>
    <tr>
      <td>large egg</td>
      <td>340 mg</td>
    </tr>
    <tr>
      <td>8 oz (235 ml) glass of milk</td>
      <td>430 mg</td>
    </tr>
    <tr>
      <td>400g box of tofu</td>
      <td>3300 mg</td>
    </tr>
  </tbody>
</table>

<details>
  <summary>The 92 mg of phenylalanine you get from a Diet Coke is much less than what virtually everyone already gets from other sources.</summary>

  <p><a href="https://doi.org/10.1186/s13023-020-01391-y">MacDonald et al. (2020)</a>:</p>

  <p><img src="https://dynomight.net/img/aspartame/macdonald.svg" alt="macdonald"></p>

  <p>RDA guidelines are <a href="https://globalrph.com/rda-and-ear-recommendations-for-essential-amino-acids/">here</a>. For adults, the recommendation is at least 33 m/kg of phenylalanine (or tyrosine, a metabolite of phenylalanine). For a 70 kg (154 lb) person, that would be 2130 mg.</p>

  <p><a href="https://doi.org/10.1038/ejcn.2015.144">Schmidt et al. (2015)</a>:</p>

  <p><img src="https://dynomight.net/img/aspartame/schmidt.svg" alt="schmidt"></p>

</details>

<p>Around 1 in 12,000 babies is born with <a href="https://www.nichd.nih.gov/health/topics/factsheets/pku">phenylketonuria</a>, a serious genetic disorder that results in low levels of <a href="https://en.wikipedia.org/wiki/Phenylalanine_hydroxylase">phenylalanine hydroxylase</a>, making it difficult to metabolize phenylalanine. People with phenylketonuria need to carefully monitor their consumption of phenylalanine (from all sources). This is why there’s this scary <strong>ALL-BOLD WARNING</strong>.</p>

<!-- ![phenylketonurics warning](/img/aspartame/phenylketonurics.jpg) -->

<p><img alt="phenylketonurics warning" src="https://dynomight.net/img/aspartame/phenylketonurics.jpg"></p>

<p>If you had phenylketonuria you would know it already.</p>

<h3 id="fact-3-aspartic-acid-is-a-standard-amino-acid-you-consume-all-the-time">Fact 3: Aspartic acid is a standard amino acid you consume all the time.</h3>

<p>Here’s <a href="https://commons.wikimedia.org/wiki/File:ProteinogenicAminoAcids.svg">a chart from Wikimedia</a> with our friends circled:</p>

<!-- ![amino-acids](/img/aspartame/amino-acids.png) -->

<p><img alt="amino acids" src="https://dynomight.net/img/aspartame/amino-acids.png"></p>

<p>Aspartic acid is not essential in humans, meaning that if you don’t eat it, your body can make it (usually from <a href="https://en.wikipedia.org/wiki/Oxaloacetic_acid">oxaloacetic acid</a>). But that’s not likely, since almost everything with protein has aspartic acid including meat, grains, dairy, vegetables, and eggs. Men in the UK average 6600 mg of aspartic acid per day.</p>

<details>
  <summary>The 74 mg of aspartic acid you get from a Diet Coke is two orders of magnitude less than what most people get already.</summary>

  <p>Here’s <a href="https://doi.org/10.1038/ejcn.2015.144">Schmidt et al. (2015)</a> again:</p>

  <p><img src="https://dynomight.net/img/aspartame/schmidt.svg" alt="schmidt"></p>

</details>

<h3 id="fact-4-methanol-is-a-simple-alcohol-you-consume-all-the-time">Fact 4: Methanol is a simple alcohol you consume all the time.</h3>

<p>Methanol (CH₃OH) is the simplest alcohol molecule. It’s in lots of food. Here are some foods with larger average amounts.</p>

<table>
  <thead>
    <tr>
      <th>food</th>
      <th>mg/kg methanol</th>
      <th>typical serving</th>
      <th>methanol</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>wine</td>
      <td>115.0</td>
      <td>150 ml glass</td>
      <td>17 mg</td>
    </tr>
    <tr>
      <td>tomatoes</td>
      <td>281.4</td>
      <td>medium 125g tomato</td>
      <td>35 mg</td>
    </tr>
    <tr>
      <td>citrus fruit</td>
      <td>106.5</td>
      <td>medium 140g orange</td>
      <td>15 mg</td>
    </tr>
  </tbody>
</table>

<p>This vastly underestimates how much methanol you get. In land plants, the primary component of cells walls is <a href="https://en.wikipedia.org/wiki/Pectin">pectin</a>. Once in the body, pectin degrades into methanol. Here are some estimates of the <em>indirect</em> increase in methanol various fruits and vegetables cause in this way.</p>

<table>
  <thead>
    <tr>
      <th>food</th>
      <th>mg/kg methanol</th>
      <th>typical serving</th>
      <th>methanol</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>root vegetables</td>
      <td>774</td>
      <td>medium 200 g potato</td>
      <td>155 mg</td>
    </tr>
    <tr>
      <td>apples</td>
      <td>508.5</td>
      <td>medium 170 g apple</td>
      <td>132 mg</td>
    </tr>
    <tr>
      <td>oranges</td>
      <td>531</td>
      <td>medium 140g orange</td>
      <td>74 mg</td>
    </tr>
    <tr>
      <td>bananas</td>
      <td>657</td>
      <td>120g without skin</td>
      <td>79 mg</td>
    </tr>
    <tr>
      <td>avocados</td>
      <td>486</td>
      <td>100g (flesh only)</td>
      <td>59 mg</td>
    </tr>
  </tbody>
</table>

<p>You get the idea. We eat things that contain methanol or metabolize into methanol all the time. It’s estimated that most people get between 130 and 1030 mg of methanol from food per day, much more than the 18 mg in a Diet Coke.</p>

<p>Now isn’t methanol toxic? Sure, if you consume enough of it. The <a href="https://en.wikipedia.org/wiki/Median_lethal_dose">LD₅₀</a> in rats is around 5600 mg/kg, as compared to 7300 mg/kg for <a href="https://dynomight.net/alcohol-trial/">good-old ethanol</a>.</p>

<details>
  <summary>One "conspiracy theory" you hear about aspartame is that it becomes formaldehyde once it's in the body. This is <em>absolutely true</em>: When metabolizing methanol, formaldehyde is created. But small amounts of formaldehyde are <em>completely normal</em>. The half-life of formaldehyde in human blood is around 1 minute, meaning it disappears almost immediately. You get more formaldehyde (via methanol) by eating an apple than by drinking a Diet Coke. Formaldehyde itself is also present in lots of foods, like meat, seafood, fruits, vegetables, and coffee.</summary>

  <p>The EFSA report:</p>

  <p><img src="https://dynomight.net/img/aspartame/EFSA-methanol.svg" alt="ESFA methanol"></p>

  <p>Also the ESFA report:</p>

  <p><img src="https://dynomight.net/img/aspartame/EFSA-methanol-2.svg" alt="ESFA methanol"></p>

  <p><a href="https://doi.org/10.1002/jps.21319">Dhareshwar and Stella (2008)</a></p>

  <p><img src="https://dynomight.net/img/aspartame/dhareshwar-1.svg" alt="dhareshwar 1"></p>

  <p>Also <a href="https://doi.org/10.1002/jps.21319">Dhareshwar and Stella (2008)</a>:</p>

  <p><img src="https://dynomight.net/img/aspartame/dhareshwar-2.svg" alt="dhareshwar 1"></p>

  <p>The EFSA report again:</p>

  <p><img src="https://dynomight.net/img/aspartame/EFSA-formaldehyde.svg" alt="ESFA formaldehyde"></p>

</details>

<h3 id="fact-5-this-doesnt-prove-aspartame-is-safe">Fact 5: This doesn’t prove aspartame is safe.</h3>

<p>To summarize the above:</p>

<ol>
  <li>Aspartame is quickly broken down in the gut into phenylalanine, aspartic acid, and methanol. Aspartame itself never enters your bloodstream or touches any other part of your body.</li>
  <li>Phenylalanine is normal.</li>
  <li>Aspartic acid is normal.</li>
  <li>Methanol is normal.</li>
</ol>

<p>(Incidentally, this same logic does not apply to other artificial sweeteners which mostly aren’t broken down at all.)</p>

<p>While <em>informative</em>, this does not <em>prove</em> aspartame is safe. Biology is crazy. But it should inform our priors. Speaking for myself, my previous model was that consuming aspartame would result in a crazy unknown synthetic chemical circulating around my body and doing god-knows-what. My updated model is that consuming aspartame results in slightly larger amounts of some totally normal chemicals.</p>

<p>This is reassuring. But even if they’re normal, could these chemicals still cause harm? Sure. Fortunately for us, aspartame was invented a long time ago, so we have lots of evidence.</p>

<h2 id="the-scientific-consensus">The scientific consensus</h2>

<h3 id="how-to-think-about-this-situation">How to think about this situation</h3>

<p>Aspartame was first made in 1965 and was approved by the FDA in 1981. In the decades since, there have been hundreds of studies.</p>

<p>Given so many studies, focusing on individual papers is a mistake. With enough <strike>monkeys pounding away at enough typewriters</strike> scientists pounding away at enough science, lots of weirdness is expected.</p>

<p>The right strategy is to look at the entire pool of evidence. Some tiny number of people have the time and expertise to comb through the entire literature and synthesize everything. For the rest of us, the only sane thing is to read other people who have done that synthesis.</p>

<h3 id="the-us-food-and-drug-administration-fda">The US Food and Drug Administration (FDA)</h3>

<p>In typical US government fashion, the FDA doesn’t go to great lengths to explain its reasoning to the public. The best you can find is this <a href="https://www.fda.gov/food/food-additives-petitions/additional-information-about-high-intensity-sweeteners-permitted-use-food-united-states">rather lame page</a>:</p>

<p><img src="https://dynomight.net/img/aspartame/FDA.svg" alt="FDA info"></p>

<p>The history of aspartame and the FDA is contentious and sort of infuriating. For the scientific question of “is aspartame safe?” the main thing to know is that the FDA approved it a long time ago, and continues to stand by those decisions.</p>

<details>
  <summary>
But it must be said that the history and public communication of the FDA on this issue is kind of a train wreck, and if I wanted to optimize it to serve as conspiracy theory fuel, I could scarcely do any better. The FDA says it continues to monitor new studies and remains confident aspartame is safe. So why doesn't it explain its reasoning to a skeptical public? The newest document the FDA can point people to is from 26 years ago. When a concerned citizen writes in, the FDA does things like respond 12 years later, while acting like that's perfectly normal.
</summary>

  <p>The FDA first approved aspartame for dry foods in 1974. However, there was a lot of controversy about the studies performed by <a href="https://en.wikipedia.org/wiki/G.D._Searle,_LLC">G.D. Searle</a>, the company that discovered aspartame in 1965 (and that Donald Rumsfeld would become CEO of in 1977). The FDA commissioner agreed with these criticisms and placed a stay on aspartame’s approval.</p>

  <p>After more debate, the FDA finally approved aspartame in 1981 in a <a href="https://www.fda.gov/media/89219/download">26-page report</a> with this summary:</p>

  <p><img src="https://dynomight.net/img/aspartame/FDA-1981.svg" alt="FDA 1981 report"></p>

  <p>In 1983 the FDA added approval for carbonated beverages. <a href="https://www.fda.gov/media/89189/download">The report</a> is mostly boring but this part is fun:</p>

  <p><img src="https://dynomight.net/img/aspartame/FDA-1983.svg" alt="FDA 1983 report"></p>

  <p>There was controversy about US Attorney General <a href="https://en.wikipedia.org/wiki/Samuel_K._Skinner">Samuel Skinner</a> who was involved in the case and then went on to take a job at a law firm that Searle used. This led <a href="https://en.wikipedia.org/wiki/Howard_Metzenbaum">Senator Metzenbaum</a> to request an investigation by the Government Accountability Office (GAO). They reported in 1987 that the process had been followed correctly. They also got responses from 69 researchers, 43 of whom worked in aspartame research.</p>

  <p><img src="https://dynomight.net/img/aspartame/image-20220614162208248.png" alt="image-20220614162208248"></p>

  <p>Finally in 1996, the FDA <a href="http://www.gpo.gov/fdsys/pkg/FR-1996-06-28/pdf/96-16522.pdf">approved</a> aspartame as a “general sweetener”.</p>

  <p><img src="https://dynomight.net/img/aspartame/FDA-1996.svg" alt="FDA 1996 report"></p>

  <p>Also in 1996, Roger Walton, a psychiatrist at Northeastern Ohio Universities College of Medicine, wrote a <a href="https://www.lightenyourtoxicload.com/wp-content/uploads/2014/07/Dr-Walton-survey-of-aspartame-studies.pdf">survey</a> that claimed that 74 out of 74 industry-funded studies confirmed aspartame’s safety whereas 84 out of 91 independent studies identified health concerns. Walton went appeared in a <a href="https://www.youtube.com/watch?v=BK_u7DG9DY8"><em>60 Minutes</em> special</a> on aspartame. It later turned out that Walton had missed at least 50 peer-reviewed studies  and most of the independent “studies” he did cite were really just letters to the editor or similar, many weren’t negative, and some didn’t involve aspartame at all.</p>

  <p>For example, Walton cites <a href="https://doi.org/10.1016/S0140-6736(85)90920-1">Wurtman (1985)</a>. This appeared in the Lancet, which is a very good journal. But it’s just a 5-paragraph letter to the editor that points out that aspartame creates phenylalanine without other amino acids, which might do something in the brain—an idea we’ve <a href="https://dynomight.net/diet-coke-nootropic">looked at recently</a>—and gives some anecdotes about people getting seizures. Real studies do not confirm these anecdotes. <a href="https://doi.org/10.1093/ajcn/68.3.531">Wurtman himself</a> did a real study in 1998 that found “Large daily doses of aspartame had no effect on neuropsychologic, neurophysiologic, or behavioral functioning in healthy young adults”. But the Walton report remains discussed to this day. Just a few months ago, Walton published a book called “Double Blind”. I’ll let you judge the credibility for yourself:</p>

  <p><img src="https://dynomight.net/img/aspartame/double-blind.png" alt="Double Blind"></p>

  <p>Since 1996, the FDA doesn’t appear to have published any systematic argument that the current science supports the idea that aspartame is safe. If you look <em>really</em> hard, you can find a few places where the FDA has recently been forced to justify the idea that aspartame is safe. For example, a concerned citizen wrote to the FDA in 2002 and sent this <a href="https://www.regulations.gov/document/FDA-2002-P-0247-0023">response</a> in 2014:</p>

  <p><img src="https://dynomight.net/img/aspartame/FDA-2014-response.svg" alt="FDA 2014 response"></p>

  

</details>



<p>Fortunately, other countries exist. The EFSA has a nice <a href="https://www.efsa.europa.eu/en/topics/topic/aspartame">page</a> that summarizes things this way:</p>

<p><img src="https://dynomight.net/img/aspartame/EFSA-webpage.svg" alt="EFSA webpage"></p>

<p>The bottom of the page has a timeline that clearly presents all past activities, and clearly links to all ongoing studies and reports. (The fact that I’m impressed by such basic things drives home just how low the FDA sets the bar.)</p>

<p>There’s also an <em>extremely</em> nice-263 page <a href="https://www.efsa.europa.eu/en/press/news/131210">risk assessment</a>. This document is the single best (most clear, credible, thorough, and up-to-date) source of information I could find on the safety of aspartame. Here are some quotes from the summary:</p>

<blockquote>
  <p>there was no epidemiological evidence for possible associations of aspartame with various cancers in the human population.</p>
</blockquote>

<blockquote>
  <p>The Panel considered the database on the genotoxicity of methanol and concluded that the data set was limited but that the available reliable <em>in vitro</em> and <em>in vivo</em> data did not indicate a genotoxic potential for methanol.</p>
</blockquote>

<blockquote>
  <p>the calculated [No Observed Adverse Effect Level]s for methanol by oral exposure are 140 and 515-fold higher than the maximum amount of methanol that could be released when aspartame is consumed at the [Acceptable Daily Intake].</p>
</blockquote>

<blockquote>
  <p>the data on reproductive and developmental toxicity did not suggest that there was a risk from methanol derived from aspartame at the current exposure estimates or at the [Acceptable Daily Intake] of 40 mg/kg bw/day.</p>
</blockquote>

<blockquote>
  <p>based on recent measurements of basal levels of formaldehyde in blood and on the modelling of its biological turnover and steady state concentration in cells, formaldehyde formed from aspartame-derived methanol was not of safety concern at the current exposure estimates or at the ADI of 40 mg/kg bw/day.</p>
</blockquote>

<p>It ends this way:</p>

<p><img src="https://dynomight.net/img/aspartame/EFSA-report.svg" alt="EFSA report"></p>

<h3 id="health-canada">Health Canada</h3>

<p>Canada is one of the <a href="https://www.canada.ca/en/health-canada/services/food-nutrition/food-safety/food-additives/sugar-substitutes/aspartame-artificial-sweeteners.html">clearer communicators</a>:</p>

<p><img src="https://dynomight.net/img/aspartame/canada.svg" alt="canada"></p>

<p>Here are their conclusions in a handy table:</p>

<table>
  <thead>
    <tr>
      <th>Allegation</th>
      <th>Conclusion</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>The methanol in aspartame is toxic and is linked to numerous health  problems including lupus and blindness, and also mimics multiple  sclerosis</td>
      <td>Not supported</td>
    </tr>
    <tr>
      <td>Aspartame is especially dangerous for person with diabetes</td>
      <td>Not supported</td>
    </tr>
    <tr>
      <td>Aspartame causes cancer and brain tumours</td>
      <td>Not supported</td>
    </tr>
    <tr>
      <td>Aspartame causes seizures</td>
      <td>Not supported</td>
    </tr>
    <tr>
      <td>Aspartame causes allergic reactions</td>
      <td>Not supported</td>
    </tr>
  </tbody>
</table>

<h3 id="new-zealand-food-safety-authority">New Zealand Food Safety Authority</h3>

<p>From an <a href="https://web.archive.org/web/20081216093929/http://www.nzfsa.govt.nz/consumers/chemicals-nutrients-additives-and-toxins/aspartame/">archived page</a>:</p>

<p><img src="https://dynomight.net/img/aspartame/nz.svg" alt="new zealand"></p>

<h3 id="joint-expert-committee-on-food-additives-jecfa">Joint Expert Committee on Food Additives (JECFA)</h3>

<p>The UN and WHO “jointly” run the JECFA. The only public reports I can find from them are really old, like <a href="https://inchem.org/documents/jecfa/jecmono/v15je03.htm">1980</a>. For what it’s worth, this was the conclusion:</p>

<p><img src="https://dynomight.net/img/aspartame/JECFA.svg" alt="JECFA"></p>

<p>As far as I can tell, this <a href="https://inchem.org/documents/jecfa/jecmono/v16je01.htm">1981</a> update is the last word on aspartame from the JECFA. However, the JECFA currently has aspartame on the <a href="https://www.fao.org/fao-who-codexalimentarius/sh-proxy/fr/?lnk=1&amp;url=https%253A%252F%252Fworkspace.fao.org%252Fsites%252Fcodex%252FCircular%252520Letters%252FCL%2525202021-81%252Fcl21_81e.pdf">priority list of substances proposed for evaluation</a>, as requested by Columbia, Costa Rica, and—somehow—the United States of America. (<em>Update</em>: This report is due to finally come out July 14, 2023. I’ll write about it when it does.)</p>

<h3 id="the-academy-of-nutrition-and-dietetics">The Academy of Nutrition and Dietetics</h3>

<p>This is a <a href="https://en.wikipedia.org/wiki/Academy_of_Nutrition_and_Dietetics">seemingly respectable</a> organization of more than 100 thousand food and nutrition professionals, albeit one funded by food industry lobbying groups. Their <a href="https://doi.org/10.1016/j.jand.2012.03.009">position report</a> states:</p>

<p><img src="https://dynomight.net/img/aspartame/academy.svg" alt="academy"></p>

<h2 id="literature-reviews">Literature reviews</h2>

<p>Again, I don’t think it’s productive to look at individual papers. But we can look at <em>reviews</em> of all the evidence.</p>

<p>Here, some judgment is required. If I type “review aspartame safety” into Google scholar, many of the papers that come up have several of the following features:</p>

<ol>
  <li>Paper is published in an obscure journal</li>
  <li>Authors are from obscure institutions</li>
  <li>Paper only engages with a tiny slice of the literature</li>
  <li>Paper just “doesn’t look right” (e.g. has a serious grammatical error in the title)</li>
</ol>

<p>For full transparency, here are the papers I found less credible for the above reasons, given as hopefully-offense-minimizing numbers: <a href="https://doi.org/10.1007/s10616-013-9681-0">1</a> <a href="https://doi.org/10.3923/pjbs.2018.127.134">2</a> <a href="https://doi.org/10.4103%2F0976-500X.85936">3</a> <a href="https://doi.org/10.1080/1028415X.2017.1288340">4</a> <a href="https://pubmed.ncbi.nlm.nih.gov/29038387/">5</a> <a href="https://www.researchgate.net/profile/Ab-Naik/publication/360642412_Aspartame_Effects_and_Awareness/links/62949ea76886635d5cae8511/Aspartame-Effects-and-Awareness.pdf">6</a> <a href="https://doi.org/10.3390/nu13061957">7</a> <a href="https://doi.org/10.1093/nutrit/nux035">8</a>. Note that many of these <em>do</em> suggest health concerns with aspartame, but I am discounting their conclusions because I don’t think they are credible. If <em>you</em> don’t trust <em>me</em>, you should look at those papers yourself. I have linked (here or below) everything I found that was published after the year 2000 and claimed to be a review of aspartame.</p>

<p><strong>Butchko et al. <a href="https://doi.org/10.1006/rtph.2002.1542"><em>Aspartame: Review of Safety</em></a>. Regulatory Toxicology and Pharmacology, 2002.</strong></p>

<p>Our first is a 93-page monster from a team of 24 scientists (three of whom, note, are employed by The NutraSweet Company). As I write this, it’s been cited 344 times. In their summary, you can feel the frustration:</p>

<p><img src="https://dynomight.net/img/aspartame/butchko-1.svg" alt="butchko 1"></p>

<p>Here’s a table from this paper:</p>

<p><img src="https://dynomight.net/img/aspartame/butchko-2.svg" alt="butchko 2"></p>

<p>This is helpful to put things in perspective. If you drink a Diet Coke, you get 2.6 mg/kg of aspartame, assuming you weight 70 kg. That’s around 20 times less than the government recommended limits. It’s also around <em>1000 times</em> less than doses that do not show harms in animals.</p>

<p><strong>Magnuson et al. <a href="https://doi.org/10.1080/10408440701516184"><em>Aspartame: A Safety Evaluation Based on Current Use Levels, Regulations, and Toxicological and Epidemiological Studies</em></a>. Critical Reviews in Toxicology, 2007.</strong></p>

<p>This is a 99-page paper that’s been cited 430 times so far. The conclusions are kind of feisty.</p>

<p><img src="https://dynomight.net/img/aspartame/magnuson.svg" alt="magnuson"></p>

<details>
  <summary>Note that this study was funded by Ajinomoto via some kind of blind-trust arrangement.</summary>

  <p>The paper describes it this way:</p>

  <p><img src="https://dynomight.net/img/aspartame/magnuson-sponsor.svg" alt="magnuson sponsor"></p>

  <p>I still mostly trust this paper, but <a href="https://dynomight.net/alcohol-trial/">we all know how these things can go</a>.</p>

</details>

<p><strong>Rogers et al. <a href="https://doi.org/10.1038/ijo.2015.177"><em>Does low-energy  sweetener consumption affect energy intake and body weight? A systematic review, including meta-analyses, of the evidence from human and animal studies</em></a>. International Journal of Obesity, 2016.</strong></p>

<p>This paper has 320 citations and 11 authors (four of whom—sigh—have gotten grants from or worked at sweetener companies). It focuses on metabolism and weight. Here is their conclusion, where LES = Low-Energy Sweeteners, EI = Energy Intake, and BW = Body Weight.</p>

<p><img src="https://dynomight.net/img/aspartame/rogers-1.svg" alt="rogers 1"></p>

<p><img src="https://dynomight.net/img/aspartame/rogers-2.svg" alt="rogers 2"></p>

<h3 id="other-reviews">Other reviews</h3>

<p>There are many other reviews that seem scientifically solid, but aren’t as comprehensive as those above. Here’s a representative snippet from each:</p>

<table>
  <thead>
    <tr>
      <th>paper</th>
      <th>snippet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://doi.org/10.1111/j.1541-4337.2006.tb00081.x">Kroger et al. (2006)</a></td>
      <td>“within the range of variation caused by day-to-day differences in food intake and are clearly not harmful”</td>
    </tr>
    <tr>
      <td><a href="https://doi.org/10.1016/j.fct.2013.07.040">Marinovich et al. (2009)</a></td>
      <td>“not consistently related to vascular events and preterm deliveries.”</td>
    </tr>
    <tr>
      <td><a href="https://doi.org/10.1080/19338244.2013.828674">Mallikarjun and Sieburth (2013)</a></td>
      <td>“suggest that [aspartame] consumption has no significant carcinogenic effect in rodents.”</td>
    </tr>
    <tr>
      <td><a href="https://doi.org/10.1080/10408398.2017.1304358">Santos et al. (2018)</a></td>
      <td>“no found deleterious effects associated with aspartame consumption on variables studied”</td>
    </tr>
    <tr>
      <td><a href="https://doi.org/10.1016/j.yrtph.2018.01.009">Haighton et al. (2018)</a></td>
      <td>“a conclusion that aspartame is not carcinogenic is supported”</td>
    </tr>
    <tr>
      <td><a href="https://doi.org/10.1016/j.yrtph.2019.01.033">Haighton et al. (2019)</a></td>
      <td>“do not support that [low calories sweeteners and] aspartame, are associated with an increased risk of cancer in humans.”</td>
    </tr>
    <tr>
      <td><a href="https://doi.org/10.1001/jamanetworkopen.2022.2092">McGlynn et al. (2022)</a></td>
      <td>“small improvements in body weight and cardiometabolic risk factors without evidence of harm”</td>
    </tr>
  </tbody>
</table>

<h2 id="why-write-this">Why write this?</h2>

<p>I write all this with some trepidation, as my <a href="https://dynomight.net/cola/#ps">previous</a> <a href="https://dynomight.net/thanks/">mentions</a> of aspartame caused a surprising amount of rancor.</p>

<p>But whatever, I’ll die on this hill: After aspartame is consumed, it immediately breaks down into three naturally occurring chemicals. Even large amounts of aspartame cause smaller fluctuations in those chemicals than normal food. The current science says that the health impact of aspartame is essentially zero. Every credible body that has studied this question has reached the same conclusion.</p>

<p>Is it possible that some harms have been missed? Of course! That’s how science works: Evidence accumulates slowly. It never becomes a <em>sure thing</em>, we just eventually decide it’s sure <em>enough</em> and move on with our lives.</p>

<p>So why are we still talking about aspartame? Why worry about it rather than, say, <em>sugar</em> or <em>alcohol</em>? I know many people who avoid diet soda but drink sugar-sweetened soda or large amounts of alcohol. That’s choosing a known harm over something that appears harmless.</p>

<p>Or, why not worry about:</p>

<ul>
  <li><a href="https://www.weather.gov/safety/lightning-odds">Lightning</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Cotton_swab#Medical_risks">Q-tips</a></li>
  <li><a href="https://dynomight.net/air/#things-that-create-particles-indoors">Fireplaces</a></li>
  <li><a href="https://doi.org/10.1097/PAF.0b013e31828d68c7">Bathtubs</a></li>
  <li><a href="https://www.cdc.gov/pictureofamerica/pdfs/Picture_of_America_Poisoning.pdf">Generators</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Lawn_mower#Safety_issues">Lawn mowers</a></li>
  <li><a href="https://www.bbc.com/news/world-us-canada-48360832">Umbrellas</a></li>
  <li><a href="https://wwwnc.cdc.gov/travel/yellowbook/2020/travel-by-air-land-sea/cruise-ship-travel">Cruise ships</a></li>
  <li><a href="https://dynomight.net/air/#particles-while-commuting">Air in subways</a></li>
  <li><a href="https://doi.org/10.1371/journal.pmed.0040290">Blood clots in planes</a></li>
  <li><a href="https://www.cdc.gov/nceh/radiation/air_travel.html">Cosmic rays in planes</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Heterocyclic_amine_formation_in_meat">Charred meat</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Anticholinergic#Side_effects">Anticholinergics</a></li>
  <li><a href="https://doi.org/10.1093/fqsafe/fyy025">Cocoa</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Perfluorooctanoic_acid#Health_concerns">Perfluorooctanoic acid</a></li>
  <li><a href="https://doi.org/10.1128/CMR.00011-10">Helicobacter pylori</a></li>
</ul>

<p>All of these present some real danger but mostly no one cares.</p>

<p>To me, most skepticism of aspartame looks like an <a href="https://slatestarcodex.com/2014/08/14/beware-isolated-demands-for-rigor/">isolated demand for rigor</a>—an impossibly high standard of evidence that isn’t applied to other things. We all have finite bandwidth for things to worry about, and the evidence places aspartame very low on the list of sensible worries.</p>

<p>Many of the same people who claim aspartame is risky exhort to Follow the Science in other domains. I wonder: What evidence would be convincing proof of aspartame’s safety, but doesn’t already exist? Is it even possible? If not, then OK! But if you only follow the science when the conclusions are intuitive, it’s not science that chooses your destination.</p>

  


  

  

  
  
  
  

</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[It's 2023 and memory overwrite bugs are not just a thing theyre still number one (107 pts)]]></title>
            <link>https://www.theregister.com/2023/06/29/cwe_top_25_2023/</link>
            <guid>36562727</guid>
            <pubDate>Sun, 02 Jul 2023 16:01:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2023/06/29/cwe_top_25_2023/">https://www.theregister.com/2023/06/29/cwe_top_25_2023/</a>, See on <a href="https://news.ycombinator.com/item?id=36562727">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>The most dangerous type of software bug is the out-of-bounds write, according to MITRE this week. This type of flaw is responsible for 70 CVE-tagged holes in the US government's list of known vulnerabilities that are under active attack and need to be patched, we note.</p>
<p>Out-of-bounds write, sometimes labeled <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/data/definitions/787.html">CWE-787</a>, also took the top spot in 2022, showing a distinct lack of improvement.</p>
<p>An out-of-bounds write happens when software (and sometimes hardware) alters memory it's not supposed to, such as by writing data to a memory buffer and overshooting the end of that buffer, causing it to unexpectedly change other variables and information and/or just crash. That kind of bug can be triggered accidentally through normal operation, or it can be triggered deliberately by exploit code.</p>

    

<p>Typically, exploit code will induce an out-of-bounds write to alter data structures so that the flow of execution is hijacked and diverted in a way the attacker chooses, allowing them to take control of the software, be it an application, a remote service, or part of an operating system. Ideally, software should be written to prevent this kind of overwrite, and using memory-safe languages like Rust <a target="_blank" href="https://www.theregister.com/2022/11/11/nsa_urges_orgs_to_use/">can help here</a>.</p>

        


        

<p>Number two on MITRE's list is the less complex but still annoying cross-site scripting bug (<a target="_blank" rel="nofollow" href="https://cwe.mitre.org/data/definitions/79.html">CWE-79</a>), which was key in four CVEs in the known exploited vulnerabilities <a target="_blank" rel="nofollow" href="https://www.cisa.gov/known-exploited-vulnerabilities-catalog">catalog</a> maintained by Uncle Sam's CISA. This bug type is a fancy form of a failure to sanitize user input.</p>
<p>Number three — SQL injection flaws (<a target="_blank" rel="nofollow" href="https://cwe.mitre.org/data/definitions/89.html">CWE-89</a>) — account for four known exploited bugs in the CISA catalog. Again, another form of input sanitization failure. Clean and neutralize your inputs, people. You can't assume all your users are nice.</p>

        

<p>MITRE compiles the annual <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/top25/archive/2023/2023_top25_list.html">CWE Top 25 list</a> by analyzing public vulnerability data in America's <a target="_blank" rel="nofollow" href="https://nvd.nist.gov/">National Vulnerability Database</a>. This year's list is based on 43,996 CVE records for vulnerabilities in 2021 and 2022, and was issued in hand with US Homeland Security and CISA.</p>
<p>"These weaknesses lead to serious vulnerabilities in software," the cybersecurity agency <a target="_blank" rel="nofollow" href="https://www.cisa.gov/news-events/alerts/2023/06/29/2023-cwe-top-25-most-dangerous-software-weaknesses">warned</a> today. "An attacker can often exploit these vulnerabilities to take control of an affected system, steal data, or prevent applications from working."&nbsp;</p>
<p>In fact, the top three most dangerous software weaknesses for 2023 were also the most dangerous, and in the same order, in the 2022 list. Progress is slow, it seems.</p>
<div>
<h3>Time to get patching</h3>

<p>Also today, CISA added eight more flaws to its <a target="_blank" rel="nofollow" href="https://www.cisa.gov/known-exploited-vulnerabilities-catalog">Known Exploited Vulnerabilities Catalog</a>. These affect D-Link and Samsung devices and they are tracked as:</p>

<ul>
<li>CVSS 9.8 — <a target="_blank" rel="nofollow" href="https://nvd.nist.gov/vuln/detail/CVE-2023-25717">CVE-2019-17621</a> D-Link DIR-859 router contains a command execution vulnerability.</li>

<li>CVSS 7.8 — <a target="_blank" rel="nofollow" href="https://nvd.nist.gov/vuln/detail/CVE-2019-20500">CVE-2019-20500</a> D-Link DWL-2600AP access points are vulnerable to command injection attacks.</li>

<li>CVSS 7.8 — <a target="_blank" rel="nofollow" href="https://nvd.nist.gov/vuln/detail/CVE-2021-25487">CVE-2021-25487</a> Samsung mobile devices are vulnerable to out-of-bounds read.&nbsp;</li>

<li>CVSS 5.5 — <a target="_blank" rel="nofollow" href="https://nvd.nist.gov/vuln/detail/CVE-2021-25489">CVE-2021-25489</a> Samsung mobile devices contain an improper input validation flaw.</li>

<li>CVSS 6.4 — <a target="_blank" rel="nofollow" href="https://nvd.nist.gov/vuln/detail/CVE-2021-25394">CVE-2021-25394</a> Samsung mobile devices are susceptible to a race condition vulnerability.</li>

<li>CVSS 9.0 — <a target="_blank" rel="nofollow" href="https://nvd.nist.gov/vuln/detail/CVE-2016-3427">CVE-2021-25395</a> another race condition bug in Samsung mobile devices, but this one's critical.&nbsp;</li>

<li>CVSS 6.7 — <a target="_blank" rel="nofollow" href="https://nvd.nist.gov/vuln/detail/CVE-2021-25371">CVE-2021-25371</a> an unspecified flaw in Samsung mobile devices.</li>

<li>CVSS 6.7 — <a target="_blank" rel="nofollow" href="https://nvd.nist.gov/vuln/detail/CVE-2021-25372">CVE-2021-25372</a> Samsung mobile devices contain an improper boundary check vulnerability.</li>
</ul>
</div>
<p>Number four, however, was one of the "biggest movers" on the list, jumping from the seventh spot last year to the fourth-ranked most dangerous issue this year. It's <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/data/definitions/416.html">CWE-416</a>, or use-after-free. This type of exploitable bug is when a program, remote service, or operating system component releases memory that's no longer needed, and then continues to use it anyway. At that point, it's relying on memory that could be, say, manipulated by some other code, and can lead to crashes or hijacking of execution.</p>
<p>Again, memory-safe languages are useful here as they abstract away this fiddly memory management, or ensure insecure memory use is blocked.</p>

        

<p>Some of the other biggest movers up the list, according to MITRE, include <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/data/definitions/862.html">CWE-862</a>, which covers missing authorization bugs. This weakness jumped from sixteenth position last year to number 11 in 2023.&nbsp;&nbsp;</p>
<p>Additionally, <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/data/definitions/269.html">CWE-269</a> (improper privilege management) moved up seven places to 22 on the list, and <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/data/definitions/863.html">CWE-863</a> (incorrect authorization) went from rose four ranks to number 24.</p>
<ul>

<li><a href="https://www.theregister.com/2023/06/21/vmware_bug_under_exploit/">A (cautionary) tale of two patched bugs, both exploited in the wild</a></li>

<li><a href="https://www.theregister.com/2023/06/21/apple_patches_triangledb_spyware/">Apple squashes kernel bug used by TriangleDB spyware</a></li>

<li><a href="https://www.theregister.com/2023/06/16/third_moveit_bug_fixed/">Third MOVEit bug fixed a day after PoC exploit made public</a></li>

<li><a href="https://www.theregister.com/2023/06/13/june_patch_tuesday_vmware_vuln/">June Patch Tuesday: VMware vuln under attack by Chinese spies, Microsoft kinda meh</a></li>
</ul>
<p>There's also a couple new entries to this year's list: <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/data/definitions/269.html">CWE-269</a> (improper privilege management), in 22nd place, and <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/data/definitions/863.html">CWE-863</a> (incorrect authorization) as a newcomer in 24th.</p>
<p>"CWEs are becoming more and more prevalent in vulnerability exposure conversations as the community looks to avoid the root causes that can become vulnerabilities," according to <a target="_blank" rel="nofollow" href="https://cwe.mitre.org/top25/index.html">MITRE</a>.&nbsp;</p>
<p>To this end, the nonprofit will publish a series of reports over the next few months that aim to help organizations "more effectively" use the Top 25 list. These will cover a range of topics including weaknesses that didn't quite make the Top 25 —&nbsp;but orgs should still be aware of them.&nbsp;</p>
<p>It will also publish a report on trends in CWEs over the last four years, and a report on actively exploited weaknesses based on CISA's catalog.&nbsp; ®</p>                                


                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stanford A.I. Courses (384 pts)]]></title>
            <link>https://ai.stanford.edu/courses/</link>
            <guid>36562502</guid>
            <pubDate>Sun, 02 Jul 2023 15:40:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ai.stanford.edu/courses/">https://ai.stanford.edu/courses/</a>, See on <a href="https://news.ycombinator.com/item?id=36562502">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							
							<p><label>Sort by: </label>
							</p>
							
						</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A toy programming language in 137 lines of Python code (101 pts)]]></title>
            <link>https://blog.miguelgrinberg.com/post/building-a-toy-programming-language-in-python</link>
            <guid>36562432</guid>
            <pubDate>Sun, 02 Jul 2023 15:36:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.miguelgrinberg.com/post/building-a-toy-programming-language-in-python">https://blog.miguelgrinberg.com/post/building-a-toy-programming-language-in-python</a>, See on <a href="https://news.ycombinator.com/item?id=36562432">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I thought it would be fun to go outside of my comfort zone of web development topics and write about something completely different and new, something I have never written about before. So today, I'm going to show you how to implement a programming language!</p>
<p>The project will parse and execute programs written in a simple language I called <code>my</code> (I know it's a lame name, but hey, it is "my" language). The implementation is going to be in Python, without any external dependencies. The <code>my</code> language is simple enough to make this project reasonably short, but also complex enough to make it interesting. If you are only interested in the complete code, you can find it in <a href="https://github.com/miguelgrinberg/mylang">this GitHub repository</a>. If you want to learn, then read on!</p>
<p>In this first installment of this series, I'll show you how to build a very basic programming language that implements a print statement. Then in the <a href="https://blog.miguelgrinberg.com/post/building-a-toy-programming-language-in-python-part-2">second part</a> I'll extend the language to support variables and mathematical expressions. The end goal is a programming language implementation that can execute programs such as this one:</p>
<pre><code>a = 3
b = 4 + a * 2
print b + 1
</code></pre>
<p>Once you learn the techniques involved in bringing <code>my</code> to life, you will be able to extend the language in any way you like and make it yours too. Sounds interesting? Let's get started!</p>
<h2>The Components of a Programming Language</h2>
<p>It is not the point of this article to bore you with a discussion of compiler theory, but at the same time I feel it is important to begin with a basic idea of the project structure. It is certainly possible to start coding away and figure things out intuitively as you go, but given that this is a topic that has been well studied it does not make sense to ignore all the research and knowledge that is available.</p>
<p>So, in very general terms, a programming language implementation is composed of the following phases:</p>
<ul>
<li>Lexical analysis, where the program's source code is read and divided up into individual units called <em>tokens</em>.</li>
<li>Syntax analysis, where the sequence of tokens provided by the lexical analyzer (or <em>lexer</em>) is checked against the grammar of the language. The module that performs this task is called the <em>parser</em>.</li>
<li>Code generation, where an intermediate code is generated as a lower-level representation of the sequence of tokens parsed from the source file. The module that performs this task is sometimes called the <em>compiler</em>, though this term is often used to refer to this and the previous two phases combined.</li>
<li>Execution, where the intermediate code produced by the compiler is read and executed. The module that performs this task is called the <em>interpreter</em>.</li>
</ul>
<p>Some languages have a more complex structure, which for example includes one or more code optimization phases after the compiler phase, leading to more efficient code. Others have simplifications, such as having a single phase that merges code generation and execution together, which means that code is executed on the fly as it is parsed.</p>
<p>Regardless of the exact structure of a language implementation, the important point to remember is that using a well defined structure based on the above phases will help keep the complexity of the project under control.</p>
<h2>The "My" Programming Language, Version 0.1</h2>
<p>If you are familiar with my tutorials, you know that I like to build projects in small steps. For that reason, the first version of the <code>my</code> language is going to be extremely simple, with just a <code>print</code> statement that prints numbers. Here is an example program written in the first version of <code>my</code>:</p>
<pre><code>print 1
print 52
</code></pre>
<p>The <code>print</code> keyword is a reserved word of the language. Numbers in this language are integers. When this program is executed, the expected output should be:</p>
<pre><code>1
52
</code></pre>
<p>The documentation that describes the syntax of a language is called the language <em>grammar</em>. This is very important to have, as it serves as a reference when implementing the language. The grammar for this first version of the <code>my</code> language is:</p>
<pre><code>&lt;program&gt; = &lt;statement&gt; [ &lt;statement&gt; ... ]
&lt;statement&gt; = &lt;print_statement&gt; "\n"
&lt;print_statement&gt; = "print" &lt;expression&gt;
&lt;expression&gt; = number
</code></pre>
<p>To make sense of this notation you can start from top to bottom. The first rule says that a program in this language is defined  as a statement optionally followed by more statements.</p>
<p>In the second rule, a statement is defined as a print statement, followed by an end of line. The third rule states that a print statement must have the literal word "print" followed by an expression. The fourth and final rule defines an expression as a number. Remember that this is a first attempt, expressions will later be expanded.</p>
<p>The <code>"\n"</code>, <code>"print"</code> and <code>number</code> elements used in this grammar are terminal symbols, or <em>tokens</em>. These do not require grammar rules because they are tokens directly produced by the lexer. The remaining symbols, which are shown enclosed in <code>&lt;</code> and <code>&gt;</code>, are defined in terms of other symbols or tokens.</p>
<h2>The Lexer</h2>
<p>The function of the lexical analyzer (or lexer) is to read the source code of the language and produce a sequence of tokens. In this section I'll show you how to build a lexer for the <code>my</code> language.</p>
<p>Consider once again the example <code>my</code> program:</p>
<pre><code>print 1
print 52
</code></pre>
<p>With this input, the lexer should produce the following list of tokens:</p>
<ul>
<li><code>"print"</code></li>
<li><code>"number"</code>, 1</li>
<li><code>"\n"</code></li>
<li><code>"print"</code></li>
<li><code>"number"</code>, 52</li>
<li><code>"\n"</code></li>
</ul>
<p>The <code>My</code> class shown below accepts the source code of a <code>my</code> program as a string, and in accordance with the grammar I shared above. Its <code>tokens()</code> method returns an iterator that produces tokens from this code.</p>
<pre><code>class My:
    def __init__(self, code):
        self.code = code
        self.line_nr = 0

    def raise_error(self, message):
        raise ValueError(f'{self.line_nr}: {message}')

    def tokens(self):
        for line in self.code.strip().split('\n'):
            self.line_nr += 1
            for token in line.strip().split(' '):
                if token == 'print':
                    yield (token,)
                elif token.isnumeric():
                    yield ('number', int(token))
                else:
                    self.raise_error(f'Syntax Error: Invalid token {token}')
            yield ('\n',)
</code></pre>
<p>Copy the above code to a file named <em>my.py</em>. Before I explain some the interesting details in this implementation, let's give this lexer a try. Try the following in a Python prompt:</p>
<pre><code>&gt;&gt;&gt; from my import My
&gt;&gt;&gt; p = My('''print 1
... print 52
... ''')
&gt;&gt;&gt; list(p.tokens())
[('print',), ('number', 1), ('\n',), ('print',), ('number', 52), ('\n',)]
</code></pre>
<p>This is pretty cool, right? Each token is returned as a tuple. For the <code>"print"</code> and <code>"\n"</code> tokens, the tuples have a single element with the token itself. For the <code>number</code> token, a second element is added with the actual value of the number.</p>
<p>The <code>tokens()</code> method is built as a <a href="https://docs.python.org/3/glossary.html#term-generator">generator</a>, a special kind of Python function that returns an iterator. The elements returned by the iterator are produced with the <code>yield</code> keyword, inside the body of the function. You can see that the method splits the source code into lines and iterates over them, then for each line it splits on the spaces. Inside this double for-loop, each part is checked to see if it matches the <code>"print"</code> or <code>number</code> tokens. The <code>"\n"</code> token is treated as a special case because it is only valid at the end of the line, so it is added automatically after each outer loop iteration.</p>
<p>What happens when a token does not match the <code>"print"</code> or <code>number</code> tokens defined in the language grammar? That is an error, so for that case the <code>raise_error()</code> method is called. This method raises a <code>ValueError</code> exception with an the error message, which would be the equivalent to having a syntax error reported in a Python script. Here is another console example where an error is raised due to an invalid token:</p>
<pre><code>&gt;&gt;&gt; p = My('''print 1
... print "foo"
... ''')
&gt;&gt;&gt; list(p.tokens())
Traceback (most recent call last):
...
ValueError: 2: Syntax Error: Invalid token "foo"
</code></pre>
<p>Notice the <code>2:</code> in the error message. This is the line number of the error! The <code>line_nr</code> attribute of the <code>My</code> class counts the line as they are being analyzed, and this makes it possible to report a line number when an error occurs. A more sophisticated lexer could also keep track of column numbers and accurately show the position of the error within the line as well.</p>
<p>Because the <code>tokens()</code> method returns an iterable, it can be printed by transforming it to a list, as I did in the Python prompt examples shown above. Another way to use this method that is more practical for a language parser is to use it along with the <code>next()</code> function from Python. Here is how that works, still in the Python console:</p>
<pre><code>&gt;&gt;&gt; p = My('''print 1
... print 52
... ''')
&gt;&gt;&gt; token_feed = p.tokens()
&gt;&gt;&gt; next(token_feed)
('print',)
&gt;&gt;&gt; next(token_feed)
('number', 1)
&gt;&gt;&gt; next(token_feed)
('\n',)
&gt;&gt;&gt; next(token_feed)
('print',)
&gt;&gt;&gt; next(token_feed)
('number', 52)
&gt;&gt;&gt; next(token_feed)
('\n',)
&gt;&gt;&gt; next(token_feed)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p>Here the <code>token_feed</code> variable is assigned the iterator returned by the <code>tokens()</code> method. Then each time the <code>next()</code> function is called with this iterator as an argument, another token is returned. When all the tokens have been returned, the <code>StopIteration</code> exception is raised. This is going to be the basis of how the parser will communicate with the lexer to ask for tokens. The <code>next_token()</code> method of the <code>My</code> class, shown below, will be used for this task:</p>
<pre><code>class My:
    def __init__(self, code):
        self.code = code
        self.line_nr = 0
        self.token_feed = self.tokens()

    # ...

    def next_token(self):
        try:
            token = next(self.token_feed)
        except StopIteration:
            token = None
        return token
</code></pre>
<p>In the constructor, the <code>token_feed</code> attribute is initialized with the token iterator. The <code>next_token()</code> method then returns tokens from this iterator one by one. When the end of the token stream is reached, the method catches the <code>StopIteration</code> exception and returns <code>None</code> instead, which the parser will interpret as having reached the end of the code.</p>
<p>To evaluate if the token stream matches a certain rule, it is often useful for the parser to "look ahead" for the next token, before it is certain if the rule under consideration is a match or not. The <code>next_token()</code> method shown above returns the next token, but at the same time it consumes it, meaning that once a token has been returned it has to be used or else it is lost. What would be most useful is if the parser could change its mind with regards to a token and return it to the stream, so that then another rule in the parser can get it when it calls <code>next_token()</code>.</p>
<p>The idea of being able to take the next token and optionally returning it to the stream is implemented below in the <code>return_token()</code> method:</p>
<pre><code>class My:
    def __init__(self, code):
        self.code = code
        self.line_nr = 0
        self.token_feed = self.tokens()
        self.returned_token = None

    # ...

    def next_token(self):
        if self.returned_token:
            token = self.returned_token
            self.returned_token = None
        else:
            try:
                token = next(self.token_feed)
            except StopIteration:
                token = None
        return token

    def return_token(self, token):
        if self.returned_token is not None:
            raise RuntimeError('Cannot return more than one token at a time')
        self.returned_token = token
</code></pre>
<p>In this version of the <code>My</code> class, a <code>returned_token</code> attribute is initialized to <code>None</code>. If a token provided by <code>next_token()</code> cannot be used, the parser can give it back with a call to <code>return_token()</code>, so that the same token is returned the next time <code>next_token()</code> is called. This creates a complication, because there is no easy way to return an item to an iterator. My implementation puts the returned token in the new <code>returned_token</code> attribute. The <code>next_time()</code> implementation is now expanded to return this token instead of the next one from the iterator. With this little trick the parser can retrieve a token, do some work with it and then change its mind and return it. One side effect of this implementation is that it is only possible to return one token, so a <code>RuntimeError</code> is raised if two tokens are returned in a row.</p>
<p>Save the above changes to the <em>my.py</em> file, and then start a new Python session to play with the new token methods:</p>
<pre><code>&gt;&gt;&gt; from my import My
&gt;&gt;&gt; p = My('''print 1
... print 52
... ''')
&gt;&gt;&gt; p.next_token()
('print',)
&gt;&gt;&gt; p.next_token()
('number', 1)
&gt;&gt;&gt; p.return_token(('number', 1))
&gt;&gt;&gt; p.next_token()
('number', 1)
&gt;&gt;&gt; p.next_token()
('\n',)
</code></pre>
<p>Hopefully this example clarifies how the parser is going to manage the token stream.</p>
<h2>The Parser</h2>
<p>The task of the parser is to match the sequence of tokens to the language grammar. For each rule in the grammar, there is going to be a method that determines if the token stream matches the rule or not.</p>
<p>Here is the first rule in the language grammar:</p>
<pre><code>&lt;program&gt; = &lt;statement&gt; [ &lt;statement&gt; ... ]
</code></pre>
<p>As a naming convention, I'm going to use the rule names in the parsing methods. The rule is named <code>&lt;program&gt;</code>, so I'm going to call the method that parses it <code>parse_program()</code>. Another convention is that all the methods that parse rules will return <code>True</code> if they were able to match the rule to the incoming tokens, or <code>False</code> if not. A return of <code>False</code> would tell the caller that this rule isn't present in the stream.</p>
<p>The <code>&lt;program&gt;</code> rule is a high-level rule that is defined in terms of other rules, and while this may appear to complicate things, in fact it is all the contrary, because any references to other rules are addressed by calling the methods of the other rules.</p>
<p>I think the best way to understand what I mean here is to look at the definition of the <code>parse_program()</code> method:</p>
<pre><code>class My:
    # ...

    def parse_program(self):
        if not self.parse_statement():
            self.raise_error('Expected: statement')
        token = self.next_token()
        while token is not None:
            self.return_token(token)
            if not self.parse_statement():
               self.raise_error('Expected: statement')
            token = self.next_token()
        return True
</code></pre>
<p>The <code>&lt;program&gt;</code> rule says that the very first thing to look for is something that matches the <code>&lt;statement&gt;</code> rule. This is implemented by calling a <code>parse_statement()</code> method (which does not exist yet). Like all the methods that implement the parsing of a rule, the return value of the call indicates if the parsing was successful or not. When parsing the <code>&lt;program&gt;</code> rule, a failure to parse a first statement indicates that the program is incorrect, as there are no alternative rules that can be considered instead. For that reason, if the initial statement cannot be parsed, that is considered an error that halts the parsing.</p>
<p>After the first statement, a <code>&lt;program&gt;</code> rule allows one or more optional statements, until the end of the program is reached. This means that after parsing the first statement, the parser for <code>&lt;program&gt;</code> needs to consider one of two possible paths, both valid:</p>
<ol>
<li>There is another statement in the token stream</li>
<li>There are no more tokens, meaning that the end of the program was reached</li>
</ol>
<p>To decide which of the two paths is the one that matches the input stream of tokens, the next token is obtained. If this token is not <code>None</code>, that means that there are more statements in the program. In that case, the token is returned to the stream and another call to <code>parse_statement()</code> is made to parse the next statement. Returning the token to the stream is important, because this token needs to be available to the <code>parse_statement()</code> method.</p>
<p>When the end of the program is reached, the next token is going to be <code>None</code>, and this will cause the while-loop to exit. At this point the program has been completely parsed!</p>
<p>But of course, the parser is still incomplete, as there are three more rules that need to be implemented. Let's look at the second rule:</p>
<pre><code>&lt;statement&gt; = &lt;print_statement&gt; "\n"
</code></pre>
<p>Here is the <code>parse_statement()</code> method that implements this rule:</p>
<pre><code>class My:
    # ...

    def parse_statement(self):
        if not self.parse_print_statement():
            self.raise_error('Expected: print statement')
        token = self.next_token()
        if token[0] != '\n':
            self.raise_error('Expected: end of line')
        return True
</code></pre>
<p>This actually makes sense, right? A statement is composed of a print statement followed by an end-of-line token. If either of them aren't present, then errors are reported. To check for the <code>&lt;print_statement&gt;</code> rule, a call to the <code>parse_print_statement()</code> is made. The check for the end-of-line token does not require any method calls because it can be done with a simple comparison.</p>
<p>There are two rules left to implement:</p>
<pre><code>&lt;print_statement&gt; = "print" &lt;expression&gt;
&lt;expression&gt; = number
</code></pre>
<p>Here are the corresponding parsing methods:</p>
<pre><code>class My:
    # ...

    def parse_print_statement(self):
        token = self.next_token()
        if token[0] != 'print':
            self.return_token(token)
            return False
        if not self.parse_expression():
            self.raise_error('Expected: expression')
        return True

    def parse_expression(self):
        token = self.next_token()
        if token[0] != 'number':
            self.return_token(token)
            return False
        return True
</code></pre>
<p>A difference in these two parsing methods is that when they don't recognize the first token they put the token back on the stream and then return <code>False</code>, whereas the previous two rules raised errors. When a rule returns <code>False</code>, it is giving the parent rule the option to attempt to call other rules before giving up with an error. This is a sensible thing to do in lower level rules, because they do not have the context to know if there are other alternatives that the parent rule can explore.</p>
<p>It may sound hard to believe, but this is all there is to the parser module of the <code>my</code> language. To tie the collection of rules together, let's add a <code>run()</code> method that runs the program through the parser:</p>
<pre><code>class My:
    # ...

    def run(self):
        try:
            return self.parse_program()
        except ValueError as exc:
            print(str(exc))
            return False
</code></pre>
<p>This method catches the <code>ValueError</code> exception that is raised for various error conditions when the <code>raise_error()</code> method is invoked. When an error occurs, the error message is printed, and then the <code>run()</code> method returns <code>False</code>, to indicate that the program failed.</p>
<p>You can try parsing some simple programs in the Python prompt:</p>
<pre><code>&gt;&gt;&gt; from my import My
&gt;&gt;&gt; p = My('''print 1
... print 52
... ''')
&gt;&gt;&gt; p.run()
True
</code></pre>
<p>This returns a simple <code>True</code>, but that means a lot. It means that all the tokens found in this program were found to comply with the rules of the grammar of the language. Let's try some invalid programs to see how the output changes:</p>
<pre><code>&gt;&gt;&gt; p = My('''print 1
... print
... ''')
&gt;&gt;&gt; p.run()
2: Expected: expression
False
</code></pre>
<p>In this example, I have omitted the argument to <code>print</code> in line 2. The error reports this mistake, and the top-level <code>run()</code> method returns <code>False</code>, to indicate that the program did not parse.</p>
<p>Let's try another one:</p>
<pre><code>&gt;&gt;&gt; p = My('''print 1 2
... ''')
&gt;&gt;&gt; p.run()
1: Expected: end of line
False
</code></pre>
<p>For this second error, I added an extra number at the end of the print statement in line 1, and the parser indicates that an end-of-line was expected there. Fantastic!</p>
<h2>The Interpreter</h2>
<p>The parser for the first version of the language is now complete, so now it is time to evaluate the options for the remaining work:</p>
<ul>
<li>One option is to define a set of low-level coding instructions and then add code generation of these instructions to the parsing methods. Then separately from that, build an interpreter the runs these instructions.</li>
<li>A second option is to directly implement the code execution logic within the parsing methods, without generating intermediate instructions.</li>
</ul>
<p>To keep things simple, I'm going to go with the second option, which is a good option for smaller languages.</p>
<p>In terms of implementing the program execution for this language, the secret technique that makes it possible is the <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">stack</a>. A stack is a primitive data structure that supports two main operations, <em>push</em> and <em>pop</em>, to add and remove elements respectively. The interesting aspect is that elements are removed in reverse order to how they were added, which is the same as saying that the last element in is the first element out (LIFO). The stack is at the core of pretty much all execution environments for programming languages.</p>
<p>Here is a very simple execution stack implementation for the <code>my</code> language:</p>
<pre><code>class My:
    def __init__(self, code):
        self.code = code
        self.line_nr = 0
        self.token_feed = self.tokens()
        self.returned_token = None
        self.stack = []

    # ...

    def stack_push(self, arg):
        self.stack.append(arg)

    def stack_pop(self):
        return self.stack.pop()
</code></pre>
<p>How is the stack used? It's simple. Rules such as <code>&lt;expression&gt;</code>, which have a resulting value after they are parsed, push this result to the stack. Rules such as <code>&lt;print_statement&gt;</code>, which consume a value, pop a value from the stack. Let's implement the stack in these two rules:</p>
<pre><code>class My:
    # ...

    def parse_print_statement(self):
        token = self.next_token()
        if token != ('print',):
            self.return_token(token)
            return False
        if not self.parse_expression():
            self.raise_error('Expected expression')

        value = self.stack_pop()
        print(value)
        return True

    def parse_expression(self):
        token = self.next_token()
        if token[0] != 'number':
            self.return_token(token)
            return False

        self.stack_push(token[1])
        return True

    # ...
</code></pre>
<p>After a successful parse of the <code>&lt;expression&gt;</code> rule, and before returning <code>True</code>, the value associated with the expression is pushed to the stack. For the simplistic expressions in the current version of the language, the number to push is given as the second value in the <code>number</code> token tuple.</p>
<p>The <code>&lt;print_statement&gt;</code> rule, which needs a value to print, pops a value from the stack and prints it. This is all it takes to execute the print statement!</p>
<p>In case you are wondering, the LIFO property of the stack prevents values from different statements from ever getting mixed up. Even with complicated mathematical expressions, the stack is able to maintain the running state of the application, with every expression being consumed by the proper owner.</p>
<h2>Running Programs Stored on Files</h2>
<p>The <code>my</code> language is somewhat useless as it can only print numbers, but it is a very good base to continue building from. Before I end this first part, it would be convenient to make the <code>my</code> language work with programs stored in files on disk. This can be implemented at the bottom of <em>my.py</em>:</p>
<pre><code>import sys

class My:
    # ...

if __name__ == '__main__':
    with open(sys.argv[1], 'rt') as f:
        code = f.read()
    program = My(code)
    program.run()
</code></pre>
<p>Now you can create silly programs that print numbers, store them in a file and execute them. For example, write the following program in a file called <em>test.my</em>:</p>
<pre><code>print 1
print 52
</code></pre>
<p>Then run the program as follows:</p>
<pre><code>$ python my.py test.my
1
52
</code></pre>
<p>Very cool!</p>
<p>In the <a href="https://blog.miguelgrinberg.com/post/building-a-toy-programming-language-in-python-part-2">second part</a> of this tutorial, I'll show you how to extend the <code>my</code> language to support variables and mathematical expressions.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My Meeting with David Bohm (106 pts)]]></title>
            <link>https://johnhorgan.org/cross-check/my-meeting-with-david-bohm-tormented-quantum-visionary</link>
            <guid>36561991</guid>
            <pubDate>Sun, 02 Jul 2023 14:52:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://johnhorgan.org/cross-check/my-meeting-with-david-bohm-tormented-quantum-visionary">https://johnhorgan.org/cross-check/my-meeting-with-david-bohm-tormented-quantum-visionary</a>, See on <a href="https://news.ycombinator.com/item?id=36561991">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-block-type="2" id="block-e52f82f2667c20f5a522">
  <p><em>Some scientists seek to clarify reality, others to mystify it. Physicist David Bohm seemed driven by both impulses. He is renowned for promoting a sensible (according to experts like Einstein, John Bell and philosopher Tim Maudlin) interpretation of quantum mechanics. But Bohm also asserted that science can never fully explain the world, and his 1980 book Wholeness and the Implicate Order veers into spirituality. Bohm’s interpretation of quantum mechanics has attracted increasing attention lately. He is the hero, for example, of Adam Becker’s book What Is Real: The Unfinished Quest for the Meaning of Quantum Mechanics. In </em><a href="https://www.amazon.com/End-Science-Knowledge-Twilight-Scientific/dp/0465065929/"><em>The End of Science</em></a><em>, I tried to make sense of this paradoxical truth-seeker, who died in 1992 at the age of 74. Below is an edited version of my take on Bohm. –John Horgan</em></p><p>In August 1992, when I visit David Bohm at his home outside London, his skin is alarmingly pale, especially in contrast to his purplish lips and dark, wiry hair. His frame, sinking into a large armchair, seems limp, languorous, and yet suffused with nervous energy. One hand cups the top of his head, the other grips an armrest. His fingers, long and blue-veined, with tapered, yellow nails, are splayed. He is recovering, he says, from a heart attack. </p><p>Bohm’s wife brings us tea and biscuits and vanishes. Bohm speaks haltingly at first, then faster and faster, in a low monotone, with ancient-Mariner urgency. His mouth must be dry, because he keeps smacking his lips. Occasionally, he pulls his lips back from his teeth in a grimace-smile. He has the disconcerting habit of pausing every few sentences and asking, “Is that clear?” or simply, “Hmmm?” I am often so hopelessly befuddled that I just smile and nod. But Bohm can be bracingly clear, too. He oscillates in and out of focus, like an exotic quantum particle.</p><p>Born (in 1917) and raised in the U.S., Bohm left in 1951, the height of anti-communist hysteria, after refusing to answer a Congressional committee’s questions about his ties to communism. After stays in Brazil and Israel, he settled in England. Bohm was a scientific dissident too. He rebelled against the so-called Copenhagen interpretation of quantum mechanics promulgated by Danish physicist Niels Bohr.</p><p>According to the Copenhagen interpretation, a quantum entity such as an electron has no definite existence apart from our observation of it. We cannot say with certainty whether it is a wave or particle. The interpretation also rejects the possibility that the seemingly probabilistic behavior of quantum systems stems from underlying, deterministic mechanisms. </p><p>Bohm rejected that view. “The whole idea of science so far has been to say that underlying the phenomenon is some reality which explains things,” he explains to me. “It was not that Bohr denied reality, but he said quantum mechanics implied there was nothing more that could be said about it.” Such a view reduces quantum mechanics to “a system of formulas that we use to make predictions or to control things technologically. I said that's not enough. I don’t think I would be very interested in science if that were all there was.”</p><p>In 1952 Bohm proposed a model that builds upon one invented by Louis de Broglie in the 1920s. Particles are particles at all times, not just when observed in a certain way, and their behavior is determined by a force called the “pilot wave.” Any effort to observe a particle alters its behavior by disturbing the pilot wave. Bohm thus gave the uncertainty principle a purely physical rather than metaphysical meaning. Niels Bohr had interpreted the uncertainty principle as meaning “not that there is uncertainty, but that there is an inherent ambiguity” in a quantum system, Bohm says.</p><p>Bohm’s interpretation gets rid of one quantum paradox, wave/particle duality, while doubling down on another, nonlocality, the capacity of one particle to influence another instantaneously across vast distances. Einstein drew attention to nonlocality in 1935 in an effort to show that quantum mechanics must be flawed. Together with Boris Podolsky and Nathan Rosen, Einstein proposed a thought experiment involving two particles that spring from a common source and fly in opposite directions.</p><p>According to the standard model of quantum mechanics, neither particle has fixed properties, such as spin, before it is measured. Upon measuring one particle’s spin, the physicist instantaneously determines the spin of the other particle, no matter how distant. Deriding this effect as “spooky action at a distance,” Einstein argued that quantum mechanics must be flawed or incomplete. But in 1980 French physicists demonstrated spooky action in a laboratory. Bohm never doubted the experiment’s outcome. “It would have been a terrific surprise to find out otherwise,” he says.</p><p>But here is the paradox of Bohm: Although he tries to make the world more sensible with his pilot-wave model, he also argues that complete clarity is impossible. He reached this conclusion after seeing an experiment on television, in which a drop of ink is squeezed onto a cylinder of glycerin. When the cylinder is rotated, the ink diffuses through the glycerin in an apparently irreversible fashion. Its order seems to have disintegrated. But when the direction of rotation is reversed, the ink gathers into a drop again.</p><p>The experiment inspired Bohm to write <em>Wholeness and the Implicate Order</em>, published in 1980. Beneath physical appearances, the “explicate order,” he argues in the book, there lies a hidden “implicate order.” Applying this concept to the quantum realm, Bohm conjectures that the implicate order is a field consisting of infinite fluctuating pilot waves. The overlapping of these waves generates what appear to us as particles, which constitute the explicate order. Even space and time might be manifestations of a deeper, implicate order, according to Bohm.</p><p>To plumb the implicate order, Bohm says, physicists might need to jettison basic assumptions about nature. During the Enlightenment, thinkers such as Newton and Descartes replaced the ancients’ organic concept of order with a mechanistic view. Even after the advent of relativity and quantum mechanics, “the basic idea is still the same,” Bohm tells me, "a mechanical order described by coordinates.”</p><p>Bohm hopes scientists will eventually move beyond mechanistic and even mathematical paradigms. “We have an assumption now that’s getting stronger and stronger that mathematics is the only way to deal with reality,” Bohm says. “Because it’s worked so well for a while, we’ve assumed that it has to be that way.”</p><p>Someday, science and art will merge, Bohm predicts. “This division of art and science is temporary,” he observes. “It didn't exist in the past, and there’s no reason why it should go on in the future.” Just as art consists not simply of works of art but of an “attitude, the artistic spirit,” so does science consist not in the accumulation of knowledge but in the creation of fresh modes of perception. “The ability to perceive or think differently is more important than the knowledge gained.”</p><p>Bohm rejects the claim of Stephen Hawking and others that physics can achieve a final theory, or “theory of everything,” that explains the world. Science is an infinite, “inexhaustible process,” Bohm says. “The form of knowledge is to have at any moment something essential, and the appearance can be explained. But then when we look deeper at these essential things, they turn out to have some feature of appearances. We're not ever going to get a final essence which isn't also the appearance of something.”</p><p>Bohm fears belief in a final theory might become self-fulfilling. “If you have fish in a tank and you put a glass barrier in there, the fish keep away from it,” he says. “And then if you take away the glass barrier, they never cross the barrier, and they think the whole world is that.” He chuckles and shows me his smile-grimace. “So your thought that this is the end could be the barrier to looking further.” Trying to convince me that final knowledge is unattainable, Bohm says the following:</p><p><em>Anything known has to be determined by its limits. And that’s not just quantitative but qualitative. The theory is this and not that. Now it’s consistent to propose that there is the unlimited. You have to notice that if you say there is the unlimited, it cannot be different, because then the unlimited will limit the limited, by saying that the limited is not the unlimited, right? The unlimited must include the limited. We have to say, from the unlimited the limited arises, in a creative process. That’s consistent. Therefore we say that no matter how far we go there is the unlimited. It seems that no matter how far you go, somebody will come up with another point you have to answer. And I don’t see how you could ever settle that.</em></p><p>To my relief, Bohm’s wife enters the room and asks if we want more tea. As she refills my cup, I spot a book on Buddhism in a bookcase and ask if Bohm is interested in spirituality. He nods. He was close to Jiddu Krishnamurti, an Indian sage who taught westerners how to achieve the supreme spiritual state called enlightenment. Was Krishnamurti enlightened? “In some ways, yes,” Bohm replies. “His basic thing was to go into thought, to get to the end of it, completely, and thought would become a different kind of consciousness.”</p><p>Of course, Bohm says, you can never truly plumb your own mind; any attempt to examine your thought changes it--just as the measurement of an electron alters its course. We cannot achieve final self-knowledge, Bohm seems to imply, any more we can achieve a final theory of physics.</p><p>Was Krishnamurti a happy person? Bohm seems puzzled by my question. “That's hard to say,” he replies. “He was unhappy at times, but I think he was pretty happy overall. The thing is not about happiness, really.” Bohm frowns, as if realizing the import of what he has just said.</p><p>I say goodbye to Bohm and his wife and depart. Outside, a light rain is falling. I walk up the path to the street and glance back at Bohm's house, a modest white-painted cottage on a street of modest white-painted cottages.</p><p>In <em>Wholeness and the Implicate Order</em>, Bohm insists on the importance of “playfulness” in science, and in life, but Bohm, in his writings and in person, was anything but playful. For him, truth-seeking was not a game, it was a dreadful, impossible, necessary task. Bohm was desperate to know, to discover the secret of everything, but he knew it wasn’t attainable, not for any mortal being. No one leaves the fish tank alive.</p><p>Two months after our meeting, Bohm died of a heart attack.</p><p><em>Further Reading</em>:</p><p>See my free online book <a href="https://johnhorgan.org/books/my-quantum-experiment"><em>My Quantum Experiment</em></a> as well as my profile of <a href="https://blogs.scientificamerican.com/cross-check/do-our-questions-create-the-world/">another quantum visionary, John Wheeler</a>.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Parsing time stamps faster with SIMD instructions (199 pts)]]></title>
            <link>https://lemire.me/blog/2023/07/01/parsing-time-stamps-faster-with-simd-instructions/</link>
            <guid>36561974</guid>
            <pubDate>Sun, 02 Jul 2023 14:50:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lemire.me/blog/2023/07/01/parsing-time-stamps-faster-with-simd-instructions/">https://lemire.me/blog/2023/07/01/parsing-time-stamps-faster-with-simd-instructions/</a>, See on <a href="https://news.ycombinator.com/item?id=36561974">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>In software, it is common to represent time as a time-stamp string. It is usually specified by a time format string. <a href="https://datatracker.ietf.org/doc/html/rfc4034#section-3.2">Some standards</a> use the format <tt>%Y%m%d%H%M%S</tt> meaning that we print the year, the month, the day, the hours, the minutes and the seconds. The current time as I write this blog post would be <tt>20230701205436</tt> as a time stamp in this format. It is convenient because it is short, easy to read and if you sort the strings lexicographically, you also sort them chronologically.</p>
<p>You can generate time stamps using any programming language. In C, the following program will print the current time (universal, not local time):</p>
<pre><span>#</span><span>include </span><span>&lt;</span><span>time.h</span><span>&gt;</span>
<span>#</span><span>include </span><span>&lt;</span><span>stdio.h</span><span>&gt;</span>
<span>int</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
<span>  char</span> buffer<span>[</span><span>15</span><span>]</span><span>;</span>
<span>  struct</span> <span>tm</span> timeinfo<span>;</span>
<span>  time_t</span> rawtime<span>;</span>
<span>  time</span><span>(</span><span>&amp;</span>rawtime<span>)</span><span>;</span>
  gmtime_r<span>(</span><span>&amp;</span>rawtime<span>,</span> <span>&amp;</span>timeinfo<span>)</span><span>;</span>
<span>  size_t</span> len <span>=</span> <span>strftime</span><span>(</span>buffer<span>,</span> <span>15</span><span>,</span> <span>"</span><span>%Y%m</span><span>%d</span><span>%H%M</span><span>%S</span><span>"</span><span>,</span> <span>&amp;</span>timeinfo<span>)</span><span>;</span>
  buffer<span>[</span><span>14</span><span>]</span> <span>=</span> <span>'\0'</span><span>;</span>
<span>  puts</span><span>(</span>buffer<span>)</span><span>;</span>
<span>}</span>
</pre>
<p>We are interested in the problem of parsing these strings. In practice, this means that we want to convert them to an integer presenting the number of seconds since the Unix epoch. The Unix epoch is January 1st 1970. For my purposes, I will consider the time to be an unsigned 32-bit integer so we can represent time between 1970 and 2106. It is not difficult to switch over to a 64-bit integer or to signed integers.</p>
<p>The way you typically solve this problem is to use something like the C function <tt>strptime</tt>. Can we do better?</p>
<p>Modern processors have fast instructions that operate on several words at once, called SIMD instructions. We have a block of 14 characters. Let us assume that we can read 16 characters safely, ignoring the content of the leftover characters.</p>
<p>We load the block of digits in a SIMD register. We subtract 0x30 (the code point value of the character ‘0’), and all bytes values should be between 0 and 9, inclusively. We know that some character must be smaller than 9, for example, we cannot have more than 59 seconds and never 60 seconds, in the time stamp string. So one character must be between 0 and 5. Similarly, we start the hours at 00 and end at 23, so one character must be between 0 and 2. We do a saturating subtraction of the maximum: the result of such a subtraction should be zero if the value is no larger. We then use a special instruction to multiply one byte by 10, and sum it up with the next byte, getting a 16-bit value. We then repeat the same approach as before, checking that the result is not too large.</p>
<p>The code might look as follow using Intel intrinsic functions:</p>
<pre> __m128i v <span>=</span> _mm_loadu_si128<span>(</span><span>(</span><span>const</span> __m128i <span>*</span><span>)</span>date_string<span>)</span><span>;</span>
v <span>=</span> _mm_sub_epi8<span>(</span>v<span>,</span> _mm_set1_epi8<span>(</span><span>0x30</span><span>)</span><span>)</span><span>;</span>
__m128i limit <span>=</span>
_mm_setr_epi8<span>(</span><span>9</span><span>,</span> <span>9</span><span>,</span> <span>9</span><span>,</span> <span>9</span><span>,</span> <span>1</span><span>,</span> <span>9</span><span>,</span> <span>3</span><span>,</span> <span>9</span><span>,</span> <span>2</span><span>,</span> <span>9</span><span>,</span> <span>5</span><span>,</span> <span>9</span><span>,</span> <span>5</span><span>,</span> <span>9</span><span>,</span> <span>-</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>;</span>
__m128i abide_by_limits <span>=</span> _mm_subs_epu8<span>(</span>v<span>,</span> limit<span>)</span><span>;</span> <span>// must be all zero</span>
<span>const</span> __m128i weights <span>=</span> _mm_setr_epi8<span>(</span>
<span>10</span><span>,</span> <span>1</span><span>,</span> <span>10</span><span>,</span> <span>1</span><span>,</span> <span>10</span><span>,</span> <span>1</span><span>,</span> <span>10</span><span>,</span> <span>1</span><span>,</span> <span>10</span><span>,</span> <span>1</span><span>,</span> <span>10</span><span>,</span> <span>1</span><span>,</span> <span>10</span><span>,</span> <span>1</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>)</span><span>;</span>
v <span>=</span> _mm_maddubs_epi16<span>(</span>v<span>,</span> weights<span>)</span><span>;</span>
__m128i limit16 <span>=</span>
_mm_setr_epi16<span>(</span><span>99</span><span>,</span><span>99</span><span>,</span> <span>12</span><span>,</span> <span>31</span><span>,</span> <span>23</span><span>,</span> <span>59</span><span>,</span> <span>59</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>;</span>
__m128i abide_by_limits16 <span>=</span> _mm_subs_epu16<span>(</span>v<span>,</span> limit16<span>)</span><span>;</span>
__m128i limits <span>=</span> _mm_or_si128<span>(</span>abide_by_limits16<span>,</span>abide_by_limits<span>)</span><span>;</span>
<span>if</span> <span>(</span><span>!</span>_mm_test_all_zeros<span>(</span>limits<span>,</span> limits<span>)</span><span>)</span> <span>{</span>
<span>  return</span> false<span>;</span>
<span>}</span>

</pre>
<p>It does not get all the parsing done, but at this point, you have the months, days, hours, minutes and seconds as valid binary integer values. The year is parsed in two components (the first two digits, and the next two digits).</p>
<p>We can just use standard C code for the result.</p>
<p>Is it fast? I wrote a benchmark that I compile using GCC 12 on an Intel Ice Lake Linux server.</p>
<table>
<tbody>
<tr>
<th></th>
<th>instructions per stamp</th>
<th>time per stamp</th>
</tr>
<tr>
<td>standard C with <tt>strptime</tt></td>
<td>700</td>
<td>46</td>
</tr>
<tr>
<td>SIMD approach</td>
<td>65</td>
<td>7.9</td>
</tr>
</tbody>
</table>
<p>We use about 10 times fewer instructions, and we go 6 times faster. That is not bad, but I suspect it is not nearly optimal.</p>
<p><a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2023/07/01">The source code is available</a>.</p>
<p><strong>Credit</strong>: Thanks to Jeroen Koekkoek from NLnetLabs for initial work and for proposing the problem, and to @aqrit for sketching the current code.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A curated list of Emacs Lisp development resources (108 pts)]]></title>
            <link>https://github.com/p3r7/awesome-elisp</link>
            <guid>36561897</guid>
            <pubDate>Sun, 02 Jul 2023 14:41:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/p3r7/awesome-elisp">https://github.com/p3r7/awesome-elisp</a>, See on <a href="https://news.ycombinator.com/item?id=36561897">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><div dir="auto"><p><a href="https://github.com/p3r7/awesome-elisp"><img alt="Emacs Logo" width="240" height="240" src="https://camo.githubusercontent.com/1a6b6ba74a3a29246f56caf18a3a758ac6f6735cac2f0baf5737cd2962550386/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30382f456d61637349636f6e2e737667" data-canonical-src="https://upload.wikimedia.org/wikipedia/commons/0/08/EmacsIcon.svg"></a></p><h2 tabindex="-1" dir="auto">Awesome Elisp</h2>
</div>
<p dir="auto">Welcome to <i>Awesome Elisp</i>, a list of resources linked to Emacs Lisp (Elisp) development.</p>
<p dir="auto">Its aim is to not be a simple index but a <i>compendium</i>: resources are not only listed but also commented.</p>
<p dir="auto">It tries to be as exhaustive as possible.</p>
<p dir="auto">For a more general index related to all-things Emacs, use <a href="https://github.com/emacs-tw/awesome-emacs">Awesome Emacs</a>.</p>
<h2 tabindex="-1" dir="auto">Table of Contents</h2>
<blockquote>
  <ul dir="auto">
    <li><a href="#what-is-elisp">What is Elisp?</a></li>
    <li><a href="#iconography">Iconography</a></li>
    <li><a href="#resources">Resources</a>
      <ul dir="auto">
        <li><a href="#entry-level">Entry-level</a></li>
        <li><a href="#advanced">Advanced</a></li>
        <li><a href="#cookbooks">Cookbooks</a></li>
        <li><a href="#on-package-authoring">On Package Authoring</a></li>
        <li><a href="#contributing-to-emacs">Contributing to Emacs</a></li>
      </ul>
    </li>
    <li><a href="#development-tools">Development Tools</a>
      <ul dir="auto">
        <li><a href="#interactive-development--debugging">Interactive Development &amp; Debugging</a></li>
        <li><a href="#documentation--introspection">Documentation &amp; Introspection</a></li>
        <li><a href="#code-editing">Code Editing</a>
          <ul dir="auto">
            <li><a href="#jump-to-definition">Jump to definition</a></li>
            <li><a href="#search--replace">Search &amp; Replace</a></li>
            <li><a href="#editing">Editing</a></li>
            <li><a href="#editing-s-exps">Editing S-exps</a></li>
            <li><a href="#refactoring">Refactoring</a></li>
            <li><a href="#formatting">Formatting</a></li>
          </ul>
        </li>
        <li><a href="#testing">Testing</a></li>
        <li><a href="#profiling">Profiling</a></li>
        <li><a href="#validation">Validation</a></li>
        <li><a href="#building">Building</a></li>
        <li><a href="#syntax-highlighting--visual-enhancements">Syntax Highlighting &amp; Visual Enhancements</a></li>
        <li><a href="#pretty-printing">Pretty Printing</a></li>
      </ul>
    </li>
    <li><a href="#libraries">Libraries</a>
      <ul dir="auto">
        <li><a href="#core--general-purpose">Core / General Purpose</a></li>
        <li><a href="#data-structures">Data Structures</a>
          <ul dir="auto">
            <li><a href="#strings">Strings</a></li>
            <li><a href="#sequences">Sequences</a></li>
            <li><a href="#maps">Maps</a></li>
            <li><a href="#custom-types--oop">Custom Types &amp; OOP</a></li>
            <li><a href="#date--time">Date &amp; Time</a></li>
            <li><a href="#tables">Tables</a></li>
            <li><a href="#queues">Queues</a></li>
            <li><a href="#rings">Rings</a></li>
            <li><a href="#trees">Trees</a></li>
            <li><a href="#parsers--parse-trees">Parsers &amp; Parse Trees</a></li>
            <li><a href="#xmlhtml">XML/HTML</a></li>
            <li><a href="#org-mode-outlines">Org-mode outlines</a></li>
            <li><a href="#color-codes">Color Codes</a></li>
          </ul>
        </li>
        <li><a href="#concurrency--asynchronicity">Concurrency / Asynchronicity</a>
          <ul dir="auto">
            <li><a href="#timers">Timers</a></li>
            <li><a href="#promises--delays">Promises &amp; Delays</a></li>
            <li><a href="#async-elisp-function-calls">Async Elisp function calls</a></li>
            <li><a href="#async-sub-processes">Async sub-processes</a></li>
            <li><a href="#async-interpreter-commands">Async interpreter commands</a></li>
          </ul>
        </li>
        <li><a href="#buffer-manipulation">Buffer Manipulation</a></li>
        <li><a href="#filesystem-interactions">Filesystem Interactions</a></li>
        <li><a href="#networking">Networking</a>
          <ul dir="auto">
            <li><a href="#http-client">HTTP client</a></li>
            <li><a href="#http-server">HTTP server</a></li>
            <li><a href="#rpc-server">RPC server</a></li>
            <li><a href="#d-bus">D-Bus</a></li>
          </ul>
        </li>
        <li><a href="#database-access">Database Access</a></li>
        <li><a href="#gui">GUI</a>
          <ul dir="auto">
            <li><a href="#popups">Popups</a></li>
            <li><a href="#overlays">Overlays</a></li>
            <li><a href="#charts--diagrams">Charts &amp; diagrams</a></li>
          </ul>
        </li>
      </ul>
    </li>
    <li><a href="#heroes">Heroes</a></li>
    <li><a href="#contributing">Contributing</a></li>
    <li><a href="#license">License</a></li>
  </ul>
</blockquote>
<h2 tabindex="-1" dir="auto">What is Elisp?</h2>
<p dir="auto">Elisp is short for <i>Emacs Lisp</i>, a dialect of <a href="https://en.wikipedia.org/wiki/Lisp_programming_language" rel="nofollow">Lisp</a> specific to Emacs.</p>
<p dir="auto">If you’re a fresh Emacs user, you’ve certainly practiced it a bit by editing your <code>init.el</code> (i.e. configuration).</p>
<p dir="auto">You may also have spotted that most <i>packages</i> (i.e. plugins) available to Emacs are written in pure Elisp.</p>
<p dir="auto">In fact, Elisp is not limited to extending Emacs functionalities: a good chunk (and <a href="https://archive.fosdem.org/2020/schedule/event/emacsthoughts/" rel="nofollow">admittedly not enough</a>) of Emacs is written in it.</p>
<p dir="auto">This means that any user can browse, extend or even override core Emacs functionalities at runtime.</p>
<p dir="auto">As such, in essence, Emacs is <a href="https://www.eigenbahn.com/2020/01/12/emacs-is-no-editor" rel="nofollow">not an editor</a> but more a platform allowing users to write text-based apps.</p>
<p dir="auto">Being an editor is not its intrinsic nature but merely a feature.</p>
<p dir="auto">Learning Elisp will up your Emacs game tremendously, unlocking its full potential by writing functionalities either for your personal needs or to share with the world.</p>
<p dir="auto">As an added bonus, it’s great fun.</p>
<h2 tabindex="-1" dir="auto">Iconography</h2>

<h2 tabindex="-1" dir="auto">Resources</h2>
<h2 tabindex="-1" dir="auto">Entry-level</h2>
<h3 tabindex="-1" dir="auto">An Introduction to Programming in Emacs Lisp</h3>
<p dir="auto"><a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html" rel="nofollow">read online</a></p>
<p dir="auto">Also comes bundled with Emacs.
  Just <code>C-h i</code> (or <code>M-x info</code>) and open <code>Emacs Lisp Intro</code>.</p>
<p dir="auto">A bit scholarly. Not the easiest read.</p>
<h3 tabindex="-1" dir="auto">Emacs In A Box - Elisp Programming</h3>
<p dir="auto"><a href="http://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Programming.html" rel="nofollow">read online</a>, <a href="https://github.com/caiorss/Emacs-Elisp-Programming/blob/master/Elisp_Programming.org">source</a></p>
<p dir="auto">Very complete and gentle introduction.</p>
<p dir="auto">Written by <a href="#caio-rordrigues-caiorss">Caio Rordrigues (@caiorss)</a>.</p>
<h3 tabindex="-1" dir="auto">(Almost) All You Need to Know About Variables</h3>
<p dir="auto"><a href="https://with-emacs.com/posts/tutorials/almost-all-you-need-to-know-about-variables/" rel="nofollow">read online</a></p>
<p dir="auto">A must read!</p>
<h3 tabindex="-1" dir="auto">elisp-guide</h3>
<p dir="auto"><a href="https://github.com/chrisdone/elisp-guide">read online</a></p>
<p dir="auto">Focused on introducing general concepts and terminology.</p>
<h3 tabindex="-1" dir="auto">Emergency Elisp</h3>
<p dir="auto"><a href="http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html" rel="nofollow">read online</a></p>
<p dir="auto">Focused around data structures.
  More like a cheat sheet.</p>
<h3 tabindex="-1" dir="auto">ergoemacs - Practical Emacs Lisp</h3>
<p dir="auto"><a href="http://ergoemacs.org/emacs/elisp.html" rel="nofollow">read online</a></p>
<p dir="auto">Not super up to date but generally well put together.</p>
<p dir="auto">One of the first resources on the web introducing Elisp in a concise and comprehensible way.</p>
<p dir="auto">Please note that the more complex examples follow a coding style regarded as not so great: big monolithic functions instead of multiple small functional ones.</p>
<p dir="auto">To Xah’s defense, some packages now considered standard are also written this way (we’re looking at you <code>ediff</code>).</p>
<h3 tabindex="-1" dir="auto">ElispCheatSheet</h3>
<p dir="auto"><a href="https://alhassy.github.io/ElispCheatSheet/" rel="nofollow">read online</a>, <a href="https://github.com/alhassy/ElispCheatSheet">source</a></p>
<p dir="auto">Focused around data structures.</p>
<p dir="auto">Author’s Common Lisp background can be felt.</p>
<h2 tabindex="-1" dir="auto">Advanced</h2>
<h3 tabindex="-1" dir="auto">Emacs Lisp Reference Manual</h3>
<p dir="auto"><a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html" rel="nofollow">read online</a></p>
<p dir="auto">Also comes bundled with Emacs.
  Just <code>C-h i</code> (or <code>M-x info</code>) and open <code>Elisp</code>.</p>
<p dir="auto">Comprehensive guide of core Elisp APIs.</p>
<p dir="auto">Generally well written but needs you to understand its logic and be familiar with Emacs terminology.</p>
<h3 tabindex="-1" dir="auto">The Emacs Lisp Style Guide</h3>
<p dir="auto"><a href="https://github.com/bbatsov/emacs-lisp-style-guide">read online</a></p>
<p dir="auto">Provides solid guidelines on the dos and don’ts for quality Elisp code.</p>
<h3 tabindex="-1" dir="auto">The Emacs Package Developer’s Handbook</h3>
<p dir="auto"><a href="https://alphapapa.github.io/emacs-package-dev-handbook/" rel="nofollow">read online</a>, <a href="https://github.com/alphapapa/emacs-package-dev-handbook">source</a></p>
<p dir="auto"><a href="#alphapapa">@alphapapa</a>’s organized notes about Elisp development.</p>
<p dir="auto">List bunch of tools and libraries for helping package developers.</p>
<p dir="auto">Also provides various snippets and best practices.</p>
<p dir="auto">Lots of good insights.</p>
<h3 tabindex="-1" dir="auto">nullprogram.com</h3>
<p dir="auto"><a href="#chris-wellons-skeeto">Chris Wellons (@skeeto)</a>’s blog, especially the posts tagged <a href="https://nullprogram.com/tags/elisp/" rel="nofollow">#elisp</a>.</p>
<p dir="auto">A few highlights:</p>
<ul dir="auto">
  <li><a href="https://nullprogram.com/blog/2018/02/14/" rel="nofollow">Options for Structured Data in Emacs Lisp</a></li>
  <li><a href="https://nullprogram.com/blog/2010/07/26/" rel="nofollow">Elisp Memoize</a></li>
  <li><a href="https://nullprogram.com/blog/2017/10/27/" rel="nofollow">Make Flet Great Again</a></li>
  <li><a href="https://nullprogram.com/blog/2013/01/22/" rel="nofollow">The Limits of Emacs Advice</a></li>
  <li><a href="https://nullprogram.com/blog/2017/01/30/" rel="nofollow">How to Write Fast(er) Emacs Lisp</a></li>
</ul>
<h3 tabindex="-1" dir="auto">Emacs Lisp Programming Thoughts</h3>
<p dir="auto"><a href="https://www.nongnu.org/emacs-tiny-tools/elisp-coding/" rel="nofollow">read online</a></p>
<p dir="auto">Pretty old but has very good insights, guidelines and real-world examples.</p>
<p dir="auto">Byte compiler section is outdated but general coding style recommendations and sections about macros and profiling are still relevant to this day.</p>
<h2 tabindex="-1" dir="auto">Cookbooks</h2>
<h3 tabindex="-1" dir="auto">elisp-demos</h3>
<p dir="auto"><a href="https://github.com/xuchunyang/elisp-demos/blob/master/elisp-demos.org">read online</a>, <a href="https://github.com/xuchunyang/elisp-demos">source</a></p>
<p dir="auto">Very good and beginner-friendly.</p>
<p dir="auto">Almost complete list of single-liner examples of standard function.
  Also packs examples for <code>dash</code> and <code>s</code>.</p>
<h3 tabindex="-1" dir="auto">Emacs In A Box - Elisp Snippets</h3>
<p dir="auto"><a href="http://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Snippets.html" rel="nofollow">read online</a>, <a href="https://github.com/caiorss/Emacs-Elisp-Programming/blob/master/Elisp_Snippets.org">source</a></p>
<p dir="auto">Really nice selection of snippets with real-world use-cases.</p>
<h3 tabindex="-1" dir="auto">EmacsWiki’s Cookbook</h3>
<p dir="auto"><a href="https://www.emacswiki.org/emacs/ElispCookbook" rel="nofollow">read online</a></p>
<p dir="auto">Community-driven snippets, beginner-friendly.</p>
<h3 tabindex="-1" dir="auto">@alphapapa’s unpackaged.el</h3>
<p dir="auto"><a href="https://alphapapa.github.io/unpackaged.el/" rel="nofollow">read online</a>, <a href="https://github.com/alphapapa/unpackaged.el">source</a></p>
<p dir="auto">Real-world selection of snippets, not beginner-friendly.</p>
<h2 tabindex="-1" dir="auto">On Package Authoring</h2>
<p dir="auto"><a href="#the-emacs-lisp-styleguide">The Emacs Lisp Style Guide</a> applies all the more in this context.</p>
<h3 tabindex="-1" dir="auto">Article: Take Your Emacs to the Next Level by Writing Custom Packages</h3>
<p dir="auto"><a href="https://spin.atomicobject.com/2016/05/27/write-emacs-package/" rel="nofollow">read online</a></p>
<p dir="auto">Real world experience of a user writing and submitting his first package.</p>
<h3 tabindex="-1" dir="auto">MELPA recommandations</h3>
<p dir="auto"><a href="https://github.com/melpa/melpa/blob/master/CONTRIBUTING.org#making-your-package-ready-for-inclusion">read online</a></p>
<p dir="auto">There’s a high chance that you’ll be uploading your package on <a href="https://melpa.org/" rel="nofollow">MELPA</a>.</p>
<p dir="auto">They have clear recommandations.</p>
<p dir="auto">Don’t worry, for your first submissions, they will be very comprehensive and will help you fixing what’s wrong.</p>
<h2 tabindex="-1" dir="auto">Contributing to Emacs</h2>
<p dir="auto">The <a href="https://www.gnu.org/software/emacs/CONTRIBUTE" rel="nofollow">CONTRIBUTE</a> file is the official document describing the process.
  Additional development tips and coding conventions can be found in the <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Tips.html#Tips" rel="nofollow">Elisp Manual</a>.</p>
<p dir="auto"><code>M-x view-emacs-todo</code> shows a lists of TODO items you might want to work on.
  You can also browse the bug archive using <code>M-x debbugs-gnu</code> using the <a href="https://elpa.gnu.org/packages/debbugs.html" rel="nofollow">debbugs</a> package.</p>
<p dir="auto"><a href="https://archive.casouri.cat/note/2020/contributing-to-emacs/" rel="nofollow">Contributing to Emacs</a> gives some helpful background information and overview about the contribution workflow for newcomers.</p>
<h2 tabindex="-1" dir="auto">Development Tools</h2>
<p dir="auto">By default, Emacs is already pretty well set up for Elisp development.</p>
<p dir="auto">But some features can be hard to learn and some stuff can be improved with additinal packages.</p>
<p dir="auto">See also those talks <a href="https://github.com/p3r7/awesome-elisp#john-wiegley-jwiegley">John Wiegley</a> gave about his setup for Elisp development:</p>
<ul dir="auto">
  <li><a href="https://www.youtube.com/watch?v=QFClYrhV1z4" rel="nofollow">Emacs Lisp Development - @ Emacs Conference 2013</a></li>
  <li><a href="https://sachachua.com/blog/2015/04/2015-04-08-emacs-lisp-development-tips-with-john-wiegley/" rel="nofollow">Emacs Lisp Development Tips - Sacha Chua Emacs Chat 2015-04-08</a></li>
</ul>
<h2 tabindex="-1" dir="auto">Interactive Development &amp; Debugging</h2>
<p dir="auto">Emacs is built with interactive development in mind.</p>
<p dir="auto">You could spend days developing Elisp code without ever having to restart Emacs.</p>
<p dir="auto">Standard <i>commands</i> used are:</p>
<ul dir="auto">
  <li><code>eval-last-sexp</code> (<code>C-x C-e</code>)</li>
  <li><code>eval-defun</code> (<code>C-M-x</code>)</li>
  <li><code>eval-buffer</code></li>
  <li><code>eval-region</code></li>
</ul>
<p dir="auto">The <code>*scratch*</code> buffer also provides a temporary zone to try and test ideas.
  In it can be used <code>eval-print-last-sexp</code> (<code>C-j</code>) which acts like <code>eval-last-sexp</code> but also prints the result after the <i>s-exp</i> in the buffer.</p>
<p dir="auto"><code>eval-expression</code> (<code>M-:</code>) allows quickly evaluating a <i>s-exp</i> from anywhere by entering it in the <i>minibuffer</i>.</p>
<p dir="auto">For logging, function <code>(message "&lt;text&gt;")</code> allows printing into the <code>*Messages*</code> buffer.</p>
<p dir="auto">For debugging, the most basic command is <code>toggle-debug-on-error</code> to get a stacktrace.</p>
<p dir="auto">See also:</p>
<ul dir="auto">
  <li><a href="https://www.masteringemacs.org/article/evaluating-elisp-emacs" rel="nofollow">Mastering Emacs - Evaluating Elisp in Emacs</a></li>
</ul>
<h4 tabindex="-1" dir="auto">IELM</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Stands for Inferior Emacs Lisp Mode.</p>
<p dir="auto">Provides a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" rel="nofollow">REPL</a> for evaluating Elisp code.</p>
<h4 tabindex="-1" dir="auto">edebug</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/edebug.el">source</a>, <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html" rel="nofollow">doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">edebug is the interactive Elisp debugger.</p>
<p dir="auto">The documentation is a bit rough to get started.
  I recommend reading this series of posts:</p>
<ul dir="auto">
  <li><a href="https://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html" rel="nofollow">Endless Parentheses - Debugging Elisp Part 1: Earn your independence</a></li>
  <li><a href="https://endlessparentheses.com/debugging-elisp-part-2-advanced-topics.html" rel="nofollow">Endless Parentheses - Debugging Elisp Part 2: Advanced topics</a></li>
</ul>
<p dir="auto">You can also read the dedicated <a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/Debugging.html" rel="nofollow">chapter in book An Introduction to Programming in Emacs Lisp</a>.</p>
<h4 tabindex="-1" dir="auto">trace</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/trace.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Provides a simple facility to output a trace of function calls into a buffer (<code>*trace-buffer*</code>).</p>
<p dir="auto">Please note that this trace is very basic and has no performance data. For more advanced tracing see <a href="#profiling">Profiling</a>.</p>
<p dir="auto">Tracing is switched on / off with <i>commands</i> <code>trace-function</code>, <code>untrace-function</code> and <code>untrace-all</code>.</p>
<h4 tabindex="-1" dir="auto">macrostep</h4>
<p dir="auto"><a href="https://github.com/joddie/macrostep">source &amp; doc</a></p>
<p dir="auto">Interactive macro expander.</p>
<p dir="auto">Expand nested macros one by one.</p>
<p dir="auto">Way better than using default <code>macroexpand</code>.</p>
<h4 tabindex="-1" dir="auto">eval-expr</h4>
<p dir="auto"><a href="https://github.com/jwiegley/eval-expr">source</a></p>
<p dir="auto">Provides <code>eval-expr</code>, an enhanced <code>eval-expression</code> command.</p>
<p dir="auto">Some highlights:</p>
<ul dir="auto">
  <li>automatic display of output in temp buffer if too big</li>
  <li>allows pretty printing of results (with <code>pp</code>)</li>
  <li>invalid <i>s-expr</i> don’t have to be retyped on 2nd try</li>
</ul>
<h4 tabindex="-1" dir="auto">eval-sexp-fu</h4>
<p dir="auto"><a href="https://github.com/emacsmirror/eval-sexp-fu">source</a></p>
<p dir="auto">Visual improvment.</p>
<p dir="auto">Flashes the sexps during the evaluation.</p>
<h4 tabindex="-1" dir="auto">eros</h4>
<p dir="auto"><a href="https://github.com/xiongtx/eros">source</a></p>
<p dir="auto">Show evaluation results inline.</p>
<h2 tabindex="-1" dir="auto">Documentation &amp; Introspection</h2>
<p dir="auto">To get the documentation of a symbol, you could use one of the built-in:</p>
<ul dir="auto">
  <li><code>describe-symbol</code>: get documentation of symbol</li>
  <li><code>describe-function</code>: get documentation of function</li>
  <li><code>describe-variable</code>: get documentation of variable</li>
  <li><code>describe-key</code>: get documentation of <i>command</i> associated with keybinding</li>
</ul>
<p dir="auto">These would spawn a <code>*Help*</code> buffer. Hence documentation in Emacs is often referred to as the <i>help</i>.
  For searching through symbols Emacs also comes with various <code>apropos-*</code> commands which populate a buffer with your search results.</p>
<p dir="auto">Some packages improve on these.</p>
<h3 tabindex="-1" dir="auto">helpful</h3>
<p dir="auto"><a href="https://github.com/Wilfred/helpful">source &amp; doc</a></p>
<p dir="auto">Provides more contextual information.</p>
<table>
  <tbody><tr><th>helpful command</th><th>default command</th><th>comment</th></tr>
  <tr><td><code>helpful-at-point</code></td><td><code>describe-symbol</code></td><td></td></tr>
  <tr><td><code>helpful-callable</code></td><td>no equivalent</td><td>like <code>helpful-function</code> but also works on macros and special forms</td></tr>
  <tr><td><code>helpful-function</code></td><td><code>describe-function</code></td><td></td></tr>
  <tr><td><code>helpful-macro</code></td><td>no equivalent</td><td></td></tr>
  <tr><td><code>helpful-variable</code></td><td><code>describe-variable</code></td><td></td></tr>
  <tr><td><code>helpful-key</code></td><td><code>describe-key</code></td><td></td></tr>
</tbody></table>
<h3 tabindex="-1" dir="auto">elisp-demos</h3>
<p dir="auto"><a href="https://github.com/xuchunyang/elisp-demos">source</a></p>
<p dir="auto">Provides usage examples in the <code>*Help*</code> buffer.</p>
<h3 tabindex="-1" dir="auto">which-key</h3>
<p dir="auto"><a href="https://github.com/justbur/emacs-which-key">source &amp; doc</a></p>
<p dir="auto"><code>which-key</code> is like an always-on <code>describe-key</code>.</p>
<p dir="auto">It displays automatically all the possible keybindings following a key prefix.</p>
<h3 tabindex="-1" dir="auto">suggest</h3>
<p dir="auto"><a href="https://github.com/Wilfred/suggest.el">source</a></p>
<p dir="auto">Discover elisp functions by specifying input and the desired output.</p>
<h2 tabindex="-1" dir="auto">Code Editing</h2>
<h3 tabindex="-1" dir="auto">Jump to definition</h3>
<p dir="auto">To jump to the definition of a symbol Emacs provides <code>xref-find-definitions</code>. In practice it works with nicely with functions but is kind of hit-or-miss with variables.</p>
<p dir="auto">In addition, the following more specialised functions exist:</p>
<ul dir="auto">
  <li><code>find-function</code>: go to the definition of function</li>
  <li><code>find-variable</code>: go to the definition of variable</li>
  <li><code>find-library</code>: go to the definition of <i>feature</i> (i.e. module, package)</li>
</ul>
<p dir="auto">Better options exists so that you don’t have to remember all of these.</p>
<p dir="auto">Honorable mention: <a href="https://github.com/purcell/elisp-slime-nav">elisp-slime-nav</a>, that can be seen as an ancestor to <code>elisp-def</code>.
  If you want to jump to symbols in files which aren’t loaded in your Emacs you can fallback to the more general <a href="https://github.com/jacktasia/dumb-jump">dumb-jump</a> package.</p>
<h4 tabindex="-1" dir="auto">elisp-def</h4>
<p dir="auto"><a href="https://github.com/Wilfred/elisp-def">source &amp; doc</a></p>
<p dir="auto">Provides <code>elisp-def</code> that allows jumping to the definition of function / variable / feature.</p>
<p dir="auto">Like a better <code>xref-find-definitions</code>.</p>
<p dir="auto">Is able to distinguish between functions / variables / features depending on the context.</p>
<p dir="auto">Also handles macros, functions defined through macros and let-bound variables.</p>
<h3 tabindex="-1" dir="auto">Search &amp; Replace</h3>
<p dir="auto">In Emacs regular expressions can make use of syntax information provided by the major-mode. This means that to some extend semantic searches are possible with <code>isearch</code> and <code>occur</code>.
  To search and jump to toplevel definitions of a buffer you can use the built-in <code>imenu</code>. The <a href="https://github.com/vspinu/imenu-anywhere">imenu-anywhere</a> package allows to extend the scope to buffers of the same project or mode.</p>
<h4 tabindex="-1" dir="auto">elisp-refs</h4>
<p dir="auto"><a href="https://github.com/Wilfred/elisp-refs">source</a></p>
<p dir="auto">Semantic code search for Elisp which parses the code instead of doing dump text searches.</p>
<h4 tabindex="-1" dir="auto">el-search</h4>
<p dir="auto"><a href="https://elpa.gnu.org/packages/el-search.html" rel="nofollow">source</a></p>
<p dir="auto">Lets you execute search and replace operations on symbolic expressions. For example you can search for things like defvars which don’t specify an init value using the pattern `(defvar ,_)`.</p>
<h3 tabindex="-1" dir="auto">Editing</h3>
<p dir="auto">Honorable mentions:</p>
<ul dir="auto">
  <li><a href="https://github.com/joaotavora/yasnippet">YASnippet</a>: generic (not Elisp-specific) powerful abreviation-based snippet expander.  Even though it could be used in the place of <code>speed-of-thought-lisp</code>, it is less context-aware and requires a specific key combination to trigger. It offers other features, though, and can be used complementarily.</li>
</ul>
<h4 tabindex="-1" dir="auto">speed-of-thought-lisp</h4>
<p dir="auto"><a href="https://github.com/Malabarba/speed-of-thought-lisp">source</a></p>
<p dir="auto">Allows writting Elisp blazingly fast with the use of context-aware abbreviations triggered after <code>&lt;SPACE&gt;</code> keypress.</p>
<h4 tabindex="-1" dir="auto">elisp-docstring</h4>
<p dir="auto"><a href="https://github.com/Fuco1/elisp-docstring-mode">source</a></p>
<p dir="auto">Enriched syntax highlighting for docstring contents. Together with <a href="https://github.com/magnars/string-edit.el">string-edit</a> you can edit docstrings in a temporary buffer and get automated special character escaping.</p>
<h3 tabindex="-1" dir="auto">Editing S-exps</h3>
<p dir="auto">Elisp is a Lisp and Lisps are written using a structure of nested lists called <a href="https://en.wikipedia.org/wiki/S-expression" rel="nofollow">S-expressions</a>.</p>
<p dir="auto">Mastering how to navigate and manipulate this structure with ease is essential.</p>
<p dir="auto">By default Emacs doesn’t offer much apart from <code>forward-list</code> / <code>backward-list</code> and <code>forward-sexp</code> / <code>backward-sexp</code>.</p>
<p dir="auto">Luckily, powerful minor-modes are available to give you the power you deserve.</p>
<h4 tabindex="-1" dir="auto">lispy</h4>
<p dir="auto"><a href="https://github.com/abo-abo/lispy">source &amp; doc</a>, <a href="http://oremacs.com/lispy/" rel="nofollow">cheat sheet</a>, <a href="https://www.youtube.com/user/abo5abo/videos" rel="nofollow">video demos</a></p>
<p dir="auto">Easiest to learn yet most powerful solution in that list.</p>
<p dir="auto">Like <code>paxedit</code>, <i>commands</i> are context-aware.</p>
<p dir="auto">The killing feature is that shortcuts are single characters and not key combinations.</p>
<p dir="auto">The trick is that commands get triggered only when the point is at a delimiter (e.g. a parenthesis) or the region is active.</p>
<p dir="auto">Provides a powerful <i>command</i> combination system and refactoring commands.</p>
<h4 tabindex="-1" dir="auto">paxedit</h4>
<p dir="auto"><a href="https://github.com/promethial/paxedit">source &amp; doc</a></p>
<p dir="auto">Heavily inspired by <code>paredit</code>.</p>
<p dir="auto">The major difference with the latter is that <i>commands</i> are context-aware, they behave differently depending on what the cursor is hovering on.</p>
<p dir="auto">The direct consequence is that fewer <i>commands</i> / shortcuts needs to be learned to perform the same amount of things.</p>
<h4 tabindex="-1" dir="auto">paredit</h4>
<p dir="auto"><a href="http://danmidwood.com/content/2014/11/21/animated-paredit.html" rel="nofollow">tutorial</a>, <a href="https://github.com/emacsmirror/paredit">source</a></p>
<p dir="auto">The first powerful S-exp editing mode for Emacs.</p>
<p dir="auto">Learning curve is a bit steep.</p>
<p dir="auto">Still actively maintained and very popular.</p>
<h3 tabindex="-1" dir="auto">Refactoring</h3>
<h4 tabindex="-1" dir="auto">elisp-depmap</h4>
<p dir="auto"><a href="https://github.com/mtekman/elisp-depmap.el">source &amp; doc</a></p>
<p dir="auto">Aids the refactoring process by presenting a graphical visualization of project dependencies.</p>
<h4 tabindex="-1" dir="auto">emacs-refactor</h4>
<p dir="auto"><a href="https://github.com/Wilfred/emacs-refactor">source &amp; doc</a></p>
<p dir="auto">Contains various refactoring commands for Elisp.</p>
<h3 tabindex="-1" dir="auto">Formatting</h3>
<h4 tabindex="-1" dir="auto">aggressive-indent-mode</h4>
<p dir="auto"><a href="https://github.com/Malabarba/aggressive-indent-mode">source &amp; doc</a></p>
<p dir="auto">Auto-indents code as you type.</p>
<h4 tabindex="-1" dir="auto">elfmt</h4>
<p dir="auto"><a href="https://github.com/riscy/elfmt">source</a></p>
<p dir="auto">Focuses on placement of lists and tries to break lines at <code>fill-column</code></p>
<h2 tabindex="-1" dir="auto">Testing</h2>
<p dir="auto">For simulating interactive user input, consider using libraries such as <a href="#with-simulated-input">with-simulated-input</a> (launch <i>commands</i>) and <a href="#dokey">dokey</a> (simulated keyboard shortcut presses).
  To test behavior and interactive usage in a clean and temporary environment <a href="https://github.com/alphapapa/emacs-sandbox.sh">emacs-sandbox.sh</a> is useful.</p>
<h4 tabindex="-1" dir="auto">ERT</h4>
<p dir="auto"><a href="https://www.gnu.org/software/emacs/manual/html_node/ert/index.html" rel="nofollow">doc</a>, <a href="https://nullprogram.com/blog/2012/08/15/" rel="nofollow">blog post on nullprogram.com</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Stands for /”Emacs Lisp Regression Testing”/.</p>
<p dir="auto">Featureful and easy to use.</p>
<p dir="auto">Suitable for <a href="https://en.wikipedia.org/wiki/Unit_testing" rel="nofollow">unit tests</a> with <i>mocking</i>.</p>
<h4 tabindex="-1" dir="auto">Buttercup</h4>
<p dir="auto"><a href="https://github.com/jorgenschaefer/emacs-buttercup">source &amp; doc</a></p>
<p dir="auto"><i>Behavior-Driven Emacs Lisp Testing</i></p>
<p dir="auto">Especially suitable for <a href="https://en.wikipedia.org/wiki/Integration_testing" rel="nofollow">integration tests</a>.</p>
<p dir="auto">Allows defining test suites (i.e. goups of related tests) with a shared context (through <i>set-up</i> and <i>tear-down</i> phases).</p>
<p dir="auto">Also provides mocking capabilities.</p>
<p dir="auto">For a complete example of integration w/ <code>undercover</code> and <code>coverage</code>:</p>
<ul dir="auto">
  <li><a href="https://sachachua.com/blog/2022/01/coverage-reporting-in-emacs-with-buttercup-undercover-coverage-and-a-makefile/" rel="nofollow">Sacha Chua - Coverage reporting in Emacs with Buttercup, Undercover, Coverage, and a Makefile</a></li>
</ul>
<h4 tabindex="-1" dir="auto">director</h4>
<p dir="auto"><a href="https://github.com/bard/emacs-director">source &amp; doc</a></p>
<p dir="auto">Program sequence of user interactions. Useful for end-to-end testing.</p>
<p dir="auto">Inspired by Selenium Webdriver.</p>
<h4 tabindex="-1" dir="auto">undercover</h4>
<p dir="auto"><a href="https://github.com/undercover-el/undercover.el">source &amp; doc</a></p>
<p dir="auto">Track test coverage and integrate w/ coverage reporting solutions.</p>
<p dir="auto">For in-Emacs reporting, use the <a href="https://github.com/trezona-lecomte/coverage">coverage</a> package.</p>
<h2 tabindex="-1" dir="auto">Profiling</h2>
<p dir="auto">Emacs provides 2 Elips profilers:</p>
<ul dir="auto">
  <li><code>profiler.el</code>: profile a whole call stack, easier to use</li>
  <li><code>elp.el</code>: profile only selected functions</li>
</ul>
<p dir="auto">Both are briefly mentioned in the <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Profiling.html" rel="nofollow">profiling section</a> of the <i>Emacs Lisp Reference Manual</i>.</p>
<p dir="auto">Either one is of a great help to debug slow Elisp code, most noticeable during user interactions (Emacs seems to freeze).</p>
<p dir="auto"><code>profiler.el</code> is easily toggled using <code>profiler-start</code>, <code>profiler-stop</code>. To obtain a result report call <code>profiler-report</code>.</p>
<p dir="auto"><code>elp.el</code> can target individual functions with <code>elp-instrument-function</code> or a whole package with <code>elp-instrument-package</code>.</p>
<p dir="auto">To profile individual forms Emacs also comes with the <code>benchmark</code> library. The <i>Emacs Package Developer’s Handbook</i> has a <a href="https://github.com/alphapapa/emacs-package-dev-handbook#profiling--optimization">whole section</a> dedicated to this with thorough examples and helper macros.</p>
<h3 tabindex="-1" dir="auto">etrace</h3>
<p dir="auto"><a href="https://github.com/aspiers/etrace">source &amp; doc</a></p>
<p dir="auto">Wrapper around <code>elp.el</code> outputting a report in the <i>Chromium Catapult Trace Event Format</i>.</p>
<p dir="auto">This allows opening them in external applications to explore them as <i>flame graphs</i>.</p>
<h2 tabindex="-1" dir="auto">Validation</h2>
<p dir="auto">Emacs provides various functions to validate an Elisp file / project:</p>
<ul dir="auto">
  <li><code>byte-compile-file</code>: validate the file compiles cleanly</li>
  <li><code>checkdoc</code>: validate the documentation</li>
  <li><code>check-declare-file</code> / <code>check-declare-directory</code>: validate the declaration of symbols</li>
  <li><code>package-lint-current-buffer</code>: validate format for submitting as a package</li>
</ul>
<p dir="auto">It’s tedious to run manually each and every of those commands. Thankfully projects aim at making this process easier.</p>
<p dir="auto">For maximum efficiency, they can be integrated into a <a href="https://en.wikipedia.org/wiki/Continuous_integration" rel="nofollow">CI</a> chain (<i>GitHub actions</i> or <i>Travis</i>).</p>
<h4 tabindex="-1" dir="auto">melpazoid</h4>
<p dir="auto"><a href="https://github.com/riscy/melpazoid">source &amp; doc</a></p>
<p dir="auto">In addition to standard validation, it adds a license checker and some <a href="https://github.com/riscy/melpazoid/blob/master/melpazoid/melpazoid.el">additional checks</a>.</p>
<p dir="auto">Created by MELPA member <a href="https://github.com/riscy">@riscy</a> to validate submissions.</p>
<p dir="auto">Does not run tests.</p>
<p dir="auto">Provides recipes for integration with <i>GitHub actions</i> or <i>Travis</i>.</p>
<h4 tabindex="-1" dir="auto">makem.sh</h4>
<p dir="auto"><a href="https://github.com/alphapapa/makem.sh">source &amp; doc</a></p>
<p dir="auto">Very straightforward way to validate an Emacs package folder / repository.</p>
<p dir="auto">Provides a makefile with different targets to run.</p>
<p dir="auto">Implemented in bash with a makefile wrapper.</p>
<p dir="auto">Performs linting (<code>make lint</code>), tests (<code>make test</code>) or everything (<code>make all</code>).</p>
<p dir="auto">In addition to standard checks, also validates indentation and optionally <a href="#elsa">elsa</a> checks.</p>
<p dir="auto">Supports both ERT and buttercup tests.</p>
<p dir="auto">One drawback is that this makem.sh sources have to be dropped in each of your package source repository.</p>
<p dir="auto">Provides recipes for integration with <i>GitHub actions</i>.</p>
<h4 tabindex="-1" dir="auto">makel</h4>
<p dir="auto"><a href="https://gitea.petton.fr/DamienCassou/makel" rel="nofollow">source &amp; doc</a></p>
<p dir="auto">Provides a makefile with different targets to run.</p>
<p dir="auto">Implemented completely as a makefile.</p>
<p dir="auto">Requires a bit of configuration for each package.</p>
<p dir="auto">One drawback is that this makel sources have to be dropped in each of your package source repository.</p>
<p dir="auto">No CI integration recipes.</p>
<h4 tabindex="-1" dir="auto">elisp-check</h4>
<p dir="auto"><a href="https://github.com/leotaku/elisp-check">source</a></p>
<p dir="auto">A zero config github action to validate packages.</p>
<h4 tabindex="-1" dir="auto">auto-compile</h4>
<p dir="auto"><a href="https://github.com/emacscollective/auto-compile">source</a></p>
<p dir="auto">Compiles current file on save and display compile errors/warnings in the mode-line.</p>
<h4 tabindex="-1" dir="auto">elisp-lint</h4>
<p dir="auto"><a href="https://github.com/gonewest818/elisp-lint">elisp-lint</a></p>
<p dir="auto">Performs standard validation of specified file. Also checks for indentation.</p>
<p dir="auto">No CI integration recipes.</p>
<h4 tabindex="-1" dir="auto">elsa</h4>
<p dir="auto"><a href="https://github.com/emacs-elsa/Elsa">source</a></p>
<p dir="auto">Static Elisp code analyzer providing helpful hints.</p>
<p dir="auto">Can be launched directly from <a href="#makem.sh">makem.sh</a>.</p>
<h4 tabindex="-1" dir="auto">package-lint</h4>
<p dir="auto"><a href="https://github.com/purcell/package-lint">source</a></p>
<p dir="auto">Lints Elisp files for requirements of packages. Can be integrated with flycheck (a general linter framework) by installing <a href="https://github.com/purcell/flycheck-package">flyspell-package</a>.</p>
<h2 tabindex="-1" dir="auto">Building</h2>
<p dir="auto">Those tools, in addition to what those in the <a href="#validation">Validation</a> section provide, are full-fledged build-definition tools, allowing to make complex CI/CD chains.</p>
<p dir="auto">They require a fair amount of configuration and are not for the faint of heart.</p>
<p dir="auto">They only seem necessary when building larger packages with exotic dependencies.</p>
<h4 tabindex="-1" dir="auto">Eldev</h4>
<p dir="auto"><a href="https://github.com/doublep/eldev">source &amp; doc</a></p>
<p dir="auto">Stands for /”Elisp Development Tool”/.</p>
<p dir="auto">Certainly the most modern of the lot.</p>
<p dir="auto">100% written in Elisp.</p>
<p dir="auto">One small drawback is that it does not run in a dedicated isolated Emacs process.</p>
<h4 tabindex="-1" dir="auto">cask</h4>
<p dir="auto"><a href="https://cask.readthedocs.io/en/latest/" rel="nofollow">doc</a>, <a href="https://github.com/cask/cask">source</a></p>
<p dir="auto">Pretty advanced and hard to get into.</p>
<p dir="auto">Implemented in python.</p>
<p dir="auto">Runs in a dedicated isolated Emacs process</p>
<h4 tabindex="-1" dir="auto">emake</h4>
<p dir="auto"><a href="https://github.com/vermiculus/emake.el">source &amp; doc</a></p>
<p dir="auto">The most simple to use from this list.</p>
<p dir="auto">Implemented in Elisp with a makefile wrapper.</p>
<p dir="auto">Easier to integrate with CI tools such as <i>Travis</i>.</p>
<h2 tabindex="-1" dir="auto">Syntax Highlighting &amp; Visual Enhancements</h2>
<p dir="auto">Several packages provide visual improvements and extend default syntax highlighting (<i>font locking</i> in Emacs lingo).</p>
<p dir="auto">All those listed bellow are complementary.</p>
<p dir="auto">Honorable mentions:</p>
<ul dir="auto">
  <li><a href="https://github.com/Fanael/highlight-defined">highlight-defined</a> which is superseded by <code>lisp-extra-font-lock</code> functionalities</li>
</ul>
<p dir="auto">Not Elisp-specific but commonly used in the context of Elisp development:</p>
<ul dir="auto">
  <li>traditionally, <i>form feed</i> characters (<code>^L</code>) are used in Elisp source as a section delimiters. Either <a href="https://github.com/purcell/page-break-lines">page-break-lines</a> or <a href="https://depp.brause.cc/form-feed/" rel="nofollow">form-feed</a> can be used to display them as intended.</li>
  <li>for those that can barely stand parentheses, <a href="https://github.com/tarsius/paren-face">paren-face</a> can be used to dim them in Lisp-based modes</li>
  <li>for those that love parentheses, <a href="https://github.com/Fanael/rainbow-delimiters">rainbow-delimiters</a> allows displaying them in different colors depending on their nesting depth</li>
</ul>
<h3 tabindex="-1" dir="auto">lisp-extra-font-lock</h3>
<p dir="auto"><a href="https://github.com/Lindydancer/lisp-extra-font-lock">source &amp; doc</a></p>
<p dir="auto">Various additional syntax highlightings.</p>
<p dir="auto">Killer feature is having different faces for <i>special</i> vars (global) VS <i>normal</i> ones (local).</p>
<h3 tabindex="-1" dir="auto">highlight-function-calls</h3>
<p dir="auto"><a href="https://github.com/alphapapa/highlight-function-calls">source &amp; doc</a></p>
<p dir="auto">Make functions calls stand out with a specific face.</p>
<h3 tabindex="-1" dir="auto">cl-lib-highlight</h3>
<p dir="auto"><a href="https://github.com/skeeto/cl-lib-highlight">source &amp; doc</a></p>
<p dir="auto">Provides additional / alternative font-locking for <code>cl-lib</code> symbols, to make them stand out in your code.</p>
<p dir="auto">Also highlights deprecated <code>cl</code> symbols with a different face. Useful when reading legacy code.</p>
<h3 tabindex="-1" dir="auto">easy-escape</h3>
<p dir="auto"><a href="https://github.com/cpitclaudel/easy-escape">source &amp; doc</a></p>
<p dir="auto">Make regular expression strings more readable.</p>
<h3 tabindex="-1" dir="auto">nameless</h3>
<p dir="auto"><a href="https://github.com/Malabarba/Nameless">source &amp; doc</a></p>
<p dir="auto">Hide prefix in symbols of a package.</p>
<h2 tabindex="-1" dir="auto">Pretty Printing</h2>
<h4 tabindex="-1" dir="auto">pp</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/pp.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Standard Emacs pretty-printing util.</p>
<h4 tabindex="-1" dir="auto">ppp</h4>
<p dir="auto"><a href="https://github.com/conao3/ppp.el">source &amp; doc</a></p>
<p dir="auto">Advanced pretty-printing utils.</p>
<h2 tabindex="-1" dir="auto">Libraries</h2>
<p dir="auto">Traditionally, it was recommended to not use external libs/dependencies and prefer using standard APIs bundled with Emacs.</p>
<p dir="auto">These recommendation are still mostly valid but predated the advent of <code>package.el</code>.</p>
<p dir="auto">Some external libs are now considered “standard”, as lots of popular packages use them and they can outperform standard implementations while still being simpler to use (e.g. <code>dash</code>).</p>
<p dir="auto">Some libraries might be listed several times, as they fit in several categories (e.g. <code>subr-x</code>, <code>dash</code>).</p>
<h2 tabindex="-1" dir="auto">Core / General Purpose</h2>
<h4 tabindex="-1" dir="auto">cl-lib</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Lib extending Elisp with functionalities inherited from Common Lisp. Replaces the deprecated <code>cl</code> package which did not use name prefixes. To help with updating the code from <code>cl</code> to <code>cl-lib</code> there is <a href="https://github.com/purcell/cl-libify">cl-libify</a>.</p>
<p dir="auto">Just do a <code>(require 'cl-lib)</code> to use it.</p>
<h4 tabindex="-1" dir="auto">subr-x</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Intended as an extension to <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/subr.el">subr.el</a>, the core library of basic functions written in Elisp.</p>
<p dir="auto">Provides:</p>
<ul dir="auto">
  <li>threading macros (<i>a la</i> Clojure, <code>thread-first</code> and <code>thread-last</code>)</li>
  <li>additional binding helpers (<code>if-let</code>, <code>if-let*</code>, <code>when-let</code>, <code>when-let*</code> and <code>and-let*</code>)    - hash-table manipulation helper (<code>hash-table-empty-p</code>, <code>hash-table-keys</code> and <code>hash-table-values</code>)</li>
  <li>string manipulation helper (<code>string-empty-p</code>, <code>string-blank-p</code>, <code>string-join</code>, <code>string-trim</code>, <code>string-trim-left</code>, <code>string-trim-right</code>, <code>string-remove-prefix</code> and <code>string-remove-suffix</code>)</li>
  <li>region manipulation helpers (<code>replace-region-contents</code>)</li>
</ul>
<h4 tabindex="-1" dir="auto">dash</h4>
<p dir="auto"><a href="https://github.com/magnars/dash.el">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Even though this lib revolves primarily around list manipulation, it also offers for general purpose utils.</p>
<p dir="auto">Those are:</p>
<ul dir="auto">
  <li><a href="https://github.com/magnars/dash.el#threading-macros">threading macros</a></li>
  <li><a href="https://github.com/magnars/dash.el#function-combinators">function combinators</a></li>
  <li><a href="https://github.com/magnars/dash.el#binding">additional binding helpers</a></li>
</ul>
<p dir="auto">They all seem to be heavily inspired by Clojure.</p>
<h4 tabindex="-1" dir="auto">el-patch</h4>
<p dir="auto"><a href="https://github.com/raxod502/el-patch">source and doc</a></p>
<p dir="auto">More perene advices, get notified when they break.</p>
<h4 tabindex="-1" dir="auto">anaphora</h4>
<p dir="auto"><a href="https://github.com/rolandwalker/anaphora">source &amp; doc</a></p>
<p dir="auto">Allows the definition of anaphoric functions (as can be found in Common Lisp, Clojure…).</p>
<h4 tabindex="-1" dir="auto">with-simulated-input</h4>
<p dir="auto"><a href="https://github.com/DarwinAwardWinner/with-simulated-input">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Simulate user interactions (i.e. launch <i>commands</i>).</p>
<p dir="auto">Mostly usefull for writing tests.</p>
<h4 tabindex="-1" dir="auto">dokey</h4>
<p dir="auto"><a href="https://github.com/ernstvanderlinden/emacs-dokey">source &amp; doc</a></p>
<p dir="auto">Trigger keyboard events.</p>
<h4 tabindex="-1" dir="auto">contract</h4>
<p dir="auto"><a href="https://github.com/langston-barrett/contract.el">source &amp; doc</a></p>
<p dir="auto">Provides data structure defintions as contracts (essentially interface description).</p>
<p dir="auto">Port of <a href="https://docs.racket-lang.org/reference/contracts.html" rel="nofollow">Racket’s contract</a> to Elisp.</p>
<p dir="auto">Akin to <a href="https://clojure.org/about/spec" rel="nofollow">Clojure’s spec</a>.</p>
<h4 tabindex="-1" dir="auto">signal</h4>
<p dir="auto"><a href="https://github.com/Mola-T/signal">source &amp; doc</a></p>
<p dir="auto">Reimplementation of hooks, with more advanced features.</p>
<h4 tabindex="-1" dir="auto">weak-ref</h4>
<p dir="auto"><a href="https://github.com/skeeto/elisp-weak-ref">source &amp; doc</a></p>
<p dir="auto">Allows creating weak reference to vars.
  Weak reference offer better performance but can be garbage collected.</p>
<h4 tabindex="-1" dir="auto">predd</h4>
<p dir="auto"><a href="https://github.com/skeeto/predd">source &amp; doc</a>, <a href="https://nullprogram.com/blog/2013/12/18/" rel="nofollow">blog post</a></p>
<p dir="auto">Provides Clojure-style <i>multimethods</i> (multiple dispatch over an ad hoc type hierarchy).</p>
<h4 tabindex="-1" dir="auto">cats</h4>
<p dir="auto"><a href="https://github.com/Fuco1/emacs-cats">source &amp; doc</a></p>
<p dir="auto">Provices Haskell-inspired Category Theory abstractions.</p>
<h4 tabindex="-1" dir="auto">fn</h4>
<p dir="auto"><a href="https://github.com/troyp/fn.el">source &amp; doc</a></p>
<p dir="auto">Provides macros for a more concise lambda syntax, <i>a la</i> Clojure.</p>
<h2 tabindex="-1" dir="auto">Data Structures</h2>
<h3 tabindex="-1" dir="auto">Strings</h3>
<h4 tabindex="-1" dir="auto">subr-x</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Provide the following helpers: <code>string-empty-p</code>, <code>string-blank-p</code>, <code>string-join</code>, <code>string-trim</code>, <code>string-trim-left</code>, <code>string-trim-right</code>, <code>string-remove-prefix</code> and <code>string-remove-suffix</code>.</p>
<h4 tabindex="-1" dir="auto">s</h4>
<p dir="auto"><a href="https://github.com/magnars/s.el">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Advanced yet easy to use string manipulation helpers.</p>
<h4 tabindex="-1" dir="auto">rx</h4>
<p dir="auto"><a href="https://francismurillo.github.io/2017-03-30-Exploring-Emacs-rx-Macro/" rel="nofollow">tutorial</a>, <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/rx.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Macro for helping writing Elisp regexp.</p>
<h4 tabindex="-1" dir="auto">xr</h4>
<p dir="auto"><a href="https://github.com/mattiase/xr">source &amp; doc</a></p>
<p dir="auto">Convert regexp to their more human-readable <code>rx</code> macro form.</p>
<p dir="auto">Also provides regexp linting, detecting mistakes and bad practices.</p>
<p dir="auto">Relies on its own internal <a href="#parsers--parse-trees">parser</a>.</p>
<h3 tabindex="-1" dir="auto">Sequences</h3>
<h4 tabindex="-1" dir="auto">seq</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/seq.el">source</a>, <a href="https://github.com/NicolasPetton/seq.el">doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a> (since version 25)</p>
<h4 tabindex="-1" dir="auto">dash</h4>
<p dir="auto"><a href="https://github.com/magnars/dash.el">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Advanced yet easy to use list manipulation helpers.
  Lots of them also have alternative anaphoric forms.</p>
<h4 tabindex="-1" dir="auto">stream</h4>
<p dir="auto"><a href="https://github.com/NicolasPetton/stream">source &amp; doc</a></p>
<p dir="auto">Allows defining streams of data as data sequences.
  Compatible w/ seq.el.</p>
<h4 tabindex="-1" dir="auto">trie</h4>
<p dir="auto"><a href="http://www.dr-qubit.org/predictive/trie.el" rel="nofollow">source</a></p>
<p dir="auto">Provides APIs for building and manipulating <i>tries</i>, sequence-like data structures where both storage and retrieval are space- and time-efficient.</p>
<p dir="auto">Stored elements must be ordered sequences, i.e. strings (most common use-case), lists or vectors.</p>
<h4 tabindex="-1" dir="auto">lister</h4>
<p dir="auto"><a href="https://github.com/publicimageltd/lister">source &amp; doc</a></p>
<p dir="auto">Provides <code>lister-mode</code>, major mode for building and manipulating list-based user-interfaces.</p>
<p dir="auto">Inspired by <code>tablist</code> (for tables) and <code>hierarchy</code> (for trees).</p>
<h3 tabindex="-1" dir="auto">Maps</h3>
<p dir="auto">(Hash)maps are a special type of sequences that allow representing a list of key / value pairs.
  In other languages they can also be called associative arrays or dictionaries.</p>
<p dir="auto">In Elisp, a map can be represented as:</p>
<ul dir="auto">
  <li>an <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html" rel="nofollow">alist</a> (association list, preserving element order)</li>
  <li>a <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html" rel="nofollow">plist</a> (property list, more human-readable)</li>
  <li>an <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Tables.html" rel="nofollow">hash-table</a></li>
</ul>
<table>
  <tbody><tr><th>data structure</th><th>human-readability</th><th>insert speed</th><th>lookup speed</th><th>ordered?</th></tr>
  <tr><td>alist</td><td>meh</td><td>fastest</td><td>slower as data grows</td><td>yes</td></tr>
  <tr><td>plist</td><td>very good</td><td>ok</td><td>fast</td><td>no</td></tr>
  <tr><td>hash-table</td><td>ok</td><td>ok</td><td>very fast</td><td>no</td></tr>
</tbody></table>
<p dir="auto">The official doc also has <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Plists-and-Alists.html" rel="nofollow">a nice section comparing plists and alists</a>.</p>
<p dir="auto">tl;dr:</p>
<ul dir="auto">
  <li>planning on doing lots of inserts and a few lookups (or mostly on recent elements), use an alist</li>
  <li>planning on having a big number of elements and lookup speed is critical, use an hash-map</li>
  <li>every other case, use a plist</li>
</ul>
<p dir="auto">Older Emacs packages tend to rely mostly on alists, sometimes for no good reason.</p>
<p dir="auto">Each data structure has its own APIs to get/insert/update.</p>
<p dir="auto">Thankfully, some libraries provide an abstraction layer that allows having a single API for multiple data structures.</p>
<p dir="auto">I would recommend sticking with the default <code>map.el</code> library, unless you really enjoy the Clojure syntax in which case <code>a.el</code> is also a nice choice.
  If you know for sure that you want to stick with an alist or a hash-table,  <code>asoc.el</code> and <code>ht</code> are high quality choices.</p>
<h4 tabindex="-1" dir="auto">map</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/map.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a> (since version 25)</p>
<p dir="auto">supports: alists, plists and hash-tables.</p>
<p dir="auto">Shared API for all 3 Elisp map objects (+ <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Arrays.html" rel="nofollow">arrays</a>).</p>
<p dir="auto">No documentation other than what is inlined in source.</p>
<h4 tabindex="-1" dir="auto">asoc</h4>
<p dir="auto"><a href="https://github.com/troyp/asoc.el">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">supports: only alists.</p>
<p dir="auto">Nice set of additional APIs for alists.</p>
<h4 tabindex="-1" dir="auto">ht</h4>
<p dir="auto"><a href="https://github.com/Wilfred/ht.el">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">supports: only hash-tables, but allow converting from/to alists and plists.</p>
<p dir="auto">Nice set of additional APIs for hash-tables.</p>
<h4 tabindex="-1" dir="auto">a</h4>
<p dir="auto"><a href="https://github.com/plexus/a.el">source &amp; doc</a></p>
<p dir="auto">supports: alists and hash-tables.</p>
<p dir="auto">Shared API for alists and hash-tables.
  Like <code>map.el</code>, but in a more “Clojurey” syntax.</p>
<h4 tabindex="-1" dir="auto">kv</h4>
<p dir="auto"><a href="https://github.com/nicferrier/emacs-kv">source &amp; doc</a></p>
<p dir="auto">support: mostly alists, but allow converting from/to alists and plists.</p>
<h4 tabindex="-1" dir="auto">dict-tree</h4>
<p dir="auto"><a href="http://www.dr-qubit.org/predictive/dict-tree.el" rel="nofollow">source</a></p>
<p dir="auto">Provides APIs for building and manipulating <i>Dictionary trees</i>, hybrid between <a href="#trie">tries</a> and hash tables.</p>
<p dir="auto">Think about it as a more storage-efficient hash tables.</p>
<h3 tabindex="-1" dir="auto">Custom Types &amp; OOP</h3>
<p dir="auto">Can be done natively using <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Records.html#Records" rel="nofollow">records</a>, additional custom user-defined types.</p>
<h4 tabindex="-1" dir="auto">cl-lib (defstruct API)</h4>
<p dir="auto"><a href="https://www.gnu.org/software/emacs/manual/html_node/cl/Structures.html" rel="nofollow">API documentation</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">One part of <code>cl-lib</code> is APIs to define and manipulate C-like data structures, strongly typed.</p>
<p dir="auto">Provides the <code>cl-defstruct</code> macro.</p>
<p dir="auto">Built on top of the native <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Records.html#Records" rel="nofollow">records</a> system.</p>
<p dir="auto">See also this blog post from @skeeto: <a href="https://nullprogram.com/blog/2018/02/14/" rel="nofollow">Options for Structured Data in Emacs Lisp</a></p>
<h4 tabindex="-1" dir="auto">EIEIO</h4>
<p dir="auto"><a href="https://www.gnu.org/software/emacs/manual/html_mono/eieio.html" rel="nofollow">doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Stands for <i>Enhanced Implementation of Emacs Interpreted Objects</i>.</p>
<p dir="auto">Brings an OOP layer to Elisp, based upon the <i>Common Lisp Object System</i> (CLOS).</p>
<p dir="auto">Provides the <code>defclass</code> macro.</p>
<p dir="auto">Built on top of the native <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Records.html#Records" rel="nofollow">records</a> system.</p>
<h3 tabindex="-1" dir="auto">Date &amp; Time</h3>
<h4 tabindex="-1" dir="auto">ts</h4>
<p dir="auto"><a href="https://github.com/alphapapa/ts.el">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Advanced yet easy to use datetime / timestamp library.</p>
<h4 tabindex="-1" dir="auto">datetime</h4>
<p dir="auto"><a href="https://github.com/doublep/datetime">source &amp; doc</a></p>
<p dir="auto">Library for parsing, formatting, matching and recoding timestamps and date-time format strings.</p>
<h4 tabindex="-1" dir="auto">datetime-format</h4>
<p dir="auto"><a href="https://github.com/emacs-php/emacs-datetime">source &amp; doc</a></p>
<p dir="auto">Provides <code>datetime-format</code>, inspired by PHP’s <code>Datetime::format</code> method.</p>
<h3 tabindex="-1" dir="auto">Tables</h3>
<h4 tabindex="-1" dir="auto">tabulated-list</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Library for defining, manipulating and displaying tables.</p>
<h4 tabindex="-1" dir="auto">tablist</h4>
<p dir="auto"><a href="https://github.com/politza/tablist">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Extension to <code>tabulated-list</code>, adding possibility to mark and filter items.</p>
<h4 tabindex="-1" dir="auto">navigel</h4>
<p dir="auto"><a href="https://github.com/DamienCassou/navigel">source</a></p>
<p dir="auto">Facilitate the creation of <code>tabulated-list</code>-based UIs.</p>
<p dir="auto">Also relies on <code>tablist</code>.</p>
<h4 tabindex="-1" dir="auto">gridlock</h4>
<p dir="auto"><a href="https://github.com/articuluxe/gridlock">source &amp; doc</a></p>
<p dir="auto">Provides <code>gridlock-mode</code>, major mode for building and manipulating spreadsheet-based user-interfaces</p>
<p dir="auto">Also provides <code>gridlock-csv-mode</code> and <code>gridlock-fix-mode</code> minor modes, backporting the API to CSV and FIX files.</p>
<h4 tabindex="-1" dir="auto">cell</h4>
<p dir="auto"><a href="http://xelf.me/cell.html" rel="nofollow">doc</a>, <a href="https://gitlab.com/dto/mosaic-el/blob/master/cell.el" rel="nofollow">source</a></p>
<p dir="auto">Provides <code>cell-mode</code>, major mode for building and manipulating spreadsheet-based user-interfaces.</p>
<h4 tabindex="-1" dir="auto">ctable</h4>
<p dir="auto"><a href="https://github.com/kiwanami/emacs-ctable">source &amp; doc</a></p>
<p dir="auto">Library for defining, manipulating and displaying tables.</p>
<h3 tabindex="-1" dir="auto">Queues</h3>
<h4 tabindex="-1" dir="auto">queue</h4>
<p dir="auto"><a href="http://www.dr-qubit.org/predictive/queue.el" rel="nofollow">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Provides FIFO / FILO queue APIs.</p>
<h4 tabindex="-1" dir="auto">fifo-class</h4>
<p dir="auto"><a href="https://github.com/mola-T/fifo-class">source &amp; doc</a></p>
<p dir="auto">An EIEIO abstract class class to provide FIFO methods to <i><a href="https://www.gnu.org/software/emacs/manual/html_node/eieio/Slot-Options.html" rel="nofollow">slots</a></i>.</p>
<h3 tabindex="-1" dir="auto">Rings</h3>
<p dir="auto">Even though <code>ring</code> is the standard implementation, some core libs use their own internal implementation (e.g. the <a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/ring-file.html" rel="nofollow">kill-ring</a>).</p>
<h4 tabindex="-1" dir="auto">ring</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/ring.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Provides APIs to create and manipulate a ring data structure.</p>
<p dir="auto">Used by: <code>ERC</code></p>
<h4 tabindex="-1" dir="auto">dynaring</h4>
<p dir="auto"><a href="https://github.com/countvajhula/dynaring">source</a></p>
<p dir="auto">Similar to <code>ring</code>, but w/ a dynamic size.</p>
<h3 tabindex="-1" dir="auto">Trees</h3>
<p dir="auto">Escaped and nested S-exps is the most straightforward way to encode a tree in (E)lisp.</p>
<p dir="auto">Some libraries deliver higherèlevel data structure with manipulation functions for improved performance and convenience.</p>
<h4 tabindex="-1" dir="auto">heap</h4>
<p dir="auto"><a href="http://www.dr-qubit.org/predictive/heap.el" rel="nofollow">source</a></p>
<p dir="auto">Provides APIs to build and manipulate a <i>ternary</i> (at most 3 children per node) <i>heap</i> (self-sorting tree).</p>
<h4 tabindex="-1" dir="auto">avl-tree</h4>
<p dir="auto"><a href="http://www.dr-qubit.org/predictive/avl-tree.el" rel="nofollow">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Provides APIs to build and manipulate a self-balancing binary tree.</p>
<h4 tabindex="-1" dir="auto">hierarchy</h4>
<p dir="auto"><a href="https://github.com/DamienCassou/hierarchy">source &amp; doc</a>, <a href="https://emacs.cafe/emacs/guest-post/2017/06/26/hierarchy.html" rel="nofollow">blog post</a></p>
<p dir="auto">Allows defining trees as well as building user interfaces displaying them.</p>
<h4 tabindex="-1" dir="auto">treepy</h4>
<p dir="auto"><a href="https://github.com/volrath/treepy.el">source &amp; doc</a></p>
<p dir="auto">Allows defining and traversing trees.</p>
<h4 tabindex="-1" dir="auto">taxy</h4>
<p dir="auto"><a href="https://github.com/alphapapa/taxy.el">source &amp; doc</a></p>
<p dir="auto">Allows defining hierarchical taxonomies, i.e. trees w/ automatic classification based on (nested) rules.</p>
<h4 tabindex="-1" dir="auto">rbit</h4>
<p dir="auto"><a href="http://elpa.gnu.org/packages/rbit.html" rel="nofollow">source</a></p>
<p dir="auto">Self-balancing interval trees.</p>
<p dir="auto">Implementation of Chris Okasaki’s algorithm from <a href="https://dl.acm.org/citation.cfm?id=968578.968583&amp;coll=DL&amp;dl=GUIDE" rel="nofollow">“Red-black trees in a functional setting”, JFP’99</a>.</p>
<h4 tabindex="-1" dir="auto">pair-tree</h4>
<p dir="auto"><a href="https://github.com/zainab-ali/pair-tree.el">source &amp; doc</a></p>
<p dir="auto">Visualize and explore nested S-exps as a tree.</p>
<h3 tabindex="-1" dir="auto">Parsers &amp; Parse Trees</h3>
<p dir="auto">Those libraries allow parsing a document in a format / language and converting it to an tree, called an an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow">AST</a>.</p>
<h4 tabindex="-1" dir="auto">parse-it</h4>
<p dir="auto"><a href="https://github.com/jcs-elpa/parse-it">source &amp; doc</a></p>
<p dir="auto">Regexp-based parser, supporting a bunch of languages.</p>
<h4 tabindex="-1" dir="auto">tree-sitter</h4>
<p dir="auto"><a href="https://ubolonton.github.io/emacs-tree-sitter/" rel="nofollow">doc</a>, <a href="https://github.com/ubolonton/emacs-tree-sitter/">source</a>, <a href="https://www.reddit.com/r/emacs/comments/chnxzm/dynamic_module_binding_for_treesitter_an/" rel="nofollow">reddit post</a>, <a href="https://blog.meain.io/2022/more-treesitter-emacs/" rel="nofollow">example usage article</a></p>
<p dir="auto">Implemented as a module, binding with the <a href="https://tree-sitter.github.io/tree-sitter/" rel="nofollow">tree-sitter</a> parser (written in Rust).</p>
<p dir="auto">For a concrete use-case, have a look at <a href="https://github.com/ethan-leba/tree-edit">tree-edit</a>.</p>
<p dir="auto">For a better sitter grammar for elisp (distinguishing between var, functions and macros), use <a href="https://github.com/Wilfred/tree-sitter-elisp">tree-sitter-elisp</a>.</p>
<h4 tabindex="-1" dir="auto">moldable-emacs</h4>
<p dir="auto"><a href="https://github.com/ag91/moldable-emacs">source &amp; doc</a>, <a href="https://github.com/p3r7/awesome-elisp/blob/master/Moldable%20Emacs,%20a%20step%20towards%20sustainable%20software">presentation @ EmacsConf21</a></p>
<p dir="auto">Powerful parser and transformer library, relying on the concept of composable functional <b>molds</b>.</p>
<p dir="auto">Also support asynchronous processing (relying on <a href="#async">async</a>).</p>
<h4 tabindex="-1" dir="auto">tNFA</h4>
<p dir="auto"><a href="http://www.dr-qubit.org/predictive/tNFA.el" rel="nofollow">source</a></p>
<p dir="auto">Provides APIs to build and manipulate NFA (<i>Nondeterministic Finite Automaton</i>), i.e. a state machine / decision tree.</p>
<p dir="auto">It was built manily with regexp parsing in mind.</p>
<h4 tabindex="-1" dir="auto">parsec</h4>
<p dir="auto"><a href="https://github.com/cute-jumper/parsec.el">source &amp; doc</a></p>
<p dir="auto">Parsing library in the spirit of Haskell’s parsec.</p>
<h4 tabindex="-1" dir="auto">pl</h4>
<p dir="auto"><a href="https://github.com/jwiegley/emacs-pl">source &amp; doc</a></p>
<p dir="auto">Parsing library in the spirit of Haskell’s parsec. Somewhat limited.</p>
<h3 tabindex="-1" dir="auto">XML/HTML</h3>
<h4 tabindex="-1" dir="auto">dom</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">DOM manipulation and searching functions.</p>
<h4 tabindex="-1" dir="auto">xml-query</h4>
<p dir="auto"><a href="https://github.com/skeeto/elfeed/blob/master/xml-query.el">source</a></p>
<p dir="auto">List-based XML selectors. Part of the elfeed package.</p>
<h3 tabindex="-1" dir="auto">Org-mode outlines</h3>
<p dir="auto"><code>org-mode</code> outlines (<a href="https://orgmode.org/worg/dev/org-syntax.html" rel="nofollow">spec</a>) can be considered both a file format and a tree format.</p>
<h4 tabindex="-1" dir="auto">org-element</h4>
<p dir="auto"><a href="https://code.orgmode.org/bzg/org-mode/src/master/lisp/org-element.el" rel="nofollow">source</a>, <a href="https://orgmode.org/worg/dev/org-element-api.html" rel="nofollow">doc</a>, <a href="http://ergoemacs.org/emacs/elisp_parse_org_mode.html" rel="nofollow">tutorial on ergoemacs</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto"><code>org-mode</code>’s internal parser, used to convert a text buffer into a tree structure (<i>parse-tree</i>).</p>
<h4 tabindex="-1" dir="auto">org-ml</h4>
<p dir="auto"><a href="https://github.com/ndwarshuis/org-ml">source &amp; doc</a></p>
<p dir="auto">Functional manipulation of an org parse-tree.</p>
<h4 tabindex="-1" dir="auto">org-ql</h4>
<p dir="auto"><a href="https://github.com/alphapapa/org-ql">source &amp; doc</a></p>
<p dir="auto">Query language (<a href="https://en.wikipedia.org/wiki/Domain-specific_language" rel="nofollow">DSL</a>) for parsing, searching and filtering an org outline.</p>
<h4 tabindex="-1" dir="auto">org-ba</h4>
<p dir="auto"><a href="https://github.com/Fuco1/orgba">source &amp; doc</a></p>
<p dir="auto">More user-friendly APIs for writting code for interacting with org documents.</p>
<h3 tabindex="-1" dir="auto">Faces</h3>
<p dir="auto"><i>Faces</i> are a group of attributes controlling the formatting of text in Emacs.</p>
<p dir="auto">It’s akin to CSS for HTML or styling <a href="https://en.wikipedia.org/wiki/ANSI_escape_code" rel="nofollow">ANSI escape sequences</a> for terminal text.</p>
<p dir="auto">You can read more about <i>faces</i> in the <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Faces.html" rel="nofollow">Emacs manual</a> or the <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Faces.html" rel="nofollow">Emacs Lisp Reference Manual</a>.</p>
<h4 tabindex="-1" dir="auto">engrave-faces</h4>
<p dir="auto"><a href="https://github.com/tecosaur/engrave-faces">source &amp; doc</a></p>
<p dir="auto">Convert faces to other formats.</p>
<p dir="auto">Currently, only LaTeX is supported.</p>
<h3 tabindex="-1" dir="auto">Color Codes</h3>
<h4 tabindex="-1" dir="auto">color</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/color.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<h4 tabindex="-1" dir="auto">color-tools</h4>
<p dir="auto"><a href="https://github.com/neeasade/color-tools.el">source &amp; doc</a>, <a href="https://notes.neeasade.net/color-spaces.html" rel="nofollow">blog post</a></p>
<p dir="auto">Color codes manipulation, with support for various color spaces.</p>
<h4 tabindex="-1" dir="auto">yk-color</h4>
<p dir="auto"><a href="https://github.com/yurikhan/yk-color">source</a></p>
<p dir="auto">Color codes manipulation.</p>
<h2 tabindex="-1" dir="auto">Concurrency / Asynchronicity</h2>
<p dir="auto">Concurrency in Elisp / Emacs is a hot topic.</p>
<p dir="auto">Due to its single-threaded nature, we can’t do parallel processing unless using some dirty tricks (see <a href="#async">async</a>).</p>
<p dir="auto">But that doesn’t prevent us from doing concurrent processing, with say <i>timers</i>.</p>
<p dir="auto">Emacs recently extended this support with <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Generators.html" rel="nofollow">generators</a> (since 25.1) and <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Threads.html" rel="nofollow">native threads</a> (not what you might be thinking of, since 26.1).</p>
<p dir="auto">For more info on those subject, read:</p>
<ul dir="auto">
  <li><a href="https://www.emacswiki.org/emacs/NoThreading" rel="nofollow">emacswiki/No Threading</a></li>
  <li><a href="https://www.emacswiki.org/emacs/NoThreading" rel="nofollow">emacswiki/Concurrent Emacs</a></li>
  <li>blog post from @skeeto: <a href="https://nullprogram.com/blog/2018/05/31/" rel="nofollow">Emacs 26 Brings Generators and Threads</a></li>
</ul>
<h3 tabindex="-1" dir="auto">Timers</h3>
<h4 tabindex="-1" dir="auto">timer</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/timer.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Default timer lib.</p>
<h4 tabindex="-1" dir="auto">named-timer</h4>
<p dir="auto"><a href="https://github.com/DarwinAwardWinner/emacs-named-timer">source &amp; doc</a></p>
<p dir="auto">Easier to use timer lib.</p>
<h3 tabindex="-1" dir="auto">Promises &amp; Delays</h3>
<h4 tabindex="-1" dir="auto">thunk.el</h4>
<p dir="auto"><a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/thunk.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Provides an API for creating and dereferencing / evaluating <i>delays</i>.</p>
<h4 tabindex="-1" dir="auto">promise.el</h4>
<p dir="auto"><a href="https://github.com/chuntaro/emacs-promise">source &amp; doc</a></p>
<p dir="auto">Reimplementation of the <a href="https://promisesaplus.com/" rel="nofollow">Promises/A+</a> open standard (originally targeting Javascript).</p>
<h4 tabindex="-1" dir="auto">aio</h4>
<p dir="auto"><a href="https://github.com/skeeto/emacs-aio">source &amp; doc</a>, <a href="https://nullprogram.com/blog/2019/03/10/" rel="nofollow">blog post</a></p>
<p dir="auto">Mostly an async/await lib but implements its own promise system internally.</p>
<h3 tabindex="-1" dir="auto">Async Elisp function calls</h3>
<h4 tabindex="-1" dir="auto">deferred</h4>
<p dir="auto"><a href="https://github.com/kiwanami/emacs-deferred">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Not super-actively maintained, but quite stable and featureful.</p>
<p dir="auto">Achieves concurrency through the use of timers.</p>
<p dir="auto">Also allows handling async (sub-)processes and HTTP calls with <a href="https://github.com/tkf/emacs-request">request.el bindings</a>.</p>
<h4 tabindex="-1" dir="auto">concurrent</h4>
<p dir="auto"><a href="https://github.com/kiwanami/emacs-deferred/blob/master/concurrent.el">source</a>, <a href="https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown">doc</a></p>
<p dir="auto">Higher-level wrapper around <code>deferred</code>.</p>
<p dir="auto">Provides various syntaxes inspired by those of other programming languages, such as:</p>
<ul dir="auto">
  <li>Clojure / Java / Lua’s coroutines (<code>threads</code>)</li>
  <li>Python’s asyncio coroutines (<code>generators</code>)</li>
  <li>Clojure’s <a href="https://github.com/clojure/core.async">core.async</a> pipelines (<code>signals</code> / <code>channels</code>).</li>
</ul>
<h4 tabindex="-1" dir="auto">async</h4>
<p dir="auto"><a href="https://github.com/jwiegley/emacs-async">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Achieves true parallel processing by spawning a child Emacs sub-process.
  As such, necessary context needs to be passed w/ <code>async-inject-variables</code>.</p>
<p dir="auto">Supports defining callbacks.</p>
<p dir="auto">Offers bindings w/ <code>dired</code>, <code>bytecomp</code> and <code>smtp-mail</code>.</p>
<h4 tabindex="-1" dir="auto">timp</h4>
<p dir="auto"><a href="https://github.com/mola-T/timp">source &amp; doc</a></p>
<p dir="auto">Multithreading through sub-processes with over-the-wire payload capabilities.</p>
<p dir="auto">Achieves true parallel processing by spawning a child Emacs sub-process for each thread.</p>
<h4 tabindex="-1" dir="auto">aio</h4>
<p dir="auto"><a href="https://github.com/skeeto/emacs-aio">source &amp; doc</a>, <a href="https://nullprogram.com/blog/2019/03/10/" rel="nofollow">blog post</a></p>
<p dir="auto">Short for <code>async-io</code>.</p>
<p dir="auto">Allows writing coroutines with the async/await syntax found in Python’s <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">asyncio</a>.</p>
<p dir="auto">Internal representation relies on its own promise implementation and <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Generators.html" rel="nofollow">generators</a>.</p>
<h4 tabindex="-1" dir="auto">async-await</h4>
<p dir="auto"><a href="https://github.com/chuntaro/emacs-async-await">source &amp; doc</a></p>
<p dir="auto">Simple implementation of Async/Await, based on the TypeScript syntax.</p>
<p dir="auto">Relies on <code>promise.el</code> and <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Generators.html" rel="nofollow">generators</a>.</p>
<h4 tabindex="-1" dir="auto">lcr</h4>
<p dir="auto"><a href="https://github.com/jyp/lcr">source</a></p>
<p dir="auto">lcr stands for Lightweight CoRoutines.</p>
<p dir="auto">Seems to rely on timers.</p>
<h3 tabindex="-1" dir="auto">Async sub-processes</h3>
<p dir="auto">These libs only allow to run asynchronously command processes (as opposed to Elisp function calls).</p>
<p dir="auto">It can be done in standard with low-level function <code>make-process</code> or derivatives <code>start-process</code>, <code>make-pipe-process</code> and <code>start-process-shell-command</code>.</p>
<p dir="auto">Some advanced behaviours are hard to program, that’s why wrapper libraries can help you.</p>
<p dir="auto">Notably:</p>
<ul dir="auto">
  <li>ensuring the process is launched asynchronously (not blocking Emacs)</li>
  <li>configuring callbacks (by binding a <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Sentinels.html" rel="nofollow">sentinel</a> to the process)</li>
</ul>
<h4 tabindex="-1" dir="auto">deferred</h4>
<p dir="auto"><a href="https://github.com/kiwanami/emacs-deferred">source &amp; doc</a></p>
<p dir="auto">Not super-actively maintained, but featureful.</p>
<p dir="auto">Also allows handling async Elisp function calls and HTTP calls with <a href="https://github.com/tkf/emacs-request">request.el bindings</a>.</p>
<h4 tabindex="-1" dir="auto">bpr</h4>
<p dir="auto"><a href="https://github.com/ilya-babanov/emacs-bpr">source &amp; doc</a></p>
<p dir="auto">Stands for Background Process Runner.
  Allows running a command process in the background.</p>
<p dir="auto">Allows advanced callback behaviours.</p>
<p dir="auto">It relies on <code>start-process-shell-command</code>.</p>
<h4 tabindex="-1" dir="auto">pfuture</h4>
<p dir="auto"><a href="https://github.com/Alexander-Miller/pfuture">source &amp; doc</a></p>
<p dir="auto">Allows running a command process in the background.</p>
<p dir="auto">Result can be handled either with a future (<code>pfuture-new</code>, <code>pfuture-result</code>) or a callback (<code>pfuture-callback</code>).</p>
<p dir="auto">It relies on <code>make-pipe-process</code> for the future-based implementation and <code>make-process</code> for the callback one.</p>
<h3 tabindex="-1" dir="auto">Async interpreter commands</h3>
<p dir="auto">Emacs provides a layer on top of <code>make-process</code> for spawning commands from a shell interpreter (i.e. <code>bash</code> or <code>zsh</code>).</p>
<p dir="auto">These are provided by <code>simple.el</code> (<a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/simple.el">source</a>).</p>
<p dir="auto">The async version of these command is <code>async-shell-command</code>.</p>
<p dir="auto">Some advanced behaviours are hard to program, that’s why wrapper libraries can help you.</p>
<h4 tabindex="-1" dir="auto">dtache</h4>
<p dir="auto"><a href="https://gitlab.com/niklaseklund/dtache" rel="nofollow">source &amp; doc</a></p>
<p dir="auto">Provides <code>dtache-shell-command</code>, a drop-in replacement for <code>async-shell-command</code> that allows command execution to persist even after the Emacs process exits.</p>
<p dir="auto">Also works on remote hosts.</p>
<p dir="auto">Relies on <a href="https://github.com/crigler/dtach">dtach</a> to create a persistent session.</p>
<h4 tabindex="-1" dir="auto">friendly-shell-command</h4>
<p dir="auto"><a href="https://github.com/p3r7/friendly-shell">source &amp; doc</a></p>
<p dir="auto"><code>friendly-shell-command</code> provides <code>friendly-shell-command-async</code>, a wrapper around <code>async-shell-command</code> with easier access to advanced behaviours thanks to optional keyword arguments.</p>
<p dir="auto">It notably eases associating a callback to the end of the execution, running on remote hosts and launching with alternative interpreters.</p>
<h2 tabindex="-1" dir="auto">Buffer Manipulation</h2>
<h4 tabindex="-1" dir="auto">b</h4>
<p dir="auto"><a href="https://github.com/emacs-php/b.el">source &amp; doc</a></p>
<p dir="auto">Utility functions for buffer manipulation.</p>
<h4 tabindex="-1" dir="auto">tp</h4>
<p dir="auto"><a href="https://github.com/alphapapa/tp.el">source</a></p>
<p dir="auto">Utilities for helping with manipulating a buffer’s <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html" rel="nofollow">text properties</a>.</p>
<h4 tabindex="-1" dir="auto">m-buffer</h4>
<p dir="auto"><a href="http://phillord.github.io/m-buffer-el/" rel="nofollow">doc</a>, <a href="https://github.com/phillord/m-buffer-el">source</a></p>
<p dir="auto">List-oriented functions for accessing and manipulating the contents of Emacs buffers.</p>
<h2 tabindex="-1" dir="auto">Filesystem Interactions</h2>
<h3 tabindex="-1" dir="auto">f</h3>
<p dir="auto"><a href="https://github.com/rejeep/f.el">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Modern API for working with files and directories.</p>
<h2 tabindex="-1" dir="auto">Networking</h2>
<h3 tabindex="-1" dir="auto">HTTP client</h3>
<p dir="auto">Emacs comes already with an HTTP client, <code>url.el</code>, written in pure Elisp (<a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/url/url.el">source</a>), which has a few limitations.
  It exposes functions <code>url-retrieve-synchronously</code> and <code>url-retrieve</code> (async).</p>
<h4 tabindex="-1" dir="auto">request</h4>
<p dir="auto"><a href="https://github.com/tkf/emacs-request">source &amp; doc</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">If found on the system, uses the <i>cURL</i> binary instead of <code>url.el</code>.
  Can be customized with <code>request-backend</code>.</p>
<p dir="auto">Supports a bunch of options exposed clearly with keyword arguments.</p>
<p dir="auto">Advanced asynchronicity via bindings with <code>deferred</code>.</p>
<h4 tabindex="-1" dir="auto">plz</h4>
<p dir="auto"><a href="https://github.com/alphapapa/plz.el">source &amp; doc</a></p>
<p dir="auto">Uses the <i>cURL</i> binary (<code>curl</code>) instead of <code>url.el</code>.</p>
<p dir="auto">Supports a bunch of options exposed clearly with keyword arguments.</p>
<p dir="auto">Supports both synchronous &amp; asynchronous calls, as well as queuing.</p>
<p dir="auto">When doing async request, the returned handler is a <code>curl</code> process object.</p>
<p dir="auto">Strong contender for a lightweight alternative to <code>request</code>.</p>
<h4 tabindex="-1" dir="auto">mb-url</h4>
<p dir="auto"><a href="https://github.com/dochang/mb-url">source &amp; doc</a></p>
<p dir="auto">Stands for “Multiple Backends for URL package”.</p>
<p dir="auto">Provides API-compatible replacements to <code>url-retrieve</code> and <code>url-retrieve-synchronously</code> using <i>cURL</i> and <i>HTTPie</i>.</p>
<h4 tabindex="-1" dir="auto">websocket</h4>
<p dir="auto"><a href="https://github.com/ahyatt/emacs-websocket">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/informal-standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/informal-standard.png" alt="./rsc/icon/informal-standard.png"></a></p>
<p dir="auto">Websocket (peristent HTTP connection) client for Emacs.</p>
<h4 tabindex="-1" dir="auto">apiwrap</h4>
<p dir="auto"><a href="https://github.com/vermiculus/apiwrap.el">source &amp; doc</a></p>
<p dir="auto">Macros to ease the definition of binding functions to HTTP APIs.</p>
<h4 tabindex="-1" dir="auto">with-proxy</h4>
<p dir="auto"><a href="https://github.com/twlz0ne/with-proxy.el">source &amp; doc</a></p>
<p dir="auto">Wrapper for let-binding HTTP proxies.</p>
<h3 tabindex="-1" dir="auto">HTTP server</h3>
<h4 tabindex="-1" dir="auto">simple-httpd</h4>
<p dir="auto"><a href="https://github.com/skeeto/emacs-web-server">source &amp; doc</a></p>
<p dir="auto">A web server written in pure Elisp, serving HTTP.</p>
<h4 tabindex="-1" dir="auto">web-server</h4>
<p dir="auto"><a href="https://github.com/eschulte/emacs-web-server">source &amp; doc</a></p>
<p dir="auto">A web server written in pure Elisp, serving HTTP APIs bound to Elisp functions (<i>handlers</i>).</p>
<h3 tabindex="-1" dir="auto">RPC server</h3>
<p dir="auto">A <a href="https://en.wikipedia.org/wiki/Remote_procedure_call" rel="nofollow">Remote Procedure Call</a> server allows Emacs to receive commands from a remote process through a messaging system.</p>
<p dir="auto">It’s a common strategy of <a href="https://en.wikipedia.org/wiki/Inter-process_communication" rel="nofollow">inter-process communication</a> (IPC).</p>
<h4 tabindex="-1" dir="auto">porthole</h4>
<p dir="auto"><a href="https://github.com/jcaw/porthole">source &amp; doc</a></p>
<p dir="auto">Start a HTTP-based RPC server under Emacs.</p>
<p dir="auto">Commands are direct Elisp code to be executed. They can (by default) only be called synchronously.</p>
<p dir="auto">Messages are encoded in JSON (following the <a href="https://www.jsonrpc.org/specification" rel="nofollow">JSON-RPC 2.0 Specification</a>) which makes it support client libraries of almost any language.</p>
<p dir="auto">Relies on <code>web-server</code>.</p>
<h4 tabindex="-1" dir="auto">EPC</h4>
<p dir="auto"><a href="https://github.com/kiwanami/emacs-epc">source &amp; doc</a></p>
<p dir="auto">Start a RPC client &amp; server under Emacs.</p>
<p dir="auto">It implements its own protocol (over TCP) and support both synchronous &amp; asynchronous execution (via bindings with <code>deferred</code>).</p>
<p dir="auto">Commands are explicitly defined (akin to handlers bound to <i>routes</i> in an HTTP API).</p>
<p dir="auto">Messages are encoded as Lisp / S-exprs, which makes it more challenging to implement client libraries in non-Lisp languages.</p>
<h3 tabindex="-1" dir="auto">D-Bus</h3>
<p dir="auto">D-Bus is the most popular <a href="https://en.wikipedia.org/wiki/Inter-process_communication" rel="nofollow">inter-process communication</a> (IPC) protocol under Linux.</p>
<p dir="auto">Emacs supports it by default.</p>
<h4 tabindex="-1" dir="auto">dbus</h4>
<p dir="auto"><a href="https://www.gnu.org/software/emacs/manual/html_mono/dbus.html" rel="nofollow">doc</a>, <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/net/dbus.el">source</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto">Very boilerplate-y to use.</p>
<h4 tabindex="-1" dir="auto">debase</h4>
<p dir="auto"><a href="https://github.com/ieure/debase">source &amp; doc</a></p>
<p dir="auto">EIEIO abstractions over <code>dbus</code> for writting easier interaction code.</p>
<h2 tabindex="-1" dir="auto">Database Access</h2>
<h3 tabindex="-1" dir="auto">SQL</h3>
<h4 tabindex="-1" dir="auto">sql</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<p dir="auto"><a href="https://repo.or.cz/w/emacs.git/blob/HEAD:/lisp/progmodes/sql.el" rel="nofollow">source</a>, <a href="https://www.emacswiki.org/emacs/SqlMode" rel="nofollow">emacswiki</a></p>
<p dir="auto">Not a client <i>per se</i>.</p>
<p dir="auto">Provides <code>sql-mode</code>, a comint-based REPL wrapper supporting various CLI client interpreters.</p>
<h4 tabindex="-1" dir="auto">sqlite</h4>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a> (since version 29)</p>
<p dir="auto">Recent Emacs now embbeds a native SQLite3 database &amp; the accompagnying client.</p>
<h4 tabindex="-1" dir="auto">emacsql</h4>
<p dir="auto"><a href="https://github.com/skeeto/emacsql">source &amp; doc</a></p>
<p dir="auto">High-level client to SQLite, PostgreSQL &amp; MySQL.</p>
<p dir="auto">Queries and schema definitions are written in specific tree-based DSLs, allowing easy programmatic manipulation.</p>
<h4 tabindex="-1" dir="auto">closql</h4>
<p dir="auto"><a href="https://github.com/emacscollective/closql">source</a></p>
<p dir="auto"><a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping" rel="nofollow">ORM</a> providing mapping between <a href="#eieio">EIEIO</a> and SQLite tables.</p>
<p dir="auto">Relies on <code>emacsql</code>.</p>
<h4 tabindex="-1" dir="auto">edbi</h4>
<p dir="auto"><a href="https://github.com/kiwanami/emacs-edbi">source &amp; doc</a></p>
<p dir="auto">Client to SQL dialects, using <a href="https://dbi.perl.org/" rel="nofollow">Perl’s Database Interface</a> (<i>DBI</i>) as a connection interface.</p>
<p dir="auto">In addition to programmatic querying capabilities, provides several major modes for user interactions with database instances.</p>
<h4 tabindex="-1" dir="auto">triples</h4>
<p dir="auto"><a href="https://github.com/ahyatt/triples">source &amp; doc</a></p>
<p dir="auto">Abstraction on top of SQL clients (either <code>emacsql</code> or <code>sqlite</code>) to represent &amp; store a graph database.</p>
<h2 tabindex="-1" dir="auto">GUI</h2>
<p dir="auto">Honorable mention: <a href="https://github.com/sabof/magic-buffer">magic-buffer</a>, an executable cookbook on how to use &amp; abuse Emacs’ buffer display engine.</p>
<h3 tabindex="-1" dir="auto">Popups</h3>
<h4 tabindex="-1" dir="auto">frog-menu</h4>
<p dir="auto"><a href="https://github.com/clemera/frog-menu">source &amp; doc</a></p>
<p dir="auto">User selection menu in the form of a popup.</p>
<h3 tabindex="-1" dir="auto">Overlays</h3>
<h4 tabindex="-1" dir="auto">ov</h4>
<p dir="auto"><a href="https://github.com/emacsorphanage/ov">source &amp; doc</a></p>
<p dir="auto">Helpers to manipulate overlays.
  Originally authored by <a href="https://github.com/ShingoFukuyama">@ShingoFukuyama</a>. Unmaintained.</p>
<h3 tabindex="-1" dir="auto">Charts &amp; diagrams</h3>
<h4 tabindex="-1" dir="auto">chart</h4>
<p dir="auto"><a href="https://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/" rel="nofollow">tutorial</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/p3r7/awesome-elisp/blob/master/rsc/icon/standard.png"><img src="https://github.com/p3r7/awesome-elisp/raw/master/rsc/icon/standard.png" alt="./rsc/icon/standard.png"></a></p>
<h2 tabindex="-1" dir="auto">Heroes</h2>
<p dir="auto">Emacs has too many heroes to really list.</p>
<p dir="auto">In this section, we list some users who have significantly contributed with libraries and resources that improve the Emacs development experience.</p>
<p dir="auto">They are listed in alphabetical order.</p>
<p dir="auto">Another complementary list is <a href="https://github.com/tarsius/elisp-maintainers">elisp-maintainers</a>.</p>
<h2 tabindex="-1" dir="auto">@alphapapa</h2>
<p dir="auto"><a href="https://github.com/alphapapa">github</a></p>
<p dir="auto">Contributed to Elisp development with:</p>
<ul dir="auto">
  <li><a href="https://github.com/alphapapa/emacs-package-dev-handbook">The Emacs Package Developer’s Handbook</a></li>
  <li><code>makem.sh</code></li>
  <li><code>ts</code></li>
  <li><code>plz</code></li>
  <li><code>org-ql</code></li>
</ul>
<h2 tabindex="-1" dir="auto">Bozhidar Batsov (@bbatsov)</h2>
<p dir="auto"><a href="https://github.com/bbatsov">github</a>, <a href="https://emacsredux.com/" rel="nofollow">Emacs-related blog</a>, <a href="https://github.com/sponsors/bbatsov">open to sponsoring</a></p>
<p dir="auto">Known for:</p>
<ul dir="auto">
  <li><a href="https://github.com/bbatsov/projectile">projectile</a>: the best project management package for Emacs</li>
  <li><a href="https://cider.mx/" rel="nofollow">CIDER</a>: the interactive Clojure development environment for Emacs</li>
</ul>
<p dir="auto">Contributed to Elisp development with:</p>
<ul dir="auto">
  <li><a href="https://github.com/bbatsov/emacs-lisp-style-guide">The Emacs Lisp Style Guide</a></li>
</ul>
<h2 tabindex="-1" dir="auto">Caio Rordrigues (@caiorss)</h2>
<p dir="auto"><a href="https://github.com/caiorss">github</a></p>
<p dir="auto">Contributed to Elisp development with:</p>
<ul dir="auto">
  <li>his book <a href="http://caiorss.github.io/Emacs-Elisp-Programming/" rel="nofollow">Emacs In a Box</a></li>
</ul>
<h2 tabindex="-1" dir="auto">Chris Wellons (@skeeto)</h2>
<p dir="auto"><a href="https://github.com/skeeto">github</a>, <a href="https://nullprogram.com/" rel="nofollow">blog</a></p>
<p dir="auto">Known for:</p>
<ul dir="auto">
  <li><a href="https://github.com/skeeto/elfeed">elfeed</a>, the popular Emacs RSS reader</li>
  <li><a href="https://github.com/skeeto/skewer-mode">skewer-mode</a>, interactive web development with auto-reload on edit</li>
</ul>
<p dir="auto">Contributed to Elisp development with:</p>
<ul dir="auto">
  <li>his blog, <i>nullprogram.com</i></li>
  <li><code>aio</code></li>
  <li><code>emacsql</code></li>
  <li><code>simple-httpd</code></li>
  <li><code>week-ref</code></li>
</ul>
<h2 tabindex="-1" dir="auto">John Wiegley (@jwiegley)</h2>
<p dir="auto"><a href="http://newartisans.com/" rel="nofollow">blog</a>, <a href="https://github.com/jwiegley">github</a>, <a href="https://github.com/jwiegley/dot-emacs/blob/master/init.el">dot emacs</a></p>
<p dir="auto">Known for:</p>
<ul dir="auto">
  <li>being the head of the Emacs project maintainers</li>
  <li>authoring <code>use-package</code></li>
</ul>
<p dir="auto">Contributed to Elisp development with:</p>
<ul dir="auto">
  <li><code>async.el</code></li>
  <li>talks on how to setup Emacs to ease Elisp development:
    <ul dir="auto">
      <li><a href="https://www.youtube.com/watch?v=QFClYrhV1z4" rel="nofollow">Emacs Lisp Development - @ Emacs Conference 2013</a></li>
      <li><a href="https://sachachua.com/blog/2015/04/2015-04-08-emacs-lisp-development-tips-with-john-wiegley/" rel="nofollow">Emacs Lisp Development Tips - Sacha Chua Emacs Chat 2015-04-08</a>.</li>
    </ul>
  </li>
</ul>
<h2 tabindex="-1" dir="auto">Jonas Bernoulli (@tarsius)</h2>
<p dir="auto"><a href="https://emacsair.me/" rel="nofollow">blog</a>, <a href="https://github.com/tarsius">github</a>, <a href="https://magit.vc/donate/" rel="nofollow">open to sponsoring</a></p>
<p dir="auto">Known for:</p>
<ul dir="auto">
  <li>authoring <a href="https://github.com/magit/magit">magit</a></li>
  <li>lots of high quality smaller packages (<a href="https://github.com/tarsius/orglink">orglink</a>, <a href="https://github.com/tarsius/keycast">keycast</a>…)</li>
</ul>
<p dir="auto">Contributed to Elisp development with:</p>
<ul dir="auto">
  <li><a href="https://github.com/magit/transient">transient</a></li>
  <li><code>closql</code></li>
</ul>
<h2 tabindex="-1" dir="auto">Magnar Sveen (@magnars)</h2>
<p dir="auto"><a href="https://github.com/magnars">github</a>, <a href="http://twitter.com/magnars" rel="nofollow">twitter</a></p>
<p dir="auto">Contributed to Elisp development with:</p>
<ul dir="auto">
  <li><a href="https://github.com/magnars/s.el">s</a> (strings)</li>
  <li><a href="https://github.com/magnars/dash.el">dash</a> (lists)</li>
</ul>
<h2 tabindex="-1" dir="auto">Nicolas Petton</h2>
<p dir="auto"><a href="https://nicolas.petton.fr/" rel="nofollow">portfolio</a>, <a href="https://emacs.cafe/" rel="nofollow">blog</a>, <a href="https://github.com/NicolasPetton">github</a></p>
<p dir="auto">Known for:</p>
<ul dir="auto">
  <li>creating the popular <a href="https://github.com/NicolasPetton/Indium">Indium</a> interactive Javascript development environment</li>
</ul>
<p dir="auto">Contributed to Elisp development with:</p>
<ul dir="auto">
  <li>creating the now standard <code>seq.el</code> and <code>map.el</code></li>
  <li><code>stream.el</code></li>
</ul>
<h2 tabindex="-1" dir="auto">Oleh Krehel (@abo-abo)</h2>
<p dir="auto"><a href="https://oremacs.com/" rel="nofollow">blog</a>, <a href="https://github.com/abo-abo">github</a>, <a href="https://github.com/sponsors/abo-abo">open to sponsoring</a></p>
<p dir="auto">Author of many high-quality packages such as <a href="https://github.com/abo-abo/swiper">ivy</a>, <a href="https://github.com/abo-abo/hydra">hydra</a>, <a href="https://github.com/abo-abo/lispy">lispy</a>…</p>
<h2 tabindex="-1" dir="auto">Toby ‘qubit’ Cubitt</h2>
<p dir="auto"><a href="http://www.dr-qubit.org/" rel="nofollow">website</a></p>
<p dir="auto">Known for:</p>
<ul dir="auto">
  <li><a href="http://www.dr-qubit.org/undo-tree/undo-tree.el" rel="nofollow">undo-tree</a></li>
</ul>
<p dir="auto">Contributed to Elisp development with <a href="http://www.dr-qubit.org/emacs_data-structures.html" rel="nofollow">his implementation of basic and more complex data structures</a>: <code>queue</code>, <code>heap</code>, <code>avl-tree</code>, <code>trie</code>, <code>dict-tree</code>, <code>tNFA</code>.</p>
<h2 tabindex="-1" dir="auto">Xah Lee</h2>
<p dir="auto"><a href="http://ergoemacs.org/emacs/emacs.html" rel="nofollow">website</a>, <a href="https://www.patreon.com/xahlee" rel="nofollow">open to sponsoring</a></p>
<p dir="auto">A controversial figure in the Emacs community (he is <a href="http://ergoemacs.org/emacs/_p/KickbanXahLeeFromEmacsChannel.htm" rel="nofollow">notorious for trolling</a>), Xah nethertheless created the first online digestible resource for learning Elisp.</p>
<p dir="auto">His contribution to the Emacs world is unquestionable and as such he deserves his place in this list.</p>
<h2 tabindex="-1" dir="auto">Contributing</h2>
<p dir="auto">Contributions and suggestions are always welcome!</p>
<p dir="auto">The <a href="https://github.com/p3r7">original author</a> made this document available as he felt something like it was missing.</p>
<p dir="auto">The idea is to have this evolve into a community effort, the initial version being only a baseline.</p>
<h2 tabindex="-1" dir="auto">Guidelines</h2>
<h3 tabindex="-1" dir="auto">PR and Issues</h3>
<p dir="auto">Open one issue or PR / subject matter.</p>
<p dir="auto">Don’t go submit a gazillion unrelated changes that would conflict with other’s submitted PRs.</p>
<h3 tabindex="-1" dir="auto">Opinions</h3>
<p dir="auto">Try to not be too opinionated.</p>
<p dir="auto">Some solutions are objectively better in some regards than others and that can be stated but don’t go launch a flame war.</p>
<p dir="auto">Descriptions of libraries and tools expressed in this document are always subject to change. If a description feels too negative, don’t hesitate to open an issue to discuss it.</p>
<h3 tabindex="-1" dir="auto">Scope</h3>
<p dir="auto">The aim of this document is to (loosely) follow the style of other <a href="https://github.com/sindresorhus/awesome">awesome lists</a>.</p>
<p dir="auto">Content should be concise and always follow the same format.</p>
<p dir="auto">In this spirit, no block quotes, no code snippets and no in-depth explanation of concepts should appear here.</p>
<p dir="auto">This is no cookbook, no manual, no article.</p>
<p dir="auto">Section can have small introduction to contextualize things (e.g. built-in libs) but should remain succinct, instead favoring links to external articles.</p>
<p dir="auto">The introduction of the <a href="#concurrency--asynchronicity">Concurrency / Asynchronicity</a> is a good example of concisely presenting the necessary information and linking to external resources.</p>
<p dir="auto">On the contrary, the <a href="#maps">Maps</a> section goes into too much details and should instead link to an article.</p>
<h4 tabindex="-1" dir="auto">Relevant Content: Development Tools</h4>
<p dir="auto">In <a href="#development-tools">Development Tools</a>, only list tools and package that are specific to Elisp development.</p>
<p dir="auto">It’s very tempting to list stuff such as <code>projectile</code> or <code>treemacs</code> but those packages apply not only to Elisp development and should not be listed.</p>
<p dir="auto">Don’t create a sub-section for tools that have modern counterpart and are deprecated / no more maintained. You could eventually mention them like it’s done for <code>highlight-defined</code> in <a href="#syntax-highlighting--visual-enhancements">Syntax Highlighting &amp; Visual Enhancements</a>.</p>
<h4 tabindex="-1" dir="auto">Relevant Content: Libraries</h4>
<p dir="auto">In <a href="#libraries">Libraries</a>, only list packages that were created to be used as libraries and generic enough to target a broad range of applications.</p>
<p dir="auto">E.g. HTTP client libs such as <code>request</code> have their place, wrappers targeting a specific API (such as <code>ghub</code> or <code>pocket-lib</code>) don’t.</p>
<h3 tabindex="-1" dir="auto">Comments</h3>
<p dir="auto">Each linked resource / tool / library should be commented.</p>
<p dir="auto">This comment is a short intro and analysis and must not be copy-pasted directly from the linked resource page.</p>
<p dir="auto">Instead it should provide insights as to how it compares to other links in a similar category: what are the differences, advantages, drawbacks.</p>
<p dir="auto">This description should be short and ideally not exceed a few lines.</p>
<h3 tabindex="-1" dir="auto">Order of Tools &amp; Libraries</h3>
<p dir="auto">Try to put the most “standard” entries first.</p>
<p dir="auto">By standard we mean, in order: embedded in Emacs, most sane or used by the most people / projects.</p>
<h3 tabindex="-1" dir="auto">Order of Categories</h3>
<p dir="auto">Don’t submit a PR single-handedly deciding to reorganize the whole document structure.</p>
<p dir="auto">Open an issue and provoke conversation.</p>
<p dir="auto">What can feel natural to you can be counter-intuitive to others.</p>
<h2 tabindex="-1" dir="auto">License &amp; Acknowledgments</h2>
<p dir="auto"><a href="https://creativecommons.org/publicdomain/zero/1.0/" rel="nofollow"><img src="https://camo.githubusercontent.com/9e918e1e7cd28a73246cf1c8d2c9903da3e487a65931c823a2391afe4b4a0d04/68747470733a2f2f6c6963656e7365627574746f6e732e6e65742f702f7a65726f2f312e302f38387833312e706e67" alt="https://licensebuttons.net/p/zero/1.0/88x31.png" data-canonical-src="https://licensebuttons.net/p/zero/1.0/88x31.png"></a></p>
<p dir="auto">Ribbon icons courtesy of <a href="https://icons8.com/" rel="nofollow">icons8</a>.</p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Alt-F4 #65 – Factorio visualizer in Unreal Engine 5 (368 pts)]]></title>
            <link>https://alt-f4.blog/ALTF4-65/</link>
            <guid>36561847</guid>
            <pubDate>Sun, 02 Jul 2023 14:34:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://alt-f4.blog/ALTF4-65/">https://alt-f4.blog/ALTF4-65/</a>, See on <a href="https://news.ycombinator.com/item?id=36561847">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>
Written by <em>Hurricane</em>,
edited by <em>Nanogamer7, stringweasel, Conor_, Therenas, MyNameIsTrez, Firerazer</em>
</p><div>

<p>Today we’ve got a very fun project to talk about: The FUE5 project, explained in this article by <em>Hurricane</em>. It’s Factorio, but <em>3D</em>! Dreams do come true sometimes. It’s not quite a game, but more of a stunning re-imagining of its visuals. There’s lots of technical details on how this was achieved, so let’s jump in.</p>
<h2 id="what-is-fue5">
<a href="#what-is-fue5">What is FUE5?</a>
</h2>
<p>FUE5 (short for <strong>F</strong>actorio in <strong>U</strong>nreal <strong>E</strong>ngine <strong>5</strong>) is an experimental project with a simple goal: to visualize the 2D world of Factorio in 3D space. It was created by 3D artist Hurricane and Factorio modder Nuke during a five month period, starting on January 10th 2023.
While many creative people in the Factorio modding community create awesome large-scale mods like Space Exploration, Bob’s mods or Angel’s, we decided to take a slightly different approach. To put it simply, this project is a 3D visualization environment which can import bases from the Factorio game and visually replicate their behavior. It contains no gameplay, however you can fly around and visit your base in 3D.</p>
<p>
<iframe src="https://www.youtube.com/embed/01qux-5Qx_Y" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</p>


<div>
<figure>
<img src="https://media.alt-f4.blog/ALTF4/65/snap.jpg" alt="3D view of large scale factory with a variety of machines and structures.">
<figcaption>Example of a large-scale factory in the trailer. Don’t mind the missing power poles.</figcaption>
</figure>
</div>


<h2 id="how-was-it-done">
<a href="#how-was-it-done">How was it done?</a>
</h2>
<p>To even start thinking about a project such as this, it was necessary to model and animate each Factorio asset, be it assembling machine or inserter, from scratch based on the sprites from the game. We’ve used Cinema4D for 3D modelling and Adobe Photoshop for creating the textures. Once the model and textures are done, the entire structure is exported from Cinema4D to FBX format, which is then imported into Unreal Engine 5, where proper shaders are applied - such shaders are usually materials like glass, metal, or even smoke from a chimney.</p>


<div>
<figure>
<img src="https://media.alt-f4.blog/ALTF4/65/structures.jpg" alt="3 Way split depicting chemical plant. Left: Factorio Sprite. Middle: Wireframe remodel. Right: Textured remodel.">
<figcaption>The remodelling process was a lot of fun, but next time we should really ask for the original Factorio models to preserve what’s left of our sanity.</figcaption>
</figure>
</div>


<p>It was also necessary to replicate several key systems like belts, trains, and the logistic system. These were created via the native UE5 blueprint node system. We decided to create all the logic for these system after the 3D modelling was mostly finished, since it was necessary to have the correctly sized 3D models placed in 3D space for proper alignment of moving elements such as trains and items on belts. One major step which helped push the project forward was the ingenious idea to export Factorio bases from the game directly, and to then import them into the Unreal Engine environment. This solution saved a lot of time on base building, which would be tedious and wouldn’t look correct if done in Unreal Engine alone.</p>


<div>
<figure>
<img src="https://media.alt-f4.blog/ALTF4/65/nodes.jpg" alt="Node graph within Unity.">
<figcaption>When you don’t know how to code, you just put these nodes together, and if it doesn’t work you just keep adding more and more and become increasingly confused. Suspiciously similar to this factory game I’ve been playing recently.</figcaption>
</figure>
</div>


<h3 id="1-structure-system">
<a href="#1-structure-system">1. Structure System</a>
</h3>
<p>The first major component of FUE5 is the ability to spawn structures in an identical manner to how you’d find them in Factorio. By reading in-game data, we can get building types, their orientation and cable connections. This information is exported as a JSON file via a FUE5 exporter mod directly from inside the game. This file is then read by the FUE5 project, which is enough to visually replicate all structural and vehicular behavior of the actual base.</p>
<h3 id="2-transport-belt-system">
<a href="#2-transport-belt-system">2. Transport Belt System</a>
</h3>
<p>Apart from spawning the actual 3D models of individual transport belts, we had to figure out the item movement mechanic. This was achieved by representing transport belts as splines. When exporting a Factorio base via the FUE5 exporter, each continuous transport belt segment (a segment of transport belts which are connected and end in a tunnel, end on their own, or are looped) is treated as its own individual system. Once FUE5 reads this data, it constructs a spline for each of these individual systems. These splines then guide the items through the same path they follow in the actual game.</p>
<h3 id="3-train-system">
<a href="#3-train-system">3. Train System</a>
</h3>
<p>The train system is quite different to the transport belt system, since replicating train scheduling, signals and locomotive pathing would be very hard to do. Instead, we opted to use the native Factorio system for finding routes the trains should take. For a train to spawn and drive in FUE5, one has to set its destination and give it the green light prior to exporting the base. At this point we can read the train’s pre-calculated path and use it to construct a spline which then dictates the train’s movement in FUE5.</p>
<h3 id="4-logistic-system">
<a href="#4-logistic-system">4. Logistic System</a>
</h3>
<p>Right off the bat we skipped construction robots, since we’re currently spawning buildings via the native UE5 Construction Script system, and that’s the way it’s gonna stay for a while. What we focused on instead was getting logistic robots to work properly, since they’re the lifeline of any semi-advanced Factorio base and they add a lot of visual interest to the whole picture. Each roboport has a chance to randomly spawn a cluster of logistic robots, where each robot has its own simple brain to search for logistic chests in the vicinity and fly between them to visually replicate resource transportation. After this task of resource transportation is done, the robot will determine the location of the closest roboport and head to it to despawn.</p>
<h2 id="problems-and-optimization">
<a href="#problems-and-optimization">Problems and Optimization</a>
</h2>
<p>The first major issues became apparent once bigger bases were imported into FUE5 in the early days of the project. The FPS would drop significantly and blueprint events started to produce unreliable results, which is why a lot of optimization work was necessary to even run the project at 30 to 60 FPS.</p>
<p>Key optimization decisions revolved around poly count, texture resolution, particles, and the amount of on-tick updates. These had to be drastically reduced by optimizing the transport belt system, which caused a lot of stuttering in the early days of the project. We’ve also gained a lot of FPS by tweaking and optimizing the level of detail (LOD) of the animated parts of structures - such parts include things like the spinning cylinders on centrifuges, or all the gears and pistons on the roof of the assembling machines.</p>


<div>
<figure>
<img src="https://media.alt-f4.blog/ALTF4/65/array.jpg" alt="Array of 3D texture electric furnaces.">
<figcaption>You can never have enough iron plates.</figcaption>
</figure>
</div>


<p>There was also the need for approval from the Factorio developer Wube Software. When asked about the legality of this whole endeavour, they showed great understanding and allowed the project to be released, provided it won’t be used for commercial purposes.</p>
<h2 id="the-fun-part">
<a href="#the-fun-part">The Fun Part</a>
</h2>
<p>Once the general idea and most of the prototyping was figured out during the first two months of production, it became quite easy to replicate various Factorio assets and systems. That’s when the time came to really focus on the beauty of the whole thing and creation of the <a href="https://www.youtube.com/watch?v=01qux-5Qx_Y&amp;feature=youtu.be&amp;ab_channel=Hurricane">main release trailer</a>, which showcases large-scale bases built using the FUE5 exporter, and a lot of other cool stuff one can do within the FUE5 environment.</p>
<p>It was necessary to build a lot of custom stuff for the large-scale factories showcased in the trailer. Just the ability to export Factorio in-game bases doesn’t result in very clean and cinematic results, so there were a lot of tweaks done by hand to make it nice for the camera! It also turned out that spaghetti bases are much more fun visually than the long strips of single buildings optimized for high science per minute (SPM).</p>


<div>
<figure>
<img src="https://media.alt-f4.blog/ALTF4/65/fun.jpg" alt="Cube with machines and structures on all sides.">
<figcaption>Is this the Skyblock I’ve been hearing so much about?</figcaption>
</figure>
</div>


<h2 id="how-to-use-fue5">
<a href="#how-to-use-fue5">How to use FUE5</a>
</h2>
<p>This project is not a game, doesn’t have any user interface, and requires basic knowledge of UE5 to use. That being said, you can find a full description of the process on our <a href="https://github.com/FUE5BASE/FUE5">GitHub page</a>. Apart from installing UE5 and running the downloaded project, the process really comes down to simply selecting the chunk of your base you wish to export, and exporting it to FUE5 as described in the detailed <a href="https://github.com/FUE5BASE/FUE5/blob/main/BaseImportGuide.md">how-to guide</a>. Once you go through the process once, it becomes really easy to repeat.</p>
<h2 id="the-future">
<a href="#the-future">The Future</a>
</h2>
<p>We wanted to share this project as open source via GitHub, because the Factorio community is an extremely dedicated group of very creative people, and having access to such a project might allow some of them to experience the world they love in a new dimension. Plus, it might give the more creative ones the ability to create things which were not possible before.</p>
<p>Myself and Nuke are currently working on polishing the existing systems so they’re easy to use and perform well even with larger bases. We also started toying around with the idea of adding modded content in the future.</p>
<p>The factory must grow!</p>


<div>
<figure>
<img src="https://media.alt-f4.blog/ALTF4/65/se.jpg" alt="3D space elevator base surrounded by belts and machines.">
<figcaption>No joke here. Go play Space Exploration.</figcaption>
</figure>
</div>


<h2 id="contributing">
<a href="#contributing">Contributing</a>
</h2>
<p>As always, we’re looking for people that want to contribute to Alt-F4, be it by submitting an article or by helping with translation. If you have something interesting in mind that you want to share with the community in a polished way, this is the place to do it. If you’re not too sure about it we’ll gladly help by discussing content ideas and structure questions. If that sounds like something that’s up your alley, join the <a href="https://alt-f4.blog/discord">Discord</a> to get started!</p>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[/u/spez is right about feudalism and that's why Reddit is doomed (140 pts)]]></title>
            <link>https://maya.land/monologues/2023/07/01/spez-feudalism-reddit.html</link>
            <guid>36561166</guid>
            <pubDate>Sun, 02 Jul 2023 13:11:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://maya.land/monologues/2023/07/01/spez-feudalism-reddit.html">https://maya.land/monologues/2023/07/01/spez-feudalism-reddit.html</a>, See on <a href="https://news.ycombinator.com/item?id=36561166">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
    <p>Since Elon Musk bought Twitter, people have been making a lot of comparisons between internet institutions – particularly various social media things – and premodern political forms and figures.</p>

<p>These comparisons typically rely on the level of understanding of antiquity or of medieval life you’d expect to get from <a href="https://www.dk.com/us/book/9781465481542-dkfindout-castles/">DKfindout! Castles</a>. I am not a historian, but I know, like, just about enough to be embarrassed for the speakers.</p>

<p>So in this post, I want to talk a bit about how the relevant historical phenomena worked, a bit about why feudalism tends to be a pretty bad comparison to internet stuff, and a bit about why Reddit CEO Steve Huffman is – still! – maybe more correct than he knows when he compares moderators to landed gentry… in a way that suggests the end coming for Reddit as-we-know-it<sup id="fnref:medieval" role="doc-noteref"><a href="#fn:medieval">1</a></sup>.</p>

<h2 id="medieval-sociopolitics-in-my-blog-its-more-likely-than-you-think">Medieval sociopolitics? In <em>my</em> blog? It’s more likely than you think</h2>

<p>Feudalism is such a shit concept to work with that if you look it up in the Encyclopedia Britannica, instead of getting a history of feudalism, you get <a href="https://www.britannica.com/topic/feudalism">a history of the term’s use in history, how it has always been an awkward oversimplification, and how it only got muddier over time</a>. Everything I can find goes to great pains to explain that any summary you can give will erase a lot of very important variance over time and place, and that even within one state at one time <a href="https://en.wikipedia.org/wiki/Feudalism_in_the_Holy_Roman_Empire#Types">shit could get stupid complicated</a>.</p>

<p>However! If I am to claim that internet comparisons to feudalism are bad, then I need to evaluate charitably what they might best mean, squinted at under flattering light.</p>

<p>To that end, let’s try and disentangle two parts. <a href="https://acoup.blog/2022/09/23/collections-teaching-paradox-crusader-kings-iii-part-iia-rascally-vassals/">Bret Devereaux, actual historian</a><sup id="fnref:bret" role="doc-noteref"><a href="#fn:bret">2</a></sup>:</p>

<blockquote>
  <p>Veteran readers of the blog will already know that I generally avoid the terms ‘feudal’ and ‘feudalism,’ as do many medievalists these days. The problem is that ‘feudalism’ comes to conflate two very different systems: manorialism, the economic system which structured the relations between peasant farmers (mostly serfs) and their elite landlords, and vassalage, the political system which structured relations between elites. But these systems and the relationships they structured were very different and their conflation together as a single system is a modern, not medieval, construction.</p>
</blockquote>

<p>Okay. Manorialism and vassalage. This sounds doable, right?</p>

<p>Here follows sketched-out summary.</p>

<h2 id="manorialism">Manorialism</h2>

<ul>
  <li><a href="https://acoup.blog/2020/07/24/collections-bread-how-did-they-make-it-part-i-farmers/">Premodern subsistence farmers, on their own, don’t optimize for producing a surplus, but instead on increasing their resiliency.</a><sup id="fnref:europe" role="doc-noteref"><a href="#fn:europe">3</a></sup> This is because having a surplus – whether in goods or money – is, in their context, both more difficult and less useful than you might expect. To increase resiliency, they can employ less facially efficient farming methods that will diversify their risks, and when times are good, they can invest any small surplus in social relations.</li>
  <li><a href="https://acoup.blog/2020/07/31/collections-bread-how-did-they-make-it-part-ii-big-farms/">Large landholders rely on the desperation of the little people to make it possible for them to secure enough borrowed/bought/forced labor to make those larger holdings produce</a>.</li>
  <li>The relationship between the small farmers and the elites is the exchange of “labor, deference and some support” for “[military or political] protection […], some access to farming capital and most importantly the implied promise that in a catastrophe the big landholder would come to the ‘rescue’.”-</li>
  <li>This relationship is largely exploitative. In many places and times, it relies on a lot of “non-free labor”. The non-free-ness of it all is enforced with violence or the threat of violence, whether state violence or not.</li>
  <li>The manorial relationship also “[serves] to reorient production away from subsistence and towards surplus” to support elite lifestyles. “[Doing] anything that isn’t farming means somehow forcing subsistence farmers to work more and harder in order to generate the surplus to provide for those people who do the activities which in turn the subsistence farmers might benefit from not at all.”</li>
</ul>

<h2 id="vassalage">Vassalage</h2>

<p>It is with some trepidation that I will point to non-popular-history<sup id="fnref:pop" role="doc-noteref"><a href="#fn:pop">4</a></sup>, “Fiefs and vassals : the medieval evidence reinterpreted”, by Susan Reynolds<sup id="fnref:admit" role="doc-noteref"><a href="#fn:admit">5</a></sup>. If anyone with a relevant degree wants to tell me I’m wrong in my summary or choice of source, they are welcome<sup id="fnref:google" role="doc-noteref"><a href="#fn:google">6</a></sup>.</p>

<p>She reiterates the thing about feudalism being a blob of concept that confuses more than it elucidates. She extends that to vassalage and fiefs, saying that, well, we might have hoped they would be more dependable concepts since they’re smaller in scope, but that was wrong. To the extent that we can pin down little bits of them with adequate definition, she says they aren’t as generally useful as they’ve been made out to be.</p>

<p>So in as far as we are here to make a comparison between vassalage and anything internet, it is probably fair to say that we are making it to a kind of 16th-century historical myth-narrative rather than a usefully abstracted description of real social relations.</p>

<p>Of this vassalage narrative, then:</p>

<ul>
  <li>Vassalage denotes the relation between a lord and his free or noble follower. This was undertaken with oath and ceremony. It obligated the lord to “protect and maintain his vassal”, and obligated the vassal to provide military aid and attend at the lord’s court. (The latter obligations were also sort of implied outside of vassalage relationships if you were otherwise propertied enough to be <em>able</em> to provide demanded knights, for instance.)</li>
  <li>It hacked a state structure into existence through personal relations when “there was [supposedly] no idea of the state and very little idea of impersonal, public obligations at all”<sup id="fnref:publica" role="doc-noteref"><a href="#fn:publica">7</a></sup>.</li>
  <li>In the modern mind, there are nice crisp distinctions between “rent” and “tax”. This is because we like to imagine we have a crisp concept of “ownership” of land distinct from jurisdiction. In fief-holding Europe, it’s more accurate to say that the <em>classic</em> ideological structure dictates that the land belongs to God, and God says kings have charge of bits of it, and the kings say lords have charge of bits of those bits, and the lords may say various non-lords have charge of bits… Rent-y-tax-y obligations are owed back up chain, and rights-like obligations exist along it. However, this <em>idea</em> obscures that folks down the chain may often feel that their land is more meaningfully theirs by <em>custom</em> than by the higher layers’ authority, and the language in primary sources doesn’t dictate clean lines.</li>
  <li>“[In] an age of low literacy, few records, and poor communications, great men needed to use personal loyalties, ceremonies, and <em>ad hominem</em> rewards to maintain and extend their power over the land; and that, since rulers, nobles, and most free men lived off the work of a dependent peasantry, rulers could maintain, control, and reward their followers by delegating control over land and peasants to them. It also seems clear that, as collective activity became more organized, as bureaucracy developed, and as literacy increased the range and power of propaganda, so government relied less on direct interpersonal relations.”</li>
</ul>

<h2 id="one-more-thing-state-capacity">One more thing: state capacity</h2>

<p>There’s this book called <a href="https://en.wikipedia.org/wiki/Seeing_Like_a_State">Seeing Like A State</a> by James C. Scott. If you’re not in the mood to read it, read <a href="https://www.ribbonfarm.com/2010/07/26/a-big-little-idea-called-legibility/">the first chunk of this blog post</a>, but mentally credit it with a bunch of examples Rao doesn’t include in the summary. This section is kind of cribbed from parts of it.</p>

<p>So – why did our mythically-feudal king need vassals, if other states didn’t always have them?</p>

<p>A state needs revenue, and in the premodern era, that’s got to come “mainly from levies on commerce and land, the major sources of wealth.” This turns out to be at least as complicated as taxes today, if for very different reasons. Knowing <em>from a distance</em> what taxes you should demand is hard. Take too little, and your state is feeble. Take too much, and you’ll have a whole new set of problems: flight, resistance, etc.</p>

<p>The local systems of measurement may vary from tiny place to tiny place – and even if you have more abstract ones to hand, local practices and land quality may mean that “two acres” in one place might acceptably be taxed far more highly than in another. So you can see why there was so much pressure to standardize the measures in the early modern era, right?</p>

<p>But it wasn’t <em>just</em> the measures getting standardized – it was also the rights people had.</p>

<p>Scott gives an example amalgamated from Southeast Asian practices. You might have land that’s parceled out among families during the main growing season, but reparceled out every seven years. After the main-season crop is harvested, then everything is common land, so anybody in the village gets to graze their animals and plant dry-season crops. But you might only be allowed to graze a certain number of animals, and that right might be transferable among the villagers, but not to outsiders. You might get to gather firewood for your own use but not for commercial sale – customs where fruit belongs to the family who planted a tree, even if not on their current parcel, but <em>fallen</em> fruit is fair game for anyone – rules about who gets branches that broke off of trees in storms… Rules “riven with inequalities based on gender, status, and lineage.”…</p>

<p>And <em>all</em> of this varying wildly from place to place.</p>

<p>Now: how could you as the king figure out how much rent-tax to demand directly from each of these people? Maybe you can figure out to some approximation the overall productivity of the overall land associated with the community, but actually extracting resources has to come from these households, right? And none of the inequalities are clear to you as an outsider – and <em>everyone will lie to you</em> and to your representatives because <em><a href="https://www.youtube.com/watch?v=ICUwC-f8iYg">fuck tha rent</a></em>.</p>

<p>And do you have the <em>capacity</em> to go around enforcing all this? To send people from your royal court out to each little hamlet, figure out how much to demand, and punish those who don’t meet the demand?</p>

<p>This points to an important function of the local feudal hierarchy, looked at from the perspective of <a href="https://en.wikipedia.org/wiki/State_capacity">state capacity</a>. If the vassal is around in the community to be able to figure out the local practices and maximize the rent-tax he can extract from the little people, then the king can extract value from the vassal and thus indirectly the region, even without having a bureaucracy under his own control that knows every town’s Local Fruit-Gathering Rules.</p>

<p>One of the main themes of Scott’s book is that throughout history, it is infeasible for states to build the Local Fruit-Gathering Rulebook at scale if they want to increase their centralized power and do Bigger Things. So what they actually do is come through and force people to stop measuring things the ways they have and to use standard measures, to stop thinking about property rights the ways they have and to use standard property rights, to stop using names the ways they have and to use patronyms… and while everyone hitting the pointy end of it <em>hates</em> this stuff, it makes it so much easier for the top-level state to do its state business that it can expand its state aspirations and be Bigger<sup id="fnref:scott" role="doc-noteref"><a href="#fn:scott">8</a></sup>. The capacity of the state isn’t just a function of the kind of bureaucracy you can build if you can force people to become more governable.</p>

<h2 id="why-this-stuff-doesnt-map-well-onto-the-internet">Why this stuff doesn’t map well onto the internet</h2>

<p>I would hope that everything I’m about to write is self-evident – so self-evident that you might as well skip this section. However, I would also have hoped that “people who want to sign up for an account on a new web service instead of using an old web service they don’t like as much anymore” would not consider it appropriate to term themselves “refugees”, so forgive me some obvious points.</p>

<ul>
  <li>The business at scale in social media is advertising. I haven’t given up hope on <a href="https://en.wikipedia.org/wiki/The_Long_Tail_(book)">the long tail</a>, <a href="https://www.honest-broker.com/p/where-did-the-long-tail-go">Gioiaian jeremiads notwithstanding</a>, but at scale, today, direct monetization pales in comparison to advertising’s revenues. This means that the economic productivity of social media use is indirect and highly mediated. Also, the business models are often opaque. This is a lot harder to track than wheat farms in medieval France somewhere. <strong>Comparisons risk implying we understand more than we accurately do</strong> about just who’s generating value and just how. (…more on this.)</li>
  <li>In the settled medieval context, there are subsistence farmers, and there are people eating surplus that subsistence farmers were squeezed into producing. Other food sources do not exist at the scale needed for the population. Reliable sources assure me the eventual consequence of going without food is death. Social media – the whole user-content internet – is only one of a whole host of entertainments, information sources, and communication options available to the kind of person who has internet access. Breaking one’s e.g. YouTube habit may be unpleasant or difficult, but it is not inherently life-or-death. <strong>When we make comparisons between our info-luxuries and survival necessities, we ratchet up the stakes in these conversations way too high</strong>, way too fast… and we also distract from <a href="https://apnews.com/article/technology-health-eating-disorders-center-government-and-politics-0c8ae73f44926fa3daf66bd7caf3ad43">actual life-or-death issues at play</a>.</li>
  <li>Over my lifetime, there have been a number of attempts at manufacturing digital scarcity. They have been pretty embarrassing and not made too much of a dent. That doesn’t mean that there are <em>no</em> relevant scarcities to bear in mind – money on offer for advertising, eyeball-hours monetizable on the other end – but <strong>naive analogies between, like, namespaces and <em>arable land holdings</em> often get pretty silly</strong>.</li>
  <li>I am not in debt bondage to Instagram. You are not a LinkedIn serf. Yes, there are relevant “<a href="https://doctorow.medium.com/facebooks-war-on-switching-costs-27fa4aeb7978">switching costs</a>” to this stuff. Those are notable because they operate in contrast to the general idea of businesses offering freely substitutable goods and services, not because <em>someone will come recapture you if you try to leave</em>. When someone writes a “Why I’m Leaving Twitter” post, they do not then have to go defend their violation of an oath of homage on the battlefield! <strong>If we pretend that we’re less free to leave than we are, we distort reality in ways that only benefit the big platforms.</strong></li>
  <li>If you are a premodern small farmer, you are subject to the varying jurisdictions that cover the land you live on and farm<sup id="fnref:transhumance" role="doc-noteref"><a href="#fn:transhumance">9</a></sup>. The social ties associated with your local community are essential to your survival. If you are an internet user today, you <a href="https://xkcd.com/1810/">have clicked through more terms of service than you can count</a>, migrated through more dead sites than you remember, and your ability to feed yourself is extraordinarily unlikely to be truly predicated on the particular group of otherwise-strangers with whom you interact on any given app<sup id="fnref:networking" role="doc-noteref"><a href="#fn:networking">10</a></sup>. <strong>There are a lot more options to the modern internet user than acquiescence or revolt-in-place.</strong></li>
  <li>The jurisdiction associated with lords’ enfiefed land is a burden, not a perk. <strong>Having to deal with little people problems is not a longed-for opportunity to get to tell people what to do – it is part of the trade-off necessary to get to extract rents/taxes from them.</strong> Remember: these are <em>actually</em> inherited positions, not first-mover-benefits-maintained-over-time. I am sure you can find an example of some medieval baron getting petty about dumb shit (send it to me!), but for the most part, everything I’ve read suggests they are trying to further delegate this work to <em>their</em> retainers so they have more time for… you know, falconry. Fulfilling their other obligations. Flexing on other rich people. 1% problems.</li>
</ul>

<h2 id="so-if-its-that-bad-why-do-people-keep-making-the-comparison">So if it’s that bad, why do people keep making the comparison?</h2>

<p>Reynolds’ book begins:</p>

<blockquote>
  <p>Feudalism, to any members of the general public who ever refer to it, stands for any hierarchical and oppressive system. Bosses or landlords who bully their employees or tenants are being feudal. If they bully them fiercely they are worse: they are positively medieval.</p>
</blockquote>

<p>To some extent, that’s the long and the short of it. The kind of person who imagines that the Dark Ages are called that because they weren’t yet Enlightened is not trying to make a historically-grounded point about political theory. They’re trying to say that something <em>sucks</em>. Anyone who grew up in a liberal democracy absorbed quite a lot of civic ideology about what makes governments legitimate; therefore, any authority that the speaker had no hand in appointing is a likely target of this condemnation. “Someone who isn’t me has power and control and I don’t like it”. That’s a fair thing to want to express, even if I’m salty about inaccuracy of comparison.</p>

<p>So… okay, so what? I didn’t get thousands of words into this just because <a href="https://xkcd.com/386/">someone said something obviously wrong about a medieval thing on the internet</a>.</p>

<p>Can we redeem this desire to compare the two?</p>

<p>How far can we get with a comparison if we try to say <code>/u/spez</code> is right?</p>

<h2 id="steve-my-liege-a-word">Steve, my liege, a word</h2>

<p>Steve Huffman (<a href="https://old.reddit.com/user/spez"><code>/u/spez</code></a>) is the CEO of Reddit. Reddit is a social media site that is somewhat unlike its competitor social media sites in form, but which is trying to have its business become publicly traded. It therefore needs to become more like those other sites – at least in profitability narrative. Reddit makes <a href="https://www.theverge.com/2021/8/12/22621445/reddit-valuation-revenue-funding-round">most of its revenue from advertising</a>. It relies on a vast amount of unpaid volunteer moderation labor – <a href="https://clivethompson.medium.com/reddit-moderators-do-over-3-4-million-in-free-labor-every-year-d3571235c32c">$3.4 million’s worth a year</a>, by one estimate. Some of Huffman’s IPO-minded moves have proven <a href="https://health.wusf.usf.edu/npr-health/2023-07-01/reddit-says-new-accessibility-tools-for-moderators-are-coming-mods-are-skeptical">very hostile</a> to the moderators, who have been protesting by taking subreddits dark – restricting access or posting or otherwise <a href="https://www.cnn.com/2023/06/23/tech/reddit-john-oliver-protest/index.html">creatively disrupting their function</a>.</p>

<p>And then Steve forces my hand, <em>makes</em> me write all this, by <a href="https://www.nbcnews.com/tech/tech-news/reddit-protest-blackout-ceo-steve-huffman-moderators-rcna89544">saying the following</a>:</p>

<blockquote>
  <p>If you’re a politician or a business owner, you are accountable to your constituents. So a politician needs to be elected, and a business owner can be fired by its shareholders.</p>
</blockquote>

<blockquote>
  <p>And I think, on Reddit, the analogy is closer to the landed gentry: The people who get there first get to stay there and pass it down to their descendants, and that is not democratic.</p>
</blockquote>

<p>There is obviously a lot about this that immediately sounds alarms, right?</p>

<ul>
  <li>Look, I’m even less of a lawyer than I am a historian, but if “a business owner can be fired by its shareholders” then they weren’t actually the <em>owner</em> of the business, no? They were, like, a CEO or something?</li>
  <li>Conflating citizens and shareholders is a classic American thought disease. Polysyllabic cringe.</li>
  <li>It sounds like Steve thinks that “gentry” operated on <a href="https://www.history.com/this-day-in-history/settlers-race-to-claim-land">Oklahoma land grab rules</a>.</li>
  <li>While <em>I</em> am willing to get hype about the general idea of property inheritance being so anti-democratic in nature that a democratic society must expropriate that property to function, I am guessing Steve Huffman, <a href="https://duckduckgo.com/?t=ffab&amp;q=steve+huffman+net+worth&amp;ia=web">estimated net worth in the millions</a> Steve Huffman, is not too married to what that implies, and really intends only to speak of inherited <em>authority</em>.</li>
</ul>

<p>But… fine. Come at me, Huffman.</p>

<h3 id="what-can-we-get-from-comparing-moderators-to-feudal-lords">What can we get from comparing moderators to feudal lords?</h3>

<h4 id="you-need-manorialism-to-make-little-farmers-produce-surplus-and-you-need-moderation-to-make-openly-hosted-user-generated-content-ad-monetizable">You need manorialism to make little farmers produce surplus, and you need moderation to make openly hosted user-generated content ad-monetizable</h4>

<p>Our subsistence farming household does not really want to produce the kind of surplus that can then be rent-taxed away, so the feudal structure has to force that to happen to exist. There’s real production, valuable activity, going on no matter what – but to make your state a Thing you need to beat that production into a useful shape.</p>

<p>Small, closed groups of internet users often function on top of internet infrastructure without explicit internal moderation. You, the reader, are probably in a number of group texts from which you have never formally banned a member for spam.</p>

<p>The openness of a platform can create a lot <em>more</em> monetizable engagement than the group chats. There are many of you who will never get to snigger at the jokes in my group chats, and <a href="https://en.wikipedia.org/wiki/Homo_economicus">Homo economicus</a> might see that as lost opportunity to engage-and-advertise-and-monetize, if he squints. A missed opportunity for extractable surplus – because, like the subsistence farmers trying to maximize resilience instead of production, my friends are not sharing bad puns with an eye toward anyone’s ad revenue.</p>

<p>However, open, public internet infrastructure has its own downward tendencies. Whenever a truly unmoderated hosting service opens on the internet, there is a clock ticking down until that service is first used to host <a href="https://www.techdirt.com/2022/11/02/hey-elon-let-me-help-you-speed-run-the-content-moderation-learning-curve/">content related to child sexual abuse.</a> The openness can create an economic opportunity, but you need moderation to make that hold together – even just on the legal front.</p>

<p>Or just imagine an ad equilibrium. You, a user, are probably willing to tolerate a certain amount of promotional stuff in a Web Thing before you go off and find another Web Thing; call it an ad-viewing threshold. Variable by individual, but probably measurable in aggregate. Promotional material that is posted by a user and shown to you counts against your threshold, and any ad space bought with the platform on your feed also counts against your threshold, but only the latter makes the platform money. If the platform has enough would-be paid-advertisers to max out whatever it estimates its users’ ad-viewing threshold to be, then it has a strong incentive to go and hunt down any user content on its platform that has even a hint of promotion and hide it from sight. Maybe it’ll get those users to give up and pay them, but even if it doesn’t, it stops them from displacing monetizable ads under your threshold<sup id="fnref:unicode" role="doc-noteref"><a href="#fn:unicode">11</a></sup>.</p>

<p>So even if a moderator isn’t engaging with the ad infrastructure of a site, and <em>even if they’re not explicitly dealing with maintaining a high bar of “advertiser-friendliness”</em>, their role functions to make the thing stick together in the open way that produces the engagement-surplus that attracts ad money.</p>

<h4 id="local-variance-in-custom-makes-it-really-hard-to-moderate-from-outside-the-community">Local variance in custom makes it really hard to moderate from outside the community…</h4>

<p>If you ask heavy-use Redditors about their use of the site, many will, unprompted, bring up that the main big subreddits are trash and, while they might <em>also</em> subscribe to <code>/r/gifs</code> or whatever, they’re really <em>there</em> for the niche communities that are quite different – in both tone and content. Yes, it’s impressive that the recommendation algorithms on short-form video platforms can deduce my susceptibility to <a href="https://www.instagram.com/nicole_coenen/">thirst-trappy woodcutter lady content</a>, but the level of specificity in which such content is arranged on Reddit is far more impressive (sometimes horrifying in its specificity, if we’re being honest). These are far more diverse in intent and effect than the “communities” of shared engagement that arise around algorithmically recommended topics.</p>

<p>Maintaining engagement on <code>/r/AskHistorians</code> requires a very different standard of post and comment moderation than e.g. <code>/r/circlejerkaustralia</code>; they are trying to be different things, people <em>go</em> to them for different things, and the rules that will best encourage posters to post and consumers to consume are different.</p>

<p>How would you do that in a scalable way from the outside? Hell, set aside trying to keep things on-topic – from the outside, how can you keep up with the ever-shifting dog whistles and coded signifiers of bigotry that accompany the first encroachments of <a href="https://en.wiktionary.org/wiki/Nazi_bar">Nazis into your bar</a>? Maybe advertisers won’t understand either to care about the first wave, but you better believe they won’t like the media coverage of the later ones…</p>

<p>In an environment as heterogeneous and nichey as Reddit has been: you can’t. It works about as well as compiling the Local Fruit-Gathering Rules with the Firewood Addenda for every village in your nation. So if you’re going to have heterogeneous and nichey social media, you need moderation to be heterogeneous and nichey, enacted by the kind of person Scott calls a “local tracker”. <strong>Reddit as it has existed does not have the “state capacity” to do this any other way.</strong> Maybe, at least for the high-engagement subreddits that it considers most important, it can <em>replace</em> the local trackers with more compliant ones – but it can’t go without them. The king of Reddit, today, needs somebody to go be baron. If he couldn’t get them for free, he’d have to pay them.</p>

<h4 id="but-if-you-can-rent-tax-from-outside-the-community-you-can-shift-the-balance-of-power">…but if you can rent-tax from outside the community, you can shift the balance of power</h4>

<p>Reddit does not pay its moderators. It is not fully accurate to say that Reddit even confers the status and control that moderators possess, because that status and control is scoped to their moderated communities, and thus principally a function of community prominence. Anyone can be <em>a</em> mod; being a moderator of something that <em>matters</em> is something different entirely, and it’s Reddit’s userbase that makes <em>that</em> happen. On Reddit, many communities are extremely fungible; use the site long enough and you’ll observe schisms and migrations to new bits of namespace. We can argue that there is <em>some</em> extent to which community prominence is driven by the desirability of the community name, which is a bit conferred by Reddit – if I’m looking for an X subreddit, I’m going to look for <code>/r/X</code> before <code>/r/originalX</code>, <code>/r/seriousX</code>, <code>/r/XUncensored</code> etc., so there’s <em>something</em> meaningful to who gets to keep running <code>/r/X</code> – but in practice this is moderately fluid, as genres of content merge and divide even without explicit mod drama.</p>

<p>So if I were going to pin down what Reddit “gives” its mods, I would probably put it something like this: The ability to create and grow an online community with a bunch of useful (and not free-to-operate!) infrastructure and with intercommunity discovery among a large existing userbase.</p>

<p>What Reddit <em>gets</em> from its mods is – following the above – the ability to make the money that it makes from ads.</p>

<p>So how do you know whether that’s a fair trade?</p>

<p>It isn’t disqualifying to our comparison that the mods/lords don’t get paid in the same kind of thing that the company/king gets. For example, it was fairly common for the king to principally extract <em>military</em> support from the lords, rather than the same kind of rent-taxes the lords extracted from the commoners. However, this dynamic was always a bit in flux; making your vassals mad by giving them a shitty trade-off posed risks the king had to deal with in much the same way that the lords had to contend with the risk of overtaxing the populace. No one involved was <em>stupid</em>, and all the weird ideological language about divine right of kings shouldn’t make you think that people weren’t looking out for their own interests.</p>

<p>But crucially – the lords knew what kind of revenues they were getting from their lands, and they knew what the king was getting from them in turn. Maybe they’d lie to the king about the exact surpluses they’d extracted, just like the farmers would lie as much as possible about how much surplus there <em>was</em> – but their local control meant they had the local knowledge necessary to piece together the situation themselves.</p>

<p>So you can <em>imagine</em> that maybe the status quo <em>is</em> a fair trade – maybe the costs of running Reddit (data centers, engineers, lawyers), minus the ad revenue pretty much balance what Reddit gets from the mods in return for the chance to run their little communities. But how do you <em>know</em>?</p>

<p>A mod might be able to estimate how replaceable the job they do is, how replaceable their <em>community</em> is, and start trying to figure out what their leverage is…</p>

<p>But how do they estimate Reddit’s end of the deal?</p>

<p>Let’s talk about online advertising platforms for a second. (Sorry.)</p>

<p>YouTube does some revenue-sharing with video creators, so the amount of information exposed illustrates some interesting dynamics. First, remember: <em>many videos lose YouTube money, possibly even most.</em> They don’t ever get enough monetizable engagement to pay for their own (secret) marginal contributions to operating costs. Video hosting is expensive! But where there <em>is</em> monetizable engagement, the fact that we have <em>some</em> numbers doesn’t clear as much up as you might think.</p>

<p>Let’s say there’s some genre of enterprise software that’s hugely profitable to sell, but niche in potential customers; to advertise products of this kind, you need to reach people who work at companies who have jobs where they can influence buying decisions. Let’s say you are trying to sell one of these products. You know that the kind of person with the kind of job that makes them useful to influence likely uses some <em>other</em> kind of software – <a href="https://en.wikipedia.org/wiki/Tableau_Software">Tableau</a>, maybe. Now let’s say that <em>I</em> run a YouTube channel with Tableau tutorials. You and your competitors want to advertise on my channel <em>so bad</em>. Maybe you don’t specifically know about my channel, and you’re letting YouTube figure out the eligibility of where to put your ads – but that’s the advertising opportunity that might <em>work</em> for your business, so if YouTube is willing to offer you that specificity, it’s gonna be valuable to you, and that means it’s gonna be <em>pricey</em>. If YouTube is revenue-sharing <em>honestly</em>, then <em>that</em> means that <em>I</em> am gonna get a way bigger cut per video than the creator of a <em>equally watched</em> channel that doesn’t imply some super-valuable advertising opportunity. And indeed, we see some amount of that: “best short term insurance plans” as keywords gets a <a href="https://en.wikipedia.org/wiki/Cost_per_impression">CPM</a> about <a href="https://vloggerpro.com/youtube-niches-with-high-cpm/">50 times higher than “best USB mic”</a>, and some of that trickles down to the actual video creators.</p>

<p>But this can be alienated in ways that give the advertising platform a leg up. Let’s say that there’s a Norwegian law news channel that, like, <em>every</em> Norwegian lawyer watches religiously. It doesn’t post much, maybe, so it doesn’t get a ton of traffic, but the correlation is flawless. Norway has a high CPM, law has a high CPM, so let’s just say that intersection is a super valuable advertising target. Furthermore, though, this channel is so <em>boring</em> and <em>specific</em> that probably anyone who watches it much <em>is</em> a Norwegian lawyer. YouTube keeps track of those accounts. Let’s say there’s a <em>second</em> channel that’s all about… I dunno, drama commentary about the <a href="https://en.wikipedia.org/wiki/Norwegian_National_Opera_and_Ballet">Norwegian National Opera and Ballet</a>, and it just so happens that – unbeknownst to either the law news channel or the opera drama channel – Norwegian lawyers eat this opera drama shit up. This second channel might not have any high-CPM topics associated with it – but <em>if</em> YouTube lets advertisers target by “likely to be a Norwegian lawyer” rather than keywords associated with the actual opera video, then the <em>signal</em> about target demographics gathered from the law news channel combined with the <em>engagement</em> generated by the opera drama channel creates very profitable advertising opportunities for YouTube. Should the law news channel get a cut of the law-targeted ads on the opera drama channel because its content provided the signal that let that targeting happen<sup id="fnref:targeting" role="doc-noteref"><a href="#fn:targeting">12</a></sup>? Should the opera drama channel be paid better for desirability of the eyeball-hours it attracts, independently of opera drama keyword CPM? Does either channel have accurate information on how competitive its market is? If neither channel knows about the correlation, how incentivized is YouTube to remunerate them for the profitability of the intersection?</p>

<p>Maybe YouTube has the data it could crunch to figure out the marginal contributions there, but this begins to <em>sound</em> a bit like… parcels of land that maybe you can farm on <em>some</em> of the year, but during the <em>dry</em> season your <em>neighbors</em> can graze their <em>animals</em> on, but then with <em>trees</em> that the <em>old</em> tenants get to harvest… Right?</p>

<p>Substitute “subreddit” for “YouTube channel” and mix in that Reddit doesn’t have to share its detailed ad numbers, and you start to see how <strong>any given moderator of any given community can’t know whether they’re being exploited or how badly</strong>, even if as a whole it seems like mods produce way more value for Reddit than they benefit from. <em>Your</em> subreddit might marginally make Reddit a ton of money or might <em>lose</em> Reddit money, and you have no visibility into which.</p>

<p>The real dynamics of online advertising are fundamentally hidden from the creators of content and from volunteer moderators, and this means that no one can negotiate from their own actual value in the market. The illegibility of local variation may have meant that feudal lords were necessary to the feudal state, and the illegibility of local custom may similarly have meant that community-embedded moderators are necessary to Reddit as it exists today, but <strong>these platforms have information asymmetry</strong> that weights the balance of power heavily toward them. That’s kinda wild, and I can’t think of a parallel that real landed gentry had to put up with.</p>

<h4 id="the-tension-between-custom-and-putative-authority-seems-important-for-understanding-feudalism-and-moderator-revolt">The tension between custom and putative authority seems important for understanding feudalism and moderator revolt</h4>

<p>Let’s say the king comes to you, a feudal lord, and tells you that <a href="https://daily.jstor.org/peter-the-greats-beard-tax/">you’ve got to shave your beard</a>. Maybe he bothers justifying it, whatever. You don’t <em>want</em> to shave your beard. “You know, your Majesty,” you say, “this new law seems pretty risky. Obviously <em>I</em> would never, but, uh, what if the rest of the lords tell you to, you know. Fuck off?”</p>

<p>One thing the king <em>might</em> say is “Well, my good man, who would <em>definitely</em> never say such a thing himself, they only matter because <em>I</em> say they do. Because God says <em>I</em> matter, and <em>I</em> delegated authority <em>to</em> them. And they know that, so they know that it would be both inherently ridiculous and self-defeating to go against me. Like, what would they be without me? Nothing. Peasants in violation of <a href="https://en.wikipedia.org/wiki/Sumptuary_law#Scotland">sumptuary law</a>.”</p>

<p>You are not totally confident in this description of affairs. It sort of seems to you that the tenant farmers under you are mostly under your control because everyone’s used to it and because you pay men with pointy metal things to tidy up the exceptions, not because you have a royal stamp of officialdom. Sure, <em>technically</em> you are <em>under</em> this king, but is that really relevant to how the yearly harvest gets brought in and taxed? If that royal stamp were revoked, wouldn’t you still be able to exploit the local farmers all the same?</p>

<p>But it’s a little ambiguous. Even if the king’s authority seems like a fiction, if he has the military power to come in, squash you, and give your fief to the neighboring Baron Dogface, then… well, the little people would probably shrug and pay rent-tax to Dogface and try to get on with their own lives.</p>

<p>So who does a subreddit belong to?</p>

<p>Imagine starting one, hyping it up, patiently providing four-fifths of the content until people show up, moderating spam, moderating jerks, growing it gradually over time. Setting rules, establishing tone, running the weekly topical threads. Would you feel like that <code>/r/whateverItWas</code> existed because of <em>Reddit the company</em>? Would you feel like it fundamentally belonged to his Royal Highness Steve, and Steve was just delegating it to you to run? No! You started it! You shaped it! You collaborated with the people it attracted to make it what it is! Even those users – they could switch <em>tomorrow</em> to <code>/r/whateverItWasTwo</code> and you couldn’t do a thing about it – if they decided they didn’t like your vision for <code>/r/whateverItWas</code>, they <em>would</em>, so the fact that they’re still here is a kind of voting with your feet, it <em>validates</em> what you’re doing… To the extent that <code>/r/whateverItWas</code> exists as a <em>thing</em> within Reddit as a whole, to be run or misrun, managed or mismanaged? It feels like <em>yours</em>.</p>

<p>But at the same time, to an external observer – you can see how they would feel that this is pretty silly, right? The thing that’s “yours” is nothing but rows and columns in Reddit’s databases<sup id="fnref:rdbms" role="doc-noteref"><a href="#fn:rdbms">13</a></sup>, a series of flags giving you the power to moderate. The only thing you have is set in Reddit’s systems, a permission to edit stuff under a certain scope a bit differently than other users, wo<em>wee</em> aren’t you important. It’s not you who has a license to the user posts, it’s not you who controls anything but a tiny little square of grass Reddit let you mow. You’re gonna <em>protest</em> over that? The world at large already doesn’t understand why you might volunteer for this work, why you might care enough to do it unpaid – you seem like a schmuck to them, a victim.</p>

<p><strong>But not to Steve.</strong></p>

<p>Steve is calling you landed gentry not because he’s <em>really</em> proposing to make things more <em>democratic.</em> Plenty of the protesting subreddits <em>voted</em> to protest – and even if Reddit vomits some PR about how that only reflects, like, <a href="https://en.wikipedia.org/wiki/1%25_rule">the 9% rather than the 90%</a> that never vote, it’s not really a convincing argument, is it? Steve is calling you landed gentry because <strong>he knows you work for him, making him money, and he wishes that you understood your authority to be delegated from him as your liege lord</strong>. Steve is annoyed that you feel like you have your own thing by local custom when what he sees is a bunch of flags in tables that are getting in the way of his business decisions<sup id="fnref:annoyed" role="doc-noteref"><a href="#fn:annoyed">14</a></sup>.</p>

<p>And I’m pretty sure Steve would like to modernize this whole feudal mess and remove the locality of your control.</p>

<h3 id="the-early-modern-state-comes-to-reddit">The early modern state comes to Reddit</h3>

<p>If we go back to Seeing Like A State for a minute… Technologies and practices that enabled central control were critical in the progression of the early modern state. Get rid of all that local variation in law and standardize it. Get rid of all those confusing local measurements. Bulldoze weird little windy streets and create boulevards that will make it easier to subdue local resistance. Propagandize to center your own importance. Use new media to extend your influence and control. Now you don’t need those local trackers like you once did, now you can administer your state more effectively centrally.</p>

<p>You know who’s managed this beautifully?</p>

<p>TikTok.</p>

<p>TikTok is really good at making people <em>feel</em> like they are seeing hyper-individualized content, but never allowing any explicit division of spaces within it. Without that division, no local norms can be established, no real preference expressed, and thus the tone of content is often uncannily homogeneous across wildly variant topics. This is what you’d expect: the unsteerable algorithmic recommendation feed feels like the final form of <a href="https://www.roughtype.com/?p=8724">content collapse</a>.</p>

<p>If I were a profit-maximizing social media company trying to expand my “state capacity”, I would be throwing money at every feature I could that took explicit navigation away from users, instead offering them frictionless spoon-feeding. Why? Social media that is homogenized (standard language!) is easier to moderate at scale. Moderation that is opaque (downweighting within hidden rankings) is easier to enact without objection, and tunably toward my engagement goals. Without even a sense of search keywords, I would increase the opacity of my advertising even further, obscuring from content creators the value I extract from them. These moves parallel the ones that Scott outlines early modern states taking to pull themselves out of dependency on local trackers. Remember: you don’t have to come up with a bureaucracy that can better handle the nation you have <em>if you can change the nation itself</em> to make it more governable.</p>

<p>And don’t you see those moves coming to Reddit?</p>

<p>I mean, maybe you <em>don’t</em> – Reddit has been pretty clever in allowing power users to maintain the old view characterized by explicit control even while it funnels new eyeballs toward recsys pablum. Part of Reddit’s whole IPO story <em>has</em> to be proving that it can provide a beautifully monetizable spoon-fed Infinite Recommended Content Feed just like Instagram or TikTok or Twitter or whatever – that’s just how social media companies are structured now. But especially if you’re used to using <code>https://old.reddit.com/</code> or one of the very good third party apps that has existed – pop open a private window and navigate to the normal home page. Doesn’t that look a <em>bit</em> like they’re trying to navigate away from how Reddit has always been and towards e.g. Twitter?</p>

<p>So maybe Reddit moderators <em>are</em> like feudal lords in that they have been the necessary structure that allowed Reddit communities to be so <em>wildly</em> different all this time.</p>

<p>And maybe we need to lean into those metaphorical comparisons to imagine what’s coming next. Bloggers invoking the high-level “enclosure of the commons” are phoning it in. Let’s talk <a href="https://en.wikipedia.org/wiki/Enclosure#The_end_of_the_Open_Field_system">conversion of copyholders into leaseholders to remove customary rights</a>.</p>

<p>And maybe we need to look at the ways those metaphorical comparisons <em>don’t</em> hold to imagine our ways <em>out</em>. Premodern subsistence farmers and early modern state subjects didn’t have all the options we do. You can’t bootstrap an alternate state by, like, automating crossposting, but on the internet all <em>kinds</em> of things are possible. (Hell, reminds one a bit of <a href="https://www.vice.com/en/article/z4444w/how-reddit-got-huge-tons-of-fake-accounts--2">Reddit’s own fakery</a>, dunnit?)</p>

<p>So as a non-moderator, as a <em>peasant</em>, as an <em>un-titled pleb</em>, I’d like to thank Steve for issuing the most CEO-flavored version of the age-old phpBB “the mods are mad with power!” complaint I’ve ever heard in my goddamn life.</p>

<p>Long live the King.</p>

<hr>


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Sidewiki (125 pts)]]></title>
            <link>https://en.wikipedia.org/wiki/Google_Sidewiki</link>
            <guid>36560937</guid>
            <pubDate>Sun, 02 Jul 2023 12:41:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://en.wikipedia.org/wiki/Google_Sidewiki">https://en.wikipedia.org/wiki/Google_Sidewiki</a>, See on <a href="https://news.ycombinator.com/item?id=36560937">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							

						<p>From Wikipedia, the free encyclopedia</p>
					</div><div id="mw-content-text" lang="en" dir="ltr">

<table><caption>Google Sidewiki</caption><tbody><tr><td colspan="2"><a href="https://en.wikipedia.org/wiki/File:Sidewiki_logo.png"><img alt="Sidewiki logo.png" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/54/Sidewiki_logo.png/120px-Sidewiki_logo.png" decoding="async" width="120" height="24" srcset="https://upload.wikimedia.org/wikipedia/commons/thumb/5/54/Sidewiki_logo.png/180px-Sidewiki_logo.png 1.5x, https://upload.wikimedia.org/wikipedia/commons/5/54/Sidewiki_logo.png 2x" data-file-width="200" data-file-height="40"></a></td></tr><tr><td colspan="2"><a href="https://en.wikipedia.org/wiki/File:Google_Sidewiki_Screenshot.png"><img alt="Google Sidewiki Screenshot.png" src="https://upload.wikimedia.org/wikipedia/en/thumb/0/03/Google_Sidewiki_Screenshot.png/100px-Google_Sidewiki_Screenshot.png" decoding="async" width="100" height="192" srcset="https://upload.wikimedia.org/wikipedia/en/thumb/0/03/Google_Sidewiki_Screenshot.png/150px-Google_Sidewiki_Screenshot.png 1.5x, https://upload.wikimedia.org/wikipedia/en/thumb/0/03/Google_Sidewiki_Screenshot.png/200px-Google_Sidewiki_Screenshot.png 2x" data-file-width="228" data-file-height="437"></a><p>Screenshot of the entries for the Wikipedia portal page.</p></td></tr><tr><th scope="row"><a href="https://en.wikipedia.org/wiki/Programmer" title="Programmer">Original author(s)</a></th><td><a href="https://en.wikipedia.org/wiki/Google" title="Google">Google</a></td></tr><tr><th scope="row"><a href="https://en.wikipedia.org/wiki/Programmer" title="Programmer">Developer(s)</a></th><td><a href="https://en.wikipedia.org/wiki/Google" title="Google">Google</a></td></tr><tr><th scope="row">Initial release</th><td>September&nbsp;23,&nbsp;2009<sup id="cite_ref-1"><a href="#cite_note-1">[1]</a></sup></td></tr><tr><th scope="row"><a href="https://en.wikipedia.org/wiki/Operating_system" title="Operating system">Operating system</a></th><td><a href="https://en.wikipedia.org/wiki/Windows_XP" title="Windows XP">Windows XP</a>, <a href="https://en.wikipedia.org/wiki/Windows_Vista" title="Windows Vista">Windows Vista</a>, <a href="https://en.wikipedia.org/wiki/Windows_7" title="Windows 7">Windows 7</a>, <a href="https://en.wikipedia.org/wiki/Linux" title="Linux">Linux</a>, <a href="https://en.wikipedia.org/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a></td></tr><tr><th scope="row"><a href="https://en.wikipedia.org/wiki/Computing_platform" title="Computing platform">Platform</a></th><td><a href="https://en.wikipedia.org/wiki/Google_Chrome_Extensions_Gallery" title="Google Chrome Extensions Gallery">Google Chrome Extension</a>, <a href="https://en.wikipedia.org/wiki/Google_Toolbar" title="Google Toolbar">Google Toolbar</a>, <a href="https://en.wikipedia.org/wiki/Bookmarklet" title="Bookmarklet">bookmarklet</a> (<a href="https://en.wikipedia.org/wiki/Firefox" title="Firefox">Firefox</a>, <a href="https://en.wikipedia.org/wiki/Internet_Explorer" title="Internet Explorer">Internet Explorer</a>, <a href="https://en.wikipedia.org/wiki/Opera_(web_browser)" title="Opera (web browser)">Opera</a>, <a href="https://en.wikipedia.org/wiki/Apple_Safari" title="Apple Safari">Safari</a>)</td></tr><tr><th scope="row">Available in</th><td>English</td></tr><tr><th scope="row"><a href="https://en.wikipedia.org/wiki/Software_categories#Categorization_approaches" title="Software categories">Type</a></th><td><a href="https://en.wikipedia.org/wiki/Web_annotation" title="Web annotation">Web annotation</a></td></tr><tr><th scope="row">Website</th><td><a rel="nofollow" href="http://www.google.com/sidewiki/">google.com/sidewiki</a></td></tr></tbody></table>
<p><b>Google Sidewiki</b> was a <a href="https://en.wikipedia.org/wiki/Web_annotation" title="Web annotation">web annotation</a> tool from <a href="https://en.wikipedia.org/wiki/Google" title="Google">Google</a>, launched in September 2009 and discontinued in December 2011. Sidewiki was a <a href="https://en.wikipedia.org/wiki/Browser_extension" title="Browser extension">browser extension</a> that allowed anyone logged into a <a href="https://en.wikipedia.org/wiki/Google_Account" title="Google Account">Google Account</a> to make and view comments about a given website in a <a href="https://en.wikipedia.org/wiki/Sidebar_(computing)" title="Sidebar (computing)">sidebar</a>. Despite the name, the tool was not a collaborative <a href="https://en.wikipedia.org/wiki/Wiki" title="Wiki">wiki</a>, though the comments were editable by the author.<sup id="cite_ref-3"><a href="#cite_note-3">[3]</a></sup><sup id="cite_ref-arstech_4-0"><a href="#cite_note-arstech-4">[4]</a></sup>
</p>
<meta property="mw:PageProp/toc">
<h2><span id="Function">Function</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Google_Sidewiki&amp;action=edit&amp;section=1" title="Edit section: Function">edit</a><span>]</span></span></h2>
<p>Google used ranking algorithms to determine comment <a href="https://en.wikipedia.org/wiki/Relevancy" title="Relevancy">relevancy</a> and usefulness, using criteria such as users voting up and down a comment and past user contributions. Anyone could look up a contributor's <a href="https://en.wikipedia.org/wiki/Google_profile" title="Google profile">Google profile</a> and assess their credibility. Caesar Sengupta of Google argued that the link to Google Profiles would help increase comment quality, because "People stop making trivial comments when it ties back to them."<sup id="cite_ref-paid_5-0"><a href="#cite_note-paid-5">[5]</a></sup> Website owners could "claim" their site, giving them the right to the first comment on the Sidewiki for that site.<sup id="cite_ref-6"><a href="#cite_note-6">[6]</a></sup> Sidewiki also linked to "relevant posts from blogs and other sources", a feature that was potentially gameable.<sup id="cite_ref-7"><a href="#cite_note-7">[7]</a></sup> Sidewiki was available for <a href="https://en.wikipedia.org/wiki/Internet_Explorer" title="Internet Explorer">Internet Explorer</a> and <a href="https://en.wikipedia.org/wiki/Firefox" title="Firefox">Firefox</a> through <a href="https://en.wikipedia.org/wiki/Google_Toolbar" title="Google Toolbar">Google Toolbar</a>, and on the <a href="https://en.wikipedia.org/wiki/Google_Chrome" title="Google Chrome">Google Chrome</a> browser through an add-on.<sup id="cite_ref-pcmag_8-0"><a href="#cite_note-pcmag-8">[8]</a></sup> For other browsers like <a href="https://en.wikipedia.org/wiki/Safari_(web_browser)" title="Safari (web browser)">Safari</a>, it was available as a third-party <a href="https://en.wikipedia.org/wiki/Bookmarklet" title="Bookmarklet">bookmarklet</a>.<sup id="cite_ref-9"><a href="#cite_note-9">[9]</a></sup><sup id="cite_ref-10"><a href="#cite_note-10">[10]</a></sup> Comments could be shared via a link, email, Twitter, or Facebook,<sup id="cite_ref-pcmag_8-1"><a href="#cite_note-pcmag-8">[8]</a></sup> and an <a href="https://en.wikipedia.org/wiki/API" title="API">API</a> was available for developers.<sup id="cite_ref-11"><a href="#cite_note-11">[11]</a></sup>
</p>
<h2><span id="Shutdown">Shutdown</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Google_Sidewiki&amp;action=edit&amp;section=2" title="Edit section: Shutdown">edit</a><span>]</span></span></h2>
<p>In September 2011, Google announced it would discontinue a number of its products, including Google Sidewiki.<sup id="cite_ref-12"><a href="#cite_note-12">[12]</a></sup>
</p>
<h2><span id="Reception">Reception</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Google_Sidewiki&amp;action=edit&amp;section=3" title="Edit section: Reception">edit</a><span>]</span></span></h2>
<p>Sidewiki allowed users to interact with a website in ways that the site owner could not control, which upset some website owners. <a href="https://en.wikipedia.org/wiki/Jeff_Jarvis" title="Jeff Jarvis">Jeff Jarvis</a> complained that Sidewiki "takes comments away from my blog and puts them on Google. That sets up Google in channel conflict vs me. It robs my site of much of its value",<sup id="cite_ref-13"><a href="#cite_note-13">[13]</a></sup> and PaidContent noted that "Google is walking a fine line in its efforts to innovate in some areas that have long been the domain of traditional publishers, while not alienating them."<sup id="cite_ref-paid_5-1"><a href="#cite_note-paid-5">[5]</a></sup> PC Magazine commented that Sidewiki could "push site owners to make their forums more appealing on their own, and to enhance sites with no comment area with a space for reader participation."<sup id="cite_ref-pcmag_8-2"><a href="#cite_note-pcmag-8">[8]</a></sup> <a href="https://en.wikipedia.org/wiki/Public_relations" title="Public relations">Public relations</a> professionals saw Sidewiki as another venue that will need managing, but which offered an opportunity to engage with complaints and spot 'hot issues'.<sup id="cite_ref-14"><a href="#cite_note-14">[14]</a></sup> <a href="https://en.wikipedia.org/wiki/Mark_Borkowski" title="Mark Borkowski">Mark Borkowski</a> predicted that "SideWiki is going to challenge PR by providing the masses with the tool for the ultimate expression of people power, something uncontainable that will need constant monitoring... SideWiki will make it impossible to promote one message and not be held to account."<sup id="cite_ref-15"><a href="#cite_note-15">[15]</a></sup> ArsTechnica argued that the comments were of similar value to those on existing sites such as <a href="https://en.wikipedia.org/wiki/Digg" title="Digg">Digg</a> and <a href="https://en.wikipedia.org/wiki/Reddit" title="Reddit">Reddit</a>, and suggested that without the ability found in Wikipedia to delete and restructure material, it was a "glorified comment system".<sup id="cite_ref-arstech_4-1"><a href="#cite_note-arstech-4">[4]</a></sup>
</p>
<h2><span id="See_also">See also</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Google_Sidewiki&amp;action=edit&amp;section=4" title="Edit section: See also">edit</a><span>]</span></span></h2>
<ul><li><a href="https://en.wikipedia.org/wiki/Google_SearchWiki" title="Google SearchWiki">Google SearchWiki</a></li></ul>
<h2><span id="References">References</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Google_Sidewiki&amp;action=edit&amp;section=5" title="Edit section: References">edit</a><span>]</span></span></h2>
<div>
<ol>
<li id="cite_note-1"><span><b><a href="#cite_ref-1">^</a></b></span> <span><cite id="CITEREFMalik2009">Malik, Om (September 23, 2009). <a rel="nofollow" href="https://gigaom.com/2009/09/23/google-launches-sidewiki-more-like-universal-commenting-system/">"Google Launches Sidewiki — More Like a Universal Commenting System"</a>. <i>gigaom.com</i><span>. Retrieved <span>March 3,</span> 2019</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=gigaom.com&amp;rft.atitle=Google+Launches+Sidewiki+%E2%80%94+More+Like+a+Universal+Commenting+System&amp;rft.date=2009-09-23&amp;rft.aulast=Malik&amp;rft.aufirst=Om&amp;rft_id=https%3A%2F%2Fgigaom.com%2F2009%2F09%2F23%2Fgoogle-launches-sidewiki-more-like-universal-commenting-system%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-2"><span><b><a href="#cite_ref-2">^</a></b></span> <span>Eustace, Alan. (2011-09-02) <a rel="nofollow" href="http://googleblog.blogspot.com/2011/09/fall-spring-clean.html">Official Blog: A fall spring-clean</a>. Googleblog.blogspot.com. Retrieved on 2013-09-04.</span>
</li>
<li id="cite_note-3"><span><b><a href="#cite_ref-3">^</a></b></span> <span><cite><a rel="nofollow" href="http://googleblog.blogspot.com/2009/09/help-and-learn-from-others-as-you.html">"Help and learn from others as you browse the web: Google Sidewiki"</a>. September 23, 2009<span>. Retrieved <span>September 23,</span> 2009</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Help+and+learn+from+others+as+you+browse+the+web%3A+Google+Sidewiki&amp;rft.date=2009-09-23&amp;rft_id=http%3A%2F%2Fgoogleblog.blogspot.com%2F2009%2F09%2Fhelp-and-learn-from-others-as-you.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-arstech-4"><span>^ <a href="#cite_ref-arstech_4-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-arstech_4-1"><sup><i><b>b</b></i></sup></a></span> <span><cite id="CITEREFPaul2009">Paul, Ryan (September 23, 2009). <a rel="nofollow" href="https://arstechnica.com/web/news/2009/09/google-introduces-sidewiki-invites-users-to-annotate-web.ars">"Google Sidewiki interesting, but real utility unclear"</a>. <i>ArsTechnica</i><span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=ArsTechnica&amp;rft.atitle=Google+Sidewiki+interesting%2C+but+real+utility+unclear&amp;rft.date=2009-09-23&amp;rft.aulast=Paul&amp;rft.aufirst=Ryan&amp;rft_id=https%3A%2F%2Farstechnica.com%2Fweb%2Fnews%2F2009%2F09%2Fgoogle-introduces-sidewiki-invites-users-to-annotate-web.ars&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-paid-5"><span>^ <a href="#cite_ref-paid_5-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-paid_5-1"><sup><i><b>b</b></i></sup></a></span> <span><cite id="CITEREFTartakoff2009">Tartakoff, Joseph (September 23, 2009). <a rel="nofollow" href="https://web.archive.org/web/20120325201729/http://paidcontent.org/article/419-googles-latest-ambition-a-universal-commenting-system-for-the-web/">"Google's Latest Ambition: A Universal Commenting System For The Web"</a>. <i>PaidContent</i>. Archived from <a rel="nofollow" href="http://paidcontent.org/article/419-googles-latest-ambition-a-universal-commenting-system-for-the-web/">the original</a> on March 25, 2012<span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=PaidContent&amp;rft.atitle=Google%27s+Latest+Ambition%3A+A+Universal+Commenting+System+For+The+Web&amp;rft.date=2009-09-23&amp;rft.aulast=Tartakoff&amp;rft.aufirst=Joseph&amp;rft_id=http%3A%2F%2Fpaidcontent.org%2Farticle%2F419-googles-latest-ambition-a-universal-commenting-system-for-the-web%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-6"><span><b><a href="#cite_ref-6">^</a></b></span> <span><cite id="CITEREFArrington2009">Arrington, Michael (September 23, 2009). <a rel="nofollow" href="https://techcrunch.com/2009/09/23/google-steps-where-many-have-stumbled-sidewiki/">"Google Steps Where Many Have Stumbled: Sidewiki"</a>. <i>TechCrunch</i><span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=TechCrunch&amp;rft.atitle=Google+Steps+Where+Many+Have+Stumbled%3A+Sidewiki&amp;rft.date=2009-09-23&amp;rft.aulast=Arrington&amp;rft.aufirst=Michael&amp;rft_id=https%3A%2F%2Ftechcrunch.com%2F2009%2F09%2F23%2Fgoogle-steps-where-many-have-stumbled-sidewiki%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-7"><span><b><a href="#cite_ref-7">^</a></b></span> <span><cite id="CITEREFTurner2009">Turner, Adam (October 2, 2009). <a rel="nofollow" href="http://www.itwire.com/opinion-and-analysis/seeking-nerdvana/28166-wave-hello-to-google-sidewiki-bombing">"Wave hello to Google Sidewiki bombing"</a>. <i>iTWire</i><span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=iTWire&amp;rft.atitle=Wave+hello+to+Google+Sidewiki+bombing&amp;rft.date=2009-10-02&amp;rft.aulast=Turner&amp;rft.aufirst=Adam&amp;rft_id=http%3A%2F%2Fwww.itwire.com%2Fopinion-and-analysis%2Fseeking-nerdvana%2F28166-wave-hello-to-google-sidewiki-bombing&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-pcmag-8"><span>^ <a href="#cite_ref-pcmag_8-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-pcmag_8-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-pcmag_8-2"><sup><i><b>c</b></i></sup></a></span> <span><cite id="CITEREFMuchmore2009">Muchmore, Michael (September 25, 2009). <a rel="nofollow" href="https://www.pcmag.com/article2/0,2817,2353282,00.asp">"Hands On with Google Sidewiki: Comments for All"</a>. <i>PC Magazine</i><span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=PC+Magazine&amp;rft.atitle=Hands+On+with+Google+Sidewiki%3A+Comments+for+All&amp;rft.date=2009-09-25&amp;rft.aulast=Muchmore&amp;rft.aufirst=Michael&amp;rft_id=https%3A%2F%2Fwww.pcmag.com%2Farticle2%2F0%2C2817%2C2353282%2C00.asp&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-9"><span><b><a href="#cite_ref-9">^</a></b></span> <span><cite id="CITEREFAgarwal2009">Agarwal, Amit (September 24, 2009). <a rel="nofollow" href="http://www.labnol.org/internet/google-sidewiki-without-google-toolbar/9959/">"Use Google Sidewiki without the Google Toolbar"</a>. <i>Digital Inspiration</i>. Labnol<span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Digital+Inspiration&amp;rft.atitle=Use+Google+Sidewiki+without+the+Google+Toolbar&amp;rft.date=2009-09-24&amp;rft.aulast=Agarwal&amp;rft.aufirst=Amit&amp;rft_id=http%3A%2F%2Fwww.labnol.org%2Finternet%2Fgoogle-sidewiki-without-google-toolbar%2F9959%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-10"><span><b><a href="#cite_ref-10">^</a></b></span> <span><cite id="CITEREFAdaikin2009">Adaikin, Andrey (October 29, 2009). <a rel="nofollow" href="http://chrome.blogspot.com/2009/10/bringing-google-sidewiki-goodness-to.html">"Bringing Google Sidewiki goodness to Google Chrome, Part I"</a>. <i>Google Chrome Blog</i><span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Google+Chrome+Blog&amp;rft.atitle=Bringing+Google+Sidewiki+goodness+to+Google+Chrome%2C+Part+I&amp;rft.date=2009-10-29&amp;rft.aulast=Adaikin&amp;rft.aufirst=Andrey&amp;rft_id=http%3A%2F%2Fchrome.blogspot.com%2F2009%2F10%2Fbringing-google-sidewiki-goodness-to.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-11"><span><b><a href="#cite_ref-11">^</a></b></span> <span><cite id="CITEREFLardinois2009">Lardinois, Frederic (September 23, 2009). <a rel="nofollow" href="https://web.archive.org/web/20100828045821/http://www.readwriteweb.com/archives/google_launches_sidewiki_lets_you_annotate_the_web.php">"Annotate the Web: Google Launches Sidewiki"</a>. <i>ReadWriteWeb</i>. Archived from <a rel="nofollow" href="http://www.readwriteweb.com/archives/google_launches_sidewiki_lets_you_annotate_the_web.php">the original</a> on August 28, 2010<span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=ReadWriteWeb&amp;rft.atitle=Annotate+the+Web%3A+Google+Launches+Sidewiki&amp;rft.date=2009-09-23&amp;rft.aulast=Lardinois&amp;rft.aufirst=Frederic&amp;rft_id=http%3A%2F%2Fwww.readwriteweb.com%2Farchives%2Fgoogle_launches_sidewiki_lets_you_annotate_the_web.php&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-12"><span><b><a href="#cite_ref-12">^</a></b></span> <span>
<cite id="CITEREFAlan_Eustace2011">Alan Eustace (September 2, 2011). <a rel="nofollow" href="http://googleblog.blogspot.com/2011/09/fall-spring-clean.html">"A fall spring-clean"</a><span>. Retrieved <span>September 2,</span> 2011</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=A+fall+spring-clean&amp;rft.date=2011-09-02&amp;rft.au=Alan+Eustace&amp;rft_id=http%3A%2F%2Fgoogleblog.blogspot.com%2F2011%2F09%2Ffall-spring-clean.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-13"><span><b><a href="#cite_ref-13">^</a></b></span> <span><cite id="CITEREFIrvine2009">Irvine, Chris (September 24, 2009). <a rel="nofollow" href="https://www.telegraph.co.uk/technology/google/6224801/Google-Sidewiki-new-tool-lets-anyone-comment-on-webpages.html">"Google Sidewiki: new tool lets anyone comment on webpages"</a>. <i>Daily Telegraph</i><span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Daily+Telegraph&amp;rft.atitle=Google+Sidewiki%3A+new+tool+lets+anyone+comment+on+webpages&amp;rft.date=2009-09-24&amp;rft.aulast=Irvine&amp;rft.aufirst=Chris&amp;rft_id=https%3A%2F%2Fwww.telegraph.co.uk%2Ftechnology%2Fgoogle%2F6224801%2FGoogle-Sidewiki-new-tool-lets-anyone-comment-on-webpages.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-14"><span><b><a href="#cite_ref-14">^</a></b></span> <span><cite id="CITEREFLee2009">Lee, Julian (November 13, 2009). <a rel="nofollow" href="http://www.smh.com.au/technology/biz-tech/sidewiki-causes-a-pr-headache-20091113-idlp.html">"Sidewiki causes a PR headache"</a>. <i>Sydney Morning Herald</i><span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Sydney+Morning+Herald&amp;rft.atitle=Sidewiki+causes+a+PR+headache&amp;rft.date=2009-11-13&amp;rft.aulast=Lee&amp;rft.aufirst=Julian&amp;rft_id=http%3A%2F%2Fwww.smh.com.au%2Ftechnology%2Fbiz-tech%2Fsidewiki-causes-a-pr-headache-20091113-idlp.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
<li id="cite_note-15"><span><b><a href="#cite_ref-15">^</a></b></span> <span><cite id="CITEREFBorkowski2009">Borkowski, Mark (November 9, 2009). <a rel="nofollow" href="https://www.theguardian.com/media/2009/nov/09/sidewiki-danger-to-pr">"SideWiki changes everything"</a>. <i>The Guardian</i>. PDA – The Digital Content Blog<span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Guardian&amp;rft.atitle=SideWiki+changes+everything&amp;rft.date=2009-11-09&amp;rft.aulast=Borkowski&amp;rft.aufirst=Mark&amp;rft_id=https%3A%2F%2Fwww.theguardian.com%2Fmedia%2F2009%2Fnov%2F09%2Fsidewiki-danger-to-pr&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></span>
</li>
</ol></div>
<h2><span id="External_links">External links</span><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=Google_Sidewiki&amp;action=edit&amp;section=6" title="Edit section: External links">edit</a><span>]</span></span></h2>
<ul><li><cite><a rel="nofollow" href="https://www.youtube.com/watch?v=Dgl6k_k5uwg">"Google Sidewiki for Google Toolbar"</a>. <i>Google Toolbar Help</i>. YouTube. September 22, 2009. <a rel="nofollow" href="https://ghostarchive.org/varchive/youtube/20211221/Dgl6k_k5uwg">Archived</a> from the original on December 21, 2021<span>. Retrieved <span>September 9,</span> 2010</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Google+Toolbar+Help&amp;rft.atitle=Google+Sidewiki+for+Google+Toolbar&amp;rft.date=2009-09-22&amp;rft_id=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DDgl6k_k5uwg&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGoogle+Sidewiki"></span></li></ul>

<!-- 
NewPP limit report
Parsed by mw1380
Cached time: 20230625173037
Cache expiry: 1814400
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.689 seconds
Real time usage: 0.820 seconds
Preprocessor visited node count: 2125/1000000
Post‐expand include size: 158770/2097152 bytes
Template argument size: 1806/2097152 bytes
Highest expansion depth: 19/100
Expensive parser function count: 3/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 53716/5000000 bytes
Lua time usage: 0.329/10.000 seconds
Lua memory usage: 6920016/52428800 bytes
Number of Wikibase entities loaded: 1/400
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  540.342      1 -total
 38.93%  210.380      1 Template:Reflist
 26.66%  144.082      1 Template:Google_Inc.
 21.09%  113.966      5 Template:Cite_web
 15.09%   81.519      1 Template:Infobox_software
 13.20%   71.346      1 Template:Infobox
 13.03%   70.416      1 Template:Short_description
 12.71%   68.689     10 Template:Cite_news
  7.27%   39.291      2 Template:Pagetype
  7.01%   37.880      1 Template:Hlist
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:24447456-0!canonical and timestamp 20230625173036 and revision id 1151201688. Rendering was triggered because: api-parse
 -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Writing as a form of thinking (148 pts)]]></title>
            <link>https://lopespm.com/notes/2023/07/02/writing-as-a-form-of-thinking.html</link>
            <guid>36560254</guid>
            <pubDate>Sun, 02 Jul 2023 10:56:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lopespm.com/notes/2023/07/02/writing-as-a-form-of-thinking.html">https://lopespm.com/notes/2023/07/02/writing-as-a-form-of-thinking.html</a>, See on <a href="https://news.ycombinator.com/item?id=36560254">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Large language models (LLM) like ChatGPT triggered a remarkable societal and computational shift that feels comparable to the impact from the initial internet era with its first impressive search engines like Google. LLMs are the toast of the town.</p>

<p>Writing emails, reports, school homework, analysis, code, summaries. The list goes on.</p>

<p>Save from when you would delegate this task to another fellow human, long hours would be passed in the past trying to conjure a piece of text that could communicate something to another entity. Now this can be made at scale, at low cost, with low effort.</p>

<p>Since we are still liable for the results of this tool, i.e. it’s still our name on the email sender, so instead of just sending that email, we might first read that LLM output, interpret it, understand it, and then send it.</p>

<h2 id="more-than-just-text">More than just text</h2>

<p>Text is a form of communication. If something, or someone wrote it for us, certain decisions were made along the way to convey the goal that we gave. Out of the many paths possible to crystallize that piece of knowledge into a piece text, one of them was chosen.</p>

<p>I would claim that something gets lost on that delegation.</p>

<p>The writing process is more than just the production of text. Many time it requires the exploration of different perspectives, thinking deeply and coming to terms that we don’t know enough about a subject and need to learn more about it.</p>

<p>For example, it’s essential for me to have a notebook at hand to take notes during meetings and formal discussions. I write phrases, loose words, make small diagrams, jot down some reminders. Some of them are never to be re-read again, others I revisit to structure them down into a concise structure. Most of all, they help me think about a problem.</p>

<p>Same holds for notes and articles. I start with a cloud of loosely held ideas that are related, which I attempt to refine into a structured form. Similar to the <a href="https://en.wikipedia.org/wiki/Double_Diamond_(design_process_model)">double diamond</a> process.</p>

<p>Same for books. Several times I’ve come to terms that I learned close to nothing about a book read one month before. Or conversations. Or movies. Or experiences.</p>

<p>This is, <a href="https://www.youtube.com/watch?v=otazg3TuPWM">except</a> if I reflected or acted about them. Except if I wrote down my conclusions about them.</p>

<blockquote>
  <p>For me, taking notes helps make sure that I’m really thinking hard about what’s in there. If I disagree with the book, sometimes it takes a long time to read the books because I’m writing so much in the margin</p>

  <p><em>― <a href="https://youtu.be/eTFy8RnUkoU?t=11">Bill Gates</a></em></p>
</blockquote>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[64bit computing on a budget (163 pts)]]></title>
            <link>https://virtuallyfun.com/2023/07/01/64bit-computing-on-a-budget/</link>
            <guid>36560242</guid>
            <pubDate>Sun, 02 Jul 2023 10:54:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://virtuallyfun.com/2023/07/01/64bit-computing-on-a-budget/">https://virtuallyfun.com/2023/07/01/64bit-computing-on-a-budget/</a>, See on <a href="https://news.ycombinator.com/item?id=36560242">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>With all that <a href="https://virtuallyfun.com/2023/05/15/windows-2000-64-bit-for-alpha-axp/">Dec Alpha talk</a>, and how hard it is to get hardware, and how seemingly exclusionary it is, I thought I would try to touch on a more available 64bit ‘risc’ platform, for the masses!</p>
<p>While a couple years ago I had touched on running <a rel="noreferrer noopener" href="https://virtuallyfun.com/2020/07/24/windows-10-on-the-raspberry-pi-4/" data-type="URL" data-id="/2020/07/24/windows-10-on-the-raspberry-pi-4/" target="_blank">Windows 10 on the Raspberry Pi 4</a>, in the brave new world of 2023 getting ahold of a pi4 is expensive, hard to find, and kind of depressive, which lead me to this (old) but exciting project, the <a href="https://renegade-project.tech/en/home" target="_blank" rel="noreferrer noopener">Renegade Project</a>!</p>
<p>Long story short, there exists enough drivers &amp; information to facilitate a port to the Snapdragon 845, a 64bit System On a Chip( SOAC!), meaning that if you have a device with this chip it *can* be slightly possible to install Windows 10 onto it.</p>
<figure><a href="https://renegade-project.tech/en/state"><img decoding="async" width="921" height="428" src="https://virtuallyfun.com/wp-content/uploads/2023/07/renegade-system-matrix.png" alt="" srcset="http://virtuallyfun.com/wp-content/uploads/2023/07/renegade-system-matrix.png 921w, http://virtuallyfun.com/wp-content/uploads/2023/07/renegade-system-matrix-300x139.png 300w, http://virtuallyfun.com/wp-content/uploads/2023/07/renegade-system-matrix-768x357.png 768w, http://virtuallyfun.com/wp-content/uploads/2023/07/renegade-system-matrix-500x232.png 500w" sizes="(max-width: 921px) 100vw, 921px"></a><figcaption>system compatibility matrix, for ants.</figcaption></figure>
<p>Glancing at the system matrix, to me the glaring hole is Charging. 3 systems outright support it, all of them from Xiaomi, the <a href="https://renegade-project.tech/en/devices/xiaomi/polaris">Xiaomi Mix 2s</a>, Xiaomi Mix 3 &amp; the <a href="https://renegade-project.tech/en/devices/xiaomi/beryllium">Xiaomi PocoPhone F1</a>. Looking around eBay to start this adventure I found a PocoPhone F1!</p>
<h2>Getting the Phone</h2>
<figure><a href="https://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-ebay-listing.png"><img decoding="async" loading="lazy" width="901" height="431" src="https://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-ebay-listing.png" alt="" srcset="http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-ebay-listing.png 901w, http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-ebay-listing-300x144.png 300w, http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-ebay-listing-768x367.png 768w, http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-ebay-listing-500x239.png 500w" sizes="(max-width: 901px) 100vw, 901px"></a></figure>
<p>This seemed like a good start, 29.99, 128GB of flash storage, and I’d later learn 6GB of RAM. The first problem came from Xiaomi. Turns out that the phone was still locked, the seller had neglected to logout from his Xiaomi account. Even worse though he had forgotten his login and password. Calling Xiaomi support was basically worthless. Without unlocking the phone on a reset to root the phone lead me to this:</p>
<div>
<figure><a href="https://virtuallyfun.com/wp-content/uploads/2023/07/locked-pocophone2.jpg"><img decoding="async" loading="lazy" width="384" height="512" src="https://virtuallyfun.com/wp-content/uploads/2023/07/locked-pocophone2.jpg" alt="" srcset="http://virtuallyfun.com/wp-content/uploads/2023/07/locked-pocophone2.jpg 384w, http://virtuallyfun.com/wp-content/uploads/2023/07/locked-pocophone2-225x300.jpg 225w" sizes="(max-width: 384px) 100vw, 384px"></a><figcaption>Locked!</figcaption></figure></div>
<p>I got lucky however after talking to the seller, he agreed to go above and beyond and we were able to unlock the phone together. So everything went well. If you do buy one of these phones used, MAKE SURE TO CHECK THE XIOAMI login id! It has to be unlocked and blank so you can register it and get the unlock. It will require a valid email &amp; phone number + sim for it to send/receive SMS codes.</p>
<p>Access to the site is very up &amp; down, so I archived what <a rel="noreferrer noopener" href="https://archive.org/details/miflash_unlock_en_7.6.602.42" target="_blank">I had downloaded to unlock the phone here</a>. <a href="https://archive.org/details/miflash_unlock_en_7.6.602.42" target="_blank" rel="noreferrer noopener">miflash_unlock_en_7.6.602.42.7z</a></p>
<p>I should add that we’ve cleared the first few hurdles of precuring the device and unlocking it. And I’m glossing over stuff. Getting to this point was not easy and took a week. The unlock process is not intuitive, and I’m sure many phones are sold out there that have their google access wiped, but have not been logged out all the way, or the flash erased. I can’t show you mine as I ended up erasing Android but be aware of this!</p>
<h2>Getting ready for Windows</h2>
<p>Basically on the Android side there is three main modes, the boot, the recovery and the ‘fastboot’ mode. Holding power &amp; down brings you to fastboot, where using the fastboot tool you can load an image from your PC into ram and execute it. <a href="https://github.com/edk2-porting/edk2-msm" target="_blank" rel="noreferrer noopener">EDK2 UEFI firmware</a>, is the first part or the renegade project you’ll encouter. It’s really powerful, allowing you to not only boot into Windows, but it also supports a linux disk target mode, allowing you to partition and access the flash directly from a PC. Naturally this is SUPER dangerous, and <a href="https://archive.org/details/pocophone-f1-modem-files" target="_blank" rel="noreferrer noopener">backup your modem files</a>!</p>
<p>With the phone unlocked softbooting E2DK you can put it into a target disk mode, connect it to a pc and partition away!</p>
<div>
<figure><a href="https://virtuallyfun.com/wp-content/uploads/2023/07/disk-host-mode-reduced.jpg"><img decoding="async" loading="lazy" width="467" height="865" src="https://virtuallyfun.com/wp-content/uploads/2023/07/disk-host-mode-reduced.jpg" alt="" srcset="http://virtuallyfun.com/wp-content/uploads/2023/07/disk-host-mode-reduced.jpg 467w, http://virtuallyfun.com/wp-content/uploads/2023/07/disk-host-mode-reduced-162x300.jpg 162w" sizes="(max-width: 467px) 100vw, 467px"></a><figcaption>disk mode… for ants!</figcaption></figure></div>
<p><a rel="noreferrer noopener" href="https://renegade-project.tech/en/install" target="_blank">The guide</a> (section 1.2) advices pushing the disk tools to the phone booted up in <a rel="noreferrer noopener" href="https://archive.org/download/miflash_unlock_en_7.6.602.42/twrp-3.7.0_9-0-beryllium.img" target="_blank">twrp-3.7.0_9-0-beryllium.img</a>. Honestly its easier to just partition it on your computer. HOWEVER if you were to use Windows, there is a slight issue:</p>
<p><strong><span>The device may no longer be able to boot into fastboot mode</span></strong></p>
<p>I ran into this issue and thought I had bricked my phone. I was actually in the middle of researching how to do a physical hard reset, <a href="https://www.youtube.com/watch?v=IlAaRQBtHKw" target="_blank" rel="noreferrer noopener">and place it into EDL mode</a> (taking it apart and finding which pads to short, when I found this section of the troubleshooting guide, where it’s the partition names. So instead, I ended up doing the partitioning on a Virtual Machine using VMware and Ubuntu.</p>
<pre><code>(parted) print
print
Model: SAMSUNG KLUDG4U1EA-B0C1 (scsi)
Disk /dev/block/sda: 123GB
Sector size (logical/physical): 4096B/4096B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name        Flags
 1      24.6kB  41.0kB  16.4kB               switch
 2      41.0kB  73.7kB  32.8kB               ssd
 3      73.7kB  524kB   451kB                bk01
 4      524kB   786kB   262kB                bk02
 5      786kB   1049kB  262kB                bk03
 6      1049kB  1573kB  524kB                keystore
 7      1573kB  2097kB  524kB                frp
 8      2097kB  4194kB  2097kB               bk04
 9      4194kB  8389kB  4194kB               misc
10      8389kB  16.8MB  8389kB               logfs
11      16.8MB  33.6MB  16.8MB               oops
12      33.6MB  50.3MB  16.8MB               devinfo
13      50.3MB  67.1MB  16.8MB               bk05
14      67.1MB  134MB   67.1MB  ext4         persist
15      134MB   201MB   67.1MB  ext4         persistbak
16      201MB   268MB   67.1MB               logdump
17      268MB   403MB   134MB                minidump
18      403MB   1275MB  872MB   ext4         cust
19      1275MB  1342MB  67.1MB               recovery
20      1342MB  1611MB  268MB   ext4         cache
21      1611MB  123GB   121GB                userdata</code></pre>
<p>Before I did anything, this is what the phone partition table looked like. It’s an exceptional amount. The new parted v 3.0 that is recommended to use, doesn’t support the resize command so I had to manually do the numbers after destroying partition 21.</p>
<p>Originally, I had made a 32Gb partition to keep some Android functionality but somewhere it just stopped booting. But I didn’t care.</p>
<pre><code>rm 21
mkpart userdata ext4 1611MB 32G
mkpart esp fat32 32G 32.5G
set 22 esp on
mkpart win ntfs 32.5GB 123G

21      1611MB  32.0GB  30.4GB  ext4         userdata
22      32.0GB  32.5GB  499MB   fat32        esp         boot, esp
23      32.5GB  123GB   90.5GB  ntfs         win         msftdata</code></pre>
<p>Obviously dont follow this. I’m only providing output as an example.</p>
<p>If I were more patient, I guess I would have dd’d the entire phone to get a full entire backup. But I didn’t get this phone to run Android, so I really don’t care.</p>
<p>There is a LOT of disks being presented to Windows, in case you ever wondered how those 128GB flash devices get sold with only 114GB of user space. </p>
<figure><a href="https://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-disk-partitions.png"><img decoding="async" loading="lazy" width="887" height="108" src="https://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-disk-partitions.png" alt="" srcset="http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-disk-partitions.png 887w, http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-disk-partitions-300x37.png 300w, http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-disk-partitions-768x94.png 768w, http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-f1-disk-partitions-500x61.png 500w" sizes="(max-width: 887px) 100vw, 887px"></a><figcaption>So many partitions!</figcaption></figure>
<p>And even that 112GB is actually usable!</p>
<p>Remember the system partition needs the boot,esp flags, and the windows partition is msftdata. Also make sure the partition names are either single words, or NO words. Spaces will kill the fastboot mode.</p>
<p>I put all the disks that are presented in offline mode, so I don’t get confused. Make sure you are going to mess with the right volumes when formatting after the partitioning. This is NOT for the novice, it would be easy to not only brick the phone but screw up your existing install. If you have physical disks attached you don’t absolutely need, remove them or put them offline to make sure you don’t screw up.</p>
<p>I used diskpart to select the appropriate volumes and format them.</p>
<pre><code>select disk 8
select volume 5
format quick fs=fat32 label="System"
assign letter="S"
select volume 6
format quick fs=ntfs label="Windows"
assign letter="W"</code></pre>
<p>This isn’t a guide, just a reflection of what I went through.</p>
<p>With the disk now formatted, it’s a matter of selecting an OS to install.</p>
<p>I had really bad luck picking random versions of Windows, so I looked until I could find a confirmed working version in this video, <a rel="noreferrer noopener" href="https://www.youtube.com/watch?v=t81-Ji17fGM" target="_blank">Rodando o Windows 10 ARM nativamente em um Dispositivo Android (Pocophone F1 + UEFI)</a>. Long story short, it’s Windows build 210521-1658 with version <a rel="noreferrer noopener" href="https://github.com/edk2-porting/edk2-msm/releases/tag/v0.4" target="_blank">0.4 of the bootloader</a>. Long story short I messed with LOTS of Windows on ARM driver sets, before I finally had the brave idea to just load it with no drivers:</p>
<div>
<figure><a href="https://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-booted-to-windows.jpg"><img decoding="async" loading="lazy" width="491" height="945" src="https://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-booted-to-windows.jpg" alt="" srcset="http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-booted-to-windows.jpg 491w, http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-booted-to-windows-156x300.jpg 156w" sizes="(max-width: 491px) 100vw, 491px"></a><figcaption>booted</figcaption></figure></div>
<p>But that image is far too stale, and expires out very quickly, reducing any useful functionality once it’s connected to the internet. So it’s something that probably could be fixed, but it’s far easier to just grab an image that’s newer.</p>
<p>The x86_64 image I’m using now is 19045.3031, so I guessed to pick something comparable on ARM64. I used something called <a href="https://archive.org/details/19045.3031_arm64_en-us_professional" target="_blank" rel="noreferrer noopener">19045.3031_arm64_en-us_professional</a>, although it too was out of date, but Windows update brought it up to 22H2 19045.3086 . I had tried the downloader tool and apply all the updates offline, but I had issues. I suspect now in retrospect it was drivers.</p>
<p>Another thing I learned the hard way is that some of these images have multiple OS images installed. I guess it’s de-duplication, along with compression, but be sure to index the image first! I accidentally installed a Home version. Yuck.</p>
<pre><code>dism /Get-ImageInfo /imagefile:install.wim

Index : 1
Name : Windows 10 Home
Description : Windows 10 Home
Size : 17,706,743,995 bytes

Index : 4
Name : Windows 10 Pro
Description : Windows 10 Pro
Size : 17,836,320,420 bytes</code></pre>
<p>So just don’t go wildly apply image #1. I wasted too much time on that one.</p>
<p>But in the release I’m using it’s image #1. I checked. Trust me.</p>
<pre><code>dism /apply-image /ImageFile:10.0.21390.1.co_release.210521-1658_arm64fre\install.wim /index:4 /ApplyDir:W:\</code></pre>
<p>The S volume needs to be populated with the UEFI boot files. I had foolishly thought the boot.wim file would include the boot files, but instead bcdboot can set it up based on the location of a Windows install.</p>
<pre><code>bcdboot W:\Windows /s S: /f UEFI</code></pre>
<p>The next thing to do is install the drivers.</p>
<p>I was lucky enough to get some insight into some driver combination to work, and I came up with this much:</p>
<pre>minimal 2210.1-fix
USB beryllium v2.0rc2
FG beryllium v2.0rc2</pre>
<p>The key of course is that there is a minimal set in 2210.1-fix that will bring the system up with working USB. The FG package brings in enough of the power management to know the battery status.</p>
<pre><code>dism /Image:W: /Add-Driver /Driver:drivers /Recurse</code></pre>
<p>The drivers are not signed, so that means we need to change a bunch of boot flags. I also turned on debugging so have Windows dump core files, so you can run analysts on them with <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools" target="_blank" rel="noreferrer noopener">Windgb</a>.</p>
<pre><code>S:
cd S:\EFI\Microsoft\Boot
bcdedit /store BCD /set "{default}" testsigning on
bcdedit /store BCD /set "{default}" nointegritychecks on
bcdedit /store BCD /set "{default}" recoveryenabled no
bcdedit /store BCD /set "{default}" debug on</code></pre>
<p>Of course the catch being that with no drivers loaded it’s in a super basic mode, with no USB, no touch screen, no power management, no wifi no nothing. So it’s a brick. But at least we’ve reproduced enough to show that you can boot Windows.</p>
<p>Sadly, loading all the drives from <a href="https://github.com/edk2-porting/WOA-Drivers/releases/tag/2210.1-fix" target="_blank" rel="noreferrer noopener">2210.1-fix</a> or beryllium <a href="https://github.com/edk2-porting/WOA-Drivers/releases/tag/v2.0rc2" target="_blank" rel="noreferrer noopener">v2.0rc2</a> lead to this:</p>
<figure><a href="https://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-crashed.jpg"><img decoding="async" loading="lazy" width="567" height="408" src="https://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-crashed.jpg" alt="" srcset="http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-crashed.jpg 567w, http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-crashed-300x216.jpg 300w, http://virtuallyfun.com/wp-content/uploads/2023/07/pocophone-crashed-417x300.jpg 417w" sizes="(max-width: 567px) 100vw, 567px"></a><figcaption>the cracked glass adds to the feeling.</figcaption></figure>
<p>Add in a much needed OTG adapter and a mouse or keyboard, and you can complete the installation. </p>
<figure><a href="https://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-Surface-scaled-1.jpg"><img decoding="async" loading="lazy" width="592" height="546" src="https://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-Surface-scaled-1.jpg" alt="" srcset="http://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-Surface-scaled-1.jpg 592w, http://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-Surface-scaled-1-300x277.jpg 300w, http://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-Surface-scaled-1-325x300.jpg 325w" sizes="(max-width: 592px) 100vw, 592px"></a></figure>
<p>However, since I left off the majority of the device drivers as I didn’t want to spend forever trying to track it down, I used a random USB to Ethernet adapter and thankfully It just worked!</p>
<figure><a href="https://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-pocophone.png"><img decoding="async" loading="lazy" width="1024" height="597" src="https://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-pocophone-1024x597.png" alt="" srcset="http://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-pocophone-1024x597.png 1024w, http://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-pocophone-300x175.png 300w, http://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-pocophone-768x448.png 768w, http://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-pocophone-500x292.png 500w, http://virtuallyfun.com/wp-content/uploads/2023/07/Windows-10-on-pocophone.png 1282w" sizes="(max-width: 1024px) 100vw, 1024px"></a><figcaption>Accessing the phone over RDP.</figcaption></figure>
<p>I added a fancy USB 3.0 ‘dock’ with USB-C connector that you can plug a charger into, so that not only can the phone stay connected to power, but there is room for the Ethernet. It also has HDMI, perhaps is the drivers were more stable, it could be a viable desktop? And I have what I wanted, which was a non Intel/AMD 64bit platform that is hopefully more reliable than the Alpha64 platform, and maybe something to do some kind of contrast of the past vs future</p>
<p>This was NOT a simple thing to go through. I would be extremely hesitant to advise other people to follow suit. But in the off chance anyone who wants to do it, might have a better idea of what is involved.</p>
<p>Read the <a rel="noreferrer noopener" href="https://renegade-project.tech/en/Troubleshooting" target="_blank">Troubleshooting guide</a> &amp; the <a rel="noreferrer noopener" href="https://renegade-project.tech/en/install" target="_blank">Installation guide</a>. Keep notes! I would have absolutely given up, without keeping notes.</p>
<p>Even simple tracking of disasters like this at least helped me along:</p>
<pre><code>210521-1658<br>10.0.21390.1.co_release.210521-1658_arm64fre</code></pre>
<div>
<div>
<pre><code>boot-beryllium Version 0.4.1.img</code></pre>
<pre><code>boot-beryllium-ebbg Release - 2210.1.img</code></pre>
<pre><code>boot-beryllium-ebbg Release - 2210.1.img

boot-beryllium-ebbg Release - 2210.1.img

boot-beryllium-ebbg Release - 2210.1.img

boot-beryllium-ebbg Release - 2210.1.img</code></pre>
</div>
<div>
<pre><code>no drivers</code></pre>
<pre><code>
no drivers</code></pre>
<pre><code>
v1.1.1


v1.1


FocalTechTouch v2.0rc1


v2.0rc1</code></pre>
</div>
<div>
<pre><code>INTERNAL_POWER_ERROR</code></pre>
<pre><code>
installer


SYSTEM THREAD EXCEPTION NOT HANDLED


SYSTEM THREAD EXCEPTION NOT HANDLED

installer


SYSTEM THREAD EXCEPTION NOT HANDLED</code></pre>
</div>
</div>
<p>Sorry the table doesn’t format well.</p>
<p>TL;DR don’t do it, unless you don’t mind spending too much time on this. Get a used Surface X instead.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Drastic increase in Tor clients from Germany (257 pts)]]></title>
            <link>https://metrics.torproject.org/userstats-relay-country.html?start=2019-01-01&amp;end=2023-07-02&amp;country=de&amp;events=off</link>
            <guid>36560136</guid>
            <pubDate>Sun, 02 Jul 2023 10:29:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://metrics.torproject.org/userstats-relay-country.html?start=2019-01-01&#x26;end=2023-07-02&#x26;country=de&#x26;events=off">https://metrics.torproject.org/userstats-relay-country.html?start=2019-01-01&#x26;end=2023-07-02&#x26;country=de&#x26;events=off</a>, See on <a href="https://news.ycombinator.com/item?id=36560136">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Kokuhaku: Japan’s Love Confessing Culture (2013) (118 pts)]]></title>
            <link>https://www.tofugu.com/japan/kokuhaku-love-confessing-japan/</link>
            <guid>36560114</guid>
            <pubDate>Sun, 02 Jul 2023 10:25:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tofugu.com/japan/kokuhaku-love-confessing-japan/">https://www.tofugu.com/japan/kokuhaku-love-confessing-japan/</a>, See on <a href="https://news.ycombinator.com/item?id=36560114">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img width="100%" src="https://files.tofugu.com/articles/japan/2013-10-23-kokuhaku-love-confessing-japan/header-640x.jpg" alt="Header 640x">
</p>
<h2>
<span>
Kokuhaku: Japan's Love Confessing Culture
</span>
<small>
<span>
If you're going to say I Love You, do it right!
</span>
</small>
</h2>
<p>
<span>
<time datetime="2013-10-23T00:00:00Z">October 23, 2013</time>
•
<span></span>
words written by

•
Art by
<a href="https://www.tofugu.com/about/people/aya-francisco/">Aya Francisco</a>
<a href="https://files.tofugu.com/articles/japan/2013-10-23-kokuhaku-love-confessing-japan/header-5120x.jpg" title="Download header wallpaper" target="_blank"><i></i>
</a></span>
</p>
</div><div>
<article>
<div>
<p>As I mentioned in a previous article, I ran into a bit of trouble when I said 'I love you' at the very beginning of my relationship with my boyfriend (now husband). In Western culture, if someone suddenly and unexpectedly confessed this to you so quickly you would start running, I think. In English, the word "Love" is a big one, and some would say it should not be used so freely or haphazardly. It's possible to date and like somebody while not being in love with them, just as it is possible to be in love with someone you aren't dating. I'm sure we all know that feeling (Ah hemm! …Brad Pitt…Excuse me!).</p>

<p>However, things are quite different in Japan. Everything starts from the act of <i>kokuhaku</i> <ruby>告白<rp>（</rp><rt></rt><rp>）</rp></ruby>, which is confessing your love and asking them to go out with you. Now, let's learn more about <em>kokuhaku!</em></p>

<h2 id="the-art-of-kokuhaku">The Art Of Kokuhaku</h2>

<figure><img alt="japanese confession love" src="https://files.tofugu.com/articles/japan/2013-10-23-kokuhaku-love-confessing-japan/guy-girl-confession.jpg"></figure>

<p><i>kokuhaku</i> <ruby>告白<rp>（</rp><rt>こくはく</rt><rp>）</rp></ruby>, literally means "confession", and it is done when a man or a woman declares their love to another, and hopes to begin dating that person. The most basic way of confessing this is to say:</p>

<ul>
  <li>好きです。付き合ってください。</li>
  <li>I love you. Can we start seeing each other?</li>
</ul>

<p>The <i>tsukiau</i> <ruby>付き合う<rp>（</rp><rt>つきあう</rt><rp>）</rp></ruby> part means "dating", "seeing each other", or "having a relationship" in English. This is a very common phrase used for this kind of confession and you may have heard it, or a phrase similar to it, once or twice in Japanese movies or anime. If accepted, it marks the beginning of a "serious" boyfriend/girlfriend relationship. Like real grown-up stuff.</p>

<p>You may go out with the person a few times or go out on a group date, but your relationship hasn't technically started until this love confession, aka <em>kokuhaku,</em> occurs. The prospect of entering into this kind of relationship is sometimes so overwhelming that people even "confess their love" before the first date, followed by a sheepish invitation to an event with just the two of you. As you might guess, professing your love to someone as a precursor to saying hello for the first time might not be the most logical way of getting hitched, but as you'll see, it often appears to some men as be the best overall option.</p>

<p>And after this confession, if you go out with another woman or man, it may be called "cheating" because after the kokuhaku you two have officially started being exclusive. At this point, it's the same as any serious boyfriend/girlfriend relationship in Western culture. So, when I started seeing my Canadian husband, I met some other girls who were also dating foreigners. One of them warned me that I should be aware of their cheating. She even told me 'Mami, you know, they are all cheaters!'. Maybe some of them are but I doubt that all of them are cheating. I believe that she thought so because she misunderstood the differences in the initial stages of dating between the two cultures.</p>

<p>Speaking of misunderstanding foreigners often say that they don't understand what Japanese girls or boys are thinking because when they go out on dates they aren't even allowed to touch their hands. But, when the foreigner asks about the possibility of another date and they answer: "Sure! What is it?" … in that case they may be waiting for your <em>kokuhaku.</em> The love confession is like a switch. Once the switch is flipped, they can get into relationship mode. In other words, they usually don't act like a boyfriend or a girlfriend when they are not officially dating, although it is not very common to touch, hug, or kiss in public in Japan anyway.</p>

<h3 id="is-it-like-or-is-it-love">Is It Like Or Is It Love?</h3>

<figure><img alt="city art love park" src="https://files.tofugu.com/articles/japan/2013-10-23-kokuhaku-love-confessing-japan/love-sculpture-in-front-of-building.jpg"><figcaption>  </figcaption> Source: <a href="https://www.flickr.com/photos/ecos/2331960166/" title="Visit source's website" target="_blank">Matt Harris</a></figure>

<p>The concept of "like" and "love" in Japanese may be a little difficult for you to gauge because the word <em>"suki"</em> could mean both/either "like" or "love."</p>

<p>Although we have a word for "to love" or "I love you" <i>aishiteru</i> <ruby>愛している<rp>（</rp><rt>あいしてる</rt><rp>）</rp></ruby>, we barely use it. Granted, if you throw enough beer into the stomachs of two dudes who have been friends since childhood, you'll inevitably hear the "I love you man!" "No way, I love you!" argument. But, aishiteru is just the equivalent of the words we reserve for those truly special in our lives. This is when the words aren't just said, but felt as well.</p>

<p>More simply, <em>aishiteru</em> has a completely different weight to it than than the words <em>suki</em> or even <em>daisuki</em> (really like). In many ways, it holds more gravity than when English speakers say "I love you" because people can "love" donuts or movies or even use it the hashtag #love to describe a picture of something they took on their phones. <em>Aishiteru,</em> however, is used for only one purpose.</p>

<p>So, I think the confusion comes from the translation and how the words are perceived in the various cultures. You might say "I love you" in English and we might say <em>"suki"</em> in Japanese. To us, <em>suki</em> can mean "love" but it isn't the same kind of love as <em>aishiteru,</em> which is when you're actually feeling love for another person. That's why when you're confessing your "love" for someone in Japanese, it isn't as big of a deal because you're saying you love them, but in the same way you might say you love a donut. So, you know, you say "love" and we say <em>"suki"</em> and you say "love" and we say <em>"aishiteru."</em> Keep that in mind while we talk about <em>kokuhaku</em> so you don't get the wrong impression.</p>

<p>Anyways, a Japanese man and woman's relationship usually starts from this big "confession" event. If you were in Japan, your Japanese friends would probably ask you whether person X has confessed to you yet, even after a couple of dates. You may be wondering why Japanese people let their love interests known and that they intend to date them, in a committed way, even before the first date. Sometimes adults make their love confessions in this way:</p>

<ul>
  <li>結婚を前提にお付き合いさせてください</li>
  <li>I would like to have a relationship with you with the objective of an eventual marriage.</li>
</ul>

<p>Some people think it's a waste of time to date someone who doesn't plan on getting married at any point in the near future, if at all. Actually, it's a rather practical way of starting a relationship if you are looking to tie the knot.</p>

<h2 id="you-need-courage-to-kokuhaku">You Need Courage To Kokuhaku</h2>

<figure><img alt="kokuhaku confession courage cartoon" src="https://files.tofugu.com/articles/japan/2013-10-23-kokuhaku-love-confessing-japan/kokuhaku-superhero.jpg"></figure>

<p>Now, if you really like a Japanese person and want to start a serious relationship with them, then the next step is to confess your love. Although you may not be afraid of telling the one you love that you love them, things are quite different in Japan. According to research about "love confessions" conducted by Unilever Japan in 2011, out of 300 Japanese women and men (high school students, university students and another group of people in their 20's), 79% of them answered that they can't perform the act of confessing. The top two reasons for it were:</p>

<ol>
  <li>Because I don't know what he/she thinks of me.</li>
  <li>Because I don't have enough confidence in myself.</li>
</ol>

<p>25% of them also answered that they would confess if they were more than 90% certain that their kokuhaku would be accepted, 43% of them said they would take a shot with 70% odds, and 22% of them would try if the possibility is 50-50.</p>

<p>However, in the same journal, people who regretted confessing was only 21% whereas people who regretted not confessing was a much larger 52%. Moreover, 55% of people answered that they may start liking someone if they were confessed to, even though they had never thought of the confessor as a girlfriend or boyfriend. So, why don't you head out there and profess how you truly feel! No regrets! 告白しよう!</p>

<h2 id="lame-ways-men-confess-their-love-to-women">Lame Ways Men Confess Their Love To Women</h2>

<p>So now you've heard basically all there is to know about Japanese "love" confession culture… that is, except for its failures. According to research conducted by My-navi-woman from July 27, 2013 to August 2, 2013, 124 out of 476 women have actually turned the confessor down because of how lame, or even scary, their confession came off as. So, what kind of confessions turned them away? Let's have a look so you won't make the same mistake that these men made.</p>

<figure><img alt="don't confess by text" src="https://files.tofugu.com/articles/japan/2013-10-23-kokuhaku-love-confessing-japan/confession-by-text.jpg"></figure>

<ul>
  <li>メールで告白された。しかも朝の5時に。（33歳／女性）</li>
  <li>He confessed that he loved me via text. On top of that, it was 5am. (33 year-old female)</li>
</ul>

<p>Maybe there was a time difference he didn't account for? If not, it was kind of rude to send a text to people while they are probably sleeping. Although the number of people that confess their love (or even break up) by texting is increasing, I personally don't like it either. It's like you are telling them that you aren't serious about the relationship.</p>

<ul>
  <li>「俺、ヒモになりたい」と言ってきた人がいた。あり得ない。（32歳／女性）</li>
  <li>One guy told me, "I wanna be your string." Unbelievable! (32 year-old female)</li>
</ul>

<p>You may be wondering why saying "I wanna be your string" is so bad. String,
<i>aka</i> <ruby>紐<rp>（</rp><rt></rt><rp>）</rp></ruby> <i>himo</i> <ruby>ひも<rp>（</rp><rt></rt><rp>）</rp></ruby> in Japanese is used for guys that are like pimps, mostly in that they depend on their wife or girlfriend's income. They also are often associated with abusive relationships. It's really strange and doesn't sound like a love confession at all. At least he's being honest-ish?</p>

<ul>
  <li>「俺と両親を養ってくれ」と言われた。ドン引きした。（28歳／女性）</li>
  <li>I was asked, "Can you financially support me and my parents?" I was totally turned off. (28 years-old female)</li>
</ul>

<p>Now, I have a little more faith in men than this, so I prefer to believe that this was actually a marriage proposal. Let me explain. I imagine a situation in which the woman really wanted to get married, but the guy didn't. He contemplated a nice way to break up with her for a long time and realized that this proposal would end the relationship and make her not feel so badly about splitting… And he succeeded! Yay! Good for them. I don't know, it's all just a part of my imagination, but I can't imagine anything else going on here.</p>

<ul>
  <li>同じ職場の人から、長い手紙で告白された。何となく見かけたことがある程度なのに長々と文章が書かれていた。あまりにもいろんなことが書かれていて怖かった。（26歳／女性）</li>
  <li>I was confessed to in a long letter from my co-worker. Although I'd never talked to him before and only knew his face, the letter was so long and mentioned so many things. It actually creeped me out. (26-years-old female)</li>
</ul>

<p>It's pretty scary that somebody who you don't know at all actually knows you quite well. Although you may fall in love with a girl at first sight and follow her around for a while, long enough to learn a lot about her, you would be much better off not disclosing all the things you've learned while stalking her when you talk to her (or write to her) for the first time. I'm sorry I have to state the obvious here because apparently some people need to know.</p>

<ul>
  <li>電車内で見知らぬ男性から「ずっと片思いしてました、友達からでいいのでお付き合いしてください！」と、車両中に響く声で告白された。怖くて、結婚しているとうそをついて断ってしまったが、当分その電車に一人で乗れなかった。（31歳／女性）</li>
  <li>On the train, I was confessed to by a stranger who very loudly said, "I've unrequitedly loved you for a long time. It's okay for me to start being friends, but could we start our relationship, instead?" I was scared and lied to him that I was married. I stopped riding the train for a while. (31-year-old female)</li>
</ul>

<p>This isn't the only public blunder as it seems that many other public confessions fail in their attempts as well.</p>

<ul>
  <li>告白と同時にいきなり後ろから抱きつかれた。告白だと理解する前に恐怖を感じてしまった。（29歳／女性）</li>
  <li>He hugged me from behind my back and then confessed his love. Before realizing that it was his confession, I felt really threatened. (29-year-old female)</li>
</ul>

<p>Maybe he couldn't restrain his feelings, but it's seriously scary, especially for Japanese people who don't have a hugging culture. He definitely jumped the gun.</p>

<figure><img alt="shall I compare thee to an anime girl?" src="https://files.tofugu.com/articles/japan/2013-10-23-kokuhaku-love-confessing-japan/anime-girl-comparison.jpg"></figure>

<ul>
  <li>漫画のキャラクターの名前を挙げて、それよりもかわいいから付き合ってと言われた。（25歳／女性）</li>
  <li>He listed off some female anime characters names and told me that I'm cuter than they are and that's why he wanted to date me. (25-year-old female)</li>
</ul>

<p>Although he probably just thought it was an adorable way to tell her that she was attractive, it sounds kind of nerdy and I assume most women would be turned off from hearing a confession of that sort.</p>

<ul>
  <li>相手の人が履歴書を持参して、延々と説明をして、すでに結婚モードになっていたことが昔あります。（40歳／女性）</li>
  <li>He gave me his resume and explained what kind of person he is and that he was thinking about marrying me. This happened a long time ago though. (40-year-old female)</li>
</ul>

<p>Like I mentioned above, some Japanese people want to start a relationship when marriage is the goal. He may have done it this way just to show that he is serious about marriage and would be faithful, but I think it was a bit too much.</p>

<ul>
  <li>高校生のとき、朝学校にいったら黒板に私宛てに愛の告白文が書かれていた。他の友達にもバレて、恥ずかしかった。（29歳／女性）</li>
  <li>When I was a high school student, there was a confession written on the blackboard when I arrived at school one morning. It was embarrassing because it was revealed to all my friends. (29-year-old woman)</li>
</ul>

<p>This happens sometimes when you're young. Your feelings overcome reason and you don't realize that this potentially embarrassing event will be known to everyone in school. I think this also happened once when I was in junior high, although I was just an onlooker wearing a huge grin.</p>

<ul>
  <li>年賀状で告白された。親にも見られて恥ずかしかった。（31歳／女性）</li>
  <li>I was confessed to on a New Years card. It was embarrassing because my parents saw it. (31-year-old woman)</li>
</ul>

<p>One tradition in Japan is to exchange Happy New Year cards, but those postcards are not enclosed in envelopes like Western Christmas cards, so his confession was right there for anyone to see.</p>

<ul>
  <li>いきなり小さなバラの花束を持ってきての告白。同じ学校の人でしたが、話したことはなく、一度目が合っただけだそうです。（32歳／女性）</li>
  <li>He suddenly approached me with a bouquet of roses and confessed his love for me. He went to the same school as me, but I'd never talked to him before. In fact, I had only ever seen him one time before this. (32-year-old woman)</li>
</ul>

<p>Women like flowers but not from strangers. Although, this might be different if you are a foreigner. If a foreigner approached me with flowers, I'd accept it as it his culture.</p>

<figure><img alt="impress her with his income" src="https://files.tofugu.com/articles/japan/2013-10-23-kokuhaku-love-confessing-japan/pay-slip-cartoon.jpg"></figure>

<ul>
  <li>いきなり給与明細を見せてきた。（26歳／女性）</li>
  <li>He suddenly showed me his pay slip. (26 years old woman)</li>
</ul>

<p>Whether his payment was a little or a lot, this would definitely turn most women away, not just Japanese women.</p>

<hr>

<p>All in all, you may have found this system of "love confessions" to be a bit weird compared to your culture, but I personally think that this system helps to make relationships clear from the beginning and also makes it easier to start dating. Because of this, we don't usually need to have that awkward moment of asking "Are we serious about each other?" or "Are we exclusive?" or even "Do you love me?" Men know what is to be expected of them upon doing their <em>kokuhaku</em> and women know what is expected of them upon accepting.</p>



</div>
</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Entropy: A little understood concept in physics [video] (195 pts)]]></title>
            <link>https://www.youtube.com/watch?v=DxL2HoqLbyA</link>
            <guid>36560104</guid>
            <pubDate>Sun, 02 Jul 2023 10:23:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=DxL2HoqLbyA">https://www.youtube.com/watch?v=DxL2HoqLbyA</a>, See on <a href="https://news.ycombinator.com/item?id=36560104">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Flattening ASTs (and Other Compiler Data Structures) (256 pts)]]></title>
            <link>https://www.cs.cornell.edu/~asampson/blog/flattening.html</link>
            <guid>36559346</guid>
            <pubDate>Sun, 02 Jul 2023 08:03:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cs.cornell.edu/~asampson/blog/flattening.html">https://www.cs.cornell.edu/~asampson/blog/flattening.html</a>, See on <a href="https://news.ycombinator.com/item?id=36559346">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
<figure>
<img src="https://www.cs.cornell.edu/~asampson/media/flattening/normal.png" alt="a normal AST">
<img src="https://www.cs.cornell.edu/~asampson/media/flattening/flat.png" alt="a flat AST">
<figcaption>Normal and flattened ASTs for the expression <code>a * b + c</code>.</figcaption>
</figure>

<p><a href="https://en.wikipedia.org/wiki/Region-based_memory_management">Arenas, a.k.a. regions,</a> are everywhere in modern language implementations.
One form of arenas is both super simple and surprisingly effective for compilers and compiler-like things.
Maybe because of its simplicity, I haven’t seen the basic technique in many compiler courses—or anywhere else in a CS curriculum for that matter.
This post is an introduction to the idea and its many virtues.</p>

<p><em>Arenas</em> or <em>regions</em> mean many different things to different people, so I’m going to call the specific flavor I’m interested in here <em>data structure flattening</em>.
Flattening uses an arena that only holds one type, so it’s actually just a plain array, and you can use array indices where you would otherwise need pointers.
We’ll focus here on flattening abstract syntax trees (ASTs), but the idea applies to any pointer-laden data structure.</p>

<p>To learn about flattening, we’ll build a basic interpreter twice:
first the normal way and then the flat way.
Follow along with the code in <a href="https://github.com/sampsyo/flatcalc">this repository</a>, where you can <a href="https://github.com/sampsyo/flatcalc/compare/main...flat#diff-42cb6807ad74b3e201c5a7ca98b911c5fa08380e942be6e4ac5807f8377f87fc">compare and contrast the two branches</a>.
The key thing to notice is that the changes are pretty small,
but we’ll see that they make a microbenchmark go 2.4× faster.
Besides performance, flattening also brings some ergonomics advantages that I’ll outline.</p>

<h2 id="a-normal-ast">A Normal AST</h2>

<p>Let’s start with the textbook way to represent an AST. Imagine the world’s simplest language of arithmetic expressions, where all you can do is apply the four basic binary arithmetic operators to literal integers. Some “programs” you can write in this language include <code>42</code>, <code>0 + 14 * 3</code>, and <code>(100 - 16) / 2</code>.</p>

<p>Maybe the clearest way to write the AST for this language would be as an ML type declaration:</p>

<div><pre><code><span>type</span> <span>binop</span> <span>=</span> <span>Add</span> <span>|</span> <span>Sub</span> <span>|</span> <span>Mul</span> <span>|</span> <span>Div</span>
<span>type</span> <span>expr</span> <span>=</span> <span>Binary</span> <span>of</span> <span>binop</span> <span>*</span> <span>expr</span> <span>*</span> <span>expr</span>
          <span>|</span> <span>Literal</span> <span>of</span> <span>int</span>
</code></pre></div>

<p>But for this post, we’ll use Rust instead. Here are <a href="https://github.com/sampsyo/flatcalc/blob/c5bbe7bd79f98a3b857f0432d4739a3f4f6241bd/src/main.rs#L10-L24">the equivalent types in Rust</a>:</p>

<div><pre><code><span>enum</span> <span>BinOp</span> <span>{</span> <span>Add</span><span>,</span> <span>Sub</span><span>,</span> <span>Mul</span><span>,</span> <span>Div</span> <span>}</span>
<span>enum</span> <span>Expr</span> <span>{</span>
    <span>Binary</span><span>(</span><span>BinOp</span><span>,</span> <span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>,</span> <span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>),</span>
    <span>Literal</span><span>(</span><span>i64</span><span>),</span>
<span>}</span>
</code></pre></div>

<p>If you’re not a committed Rustacean, <code>Box&lt;Expr&gt;</code> may look a little weird, but that’s just Rust for “a plain ol’ pointer to an <code>Expr</code>.” In C, we’d write <code>Expr*</code> to mean morally the same thing; in Java or Python or OCaml, it would just be <code>Expr</code> because everything is a reference by default.<sup id="fnref:inline" role="doc-noteref"><a href="#fn:inline" rel="footnote">1</a></sup></p>

<p>With the AST in hand, we can write all the textbook parts of a language implementation, like a <a href="https://github.com/sampsyo/flatcalc/blob/c5bbe7bd79f98a3b857f0432d4739a3f4f6241bd/src/main.rs#L28-L50">parser</a>, a <a href="https://github.com/sampsyo/flatcalc/blob/c5bbe7bd79f98a3b857f0432d4739a3f4f6241bd/src/main.rs#L139-L155">pretty-printer</a>, and an <a href="https://github.com/sampsyo/flatcalc/blob/c5bbe7bd79f98a3b857f0432d4739a3f4f6241bd/src/main.rs#L52-L67">interpreter</a>.
All of them are thoroughly unremarkable.
The whole interpreter is just one method on <code>Expr</code>:</p>

<div><pre><code><span>fn</span> <span>interp</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-&gt;</span> <span>i64</span> <span>{</span>
    <span>match</span> <span>self</span> <span>{</span>
        <span>Expr</span><span>::</span><span>Binary</span><span>(</span><span>op</span><span>,</span> <span>lhs</span><span>,</span> <span>rhs</span><span>)</span> <span>=&gt;</span> <span>{</span>
            <span>let</span> <span>lhs</span> <span>=</span> <span>lhs</span><span>.interp</span><span>();</span>
            <span>let</span> <span>rhs</span> <span>=</span> <span>rhs</span><span>.interp</span><span>();</span>
            <span>match</span> <span>op</span> <span>{</span>
                <span>BinOp</span><span>::</span><span>Add</span> <span>=&gt;</span> <span>lhs</span><span>.wrapping_add</span><span>(</span><span>rhs</span><span>),</span>
                <span>BinOp</span><span>::</span><span>Sub</span> <span>=&gt;</span> <span>lhs</span><span>.wrapping_sub</span><span>(</span><span>rhs</span><span>),</span>
                <span>BinOp</span><span>::</span><span>Mul</span> <span>=&gt;</span> <span>lhs</span><span>.wrapping_mul</span><span>(</span><span>rhs</span><span>),</span>
                <span>BinOp</span><span>::</span><span>Div</span> <span>=&gt;</span> <span>lhs</span><span>.checked_div</span><span>(</span><span>rhs</span><span>)</span><span>.unwrap_or</span><span>(</span><span>0</span><span>),</span>
            <span>}</span>
        <span>}</span>
        <span>Expr</span><span>::</span><span>Literal</span><span>(</span><span>num</span><span>)</span> <span>=&gt;</span> <span>*</span><span>num</span><span>,</span>
    <span>}</span>
<span>}</span>
</code></pre></div>

<p>My language has keep-on-truckin’ semantics; every expression eventually evaluates to an <code>i64</code>, even if it’s not the number you wanted.<sup id="fnref:arith" role="doc-noteref"><a href="#fn:arith" rel="footnote">2</a></sup></p>

<p>For extra credit, I also wrote a little <a href="https://github.com/sampsyo/flatcalc/blob/c5bbe7bd79f98a3b857f0432d4739a3f4f6241bd/src/main.rs#L118-L136">random program generator</a>. It’s also not all that interesting to look at; it just uses a recursively-increasing probability of generating a literal so it eventually terminates. Using fixed PRNG seeds, the random generator enables some easy <a href="https://github.com/sampsyo/flatcalc/blob/c5bbe7bd79f98a3b857f0432d4739a3f4f6241bd/Makefile#L4">microbenchmarking</a>. By generating and then immediately evaluating an expression, we can measure the performance of AST manipulation without the I/O costs of parsing and pretty-printing.</p>

<p>You can check out <a href="https://github.com/sampsyo/flatcalc">the relevant repo</a> and try it out:</p>

<div><pre><code><span>$ </span><span>echo</span> <span>'(29 * 3) - 9 * 5'</span> | cargo run
<span>$ </span>cargo run gen_interp  <span># Generate and immediately evaluate a random program.</span>
</code></pre></div>

<h2 id="flattening-the-ast">Flattening the AST</h2>

<p>The <em>flattening</em> idea has two pieces:</p>

<ul>
  <li>Instead of allocating <code>Expr</code> objects willy-nilly on the heap, we’ll pack them into a single, contiguous array.</li>
  <li>Instead of referring to children via pointers, <code>Exprs</code> will refer to their children using their indices in that array.</li>
</ul>

<figure>
<img src="https://www.cs.cornell.edu/~asampson/media/flattening/flat.png" alt="the same flat AST from earlier">
</figure>

<p>Let’s look back at the doodle from the top of the post.
We want to use a single <code>Expr</code> array to hold all our AST nodes.
These nodes still need to point to each other; they’ll now do that by referring to “earlier” slots in that array.
Plain old integers will take the place of pointers.</p>

<p>If that plan sounds simple, it is—it’s probably even simpler than you’re thinking.
The main thing we need is an array of <code>Expr</code>s.
I’ll use Rust’s <a href="https://doc.rust-lang.org/rust-by-example/generics/new_types.html">newtype idiom</a> to declare our arena type, <a href="https://github.com/sampsyo/flatcalc/blob/25f10b44252a2191ba6d0b5445f929096ad59361/src/main.rs#L37"><code>ExprPool</code></a>, as a shorthand for an <code>Expr</code> vector:</p>

<div><pre><code><span>struct</span> <span>ExprPool</span><span>(</span><span>Vec</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>);</span>
</code></pre></div>

<p>To keep things fancy, we’ll also give a <a href="https://github.com/sampsyo/flatcalc/blob/25f10b44252a2191ba6d0b5445f929096ad59361/src/main.rs#L32">name</a> to the plain old integers we’ll use to index into an <code>ExprPool</code>:</p>



<p>The idea is that, everywhere we previously used a pointer to an <code>Expr</code> (i.e., <code>Box&lt;Expr&gt;</code> or sometimes <code>&amp;Expr</code>), we’ll use an <code>ExprRef</code> instead.
<code>ExprRef</code>s are just 32-bit unsigned integers, but by giving them this special name, we’ll avoid confusing them with other <code>u32</code>s.
Most importantly, we need to change the definition of <code>Expr</code> itself:</p>

<div><pre><code> enum Expr {
<span>-    Binary(BinOp, Box&lt;Expr&gt;, Box&lt;Expr&gt;),
</span><span>+    Binary(BinOp, ExprRef, ExprRef),
</span>     Literal(i64),
 }
</code></pre></div>

<p>Next, we need to add utilities to <code>ExprPool</code> to create <code>Expr</code>s (allocation) and look them up (dereferencing).
In my implementation, these little functions are called <code>add</code> and <code>get</code>, and <a href="https://github.com/sampsyo/flatcalc/blob/25f10b44252a2191ba6d0b5445f929096ad59361/src/main.rs#L45-L55">their implementations</a> are extremely boring.
To use them, we need to look over our code and find every place where we create new <code>Expr</code>s or follow a pointer to an <code>Expr</code>.
For example, our <code>parse</code> function <a href="https://github.com/sampsyo/flatcalc/blob/c5bbe7bd79f98a3b857f0432d4739a3f4f6241bd/src/main.rs#L28-L50">used to be a method on <code>Expr</code></a>, but we’ll make it <a href="https://github.com/sampsyo/flatcalc/blob/25f10b44252a2191ba6d0b5445f929096ad59361/src/main.rs#L57-L81">a method on <code>ExprPool</code> instead</a>:</p>

<div><pre><code><span>-fn parse(tree: Pair&lt;Rule&gt;) -&gt; Self {
</span><span>+fn parse(&amp;mut self, tree: Pair&lt;Rule&gt;) -&gt; ExprRef {
</span></code></pre></div>

<p>And where we used to return a newly allocated <code>Expr</code> directly, we’ll now wrap that in <code>self.add()</code> to return an <code>ExprRef</code> instead.
Here’s the <code>match</code> case for constructing a literal expression:</p>

<div><pre><code> Rule::number =&gt; {
     let num = tree.as_str().parse().unwrap();
<span>-    Expr::Literal(num)
</span><span>+    self.add(Expr::Literal(num))
</span> }
</code></pre></div>

<p>Our interpreter <a href="https://github.com/sampsyo/flatcalc/blob/25f10b44252a2191ba6d0b5445f929096ad59361/src/main.rs#L83-L98">gets the same treatment</a>.
It also becomes an <code>ExprPool</code> method, and we have to add <code>self.get()</code> to go from an <code>ExprRef</code> to an <code>Expr</code> we can pattern-match on:</p>

<div><pre><code><span>-fn interp(&amp;self) -&gt; i64 {
</span><span>+fn interp(&amp;self, expr: ExprRef) -&gt; i64 {
</span><span>-    match self {
</span><span>+    match self.get(expr) {
</span></code></pre></div>

<p>That’s about it.
I think it’s pretty cool how few changes are required—see for yourself in <a href="https://github.com/sampsyo/flatcalc/compare/main...flat#diff-42cb6807ad74b3e201c5a7ca98b911c5fa08380e942be6e4ac5807f8377f87fc">the complete diff</a>.
You replace <code>Box&lt;Expr&gt;</code> with <code>ExprRef</code>, insert <code>add</code> and <code>get</code> calls in the obvious places, and you’ve got a flattened version of your code.
Neat!</p>

<h2 id="but-why">But Why?</h2>

<p>Flattened ASTs come with a bunch of benefits.
The classic ones most people cite are all about performance:</p>

<ol>
  <li><strong>Locality.</strong>
Allocating normal pointer-based <code>Expr</code>s runs the risk of <a href="https://en.wikipedia.org/wiki/Fragmentation_(computing)">fragmentation</a>.
Flattened <code>Expr</code>s are packed together in a contiguous region of memory, which is good for <a href="https://en.wikipedia.org/wiki/Locality_of_reference#Types_of_locality">spatial locality</a>.
Your data caches will work better because <code>Expr</code>s are more likely to share a cache line,
and even simple <a href="https://en.wikipedia.org/wiki/Prefetching">prefetchers</a> will do a better job of predicting which <code>Expr</code>s to load before you need them.
<a href="https://dl.acm.org/doi/10.1145/582419.582421">A sufficiently smart memory allocator might achieve the same thing</a>, especially if you allocate the whole AST up front and never add to it, but using a dense array removes all uncertainty.</li>
  <li><strong>Smaller references.</strong>
Normal data structures use pointers for references; on modern architectures, those are always 64 bits.
After flattening, you can use smaller integers—if you’re pretty sure you’ll never need more than 4,294,967,295 AST nodes,
you can get by with 32-bit references, like we did in our example.
That’s a 50% space savings for all your references, which could amount to a substantial overall memory reduction in pointer-heavy data structures like ASTs.
Smaller memory footprints mean less bandwidth pressure and even better spatial locality.
And you might save even more if you can get away with 16- or even 8-bit references for especially small data structures.</li>
  <li><strong>Cheap allocation.</strong>
In flatland, there is no need for a call to <code>malloc</code> every time you create a new AST node.
Instead, provided you pre-allocate enough memory to hold everything, allocation can entail just <a href="https://docs.rs/bumpalo/latest/bumpalo/">bumping the tail pointer</a> to make room for one more <code>Expr</code>.
Again, <a href="https://dl.acm.org/doi/10.1145/582419.582421">a really fast <code>malloc</code> might be hard to compete with</a>—but you basically can’t beat bump allocation on sheer simplicity.</li>
  <li><strong>Cheap deallocation.</strong>
Our flattening setup assumes you never need to free individual <code>Expr</code>s.
That’s probably true for many, although not all, language implementations:
you might build up new subtrees all the time, but you don’t need to reclaim space from many old ones.
ASTs tend to “die together,” i.e., it suffices to deallocate the entire AST all at once.
While freeing a normal AST entails traversing all the pointers to free each <code>Expr</code> individually, you can deallocate a flattened AST in one fell swoop by just freeing the whole <code>ExprPool</code>.</li>
</ol>

<p>I think it’s interesting that many introductions to arena allocation tend to focus on cheap deallocation (#4) as the main reason to do it.
<a href="https://en.wikipedia.org/wiki/Region-based_memory_management">The Wikipedia page</a>, for example, doesn’t (yet!) mention locality (#1 or #2) at all.
You can make an argument that #4 might be the <em>least</em> important for a compiler setting—since ASTs tend to persist all the way to the end of compilation, you might not need to free them at all.</p>

<p>Beyond performance, there are also ergonomic advantages:</p>

<ol>
  <li><strong>Easier lifetimes.</strong>
In the same way that it’s easier for your computer to free a flattened AST all at once, it’s also easier for <em>humans</em> to think about memory management at the granularity of an entire AST.
An AST with <em>n</em> nodes has just one lifetime instead of <em>n</em> for the programmer to think about.
This simplification is quadruply true in Rust, where lifetimes are not just in the programmer’s head but in the code itself.
Passing around a <code>u32</code> is way less fiddly than carefully managing lifetimes for all your <code>&amp;Expr</code>s: your code can rely instead on the much simpler lifetime of the <code>ExprPool</code>.
I suspect this is why the technique is so popular in Rust projects.
As a Rust partisan, however, I’ll argue that the same simplicity advantage applies in C++ or any other language with manual memory management—it’s just latent instead of explicit.</li>
  <li><strong>Convenient deduplication.</strong>
A flat array of <code>Expr</code>s can make it fun and easy to implement <a href="https://en.wikipedia.org/wiki/Hash_consing">hash consing</a> or even simpler techniques to avoid duplicating identical expressions.
For example, if we notice that we are using <code>Literal</code> expressions for the first 128 nonnegative integers a lot, we could reserve the first 128 slots in our <code>ExprPool</code> just for those.
Then, when someone needs the integer literal expression <code>42</code>, our <code>ExprPool</code> don’t need to construct a new <code>Expr</code> at all—we can just produce <code>ExprRef(42)</code> instead.
This kind of game is possible with a normal pointer-based representation too, but it probably requires some kind of auxiliary data structure.</li>
</ol>

<h2 id="performance-results">Performance Results</h2>

<p>Since we have two implementations of the same language, let’s measure those performance advantages.
For a microbenchmark, I randomly generated a program with about 100 million AST nodes and fed it directly into the interpreter (the parser and pretty printer are not involved).
This benchmark is not very realistic: <em>all it does</em> is generate and then immediately run one enormous program.
Some caveats include:</p>

<ul>
  <li>I <a href="https://github.com/sampsyo/flatcalc/blob/2703833615dec76cec4e71419e4073e5bc69dcb0/src/main.rs#L42">reserved enough space</a> in the <code>Vec&lt;Expr&gt;</code> to hold the whole program; in the real world, sizing your arena requires more guesswork.</li>
  <li>I expect this microbenchmark to over-emphasize the performance advantages of cheap allocation and deallocation, because it does very little other work.</li>
  <li>I expect it to under-emphasize the impact of locality, because the program is so big that only a tiny fraction of it will fit the CPU cache at a time.</li>
</ul>

<p>Still, maybe we can learn something.</p>

<figure>
<img src="https://www.cs.cornell.edu/~asampson/media/flattening/standard.png" alt="bar chart comparing the execution time of our normal and flat (and extra-flat) interpreters">
</figure>

<p>I used <a href="https://github.com/sharkdp/hyperfine">Hyperfine</a> to compare the average running time over 10 executions on my laptop.<sup id="fnref:setup" role="doc-noteref"><a href="#fn:setup" rel="footnote">3</a></sup>
Here’s a graph of the running times (please ignore the “extra-flat” bar; we’ll cover that next).
The plot’s error bars show the standard deviation over the 10 runs.
In this experiment, the normal version took 3.1 seconds and the flattened version took 1.3 seconds—a 2.4× speedup.
Not bad for such a straightforward code change!</p>

<p>Of that 2.4× performance advantage, I was curious to know how much comes from each of the four potential advantages I mentioned above.
Unfortunately, I don’t know how to isolate most of these effects—but #4, cheaper deallocation, is especially enticing to isolate.
Since our interpreter is so simple, it seems silly that we’re spending <em>any</em> time on freeing our <code>Expr</code>s after execution finishes—the program is about to shut down anyway, so leaking that memory is completely harmless.</p>

<figure>
<img src="https://www.cs.cornell.edu/~asampson/media/flattening/nofree.png" alt="bar chart comparing versions of our interpreters with and without deallocation">
</figure>

<p>So let’s build versions of both of our interpreters that skip deallocation altogether<sup id="fnref:forget" role="doc-noteref"><a href="#fn:forget" rel="footnote">4</a></sup> and see how much time they save.
Unsurprisingly, the “no-free” version of the flattened interpreter takes about the same amount of time as the standard version, suggesting that it doesn’t spend much time on deallocation anyway.
For the normal interpreter, however, skipping deallocation takes the running time from 3.1 to 1.9 seconds—it was spending around 38% of its time just on freeing memory!</p>

<p>Even comparing the “no-free” versions head-to-head, however, the flattened interpreter is still 1.5× faster than the normal one.
So even if you don’t care about deallocation, the other performance ingredients, like locality and cheap allocation, still have measurable effects.</p>

<h2 id="bonus-exploiting-the-flat-representation">Bonus: Exploiting the Flat Representation</h2>

<p>So far, flattening has happened entirely “under the hood”:
arenas and integer offsets serve as drop-in replacements for normal allocation and pointers.
What could we do if we broke this abstraction layer—if we exploited stuff about the flattened representation that <em>isn’t</em> true about normal AST style?</p>

<figure>
<img src="https://www.cs.cornell.edu/~asampson/media/flattening/flat.png" alt="that same flat AST, yet again">
</figure>

<p>The idea is to build a third kind of interpreter that exploits an extra fact about <code>ExprPool</code>s that arises from the way we built it up.
Because <code>Expr</code>s are immutable, we have to construct trees of them “bottom-up”:
we have to create all child <code>Expr</code>s before we can construct their parent.
If we build the expression <code>a * b</code>, <code>a</code> and <code>b</code> must appear earlier in their <code>ExprPool</code> than the <code>*</code> that refers to them.
Let’s bring that doodle back again: visually, you can imagine that reference arrows always go <em>backward</em> in the array, and data always flows <em>forward</em>.</p>

<p>Let’s write <a href="https://github.com/sampsyo/flatcalc/blob/2703833615dec76cec4e71419e4073e5bc69dcb0/src/main.rs#L100-L124">a new interpreter</a> that exploits this invariant.
Instead of starting at the root of the tree and recursively evaluating each child, we can start at the beginning of the <code>ExprPool</code> and scan from left to right.
This iteration is guaranteed to visit parents after children, so we can be sure that the results for subexpressions will be ready when we need them.
Here’s <a href="https://github.com/sampsyo/flatcalc/blob/2703833615dec76cec4e71419e4073e5bc69dcb0/src/main.rs#L100-L124">the whole thing</a>:</p>

<div><pre><code><span>fn</span> <span>flat_interp</span><span>(</span><span>self</span><span>,</span> <span>root</span><span>:</span> <span>ExprRef</span><span>)</span> <span>-&gt;</span> <span>i64</span> <span>{</span>
    <span>let</span> <span>mut</span> <span>state</span><span>:</span> <span>Vec</span><span>&lt;</span><span>i64</span><span>&gt;</span> <span>=</span> <span>vec!</span><span>[</span><span>0</span><span>;</span> <span>self</span><span>.0</span><span>.len</span><span>()];</span>
    <span>for</span> <span>(</span><span>i</span><span>,</span> <span>expr</span><span>)</span> <span>in</span> <span>self</span><span>.0</span><span>.into_iter</span><span>()</span><span>.enumerate</span><span>()</span> <span>{</span>
        <span>let</span> <span>res</span> <span>=</span> <span>match</span> <span>expr</span> <span>{</span>
            <span>Expr</span><span>::</span><span>Binary</span><span>(</span><span>op</span><span>,</span> <span>lhs</span><span>,</span> <span>rhs</span><span>)</span> <span>=&gt;</span> <span>{</span>
                <span>let</span> <span>lhs</span> <span>=</span> <span>state</span><span>[</span><span>lhs</span><span>.0</span> <span>as</span> <span>usize</span><span>];</span>
                <span>let</span> <span>rhs</span> <span>=</span> <span>state</span><span>[</span><span>rhs</span><span>.0</span> <span>as</span> <span>usize</span><span>];</span>
                <span>match</span> <span>op</span> <span>{</span>
                    <span>BinOp</span><span>::</span><span>Add</span> <span>=&gt;</span> <span>lhs</span><span>.wrapping_add</span><span>(</span><span>rhs</span><span>),</span>
                    <span>BinOp</span><span>::</span><span>Sub</span> <span>=&gt;</span> <span>lhs</span><span>.wrapping_sub</span><span>(</span><span>rhs</span><span>),</span>
                    <span>BinOp</span><span>::</span><span>Mul</span> <span>=&gt;</span> <span>lhs</span><span>.wrapping_mul</span><span>(</span><span>rhs</span><span>),</span>
                    <span>BinOp</span><span>::</span><span>Div</span> <span>=&gt;</span> <span>lhs</span><span>.checked_div</span><span>(</span><span>rhs</span><span>)</span><span>.unwrap_or</span><span>(</span><span>0</span><span>),</span>
                <span>}</span>
            <span>}</span>
            <span>Expr</span><span>::</span><span>Literal</span><span>(</span><span>num</span><span>)</span> <span>=&gt;</span> <span>num</span><span>,</span>
        <span>};</span>
        <span>state</span><span>[</span><span>i</span><span>]</span> <span>=</span> <span>res</span><span>;</span>
    <span>}</span>
    <span>state</span><span>[</span><span>root</span><span>.0</span> <span>as</span> <span>usize</span><span>]</span>
<span>}</span>
</code></pre></div>

<p>We use a dense <code>state</code> table to hold one result value per <code>Expr</code>.
The <code>state[i] = res</code> line fills this vector up whenever we finish an expression.
Critically, there’s no recursion—binary expressions can get the value of their subexpressions by looking them up directly in <code>state</code>.
At the end, when <code>state</code> is completely full of results, all we need to do is return the one corresponding to the requested expression, <code>root</code>.</p>

<p>This “extra-flat” interpreter has two potential performance advantages over the recursive interpreter:
there’s no stack bookkeeping for the recursive calls,
and the linear traversal of the <code>ExprPool</code> could be good for locality.
On the other hand, it has to randomly access a really big <code>state</code> vector, which could be bad for locality.</p>

<figure>
<img src="https://www.cs.cornell.edu/~asampson/media/flattening/standard.png" alt="the same bar chart comparing the execution time for normal, flat, and extra-flat interpreters">
</figure>

<p>To see if it wins overall, let’s return to our bar chart from earlier.
The extra-flat interpreter takes 1.2 seconds, compared to 1.3 seconds for the recursive interpreter for the flat AST.
That’s marginal compared to how much better flattening does on its own than the pointer-based version,
but an 8.2% performance improvement ain’t nothing.</p>

<p>My favorite observation about this technique, due to <a href="https://old.reddit.com/r/ProgrammingLanguages/comments/mrifdr/treewalking_interpreters_and_cachelocality/gumsi2v/">a Reddit comment</a> by <a href="https://craftinginterpreters.com/">Bob Nystrom</a>, is that it essentially reinvents the idea of a <a href="https://en.wikipedia.org/wiki/Bytecode">bytecode</a> interpreter.
The <code>Expr</code> structs are bytecode instructions, and they contain variable references encoded as <code>u32</code>s.
You could make this interpreter even better by swapping out our simple <code>state</code> table for some kind of stack, and then it would <em>really</em> be no different from a bytecode interpreter you might design from first principles.
I just think it’s pretty nifty that “merely” changing our AST data structure led us directly from the land of tree walking to the land of bytecode.</p>

<h2 id="further-reading">Further Reading</h2>

<p>I <a href="https://discuss.systems/@adrian/109990979464062464">asked on Mastodon</a> a while back for pointers to other writing about data structure flattening,
and folks really came through (thanks, everybody!).
Here are some other places it came up in a compilers context:</p>

<ul>
  <li>Mike Pall <a href="http://lua-users.org/lists/lua-l/2009-11/msg00089.html">attributes some of LuaJIT’s performance</a> to its “linear, pointer-free IR.” It’s pointer-free because it’s flattened.</li>
  <li>Concordantly, <a href="https://blog.nelhage.com/post/why-sorbet-is-fast/">a blog post explaining the performance of the Sorbet type-checker for Ruby</a> extols the virtues of using packed arrays and replacing 64-bit pointers with 32-bit indices.</li>
  <li>The Oil shell project has a <a href="https://github.com/oilshell/oil/wiki/Compact-AST-Representation">big collection of links</a> all about “compact AST representation,” much of which boils down to flattening.</li>
</ul>

<p>Beyond just language implementation, similar concepts show up in other performance-oriented domains.
I admit that I understand this stuff less, especially the things from the world of video games:</p>

<ul>
  <li><a href="http://iu-parfunc.github.io/gibbon/">A line of work</a> from Purdue and Indiana is about compiling programs to operate directly on serialized data. <a href="https://drops.dagstuhl.de/opus/volltexte/2017/7273/pdf/LIPIcs-ECOOP-2017-26.pdf">Gibbon</a> in particular is pretty much a translator from “normal”-looking code to flattened implementations.</li>
  <li>Flattening-like ideas appear a lot in <em>data-oriented design</em>, a broadly defined concept that I only partially understand. For example, <a href="https://andrewkelley.me/">Andrew Kelley</a> argues in <a href="https://vimeo.com/649009599#t=850s">a talk on the topic</a> for using indices in place of pointers.</li>
  <li>Check out this <a href="https://manishearth.github.io/blog/2021/03/15/arenas-in-rust/">overview of arena libraries in Rust</a> and its discussion of the ergonomics of arena-related lifetimes.</li>
  <li>Here’s <a href="https://floooh.github.io/2018/06/17/handles-vs-pointers.html">a post comparing handles vs. pointers in game development</a> that advocates for packing homogeneously typed objects into arrays and using indices to refer to them.</li>
  <li>Similar ideas show up in <a href="https://en.wikipedia.org/wiki/Entity_component_system"><em>entity-component systems</em> (ECS)</a>, a big idea from game development that I also don’t completely understand. <a href="https://ajmmertens.medium.com/building-an-ecs-2-archetypes-and-vectorization-fe21690805f9">This post</a> covers many of the same locality-related themes as we did above.</li>
</ul>

<p>After I published this post, many people pointed me toward <a href="https://recursion.wtf/posts/rust_schemes/">a post from last year by Inanna Malick</a> that shows the same technique applied to same kind of toy “calculator” language implemented in Rust.
That post also uses <em>recursion schemes</em>, an elegant idea from the Haskell world that helps abstract over different concrete representations.
I highly recommend checking that post out.</p>



</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tree-Structured Concurrency (124 pts)]]></title>
            <link>https://blog.yoshuawuyts.com/tree-structured-concurrency/</link>
            <guid>36559030</guid>
            <pubDate>Sun, 02 Jul 2023 07:04:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.yoshuawuyts.com/tree-structured-concurrency/">https://blog.yoshuawuyts.com/tree-structured-concurrency/</a>, See on <a href="https://news.ycombinator.com/item?id=36559030">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
    <div itemprop="articleBody" id="markdown">
      <h2 itemprop="headline">
        Tree-Structured Concurrency<br>— 2023-07-01
      </h2>
     
          <ol>
          
              <li>
                  <a href="https://blog.yoshuawuyts.com/tree-structured-concurrency/#what-is-structured-concurrency">what is structured concurrency?</a>
                  
              </li>
          
              <li>
                  <a href="https://blog.yoshuawuyts.com/tree-structured-concurrency/#unstructured-concurrency-an-example">unstructured concurrency: an example</a>
                  
              </li>
          
              <li>
                  <a href="https://blog.yoshuawuyts.com/tree-structured-concurrency/#structured-concurrency-an-example">structured concurrency: an example</a>
                  
              </li>
          
              <li>
                  <a href="https://blog.yoshuawuyts.com/tree-structured-concurrency/#what-s-the-worst-that-can-happen">what's the worst that can happen?</a>
                  
              </li>
          
              <li>
                  <a href="https://blog.yoshuawuyts.com/tree-structured-concurrency/#applying-structured-concurrency-to-your-programs">applying structured concurrency to your programs</a>
                  
              </li>
          
              <li>
                  <a href="https://blog.yoshuawuyts.com/tree-structured-concurrency/#pattern-managed-background-tasks">pattern: managed background tasks</a>
                  
              </li>
          
              <li>
                  <a href="https://blog.yoshuawuyts.com/tree-structured-concurrency/#guaranteeing-structure">guaranteeing structure</a>
                  
              </li>
          
              <li>
                  <a href="https://blog.yoshuawuyts.com/tree-structured-concurrency/#conclusion">conclusion</a>
                  
              </li>
          
          </ol>
      
      <p>For a while now I've been trying to find a good way to explain what structured
concurrency is, and how it applies to Rust. I've come up with zingers such as:
<em>"Structured concurrency is structured programming as applied to concurrent
control-flow primitives"</em>. But that requires me to start explaining what
structured programming is, and suddenly I find myself 2000 words deep into a
concept which seems natural to most people writing programs today <sup><a href="#dijkstra">1</a></sup>.</p>
<p>Instead I want to try something different. In this post I want to provide you
with a practical introduction to structured concurrency. I will do my best to
explain what it is, why it's relevant, and how you can start applying it to your
rust projects today. Structured concurrency is a lens I use in almost all of my
reasoning about async Rust, and I think it might help others too. So let's dive in.</p>
<p><em>This post assumes some familiarity with <a href="https://blog.yoshuawuyts.com/why-async-rust/">async Rust</a> and <a href="https://blog.yoshuawuyts.com/async-cancellation-1/">async cancellation</a>.
If you aren't already, it might be helpful to skim through the earlier posts on
the topic.</em></p>


<p>Structured concurrency is a property of your program. It's not just any
structure, the structure of the program is guaranteed to be a <a href="https://blog.yoshuawuyts.com/graphs/#trees">tree</a> regardless
of how much concurrency is going on internally <sup><a href="#academia">2</a></sup>. A good way to think
about it is that if you could plot the live call-graph of your program as a
series of relationships it would neatly form a tree. No cycles <sup><a href="#recursion">3</a></sup>. No
dangling nodes. Just a single tree.</p>


<figure>
    <img src="https://blog.yoshuawuyts.com/tree-structured-concurrency/tree_plain.jpg" alt="tree">
    <figcaption>
        Fig 1. The arrows point from parent nodes to
        child nodes. It has no cycles. A parent can have multiple children. But
        a child always has a single parent - except for the root node.
    </figcaption>
</figure>
<p>And this structure, at least in async Rust, provides three key properties:</p>
<ul>
<li><strong>Cancellation propagation:</strong> When you drop a future to cancel it, it's
guaranteed that all futures underneath it are also cancelled.</li>
<li><strong>Error propagation:</strong> When an error is created somewhere down in the
call-graph, it can always be propagated up to the callers until there is a
caller who is ready to handle it.</li>
<li><strong>Ordering of operations:</strong> When a function returns, you know it is done doing
work. No surprises that things are still happening long after you thought the
function had completed.</li>
</ul>
<p>These properties put together lead to something called a <strong>"black box model of
execution"</strong>: under a structured model of computing you don't need to know
anything about the inner workings of the functions you're calling, because their
behavior is guaranteed. A function will return when it's done, will cancel all
work when you ask it to, and you'll always receive an error if there is something
which needs handling. And as a result code under this model is <strong>composable</strong>.</p>
<figure>
    <img src="https://blog.yoshuawuyts.com/tree-structured-concurrency/tree_flow.jpg" title="figure 2" alt="tree">
    <figcaption>
        Fig 2. Under structured concurrency every future has a parent,
        cancellation flows downward, and errors flow upward. When a future
        returns, you can be sure it's done doing work. 
    </figcaption>
</figure>
<p>If your model of concurrency is <em>unstructured</em>, then you don't have these
guarantees. So in order to guarantee that say, cancellation is correctly
propagated, you'll need to inspect the inner workings of every function you're
calling. Code under this model is not composable, and requires manual checks and
bespoke solutions. This is both labor-intensive and prone to errors.</p>
<h2 id="unstructured-concurrency-an-example">Unstructured concurrency: an example</h2>
<p>Let's start by implementing a classic concurrency pattern: "race". But rather
than using <em>structured</em> primitives, we can use the staples of unstructured
programming: the venerable <code>task::spawn</code> and <code>channel</code>. The way "race" works is
it takes two futures, and we try and get the output of whichever one completes
first is whose message we read. We could write it something like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span>use </span><span>async_std::{channel, task};
</span><span>
</span><span>let </span><span>(sender0, receiver) = channel::bounded(</span><span>1</span><span>);
</span><span>
</span><span>let</span><span> sender1 = sender0.</span><span>clone</span><span>();
</span><span>task::spawn(async </span><span>move </span><span>{         </span><span>// 👈 Task "C"
</span><span>    task::sleep(Duration::from_millis(</span><span>100</span><span>));
</span><span>    sender1.</span><span>send</span><span>("</span><span>first</span><span>").await;
</span><span>});
</span><span>
</span><span>task::spawn(async </span><span>move </span><span>{         </span><span>// 👈 Task "B"
</span><span>    task::sleep(Duration::from_millis(</span><span>100</span><span>));
</span><span>    sender0.</span><span>send</span><span>("</span><span>second</span><span>").await;
</span><span>});
</span><span>
</span><span>let</span><span> msg = receiver.</span><span>recv</span><span>().await; </span><span>// 👈 Future "A"
</span><span>println!("</span><span>{msg}</span><span>");
</span></code></pre>
<p>While this implements "race" semantics correctly, it doesn't handle
cancellation. If one of the branches completes, we'd ideally like to cancel the
other. And if the containing function is cancelled, both computations should be
cancelled. Because of how we've structured the program neither task is anchored
to a parent future, and so we can't cancel either computation directly. Instead
the solution would be to come up with some design using more channels, anchor
the handles - or we could instead rewrite this using structured primitives.</p>
<figure>
    <img src="https://blog.yoshuawuyts.com/tree-structured-concurrency/race_tasks.jpg" title="figure 3" alt="tree">
    <figcaption>
        Fig 3. You can create a "race" operation by combining tasks and channels. Data
        can flow out of the tasks to the caller. But because the tasks aren't rooted
        in a parent task, cancellation doesn't propagate.
    </figcaption>
</figure>
<h2 id="structured-concurrency-an-example">Structured concurrency: an example</h2>
<p>We can rewrite the example above using structured primitives instead. Rather
than DIY-ing our own "race" implementation using tasks and channels, we should
instead be using a "race" primitive which implements those semantics for us -
and correctly handles cancellation. Using the <a href="http://docs.rs/futures-concurrency">futures-concurrency</a> library we
could do that as follows:</p>
<pre data-lang="rust"><code data-lang="rust"><span>use </span><span>futures_concurrency::prelude::*;
</span><span>use </span><span>async_std::task;
</span><span>
</span><span>let</span><span> c = async {                   </span><span>// 👈 Future "C"
</span><span>    task::sleep(Duration::from_millis(</span><span>100</span><span>));
</span><span>    "</span><span>first</span><span>"
</span><span>};
</span><span>
</span><span>let</span><span> b = async {                   </span><span>// 👈 Future "B"
</span><span>    task::sleep(Duration::from_millis(</span><span>100</span><span>));
</span><span>    "</span><span>second</span><span>"
</span><span>};
</span><span>
</span><span>let</span><span> msg = (c, b).</span><span>race</span><span>().await;    </span><span>// 👈 Future "A"
</span><span>println!("</span><span>{msg}</span><span>");
</span></code></pre>
<p>When one future completes here, the other future is cancelled. And should the
<code>Race</code> future be dropped, then both futures are cancelled. Both futures have a
parent future when executing. Cancellation propagates downwards. And while there
are no errors in this example, if we were working with fallible operations then
early returns would cause the future to complete early - and errors would be
handled as expected.</p>
<figure>
    <img src="https://blog.yoshuawuyts.com/tree-structured-concurrency/race_futures.jpg" title="figure 4" alt="tree">
    <figcaption>
        Fig 4. By using a structured "race" primitive all child futures are rooted in
        a parent future. Which allows both cancellation and errors to propagate. And
        the operation won't return until all child futures have dropped.
    </figcaption>
</figure>
<p>So far we've looked at just the "race" operation, which encodes: <em>"Wait for the
first future to complete, then cancel the other"</em>. But other async concurrency
operations exist as well, such as:</p>
<ul>
<li><strong>join</strong>: wait for all futures to complete.</li>
<li><strong>race_ok</strong>: wait for the first future to complete which returns <code>Ok</code>.</li>
<li><strong>try_join</strong>: wait for all futures to complete, or return early if there is an error.</li>
<li><strong>merge</strong>: wait for all futures to complete, and yield items from a stream as
soon as they're ready.</li>
</ul>
<p>There are a few more such as "zip", "unzip", and "chain" - as well as dynamic
concurrency primitives such as "task group", "fallible task group", and more.
The point is that the set of concurrency <em>primitives</em> is bounded. But they can
be recombined in ways that makes it possible express any form of concurrency you
want. Not unlike how if a programming language supports branching, loops, and
function calls you can encode just about any control-flow logic you want,-
without ever needing to use "goto".</p>
<h2 id="what-s-the-worst-that-can-happen">What's the worst that can happen?</h2>
<p>People sometimes ask: What's the worst that can happen when you don't have
structured concurrency? There are a number of bad outcomes possible, including
but not limited to: data loss, data corruption, and memory leaks.</p>
<p>While Rust guards against <em>data races</em> which fall under the category of "memory
safety", Rust can't protect you from logic bugs. For example: if you execute a
<code>write</code> operation inside of a task whose handle isn't joined, then you'll need
to find some alternate mechanism to guarantee the ordering of that operation in
relation to the rest of the program. If you get that wrong you might
accidentally write to a closed resource and lose data. Or perform an
out-of-order write, and accidentally corrupt a resource <sup><a href="#sql">4</a></sup>. These kinds of bugs
are not in the same class as memory safety bugs. But they are nonetheless
serious, and they can be mitigated through principled API design.</p>

<h2 id="applying-structured-concurrency-to-your-programs">Applying structured concurrency to your programs</h2>
<p><strong>task::spawn</strong></p>
<p>When using or authoring async APIs in Rust, you should ask yourself the following questions to ensure structured concurrency:</p>
<ol>
<li><strong>Cancellation propagation</strong>: If this future or function is dropped, will cancellation propagate to all child futures?</li>
<li><strong>Error propagation</strong>: If an error happens anywhere in this future, can we either handle it directly or surface it to the caller?</li>
<li><strong>Ordering of operations</strong>: When this function returns, will any more work continue to happen in the background?</li>
</ol>
<p>If all of these properties are true, then once the function exits it's done
executing and you're good. This however leads us to a major issue in today's
async ecosystem: neither async-std nor tokio provide a <code>spawn</code> function which is
structured.  If you drop a task handle the task isn't cancelled, but instead it's
detached and will continue to run in the background. This means that
cancellation doesn't automatically propagate across task boundaries, causing it
to be unstructured.</p>
<p>The <a href="https://docs.rs/smol/latest/smol/struct.Task.html">smol</a> library gets closer
though. It has a task implementation which gets us closer to "cancel on
drop"-semantics out of the box. Though it doesn't get us all the way yet because
it doesn't guarantee an ordering of operations. When a smol <code>Task</code> is dropped
the task isn't guaranteed to have been cancelled, all it guarantees is that the
task will be cancelled at some point in the future.</p>
<p><strong>async drop</strong></p>
<p>Which brings us to the biggest piece missing from async Rust's structured
concurrency story: the lack of async Drop in the language. Smol's
tasks have an async
<a href="https://docs.rs/smol/latest/smol/struct.Task.html#method.cancel">cancel</a> method
which only resolves once the task has successfully been cancelled. Ideally we
could call this method in the destructor and wait for it. But in order to do
that today we'd need to block the thread, and that can lead to throughput
issues. No, in practice what we really need for this to work well is async
destructors <sup><a href="#flush">5</a></sup>.</p>

<p><strong>what can you do today?</strong></p>
<p>But while we can't yet trivially fulfill all requirements for async structured
concurrency for async tasks, not all hope is lost. Without async Drop we can
already achieve 2/3 of the requirements for task spawning today. And if you're
using a runtime other than smol, <a href="https://github.com/yoshuawuyts/tasky/blob/fb8a8e7040c7cd68a5e38b895bbd032ded578a3f/src/lib.rs#L41-L75">adapting the spawn method</a> to work like
smol's does is not too much work. But most concurrency doesn't need tasks
because it isn't dynamic. For that you can take a look at the
<a href="http://docs.rs/futures-concurrency">futures-concurrency</a> library which implements composable primitives for
structured concurrency.</p>
<p>If you want to adopt structured concurrency in your codebase today, you can
start by adopting it for non-task-based concurrency. And for task-based
concurrency you can adopt the smol model of task spawning to benefit from most
of the benefits of structured concurrency today. And eventually the hope is we
can add some form of async Drop to the language to close out the remaining
holes.</p>
<h2 id="pattern-managed-background-tasks">Pattern: managed background tasks</h2>
<p>People frequently ask how they can implement "background tasks" under structured
concurrency. This is used in scenarios such as an HTTP request handler which
also wants to submit a piece of telemetry. Rather than blocking sending the
response on the telemetry, it spawns a "background task" to submit the telemetry
in the background, and immediately returns from the request. This can look
something like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span>let mut</span><span> app = tide::new();
</span><span>app.</span><span>at</span><span>("</span><span>/</span><span>").</span><span>post</span><span>(|_| async </span><span>move </span><span>{
</span><span>    task::spawn(async {  </span><span>// 👈 Spawns a background task…
</span><span>        </span><span>let</span><span> _res = </span><span>send_telemetry</span><span>(data, more_data).await;
</span><span>        </span><span>// … what if `res` is an `Err`? How should we handle errors here?
</span><span>    });
</span><span>    Ok("</span><span>hello world</span><span>")   </span><span>// 👈 …and returns immediately after.
</span><span>});
</span><span>app.</span><span>listen</span><span>("</span><span>127.0.0.1:8080</span><span>").await?;
</span></code></pre>
<p>The phrase "background task" seems polite and unobtrusive. But from a structured
perspective it represents a computation without a parent - it is a <em>dangling
task</em>. The core of the pattern we're dealing with is that we want to create a
computation which outlives the lifetime of the request handler. We can resolve
this by rather than creating a dangling task to submit it to a task queue or
task group which outlives the request handler. 
Unlike a dangling task, a <em>task queue</em> or <em>task group</em> preserves structured
concurrency. Where a dangling task doesn't have a parent future and becomes
unreachable, using a task queue we transmit the ownership of a future to a
different object which outlives the current more ephemeral scope.</p>
<p>I've heard people make the argument before that <code>task::spawn</code> is perfectly
structured, as long as you think of it as spawning on some sort of unreachable,
global task pool. But the question shouldn't be whether tasks are spawned on a task
pool, but what the relationship is of those tasks to the rest of the program.
Because we cannot cancel and recreate an unreachable task pool. Nor can we
receive errors from this pool, or wait for all tasks in it to complete. It
doesn't provide the properties we want from structured concurrency - so we
shouldn't consider it structured.</p>
<p>I don't feel like the ecosystem has any great solutions to this yet - in part
limited because we want <a href="https://tmandry.gitlab.io/blog/posts/2023-03-01-scoped-tasks/">"scoped
tasks"</a> which
basically require <a href="https://blog.yoshuawuyts.com/linearity-and-control/">linear
destructors</a> to function.
But <a href="https://docs.rs/async-task-group/latest/async_task_group/">other experiments
exist</a> so we can use
that plus channels to put something together which gives us what we want:</p>
<p><em>⚠️ Note: This code is not considered "good" by the author, and is merely used as an
example to show that this is possible to write today. More design work is
necessary to make this ergonomic ⚠️</em></p>
<pre data-lang="rust"><code data-lang="rust"><span>// Create a channel to send and receive futures over.
</span><span>let </span><span>(sender, receiver) = async_channel::unbounded();
</span><span>
</span><span>// Create a structured task group at the top-level, next to the HTTP server
</span><span>//
</span><span>// If any errors are returned by the spawned tasks, all active tasks are cancelled
</span><span>// and the error is returned by the handle.
</span><span>let</span><span> telemetry_handle = async_task_group::group(|</span><span>group</span><span>| async </span><span>move </span><span>{
</span><span>    </span><span>while let </span><span>Some(telemetry_future) = receiver.</span><span>next</span><span>().await {
</span><span>        group.</span><span>spawn</span><span>(async </span><span>move </span><span>{
</span><span>            telemetry_future.await?;  </span><span>// 👈 Propagate errors upwards
</span><span>            Ok(())
</span><span>        });
</span><span>    }
</span><span>    Ok(group)
</span><span>});
</span><span>
</span><span>// Create an application state for our HTTP server
</span><span>#[</span><span>derive</span><span>(Clone)]
</span><span>struct </span><span>State {
</span><span>    </span><span>sender</span><span>: async_channel::Sender&lt;impl Future&lt;Result&lt;_&gt;&gt;&gt;,
</span><span>}
</span><span>
</span><span>// Create the HTTP server
</span><span>let mut</span><span> app = tide::new();
</span><span>app.</span><span>at</span><span>("</span><span>/</span><span>").</span><span>post</span><span>(|</span><span>req</span><span>: Request&lt;State&gt;| async </span><span>move </span><span>{
</span><span>    state.sender.</span><span>send</span><span>(async {   </span><span>// 👈 Sends a future to the handler loop…
</span><span>        </span><span>send_telemetry</span><span>(data, more_data).await?;
</span><span>        Ok(())
</span><span>    }).await;
</span><span>    Ok("</span><span>hello world</span><span>")           </span><span>// 👈 …and returns immediately after.
</span><span>});
</span><span>
</span><span>// Concurrently execute both the HTTP server and the telemetry handler,
</span><span>// and if either one stops working the other stops too.
</span><span>(app.</span><span>listen</span><span>("</span><span>127.0.0.1:8080</span><span>"), telemetry_handle).</span><span>race</span><span>().await?;
</span></code></pre>
<p>Like I said: we need to do a lot more API work to be able to rival the
convenience of just firing off a dangling task. But what we lack for in API
convenience, we make up for in semantics. Unlike our earlier example this will
correctly propagates cancellation and errors, and every executing future is
owned by a parent future. We could even take things a step further and implement
things like retry-handlers with error quotas on top of this to create a more
resilient system. But hopefully this is enough already to get the idea across of
what we could be doing with this.</p>
<h2 id="guaranteeing-structure">Guaranteeing Structure</h2>
<p>I've been asking myself for a while now: <em>"Would it be possible for Rust to
enforce structured concurrency in the language and libraries?"</em> I don't believe
this is something we guarantee from the language. But it is something <em>can</em>
guarantee for Rust's library code, and make it so most async code is structured
by default.</p>
<p>The reason why I don't believe it's fundamentally possible to guarantee
structure at the language level is because it's possible to express any kind of
program in Rust, which includes unstructured programs. Futures, channels, and
tasks as they exist today are all just regular library types. If we wanted to
enforce structure from the language, we would need to find a way to disallow the
creation of these libraries - and that seems impossible for a general-purpose
language <sup><a href="#structured-state-machine">6</a></sup>.</p>

<p>Instead it seems more practical to me to adopt tree-structured concurrency as
the model we follow for async Rust. Not as a memory-safety guarantee, but as a
design discipline we apply across all of async Rust. APIs which are unstructured
should not be added to the stdlib. And our tooling should be aware that
unstructured code may exist, so it can flag it when it encounters it.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post I've shown what (tree-)structured concurrency is, why it's
important for correctness, and how you can apply it in your programs. I hope
that by defining structured concurrency in terms of guarantees about propagation
of errors and cancellation, we can create a practical model for people to
reason about async Rust with.</p>
<p>As <a href="https://opensource.googleblog.com/2023/06/rust-fact-vs-fiction-5-insights-from-googles-rust-journey-2022.html">recently reported by
Google</a>,
async Rust is one of the most difficult aspects of Rust to learn. It seems
likely that the lack of structure in async Rust code today did not help. In
async code today neither cancellation nor errors are guaranteed to propagate.
This means that if you want to reliably compose code, you need to have knowledge
of the inner workings of the code you're using. By adopting a (tree-)structured
model of concurrency these properties can instead be guaranteed from the outset,
which in turn would make Async Rust easier to reason about and teach. Because
<em>"If it compiles it works"</em> should apply to async Rust too.</p>
<p><em>Thanks to Iryna Shestak for illustrating and proof-reading this post.</em></p>

    </div>
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Functional Introduction To Computer Science (159 pts)]]></title>
            <link>https://cs.uwaterloo.ca/~plragde/flaneries/FICS/</link>
            <guid>36558759</guid>
            <pubDate>Sun, 02 Jul 2023 06:14:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/">https://cs.uwaterloo.ca/~plragde/flaneries/FICS/</a>, See on <a href="https://news.ycombinator.com/item?id=36558759">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><span>8.1</span></p><div><p><span>&nbsp;&nbsp;</span><span>&nbsp;&nbsp;<span>← prev</span>&nbsp;&nbsp;<span>up</span>&nbsp;&nbsp;<a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Introduction.html" title="forward to &quot;1 Introduction&quot;" data-pltdoc="x">next →</a></span>&nbsp;</p></div><p>(a flânerie by Prabhakar Ragde)</p><p>This work is licensed under a <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.
Please do not post exercise solutions to any public forum
or publicly-accessible software repository.</p><p>This is a complete draft of Part I. For Part II, look <a href="https://cs.uwaterloo.ca/~plragde/flane/FICS2">here</a>.</p><table><tbody><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Introduction.html" data-pltdoc="x">1<span>&nbsp;</span>Introduction</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Introduction.html#%28part._.Required_background%29" data-pltdoc="x">1.1<span>&nbsp;</span>Required background</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Introduction.html#%28part._.Design_philosophy%29" data-pltdoc="x">1.2<span>&nbsp;</span>Design philosophy</a></p></td></tr><tr><td></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html" data-pltdoc="x">2<span>&nbsp;</span>Starting out with Racket</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html#%28part._.Functions_in_mathematics%29" data-pltdoc="x">2.1<span>&nbsp;</span>Functions in mathematics</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html#%28part._.Function_application_in_.Racket%29" data-pltdoc="x">2.2<span>&nbsp;</span>Function application in Racket</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html#%28part._.Dr.Racket_s_.Interactions_window%29" data-pltdoc="x">2.3<span>&nbsp;</span>DrRacket’s Interactions window</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html#%28part._.Function_definitions_in_.Racket%29" data-pltdoc="x">2.4<span>&nbsp;</span>Function definitions in Racket</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html#%28part._.Dr.Racket_s_.Definitions_window%29" data-pltdoc="x">2.5<span>&nbsp;</span>DrRacket’s Definitions window</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html#%28part._.More_types_of_data%29" data-pltdoc="x">2.6<span>&nbsp;</span>More types of data</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html#%28part._.Conditional_expressions%29" data-pltdoc="x">2.7<span>&nbsp;</span>Conditional expressions</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html#%28part._.The_design_recipe%29" data-pltdoc="x">2.8<span>&nbsp;</span>The design recipe</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Starting_out_with_Racket.html#%28part._.An_extended_example%29" data-pltdoc="x">2.9<span>&nbsp;</span>An extended example</a></p></td></tr><tr><td></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Syntax_and_semantics.html" data-pltdoc="x">3<span>&nbsp;</span>Syntax and semantics</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Syntax_and_semantics.html#%28part._.Syntax_and_grammar%29" data-pltdoc="x">3.1<span>&nbsp;</span>Syntax and grammar</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Syntax_and_semantics.html#%28part._.A_semantic_model%29" data-pltdoc="x">3.2<span>&nbsp;</span>A semantic model</a></p></td></tr><tr><td></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Structures.html" data-pltdoc="x">4<span>&nbsp;</span>Structures</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Structures.html#%28part._.Struct.Syn.Sem%29" data-pltdoc="x">4.1<span>&nbsp;</span>Syntax and semantics</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Structures.html#%28part._.Simulating_natural_numbers%29" data-pltdoc="x">4.2<span>&nbsp;</span>Simulating natural numbers</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Structures.html#%28part._.Correctness%29" data-pltdoc="x">4.3<span>&nbsp;</span>Correctness</a></p></td></tr><tr><td></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Lists.html" data-pltdoc="x">5<span>&nbsp;</span>Lists</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Lists.html#%28part._.Sequences%29" data-pltdoc="x">5.1<span>&nbsp;</span>Sequences</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Lists.html#%28part._.Lists_in_.Racket%29" data-pltdoc="x">5.2<span>&nbsp;</span>Lists in Racket</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Lists.html#%28part._.Sets%29" data-pltdoc="x">5.3<span>&nbsp;</span>Sets</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Lists.html#%28part._.Representing_sets_using_ordered_lists%29" data-pltdoc="x">5.4<span>&nbsp;</span>Representing sets using ordered lists</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Lists.html#%28part._.List_abbreviations%29" data-pltdoc="x">5.5<span>&nbsp;</span>List abbreviations</a></p></td></tr><tr><td></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Functional_Abstraction.html" data-pltdoc="x">6<span>&nbsp;</span>Functional Abstraction</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Functional_Abstraction.html#%28part._.A_first_example%29" data-pltdoc="x">6.1<span>&nbsp;</span>A first example</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Functional_Abstraction.html#%28part._.More_functional_abstraction%29" data-pltdoc="x">6.2<span>&nbsp;</span>More functional abstraction</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Functional_Abstraction.html#%28part._.Functions_are_values%29" data-pltdoc="x">6.3<span>&nbsp;</span>Functions are values</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Functional_Abstraction.html#%28part._.Syntax_and_semantics_of_.I.S.L_%29" data-pltdoc="x">6.4<span>&nbsp;</span>Syntax and semantics of ISL+</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Functional_Abstraction.html#%28part._.Local_bindings_and_scope%29" data-pltdoc="x">6.5<span>&nbsp;</span>Local bindings and scope</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Functional_Abstraction.html#%28part._.Still_more_functional_abstraction%29" data-pltdoc="x">6.6<span>&nbsp;</span>Still more functional abstraction</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Functional_Abstraction.html#%28part._.Simplifying_.Racket%29" data-pltdoc="x">6.7<span>&nbsp;</span>Simplifying Racket</a></p></td></tr><tr><td></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Efficient_Representations.html" data-pltdoc="x">7<span>&nbsp;</span>Efficient Representations</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Efficient_Representations.html#%28part._.Unary_representation_reviewed%29" data-pltdoc="x">7.1<span>&nbsp;</span>Unary representation reviewed</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Efficient_Representations.html#%28part._.Binary_representation_introduced%29" data-pltdoc="x">7.2<span>&nbsp;</span>Binary representation introduced</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Efficient_Representations.html#%28part._.Implementing_addition%29" data-pltdoc="x">7.3<span>&nbsp;</span>Implementing addition</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Efficient_Representations.html#%28part._.Space_and_time_analysis%29" data-pltdoc="x">7.4<span>&nbsp;</span>Space and time analysis</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Efficient_Representations.html#%28part._.Representing_integers%29" data-pltdoc="x">7.5<span>&nbsp;</span>Representing integers</a></p></td></tr><tr><td></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Trees.html" data-pltdoc="x">8<span>&nbsp;</span>Trees</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Trees.html#%28part._.From_lists_to_trees%29" data-pltdoc="x">8.1<span>&nbsp;</span>From lists to trees</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Trees.html#%28part._.Braun_trees%29" data-pltdoc="x">8.2<span>&nbsp;</span>Braun trees</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Trees.html#%28part._.Tree-structured_data%29" data-pltdoc="x">8.3<span>&nbsp;</span>Tree-structured data</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Trees.html#%28part._.Binary_search_trees%29" data-pltdoc="x">8.4<span>&nbsp;</span>Binary search trees</a></p></td></tr><tr><td></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Generative_Recursion.html" data-pltdoc="x">9<span>&nbsp;</span>Generative Recursion</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Generative_Recursion.html#%28part._.Greatest_common_divisor%29" data-pltdoc="x">9.1<span>&nbsp;</span>Greatest common divisor</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Generative_Recursion.html#%28part._.Sorting%29" data-pltdoc="x">9.2<span>&nbsp;</span>Sorting</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Generative_Recursion.html#%28part._.Insertion_and_selection_sort%29" data-pltdoc="x">9.2.1<span>&nbsp;</span>Insertion and selection sort</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Generative_Recursion.html#%28part._.Treesort%29" data-pltdoc="x">9.2.2<span>&nbsp;</span>Treesort</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Generative_Recursion.html#%28part._.Quicksort%29" data-pltdoc="x">9.2.3<span>&nbsp;</span>Quicksort</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Generative_Recursion.html#%28part._.Bottom-up_mergesort%29" data-pltdoc="x">9.2.4<span>&nbsp;</span>Bottom-up mergesort</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Generative_Recursion.html#%28part._.Top-down_mergesort%29" data-pltdoc="x">9.2.5<span>&nbsp;</span>Top-down mergesort</a></p></td></tr><tr><td></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Interpreters.html" data-pltdoc="x">10<span>&nbsp;</span>Interpreters</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Interpreters.html#%28part._.Evaluating_arithmetic_expressions%29" data-pltdoc="x">10.1<span>&nbsp;</span>Evaluating arithmetic expressions</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Interpreters.html#%28part._.Adding_local_names%29" data-pltdoc="x">10.2<span>&nbsp;</span>Adding local names</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Interpreters.html#%28part._.Adding_second-class_functions%29" data-pltdoc="x">10.3<span>&nbsp;</span>Adding second-class functions</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Interpreters.html#%28part._.Adding_first-class_functions%29" data-pltdoc="x">10.4<span>&nbsp;</span>Adding first-class functions</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Interpreters.html#%28part._.Interlude__programs_that_don_t_terminate%29" data-pltdoc="x">10.5<span>&nbsp;</span>Interlude: programs that don’t terminate</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Interpreters.html#%28part._.Deferring_substitution%29" data-pltdoc="x">10.6<span>&nbsp;</span>Deferring substitution</a></p></td></tr><tr><td><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Interpreters.html#%28part._.What_s_next_%29" data-pltdoc="x">10.7<span>&nbsp;</span>What’s next?</a></p></td></tr></tbody></table><div><p><span>&nbsp;&nbsp;</span><span>&nbsp;&nbsp;<span>← prev</span>&nbsp;&nbsp;<span>up</span>&nbsp;&nbsp;<a href="https://cs.uwaterloo.ca/~plragde/flaneries/FICS/Introduction.html" title="forward to &quot;1 Introduction&quot;" data-pltdoc="x">next →</a></span>&nbsp;</p></div></div></div>]]></description>
        </item>
    </channel>
</rss>