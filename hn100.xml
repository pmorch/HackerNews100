<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 19 Oct 2024 14:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The long road to lazy preemption in the Linux CPU scheduler (130 pts)]]></title>
            <link>https://lwn.net/SubscriberLink/994322/45aa5211a50bc63a/</link>
            <guid>41886256</guid>
            <pubDate>Sat, 19 Oct 2024 07:29:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/SubscriberLink/994322/45aa5211a50bc63a/">https://lwn.net/SubscriberLink/994322/45aa5211a50bc63a/</a>, See on <a href="https://news.ycombinator.com/item?id=41886256">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<div>
<h3>Welcome to LWN.net</h3>
<p>
The following subscription-only content has been made available to you 
by an LWN subscriber.  Thousands of subscribers depend on LWN for the 
best news from the Linux and free software communities.  If you enjoy this 
article, please consider <a href="https://lwn.net/subscribe/">subscribing to LWN</a>.  Thank you
for visiting LWN.net!
</p></div>
</blockquote>
<p>
The kernel's CPU scheduler currently offers several preemption modes that
implement a range of tradeoffs between system throughput and response time.
Back in September 2023, a <a href="https://lwn.net/Articles/944686/">discussion
on scheduling</a> led to the concept of "lazy preemption", which could
simplify scheduling in the kernel while providing better results.  Things
went quiet for a while, but lazy preemption has returned in the form of <a href="https://lwn.net/ml/all/20241007074609.447006177@infradead.org">this patch series</a>
from Peter Zijlstra.  While the concept appears to work well, there is
still a fair amount of work to be done.
</p><h4>Some review</h4>
<p>
Current kernels have four different modes that regulate when one task can
be preempted in favor of another.  <tt>PREEMPT_NONE</tt>, the simplest
mode, only allows preemption to happen when the running task has exhausted
its time slice.  <tt>PREEMPT_VOLUNTARY</tt> adds a large number of points
within the kernel where preemption can happen if needed.
<tt>PREEMPT_FULL</tt> allows preemption at almost any point except places
in the kernel that prevent it, such as when a spinlock is held.  Finally,
<tt>PREEMPT_RT</tt> prioritizes preemption over most other things, even
making most spinlock-holding code preemptible.
</p><p>
A higher level of preemption enables the system to respond more quickly to
events; whether an event is the movement of a mouse or an "imminent
meltdown" signal from a nuclear reactor, faster response tends to be more
gratifying.  But a higher level of preemption can hurt the overall
throughput of the system; workloads with a lot of long-running,
CPU-intensive tasks tend to benefit from being disturbed as little as
possible.  More frequent preemption can also lead to higher lock
contention.  That is why the different modes exist; the optimal preemption
mode will vary for different workloads.
</p><p>
Most distributions ship kernels built with the <tt>PREEMPT_DYNAMIC</tt>
pseudo-mode, which allows any of the first three modes to be selected at
boot time, with <tt>PREEMPT_VOLUNTARY</tt> being the default.  On systems
with debugfs mounted, the current mode can be read from
<tt>/sys/kernel/debug/sched/preempt</tt>.
</p><p>
<tt>PREEMPT_NONE</tt> and <tt>PREEMPT_VOLUNTARY</tt> do not allow the
arbitrary preemption of code running in the kernel; there are times when
that can lead to excessive latency even in systems where minimal latency is
not prioritized.  This problem is the result of places in the kernel where
a large amount of work can be done; if that work is allowed to run
unchecked, it can disrupt the scheduling of the system as a whole.  To get
around this problem, long-running loops have been sprinkled with calls to
<tt>cond_resched()</tt>, each of which is an additional voluntary
preemption point that is active even in the <tt>PREEMPT_NONE</tt> mode.
There are hundreds of these calls in the kernel.
</p><p>
There are some problems with this approach.  <tt>cond_resched()</tt> is a
form of heuristic that only works in the places where a developer has
thought to put it.  Some calls are surely unnecessary, while there will be
other places in the kernel that could benefit from <tt>cond_resched()</tt>
calls, but do not have them.  The use of <tt>cond_resched()</tt>, at its
core, takes a decision that should be confined to the scheduling code and
spreads it throughout the kernel.  It is, in short, a bit of a hack that
mostly works, but which could be done better.
</p><h4>Doing better</h4>
<p>
The tracking of whether a given task can be preempted at any moment is a
complicated affair that must take into account several variables; see <a href="https://lwn.net/Articles/945422/">this article</a> and <a href="https://lwn.net/Articles/831678/">this article</a> for details.  One of those
variables is a simple flag, <tt>TIF_NEED_RESCHED</tt>, that indicates the
presence of a higher-priority task that is waiting for access to the CPU.
Events such as waking a high-priority task can cause that flag to be set in
whatever task is currently running.  In the absence of this flag, there is
no need for the kernel to consider preempting the current task.
</p><p>
There are various points where the kernel can notice that flag and cause
the currently running task to be preempted.  The scheduler's timer tick is
one example; any time a task returns to user space from a system call is
another.  The completion of an interrupt handler is yet another, but that
check, which can cause preemption to happen any time that interrupts are
enabled, is only enabled in <tt>PREEMPT_FULL</tt> kernels.  A call to
<tt>cond_resched()</tt> will also check that flag and, if it is set, call
into the scheduler to yield the CPU to the other task.
</p><p>
The lazy-preemption patches are simple at their core; they add another
flag, <tt>TIF_NEED_RESCHED_LAZY</tt>, that indicates a need for
rescheduling at some point, but not necessarily right away.  In the lazy
preemption mode (<tt>PREEMPT_LAZY</tt>), most events will set the new flag
rather than <tt>TIF_NEED_RESCHED</tt>.  At points like the return to user
space from the kernel, either flag will lead to a call into the scheduler.
At the voluntary preemption points and in the return-from interrupt path,
though, only <tt>TIF_NEED_RESCHED</tt> is checked.
</p><p>
The result of this change is that, in lazy-preemption mode, most events in
the kernel will not cause the current task to be preempted.  That task
<i>should</i> be preempted eventually, though.  To make that happen, the
kernel's timer-tick handler will check whether
<tt>TIF_NEED_RESCHED_LAZY</tt> is set; if so, <tt>TIF_NEED_RESCHED</tt>
will also be set, possibly causing the running task to be preempted.  Tasks
will generally end up running for something close to their full time slice
unless they give up the CPU voluntarily, which should lead to good
throughput. 
</p><p>
With these changes, the lazy-preemption mode can, like
<tt>PREEMPT_FULL</tt>, run with kernel preemption enabled at (almost) all
times.  Preemption <i>can</i> happen any time that the preemption counter
says that it should.  That allows long-running kernel code to be preempted
whenever other conditions do not prevent it.  It also allows preemption to
happen quickly in those cases where it is truly needed.  For example, 
should a realtime task become runnable, as the result of
handling an interrupt, for example, the <tt>TIF_NEED_RESCHED</tt> flag will
be set, leading to an almost immediate preemption.  There will be no need
to wait for the timer tick in such cases.
</p><p>
Preemption will <i>not</i> happen, though, if only
<tt>TIF_NEED_RESCHED_LAZY</tt> is set, which will be the case much of the
time. So a <tt>PREEMPT_LAZY</tt> kernel will be far less likely to preempt
a running task than a <tt>PREEMPT_FULL</tt> kernel.
</p><h4>Removing <tt>cond_resched()</tt> — eventually</h4>
<p>
The end goal of this work is to have a scheduler with only two non-realtime
modes: <tt>PREEMPT_LAZY</tt> and <tt>PREEMPT_FULL</tt>.  The lazy mode will
occupy a place between <tt>PREEMPT_NONE</tt> and
<tt>PREEMPT_VOLUNTARY</tt>, replacing both of them.  It will, however, not
need the voluntary preemption points that were added for the two modes it
replaces.  Since preemption can now happen almost anywhere, there is no
longer a need to enable it in specific spots.
</p><p>
For now, though, the <tt>cond_resched()</tt> calls remain; if nothing else,
they are required for as long as the <tt>PREEMPT_NONE</tt> and
<tt>PREEMPT_VOLUNTARY</tt> modes exist.  Those calls also help to ensure
that problems are not introduced while lazy preemption is being stabilized.
</p><p>
In the current patch set, <tt>cond_resched()</tt> only checks
<tt>TIF_NEED_RESCHED</tt>, meaning that preemption will be deferred in many
situations where it will happen immediately from <tt>cond_resched()</tt> in
<tt>PREEMPT_VOLUNTARY</tt> or <tt>PREEMPT_NONE</tt> mode.
Steve Rostedt <a href="https://lwn.net/ml/all/20241009100133.2569e2a7@gandalf.local.home">questioned</a>
this change, asking whether <tt>cond_resched()</tt> should retain its older
meaning, at least for the <tt>PREEMPT_VOLUNTARY</tt> case.  Even though
<tt>PREEMPT_VOLUNTARY</tt> is slated for eventual removal, he thought,
keeping the older behavior could help to ease the transition.
</p><p>
Thomas Gleixner
<a href="https://lwn.net/ml/all/87h69lqbk0.ffs@tglx">answered</a> that only checking
<tt>TIF_NEED_RESCHED</tt> is the correct choice, since it will help in the
process of removing the <tt>cond_resched()</tt> calls entirely:
</p><blockquote>
	That forces us to look at all of them and figure out whether they
	need to be extended to include the lazy bit or not. Those which do
	not need it can be eliminated when LAZY is in effect because that
	will preempt on the next possible preemption point once the
	non-lazy bit is set in the tick.
</blockquote>
<p>
He added that he expects "<q>less than 5%</q>" of the
<tt>cond_resched()</tt> calls need to check <tt>TIF_NEED_RESCHED_LAZY</tt>
and, thus, will need to remain even after the transition to
<tt>PREEMPT_LAZY</tt> is complete.
</p><p>
Before then, though, there are hundreds of <tt>cond_resched()</tt> calls
that need to be checked and, for most of them at least, removed.  Many
other details have to be dealt with as well; <a href="https://lwn.net/ml/all/20241009165411.3426937-1-ankur.a.arora@oracle.com">this patch
set</a> from Ankur Arora addresses a few of them.  There is
also, of course, the need for extensive performance testing; Mike Galbraith
has made <a href="https://lwn.net/ml/all/579b7ea34ef6e2f7c955abdfc0929fe1af36faef.camel@gmx.de">an
early start</a> on that work, showing that throughput with lazy preemption
falls just short of that with <tt>PREEMPT_VOLUNTARY</tt>.
</p><p>
It all adds up to a lot to be done still, but the end result
of the lazy-preemption work should be a kernel that is a bit smaller and
simpler while delivering predictable latencies without the need to
sprinkle scheduler-related calls throughout the code.  That seems like a
better solution, but getting there is going to take some time.<br clear="all"></p><table>
           <tbody><tr><th colspan="2">Index entries for this article</th></tr>
           <tr><td><a href="https://lwn.net/Kernel/Index">Kernel</a></td><td><a href="https://lwn.net/Kernel/Index#Preemption">Preemption</a></td></tr>
            <tr><td><a href="https://lwn.net/Kernel/Index">Kernel</a></td><td><a href="https://lwn.net/Kernel/Index#Scheduler">Scheduler</a></td></tr>
            </tbody></table><br clear="all">

               <br clear="all">
               <hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US probes Tesla's Full Self-Driving software in 2.4M cars after fatal crash (135 pts)]]></title>
            <link>https://www.reuters.com/business/autos-transportation/nhtsa-opens-probe-into-24-mln-tesla-vehicles-over-full-self-driving-collisions-2024-10-18/</link>
            <guid>41884740</guid>
            <pubDate>Sat, 19 Oct 2024 00:46:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/business/autos-transportation/nhtsa-opens-probe-into-24-mln-tesla-vehicles-over-full-self-driving-collisions-2024-10-18/">https://www.reuters.com/business/autos-transportation/nhtsa-opens-probe-into-24-mln-tesla-vehicles-over-full-self-driving-collisions-2024-10-18/</a>, See on <a href="https://news.ycombinator.com/item?id=41884740">Hacker News</a></p>
Couldn't get https://www.reuters.com/business/autos-transportation/nhtsa-opens-probe-into-24-mln-tesla-vehicles-over-full-self-driving-collisions-2024-10-18/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Express v5 (134 pts)]]></title>
            <link>https://expressjs.com/2024/10/15/v5-release.html</link>
            <guid>41882955</guid>
            <pubDate>Fri, 18 Oct 2024 20:02:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://expressjs.com/2024/10/15/v5-release.html">https://expressjs.com/2024/10/15/v5-release.html</a>, See on <a href="https://news.ycombinator.com/item?id=41882955">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="blog-doc" markdown="1">


<p>Ten years ago (July 2014) the <a href="https://github.com/expressjs/express/pull/2237">Express v5 release pull request</a> was opened, and now at long last it’s been merged and published!</p>
<p>We want to recognize the work of all our contributors, especially <a href="https://github.com/dougwilson">Doug Wilson</a>, who spent the last ten years ensuring Express was the most stable project around. Without his contributions and those of many others, this release could not have happened.</p>
<p>Eight months ago we went public with a plan to move <a href="https://github.com/expressjs/discussions/issues/160">Express forward</a>. This plan included re-committing to the governance outlined years ago and adding more contributors to help kickstart progress. Many people may not realize that robust project governance is critical to the health of a large open-source project. We want to thank the <a href="https://github.com/openjs-foundation/cross-project-council/">OpenJS Foundation Cross Project
Council</a> and its members for helping us put together this plan.</p>
<h2 id="so-what-about-v5">So what about v5?</h2>
<p>This release is designed to be boring!
That may sound odd, but we’ve intentionally kept it simple to unblock the ecosystem and enable more impactful changes in future releases. This is also about signaling to the Node.js ecosystem that Express is moving again.
The focus of this release is on dropping old Node.js version support, addressing security concerns, and simplifying maintenance.</p>
<p>Before going into the changes in this release, let’s address why it was released v5 on the <code>next</code> dist-tag. As part of reviving the project, we started a <a href="https://github.com/expressjs/security-wg">Security working group</a> and <a href="https://github.com/expressjs/security-wg?tab=readme-ov-file#security-triage-team">security triage team</a> to address the growing needs around open source supply chain security. We undertook a security audit (more details to come on that) and uncovered some problems that needed to be addressed. Thus, in addition to the “normal” work done in public issues, we also did a lot of security work in private forks.
This security work required orchestration when releasing, to ensure the code and CVE reports went out together. You can find a summary of the most recent vulnerabilities patched in <a href="https://expressjs.com/2024/09/29/security-releases.html">our security release notes</a>.</p>
<p>While we weren’t able to simultaneously release v5, this blog post, the changelog, and documentation, we felt it was most important to have a secure and stable release.</p>
<p>As soon as possible, we’ll provide more details on our long-term support (LTS) plans, including when the release will move from <code>next</code> to <code>latest</code>. For now, if you are uncomfortable being on the bleeding edge (even if it is a rather dull edge) then you should wait to upgrade until the release is tagged <code>latest</code>. That said, we look forward to working with you to address any bugs you encounter as you upgrade.</p>
<h2 id="breaking-changes">Breaking changes</h2>
<p>The v5 release has the minimum possible number of breaking changes, listed here in order of impact to applications.</p>
<ul>
<li><a href="#goodbye-nodejs-010-hello-node-18">Ending support for old Node.js versions</a></li>
<li><a href="#changes-to-path-matching-and-regular-expressions">Changes to path matching and regular expressions</a></li>
<li><a href="#promise-support">Promise support</a></li>
<li><a href="#body-parser-changes">Body parser changes</a></li>
<li><a href="#removing-deprecated-method-signatures">Removing deprecated method signatures</a></li>
</ul>
<p>There are also a number of subtle changes: for details, see <a href="http://expressjs.com/en/guide/migrating-5">Migrating to Express 5</a>.</p>
<h3 id="ending-support-for-old-nodejs-versions">Ending support for old Node.js versions</h3>
<p>Goodbye Node.js 0.10, hello Node 18 and up!</p>
<p>This release drops support for Node.js versions before v18. This is an important change because supporting old Node.js versions has been holding back many critical performance and maintainability changes. This change also enables more stable and maintainable continuous integration (CI), adopting new language and runtime features, and dropping dependencies that are no longer required.</p>
<p>We recognize that this might cause difficulty for some enterprises with older or “parked” applications, and because of this we are working on a <a href="https://expressjs.com/2024/10/01/HeroDevs-partnership-announcement.html">partnership with HeroDevs</a> to offer “never-ending support” that will include critical security patches even after v4 enters end-of-life (more on these plans soon). That said, we strongly suggest that you update to modern Node.js versions as soon as possible.</p>
<h3 id="changes-to-path-matching-and-regular-expressions">Changes to path matching and regular expressions</h3>
<p>The v5 releases updates to <code>path-to-regexp@8.x</code> from <code>path-to-regexp@0.x</code>, which incorporates many years of changes. If you were using any of the 5.0.0-beta releases, a last-minute update which greatly changed the path semantics to <a href="https://blakeembrey.com/posts/2024-09-web-redos/">remove the possibility of any ReDoS attacks</a>. For more detailed changes, <a href="https://github.com/pillarjs/path-to-regexp?tab=readme-ov-file#express--4x">see the <code>path-to-regexp</code> readme</a>.</p>
<h4 id="no-more-regex">No more regex</h4>
<p>This release no longer supports “sub-expression” regular expressions, for example <code>/:foo(\\d+)</code>.
This is a commonly-used pattern, but we removed it for security reasons. Unfortunately, it’s easy to write a regular expression that has exponential time behavior when parsing input: The dreaded regular expression denial of service (ReDoS) attack. It’s very difficult to prevent this, but as a library that converts strings to regular expressions, we are on the hook for such security aspects.</p>
<p><em>How to migrate:</em> The best approach to prevent ReDoS attacks is to use a robust input validation library. <a href="https://www.npmjs.com/search?q=validate%20express">There are many on <code>npm</code></a> depending on your needs. TC member Wes Todd maintains <a href="https://www.npmjs.com/package/@wesleytodd/openapi">a middleware-based “code first” OpenAPI library</a> for this kind of thing.</p>
<h4 id="splats-optional-and-captures-oh-my">Splats, optional, and captures oh my</h4>
<p>This release includes simplified patterns for common route patterns. With the removal of regular expression semantics comes other small but impactful changes to how you write your routes.</p>
<ol>
<li><code>:name?</code> becomes <code>{:name}</code>. Usage of <code>{}</code> for optional parts of your route means you can now do things like <code>/base{/:optional}/:required</code> and what parts are actually optional is much more explicit.</li>
<li><code>*</code> becomes <code>*name</code>.</li>
<li>New reserved characters: <code>(</code>, <code>)</code>, <code>[</code>, <code>]</code>, <code>?</code>, <code>+</code>, &amp; <code>!</code>. These have been reserved to leave room for future improvements and to prevent mistakes when migrating where those characters mean specific things in previous versions.</li>
</ol>
<h4 id="name-everything">Name everything</h4>
<p>This release no longer supports ordered numerical parameters.</p>
<p>In Express v4, you could get numerical parameters using regex capture groups (for example, <code>/user(s?)</code> =&gt; <code>req.params[0] === 's'</code>). Now all parameters must be named. Along with requiring a name, Express now supports all valid JavaScript identifiers or quoted (for example, <code>/:"this"</code>).</p>
<h3 id="promise-support">Promise support</h3>
<p>This one may be a bit contentious, but we “promise” we’re moving in the right direction. We added support for returned <em>rejected</em> promises from errors raised in middleware. This <em>does not include</em> calling <code>next</code> from returned <em>resolved</em> promises. There are a lot of edge cases in old Express apps that have expectations of <code>Promise</code> behavior, and before we can run we need to walk. For most folks, this means you can now write middleware like the following:</p>
<pre><code>app.use(async (req, res, next) =&gt; {
  req.locals.user = await getUser(req);
  next();
});
</code></pre>
<p>Notice that this example uses <code>async/await</code> and the <code>getUser</code> call may throw an error (if, for example, the user doesn’t exist, the user database is down, and so on), but we still call <code>next</code> if it is successful. We don’t need to catch the error in line anymore if we want to rely on error-handling middleware instead because the router will now catch the rejected promise and treat that as calling <code>next(err)</code>.</p>
<p>NOTE: Best practice is to handle errors as close to the site as possible. So while this is now handled in the router, it’s best to catch the error in the middleware and handle it without relying on separate error-handling middleware.</p>
<h3 id="body-parser-changes">Body parser changes</h3>
<p>There are a number of <code>body-parser</code> changes:</p>
<ul>
<li>Add option to customize the urlencoded body depth with a default value of 32 as mitigation for <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45590">CVE-2024-45590</a> (<a href="https://github.com/expressjs/body-parser/commit/b2695c4450f06ba3b0ccf48d872a229bb41c9bce">technical details</a>)</li>
<li>Remove deprecated <code>bodyParser()</code> combination middleware</li>
<li><code>req.body</code> is no longer always initialized to <code>{}</code></li>
<li><code>urlencoded</code> parser now defaults <code>extended</code> to false</li>
<li>Added support for Brotli lossless data compression</li>
</ul>
<h3 id="removing-deprecated-method-signatures">Removing deprecated method signatures</h3>
<p>Express v5 removes a number of deprecated method signatures, many of which were carried over from v3. Below are the changes you need to make:</p>
<ul>
<li><code>res.redirect('back')</code> and <code>res.location('back')</code>: The magic string <code>'back'</code> is no longer supported. Use <code>req.get('Referrer') || '/'</code> explicitly instead.</li>
<li><code>res.send(status, body)</code> and <code>res.send(body, status)</code> signatures: Use <code>res.status(status).send(body)</code>.</li>
<li><code>res.send(status)</code> signature: Use <code>res.sendStatus(status)</code> for simple status responses, or <code>res.status(status).send()</code> for sending a status code with an optional body.</li>
<li><code>res.redirect(url, status)</code> signature: Use <code>res.redirect(status, url)</code>.</li>
<li><code>res.json(status, obj)</code> and <code>res.json(obj, status)</code> signatures: Use <code>res.status(status).json(obj)</code>.</li>
<li><code>res.jsonp(status, obj)</code> and <code>res.jsonp(obj, status)</code> signatures: Use <code>res.status(status).jsonp(obj)</code>.</li>
<li><code>app.param(fn)</code>: This method has been deprecated. Instead, access parameters directly via <code>req.params</code>, or use <code>req.body</code> or <code>req.query</code> as needed.</li>
<li><code>app.del('/', () =&gt; {})</code> method: Use <code>app.delete('/', () =&gt; {})</code> instead.</li>
<li><code>req.acceptsCharset</code>: Use <code>req.acceptsCharsets</code> (plural).</li>
<li><code>req.acceptsEncoding</code>: Use <code>req.acceptsEncodings</code> (plural).</li>
<li><code>req.acceptsLanguage</code>: Use <code>req.acceptsLanguages</code> (plural).</li>
<li><code>res.sendfile</code> method: Use <code>res.sendFile</code> instead.</li>
</ul>
<p>As a framework, we aim to ensure that the API is as consistent as possible. We’ve removed these deprecated signatures to make the API more predictable and easier to use. By streamlining each method to use a single, consistent signature, we simplify the developer experience and reduce confusion.</p>
<h2 id="migration-and-security-guidance">Migration and security guidance</h2>
<p>For developers looking to migrate from v4 to v5, there’s a <a href="http://expressjs.com/en/guide/migrating-5">detailed migration guide</a> to help you navigate through the changes and ensure a smooth upgrade process.</p>
<p>Additionally, we’ve been working hard on a comprehensive <a href="https://github.com/expressjs/security-wg/blob/main/docs/ThreatModel.md">Threat Model</a> that helps illustrate our philosophy of a “Fast, unopinionated, minimalist web framework for Node.js.” It provides critical insights into areas like user input validation and security practices that are essential for safe and secure usage of Express in your applications.</p>
<h2 id="our-work-is-just-starting">Our work is just starting</h2>
<p>We see the v5 release as a milestone toward an Express ecosystem that’s a stable and reliable tool for companies, governments, educators, and hobby projects. It is our commitment as the new stewards of the Express project to move the ecosystem forward with this goal in mind. If you want to support this work, which we do on a volunteer basis, please consider supporting the project and its maintainers via <a href="https://opencollective.com/express">our sponsorship opportunities</a>.</p>
<p>We have an <a href="https://github.com/expressjs/discussions/issues/266">extensive working backlog</a> of tasks, PRs, and issues for Express and dependencies. Naturally, we expect developers will continue to report issues to add to this backlog and open PRs moving forward, and we’ll continue to collaborate with the community to triage and resolve them. We look forward to continuing to improve Express and making it useful for its users across the world.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Focus on decisions, not tasks (199 pts)]]></title>
            <link>https://technicalwriting.dev/strategy/decisions.html</link>
            <guid>41881872</guid>
            <pubDate>Fri, 18 Oct 2024 17:58:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://technicalwriting.dev/strategy/decisions.html">https://technicalwriting.dev/strategy/decisions.html</a>, See on <a href="https://news.ycombinator.com/item?id=41881872">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="main">
<span id="decisions"></span>
<p>A quote from <a href="https://xmlpress.net/publications/eppo/">Every Page Is Page One</a>
that has deeply changed how I approach technical writing:</p>
<blockquote>
<p>In technical communication, we don’t talk much about decision support; we talk
about task support… In many cases, the information people need to complete their
tasks is not information on how to operate machines, but information to support their
decision making… simply documenting the procedures is never enough… What I am talking
about is documenting the context, letting users know what decisions they must make,
making them aware of the consequences, and, as far as possible, leading them to
resources and references that will assist them in deciding what to do.</p></blockquote>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Feds Are Coming for John Deere over the Right to Repair (481 pts)]]></title>
            <link>https://gizmodo.com/the-feds-are-coming-for-john-deere-over-the-right-to-repair-2000513521</link>
            <guid>41880981</guid>
            <pubDate>Fri, 18 Oct 2024 16:32:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gizmodo.com/the-feds-are-coming-for-john-deere-over-the-right-to-repair-2000513521">https://gizmodo.com/the-feds-are-coming-for-john-deere-over-the-right-to-repair-2000513521</a>, See on <a href="https://news.ycombinator.com/item?id=41880981">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
              
              
              <p>The Federal Trade Commission is investigating tractor manufacturer John Deere over long standing allegations that Deere makes its farm equipment hard to repair. The investigation has been ongoing since 2021, and we know more about it now thanks to a <a href="https://www.reuters.com/business/us-ftc-probing-deere-antitrust-consumer-protection-inquiry-filing-shows-2024-10-17/">court filing</a> made public on Thursday.</p>

 <p>A data analytics company called Hargrove &amp; Associates Inc (HAI) who works for the Association of Equipment Manufacturers (AEM), of which John Deere is a prominent member, filed a court brief in an attempt to quash the FTC’s investigation. The FTC wants HAI to turn over data submitted from AEM about sales, but HAI is saying that the FTC’s request is too broad and could hurt its business.</p> <p>Court drama aside, HAI spelled out exactly what the FTC is looking for. “The stated purpose of the FTC’s [investigation] is ‘[t]o determine whether Deere &amp; Company, or any other person, has engaged in or is engaging in unfair, deceptive, anticompetitive, collusive, coercive, predatory, exploitative, or exclusionary acts or practices in or affecting commerce related to the repair of agricultural equipment in violation of Section 5 of the Federal Trade Commission Act,’” HAI said in the court records.</p> <p>John Deere has been notorious for years for making its farm equipment hard to repair. Much like today’s cars, John Deere’s farm equipment comes with a lot of computers. When something simple in one of its tractors or threshers breaks, a farmer can’t just fix it themselves. Even if the farmer has the technical and mechanical know-how to make a simple repair, they often have to return to the manufacturer at great expense. Why? The on-board computers brick the machines until a certified Deere technician flips a switch.</p> <p>Farmers have been complaining about this for years and Deere has repeatedly promised to make its tractors easier to repair. <a href="https://www.vice.com/en/article/john-deere-promised-farmers-it-would-make-tractors-easy-to-repair-it-lied/">It lied</a>. John Deere equipment was so hard to repair that it led to an explosion in the <a href="https://www.vice.com/en/article/the-used-tractor-market-is-far-wilder-than-the-used-car-market/">used tractor market</a>. Old farm equipment made before the advent of onboard computing sold for a pretty penny because it was easier to repair.</p>

 <p>In 2022, a group of farmers filed a class action lawsuit against John Deere and <a href="https://www.vice.com/en/article/john-deere-hit-with-class-action-lawsuit-for-alleged-tractor-repair-monopoly/">accused it</a> of running a repair monopoly. Deere, of course, attempted to get the case dismissed <a href="https://www.reuters.com/legal/litigation/deere-must-face-us-farmers-right-to-repair-lawsuits-judge-rules-2023-11-27/">but failed</a>. Last year, the company issued a “<a href="https://www.vice.com/en/article/john-deere-agrees-to-let-farmers-repair-tractors-as-long-as-states-dont-pass-any-laws/">memorandum of understanding</a>.” The document was a promise to farmers that it would finally let them repair their own equipment, so long as states didn’t pass any laws around the right to repair.</p> <p>Chief among Deere’s promises was that it would provide farmers and independent repair shops with the equipment and documentation they needed to repair their equipment. The promises of the memorandum have not come to pass. Senator Elizabeth Warren called Deere out in a letter about all of this on <a href="https://www.warren.senate.gov/imo/media/doc/final_-_warren_letter_to_john_deere_rerighttorepair.pdf">October 2</a>. “Rather than uphold their end of the bargain, John Deere has provided impaired tools and inadequate disclosures,” Warren said in the letter.</p>

 <p>Now we know, thanks to HAI’s court filing, that the FTC has been investigating John Deere for at least three years. That’s good news for farmers and anyone who buys groceries.</p> <p>“We are grateful that the FTC has taken our complaint seriously and is investigating Deere’s conduct. We should be able to fix our own stuff. When farmers can’t access the proprietary software tools which are required to diagnose or complete repairs, that means they have to wait for an authorized technician before they can finish their work,” Nathan Proctor, U.S. PIRG’s senior right to repair campaign director, said in a statement. “The weather doesn’t wait on a dealership’s schedule—a delay could mean the loss of your harvest.”</p>
                          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Subvert – Collectively owned music marketplace (200 pts)]]></title>
            <link>https://subvert.fm/</link>
            <guid>41880829</guid>
            <pubDate>Fri, 18 Oct 2024 16:17:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://subvert.fm/">https://subvert.fm/</a>, See on <a href="https://news.ycombinator.com/item?id=41880829">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main" tabindex="-1">
                
<section>
  <p>Own and control the next Bandcamp.</p>
  <p>Join 989 artists, 156 labels, and 911 supporters in collectively owning and
    shaping Subvert.</p>
  <p><img src="https://subvert.fm/assets/images/book-closed.png?v=fea39ec7d0">
    <img src="https://subvert.fm/assets/images/book-open.png?v=fea39ec7d0">
  </p>
  
</section>
<section>
  <div><p>Introducing: Plan for the Artist-Owned Internet</p>
    <div>
      <p>
      Bandcamp's corporate acquisitions threaten independent music. It's time
      for a new model - one we collectively own and control.
      </p><p>
      Our zine outlines how we'll turn our vision of a collectively owned
      Bandcamp successor into a reality.
      </p><p>
      Get your copy today to join us as a Founding Member.
    </p></div>
  </div>
  <div>
    <p>JOIN AND
      RECEIVE:</p>
    <div>
      <p>Limited Edition Physical Zine</p>
      <p>Receive a limited physical copy of this publication
        and a membership certificate</p>
    </div>
    <div>
      <p>Subvert Co-op Membership</p>
      <p>Subvert is a cooperative, collectively owned by its
        members</p>
    </div>
    <div>
      <p>Founding Member Status</p>
      <p>Achieve a special status within the Subvert Co-op as
        a Founding Member</p>
    </div>
    
  </div>
</section>
<section>
  <video autoplay="" loop="" playsinline="" muted="" src="https://subvert.fm/assets/images/lp_video.mp4?v=fea39ec7d0" poster="https://subvert.fm/assets/images/zine-inside.png?v=fea39ec7d0">
</video></section>
<section id="foundingMember">
  <p>BECOME A FOUNDING MEMBER:</p>
  <div>
      <div>
        <p>Musicians &amp; Labels</p>
        <p>&nbsp;FREE</p>
        <p>Founding Artist or Label Membership in the
          Subvert Co-op
        </p>
      </div>
      <p><a href="https://subvert.typeform.com/joinus" target="_blank">JOIN AND CLAIM ZINE</a>
    </p></div>
</section>
<section>
  <p>BENEFITS:</p>
  <div>
    
    <p>
        Physical zine<br>
        Free worldwide shipping [Supporters]<br>
        Founding Membership in the Subvert Co-op<br>
        Access to our members only forum<br>
        Co-ownership of Subvert<br>
        Unique member number<br>
        Membership certificate<br>
        Ability to influence platform policies and features
      </p>
    
  </div>
</section>
<div>
        <p>“Subvert goes beyond
          hopetimism with a meticulously built, actionable framework. Very
          exciting!”
        </p>
        <div><p>
            Alex Durlak<br>
            Label Member<br>
            Idée Fixe Records</p></div>
        <p>“Subvert's new model of
          collective ownership could shatter the music industry's outdated
          hierarchy.”</p>
        <div><p>
            Lindsey Mills<br>
            Artist Member<br>
            Surfer Blood</p></div>
        <p>“Ownership is the
          fundamental tension in platforms and marketplaces. It's exciting to
          see Subvert address this head-on with a thoughtfully designed
          structure.”</p>
        <div><p>
            Charles Broskowski<br>
            Supporter Member<br>
            Founder, Are.na</p></div>
        <p>“Artists and labels
          have succumbed to a hopelessness in the clenches of tech’s strong-arm.
          Subvert is a step forward to fight this default.”</p>
        <div><p>
            Matt Werth<br>
            Label Member<br>
            RVNG Intl.</p></div>
      </div>
<section>
  <p>LEARN:</p>
  
  <div>
      <div><p>Bandcamp's
        back-to-back acquisitions—first by Epic Games in 2022, then by Songtradr
        in 2023—have its community feeling betrayed and concerned about the
        platform they once relied on. Bandcamp's trajectory illustrates a
        depressing reality of the contemporary internet: platforms position
        themselves as artist-friendly alternatives, only to seemingly abandon
        their core values and community.</p><p>It's time for a new model -
        one we collectively own and control.
      </p></div>
      <p>A cooperative, or
        co-op, is a business owned and democratically controlled by its members.
        Subvert is owned by its membership base of artists, labels, supporters,
        and workers.</p>
      <p>We're aiming to
        launch Subvert in 2025. Development is underway, and we're incorporating
        feedback from founding members to shape the platform's features. We'll
        provide regular updates through our newsletter and community forums.
      </p>
      <div><p>Yes. Enter your email to receive a digital version of the zine and
          agree to join our newsletter list.
          </p></div>
      <p>No, there is no
        personal financial liability associated with being a co-op member of
        Subvert. Your liability is limited to your membership contribution.</p>
      <p>We require minimal
        information: your name, a valid email address, and your mailing address.
        This is necessary for maintaining membership records and communications.</p>
      <p>Not at all. Joining
        Subvert doesn't limit your ability to use other platforms.
      </p>
      <p>No.</p>
    </div>
</section>
            </div><div data-footer="">
          <p><a data-brand="" href="https://subvert.fm/" aria-label="Subvert — The Collectively Owned Music Marketplace">
                <img src="https://subvert.fm/content/images/2024/10/fulllogo.png" alt="Subvert — The Collectively Owned Music Marketplace" loading="lazy">
          </a></p><div><p>
            Sign up for email updates:</p>
          </div>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Go Plan9 Memo, Speeding Up Calculations 450% (286 pts)]]></title>
            <link>https://pehringer.info/go_plan9_memo.html</link>
            <guid>41879854</guid>
            <pubDate>Fri, 18 Oct 2024 14:36:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pehringer.info/go_plan9_memo.html">https://pehringer.info/go_plan9_memo.html</a>, See on <a href="https://news.ycombinator.com/item?id=41879854">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      <h2><a href="https://pehringer.info/">Jacob_Ray_Pehringer</a></h2>
      

      
<p>I want to take advantage of Go’s concurrency and parallelism for some of my upcoming projects, allowing for some serious number crunching capabilities. But what if I wanted EVEN MORE POWER?!? Enter SIMD, <strong>S</strong>ame <strong>I</strong>nstruction <strong>M</strong>uliple <strong>D</strong>ata [“sim”-“dee”]. Simd instructions allow for parallel number crunching capabilities right down at the hardware level. Many programming languages either have compiler optimizations that use simd or libraries that offer simd support. However, (as far as I can tell) Go’s compiler does not utilizes simd, and I cound not find a general propose simd package that I liked. <strong><em>I just want a package that offers a thin abstraction layer over arithmetic and bitwise simd operations</em></strong>. So like any good programmer I decided to slightly reinvent the wheel and write my very own simd package. How hard could it be?</p>

<p>After doing some preliminary research I discovered that Go uses its own internal assembly language called Plan9. I consider it more of an assembly format than its own language. Plan9 uses target platforms instructions and registers with slight modifications to their names and usage. This means that x86 Plan9 is different then say arm Plan9. Overall, pretty weird stuff. I am not sure why the Go team went down this route. Maybe it simplifies the compiler by having this bespoke assembly format?</p>
<h2 id="plan9-crash-course">Plan9 Crash Course</h2>
<p>I always find learning by example to be the most informative.
So lets Go (haha) over a simple example.</p>
<div><pre><code>example
 ┣━ AddInts_amd64.s
 ┗━ main.go
</code></pre></div>
<p><strong>example/AddInts_amd64.s</strong></p>
<div><pre><code>1  // +build amd64
2
3  TEXT ·AddInts(SB), 4, $0
4      MOVL    left+0(FP), AX
5      MOVL    right+8(FP), BX
6      ADDL    BX, AX
7      MOVL    AX, int+16(FP)
8      RET
</code></pre></div>
<p><strong>LINE 1</strong>: The file contains <code>amd64</code> specific instructions, so we need to include a Go build tag to make sure Go does not try to compile this file for non x86 machines.</p>

<p><strong>LINE 3</strong>: You can think of this line as the functions declaration. <code>TEXT</code> declares that this is a function or text section. <code>·AddInts(SB)</code> specifies our functions name. <code>4</code> represents “NOSPLIT” which we need for some reason. And <code>$0</code> is the size of the function’s stack frame (used for local variables). It’s zero in this case because we can easily fit everything into the registers.</p>

<p><strong>LINE 4 &amp; 5</strong>: Go’s calling convention is to put the function arguments onto the stack. So we <code>MOV</code>e both <code>L</code>ong 32-bit values into the <code>AX</code> and <code>BX</code> registers by dereferencing the frame pointer (<code>FP</code>) with the appropriate offsets. The first argument is stored at offset <code>0</code>. The second argument is stored at offset <code>8</code> (int’s only need 4 bytes but I think Go offsets all arguments by 8 to maintain memory alignment).</p>

<p><strong>LINE 6</strong>: <code>Add</code> the <code>L</code>ong 32-bit value in <code>AX</code> (left) with the <code>L</code>ong 32-bit value in <code>BX</code>. And store the resulting <code>L</code>ong 32-bit value in <code>AX</code>.</p>

<p><strong>LINE 7 &amp; 8</strong>: Go’s calling convention (as far as I can tell) is to put the function return values after its arguments on the stack. So we <code>MOV</code>e the <code>L</code>ong 32-bit values in the <code>AX</code> register onto the stack by dereferencing the frame pointer (<code>FP</code>) with the appropriate offset. Which is 16 in this case.</p>

<p><strong>example/main.go</strong></p>
<div><pre><code>1  package main
2
3  import "fmt"
4
5  func AddInts(left, right) int
6
7  func main() {
8      fmt.Println("1 + 2 = ", AddInts(1, 2))
9  }
</code></pre></div>

<p><strong>LINE 5</strong>: This is the forward functions declaration for our Plan9 function. Since they both share the same name (<code>AddInts</code>) Go will link them together during compilation.</p>

<p><strong>LINE 8</strong>: We can now use our Plan9 function just like any other function.</p>

<h2 id="my-design-plan-9">My Design Plan…. 9</h2>
<p>Now that we are Go assembly experts, let’s get into the details of how I structured the package. <strong><em>My main goal for the package was to offer a thin abstraction layer over arithmetic and bitwise simd operations</em></strong>. Basically, I wanted a set of functions that would allow me to perform simd operations on slices.</p>

<p>Here’s a look at a simplified example of my project structure.</p>
<div><pre><code>example
 ┣━ internal
 ┃   ┗━ addition
 ┃       ┣━ AddInts_amd64.s
 ┃       ┗━ addition_amd64.go
 ┣━ init_amd64.go
 ┗━ example.go
</code></pre></div>
<p>First, we will create a private function pointer with a corresponding public function that wraps around it. By default we will point the private pointer to a software implementation of the function.</p>

<p><strong>example/example.go</strong>:</p>
<div><pre><code> 1  package example
 2
 3  func fallbackAddInts(left, right int) int {
 4     return left + right
 5  }
 6
 7  var addInts func(left, right int) int = fallbackAddInts
 8
 9  func AddInts(left, right int) int {
10      return addInts(left, right)  
11  }
</code></pre></div>
<p>Next, we create an internal package that contains an architecture specific Plan9 implementation of our function.</p>

<p><strong>example/internal/addition/AddInts_amd64.s</strong></p>
<div><pre><code>1  // +build amd64
2
3  TEXT ·AddInts(SB), 4, $0
4      MOVL    left+0(FP), AX
5      MOVL    right+8(FP), BX
6      ADDL    BX, AX
7      MOVL    AX, int+16(FP)
8      RET
</code></pre></div>
<p><strong>example/internal/addition/addition_amd64.go</strong></p>
<div><pre><code>1  // +build amd64
2
3  package addition
4 
5  func AddInts(left, right int) int
</code></pre></div>
<p>Lastly, we will create an init function to configure the private function pointer with our internal packages corresponding Plan9 function.</p>

<p><strong>example/init_amd64.go</strong></p>
<div><pre><code>1  // +build amd64
2
3  package example
4
5  import "example/internal/addition"
6 
7  func init() {
8      addInts = addition.AddInts
9  }
</code></pre></div>
<p><strong>TLDR</strong> The use of a private function pointer combined with architecture specific init functions and packages (using Go build tags) allows our example package to support multiple architectures easily!</p>
<h2 id="some-juicy-simd">Some Juicy Simd</h2>
<p>Now with all that gunk loaded into your mind I will let you decipher some of my x86 simd plan9 functions.</p>

<p><strong><a href="https://github.com/pehringer/simd/blob/main/internal/sse/Supported_amd64.s">simd/internal/sse/Supported_amd64.s</a></strong></p>
<div><pre><code> 1  // +build amd64
 2
 3  // func Supported() bool
 4  TEXT ·Supported(SB), 4, $0
 5    //Check SSE supported.
 6    MOVQ    $1, AX
 7    CPUID
 8    TESTQ   $(1&lt;&lt;25), DX
 9    JZ      sseFalse
10    //sseTrue:
11    MOVB    $1, bool+0(FP)
12    RET
13  sseFalse:
14    MOVB    $0, bool+0(FP)
15    RET
</code></pre></div>

<p><strong><a href="https://github.com/pehringer/simd/blob/main/internal/sse/AddFloat32_amd64.s">simd/internal/sse/AddFloat32_amd64.s</a></strong></p>
<div><pre><code> 1  // +build amd64
 2
 3  // func AddFloat32(left, right, result []float32) int
 4  TEXT ·AddFloat32(SB), 4, $0
 5      //Load slices lengths.
 6      MOVQ    leftLen+8(FP), AX
 7      MOVQ    rightLen+32(FP), BX
 8      MOVQ    resultLen+56(FP), CX
 9      //Get minimum length.
10      CMPQ    AX, CX
11      CMOVQLT AX, CX
12      CMPQ    BX, CX
13      CMOVQLT BX, CX
14      //Load slices data pointers.
15      MOVQ    leftData+0(FP), SI
16      MOVQ    rightData+24(FP), DX
17      MOVQ    resultData+48(FP), DI
18      //Initialize loop index.
19      MOVQ    $0, AX
20  multipleDataLoop:
21      MOVQ    CX, BX
22      SUBQ    AX, BX
23      CMPQ    BX, $4
24      JL      singleDataLoop
25      //Add four float32 values.
26      MOVUPS  (SI)(AX*4), X0
27      MOVUPS  (DX)(AX*4), X1
28      ADDPS   X1, X0
29      MOVUPS  X0, (DI)(AX*4)
30      ADDQ    $4, AX
31      JMP     multipleDataLoop
32  singleDataLoop:
33      CMPQ    AX, CX
34      JGE     returnLength
35      //Add one float32 value.
36      MOVSS   (SI)(AX*4), X0
37      MOVSS   (DX)(AX*4), X1
38      ADDSS   X1, X0
39      MOVSS   X0, (DI)(AX*4)
40      INCQ    AX
41      JMP     singleDataLoop
42  returnLength:
43      MOVQ    CX, int+72(FP)
44      RET
</code></pre></div>
<h2 id="performace-and-the-future">Performace And The Future</h2>
<p>I promise all this gunk is worth it. I made a few charts so you can see the performance difference between a Go software implementation and a Plan9 simd implementation. There is roughly a 200-450% speed up depending on the number of elements. I hope this memo inspires others to use Plan9 and simd in their future projects!</p>

<ul>
  <li><strong>Simd Repo:</strong> <a href="https://github.com/pehringer/simd">github.com/pehringer/simd</a></li>
  <li><strong>Simd Docs:</strong> <a href="https://pkg.go.dev/github.com/pehringer/simd">pkg.go.dev/github.com/pehringer/simd</a></li>
</ul>

<p>Currently, my package only supports 64-bit x86 machines. If there is enough interest, I will throw in some 64-bit ARM support as well!</p>

<p><img src="https://pehringer.info/go_plan9_memo/LargeVectorsFloat32Addition.png" alt="Large Vectors">
<img src="https://pehringer.info/go_plan9_memo/MediumVectorsFloat32Addition.png" alt="Medium Vectors">
<img src="https://pehringer.info/go_plan9_memo/SmallVectorsFloat32Addition.png" alt="Large Vectors"></p>


      
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Running an open source app: Usage, costs and community donations (230 pts)]]></title>
            <link>https://spliit.app/blog/spliit-by-the-stats-usage-costs-donations</link>
            <guid>41879845</guid>
            <pubDate>Fri, 18 Oct 2024 14:35:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spliit.app/blog/spliit-by-the-stats-usage-costs-donations">https://spliit.app/blog/spliit-by-the-stats-usage-costs-donations</a>, See on <a href="https://news.ycombinator.com/item?id=41879845">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I created Spliit a few years ago, but the version you can use today is only one year old. As a user <a target="_blank" href="https://github.com/spliit-app/spliit/issues/242">suggested on GitHub</a>, it’s a great opportunity to release some information about the project as a transparency exercise.</p><h2 id="how-many-people-use-it">How many people use it?</h2><p>In the last 12 months, Spliit received 152k visits, starting from ~200/week, and now regularly 5-6k/week. What is more interesting: the bounce rate is 33%, meaning that most people don’t just visit the home page; they <em>act</em> on the website, either by switching groups, creating expenses, or reading a blog post.</p><figure><img alt="Spliit's visitors in the last 12 months (stats by Plausible)" loading="lazy" width="2212" height="1008" decoding="async" data-nimg="1" srcset="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F1033ec0cdf78b62e0ac95134e78540bd%2Fscreenshot-2024-10-13-at-18.58.36.png&amp;w=3840&amp;q=75 1x" src="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F1033ec0cdf78b62e0ac95134e78540bd%2Fscreenshot-2024-10-13-at-18.58.36.png&amp;w=3840&amp;q=75"><figcaption>Spliit's visitors in the last 12 months (stats by Plausible)</figcaption></figure><p>Among these 152k visitors, at least 29k used a shared link. Which confirms that the normal use case scenario is for someone to create a group, then share it with the participants. But many visitors also come from Reddit, thanks to the many posts where someone asks for a viable alternative to Splitwise.</p><figure><img alt="Top sources and countries visitors came from in the last 12 months (stats by Plausible)" loading="lazy" width="2220" height="914" decoding="async" data-nimg="1" srcset="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F2786f808d5817352a196fac35ef5a1cb%2Fscreenshot-2024-10-13-at-19.03.45.png&amp;w=3840&amp;q=75 1x" src="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F2786f808d5817352a196fac35ef5a1cb%2Fscreenshot-2024-10-13-at-19.03.45.png&amp;w=3840&amp;q=75"><figcaption>Top sources and countries visitors came from in the last 12 months (stats by Plausible)</figcaption></figure><p>When looking where the visitors geographically come from, we can observe that countries where Spliit is the most popular are Germany, United States, and India. (To be honest, I don’t know what makes Spliit more successful in these countries specifically.)</p><h2 id="what-do-people-do-on-spliit">What do people do on Spliit?</h2><p>When using Spliit, there are basically two things you can do: creating groups or adding expenses. As displayed on the home page, users created almost 15k groups at the time I’m writing this post, and a total of 162k expenses.</p><p>Since last January (I didn’t use to track it before), about 300 groups are created each week, and 2000 expenses.</p><figure><img alt="Number of group created in 2024, by week (stats by Plausible)" loading="lazy" width="2168" height="778" decoding="async" data-nimg="1" srcset="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F850141583a29c85d150da06bdecc3ac9%2Fscreenshot-2024-10-13-at-17.37.22.png&amp;w=3840&amp;q=75 1x" src="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F850141583a29c85d150da06bdecc3ac9%2Fscreenshot-2024-10-13-at-17.37.22.png&amp;w=3840&amp;q=75"><figcaption>Number of group created in 2024, by week (stats by Plausible)</figcaption></figure><figure><img alt="Number of expenses created in 2024, by week (stats by Plausible)" loading="lazy" width="2168" height="778" decoding="async" data-nimg="1" srcset="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F22a7b5533b3cf312747eb0e42cc8054c%2Fscreenshot-2024-10-13-at-17.37.09.png&amp;w=3840&amp;q=75 1x" src="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F22a7b5533b3cf312747eb0e42cc8054c%2Fscreenshot-2024-10-13-at-17.37.09.png&amp;w=3840&amp;q=75"><figcaption>Number of expenses created in 2024, by week (stats by Plausible)</figcaption></figure><p>Here is the repartition of groups by number of expenses. An obvious information we can see here is that at least 4,600 groups were created only to test the application, as no expenses were created then. Then, on the 10k other groups, half have more than five expenses.</p><figure><img alt="Number of groups by how many expenses they contain" loading="lazy" width="1700" height="852" decoding="async" data-nimg="1" srcset="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F35d0e851507e1f3c5c027900b4283932%2Fscreenshot-2024-10-13-at-21.10.01.png&amp;w=1920&amp;q=75 1x, https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F35d0e851507e1f3c5c027900b4283932%2Fscreenshot-2024-10-13-at-21.10.01.png&amp;w=3840&amp;q=75 2x" src="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2F35d0e851507e1f3c5c027900b4283932%2Fscreenshot-2024-10-13-at-21.10.01.png&amp;w=3840&amp;q=75"><figcaption>Number of groups by how many expenses they contain</figcaption></figure><h2 id="how-much-does-it-cost">How much does it cost?</h2><p>Let’s talk money! I started many side projects in the past, and for most of them, I didn’t have to spend any cent. But when a project starts having hundreds of users, it’s hard to avoid some costs.</p><p>As you can see in the chart below, Spliit costs me about $115 each month, most of them being for the database hosting. <em>(Note: the amounts in this post are all in US dollars.)</em></p><figure><img alt="Spliit's costs in 2024 (in USD)" loading="lazy" width="1314" height="1074" decoding="async" data-nimg="1" srcset="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2Fb1d0eaf85e63a305d0035d497853319d%2Fscreenshot-2024-10-13-at-18.36.19.png&amp;w=1920&amp;q=75 1x, https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2Fb1d0eaf85e63a305d0035d497853319d%2Fscreenshot-2024-10-13-at-18.36.19.png&amp;w=3840&amp;q=75 2x" src="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2Fb1d0eaf85e63a305d0035d497853319d%2Fscreenshot-2024-10-13-at-18.36.19.png&amp;w=3840&amp;q=75"><figcaption>Spliit's costs in 2024 (in USD)</figcaption></figure><p>The database is hosted on Vercel, and the price is calculated from the total time the database is read in the month (the writings cost almost nothing). As Spliit is used worldwide, it is used almost the full month…</p><p>It is the source of cost I’d really like to work on. There must be database providers that charge less for Spliit’s use case. If you have any good opportunity to tell me about, feel free to <a target="_blank" href="https://scastiel.dev/contact">contact me</a> 😉.</p><h2 id="how-much-does-spliit-earn">How much does Spliit earn?</h2><p>Since the beginning, Spliit’s “business model” is clear to me: it is <a target="_blank" href="https://spliit.app/blog/we-need-an-open-source-alternative-to-splitwise">an open source project</a>, that will stay free to use forever. There might be some premium features in the future, but they will be only for advanced use cases, never to limit the normal usage of the application.</p><p>This makes it hard to find a way to finance the app, which is why currently the only way Spliit makes money is via donations, either by <a target="_blank" href="https://github.com/sponsors/scastiel">GitHub sponsoring</a>, or with direct donations (via a <a target="_blank" href="https://donate.stripe.com/28o3eh96G7hH8k89Ba">Stripe link</a>).</p><figure><img alt="Spliit's donations in 2024 (in USD)" loading="lazy" width="1314" height="1020" decoding="async" data-nimg="1" srcset="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2Fd88429adfb5125b83ff1b7193f435a40%2Fscreenshot-2024-10-13-at-18.36.29.png&amp;w=1920&amp;q=75 1x, https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2Fd88429adfb5125b83ff1b7193f435a40%2Fscreenshot-2024-10-13-at-18.36.29.png&amp;w=3840&amp;q=75 2x" src="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2Fd88429adfb5125b83ff1b7193f435a40%2Fscreenshot-2024-10-13-at-18.36.29.png&amp;w=3840&amp;q=75"><figcaption>Spliit's donations in 2024 (in USD)</figcaption></figure><p>And I’ll be honest: I didn’t expect to receive that much money for Spliit! On the first month, someone donated $70! Since then, some people donate $5, others $20… I am amazed at people’s generosity.</p><p>A short disclaimer: I don’t <em>need</em> donations to make Spliit work. I am lucky enough to have a full-time job that pays me enough to live comfortably and I am happy to give some of the money I earn to the community. (Side note: as a developer, Spliit is also a pretty cool project to show in interview when I look for a job 😉)</p><p>I added the ability to donate for two reasons:</p><ol><li><p>Several users like the project so much they <a target="_blank" href="https://github.com/spliit-app/spliit/issues/40">asked for a way to give back</a>.</p></li><li><p>If I decide someday to leave the project, I would love if the community could keep it alive without financial issues.</p></li></ol><p>You can see that the donations aren’t enough yet to cover all the project costs, but it’s close! 😊</p><h2 id="how-much-time-do-i-spend-working-on-spliit">How much time do I spend working on Spliit?</h2><p>Not as much as I would like! Something like 5 to 10 hours a month. Most of (if not all) the new features you’ve noticed in the app for a few months aren’t made by me, but the community!</p><figure><img alt="The many contributors who make Spliit" loading="lazy" width="1434" height="696" decoding="async" data-nimg="1" srcset="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2Faac295436bd9df2c77a17d26be4555b1%2Fscreenshot-2024-10-14-at-17.35.06.png&amp;w=1920&amp;q=75 1x, https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2Faac295436bd9df2c77a17d26be4555b1%2Fscreenshot-2024-10-14-at-17.35.06.png&amp;w=3840&amp;q=75 2x" src="https://spliit.app/_next/image?url=https%3A%2F%2Fbasehub.earth%2F2277c7b3%2Faac295436bd9df2c77a17d26be4555b1%2Fscreenshot-2024-10-14-at-17.35.06.png&amp;w=3840&amp;q=75"><figcaption>The many contributors who make Spliit</figcaption></figure><p>The time I spend on Spliit, I use it to manage the <a target="_blank" href="https://github.com/spliit-app/spliit/issues">issues</a> (feature suggestions, bug reports, questions), review and test the <a target="_blank" href="https://github.com/spliit-app/spliit/pulls">pull requests</a> (feature implemented by contributors), and deploy the new features so that they’re accessible to everyone.</p><p>So a lot of time is spent on Spliit, but more by <a target="_blank" href="https://github.com/spliit-app/spliit/graphs/contributors">other contributors</a> than by me. 😊</p><hr><p>Spliit is a project I’m really passionate about, and it’s clear that others appreciate it as well! Generous donations help cover most of the hosting costs, though I still contribute some each month—which I’m happy to do 😊.</p><p>I’ll aim to keep these transparency updates coming, giving a regular look at the project's progress and funding.</p><p><b>Do you have any follow-up question about Spliit?</b></p><p>Two places you can ask them:</p><ul><li><p><a target="_blank" href="https://www.reddit.com/r/spliit/comments/1g3spf3/spliit_by_the_stats_usage_costs_donations/">In this Reddit post</a></p></li><li><p><a target="_blank" href="https://github.com/spliit-app/spliit/issues/242">In this GitHub issue</a></p></li></ul></div></div>]]></description>
        </item>
    </channel>
</rss>