<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 14 Jun 2025 15:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Google Cloud Incident Report – 2025-06-13 (135 pts)]]></title>
            <link>https://status.cloud.google.com/incidents/ow5i3PPK96RduMcb1SsW</link>
            <guid>44274563</guid>
            <pubDate>Sat, 14 Jun 2025 06:13:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://status.cloud.google.com/incidents/ow5i3PPK96RduMcb1SsW">https://status.cloud.google.com/incidents/ow5i3PPK96RduMcb1SsW</a>, See on <a href="https://news.ycombinator.com/item?id=44274563">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <tr> <td> <psd-status-icon> <svg aria-label="Available status" fill="none" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M9.001.666A8.336 8.336 0 0 0 .668 8.999c0 4.6 3.733 8.334 8.333 8.334s8.334-3.734 8.334-8.334S13.6.666 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Zm-1.666-4.833L5.168 8.666 4.001 9.833l3.334 3.333L14 6.499l-1.166-1.166-5.5 5.5Z" fill="#1E8E3E" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>13 Jun 2025</td> <td>16:45 PDT</td> <td><h2>Incident Report</h2>
<h2><strong>Summary</strong></h2>
<p><em>Google Cloud, Google Workspace and Google Security Operations products experienced increased 503 errors in external API requests, impacting customers.</em></p>
<p><em><strong>We deeply apologize for the impact this outage has had.  Google Cloud customers and their users trust their businesses to Google, and we will do better.  We apologize for the impact this has had not only on our customers’ businesses and their users but also on the trust of our systems.  We are committed to making improvements to help avoid outages like this moving forward.</strong></em></p>
<h3><strong>What happened?</strong></h3>
<p>Google and Google Cloud APIs are served through our Google API management and control planes.  Distributed regionally, these management and control planes are responsible for ensuring each API request that comes in is authorized, has the policy and appropriate checks (like quota) to meet their endpoints.  The core binary that is part of this policy check system is known as Service Control.  Service Control is a regional service that has a regional datastore that it reads quota and policy information from. This datastore metadata gets replicated almost instantly globally to manage quota policies for Google Cloud and our customers.</p>
<p>On May 29, 2025, a new feature was added to Service Control for additional quota policy checks. This code change and binary release went through our region by region rollout, but the code path that failed was never exercised during this rollout due to needing a policy change that would trigger the code.  As a safety precaution, this code change came with a red-button to turn off that particular policy serving path.  The issue with this change was that it did not have appropriate error handling nor was it feature flag protected.  Without the appropriate error handling, the null pointer caused the binary to crash. Feature flags are used to gradually enable the feature region by region per project, starting with internal projects, to enable us to catch issues.  If this had been flag protected, the issue would have been caught in staging.</p>
<p>On June 12, 2025 at ~10:45am PDT, a policy change was inserted into the regional Spanner tables that Service Control uses for policies.  Given the global nature of quota management, this metadata was replicated globally within seconds.  This policy data contained unintended blank fields.  Service Control, then regionally exercised quota checks on policies in each regional datastore. This pulled in blank fields for this respective policy change and exercised the code path that hit the null pointer causing the binaries to go into a crash loop.  This occurred globally given each regional deployment.</p>
<p>Within 2 minutes, our Site Reliability Engineering team was triaging the incident.  Within 10 minutes, the root cause was identified and the red-button (to disable the serving path) was being put in place.  The red-button was ready to roll out ~25 minutes from the start of the incident.  Within 40 minutes of the incident, the red-button rollout was completed, and we started seeing recovery across regions, starting with the smaller ones first.</p>
<p>Within some of our larger regions, such as us-central-1, as Service Control tasks restarted, it created a herd effect on the underlying infrastructure it depends on (i.e. that Spanner table), overloading the infrastructure.  Service Control did not have the appropriate randomized exponential backoff implemented to avoid this.  It took up to ~2h 40 mins to fully resolve in us-central-1 as we throttled task creation to minimize the impact on the underlying infrastructure and routed traffic to multi-regional databases to reduce the load.  At that point, Service Control and API serving was fully recovered across all regions.  Corresponding Google and Google Cloud products started recovering with some taking longer depending upon their architecture.</p>
<h3><strong>What is our immediate path forward?</strong></h3>
<p>Immediately upon recovery, we froze all changes to the Service Control stack and manual policy pushes until we can completely remediate the system.</p>
<h3><strong>How did we communicate?</strong></h3>
<p>We posted our first incident report to Cloud Service Health about ~1h after the start of the crashes, due to the Cloud Service Health infrastructure being down due to this outage. For some customers, the monitoring infrastructure they had running on Google Cloud was also failing, leaving them without a signal of the incident or an understanding of the impact to their business and/or infrastructure. We will address this going forward.</p>
<h3><strong>What’s our approach moving forward?</strong></h3>
<p>Beyond freezing the system as mentioned above, we will prioritize and safely complete the following:</p>
<ul>
<li>We will modularize Service Control’s architecture, so the functionality is isolated and fails open.  Thus, if a corresponding check fails, Service Control can still serve API requests.</li>
<li>We will audit all systems that consume globally replicated data.  Regardless of the business need for near instantaneous consistency of the data globally (i.e. quota management settings are global), data replication needs to be propagated incrementally with sufficient time to validate and detect issues.</li>
<li>We will enforce all changes to critical binaries to be feature flag protected and disabled by default.</li>
<li>We will improve our static analysis and testing practices to correctly handle errors and if need be fail open.</li>
<li>We will audit and ensure our systems employ randomized exponential backoff.</li>
<li>We will improve our external communications, both automated and human, so our customers get the information they need asap to react to issues, manage their systems and help their customers.</li>
<li>We'll ensure our monitoring and communication infrastructure remains operational to serve customers even when Google Cloud and our primary monitoring products are down, ensuring business continuity.</li>
</ul>
<hr>
</td> </tr><tr> <td> <psd-status-icon> <svg aria-label="Available status" fill="none" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M9.001.666A8.336 8.336 0 0 0 .668 8.999c0 4.6 3.733 8.334 8.333 8.334s8.334-3.734 8.334-8.334S13.6.666 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Zm-1.666-4.833L5.168 8.666 4.001 9.833l3.334 3.333L14 6.499l-1.166-1.166-5.5 5.5Z" fill="#1E8E3E" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>23:34 PDT</td> <td><h2>Mini Incident Report</h2>
<p>We are deeply sorry for the impact to all of our users and their customers that this service disruption/outage caused. Businesses large and small trust Google Cloud with your workloads and we will do better. In the coming days, we will publish a full incident report of the root cause, detailed timeline and robust remediation steps we will be taking. Given the size and impact of this incident, we would like to provide some information below.</p>
<p>Please note, this information is based on our best knowledge at the time of posting and is subject to change as our investigation continues. If you have experienced impact outside of what is listed below, please reach out to Google Cloud Support using <a href="https://cloud.google.com/support">https://cloud.google.com/support</a>  or to Google Workspace Support using help article <a href="https://support.google.com/a/answer/1047213">https://support.google.com/a/answer/1047213</a>.</p>
<p><strong>(All Times US/Pacific)</strong></p>
<p><strong>Incident Start:</strong> 12 June, 2025 10:49</p>
<p><strong>All regions except us-central1 mitigated:</strong> 12 June, 2025 12:48</p>
<p><strong>Incident End:</strong> 12 June, 2025 13:49</p>
<p><strong>Duration:</strong> 3 hours</p>
<p><strong>Regions/Zones:</strong> Global</p>
<p><strong>Description:</strong></p>
<p>Multiple Google Cloud and Google Workspace products experienced increased 503 errors in external API requests, impacting customers.</p>
<p>From our initial analysis, the issue occurred due to an invalid automated quota update to our API management system which was distributed globally, causing external API requests to be rejected. To recover we bypassed the offending quota check, which allowed recovery in most regions within 2 hours. However, the quota policy database in us-central1 became overloaded, resulting in much longer recovery in that region. Several products had moderate residual impact (e.g. backlogs) for up to an hour after the primary issue was mitigated and a small number recovering after that.</p>
<p>Google will complete a full Incident Report in the following days that will provide a detailed root cause.</p>
<p><strong>Customer Impact:</strong></p>
<p>Customers had intermittent API and user-interface access issues to the impacted services. Existing streaming and IaaS resources were not impacted.</p>
<p><strong>Additional details:</strong></p>
<p>This incident should not have happened, and we will take the following measures to prevent future recurrence:</p>
<ul>
<li>Prevent our API management platform from failing due to invalid or corrupt data.</li>
<li>Prevent metadata from propagating globally without appropriate protection, testing and monitoring in place.</li>
<li>Improve system error handling and comprehensive testing for handling of invalid data.</li>
</ul>
<p><strong>Affected Services and Features:</strong></p>
<p><strong>Google Cloud Products:</strong></p>
<ul>
<li>Identity and Access Management</li>
<li>Cloud Build</li>
<li>Cloud Key Management Service</li>
<li>Google Cloud Storage</li>
<li>Cloud Monitoring</li>
<li>Google Cloud Dataproc</li>
<li>Cloud Security Command Center</li>
<li>Artifact Registry</li>
<li>Cloud Workflows</li>
<li>Cloud Healthcare</li>
<li>Resource Manager API</li>
<li>Dataproc Metastore</li>
<li>Cloud Run</li>
<li>VMWare engine</li>
<li>Dataplex</li>
<li>Migrate to Virtual Machines</li>
<li>Google BigQuery</li>
<li>Contact Center AI Platform</li>
<li>Google Cloud Deploy</li>
<li>Media CDN</li>
<li>Colab Enterprise</li>
<li>Vertex Gemini API</li>
<li>Cloud Data Fusion</li>
<li>Cloud Asset Inventory</li>
<li>Datastream</li>
<li>Integration Connectors</li>
<li>Apigee</li>
<li>Google Cloud NetApp Volumes</li>
<li>Google Cloud Bigtable</li>
<li>Looker (Google Cloud core)</li>
<li>Looker Studio</li>
<li>Google Cloud Functions</li>
<li>Cloud Load Balancing</li>
<li>Traffic Director</li>
<li>Document AI</li>
<li>AutoML Translation</li>
<li>Pub/Sub Lite</li>
<li>API Gateway</li>
<li>Agent Assist</li>
<li>AlloyDB for PostgreSQL</li>
<li>Cloud Firestore</li>
<li>Cloud Logging</li>
<li>Cloud Shell</li>
<li>Cloud Memorystore</li>
<li>Cloud Spanner</li>
<li>Contact Center Insights</li>
<li>Database Migration Service</li>
<li>Dialogflow CX</li>
<li>Dialogflow ES</li>
<li>Google App Engine</li>
<li>Google Cloud Composer</li>
<li>Google Cloud Console</li>
<li>Google Cloud DNS</li>
<li>Google Cloud Pub/Sub</li>
<li>Google Cloud SQL</li>
<li>Google Compute Engine</li>
<li>Identity Platform</li>
<li>Managed Service for Apache Kafka</li>
<li>Memorystore for Memcached</li>
<li>Memorystore for Redis</li>
<li>Memorystore for Redis Cluster</li>
<li>Persistent Disk</li>
<li>Personalized Service Health</li>
<li>Speech-to-Text</li>
<li>Text-to-Speech</li>
<li>Vertex AI Search</li>
<li>Retail API</li>
<li>Vertex AI Feature Store</li>
<li>BigQuery Data Transfer Service</li>
<li>Google Cloud Marketplace</li>
<li>Cloud NAT</li>
<li>Hybrid Connectivity</li>
<li>Cloud Vision</li>
<li>Network Connectivity Center</li>
<li>Cloud Workstations</li>
<li>Google Security Operations</li>
</ul>
<p><strong>Google Workspace Products:</strong></p>
<ul>
<li>AppSheet</li>
<li>Gmail</li>
<li>Google Calendar</li>
<li>Google Drive</li>
<li>Google Chat</li>
<li>Google Voice</li>
<li>Google Docs</li>
<li>Google Meet</li>
<li>Google Cloud Search</li>
<li>Google Tasks</li>
</ul>
</td> </tr><tr> <td> <psd-status-icon> <svg aria-label="Available status" fill="none" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M9.001.666A8.336 8.336 0 0 0 .668 8.999c0 4.6 3.733 8.334 8.333 8.334s8.334-3.734 8.334-8.334S13.6.666 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Zm-1.666-4.833L5.168 8.666 4.001 9.833l3.334 3.333L14 6.499l-1.166-1.166-5.5 5.5Z" fill="#1E8E3E" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>18:27 PDT</td> <td><p>Vertex AI Online Prediction is full recovered as of 18:18 PDT.</p>
<p>All the services are fully recovered from the service issue</p>
<p>We will publish analysis of this incident once we have completed our internal investigation.</p>
<p>We thank you for your patience while we worked on resolving the issue.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Disruption status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M8.168 11.5h1.667v1.666H8.168v-1.667Zm0-6.667h1.667v5H8.168v-5ZM8.993.666C4.393.666.668 4.399.668 8.999s3.725 8.334 8.325 8.334c4.608 0 8.342-3.734 8.342-8.334S13.6.666 8.993.666Zm.008 15a6.665 6.665 0 0 1-6.666-6.667A6.665 6.665 0 0 1 9 2.333a6.665 6.665 0 0 1 6.667 6.666A6.665 6.665 0 0 1 9 15.666Z" fill="#E37400" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>17:59 PDT</td> <td><p><strong>Vertex AI Online Prediction:</strong>
The issue causing elevated 5xx errors with some Model Garden models was fully resolved as of 17:05 PDT. Vertex AI serving is now back to normal in all regions except europe-west1 and asia-southeast1. Engineers are actively working to restore normal serving capacity in these two regions.</p>
<p>The ETA for restoring normal serving capacity in europe-west1 and asia-southeast1 is 19:45 PDT.</p>
<p>We will provide an update by Thursday, 2025-06-12 19:45 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>17:33 PDT</td> <td><p>The impact on Personalized Service Health is now resolved and the updates should be reflected without any issues.</p>
<p>The issue with Google Cloud Dataflow is fully resolved as of 17:10 PDT</p>
<p>The only remaining impact is on Vertex AI Online Prediction as follows:</p>
<p><strong>Vertex AI Online Prediction:</strong> Customers may continue to experience elevated 5xx errors with some of the models available in the Model Garden. We are seeing gradual decrease in error rates as our engineers perform appropriate mitigation actions.</p>
<p>The ETA for full resolution of these 5xx errors is 22:00 PDT</p>
<p>We will provide an update by Thursday, 2025-06-12 22:00 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>17:06 PDT</td> <td><p>The following Google Cloud products are still experiencing residual impact:</p>
<p><strong>Google Cloud Dataflow:</strong>  Dataflow backlog has cleared up in all regions except us-central1.  Customers may experience delays with Dataflow operations in us-central1 as the backlog  clears up gradually. We do not have an ETA for Cloud Dataflow recovery in us-central1.</p>
<p><strong>Vertex AI Online Prediction:</strong> Customers may continue to experience elevated 5xx errors with some of the models available in the Model Garden. We are seeing gradual decrease in error rates as our engineers perform appropriate mitigation actions. The ETA for full resolution of these 5xx errors is 22:00 PDT</p>
<p><strong>Personalized Service Health:</strong> Updates on the Personalized Service Health are delayed and we recommend customers to continue using Cloud Service Health dashboard for updates.</p>
<p>We will provide an update by Thursday, 2025-06-12 17:45 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>16:13 PDT</td> <td><p>The following Google Cloud products are still experiencing residual impact:</p>
<p><strong>Google Cloud Dataflow:</strong>  Customers may experience delays with Dataflow operations as the backlog is clearing up gradually.</p>
<p><strong>Vertex AI Online Prediction:</strong> Customers may continue to experience elevated 5xx errors with some of the models available in the Model Garden.</p>
<p><strong>Personalized Service Health:</strong> Updates on the Personalized Service Health are delayed and we recommend customers to continue using Cloud Service Health dashboard for updates.</p>
<p>We currently do not have an ETA for full mitigation of the above services.</p>
<p>We will provide an update by Thursday, 2025-06-12 17:00 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>15:16 PDT</td> <td><p>Most of the Google Cloud products are fully recovered as of 13:45 PDT.</p>
<p>There is some residual impact for the products currently marked as affected on the dashboard. Please continue to monitor the services and the dashboard for individual product recoveries.</p>
<p>We will provide an update by Thursday, 2025-06-12 16:00 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>14:23 PDT</td> <td><p>Most of the Google Cloud products have confirmed full service recovery.</p>
<p>A few services are still seeing some residual impact and the respective engineering teams are actively working on recovery of those services.</p>
<p>We expect the recovery to complete in less than an hour.</p>
<p>We will provide an update by Thursday, 2025-06-12 15:00 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>14:00 PDT</td> <td><p>We have implemented mitigation for the issue in us-central1 and multi-region/us and we are seeing signs of recovery.</p>
<p>We have received confirmation from our internal monitoring and customers that the Google Cloud products are also seeing recovery in multiple regions and are also seeing signs of some recovery in us-central1 and mutli-region/us.</p>
<p>We expect the recovery to complete in less than an hour.</p>
<p>We will provide an update by Thursday, 2025-06-12 14:30 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>13:16 PDT</td> <td><p>We have identified the root cause and applied appropriate mitigations.
Our infrastructure has recovered in all regions except us-central1.</p>
<p>Google Cloud products that rely on the affected infrastructure are seeing recovery in multiple locations.</p>
<p>Our engineers are aware of the customers still experiencing issues on us-central1 and multi-region/us and are actively working on full recovery.</p>
<p>We do not have an ETA for full recovery.</p>
<p>We will provide an update by Thursday, 2025-06-12 14:00 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>12:41 PDT</td> <td><p>Our engineers have identified the root cause and have applied appropriate mitigations.</p>
<p>While our engineers have confirmed that the underlying dependency is recovered in all locations except us-central1, <em><strong>we are aware that customers are still experiencing varying degrees of impact on individual google cloud products</strong></em>. All the respective engineering teams are actively engaged and working on service recovery.</p>
<p>We do not have an ETA for full service recovery.</p>
<p>We will provide an update by Thursday, 2025-06-12 13:30 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>12:30 PDT</td> <td><p>All locations except us-central1 have fully recovered. us-central1 is mostly recovered. We do not have an ETA for full recovery in us-central1.</p>
<p>We will provide an update by Thursday, 2025-06-12 13:00 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>12:09 PDT</td> <td><p>Our engineers are continuing to mitigate the issue and we have confirmation that the issue is recovered in some locations.</p>
<p>We do not have an ETA on full mitigation at this point.</p>
<p>We will provide an update by Thursday, 2025-06-12 12:45 PDT with current details.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>11:59 PDT</td> <td><p><strong>Summary:</strong>
Multiple GCP products are experiencing Service issues with API requests</p>
<p><strong>Description</strong>
We are experiencing service issues with multiple GCP products beginning at Thursday, 2025-06-12 10:51 PDT.</p>
<p>Our engineering team continues to investigate the issue.</p>
<p>We will provide an update by Thursday, 2025-06-12 12:15 PDT with current details.</p>
<p>We apologize to all who are affected by the disruption.</p>
<p><strong>Symptoms:</strong>
Multiple GCP products are experiencing varying level of service impacts with API requests.</p>
<p><strong>Workaround:</strong>
None at this time.</p>
</td> </tr><tr> <td> <psd-status-icon> <svg fill="none" aria-label="Outage status" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.16 5.666 9 7.824 6.843 5.666 5.668 6.841l2.158 2.158-2.158 2.159 1.175 1.175 2.158-2.159 2.159 2.159 1.175-1.175-2.159-2.159 2.159-2.158-1.175-1.175ZM9 .666A8.326 8.326 0 0 0 .668 8.999a8.326 8.326 0 0 0 8.333 8.334 8.326 8.326 0 0 0 8.334-8.334A8.326 8.326 0 0 0 9 .666Zm0 15a6.676 6.676 0 0 1-6.666-6.667A6.676 6.676 0 0 1 9 2.333a6.676 6.676 0 0 1 6.667 6.666A6.676 6.676 0 0 1 9 15.666Z" fill="#D93025" fill-rule="evenodd"></path></svg> </psd-status-icon> </td> <td>12 Jun 2025</td> <td>11:46 PDT</td> <td><p><strong>Summary:</strong>
Multiple GCP products are experiencing Service issues</p>
<p><strong>Description</strong>
We are experiencing service issues with multiple GCP products beginning at Thursday, 2025-06-12 10:51 PDT.</p>
<p>Our engineering team continues to investigate the issue.</p>
<p>We will provide an update by Thursday, 2025-06-12 12:15 PDT with current details.</p>
<p>We apologize to all who are affected by the disruption.</p>
<p><strong>Symptoms:</strong>
Multiple GCP products are experiencing varying level of service impacts.</p>
<p><strong>Workaround:</strong>
None at this time.</p>
</td> </tr> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[$100 Hamburger (106 pts)]]></title>
            <link>https://en.wikipedia.org/wiki/$100_hamburger</link>
            <guid>44274031</guid>
            <pubDate>Sat, 14 Jun 2025 03:41:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://en.wikipedia.org/wiki/$100_hamburger">https://en.wikipedia.org/wiki/$100_hamburger</a>, See on <a href="https://news.ycombinator.com/item?id=44274031">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							

						<p>From Wikipedia, the free encyclopedia</p>
					</div><div lang="en" dir="ltr" id="mw-content-text">

<p><i><b>$100 hamburger</b></i> ("hundred-dollar hamburger") is <a href="https://en.wikipedia.org/wiki/Aviation" title="Aviation">aviation</a> <a href="https://en.wikipedia.org/wiki/Slang" title="Slang">slang</a> for the excuse a <a href="https://en.wikipedia.org/wiki/General_aviation" title="General aviation">general aviation</a> pilot might use to fly.<sup id="cite_ref-1"><a href="#cite_note-1"><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-2"><a href="#cite_note-2"><span>[</span>2<span>]</span></a></sup>
</p>

<p>A $100 hamburger trip typically involves flying a short distance (less than two hours), eating at an <a href="https://en.wikipedia.org/wiki/Airport" title="Airport">airport</a> <a href="https://en.wikipedia.org/wiki/Restaurant" title="Restaurant">restaurant</a>, and then flying home.  "$100" originally<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Dates_and_numbers#Chronological_items" title="Wikipedia:Manual of Style/Dates and numbers"><span title="The time period mentioned near this tag is ambiguous.">when?</span></a></i>]</sup> referred to the approximate cost of <a href="https://en.wikipedia.org/wiki/Renting" title="Renting">renting</a> or operating a light general aviation <a href="https://en.wikipedia.org/wiki/Aircraft" title="Aircraft">aircraft</a>, such as a <a href="https://en.wikipedia.org/wiki/Cessna_172" title="Cessna 172">Cessna 172</a>, for the time it took to fly round-trip to a nearby airport.  However, increasing <a href="https://en.wikipedia.org/wiki/Jet_fuel" title="Jet fuel">fuel</a> prices have since caused an increase in hourly operating costs for most <a href="https://en.wikipedia.org/wiki/Airplane" title="Airplane">airplanes</a>, and a Cessna 172 now<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Dates_and_numbers#Chronological_items" title="Wikipedia:Manual of Style/Dates and numbers"><span title="The time period mentioned near this tag is ambiguous.">when?</span></a></i>]</sup> costs US$95–180<sup id="cite_ref-3"><a href="#cite_note-3"><span>[</span>3<span>]</span></a></sup> per <a href="https://en.wikipedia.org/wiki/Hobbs_meter" title="Hobbs meter">Hobbs</a> hour to rent, including fuel.<sup id="cite_ref-4"><a href="#cite_note-4"><span>[</span>4<span>]</span></a></sup>
</p><p>In <a href="https://en.wikipedia.org/wiki/Perth,_Western_Australia" title="Perth, Western Australia">Perth, Western Australia</a>, a similar mentality resulted in the 'Rotto Bun Run'. A group of pilots who had run out of <a href="https://en.wikipedia.org/wiki/Hot_cross_bun" title="Hot cross bun">hot cross buns</a> on <a href="https://en.wikipedia.org/wiki/Good_Friday" title="Good Friday">Good Friday</a> decided to fly to the closest open bakery on <a href="https://en.wikipedia.org/wiki/Rottnest_Island" title="Rottnest Island">Rottnest Island</a>. The run is now an annual charity event.<sup id="cite_ref-5"><a href="#cite_note-5"><span>[</span>5<span>]</span></a></sup>
</p>

<div><ol>
<li id="cite_note-1"><span><b><a href="#cite_ref-1">^</a></b></span> <span><cite id="CITEREFPreusch2007">Preusch, Matthew (October 26, 2007). <a rel="nofollow" href="https://www.nytimes.com/2007/10/26/travel/escapes/26burger.html">"Cleared for Lunching: The $100 Hamburger"</a>. <i><a href="https://en.wikipedia.org/wiki/The_New_York_Times" title="The New York Times">The New York Times</a></i><span>. Retrieved <span>May 16,</span> 2011</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+New+York+Times&amp;rft.atitle=Cleared+for+Lunching%3A+The+%24100+Hamburger&amp;rft.date=2007-10-26&amp;rft.aulast=Preusch&amp;rft.aufirst=Matthew&amp;rft_id=https%3A%2F%2Fwww.nytimes.com%2F2007%2F10%2F26%2Ftravel%2Fescapes%2F26burger.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3A%24100+hamburger"></span></span>
</li>
<li id="cite_note-2"><span><b><a href="#cite_ref-2">^</a></b></span> <span><cite id="CITEREFDaniels2020">Daniels, Lauren Drewes (2020-02-17). <a rel="nofollow" href="https://www.dallasobserver.com/restaurants/100-burgers-a-plane-ride-away-from-dallas-11870397">"Come Fly With Us to Pilots' Favorite '$100 Hamburgers'<span></span>"</a>. <i>Dallas Observer</i><span>. Retrieved <span>2021-07-06</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Dallas+Observer&amp;rft.atitle=Come+Fly+With+Us+to+Pilots%27+Favorite+%27%24100+Hamburgers%27&amp;rft.date=2020-02-17&amp;rft.aulast=Daniels&amp;rft.aufirst=Lauren+Drewes&amp;rft_id=https%3A%2F%2Fwww.dallasobserver.com%2Frestaurants%2F100-burgers-a-plane-ride-away-from-dallas-11870397&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3A%24100+hamburger"></span></span>
</li>
<li id="cite_note-3"><span><b><a href="#cite_ref-3">^</a></b></span> <span><cite><a rel="nofollow" href="https://sancarlosflight.com/fleet/">"Fleet Aircraft"</a>. <i>San Carlos Flight Center</i><span>. Retrieved <span>2020-04-29</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=San+Carlos+Flight+Center&amp;rft.atitle=Fleet+Aircraft&amp;rft_id=https%3A%2F%2Fsancarlosflight.com%2Ffleet%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3A%24100+hamburger"></span></span>
</li>
<li id="cite_note-4"><span><b><a href="#cite_ref-4">^</a></b></span> <span><cite><a rel="nofollow" href="https://web.archive.org/web/20220523194457/https://flights-inc.com/fleet.asp?cat=0">"Flights Inc. - Flight Training and Aircraft Rental"</a>. <i>www.flights-inc.com</i>. Archived from <a rel="nofollow" href="http://www.flights-inc.com/fleet.asp?cat=0">the original</a> on 2022-05-23<span>. Retrieved <span>2017-06-02</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=www.flights-inc.com&amp;rft.atitle=Flights+Inc.+-+Flight+Training+and+Aircraft+Rental&amp;rft_id=http%3A%2F%2Fwww.flights-inc.com%2Ffleet.asp%3Fcat%3D0&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3A%24100+hamburger"></span></span>
</li>
<li id="cite_note-5"><span><b><a href="#cite_ref-5">^</a></b></span> <span><cite><a rel="nofollow" href="https://web.archive.org/web/20110217035257/http://royalaeroclubwa.com.au/club-flying/commemorative-flights"><i>Royal Aero Club of Western Australia - Commemorative Flights</i></a>, 2011-01-30, archived from <a rel="nofollow" href="http://www.royalaeroclubwa.com.au/club-flying/commemorative-flights">the original</a> on 2011-02-17</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Royal+Aero+Club+of+Western+Australia+-+Commemorative+Flights&amp;rft.date=2011-01-30&amp;rft_id=http%3A%2F%2Fwww.royalaeroclubwa.com.au%2Fclub-flying%2Fcommemorative-flights&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3A%24100+hamburger"></span></span>
</li>
</ol></div>

<!-- 
NewPP limit report
Parsed by mw‐web.eqiad.main‐5c65c9987f‐4cwz4
Cached time: 20250614114711
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1]
CPU time usage: 0.251 seconds
Real time usage: 0.342 seconds
Preprocessor visited node count: 726/1000000
Revision size: 2605/2097152 bytes
Post‐expand include size: 15639/2097152 bytes
Template argument size: 789/2097152 bytes
Highest expansion depth: 12/100
Expensive parser function count: 1/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 23697/5000000 bytes
Lua time usage: 0.176/10.000 seconds
Lua memory usage: 4840126/52428800 bytes
Number of Wikibase entities loaded: 0/500
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  317.287      1 -total
 34.01%  107.899      1 Template:Reflist
 24.74%   78.500      1 Template:Aviation-stub
 24.17%   76.680      1 Template:Asbox
 22.81%   72.380      1 Template:Cite_news
 20.06%   63.654      1 Template:Short_description
 11.40%   36.183      2 Template:When
 11.19%   35.502      2 Template:Pagetype
 10.00%   31.742      1 Template:Fix
  8.79%   27.891      1 Template:Wikt
-->

<!-- Saved in parser cache with key enwiki:pcache:1828689:|#|:idhash:canonical and timestamp 20250614114711 and revision id 1295543766. Rendering was triggered because: page-view
 -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SIMD-friendly algorithms for substring searching (139 pts)]]></title>
            <link>http://0x80.pl/notesen/2016-11-28-simd-strfind.html</link>
            <guid>44274001</guid>
            <pubDate>Sat, 14 Jun 2025 03:31:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://0x80.pl/notesen/2016-11-28-simd-strfind.html">http://0x80.pl/notesen/2016-11-28-simd-strfind.html</a>, See on <a href="https://news.ycombinator.com/item?id=44274001">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="simd-friendly-algorithms-for-substring-searching">

<table>
<colgroup><col>
<col>
</colgroup><tbody>
<tr><th>Author:</th>
<td>Wojciech Muła</td></tr>
<tr><th>Added on:</th><td>2016-11-28</td>
</tr>
<tr><th>Updated on:</th><td>2018-02-14 (spelling), 2017-04-29 (ARMv8 results)</td>
</tr>
</tbody>
</table>
<div id="introduction">
<h2>Introduction</h2>
<p>Popular programming languages provide methods or functions which locate a
substring in a given string. In C it is the function <tt>strstr</tt>, the C++
class <tt><span>std::string</span></tt> has the method <tt>find</tt>, Python's <tt>string</tt> has methods
<tt>pos</tt> and <tt>index</tt>, and so on, so forth. All these APIs were designed for
<strong>one-shot searches</strong>.  During past decades several algorithms to solve this
problem were designed, an excellent page by <strong>Christian Charras</strong> and
<strong>Thierry Lecroq</strong> <a href="http://www-igm.univ-mlv.fr/~lecroq/string/">lists most of them</a> (if not all). Basically these
algorithms could be split into two major categories: (1) based on
Deterministic Finite Automaton, like Knuth-Morris-Pratt, Boyer Moore, etc.,
and (2) based on a simple comparison, like the Karp-Rabin algorithm.</p>
<p>The main problem with these standard algorithms is a silent assumption
that comparing a pair of characters, looking up in an extra table and
conditions are cheap, while comparing two substrings is expansive.</p>
<p>But current desktop CPUs do not meet this assumption, in particular:</p>
<ul>
<li>There is no difference in comparing one, two, four or 8 bytes on a 64-bit
CPU.  When a processor supports SIMD instructions, then comparing vectors
(it means 16, 32 or even 64 bytes) is as cheap as comparing a single byte.</li>
<li>Thus comparing short sequences of chars can be faster than fancy algorithms
which avoids such comparison.</li>
<li>Looking up in a table costs one memory fetch, so at least a L1 cache round
(~3 cycles). Reading char-by-char also cost as much cycles.</li>
<li>Mispredicted jumps cost several cycles of penalty (~10-20 cycles).</li>
<li>There is a short chain of dependencies: read char, compare it, conditionally
jump, which make hard to utilize out-of-order execution capabilities present
in a CPU.</li>
</ul>
<div id="contents">
<p>Contents</p>
<ul>
<li><a href="#introduction" id="toc-entry-1">Introduction</a></li>
<li><a href="#solution" id="toc-entry-2">Solution</a></li>
<li><a href="#algorithm-1-generic-simd" id="toc-entry-3">Algorithm 1: Generic SIMD</a><ul>
<li><a href="#algorithm" id="toc-entry-4">Algorithm</a><ul>
<li><a href="#example" id="toc-entry-5">Example</a></li>
<li><a href="#first-and-last" id="toc-entry-6">First and last?</a></li>
</ul>
</li>
<li><a href="#implementation" id="toc-entry-7">Implementation</a><ul>
<li><a href="#sse-avx2" id="toc-entry-8">SSE &amp; AVX2</a></li>
<li><a href="#swar" id="toc-entry-9">SWAR</a></li>
<li><a href="#avx512f" id="toc-entry-10">AVX512F</a></li>
<li><a href="#arm-neon-32-bit-code" id="toc-entry-11">ARM Neon (32 bit code)</a></li>
<li><a href="#aarch64-64-bit-code" id="toc-entry-12">AArch64 (64 bit code)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#algorithm-2-sse-specific-mpsadbw" id="toc-entry-13">Algorithm 2: SSE-specific (MPSADBW)</a><ul>
<li><a href="#algorithm-1" id="toc-entry-14">Algorithm</a></li>
<li><a href="#implementation-1" id="toc-entry-15">Implementation</a><ul>
<li><a href="#sse" id="toc-entry-16">SSE</a></li>
<li><a href="#avx512f-1" id="toc-entry-17">AVX512F</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#algorithm-3-sse4-2-specific-pcmpestrm" id="toc-entry-18">Algorithm 3: SSE4.2-specific (PCMPESTRM)</a><ul>
<li><a href="#algorithm-2" id="toc-entry-19">Algorithm</a></li>
<li><a href="#implementation-2" id="toc-entry-20">Implementation</a><ul>
<li><a href="#sse-1" id="toc-entry-21">SSE</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#performance-results" id="toc-entry-22">Performance results</a><ul>
<li><a href="#x64-computers" id="toc-entry-23">x64 computers</a></li>
<li><a href="#arm-computers" id="toc-entry-24">ARM computers</a></li>
<li><a href="#conclusions-and-remarks" id="toc-entry-25">Conclusions and remarks</a></li>
</ul>
</li>
<li><a href="#acknowledgments" id="toc-entry-26">Acknowledgments</a></li>
<li><a href="#source-code" id="toc-entry-27">Source code</a></li>
<li><a href="#history" id="toc-entry-28">History</a></li>
</ul>
</div>
</div>
<div id="solution">
<h2>Solution</h2>
<p>This article shows two approaches utilizing SIMD instructions which I've
already described in <a href="http://0x80.pl/notesen/2014-03-11-simd-friendly-karp-rabin.html">SIMD-friendly Rabin-Karp modification</a> and <a href="http://0x80.pl/notesen/2008-05-27-sse4-substring-locate.html">SSE4
string search — modification of Karp-Rabin algorithm</a>.  I merged the
articles, compared these two methods and extended material.  Article shows
also performance results for various implementations, ranging from
<a href="http://en.wikipedia.org/wiki/SWAR">SWAR</a> to AVX512F.</p>
<p>The Karp-Rabin algorithm does the exact substring comparison whenever <strong>weak
hashes</strong> are equal. One hash is calculated just once for searched substring,
and another one is calculated for string's portion; in every iteration the
second hash is updated at small cost. Following code shows the idea:</p>
<pre><span>k</span>  <span>:=</span> <span>substring</span> <span>length</span>
<span>h1</span> <span>:=</span> <span>hash</span><span>(</span><span>substring</span><span>)</span>
<span>h2</span> <span>:=</span> <span>hash</span><span>(</span><span>string</span><span>[</span><span>i</span> <span>..</span> <span>i</span> <span>+</span> <span>k</span><span>])</span>
<span>for</span> <span>i</span> <span>in</span> <span>0</span> <span>..</span> <span>n</span> <span>-</span> <span>k</span> <span>loop</span>
    <span>if</span> <span>h1</span> <span>==</span> <span>h2</span> <span>then</span>
        <span>if</span> <span>substring</span> <span>==</span> <span>string</span><span>[</span><span>i</span> <span>..</span> <span>i</span> <span>+</span> <span>k</span><span>]</span> <span>then</span>
            <span>return</span> <span>i</span>
        <span>end</span> <span>if</span>
    <span>end</span> <span>if</span>

    <span>h</span> <span>=</span> <span>next_hash</span><span>(</span><span>h</span><span>,</span> <span>...</span><span>)</span> <span>#</span> <span>this</span> <span>meant</span> <span>to</span> <span>be</span> <span>cheap</span>
<span>end</span> <span>loop</span>
</pre>
<p>SIMD solutions replace the hash predicate with <strong>a vector predicate</strong>, which
is calculated in parallel and, hopefully, is calculated fast.  For each
"true" element of the predicate vector an exact comparison of substrings is
performed.</p>
<p>This is one source of improvement, another is a careful implementation.
A generic implementation calls a function like <tt>memcmp</tt> to compare
substrings.  But while we know the length of searched substring, we may
provide specialisations for certain lengths, where a subprocedure call
is replaced by a few CPU instructions, even just one. Thanks to that
the cost of calling the procedure and all internal <tt>memcmp</tt> costs are
simply ridden off.</p>
</div>
<div id="algorithm-1-generic-simd">
<h2>Algorithm 1: Generic SIMD</h2>
<div id="algorithm">
<h2>Algorithm</h2>
<p>This algorithm is suitable for all SIMD instruction sets and also SWAR approach.  It
uses as a predicate equality of <strong>the first</strong> and <strong>the last</strong> characters from the
substring.</p>
<p>These two characters are populated in two registers, <strong>F</strong> and <strong>L</strong>
respectively.  Then in each iteration two chunks of strings are loaded.  The
first chunk (<strong>A</strong>) is read from offset <tt>i</tt> (where <tt>i</tt> is the current
offset) and the second chunk (<strong>B</strong>) is read from offset <tt>i + k - 1</tt>, where
<tt>k</tt> is substring's length.</p>
<p>Then we compute a vector expression <tt>F == A and B == L</tt>. This step yields a
byte vector (or a bit mask), where "true" values denote position of potential
substring occurrences.  Finally, just at these positions an exact comparisons of
substrings are performed.</p>
<div id="example">
<h3>Example</h3>
<p>Let's assume 8-byte registers. We're searching for word "cat", thus:</p>
<pre>F    = [ c | c | c | c | c | c | c | c ]
L    = [ t | t | t | t | t | t | t | t ]
</pre>
<p>We're searching in the string "a_cat_tries". In the first iteration the register
<strong>A</strong> gets data from offset 0, <strong>B</strong> from offset 2:</p>
<pre>A    = [ a | _ | c | a | t | _ | t | r ]
B    = [ c | a | t | _ | t | r | i | e ]
</pre>
<p>Now we compare:</p>
<pre>AF   = (A == F)
     = [ 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 ]

BL   = (B == L)
     = [ 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 ]
</pre>
<p>After merging comparison results, i.e. <tt>AF &amp; BL</tt>, we get following mask:</p>
<pre>mask = [ 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 ]
</pre>
<p>Since the mask is non-zero, it means there are possible substring occurrences.
As we see, there is only one non-zero element at index 2, thus only one
substring comparison must be performed.</p>
</div>
<div id="first-and-last">
<h3>First and last?</h3>
<p>Choosing the first and the last character from a substring is not always a
wise decision. Consider following scenario: a string contains mostly 'A'
characters, and a user wants to find "AjohndoeA" — in such situation the
number of char-wise would be large.</p>
<p>In order to prevent such situations an implementation can pick "last" character
as the farthest character not equal to the first one. If there is no such
character, it means that all characters in substring are the same (for example
"AAAAA"). A specialised procedure may be used to handle such patterns.</p>
</div>
</div>
<div id="implementation">
<h2>Implementation</h2>
<div id="sse-avx2">
<h3>SSE &amp; AVX2</h3>
<p>Both SSE and AVX2 versions are practically the same, and both use the
minimum number of instruction. Below is a generic AVX2 version.</p>
<p>It's worth to note that since we already know that the first and the last
characters match, we don't need to compare them again with <tt>memcmp</tt>.</p>
<pre><span>size_t</span><span> </span><span>avx2_strstr_anysize</span><span>(</span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>s</span><span>,</span><span> </span><span>size_t</span><span> </span><span>n</span><span>,</span><span> </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>needle</span><span>,</span><span> </span><span>size_t</span><span> </span><span>k</span><span>)</span><span> </span><span>{</span><span>

    </span><span>const</span><span> </span><span>__m256i</span><span> </span><span>first</span><span> </span><span>=</span><span> </span><span>_mm256_set1_epi8</span><span>(</span><span>needle</span><span>[</span><span>0</span><span>]);</span><span>
    </span><span>const</span><span> </span><span>__m256i</span><span> </span><span>last</span><span>  </span><span>=</span><span> </span><span>_mm256_set1_epi8</span><span>(</span><span>needle</span><span>[</span><span>k</span><span> </span><span>-</span><span> </span><span>1</span><span>]);</span><span>

    </span><span>for</span><span> </span><span>(</span><span>size_t</span><span> </span><span>i</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span> </span><span>i</span><span> </span><span>&lt;</span><span> </span><span>n</span><span>;</span><span> </span><span>i</span><span> </span><span>+=</span><span> </span><span>32</span><span>)</span><span> </span><span>{</span><span>

        </span><span>const</span><span> </span><span>__m256i</span><span> </span><span>block_first</span><span> </span><span>=</span><span> </span><span>_mm256_loadu_si256</span><span>(</span><span>reinterpret_cast</span><span>&lt;</span><span>const</span><span> </span><span>__m256i</span><span>*&gt;</span><span>(</span><span>s</span><span> </span><span>+</span><span> </span><span>i</span><span>));</span><span>
        </span><span>const</span><span> </span><span>__m256i</span><span> </span><span>block_last</span><span>  </span><span>=</span><span> </span><span>_mm256_loadu_si256</span><span>(</span><span>reinterpret_cast</span><span>&lt;</span><span>const</span><span> </span><span>__m256i</span><span>*&gt;</span><span>(</span><span>s</span><span> </span><span>+</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>1</span><span>));</span><span>

        </span><span>const</span><span> </span><span>__m256i</span><span> </span><span>eq_first</span><span> </span><span>=</span><span> </span><span>_mm256_cmpeq_epi8</span><span>(</span><span>first</span><span>,</span><span> </span><span>block_first</span><span>);</span><span>
        </span><span>const</span><span> </span><span>__m256i</span><span> </span><span>eq_last</span><span>  </span><span>=</span><span> </span><span>_mm256_cmpeq_epi8</span><span>(</span><span>last</span><span>,</span><span> </span><span>block_last</span><span>);</span><span>

        </span><span>uint32_t</span><span> </span><span>mask</span><span> </span><span>=</span><span> </span><span>_mm256_movemask_epi8</span><span>(</span><span>_mm256_and_si256</span><span>(</span><span>eq_first</span><span>,</span><span> </span><span>eq_last</span><span>));</span><span>

        </span><span>while</span><span> </span><span>(</span><span>mask</span><span> </span><span>!=</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>

            </span><span>const</span><span> </span><span>auto</span><span> </span><span>bitpos</span><span> </span><span>=</span><span> </span><span>bits</span><span>::</span><span>get_first_bit_set</span><span>(</span><span>mask</span><span>);</span><span>

            </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>s</span><span> </span><span>+</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>bitpos</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>2</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                </span><span>return</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>bitpos</span><span>;</span><span>
            </span><span>}</span><span>

            </span><span>mask</span><span> </span><span>=</span><span> </span><span>bits</span><span>::</span><span>clear_leftmost_set</span><span>(</span><span>mask</span><span>);</span><span>
        </span><span>}</span><span>
    </span><span>}</span><span>

    </span><span>return</span><span> </span><span>std</span><span>::</span><span>string</span><span>::</span><span>npos</span><span>;</span><span>
</span><span>}</span>
</pre>
</div>
<div id="swar">
<h3>SWAR</h3>
<p>In SWAR approach, comparison for equality uses bit xor operation, which yields zero when
two bytes are equal. Therefore instead of anding partial results, the bitwise
or is used. Clearly this part of algorithm has the same complexity as the
SSE/AVX2 code.</p>
<p>However, SWAR requires more effort to locate zero bytes. Following procedure
calculates <strong>an exact byte mask</strong>, where MSBs of <tt>zeros</tt> are set when the
corresponding byte in <tt>x</tt> is zero.</p>
<pre><span>// 7th bit set if lower 7 bits are zero
</span><span>const</span><span> </span><span>uint64_t</span><span> </span><span>t0</span><span> </span><span>=</span><span> </span><span>(</span><span>~</span><span>x</span><span> </span><span>&amp;</span><span> </span><span>0x7f7f7f7f7f7f7f7fllu</span><span>)</span><span> </span><span>+</span><span> </span><span>0x0101010101010101llu</span><span>;</span><span>
</span><span>// 7th bit set if 7th bit is zero
</span><span>const</span><span> </span><span>uint64_t</span><span> </span><span>t1</span><span> </span><span>=</span><span> </span><span>(</span><span>~</span><span>x</span><span> </span><span>&amp;</span><span> </span><span>0x8080808080808080llu</span><span>);</span><span>
</span><span>uint64_t</span><span> </span><span>zeros</span><span> </span><span>=</span><span> </span><span>t0</span><span> </span><span>&amp;</span><span> </span><span>t1</span><span>;</span>
</pre>
<p>Below is the C++ implementation for 64-bit vectors. The while loop contains an
additional condition which might look not optimal. But searching the first set
bit and later clearing it (as the SSE version does) is slower.</p>
<pre><span>size_t</span><span> </span><span>swar64_strstr_anysize</span><span>(</span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>s</span><span>,</span><span> </span><span>size_t</span><span> </span><span>n</span><span>,</span><span> </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>needle</span><span>,</span><span> </span><span>size_t</span><span> </span><span>k</span><span>)</span><span> </span><span>{</span><span>

    </span><span>const</span><span> </span><span>uint64_t</span><span> </span><span>first</span><span> </span><span>=</span><span> </span><span>0x0101010101010101llu</span><span> </span><span>*</span><span> </span><span>static_cast</span><span>&lt;</span><span>uint8_t</span><span>&gt;</span><span>(</span><span>needle</span><span>[</span><span>0</span><span>]);</span><span>
    </span><span>const</span><span> </span><span>uint64_t</span><span> </span><span>last</span><span>  </span><span>=</span><span> </span><span>0x0101010101010101llu</span><span> </span><span>*</span><span> </span><span>static_cast</span><span>&lt;</span><span>uint8_t</span><span>&gt;</span><span>(</span><span>needle</span><span>[</span><span>k</span><span> </span><span>-</span><span> </span><span>1</span><span>]);</span><span>

    </span><span>uint64_t</span><span>*</span><span> </span><span>block_first</span><span> </span><span>=</span><span> </span><span>reinterpret_cast</span><span>&lt;</span><span>uint64_t</span><span>*&gt;</span><span>(</span><span>const_cast</span><span>&lt;</span><span>char</span><span>*&gt;</span><span>(</span><span>s</span><span>));</span><span>
    </span><span>uint64_t</span><span>*</span><span> </span><span>block_last</span><span>  </span><span>=</span><span> </span><span>reinterpret_cast</span><span>&lt;</span><span>uint64_t</span><span>*&gt;</span><span>(</span><span>const_cast</span><span>&lt;</span><span>char</span><span>*&gt;</span><span>(</span><span>s</span><span> </span><span>+</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>1</span><span>));</span><span>

    </span><span>for</span><span> </span><span>(</span><span>auto</span><span> </span><span>i</span><span>=</span><span>0u</span><span>;</span><span> </span><span>i</span><span> </span><span>&lt;</span><span> </span><span>n</span><span>;</span><span> </span><span>i</span><span>+=</span><span>8</span><span>,</span><span> </span><span>block_first</span><span>++</span><span>,</span><span> </span><span>block_last</span><span>++</span><span>)</span><span> </span><span>{</span><span>
        </span><span>const</span><span> </span><span>uint64_t</span><span> </span><span>eq</span><span> </span><span>=</span><span> </span><span>(</span><span>*</span><span>block_first</span><span> </span><span>^</span><span> </span><span>first</span><span>)</span><span> </span><span>|</span><span> </span><span>(</span><span>*</span><span>block_last</span><span> </span><span>^</span><span> </span><span>last</span><span>);</span><span>

        </span><span>const</span><span> </span><span>uint64_t</span><span> </span><span>t0</span><span> </span><span>=</span><span> </span><span>(</span><span>~</span><span>eq</span><span> </span><span>&amp;</span><span> </span><span>0x7f7f7f7f7f7f7f7fllu</span><span>)</span><span> </span><span>+</span><span> </span><span>0x0101010101010101llu</span><span>;</span><span>
        </span><span>const</span><span> </span><span>uint64_t</span><span> </span><span>t1</span><span> </span><span>=</span><span> </span><span>(</span><span>~</span><span>eq</span><span> </span><span>&amp;</span><span> </span><span>0x8080808080808080llu</span><span>);</span><span>
        </span><span>uint64_t</span><span> </span><span>zeros</span><span> </span><span>=</span><span> </span><span>t0</span><span> </span><span>&amp;</span><span> </span><span>t1</span><span>;</span><span>
        </span><span>size_t</span><span> </span><span>j</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span>

        </span><span>while</span><span> </span><span>(</span><span>zeros</span><span>)</span><span> </span><span>{</span><span>
            </span><span>if</span><span> </span><span>(</span><span>zeros</span><span> </span><span>&amp;</span><span> </span><span>0x80</span><span>)</span><span> </span><span>{</span><span>
                </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>substr</span><span> </span><span>=</span><span> </span><span>reinterpret_cast</span><span>&lt;</span><span>char</span><span>*&gt;</span><span>(</span><span>block_first</span><span>)</span><span> </span><span>+</span><span> </span><span>j</span><span> </span><span>+</span><span> </span><span>1</span><span>;</span><span>
                </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>substr</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>2</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                    </span><span>return</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>j</span><span>;</span><span>
                </span><span>}</span><span>
            </span><span>}</span><span>

            </span><span>zeros</span><span> </span><span>&gt;&gt;=</span><span> </span><span>8</span><span>;</span><span>
            </span><span>j</span><span> </span><span>+=</span><span> </span><span>1</span><span>;</span><span>
        </span><span>}</span><span>
    </span><span>}</span><span>

    </span><span>return</span><span> </span><span>std</span><span>::</span><span>string</span><span>::</span><span>npos</span><span>;</span><span>
</span><span>}</span>
</pre>
</div>
<div id="avx512f">
<h3>AVX512F</h3>
<p>AVX512F lacks of operations on bytes, the smallest vector item is a
32-bit word. The limitation forces us to use SWAR techniques.</p>
<ol>
<li>Using AVX512F instructions we compare two vectors, like in SWAR version,
i.e. two xors joined with bitwise or.
There is only one difference, a single <a href="http://0x80.pl/notesen/2015-03-22-avx512-ternary-functions.html">ternary logic instruction</a>
expresses one xor and bitwise or.</li>
<li>Using AVX512F instructions we locate which 32-bit elements
contain any zero byte.</li>
<li>Then for such 32-bit element check four substrings for equality.</li>
</ol>
<p>Unlike the SWAR procedure, where we need a precise mask for zero bytes, an
AVX512F procedure requires just information "a word has zero byte".  A
simpler algorithm, described in <a href="https://graphics.stanford.edu/~seander/bithacks.html">Bit Twiddling Hacks</a> is used; below
is its C++ implementation.</p>
<pre><span>__mmask16</span><span> </span><span>zero_byte_mask</span><span>(</span><span>const</span><span> </span><span>__m512i</span><span> </span><span>v</span><span>)</span><span> </span><span>{</span><span>

    </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>v01</span><span>  </span><span>=</span><span> </span><span>_mm512_set1_epi32</span><span>(</span><span>0x01010101u</span><span>);</span><span>
    </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>v80</span><span>  </span><span>=</span><span> </span><span>_mm512_set1_epi32</span><span>(</span><span>0x80808080u</span><span>);</span><span>

    </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>v1</span><span>   </span><span>=</span><span> </span><span>_mm512_sub_epi32</span><span>(</span><span>v</span><span>,</span><span> </span><span>v01</span><span>);</span><span>
    </span><span>// tmp1 = (v - 0x01010101) &amp; ~v &amp; 0x80808080
</span><span>    </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>tmp1</span><span> </span><span>=</span><span> </span><span>_mm512_ternarylogic_epi32</span><span>(</span><span>v1</span><span>,</span><span> </span><span>v</span><span>,</span><span> </span><span>v80</span><span>,</span><span> </span><span>0x20</span><span>);</span><span>

    </span><span>return</span><span> </span><span>_mm512_test_epi32_mask</span><span>(</span><span>tmp1</span><span>,</span><span> </span><span>tmp1</span><span>);</span><span>
</span><span>}</span>
</pre>
<p>Generic C++ implementation.</p>
<pre><span>#define _mm512_set1_epu8(c) _mm512_set1_epi32(uint32_t(c) * 0x01010101u)
</span><span>
</span><span>size_t</span><span> </span><span>avx512f_strstr_v2_anysize</span><span>(</span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>string</span><span>,</span><span> </span><span>size_t</span><span> </span><span>n</span><span>,</span><span> </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>needle</span><span>,</span><span> </span><span>size_t</span><span> </span><span>k</span><span>)</span><span> </span><span>{</span><span>

    </span><span>assert</span><span>(</span><span>n</span><span> </span><span>&gt;</span><span> </span><span>0</span><span>);</span><span>
    </span><span>assert</span><span>(</span><span>k</span><span> </span><span>&gt;</span><span> </span><span>0</span><span>);</span><span>

    </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>first</span><span> </span><span>=</span><span> </span><span>_mm512_set1_epu8</span><span>(</span><span>needle</span><span>[</span><span>0</span><span>]);</span><span>
    </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>last</span><span>  </span><span>=</span><span> </span><span>_mm512_set1_epu8</span><span>(</span><span>needle</span><span>[</span><span>k</span><span> </span><span>-</span><span> </span><span>1</span><span>]);</span><span>

    </span><span>char</span><span>*</span><span> </span><span>haystack</span><span> </span><span>=</span><span> </span><span>const_cast</span><span>&lt;</span><span>char</span><span>*&gt;</span><span>(</span><span>string</span><span>);</span><span>
    </span><span>char</span><span>*</span><span> </span><span>end</span><span>      </span><span>=</span><span> </span><span>haystack</span><span> </span><span>+</span><span> </span><span>n</span><span>;</span><span>

    </span><span>for</span><span> </span><span>(</span><span>/**/</span><span>;</span><span> </span><span>haystack</span><span> </span><span>&lt;</span><span> </span><span>end</span><span>;</span><span> </span><span>haystack</span><span> </span><span>+=</span><span> </span><span>64</span><span>)</span><span> </span><span>{</span><span>

        </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>block_first</span><span> </span><span>=</span><span> </span><span>_mm512_loadu_si512</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>0</span><span>);</span><span>
        </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>block_last</span><span>  </span><span>=</span><span> </span><span>_mm512_loadu_si512</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>1</span><span>);</span><span>

        </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>first_zeros</span><span> </span><span>=</span><span> </span><span>_mm512_xor_si512</span><span>(</span><span>block_first</span><span>,</span><span> </span><span>first</span><span>);</span><span>
        </span><span>// zeros = first_zeros | (block_last ^ last)
</span><span>        </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>zeros</span><span> </span><span>=</span><span> </span><span>_mm512_ternarylogic_epi32</span><span>(</span><span>first_zeros</span><span>,</span><span> </span><span>block_last</span><span>,</span><span> </span><span>last</span><span>,</span><span> </span><span>0xf6</span><span>);</span><span>

        </span><span>uint32_t</span><span> </span><span>mask</span><span> </span><span>=</span><span> </span><span>zero_byte_mask</span><span>(</span><span>zeros</span><span>);</span><span>
        </span><span>while</span><span> </span><span>(</span><span>mask</span><span>)</span><span> </span><span>{</span><span>

            </span><span>const</span><span> </span><span>uint64_t</span><span> </span><span>p</span><span> </span><span>=</span><span> </span><span>__builtin_ctz</span><span>(</span><span>mask</span><span>);</span><span>

            </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>4</span><span>*</span><span>p</span><span> </span><span>+</span><span> </span><span>0</span><span>,</span><span> </span><span>needle</span><span>,</span><span> </span><span>k</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                </span><span>return</span><span> </span><span>(</span><span>haystack</span><span> </span><span>-</span><span> </span><span>string</span><span>)</span><span> </span><span>+</span><span> </span><span>4</span><span>*</span><span>p</span><span> </span><span>+</span><span> </span><span>0</span><span>;</span><span>
            </span><span>}</span><span>

            </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>4</span><span>*</span><span>p</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>needle</span><span>,</span><span> </span><span>k</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                </span><span>return</span><span> </span><span>(</span><span>haystack</span><span> </span><span>-</span><span> </span><span>string</span><span>)</span><span> </span><span>+</span><span> </span><span>4</span><span>*</span><span>p</span><span> </span><span>+</span><span> </span><span>1</span><span>;</span><span>
            </span><span>}</span><span>

            </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>4</span><span>*</span><span>p</span><span> </span><span>+</span><span> </span><span>2</span><span>,</span><span> </span><span>needle</span><span>,</span><span> </span><span>k</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                </span><span>return</span><span> </span><span>(</span><span>haystack</span><span> </span><span>-</span><span> </span><span>string</span><span>)</span><span> </span><span>+</span><span> </span><span>4</span><span>*</span><span>p</span><span> </span><span>+</span><span> </span><span>2</span><span>;</span><span>
            </span><span>}</span><span>

            </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>4</span><span>*</span><span>p</span><span> </span><span>+</span><span> </span><span>3</span><span>,</span><span> </span><span>needle</span><span>,</span><span> </span><span>k</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                </span><span>return</span><span> </span><span>(</span><span>haystack</span><span> </span><span>-</span><span> </span><span>string</span><span>)</span><span> </span><span>+</span><span> </span><span>4</span><span>*</span><span>p</span><span> </span><span>+</span><span> </span><span>3</span><span>;</span><span>
            </span><span>}</span><span>

            </span><span>mask</span><span> </span><span>=</span><span> </span><span>bits</span><span>::</span><span>clear_leftmost_set</span><span>(</span><span>mask</span><span>);</span><span>
        </span><span>}</span><span>
    </span><span>}</span><span>

    </span><span>return</span><span> </span><span>size_t</span><span>(</span><span>-1</span><span>);</span><span>
</span><span>}</span>
</pre>
</div>
<div id="arm-neon-32-bit-code">
<h3>ARM Neon (32 bit code)</h3>
<p>The algorithm can be also easily realised using ARM Neon instructions, having
128-bit SIMD registers.  The only problem is caused by long round trip from
the Neon unit back to the CPU.</p>
<p>It was solved by saving back the comparison result in a 64 bit word in memory:
lower nibbles come from the lower half of a SIMD register, likewise higher
nibbles come from the higher half of the register.</p>
<p>Comparison is done in two loops, separately for lower and higher nibbles.
This split is required to detect substring occurrences in the correct order.</p>
<p>Below is a sample implementation.</p>
<pre><span>size_t</span><span> </span><span>FORCE_INLINE</span><span> </span><span>neon_strstr_anysize</span><span>(</span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>s</span><span>,</span><span> </span><span>size_t</span><span> </span><span>n</span><span>,</span><span> </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>needle</span><span>,</span><span> </span><span>size_t</span><span> </span><span>k</span><span>)</span><span> </span><span>{</span><span>

    </span><span>assert</span><span>(</span><span>k</span><span> </span><span>&gt;</span><span> </span><span>0</span><span>);</span><span>
    </span><span>assert</span><span>(</span><span>n</span><span> </span><span>&gt;</span><span> </span><span>0</span><span>);</span><span>

    </span><span>const</span><span> </span><span>uint8x16_t</span><span> </span><span>first</span><span> </span><span>=</span><span> </span><span>vdupq_n_u8</span><span>(</span><span>needle</span><span>[</span><span>0</span><span>]);</span><span>
    </span><span>const</span><span> </span><span>uint8x16_t</span><span> </span><span>last</span><span>  </span><span>=</span><span> </span><span>vdupq_n_u8</span><span>(</span><span>needle</span><span>[</span><span>k</span><span> </span><span>-</span><span> </span><span>1</span><span>]);</span><span>
    </span><span>const</span><span> </span><span>uint8x8_t</span><span>  </span><span>half</span><span>  </span><span>=</span><span> </span><span>vdup_n_u8</span><span>(</span><span>0x0f</span><span>);</span><span>

    </span><span>const</span><span> </span><span>uint8_t</span><span>*</span><span> </span><span>ptr</span><span> </span><span>=</span><span> </span><span>reinterpret_cast</span><span>&lt;</span><span>const</span><span> </span><span>uint8_t</span><span>*&gt;</span><span>(</span><span>s</span><span>);</span><span>

    </span><span>union</span><span> </span><span>{</span><span>
        </span><span>uint8_t</span><span>  </span><span>tmp</span><span>[</span><span>8</span><span>];</span><span>
        </span><span>uint32_t</span><span> </span><span>word</span><span>[</span><span>2</span><span>];</span><span>
    </span><span>};</span><span>

    </span><span>for</span><span> </span><span>(</span><span>size_t</span><span> </span><span>i</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span> </span><span>i</span><span> </span><span>&lt;</span><span> </span><span>n</span><span>;</span><span> </span><span>i</span><span> </span><span>+=</span><span> </span><span>16</span><span>)</span><span> </span><span>{</span><span>

        </span><span>const</span><span> </span><span>uint8x16_t</span><span> </span><span>block_first</span><span> </span><span>=</span><span> </span><span>vld1q_u8</span><span>(</span><span>ptr</span><span> </span><span>+</span><span> </span><span>i</span><span>);</span><span>
        </span><span>const</span><span> </span><span>uint8x16_t</span><span> </span><span>block_last</span><span>  </span><span>=</span><span> </span><span>vld1q_u8</span><span>(</span><span>ptr</span><span> </span><span>+</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>1</span><span>);</span><span>

        </span><span>const</span><span> </span><span>uint8x16_t</span><span> </span><span>eq_first</span><span> </span><span>=</span><span> </span><span>vceqq_u8</span><span>(</span><span>first</span><span>,</span><span> </span><span>block_first</span><span>);</span><span>
        </span><span>const</span><span> </span><span>uint8x16_t</span><span> </span><span>eq_last</span><span>  </span><span>=</span><span> </span><span>vceqq_u8</span><span>(</span><span>last</span><span>,</span><span> </span><span>block_last</span><span>);</span><span>
        </span><span>const</span><span> </span><span>uint8x16_t</span><span> </span><span>pred_16</span><span>  </span><span>=</span><span> </span><span>vandq_u8</span><span>(</span><span>eq_first</span><span>,</span><span> </span><span>eq_last</span><span>);</span><span>
        </span><span>const</span><span> </span><span>uint8x8_t</span><span> </span><span>pred_8</span><span>    </span><span>=</span><span> </span><span>vbsl_u8</span><span>(</span><span>half</span><span>,</span><span> </span><span>vget_low_u8</span><span>(</span><span>pred_16</span><span>),</span><span> </span><span>vget_high_u8</span><span>(</span><span>pred_16</span><span>));</span><span>

        </span><span>vst1_u8</span><span>(</span><span>tmp</span><span>,</span><span> </span><span>pred_8</span><span>);</span><span>

        </span><span>if</span><span> </span><span>((</span><span>word</span><span>[</span><span>0</span><span>]</span><span> </span><span>|</span><span> </span><span>word</span><span>[</span><span>1</span><span>])</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
            </span><span>continue</span><span>;</span><span>
        </span><span>}</span><span>

        </span><span>for</span><span> </span><span>(</span><span>int</span><span> </span><span>j</span><span>=</span><span>0</span><span>;</span><span> </span><span>j</span><span> </span><span>&lt;</span><span> </span><span>8</span><span>;</span><span> </span><span>j</span><span>++</span><span>)</span><span> </span><span>{</span><span>
            </span><span>if</span><span> </span><span>(</span><span>tmp</span><span>[</span><span>j</span><span>]</span><span> </span><span>&amp;</span><span> </span><span>0x0f</span><span>)</span><span> </span><span>{</span><span>
                </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>s</span><span> </span><span>+</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>j</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>2</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                    </span><span>return</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>j</span><span>;</span><span>
                </span><span>}</span><span>
            </span><span>}</span><span>
        </span><span>}</span><span>

        </span><span>for</span><span> </span><span>(</span><span>int</span><span> </span><span>j</span><span>=</span><span>0</span><span>;</span><span> </span><span>j</span><span> </span><span>&lt;</span><span> </span><span>8</span><span>;</span><span> </span><span>j</span><span>++</span><span>)</span><span> </span><span>{</span><span>
            </span><span>if</span><span> </span><span>(</span><span>tmp</span><span>[</span><span>j</span><span>]</span><span> </span><span>&amp;</span><span> </span><span>0xf0</span><span>)</span><span> </span><span>{</span><span>
                </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>s</span><span> </span><span>+</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>j</span><span> </span><span>+</span><span> </span><span>1</span><span> </span><span>+</span><span> </span><span>8</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>2</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                    </span><span>return</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>j</span><span> </span><span>+</span><span> </span><span>8</span><span>;</span><span>
                </span><span>}</span><span>
            </span><span>}</span><span>
        </span><span>}</span><span>
    </span><span>}</span><span>

    </span><span>return</span><span> </span><span>std</span><span>::</span><span>string</span><span>::</span><span>npos</span><span>;</span><span>
</span><span>}</span>
</pre>
<p>It appeared that unrolling the two inner loops brought about 1.2 speedup.</p>
</div>
<div id="aarch64-64-bit-code">
<h3>AArch64 (64 bit code)</h3>
<p>AArch64 code is almost the exact copy of the above ARM Neon procedure.
The only exception is direct reading of SIMD registers lanes, as the
architecture made this operation fast.</p>
</div>
</div>
</div>
<div id="algorithm-2-sse-specific-mpsadbw">
<h2>Algorithm 2: SSE-specific (MPSADBW)</h2>
<div id="algorithm-1">
<h2>Algorithm</h2>
<p>SSE4.1 and AVX2 provide instruction <tt>MPSADBW</tt>, which calculates eight
<a href="http://en.wikipedia.org/wiki/Taxicab_geometry">Manhattan distances</a> (L1) between given 4-byte
sub-vector from one register and eight subsequent 4-byte sub-vector from
second register. The instruction returns vector of eight words (16-bit values).</p>
<p>When two sub-vectors are equal, then the L1 distance is 0, and we may use this
property to locate possible substring locations. In other words <strong>equality of
four leading characters</strong> is used as a predicate.</p>
<p>Albeit it seems to be a stronger predicate than matching the first and the last
characters, a quadratic complexity is unavoidable.  For example, when the
searched string contains one letter "a", and we're looking for "aaaabcde", then
the predicate obviously will be true for all input characters.</p>
<p>If it isn't enough, there are following problems:</p>
<ul>
<li>This method handles substring not shorter than four characters.
Handling three-char substrings is viable, but require additional code.</li>
<li>SSE variant of <tt>MPSADBW</tt> processes only 8 bytes at once, while the
generic SIMD variant uses the whole register.</li>
<li>AVX2 variant of <tt>MPSADBW</tt> works on lanes, i.e. 128-bit helves of
a register rather than the whole 256-bit register. This imposes
additional code to properly load data.</li>
<li>Latency of the instruction is pretty hight — 5 or 7 cycles,
depending on CPU architecture. Luckily throughput is 1 or 2 cycles,
thus unrolling a loop can hide latency.</li>
</ul>
</div>
<div id="implementation-1">
<h2>Implementation</h2>
<div id="sse">
<h3>SSE</h3>
<p>The generic, simplest implementation.</p>
<pre><span>size_t</span><span> </span><span>sse4_strstr_anysize</span><span>(</span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>s</span><span>,</span><span> </span><span>size_t</span><span> </span><span>n</span><span>,</span><span> </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>needle</span><span>,</span><span> </span><span>size_t</span><span> </span><span>needle_size</span><span>)</span><span> </span><span>{</span><span>

    </span><span>const</span><span> </span><span>__m128i</span><span> </span><span>prefix</span><span> </span><span>=</span><span> </span><span>_mm_loadu_si128</span><span>(</span><span>reinterpret_cast</span><span>&lt;</span><span>const</span><span> </span><span>__m128i</span><span>*&gt;</span><span>(</span><span>needle</span><span>));</span><span>
    </span><span>const</span><span> </span><span>__m128i</span><span> </span><span>zeros</span><span>  </span><span>=</span><span> </span><span>_mm_setzero_si128</span><span>();</span><span>

    </span><span>for</span><span> </span><span>(</span><span>size_t</span><span> </span><span>i</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span> </span><span>i</span><span> </span><span>&lt;</span><span> </span><span>n</span><span>;</span><span> </span><span>i</span><span> </span><span>+=</span><span> </span><span>8</span><span>)</span><span> </span><span>{</span><span>

        </span><span>const</span><span> </span><span>__m128i</span><span> </span><span>data</span><span>   </span><span>=</span><span> </span><span>_mm_loadu_si128</span><span>(</span><span>reinterpret_cast</span><span>&lt;</span><span>const</span><span> </span><span>__m128i</span><span>*&gt;</span><span>(</span><span>s</span><span> </span><span>+</span><span> </span><span>i</span><span>));</span><span>
        </span><span>const</span><span> </span><span>__m128i</span><span> </span><span>result</span><span> </span><span>=</span><span> </span><span>_mm_mpsadbw_epu8</span><span>(</span><span>data</span><span>,</span><span> </span><span>prefix</span><span>,</span><span> </span><span>0</span><span>);</span><span>

        </span><span>const</span><span> </span><span>__m128i</span><span> </span><span>cmp</span><span>    </span><span>=</span><span> </span><span>_mm_cmpeq_epi16</span><span>(</span><span>result</span><span>,</span><span> </span><span>zeros</span><span>);</span><span>

        </span><span>unsigned</span><span> </span><span>mask</span><span> </span><span>=</span><span> </span><span>_mm_movemask_epi8</span><span>(</span><span>cmp</span><span>)</span><span> </span><span>&amp;</span><span> </span><span>0x5555</span><span>;</span><span>

        </span><span>while</span><span> </span><span>(</span><span>mask</span><span> </span><span>!=</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>

            </span><span>const</span><span> </span><span>auto</span><span> </span><span>bitpos</span><span> </span><span>=</span><span> </span><span>bits</span><span>::</span><span>get_first_bit_set</span><span>(</span><span>mask</span><span>)</span><span>/</span><span>2</span><span>;</span><span>

            </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>s</span><span> </span><span>+</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>bitpos</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>needle_size</span><span> </span><span>-</span><span> </span><span>4</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                </span><span>return</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>bitpos</span><span>;</span><span>
            </span><span>}</span><span>

            </span><span>mask</span><span> </span><span>=</span><span> </span><span>bits</span><span>::</span><span>clear_leftmost_set</span><span>(</span><span>mask</span><span>);</span><span>
        </span><span>}</span><span>
    </span><span>}</span><span>

    </span><span>return</span><span> </span><span>std</span><span>::</span><span>string</span><span>::</span><span>npos</span><span>;</span><span>
</span><span>}</span>
</pre>
</div>
<div id="avx512f-1">
<h3>AVX512F</h3>
<p>Although AVX512F doesn't support <tt>MPSADBW</tt> (AVX512BW defines it) we still
can use 4-byte prefix equality as a predicate, utilizing fact that 32-bit
elements are natively supported.</p>
<p>In each iteration we generate four AVX512 vectors containing all possible
4-byte prefixes. Example:</p>
<pre>string = "the-cat-tries-to-eat..."

vec0  = [ t | h | e | - ][ c | a | t | - ][ t | r | i | e ][ s | - | t | o ][ ... ]
vec1  = [ h | e | - | c ][ a | t | - | t ][ r | i | e | s ][ - | t | o | - ][ ... ]
vec2  = [ e | - | c | a ][ t | - | t | r ][ i | e | s | - ][ t | o | - | e ][ ... ]
vec3  = [ - | c | a | t ][ - | t | r | i ][ e | s | - | t ][ o | - ] e | a ][ ... ]
</pre>
<p>Vector <tt>vec0</tt> contains prefixes for position 0, 4, 8, 12, ...;
<tt>vec1</tt> — 1, 5, 9, 13, ..., <tt>vec2</tt> — 2, 6, 10, 14, ...;
<tt>vec3</tt> — 3, 7, 11, 15, etc.</p>
<p>Building each vector require two shifts and one bitwise or. In each iteration
four vector comparison are performed and then four bitmasks are examined. This
make a loop, which compares substrings, quite complicated.</p>
<p>Moreover, to properly fill the last elements of vectors we need four bytes
beyond vector.  This is accomplished by having two adjacent vectors per
iterations (one load per iteration is needed, though). Finally, instruction
<tt>VPALIGNR</tt> is used to extract required data.</p>
<pre><span>size_t</span><span> </span><span>avx512f_strstr_long</span><span>(</span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>string</span><span>,</span><span> </span><span>size_t</span><span> </span><span>n</span><span>,</span><span> </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>needle</span><span>,</span><span> </span><span>size_t</span><span> </span><span>k</span><span>)</span><span> </span><span>{</span><span>

    </span><span>__m512i</span><span> </span><span>curr</span><span>;</span><span>
    </span><span>__m512i</span><span> </span><span>next</span><span>;</span><span>
    </span><span>__m512i</span><span> </span><span>v0</span><span>,</span><span> </span><span>v1</span><span>,</span><span> </span><span>v2</span><span>,</span><span> </span><span>v3</span><span>;</span><span>

    </span><span>char</span><span>*</span><span> </span><span>haystack</span><span> </span><span>=</span><span> </span><span>const_cast</span><span>&lt;</span><span>char</span><span>*&gt;</span><span>(</span><span>string</span><span>);</span><span>
    </span><span>char</span><span>*</span><span> </span><span>last</span><span>     </span><span>=</span><span> </span><span>haystack</span><span> </span><span>+</span><span> </span><span>n</span><span>;</span><span>

    </span><span>const</span><span> </span><span>uint32_t</span><span> </span><span>prf</span><span>   </span><span>=</span><span> </span><span>*</span><span>(</span><span>uint32_t</span><span>*</span><span>)</span><span>needle</span><span>;</span><span> </span><span>// the first 4 bytes of needle
</span><span>    </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>prefix</span><span> </span><span>=</span><span> </span><span>_mm512_set1_epi32</span><span>(</span><span>prf</span><span>);</span><span>

    </span><span>next</span><span> </span><span>=</span><span> </span><span>_mm512_loadu_si512</span><span>(</span><span>haystack</span><span>);</span><span>

    </span><span>for</span><span> </span><span>(</span><span>/**/</span><span>;</span><span> </span><span>haystack</span><span> </span><span>&lt;</span><span> </span><span>last</span><span>;</span><span> </span><span>haystack</span><span> </span><span>+=</span><span> </span><span>64</span><span>)</span><span> </span><span>{</span><span>

        </span><span>curr</span><span> </span><span>=</span><span> </span><span>next</span><span>;</span><span>
        </span><span>next</span><span> </span><span>=</span><span> </span><span>_mm512_loadu_si512</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>64</span><span>);</span><span>
        </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>shft</span><span> </span><span>=</span><span> </span><span>_mm512_alignr_epi32</span><span>(</span><span>next</span><span>,</span><span> </span><span>curr</span><span>,</span><span> </span><span>1</span><span>);</span><span>

        </span><span>v0</span><span> </span><span>=</span><span> </span><span>curr</span><span>;</span><span>

        </span><span>{</span><span>
            </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>t1</span><span> </span><span>=</span><span> </span><span>_mm512_srli_epi32</span><span>(</span><span>curr</span><span>,</span><span> </span><span>8</span><span>);</span><span>
            </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>t2</span><span> </span><span>=</span><span> </span><span>_mm512_slli_epi32</span><span>(</span><span>shft</span><span>,</span><span> </span><span>24</span><span>);</span><span>
            </span><span>v1</span><span> </span><span>=</span><span> </span><span>_mm512_or_si512</span><span>(</span><span>t1</span><span>,</span><span> </span><span>t2</span><span>);</span><span>
        </span><span>}</span><span>
        </span><span>{</span><span>
            </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>t1</span><span> </span><span>=</span><span> </span><span>_mm512_srli_epi32</span><span>(</span><span>curr</span><span>,</span><span> </span><span>16</span><span>);</span><span>
            </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>t2</span><span> </span><span>=</span><span> </span><span>_mm512_slli_epi32</span><span>(</span><span>shft</span><span>,</span><span> </span><span>16</span><span>);</span><span>
            </span><span>v2</span><span> </span><span>=</span><span> </span><span>_mm512_or_si512</span><span>(</span><span>t1</span><span>,</span><span> </span><span>t2</span><span>);</span><span>
        </span><span>}</span><span>
        </span><span>{</span><span>
            </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>t1</span><span> </span><span>=</span><span> </span><span>_mm512_srli_epi32</span><span>(</span><span>curr</span><span>,</span><span> </span><span>24</span><span>);</span><span>
            </span><span>const</span><span> </span><span>__m512i</span><span> </span><span>t2</span><span> </span><span>=</span><span> </span><span>_mm512_slli_epi32</span><span>(</span><span>shft</span><span>,</span><span> </span><span>8</span><span>);</span><span>
            </span><span>v3</span><span> </span><span>=</span><span> </span><span>_mm512_or_si512</span><span>(</span><span>t1</span><span>,</span><span> </span><span>t2</span><span>);</span><span>
        </span><span>}</span><span>

        </span><span>uint16_t</span><span> </span><span>m0</span><span> </span><span>=</span><span> </span><span>_mm512_cmpeq_epi32_mask</span><span>(</span><span>v0</span><span>,</span><span> </span><span>prefix</span><span>);</span><span>
        </span><span>uint16_t</span><span> </span><span>m1</span><span> </span><span>=</span><span> </span><span>_mm512_cmpeq_epi32_mask</span><span>(</span><span>v1</span><span>,</span><span> </span><span>prefix</span><span>);</span><span>
        </span><span>uint16_t</span><span> </span><span>m2</span><span> </span><span>=</span><span> </span><span>_mm512_cmpeq_epi32_mask</span><span>(</span><span>v2</span><span>,</span><span> </span><span>prefix</span><span>);</span><span>
        </span><span>uint16_t</span><span> </span><span>m3</span><span> </span><span>=</span><span> </span><span>_mm512_cmpeq_epi32_mask</span><span>(</span><span>v3</span><span>,</span><span> </span><span>prefix</span><span>);</span><span>

        </span><span>int</span><span> </span><span>index</span><span> </span><span>=</span><span> </span><span>64</span><span>;</span><span>
        </span><span>while</span><span> </span><span>(</span><span>m0</span><span> </span><span>|</span><span> </span><span>m1</span><span> </span><span>|</span><span> </span><span>m2</span><span> </span><span>|</span><span> </span><span>m3</span><span>)</span><span> </span><span>{</span><span>
            </span><span>if</span><span> </span><span>(</span><span>m0</span><span>)</span><span> </span><span>{</span><span>
                </span><span>int</span><span> </span><span>pos</span><span> </span><span>=</span><span> </span><span>__builtin_ctz</span><span>(</span><span>m0</span><span>)</span><span> </span><span>*</span><span> </span><span>4</span><span> </span><span>+</span><span> </span><span>0</span><span>;</span><span>
                </span><span>m0</span><span> </span><span>=</span><span> </span><span>m0</span><span> </span><span>&amp;</span><span> </span><span>(</span><span>m0</span><span> </span><span>-</span><span> </span><span>1</span><span>);</span><span>

                </span><span>if</span><span> </span><span>(</span><span>pos</span><span> </span><span>&lt;</span><span> </span><span>index</span><span> </span><span>&amp;&amp;</span><span> </span><span>memcmp</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>pos</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>4</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                    </span><span>index</span><span> </span><span>=</span><span> </span><span>pos</span><span>;</span><span>
                </span><span>}</span><span>
            </span><span>}</span><span>

            </span><span>if</span><span> </span><span>(</span><span>m1</span><span>)</span><span> </span><span>{</span><span>
                </span><span>int</span><span> </span><span>pos</span><span> </span><span>=</span><span> </span><span>__builtin_ctz</span><span>(</span><span>m1</span><span>)</span><span> </span><span>*</span><span> </span><span>4</span><span> </span><span>+</span><span> </span><span>1</span><span>;</span><span>
                </span><span>m1</span><span> </span><span>=</span><span> </span><span>m1</span><span> </span><span>&amp;</span><span> </span><span>(</span><span>m1</span><span> </span><span>-</span><span> </span><span>1</span><span>);</span><span>

                </span><span>if</span><span> </span><span>(</span><span>pos</span><span> </span><span>&lt;</span><span> </span><span>index</span><span> </span><span>&amp;&amp;</span><span> </span><span>memcmp</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>pos</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>4</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                    </span><span>index</span><span> </span><span>=</span><span> </span><span>pos</span><span>;</span><span>
                </span><span>}</span><span>
            </span><span>}</span><span>

            </span><span>if</span><span> </span><span>(</span><span>m2</span><span>)</span><span> </span><span>{</span><span>
                </span><span>int</span><span> </span><span>pos</span><span> </span><span>=</span><span> </span><span>__builtin_ctz</span><span>(</span><span>m2</span><span>)</span><span> </span><span>*</span><span> </span><span>4</span><span> </span><span>+</span><span> </span><span>2</span><span>;</span><span>
                </span><span>m2</span><span> </span><span>=</span><span> </span><span>m2</span><span> </span><span>&amp;</span><span> </span><span>(</span><span>m2</span><span> </span><span>-</span><span> </span><span>1</span><span>);</span><span>

                </span><span>if</span><span> </span><span>(</span><span>pos</span><span> </span><span>&lt;</span><span> </span><span>index</span><span> </span><span>&amp;&amp;</span><span> </span><span>memcmp</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>pos</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>4</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                    </span><span>index</span><span> </span><span>=</span><span> </span><span>pos</span><span>;</span><span>
                </span><span>}</span><span>
            </span><span>}</span><span>

            </span><span>if</span><span> </span><span>(</span><span>m3</span><span>)</span><span> </span><span>{</span><span>
                </span><span>int</span><span> </span><span>pos</span><span> </span><span>=</span><span> </span><span>__builtin_ctz</span><span>(</span><span>m3</span><span>)</span><span> </span><span>*</span><span> </span><span>4</span><span> </span><span>+</span><span> </span><span>3</span><span>;</span><span>
                </span><span>m3</span><span> </span><span>=</span><span> </span><span>m3</span><span> </span><span>&amp;</span><span> </span><span>(</span><span>m3</span><span> </span><span>-</span><span> </span><span>1</span><span>);</span><span>

                </span><span>if</span><span> </span><span>(</span><span>pos</span><span> </span><span>&lt;</span><span> </span><span>index</span><span> </span><span>&amp;&amp;</span><span> </span><span>memcmp</span><span>(</span><span>haystack</span><span> </span><span>+</span><span> </span><span>pos</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>4</span><span>,</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>4</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                    </span><span>index</span><span> </span><span>=</span><span> </span><span>pos</span><span>;</span><span>
                </span><span>}</span><span>
            </span><span>}</span><span>
        </span><span>}</span><span>

        </span><span>if</span><span> </span><span>(</span><span>index</span><span> </span><span>&lt;</span><span> </span><span>64</span><span>)</span><span> </span><span>{</span><span>
            </span><span>return</span><span> </span><span>(</span><span>haystack</span><span> </span><span>-</span><span> </span><span>string</span><span>)</span><span> </span><span>+</span><span> </span><span>index</span><span>;</span><span>
        </span><span>}</span><span>
    </span><span>}</span><span>

    </span><span>return</span><span> </span><span>size_t</span><span>(</span><span>-1</span><span>);</span><span>
</span><span>}</span>
</pre>
</div>
</div>
</div>
<div id="algorithm-3-sse4-2-specific-pcmpestrm">
<h2>Algorithm 3: SSE4.2-specific (PCMPESTRM)</h2>
<div id="algorithm-2">
<h2>Algorithm</h2>
<p>SSE4.2 introduced <a href="http://en.wikipedia.org/wiki/SSE4#SSE4.2">String and Text New Instructions</a> (STNI), a set of very
complex instructions that were meant to be a building block for string
operations.  Unfortunately, Intel practically discontinued STNI in newer
processors, hasn't introduced AVX2 versions of STNI and make them extremely
slow (11 cycles latency is unacceptable).</p>
<p>Basically <tt>PCMPxSTRx</tt> instruction exists in four variants, which differs
only in:</p>
<ol>
<li>A way to determine string length: the length might be given explicitly
or the first zero byte marks string end, as in traditional C strings.</li>
<li>How the result is saved, it might be either a bit-mask/byte-mask or
the number of first/last bit set in the bit-mask.</li>
</ol>
<p>Additional instruction's argument (immediate constant) defines several aspects
of execution, specifically the algorithm of comparison.  There are four
different algorithms available, one we're using is called <strong>range ordered</strong>.
Despite the name, this algorithm locates substring, or its prefix if a
substring goes beyond register width.</p>
<p>For example, when we're searching "ABCD" in "ABCD_ABC_ABCD_AB" the instruction
returns bitmask 0b0100001000000001, treating suffix "AB" as a match. Thus we
can safely assume that only <strong>the first character matches</strong>, as tail might or
might not be present in a register. (Of course it can be determined, but
require additional calculations which is not very handy.)</p>
<p>Below is a code snippet which does the above operation.</p>
<pre><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>s1</span><span> </span><span>=</span><span> </span><span>"ABCD_ABC_ABCD_AB"</span><span>;</span><span>
</span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>s2</span><span> </span><span>=</span><span> </span><span>"ABCD____________"</span><span>;</span><span>

</span><span>const</span><span> </span><span>int</span><span> </span><span>mode</span><span> </span><span>=</span><span> </span><span>_SIDD_UBYTE_OPS</span><span>
               </span><span>|</span><span> </span><span>_SIDD_CMP_EQUAL_ORDERED</span><span>
               </span><span>|</span><span> </span><span>_SIDD_BIT_MASK</span><span>;</span><span>

</span><span>const</span><span> </span><span>__m128i</span><span> </span><span>N</span><span>   </span><span>=</span><span> </span><span>_mm_loadu_si128</span><span>((</span><span>__m128i</span><span>*</span><span>)(</span><span>s2</span><span>));</span><span>
</span><span>const</span><span> </span><span>__m128i</span><span> </span><span>D</span><span>   </span><span>=</span><span> </span><span>_mm_loadu_si128</span><span>((</span><span>__m128i</span><span>*</span><span>)(</span><span>s1</span><span>));</span><span>
</span><span>const</span><span> </span><span>__m128i</span><span> </span><span>res</span><span> </span><span>=</span><span> </span><span>_mm_cmpestrm</span><span>(</span><span>N</span><span>,</span><span> </span><span>4</span><span>,</span><span> </span><span>D</span><span>,</span><span> </span><span>16</span><span>,</span><span> </span><span>mode</span><span>);</span><span>
</span><span>uint64_t</span><span> </span><span>mask</span><span> </span><span>=</span><span> </span><span>_mm_cvtsi128_si64</span><span>(</span><span>res</span><span>);</span><span> </span><span>// = 0b0100001000000001</span>
</pre>
</div>
<div id="implementation-2">
<h2>Implementation</h2>
<div id="sse-1">
<h3>SSE</h3>
<pre><span>size_t</span><span> </span><span>sse42_strstr_anysize</span><span>(</span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>s</span><span>,</span><span> </span><span>size_t</span><span> </span><span>n</span><span>,</span><span> </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>needle</span><span>,</span><span> </span><span>size_t</span><span> </span><span>k</span><span>)</span><span> </span><span>{</span><span>

    </span><span>const</span><span> </span><span>__m128i</span><span> </span><span>N</span><span> </span><span>=</span><span> </span><span>_mm_loadu_si128</span><span>((</span><span>__m128i</span><span>*</span><span>)</span><span>needle</span><span>);</span><span>

    </span><span>for</span><span> </span><span>(</span><span>size_t</span><span> </span><span>i</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span> </span><span>i</span><span> </span><span>&lt;</span><span> </span><span>n</span><span>;</span><span> </span><span>i</span><span> </span><span>+=</span><span> </span><span>16</span><span>)</span><span> </span><span>{</span><span>

        </span><span>const</span><span> </span><span>int</span><span> </span><span>mode</span><span> </span><span>=</span><span> </span><span>_SIDD_UBYTE_OPS</span><span>
                       </span><span>|</span><span> </span><span>_SIDD_CMP_EQUAL_ORDERED</span><span>
                       </span><span>|</span><span> </span><span>_SIDD_BIT_MASK</span><span>;</span><span>

        </span><span>const</span><span> </span><span>__m128i</span><span> </span><span>D</span><span>   </span><span>=</span><span> </span><span>_mm_loadu_si128</span><span>((</span><span>__m128i</span><span>*</span><span>)(</span><span>s</span><span> </span><span>+</span><span> </span><span>i</span><span>));</span><span>
        </span><span>const</span><span> </span><span>__m128i</span><span> </span><span>res</span><span> </span><span>=</span><span> </span><span>_mm_cmpestrm</span><span>(</span><span>N</span><span>,</span><span> </span><span>k</span><span>,</span><span> </span><span>D</span><span>,</span><span> </span><span>n</span><span> </span><span>-</span><span> </span><span>i</span><span>,</span><span> </span><span>mode</span><span>);</span><span>
        </span><span>uint64_t</span><span> </span><span>mask</span><span> </span><span>=</span><span> </span><span>_mm_cvtsi128_si64</span><span>(</span><span>res</span><span>);</span><span>

        </span><span>while</span><span> </span><span>(</span><span>mask</span><span> </span><span>!=</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>

            </span><span>const</span><span> </span><span>auto</span><span> </span><span>bitpos</span><span> </span><span>=</span><span> </span><span>bits</span><span>::</span><span>get_first_bit_set</span><span>(</span><span>mask</span><span>);</span><span>

            </span><span>// we know that at least the first character of needle matches
</span><span>            </span><span>if</span><span> </span><span>(</span><span>memcmp</span><span>(</span><span>s</span><span> </span><span>+</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>bitpos</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>needle</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>k</span><span> </span><span>-</span><span> </span><span>1</span><span>)</span><span> </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span><span>
                </span><span>return</span><span> </span><span>i</span><span> </span><span>+</span><span> </span><span>bitpos</span><span>;</span><span>
            </span><span>}</span><span>

            </span><span>mask</span><span> </span><span>=</span><span> </span><span>bits</span><span>::</span><span>clear_leftmost_set</span><span>(</span><span>mask</span><span>);</span><span>
        </span><span>}</span><span>
    </span><span>}</span><span>

    </span><span>return</span><span> </span><span>std</span><span>::</span><span>string</span><span>::</span><span>npos</span><span>;</span><span>
</span><span>}</span>
</pre>
</div>
</div>
</div>
<div id="performance-results">
<h2>Performance results</h2>
<p>Performance of various SIMD implementations were measured.  Test programs also
have got specialisation for short substrings, that are selected at run time.
Performance of a C <tt>strstr</tt> is included for comparison.  I omitted C++
<tt><span>string::find</span></tt> due to <a href="http://0x80.pl/notesen/2016-10-08-slow-std-string-find.html">performance bug in GNU libc</a> which makes the method
10 times slower than <tt>strstr</tt>.</p>
<p>Test programs were run three times. Following computers, running either
Debian or Ubuntu, were tested:</p>
<ol>
<li>Westmere i5 M540, GCC 6.2.0,</li>
<li>Bulldozer FX-8150 CPU, GCC 4.8.4</li>
<li>Haswell i7 4470, GCC 5.4.1,</li>
<li>Skylake i7 6700, GCC 5.4.1,</li>
<li>Knights Landing (KNL) 7210, GCC 5.3.0.</li>
<li>ARMv7 (Raspberry Pi 3, 32-bit code), GCC 4.9.2</li>
<li>ARMv8 (<a href="https://shop.softiron.com/product/overdrive-1000/">ARM Cortex A57 - AMD Opteron A1100</a>, 64-bit code), Clang 3.8.0</li>
</ol>
<div id="x64-computers">
<h2>x64 computers</h2>
<table>
<colgroup>
<col width="34%">
<col width="13%">
<col width="13%">
<col width="13%">
<col width="13%">
<col width="13%">
</colgroup>
<thead>
<tr><th rowspan="2">procedure</th>
<th colspan="5">time in seconds</th>
</tr>
<tr><th>Westemere</th>
<th>Bulldozer</th>
<th>Haswell</th>
<th>Skylake</th>
<th>KNL</th>
</tr>
</thead>
<tbody>
<tr><td>std::strstr</td>
<td>0.82246</td>
<td>9.37792</td>
<td>0.52786</td>
<td>0.66148</td>
<td>4.94606</td>
</tr>
<tr><td>std::string::find</td>
<td>---</td>
<td>---</td>
<td>---</td>
<td>---</td>
<td>---</td>
</tr>
<tr><td><a href="#generic-swar">SWAR 64-bit (generic)</a></td>
<td>2.49859</td>
<td>2.93836</td>
<td>1.57715</td>
<td>1.40404</td>
<td>8.17075</td>
</tr>
<tr><td><a href="#generic-sse-avx2">SSE2 (generic)</a></td>
<td><strong>0.74589</strong></td>
<td><strong>0.78871</strong></td>
<td>0.55435</td>
<td><strong>0.48863</strong></td>
<td>6.10786</td>
</tr>
<tr><td><a href="#mpsadbw-sse-avx2">SSE4.1 (MPSADBW)</a></td>
<td>1.45040</td>
<td>1.98863</td>
<td>0.89775</td>
<td><strong>0.63875</strong></td>
<td>18.71666</td>
</tr>
<tr><td>SSE4.1 (MPSADBW unrolled)</td>
<td>1.23849</td>
<td>2.06008</td>
<td>0.99647</td>
<td>0.87919</td>
<td>13.72486</td>
</tr>
<tr><td><a href="#pcmpstr-sse">SSE4.2 (PCMPESTRM)</a></td>
<td>1.69968</td>
<td>2.00681</td>
<td>1.55992</td>
<td>1.39063</td>
<td>6.28869</td>
</tr>
<tr><td><a href="#mpsadbw-sse-avx2">AVX2 (MPSADBW)</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>0.61578</td>
<td><strong>0.56981</strong></td>
<td>13.15136</td>
</tr>
<tr><td><a href="#generic-sse-avx2">AVX2 (generic)</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td><strong>0.38653</strong></td>
<td><strong>0.36309</strong></td>
<td><strong>4.09478</strong></td>
</tr>
<tr><td><a href="#mpsadbw-avx512f">AVX512F (MPSADBW-like)</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td><strong>2.32616</strong></td>
</tr>
<tr><td><a href="#generic-avx512f">AVX512F (generic)</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td><strong>1.14057</strong></td>
</tr>
<tr><td>biggest speed-up to <tt>strstr</tt></td>
<td>1.10</td>
<td>---</td>
<td>1.37</td>
<td>1.82</td>
<td>4.33</td>
</tr>
</tbody>
</table>
<ul>
<li>Performance of <tt>strstr</tt> on the machine with Bulldozer is terrible, it'd pointless to use
it as a reference.</li>
</ul>
</div>
<div id="arm-computers">
<h2>ARM computers</h2>
<table>
<colgroup>
<col width="62%">
<col width="19%">
<col width="19%">
</colgroup>
<thead>
<tr><th rowspan="2">procedure</th>
<th colspan="2">time in seconds</th>
</tr>
<tr><th>ARMv7</th>
<th>ARMv8</th>
</tr>
</thead>
<tbody>
<tr><td>std::strstr</td>
<td>7.30405</td>
<td>3.37546</td>
</tr>
<tr><td>std::string::find</td>
<td>4.17131</td>
<td>1.81368</td>
</tr>
<tr><td><a href="#generic-swar">SWAR 64-bit (generic)</a></td>
<td>36.65012</td>
<td>0.46269</td>
</tr>
<tr><td>SWAR 32-bit (generic)</td>
<td>2.45058</td>
<td>0.81075</td>
</tr>
<tr><td><a href="#generic-neon32">ARM Neon (32-bit, generic)</a></td>
<td>1.29861</td>
<td>0.40699</td>
</tr>
<tr><td><a href="#generic-aarch64">AArch64  (64-bit, generic)</a></td>
<td>---</td>
<td>0.27897</td>
</tr>
<tr><td>biggest speed-up to <tt><span>std::string::find</span></tt></td>
<td>3.1</td>
<td>6.5</td>
</tr>
</tbody>
</table>
</div>
<div id="conclusions-and-remarks">
<h2>Conclusions and remarks</h2>
<ul>
<li>The generic SIMD algorithm outperforms C <tt>strstr</tt> on all platforms.
An implementation should use the highest SIMD version available on
a certain CPU.</li>
<li><tt>MPSADBW</tt> performs pretty bad, with an exception for Skylake.
Knights Landing performance is terrible.</li>
<li><tt>PCMPESTRM</tt> performs worse than <tt>MPSADBW</tt>.</li>
<li>ARM Neon performance is pretty good even for SWAR implementation.
The SWAR version is 1.7 times faster than <tt><span>string::find</span></tt>, SIMD
version is 3.1 times faster.</li>
<li>AArch64 performance of scalar SWAR64 is almost as good as 32-bit SIMD
procedure.</li>
<li>Comparison with <tt>strstr</tt> might be considered unfair, as the
procedure deals with string of unknown length, while my implementations
get lengths and take advantage of this. I fully agree.</li>
<li>Procedures I implemented are also unsafe, because might read data off
the input string. This may lead to access violation if strings are
located just before unmapped memory. And for sure address sanitizers
will complain. Making the procedures safe is feasible, but it wasn't
my goal.</li>
</ul>
</div>
</div>
<div id="acknowledgments">
<h2>Acknowledgments</h2>
<p><a href="http://lemire.me/">Daniel Lemire</a> has gave me access to Haswell, Skylake, KNL, Bulldozer
and ARMv8 machines, where I compiled and run test programs. Thank you!</p>
</div>
<div id="source-code">
<h2>Source code</h2>
<p>All implementations and tests programs are available at <a href="https://github.com/WojciechMula/sse4-strstr">github</a>.</p>
</div>
<div id="history">
<h2>History</h2>
<ul>
<li>2017-04-29 — ARMv8 results</li>
<li>2017-01-30 — better timings from Raspberry Pi 3</li>
<li>2017-01-26 — ARM Neon &amp; results from Raspberry Pi 3</li>
<li>2017-01-25 — spelling</li>
<li>2016-12-22 — added results from Bulldozer</li>
<li>2016-11-30 — spelling</li>
</ul>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Tech Job Meltdown (162 pts)]]></title>
            <link>https://www.professoraxelrod.com/p/the-tech-job-meltdown</link>
            <guid>44273790</guid>
            <pubDate>Sat, 14 Jun 2025 02:22:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.professoraxelrod.com/p/the-tech-job-meltdown">https://www.professoraxelrod.com/p/the-tech-job-meltdown</a>, See on <a href="https://news.ycombinator.com/item?id=44273790">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><blockquote><p><em><span>He wrote me a prescription; he said “You are depressed</span><br><span>I'm glad you came to see me to get this off your chest</span><br><span>Come back and see me later, next patient please</span><br><span>Send in another victim of industrial disease”</span></em><br><em><strong>Industrial Disease</strong></em><span>, Dire Straits</span></p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp" width="1167" height="486" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:486,&quot;width&quot;:1167,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:243242,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://www.professoraxelrod.com/i/165486167?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9872ad-e90e-49c8-be04-2f03ac64653b_1167x486.webp 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption><span>The Google campus doesn’t look as friendly as it used to. (this ia actually from Bartertown in </span><em><strong>Mad Max 3</strong></em><span> - you can see Thunderdome in the middle)</span></figcaption></figure></div><p><span>Since the start of 2023, more than half-a-million tech workers have been laid off. This isn’t the impact of COVID, this isn’t a sudden realization that tech workers are under-performing, this isn’t (much) a wave of AI making tech workers more efficient, and the other usual shibboleths like “it was overhiring during the pandemic” or “it’s a wave of H1B workers” or “all knowledge worker jobs are being replaced by LLMs” are only vaguely correct. You could make a pretty reasonable case that it was </span><em><strong>the end of Zero Interest Rate Policy</strong></em><span> (ZIRP) and the corresponding impact of cost of capital - that the cost of borrowing went up, thus venture capital became a less attractive investment class than other areas, so less money went to building new companies and it was harder for existing firms to borrow, as investors went elsewhere for better returns. </span><em><strong>That is correct - and it would have had its impact</strong></em><span> - though that impact would have basically been the slowdown of new venture backed firms, not layoffs at the Big Tech Giants - and that did in fact happen. </span><em><span>(There </span><strong>is definitely</strong><span> a knock-on effect at the Big Tech Giants where a lack of tech startups does bad things to the large parts of the ecosystem - but that effect is not as immediate as it was back in in the 2000 dot com crash.)</span></em><span> But there’s a much more immediate bottom line reason.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif" width="498" height="298" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:298,&quot;width&quot;:498,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:70629,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/gif&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.professoraxelrod.com/i/165486167?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F06e72374-3470-4078-a9cf-64a042cf6b25_498x298.gif 1456w" sizes="100vw"></picture></div></a></figure></div><p><span>Section 174 of the Internal Revenue Code governs the tax treatment of research and development (R&amp;D) expenditures. For roughly 70 years, American companies could deduct 100% of “qualified research and development spending” in the year they incurred the costs, and this was generally interpreted pretty liberally. Salaries, software, contractor payments… if it contributed to creating or improving a product, it could be deducted “off the top” of a firm’s taxable income. The </span><a href="https://www.thetaxadviser.com/issues/2024/jun/rights-for-the-research-development-credit-and-sec-174/#:~:text=Originally%20enacted%20in%201954%2C%20Sec,product%20development%20expenses%20under%20Sec." rel="">deduction was </a><span>originally codified by Section 174 of the IRS Code of 1954, and under the provision, R&amp;D flourished in the U.S. It gave us the dominance of Bell Labs, Microsoft, Apple, Google, Facebook - pretty much all the US technology booms you’ve lived through unless you’re quire venerable.</span></p><p><span>So the way these regs are written: These expenditures must be for activities intended to discover information that eliminates uncertainty about the development or improvement of a product. </span><em>(Kind of open-ended.)</em><span> Prior to 2022, taxpayers could immediately deduct R&amp;D expenditures in the year they were incurred, providing a significant tax benefit for businesses investing in innovation. Alternatively, taxpayers could capitalize these costs and amortize them over a period (e.g., at least 60 months) if they chose to defer the deduction. But it was pretty rare to do this, because you could directly manage your R&amp;D payroll costs versus income to mitigate the tax hit. And societally, we accepted that - we were investing in growing the American economy. </span></p><p><span>But, the Tax Cuts and Jobs Act (TCJA) of 2017 amended Section 174, effective for tax years beginning after December 31, 2021. Starting in 2022, R&amp;D expenditures must be capitalized and amortized over 5 years for domestic research </span><em>(and 15 years for foreign research… which is pretty untenable.)</em><span> This change eliminated the option to immediately deduct R&amp;D costs, increasing tax liability for companies with significant research budgets in the short term. Even more annoying, amortization begins at the midpoint of the taxable year in which the expenses are incurred, using a straight-line method.</span></p><p><span>The short version is: this rule change has </span><em><strong>increased taxable income for businesses in the short term, as they can no longer deduct R&amp;D costs immediately</strong></em><span>. Now, there is actually a category of tax law which you can still use (IRS Section 41 Research and Development Tax Credits) which are different - if you think I’m about to advocate tax reform, yes, but I’m </span><em><strong>always</strong></em><span> doing that and I feel like I’m talking to a brick wall. But it’s not as broadly useful, and it’s not a simple recategorization, or we’d all have done it.</span></p><p><span>Anyway, let me see if I can summarize how it works today. A U.S. company incurs $1 million in domestic R&amp;D (Section 174) expenses in 2025 and let’s assume they can’t reasonably reclassify any of it under Section 41. Under Section 174, it must capitalize these costs and amortize them over 5 years. Amortization begins mid-year, so in 2025, the company can deduct $100,000 (1/10th of $1 million,  since you only get to count half the first year. The remaining $900,000 is deducted evenly over the next 4.5 years ($200,000 per year). These are basically “tax credits”.  So in some respects, they may be long term beneficial - </span><em><strong>but they are a short term drag, which is why you see layoffs at the moment</strong></em><span>. Also they create a lot more compliance paperwork </span><em>(and potentially you’ll see companies change hands just for their accumulated tax credits, which is a little… unhelpful.)</em></p><p>And of course, this hit the “real world” of companies focused on building tomorrow’s products in some pretty obvious ways.</p><p>The inability to immediately deduct R&amp;D costs reduced cash flow, particularly for cash-strapped startups and small tech firms reliant on R&amp;D. Companies had to either take out high-interest loans - since of course, interest rates have recently gone up, cut costs, or face bankruptcy. Many chose layoffs to free up cash to cover these tax liabilities. For instance, a small company might lay off a software engineer earning $200,000 to cover a $189,000 tax bill.</p><p><span>Now, you might think the 15-year amortization period for foreign R&amp;E expenditures would make hiring non-U.S. engineers less tax-advantageous and help bring jobs back to the US, but this </span><em><strong>mostly</strong></em><span> did not actually work out this way. You see, larger companies responded by offshoring R&amp;D to countries with more favorable tax regimes, leading to U.S. job losses. For example, Google reportedly shifted some work to Germany, and Microsoft moved a bunch of research work to China - both because pay rates were better and because the local subsidiary company in that jurisdiction operated under the national laws for that nation, which … were not the US tax laws. They were much more like the previous US tax laws, because the rest of the world had realized “hey, we also want to encourage people to invest in R&amp;D and grow the next trillion dollar company here!” And this new tax ruling doesn’t precisely say “we don’t want to do that” but it does say “we don’t want you to be quick about it” - which everyone who believes in the Amazing Growth Story thinks is anathema to their strategy.</span></p><p><span>Anyway, the impact of this tax strategy turned out to be: </span><em><strong>layoffs of U.S.-based engineers </strong></em><span>while companies restructured operations abroad.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg" width="628" height="356" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:356,&quot;width&quot;:628,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:147865,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.professoraxelrod.com/i/165486167?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd833dee0-007f-44b0-86d3-41de3cef17d6_628x356.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>This is </span><em><strong>NOT</strong></em><span> working out how it was planned.</span></figcaption></figure></div><p><span>Now back in 2017, when Congress passed the </span><a href="https://www.investopedia.com/taxes/trumps-tax-reform-plan-explained/" rel="">Tax Cuts and Jobs Act</a><span> (TCJA), the signature legislative achievement of President Donald Trump’s first term, it slashed the corporate tax rate from 35% to 21%, which looked like a massive revenue loss “on paper” for the federal government. So in order to make the 2017 bill comply with Senate budget rules, lawmakers had to offset the cost… therefore, they put in a future tax hike </span><em>(well, several)</em><span> that wouldn’t kick in right away, wouldn’t provoke immediate backlash from businesses, and could, in theory, be quietly repealed later.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg" width="600" height="449" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:449,&quot;width&quot;:600,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:178290,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.professoraxelrod.com/i/165486167?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7bd3ab5b-825a-4438-a6ce-7ab87497fabf_600x449.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>But they didn’t repeal it, so when this went into effect, companies panicked as the tax steamroller ran over them.</figcaption></figure></div><p>The delayed change to Section 174, from immediate expensing of R&amp;D to “mandatory amortization”, meaning that companies must spread the deduction out in smaller chunks over five or even 15-year periods… that’s one of them, as I’m sure you’ve figured out. The delayyed start meant that it would not begin affecting the budget until 2022, but it helped the TCJA appear “deficit neutral” over the 10-year window used for legislative “scoring”.</p><p><span>The delay wasn’t legally </span><em><strong>required</strong></em><span>, mind you, it was a way to game the system. These kind of political tactics are</span><a href="https://www.pbs.org/newshour/politics/as-house-gop-grinds-ahead-new-cbo-report-says-trumps-big-tax-cuts-bill-will-add-to-deficit?utm_source=chatgpt.com" rel=""> commononplace in tax legislation</a><span>. Phase-ins and or delayed-start provisions let lawmakers game how the Congressional Budget Office (CBO) -  Congress’ nonpartisan analyst of how bills impact budgets and deficits - “grades” legislation, because it kicks the costs down the road, outside the “official” forecasting windows. Those of you who play table-top games or RPGs would call this a way to “cheese the system” or the traditional euphemism used to be something along the lines of “robbing Peter to pay Paul”.</span></p><p><a href="https://technical.ly/civic-news/section-174-small-software-companies-taxes-explainer/" rel="">Many businesses expected Congress to repeal </a><span>or delay the Section 174 changes before they took effect in 2022, as there </span><em><strong>definitely</strong></em><span> was bipartisan support for immediate expensing. However, inaction led to a “shock” when 2022 tax bills arrived in 2023, forcing rapid cost-cutting, including layoffs. Small software firms, in particular, faced “extinction-level” tax bills, with some reporting taxable income tripling overnight, prompting layoffs or salary cuts. And bigger firms - Amazon, Meta/Facebook, Alphabet/Google, etc, Microsoft, Salesforce, etc - have had widespread layoffs in the US and have moved jobs overseas. Twilio cut 22% of its domestic workforce in 2023. Shopify cut 30% </span><em>(they’re based in Canada, but much of their R&amp;D was in the US - guess what, it isn’t anymore)</em><span>. Coinbase cut 36% of their team and there are still a heck of a lot of crypto bros, so I think they are probably not in a doomsday situation. </span></p><p><span>Now, I don’t want to say this was the </span><em><strong>only </strong></em><span>thing in 2023 that did this. There was </span><em><strong>a lot of economic turmoil </strong></em><span>on the horizon then: rising interest rates, reduced venture capital funding, supply chain problems, and post-pandemic over-hiring corrections, all amplifying financial pressures at the time. Companies like Meta announced layoffs during their “Year of Efficiency” in 2023, partly due to these tax changes and corresponding changes in ad spending.  While not the sole cause, the Section 174 change drove </span><em>(or accelerated)</em><span> layoffs that otherwise would probably have been unnecessary.</span></p><p><span>Congress has made </span><a href="https://technical.ly/startups/r-d-tax-change-reversal-startups/" rel="">noise previously about a bipartisan reversal</a><span> of this tax code change, and I rather hope they do - it would be a welcome boost to many sectors of the American economy, from manufacturing to pharmaceutical to technology to education to electrnics to scientific research and consulting.</span></p><p><span>Don’t think of this as just a problem for the tech space. I mean, the tech sector is ridiculously dominant for the S&amp;P 500, the “Magnificent Seven” are a third of the value of the S&amp;P 500. (That’s Alphabet, Amazon, Apple, Nvidia, Microsoft, Meta, and Tesla.) But if this does get repealed - it will be very good for those seven stocks - </span><em><strong>this is not an official stock tip, shush, you SEC guys.</strong></em></p><p>Throughout the 2010s, a broad swath of startups, direct-to-consumer brands, and internet-first firms… heck, basically every company that you would recognize from Instagram or Facebook ads… built their growth models around a kind of synthetic carefully engineered break-even. Lot of online firms, a lot of handheld or wearable tech firms, personal entertainment devices, ride-hailing firms, anything self-driving, all the recent buzzy things. </p><p><span>The tax code allowed them to spend aggressively on product and engineering, then write it all off as R&amp;D, keeping their taxable income close to zero by design. It worked because taxable income and actual cash flow were often not</span><em> </em><span>quite</span><em> </em><span>the same thing under what’s known as </span><a href="https://www.investopedia.com/terms/g/gaap.asp" rel="">GAAP</a><span> accounting practices. Basically, as long as spending counted as R&amp;D, companies could report losses to investors while owing almost nothing to the IRS. In short, </span><em><strong>it costs a lot to invent - and market - the future. Building a better tomorrow can be expensive!</strong></em><span> Investors generally bought into this, gave them </span><em><strong>another round of venture capital, and let them defer a public offering</strong></em><span>. </span><em>(This is actually another problem with this model - companies have stayed private far too long - but I’ll address that at some other point.)</em></p><p><span>But the Section 174 tax change absolutely cratered that model. Once those same expenses had to be spread out, or amortized, over multiple years, suddenly you couldn’t write these off - basically, the tax shield vanished or the accounting rules changed, depending on how politely you want to phrase it. But the mechanics of it are the same: companies that were still burning cash suddenly looked </span><em><strong>profitable on paper</strong></em><span>, triggering </span><em><strong>real tax bills on imaginary gains</strong></em><span>. </span><em>(If this reminds you of some of the past economic crises - it should - this is one of the things that burned people back in the dotcom crash of 2000 amongst other mark-to-market problems in 2008, though the 2008 crisis mostly wasn’t this.)</em></p><p><span>The logic that once fueled a generation of digital-first research-focused growth ran straight into a IRS-shaped brick wall and put a mighty dent in the work force. If you were already public and profitable - well, your management team wasn’t going let you suddenly become unprofitable just because of a tax law change, so the answer was “cut expenses” and that mostly became “slow CapEx on data centers </span><em>- servers are expensive -</em><span>  and lay off employees” so as to preserve profit margins and keep the stock price high. After all, reasoned management, if we had to put up with these crazy new rules, we basically just had to bank up R&amp;D credits for a few years and then we were back to par. It was a couple of years of drag on the economy - </span><em><strong>and a particularly bad time</strong></em><span> to fall behind on technology leadership or a chance to reshore manufacturing or stabilize the American economy. One suspects that the current administration, if they had noticed that, might have kicked out a repeal or other clever plan as part of their new budget package </span><em>(what’s currently being bundled together under the slightly goofy name of the Big Beautiful Bill)</em><span> to juice economic recovery.</span></p><p><span>So it wasn’t just tech experiencing effects. From 1954 until 2022, the U.S. tax code had encouraged businesses of all stripes to behave at </span><em><strong>least a little bit </strong></em><span>like we think of tech companies behaving, by which I mean “investing in R&amp;D” and more generally “investing in software” for the latter half of that. From retail to logistics, healthcare to media, if firms built internal tools, customized a software stack, or invested in business intelligence and data-driven product development, they could expense those costs - and the IRS generally agreed, which is slightly miraculous. The write-off incentivized in-house builds and fast growth well outside what people generally call the “tech sector”. For comparison, check the </span><a href="https://www.oecd.org/content/dam/oecd/en/publications/reports/2020/09/the-effects-of-r-d-tax-incentives-and-their-role-in-the-innovation-policy-mix_b7f9884d/65234003-en.pdf" rel="">OECD research</a><span> showing that immediate deductions foster innovation more than spread-out ones.</span></p><p><span>And American companies loved that logic and invested according to it. According to government data, U.S. businesses reported about $500 billion in </span><a href="https://ncses.nsf.gov/pubs/nsf22314" rel="">R&amp;D expenditures</a><span> in 2019 alone, and almost half of that came from industries outside traditional tech. The Bureau of Economic Analysis estimates that this sector, the broader digital economy, </span><a href="https://itif.org/publications/2023/05/30/six-tech-industries-accounted-for-more-than-one-third-of-gdp-growth-in-the-last-decade/" rel="">accounts</a><span> for another 10% of GDP. Probably 20% if you count Big Tech. And there’s a secondary market - all the people who support and are downstream from those workers and those industries </span><em>(see below)</em><span>; we’re actually introducing relatively-avoidable friction into about a quarter of the American economy here with this particular tax change.</span></p><p><span>The result? A tax policy aimed at raising short-term revenue basically defined the growth engine for a huge chunk of American companies. But when that rug got pulled out, it also yanked out the incentive for hiring American engineers or investing in American-made tech and digital products. It made building tech companies in America suddenly not economically viable, and the last time we did this with a stupid policy change (Fed policy tightening “to defeat the Wealth Effect” and cool down speculative fervor … </span><em><strong>yup, it sure did! Lots of wealth went away, was that a good idea?</strong></em><span>) caused the big Dot Com Crash in 2000. It would probably be a good idea to put this tax credit back in place </span><em>(or some facsimile thereof)</em><span> before it continues to strip jobs out of the American economy - let alone all the folks (realtors, contractors, restaurants, nannies, tutors, personal trainers, et al) that are one step downstream from the tech sector jobs.</span></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Endometriosis is an interesting disease (232 pts)]]></title>
            <link>https://www.owlposting.com/p/endometriosis-is-an-incredibly-interesting</link>
            <guid>44272933</guid>
            <pubDate>Fri, 13 Jun 2025 22:40:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.owlposting.com/p/endometriosis-is-an-incredibly-interesting">https://www.owlposting.com/p/endometriosis-is-an-incredibly-interesting</a>, See on <a href="https://news.ycombinator.com/item?id=44272933">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><em><span>Note: I will be in SF next week, and </span><a href="https://lu.ma/bvqh80or" rel="">am co-hosting this event</a><span> with the wonderful </span><a href="https://www.convoke.bio/" rel="">convoke.bio</a><span> from 6:30pm-8:30pm on June 24th. Location TBD, but it will be in SF! You should come! Also, extremely grateful to </span><a href="https://x.com/shilpap_" rel="">Shilpa Pothapragada</a><span> for both inspiring + reviewing this essay. </span></em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png" width="1200" height="672.5274725274726" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:816,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:9449838,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://www.owlposting.com/i/161616300?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffc418668-9998-48c8-865d-c9f01aa84f6b_2912x1632.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><ol><li><p><a href="https://www.owlposting.com/i/161616300/introduction" rel="">Introduction</a></p></li><li><p><a href="https://www.owlposting.com/i/161616300/why-is-endometriosis-interesting" rel="">Why is endometriosis interesting?</a></p><ol><li><p><a href="https://www.owlposting.com/i/161616300/the-primary-hypothesis-of-why-it-exists-is-not-complete" rel="">The primary hypothesis of why it exists is not complete</a></p></li><li><p><a href="https://www.owlposting.com/i/161616300/it-is-nearly-equivalent-to-cancer" rel="">It is nearly equivalent to cancer</a></p></li><li><p><a href="https://www.owlposting.com/i/161616300/there-is-no-real-cure" rel="">There is no (real) cure to it</a></p></li><li><p><a href="https://www.owlposting.com/i/161616300/there-are-few-diseases-on-earth-as-widespread-and-underfunded-as-it-is" rel="">There are few diseases on Earth as widespread and underfunded as it is</a></p></li></ol></li><li><p><a href="https://www.owlposting.com/i/161616300/conclusion" rel="">Conclusion</a></p></li></ol><p><span>There are several diseases that are canonically recognized as ‘</span><em>interesting</em><span>’, even by laymen. Whether that is in their mechanism of action, their impact on the patient, or something else entirely. It’s hard to tell </span><em>exactly</em><span> what makes a medical condition interesting, it’s a you-know-it-when-you-see-it sort of thing.</span></p><p><span>One such example is measles. Measles is an unremarkable disease based solely on its clinical progression: fever, malaise, coughing, and a relatively low death rate of 0.2%~. What </span><strong>is</strong><span> astonishing about the disease is its capacity to infect cells of the adaptive immune system (memory B‑ and T-cells). This means that if you do end up surviving measles, </span><strong>you are left with an immune system not dissimilar to one of a just-born infant, </strong><span>entirely naive to polio, diphtheria, pertussis, and every single other infection you received protection against either via vaccines or natural infection. It can take up to 3 years for one's ‘immune memory’ to return, prior to which you are entirely immunocompromised.</span></p><p><span>There’s a wide range of such diseases, each one their own unique horror. Others include rabies (t</span><a href="https://pubmed.ncbi.nlm.nih.gov/21601048/" rel="">rans-synaptic transmission</a><span>), ebola (</span><a href="https://mednorthwest.com/ebola-virus-when-bad-things-happen-to-good-blood-vessels/" rel="">causes your blood vessels to become porous</a><span>), tetanus (</span><a href="https://web.archive.org/web/20150212225108/http://www.cdc.gov/tetanus/about/symptoms-complications.html" rel="">causes muscle contractions so strong that they can break bones</a><span>), and so on.</span></p><p><span>Very few people would instinctively pigeonhole endometriosis as something similarly </span><em>physiologically</em><span> interesting, or at least I wouldn’t have. But via a mutual friend, I recently had a chat with</span><a href="https://x.com/shilpap_" rel=""> Shilpa Pothapragada</a><span>, a Schmidt Fellow studying at the Wyss Institute at Harvard. She studies better ways to diagnose endometriosis, and, as a result of the fascinating conversation, I now consider the disease one of the strangest conditions I’ve ever heard of. </span></p><p><span>Honestly, prior to my discussion with Shilpa, I didn’t even know what endometriosis even </span><strong>was, </strong><span>only that it was painful to have and affects women. To judge whether I was simply deeply ignorant, or the disease genuinely didn’t have much mindshare, I took an informal poll amongst a dozen friends outside of the life-sciences. Even amongst cisgender women (!), knowledge of what endometriosis was </span><strong>astonishingly</strong><span> sparse — most people could only say something like ‘</span><em>that’s a uterus condition, right?</em><span>’, and a sum total of zero people actually knew what the disease entailed. </span></p><p>So I decided to write this essay in an attempt to fix that knowledge gap amongst the small population of people who follow me. </p><p><span>But, before we get to my points: what actually </span><strong>is</strong><span> the clinical definition of endometriosis?</span></p><p><span>Plainly put, it is when tissue that resembles the uterine lining, or endometrial-like tissue, grows outside the uterus. The tissue can implant itself in nearby tissues, like the ovaries and fallopian tubes, or even more distal organs like the bladder and bowel. Due to the continuous influx of hormonal growth factors (mainly estrogen), these misplaced endometrial-like cells respond cyclically, just as the normal uterine lining does. They thicken, break down, and bleed with each menstrual cycle, but unlike the uterine lining, </span><strong>they have nowhere to go.</strong></p><p>Instead of exiting through menstruation, this trapped tissue and blood accumulates, causing severe pain, inflammation, fibrosis (scar formation), and adhesion between organs. Over time, these repeated cycles of inflammation and fibrosis may lead to permanent structural changes within the abdomen and pelvis, contributing to chronic pelvic pain and infertility.</p><p><span>To segue into the first interesting aspect of the disease, how did the tissue </span><strong>get</strong><span> there in the first place? What caused it to be trapped? Well, it’s a curious question, because…</span></p><p><a href="https://my.clevelandclinic.org/health/diseases/24432-retrograde-menstruation" rel="">Retrograde menstruation</a><span> is perhaps the most culturally dominant theory as to why endometriosis occurs at all, first proposed by gynecologist John Sampson nearly 100 years ago. The theory is straightforward: during menstruation, some sloughed-off endometrial cells flow backward through the fallopian tubes into the pelvic cavity instead of outward through the cervix. Once there, these cells implant themselves, continue growing, and become the endometrial-like tissue characteristic of endometriosis.</span></p><p>It’s a clean and simple idea, one that is repeated by gynecologists constantly. I don’t have a great mental model for what this looks like, so I found the following picture helpful:</p><p><span>If you look this theory up on endometriosis forums, most patients generally consider it to be unilaterally false. But there is some decent evidence for it being at least </span><strong>partially</strong><span> explanatory. A strong piece of proof for it is that women with obstructive Müllerian anomalies, or uterine deformations that can lead to more retrograde menstruation,</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10968216/#:~:text=One%20risk%20factor%20for%20endometriosis,25%20years%20old%20and%20over." rel=""> have a higher risk of endometriosis</a><span> compared to women with no abnormalities.</span></p><p><span>But, despite how often the theory is repeated amongst doctors, it cannot explain </span><strong>all</strong><span> endometriosis cases. Why not?</span></p><p><span>For one,</span><a href="https://academic.oup.com/humupd/article-abstract/8/1/84/624513" rel=""> retrograde menstruation occurs in between 75-90% of women</a><span>, most of whom never go on to develop endometriosis. Keep in mind that</span><a href="https://radiopaedia.org/articles/mullerian-duct-anomalies" rel=""> obstructive Müllerian anomalies occur in 1-5% of the population</a><span>, and</span><a href="https://www.who.int/news-room/fact-sheets/detail/endometriosis" rel=""> endometriosis rates are about 10%</a><span> of the population. And endometriosis itself is almost</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC8517707/" rel=""> certainly under diagnosed</a><span>! We’ll discuss the insanity of this 10% number later, but, suffice to say, while retrograde menstruation may play </span><strong>some</strong><span> role in the development of the disease, it cannot cover the full scope of cases. To be fair, Müllerian anomalies are</span><a href="https://www.sciencedirect.com/science/article/abs/pii/S1553465024013724#:~:text=Patients%20with%20mullerian%20anomalies%20are,well%2Destablished%20societal%20classification%20systems." rel=""> </a><strong><a href="https://www.sciencedirect.com/science/article/abs/pii/S1553465024013724#:~:text=Patients%20with%20mullerian%20anomalies%20are,well%2Destablished%20societal%20classification%20systems." rel="">also</a></strong><a href="https://www.sciencedirect.com/science/article/abs/pii/S1553465024013724#:~:text=Patients%20with%20mullerian%20anomalies%20are,well%2Destablished%20societal%20classification%20systems." rel=""> underdiagnosed</a><span>, but it feels unlikely to make up the gap.</span></p><p><span>Two, endometriosis comes in multiple forms, some of which stay localized to the pelvic region, yes, but endometriosis can occur in </span><strong>absurdly</strong><span> distal regions as well. Where else? </span><strong>Literally everywhere.</strong><span> Type ‘[an organ system] + endometriosis’ into Google and you’ll find at least one case report of it happening there. The</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC6397811/" rel=""> gastrointestinal tract</a><span>, the</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10336989/" rel=""> lungs</a><span>, and, insanely enough,</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC9738496/" rel=""> the brain as well.</a><span> How could backwards flow of uterine blood explain that?</span></p><p><span>And three, perhaps most damning of all</span><strong>, is that endometriosis has been found in people who have never menstruated at all: </strong><span>such as </span><a href="https://www.sciencedirect.com/science/article/pii/S0015028204030158" rel="">premenarchal girls between the ages of 8.5-13,  </a><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4293785/" rel="">women who genetically lack a uterus</a><span>, and even </span><strong>cisgender men</strong><span>.</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5833878/" rel=""> This last bit is a particularly rare phenomenon, with only 16 cases reported in the literature circa 2018</a><span>, but it conclusively </span><strong>exists. </strong><span>One interesting note: all 16 of the male endometriosis patients likely had increased estrogen levels, either due to liver cirrhosis (which leads to a decreased ability to break down estrogen), high-dose estrogen therapy for prostate cancer, or obesity. You may instinctively wonder: does endometriosis also occur in transgender women on hormone replacement therapy? Unfortunately, I was unable to find any evidence of this, but I chalk it up to the relatively small number of people in this demographic having a similarly rare condition.</span></p><p><span>So what </span><strong>does</strong><span> cause endometriosis? Well, we’ll need a theory that deals with multiple issues at once:</span></p><ol><li><p>Accounts for endometriosis occurring in regions far from the pelvic region.</p><ol><li><p>Rules out retrograde menstruation hypothesis.</p></li></ol></li><li><p><span>Accounts for endometriosis being a</span><a href="https://www.nature.com/articles/s41588-023-01323-z" rel=""> </a><strong><a href="https://www.nature.com/articles/s41588-023-01323-z" rel="">very</a></strong><a href="https://www.nature.com/articles/s41588-023-01323-z" rel=""> heritable disease.</a></p><ol><li><p>Rules out purely environmental explanations (e.g. greater air pollution, microplastics, etc).</p></li></ol></li><li><p>Accounts for endometriosis occurring, albeit very rarely, in non-menstruating individuals.</p><ol><li><p>Rules out any theory that requires the endometrial lining to exist at all.</p></li></ol></li></ol><p>It’s a tough set of criteria. And a lot of theories have spawned to explain it.</p><p><span>There’s the</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10001466/" rel=""> </a><strong><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10001466/" rel="">embryonic rest theory</a></strong><span>, which blames the condition on pockets of endometrial cells that never migrated properly during embryogenesis and instead remained dormant in various tissues, only to be activated later by hormones like estrogen. This explains the disease occurring in cisgender men (as everyone starts off with progenitor cells capable of differentiation into endometrial cells) and cisgender women who theoretically should lack a shedding endometrial layer. But, unfortunately, it fails to account for why </span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4303753/" rel="">90% of all clinically visible endometriosis lesions still cluster on the pelvic regions/ovaries</a><span> rather than turning up at random sites, and why</span><a href="https://academic.oup.com/humupd/article/24/3/290/4859612?" rel=""> onset tracks so tightly with the start of the menstrual cycle and mysteriously improves during pregnancy.</a></p><p><span>A cousin to this is the</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10001466/" rel=""> </a><strong><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10001466/" rel="">coelomic metaplasia theory</a></strong><span>, which asserts that the coelomic epithelium (the layer of cells that lines the surfaces of all abdominal organs) retains the plasticity to transform into endometrial-like tissue under specific stimuli, such as hormonal signals, inflammation, or genetic predisposition. But this too suffers from similar issues; if this transformation can happen anywhere there is coelomic epithelium, why is it almost always clustered in the same anatomical zones, and how can it appear elsewhere?</span></p><p><span>And there are so many more theories beyond this. Still others blame it on</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC9265783/" rel=""> immune dysfunction</a><span>, entirely</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5555376/" rel=""> somatic mutations</a><span>, and even</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5902457/" rel=""> bacterial contamination</a><span>.</span></p><p><span>So…which one is true? Unfortunately, as is often the case with biology, the answer may very well be ‘</span><em>a combination of all of them</em><span>’. As you go from papers from the 2010’s to the 2020’s, there is increasingly more and more hesitance in ascribing a single cause to the condition. </span><strong>Instead, it is likely that endometriosis itself results from a general process of heterogenous events. </strong><span>I’ll give the general take I’m seeing people swirl around. There isn’t a great paper covering the following few paragraphs, but rest assured that it isn’t mine, but rather a synthesis of multiple review papers I’ve gone through.</span></p><p><strong>First, there must be a seed: a founding cell with latent endometrial potential.</strong><span> This can be embryonic stem cells that never completed Müllerian migration or circulating multipotent stem cells (which accounts for cis men/non-menstruating women cases), but, more often than not, it will be likely be</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC9856091/" rel=""> endometrial stem cells found in menstruation blood</a><span> (accounts for cis women).</span></p><p><strong>Next, the seed must reach the correct ‘soil’ for growth to occur.</strong><span> Retrograde menstruation would deposit endometrial stem cells in the ideal place: the pelvic peritoneum, which is bathed in the estrogen-laden menstrual fluid that pushed the seed there in the first place. </span><strong>That’s right, we’re back to the retrograde menstruation theory!</strong><span> But unlike that theory, embryonic stem cells or circulating multipotent stem cells</span><strong> also</strong><span> have the opportunity to result in endometriosis, but they only develop into lesions under unusual conditions; such as</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC7542014" rel=""> hormonal therapy or chronic inflammation (e.g. cesarean scars).</a><span> This explains a </span><strong>lot</strong><span> of things! The rarity and the distribution of extra-pelvic endometriosis, why increased rates of retrograde menstruation lead to a higher risk for endometriosis, and </span><strong>why</strong><span> high-estrogenic conditions usually co-occur alongside endometriosis in people who theoretically shouldn’t develop the disease.</span></p><p><strong>Finally, the seed must survive, adapting its local environment to suit its needs.</strong><span> There is evidence that</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4499658/" rel=""> endometriosis lesions can secrete immunomodulatory factors that help them evade immune clearance</a><span>,</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC3677669/" rel=""> release angiogenesis factors that promote blood supply to them</a><span>, and</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10138736/" rel=""> tamp down its responsiveness to progesterone levels as to prevent natural hormonal suppression of growth</a><span>. How does it do all of these? Simple: the acquisition of</span><a href="https://portlandpress.com/clinsci/article-abstract/126/2/123/69231/Genetic-epigenetic-and-stem-cell-alterations-in?redirectedFrom=fulltext" rel=""> somatic mutations and epigenetic changes that reprogram the lesion’s cellular behavior.</a><span> Which explains why people have observed so many genetic anomalies in endometriosis lesions, and also why simple retrograde menstruation isn’t alone enough to cause endometriosis.  </span></p><p><span>And yet, we still haven’t explained everything about the origins of endometriosis. What causes circulating/latent stem cells to transform into endometrial-like cells? Why does </span><a href="https://obgyn.onlinelibrary.wiley.com/doi/full/10.1111/aogs.14491" rel="">spontaneous regression of endometriosis sometimes occur</a><span>? Why do some endometriosis lesions remain stable for years? Why don’t all genetically or hormonally predisposed people develop it?</span></p><p>All unclear! Still much work left to do to account for all of these.</p><p>And, you know, upon reading about the above pathogenesis of endometriosis, one may immediately remark on how similar it feels to another condition…</p><p>Seeds? Somatic mutations? Spreading? Spontaneous start and stop?</p><p>That…sounds an awful lot like cancer, doesn’t it? And not just the typical, innocuous gynecological disease that one may initially assume endometriosis is.</p><p><span>If you aren’t yet convinced, let’s return back to the seed metaphor we were using in the last section. For a seed to survive, it must manipulate its immediate environment, happening upon somatic mutations that allow it to do so. Very cancer-y sounding! </span><strong>And, curiously enough, many of the mutations that cells found in endometrial lesions are identical to those found in cancerous tumors.</strong></p><p><a href="https://www.cell.com/cell-reports/fulltext/S2211-1247(18)31127-6#" rel="">A Cell paper from 2018,</a><span> which compared somatic mutations between normal endometrial tissue and endometriosis tissue had this to say:</span></p><blockquote><p><em>While we were preparing to submit this manuscript, Anglesio et al. reported that 21% of the lesions in patients with deep-infiltrating endometriosis harbored somatic mutations in ARID1A, PIK3CA, KRAS, and PPP2R1A. Our results corroborated their findings in a larger cohort of subjects with a more common type of endometriosis….</em></p></blockquote><p><strong>For context, all of the named genes are recognized as known oncologic mutations.</strong><span> </span></p><p><span>Of course, </span><strong>clonality</strong><span> should be considered when assessing results like this, as in, what fraction of the assessed cell population had the mutation? If it’s a low proportion, it is background noise. If it’s high, it may be what is keeping the cell population afloat. And indeed, endometrial tissue, on average, had much higher fractions of</span><a href="https://en.wikipedia.org/wiki/KRAS" rel=""> KRAS</a><span> and</span><a href="https://en.wikipedia.org/wiki/P110%CE%B1" rel=""> PIK3CA</a><span> mutations than normal endometrial tissue. </span></p><p><span>We could push this even further and ask the question: does a higher mutational burden of these genes cause endometriosis to be even </span><strong>more</strong><span> aggressive,</span><a href="https://news.vumc.org/2023/06/05/study-discovers-that-tumor-mutation-burden-predicts-survival-outcome/" rel=""> just like how it does for cancer aggressiveness</a><span>? One paper studied this, though only through the lens of KRAS, and the answer was pretty clear: </span><strong>yes</strong><span>.</span></p><blockquote><p><em>KRAS mutation presence was higher in subjects with deep infiltrating endometriosis or endometrioma lesions only (57.9%; 11/19) and subjects with mixed subtypes (60.6%; 40/66), compared with those with superficial endometriosis only (35.1%; 13/37) (p = 0.04). KRAS mutation was present in 27.6% (8/29) of Stage I cases, in comparison to 65.0% (13/20) of Stage II, 63.0% (17/27) of Stage III, and 58.1% (25/43) of Stage IV cases (p = 0.02). KRAS mutation was also associated with greater surgical difficulty (ureterolysis) (relative risk [RR] = 1.47, 95% CI: 1.02–2.11) and non‐Caucasian ethnicity (RR = 0.64, 95% CI: 0.47–0.89). Pain severities did not differ based on KRAS mutation status, at either baseline or follow‐up. Re‐operation rates were low overall, occurring in 17.2% with KRAS mutation compared with 10.3% without (RR = 1.66, 95% CI: 0.66–4.21).</em></p><p><em>In conclusion, KRAS mutations were associated with greater anatomic severity of endometriosis, resulting in increased surgical difficulty. Somatic cancer‐driver mutations may inform a future molecular classification of endometriosis.</em></p></blockquote><p>Given all of this, it is worth wondering in what manner endometriosis is genuinely distinct from cancer. Why don’t we simply consider the two one and the same? Is there some obvious dividing line between endometriosis and tumor that I have simply left out?</p><p><strong>No. There really is a striking level of similarity between the two.</strong></p><p><span>Of course, I am not the first person to draw this connection between endometriosis and cancer, far from it. One paper from 2017 titled ‘</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5667960/" rel="">Endometriosis: benign, malignant, or something in between?</a><span>” had this to say:</span></p><blockquote><p><em>Should endometriosis be considered a ‘benign’ neoplasm, which harbors oncogenic driver mutations, along with the capacity for invasion and potentially for distant metastasis? Although exhibiting classic hallmarks of cancer, it is not lethal, is morphologically normal, and does not form an expansile tumor mass. The recent findings invite us to revisit our notions of what constitutes cancer, and should re-ignite interest in the biology of endometriosis, an entity which could aptly be described as “a riddle, wrapped in a mystery, inside an enigma.”</em></p></blockquote><p>I’m not the first one to point out how strange this disease is!</p><p><span>But perhaps even comparing this to cancer understates the true horror of late-stage endometriosis. In the absolute worst-case stages of the disease, lesions can form deep fibrotic adhesions that tether organs to each other: the bladder fused to the uterus, the bowel glued to the pelvic wall, the ovaries fixed in unnatural positions.</span><a href="https://pubmed.ncbi.nlm.nih.gov/32283226/" rel=""> One commentary paper</a><span> states this:</span></p><blockquote><p><em>It doesn’t take more than a short inspection into the peritoneal space of a patient with widespread superficial or deep infiltrating endometriosis to understand that this is not the appearance of a usual benign disease. It’s not uncommon that a surgeon walks out of the operating theatre after a long and exhausting endometriosis case, saying: “This is worse than metastatic cancer”!</em></p></blockquote><p><span>But at least with late-stage cancers, that are </span><strong>some</strong><span> miracles that can be accomplished. After all,</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC6928196/" rel=""> the birth of cancer immunotherapy</a><span> came from finding that, in rare cases, patients with late-stage tumors could see a complete and miraculous remission, as if entirely by magic. And if a patient's immune system </span><em>could</em><span> do this once, even rarely, then perhaps it could be trained—or unshackled—to do it more reliably. So we got checkpoint inhibitors, CAR-T therapy, and so on.</span></p><p>For patients who have endometriosis, is there anything remotely analogous?</p><p>Unfortunately, no.</p><p>Currently, there are two routes for endometriosis treatment: noninvasive chemical treatments, and invasive surgical treatments.</p><p><span>In the former case,</span><a href="https://www.mdpi.com/1424-8247/18/4/588" rel=""> the primary strategy revolves around hormonal therapy.</a><span> The logic is simple: starve the lesions of the chemical cues they need to grow and cycle. Oral contraceptives are used to flatten the hormonal fluctuations of the menstrual cycle, progestin mimics to induce an atrophic state in the endometrial-like tissue, and, in short doses, GnRH agonists to induce a reversible state of complete estrogen suppression. There are other treatment paths too, but these are the most commonly-used ones.</span></p><p><span>In the latter cases, usually for endometriosis that is either resistant to hormonal therapy or has progressed to the point of causing anatomical distortion, organ dysfunction, or intolerable pain,</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC3881735/" rel=""> direct surgical intervention is used</a><span>. The goal is twofold: remove/destroy visible lesions, and restore normal pelvic anatomy that have become fused together through endometrial-tissue-like overgrowth.</span></p><p><strong>Neither of these do anything to actually cure the disease.</strong><span> I want to be fair and give the necessary nuance to that statement, because it is a strong one to make, but I want to be clear. What they both do is </span><strong>management</strong><span> of endometriosis. But they do not represent a cure in any functional capacity.</span></p><p><span>In the case of hormonal treatments, the endometrial tissue doesn’t </span><strong>starve</strong><span>, not really. There are cases where hormonal treatments do genuinely reduce the size of a malignant entity, such as in estrogen-dependent breast cancer. But this is not the case for endometriosis lesions.</span><a href="https://obgyn.onlinelibrary.wiley.com/doi/full/10.1111/aogs.14887" rel=""> One review paper found that while hormonal therapy helps slow progression in </a><strong><a href="https://obgyn.onlinelibrary.wiley.com/doi/full/10.1111/aogs.14887" rel="">some</a></strong><a href="https://obgyn.onlinelibrary.wiley.com/doi/full/10.1111/aogs.14887" rel=""> patients</a><span>, there is minimal evidence of change in the size of endometrial lesions over months of continued therapy. Moreover,</span><a href="https://link.springer.com/article/10.1007/s42000-025-00636-4?" rel=""> oral contraceptives do not seem to stop the expression of angiogenesis factors within endometrial lesions</a><span>, and may in fact </span><em>somehow</em><span> accelerate it. And if a patient ever stops the hormone therapy, relapse is the norm;</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10201290/?" rel=""> one study found that a majority of patients saw symptom-recurrence within 5 years</a><span> after finishing a year-long cycle of GnRH-agonist therapy.</span></p><p><span>The case for surgery isn’t much better.</span><a href="https://www.imrpress.com/journal/CEOG/46/5/10.12891/ceog4949.2019/htm" rel=""> While surgery certainly, on average, helps with endometriosis-associated pain</a><span>, it isn’t curative. The numbers obviously depend on a lot of different factors, but</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC3881735/?utm_source=chatgpt.com" rel=""> 5-year post-operative recurrence rates are between 20-45%, and the 8-year rate is squarely in the 40% range</a><span>. Which maybe doesn’t sound </span><strong>terrible</strong><span>, but consider that endometriosis surgeries aren’t risk free at all,</span><a href="https://obgyn.onlinelibrary.wiley.com/doi/10.1111/j.1471-0528.2010.02774.x" rel=""> with roughly 1% of patients developing a major-post operative complication</a><span> (e.g. bladder injury, bowel injury, vaginal dehiscence, etc). Mildly good news is that it </span><a href="https://link.springer.com/article/10.1007/s00404-023-07193-4/tables/5" rel="">doesn’t seem like that development of these complications go up based on whether you’ve had the surgery in the past.</a><span> </span></p><p><span>There are options outside of hormonal therapy and surgical operations rising, but they are largely still in their infancy. There’s </span><a href="https://www.pnas.org/doi/10.1073/pnas.1916144116" rel="">dichloroacetate</a><span>, which, interestingly, is also a promising drug for </span><a href="https://www.nature.com/articles/6604554" rel="">cancer</a><span> for the same reason it works for endometriosis. Both cancer and endometrial tissue seem to display the same unique form of cell metabolism (the </span><a href="https://en.wikipedia.org/wiki/Warburg_effect_(oncology)" rel="">Warburg Effect</a><span>), which dichloroacetate disrupts. There’s also cabergoline, a drug meant for Parkinson’s disease that also coincidentally hinders angiogenesis, and has been shown in at least </span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC8655411/" rel="">one randomized trial to reduce pelvic pain caused by the disease.</a><span> There are other </span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC8508913/" rel="">burgeoning non-hormonal chemical treatments being developed</a><span>, but, again, none of them seem to be in active use.</span></p><p><span>This all said, having no curative procedures at all, and only management ones, isn’t the </span><strong>worst</strong><span> thing in the world. After all, that’s the status quo for HIV! And that disease went from a death sentence to something that just requires a simple pill per day to keep it at bay, no other functional impacts. It can’t be cured, but that doesn’t matter. The patient's life is basically the same either way.</span></p><p><span>Is that the case for endometriosis? If you follow the currently recommended set of hormone therapies and surgeries (if needed), can a patient return back to their pre-disease state?</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10905511/" rel=""> In one of the most comprehensive review papers </a><span>I found, they examine that exact question, combing through 139 past studies to come up with an issue. </span><strong>And, generally speaking, the answer is no.</strong><span> The (heavily simplified) results are here:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg" width="1456" height="380" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:380,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F23fd81df-cf80-428b-9f8a-add310c98220_1456x380.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>There are certainly improvements with the currently approved treatment plans, but the situation is a fair bit worse here than it is for HIV. There is a long, long way to go for endometriosis to become a ‘background’ chronic condition, rather than one that continues to cause a lowering of quality-of-life even when treated.</p><p>Well, this all said, endometriosis isn’t alone here. Lots of diseases also have enormous, chronic impacts on quality of life and have little in the way of dependable treatment. Cancer of course, but also Alzheimer's, Crohn’s disease, ALS, and so on.</p><p>But within this observation lies perhaps the most curious part of endometriosis…</p><p><span>One potential way to assess how overlooked </span><strong>and</strong><span> widespread a disease is is by considering the ratio of ‘DALYs’, or Disability-Adjusted-Life-Years, to the amount of NIH funding. Or, Dollars:DALYS. </span></p><p>The former is an indication of how institutional focus is being placed on the disease; more money, the more attention. There are obviously money sources outside of the NIH, but the NIH remains the single largest public funder of biomedical research in the world (at least for now…), and its budget choices set the tone for scientific priorities across academia and industry.</p><p><span>The latter is an indicator of how severe </span><strong>and </strong><span>widespread the disease is, with a simple calculation: </span><strong>DALY = YLL + YLD, </strong><span>where </span><strong>YLL</strong><span> (</span><em>Years of Life Lost</em><span>) is years lost due to premature death and </span><strong>YLD</strong><span> (</span><em>Years Lived with Disability)</em><span> is years lived while disabled. Keep in mind that this is years </span><strong>across</strong><span> some given population, not in one person, which also gives an indication of how widespread the condition is. Of course,</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC11525889/" rel=""> DALYs are a limited metric</a><span> given how subjective ‘</span><em>disability</em><span>’ is, but it’s a helpful starting point.</span></p><p>Thus, if Dollars:DALYs is high, that implies that funding is either proportionate to suffering, or is perhaps over allocated to. If it is low, the funding is almost certainly not enough. This is obviously a fuzzy metric, since research doesn’t necessarily go faster just because you throw more money at it, but it is helpful as a data point.</p><p><span>To keep things consistent, let’s work at the order of millions of dollars and DALYs per 100k people, since that is how they both are typically reported. Let’s also focus on chronic conditions, since that is where DALYs are most relevant. Finally, we can pull</span><a href="https://report.nih.gov/funding/categorical-spending#/" rel=""> NIH funding numbers</a><span> from here, and find the DALY counts from review papers. </span></p><p><span>On the highest end, Alzheimer's received $3538M in funding in 2023, and caused</span><a href="https://pubmed.ncbi.nlm.nih.gov/39837288/" rel=""> 451</a><span> DALYs per 100k people worldwide. So, 3538:451, or 7.8.</span></p><p><span>Then Crohn’s Disease, which has the ratio 92:</span><a href="https://www.sciencedirect.com/science/article/abs/pii/S1568997224001460" rel="">20.97</a><span> (4.3). S</span></p><p><span>lightly lower is diabetes, 1187:</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC8915203/" rel="">801.5</a><span> (1.4). </span></p><p><span>Close to it is epilepsy, 245:</span><a href="https://jhpn.biomedcentral.com/articles/10.1186/s41043-025-00783-9#:~:text=Despite%20this%20rise%2C%20the%20age,Supplementary%20Table%202%2C%20Supplementary%20Fig." rel="">177.84</a><span> (1.6).</span></p><p><strong><span>Finally, near the bottom of the list is endometriosis, 29:</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC11754495/?utm_source=chatgpt.com" rel="">56.61</a><span>, or .5.</span></strong></p><p><span>Quite bad. That said, endometriosis isn’t alone in being deeply underfunded. Another condition with an even worse ratio is chronic obstructive pulmonary disease (COPD), which lies at 148:</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC11697803/#:~:text=The%20GBD%202019%20estimated%20a,countries%20%5B3%2C%2021%5D." rel="">926.</a><span>1, or .15. Why COPD? Mostly</span><a href="https://www.thelancet.com/journals/lanres/article/PIIS2213-2600(21)00316-7/fulltext" rel=""> given its stigma as a self-inflicted disease</a><span>. But there is some reason to believe that the true ratio for endometriosis is even worse than what they appear to be on face value.</span></p><p>Why? Diagnosis lag.</p><p><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC11625652/#:~:text=Diagnostic%20delay%20in%20endometriosis%20is,over%2015%20years%20%5B5%5D." rel="">Endometriosis takes, on average, 7–10 years to be diagnosed after symptom onset.</a><span> This is not due to the subtlety of the condition; patients often present with debilitating pain, irregular bleeding, gastrointestinal symptoms, and infertility. But diagnosing endometriosis is difficult,</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC7100540/" rel=""> the gold standard for it being an invasive and expensive procedure that requires general anesthesia: laparoscopic surgery.</a><span> While noninvasive imaging (like ultrasound or MRI) can sometimes detect large lesions, many forms of endometriosis, particularly superficial or deep-infiltrating types,</span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC7100540/" rel=""> are not easily visible this way.</a><span> As a result, a patient must often endure years of symptoms before someone is willing to escalate their care to diagnostic surgery</span><strong>. Because of this, it feels deeply likely that many endometriosis cases simply never enter official registries, making the total burden likely massively undercounted in global DALY calculations.</strong></p><p>Notably, this is unlike most other diseases, even historically underfunded ones, which typically have clear diagnostic criteria that can be confirmed through inexpensive blood tests, imaging, or clinical presentation alone. For example, COPD can be easily diagnosed via spirometry: just blow into a tube.</p><p><span>Given this, how should we update our Dollars:DALYs ratio for endometriosis? One way would be to ask the question: how many cases of endometriosis are currently undiagnosed?</span><a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0154227" rel=""> A 2014 study answers this question</a><span>, albeit limited to a specific region in Italy, by actively searching for endometriosis in a sample of 2,000 premenopausal women who had visited a GP for non-gynecological reasons. Of these, 28 had already been diagnosed with endometriosis. Using a symptom-based questionnaire and surgical follow-up, the authors discover 37 more cases amongst the 2,000 women. </span><strong>In other words, 60%~ of endometriosis cases would not be discovered if there was no active search for them.</strong></p><p>In the absolute worst-case situation, this should lead us to bump our DALYs for endometriosis up by 60%. Starting with a base DALY of 56.61 per 100k people, this leads us to 141.52. </p><p><strong>Thus our ratio becomes 29:141.52, which is a dismal .2, close to that of COPD.</strong></p><p><span>Now, again, that is a worst-case calculation, where the ‘density’ of DALYs in the ‘undiscovered endometriosis’ patient population is identical to that of patients with the diagnosis. This may not be the case, but it’s hard to tell from the literature alone. One study notes that</span><a href="https://pubmed.ncbi.nlm.nih.gov/22990516/" rel=""> diagnosis is slowest when symptoms are vague or non-disabling</a><span>, potentially implying that this undiscovered set of endometriosis would yield fewer DALYs. On the other hand, one could imagine the DALYs being </span><em>higher</em><span> for some fraction of the undiagnosed condition if the lack of hormonal or surgical management leads to more severe complications down the line.</span></p><p>Endometriosis is a remarkable disease. It is something that, despite being studied for centuries, has eluded an understanding of its origins, has an uncanny resemblance to cancer, and lacks any effective curative or management methods. Yet, it stands almost entirely alone in terms of how little funding the condition receives relative to the absolute number of lives it irrevocably alters for the worse: 10% of women (or 190 million) worldwide, with only $29M earmarked for them.</p><p><span>Understandably, characterizing any disease as ‘</span><em>interesting</em><span>’ runs the risk of seeming flippant. Especially given how intensely emotional the impact of it on patient lives can be: chronic pain, infertility, and life-altering disability. This is not my intention! Here, I use ‘interesting’ as a way to convey a sense of </span><strong>unexpectedness. </strong><span>Many aspects of endometriosis are deeply unexpected. And, perhaps more practically and actionably for readers, it is unexpected in ways that are surely fertile ground for more research.</span></p><p><span>Of course, it’s certainly a hard disease to tackle. But so are cancer, Alzheimer's, and HIV, all of which have inspired generations of scientists to feverishly work towards understanding. This partially due to how high the expected impact of such research would likely be, but it’d be rewriting history to not also mention how deeply interesting those conditions were to the people studying them! Talk to any oncology researcher about pancreatic cancer, and they will mention the awfully high death rate, but will also light up when</span><a href="https://www.sciencedirect.com/science/article/abs/pii/S0304383517300149" rel=""> discussing the strangely dense stromal microenvironment that seems to shield it from treatment.</a><span> </span></p><p>The fascination is inseparable from the fight. And it feels like very few people have tried to cover the fascinating part of the disease, only the fight. </p><p><span>I hope, in this essay, I have convinced you that endometriosis is an interesting condition. </span><strong>And, if you are in a position in your life to do so, it may be worth your energy to work on it</strong><span>. In a 2009 essay written by Uri Alon, a well-known systems biologist,</span><a href="https://www.cell.com/molecular-cell/pdf/S1097-2765(09)00641-8.pdf" rel=""> he discusses what makes for a scientific problem worth studying</a><span>. He comes up with the following graph:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg" width="1388" height="486" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:486,&quot;width&quot;:1388,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb2c4a560-2f3a-4927-b6e0-34bdc5f9e20f_1388x486.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>It is obviously impossible for me to state for certain that research into endometriosis will surely result in a large gain of knowledge if more attention, resources, and money is poured into it. But, given the relatively premature state of things in this field, it’s difficult to imagine otherwise. Not a bad bet to make!</p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Implementing Logic Programming (159 pts)]]></title>
            <link>https://btmc.substack.com/p/implementing-logic-programming</link>
            <guid>44272467</guid>
            <pubDate>Fri, 13 Jun 2025 21:32:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://btmc.substack.com/p/implementing-logic-programming">https://btmc.substack.com/p/implementing-logic-programming</a>, See on <a href="https://news.ycombinator.com/item?id=44272467">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><span>Most of my readers are probably familiar with procedural programming, object-oriented programming (OOP), and functional programming (FP). The majority of top programming languages on all of the language popularity charts (like </span><a href="https://www.tiobe.com/tiobe-index/" rel="">TIOBE</a><span>) support all three to some extent.</span></p><p>Even if a programmer avoided one or more of those three paradigms like the plague, they’re likely at least aware of them and what they’re about. Or they’re applying one of the paradigms while denying that they’re doing so, like Haskell programmers using the IO or State Monads (procedural programming), or C programmers writing structs of function pointers (object-oriented programming), or Java programmers using streams (functional programming).</p><p><span>The same is sadly not true of </span><a href="https://en.wikipedia.org/wiki/Logic_programming" rel="">logic programming</a><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-165727931" href="https://btmc.substack.com/p/implementing-logic-programming#footnote-1-165727931" target="_self" rel="">1</a></span><span>. While some programmers are aware of its existence, and might have experienced a little bit of it in university, it’s not even close to the popularity of the other paradigms. I’d go so far as to say that the majority of programmers have no idea what it’s about, and that’s a shame because logic programming is really good at tackling certain kinds of problems.</span></p><p>OOP and FP are easy to explain in terms of procedural programming concepts, and it’s also pretty easy to explain how to implement them. That’s not really the case for logic programming, but when has that ever stopped me?</p><p>What better way to learn something than to implement it?</p><p><span>If you’ve ever lost your marbles trying to model complex relationships between various concepts as objects with bi-directional pointers to each other and derived properties that need to be cached and all that jazz, then that’s a great example of a problem where you should have used logic programming instead (looking at you </span><a href="https://en.wikipedia.org/wiki/Object_Management_Group" rel="">OMG</a><span> and your fancy </span><a href="https://www.omg.org/spec/SysML" rel="">SysML v2</a><span> standard</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-165727931" href="https://btmc.substack.com/p/implementing-logic-programming#footnote-2-165727931" target="_self" rel="">2</a></span><span>).</span></p><p>In logic programming we don’t program with functions as we do in the other paradigms (procedures and methods are also functions). Functions have a set of inputs and a set of outputs, and mutable inputs can be viewed as just another kind of output.</p><p><span>Rather, in logic programming we program with </span><em>relations</em><span>. In logic programming they’re also called predicates, but they’re the same thing really (much like procedures and methods are kinds of functions).</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg" width="658" height="500" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:500,&quot;width&quot;:658,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69e6e412-0213-43ca-9fee-082f3f9ec376_658x500.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The difference between a relation and a function is that a relation doesn’t have a clear distinction between what is an input and what is an output. </p><p><span>I’ll use what is probably the most well known logic programming language, </span><a href="https://en.wikipedia.org/wiki/Prolog" rel="">Prolog</a><span>, to illustrate. Let’s start with a simple example:</span></p><pre><code>male(dicky).
male(randy).
male(mike).
male(don).
male(elmer).

female(anne).
female(rosie).
female(esther).
female(mildred).
female(blair).</code></pre><p><span>In the example above, </span><code>male</code><span> and </span><code>female</code><span> are what are known as </span><em>predicates</em><span> in Prolog. Predicates are defined in terms of </span><em>clauses</em><span>, and a clause can be either a </span><em>rule</em><span> or a </span><em>fact</em><span>. A fact is just a rule that is always true. Every “statement” in the example above is a fact.</span></p><p><span>By writing </span><code>male(randy)</code><span> on its own as above, we’re saying that “</span><em>it is a fact that randy is a male</em><span>”. This being an </span><em>is-a</em><span> relationship is just our own interpretation of what </span><code>male(_)</code><span> means. All Prolog cares about is that there’s a fact for predicate </span><code>male</code><span> that states </span><code>male(randy)</code><span>. A predicate/relation means whatever we want it to mean.</span></p><p><span>The various names of people above are </span><em>atoms</em><span> in Prolog. They’re basically interned strings (same as </span><a href="https://en.wikipedia.org/wiki/Symbol_(programming)" rel="">symbols</a><span> in Lisp, Ruby, Julia, Smalltalk, etc.), but atoms can also be integers and even complex structures. Prolog is dynamically typed so we don’t need to declare any types, but that’s not the case for logic programming in general</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-165727931" href="https://btmc.substack.com/p/implementing-logic-programming#footnote-3-165727931" target="_self" rel="">3</a></span><span>.</span></p><p>All we’ve done so far is state that a bunch of people are either male or female. Not very interesting, but we’ll make use of this information soon. Let’s move on to a more interesting set of facts:</p><pre><code><code>parent(don, randy).
parent(don, mike).
parent(don, anne).

parent(rosie, randy).
parent(rosie, mike).
parent(rosie, anne).

parent(elmer, don).
parent(mildred, don).

parent(esther, rosie).
parent(esther, dicky).</code></code></pre><p><span>In the example above we’ve added a new predicate (parent) and some associated facts, this time relating two people. When we write </span><code>parent(don, randy)</code><span>, we’re saying that Don is one of Randy’s parents. Relations don’t really have an ordering, this is just how we’ve chosen to interpret each of the two arguments.</span></p><p>So far, nothing special, but now we can write our first rule:</p><pre><code>father(X, Y) :- male(X), parent(X, Y).</code></pre><p><span>The rule above says that for any given X and Y (uppercase letters are variables), if X is a male, and X is a parent of Y, then X is the father of Y</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-165727931" href="https://btmc.substack.com/p/implementing-logic-programming#footnote-4-165727931" target="_self" rel="">4</a></span><span>. The weird </span><code>:-</code><span> symbol is a reverse implication, while the comma means “and”. In Prolog “or” would be a semicolon, or just another rule for the same predicate. You can read the example as:</span></p><pre><code>father(X, Y) if male(X) and parent(X, Y)</code></pre><p><span>Anyway, we can now start doing some queries (?- is the query operator)</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5-165727931" href="https://btmc.substack.com/p/implementing-logic-programming#footnote-5-165727931" target="_self" rel="">5</a></span><span>, for example:</span></p><pre><code>?- father(X, randy).</code></pre><p>This will return X=don. If instead we query:</p><pre><code>?- father(don, X).</code></pre><p>We get X=randy, X=mike, and X=anne.</p><p>As I mentioned previously, rules don’t have any clear distinction between inputs and outputs. What constitutes an output depends on the query. I can write the query:</p><pre><code><code>?- father(X, Y).</code></code></pre><p><span>And get every possible pair of father and child in the Prolog interpreter’s “database of facts” (so to speak). The word </span><strong>database</strong><span> is quite relevant actually, since as the name </span><em>relation</em><span> implies, logic programming is closer to relational programming (e.g., SQL) than it is to the other paradigms.</span></p><p>But logic programming can be a lot more powerful (and succinct) than crappy SQL. For example, we can keep adding more interesting rules:</p><pre><code>son(X, Y) :- male(X), parent(Y, X).
daughter(X, Y) :- female(X), parent(Y, X).

sister(X, Y) :- daughter(X, P), parent(P, Y), X \= Y.
brother(X, Y) :- son(X, P), parent(P, Y), X \= Y.

aunt(X, Y) :- sister(X, P), parent(P, Y).
uncle(X, Y) :- brother(X, P), parent(P, Y).</code></pre><p><span>These should hopefully be pretty obvious. Notice how we can introduce new variables in the body of the rules, like P above. Prolog uses </span><a href="https://en.wikipedia.org/wiki/Unification_(computer_science)" rel="">unification</a><span> to link variables together, the same process used by type inference.</span></p><p><span>The real power comes from </span><em>recursion</em><span>:</span></p><pre><code>ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z), ancestor(Z,Y).</code></pre><p>The above is similar to how you do pattern matching in Haskell, in case you’re familiar with that. We can also, for example, add some special cases inspired by the creation myth of Abrahamic religions:</p><pre><code>ancestor(adam, X) :- male(X); female(X).
ancestor(eve, X) :- male(X); female(X).</code></pre><p>If we declare adam as male, then we end up with adam as being an ancestor of adam, which is pretty funny (but also pretty easy to fix).</p><p>Well, I could go over how to implement a Prolog interpreter, but honestly I don’t think you should. Prolog is honestly kind of jank, and I’m not talking about good vintage jank like C.</p><p><span>The main issue is that Prolog is not truly declarative; how you write the rules has a major impact on how the interpreter behaves. You might end up with repeated answers for a query or it might enter an infinite loop. Prolog also allows IO, so the order in which things get executed is critical. It’s </span><a href="https://en.wikipedia.org/wiki/Turing_completeness" rel="">Turing-complete</a><span>, for better or worse.</span></p><p><span>If you really want to implement Prolog specifically, you have to follow its execution semantics, which are based on </span><a href="https://en.wikipedia.org/wiki/SLD_resolution" rel="">SLD resolution</a><span> using depth-first search and backtracking. Prolog programs depend on the specific order in which rules get executed, so you have to perform the search the same way as all the other Prolog implementations do.</span></p><p>But we don’t need Turing-complete Prolog. We already have whatever Turing-complete, multi-paradigm programming language we’re using on a daily basis, we just need to power it up with logic programming.</p><p><span>Most people would do this by implementing </span><a href="https://en.wikipedia.org/wiki/MiniKanren" rel="">miniKanren</a><span>, another logic programming language that is specifically designed to be embedded into a host language, originally Scheme. A later developed simplified core, </span><a href="http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf" rel="">microKanren</a><span>, is so small it can be implemented in 39 lines of Scheme code without any macros.</span></p><p>But I am not a big fan of the miniKanren family. Its design is very functional, which has its advantages, but to me the “database” aspect is important. Unlike Prolog, where facts can be added and removed while the program is running, in miniKanren you set up the universe of facts you care about each time you make a query.</p><p><span>This results in a very clean implementation</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-6-165727931" href="https://btmc.substack.com/p/implementing-logic-programming#footnote-6-165727931" target="_self" rel="">6</a></span><span>, but it leaves a lot of performance on the table. To me, maintaining a stateful database of facts is a core part of the job. That’s what we’re really doing: implementing a fancy database. You can of course bolt on a stateful fact database to a miniKanren implementation, but it’s not how miniKanren is meant to work.</span></p><p><span>Instead, we’ll turn our attention to </span><a href="https://en.wikipedia.org/wiki/Datalog" rel="">Datalog</a><span>, a subset of prolog that is </span><em>not</em><span> Turing-complete. You can’t use Datalog to develop complete applications, but it sure is great at modeling relationships. In fact, I wish it would replace SQL as the language of choice for databases</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-7-165727931" href="https://btmc.substack.com/p/implementing-logic-programming#footnote-7-165727931" target="_self" rel="">7</a></span><span>. SQL isn’t even a good </span><a href="https://en.wikipedia.org/wiki/Relational_model" rel="">relational language</a><span>, and logic programming is just on another level entirely</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-8-165727931" href="https://btmc.substack.com/p/implementing-logic-programming#footnote-8-165727931" target="_self" rel="">8</a></span><span>.</span></p><p>Since Datalog is a subset of Prolog, we could just implement the same algorithm we’d use for a Prolog interpreter and it would work, but the lack of Turing-completeness gives us a lot of room for maneuver. </p><p><span>For one, techniques from </span><a href="https://en.wikipedia.org/wiki/Database_engine" rel="">databases</a><span> are applicable: B-trees, query optimization, index selection, etc. Datalog is also very amenable to </span><a href="https://en.wikipedia.org/wiki/Partial_evaluation" rel="">partial evaluation</a><span>, as employed by the highly optimized </span><a href="https://souffle-lang.github.io/translate" rel="">Soufflé</a><span> dialect.</span></p><p><span>Here we’ll keep it simple and implement what I think is the most basic algorithm for interpreting Datalog: </span><a href="https://en.wikipedia.org/wiki/Datalog#Na%C3%AFve_evaluation" rel="">Naïve Evaluation</a><span>. It’s a simple bottom-up fixpoint algorithm that repeatedly applies each rule until no new facts can be derived. We’ll also abuse operator overloading to make the code </span><em>look</em><span> sort of like Datalog.</span></p><p>We’ll use Python to keep things as simple as possible. The first thing we need is some way to represent variables, values and usages of a predicate (that we’ll call atoms):</p><pre><code>class Variable:
    def __init__(self, name: str):
        self.name = name
    
    def __repr__(self) -&gt; str:
        return self.name

Value = bool | int | float | str
Term = Variable | Value

class Atom:
    def __init__(self, predicate: str, terms: Tuple[Term, ...]) -&gt; None:
        self.predicate = predicate
        self.terms = terms</code></pre><p><span>This Atom class is just used to model a predicate usage like </span><code>father(X, bill</code><span>) and such, either with a variable or a value in each argument. Not sure what else to call it. Note that this is different from the meaning of an atom in Prolog.</span></p><p>Also notice that we cannot pass predicates as arguments to other predicates. This is allowed in Prolog but not in Datalog. Datalog has some restrictions to ensure it always terminates (they can be loosened, but we’ll stick to the basics):</p><ul><li><p>negation is not allowed.</p></li><li><p><span>complex terms as arguments of predicates, e.g., </span><code>p(f(x), y)</code><span>, are not allowed.</span></p></li><li><p>every variable that appears in the head of a clause must also appear in an atom within the body of the clause.</p></li></ul><p>For values we only allow a few builtin Python types to keep things simple. With variables, values and atoms in place, we move on to predicates:</p><pre><code>Fact = Tuple[Value, ...]

class Rule:
    def __init__(self, head: Atom, body: Tuple[Atom, ...]):
        assert len(body) &gt;= 1
        self.head = head
        self.body = body

class Predicate:
    def __init__(self, name: str, arity: int):
        self.name = name
        self.arity = arity
        self.facts: Set[Fact] = set()
        self.rules: List[Rule] = []</code></pre><p>We split clauses directly into separate facts and rules. A fact is just a row of values belonging to a predicate. A rule has a head (left side of the :- operator), which is just a single atom, and a body with one or more atoms (right side of the :- operator). Arity is the expected number of arguments.</p><p>To manage our “database” we’ll create a class simply called Datalog:</p><pre><code>class Datalog:
    def __init__(self) -&gt; None:
        self.variables: Dict[str, Variable] = {}
        self.predicates: Dict[str, Predicate] = {}

    def variable(self, name: str) -&gt; Variable:
        assert name not in self.variables
        v = Variable(name)
        self.variables[name] = v
        return v

    def predicate(self, name: str, arity: int) -&gt; Predicate:
        assert name not in self.predicates
        c = Predicate(name, arity)
        self.predicates[name] = c
        return c</code></pre><p><span>We also store the variables here to make the API a bit nicer and to allow us to safely use </span><a href="https://en.wikipedia.org/wiki/Identity_(object-oriented_programming)" rel="">reference equality</a><span> later on for better performance. We could do the same with string values (turning them into symbols) but I leave that as an exercise for the reader.</span></p><p>Next, we need a way to create atoms and to add facts and rules to a predicate. We’ll add a bit of nasty operator overloading to the Predicate class to achieve this:</p><pre><code>def __getitem__(self, terms: Term | Tuple[Term, ...]) -&gt; Atom:
    # make sure we always work with a tuple
    terms = terms if isinstance(terms, tuple) else (terms,)
    if len(terms) != self.arity:
        raise ValueError()
    return Atom(self.name, terms)

def __setitem__(self, 
    terms: Term | Tuple[Term, ...], 
    rhs: Atom | Tuple[Atom, ...]) -&gt; None:
    # make sure we always work with a tuple
    terms = terms if isinstance(terms, tuple) else (terms,)
    # if the rhs is the empty tuple, we're adding a fact
    if rhs == ():
        # NOTE: facts cannot contain variables, add a check!
        self.facts.add(cast(Tuple[Value, ...], terms))
    elif isinstance(rhs, tuple):
        self.rules.append(Rule(Atom(self.name, terms), rhs))
    else:
        self.rules.append(Rule(Atom(self.name, terms), (rhs,)))</code></pre><p>What we’ve done above allows us to write the following:</p><pre><code>dl = Datalog()

parent = dl.predicate('parent', 2)
ancestor = dl.predicate('ancestor', 2)

X, Y, Z = dl.variable('X'), dl.variable('Y'), dl.variable('Z')

parent['alice', 'bob'] = ()
parent['bob', 'carol'] = ()
ancestor[X, Y] = parent[X, Y]
ancestor[X, Y] = parent[X, Z], ancestor[Z, Y]</code></pre><p><span>We have square brackets instead of round, = instead of :-, and need to write = () to declare a fact, but it sure looks a lot like Datalog. Even the = () is actually correct because </span><code>pred(foo, bar).</code><span> in Prolog and Datalog is just syntax sugar for:</span></p><pre><code>pred(foo, bar) :- .</code></pre><p>So all we’re missing is that little bit of syntax sugar.</p><p>We can model Datalog programs now, but we cannot perform any queries nor infer any new information. First thing we’ll need is an extra datastructure:</p><pre><code>Substitution = dict[Variable, Value]</code></pre><p><span>Pretty simple, just a mapping of variables to values. We’ll make heavy use of this datastructure soon, but first, the most important method — </span><strong>infer</strong><span>:</span></p><pre><code>def infer(self) -&gt; None:
    while True:
        newly_added_facts: List[Tuple[Predicate, Fact]] = []
        for predicate in self.clauses.values():
            for rule in predicate.rules:
                for sub in self.evaluate(rule.body):
                    fact = tuple(
                        sub[t] if isinstance(t, Variable) 
                        else t for t in rule.head.terms)
                    if fact not in predicate.facts:
                        newly_added_facts.append((predicate, fact))
        if not newly_added_facts:
            break
        for p, f in newly_added_facts:
            p.facts.add(f)</code></pre><p><span>Method </span><strong>infer</strong><span> is the core of our Datalog engine. It implements the fixpoint algorithm that expands rules into new facts. You should call this method each time you manually add a new set of facts and/or rules.</span></p><p><span>Every loop iteration, for each rule, we call another method called </span><strong>evaluate</strong><span>, which lazily outputs all possible substitutions given the body of the rule. Each substitution is then used to create a new fact by replacing every variable with the associated value in the head of the rule (keeping any values already in the head).</span></p><p>If that fact was not already in the list of known facts, then we’ve derived a new fact. Once we’ve gone over every rule, if we found any new facts, we update our fact database and iterate again. If no new facts were derived, we’re done.</p><p><span>Method </span><strong>evaluate</strong><span> is just a wrapper around another method called </span><strong>search</strong><span>:</span></p><pre><code>def evaluate(self, atoms: Sequence[Atom]) -&gt; Iterable[Substitution]:
    return self._search(0, atoms, {})

def search(self, i: int, atoms: Sequence[Atom], 
            sub: Substitution) -&gt; Iterable[Substitution]:
    if i == len(atoms):
        yield sub
        return
    atom = atoms[i]
    for fact in self.clauses[atom.predicate].facts:
        new_sub = sub.copy()
        if unify(atom, fact, new_sub):
           yield from self._search(i + 1, atoms, new_sub)</code></pre><p><span>Method </span><strong>search</strong><span> implements a lazy depth-first search. Its goal is to successfully unify every atom in the body of a rule. To do this, it picks the atom at index ‘i’, and for every fact associated with the corresponding predicate, it tries to unify the atom with the fact. If unification succeeds (meaning we’ve obtained a substitution for every variable in the atom), we recursively call </span><strong>search</strong><span> again, only this time starting at the next index and enforcing the current substitution.</span></p><p>As an example of how it works, consider this rule:</p><pre><code>ancestor[X, Y] = parent[X, Z], ancestor[Z, Y]</code></pre><p>The first atom is parent[X, Z]. These are the known facts of parent:</p><pre><code>parent['bob', 'carol']
parent['alice', 'bob']</code></pre><p>We start with the first fact. We unify X=’bob’ and Z=’carol’. We then call search recursively, moving to the next atom, ancestor[Z, Y], with that substitution in hand.</p><p>From the other rule of ancestor:</p><pre><code><code>ancestor[X, Y] = parent[X, Y]</code></code></pre><p>We probably already derived that every parent is an ancestor, so the current facts of ancestor are also:</p><pre><code><code>ancestor['bob', 'carol']
ancestor['alice', 'bob']</code></code></pre><p>We try to unify with the first fact and fail, because the substitution enforces Z=’carol’ which cannot unify with ‘bob’. The second fact also fails to unify, so this is a dead end.</p><p>That branch of the recursion dies and we’re back trying to unify the first atom. Now we unify with the second fact, obtaining the substitution X=’alice’ and Z=’bob’. We recurse again with that substitution.</p><p>We try to unify ancestor[Z, Y] with its first fact, and we succeed, because we can set Z=’bob’ and Y=’carol’. We managed to do a complete substitution, so we yield it.</p><p><span>The function </span><strong>unify</strong><span>, used within </span><strong>search</strong><span>, is pretty simple:</span></p><pre><code>def unify(atom: Atom, fact: Fact, substitution: Substitution) -&gt; bool:
    for t, v in zip(atom.terms, fact):
        if isinstance(t, Variable):
            if t in substitution and substitution[t] != v:
                return False
            substitution[t] = v
        elif t != v:
            return False
    return True</code></pre><p>It takes in an atom, a fact, and a substitution, and pairs up each term in the atom with the corresponding value in the fact at the same position. If the term is a variable, we do the following:</p><ul><li><p>If the variable is in the substitution, then we check if the value associated with it and the value in the fact match. If they don’t, unification fails.</p></li><li><p>If the variable isn’t in the substitution, then we update the substitution by mapping the variable to the value in the fact.</p></li></ul><p>If instead of a variable we see a value, then we just compare that value with the value in the fact directly.</p><p>To finish up our little interpreter, we only need one more method, and it’s a trivial one:</p><pre><code>def query(self, *atoms: Atom) -&gt; Iterable[Substitution]:
    return self.evaluate(atoms)</code></pre><p>Yup, query is just evaluate, but variadic to make the API a bit nicer. With that, we can finally write our tiny Datalog program:</p><pre><code>dl = Datalog()

parent = dl.predicate('parent', 2)
ancestor = dl.predicate('ancestor', 2)

X, Y, Z = dl.variable('X'), dl.variable('Y'), dl.variable('Z')

parent['alice', 'bob'] = ()
parent['bob', 'carol'] = ()
ancestor[X, Y] = parent[X, Y]
ancestor[X, Y] = parent[X, Z], ancestor[Z, Y]

dl.infer()

for result in dl.query(ancestor[X, 'carol']):
    print(result)</code></pre><p>Which outputs (in any order):</p><pre><code>{X: 'alice'}
{X: 'bob'}</code></pre><p>Well that ended up a lot longer than I expected, but the actual implementation is pretty small all things considered. It’s not efficient, but some small optimizations go a long way, for example switching to semi-naïve evaluation. </p><p>The main difference is that instead of always going over every fact in each iteration of the loop, we only apply each rule to facts we derived in the previous iteration.</p><p>Another optimization is dynamically sorting the atoms in the body of a rule based on the number of values each atom contains and the number of associated facts, to try and cause search branches to fail as soon as possible.</p><p>We could also add support for arithmetic and composite atoms (like lists), which introduce some challenges if we wish to stay “Turing-incomplete”.</p><p>Either way, you now have a new tool in your arsenal. No more horrible object graphs desperately trying and failing to model relations, you can now simply use the best paradigm for the job.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple's Liquid Glass is prep work for AR interfaces, not just a design refresh (289 pts)]]></title>
            <link>https://omc345.substack.com/p/from-skeuomorphic-to-liquid-glass</link>
            <guid>44271630</guid>
            <pubDate>Fri, 13 Jun 2025 19:44:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://omc345.substack.com/p/from-skeuomorphic-to-liquid-glass">https://omc345.substack.com/p/from-skeuomorphic-to-liquid-glass</a>, See on <a href="https://news.ycombinator.com/item?id=44271630">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>Apple's introduction of Liquid Glass at WWDC 2025 represents far more than a visual refresh. It's a calculated strategic repositioning that reveals how the company thinks about the next decade of human-computer interaction. While the design community debates readability and the tech press focuses on the absence of major AI announcements, Apple is quietly executing a playbook that should feel familiar to anyone who remembers the iPhone's introduction: prepare users for a paradigm shift by making the transition feel inevitable.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg" width="1456" height="646" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:646,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:70738,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://omc345.substack.com/i/165857187?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3e2f7588-0138-4dd4-9762-4b2987cc095b_2048x908.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>This isn't Apple's first rodeo with controversial design changes. The move from skeuomorphic design in iOS 6 to the stark minimalism of iOS 7 sparked similar debates about usability and aesthetic merit. Critics lambasted the "too thin" fonts and complained about reduced affordances (the visual cues that tell users what they can interact with). Yet within two years, the entire industry had adopted flat design principles, from Google's Material Design to Microsoft's Metro language.</p><p>The pattern is instructive: Apple doesn't just change design for aesthetic reasons. Each major visual overhaul has preceded a fundamental shift in how we interact with technology. Skeuomorphic design made sense when touchscreens were new and users needed familiar metaphors (buttons that looked like physical buttons, bookshelves that looked like real shelves). Flat design emerged when users had internalized touch interactions and no longer needed heavy visual scaffolding.</p><p>Now, with Liquid Glass, Apple is preparing users for a world where the screen itself becomes less relevant.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg" width="1456" height="819" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:822860,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://omc345.substack.com/i/165857187?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d35776c-72b1-4cbb-be69-09eb0efd7fbf_4096x2305.jpeg 1456w" sizes="100vw"></picture></div></a></figure></div><p>The timing isn't coincidental. Apple explicitly credits visionOS as the inspiration for Liquid Glass, and for good reason. In augmented reality, interface elements must coexist with the physical world. They can't be opaque rectangles that block your view. They need to be translucent, layered, and contextually aware. As Alan Dye noted during the visionOS introduction, "every element was crafted to have a sense of physicality: they have dimension, respond dynamically to light, and cast shadows."</p><p>This isn't just about making interfaces prettier. In AR, visual affordances work differently. A button that casts realistic shadows and responds to virtual lighting feels more "real" when floating in your living room than a flat, colored rectangle. The glass metaphor makes intuitive sense when you're literally looking through a device at the world around you.</p><p>By introducing these concepts on traditional screens first, Apple is doing what it does best: making the unfamiliar feel familiar. When users eventually put on AR glasses, the interface paradigms won't feel foreign. The translucent panels, the layered depth, the environmental responsiveness will all feel like a natural extension of what they already know from their iPhone.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg" width="1179" height="879" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:879,&quot;width&quot;:1179,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:160126,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://omc345.substack.com/i/165857187?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25b2b8d2-5e6e-40e1-b7a2-fa64e291d548_1179x879.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>This design shift also plays to Apple's core strategic advantage: vertical integration. Liquid Glass isn't just a visual flourish. It's a technical showcase that demonstrates the tight coupling between Apple's hardware and software. The real-time blurs, dynamic transparency effects, and contextual lighting require serious GPU horsepower and optimized rendering pipelines. It's the kind of feature that runs silky smooth on an iPhone with Apple Silicon but might stutter on competing hardware.</p><p>This creates what economists call a "complementary good" effect. The new design language makes Apple's hardware more valuable by showcasing capabilities that competitors can't easily match. It's similar to how Retina displays created a virtuous cycle: high-resolution screens made iOS look better, which drove demand for Apple devices, which justified the cost of those expensive displays.</p><p>The unified design language across all Apple platforms (from Apple TV to Vision Pro) reinforces this advantage. Developers can design once and trust that the visual language will work consistently across the ecosystem. Users experience cognitive continuity when switching between devices. These network effects are incredibly difficult for competitors to replicate without controlling both hardware and software.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png" width="980" height="551" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:551,&quot;width&quot;:980,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:442181,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://omc345.substack.com/i/165857187?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3aa6b9b8-610f-40d2-807e-f10e2ea8d4dd_980x551.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>While the tech press fixated on Apple's relatively quiet AI story at WWDC 2025, the company was executing a more subtle strategy. Rather than engaging in the current LLM arms race (where it's demonstrably behind), Apple doubled down on what it does best: creating compelling user experiences through design and integration.</p><p>This mirrors Apple's historical approach to new technologies. They're rarely first to market, but they're often first to market with a polished, integrated experience. They didn't invent the smartphone, the tablet, or the smartwatch, but they defined what those categories could be.</p><p>The same pattern appears to be playing out with AI. While competitors race to stuff large language models into everything, Apple is taking a more measured approach. The Liquid Glass design language actually creates opportunities for more contextual AI interactions. Imagine smart suggestions that appear as translucent overlays, or AI-generated content that floats naturally over your existing workflow. The glass metaphor provides a visual framework for AI that feels ambient rather than intrusive.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png" width="1320" height="608" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:608,&quot;width&quot;:1320,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:345813,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://omc345.substack.com/i/165857187?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d313e7d-5fb3-407e-9ac4-49158b70ce8e_1500x750.webp&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddcb558b-acc2-48d6-b9f3-bf7086a00b8e_1320x608.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Of course, every design decision involves tradeoffs. Early feedback on Liquid Glass has raised legitimate concerns about readability and cognitive load. Translucent interfaces can reduce contrast and make text harder to read. The "glass" metaphor can be confusing on a touchscreen, where users directly manipulate elements rather than looking through them.</p><p>But Apple has navigated these challenges before. iOS 7's initial release had similar problems: ultra-thin fonts that were hard to read, blue text links that didn't look clickable, animations that made some users motion sick. Apple responded with gradual refinements: thicker fonts, higher contrast, optional accessibility settings, and more obvious interactive elements.</p><p>The same evolution will likely happen with Liquid Glass. Apple has historically been responsive to accessibility concerns, and they've already provided settings like "Reduce Transparency" and "Increase Contrast" in previous iOS versions. The company can afford to start with a bold vision and refine based on feedback, especially when that vision serves larger strategic goals.</p><p>Perhaps most importantly, Liquid Glass creates what Paul Graham would recognize as a network effect in design language. When Apple changes direction, it doesn't just affect Apple. It influences the entire industry. Developers building for iOS will adopt the new design patterns. Designers at other companies will create similar aesthetics to stay current. Web designers will implement glassmorphism effects to match user expectations set by their phones.</p><p>This industry influence multiplies Apple's strategic advantage. Even users of non-Apple devices will encounter Apple-influenced design patterns, making the eventual transition to Apple products feel more natural. It's a form of cultural lock-in that extends far beyond Apple's direct ecosystem.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg" width="720" height="536" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:536,&quot;width&quot;:720,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:55343,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:&quot;&quot;,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://omc345.substack.com/i/165857187?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7f6f724b-13d3-4944-91ca-f451ea4df9ea_720x960.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9e325ea9-76e4-4fd1-bc2f-6cbbce5cb7d9_720x536.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The introduction of Liquid Glass reveals Apple's theory about the future of computing: we're moving toward ambient, spatial interfaces that blend digital and physical reality. Touch will remain important, but it won't be the primary interaction model forever. Voice, gesture, and contextual awareness will play larger roles.</p><p>By establishing the visual and conceptual framework now, Apple is preparing both users and developers for this transition. When lightweight AR glasses eventually become mainstream (whether in two years or ten), the interface paradigms will already feel familiar.</p><p>This is strategic design thinking at its finest: using aesthetic choices to enable future product categories while strengthening current competitive advantages. It's the kind of long-term planning that has made Apple one of the world's most valuable companies, and it suggests they're not content to rest on the iPhone's success.</p><p>The real question isn't whether Liquid Glass will succeed aesthetically. Apple's design changes always face initial resistance. The question is whether Apple can execute the broader vision it represents: a seamless transition from touch-first to spatial-first computing, with Apple's integrated ecosystem at the center.</p><p>If history is any guide, we'll all be using glass-like interfaces within five years, wondering how we ever lived without them.</p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Self-Adapting Language Models (171 pts)]]></title>
            <link>https://arxiv.org/abs/2506.10943</link>
            <guid>44271284</guid>
            <pubDate>Fri, 13 Jun 2025 19:03:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2506.10943">https://arxiv.org/abs/2506.10943</a>, See on <a href="https://news.ycombinator.com/item?id=44271284">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2506.10943">View PDF</a>
    <a href="https://arxiv.org/html/2506.10943v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>Large language models (LLMs) are powerful but static; they lack mechanisms to adapt their weights in response to new tasks, knowledge, or examples. We introduce Self-Adapting LLMs (SEAL), a framework that enables LLMs to self-adapt by generating their own finetuning data and update directives. Given a new input, the model produces a self-edit-a generation that may restructure the information in different ways, specify optimization hyperparameters, or invoke tools for data augmentation and gradient-based updates. Through supervised finetuning (SFT), these self-edits result in persistent weight updates, enabling lasting adaptation. To train the model to produce effective self-edits, we use a reinforcement learning loop with the downstream performance of the updated model as the reward signal. Unlike prior approaches that rely on separate adaptation modules or auxiliary networks, SEAL directly uses the model's own generation to control its adaptation process. Experiments on knowledge incorporation and few-shot generalization show that SEAL is a promising step toward language models capable of self-directed adaptation. Our website and code is available at <a href="https://jyopari.github.io/posts/seal" rel="external noopener nofollow">this https URL</a>.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Jyothish Pari [<a href="https://arxiv.org/show-email/3f560f7f/2506.10943" rel="nofollow">view email</a>]      <br>    <strong>[v1]</strong>
        Thu, 12 Jun 2025 17:48:13 UTC (1,999 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I convinced HP's board to buy Palm and watched them kill it (601 pts)]]></title>
            <link>https://philmckinney.substack.com/p/i-convinced-hps-board-to-buy-palm</link>
            <guid>44270709</guid>
            <pubDate>Fri, 13 Jun 2025 18:03:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://philmckinney.substack.com/p/i-convinced-hps-board-to-buy-palm">https://philmckinney.substack.com/p/i-convinced-hps-board-to-buy-palm</a>, See on <a href="https://news.ycombinator.com/item?id=44270709">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg" width="1456" height="1048" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1048,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:456746,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://philmckinney.substack.com/i/165406292?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd57a95d-b779-4344-b65d-ec9cf506f3d3_1456x1048.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>I've never shared this story publicly before—how I convinced HP's board to acquire Palm for $1.2 billion, then watched as they destroyed it while I was confined to bed recovering from surgery.</p><p>This isn't just another tech failure analysis. I was the HP Chief Technology Officer who led the technical due diligence on Palm. I presented to Mark Hurd and the HP board, making the case for moving forward with the acquisition. I believed we were buying the future of mobile computing.</p><p>Then I watched it all fall apart from the worst possible vantage point—lying in bed during a eight-week recovery, helpless to intervene as everything I'd worked to build got dismantled in real time.</p><p>This is the story of how smart people destroyed $1.2 billion in innovation value in just 49 days. It's about the brutal personal cost of being blamed for a disaster that happened while you're recovering from surgery. And it's about why I still believe in HP despite everything that went wrong.</p><p>In early 2010, HP was desperately seeking mobile platform capabilities. We knew the computing world was shifting toward mobile, and our traditional PC business faced real threats from tablets and smartphones. We needed to be there.</p><p>Palm was struggling financially, but they possessed something genuinely special in WebOS—true multitasking when iOS and Android couldn't handle it, elegant user interface design, and breakthrough technology architecture buried inside a failing business.</p><p>As CTO, I led the technical due diligence process. I spent weeks embedded with the Palm engineering team in Sunnyvale, crawling through their code base, understanding their platform architecture, and assessing the quality of their technical talent. The deeper I dug, the more convinced I became that this wasn't just another mobile operating system.</p><p>My conclusion was unambiguous: WebOS represented a breakthrough platform technology that could differentiate HP in the emerging mobile computing market. The technology was solid. The team was exceptional. The platform vision was compelling.</p><p>I presented this assessment to Mark Hurd and the board with complete conviction. This wasn't about buying a struggling phone company—it was our strategic entry into the future of computing platforms. I believed every word of my presentation because I had seen the technology's potential firsthand.</p><p>The board agreed with my recommendation. In April 2010, we announced the $1.2 billion acquisition. I felt proud of the technical work we'd done and excited about what we could build together.</p><p>After the acquisition closed in July 2010, my role shifted to helping the Palm team leverage HP's massive capabilities. We had global manufacturing scale, established supply chain relationships, and a consumer and enterprise customer base that Palm had never been able to access as an independent company.</p><p>I spent countless hours working with the Palm leadership team, mapping out integration plans and identifying strategic synergies. We discussed how WebOS could expand beyond smartphones into tablets, potentially integrate with HP's PC platforms, and even find applications in our printer ecosystem.</p><p>Everything seemed aligned for success. </p><p>Then life intervened in the worst possible way.</p><p>Everything seemed aligned for success until the first disaster struck. In August 2010—just one month after we closed the Palm acquisition—Mark Hurd was forced to resign as CEO. The board replaced him with Leo Apotheker, former CEO of SAP, who brought a completely different strategic vision to HP.</p><p>Apotheker's plan was radical: transform HP from a hardware company into a software and services company, similar to IBM's transformation years earlier. He wanted to exit or minimize HP's hardware businesses—PCs, printers, and by extension, mobile devices like the TouchPad. In his mind, WebOS represented exactly the kind of hardware distraction he wanted to eliminate.</p><p>I assumed the strategic rationale for the acquisition remained sound despite the leadership change. The technology hadn't changed. The market opportunity was still there. But I was wrong about the continuity of strategic vision.</p><p>Then, in late June 2011, life intervened in the worst possible way. I faced a medical emergency requiring immediate surgery and a eight-week recovery period confined to bed. You don't schedule medical emergencies—and I had to step away from my integration work with Palm just as the most critical decisions were being made about the platform's future.</p><p>While I was recovering at home, unable to participate in meetings or provide strategic input, the entire mobile computing landscape at HP began to unravel.</p><p>On July 1, 2011, HP launched the TouchPad tablet running WebOS 3.0. I watched the launch from my bed, hoping to see the culmination of all our technical work and strategic planning. Instead, I witnessed the beginning of one of the fastest product failures in tech history.</p><p>The launch was botched from the start. HP priced the TouchPad at $499 to compete directly with the iPad, but without the app ecosystem or marketing muscle to justify that premium. The device felt rushed to market, lacking the polish that could have helped it compete. Consumer reviews were mixed at best.</p><p>Initial sales numbers were devastating: HP sold only 25,000 TouchPads out of 270,000 units shipped to retailers. While Apple was selling 9 million iPads that same quarter, TouchPads were gathering dust on store shelves.</p><p>Then came the announcement that changed everything.</p><p>On August 18, 2011—just 49 days after the TouchPad launch—HP announced it would discontinue all WebOS devices immediately. I was still confined to bed, watching my technical due diligence work and strategic recommendations get dismantled in real time through news reports and industry analysis.</p><p>Forty-nine days. That's not enough time to fix launch problems, build developer momentum, or establish retail partnerships. Platform businesses typically need 18-24 months to demonstrate real market traction. But Leo Apotheker wasn't thinking about platform timelines—he was thinking about his software transformation strategy.</p><p>The most painful part wasn't just the speed of the decision, but learning that Apotheker had made the discontinuation choice without even informing the Palm team beforehand. According to multiple reports, he seemed eager to kill off a product that didn't fit his vision of HP as a software company.</p><p>I felt helpless. Betrayed. And somehow, I was responsible for not being there to fight for what I knew was breakthrough technology.</p><p>My first day back at HP will be burned into my memory forever. I was simply trying to grab lunch in the cafeteria at HP Labs when I found myself surrounded by what felt like the entire technical staff. They weren't there to welcome me back—they were there to hold me accountable.</p><p>The scene was intense and unambiguous. Engineers and researchers who had watched the WebOS disaster unfold were pointing fingers and raising voices. Their message was crystal clear and brutal: "You can never take leave again—EVER!"</p><p>Their exact words still echo in my mind: "The CEO and board need adult supervision."</p><p>Think about the implications of that statement. HP's own technical staff, the people closest to our innovation work, believed that senior leadership couldn't be trusted to make sound technology decisions without someone there to provide oversight and guidance.</p><p>They weren't wrong. The numbers proved it in the most painful way possible.</p><p>But hearing it directed at me personally—being blamed for not providing "adult supervision" while I was recovering from surgery—was devastating. I had recommended the acquisition based on solid technical analysis. I had worked to integrate the teams and technology. But because I wasn't there during the critical 49 days when the decision was made to kill WebOS, somehow the failure became my responsibility.</p><p>Standing in that cafeteria, listening to my colleagues blame me for not being there to prevent the disaster, I realized the fundamental problem wasn't my absence. It was a systematic mismatch between Leo Apotheker's experience and the role he was asked to fill.</p><p>SAP's annual revenue while Leo served as its CEO was approximately $15 billion. The HP board hired a CEO whose largest organizational experience was running a company smaller than HP's smallest division. Based purely on revenue management experience, Apotheker wouldn't have qualified to be a Executive Vice President at HP, yet the board put him in charge of a $125 billion technology company.</p><p>This wasn't just a cultural mismatch—it was a fundamental scale and complexity mismatch that should have been immediately obvious to any functioning board. But nobody asked the right questions about whether Leo's enterprise software background prepared him to evaluate consumer platform technologies such as WebOS, and I wasn't there to provide what my colleagues called "adult supervision."</p><p>When I decided to “retire” from HP, they offered me a separation bonus—a significant financial package that would have made my transition easier. But there was a catch: accepting it would have restricted what I could say publicly about my experiences at the company.</p><p>I refused.</p><p>I've spent my career believing that the truth about innovation decisions—both successes and failures—should be shared so others can learn from them. Taking money to stay quiet about systematic thinking errors that destroyed breakthrough technology felt like betraying everything I believed about how innovation should work.</p><p>The decision cost me financially, but it preserved my ability to tell stories like this one. Stories that might help other leaders avoid similar disasters.</p><p><em>Disclaimer: The following reflects my personal investment decisions and relationship with HP leadership. This is not financial advice, and you should consult with a qualified financial advisor before making any investment decisions.</em></p><p>Here's what might surprise you: I haven't sold a single HP share since leaving the company. Despite watching the WebOS disaster unfold, despite being blamed for not preventing it, despite everything that went wrong during that period, I still believe in HP as an organization.</p><p>I take every opportunity to remind Enrique Lores, HP's current CEO, and Antonio Neri, CEO of HPE, about this fact. Both men were peers of mine when I was at HP. We worked closely together as part of the leadership team that made HP #1 in market share for consumer and commercial PCs &amp; laptops, printers, and servers—helping drive HP to Fortune #11 during that period. They are natural leaders who understand HP's culture and values from the inside, having come up through the organization rather than being parachuted in from outside.</p><p>Enrique and Antonio represent what HP is at its best: technical excellence combined with strategic thinking, innovation grounded in operational discipline, and leadership that understands both the technology and the business. They're the kind of leaders who would have asked different questions about WebOS, who would have applied better decision frameworks to evaluate platform technology under uncertainty.</p><p>My continued shareholding isn't just a matter of financial confidence—it's a statement of faith in what HP can become when the right leadership applies systematic thinking to innovation decisions.</p><p>The WebOS failure taught me something fundamental about innovation decisions that I hadn't fully understood before: intelligence and good intentions don't predict decision quality. Systematic thinking frameworks do.</p><p>Leo Apotheker wasn't stupid. The HP board wasn't incompetent. The financial analysts weren't malicious. But they all used flawed thinking frameworks to evaluate breakthrough technology under pressure, and those systematic errors destroyed $1.2 billion in innovation value.</p><p>The thinking errors were predictable and preventable:</p><p><strong>Solving the wrong problem.</strong><span> Apotheker was asking "How do I transform HP into a software company?" when the right question was "How do we build sustainable competitive advantage in mobile computing platforms?" His entire strategic framework was about exiting hardware businesses, not building platform advantages.</span></p><p><strong>Identity-driven decision making.</strong><span> His background at SAP shaped his entire approach to HP's portfolio. He saw WebOS as a hardware distraction from his software transformation vision.</span></p><p><strong>Tunnel vision under pressure.</strong><span> During this same period, he became laser-focused on acquiring Autonomy for $10.3 billion—a software company that fit his transformation vision perfectly. Everything else, including breakthrough mobile technology, felt like a distraction from this software-focused strategy. That Autonomy acquisition later required more than an $8 billion write-down, but at the time it consumed all of leadership's attention.</span></p><p><strong>Timeline compression under stress.</strong><span> Forty-nine days isn't enough time to fairly evaluate platform technology, but pressure to show decisive leadership compressed the decision timeline artificially.</span></p><p>These errors weren't unique to HP or to Apotheker. I've seen identical patterns across multiple companies and industries. Brilliant engineers kill breakthrough prototypes because they don't fit current product roadmaps. Marketing teams reject game-changing concepts because they can't explain them using existing frameworks. CEOs avoid platform investments because the path to profitability isn't immediately clear.</p><p>Lying in bed during those eight weeks, watching the WebOS disaster unfold while being powerless to intervene, I first performed an autopsy of how we got to such a bad decision. Was there a framework that could have led to better decisions? That analysis eventually became a systematic approach to innovation decisions that could prevent these predictable errors.</p><p>The framework that emerged from this painful experience is something I call DECIDE—a systematic thinking process specifically designed for innovation decisions under uncertainty:</p><p><strong>D</strong><span>efine the real decision (not just the obvious question)</span><br><strong>E</strong><span>xamine your thinking process for cognitive biases</span><br><strong>C</strong><span>hallenge your assumptions systematically</span><br><strong>I</strong><span>dentify decision traps specific to innovation contexts</span><br><strong>D</strong><span>esign multiple genuinely different options</span><br><strong>E</strong><span>valuate with evidence frameworks appropriate for breakthrough technology</span></p><p data-attrs="{&quot;url&quot;:&quot;https://open.substack.com/pub/philmckinney/p/download-your-decide-framework-how?r=3rtha&amp;utm_campaign=post&amp;utm_medium=web&amp;showWelcomeOnShare=true&quot;,&quot;text&quot;:&quot;Download the DECIDE Framework &amp; Toolkit&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://open.substack.com/pub/philmckinney/p/download-your-decide-framework-how?r=3rtha&amp;utm_campaign=post&amp;utm_medium=web&amp;showWelcomeOnShare=true" rel=""><span>Download the DECIDE Framework &amp; Toolkit</span></a></p><p>This isn't theoretical academic stuff. It's a practical framework born from watching smart people make systematic thinking errors that destroyed breakthrough technology value. It's designed to prevent the specific cognitive errors that killed WebOS and continue to kill innovation investments across industries.</p><p><span>Next Wednesday (6/11/2025) , I'll walk you through exactly </span><a href="https://youtube.com/playlist?list=PLvB-SRr-lUbNSRQvUJBiHebPhEmQcNagU&amp;si=ZZHoccy8x6Ic5dDg" rel="">how to apply the DECIDE framework</a><span> to your current innovation decisions. I'll show you the specific tools and questions that can help you avoid the thinking traps that consistently destroy breakthrough technology value.</span></p><p data-attrs="{&quot;url&quot;:&quot;https://youtube.com/playlist?list=PLvB-SRr-lUbNSRQvUJBiHebPhEmQcNagU&amp;si=ZZHoccy8x6Ic5dDg&quot;,&quot;text&quot;:&quot;Watch The Video on DECIDE Framework&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://youtube.com/playlist?list=PLvB-SRr-lUbNSRQvUJBiHebPhEmQcNagU&amp;si=ZZHoccy8x6Ic5dDg" rel=""><span>Watch The Video on DECIDE Framework</span></a></p><p>Sometimes I wonder what would have happened if I hadn't needed surgery during those critical weeks. Would I have been able to convince the leadership team to give WebOS more time? Could I have provided the "adult supervision" my colleagues said was missing? Would better thinking frameworks have changed the outcome?</p><p>I'll never know for certain. But I do know this: the technology was sound, the market opportunity was real, and the decision to kill WebOS after 49 days was based on systematic thinking errors that could have been prevented with better decision frameworks.</p><p>But here's the final piece of the story: Leo Apotheker was fired on September 22, 2011—just 35 days after shutting down WebOS and eleven months after taking over as CEO. The board finally recognized the systematic thinking errors that had destroyed billions in value, but it was too late for WebOS.</p><p>The human cost of these decisions goes beyond stock prices and quarterly reports. There are real people who believed in breakthrough technology, fought for innovation, and had to watch it get destroyed by preventable thinking errors.</p><p><span>In my case, I announced my retirement from HP on October 31, 2011 via </span><a href="https://www.philmckinney.com/goodbye-hp-2/" rel="">my blog</a><span> (</span><a href="https://www.wired.com/2011/11/hp-phil-mckinny/" rel="">Wired Magazine</a><span>). My last day at HP was December 31, 2011.</span></p><p>WebOS technology eventually found success when LG licensed it for smart TV platforms. The core architecture and UI influenced every subsequent mobile operating system. HP could have owned that platform innovation and the ecosystem value it created.</p><p>What breakthrough technology or innovation opportunity is your team evaluating right now? Before you make any irreversible choices, ask yourself: are you applying systematic thinking frameworks to this decision, or are you relying on intuition and conventional business metrics that might mislead in innovation contexts?</p><p>Because here's what I learned from watching the WebOS disaster unfold while confined to bed, helpless to intervene: when you have breakthrough technology in your hands, the quality of your decision-making process matters more than the quality of your technology.</p><p>Intelligence and good intentions aren't enough. You need systematic frameworks for thinking clearly about innovation decisions under uncertainty.</p><p><span>Wednesday, I'll show you exactly </span><a href="https://youtube.com/playlist?list=PLvB-SRr-lUbNSRQvUJBiHebPhEmQcNagU&amp;si=ZZHoccy8x6Ic5dDg" rel="">how to build and apply those frameworks</a><span>. The tools exist to prevent these disasters. The question is whether you'll use them before it's too late.</span></p><p data-attrs="{&quot;url&quot;:&quot;https://youtube.com/playlist?list=PLvB-SRr-lUbNSRQvUJBiHebPhEmQcNagU&amp;si=ZZHoccy8x6Ic5dDg&quot;,&quot;text&quot;:&quot;How To Apply Decision Framework&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://youtube.com/playlist?list=PLvB-SRr-lUbNSRQvUJBiHebPhEmQcNagU&amp;si=ZZHoccy8x6Ic5dDg" rel=""><span>How To Apply Decision Framework</span></a></p><p><em>What innovation decision is keeping you up at night? Reply and let me know—I read every response and often use reader questions to shape future Studio Notes.</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[When random people give money to random other people (2017) (106 pts)]]></title>
            <link>https://quomodocumque.wordpress.com/2017/06/27/when-random-people-give-money-to-random-other-people/</link>
            <guid>44270144</guid>
            <pubDate>Fri, 13 Jun 2025 16:49:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://quomodocumque.wordpress.com/2017/06/27/when-random-people-give-money-to-random-other-people/">https://quomodocumque.wordpress.com/2017/06/27/when-random-people-give-money-to-random-other-people/</a>, See on <a href="https://news.ycombinator.com/item?id=44270144">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						<p><a href="http://www.decisionsciencenews.com/2017/06/19/counterintuitive-problem-everyone-room-keeps-giving-dollars-random-others-youll-never-guess-happens-next/">A post on Decision Science</a> about a problem of <a href="http://www.sesp.northwestern.edu/profile/?p=89">Uri Wilensky</a>‘s has been making the rounds:</p>
<blockquote><p>Imagine a room full of 100 people with 100 dollars each. With every tick of the clock, every person with money gives a dollar to one randomly chosen other person. After some time progresses, how will the money be distributed?</p></blockquote>
<p>People often expect the distribution to be close to uniform. &nbsp;But this isn’t right; the simulations in the post show clearly that inequality of wealth rapidly appears and then persists (though each individual person bobs up and down from rich to poor.) &nbsp;What’s going on? &nbsp;Why would this utterly fair and random process generate winners and losers?</p>
<p>Here’s one way to think about it. &nbsp;The possible states of the system are the sets of nonnegative integers (m_1, .. m_100) summing to 10,000; if you like, the lattice points inside a simplex. &nbsp;(From now on, let’s write N for 100 because who cares if it’s 100?)</p>
<p>The process is a random walk on a graph G, whose vertices are these states and where two vertices are connected if you can get from one to the other by taking a dollar from one person and giving it to another. &nbsp;We are asking: &nbsp;when you run the random walk for a long time, where are you on this graph? &nbsp;Well, we know what the stationary distribution for random walk on an undirected graph is; it gives each vertex a probability proportional to its degree. &nbsp;On a regular graph, you get uniform distribution.</p>
<p>Our state graph G isn’t regular, but it almost is; most nodes have degree N, where by “most” I mean “about 1-1/e”; since the number of states is</p>
<p><img src="https://s0.wp.com/latex.php?latex=N%5E2+%2B+N+-+1+%5Cchoose+N-1&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=N%5E2+%2B+N+-+1+%5Cchoose+N-1&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=N%5E2+%2B+N+-+1+%5Cchoose+N-1&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="N^2 + N - 1 \choose N-1"></p>
<p>and, of these, the ones with degree N are exactly those in which nobody’s out of money; if each person has a dollar, the number of ways to distribute the remaining N^2 – N dollars is</p>
<p><img src="https://s0.wp.com/latex.php?latex=N%5E2+%C2%A0-+1+%5Cchoose+N-1&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=N%5E2+%C2%A0-+1+%5Cchoose+N-1&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=N%5E2+%C2%A0-+1+%5Cchoose+N-1&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="N^2 &nbsp;- 1 \choose N-1"></p>
<p>and so the proportion of states where someone’s out of money is about</p>
<p><img src="https://s0.wp.com/latex.php?latex=%5Cfrac%7B%28N%5E2+-+1%29%5EN%7D%7B%28N%5E2+%2B+N+-+1%29%5EN%7D+%5Csim+%281-1%2FN%29%5EN+%5Csim+1%2Fe&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cfrac%7B%28N%5E2+-+1%29%5EN%7D%7B%28N%5E2+%2B+N+-+1%29%5EN%7D+%5Csim+%281-1%2FN%29%5EN+%5Csim+1%2Fe&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cfrac%7B%28N%5E2+-+1%29%5EN%7D%7B%28N%5E2+%2B+N+-+1%29%5EN%7D+%5Csim+%281-1%2FN%29%5EN+%5Csim+1%2Fe&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\frac{(N^2 - 1)^N}{(N^2 + N - 1)^N} \sim (1-1/N)^N \sim 1/e">.</p>
<p>So, apart from those states where somebody’s broke, in the long run&nbsp;<em>every possible state is equally likely;</em> &nbsp;we are just as likely to see $9,901 in one person’s hands and everybody else with $1 as we are to see exact equidistribution again.</p>
<p>What is a random lattice point in this simplex like? &nbsp;Good question! &nbsp;An argument just like the one above shows that the probability nobody goes below $c is on order e^-c, at least when c is small relative to N; in other words, it’s highly likely that somebody’s very nearly out of money.</p>
<p>If X is the maximal amount of money held by any player, what’s the distribution of X? &nbsp;I didn’t immediately see how to figure this out. &nbsp;You might consider the continuous version, where you pick a point at random from the <em>real</em> simplex</p>
<p><img src="https://s0.wp.com/latex.php?latex=%28x_1%2C+..+x_N%29+%5Cin+%5Cmathbf%7BR%7D%5EN%3A%C2%A0%C2%A0+%5Csum+x_i+%3D+N%5E2&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%28x_1%2C+..+x_N%29+%5Cin+%5Cmathbf%7BR%7D%5EN%3A%C2%A0%C2%A0+%5Csum+x_i+%3D+N%5E2&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28x_1%2C+..+x_N%29+%5Cin+%5Cmathbf%7BR%7D%5EN%3A%C2%A0%C2%A0+%5Csum+x_i+%3D+N%5E2&amp;bg=ffffff&amp;fg=555555&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="(x_1, .. x_N) \in \mathbf{R}^N:&nbsp;&nbsp; \sum x_i = N^2">.</p>
<p>Equivalently; break a stick at N-1 randomly chosen points; what is the length of the longest piece? &nbsp;<a href="https://arxiv.org/abs/1405.6114">This is a well-studied problem</a>; the mean size of the longest piece is about N log N. &nbsp;So I guess I think maybe that’s the expected value of the net worth of the richest player?</p>
<p>But it’s not obvious to me whether you can safely approximate the finite problem by its continuous limit (which corresponds to the case where we keep the number of players at N but reduce the step size so that each player can give each other a cent, or a picocent, or whatever.)</p>
<p>What happens if you give each of the N players just one dollar? &nbsp;Now the uniformity really breaks down, because it’s incredibly unlikely that nobody’s broke. &nbsp;The probability distribution on the set of (m_1, .. m_N) summing to N assigns each vector a probability proportional to the size of its support (i.e. the number of m_i that are nonzero.) &nbsp;That must be a well-known distribution, right? &nbsp;What does the corresponding distribution on partitions of N look like?</p>
<p><strong>Update</strong>: &nbsp;Kenny Easwaran points out that this is basically the same computation physicists do <a href="https://courses.physics.ucsd.edu/2017/Spring/physics4e/boltzmann.pdf">when they compute the Boltzmann distribution</a>, which was new to me.</p>


		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Peano arithmetic is enough, because Peano arithmetic  encodes computation (151 pts)]]></title>
            <link>https://math.stackexchange.com/a/5075056/6708</link>
            <guid>44269822</guid>
            <pubDate>Fri, 13 Jun 2025 16:10:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://math.stackexchange.com/a/5075056/6708">https://math.stackexchange.com/a/5075056/6708</a>, See on <a href="https://news.ycombinator.com/item?id=44269822">Hacker News</a></p>
Couldn't get https://math.stackexchange.com/a/5075056/6708: Error: Request failed with status code 403]]></description>
        </item>
    </channel>
</rss>