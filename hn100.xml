<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 06 Feb 2025 12:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[US Cloud soon illegal in EU? US punches first hole in EU-US Data Deal (115 pts)]]></title>
            <link>https://noyb.eu/en/us-cloud-soon-illegal-trump-punches-first-hole-eu-us-data-deal</link>
            <guid>42960788</guid>
            <pubDate>Thu, 06 Feb 2025 09:52:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://noyb.eu/en/us-cloud-soon-illegal-trump-punches-first-hole-eu-us-data-deal">https://noyb.eu/en/us-cloud-soon-illegal-trump-punches-first-hole-eu-us-data-deal</a>, See on <a href="https://news.ycombinator.com/item?id=42960788">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><ul><li><a href="https://noyb.eu/en/eu-us-data-transfers-0">Background on the EU-US data transfer saga</a></li><li><a href="https://ec.europa.eu/commission/presscorner/api/files/attachment/872132/Trans-Atlantic%20Data%20Privacy%20Framework.pdf">TADPF information PDF by the EU</a></li><li><a href="https://www.dataprivacyframework.gov/">TADPF program page by the US Government</a></li><li><a href="https://eur-lex.europa.eu/eli/dec_impl/2023/1795/oj/eng">TADPF Decision (EU) 2023/1795</a></li><li>CJEU: <a href="https://curia.europa.eu/juris/liste.jsf?nat=or&amp;mat=or&amp;pcs=Oor&amp;jur=C%2CT%2CF&amp;num=C-362%252F14&amp;for=&amp;jge=&amp;dates=&amp;language=en&amp;pro=&amp;cit=none%252CC%252CCJ%252CR%252C2008E%252C%252C%252C%252C%252C%252C%252C%252C%252C%252Ctrue%252Cfalse%252Cfalse&amp;oqp=&amp;td=%3BALL&amp;avg=&amp;lgrec=de&amp;lg=&amp;page=1&amp;cid=24419979">Schrems I</a> and <a href="https://curia.europa.eu/juris/liste.jsf?nat=or&amp;mat=or&amp;pcs=Oor&amp;jur=C%2CT%2CF&amp;num=C-311%252F18&amp;for=&amp;jge=&amp;dates=&amp;language=en&amp;pro=&amp;cit=none%252CC%252CCJ%252CR%252C2008E%252C%252C%252C%252C%252C%252C%252C%252C%252C%252Ctrue%252Cfalse%252Cfalse&amp;oqp=&amp;td=%3BALL&amp;avg=&amp;lgrec=de&amp;lg=&amp;page=1&amp;cid=24420097">Schrems II</a></li><li><a href="https://news.bloomberglaw.com/privacy-and-data-security/trump-terminates-trio-of-democrats-from-privacy-oversight-board">Report on the removal of PCLOB members</a></li></ul><p><strong>The EU-US Data Transfer System - a mix of EU and US law. </strong>Generally, EU law prohibits exporting personal data to countries outside of the EU since 1995, unless there is an absolute need (e.g. when sending an email to any non-EU country). Data can be sent abroad when the non-EU country provides "essentially equivalent" protection of Europeans' personal data. The US, on the other hand, has <a href="https://noyb.eu/en/eu-us-data-transfers-0">very strong mass surveillance laws</a> (e.g. FISA702 or EO 12.333), that allow the US government to access any data stored with Amazon, Meta, Microsoft, Google and any other US Big Tech firm without probable cause or individual judicial approval. Therefore, the European Court of Justice has held twice (<a href="https://curia.europa.eu/juris/liste.jsf?nat=or&amp;mat=or&amp;pcs=Oor&amp;jur=C%2CT%2CF&amp;num=C-362%252F14&amp;for=&amp;jge=&amp;dates=&amp;language=en&amp;pro=&amp;cit=none%252CC%252CCJ%252CR%252C2008E%252C%252C%252C%252C%252C%252C%252C%252C%252C%252Ctrue%252Cfalse%252Cfalse&amp;oqp=&amp;td=%3BALL&amp;avg=&amp;lgrec=de&amp;lg=&amp;page=1&amp;cid=24419979">Schrems I</a> and <a href="https://noyb.eu/en/cjeu">Schrems II</a>) that US law is not "essentially equivalent". However, Ursula von der Leyen has insisted to pass a third EU-US deal, called <a href="https://noyb.eu/en/european-commission-gives-eu-us-data-transfers-third-round-cjeu">"Transatlantic Data Privacy Framework"</a> (TADPF).</p><p><strong>TADPF was built on sand. </strong>On 10.7.2023 the European Commission issued <a href="https://eur-lex.europa.eu/eli/dec_impl/2023/1795/oj/eng">Implementing Decision (EU) 2023/1795</a>, formally passing the TADPF. This allowed any EU business to freely transfer data to US providers, despite US surveillance laws. The European Commission relied on (very questionable) executive orders or letters by the US government, including the PCLOB, to find that the US is "essentially equivalent". However, these elements are not reflected in US statutes and codified law, because there was no majority in the US Congress to pass such laws<span>. </span>It was long criticised that the next US president could kill these protections with the strike of a pen. This scenario is now on the horizon. In its decision, the European Commission mentioned the PCLOB a whopping 31 times to explain why the US has "essentially equivalent" protections. The PCLOB is the only general "oversight" body that monitors if US services actually compy with laws, orders and other promises. Other elements of US law, like various redress mechanisms, require a plaintiff to become active. The US has traditionally blocked access to these bodies via various "standing" rules, leading to basically no lawsuits ever beeing admitted. This means that the PCLOB is the only relevant oversight mechanism that the TADPF relied upon.</p><p>Max Schrems: "<em>This deal was always built on sand, but the EU business lobby and the European Commission wanted it anyways. Instead of stable legal limitations, the EU agreed to executive promises that can be overturned in seconds. Now that the first Trump waves hit this deal, it quickly throws many EU businesses into a legal limbo. The PCLOB itself is only one puzzle piece, and as long as it is only temporarily not functioning, there is an argument that the deal is not worse then before. However, the direction this is taking in the first week of the Trump Presidency is not looking good. We are closely monitoring, if this is a temporary problem or if the PCLOB is being killed for good."</em></p><p><strong>Independence of executive bodies called into question.</strong> Different to data protection authorities in the EU, most US oversight bodies are creatures of the executive branch and hence not independent. Independence is often only granted by the President, but can be revoked or overruled at any time. Many of these strange legal concepts are a reults of the structural inability to pass actual legislation in the US. Instead, entire legal areas are merely regulated by Presidential orders. The fact that the US president is now attempting to simply remove people, calls into question if the idea of (allegedly) "independent" executive bodies was even factually arguable from the get go. Many other elements of the TADPF, like the Data Protection Review Court have even weaker legal protections than the PCLOB.</p><p>Max Schrems: "<em>There were many questions on the independence of these oversight mechanisms. Unfortunately, it seems that they may not even stand the test of just the first days of a Trump Presidency. This is the difference between solid legal protections in law and wishful thinking. The European Commission has solely relied on the latter.</em>"</p><p><strong>45 days for next crunch point. </strong>In <a href="https://www.whitehouse.gov/presidential-actions/2025/01/initial-rescissions-of-harmful-executive-orders-and-actions/">one of the first Executive Orders Trump has signed</a> on Monday, he determined that all Biden national security decisions (including the relevant decisions that the EU-US transfers rely upon) shall be reviewed and potentially scrapped within 45 days. This means that further elements the TADPF relied upon could collapse within days. As the entire deal is based on Biden executive decisions, Trump could scrap all key elements of the deal with a single signature <span lang="de">–</span> leading to instantly illegal data transfers between the EU and the US.</p><p>Max Schrems: "<em>I can hardly imagine that a Biden Executive Order that was forced on the US by the EU and that regulates US espionage abroad could survive Trump's 'America First' logic. The problem is, that not just US Big Tech, but especially normal EU businesses all rely on this system of instable executive orders to argue that using US cloud systems is legal in the EU."</em></p><p><strong>Commission manoeuvred EU businesses towards a cliff.</strong> Despite all facts and criticism by the European Parliament and EU data protection authorities, the European Commission has consistently argued that the TADPF is solid and sound. The EU business lobby pushed for a(ny) deal <span lang="de">–</span> no matter how unstable or wacky. Equally, US Big Tech wanted to stay on the EU market without any technical limitations in relation to US government access. Now, everyone from large banks, entire national school systems to many small businesses may wake up to a legal situation, where the use of US cloud products is soon illegal.</p><p><strong>EU-US data transfers legal for now </strong><span lang="de"><strong>–</strong></span><strong> but get prepared.</strong> A decision by the US administration will not instantly make US transfers illegal. The European Commission's decision is generally legal as long as it is on the books and not annulled by the Commission itself or the Court of Justice. So even if the material finding becomes wrong, the decision still formally exists until it is overturned. However, if key elements that the EU has relied upon are not functioning, the EU will have to annul the deal.</p><p>Max Schrems: <em>"While the arguments for the EU-US deal seem to fall apart, companies can rely on the deal as long as it is not formally annulled. However, given the developments in the US, it is more crucial than ever for businesses and other organisation to have a 'host in Europe' contingency plan."</em></p><p><strong>European Comission in a tough spot. </strong>The European Commission has manoeuvred itself in a tough spot not only from a credibility perspective, but also from a diplomatic perspective. If it now reacts quickly and annuls the TADPF, <a href="https://www.politico.eu/article/zuckerberg-urges-trump-to-stop-eu-from-screwing-with-fining-us-tech-companies/">the US Tech Oligarchy will cry that the EU would be "<em>screwing with</em>" US Big Tech</a>. The Trump administration may take this as a reason to start a first major fight with the EU. However, not taking action and failing to officially warn EU businesses, public bodies and other organisations that send data to the US also seems problematic. The future of the TADPF may be very short-lived.</p><p><strong>EU version of the US TikTok debate?</strong> While the US has long belittled European fears about personal data flowing to the US and being used in mass surveillance, the US has suddenly turned around once its own data was aggregated by TikTok. On one hand, a prohibition or a compulsory acquisition of US Big Tech in Europe would be legally impossible. US businesses would be protected from the EU passing an equivalent to a "TikTok ban". At the same time, a duty to keep EU data outside of the hands of the US government is the default under EU law since 1995. It would also be the law, once the European Commission annuls the EU-US deal. US Big Tech would then have to shield their EU data centers from access by their US parent companies..</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Linux Running in a PDF (162 pts)]]></title>
            <link>https://linux.doompdf.dev/linux.pdf</link>
            <guid>42959775</guid>
            <pubDate>Thu, 06 Feb 2025 06:52:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://linux.doompdf.dev/linux.pdf">https://linux.doompdf.dev/linux.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=42959775">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[America's Dangerous Movement Toward Oligarchy, Authoritarianism and Kleptocracy (180 pts)]]></title>
            <link>https://www.counterpunch.org/2025/02/04/americas-dangerous-movement-toward-oligarchy-authoritarianism-and-kleptocracy/</link>
            <guid>42959260</guid>
            <pubDate>Thu, 06 Feb 2025 05:00:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.counterpunch.org/2025/02/04/americas-dangerous-movement-toward-oligarchy-authoritarianism-and-kleptocracy/">https://www.counterpunch.org/2025/02/04/americas-dangerous-movement-toward-oligarchy-authoritarianism-and-kleptocracy/</a>, See on <a href="https://news.ycombinator.com/item?id=42959260">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Today, we find ourselves in a pivotal moment in American history and millions of Americans, by their actions or lack of action, will determine the future of this country for decades.</p>
<p>In my view, the Trump administration is moving this country very aggressively into an oligarchic form of society where extraordinary power rests in the hands of a small number of unelected multi-billionaires.</p>
<p>The Trump administration is moving this country very aggressively into an authoritarian society where the rule of law and our Constitution are being ignored and undermined in order to give more power to the White House and the billionaires who now control our government.</p>
<p>In my view, the Trump administration is moving this country very rapidly toward a kleptocracy – where the function of government is not to serve the people of America, but to enrich those who are in power.</p>
<p>I think that today is a good day to recall what one of our great presidents said at Gettysburg in November of 1863. Looking out at a battlefield where thousands of Union soldiers had just sacrificed their lives in the defense of freedom, Lincoln famously stated:</p>
<blockquote><p>“The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us&nbsp;– that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion&nbsp;– that we here highly resolve that these dead shall not have died in vain&nbsp;– that this nation, under God, shall have a new birth of freedom&nbsp;– and that government of the people, by the people, for the people, shall not perish from the earth.</p></blockquote>
<p>“Government of the people, by the people, for the people, shall not perish from the earth.”</p>
<p>Under President Trump we are not seeing a “government of the people, by the people, for the people.” Quite the contrary.</p>
<p>We are seeing a government of the billionaire class, by the billionaire class, for the billionaire class. And it’s not being done secretly. It’s right out there for all to see.</p>
<p>Several weeks ago, Donald Trump was inaugurated for his second term as President of the United States. Standing right behind him were the three richest men in the country – Elon Musk, Jeff Bezos and Mark Zuckerberg&nbsp;– worth a combined $920 billion. These 3 men have more wealth than the bottom half of America&nbsp;– 170 million people. And I should point out, and this should tell you exactly where we are going as a nation, these 3 men have become some $232 billion richer since Trump was elected. In just two weeks under Trump their wealth has exploded by $232 billion dollars.</p>
<p>This is how an oligarchic system works. Elon Musk, the richest person in the world, and now a key part of the administration, spent over $277 million to get Trump elected. In other words, within a corrupt campaign finance system he helped buy the election for Donald Trump.</p>
<p>Jeff Bezos and Mark Zuckerberg, the second and third wealthiest people in our country, both kicked a million each into Trump’s inauguration fund.</p>
<p>And let’s remember that Mr. Bezos, who owns the Washington Post, rescinded the endorsement of Kamala Harris of the Washington Post’s editorial board. Mr. Bezos was showing early on that he was willing to bend the knee for Donald Trump.</p>
<p>Mark Zuckerberg, the founder and CEO of Meta, which owns Facebook and Instagram, agreed to settle a lawsuit with Trump for $25 million.</p>
<p>These three multibillionaires are working with Trump because they understand one very important reality. Trump’s policies are designed to make the very richest people in this country even richer.</p>
<p>Since Trump’s election, Mr. Musk has become $154 billion richer, Mr. Bezos has become $35 billion richer, and Mr. Zuckerberg has become $43 billion richer.</p>
<p>I am growing increasingly concerned that in our country, under the leadership of President Trump, we are moving rapidly towards authoritarianism.</p>
<p>And all over this country people are alarmed and shocked by what they are seeing.</p>
<p>Just a few examples.</p>
<p>Last week, Trump attempted to suspend all federal grants and loans in direct violation of the U.S. Constitution and federal law. As every 3rd grader knows, the power of the purse belongs to Congress, not the president.</p>
<p>Let’s be clear. The president can recommend legislation, he can veto legislation, but he does not have the power to unilaterally terminate funding and legislation passed by the U.S. Congress. That is a dangerous and blatantly unconstitutional act.</p>
<p>And I should add that Trump’s blocking of federal funding would have had an horrific impact on millions of Americans who utilize programs like Medicaid, Head Start, community health centers, Meals on Wheels, homeless veterans’ programs and many, many other initiatives.</p>
<p>Tens of millions of Americans, including some of the most vulnerable people in our country, were impacted by that decision.</p>
<p>But that’s not all.</p>
<p>A few days ago, Trump fired 17 inspectors general – independent government watchdogs that were created by Congress, in the wake of the Watergate scandal, to prevent the abuse of power by the executive branch.</p>
<p>Last week, President Trump fired a member of the National Labor Relations Board, and in so doing, effectively neutered the only federal agency in America with the authority to hold corporations accountable for illegal union busting and to protect the constitutional right of workers to form a union and to collectively bargain for better wages, benefits and working conditions.</p>
<p>Not only is this move blatantly illegal, it is exactly what Elon Musk, the owner of Tesla, and Jeff Bezos, the owner of Amazon, have been fighting for for months. This is a huge gift to the two wealthiest people in our country who are both strongly anti-union.</p>
<p>The President also illegally fired members of the Equal Employment Opportunity Commission – the only independent commission in our country that protects workers against discrimination in the workplace.</p>
<p>Further, and this should upset every American regardless of political view, in direct violation of the Constitution and federal law, Trump is intimidating the media with lawsuits against ABC, CBS, Meta and the Des Moines Register. His FCC is now threatening to investigate PBS and NPR. Take a deep breath my fellow Americans.</p>
<p>What Trump is essentially saying to every media outlet in America: If you say or do anything that is critical of me, that displeases me, you may be subject to a lawsuit or a federal investigation.</p>
<p>If this is not a direct attack on the First Amendment, the U.S. Constitution and Freedom of Speech, I don’t know what is.</p>
<p>But that’s not all.</p>
<p>Elon Musk and his unelected minions at DOGE have forced out officials at the Treasury Department and illegally shut down US AID – a program which, among other things, helps feed and provide medical help to starving and desperate children all over the world. Presidents, much less unelected billionaires, do not have the unilateral right to shut down federal agencies established by Congress.</p>
<p>When we talk about the dangerous movement towards authoritarianism let us not forget Trump’s pardoning of the January 6th insurrectionists who injured 174 police officers at the Capitol.</p>
<p>Even worse, Trump is undermining the FBI by investigating the agents there who helped bring these violent criminals to justice.</p>
<p>In other words, what Trump is saying is that violence against police officers, when done in his name is ok, but when law enforcement officers try to hold criminals accountable that is not ok.</p>
<p>Under Trump, we are rapidly moving towards a kleptocracy as well.</p>
<p>Just before Trump was inaugurated, he and his wife Melania launched their own cryptocurrency coins giving them the potential to earn tens of billions of dollars.</p>
<p>If Wall Street CEOs tried to bribe the President with a bag full of money that would be against the law.</p>
<p>But now, they don’t have to do that.</p>
<p>Today, if a multi-billionaire or the head of a foreign country wants to curry favor with the President, all they have to do is buy his cryptocurrency coins and, when they do that, they are directly enriching Donald Trump and the First Lady.</p>
<p>That is unacceptable and cannot stand.</p>
<p>So the question then becomes, where do we go from here?</p>
<p>Instead of moving toward an economy which is designed to benefit the very richest people in our society we have got to fight hard to create a government that works for all of us, not just Mr. Musk or Mr. Bezos or Mr. Zuckerberg and other multi-billionaires.</p>
<p>At a time of massive wealth and income inequality we must not provide more tax breaks to billionaires paid for by huge cuts in Medicaid and other programs that working families and low-income people desperately need.</p>
<p>But let me tell you what we should be doing.</p>
<p>At a time when 85 million Americans are uninsured or under-insured we have got to do what every major country on earth does and that is to guarantee health care as a human right to every man, woman and child in this country.</p>
<p>At a time when 1 out of 4 Americans cannot afford the medicine that their doctors prescribe we have got to end the absurdity of Americans paying by far the highest prices in the world for prescription drugs.</p>
<p>We have got to cut the cost of prescription drugs in half.</p>
<p>The federal minimum wage of $7.25 an hour is a starvation wage. While 60% of our people live paycheck to paycheck, we must raise that minimum wage to a living wage, at least $17 an hour. If you work 40 hours a week, you should not be living in poverty.</p>
<p>Mr. Musk and Mr. Bezos want to make it harder for workers to join unions. Well, we have got to do exactly the opposite. We must pass the PRO Act so that anti-union CEOs cannot act unconstitutionally to deny workers the right to join a union.</p>
<p>At a time when we need the best educated workforce in the world, we need to have the best public schools in the world. And, among other things, that means we need to substantially raise teacher salaries. If we want the best and the brightest to become educators no teacher in America should earn less than $60,000 a year.</p>
<p>All over this country, we have a major housing crisis. And it’s not just the 800,000 who are homeless. It is millions of working families who are spending 40, 50 or 60 percent of their limited incomes on housing. Instead of spending almost a trillion dollars a year on a wasteful and bloated Pentagon budget, we have got to build millions of units of low-income and affordable housing. And when we do that, we put large numbers of people to work at good-paying union jobs.</p>
<p>I hear from Trump supporters that the president won the election and he has been given this huge mandate to do whatever he wants. Well, no president has the right to move us to oligarchy, authoritarianism and kleptocracy. But more importantly, let us not forget that while Trump did win this election he actually received 4 million fewer votes in 2024 than Biden did in 2020 when Biden won the election.</p>
<p><em>This is a slightly edited version of Sanders’ prepared remarks on the Senate floor on February 4, 2025.</em></p>
				</div><p>
												<strong>Bernie Sanders</strong> is a US Senator, and the ranking member of the Senate budget committee. He represents the state of Vermont, and is the longest-serving independent in the history of Congress.
					</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Programming SDF Animations of Rick and Morty (190 pts)]]></title>
            <link>https://danielchasehooper.com/posts/code-animated-rick/</link>
            <guid>42958696</guid>
            <pubDate>Thu, 06 Feb 2025 03:30:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://danielchasehooper.com/posts/code-animated-rick/">https://danielchasehooper.com/posts/code-animated-rick/</a>, See on <a href="https://news.ycombinator.com/item?id=42958696">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>After 8 months of working on this post I don’t know how to start it except to say it culminates in this animation of Rick made in 240 lines of code. No libraries, no images. It was written in a live coding editor that I embedded in this post so that <em>you</em> can program animations. Let me explain how this started…</p><p>Eight months ago I published a video titled “<em><a href="https://youtu.be/-Xb3Kk3HhIw?si=XN--6NbM2Ux23Gez" target="_blank" rel="noopener">I Made a 3D Modeler, in C, in a Week</a></em>”. The video has several animations, like this one that illustrates the the marching cubes algorithm:</p><p>I needed this animation for the video to make sense, but couldn’t get past how painful and time consuming it’d be to make in a typical animation program. It seemed like the only way to accurately and quickly make it was with code. So I started coding, and the animation above is what I ended up with. I’m pretty happy with it.</p><p>I’m going to show you how to make your own animations, but instead of talking about that marching cubes animation, we’ll animate Rick from Rick and Morty, because that’s more fun. All the techniques I use for Rick can be used for other animations or graphical effects — useful ones for your own presentations, videos, video games, or just for fun. Ok? Let’s go!</p><h2 id="getting-started">Getting Started</h2><p>This is the editor I used to create Rick. Try changing <code>green = 0.9</code> to <code>green = 0.1</code> in the code below and the preview will update immediately.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>// fract returns fractional part. fract(1.3) == 0.3</span>
</span></span><span><span>    <span>float</span> <span>red</span>   <span>=</span> <span>fract</span><span>(</span><span>pixel</span><span>.</span><span>y</span><span>);</span> 
</span></span><span><span>    <span>float</span> <span>green</span> <span>=</span> <span>0.9</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>blue</span>  <span>=</span> <span>fract</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>red</span><span>,</span> <span>green</span><span>,</span> <span>blue</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>This is OpenGL Shading Language (GLSL). The <code>color_for_pixel</code> function runs on your GPU for every pixel in the preview. Amazingly this is all you need to make animations — a function that answers “What color should this pixel be at this time?”.</p><p>I’ve placed optional challenges throughout the article for people that want to go a little deeper. Like this:</p><p>What happens if you set <code>green = time</code>? What could you do to make it keep going? (<code>time</code> counts seconds since last edit)</p><p>Let’s use GLSL’s built in<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup> <code>length()</code> function to visualize how far each pixel is from the center of the screen (aka the origin, aka position <code>(0,0)</code>). By returning that distance as the pixel’s color, we get 0 (black) near the center, and fade to 1 (white) further away:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>length</span><span>(</span><span>pixel</span><span>));</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>GLSL Tip: <code>vec3(x)</code> is the same as <code>vec3(x, x, x)</code>. We’ll use this trick a lot.</p><p>To draw a circle, we compare the distance to a radius:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>radius</span> <span>=</span> <span>0.6</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>length</span><span>(</span><span>pixel</span><span>)</span> <span>&gt;</span> <span>radius</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>GLSL Tip: <code>vec3</code> turns the boolean result of <code>&gt;</code> into <code>1</code> or <code>0</code>.</p><p>What would that circle look like if you replaced <code>length()</code> with your own function that calculates <a href="https://en.wikipedia.org/wiki/Taxicab_geometry" target="_blank" rel="noopener">Manhattan distance</a>?</p><p>We can extract that into a reusable <code>circle()</code> function:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>radius</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pixel</span><span>)</span> <span>-</span> <span>radius</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>
</span></span><span><span>    <span>if</span> <span>(</span><span>circle</span><span>(</span><span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>.3</span><span>,</span> <span>-</span><span>.3</span><span>),</span> <span>.4</span><span>)</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.2</span><span>,</span><span>.7</span><span>,</span><span>.5</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    <span>if</span> <span>(</span><span>circle</span><span>(</span><span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>-</span><span>.4</span><span>,</span><span>0</span><span>),</span> <span>.8</span><span>)</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.7</span><span>,</span><span>.5</span><span>,</span> <span>.3</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>.2</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>The circles are positioned by shifting the pixel passed to <code>circle()</code>. The line order of that code is important - it determines which circle appears in front of the other.</p><p>Notice that <code>circle()</code> returns the <em>distance</em> to the perimeter instead of just a <code>bool</code> to indicate inside/outside. This is known as a “signed distance field” (SDF) function. The word “signed” here means that the distances for locations inside the shape are negative, and positive outside. We’ll use the distance to achieve some cool effects in a bit.</p><p>There are <a href="https://iquilezles.org/articles/distfunctions2d/" target="_blank" rel="noopener">many SDF functions</a> besides <code>circle()</code>. Here are a few we’ll be using:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>// Click {...} to see the code</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/MlKcDD</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/3tSGDy</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/4llXD7</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>-</span><span>.7</span><span>,</span><span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>-</span><span>1.5</span><span>,</span><span>-</span><span>.4</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>-</span><span>1.2</span><span>,</span><span>.35</span><span>))</span> <span>&lt;</span> <span>0.1</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.9</span><span>,</span><span>.3</span><span>,</span><span>.3</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>if</span> <span>(</span><span>round_rect</span><span>(</span><span>pixel</span><span>,</span> <span>vec2</span><span>(</span><span>.3</span><span>,</span> <span>.4</span><span>),</span> <span>vec4</span><span>(</span><span>.1</span><span>))</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.3</span><span>,</span> <span>.9</span><span>,</span> <span>.3</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>if</span> <span>(</span><span>star</span><span>(</span><span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>1.</span><span>,</span><span>0.</span><span>),</span> <span>.45</span><span>,</span> <span>5.</span><span>,</span> <span>.3</span><span>)</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.2</span><span>,</span> <span>.4</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.0</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>And that’s the basics. Let’s get started with Rick.</p><h2 id="drawing-rick">Drawing Rick</h2><p>I wish I could tell you I had the ability to look at a cartoon and then effortlessly replicate it in code. Unfortunately, I don’t. I spent <em>a lot</em> of time painstakingly trying numbers to recreate Rick’s face from the season 1 poster.</p><p>I did find one trick that sped up the trial and error process: I flashed my reference image of Rick on top of the preview so I could compare my drawing to the original while I was changing the code. The editor below has that enabled so you can experience what my week has been like.</p><p>Change the size and corner radii parameters to make the rectangle match Rick’s head shape.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>// Change these:</span>
</span></span><span><span>        <span>vec2</span><span>(</span><span>.3</span><span>,</span> <span>.5</span><span>),</span>  <span>// size</span>
</span></span><span><span>        <span>vec4</span><span>(</span><span>.1</span><span>,</span> <span>.01</span><span>,</span> <span>.05</span><span>,</span> <span>.1</span><span>)</span> <span>// corner radii</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>0.8</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>In case it isn’t obvious by now, the techniques in this post won’t be replacing your favorite vector drawing tool. This is the only time we’ll do the flashing exercise; just know that all the seemingly random numbers in the rest of this post were discovered via this process. I found the color values using an image editor’s eyedropper tool.</p><p>Ok, so here are the values I came up with for Rick’s head. I also added a second <code>round_rect()</code> for his ear:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec3</span> <span>skin_color</span> <span>=</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>skin_color</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>// ear</span>
</span></span><span><span>    <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>skin_color</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Let’s add the outline. This is where drawing with signed distance functions comes in handy. We can return black for pixels with a distance between -0.01 and 0.0.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>
</span></span><span><span>    <span>vec3</span> <span>skin_color</span> <span>=</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>skin_color</span><span>;</span> 
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    
</span></span><span><span>    <span>// ear</span>
</span></span><span><span>    <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>skin_color</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span> <span>// background</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>That line between the ear and the head shouldn’t be there (according to my reference image of Rick). I don’t want to outline each shape individually, I want to outline the <em>union</em> of the shapes. Union is easy with SDFs - use <code>min()</code> to combine two distances:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>min</span><span>(</span> <span>// &lt;- combine the shapes</span>
</span></span><span><span>        <span>// head</span>
</span></span><span><span>        <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>        
</span></span><span><span>        <span>// ear</span>
</span></span><span><span>        <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>        
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>There are <a href="https://iquilezles.org/articles/distfunctions/#:~:text=Primitive%20combinations" target="_blank" rel="noopener">other ways</a> to combine two signed distance fields. Try swapping out <code>min()</code> for the smooth union function to smoothly blend the ear with the head.</p><p>Let’s draw an eye:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>radius</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pixel</span><span>)</span> <span>-</span> <span>radius</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> 
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>     <span>// pupil</span>
</span></span><span><span>    <span>vec2</span> <span>pupil_pos</span> <span>=</span> <span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>.16</span><span>-</span><span>.13</span><span>,</span><span>.24</span><span>);</span> 
</span></span><span><span>
</span></span><span><span>    <span>// subtract 0.007 to outset &amp; round the corners of star</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>star</span><span>(</span><span>pupil_pos</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>)</span> <span>-</span> <span>0.007</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// eyeball</span>
</span></span><span><span>    <span>vec2</span> <span>eyeball_pos</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>    <span>eyeball_pos</span><span>.</span><span>y</span> <span>*=</span> <span>.93</span><span>;</span> <span>// stretch vertically</span>
</span></span><span><span>    <span>eyeball_pos</span> <span>-=</span> <span>vec2</span><span>(</span><span>0.07</span><span>,</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>circle</span><span>(</span><span>eyeball_pos</span><span>,</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>dist</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>        <span>// head</span>
</span></span><span><span>        <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>        
</span></span><span><span>        <span>// ear</span>
</span></span><span><span>        <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>        
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Two interesting things here:</p><ol><li><code>eyeball_pos.y *= .93</code> stretches the eyeball a <em>tiny</em> bit — just like we move shapes by adding to positions, we scale by multiplying positions.</li><li>I used a 6-point star for the eye, and I subtracted a little from the star’s distance to round its corners. Any SDF shape can be rounded this way. It helps to visualize the distance field so you see how it gets more round the further from the shape you get:</li></ol><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> 
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pixel</span><span>,</span> <span>0.4</span><span>,</span> <span>6.</span><span>,</span> <span>.5</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// show blue inside shape, orange outside</span>
</span></span><span><span>    <span>vec3</span> <span>color</span> <span>=</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>?</span> <span>vec3</span><span>(</span><span>0.5</span><span>,</span> <span>.8</span><span>,</span> <span>1.</span><span>)</span> <span>:</span> <span>vec3</span><span>(</span><span>0.98</span><span>,</span><span>.6</span><span>,</span><span>.13</span><span>);</span>
</span></span><span><span>    <span>color</span> <span>*=</span> <span>sin</span><span>(</span><span>d</span><span>*</span><span>150.</span><span>)</span><span>*</span><span>.1</span><span>+</span><span>.8</span><span>;</span> <span>// show distance field lines</span>
</span></span><span><span>    <span>color</span> <span>*=</span> <span>1.0</span> <span>-</span> <span>exp</span><span>(</span><span>-</span><span>20.0</span><span>*</span><span>abs</span><span>(</span><span>d</span><span>));</span> <span>// darken near perimeter</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>offset</span> <span>=</span> <span>(</span><span>sin</span><span>(</span><span>time</span><span>)</span><span>+</span><span>1.</span><span>)</span><span>*</span><span>.25</span><span>;</span> <span>// animate outline offset</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>offset</span><span>)</span> <span>&lt;</span> <span>0.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>1.0</span><span>);</span> <span>// draw white outline</span>
</span></span><span><span>  
</span></span><span><span>    <span>return</span> <span>color</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>For the second eye, we could duplicate the first eye’s code, but instead let’s mirror it horizontally with <code>pixel.x = abs(pixel.x)</code>. To rationalize this, consider that if the point <code>(1, 0)</code> is inside the circle, then it’s mirror <code>(-1, 0)</code> will <em>also</em> be inside the circle after <code>pixel.x = abs(pixel.x)</code>, so both points will get colored.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>radius</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pixel</span><span>)</span> <span>-</span> <span>radius</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>-=</span> <span>.3</span><span>;</span> <span>// controls position</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>);</span> <span>// mirror</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>-=</span> <span>.7</span><span>;</span> <span>// controls spacing</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>circle</span><span>(</span><span>pixel</span><span>,</span> <span>.5</span><span>)</span> <span>&gt;</span> <span>0.0</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>The way that order of operations works still hurts my head, but it helps to play with the code to get a feel for what’s going on.</p><p>Mirror the circles on both the x <em>and</em> the y axis</p><p>Here is the mirroring technique applied to Rick’s eyes:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>radius</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pixel</span><span>)</span> <span>-</span> <span>radius</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> 
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>     <span>// pupils</span>
</span></span><span><span>    <span>vec2</span> <span>pupil_pos</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>    <span>pupil_pos</span> <span>+=</span> <span>vec2</span><span>(</span><span>.13</span><span>,</span> <span>-</span><span>.24</span><span>);</span> <span>// position pupils on eyeballs</span>
</span></span><span><span>    <span>pupil_pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_pos</span><span>.</span><span>x</span><span>);</span> <span>// mirror pupils</span>
</span></span><span><span>    <span>pupil_pos</span><span>.</span><span>x</span> <span>-=</span> <span>.16</span><span>;</span> <span>// pupil spacing</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>star</span><span>(</span><span>pupil_pos</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>)</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// eyeballs</span>
</span></span><span><span>    <span>// position/mirror/scale one liner</span>
</span></span><span><span>    <span>vec2</span> <span>eye_pos</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>circle</span><span>(</span><span>eye_pos</span><span>,</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>dist</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span> <span>.1</span><span>,</span> <span>.13</span><span>,</span> <span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    <span>}</span>   
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Let’s skip ahead. The mouth, nose, and eyebrow are all created with <code>bezier()</code>. The hair is an 11-point <code>star()</code> that I stretched vertically.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span> <span>-</span> <span>r</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>d</span><span>;</span>
</span></span><span><span>  
</span></span><span><span>   <span>// eyes</span>
</span></span><span><span>   <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// pupils</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>        
</span></span><span><span>        <span>// eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>0.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// nose  </span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>min</span><span>(</span> <span>// combine the curves</span>
</span></span><span><span>            <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>            <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>  
</span></span><span><span>        
</span></span><span><span>    <span>// mouth</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>// The `*step(d, .11)` creates the outline.</span>
</span></span><span><span>        <span>// it's the same as `*vec3(d &lt; .11)` </span>
</span></span><span><span>        <span>// aka, it multiplies the color by zero for </span>
</span></span><span><span>        <span>// pixels near the perimeter  </span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>.11</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    <span>// eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>.68</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>{</span>  <span>// fold</span>
</span></span><span><span>        <span>float</span> <span>dist</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// hair</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>star</span><span>((</span><span>pixel</span><span>-</span><span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>))</span><span>*</span><span>vec2</span><span>(</span><span>1.3</span><span>,</span><span>1.</span><span>),</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>That’s as far as basic shape positioning, scaling, and outlining can get us.</p><h2 id="making-the-hair-wavy">Making the Hair Wavy</h2><p>The remaining steps will elevate our crude sketch of Rick into a drawing that looks exactly like him. We’ll learn a few more techniques to make this possible. First up: let’s fix his rigid looking hair. There isn’t a “wavy hair” signed distance function, but we can make the star shape more wavy using a technique called <a href="https://iquilezles.org/articles/warp/" target="_blank" rel="noopener">domain warping</a>.</p><p>Domain warping randomly offsets pixel locations. That random offset is “seeded” by the pixel’s location, so the offset is consistent over time for any given location. You can use that warped location for whatever shapes you want warped. Here’s an 11-point star with and without warping:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>// these functions are used by the `warp()` function </span>
</span></span><span><span><span>// to generate pseudo random numbers. The details aren't </span>
</span></span><span><span><span>// super important. I looked these functions up:</span>
</span></span><span><span><span>// https://www.shadertoy.com/view/XdXGW8</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>vec2</span> <span>warped_pixel</span> <span>=</span> <span>warp</span><span>(</span><span>pixel</span><span>,</span> <span>4.</span><span>,</span> <span>.07</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>        <span>star</span><span>(</span><span>warped_pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>.8</span><span>,</span><span>0</span><span>),</span> <span>0.7</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>),</span>
</span></span><span><span>        <span>star</span><span>(</span><span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>.8</span><span>,</span><span>0</span><span>),</span> <span>0.7</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>)</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Visualize the warp offsets by drawing the x offset to the red channel and the y offset to the green channel</p><p>Fun fact: the Lord of the Rings movies <a href="https://www.youtube.com/watch?v=6Koa50421Pg&amp;t=1056s" target="_blank" rel="noopener">used domain warping</a> to create the visual effect seen when Frodo is wearing the Ring. Their warp offsets came from tracking fire movement.</p><p>Animate the warp effect above to achieve the Lord of the Rings effect.</p><h2 id="drawing-infinite-teeth">Drawing Infinite Teeth</h2><p>Rick needs teeth, a lot them. But we’ll start by drawing one. A parabola is the best tooth shape I could find:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>pixel</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Yes that is a tooth. Stick with me.</p><p>Is there a way to draw multiple teeth without duplicating a bunch of code, or using a <code>for</code> loop? Yes! Similar to how we used <code>abs()</code> to mirror shapes, we can use <code>mod()</code> to repeat shapes. <code>mod(a,b)</code> calculates the reminder of <code>a/b</code>. Look below at what <code>mod(pixel.x, 0.5)</code> does. Every time <code>pixel.x</code> increases above a multiple of <code>.5</code> , <code>mod()</code> starts back at zero (black) again.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>mod</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>0.5</span><span>));</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Here is <code>mod()</code> applied to the single tooth</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>    
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span> <span>// NEW: repeat horizontally</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>pixel</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Repeat the teeth <a href="https://iquilezles.org/articles/sdfrepetition/#:~:text=Rotational%20and%20Rectangular%20Repetition" target="_blank" rel="noopener">in a circle</a> instead of in a line to create a <a href="https://duckduckgo.com/?q=sandworm&amp;iax=images&amp;ia=images" target="_blank" rel="noopener">sandworm mouth</a></p><p>and we can mirror that to get the bottom teeth</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span> <span>// NEW: mirror vertically </span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span> <span>// repeat horizontally</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>pixel</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Then to make it a smile, we offset the y position of the tooth based on <code>pixel.x</code>.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>2.</span><span>);</span> <span>// NEW: curve into a smile</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span> <span>// mirror vertically</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span> <span>// repeat horizontally</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>pixel</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Kind of creepy. Reducing the infinite teeth down to 12 will make it a little less creepy — done by only drawing teeth when <code>pixel.x</code> is within the desired range</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>    <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>2.</span><span>);</span>
</span></span><span><span>    <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span> 
</span></span><span><span>    <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> 
</span></span><span><span>        <span>// Limit where the teeth are drawn</span>
</span></span><span><span>        <span>&amp;&amp;</span> <span>pixel</span><span>.</span><span>x</span> <span>&lt;</span> <span>width</span><span>*</span><span>3.</span>
</span></span><span><span>        <span>&amp;&amp;</span> <span>pixel</span><span>.</span><span>x</span> <span>&gt;</span> <span>-</span><span>width</span><span>*</span><span>3.</span>
</span></span><span><span>    <span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Here’s Rick with wavy hair and new set of teeth. I also added the tongue. Notice that the tongue and teeth only draw inside the mouth thanks to placing their code inside the <code>if</code> that checks the mouth distance.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>d</span><span>;</span>
</span></span><span><span>  
</span></span><span><span>    <span>// Mouth</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>// only draw the teeth and tongue inside hte mouth shape</span>
</span></span><span><span>        
</span></span><span><span>        <span>// Teeth</span>
</span></span><span><span>        <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>        <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>      
</span></span><span><span>        <span>// Tongue</span>
</span></span><span><span>        <span>// Make the right side of the tongue thicker</span>
</span></span><span><span>        <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>        <span>// mouth fill color</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span><span>)</span> <span>// mouth outline</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>  
</span></span><span><span>    <span>// Eyebrow, Eyes, Nose &amp; Head</span>
</span></span><span><span>   <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Pupils</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>        
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>0.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>// Eyebrow</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>.68</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>  
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Hair</span>
</span></span><span><span>    <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>    <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>    <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>    <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><h2 id="artistic-lines">Artistic Lines</h2><p>The final bits needed are the curves below the eyes and around the mouth. Those lines are just like our normal shape outlines, except they’re offset away from the perimeter of the shape. This can be done by subtracting a little from distance when drawing the outline. In other words this:<br><code>if (abs(distance_to_shape) &lt; thickness) return vec3(0);</code><br>becomes this:<br><code>if (abs(distance_to_shape - outset) &lt; thickness) return vec3(0);</code><br>The blue line below illustrates that technique.</p><p>Since Rick’s under-eye lines should only be visible…under the eye, we’ll need to limit where they are drawn. That can be done using whatever logic you can think of, as shown by the green line:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>,</span> <span>vec2</span><span>(</span><span>.5</span><span>),</span> <span>vec4</span><span>(</span><span>.1</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>thickness</span> <span>=</span> <span>.02</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>// outline</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>dist</span><span>)</span> <span>&lt;</span> <span>thickness</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// outset outline</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>dist</span><span>-</span><span>.2</span><span>)</span> <span>&lt;</span> <span>thickness</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>,</span><span>.1</span><span>,</span><span>1</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// limited outline</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>dist</span><span>-</span><span>.4</span><span>)</span> <span>&lt;</span> <span>thickness</span> <span>&amp;&amp;</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>.4</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>,</span><span>.9</span><span>,</span><span>.1</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// fill</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>.92</span><span>);</span>    
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Here are those techniques applied to Rick:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>  
</span></span><span><span>    <span>// Mouth</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Teeth</span>
</span></span><span><span>        <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>        <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>      
</span></span><span><span>        <span>// Tongue</span>
</span></span><span><span>        <span>// Make the right side of the tongue thicker</span>
</span></span><span><span>        <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>        <span>// mouth fill color</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// lip outlines</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                    <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                      <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                      <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// lips</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>   
</span></span><span><span>    <span>// Pupils</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>        
</span></span><span><span>    <span>// Eyeballs</span>
</span></span><span><span>    <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>    
</span></span><span><span>    <span>// under eye lines</span>
</span></span><span><span>    <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>        <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>        <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Nose, Eyebrow, Head, Hair</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>// Eyebrow</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>.68</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>  
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Hair</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Draw another character from Rick and Morty, or whatever your favorite cartoon is.</p><p>Use <a href="https://www.youtube.com/results?search_query=raymarching" target="_blank" rel="noopener">raymarching</a> with 3D signed distance fields to draw a 3D version of Rick. Let me know if you do this, I want to see.</p><h2 id="animation">Animation</h2><p>With our drawing complete, there are several animation techniques we can use to introduce movement. First up:</p><h3 id="1-looping-values">1. Looping Values</h3><p>The easiest way to add animation is to slap a <code>sin(time)</code> into the code somewhere. The <code>sin</code> is important because it wraps the ever-increasing <code>time</code> value into the range of -1 to 1, which makes nice looping animations. You will often change that range with a scale and offset like so: <code>sin(time)*.5 + .5</code>. The head angle, tongue angle, and eyebrow height are animated in this way. I added a <code>rotateAt</code> function to do the rotation math.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// NEW: rotate the whole drawing</span>
</span></span><span><span>    <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Mouth, eyes, nose</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        <span>// Pupils</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>            
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>        <span>// under eye lines</span>
</span></span><span><span>        <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>            <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>            <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW: animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Head and hair</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Hair</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Animate Rick’s head as if he is walking left and right. Flip the face direction when he is moving to the right (this is easier than it sounds!).</p><h3 id="2-switching-whats-drawn">2. Switching What’s Drawn</h3><p>Animating a property with <code>sin()</code> just moves stuff around, but you can also draw something totally different based on time. We’ll do that to make Rick blink.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>     
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// rotate the whole drawing</span>
</span></span><span><span>        <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>        <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>// blink for .09 seconds, every 2 seconds</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>mod</span><span>(</span><span>time</span><span>,</span> <span>2.</span><span>)</span> <span>&lt;</span> <span>.09</span><span>)</span> <span>{</span> <span>// closed eyes</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>+</span><span>vec2</span><span>(</span><span>.07</span><span>,</span><span>-</span><span>.16</span><span>),</span> <span>vec2</span><span>(</span><span>.24</span><span>,</span><span>0</span><span>),</span> <span>vec4</span><span>(</span><span>0</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.008</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>      
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>else</span> <span>// open eyes</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Pupils</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>            
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>        <span>// under eye lines</span>
</span></span><span><span>        <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>            <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>            <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    <span>// Rest of face</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>// `map()` is used to change the thickness of </span>
</span></span><span><span>            <span>// the tongue along the x axis</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Hair</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Use this technique to animate Rick’s mouth so it looks like he is talking.</p><h3 id="3-noisy-movement">3. Noisy Movement</h3><p>If <code>sin</code> is too smooth for you, try using noise! I used <code>noise()</code> to make the eyes randomly look around. Since I don’t want the eyes to be continuously moving, I rounded the time value before passing it to <code>noise()</code>.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> 
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// rotate the whole drawing</span>
</span></span><span><span>        <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>        <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Blink eyes</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>mod</span><span>(</span><span>time</span><span>,</span> <span>2.</span><span>)</span> <span>&lt;</span> <span>.09</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// closed eyes</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>+</span><span>vec2</span><span>(</span><span>.07</span><span>,</span><span>-</span><span>.16</span><span>),</span> <span>vec2</span><span>(</span><span>.24</span><span>,</span><span>0</span><span>),</span> <span>vec4</span><span>(</span><span>0</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.008</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>      
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>else</span> <span>{</span> 
</span></span><span><span>        <span>// move pupils randomly</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>.095</span><span>,</span><span>-</span><span>.18</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>7.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>y</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>9.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        
</span></span><span><span>        <span>{</span><span>// fold</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>            <span>}</span>
</span></span><span><span>                
</span></span><span><span>            <span>// Eyeballs</span>
</span></span><span><span>            <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>            
</span></span><span><span>            <span>// under eye lines</span>
</span></span><span><span>            <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>                <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>                <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    <span>// Rest of face</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>// `map()` is used to change the thickness of </span>
</span></span><span><span>            <span>// the tongue along the x axis</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Hair</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Make the pupil movement <a href="https://www.youtube.com/watch?v=Fmg9ZOHESgQ" target="_blank" rel="noopener">more realistic</a> instead of jumping between positions</p><h3 id="bonus-warping-time">Bonus: Warping Time</h3><p>Our final animation technique is “time domain warping” to make the hair bend as the head tilts. It’s like domain warping, except instead of offsetting <em>space</em> we offset <em>time</em>. Basically we delay time more the closer to the hair tip a pixel is. Because that delay isn’t constant along the length of the hair, the hair will bend instead of rotate rigidly.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span>
</span></span><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> 
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// rotate the whole drawing</span>
</span></span><span><span>        <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>        <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    
</span></span><span><span>    <span>// Blink eyes</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>mod</span><span>(</span><span>time</span><span>,</span> <span>2.</span><span>)</span> <span>&lt;</span> <span>.09</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>// closed eyes</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>+</span><span>vec2</span><span>(</span><span>.07</span><span>,</span><span>-</span><span>.16</span><span>),</span> <span>vec2</span><span>(</span><span>.24</span><span>,</span><span>0</span><span>),</span> <span>vec4</span><span>(</span><span>0</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.008</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>      
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>else</span> <span>{</span> 
</span></span><span><span>        <span>// move pupils randomly</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>.095</span><span>,</span><span>-</span><span>.18</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>7.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>y</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>9.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>            
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>        <span>// under eye lines</span>
</span></span><span><span>        <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>            <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>            <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>// `map()` is used to change the thickness of </span>
</span></span><span><span>            <span>// the tongue along the x axis</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Hair     </span>
</span></span><span><span>    <span>float</span> <span>twist</span> <span>=</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>length</span><span>(</span><span>pixel</span><span>)</span><span>*</span><span>2.1</span><span>)</span><span>*</span><span>.12</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>hair</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>twist</span><span>,</span> <span>vec2</span><span>(</span><span>0.</span><span>,</span><span>.1</span><span>));</span>
</span></span><span><span>    <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>    <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>    <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.012</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Apply this trick to to other parts of Rick’s face for a rubbery and ricklaxed look.</p><h2 id="wrapping-up">Wrapping up</h2><p>After we add a portal effect<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup> our animation is complete.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span>
</span></span><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>#define H(i,j) fract(sin(dot(ceil(P+vec2(i,j)), resolution.xy )) * 4e3)</span>
</span></span><span><span><span>float</span> <span>N</span><span>(</span> <span>vec2</span> <span>P</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span><span>,</span><span>i</span><span>,</span><span>w</span> <span>=</span> <span>.5</span><span>;</span>
</span></span><span><span>    <span>for</span> <span>(;</span> <span>i</span> <span>&lt;</span> <span>3.</span> <span>;</span> <span>i</span><span>++</span><span>,</span> <span>w</span> <span>*=</span> <span>.4</span><span>,</span> <span>P</span> <span>*=</span> <span>1.9</span> <span>)</span> <span>{</span>
</span></span><span><span>        <span>vec2</span> <span>F</span> <span>=</span> <span>fract</span><span>(</span> <span>P</span> <span>*=</span> <span>mat2</span><span>(</span><span>.866</span><span>,</span><span>-</span><span>.5</span><span>,</span><span>.5</span><span>,</span><span>.866</span><span>)</span> <span>);</span> 
</span></span><span><span>        <span>F</span> <span>*=</span> <span>F</span><span>*</span><span>(</span><span>3.</span><span>-</span><span>F</span><span>-</span><span>F</span><span>);</span>
</span></span><span><span>        <span>s</span> <span>+=</span> <span>w</span><span>*</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span><span>H</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>,</span> <span>H</span><span>(</span><span>1</span><span>,</span><span>0</span><span>),</span> <span>F</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                     <span>mix</span><span>(</span><span>H</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>,</span> <span>H</span><span>(</span><span>1</span><span>,</span><span>1</span><span>),</span> <span>F</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                     <span>F</span><span>.</span><span>y</span> <span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    <span>return</span> <span>s</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec3</span> <span>portal</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/l3f3zM</span>
</span></span><span><span>    <span>float</span> <span>l</span> <span>=</span> <span>length</span><span>(</span> <span>pixel</span> <span>),</span> 
</span></span><span><span>          <span>a</span> <span>=</span> <span>atan</span><span>(</span><span>pixel</span><span>.</span><span>y</span><span>,</span> <span>pixel</span><span>.</span><span>x</span><span>)</span> <span>/</span> <span>6.28</span> <span>+</span> <span>.5</span><span>,</span>
</span></span><span><span>          <span>k</span> <span>=</span> <span>10.</span><span>;</span>
</span></span><span><span>     
</span></span><span><span>    <span>a</span> <span>=</span> <span>fract</span><span>(</span><span>a</span> <span>+</span> <span>l</span><span>*</span><span>.3</span> <span>-</span> <span>time</span><span>*</span><span>.01</span> <span>);</span>
</span></span><span><span>    <span>vec2</span> <span>U</span> <span>=</span> <span>vec2</span><span>(</span> <span>l</span><span>+</span><span>time</span><span>*</span><span>.3</span><span>,</span> <span>a</span> <span>);</span>
</span></span><span><span>     
</span></span><span><span>    <span>return</span> <span>vec3</span><span>[](</span> <span>vec3</span><span>(</span><span>.18</span><span>,</span> <span>.53</span><span>,</span> <span>.09</span><span>),</span>
</span></span><span><span>                    <span>vec3</span><span>(</span><span>.56</span><span>,</span> <span>.89</span><span>,</span> <span>.16</span><span>),</span>
</span></span><span><span>                    <span>vec3</span><span>(</span><span>.35</span><span>,</span> <span>.84</span><span>,</span> <span>.11</span><span>),</span>
</span></span><span><span>                    <span>vec3</span><span>(</span><span>.92</span><span>,</span> <span>.98</span><span>,</span> <span>.85</span><span>)</span>
</span></span><span><span>                  <span>)</span> <span>[</span> <span>int</span><span>(</span> <span>4.</span><span>*</span> <span>pow</span><span>(</span> <span>mix</span><span>(</span> <span>N</span><span>(</span><span>U</span><span>*</span><span>k</span><span>),</span> <span>N</span><span>(</span><span>U</span><span>*</span><span>k</span><span>-</span><span>vec2</span><span>(</span><span>0</span><span>,</span><span>k</span><span>)),</span> <span>U</span><span>.</span><span>y</span><span>)</span> <span>*</span> <span>1.5</span><span>,</span> <span>2.5</span><span>))];</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> 
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// rotate the whole drawing</span>
</span></span><span><span>        <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>        <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    
</span></span><span><span>    <span>// Blink eyes</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>mod</span><span>(</span><span>time</span><span>,</span> <span>2.</span><span>)</span> <span>&lt;</span> <span>.09</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>// closed eyes</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>+</span><span>vec2</span><span>(</span><span>.07</span><span>,</span><span>-</span><span>.16</span><span>),</span> <span>vec2</span><span>(</span><span>.24</span><span>,</span><span>0</span><span>),</span> <span>vec4</span><span>(</span><span>0</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.008</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>      
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>else</span> <span>{</span> 
</span></span><span><span>        <span>// move pupils randomly</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>.095</span><span>,</span><span>-</span><span>.18</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>7.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>y</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>9.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>            
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>        <span>// under eye lines</span>
</span></span><span><span>        <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>            <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>            <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>// `map()` is used to change the thickness of </span>
</span></span><span><span>            <span>// the tongue along the x axis</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    
</span></span><span><span>        <span>// Hair     </span>
</span></span><span><span>        <span>float</span> <span>twist</span> <span>=</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>length</span><span>(</span><span>pixel</span><span>)</span><span>*</span><span>2.1</span><span>)</span><span>*</span><span>.12</span><span>;</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>twist</span><span>,</span> <span>vec2</span><span>(</span><span>0.</span><span>,</span><span>.1</span><span>));</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.012</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>portal</span><span>(</span><span>pixel</span><span>,</span> <span>time</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>I prioritized reability over performance for this code - see how much faster you can make it run.</p><p>That’s everything I know about making 2D animations using shaders. I hope it’s useful. Maybe next time we’ll talk about 3D, or some totally different topic! If you’d like to be notified about my next post, please join my newsletter.</p><p>Join my newsletter lol</p><p>While I love teaching and making posts like this, they are very time consuming to make — this one took about two weeks of work spread over 8 months. So if you’d like to see more work like this, please consider <a href="#" onclick="event.preventDefault(),document.getElementById(&quot;tipform&quot;).submit()">supporting me</a>.</p><h2 id="appendix-1-creating-a-video">Appendix 1: Creating a Video</h2><p>When you’re done with an animation you’ll probably want to turn it into a video. The editor we’ve been using on this page can not yet do that, but I’m working on it. Join my newsletter to be notified when I add video export!</p><p>In the meantime, you can use a script with <a href="https://github.com/patriciogonzalezvivo/glslViewer" target="_blank" rel="noopener">glslviewer</a> and <a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">ffmpeg</a>. Below is my macOS workflow, on Windows and Linux you’ll have to figure out what your platform’s equivalent is.</p><ol><li>Install the dependencies.</li></ol><div><pre tabindex="0"><code data-lang="bash"><span><span>brew install glslviewer ffmpeg <span># brew is macos only</span>
</span></span></code></pre></div><ol start="2"><li><p>Write your <code>shader.frag</code> file</p></li><li><p>And then put this in a bash file and run to export your video</p></li></ol><div><pre tabindex="0"><code data-lang="bash"><span><span><span>#!/bin/bash
</span></span></span><span><span><span></span>
</span></span><span><span><span>set</span> -e
</span></span><span><span><span>set</span> -o pipefail
</span></span><span><span>
</span></span><span><span><span>if</span> <span>[</span> -z <span>"</span><span>$1</span><span>"</span> <span>]</span><span>;</span> <span>then</span>
</span></span><span><span>  <span>echo</span> <span>"Usage: </span><span>$0</span><span> &lt;shader_file&gt;"</span>
</span></span><span><span>  <span>exit</span> <span>1</span>
</span></span><span><span><span>fi</span>
</span></span><span><span>
</span></span><span><span><span>ORIGINAL_DIR</span><span>=</span><span>$(</span><span>pwd</span><span>)</span>
</span></span><span><span>
</span></span><span><span><span>TMP_DIR</span><span>=</span><span>$(</span>mktemp -d<span>)</span>
</span></span><span><span><span>if</span> <span>[</span> ! -d <span>"</span><span>$TMP_DIR</span><span>"</span> <span>]</span><span>;</span> <span>then</span>
</span></span><span><span>  <span>echo</span> <span>"Failed to create temporary directory."</span>
</span></span><span><span>  <span>exit</span> <span>1</span>
</span></span><span><span><span>fi</span>
</span></span><span><span><span>cd</span> <span>"</span><span>$TMP_DIR</span><span>"</span>
</span></span><span><span>
</span></span><span><span>glslViewer <span>"</span><span>$ORIGINAL_DIR</span><span>/</span><span>$1</span><span>"</span> -w <span>1920</span> -h <span>1080</span> --headless -e sequence,0,7,60 -e q
</span></span><span><span>ffmpeg -framerate <span>60</span> -y -i %05d.png -c:v libx264 -pix_fmt yuv420p animation.mp4
</span></span><span><span>mv animation.mp4 <span>"</span><span>$ORIGINAL_DIR</span><span>/"</span>
</span></span><span><span>
</span></span><span><span><span>cd</span> <span>"</span><span>$ORIGINAL_DIR</span><span>"</span>
</span></span><span><span>rm -rf <span>"</span><span>$TMP_DIR</span><span>"</span>
</span></span></code></pre></div><p>And if you want to live code locally, use this:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>glslViewer shader.frag -w <span>575</span> -h <span>324</span> --noncurses -x <span>0</span> -y <span>0</span>
</span></span></code></pre></div><h3 id="appendix-2-super-sampling">Appendix 2: Super Sampling</h3><p>You may have noticed that the edges of shapes in the examples on this page are smooth. I did a bit of work behind the scenes make that happen. I use a technique called super sampling where I call <code>color_for_pixel()</code> for 9 locations within each screen pixel and then display the average. The left side of this example shows what it looks like with super sampling disabled. You may need to zoom in on the page to see the difference.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>#version 300 es </span>
</span></span><span><span><span>// The above line switches the editor to "pro" mode </span>
</span></span><span><span><span>// and removes automatic super sampling</span>
</span></span><span><span>
</span></span><span><span><span>precision</span> <span>highp</span> <span>float</span><span>;</span>
</span></span><span><span><span>uniform</span> <span>float</span> <span>time</span><span>;</span>
</span></span><span><span><span>uniform</span> <span>vec2</span> <span>resolution</span><span>;</span>
</span></span><span><span><span>out</span> <span>vec4</span> <span>outColor</span><span>;</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>   
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>length</span><span>(</span><span>mod</span><span>(</span><span>p</span><span>+</span><span>time</span><span>*</span><span>.05</span><span>,</span> <span>.5</span><span>)</span> <span>-</span> <span>.25</span><span>)</span> <span>&gt;</span> <span>0.2</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>void</span> <span>main</span><span>()</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>zone</span> <span>=</span> <span>gl_FragCoord</span><span>.</span><span>x</span> <span>-</span> <span>resolution</span><span>.</span><span>x</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>zone</span><span>)</span> <span>&lt;</span> <span>1.5</span><span>)</span> <span>{</span>
</span></span><span><span>      <span>// vertical line</span>
</span></span><span><span>      <span>outColor</span> <span>=</span> <span>vec4</span><span>(</span><span>1</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>1</span><span>);</span>
</span></span><span><span>    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>zone</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>      <span>// left side: no super sampling</span>
</span></span><span><span>      <span>vec2</span> <span>st</span> <span>=</span> <span>(</span><span>2.0</span><span>*</span><span>(</span><span>gl_FragCoord</span><span>.</span><span>xy</span><span>)</span><span>-</span><span>resolution</span><span>)</span><span>/</span><span>resolution</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>      <span>outColor</span> <span>=</span> <span>vec4</span><span>(</span><span>color_for_pixel</span><span>(</span><span>st</span><span>,</span> <span>time</span><span>),</span> <span>1</span><span>);</span>
</span></span><span><span>    <span>}</span> <span>else</span> <span>{</span>
</span></span><span><span>      <span>// right side: super sampling</span>
</span></span><span><span>      <span>int</span> <span>sample_count</span> <span>=</span> <span>3</span><span>;</span>     
</span></span><span><span>      <span>vec3</span> <span>sum</span> <span>=</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>      <span>for</span><span>(</span> <span>int</span> <span>m</span><span>=</span><span>0</span><span>;</span> <span>m</span><span>&lt;</span><span>sample_count</span><span>;</span> <span>m</span><span>++</span> <span>)</span> <span>{</span>
</span></span><span><span>          <span>for</span><span>(</span> <span>int</span> <span>n</span><span>=</span><span>0</span><span>;</span> <span>n</span><span>&lt;</span><span>sample_count</span><span>;</span> <span>n</span><span>++</span> <span>)</span> <span>{</span>
</span></span><span><span>              <span>vec2</span> <span>o</span> <span>=</span> <span>(</span><span>vec2</span><span>(</span><span>m</span><span>,</span><span>n</span><span>)</span> <span>+</span> <span>0.5</span><span>)</span> <span>/</span> <span>float</span><span>(</span><span>sample_count</span><span>);</span>
</span></span><span><span>              <span>vec2</span> <span>st</span> <span>=</span> <span>(</span><span>2.0</span><span>*</span><span>(</span><span>gl_FragCoord</span><span>.</span><span>xy</span><span>+</span><span>o</span><span>)</span><span>-</span><span>resolution</span><span>)</span><span>/</span><span>resolution</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>              <span>sum</span> <span>+=</span> <span>color_for_pixel</span><span>(</span><span>st</span><span>,</span> <span>time</span><span>);</span>
</span></span><span><span>          <span>}</span>
</span></span><span><span>      <span>}</span>
</span></span><span><span>
</span></span><span><span>      <span>outColor</span> <span>=</span> <span>vec4</span><span>(</span><span>sum</span> <span>/</span> <span>float</span><span>(</span><span>sample_count</span><span>*</span><span>sample_count</span><span>),</span> <span>1</span><span>);</span> 
</span></span><span><span>    <span>}</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><hr><p>Thanks to Carrie, Stan, Amin, and Martin for providing feedback on early drafts.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Subway crime plummets as ridership jumps significantly in congestion pricing era (139 pts)]]></title>
            <link>https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/</link>
            <guid>42958474</guid>
            <pubDate>Thu, 06 Feb 2025 02:58:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/">https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/</a>, See on <a href="https://news.ycombinator.com/item?id=42958474">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	<p><img width="1200" height="868" src="https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?w=1200" alt="NYPD officer at NYC subway turnstile" decoding="async" fetchpriority="high" srcset="https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg 1645w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=700,506 700w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=768,556 768w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=1200,868 1200w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=1536,1111 1536w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=384,278 384w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=900,651 900w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=1600,1157 1600w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=50,36 50w" sizes="(max-width: 1200px) 100vw, 1200px" title="Subway crime plummets as ridership jumps significantly in 2025 in congestion pricing era 2">			</p>
	<p>Every subway train in NYC will have a uniformed police officer on board between 9 p.m. and 5 a.m. daily, Gov. Kathy Hochul said during her State of the State address in January.</p>	<p>Photo by Dean Moses</p></div><div>
		<p><span>NYC subway crime has dropped significantly so far this year even as ridership increased in <a href="https://www.amny.com/?s=congestion+pricing">the congestion pricing era</a>, according to the newest <a href="http://nyc.gov/nypd" target="_blank" rel="noopener">NYPD</a> data released on Tuesday.</span></p>
<p><span>In the first month of 2025, there were 147 reported crimes on the subway down from 231 last year—resulting in 36% fewer crimes committed on the rails this year.</span></p>
<p><span>At the same time, subway ridership has increased significantly since the start of congestion pricing on Jan. 5. This means that the drop in crime on the tracks has actually decreased even as more people are using NYC’s busy transit system—one of the largest in the world.</span></p>

<p><span>According to </span><a href="https://data.ny.gov/Transportation/MTA-Daily-Ridership-Data-2020-2025/vxuj-8kew/about_data" target="_blank" rel="noopener"><span>data on the New York State website</span></a><span>, subway ridership has increased almost every day since congestion pricing began on Jan. 5 — often in the hundreds of thousands of additional commuters daily.</span></p>
<p><span>For example, on Jan. 8, the first Wednesday with congestion pricing in effect this year, over 530,000 more people were on the trains than the same day last year (3,834,806 vs. 3,303,727).&nbsp;</span></p>
<p>Between Jan. 6 and 28, an amNewYork Metro review of MTA data found, ridership was up more than 9.1 million commuters year-over-year (74,680,439 in 2025 vs. 65,569,613 in 2024), a 13.1% increase.<span>&nbsp;</span></p>
<figure id="attachment_137740750" aria-describedby="caption-attachment-137740750"><img decoding="async" src="https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?w=1200" alt="Additional NYPD officers in the subways" width="1200" height="896" title="Subway crime plummets as ridership jumps significantly in 2025 in congestion pricing era 3" srcset="https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg 2048w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=700,523 700w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=768,574 768w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=1200,896 1200w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=1536,1148 1536w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=384,287 384w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=900,672 900w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=1600,1195 1600w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=50,37 50w" sizes="(max-width: 1200px) 100vw, 1200px"><figcaption id="caption-attachment-137740750"><span>Jan. 27 marked the first full-fledged surge of NYPD cops into the New York City subway overnight by Governor Kathy Hochul and Mayor Eric Adams amid high-profile crimes.</span><span>Photo by Dean Moses</span></figcaption></figure>
<p><span>Traffic fatalities across the city are also down, the<a href="https://compstat.nypdonline.org/" target="_blank" rel="noopener"> NYPD’s CompStat 2.0 dashboard</a> shows. Year to date, there were 10 deadly collisions on the roads compared to 18 in 2024—an over 44% drop year over year.&nbsp;</span></p>
<p><span>The MTA, the state agency that runs the NYC trains and buses, had long touted that congestion pricing would bring more New Yorkers onto mass transit, thus relieving heavy traffic build up in Midtown and Lower Manhattan. So far, those predictions are being proven true.</span></p>
<p><img loading="lazy" decoding="async" src="https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30%E2%80%AFAM.png?w=700" alt="" width="700" height="431" title="Subway crime plummets as ridership jumps significantly in 2025 in congestion pricing era 4" srcset="https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png 1408w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=700,431 700w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=768,472 768w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=1200,738 1200w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=384,236 384w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=900,554 900w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=50,31 50w" sizes="auto, (max-width: 700px) 100vw, 700px">
</p><h2>More cops = more safety in subways, mayor says</h2>
<p><span>Mayor Eric Adams attributed the decline in subway crime to a number of factors, including the massive surge of 1,200 additional NYPD officers in the subway system, as well as an additional 300 officers patrolling overnight trains.</span></p>

<p><span>“Public safety is the prerequisite to prosperity, and the latest crime statistics for January prove that our comprehensive approach to combating crime and improving quality of life is not only working, it’s driving real, measurable progress,” the mayor said in a statement to amNewYork Metro. “We’re seeing double-digit decreases in both overall crime above ground and transit crime below ground – with shooting incidents in January being the lowest number recorded for the month of January in over 30 years – and we remain committed to ensuring that New Yorkers aren’t just safe but feel safe, too.”</span></p>
<p><span>Transit crime was down throughout much of 2024, but Mayor Adams, the MTA and the NYPD have been battling public perception that subway crime was out of control – largely fueled by widely-reported, high-profile crimes on the trains</span><span>, including the </span><a href="https://www.amny.com/news/woman-burned-brooklyn-subway-arson-identified/"><span>horrific arson homicide </span></a><span>when a woman was burned alive on an F train in Coney Island.&nbsp;</span></p>

<p><span>The mayor added that the additional law enforcement efforts to prevent crime underground provide a “visible and effective presence” that makes commuters “both safer and more confident.”&nbsp;</span></p>
<p><span>“I want to thank Commissioner Tisch and the incredible men and women of the NYPD for making our streets safer every day,” Adams added. “While others advocate for defunding the police, we’ve defended them, and this is just one of countless examples of why New Yorkers want more policing, not less.”</span></p>
<p><span>This year’s decrease in crime so far points to a sign that city and state officials might be making progress in addressing the challenges facing the subway system, something which Gov. Kathy Hochul responded to when she announced a $77 million initiative on Jan. 16 to have </span><a href="https://www.amny.com/news/nyc-subway-safety-hochul-cops-overnight-trains/"><span>more uniformed police officers</span></a><span> on every overnight train.&nbsp;</span></p>
<p><span>Last year, she also directed the MTA to install over 15,000 cameras in every subway car and added about 1,250 National Guard members alongside police to assist in patrolling the mostly underground transit system.&nbsp;</span></p>
<p><span>“Governor Hochul is committed to ensuring that every rider and worker feels safe when they enter our transit system and are on the subway,” said Matthew Janiszewski, a spokesperson for the governor. “Governor Hochul is working hand-in-hand with the MTA and New York City to deter crime, making it safer for all riders and restoring public confidence in the system.”</span></p>
<p><span>NYC Transit President Demetrius Crichlow underscored the importance of law enforcement of public transit.</span>
</p><p><span>“Every survey shows New Yorkers want more uniformed officers on trains, and this is why. With Governor Hochul’s funding and NYPD deployment on every train overnight, crime is down, and riders are increasingly using transit to get where they need to go,” he said. “That’s no coincidence.”</span></p>

		
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenWrt 24.10.0 – First Stable Release (221 pts)]]></title>
            <link>https://openwrt.org/releases/24.10/notes-24.10.0</link>
            <guid>42958202</guid>
            <pubDate>Thu, 06 Feb 2025 02:17:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openwrt.org/releases/24.10/notes-24.10.0">https://openwrt.org/releases/24.10/notes-24.10.0</a>, See on <a href="https://news.ycombinator.com/item?id=42958202">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div>
<pre>  _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R E L E S S   F R E E D O M
 -----------------------------------------------------
 OpenWrt 24.10.0, r28427-6df0e3d02a
 -----------------------------------------------------</pre>



<p>
The OpenWrt community is proud to announce the first stable release of the OpenWrt 24.10 stable series.
</p>

<p>
Download firmware images via the Firmware Selector or directly from our download servers:
</p>


<p>
An upgrade from OpenWrt 23.05 to OpenWrt 24.10 is supported in many cases with 
the help of the sysupgrade utility which will also attempt to preserve the 
configuration. A configuration backup is advised nonetheless when upgrading to 
OpenWrt 24.10. (see “Upgrading” below).
</p>

</div>


<p>
The OpenWrt Project is a Linux operating system targeting embedded devices.  
It is a complete replacement for the vendor-supplied firmware of a wide range 
of wireless routers and non-network devices. See the 
<a href="https://openwrt.org/toh/views/toh_fwdownload?dataflt%5B0%5D=supported%20current%20rel_%3D24.10.0" title="toh:views:toh_fwdownload" data-wiki-id="toh:views:toh_fwdownload">Table of Hardware</a> for supported devices. 
For more information about OpenWrt project organization, see the 
<a href="https://openwrt.org/about" title="https://openwrt.org/about" rel="ugc nofollow">About OpenWrt pages</a>.
</p>

<h3 id="announcements_about_new_releases_and_security_fixes">Announcements about new releases and security fixes</h3>
<div>

<p>
Do you want to be informed about important changes such as new releases and security fixes?
</p>

<p>
We have a new mailing list for this, as well as RSS options: see <a href="https://openwrt.org/contact#announces" title="contact" data-wiki-id="contact">Important changes and announcements</a>.
</p>

</div>


<p>
OpenWrt 24.10.0 incorporates over 5400  commits since branching the previous OpenWrt 23.05 release and has been under development for over one year.
</p>

<h4 id="general_changes">General changes</h4>



<div>

<p>
OpenWrt 24.10 supports over 1970 devices. Support for over 100 new devices was added in addition to the device support by OpenWrt 23.05.
</p>

<p>
 * Added support for <a href="https://openwrt.org/toh/openwrt/one" title="toh:openwrt:one" data-wiki-id="toh:openwrt:one">OpenWrt One</a>
</p>

</div>

<h4 id="target_changes">Target changes</h4>



<div>

<p>
Core components have the following versions in 24.10.0:
</p>


<p>
In addition to the listed applications, many others were also updated.
</p>

</div>


<div>

<p>
Sysupgrade can be used to upgrade a device from 23.05 to 24.10, and configuration will be preserved in most cases.
For for upgrades inside the OpenWrt 24.10 stable series for example from a OpenWrt 24.10 release candidate <a href="https://openwrt.org/docs/guide-user/installation/attended.sysupgrade" title="docs:guide-user:installation:attended.sysupgrade" data-wiki-id="docs:guide-user:installation:attended.sysupgrade">Attended Sysupgrade</a> is supported in addition which allows preserving the installed packages too.
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> Sysupgrade from 22.03 to 24.10 is not officially supported.
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> There is no configuration migration path for users of the ipq806x target for Qualcomm Atheros IPQ806X SoCs because it switched to <a href="https://openwrt.org/docs/guide-user/network/dsa/start" title="docs:guide-user:network:dsa:start" data-wiki-id="docs:guide-user:network:dsa:start">DSA</a>. You have to upgrade without saving the configuration.
<code>Image version mismatch. image 1.1 device 1.0 Please wipe config during upgrade (force required) or reinstall. Config cannot be migrated from swconfig to DSA Image check failed</code>
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> User of the Linksys E8450 aka. Belkin RT3200 running OpenWrt 23.05 or earlier will need to run installer version <a href="https://github.com/dangowrt/owrt-ubi-installer/releases/tag/v1.1.3" title="https://github.com/dangowrt/owrt-ubi-installer/releases/tag/v1.1.3" rel="ugc nofollow">v1.1.3</a> or later in order to reorganize the UBI layout for the 24.10 release. <a href="https://openwrt.org/toh/linksys/e8450#upgrading_an_ubi_installation_to_new_releases_after_2024-02_includes_all_snapshots_2410-snapshots_24100-rcx_releases_and_all_releases_in_the_foreseable_future" title="toh:linksys:e8450" data-wiki-id="toh:linksys:e8450">A detailed description is in the OpenWrt wiki.</a> Updating without using the installer will break the device. Sysupgrade will show a warning before doing an incompatible upgrade.
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> Users of the Xiaomi AX3200 aka. Redmi AX6S running OpenWrt 23.05 or earlier have to follow a <a href="https://openwrt.org/toh/xiaomi/ax3200#upgrading_from_2305_and_earlier_to_upcoming_2410_or_snapshot" title="toh:xiaomi:ax3200" data-wiki-id="toh:xiaomi:ax3200">special upgrade procedure described in the wiki</a>. This will increase the flash memory available for OpenWrt. Updating without following the guide in the wiki break the device. Sysupgrade will show a warning before doing an incompatible upgrade.
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> Users of Zyxel GS1900 series switches running OpenWrt 23.05 or earlier have to perform a new factory install with the initramfs image due to a changed partition layout. Sysupgrade will show a warning before doing an incompatible upgrade and is not possible.
</p>

</div>





<div>

<p>
As always, a big thank you goes to all our active package maintainers, 
testers, documenters, and supporters.
</p>

<p>
Have fun!
</p>

<p>
The OpenWrt Community
</p>

</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I believe 6502 instruction set is a good first assembly language (122 pts)]]></title>
            <link>https://nemanjatrifunovic.substack.com/p/6502-is-a-good-starting-point-for</link>
            <guid>42957823</guid>
            <pubDate>Thu, 06 Feb 2025 01:28:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nemanjatrifunovic.substack.com/p/6502-is-a-good-starting-point-for">https://nemanjatrifunovic.substack.com/p/6502-is-a-good-starting-point-for</a>, See on <a href="https://news.ycombinator.com/item?id=42957823">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p>Deciding where to start is one of the hardest things about learning assembly programming. Unlike high-level languages, assembly is tightly connected to the hardware and deciding which CPU to use is an important first step.</p><p>Here, I will explain why I believe 6502 is a good platform to start learning assembly. </p><p>To be clear, I am not saying 6502 assembly itself is a particularly useful skill nowadays, nor that it is particularly pleasant for writing real-life applications. In fact, I do not believe you should spend too much time with 6502 unless you are interested in retro programming as such.</p><p>My arguments for starting with 6502 are in a nutshell:</p><ul><li><p>6502 is simple; you can quickly learn assembly programming basic concepts with it;</p></li><li><p>6502 is real; there are plenty devices, emulators, books to help you learn.</p></li></ul><p>To learn basic assembly programming concept, having a simple system is more important than having a powerful one.</p><p><span>6502 contains only 6 registers: one accumulator, two index registers, a status register, a stack register and a program counter which is the only 16-bit register on 6502. Modern x86-x64 CPUs have so many registers that counting them is </span><a href="https://blog.yossarian.net/2020/11/30/How-many-registers-does-an-x86-64-cpu-have" rel="nofollow ugc noopener">almost a research project</a><span>. Small number of registers is constraining for real-life applications but is helpful for understanding what a register is and how it works.</span></p><p><span>The original 6502 instruction set contains </span><a href="http://www.6502.org/users/obelisk/6502/instructions.html" rel="nofollow ugc noopener">only 56 instructions</a><span>. Again, </span><a href="https://stefanheule.com/blog/how-many-x86-64-instructions-are-there-anyway/" rel="nofollow ugc noopener">counting x86-x64 instructions is a non-trivial task</a><span> and even modern RISC instructions sets like ARM are </span><a href="https://developer.arm.com/documentation/ddi0596/2021-03/Base-Instructions?lang=en" rel="nofollow ugc noopener">far from being small and simple</a><span>. Yet, with 6502 we can quickly learn about major instruction types, including loading/storing, logical and arithmetic, as well as branching. All of them are present in the modern CPUs in some form.</span></p><p>6502 was introduced in mid-1970 by MOS technology, as a cheap simplified version of Motorola’s 6800 CPU which was previously developed by the same team. The processor quickly became extremely popular and was used in some well-known microcomputers, like Apple II, Commodore VIC 20, Commodore 64 and BBC micro. It is easy to find emulators for all these machines, and even modern re-creations of some of them. Furthermore, successors of 6502 are still being produced at the time of this writing, and there are brand new machines that run it, like Neo6502 by Olimex.</p><p><span>There is a plenty of learning material available for free on the internet: books, videos, tutorials. Most of these resources can be found and accessed via </span><a href="http://www.6502.org/" rel="nofollow ugc noopener">6502.org</a><span> site.</span></p><p><span>With all that said, if you want to spend only half an hour learning 6502, the place to visit is </span><a href="https://skilldrick.github.io/easy6502/" rel="nofollow ugc noopener">Easy 6502</a><span> ebook by Nick Morgan. The web page contains not only text and images, but a 6502 assembler and simulator written in JavaScript, so you can actually write some simple 6502 assembly code on the spot!</span></p><p><span>Another fascinating resource I encourage you to check out is </span><a href="http://visual6502.org/" rel="nofollow ugc noopener">Visual6502.org</a><span>. Not so much as a tool for learning assembly programming, but an illustration of the simplicity of 6502. </span></p><p>Of course, not everyone will agree that 6502 is a good choice for starting assembly programming. Some other opinions I have heard include:</p><ul><li><p>Various imaginary CPUs created for teaching purposes; admittedly, some of them have very clean and “perfect” instruction set - in fact I was taught one in high school. However, even the most popular of them lack the wealth of resources for learning and the community of 6502</p></li><li><p><span>other “retro” CPUs like Z80, 6809 or 68000. They are all good choices, and in my opinion all three mentioned above are better for serious programming than 6502. But if we are talking about learning basic concepts, the simplicity of 6502 wins. As much as I like Z80 which powered my first computer, it has many more registers than 6502 (and even an “</span><a href="https://www.righto.com/2014/10/how-z80s-registers-are-implemented-down.html" rel="nofollow ugc noopener">alternate</a><span>” set of registers) and is not as easy to get started with.</span></p></li><li><p><span>modern RISC architectures such as ARM, MIPS or RISC-V. At some point, a serious assembly programmer should definitely learn some of them. However, they are not ideal to start with: the “S” in RISC stands for “simple”, but the simplicity is more about internal implementation of the chips than the instruction set. Modern microprocessors are almost exclusively programmed with high-level languages and the direct usage of assembly instruction is not high on the list of priorities for CPU designers nowadays. To illustrate this point, loading a 64-bit constant to a register on ARM64 </span><a href="https://dinfuehr.github.io/blog/encoding-of-immediate-values-on-aarch64/" rel="nofollow ugc noopener">can take 4 instructions with bit shifting</a><span>. Loading a constant to a register with 6502 is trivial in comparison.</span></p></li><li><p>x86-x64. This is arguably the most popular instruction set on modern desktop and server computers, although ARM is catching up. In some respects, it is easier to code than with ARM, given the wealth of instructions that are not constrained by being 32-bit in size and can have variable number of operands; or at least that’s my impression after starting with Z80 which is compatible with x86 predecessor Intel 8080. However, it is still really complex for beginners and four decades of history does not make it any simpler. </p></li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Human Brain May Contain as Much as a Spoon's Worth of Microplastics (183 pts)]]></title>
            <link>https://www.smithsonianmag.com/smart-news/the-human-brain-may-contain-as-much-as-a-spoons-worth-of-microplastics-new-research-suggests-180985995/</link>
            <guid>42957726</guid>
            <pubDate>Thu, 06 Feb 2025 01:13:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.smithsonianmag.com/smart-news/the-human-brain-may-contain-as-much-as-a-spoons-worth-of-microplastics-new-research-suggests-180985995/">https://www.smithsonianmag.com/smart-news/the-human-brain-may-contain-as-much-as-a-spoons-worth-of-microplastics-new-research-suggests-180985995/</a>, See on <a href="https://news.ycombinator.com/item?id=42957726">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-article-body="">
        
          <figure>
            <img src="https://th-thumbnailer.cdn-si-edu.com/0ghUGQwb-K5ZMW6kflQGRUfc3h0=/1000x750/filters:no_upscale():focal(1920x1097:1921x1098)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/3a/9d/3a9d4ead-68d3-4254-bbc5-ae88fb9ca70e/microplastics-in-lab.png" alt="Researcher wearing a lab coat holding up a vial of samples" itemprop="image">
            <figcaption>
              
                Researchers found higher levels of microplastics in brain tissue than in liver and kidney tissue.
              <span>UNM Health</span>
            </figcaption>
          </figure>
        

        

        <p>The human brain may contain up to a spoon’s worth of tiny plastic shards—not a spoonful, but the same weight (about seven grams) as a plastic spoon, according to new findings published Monday in the journal <em><a href="https://www.nature.com/articles/s41591-024-03453-1"><em>Nature Medicine</em></a></em>.</p>

<p>Researchers detected these “almost unbelievable” levels of microplastics and nanoplastics in the brains of human cadavers, says study co-author <a href="https://www.neuro.duke.edu/profile/andrew-bradley-west">Andrew West</a>, a neuroscientist at Duke University, to <a href="https://www.sciencenews.org/article/plastic-human-brains-microplastics"><em>Science</em><em> </em><em>News</em></a>’ Laura Sanders. “In fact, I didn’t believe it until I saw all the data.”</p>

<p>Based on their analysis, the amount of microplastics in the human brain appears to be increasing over time: Concentrations rose by roughly 50 percent between 2016 and 2024.</p>

<p>The researchers also found much higher levels of microplastics in brain tissue than in liver and kidney tissue. And microplastic concentrations were also higher in the brains of deceased patients who had been diagnosed with <a href="https://www.smithsonianmag.com/smart-news/us-dementia-cases-are-poised-to-rise-to-one-million-each-year-by-2060-according-to-new-projections-180985831/">dementia</a> compared to the brains of deceased individuals without dementia.</p>

<p>Importantly, the study finds only a correlation between high levels of microplastics in the brain and dementia—it does not establish a causal relationship. It could be, for instance, that changes resulting from dementia make it easier for microplastics to accumulate in the brain. However, the researchers say their findings are troubling nonetheless.</p>

<p>“I have yet to encounter a single human being who says, ‘There’s a bunch of plastic in my brain and I’m totally cool with that,’” says study co-author <a href="https://hsc.unm.edu/directory/campen-matthew-j.html">Matthew Campen</a>, a toxicologist at the University of New Mexico, in a <a href="https://hsc.unm.edu/news/2025/02/hsc-newsroom-post-microplastics-human-brains.html">statement</a>.</p>

<p>Microplastics and nanoplastics are miniscule plastic fragments that result from the breakdown of everyday objects like packaging, containers, clothing, tires and more. These small particles have spread all over the planet, from <a href="https://www.smithsonianmag.com/smart-news/even-mount-everest-facing-microplastic-pollution-new-study-finds-180976389/">Mount Everest</a> to deep in the <a href="https://www.smithsonianmag.com/smart-news/study-shows-deepest-parts-ocean-are-polluted-plastic-180969049/">Mariana Trench</a>. They’ve also made their way into the human body, showing up in <a href="https://www.smithsonianmag.com/smart-news/microplastics-detected-in-human-blood-180979826/">blood</a>, <a href="https://www.smithsonianmag.com/smart-news/study-shows-infant-poop-is-riddled-with-microplastics-180978770/">baby poop</a>, <a href="https://www.theguardian.com/environment/2020/dec/22/microplastics-revealed-in-placentas-unborn-babies">lungs</a> and <a href="https://www.theguardian.com/environment/2020/dec/22/microplastics-revealed-in-placentas-unborn-babies">placentas</a>.</p>

<p>In September 2024, these miniature pollutants were also discovered in the <a href="https://www.smithsonianmag.com/smart-news/scientists-find-microplastics-in-human-brain-tissue-above-the-nose-180985100/">human olfactory bulb</a>, a type of brain tissue that sits above the nose in the forebrain. At the time, researchers weren’t completely sure whether microplastics could migrate deeper into the brain.</p>

<p>The new paper suggests they can. First, researchers analyzed brain, kidney and liver tissue from patients who had died in 2016 and 2024. For broader context, they also studied brain tissue from patients who had died between 1997 and 2013. Some of the brains came from patients who had been diagnosed with dementia.</p>

<p>They found much higher levels of microplastics in the 2024 brain tissue, on average, than in the 2016 brain tissue, regardless of the patient’s age, sex, race, ethnicity or cause of death. Their findings suggest microplastic levels in the brain have grown by roughly 50 percent over the last eight years. This increase makes sense in the context of plastic production, which doubles every 10 to 15 years, reports the <a href="https://www.washingtonpost.com/climate-environment/2025/02/03/microplastics-human-brain-increase/"><em>Washington Post</em></a>’s Shannon Osaka.</p>

<p>“We think [the increase] is simply mirroring the environmental buildup and exposure,” Campen tells <a href="https://www.nationalgeographic.com/science/article/microplastic-human-brain-health?loggedin=true&amp;rnd=1738686119003"><em>National Geographic</em></a>’s Olivia Ferrari. “People are being exposed to ever-increasing levels of micro and nanoplastics.”</p>

<p>Microplastic levels were 7 to 30 times higher in the examined brain tissue than in the liver and kidney tissue.</p>

<p>Microplastic concentrations were also three to five times higher in the brains of patients with dementia, compared to cognitively normal brains. It’s not clear whether microplastics may cause or contribute to dementia, nor whether dementia-induced changes to the brain might allow more microplastics to enter.</p>

<p>More broadly, the potential health consequences of microplastics remain largely unknown. Some recent research, however, suggests they are likely harmful to the human body. A <a href="https://www.nejm.org/doi/full/10.1056/NEJMoa2309822">study</a> published in March 2024, for example, found that patients with higher concentrations of microplastics in their arteries were at a higher risk of heart attacks, stroke and death.</p>

<p>Now that microplastics have been found deep in the human brain, the next steps will be to explore what effects, if any, they are having on human health.</p>

<p>Future studies might also investigate how microplastics and nanoplastics are making their way into the brain in the first place, a feat that remains a mystery. Researchers are also curious about the unusual shapes of the plastic particles they found in the brain: thin, sharp shards, rather than the smooth, bead-like shapes they had expected.</p>

<p>“Somehow, these nanoplastics hijack their way through the body and get to the brain, crossing the blood-brain barrier,” Campen tells <a href="https://www.cnn.com/2025/02/03/health/plastics-inside-human-brain-wellness/index.html">CNN</a>’s Sandee LaMotte. “Plastics love fats, or lipids, so one theory is that plastics are hijacking their way with the fats we eat, which are then delivered to the organs that really like lipids—the brain is top among those.”</p>

<p>In the meantime, the world might want to consider “mitigation measures” to help minimize microplastic exposure, says <a href="https://www.uu.nl/staff/EEJkasteel">Emma Kasteel</a>, a neurotoxicologist at Utrecht University in the Netherlands who was not involved with the paper, to <em>National Geographic</em>.</p>

<p>“We don’t know that much about the health effects, but the fact is that [microplastics] are [in the brain] and they shouldn’t be there, and maybe that’s worrying enough,” she says.</p>

        

        

        
          
  <div>
      <h3>Get the latest stories in your inbox every weekday.</h3>
      
    </div>


        

        

        
          


  
    
      
    
  

  


        

        
        
        
        

        
          
            <section>
              <nav>Filed Under:
                
                  
                    <a href="https://www.smithsonianmag.com/tag/biology/">Biology</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/body/">Body</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/brain/">Brain</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/environment/">Environment</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/health/">Health</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/medicine/">Medicine</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/new-research/">New Research</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/plastic/">Plastic</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/pollution/">Pollution</a>
                  
                
              </nav>
            </section>
          
        

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What does it mean that MP3 is free? (156 pts)]]></title>
            <link>https://idiallo.com/blog/listen-mp3-is-free</link>
            <guid>42957517</guid>
            <pubDate>Thu, 06 Feb 2025 00:41:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://idiallo.com/blog/listen-mp3-is-free">https://idiallo.com/blog/listen-mp3-is-free</a>, See on <a href="https://news.ycombinator.com/item?id=42957517">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody" id="articleBody">
	

<p>The MP3 format, once the gold standard for digital audio files, is now free. The licensing and patents on MP3 encoders have expired, meaning you can now include them in your applications without paying royalties. For software developers and audio enthusiasts, this might seem like a big deal. But, surprisingly, almost no one noticed. Why? Because the world of technology has changed so drastically that MP3's significance has faded into the background.</p>

<p>I noticed the change because of <a href="https://idiallo.com/blog/mp3-is-free-september-2015">my habit of downloading Audacity</a>, the open-source audio editing software. For years, Audacity required users to download an external MP3 encoder, like LAME, because the MP3 format was proprietary. This extra step was a constant reminder of the legal and technical restrictions surrounding MP3. But now, that step is unnecessary. And yet, no one seems to care.  </p>

<p>The reality is that MP3, while still relevant in certain niche areas, has largely been eclipsed by a combination of faster internet speeds, changing software paradigms, and a shift away from dealing with files altogether.  </p>

<h2>Files? What Files?</h2>

<p>One of the biggest shifts in recent years has been the abstraction of what a file even is. Twenty years ago, the average computer user dealt with files constantly. Downloading, organizing, and moving them between devices. Music files were downloaded as MP3s and carefully sorted into folders. Today, most people interact with music through streaming platforms like Spotify, Apple Music, or YouTube. They don’t download files, nor do they think about what format their music is in.  </p>

<p>This is part of a broader trend where the cloud has replaced local storage for many users. We stream music and movies instead of downloading them. We work on Google Docs instead of saving Word files to our desktop. Files, for the general population, are becoming an invisible concept.  </p>

<h2>Internet Speeds Make File Sizes Invisible</h2>

<p>Back in the early 2000s, an MP3 file, typically around 3.5MB, was considered small. But downloading one still took time, minutes on a standard internet connection. File size mattered. A smaller file meant quicker downloads and less space used on your limited storage.  </p>

<p>Fast forward to today, and internet speeds have grown exponentially. A song in a more modern format like AAC or FLAC might be double or triple the size of an MP3, but who notices? You can stream a full album in lossless quality without buffering. Kids download gigabyte-sized games in minutes.  </p>

<p>The average person no longer pays attention to file sizes. Terms like megabyte or kilobyte, which were once part of everyday tech conversations, are now arcane to many users. When everything happens instantly, file size ceases to be a concern.</p>





<h2>What Does It Mean That MP3 Is Free?</h2>

<p>The expiration of MP3’s licensing fees is still a significant milestone, particularly for developers or those working in niche areas like archival or specialized audio tools. It means tools like Audacity can now integrate MP3 support without extra steps, and developers of new software can include MP3 compatibility freely.  </p>

<p>However, for the general population, this change is almost irrelevant. MP3 is no longer a bottleneck for audio distribution. Streaming platforms, cloud-based solutions, and better internet infrastructure have made the need for small, efficient file formats like MP3 far less critical.  </p>

<h2>The Changing Landscape</h2>

<p>The MP3’s journey from revolutionary to nearly forgotten reflects how technology evolves and reshapes user behavior. While it was once essential for making audio accessible in the early days of the internet, today it’s just one of many tools in the vast ecosystem of digital media.  </p>

<p>But even if most people didn’t notice that MP3 is now free, it’s worth pausing to appreciate its legacy. It’s a reminder of how far we’ve come, and how the things that once seemed indispensable can quietly fade into the background as the world changes around them.  </p>

<p>MP3 being free is a milestone worth noting, even if its relevance has diminished. After all, it’s not every day that a format that defined a generation of music lovers becomes a footnote in the history of technology.</p>

	<hr>



	
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Of Course It's a Coup (122 pts)]]></title>
            <link>https://snyder.substack.com/p/of-course-its-a-coup</link>
            <guid>42956473</guid>
            <pubDate>Wed, 05 Feb 2025 22:48:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://snyder.substack.com/p/of-course-its-a-coup">https://snyder.substack.com/p/of-course-its-a-coup</a>, See on <a href="https://news.ycombinator.com/item?id=42956473">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>Imagine if it had gone like this.  </p><p>Ten Tesla cybertrucks, painted in camouflage colors with a giant X on each roof, drive noisily through Washington DC.  Tires screech.  Out jump a couple of dozen young men, dressed in red and black Devil’s Champion armored costumes.  After giving Nazi salutes, they grab guns and run to one government departmental after another, calling out slogans like “all power to Supreme Leader Skibidi Hitler.”</p><p>Historically, that is what coups looked like.  The center of power was a physical place.  Occupying it, and driving out the people who held office, was to claim control.  So if a cohort of armed men with odd symbols had stormed government buildings, Americans would have recognized that as a coup attempt. </p><p>And that sort of coup attempt would have failed.  </p><p>Now imagine that, instead, the scene goes like this.</p><p>A couple dozen young men go from government office to government office, dressed in civilian clothes and armed only with zip drives.  Using technical jargon and vague references to orders from on high, they gain access to the basic computer systems of the federal government.  Having done so, they proceed to grant their Supreme Leader access to information and the power to start and stop all government payments.</p><p>That coup is, in fact, happening.  And if we do not recognize it for what it is, it could succeed.</p><p>In the third decade of the twenty first century, power is more digital than physical.  The buildings and the human beings are there to protect the workings of the computers, and thus the workings of the government as a whole, in our case an (in principle) democratic government which is organized and bounded by a notion of individual rights.</p><p>The ongoing actions by Musk and his followers are a coup because the individuals seizing power have no right to it.  Elon Musk was elected to no office and there is no office that would give him the authority to do what he is doing.  It is all illegal.  It is also a coup in its intended effects: to undo democratic practice and violate human rights.  </p><p>In gaining data about us all, Musk has trampled on any notion of privacy and dignity, as well as on the explicit and implicit agreements made with our government when we pay our taxes or our student loans.  And the possession of that data enables blackmail and further crimes.</p><p><span>In gaining the ability to stop payments by the Department of the </span><a href="https://www.crisesnotes.com/elon-musk-wants-to-get-operational-control-of-the-treasurys-payment-system-this-could-not-possibly-be-more-dangerous/" rel="">Treasury</a><span>, Musk would also make democracy meaningless.  We vote for representatives in Congress, who pass laws that determine how our tax money is spent.  If Musk has the power to halt this process at the level of payment, he can make laws meaningless.  Which means, in turn, that Congress is meaningless, and our votes are meaningless, as is our citizenship.</span></p><div><figure><a target="_blank" href="https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080 424w, https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080 848w, https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080 1272w, https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080 1456w" sizes="100vw"><img src="https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080" width="292" height="194.66666666666666" data-attrs="{&quot;src&quot;:&quot;https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:2200,&quot;width&quot;:3300,&quot;resizeWidth&quot;:292,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;grayscale photo of dome building&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="grayscale photo of dome building" title="grayscale photo of dome building" srcset="https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080 424w, https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080 848w, https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080 1272w, https://images.unsplash.com/photo-1597201749396-99a6b0537704?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHwyfHxjYXBpdG9sfGVufDB8fHx8MTczODcxMDc2MHww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Resistance to the coup is the defense of the human against the digital and the democratic against the oligarchic.  If Musk controls these digital systems, Republican elected officials will be just as helpless as Democratic ones.  The institutions that they voted to create can also be “deleted,” as Musk puts it.  </p><p>President Trump, for that matter, will also perform at Musk’s pleasure.  There is not much he can do without the use of the federal government’s computers.  No one will explain this to Trump or to his supporters, of course. </p><p>A coup is underway, against Americans as possessors of human rights and dignities, and against Americans as citizens of a democratic republic.  Each hour this goes unrecognized makes the success of the coup more likely.</p><p data-attrs="{&quot;url&quot;:&quot;https://snyder.substack.com/p/the-logic-of-destruction?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjozMDYxODE1OCwicG9zdF9pZCI6MTU2Mjg3NzQ1LCJpYXQiOjE3Mzg3NjAxNTAsImV4cCI6MTc0MTM1MjE1MCwiaXNzIjoicHViLTMxMDg5NyIsInN1YiI6InBvc3QtcmVhY3Rpb24ifQ.JA7ad0MfxYtOp-LO6pW0NlHWRrMKrBZCBmay5Jy-x4A&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a href="https://snyder.substack.com/p/the-logic-of-destruction?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjozMDYxODE1OCwicG9zdF9pZCI6MTU2Mjg3NzQ1LCJpYXQiOjE3Mzg3NjAxNTAsImV4cCI6MTc0MTM1MjE1MCwiaXNzIjoicHViLTMxMDg5NyIsInN1YiI6InBvc3QtcmVhY3Rpb24ifQ.JA7ad0MfxYtOp-LO6pW0NlHWRrMKrBZCBmay5Jy-x4A" rel=""><span>Share</span></a></p><p data-attrs="{&quot;url&quot;:&quot;https://www.penguinrandomhouse.com/books/558051/on-tyranny-by-timothy-snyder/&quot;,&quot;text&quot;:&quot;On resistance see On Tyranny&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a href="https://www.penguinrandomhouse.com/books/558051/on-tyranny-by-timothy-snyder/" rel=""><span>On resistance see On Tyranny</span></a></p><p data-attrs="{&quot;url&quot;:&quot;https://www.penguinrandomhouse.com/books/744574/on-freedom-by-timothy-snyder/&quot;,&quot;text&quot;:&quot;For positive solutions see On Freedom&quot;,&quot;action&quot;:null,&quot;class&quot;:&quot;button-wrapper&quot;}" data-component-name="ButtonCreateButton"><a href="https://www.penguinrandomhouse.com/books/744574/on-freedom-by-timothy-snyder/" rel=""><span>For positive solutions see On Freedom</span></a></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[It's unlikely that there will be any further releases of mt32-pi (166 pts)]]></title>
            <link>https://github.com/dwhinham/mt32-pi/blob/075b52809e77420c6e80828825fe42430336b369/README.md</link>
            <guid>42955613</guid>
            <pubDate>Wed, 05 Feb 2025 21:42:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/dwhinham/mt32-pi/blob/075b52809e77420c6e80828825fe42430336b369/README.md">https://github.com/dwhinham/mt32-pi/blob/075b52809e77420c6e80828825fe42430336b369/README.md</a>, See on <a href="https://news.ycombinator.com/item?id=42955613">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Please note</h2><a id="user-content-please-note" aria-label="Permalink: Please note" href="#please-note"></a></p>
<p dir="auto"><strong>It's unlikely that there will be any further releases of mt32-pi.</strong></p>
<p dir="auto">I have endured a sustained campaign of abuse from members of the VOGONS forum, been labelled a "clout-chaser", had threats sent to my personal email address, code been used in other projects without proper accreditation, my 3D print designs stolen and sold by faceless eBay/Etsy sellers, personal attacks made towards me when people don't get their feature request... the list goes on and on.</p>
<p dir="auto"><em>There is only so much I can take.</em></p>
<p dir="auto">My mental health has been in decline as a direct result of this behavior; the joy of working on this project has pretty much gone. There is nothing to be gained from putting time and hard work into it any more. There is no gratitude, no encouragement - just entitled behavior and grift.</p>
<p dir="auto">To those who supported this project in the past, especially whilst I was a struggling student who needed all the uplift I could get, thank you sincerely.</p>
<hr>
<p dir="auto"><a href="https://github.com/dwhinham/mt32-pi/actions?query=workflow:%22mt32-pi+CI%22"><img src="https://github.com/dwhinham/mt32-pi/workflows/mt32-pi%20CI/badge.svg" alt="mt32-pi CI"></a></p>
<div dir="auto"><h2 tabindex="-1" dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="https://github.com/dwhinham/mt32-pi/blob/075b52809e77420c6e80828825fe42430336b369/images/mt32pi_logo.svg"><img width="90%" title="mt32-pi - Baremetal synthesizer system" src="https://github.com/dwhinham/mt32-pi/raw/075b52809e77420c6e80828825fe42430336b369/images/mt32pi_logo.svg"></a>
</h2><a id="user-content-----" aria-label="Permalink: " href="#----"></a></div>
<ul dir="auto">
<li>A work-in-progress baremetal MIDI synthesizer for the Raspberry Pi 3 or above, based on <a href="https://github.com/munt/munt">Munt</a>, <a href="http://www.fluidsynth.org/" rel="nofollow">FluidSynth</a> and <a href="https://github.com/rsta2/circle">Circle</a>.</li>
<li>Turn your Raspberry Pi into a dedicated emulation of the <a href="https://en.wikipedia.org/wiki/Roland_MT-32" rel="nofollow">famous multi-timbre sound module</a> used by countless classic MS-DOS, PC-98 and Sharp X68000 games!</li>
<li>Add your favorite <a href="https://en.wikipedia.org/wiki/SoundFont" rel="nofollow">SoundFonts</a> to expand your synthesizer with <a href="https://en.wikipedia.org/wiki/General_MIDI" rel="nofollow">General MIDI</a>, <a href="https://en.wikipedia.org/wiki/Roland_GS" rel="nofollow">Roland GS</a>, or even <a href="https://en.wikipedia.org/wiki/Yamaha_XG" rel="nofollow">Yamaha XG</a> support for endless MIDI possibilities.</li>
<li>Includes General MIDI and Roland GS support out of the box thanks to <a href="http://schristiancollins.com/generaluser.php" rel="nofollow">GeneralUser GS</a> by S. Christian Collins.</li>
<li>No operating system, no complex Linux audio configuration; just super-low latency audio.</li>
<li>Easy to configure and ready to play from cold-boot in a matter of seconds.</li>
<li>The perfect companion for your vintage PC or <a href="https://github.com/dwhinham/mt32-pi/wiki/MiSTer-FPGA">MiSTer FPGA</a> setup.</li>
</ul>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">✔️ Project status</h2><a id="user-content-️-project-status" aria-label="Permalink: ✔️ Project status" href="#️-project-status"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/dwhinham/mt32-pi/blob/075b52809e77420c6e80828825fe42430336b369/images/mt32pi_pimidi.png"><img title="mt32-pi running on the Raspberry Pi 3 A+ with the Arananet PI-MIDI HAT." width="280rem" src="https://github.com/dwhinham/mt32-pi/raw/075b52809e77420c6e80828825fe42430336b369/images/mt32pi_pimidi.png"></a></p>
<ul dir="auto">
<li>Supports Raspberry Pi Zero 2 W, Raspberry Pi 3 Model A+, B, and B+, Raspberry Pi 4 Model B, and CM4 series.
<ul dir="auto">
<li>Pi 2 works, but only with concessions on playback quality.</li>
<li>Pi Zero (original) and Pi 1 are unfortunately too slow (even with an overclock) and unsupported.</li>
</ul>
</li>
<li>PWM headphone jack audio.
<ul dir="auto">
<li>Quality is known to be poor (aliasing/distortion on quieter sounds).</li>
<li>It is not currently known whether this can be improved or not.</li>
</ul>
</li>
<li><a href="https://github.com/dwhinham/mt32-pi/wiki/I%C2%B2S-DACs">I²S Hi-Fi DAC support</a>.
<ul dir="auto">
<li>This is the recommended audio output method for the best quality audio.</li>
</ul>
</li>
<li>MIDI input via <a href="https://github.com/dwhinham/mt32-pi/wiki/USB-MIDI-interfaces">USB</a>, <a href="https://github.com/dwhinham/mt32-pi/wiki/GPIO-MIDI-interface">GPIO</a> MIDI interfaces, or the <a href="https://github.com/dwhinham/mt32-pi/wiki/MIDI-via-RS-232-or-USB-to-serial">serial port</a>.</li>
<li><a href="https://github.com/dwhinham/mt32-pi/wiki/Configuration-file">Configuration file</a> for selecting hardware options and fine tuning.</li>
<li><a href="https://github.com/dwhinham/mt32-pi/wiki/LCD-and-OLED-displays">LCD status screen support</a> (for MT-32 SysEx messages and status information).</li>
<li>Simple <a href="https://github.com/dwhinham/mt32-pi/wiki/Control-surface">physical control surface</a> using buttons and rotary encoder.</li>
<li><a href="https://github.com/dwhinham/mt32-pi/wiki/MiSTer-FPGA">MiSTer FPGA integration via user port</a>.</li>
<li>Network MIDI support via <a href="https://github.com/dwhinham/mt32-pi/wiki/Networking%3A-RTP-MIDI-%28AppleMIDI%29">RTP-MIDI</a> and <a href="https://github.com/dwhinham/mt32-pi/wiki/Networking%3A-UDP-MIDI">raw UDP socket</a>.</li>
<li><a href="https://github.com/dwhinham/mt32-pi/wiki/Embedded-FTP-server">Embedded FTP server</a> for remote access to files.</li>
<li>A user interface with menu system is <em>planned</em>.</li>
<li>More advanced MIDI routing is <em>planned</em>.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">✨ Quick-start guide</h2><a id="user-content--quick-start-guide" aria-label="Permalink: ✨ Quick-start guide" href="#-quick-start-guide"></a></p>
<p dir="auto">🆕 If you have a Linux computer or MiSTer FPGA device, you may wish to try the new interactive <a href="https://github.com/dwhinham/mt32-pi/blob/075b52809e77420c6e80828825fe42430336b369/scripts">mt32-pi installer script</a>.</p>
<p dir="auto">Otherwise, for a manual installation:</p>
<ol dir="auto">
<li>Download the latest release from the <a href="https://github.com/dwhinham/mt32-pi/releases">Releases</a> section.
<ul dir="auto">
<li>If you are <strong>updating an old version</strong>, read the <a href="https://github.com/dwhinham/mt32-pi/wiki/Updating-mt32-pi">Updating mt32-pi</a> wiki page for the correct procedure.</li>
</ul>
</li>
<li>Extract contents to a blank <a href="https://github.com/dwhinham/mt32-pi/wiki/SD-card-preparation">FAT32-formatted SD card</a>.
<ul dir="auto">
<li>Read the <a href="https://github.com/dwhinham/mt32-pi/wiki/SD-card-preparation">SD card preparation</a> wiki page for hints on formatting an SD card correctly (especially under Windows).</li>
</ul>
</li>
<li>For MT-32 support, add your MT-32 or CM-32L ROM images to the <code>roms</code> directory - you have to provide these for copyright reasons.
<ul dir="auto">
<li>You will need at least one control ROM and one PCM ROM.</li>
<li>For information on using multiple ROM sets and switching between them, see the <a href="https://github.com/dwhinham/mt32-pi/wiki/MT-32-synthesis">MT-32 synthesis</a> wiki page.</li>
<li>The file names or extensions don't matter; mt32-pi will scan and detect their types automatically.</li>
</ul>
</li>
<li>Optionally add your favorite SoundFonts to the <code>soundfonts</code> directory.
<ul dir="auto">
<li>For information on using multiple SoundFonts and switching between them, see the <a href="https://github.com/dwhinham/mt32-pi/wiki/SoundFont-synthesis">SoundFont synthesis</a> wiki page.</li>
<li>Again, file names/extensions don't matter.</li>
</ul>
</li>
<li>Edit the <code>mt32-pi.cfg</code> file to enable any optional hardware (Hi-Fi DAC, displays, buttons). Refer to <a href="https://github.com/dwhinham/mt32-pi/wiki">the wiki</a> to find supported hardware.
<ul dir="auto">
<li><strong>MiSTer users</strong>: Read the <a href="https://github.com/dwhinham/mt32-pi/wiki/MiSTer-FPGA%3A-Setup-and-usage">MiSTer setup</a> section of the wiki for the recommended configuration, and ignore the following two steps.</li>
</ul>
</li>
<li>Connect a <a href="https://github.com/dwhinham/mt32-pi/wiki/USB-MIDI-interfaces">USB MIDI interface</a> or <a href="https://github.com/dwhinham/mt32-pi/wiki/GPIO-MIDI-interface">GPIO MIDI circuit</a> to the Pi, and connect some speakers to the headphone jack.</li>
<li>Connect your vintage PC's MIDI OUT to the Pi's MIDI IN and (optionally) vice versa.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">📚 Documentation</h2><a id="user-content--documentation" aria-label="Permalink: 📚 Documentation" href="#-documentation"></a></p>
<p dir="auto">More detailed documentation for mt32-pi can now be found over at the <a href="https://github.com/dwhinham/mt32-pi/wiki">mt32-pi wiki</a>. Please read the wiki pages to learn about all of mt32-pi's features and supported hardware, and consider helping us improve it!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">❓ Help</h2><a id="user-content--help" aria-label="Permalink: ❓ Help" href="#-help"></a></p>
<p dir="auto">Take a look at our <a href="https://github.com/dwhinham/mt32-pi/wiki/FAQ">FAQ</a> page for answers to the most common questions about mt32-pi.</p>
<p dir="auto">If you need some help with mt32-pi and the wiki doesn't answer your questions, head over to the <a href="https://github.com/dwhinham/mt32-pi/discussions">discussions</a> area and feel free to start a topic.</p>
<blockquote>
<p dir="auto">⚠ <strong>Note</strong>: Please don't use the Issues area to ask for help - Issues are intended for reproducible bug reports and feature requests. Thank you!</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">❤️ Contributing</h2><a id="user-content-️-contributing" aria-label="Permalink: ❤️ Contributing" href="#️-contributing"></a></p>
<p dir="auto">This project is generally quite stable and very usable, but still considered by its author to be in early stages of development.</p>
<p dir="auto">Hence, please <strong>DO NOT</strong> work on large features and open pull requests without prior discussion. There is a strong possibility that work-in-progress code for proposed features already exists, but may not yet be public, and your work will have to be rejected.</p>
<p dir="auto">Trivial changes to the code that fix issues are always welcome, as are improvements to documentation, and hardware/software compatibility reports.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">⚖️ License</h2><a id="user-content-️-license" aria-label="Permalink: ⚖️ License" href="#️-license"></a></p>
<p dir="auto">This project's source code is licensed under the <a href="https://github.com/dwhinham/mt32-pi/blob/master/LICENSE">GNU General Public License v3.0</a>.</p>
<p dir="auto">The <a href="https://github.com/dwhinham/mt32-pi/blob/master/images/mt32pi_logo.svg">mt32-pi logo</a> was designed by and is © Dale Whinham. The terms of use for the logo are as follows:</p>
<ul dir="auto">
<li>The logo <strong>MAY</strong> be used on open-source community hardware.</li>
<li>The logo <strong>MAY</strong> be used to link back to this repository or for similar promotional purposes of a strictly <strong>non-commercial nature</strong> (e.g. blog posts, social media, YouTube videos).</li>
<li>The logo <strong>MUST NOT</strong> be used on or for the marketing of closed-source or commercial hardware (e.g. case designs, PCBs), without express permission.</li>
<li>The logo <strong>MUST NOT</strong> be used for any other commercial products or purposes without express permission.</li>
<li>The shape and overall design of the logo <strong>MUST NOT</strong> be modified or distorted. You <strong>MAY</strong> change the colors if required.</li>
<li>If in any doubt, please ask. Thank you.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">🙌 Acknowledgments</h2><a id="user-content--acknowledgments" aria-label="Permalink: 🙌 Acknowledgments" href="#-acknowledgments"></a></p>
<ul dir="auto">
<li>Many thanks go out to @rc55 and @nswaldman for their encouragement and testing! ❤️</li>
<li>A huge thank you to everyone who has donated via Ko-fi, PayPal, or Amazon - your support means a lot! ❤️</li>
<li>Special thanks to <a href="https://www.arananet.net/pedidos" rel="nofollow">Edu Arana (Arananet)</a>, <a href="https://misteraddons.com/" rel="nofollow">Porkchop Express (MiSTerAddons)</a>, @djhardrich, <a href="https://misterfpga.co.uk/" rel="nofollow">Nat (MiSTerFPGA.co.uk)</a>, <a href="https://ultimatemister.com/" rel="nofollow">Ricardo Saraiva (UltimateMiSTer.com)</a>, <a href="http://serdashop.com/" rel="nofollow">Serge Defever (Serdashop)</a>, and @opjose who have all generously donated hardware to the project.</li>
<li>The <a href="https://github.com/munt/munt">Munt</a> team for their incredible work reverse-engineering the Roland MT-32 and producing an excellent emulation and well-structured project.</li>
<li>The <a href="http://www.fluidsynth.org/" rel="nofollow">FluidSynth</a> team for their excellent and easily-portable SoundFont synthesizer project.</li>
<li><a href="http://schristiancollins.com/generaluser.php" rel="nofollow">S. Christian Collins</a> for the excellent GeneralUser GS SoundFont and for kindly giving permission to include it in the project.</li>
<li>The <a href="https://github.com/rsta2/circle">Circle</a> and <a href="https://github.com/smuehlst/circle-stdlib">circle-stdlib</a> projects for providing the best C++ baremetal framework for the Raspberry Pi.</li>
<li>The <a href="https://github.com/benhoyt/inih">inih</a> project for a nice, lightweight config file parser.</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Okta Bcrypt incident lessons for designing better APIs (279 pts)]]></title>
            <link>https://n0rdy.foo/posts/20250121/okta-bcrypt-lessons-for-better-apis/</link>
            <guid>42955176</guid>
            <pubDate>Wed, 05 Feb 2025 21:10:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://n0rdy.foo/posts/20250121/okta-bcrypt-lessons-for-better-apis/">https://n0rdy.foo/posts/20250121/okta-bcrypt-lessons-for-better-apis/</a>, See on <a href="https://news.ycombinator.com/item?id=42955176">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <div>
    <p><time datetime=" 2025-01-22T18:00:00+0100">
        January 22, 2025
      </time>
      
      <span> - </span>
      <span>
        
          
        

        <span>16 mins read</span>
      </span>
    </p>

    
    
    
  </div>

  <p>Hello there! If you follow tech news, you might have heard about the <a href="https://trust.okta.com/security-advisories/okta-ad-ldap-delegated-authentication-username/" target="_blank">Okta security incident</a> that was reported on 1st of November. The TLDR of the incident was this:</p>
<blockquote>
<p>The Bcrypt algorithm was used to generate the cache key where we hash a  combined string of userId + username + password. Under a specific set of conditions, listed below, this could allow users to authenticate by  providing the username with the stored cache key of a previous  successful authentication.</p>
</blockquote>
<p>This means that if the user had a username above 52 chars, any password would suffice to log in. Also, if the username is, let’s say, 50 chars long, it means that the bad actor needs to guess only 3 first chars to get in, which is quite a trivial task for the computers these days. Too bad, isn’t it?</p>
<p>On the other hand, such long usernames are not very usual, which I agree with. However, some companies like using the entire name of the employee as the email address. So, let’s say, Albus Percival Wulfric Brian Dumbledore, a headmaster of Hogwarts, should be concerned, as <code><a href="https://n0rdy.foo/cdn-cgi/l/email-protection" data-cfemail="7514191700065b051007161c0314195b02001913071c165b17071c141b5b110018171910111a0710351d1a1202140701065b06161d1a1a19">[email&nbsp;protected]</a></code> is 55 chars. Ooops!</p>
<p><img src="https://n0rdy.foo/images/drawings/20250122-0001.webp" alt="image"></p>
<p>This was possible due to the nature of Bcrypt hashing algorithm that has a maximum supported input length of 72 characters (read more <a href="https://en.wikipedia.org/wiki/Bcrypt#Maximum_password_length" target="_blank">here</a>), so in Okta case the characters above the limit were ignored while computing the hash, and therefore, not used in the comparison operation. We can reverse engineer that:</p>
<ul>
<li><code>72 - 53 = 19</code> - user id with separators if any</li>
<li>this way, the password will be outside the 72 chars limit, and, therefore, ignored by the Bcrypt algorithm</li>
</ul>
<p>However, there was one thing that made me wonder: if there is a known limit of the algorithm, why is it not enforced by the crypto libraries as a form of input validation? A simple <code>if input length &gt; 72 -&gt; return error</code> will do the trick. I assumed that they might have used some custom library for Bcrypt implementation and simply forgotten about the input validation, which can happen. So, I decided to check how other programming languages behave.</p>
<h2 id="go-and-bcrypt">Go and Bcrypt</h2>
<p>Let’s start with Go, and implement the Okta incident-like case with the help of the official <code>golang.org/x/crypto/bcrypt</code> library:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>package</span> <span>main</span>
</span></span><span><span>
</span></span><span><span><span>import</span> (
</span></span><span><span>	<span>"crypto/rand"</span>
</span></span><span><span>	<span>"encoding/base64"</span>
</span></span><span><span>	<span>"fmt"</span>
</span></span><span><span>	<span>"golang.org/x/crypto/bcrypt"</span>
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span>func</span> <span>main</span>() {
</span></span><span><span>	<span>// 18 + 55 + 1 = 74, so above 72 characters' limit of BCrypt
</span></span></span><span><span><span></span>	<span>userId</span> <span>:=</span> <span>randomString</span>(<span>18</span>)
</span></span><span><span>	<span>username</span> <span>:=</span> <span>randomString</span>(<span>55</span>)
</span></span><span><span>	<span>password</span> <span>:=</span> <span>"super-duper-secure-password"</span>
</span></span><span><span>
</span></span><span><span>	<span>combinedString</span> <span>:=</span> <span>fmt</span>.<span>Sprintf</span>(<span>"%s:%s:%s"</span>, <span>userId</span>, <span>username</span>, <span>password</span>)
</span></span><span><span>
</span></span><span><span>	<span>combinedHash</span>, <span>err</span> <span>:=</span> <span>bcrypt</span>.<span>GenerateFromPassword</span>([]byte(<span>combinedString</span>), <span>bcrypt</span>.<span>DefaultCost</span>)
</span></span><span><span>	<span>if</span> <span>err</span> <span>!=</span> <span>nil</span> {
</span></span><span><span>		panic(<span>err</span>)
</span></span><span><span>	}
</span></span><span><span>
</span></span><span><span>	<span>// let's try to break it
</span></span></span><span><span><span></span>	<span>wrongPassword</span> <span>:=</span> <span>"wrong-password"</span>
</span></span><span><span>	<span>wrongCombinedString</span> <span>:=</span> <span>fmt</span>.<span>Sprintf</span>(<span>"%s:%s:%s"</span>, <span>userId</span>, <span>username</span>, <span>wrongPassword</span>)
</span></span><span><span>
</span></span><span><span>	<span>err</span> = <span>bcrypt</span>.<span>CompareHashAndPassword</span>(<span>combinedHash</span>, []byte(<span>wrongCombinedString</span>))
</span></span><span><span>	<span>if</span> <span>err</span> <span>!=</span> <span>nil</span> {
</span></span><span><span>		<span>fmt</span>.<span>Println</span>(<span>"Password is incorrect"</span>)
</span></span><span><span>	} <span>else</span> {
</span></span><span><span>		<span>fmt</span>.<span>Println</span>(<span>"Password is correct"</span>)
</span></span><span><span>	}
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>randomString</span>(<span>length</span> <span>int</span>) <span>string</span> {
</span></span><span><span>	<span>bytes</span> <span>:=</span> make([]<span>byte</span>, <span>length</span>)
</span></span><span><span>	<span>_</span>, <span>err</span> <span>:=</span> <span>rand</span>.<span>Read</span>(<span>bytes</span>)
</span></span><span><span>	<span>if</span> <span>err</span> <span>!=</span> <span>nil</span> {
</span></span><span><span>		panic(<span>err</span>)
</span></span><span><span>	}
</span></span><span><span>	<span>return</span> <span>base64</span>.<span>URLEncoding</span>.<span>EncodeToString</span>(<span>bytes</span>)[:<span>length</span>]
</span></span><span><span>}
</span></span></code></pre></div><p>All the code samples can be found <a href="https://github.com/n0rdy/n0rdy-blog-code-samples/tree/main/20250122-bcrypt-api" target="_blank">here</a></p>
<p>What this code does is:</p>
<ul>
<li>generates 18-chars long userId</li>
<li>generates 55-chars long username</li>
<li>concatenates them with each other and a dummy password <code>super-duper-secure-password</code> with the use of <code>:</code> as a separator</li>
<li>computes Bcrypt hash from the concatenated string</li>
<li>then concatenates the same userId and username with a different password <code>wrong-password</code></li>
<li>uses bcrypt API to compare whether the 2nd concatenated string matches the hash of the 1st one</li>
</ul>
<p>Let’s run the code and see the result:</p>
<div><pre tabindex="0"><code data-lang="plain"><span><span>panic: bcrypt: password length exceeds 72 bytes
</span></span><span><span>
</span></span><span><span>goroutine 1 [running]:
</span></span><span><span>main.main()
</span></span><span><span>	/n0rdy-blog-code-samples/20250121-bcrypt-api/01-bcrypt-in-go/main.go:20 +0x2d1
</span></span></code></pre></div><p>Good job, Go! If we check the source code of the <code>bcrypt.GenerateFromPassword(...)</code> function, we’ll see this piece of code at the very beginning:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>if</span> len(<span>password</span>) &gt; <span>72</span> {
</span></span><span><span>	<span>return</span> <span>nil</span>, <span>ErrPasswordTooLong</span>
</span></span><span><span>}
</span></span></code></pre></div><p>Perfect! At this point, I became even more suspicious about the tool Okta used, as it seemed like the industry figured that out based on this example. Spoiler alert: it’s not that simple.</p>
<p>Let’s proceed with Java.</p>
<p><em>Btw, if you like my blog and don’t want to miss out on new posts, consider subscribing to my newsletter <a href="https://mail.n0rdy.foo/subscription/form" target="_blank">here</a>. You’ll receive an email once I publish a new post.</em></p>
<h2 id="java-and-bcrypt">Java and Bcrypt</h2>
<p>Java doesn’t support Bcrypt from its core API, but my simple Google search showed that Spring Security library has implemented it. For those who are not into Java ecosystem, Spring is the most used and battle-tested frameworks out there, that has libraries for almost anything: Web, DBs, Cloud, Security, AI, etc. Pretty powerful tool, that I’ve used a lot in the past, and still sometimes use for my side projects.</p>
<h3 id="spring-security">Spring Security</h3>
<p>So, I added the latest version of Spring Security to the project and reproduced the same scenario, as in Go example above:</p>
<div><pre tabindex="0"><code data-lang="java"><span><span><span>import</span> org.apache.commons.lang3.RandomStringUtils;
</span></span><span><span><span>import</span> org.springframework.security.crypto.bcrypt.BCrypt;
</span></span><span><span>
</span></span><span><span><span>public</span> <span>class</span> <span>BcriptSpringSecurity</span> {
</span></span><span><span>    <span>public</span> <span>static</span> <span>void</span> <span>main</span>(String<span>[]</span> args) {
</span></span><span><span>        <span>// 18 + 55 + 1 = 74, so above 72 characters' limit of BCrypt</span>
</span></span><span><span>        <span>var</span> userId <span>=</span> RandomStringUtils.<span>randomAlphanumeric</span>(18);
</span></span><span><span>        <span>var</span> username <span>=</span> RandomStringUtils.<span>randomAlphanumeric</span>(55);
</span></span><span><span>        <span>var</span> password <span>=</span> <span>"super-duper-secure-password"</span>;
</span></span><span><span>
</span></span><span><span>        <span>var</span> combinedString <span>=</span> String.<span>format</span>(<span>"%s:%s:%s"</span>, userId, username, password);
</span></span><span><span>
</span></span><span><span>        <span>var</span> combinedHash <span>=</span> BCrypt.<span>hashpw</span>(combinedString, BCrypt.<span>gensalt</span>());
</span></span><span><span>
</span></span><span><span>        <span>// let's try to break it</span>
</span></span><span><span>        <span>var</span> wrongPassword <span>=</span> <span>"wrong-password"</span>;
</span></span><span><span>        <span>var</span> wrongCombinedString <span>=</span> String.<span>format</span>(<span>"%s:%s:%s"</span>, userId, username, wrongPassword);
</span></span><span><span>
</span></span><span><span>        <span>if</span> (BCrypt.<span>checkpw</span>(wrongCombinedString, combinedHash)) {
</span></span><span><span>            System.<span>out</span>.<span>println</span>(<span>"Password is correct"</span>);
</span></span><span><span>        } <span>else</span> {
</span></span><span><span>            System.<span>out</span>.<span>println</span>(<span>"Password is incorrect"</span>);
</span></span><span><span>        }
</span></span><span><span>    }
</span></span><span><span>}
</span></span></code></pre></div><p>I ran the code, and to my great surprise, saw this outcome:</p>
<p>I took a peak at the implementation code, and was disappointed: even though there are a bunch of checks on salt:</p>
<pre tabindex="0"><code>if (saltLength &lt; 28) {
	throw new IllegalArgumentException("Invalid salt");
}
...
if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {
	throw new IllegalArgumentException("Invalid salt version");
}
...
minor = salt.charAt(2);
if ((minor != 'a' &amp;&amp; minor != 'x' &amp;&amp; minor != 'y' &amp;&amp; minor != 'b') || salt.charAt(3) != '$') {
	throw new IllegalArgumentException("Invalid salt revision");
}
...
</code></pre><p>I didn’t see any validation of the input that will be hashed. Hm…</p>
<p>I decided to check other Google results, and the next Java library in the list was <code>bcrypt</code> from Patrick Favre (<a href="https://github.com/patrickfav/bcrypt" target="_blank">link to GitHub repo</a>) with 513 starts and the last release version 0.10.2 (so, not stable) from 12th of February 2023 (almost 2 years old). This suggested that I’d not use it in production, but why not to run our tests.</p>
<h3 id="bcrypt-from-patrick-favre">Bcrypt from Patrick Favre</h3>
<div><pre tabindex="0"><code data-lang="java"><span><span><span>import</span> at.favre.lib.crypto.bcrypt.BCrypt;
</span></span><span><span><span>import</span> org.apache.commons.lang3.RandomStringUtils;
</span></span><span><span>
</span></span><span><span><span>public</span> <span>class</span> <span>BcryptAtFavre</span> {
</span></span><span><span>
</span></span><span><span>    <span>public</span> <span>static</span> <span>void</span> <span>main</span>(String<span>[]</span> args) {
</span></span><span><span>        <span>// 18 + 1 + 55 = 74, so above 72 characters' limit of BCrypt</span>
</span></span><span><span>        <span>var</span> userId <span>=</span> RandomStringUtils.<span>randomAlphanumeric</span>(18);
</span></span><span><span>        <span>var</span> username <span>=</span> RandomStringUtils.<span>randomAlphanumeric</span>(55);
</span></span><span><span>        <span>var</span> password <span>=</span> <span>"super-duper-secure-password"</span>;
</span></span><span><span>
</span></span><span><span>        <span>var</span> combinedString <span>=</span> String.<span>format</span>(<span>"%s:%s:%s"</span>, userId, username, password);
</span></span><span><span>
</span></span><span><span>        <span>var</span> combinedHash <span>=</span> BCrypt.<span>withDefaults</span>().<span>hashToString</span>(12, combinedString.<span>toCharArray</span>());
</span></span><span><span>
</span></span><span><span>        <span>// let's try to break it</span>
</span></span><span><span>        <span>var</span> wrongPassword <span>=</span> <span>"wrong-password"</span>;
</span></span><span><span>        <span>var</span> wrongCombinedString <span>=</span> String.<span>format</span>(<span>"%s:%s:%s"</span>, userId, username, wrongPassword);
</span></span><span><span>
</span></span><span><span>        <span>var</span> result <span>=</span> BCrypt.<span>verifyer</span>().<span>verify</span>(combinedHash.<span>toCharArray</span>(), wrongCombinedString);
</span></span><span><span>        <span>if</span> (result.<span>verified</span>) {
</span></span><span><span>            System.<span>out</span>.<span>println</span>(<span>"Password is correct"</span>);
</span></span><span><span>        } <span>else</span> {
</span></span><span><span>            System.<span>out</span>.<span>println</span>(<span>"Password is incorrect"</span>);
</span></span><span><span>        }
</span></span><span><span>    }
</span></span><span><span>}
</span></span></code></pre></div><p>Let’s run it:</p>
<div><pre tabindex="0"><code data-lang="plain"><span><span>Exception in thread "main" java.lang.IllegalArgumentException: password must not be longer than 72 bytes plus null terminator encoded in utf-8, was 102
</span></span><span><span>	at at.favre.lib.crypto.bcrypt.LongPasswordStrategy$StrictMaxPasswordLengthStrategy.innerDerive(LongPasswordStrategy.java:50)
</span></span><span><span>	at at.favre.lib.crypto.bcrypt.LongPasswordStrategy$BaseLongPasswordStrategy.derive(LongPasswordStrategy.java:34)
</span></span><span><span>	at at.favre.lib.crypto.bcrypt.BCrypt$Hasher.hashRaw(BCrypt.java:303)
</span></span><span><span>	at at.favre.lib.crypto.bcrypt.BCrypt$Hasher.hash(BCrypt.java:267)
</span></span><span><span>	at at.favre.lib.crypto.bcrypt.BCrypt$Hasher.hash(BCrypt.java:229)
</span></span><span><span>	at at.favre.lib.crypto.bcrypt.BCrypt$Hasher.hashToString(BCrypt.java:205)
</span></span><span><span>	at BcryptAtFavre.main(BcryptAtFavre.java:14)
</span></span></code></pre></div><p>Nice, good job, Patrick, you saved the day for Java!</p>
<p>After checking the source code, I found this piece:</p>
<div><pre tabindex="0"><code data-lang="java"><span><span><span>@Override</span>
</span></span><span><span><span>public</span> <span>byte</span><span>[]</span> <span>derive</span>(<span>byte</span><span>[]</span> rawPassword) {
</span></span><span><span>    <span>if</span> (rawPassword.<span>length</span> <span>&gt;=</span> maxLength) {
</span></span><span><span>        <span>return</span> innerDerive(rawPassword);
</span></span><span><span>    }
</span></span><span><span>    <span>return</span> rawPassword;
</span></span><span><span>}
</span></span></code></pre></div><p>and the strict strategy that threw the exception we’ve seen:</p>
<div><pre tabindex="0"><code data-lang="java"><span><span><span>final</span> <span>class</span> <span>StrictMaxPasswordLengthStrategy</span> <span>extends</span> BaseLongPasswordStrategy {
</span></span><span><span>    StrictMaxPasswordLengthStrategy(<span>int</span> maxLength) {
</span></span><span><span>        <span>super</span>(maxLength);
</span></span><span><span>    }
</span></span><span><span>
</span></span><span><span>    <span>@Override</span>
</span></span><span><span>    <span>public</span> <span>byte</span><span>[]</span> <span>innerDerive</span>(<span>byte</span><span>[]</span> rawPassword) {
</span></span><span><span>        <span>throw</span> <span>new</span> IllegalArgumentException(<span>"password must not be longer than "</span> <span>+</span> maxLength <span>+</span> <span>" bytes plus null terminator encoded in utf-8, was "</span> <span>+</span> rawPassword.<span>length</span>);
</span></span><span><span>    }
</span></span><span><span>}
</span></span></code></pre></div><p>We can see that this strict strategy is used as a part of the default configs:</p>
<div><pre tabindex="0"><code data-lang="java"><span><span><span>public</span> <span>static</span> Hasher <span>withDefaults</span>() {
</span></span><span><span>    <span>return</span> <span>new</span> Hasher(Version.<span>VERSION_2A</span>, <span>new</span> SecureRandom(), LongPasswordStrategies.<span>strict</span>(Version.<span>VERSION_2A</span>));
</span></span><span><span>}
</span></span></code></pre></div><p>Cool!</p>
<p>Let’s switch to JavaScript.</p>
<h2 id="javascript-and-bcrypt">JavaScript and Bcrypt</h2>
<p>Here I used the <a href="https://www.npmjs.com/package/bcryptjs" target="_blank">bcryptjs</a> which has over 2 million weekly downloads based on the NPM stats.</p>
<div><pre tabindex="0"><code data-lang="javascript"><span><span><span>const</span> <span>bcrypt</span> <span>=</span> <span>require</span>(<span>'bcryptjs'</span>)
</span></span><span><span>
</span></span><span><span><span>function</span> <span>randomString</span> (<span>length</span>) {
</span></span><span><span>  <span>const</span> <span>chars</span> <span>=</span> <span>'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>
</span></span><span><span>  <span>let</span> <span>result</span> <span>=</span> <span>''</span>
</span></span><span><span>  <span>for</span> (<span>let</span> <span>i</span> <span>=</span> <span>length</span>; <span>i</span> <span>&gt;</span> <span>0</span>; <span>--</span><span>i</span>) {
</span></span><span><span>    <span>result</span> <span>+=</span> <span>chars</span>[Math.<span>floor</span>(Math.<span>random</span>() <span>*</span> <span>chars</span>.<span>length</span>)]
</span></span><span><span>  }
</span></span><span><span>  <span>return</span> <span>result</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>function</span> <span>runTest</span> () {
</span></span><span><span>  <span>// 18 + 55 + 1 = 74, so above 72 characters' limit of BCrypt
</span></span></span><span><span><span></span>  <span>const</span> <span>userId</span> <span>=</span> <span>randomString</span>(<span>18</span>)
</span></span><span><span>  <span>const</span> <span>username</span> <span>=</span> <span>randomString</span>(<span>55</span>)
</span></span><span><span>  <span>const</span> <span>password</span> <span>=</span> <span>'super-duper-secure-password'</span>
</span></span><span><span>
</span></span><span><span>  <span>const</span> <span>combinedString</span> <span>=</span> <span>`</span><span>${</span><span>userId</span><span>}</span><span>:</span><span>${</span><span>username</span><span>}</span><span>:</span><span>${</span><span>password</span><span>}</span><span>`</span>
</span></span><span><span>
</span></span><span><span>  <span>const</span> <span>combinedHash</span> <span>=</span> <span>bcrypt</span>.<span>hashSync</span>(<span>combinedString</span>)
</span></span><span><span>
</span></span><span><span>  <span>// let's try to break it
</span></span></span><span><span><span></span>  <span>const</span> <span>wrongPassword</span> <span>=</span> <span>'wrong-password'</span>
</span></span><span><span>  <span>const</span> <span>wrongCombinedString</span> <span>=</span> <span>`</span><span>${</span><span>userId</span><span>}</span><span>:</span><span>${</span><span>username</span><span>}</span><span>:</span><span>${</span><span>wrongPassword</span><span>}</span><span>`</span>
</span></span><span><span>
</span></span><span><span>  <span>if</span> (<span>bcrypt</span>.<span>compareSync</span>(<span>wrongCombinedString</span>, <span>combinedHash</span>)) {
</span></span><span><span>    <span>console</span>.<span>log</span>(<span>'Password is correct'</span>)
</span></span><span><span>  } <span>else</span> {
</span></span><span><span>    <span>console</span>.<span>log</span>(<span>'Password is wrong'</span>)
</span></span><span><span>  }
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>runTest</span>()
</span></span></code></pre></div><p>The output is:</p>
<p>Not great. The source code reveals that similar to Spring Security, the library validates the salt</p>
<div><pre tabindex="0"><code data-lang="javascript"><span><span><span>if</span> (<span>salt</span>.<span>charAt</span>(<span>0</span>) <span>!==</span> <span>'$'</span> <span>||</span> <span>salt</span>.<span>charAt</span>(<span>1</span>) <span>!==</span> <span>'2'</span>) {
</span></span><span><span>     <span>err</span> <span>=</span> Error(<span>"Invalid salt version: "</span><span>+</span><span>salt</span>.<span>substring</span>(<span>0</span>,<span>2</span>));
</span></span><span><span>     <span>if</span> (<span>callback</span>) {
</span></span><span><span>         <span>nextTick</span>(<span>callback</span>.<span>bind</span>(<span>this</span>, <span>err</span>));
</span></span><span><span>         <span>return</span>;
</span></span><span><span>     }
</span></span><span><span>     <span>else</span>
</span></span><span><span>         <span>throw</span> <span>err</span>;
</span></span><span><span>}
</span></span><span><span>...
</span></span></code></pre></div><p>but not the input length.</p>
<p>Let’s try if Python can do any better.</p>
<h2 id="python-and-bcrypt">Python and Bcrypt</h2>
<p>Using <a href="https://github.com/pyca/bcrypt" target="_blank">bcrypt</a> library with 1.3k starts and the latest release in November.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>import</span> random
</span></span><span><span><span>import</span> string
</span></span><span><span>
</span></span><span><span><span>import</span> bcrypt
</span></span><span><span>
</span></span><span><span><span>def</span> <span>random_string</span>(length):
</span></span><span><span>    <span>return</span> <span>''</span><span>.</span>join(random<span>.</span>choice(string<span>.</span>ascii_letters) <span>for</span> i <span>in</span> range(length))
</span></span><span><span>
</span></span><span><span><span>if</span> __name__ <span>==</span> <span>'__main__'</span>:
</span></span><span><span>    <span># 18 + 55 + 1 = 74, so above 72 characters' limit of BCrypt</span>
</span></span><span><span>    user_id <span>=</span> random_string(<span>18</span>)
</span></span><span><span>    username <span>=</span> random_string(<span>55</span>)
</span></span><span><span>    password <span>=</span> <span>"super-duper-secure-password"</span>
</span></span><span><span>
</span></span><span><span>    combined_string <span>=</span> <span>"</span><span>{0}</span><span>:</span><span>{1}</span><span>:</span><span>{2}</span><span>"</span><span>.</span>format(user_id, username, password)
</span></span><span><span>
</span></span><span><span>    combined_hash <span>=</span> bcrypt<span>.</span>hashpw(combined_string<span>.</span>encode(<span>'utf-8'</span>), bcrypt<span>.</span>gensalt())
</span></span><span><span>
</span></span><span><span>    <span># let's try to break it</span>
</span></span><span><span>    wrong_password <span>=</span> <span>"wrong-password"</span>
</span></span><span><span>    wrong_combined_string <span>=</span> <span>"</span><span>{0}</span><span>:</span><span>{1}</span><span>:</span><span>{2}</span><span>"</span><span>.</span>format(user_id, username, wrong_password)
</span></span><span><span>
</span></span><span><span>    <span>if</span> bcrypt<span>.</span>checkpw(wrong_combined_string<span>.</span>encode(<span>'utf-8'</span>), combined_hash):
</span></span><span><span>        print(<span>"Password is correct"</span>)
</span></span><span><span>    <span>else</span>:
</span></span><span><span>        print(<span>"Password is incorrect"</span>)
</span></span></code></pre></div><p>The result is same as we observed for most of our test subjects:</p>
<p>All right, but what about some newer and more safety-oriented language - let’s try Rust.</p>
<h2 id="rust-and-bcrypt">Rust and Bcrypt</h2>
<p>Here I need to be honest: since I’m not a Rust expert at all, I used a help of a Claude AI to write this code. So, if you see any issues there, please, let me know in the comments section, so I can fix that.</p>
<p>As a library, I used <a href="https://github.com/Keats/rust-bcrypt" target="_blank">rust-bcrypt</a> based on my AI friend advice.</p>
<div><pre tabindex="0"><code data-lang="rust"><span><span><span>use</span> rand::RngCore;
</span></span><span><span><span>use</span> base64::{Engine <span>as</span> _, engine::general_purpose::<span>URL_SAFE</span>};
</span></span><span><span><span>use</span> std::error::Error;
</span></span><span><span>
</span></span><span><span><span>fn</span> <span>random_string</span>(length: <span>usize</span>) -&gt; String {
</span></span><span><span>    <span>let</span> <span>mut</span> bytes <span>=</span> vec![<span>0</span><span>u8</span>; length];
</span></span><span><span>    rand::thread_rng().fill_bytes(<span>&amp;</span><span>mut</span> bytes);
</span></span><span><span>    <span>URL_SAFE</span>.encode(<span>&amp;</span>bytes)[<span>..</span>length].to_string()
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>fn</span> <span>main</span>() -&gt; Result<span>&lt;</span>(), Box<span>&lt;</span><span>dyn</span> Error<span>&gt;&gt;</span> {
</span></span><span><span>    <span>// 18 + 55 + 1 = 74, so above 72 characters' limit of BCrypt
</span></span></span><span><span><span></span>    <span>let</span> user_id <span>=</span> random_string(<span>18</span>);
</span></span><span><span>    <span>let</span> username <span>=</span> random_string(<span>55</span>);
</span></span><span><span>    <span>let</span> password <span>=</span> <span>"super-duper-secure-password"</span>;
</span></span><span><span>
</span></span><span><span>    <span>let</span> combined_string <span>=</span> format!(<span>"</span><span>{}</span><span>:</span><span>{}</span><span>:</span><span>{}</span><span>"</span>, user_id, username, password);
</span></span><span><span>    <span>let</span> combined_hash <span>=</span> bcrypt::hash(combined_string.as_bytes(), bcrypt::<span>DEFAULT_COST</span>)<span>?</span>;
</span></span><span><span>
</span></span><span><span>    <span>// let's try to break it
</span></span></span><span><span><span></span>    <span>let</span> wrong_password <span>=</span> <span>"wrong-password"</span>;
</span></span><span><span>    <span>let</span> wrong_combined_string <span>=</span> format!(<span>"</span><span>{}</span><span>:</span><span>{}</span><span>:</span><span>{}</span><span>"</span>, user_id, username, wrong_password);
</span></span><span><span>
</span></span><span><span>    <span>match</span> bcrypt::verify(wrong_combined_string.as_bytes(), <span>&amp;</span>combined_hash) {
</span></span><span><span>        Ok(<span>true</span>) <span>=&gt;</span> println!(<span>"Password is correct"</span>),
</span></span><span><span>        Ok(<span>false</span>) <span>=&gt;</span> println!(<span>"Password is incorrect"</span>),
</span></span><span><span>        Err(e) <span>=&gt;</span> println!(<span>"</span><span>{}</span><span>"</span>, e),
</span></span><span><span>    }
</span></span><span><span>
</span></span><span><span>    Ok(())
</span></span><span><span>}
</span></span></code></pre></div><p>The output is:</p>
<p>I can see the validation of the cost:</p>
<div><pre tabindex="0"><code data-lang="rust"><span><span><span>if</span> <span>!</span>(<span>MIN_COST</span><span>..=</span><span>MAX_COST</span>).contains(<span>&amp;</span>cost) {
</span></span><span><span>    <span>return</span> Err(BcryptError::CostNotAllowed(cost));
</span></span><span><span>}
</span></span></code></pre></div><p>but not of the input. And here is the place where the explicit truncation of 72 chars happens (the comment is from the library source code):</p>
<div><pre tabindex="0"><code data-lang="rust"><span><span><span>// We only consider the first 72 chars; truncate if necessary.
</span></span></span><span><span><span>// `bcrypt` below will panic if len &gt; 72
</span></span></span><span><span><span></span><span>let</span> truncated <span>=</span> <span>if</span> vec.len() <span>&gt;</span> <span>72</span> {
</span></span><span><span>    <span>if</span> err_on_truncation {
</span></span><span><span>        <span>return</span> Err(BcryptError::Truncation(vec.len()));
</span></span><span><span>    }
</span></span><span><span>    <span>&amp;</span>vec[<span>..</span><span>72</span>]
</span></span><span><span>} <span>else</span> {
</span></span><span><span>    <span>&amp;</span>vec
</span></span><span><span>};
</span></span><span><span>
</span></span><span><span><span>let</span> output <span>=</span> bcrypt::bcrypt(cost, salt, truncated);
</span></span></code></pre></div><h2 id="why">Why?</h2>
<p>That was my first question after seeing that the majority of the tools follow the pattern that leads to the vulnerability. <a href="https://en.wikipedia.org/wiki/Bcrypt" target="_blank">Wikipedia article about Bcrypt</a> gave a hint:</p>
<blockquote>
<p>Many implementations of bcrypt truncate the password to the first 72 bytes, following the OpenBSD implementation</p>
</blockquote>
<p>Interesting! Let’s check the OpenBSD implementation of this algorithm, and <a href="https://github.com/openbsd/src/blob/master/lib/libc/crypt/bcrypt.c" target="_blank">here is the link</a> to it. The first point of interest lies here:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>/* strlen() returns a size_t, but the function calls
</span></span></span><span><span><span> * below result in implicit casts to a narrower integer
</span></span></span><span><span><span> * type, so cap key_len at the actual maximum supported
</span></span></span><span><span><span> * length here to avoid integer wraparound */</span>
</span></span><span><span>key_len <span>=</span> <span>strlen</span>(key);
</span></span><span><span><span>if</span> (key_len <span>&gt;</span> <span>72</span>)
</span></span><span><span>	 key_len <span>=</span> <span>72</span>;
</span></span><span><span>key_len<span>++</span>;
</span></span></code></pre></div><p>And from that moment on, <code>key_len</code> is used as a limit to iterate over the input string within, for example:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>u_int32_t</span>
</span></span><span><span><span>Blowfish_stream2word</span>(<span>const</span> <span>u_int8_t</span> <span>*</span>data, <span>u_int16_t</span> databytes,
</span></span><span><span>    <span>u_int16_t</span> <span>*</span>current)
</span></span><span><span>{
</span></span><span><span>	<span>u_int8_t</span> i;
</span></span><span><span>	<span>u_int16_t</span> j;
</span></span><span><span>	<span>u_int32_t</span> temp;
</span></span><span><span>
</span></span><span><span>	temp <span>=</span> <span>0x00000000</span>;
</span></span><span><span>	j <span>=</span> <span>*</span>current;
</span></span><span><span>
</span></span><span><span>	<span>for</span> (i <span>=</span> <span>0</span>; i <span>&lt;</span> <span>4</span>; i<span>++</span>, j<span>++</span>) {
</span></span><span><span>		<span>if</span> (j <span>&gt;=</span> databytes)
</span></span><span><span>			j <span>=</span> <span>0</span>;
</span></span><span><span>		temp <span>=</span> (temp <span>&lt;&lt;</span> <span>8</span>) <span>|</span> data[j];
</span></span><span><span>	}
</span></span><span><span>
</span></span><span><span>	<span>*</span>current <span>=</span> j;
</span></span><span><span>	<span>return</span> temp;
</span></span><span><span>}
</span></span></code></pre></div><p>Where <code>key_length</code> is passed as a <code>databytes</code> parameter. So this piece of code:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>if</span> (j <span>&gt;=</span> databytes)
</span></span><span><span>	j <span>=</span> <span>0</span>;
</span></span></code></pre></div><p>will make sure that no chars over the limit (72) will end up being processed.</p>
<p>Git blame shows that the <code>if (key_len &gt; 72)</code> line is 11 years old</p>
<p><img src="https://n0rdy.foo/images/screenshots/20250122-0001.webp" alt="image"></p>
<p>while the <code>if (j &gt;= databytes) j = 0;</code> is 28 years old (what were you busy with in 1997, ah?)</p>
<p><img src="https://n0rdy.foo/images/screenshots/20250122-0002.webp" alt="image"></p>
<p>So, it’s been a while since the API has been reiterated.</p>
<h2 id="some-thoughts-on-that">Some thoughts on that</h2>
<h3 id="disclaimer">Disclaimer</h3>
<p>Let me start with a short disclaimer: I have a huge respect for people who spend their free time and mental capacity on maintaining open-source projects. That’s a large amount of work, that is not paid, and, unfortunately, quite often not appreciated by the users of the tools. That’s why they have all the legal and ethical rights to build the project the way they see them. My opinions below are not targeted towards anyone in particular.</p>
<p>My initial goal was to create issues for each of the mentioned library, but I noticed that this behavior has been already reported to each of them:</p>
<ul>
<li><a href="https://github.com/spring-projects/spring-security/issues/15725" target="_blank">https://github.com/spring-projects/spring-security/issues/15725</a></li>
<li><a href="https://github.com/dcodeIO/bcrypt.js/issues/102" target="_blank">https://github.com/dcodeIO/bcrypt.js/issues/102</a></li>
<li><a href="https://github.com/pyca/bcrypt/issues/691" target="_blank">https://github.com/pyca/bcrypt/issues/691</a></li>
<li><a href="https://github.com/Keats/rust-bcrypt/issues/87" target="_blank">https://github.com/Keats/rust-bcrypt/issues/87</a></li>
</ul>
<p>Check the discussions and their outcomes by following those links.</p>
<h3 id="thoughts-and-lessons">Thoughts and lessons</h3>
<p>As a guy who spent a few years of my career on building tools and solutions to be used by other software engineers, I understand the frustration: you invested your time and effort into writing a clear documentation and guides, but a certain number of your users don’t bother checking it at all, and just use the tool the way they think it should be used. However, that’s the reality that I had to accept and started thinking about how can I make my tools handle those use cases. Here are a few principles I came up with in that process.</p>
<h4 id="dont-let-the-people-use-your-api-incorrectly">Don’t let the people use your API incorrectly</h4>
<p>In my opinion, from the API perspective, the approach when the tool silently cuts the part of the input and processes the remaining one only, it is an extremely poor design choice. What makes things worse is the fact that Bcrypt is used in the domain of security and sensitive data, and, as we can see, most of the tools mentioned above, use <code>password</code> as the name of the input parameter of the hashing method. <strong>The good design should explicitly reject the invalid input</strong> with the error / exception / any other mechanism the platform uses. So, basically, exactly what Go and Patrick’s Java library did. This way, incidents like Okta one would be impossible by design (btw, I’m not shifting the blame away from Okta, considering the domain they operate in).</p>
<p>It is ok, though, to offer the non-default unsafe option, that will let the users pass longer input that will be truncated if the user explicitly asks for that. A prefix/suffix like <code>unsafe</code>, <code>truncated</code>, etc. can be a good addition to the names of the method that expose these options.</p>
<h4 id="be-predictable">Be predictable</h4>
<p>If we take a step back from the Bcrypt case, imagine other examples, if such a pattern becomes common in the industry:</p>
<ul>
<li>We created a new user account on HBO to watch a new season of Rick and Morty, and there is a warning that the max size of the password should not exceed 18 chars. However, the password generator of your password manager tool uses 25 chars as a default length of the produced password. So, the password manager inserts that password while creating an account, but the server cuts the last 7 chars, hashes the rest, and saves the hash to the DB. How easy would it be for us to be able to log in to HBO next time and watch a new episode?</li>
<li>The tech lead of the new project configured a linter tool, and set the max line length as 100 chars. While performing a check, linter removes the chars above the defined limit, and informs that the check has passed. How useful would it be?</li>
</ul>
<p>A good API design should remember that when it comes to tech, nobody likes surprises.</p>
<h4 id="no-ego">No ego</h4>
<p>While following a few online discussions about the Bcrypt Okta incident, I noticed something else: while the majority of comments agreed that we should design APIs like these better, there were a few folks that took a very defensive stance and exposed their ego: “Read a paper before using anything!”, “APIs are only correcting the input after the stupid users!”, etc. Based on my experience, ego is a big enemy of engineering. And I wouldn’t be surprised if you have a story or two in that regard as well. So, yeah, let’s not bring our egos to our APIs.</p>
<h4 id="be-helpful">Be helpful</h4>
<p>Don’t get me wrong, I do understand the gist that the users should have some basic knowledge before using any tool. But let’s get back to the reality: how many different tools, programming languages, databases, protocols, frameworks, libraries, algorithms, data structures, clouds, AI models, etc. does a software engineer use per week these days? I tried to count for my use case, but stopped after the number had reached 30. Is it possible to know all of them deep? To know all the edge cases and limits? For some of them and to some degree is a reasonable ask, as well as having an expertise in 1 or 2, but definitely not all. The hard truth is that on average, the industry today requires the wide spectrum of knowledge over the deep one (check any job opening to verify that claim). Therefore, while designing the tools, why not to help our fellow colleagues? For example, if our tool accepts only positive numbers, let’s add <code>if num &lt; 1 -&gt; return error</code>  to our solution, and make the life simpler for somebody out there.</p>
<p>Especially, if the tool might be used in the security-sensitive context, where humans are usually the weak point in the thread modelling. The good API can help there.</p>
<h4 id="be-brave">Be brave</h4>
<p>It’s not so often that the API we design is something completely new to the world. Most likely, there are other solutions like ours out there. And the chances are that they’ve been already doing certain things the particular way. However, that doesn’t mean that we need to follow the same path. Kudos to the Go team and Patrick’s Java library for being brave to do things the different way as the industry does in the Bcrypt example. Let’s learn from them.</p>
<h4 id="reiterate">Reiterate</h4>
<p>Regardless of the original design choices and intentions, it’s never too late to reiterate on some of them if we see a need or have discovered new information. That’s, actually, a place where a lot of us fail due to different reasons, with some of them listed above.</p>
<h2 id="instead-of-a-conclusion">Instead of a conclusion</h2>
<p>The Okta incident exposed large security issues out there. Our test showed, even 3 months after the incident, the industry is still vulnerable to the same outcome, so the chances are that more to come. However, we, as software engineers, can learn from that, and apply these lessons while designing APIs to make them predictable and easier to use.</p>
<p>I hope that was useful, and triggered some thoughts. Thanks a lot for reading my post, and see you in the following ones, there are plenty of topics to discuss. Have fun! =)</p>

  
    <hr>

  
  <hr>


  
    

  
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google kills diversity hiring targets (124 pts)]]></title>
            <link>https://www.wsj.com/tech/google-kills-diversity-hiring-targets-04433d7c</link>
            <guid>42954598</guid>
            <pubDate>Wed, 05 Feb 2025 20:24:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/tech/google-kills-diversity-hiring-targets-04433d7c">https://www.wsj.com/tech/google-kills-diversity-hiring-targets-04433d7c</a>, See on <a href="https://news.ycombinator.com/item?id=42954598">Hacker News</a></p>
Couldn't get https://www.wsj.com/tech/google-kills-diversity-hiring-targets-04433d7c: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Cloudflare Is Blocking Pale Moon and other non-mainstream browsers (945 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=42953508</link>
            <guid>42953508</guid>
            <pubDate>Wed, 05 Feb 2025 19:08:12 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=42953508">Hacker News</a></p>
Couldn't get https://news.ycombinator.com/item?id=42953508: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Zig Guide (142 pts)]]></title>
            <link>https://zig.guide/</link>
            <guid>42953206</guid>
            <pubDate>Wed, 05 Feb 2025 18:45:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://zig.guide/">https://zig.guide/</a>, See on <a href="https://news.ycombinator.com/item?id=42953206">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><header></header>
<p><a href="https://ziglang.org/" target="_blank" rel="noopener noreferrer">Zig</a> is a general-purpose programming language and
toolchain for maintaining <strong>robust</strong>, <strong>optimal</strong>, and <strong>reusable</strong> software.</p>
<div><p><span><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>warning</p><p>The latest release of Zig is 0.13.0 and is currently unstable.</p></div>
<p>To follow this guide, we assume you have:</p>
<ul>
<li>Prior experience programming</li>
<li>Some understanding of low-level programming concepts</li>
</ul>
<p>Knowing a language like C, C++, Rust, Go, Pascal, or similar will help you follow
this guide. You must have an editor, terminal, and internet connection available
to you.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Sudoku Affair (137 pts)]]></title>
            <link>https://explaining.software/archive/the-sudoku-affair/</link>
            <guid>42953168</guid>
            <pubDate>Wed, 05 Feb 2025 18:43:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://explaining.software/archive/the-sudoku-affair/">https://explaining.software/archive/the-sudoku-affair/</a>, See on <a href="https://news.ycombinator.com/item?id=42953168">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
            <date>
                
                February 5, 2025
                
            </date>
            
            
            

            

            
            
            <p>In 2006, Ron Jeffries wrote a series of posts describing his attempts to build a <a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank">Sudoku</a> solver.  He <a href="https://ronjeffries.com/xprog/articles/oksudoku/" target="_blank">began</a> by wrapping a class around a simple datatype for the board — essentially a <code>List[Option[Int]]</code> — and after that, there isn't much to tell.  As Peter Seibel puts it:</p>
<blockquote>
<p>[H]e basically wandered around for the rest of his five blog postings fiddling with the representation, making it more “object oriented” and then fixing up the tests to work with the new representation and so on until eventually, it seems, he just got bored and gave up, having made only one minor stab at the problem of actually solving puzzles.<sup id="fnref:seibel1"><a href="#fn:seibel1">1</a></sup></p>
</blockquote>
<p>This story has, in some circles, become notorious.  There are two reasons for this.  The first is that Ron Jeffries is a leading proponent of a <a href="https://explaining.software/archive/the-death-of-the-architect/" target="_blank">post-design</a> approach to software development.  Good design, he asserts, is simply the result of keeping your code "properly-factored:"</p>
<blockquote>
<p>[Kent] Beck has those rules for properly-factored code: 1) runs all the tests, 2) contains no duplication, 3) expresses every idea you want to express, 4) minimal number of classes and methods. When you work with these rules, you pay attention only to micro-design matters.</p>
<p>When I used to watch Beck do this, I was sure he was really doing macro design "in his head" and just not talking about it, because you can see the design taking shape, but he never seems to be doing anything directed to the design. So I started trying it. What I experience is that I am never doing anything directed to macro design or architecture: just making small changes, removing duplication, improving the expressiveness of little patches of code. Yet the overall design of the system improves. I swear I'm not doing it.<sup id="fnref:jeffries1"><a href="#fn:jeffries1">2</a></sup></p>
</blockquote>
<p>The second reason is that, in the same week that Jeffries was wandering around, Peter Norvig released a <a href="https://norvig.com/sudoku.html" target="_blank">complete Sudoku solver</a>.  And in his first fifteen lines of code, he got further than Jeffries:</p>
<div><pre><span></span><code><span>def</span> <span>cross</span><span>(</span><span>A</span><span>,</span> <span>B</span><span>):</span>
    <span>"Cross product of elements in A and elements in B."</span>
    <span>return</span> <span>[</span><span>a</span><span>+</span><span>b</span> <span>for</span> <span>a</span> <span>in</span> <span>A</span> <span>for</span> <span>b</span> <span>in</span> <span>B</span><span>]</span>

<span>digits</span>   <span>=</span> <span>'123456789'</span>
<span>rows</span>     <span>=</span> <span>'ABCDEFGHI'</span>
<span>cols</span>     <span>=</span> <span>digits</span>
<span>squares</span>  <span>=</span> <span>cross</span><span>(</span><span>rows</span><span>,</span> <span>cols</span><span>)</span>
<span>unitlist</span> <span>=</span> <span>([</span><span>cross</span><span>(</span><span>rows</span><span>,</span> <span>c</span><span>)</span> <span>for</span> <span>c</span> <span>in</span> <span>cols</span><span>]</span> <span>+</span>
            <span>[</span><span>cross</span><span>(</span><span>r</span><span>,</span> <span>cols</span><span>)</span> <span>for</span> <span>r</span> <span>in</span> <span>rows</span><span>]</span> <span>+</span>
            <span>[</span><span>cross</span><span>(</span><span>rs</span><span>,</span> <span>cs</span><span>)</span> <span>for</span> <span>rs</span> <span>in</span> <span>(</span><span>'ABC'</span><span>,</span><span>'DEF'</span><span>,</span><span>'GHI'</span><span>)</span> <span>for</span> <span>cs</span> <span>in</span> <span>(</span><span>'123'</span><span>,</span><span>'456'</span><span>,</span><span>'789'</span><span>)])</span>
<span>units</span> <span>=</span> <span>dict</span><span>((</span><span>s</span><span>,</span> <span>[</span><span>u</span> <span>for</span> <span>u</span> <span>in</span> <span>unitlist</span> <span>if</span> <span>s</span> <span>in</span> <span>u</span><span>])</span> 
             <span>for</span> <span>s</span> <span>in</span> <span>squares</span><span>)</span>
<span>peers</span> <span>=</span> <span>dict</span><span>((</span><span>s</span><span>,</span> <span>set</span><span>(</span><span>sum</span><span>(</span><span>units</span><span>[</span><span>s</span><span>],[]))</span><span>-</span><span>set</span><span>([</span><span>s</span><span>]))</span>
             <span>for</span> <span>s</span> <span>in</span> <span>squares</span><span>)</span>
</code></pre></div>
<p>If you compare both implementations, Norvig's is notable for its clarity and directness.  Even more notable is his chosen datatype.  When Jeffries chose <code>List[Option[Int]]</code>, he was clearly mimicking how a Sudoku board was rendered on a page: there are a 81 cells, and some of them have numbers.  In Norvig's code, however, the Sudoku board is represented as a collection of possible moves: <code>Map[Coord, Set[Int]]</code>.  </p>
<p>An empty board is a collection of full sets; each cell can be assigned any integer in <code>{1, ..., 9}</code>.  When a cell is assigned a number, its set is reduced to a singleton, and that number is removed from the sets of all its <code>peers</code>.  If, as a result, a peer set is reduced to a singleton, this process repeats.</p>
<p>After that, the only thing left was a simple recursive search.  At each step, a move was randomly selected from the available options.  If that move emptied one of the sets, that line of search was abandoned.  And if all the sets were reduced to singletons, then our search was over.</p>
<p>While Norvig didn't employ any heuristics in his search, they'd be easy to add.  A common strategy in Sudoku is looking for <a href="https://www.learn-sudoku.com/naked-pairs.html" target="_blank">naked pairs</a>: if two peers have the same two candidate values, then simply assign one to each.  To employ this, all you'd need to do is replace the random selection with a function that looks for matching 2-sets.</p>
<p>And so Norvig's implementation was more than a toy solution.  It was a minimal, but extensible, example of <a href="https://en.wikipedia.org/wiki/Local_consistency" target="_blank">constraint propagation</a>.  It provided a foundation for exploring both the problem and the solution.</p>
<hr>
<h2>what it all means</h2>
<p>Norvig, for his part, didn't assign any of this much importance.  When interviewed by Seibel, he said the key difference was that Jeffries "didn't know how to solve the problem."</p>
<blockquote>
<p>I actually knew — from AI — that, well, there's this field of constraint propagation — I know how that works.  There's this field of recursive search — I know how that works.  And I could see, right from the start, you put these two together, and you could solve this Sudoku thing.  He didn't know that so he was sort of blundering in the dark even though all his code "worked" because he had all these test cases.<sup id="fnref:seibel2"><a href="#fn:seibel2">3</a></sup></p>
</blockquote>
<p>I agree, but would take it a little further.  Both Norvig and Jeffries are <strong>genre programmers</strong>; they have spent most of their career solving a specific kind of problem.  And that problem, inevitably, lends itself to a particular kind of solution.</p>
<p>Peter Norvig's genre is search.  He literally <a href="https://aima.cs.berkeley.edu/" target="_blank">wrote the book</a> on good old-fashioned AI, where every problem is reduced — for better or worse — to a search problem.  </p>
<p>Ron Jeffries' genre is, as best I can tell, the database application.  Like the rest of the Agile Manifesto co-authors, he came up in an era where every business was seeking to "computerize" its processes.  This led to a decade's worth of applications consisting of a database, a thin layer of business logic, and an even thinner frontend.  </p>
<p>There is, in these applications, a close relationship between the database schema and user interface.  Consider the scaffolding provided by the Rails framework: you describe an entity, and it generates the code necessary to view and change those entities.  This is why Jeffries chose the <code>List[Option[Int]]</code> representation; it mimicked how a Sudoku board is presented to its user.</p>
<p>This choice is not remarked upon.  It is, to Jeffries, simply the obvious place to start.  And I'd imagine that in his professional career, this intuition served him well.  But his intuition was developed, and applied, within his chosen genre.  Here, he was doing something new; a mystery novelist trying his hand at fantasy.  But in the end, it was just a bunch of elves and dwarves in a stately manor, waiting for the wizard to tell them whodunnit.</p>
<p>Jeffries, it should be noted, also assigns little importance to this episode.  After weathering fifteen years of online discourse, he wrote this:</p>
<blockquote>
<p>Did incremental design and development fail? I don’t think so. Certainly I was using an incremental approach, and certainly no product came out. Did the approach fail?</p>
<p>I don’t think so. I think I wasn’t having fun and just stopped working on the project.<sup id="fnref:jeffries2"><a href="#fn:jeffries2">4</a></sup></p>
</blockquote>
<p>This is belied, however, by the fact that he returned to Sudoku two years later, writing <a href="https://ronjeffries.com/categories/sudoku/" target="_blank">forty-five</a> new posts on the topic.  </p>
<p>By the end of the fifth post, Jeffries had a working Sudoku solver.  <em>But then he kept going.</em>  He continued to tinker with the solver for another two months and forty posts.  And in this prolonged epilogue, we can see the limits of his incremental approach to software design.</p>
<hr>
<h2>back in the saddle point</h2>
<p>Jeffries' second attempt at a Sudoku solver begins, predictably, with a <code>List[Option[Int]]</code> representation.  From there, he writes a function that calculates the possible values for an empty cell.  He writes a simple recursive search function, which always selects the first possible value for the first possible cell.  And with that, his solver was complete.</p>
<p>His <a href="https://ronjeffries.com/articles/-x024/-z00/4/#Summary" target="_blank">solution</a> is, from a design perspective, serviceable.  It's fewer than a hundred lines, but because of his chosen representation, much of that is spent on integer arithmetic:</p>
<div><pre><span></span><code><span>def</span> <span>used_numbers_in_sub_grid</span><span>(</span><span>self</span><span>,</span> <span>position</span><span>):</span>
  <span>first_index_in_row</span> <span>=</span> <span>position</span> <span>//</span> <span>self</span><span>.</span><span>line_size</span> <span>*</span> <span>self</span><span>.</span><span>line_size</span>
  <span>offset_in_row</span> <span>=</span> <span>position</span> <span>%</span> <span>9</span> <span>//</span> <span>3</span> <span>*</span> <span>3</span>
  <span>first_index_in_sub_grid</span> <span>=</span> <span>first_index_in_row</span> <span>//</span> <span>27</span> <span>*</span> <span>27</span> <span>+</span> <span>offset_in_row</span>
  <span>...</span>
  <span>for</span> <span>row</span> <span>in</span> <span>range</span><span>(</span><span>first_index_in_sub_grid</span><span>,</span> <span>first_index_in_sub_grid</span><span>+</span><span>27</span><span>,</span> <span>9</span><span>):</span>
    <span>for</span> <span>col</span> <span>in</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>3</span><span>):</span>
      <span>...</span>
</code></pre></div>
<p>We can contrast this with the (roughly) equivalent code in Norvig's implementation:</p>
<div><pre><span></span><code><span>[</span><span>cross</span><span>(</span><span>rs</span><span>,</span> <span>cs</span><span>)</span> <span>for</span> <span>rs</span> <span>in</span> <span>(</span><span>'ABC'</span><span>,</span><span>'DEF'</span><span>,</span><span>'GHI'</span><span>)</span> <span>for</span> <span>cs</span> <span>in</span> <span>(</span><span>'123'</span><span>,</span><span>'456'</span><span>,</span><span>'789'</span><span>)]</span>
</code></pre></div>
<p>The difference lies in how each cell is represented.  In Jeffries' code, each cell is an integer, representing its index in the <code>List</code>.  Norvig's code, on the other hand, represents each cell as a string describing its row and column.  As a result, he doesn't need to fuss with modulo operators; he can simply use string concatenation.</p>
<p>This, by itself, is not an indictment of Jeffries' approach.  His software design is incremental; what matters is the destination.  As he explains in his twenty-third post:</p>
<blockquote>
<p>Naturally, I try to make good design decisions, not bad ones, although often enough the decisions I make do not pan out. (Yes, I hear you saying that makes your case for coming up with a solid design early, but no, it doesn’t. It makes mine: I don’t know enough to make a better decision.) So I try to make small decisions, simple decisions, decisions that will be easy to change when, not if, a better idea comes along.<sup id="fnref:jeffries3"><a href="#fn:jeffries3">5</a></sup></p>
</blockquote>
<p>There is, unfortunately, little evidence of this in the preceding posts.  After demonstrating a working solver, Jeffries spends the next six posts trying to "simplify" it.  He tinkers a bit with the integer arithmetic, and then hides it away in a separate class.</p>
<p>Then, in the twelfth post, things get interesting.  While debugging his implementation, he generates an analogue of Norvig's representation: rather than an <code>Option[Int]</code>, each cell is a <code>Set[Int]</code> of possible values.  And in the thirteenth post, he arrives at the notion of constraint propagation:</p>
<blockquote>
<ol>
<li>Suppose the puzzle contains, not just the current solution state, but also, for each of the 81 cells, the available values for that cell. So when we do our <code>new_puzzle_trying</code> method, we’d</li>
<li>Create a new puzzle that copied all those values … then</li>
<li>Assign our guess … and then</li>
<li>Recompute the available values for the position’s components, which</li>
<li>Can be done either by removing the guess or recalculating, whichever is better.<sup id="fnref:jeffries4"><a href="#fn:jeffries4">6</a></sup></li>
</ol>
</blockquote>
<p>This is a pivotal point in Jeffries' design process.  He has solved the problem, understood the limitations of that solution, and imagined something entirely different.  It is, in other words, a chance to start over.</p>
<p>If Jeffries started with a different core representation, then it's likely his subsequent design decisions would also change.  The bookkeeping for constraint propagation might push him towards Norvig's relational approach to the rules of Sudoku; rather than continually recomputing the rows, columns, and boxes, he could simply have a map of each cell onto its <code>peers</code>.  He could distill every lesson of the previous posts, creating something simpler and faster.</p>
<p>But Jeffries isn't in the business of starting over.  He not only believes in incremental design, but in using the smallest possible increments.  In his posts, he regularly returns to GeePaw Hill's maxim of <a href="https://www.geepawhill.org/2021/09/29/many-more-much-smaller-steps-first-sketch/" target="_blank">"many more much smaller steps."</a>  He is only interested in designs that are reachable through a series of small, discrete steps:</p>
<blockquote>
<p>In most every article of the 5,000 articles here, at least the programming ones, I have intentionally done minimal design up front. My intention was to demonstrate what happens when I do that, expecting that small steps, tests, and refactoring would enable me to improve the design as needed.... In almost every situation, that has turned out to be the case. Incremental design, at least at the level I do it here, works well. And the techniques thereof allow us to improve any code that needs it.<sup id="fnref:jeffries5"><a href="#fn:jeffries5">7</a></sup></p>
</blockquote>
<p>This, again, is contradicted by the preceding posts.  His attempts to implement constraint propagation had unambiguously failed.  </p>
<p>He began in his seventeenth post, adding a <code>List[Set[Int]]</code> as a sidecar to his core representation.  But since the incremental updates were, as yet, unimplemented, it had to be recomputed after each move.  As a result, his solver became two orders of magnitude slower; his test puzzle, which once took 200ms to solve, now took a full 20 seconds.  </p>
<p>Jeffries seems largely unbothered by this.  He disables the slow test, and begins to look at search heuristics, under the theory that "moving towards more human approaches"<sup id="fnref:jeffries6"><a href="#fn:jeffries6">8</a></sup> might offset the performance loss.  He only returns to it ten days and eleven posts later, at which point he's clearly lost the thread.  Rather than try to implement the incremental updates, he simply makes it so that the <code>List[Set[Int]]</code> is lazily generated.  And since nothing is actually <em>using</em> this new data structure, this "fixes" the issue.  </p>
<p>In the twenty-odd posts that follow, Jeffries never returns to constraint propagation.  Instead, he putters around with search heuristics like naked pairs; something that, again, Norvig's approach makes fairly trivial.  And after the forty-fifth post, Jeffries seems to lose interest.  He has, apparently, reached his destination.</p>
<p>The resulting code is, again, serviceable.  It solves Sudoku puzzles, and has support for various "human approaches" to solving puzzles.  But the implementation<sup id="fnref:implementation"><a href="#fn:implementation">9</a></sup> has a diffuse, muddled quality.  In his <code>Puzzle</code> class, some methods refer to the <code>Set[Int]</code> associated with a cell as <code>possible_answers</code>, and others as <code>candidates</code>.  Likewise, most method names distinguish between <code>position</code> (index) and <code>cell</code> (value), but <code>Puzzle.unknown_cells</code> returns a list of indices.  And while <code>Puzzle</code> began as an immutable representation, somewhere along the way it grew a mutable <code>remove_naked_pair</code> method.</p>
<p>In a larger codebase, these sorts of inconsistencies are inevitable.  Despite our best efforts, entropy creeps in.  But Jeffries' solver is only a few hundred lines of code, and was refined for months on end.  We must treat every line as intentional.</p>
<p>When we say software is <a href="https://explaining.software/archive/glossary/#complexity" target="_blank">simple</a>, we mean it's easy to explain.  Well-designed structure often has a narrative structure; there is a natural order to its components, and each helps to explain the next.  We can see this in Norvig's implementation: it codifies the rules as a set of relationships, and then uses those relationships to solve the problem.</p>
<p>This doesn't happen by accident.  The developer needs to hold the entire <a href="https://explaining.software/archive/glossary/#structure" target="_blank">structure</a> in their head, and find a simple path that connects its constituent parts.  And if no such path can be found, they need to find a better structure. </p>
<p>Jeffries, however, does not believe in bigger pictures; his approach to software design is proudly myopic.  He prevents himself from seeing the forest by pressing his face against the trees.  And sometimes, as he moves from one tree to the next, he takes a moment to celebrate:</p>
<blockquote>
<p>As I refine and refine and refine, the design moves toward smaller objects, with single responsibilities and simple code. The design improves, bit by bit, almost by itself.<sup id="fnref:jeffries7"><a href="#fn:jeffries7">10</a></sup></p>
</blockquote>
<p>But it doesn't.  Software design is a deliberate process, and requires deliberate effort.  Anything less is just a shrug in the face of entropy.</p>

            
            

            
            
            <hr>
<p>This post is an excerpt from my (incomplete) book on software design.  For more about the book, see the <a href="https://explaining.software/" target="_blank">overview</a>.</p>
            
            

            




        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Andrej Karpathy: Deep Dive into LLMs Like ChatGPT [video] (475 pts)]]></title>
            <link>https://www.youtube.com/watch?v=7xTGNNLPyMI</link>
            <guid>42952960</guid>
            <pubDate>Wed, 05 Feb 2025 18:29:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=7xTGNNLPyMI">https://www.youtube.com/watch?v=7xTGNNLPyMI</a>, See on <a href="https://news.ycombinator.com/item?id=42952960">Hacker News</a></p>
Couldn't get https://www.youtube.com/watch?v=7xTGNNLPyMI: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Ingesting PDFs and Why Gemini 2.0 Changes Everything (1005 pts)]]></title>
            <link>https://www.sergey.fyi/articles/gemini-flash-2</link>
            <guid>42952605</guid>
            <pubDate>Wed, 05 Feb 2025 18:05:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.sergey.fyi/articles/gemini-flash-2">https://www.sergey.fyi/articles/gemini-flash-2</a>, See on <a href="https://news.ycombinator.com/item?id=42952605">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><header><div><div><p><a href="https://www.sergey.fyi/">Sergey Filimonov</a></p></div><div><nav><ul><li><a href="https://www.sergey.fyi/">About</a></li><li><a href="https://www.sergey.fyi/articles">Articles</a></li></ul></nav></div></div></header><main><div><article><header><time datetime="2025-01-15"><span></span><span>January 15, 2025</span></time></header></article></div><div><div><h2>Subscribe to the blog</h2><p>Stay connected and receive new blog posts in your inbox.</p><form action="https://formspree.io/f/mnnnrvar" method="POST"></form></div><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 39 33" width="39" height="33"><defs><clipPath id="ChatBubblesWithQuestionMark--a"><path d="M2 19.24a12.73 12.73 0 1 1 4.43 4.42l-5.9 1.97c-.4.13-.63-.09-.5-.5l1.98-5.9z" style="fill:#9AE6FC"></path></clipPath></defs><path d="M2 19.24a12.73 12.73 0 1 1 4.43 4.42l-5.9 1.97c-.4.13-.63-.09-.5-.5l1.98-5.9z" style="fill:#9AE6FC"></path><path d="M16.73 10.73a12.73 12.73 0 0 1 19.93 15.5l1.97 5.9c.13.41-.09.63-.5.5l-5.9-1.97a12.73 12.73 0 0 1-15.5-19.93zM25.5 23.4c-.93 0-1.68.8-1.68 1.8s.75 1.8 1.68 1.8c.93 0 1.69-.8 1.69-1.8s-.76-1.8-1.69-1.8zm-3.2-10.1A4.73 4.73 0 0 0 21 16.8h2.66c0-1.74.92-2.47 1.88-2.47.4-.07.83.06 1.13.37.3.3.45.75.4 1.19 0 1.15-.16 1.37-1.15 2.18a4.11 4.11 0 0 0-1.77 3.53h2.48c.14-.9.65-1.67 1.38-2.11A4 4 0 0 0 30 16.04c0-1.39-.96-4.03-4.38-4.03a4.13 4.13 0 0 0-3.33 1.29z" style="fill:#7973F7"></path><g clip-path="url(#ChatBubblesWithQuestionMark--a)"><path d="M16.73 10.73a12.73 12.73 0 0 1 19.93 15.5l1.97 5.9c.13.41-.09.63-.5.5l-5.9-1.97a12.73 12.73 0 0 1-15.5-19.93zM25.5 23.4c-.93 0-1.68.8-1.68 1.8s.75 1.8 1.68 1.8c.93 0 1.69-.8 1.69-1.8s-.76-1.8-1.69-1.8zm-3.2-10.1A4.73 4.73 0 0 0 21 16.8h2.66c0-1.74.92-2.47 1.88-2.47.4-.07.83.06 1.13.37.3.3.45.75.4 1.19 0 1.15-.16 1.37-1.15 2.18a4.11 4.11 0 0 0-1.77 3.53h2.48c.14-.9.65-1.67 1.38-2.11A4 4 0 0 0 30 16.04c0-1.39-.96-4.03-4.38-4.03a4.13 4.13 0 0 0-3.33 1.29z" style="fill:#1C47DC"></path></g></svg><h3>Have any feedback or questions?</h3><p>I’d love to hear from you.</p><a href="mailto:hello@sergey.fyi">Reach out<!-- --> <span>&gt;</span><span>→</span></a></div></div><!--$--><!--/$--></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Teslas turn toxic as sales crash in Europe and the UK (174 pts)]]></title>
            <link>https://arstechnica.com/cars/2025/02/tesla-sales-plummet-in-the-uk-france-and-germany/</link>
            <guid>42952088</guid>
            <pubDate>Wed, 05 Feb 2025 17:33:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/cars/2025/02/tesla-sales-plummet-in-the-uk-france-and-germany/">https://arstechnica.com/cars/2025/02/tesla-sales-plummet-in-the-uk-france-and-germany/</a>, See on <a href="https://news.ycombinator.com/item?id=42952088">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                      
                      
          <p>Early car sales data for January is starting to arrive from countries across the pond, and they paint an alarming picture for Tesla. Sales are crashing in France, Germany, and the UK—all affluent countries that are key markets for Tesla's electric vehicles. <a href="https://arstechnica.com/cars/2025/01/teslas-2024-financial-results-are-out-and-theyre-terrible/">Coming on the heels of a large financial miss</a>, it's just one more problem for the automaker.</p>
<p>Tesla sales dropped around 13 percent across Europe in 2024, but so far this year, the scale of the problem is far greater. <a href="https://www.bloomberg.com/news/articles/2025-02-03/tesla-sales-plunge-63-in-france-the-eu-s-second-biggest-ev-market">In France</a>, sales of new Teslas fell by 63 percent, while total car sales in the country fell by just 6 percent, with EV sales dropping just half a percent.</p>
<p>Germany was already looking like lost ground for Tesla—its 41 percent drop in 2024 accounted for most of Tesla's lost sales across Europe. That must make the 59 percent drop in German Tesla sales recorded during January even more painful on the profit and loss statements.</p>
<p>Across the Channel, the British auto industry <a href="https://www.smmt.co.uk/vehicle-data/car-registrations/">just released</a> its sales data for January. Here, Tesla sales fell less precipitously—just 12 percent. However, battery EV sales were 35 percent higher in the UK in January 2025 than in January 2024. The cake is growing, but Tesla is getting to eat less and less of it.</p>

          
                      
                  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DOGE employees ordered to stop using Slack (278 pts)]]></title>
            <link>https://www.404media.co/doge-employees-ordered-to-stop-using-slack-while-agency-transitions-to-a-records-system-not-subject-to-foia/</link>
            <guid>42951458</guid>
            <pubDate>Wed, 05 Feb 2025 16:58:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.404media.co/doge-employees-ordered-to-stop-using-slack-while-agency-transitions-to-a-records-system-not-subject-to-foia/">https://www.404media.co/doge-employees-ordered-to-stop-using-slack-while-agency-transitions-to-a-records-system-not-subject-to-foia/</a>, See on <a href="https://news.ycombinator.com/item?id=42951458">Hacker News</a></p>
Couldn't get https://www.404media.co/doge-employees-ordered-to-stop-using-slack-while-agency-transitions-to-a-records-system-not-subject-to-foia/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[US egg prices increased 22% in 2025 and 202% in 12 months (550 pts)]]></title>
            <link>https://tradingeconomics.com/commodity/eggs-us</link>
            <guid>42950929</guid>
            <pubDate>Wed, 05 Feb 2025 16:31:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tradingeconomics.com/commodity/eggs-us">https://tradingeconomics.com/commodity/eggs-us</a>, See on <a href="https://news.ycombinator.com/item?id=42950929">Hacker News</a></p>
Couldn't get https://tradingeconomics.com/commodity/eggs-us: Error: Request failed with status code 405]]></description>
        </item>
        <item>
            <title><![CDATA[20k federal workers take "buyout" so far, official says (265 pts)]]></title>
            <link>https://www.axios.com/2025/02/04/trump-buyout-federal-workers-20000</link>
            <guid>42950790</guid>
            <pubDate>Wed, 05 Feb 2025 16:23:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.axios.com/2025/02/04/trump-buyout-federal-workers-20000">https://www.axios.com/2025/02/04/trump-buyout-federal-workers-20000</a>, See on <a href="https://news.ycombinator.com/item?id=42950790">Hacker News</a></p>
Couldn't get https://www.axios.com/2025/02/04/trump-buyout-federal-workers-20000: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Gemini 2.0 is now available to everyone (509 pts)]]></title>
            <link>https://blog.google/technology/google-deepmind/gemini-model-updates-february-2025/</link>
            <guid>42950454</guid>
            <pubDate>Wed, 05 Feb 2025 16:03:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.google/technology/google-deepmind/gemini-model-updates-february-2025/">https://blog.google/technology/google-deepmind/gemini-model-updates-february-2025/</a>, See on <a href="https://news.ycombinator.com/item?id=42950454">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-reading-time="true" data-component="uni-article-body">

            
              




<google-read-aloud-player data-analytics-module="{
        &quot;event&quot;: &quot;module_impression&quot;,
        &quot;module_name&quot;: &quot;ai_audio&quot;,
        &quot;section_header&quot;: &quot;Gemini 2.0 is now available to everyone&quot;
    }" data-call-to-action-text="Listen to article" data-date-modified="2025-02-05T16:00:00.076691+00:00" data-progress-bar-style="half-wave" data-api-key="AIzaSyBLT6VkYe-x7sWLZI2Ep26-fNkBKgND-Ac" data-article-style="style9" data-tracking-ids="G-HGNBTNCHCQ,G-6NKTLKV14N" data-voice-list="en.ioh-pngnat:Cyan,en.usb-pngnat:Lime" data-layout-style="style1" data-highlight-mode="word-over-paragraph" data-highlight-text-color="#000000" data-highlight-word-background="#8AB4F8" data-highlight-paragraph-background="#D2E3FC" data-background="linear-gradient(180deg, #F1F3F4 0%, #F8F9FA 100%)" data-foreground-color="#202124" data-font="600 16px Google Sans, sans-serif" data-box-shadow="0px 1px 3px 1px rgba(60, 64, 67, 0.15)">
</google-read-aloud-player>



            

            
            
<!--article text-->

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;Gemini 2.0 is now available to everyone&quot;
         }"><p data-block-key="z3s12">In December, we <a href="https://blog.google/technology/google-deepmind/google-gemini-ai-update-december-2024/">kicked off</a> the agentic era by releasing an experimental version of Gemini 2.0 Flash — our highly efficient workhorse model for developers with low latency and enhanced performance. Earlier this year, we updated <a href="https://deepmind.google/technologies/gemini/flash-thinking/">2.0 Flash Thinking Experimental</a> in Google AI Studio, which improved its performance by combining Flash’s speed with the ability to reason through more complex problems.</p><p data-block-key="954o0">And last week, we <a href="https://blog.google/feed/gemini-app-model-update-january-2025">made an updated 2.0 Flash available to all users of the Gemini app</a> on desktop and mobile, helping everyone discover new ways to create, interact and collaborate with Gemini.</p><p data-block-key="eantc">Today, we’re making the updated Gemini 2.0 Flash generally available via the Gemini API in <a href="https://aistudio.google.com/prompts/new_chat?model=gemini-2.0-flash">Google AI Studio</a> and <a href="https://console.cloud.google.com/freetrial?redirectPath=/vertex-ai/studio">Vertex AI</a>. Developers can now build production applications with 2.0 Flash.</p><p data-block-key="8ag25">We’re also releasing an experimental version of Gemini 2.0 Pro, our best model yet for coding performance and complex prompts. It is available in <a href="https://aistudio.google.com/prompts/new_chat?model=gemini-2.0-pro-exp-02-05">Google AI Studio</a> and <a href="https://console.cloud.google.com/freetrial?redirectPath=/vertex-ai/studio">Vertex AI</a>, and in the <a href="https://gemini.google.com/">Gemini app</a> for Gemini Advanced users.</p><p data-block-key="a1fct">We’re releasing a new model, Gemini 2.0 Flash-Lite, our most cost-efficient model yet, in public preview in <a href="https://aistudio.google.com/prompts/new_chat?model=gemini-2.0-flash-lite-preview-02-05">Google AI Studio</a> and <a href="https://console.cloud.google.com/freetrial?redirectPath=/vertex-ai/studio">Vertex AI</a>.</p><p data-block-key="dqse3">Finally, <a href="http://blog.google/feed/gemini-app-experimental-models">2.0 Flash Thinking Experimental will be available to Gemini app</a> users in the model dropdown on desktop and mobile.</p><p data-block-key="f25rt">All of these models will feature multimodal input with text output on release, with more modalities ready for general availability in the coming months. More information, including specifics about pricing, can be found in the <a href="https://developers.googleblog.com/en/gemini-2-family-expands">Google for Developers blog</a>. Looking ahead, we’re working on more updates and improved capabilities for the Gemini 2.0 family of models.</p><h2 data-block-key="8lja">2.0 Flash: a new update for general availability</h2><p data-block-key="2qiq5"><a href="https://blog.google/technology/ai/google-gemini-update-flash-ai-assistant-io-2024/">First introduced</a> at I/O 2024, the Flash series of models is popular with developers as a powerful workhorse model, optimal for high-volume, high-frequency tasks at scale and highly capable of multimodal reasoning across vast amounts of information with a context window of 1 million tokens. We’ve been thrilled to see its <a href="https://developers.googleblog.com/en/gemini-20-family-expands/">reception</a> by the developer community.</p><p data-block-key="i50">2.0 Flash is now generally available to more people across our AI products, alongside improved performance in key benchmarks, with image generation and text-to-speech coming soon.</p><p data-block-key="4992c">Try Gemini 2.0 Flash in the <a href="https://gemini.google.com/">Gemini app</a> or the Gemini API in <a href="https://aistudio.google.com/prompts/new_chat?model=gemini-2.0-flash">Google AI Studio</a> and <a href="https://console.cloud.google.com/freetrial?redirectPath=/vertex-ai/studio">Vertex AI</a>. Pricing details can be found in the <a href="https://developers.googleblog.com/en/gemini-2-family-expands">Google for Developers blog</a>.</p><h2 data-block-key="6oj8q">2.0 Pro Experimental: our best model yet for coding performance and complex prompts</h2><p data-block-key="cu1vh">As we’ve continued to share early, experimental versions of Gemini 2.0 like <a href="https://blog.google/feed/gemini-exp-1206/">Gemini-Exp-1206</a>, we’ve gotten excellent feedback from developers about its strengths and best use cases, like coding.</p><p data-block-key="72dd1">Today, we’re releasing an experimental version of Gemini 2.0 Pro that responds to that feedback. It has the strongest coding performance and ability to handle complex prompts, with better understanding and reasoning of world knowledge, than any model we’ve released so far. It comes with our largest context window at 2 million tokens, which enables it to comprehensively analyze and understand vast amounts of information, as well as the ability to call tools like Google Search and code execution.</p></div>
  

  
    






<uni-image-full-width alignment="full" alt-text="This table compares the capabilities of different versions of Gemini, including 1.5 Flash, 1.5 Pro, 2.0 Flash-Lite, 2.0 Flash, and 2.0 Pro, across various benchmarks. It shows the performance of each version on tasks like general knowledge, code generation, reasoning, factuality, multilingual understanding, math, long-context understanding, image understanding, audio translation, and video analysis." external-image="" or-mp4-video-title="" or-mp4-video-url="" section-header="Gemini 2.0 is now available to everyone" custom-class="image-full-width--constrained-width uni-component-spacing">
  
  
    <p><img alt="This table compares the capabilities of different versions of Gemini, including 1.5 Flash, 1.5 Pro, 2.0 Flash-Lite, 2.0 Flash, and 2.0 Pro, across various benchmarks. It shows the performance of each version on tasks like general knowledge, code generation, reasoning, factuality, multilingual understanding, math, long-context understanding, image understanding, audio translation, and video analysis." src="https://storage.googleapis.com/gweb-uniblog-publish-prod/original_images/gemini_benchmarks_cropped_light1x.gif">
    </p>
  
</uni-image-full-width>


  

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;Gemini 2.0 is now available to everyone&quot;
         }"><p data-block-key="aura2">Gemini 2.0 Pro is available now as an experimental model to developers in <a href="https://aistudio.google.com/prompts/new_chat?model=gemini-2.0-pro-exp-02-05">Google AI Studio</a> and <a href="https://console.cloud.google.com/freetrial?redirectPath=/vertex-ai/studio">Vertex AI</a> and to Gemini Advanced users in the model drop-down on desktop and mobile.</p><h2 data-block-key="6t8ru">2.0 Flash-Lite: our most cost-efficient model yet</h2><p data-block-key="9vsil">We’ve gotten a lot of positive feedback on the price and speed of 1.5 Flash. We wanted to keep improving quality, while still maintaining cost and speed. So today, we’re introducing 2.0 Flash-Lite, a new model that has better quality than 1.5 Flash, at the same speed and cost. It outperforms 1.5 Flash on the majority of benchmarks.</p><p data-block-key="379op">Like 2.0 Flash, it has a 1 million token context window and multimodal input. For example, it can generate a relevant one-line caption for around 40,000 unique photos, costing less than a dollar in Google AI Studio’s paid tier.</p><p data-block-key="9q55c">Gemini 2.0 Flash-Lite is available in <a href="https://aistudio.google.com/prompts/new_chat?model=gemini-2.0-flash-lite-preview-02-05">Google AI Studio</a> and <a href="https://console.cloud.google.com/freetrial?redirectPath=/vertex-ai/studio">Vertex AI</a> in public preview.</p><h2 data-block-key="52kbd">Our responsibility and safety work</h2><p data-block-key="6h32p">As the Gemini model family becomes more capable, we’ll continue to invest in robust measures that enable safe and secure use. For example, our Gemini 2.0 lineup was built with new reinforcement learning techniques that use Gemini itself to critique its responses. This resulted in more accurate and targeted feedback and improved the model's ability to handle sensitive prompts, in turn.</p><p data-block-key="14a02">We’re also leveraging automated red teaming to assess safety and security risks, including those posed by risks from indirect prompt injection, a type of cybersecurity attack which involves attackers hiding malicious instructions in data that is likely to be retrieved by an AI system.</p></div>
  


            
            

            
              




            
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Servo in 2024: stats, features and donations (378 pts)]]></title>
            <link>https://servo.org/blog/2025/01/31/servo-in-2024/</link>
            <guid>42949390</guid>
            <pubDate>Wed, 05 Feb 2025 15:03:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://servo.org/blog/2025/01/31/servo-in-2024/">https://servo.org/blog/2025/01/31/servo-in-2024/</a>, See on <a href="https://news.ycombinator.com/item?id=42949390">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
      <p>Summary of Servo’s progress in 2024: some numbers, main highlights and plans for the future.</p>
      <p>Posted <span>2025-01-31</span></p>
    </div><div>
  <!--
    TIP: `eleventyConfig.setServerOptions({domDiff: false})` for this post!
    Otherwise the charts will break when reloading your changes.
-->
<p>Two years after the <a href="https://servo.org/blog/2023/01/16/servo-2023/">renewed activity</a> on the project we can confirm that Servo is fully back.</p>
<p>If we ignore the bots, in 2024 we’ve had <strong>129 unique contributors</strong> (+143% over 54 last year), <strong>landing 1,771 pull requests</strong> (+163% over 673), and that’s just in <a href="https://github.com/servo/servo">our main repo</a>!</p>
<p>Including bots, the total number of PRs merged goes up to <strong>2,674</strong> (+144% over 1094). From all this work, 26% of the PRs were made by Igalia, 40% by other contributors and the rest by the bots (34%). This shows how the Servo community has been growing and becoming more diverse with new actors participating actively in the project.</p>



<figure>
<table>
<thead>
  <tr>
    <th></th>
    <th>2018</th>
    <th>2019</th>
    <th>2020</th>
    <th>2021</th>
    <th>2022</th>
    <th>2023</th>
    <th>2024</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td><strong>Merged PRs</strong></td>
    <td>1,188</td>
    <td>986</td>
    <td>669</td>
    <td>118</td>
    <td>65</td>
    <td>776</td>
    <td>1,771</td>
  </tr>
  <tr>
    <td><strong>Unique contributors</strong></td>
    <td>142</td>
    <td>141</td>
    <td>87</td>
    <td>37</td>
    <td>20</td>
    <td>54</td>
    <td>129</td>
  </tr>
  <tr>
    <td><strong>Average unique contributors per month</strong></td>
    <td>27.33</td>
    <td>27.17</td>
    <td>14.75</td>
    <td>4.92</td>
    <td>2.83</td>
    <td>11.33</td>
    <td>26.33</td>
</tr>
</tbody>
</table>
</figure>

<p>Now let’s take a look to the data and chart above, which show the evolution since 2018 in number of merged PRs, unique contributors per year and average contributors per month (excluding bots). We can see <strong>the project is back to numbers of 2018 and 2019 when it was been developed in full speed</strong>!</p>
<p>It’s worth noting that Servo popularity keeps growing, with many folks realizing there has been new activity on the project last year, and we have more and more people interested in the project.</p>
<figure><a href="https://star-history.com/#servo/servo"><img src="https://servo.org/img/blog/2025-01-servo-github-stars.png" alt="Servo GitHub start history chart showing Servo not stopping going up since 2013, up to more than 25,000 today"></a>
  <figcaption>Servo GitHub stars haven't stopped growing, surpassing now 25K threshold.</figcaption>
</figure>
<p>During 2024 Servo has been present in <strong>8 events with 9 talks</strong>: <a href="https://fosdem.org/2024/schedule/event/fosdem-2024-2321-embedding-servo-in-rust-projects/">FOSDEM</a>, <a href="https://youtu.be/RdtlD_7JAs8">Open Source Summit North America</a>, <a href="https://servo.org/slides/2024-04-16-seattle-rust-user-group/">Seattle Rust user meetup</a>, <a href="https://www.youtube.com/watch?v=EA_1jxzR85M">GOSIM Europe</a>, <a href="https://www.youtube.com/watch?v=SamA5Oz-G5w">Global Software Technology Summit</a>, <a href="https://www.youtube.com/watch?v=NHa4LPpWRh8&amp;t=1351s">Linux Foundation Europe Member Summit</a>, <a href="https://www.youtube.com/watch?v=gpz088cxDcI">GOSIM</a> <a href="https://www.youtube.com/watch?v=1c9sHaEXQak">China</a>, <a href="https://www.youtube.com/watch?v=fp5n7CSvALA">Ubuntu Summit</a>.</p>
<p>If we focus on development there has been many things moving forward during the year. Servo main dependencies (SpiderMonkey, Stylo and WebRender) have been upgraded, the new layout engine has kept evolving adding support for floats, tables, flexbox, fonts, etc. By the end of 2024 <a href="https://staging.wpt.fyi/results/?sha=58c1148991&amp;label=master&amp;max-count=1&amp;product=servo"><strong>Servo passes 1,515,229 WPT subtests (79%)</strong></a>. Many other new features have been under active development: WebGPU, Shadow DOM, ReadableStream, WebXR, … Servo now supports two new platforms: Android and OpenHarmony. And we have got the first experiments of applications using Servo as a web engine (like <a href="https://servo.org/blog/2024/01/19/embedding-update/">Tauri</a>, <a href="https://github.com/DioxusLabs/blitz">Blitz</a>, <a href="https://github.com/KDABLabs/cxx-qt-servo-webview">QtWebView</a>, <a href="https://github.com/mcclure/cuervo/tree/unstable_traversal_experiment">Cuervo</a>, <a href="https://github.com/versotile-org/verso/">Verso</a> and <a href="https://github.com/moto-browser/moto">Moto</a>).</p>
<p>In 2024 we have <strong>raised 33,632.64 USD</strong> with <a href="https://servo.org/sponsorship/">donations via Open Collective and GitHub Sponsors</a> from <strong>500 different people and organizations</strong>. Thank you all for supporting us!</p>
<p>With this money we have now 3 servers that provides self-hosted runners for Linux, macOS, and Windows reducing our build times <strong>from over an our to under 30 minutes</strong>.</p>
<p>Talking about the future, the Servo TSC has been discussing the <a href="https://github.com/servo/servo/wiki/Roadmap"><strong>roadmap for 2025</strong></a> which has been updated on the Servo’s wiki. We have many plans to keep Servo thriving with new features and improvements. Let’s hope for a great 2025!</p>

  
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Avoiding outrage fatigue while staying informed (545 pts)]]></title>
            <link>https://www.scientificamerican.com/podcast/episode/how-to-avoid-outrage-fatigue-and-tune-in-without-burning-out/</link>
            <guid>42949277</guid>
            <pubDate>Wed, 05 Feb 2025 14:55:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.scientificamerican.com/podcast/episode/how-to-avoid-outrage-fatigue-and-tune-in-without-burning-out/">https://www.scientificamerican.com/podcast/episode/how-to-avoid-outrage-fatigue-and-tune-in-without-burning-out/</a>, See on <a href="https://news.ycombinator.com/item?id=42949277">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p data-block="sciam/paragraph">[CLIP: Theme music]</p><p data-block="sciam/paragraph"><b>Rachel Feltman:</b> For <i>Scientific American</i>’s <i>Science Quickly</i>, this is Rachel Feltman.</p><p data-block="sciam/paragraph">No matter what you believe, I’m willing to bet you’ve been feeling a lot of outrage lately. To me personally, it feels unavoidable: I can’t look down at my phone or glance up at a TV without seeing <i>something</i> that makes me upset. And that’s really exhausting. But when outrage is everywhere, what can we do to keep it from getting to us?</p><hr><h2>On supporting science journalism</h2><p>If you're enjoying this article, consider supporting our award-winning journalism by<!-- --> <a href="https://www.scientificamerican.com/getsciam/">subscribing</a>. By purchasing a subscription you are helping to ensure the future of impactful stories about the discoveries and ideas shaping our world today.</p><hr><p data-block="sciam/paragraph">Here to talk to us about fighting so-called outrage fatigue is Tanya Lewis, a senior editor covering health and medicine at <i>Scientific American</i>.</p><p data-block="sciam/paragraph">Tanya, thanks for joining us today.</p><p data-block="sciam/paragraph"><b>Tanya Lewis:</b> Thanks so much for having me.</p><p data-block="sciam/paragraph"><b>Feltman:</b> So you recently wrote about this phenomenon called “outrage fatigue.” Could you tell us what that is?</p><p data-block="sciam/paragraph"><b>Lewis:</b> Sure, so outrage fatigue is kind of an informal concept, which basically refers to repeatedly experiencing perceived moral transgressions and feeling fatigued by them. So what that basically means is just, you know, you see something, you’re outraged by it, and over time you just become kind of numb to it.</p><p data-block="sciam/paragraph"><b>Feltman:</b> Sounds relevant to [laughs], to many of our lives.</p><p data-block="sciam/paragraph"><b>Lewis:</b> Yes [laughs].</p><p data-block="sciam/paragraph"><b>Feltman:</b> What do researchers know about outrage in general?</p><p data-block="sciam/paragraph"><b>Lewis:</b> So outrage fatigue itself hasn’t been that well-studied, but outrage in general has been studied, and people have found that, actually, outrage can be useful. It actually can help you identify a problem and react to it. But it can also be harmful if you’re experiencing it all the time and become overwhelmed by it.</p><p data-block="sciam/paragraph">There’s actually a recent study by William Brady, an assistant professor of management and organizations at Northwestern University’s Kellogg School of Management. He and his colleagues found that outrage actually helps misinformation spread more widely, especially online on social media. So the upshot of this is that when you have too much outrage, people can actually withdraw from public spaces or virtual places like social media.</p><p data-block="sciam/paragraph"><b>Feltman:</b> Yeah, and what is it about outrage that helps misinformation spread?</p><p data-block="sciam/paragraph"><b>Lewis:</b> So I think part of it is the fact that it’s more engaging. It, you know, activates your emotions, and so people are more primed to respond to that. As we all know, if you’ve ever spent time on social media and social networks, we always see the most kind of inflammatory content because that’s what gets retweets or clicks and the algorithms are amplifying that.</p><p data-block="sciam/paragraph"><b>Feltman:</b> Right, and more broadly, you know, what is it about the times we’re living in that makes outrage so hard to avoid?</p><p data-block="sciam/paragraph"><b>Lewis:</b> So we’re living in a particularly polarized time, which I think is not a surprise to anybody. If you have been online lately, on Twitter or Facebook or TikTok or any other social media, you’ve probably seen people yelling about something or other. And this just really has been accelerating, I guess, in the last few years because of our political polarization and other world events.</p><p data-block="sciam/paragraph">As I was saying earlier some amount of outrage is actually normal and healthy, but studies have shown that the majority of outrage posts on social media are actually driven by a small minority of users who are very—you know, they feel very strongly about something, and that can actually turn other people off of participating in the conversation.</p><p data-block="sciam/paragraph"><b>Feltman:</b> Yeah, so social media is a big part of this, you know, both amplifying it and giving a platform for people who are feeling this outrage. Other than just making us feel bad, what does outrage fatigue do to a person?</p><p data-block="sciam/paragraph"><b>Lewis:</b> So the real danger is that we become apathetic, and if we’re exposed to something all the time—whether it’s through social media or even traditional news sources like cable TV—if it’s constantly telling us to be outraged, eventually we’re gonna be less responsive and we’re gonna kind of pull back. So instead of, like, channeling that outrage into something useful, many people sort of feel exhausted and burned out, and they just don’t want to take action at all.</p><p data-block="sciam/paragraph">And this is actually a problem because politicians can take advantage of that and sort of manipulate people. As we’ve seen over the last few decades some of the big social issues like abortion, gay rights, critical race theory, these have all been used as kind of wedge issues to convince people to vote in ways that might be against their own self-interest because they’re just so outraged about this one particular issue.</p><p data-block="sciam/paragraph"><b>Feltman:</b> Yeah, so definitely worth avoiding. What can we do to accomplish that?</p><p data-block="sciam/paragraph"><b>Lewis:</b> Right. That was my question, too. You know, a couple of things: one is that we can just sort of limit how much media we consume. As somebody who is a member of the media, you know, this might sound strange, but I think if you’re feeling constantly overwhelmed and outraged by something, if you consume less of it, that’s probably a good thing.</p><p data-block="sciam/paragraph">But it doesn’t mean you should totally sort of ignore what’s happening. When I talked to William Brady, he said that, you know, one of the ways you can kind of have an impact without just being overwhelmed is to get involved in local politics or local issues, you know, in your community because you can actually have a much greater impact on a local level, usually, than a national level anyway. So rather than just, like, retweeting that most outrageous post that you see, you know, it’s better to get involved with real people and kind of have a dialogue with them.</p><p data-block="sciam/paragraph"><b>Feltman:</b> Yeah, find some mutual aid groups ...</p><p data-block="sciam/paragraph"><b>Lewis:</b> Exactly.</p><p data-block="sciam/paragraph"><b>Feltman:</b> Find stuff you can actually do when you’re not doomscrolling and hopefully [laughs] ...</p><p data-block="sciam/paragraph"><b>Lewis:</b> Yes [laughs].</p><p data-block="sciam/paragraph"><b>Feltman:</b> Do less of the doomscrolling, too. And did he have any advice for sort of recovering from outrage burnout once it’s hit you?</p><p data-block="sciam/paragraph"><b>Lewis:</b> Gosh, that is a good question. You know, it’s not something I specifically asked Dr. Brady about, but I think, just from my own experience, like I said, you know, pulling back a little bit from some of the media consumption and, you know, just maybe limiting yourself to checking the news a couple times a day instead of, like, every hour or, you know, getting those alerts on your phone all the time. If someone is posting stuff that makes you furious all the time, maybe don’t follow them [laughs]. And, yeah, get outside, get in nature—you know, the usual things that can kind of reset your brain and make you feel, you know, more calm.</p><p data-block="sciam/paragraph">[CLIP: Theme music]</p><p data-block="sciam/paragraph"><b>Feltman:</b> Yeah, maybe easier said than done, but really good advice. Thanks so much for coming on to chat with us, Tanya.</p><p data-block="sciam/paragraph"><b>Lewis:</b> Thanks so much. It’s always great being on here.</p><p data-block="sciam/paragraph"><b>Feltman:</b> That’s all for today’s episode. If you want to learn more about outrage fatigue, you can read Tanya’s <a href="https://www.scientificamerican.com/article/outrage-fatigue-is-real-heres-why-we-feel-it-and-how-to-cope/">full interview with Dr. Brady</a> on ScientificAmerican.com. We’ll be back on Friday to unpack how President Trump’s new administration is impacting health and science.</p><p data-block="sciam/paragraph"><i>Science Quickly</i> is produced by me, Rachel Feltman, along with Fonda Mwangi, Kelso Harper, Madison Goldberg and Jeff DelViscio. Today’s episode was reported and co-hosted by Tanya Lewis. Shayna Posses and Aaron Shattuck fact-check our show. Our theme music was composed by Dominic Smith. Subscribe to <i>Scientific American</i> for more up-to-date and in-depth science news.</p><p data-block="sciam/paragraph">For <i>Scientific American</i>, this is Rachel Feltman. See you next time!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I'm Done with Ubuntu (155 pts)]]></title>
            <link>https://ounapuu.ee/posts/2025/02/05/done-with-ubuntu/</link>
            <guid>42949222</guid>
            <pubDate>Wed, 05 Feb 2025 14:51:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ounapuu.ee/posts/2025/02/05/done-with-ubuntu/">https://ounapuu.ee/posts/2025/02/05/done-with-ubuntu/</a>, See on <a href="https://news.ycombinator.com/item?id=42949222">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      <p>I liked Ubuntu. For a very long time, it was the sensible default option.
Around 2016, I used the Ubuntu GNOME flavor, and after they ditched the Unity desktop environment, GNOME became the
default
option.</p>
<p>I was really happy with it, both for work and personal computing needs.</p>
<p><a href="https://www.id.ee/en/article/install-id-software/">Estonian ID card software</a> was also officially supported on Ubuntu,
which made Ubuntu a good choice for family members.</p>
<p>But then something changed.</p>
<h3 id="upgrades-suck">Upgrades suck</h3>
<p>Like many Ubuntu users, I stuck to the long-term support releases and upgraded every two years to the next major
version. There was just one tiny little issue: every upgrade broke <em>something.</em></p>
<p>Usually it was a relatively minor issue, with some icons, fonts or themes being a bit funny. Sometimes things went
completely wrong.</p>
<p>The worst upgrade was the one I did on my mothers’ laptop. During the upgrade process from Ubuntu 20.04 to 22.04,
everything blew up spectacularly. The UI froze, the machine was completely unresponsive. After a 30-minute wait and a
forced restart later, the installation was absolutely <em><strong>fucked.</strong></em> In frustration, I ended up installing <em><strong>Windows</strong></em>
so
that I don’t have to support Ubuntu.</p>
<p>Another family member, another upgrade. This is one that they did themselves on Lubuntu 18.04, and they upgraded to the
latest version. The result: Firefox shortcuts stopped working, the status bar contained duplicate icons, and random
errors popped up after logging
in. <a href="https://ounapuu.ee/posts/2024/10/14/fedora-starter-pack/#-specific-to-estonia-id-card-support">After making sure that ID card software works on Fedora 40,</a>
I installed that instead. All they need is a working browser, and that’s too difficult for Ubuntu to handle.</p>
<h3 id="snaps-ruined-ubuntu">Snaps ruined Ubuntu</h3>
<p><a href="https://ubuntu.com/core/services/guide/snaps-intro">Snaps</a>. I hate them.</p>
<p>They sound great in theory, but the poor implementation and heavy-handed push by Canonical has been a mess.</p>
<p>Snaps auto-update by default. Great for security<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup>, but horrible for users who want to control what their <em>personal</em>
computer is doing.</p>
<p>Snaps get forced upon users as more and more system components are forcibly switched from Debian-based packages to
Snaps, which breaks compatibility, functionality and introduces a lot of new issues. You can upgrade your Ubuntu
installation and then discover that your browser is now contained within a Snap, the desktop shortcut for it doesn’t
work and your government ID card does not work for logging in to your bank any longer.</p>
<p>Snaps also destroy productivity. A colleague was struggling to get any work done because the desktop environment on
their Ubuntu installation was flashing certain UI elements, being unresponsive and blocking them from doing any work.
Apparently the whole GNOME desktop environment is a Snap now, and that lead to issues.</p>
<p>The fix was <em>super easy, barely an inconvenience:</em></p>
<ul>
<li>roll back to the previous version of the GNOME snap</li>
<li>restart
<ul>
<li>still broken</li>
</ul>
</li>
<li>update to the latest version again</li>
<li>restart
<ul>
<li>still broken</li>
</ul>
</li>
<li>restart again
<ul>
<li>it is fixed now</li>
</ul>
</li>
</ul>
<p>What was the issue?</p>
<p>Absolutely no clue, but a days’ worth of developers’ productivity was completely wasted.</p>
<p>Some of these issues have <em>probably</em> been fixed by now, but if I executed migration projects at my day job with a
similar track record, I would be fired.<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup></p>
<h3 id="snaps-done-right-flatpak">Snaps done right: Flatpak</h3>
<p>Snaps can be implemented in a way that doesn’t suck for end users. <a href="https://flatpak.org/">It’s called a Flatpak.</a></p>
<p>They work reasonably well, you can update them whenever you want and they are <em><strong>optional</strong></em>. Your Firefox installation
won’t suddenly turn into a Flatpak overnight.</p>
<p>On the <a href="https://ounapuu.ee/posts/2024/06/02/steam-deck/">Steam Deck,</a> Flatpaks are the main distribution method for user-installed apps
and I don’t mind it at all. The
only issue is the software selection, not every app is available as a Flatpak just yet.</p>
<h3 id="consider-fedora">Consider Fedora</h3>
<p>Fedora works fine.</p>
<p><a href="https://ounapuu.ee/posts/2024/10/14/fedora-starter-pack/">It’s not perfect,</a> but I like it.</p>
<p>At this point I’ve used it for longer than Ubuntu
and <a href="https://www.redhat.com/en/blog/message-red-hat-associates-today">unless IBM ruins it for all of us,</a> I think it
will be a perfectly <a href="https://en.wiktionary.org/wiki/cromulent">cromulent</a> distro go get work done on.</p>
<p>Hopefully it’s not too late for Canonical to reconsider their approach to building a Linux distro.</p>


    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why Is Warner Brothers Discovery Dumping Old Movies on YouTube? (453 pts)]]></title>
            <link>https://tedium.co/2025/02/05/warner-bros-youtube-full-movie-releases/</link>
            <guid>42949181</guid>
            <pubDate>Wed, 05 Feb 2025 14:47:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tedium.co/2025/02/05/warner-bros-youtube-full-movie-releases/">https://tedium.co/2025/02/05/warner-bros-youtube-full-movie-releases/</a>, See on <a href="https://news.ycombinator.com/item?id=42949181">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                
                    <div>
<p><strong>In recent years, we’ve complained a lot</strong> about Warner Bros. Discovery, in part because their decision-making has seemed <a href="https://tedium.co/2022/08/03/10-unreleased-completed-movies/">almost toxic</a> and <a href="https://tedium.co/2023/11/14/warner-bros-discovery-coyote-vs-acme-film-shelving/">damaging to the creative community</a>. A movie studio that literally makes movies and doesn’t release them? That seems like a bizarre state of affairs, and under David Zaslav, they’ve done it multiple times.</p>
<p>But the studio has recently done something that I’m really just kind of in awe about. Over the last month, across five different YouTube channels, the studio has released more than 30 full movies. On YouTube. For free. Without any sort of gating.</p>
<p><a href="https://www.youtube.com/playlist?list=PL7Eup7JXScZyvRftA2Q5hv69XiegDm6tQ">Much of the collection is here</a>, but it doesn’t appear to even be a complete accounting of what the studio has released on the service. They keep adding movies, too. In the three or four days since I first spotted it, they’ve added at least two or three additional films.</p>
<p>And to be clear, this is not the <a href="https://www.youtube.com/feed/storefront">YouTube Movies</a> service, which is fully licensed and mainly represents a pretty good add-on perk of YouTube Premium subscriptions. Instead, WBD (without notice or promotion) is dropping full-on films that it spent millions of dollars making on its own channels, in a way that makes it feels like it’s saying that the films are commercially spent.</p>
<p>It is embracing a service where a popular type of video is basically watching someone else’s video and commenting on top of it. In some cases, it is likely that those reaction videos will get more views than these movies.</p>




<p>In terms of the quality, most of the films are kind of in the realm where nostalgia hasn’t caught up with them. Some of them are quite good—most notably <em>Waiting for Guffman</em>, <em>Michael Collins</em>, and <em>Crossing Delancey</em>. And some have sheer cult appeal—<a href="https://www.youtube.com/watch?v=LhTS_RSQxw4">the 1986 Talking Heads film <em>True Stories</em></a> feels like a surprising choice to show up here, given that David Byrne is still firmly in the mainstream nearly 40 years after the film’s release.</p>

<p>But there are a lot of stinkers and obscurities. One such film on the list: <em>The 11th Hour</em>, an environmental documentary that was created by Leonardo DiCaprio in 2007 but was ultimately overshadowed by the similar <em>An Inconvenient Truth</em>, released a year prior. The 2008 film <em>Chaos Theory</em>, starring Ryan Reynolds, shows the film star at the nadir of his commercial power. And then there’s the infamous 2000 New Line Cinema release <a href="https://www.youtube.com/watch?v=DDLIGVdJDuQ"><em>Dungeons &amp; Dragons</em></a>, which was basically forgotten by all but the die-hards before it showed up on this list.</p>
<p>(It is probably a matter of minutes until <em>Town &amp; Country</em>, another infamous flop distributed by New Line during the same period, appears in this playlist.)</p>

<p>At least one film on the list was a bonafide hit upon its initial release—<a href="https://www.youtube.com/watch?v=9J8XaQv9A0E">1977’s George Burns comedy <em>Oh, God!</em></a>, which had a $51 million box office run, equivalent to nearly $265 million in 2024 money. But most of the films on this list are more like <em>The Adventures Of Pluto Nash</em>, an infamous 2002 Eddie Murphy dud that came during a period in which Murphy was largely working on poorly reviewed family fare. (If not for <em>Shrek</em>, that entire period would have been a critical bust for Murphy. However, only the adult-oriented <em>Pluto Nash</em> lost money.)</p></div>

<div>
<p>But what stands out more than anything else is that Warner Bros. released them this way, rather than in a format that limits access—something that Warner could easily do, thanks to the fact that it owns the streaming service Max, as well as Turner Classic Movies, a television channel that allows cable customers to stream. (The aforementioned <em>Oh, God!</em> appears on TCM’s website.)</p>

<p>So, what’s going on here? If I was going to speculate, my guess is that Warner has kind of put itself in this awkward place where it has failed to give a home to some of its less-heralded content on streaming services. And in some cases, it kind of feels like a shame. Example: <a href="https://www.youtube.com/watch?v=jAyg_ENvHzc"><em>The Science of Sleep</em></a>, a 2006 Michel Gondry film that received good reviews and made a small profit at the box office, but simply didn’t reach the critical heights of Gondry’s prior release, <em>Eternal Sunshine of the Spotless Mind</em>. It’s not that this is a bad film—it seems to be, more than anything else, that it is kind of a forgotten one, poorly presented by the studio that paid millions of dollars to make and distribute it.</p>
<p>And honestly, in a lot of ways, that shows why this decision seems so bewildering. By releasing a handful of hidden gems next to some of the worst films it ever released, WBD is doing a disservice to its creative teams of past and present. It is essentially telling its catalog artists that it may simply drop an old film on a service that most people don’t even think of as a streamer.</p>
<p>Warner Bros. is not lacking for proper channels to release this content in full. So why post on YouTube in an DRM-free, region-free way? (For sake of confirming the films didn’t have DRM, I opened up yt-dlp frontend <a href="https://github.com/NickvisionApps/Parabolic/tree/main">Parabolic</a> and had it download two films currently on YouTube: <em>Who Framed Roger Rabbit</em>, which is on YouTube Movies, and <em>Dungeons &amp; Dragons</em>, which isn’t. The former was blocked from working; the latter downloaded and played easily in VLC.) The message seems to be, “nobody wants this stuff,” which is a weird thing for an entertainment conglomerate to say about its own archives. Even if these films make money through ad revenue, it likely won’t add up to much in residuals compared to a distribution deal.</p>
<p>After all, if you can just watch these films for free here, why would you buy these from Amazon or somewhere else? Well, presumably you could get the films in better quality on Blu-ray. And they might come with commentary tracks, in case you want to hear about the decisions that led to <em>Pluto Nash</em> being made. But there likely aren’t a lot of die-hard fans of most of these movies; they probably don’t need more than the videos themselves.</p>
<p>For years, the line we heard from movie studios was that these movies needed to be protected with strict digital rights management to prevent them from appearing in the wrong hands. This works against that.</p>
<p>But at the same time, it’s perhaps the way things are going. <a href="https://tedium.co/2025/01/17/ernie-kovacs-lost-episode-resurfaced/">As I noted in my recent piece on Ernie Kovacs</a>, YouTube is increasingly seen as the best option for releasing content made before the 1980s, as Netflix and other services seem to be favoring more recent works. Perhaps this signifies that it’s an issue for even the big studios.</p>
<p>All that said: I’m not exactly sure what message WBD is sending here by offloading these seemingly random movies in such a bewildering way. But maybe it’s a sign that, once the long tail starts thinning out, the streaming revolution isn’t all it’s cracked up to be.</p>

<p>Anyway, <a href="https://www.youtube.com/watch?v=TE0bQ4Fjbms"><em>Waiting for Guffman</em></a> still holds up, and you can watch it on YouTube, for free.</p></div><div>
<h5>Bargain-Bin Links</h5>
<p><strong>It might have been easy to miss</strong> amid all the chaos of the week, but there’s a NSFW porn app on the iOS App Store in Europe, thanks to the European Union’s alternative app store rules. <a href="https://www.theverge.com/news/604937/iphone-ios-porn-app-hot-tub-altstore-pal-eu">Apple’s very much not happy about it</a>, but they don’t have a say.</p>
<p><strong>Mark Zuckerberg has <a href="https://www.theguardian.com/film/2025/feb/04/jesse-eisenberg-no-longer-wants-to-be-associated-with-mark-zuckerberg">alienated</a> Jesse Eisenberg.</strong> For those hoping for a sequel to <em>The Social Network</em>, we may not be getting it.</p>

<p><strong>We lost a great one this week.</strong> Don Hui, a YouTuber whose channel <a href="https://www.youtube.com/channel/UCrjKdwxaQMSV_NDywgKXVmw">Novaspirit Tech</a> highlighted a broad passion for homelabbing and the less-talked-about corners of tech, passed away after a yearlong battle with cancer. Jeff Geerling, a friend of Tedium, <a href="https://www.youtube.com/watch?v=fkGqUwv2fXs">announced the news</a> on his channel with a tribute. Loved his stuff, he probably got me passionate about Docker. Above is one of my favorite videos of his—a clip of him <a href="https://www.youtube.com/watch?v=F8eT8bX-UCw">installing Windows 11 on a OnePlus 6</a>.</p>
<p>--</p>
<p><strong>Find this one an interesting read?</strong> <a href="https://old.tedium.co/2025/02/05/warner-bros-youtube-full-movie-releases/">Share it with a pal</a>! And don’t be afraid to give a forgotten old movie a chance, even if it’s an infamous flop.</p></div>

                
                
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[F-Droid Awarded Open Technology Fund's FOSS Sustainability Grant (228 pts)]]></title>
            <link>https://f-droid.org/2025/02/05/f-droid-awarded-otf-grant.html</link>
            <guid>42948373</guid>
            <pubDate>Wed, 05 Feb 2025 13:44:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://f-droid.org/2025/02/05/f-droid-awarded-otf-grant.html">https://f-droid.org/2025/02/05/f-droid-awarded-otf-grant.html</a>, See on <a href="https://news.ycombinator.com/item?id=42948373">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <p>We are excited to announce that F-Droid has been awarded $396,044 from the
<a href="https://www.opentech.fund/funds/free-and-open-source-software-sustainability-fund/">Open Technology Fund’s FOSS Sustainability
Fund</a>.
This grant is specifically designed to support free and open-source software
(FOSS) projects in addressing long-term sustainability challenges, and we
are honored to be among the recipients.</p>

<p>As F-Droid’s user base and community of volunteer contributors has grown, so
have the challenges of maintaining and expanding the project. While our
lightweight, resilient architecture has scaled to meet increasing demand, we
now face critical issues that dedicated and consistent funding will help us
address so we can continue to bring FOSS-based, privacy focused apps to
people around the world, even in places with limited internet access. This
OTF funding will help us:</p>

<ul>
  <li>
    <p><strong>Refactor and integrate code with other maintained projects</strong> to reduce
technical debt and improve efficiency.</p>
  </li>
  <li>
    <p><strong>Establish clear policies and legal strategies</strong> for handling government
take-down and censorship requests.</p>
  </li>
  <li>
    <p><strong>Improve our localization workflows</strong> to make translations easier to
manage and maintain.</p>
  </li>
  <li>
    <p><strong>Strengthen our donation infrastructure</strong> so we can sustain F-Droid
long-term.</p>
  </li>
  <li>
    <p><strong>Enhance our hosting and infrastructure</strong> to increase flexibility, reduce
costs, and ensure reliability.</p>
  </li>
</ul>

<p>This grant represents a major step forward in ensuring F-Droid’s long-term
sustainability. We look forward to sharing progress as we work on these
improvements.</p>

<p>You can follow our progress here:</p>

<ul>
  <li>
    <p>Related
<a href="https://gitlab.com/groups/fdroid/-/issues/?sort=updated_desc&amp;state=all&amp;label_name%5B%5D=OTF%20Sustainability">issues</a></p>
  </li>
  <li>
    <p>Related <a href="https://gitlab.com/groups/fdroid/-/merge_requests/?sort=updated_desc&amp;state=all&amp;label_name%5B%5D=OTF%20Sustainability">merge
requests</a></p>
  </li>
</ul>

<p>A big thank you goes to the Open Technology Fund for supporting open-source
infrastructure and helping projects like ours continue to thrive!</p>

  </div>

</article>

        </div></div>]]></description>
        </item>
    </channel>
</rss>