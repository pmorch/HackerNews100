<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Wed, 23 Apr 2025 22:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Doge Worker's Code Supports NLRB Whistleblower (378 pts)]]></title>
            <link>https://krebsonsecurity.com/2025/04/doge-workers-code-supports-nlrb-whistleblower/</link>
            <guid>43776476</guid>
            <pubDate>Wed, 23 Apr 2025 20:48:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://krebsonsecurity.com/2025/04/doge-workers-code-supports-nlrb-whistleblower/">https://krebsonsecurity.com/2025/04/doge-workers-code-supports-nlrb-whistleblower/</a>, See on <a href="https://news.ycombinator.com/item?id=43776476">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
												<p>A whistleblower at the <strong>National Labor Relations Board</strong> (NLRB) alleged last week that denizens of Elon Musk’s <strong>Department of Government Efficiency</strong> (DOGE) siphoned gigabytes of data from the agency’s sensitive case files in early March. The whistleblower said accounts created for DOGE at the NLRB downloaded three code repositories from <strong>GitHub</strong>. Further investigation into one of those code bundles shows it is remarkably similar to a program published in January 2025 by <strong>Marko Elez</strong>, a 25-year-old DOGE employee who has worked at a number of Musk’s companies.</p>
<div id="attachment_71090"><p><a href="https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds.png" target="_blank" rel="noopener"><img aria-describedby="caption-attachment-71090" decoding="async" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds.png" alt="" width="748" height="323" srcset="https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds.png 1287w, https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds-768x331.png 768w, https://krebsonsecurity.com/wp-content/uploads/2025/04/db-powershellcmds-782x337.png 782w" sizes="(max-width: 748px) 100vw, 748px"></a></p><p id="caption-attachment-71090">A screenshot shared by NLRB whistleblower Daniel Berulis shows three downloads from GitHub.</p></div>
<p>According to <a href="https://krebsonsecurity.com/2025/04/whistleblower-doge-siphoned-nlrb-case-data/" target="_blank" rel="noopener">a whistleblower complaint</a> filed last week by&nbsp;<strong>Daniel J. Berulis</strong>, a 38-year-old security architect at the NLRB, officials from DOGE met with NLRB leaders on March 3 and demanded the creation of several&nbsp;all-powerful “tenant admin” accounts that were to be exempted from network logging activity that would otherwise keep a detailed record of all actions taken by those accounts.</p>
<p>Berulis said the new DOGE accounts had unrestricted permission to read, copy, and alter information contained in NLRB databases. The new accounts also could restrict log visibility, delay retention, route logs elsewhere, or even remove them entirely — top-tier user privileges that neither Berulis nor his boss possessed.</p>
<p>Berulis said he discovered one of the DOGE accounts had downloaded three external code libraries from <strong>GitHub</strong> that neither NLRB nor its contractors ever used. A “readme” file in one of the code bundles explained it was created to rotate connections through a large pool of cloud Internet addresses that serve “<em>as a proxy to generate pseudo-infinite IPs for web scraping and brute forcing</em>.” Brute force attacks involve automated login attempts that try many credential combinations in rapid sequence.</p>
<p>A search on that description in Google brings up a code repository at GitHub for a user with the account name “<strong>Ge0rg3</strong>” who published a program roughly four years ago called “<a href="https://github.com/Ge0rg3/requests-ip-rotator" target="_blank" rel="noopener">requests-ip-rotator</a>,” described as a library that will allow the user “to bypass IP-based rate-limits for sites and services.”</p>
<div id="attachment_71091"><p><img aria-describedby="caption-attachment-71091" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/ge0rge-gh.png" alt="" width="749" height="543" srcset="https://krebsonsecurity.com/wp-content/uploads/2025/04/ge0rge-gh.png 1171w, https://krebsonsecurity.com/wp-content/uploads/2025/04/ge0rge-gh-768x557.png 768w, https://krebsonsecurity.com/wp-content/uploads/2025/04/ge0rge-gh-782x568.png 782w" sizes="(max-width: 749px) 100vw, 749px"></p><p id="caption-attachment-71091">The README file from the GitHub user Ge0rg3’s page for requests-ip-rotator includes the exact wording of a program the whistleblower said was downloaded by one of the DOGE users. Marko Elez created an offshoot of this program in January 2025.</p></div>
<p>“A Python library to utilize AWS API Gateway’s large IP pool as a proxy to generate pseudo-infinite IPs for web scraping and brute forcing,” the description reads.</p>
<p>Ge0rg3’s code is “open source,” in that anyone can copy it and reuse it non-commercially. As it happens, there is a newer version of this project that was derived or “forked” from Ge0rg3’s code — called “<a href="https://github.com/markoelez/async-ip-rotator/blob/master/README.md" target="_blank" rel="noopener">async-ip-rotator</a>” — and it was committed to GitHub in January 2025 by DOGE captain <a href="https://github.com/markoelez" target="_blank" rel="noopener">Marko Elez</a>.</p>
<div id="attachment_71085"><p><a href="https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh.png" target="_blank" rel="noopener"><img aria-describedby="caption-attachment-71085" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh.png" alt="" width="750" height="492" srcset="https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh.png 1150w, https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh-768x504.png 768w, https://krebsonsecurity.com/wp-content/uploads/2025/04/melez-gh-782x513.png 782w" sizes="(max-width: 750px) 100vw, 750px"></a></p><p id="caption-attachment-71085">The whistleblower stated that one of the GitHub files downloaded by the DOGE employees who transferred sensitive files from an NLRB case database was an archive whose README file read: “Python library to utilize AWS API Gateway’s large IP pool as a proxy to generate pseudo-infinite IPs for web scraping and brute forcing.” Elez’s code pictured here was forked in January 2025 from a code library that shares the same description.</p></div>
<p>A key DOGE staff member who gained access to the Treasury Department’s central payments system, Elez has worked for a number of Musk companies, including <strong>X</strong>, <strong>SpaceX</strong>, and <strong>xAI</strong>. Elez was among the first DOGE employees to face public scrutiny, after <strong>The Wall Street Journal</strong> <a href="https://www.wsj.com/tech/doge-staffer-resigns-over-racist-posts-d9f11a93" target="_blank" rel="noopener">linked him to social media posts</a> that advocated racism and eugenics.</p>
<p>Elez resigned after that brief scandal, but was rehired after President Donald Trump and Vice President JD Vance expressed support for him. <strong>Politico</strong> <a href="https://www.politico.com/news/2025/03/29/doge-marco-elez-software-engineer-us-payroll-00259303" target="_blank" rel="noopener">reports</a> Elez is now a <strong>Labor Department</strong> aide detailed to multiple agencies, including the <strong>Department of Health and Human Services</strong>.</p>
<p>“During Elez’s initial stint at Treasury, he violated the agency’s information security policies by sending a spreadsheet containing names and payments information to officials at the General Services Administration,” Politico wrote, citing court filings.</p>
<p>KrebsOnSecurity sought comment from both the NLRB and DOGE, and will update this story if either responds.<span id="more-71075"></span></p>
<p>The NLRB has been effectively hobbled since <strong>President Trump</strong> fired three board members, leaving the agency without the quorum it needs to function. Both&nbsp;<strong>Amazon</strong>&nbsp;and Musk’s&nbsp;<strong>SpaceX</strong>&nbsp;have&nbsp;<a href="https://apnews.com/article/amazon-nlrb-unconstitutional-spacex-elon-musk-ab42977117d883e97110a7bf8e8b257f" target="_blank" rel="noopener">been suing</a>&nbsp;the NLRB over complaints the agency filed in disputes about workers’ rights and union organizing, arguing that the NLRB’s very existence is unconstitutional. On March 5, a U.S. appeals court&nbsp;<a href="https://www.reuters.com/legal/government/musks-spacex-loses-early-legal-challenge-us-labor-boards-powers-2025-03-05/" target="_blank" rel="noopener">unanimously rejected</a>&nbsp;Musk’s claim that the NLRB’s structure somehow violates the Constitution.</p>
<p>Berulis’s complaint alleges the DOGE accounts at NLRB downloaded more than 10 gigabytes of data from the agency’s case files, a database that includes reams of sensitive records including information about employees who want to form unions and proprietary business documents. Berulis said he went public after higher-ups at the agency told him not to report the matter to the US-CERT, as they’d previously agreed.</p>
<p>Berulis told KrebsOnSecurity he worried the unauthorized data transfer by DOGE could unfairly advantage defendants in a number of ongoing labor disputes before the agency.</p>
<p>“If any company got the case data that would be an unfair advantage,” Berulis said. “They could identify and fire employees and union organizers without saying why.”</p>
<div id="attachment_71106"><p><img aria-describedby="caption-attachment-71106" decoding="async" loading="lazy" src="https://krebsonsecurity.com/wp-content/uploads/2025/04/markoelez.png" alt="" width="444" height="515"></p><p id="caption-attachment-71106">Marko Elez, in a photo from a social media profile.</p></div>
<p>Berulis said the other two GitHub archives that DOGE employees downloaded to NLRB systems included <strong>Integuru</strong>, a software framework designed to reverse engineer application programming interfaces (APIs) that websites use to fetch data; and a “headless” browser called <strong>Browserless</strong>, which is made for automating web-based tasks that require a pool of browsers, such as web scraping and automated testing.</p>
<p>On February 6, someone <a href="https://github.com/markoelez/async-ip-rotator/issues/1" target="_blank" rel="noopener">posted a lengthy and detailed critique</a> of Elez’s code on the GitHub “issues” page for async-ip-rotator, calling it “insecure, unscalable and a fundamental engineering failure.”</p>
<p>“If this were a side project, it would just be bad code,” the reviewer wrote. “But if this is representative of how you build production systems, then there are much larger concerns. This implementation is fundamentally broken, and if anything similar to this is deployed in an environment handling sensitive data, it should be audited immediately.”</p>
<p>Further reading:&nbsp;<a href="https://whistlebloweraid.org/wp-content/uploads/2025/04/2025_0414_Berulis-Disclosure-with-Exhibits.s.pdf" target="_blank" rel="noopener">Berulis’s complaint</a>&nbsp;(PDF).</p>
											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[You Wouldn't Steal a Font (425 pts)]]></title>
            <link>https://fedi.rib.gay/notes/a6xqityngfubsz0f</link>
            <guid>43775926</guid>
            <pubDate>Wed, 23 Apr 2025 19:42:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fedi.rib.gay/notes/a6xqityngfubsz0f">https://fedi.rib.gay/notes/a6xqityngfubsz0f</a>, See on <a href="https://news.ycombinator.com/item?id=43775926">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="splash"><p><img id="splashIcon" src="https://fedi.rib.gay/static-assets/splash.png?1745440201643"><span id="splashText">Loading...</span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Teaching LLMs how to solid model (130 pts)]]></title>
            <link>https://willpatrick.xyz/technology/2025/04/23/teaching-llms-how-to-solid-model.html</link>
            <guid>43774990</guid>
            <pubDate>Wed, 23 Apr 2025 18:13:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://willpatrick.xyz/technology/2025/04/23/teaching-llms-how-to-solid-model.html">https://willpatrick.xyz/technology/2025/04/23/teaching-llms-how-to-solid-model.html</a>, See on <a href="https://news.ycombinator.com/item?id=43774990">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
    <p>It turns out that LLMs can make CAD models for simple 3D mechanical parts. And, I think they’ll be extremely good at it soon.</p>

<h2 id="an-ai-mechanical-engineer">An AI Mechanical Engineer</h2>

<p>Code generation is the first breakthrough application for LLMs. What would an AI agent look like for mechanical engineering? Material selection, design for manufacturing, computer-aided manufacturing (CAM), and off-the-shelf part comparison would all be important features of an AI mechanical engineer. Perhaps, most importantly, an AI mechanical engineer would design and improve CAD models. Mechanical engineers typically design CAD using point-and-click software (e.g. Fusion 360, Solidworks, and Onshape). How could AI generate these solid models instead?</p>

<h2 id="code-generation-meets-cad">Code generation meets CAD</h2>

<p>One promising direction is training a generative model on millions of existing CAD files. This approach is being actively researched by <a href="https://damassets.autodesk.net/content/dam/autodesk/www/pdfs/brepgen.pdf">multiple</a> <a href="https://arxiv.org/pdf/2105.09492">teams</a> who are investigating both diffusion and transformer architectures. In particular, I like <a href="https://www.youtube.com/watch?v=5r1qQ5DOsUI">Autodesk Research</a>’s approach to encode the parametric primitives (points, curves, shapes, extrusions, etc) into a transformer architecture. However, as far as I understand, the models in these projects cannot yet take an arbitrary input command and generate a desired shape.</p>

<p>Then a few weeks ago, I was inspired by the <a href="https://github.com/ahujasid/blender-mcp">recent use of LLMs to drive Blender</a>, the open source modeling tool widely used for animation. Given that LLMs are incredibly good at generating code, perhaps programmatic interfaces for CAD modeling could be used to generate solid models in a similar way. I immediately thought of <a href="https://openscad.org/">OpenSCAD</a>, an open-source programmatic CAD tool that’s been developed for more than 15 years. Instead of using point-and-click software to create a solid model, the user writes a software script, which is then rendered into the solid CAD model.</p>

<h2 id="llms-rock-at-writing-openscad">LLMs rock at writing OpenSCAD</h2>

<p>To test it out, I created a simple project in Cursor, made a blank OpenSCAD script (Cursor.scad), and added some Cursor rules:</p>

<div><pre><code># Your rule content

- We're creating files to model things in open scad. 
- All the OpenScad files you create will be in Cursor.scad. I've set up this file such that if you edit it, it will automatically be read by OpenScad (it's the open file in the program). 
- If I want to save what you've done, I'll tell you and you should create a new file and put it in the Saved folder. 
- That's it! Overtime, if needed, we could create documentation about how to use OpenScad. 
- If I'm asking you to create a new design, you should delete the current contents of cursor.scad and add the new design into it.
- When I make requests you should always first develop a step by step plan. Then tell me the step by step plan. And then I'll tell you to start modeling. 
- When you're going through the step by step plans, only execute one step at a time. 
- When you've executed a step, ask the user if its right.
</code></pre></div>

<p>Then, I started using Cursor to create solid models.</p>

<p>Here’s an example:  “Create an iPhone case”.</p>

<p><img src="https://willpatrick.xyz/assets/images/blog/iphone.gif" alt="iPhone GIF"></p>

<p>It didn’t nail it on the first try, but with a couple of iterations (including giving it screenshots) we created a basic case.</p>

<p>You can also leverage OpenSCAD libraries (there are many public ones). Here, I use a library to make a thread for a flange.</p>

<p><img src="https://willpatrick.xyz/assets/images/blog/flange.gif" alt="Flange GIF"></p>

<p>One thing that’s pretty neat is that the LLM can use its general knowledge of mechanical engineering. For example, above, Cursor created holes in the pipe for M6 bolts and it correctly made the diameter slightly bigger than 6 mm, so the bolts could pass through.</p>

<pre><code>bolt_hole_d = 6.5; // Diameter for M6 bolts
</code></pre>

<p>Of course, one of the really nice things about this approach is that the files are editable and Cursor defaults to parameterizing all the key elements of the design. In the above example, I asked it to add holes for mounting bolts, which it did, and then I edited the number of holes manually to 3 from 4.</p>

<pre><code>// Flange parameter
flange_OD = 50; // Outer diameter of the flange in mm 
flange_thickness = 10; // Thickness of the flange in mm
pipe_size = 1/2; // NPT Pipe Size

// Bolt hole parameters
num_bolts = 3;
bolt_hold_d = 6.5; // Diameter for M6 bolts
bold_hole_circle = 35; // Diameter for the bolt circle
</code></pre>

<h2 id="building-an-eval-for-llm---openscad---stl">Building an eval for LLM -&gt; OpenSCAD -&gt; STL</h2>

<p>I was impressed by these initial results but I wanted to learn more. For example, did the model’s reasoning ability help it think through the steps of creating a part? So, I decided to develop an evaluation to test the performance of various LLMs at generating solid models via OpenSCAD.</p>

<p>One of the challenges with creating an eval for CAD design is that most tasks have many correct answers. For example, a task such as “make a m3 screw that’s 10mm long” could have many correct answers because the length, diameter, and style of the head are not defined in the task. To account for this, I decided to write the tasks in my eval such that there was only a single, correct interpretation of the geometry.</p>

<p>For example, here is one of the tasks in the eval:</p>

<blockquote>
  <p>This is a 3mm thickness rectangular plate with two holes.</p>

  <ol>
    <li>
      <p>The plate is 18mm x 32mm in dimension.</p>
    </li>
    <li>
      <p>When looking down at the plate, it has two holes that are drilled through it. In the bottom left of the plate, there’s a hole with a centerpoint that is 3mm from the short (18mm) side and 3 mm from the long (32mm) side. This hole has a diameter of 2mm.</p>
    </li>
    <li>
      <p>In roughly the top left corner of plate, there’s a hole of diameter 3mm. Its center point is 8mm from the short side (18mm side) and 6mm away from the long (32mm) side.</p>
    </li>
  </ol>
</blockquote>

<p>The benefit of this approach is that we can score each task as a Pass or Fail and we can do this in an automated way. I wrote 25 total CAD tasks which ranged in difficulty from a single operation (“A 50mm long pipe that has a 10mm outer diameter and 2mm wall thickness”) to 5 sequential operations. For each task, I designed a reference CAD model using Autodesk Fusion 360 and then exported a STL mesh file.</p>

<p>Then, I set about programming the automated eval pipeline (of course, <a href="https://willpatrick.xyz/software/2025/03/17/software-with-a-market-of-one.html">I didn’t actually write much code</a>).</p>

<p>Here is how the eval pipeline works:</p>

<ol>
  <li>For each task and model, the eval sends the text prompt (along with a system prompt) to the LLM via API.</li>
  <li>The LLM sends back the openSCAD code.</li>
  <li>The openSCAD code is rendered into a STL</li>
  <li>The generated STL is automatically checked against the reference STL</li>
  <li>The task “passes” if it passes a number of geometric checks.</li>
  <li>The results are then outputted in a dashboard.</li>
</ol>

<p>
graph LR
    A[Start Eval For each Task &amp; Model] --&gt; B{Send System + Task Prompt to LLM};
    B --&gt; C[LLM Returns OpenSCAD];
    C --&gt; D{Render OpenSCAD to STL};
    D --&gt; E{Compare Generated STL to Reference STL};
    E --&gt; I[Output Eval Results to Dashboard];
</p>

<p>[Note: The eval runs multiple replicates per task x model combo. And the eval is executed in parallel, because there can be 1000+ tasks when running the full evaluation.]</p>

<p>Here’s how the geometric check works:</p>

<ul>
  <li>The generated STL and reference STL are aligned using the iterative closest point (ICP) algorithm.</li>
  <li>The aligned meshes are then compared by:
    <ul>
      <li>Their volumes (pass = &lt;2% diff)</li>
      <li>Their bounding boxes (pass = &lt;1 mm)</li>
      <li>The average chamfer distance between the parts (pass = &lt;1 mm)</li>
      <li>The Hausdorff distance (95% percentile) (pass = &lt;1 mm)</li>
    </ul>
  </li>
  <li>To “pass” the eval, all of the geometric checks must be passed.</li>
</ul>

<p>There are a few areas where the eval pipeline could be improved. In particular, false negatives are common (est: ~5%). I’ve also noticed that occasionally, small features that are incorrect (like a small radius fillet) are not caught by the automated geometry check. Nevertheless, the eval pipeline is still good enough to see interesting results and compare the performance of the various LLMs.</p>

<p>If you’d like to learn more about the eval, use it, or check out the tasks, please check out the <a href="https://github.com/wgpatrick/cadeval">GitHub repo</a>.</p>

<p>Finally, there are a number of ways to improve the evaluation. Here are a few things that I’d like to do next:</p>

<ul>
  <li>More tasks with greater coverage</li>
  <li>Optimize system prompts, in particular by adding OpenSCAD documentation and code snippets</li>
  <li>Create an eval variation that uses sketches and drawings as input</li>
  <li>Add another variation that tests the ability of the LLM to add operations to existing OpenSCAD script and STL</li>
  <li>Evaluate the ability of the LLM to fix mistakes in an existing STL / OpenSCAD code</li>
</ul>

<h2 id="rapid-improvement-of-frontier-models">Rapid improvement of frontier models</h2>

<p>Here are the results from an eval run executed on April 22, 2025. In the eval run, 15 different models were tested on the 25 tasks with 2 replicates were task. All of the results and configuration details from the run are available <a href="https://willpatrick.xyz/cadevalresults_20250422_095709/">here</a>.</p>

<p>The results show that LLMs only became good at OpenSCAD solid modeling recently.</p>

<figure>
  <img src="https://willpatrick.xyz/assets/images/blog/overall_result2.png" alt="Results from CadEval">
  <figcaption>Results from CadEval. In this run, each model attempted to complete 25 tasks (2 replicates per task). "Success" means they passed a number of geometric checks that compared to a reference geometry.</figcaption>
</figure>

<p>The top 3 models were all launched while I was working on the project and the top 7 models are all reasoning models. These models offer large performance increases compared to their predecessor, non-reasoning counterparts. Sonnet 3.5 is the best non-reasoning model and Sonnet 3.7 is only slightly better performing in the eval (for Sonnet 3.7, thinking was used with a budget of 2500 tokens).</p>

<p>Digging into the results offers some interesting insights. First, the LLMs are quite good at generating OpenSCAD code that compiles correctly and can be rendered into a STL. In other words, only a small portion of the failures are coming from things like OpenSCAD syntax errors. Anthropic’s Sonnet models are the best at this.</p>

<figure>
  <img src="https://willpatrick.xyz/assets/images/blog/stl_render_success.png" alt="Rendering Success Rate">
  <figcaption>For the same eval run as above, the % of tasks for each model where a STL was rendered (and the geometry was checked).</figcaption>
</figure>

<p>Additionally, we can look at the success rate for tasks where a STL was rendered. The o3-mini is quite strong, with nearly the same sucess rate as the full-size o3 model, while Sonnet 3.7 appears to be a step behind the leading Gemini 2.5 Pro and o1, o3, o4-mini, and o3-mini models.</p>

<figure>
  <img src="https://willpatrick.xyz/assets/images/blog/success_rate_for_only_tasks_with_rendered_stl.png" alt="Success Rate if STL Rendered">
  <figcaption>Of tasks where a STL was generated, the % of tasks that successfully passed all geometric checks.</figcaption>
</figure>

<p>Finally, to be expected, Gemini 2.5 and o4-mini are substantially cheaper and slightly faster to run than the full o3 and o1 models.</p>

<figure>
  <img src="https://willpatrick.xyz/assets/images/blog/average_estimated_cost.png" alt="Average cost per task for various models">
  <figcaption>The estimated cost per task for each model.</figcaption>
</figure>

<figure>
  <img src="https://willpatrick.xyz/assets/images/blog/average_estimated_time.png" alt="Average time per task for various models">
  <figcaption>The average total time per task to generate OpenSCAD and then render a STL. The time to make the API call and receive the OpenSCAD is much, much greater than the time to render the STL, which is  less than 1 second. </figcaption>
</figure>

<p>As expected, some tasks were easy and some tasks were hard to complete.</p>

<figure>
  <img src="https://willpatrick.xyz/assets/images/blog/task_success_rate.png" alt="Pass rate for each of the 25 tasks">
  <figcaption>Overall success rate task by task.</figcaption>
</figure>

<p>Generally, speaking tasks with more operations we’re more challenging.</p>

<figure>
  <img src="https://willpatrick.xyz/assets/images/blog/part_complexity.png" alt="Pass rate by part complexity">
  <figcaption>Each task required 1 to 5 operations to complete manually in Fusion360. Within the eval, there were 5 tasks that required a single operation, 5 required two, and so forth. </figcaption>
</figure>

<p>Tasks 2, Task 3, and Task 6 were the easiest tasks with over 80% correct across models. Here’s what these tasks looked like with example successes.</p>



<p>Only 2 tasks had 0% success, task 11 and task 15. Here are the prompts for those two tasks and representative failures.</p>



<p>These failures are both interesting and quite different. Task 11 is a good example of poor spatial reasoning. In the specific failure highlighted in the image, the model extrudes the shank of the eyebolt  orthogonally to the torus (instead of in the same plane). Task 15 is a different failure mode. It’s hard to see in the attached image, but if you zoom in closely, it’s clear that the generated shape is slightly larger than the reference shape (which makes sense, because the generated STL failed the volume check). From looking at the OpenSCAD code for this example, it appears that the failure is due to using OpenSCAD’s <a href="https://www.openscad.info/index.php/2020/10/18/hull/">hull operation</a>, which is not precisely the same as a loft operation. OpenSCAD does not have a loft operation built-in.</p>

<p>Tasks 20-24 all required 5 sequential operations and the average success rate for these tasks ranged from 3.3% to 30%. Here are the prompts for those 5 tasks with representative successes and failures.</p>

<p>The failures can be tricky to spot. The green areas of the failed images should have geometry in the generated STL, but do not (the reference point cloud is plotted in green). Likewise, the red areas have geometry in the generated STL, but they shouldn’t.</p>



<h2 id="start-ups">Start-ups</h2>

<p>In the past few months, two different start-ups launched text-to-CAD products, AdamCad and Zoo.dev. Zoo.dev offers an API to use their text-to-CAD model. Zoo’s demos of their API and text-to-CAD product are very cool and look quite similar to the Cursor -&gt; OpenSCAD demo I have above.</p>

<blockquote><div lang="en" dir="ltr"><p>We're excited to announce the launch of Zoo.dev, a text-to-CAD API that lets you generate 3D models from text descriptions.</p><p>We've been working on this for the past year, and we're finally ready to share it with the world.</p><p>Here's a thread on what we've built 🧵 <a href="https://t.co/Yd9Yd9Ixqm">pic.twitter.com/Yd9Yd9Ixqm</a></p></div>— Abhishek (@abhi1thakur) <a href="https://twitter.com/abhi1thakur/status/1881766438383337573?ref_src=twsrc%5Etfw">July 21, 2024</a></blockquote>


<p>I added Zoo into the eval pipeline to compare against LLM -&gt; OpenSCAD -&gt; STL. Instead of generating OpenSCAD, the Zoo.dev API shoots back a STL directly. Zoo says they use <a href="https://zoo.dev/machine-learning-api">a proprietary dataset and machine learning model</a>. To my surprise, Zoo’s API didn’t perform particularly well in comparison to LLMs generating STLs by creating OpenSCAD. Despite that, I’m excited to see the development of Zoo.dev and I will be eager to see how future model launches from Zoo.dev compare to LLMs creating OpenSCAD.</p>

<h2 id="whats-next">What’s next?</h2>

<p>I think these initial results are promising. Cursor (or another coding agent) + OpenSCAD offers a solution for producing solid models in an automated way.</p>

<p>However, I don’t think this approach is about to take off and spread rapidly through the CAD design ecosystem. The current set-up is seriously clunky and I think substantial product improvements are needed to make this work better. Similar to how Cursor, Windsurf, and other tools have developed specific UX and LLM workflows for code generation, I imagine there will be substantial work required to develop workflows and UX that make sense for CAD generation. Here are a few ideas that I think could be worth pursuing in this direction:</p>

<ul>
  <li>Tools that bring in console logs and viewport images to Cursor from OpenSCAD for iterative improvement and debugging.</li>
  <li>A UI to highlight (and measure) certain faces, lines, or aspects of a part, which are fed to the LLM for additional context.</li>
  <li>Drawing or sketch-input, so the user can quickly visually communicate their ideas.</li>
  <li>A UI with sliders to adjust parameters instead of editing the code.</li>
</ul>

<p>Additionally, I expect that further model advances will continue to unlock this application. In particular, improving spatial reasoning is an <a href="https://arxiv.org/pdf/2504.05786">active area of research</a>. I imagine that improved spatial reasoning could greatly improve models’ ability to design parts step by step.</p>

<p>So when does text-to-CAD become a commonly used tool for mechanical engineers? With start-ups actively building products and the rapid improvement of frontier models, my guess would be something like 6-24 months.</p>

<h2 id="where-does-this-go">Where does this go?</h2>

<p>In the medium to long term (2-10 years), I imagine that most parts will be created with a form of GenCAD. Allow me to speculate.</p>

<ul>
  <li>Initially, GenCAD will be used to create parts that fit within existing assemblies. For example, you might say: “I need a bracket that fits here.”  And, the GenCAD tool will create a bracket that perfectly joins with the existing assembly components. Want to analyze three variants with FEA? Ask for them. I expect mainstream CAD suites (Autodesk, Solidworks, Onshape) to add these capabilities directly into their product suite.</li>
  <li>Longer term, I imagine GenCAD will reach every aspect of a CAD suite: sketches, mates, assemblies, exploded views, CAM tool-pathing, rendering visualizations, and CAE. Imagine a design review where you highlight a subassembly and say “replace these rivets with M6 countersunk screws and regenerate the BOM.” The model, drawings, and purchasing spreadsheet all update in seconds.</li>
</ul>

<p>We’re watching CAD begin to exit the manual-input era. I, for one, am quite excited about that.</p>

<!-- Carousel CSS and JS -->





  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I won't be vibe coding anymore: a noob's perspective (119 pts)]]></title>
            <link>https://varunraghu.com/why-i-wont-be-vibe-coding-anymore/</link>
            <guid>43773977</guid>
            <pubDate>Wed, 23 Apr 2025 16:41:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://varunraghu.com/why-i-wont-be-vibe-coding-anymore/">https://varunraghu.com/why-i-wont-be-vibe-coding-anymore/</a>, See on <a href="https://news.ycombinator.com/item?id=43773977">Hacker News</a></p>
<div id="readability-page-1" class="page">
  
  <header>
    <a href="https://varunraghu.com/">
      <h2>
        Varun Raghu
      </h2>
    </a>
    <nav>
      <p><a href="https://varunraghu.com/blog/">Blog</a></p>

    </nav>
  </header>
  <main>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2025-04-22T19:40Z">
                    22 Apr, 2025
                </time>
            </i>
        </p>
    

    <p>i’m breaking up with vibe coding. here’s why.</p>
<p>when i first started learning to code, i built apps/websites that would be considered poor in the traditional sense. it also took me an embarassing amout of time to figure out basic stuff. it was frustratingly difficult. the ‘finished’ product wasn’t even polished.</p>
<p>but atleast i built it. i wasn’t begging an ai agent to fix my bugs. no matter how poor, the code had my blood, sweat and tears in it. no one could take that away from me.</p>
<p>as i was lying in bed on a sleepless night. i realized i hadn’t learnt a new concept in weeks. i had built a few useful apps with ai, but a nagging question kept me awake - what was the point of it all if i didn’t learn a thing?</p>
<p>that’s when it struck me. coding isn’t about the finished product. its a lot like writing. its about the process. its about how you approach a problem. its critical thinking.</p>
<p>and i don’t think i’m ready to let ai take these away from me. i’m going back to writing shitty code, slowly and deliberately.</p>


    

    
        

        
            


        
    


  </main>
  

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI Horseless Carriages (399 pts)]]></title>
            <link>https://koomen.dev/essays/horseless-carriages/</link>
            <guid>43773813</guid>
            <pubDate>Wed, 23 Apr 2025 16:19:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://koomen.dev/essays/horseless-carriages/">https://koomen.dev/essays/horseless-carriages/</a>, See on <a href="https://news.ycombinator.com/item?id=43773813">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[They made computers behave like annoying salesmen (215 pts)]]></title>
            <link>https://rakhim.exotext.com/they-made-computers-behave-like-annoying-salesmen</link>
            <guid>43773710</guid>
            <pubDate>Wed, 23 Apr 2025 16:10:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rakhim.exotext.com/they-made-computers-behave-like-annoying-salesmen">https://rakhim.exotext.com/they-made-computers-behave-like-annoying-salesmen</a>, See on <a href="https://news.ycombinator.com/item?id=43773710">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>Computers are precise machines. You can give a computer a precise command using an inhumane language, and it should perfome the command. It's not a human, and there is no point of treating it as one. The goal of humanizing user experience isn't to create an illusion of human interaction - it's to make these mechanical commands more accessible while preserving their precise, deterministic nature. </p>
<p>UX designers and product managers of tech companies did a lot of damange to people's understanding of computers by making the software behave like a human; or to be more precise, behave like an annoying salesman. </p>
<p><img src="https://img.exotext.com/1/Mam8J5UIOOGzSAR80SsCi.png" alt=""></p>
<p><em>(Image from "<a href="https://blog.prototypr.io/not-now-a91c75ad35b6">Not Now. Not later either</a>" by Chris Oliver)</em></p>
<p>We're all familiar with this type. After receiving a clear "no thanks" they deploy increasingly manipulative tactics to meet their "always-be-closing" quotas: "Would this Wednesday work better?" "What would change your mind?" This behavior is frustrating enough from actual salespeople - it's even worse when programmed into our software.</p>
<p>(<a href="https://www.youtube.com/watch?v=GrhSLf0I-HM">Corporate LLM training session circa 2025</a>)</p>
<p>Personally, I can tolerate but deeply dislike software that pretends to have ulterior motives. Take YouTube, for instance. When I explicitly say "Not interested" to their damned shorts feature, I get this response:</p>
<p><img src="https://img.exotext.com/1/BRKRAYhSqywqHunBgXt0P.png" alt="youtube web page with a message saying 'shelf will be hidden for 30 days'"></p>
<p>I understand that it's not the "YouTube program" having its own agency and making this decision - it's the team behind it, driven by engagement metrics and growth targets. But does the average user understand this distinction?</p>
<p>The population (especially the younger generation, who never seen a different kind of technology at all) is being conditioned by the tech industry to accept that software should behave like an unreliable, manipulative human rather than a precise, predictable machine. They're learning that you can't simply tell a computer "I'm not interested" and expect it to respect that choice. Instead, you must engage in a perpetual dance of "not now, please" - only to face the same prompts again and again.</p>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How a 20 year old bug in GTA San Andreas surfaced in Windows 11 24H2 (792 pts)]]></title>
            <link>https://cookieplmonster.github.io/2025/04/23/gta-san-andreas-win11-24h2-bug/</link>
            <guid>43772311</guid>
            <pubDate>Wed, 23 Apr 2025 14:00:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cookieplmonster.github.io/2025/04/23/gta-san-andreas-win11-24h2-bug/">https://cookieplmonster.github.io/2025/04/23/gta-san-andreas-win11-24h2-bug/</a>, See on <a href="https://news.ycombinator.com/item?id=43772311">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
  <header id="main">
    <div>
      
      <p>April 23, 2025</p>
      <p>14 min. to read</p>
    </div>
  </header>
  <section>
    
      <ul id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a></li>
  <li><a href="#investigating-the-bug" id="markdown-toc-investigating-the-bug">Investigating the bug</a>    <ul>
      <li><a href="#what-is-broken" id="markdown-toc-what-is-broken">What is broken?</a></li>
      <li><a href="#but-why-and-how" id="markdown-toc-but-why-and-how">But why and how?</a></li>
    </ul>
  </li>
  <li><a href="#here-be-dragons--the-true-root-cause" id="markdown-toc-here-be-dragons--the-true-root-cause">Here be dragons – the true root cause</a>    <ul>
      <li><a href="#diving-deeper" id="markdown-toc-diving-deeper">Diving deeper</a></li>
      <li><a href="#whose-stack-is-it-anyway" id="markdown-toc-whose-stack-is-it-anyway">Whose Stack Is It Anyway?</a></li>
      <li><a href="#what-are-the-odds-this-only-broke-now-darn-windows-11" id="markdown-toc-what-are-the-odds-this-only-broke-now-darn-windows-11">What are the odds this only broke now? Darn Windows 11!</a></li>
    </ul>
  </li>
  <li><a href="#i-want-this-fixed-in-my-game" id="markdown-toc-i-want-this-fixed-in-my-game">I want this fixed in my game!</a></li>
  <li><a href="#final-word" id="markdown-toc-final-word">Final word</a></li>
</ul>
<h2 id="introduction">
  
  
    Introduction <a href="#introduction"></a>
  
  
</h2>
    

<p>On the <a href="https://github.com/CookiePLMonster/SilentPatch/issues/172" target="_blank">SilentPatch GitHub issue tracker</a>,
I received a rather specific bug report:</p>

<blockquote>
<h3 id="skimmer-airplane-doesnt-exist-in-windows-11-24h2">
  
  
    Skimmer airplane doesn’t exist in Windows 11 24H2
  
  
</h3>
    

  <p>When I upgraded my windows to version 24H2, the Skimmer plane disappear completely from the game.
It can’t be spawn using trainer nor it can’t be found anywhere on it’s normal spawn points.
I’m using both my modded copy (which is before the update, is completely fine) and vanilla copy with only silentpatch
(I tried the 2018, 2020 and the most recent version of silentpatch) and the plane still won’t exist.</p>
</blockquote>

<p>If this was the first time I had heard about it, I’d likely consider it dubious and suspect there are more things at play,
and it’s not specifically Windows 11 24H2. However, on GTAForums, I’ve been receiving comments about this exact issue since November last year.
Some of them said SilentPatch causes this issue, others however stated the same happens on a completely unmodded game:</p>

<blockquote>
  <p>Apparently the skimmer cant spawn when playing on Windows 11 24h2 update, hope this bug gets fixed.</p>

  <p>EDIT: So I think I confirmed it, I set up a VM with Windows 11 23h2 and the damn plane spawns fine,
and updating that same VM to 24h2 breaks the skimmer, why would a small feature update in 2024 break a random plane in a 2005 game is anyone’s guess.</p>
</blockquote>

<blockquote>
  <p>After the latest Silent patch update there is no Skimmer in the game and when I try to spawn it with RZL-Trainer or Cheat Menu by Grinch,
the game freezes and I have to close it via Task Manager.</p>
</blockquote>

<blockquote>
  <p>[…] I was forced to update to 24H2, and now after the update, I have the same problem with the Skimmer in GTA SA as others.
This means that mods or anything else are not causing the issue, the problem appeared after the latest Windows update.</p>
</blockquote><hr>

<p>My home PC is still on Windows 10 22H2, while my work machine is on Windows 11 23H2, and, to no surprise, neither machine reproduced the issue – Skimmer spawned
on the water just fine, creating one via script and putting CJ in a driver’s seat worked too.</p>

<p>That said, I also asked a few people who upgraded to 24H2 to test this on their machines and they <strong>all</strong> hit this bug. Attempts to debug “remotely”
by giving instructions over the chat didn’t go anywhere, so I set up a 24H2 virtual machine on my own. I copied the game over to the machine, set it up for remote
debugging from the host OS, headed to the usual place the Skimmer spawns, and sure enough, it wasn’t there. All other planes and boats still spawned fine,
only this one vehicle did not:</p>

<figure>
<figure><a href="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/gta_sa_SqUlKDKCRs.jpg" target="_blank"><img src="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/thumb/gta_sa_SqUlKDKCRs.jpg" alt="" width="1024" height="576"></a><figcaption>Skimmer is gone.</figcaption></figure>

<figure><a href="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/gta_sa_qnldPBAKRl.jpg" target="_blank"><img src="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/thumb/gta_sa_qnldPBAKRl.jpg" alt="" width="1024" height="576"></a><figcaption>Other planes are still here, though.</figcaption></figure>

</figure>

<p>I then used the script to spawn a Skimmer and put CJ inside it, just to be launched
<code>1.0287648030984853e+0031</code> = <strong>10.3 nonillion meters</strong>, or <strong>10.3 octillion kilometers</strong>, or <strong>1.087 quadrillion light-years</strong> up in the sky 😆</p>

<figure><a href="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/gta_sa_5KOLUPPHLe.jpg" target="_blank"><img src="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/thumb/gta_sa_5KOLUPPHLe.jpg" alt="" width="1024" height="576"></a><figcaption>Scientists claim to have discovered a ‘new color’ no one has seen before.</figcaption></figure>

<p>With SilentPatch installed, the game freezes shortly after launching the player up, as the game code gets stuck in a loop.
Without SilentPatch, the game doesn’t freeze, but instead, it succumbs to a famous “burn-in effect” known to occur when the camera gets launched into infinity or close to it.
Funny enough, you can still kind of make out the shape of the plane even though the animations give up completely to the inaccuracies of the floating point values:</p>

<figure>
<figure><a href="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/gta_sa_GXULFRni6Y.jpg" target="_blank"><img src="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/thumb/gta_sa_GXULFRni6Y.jpg" alt="" width="1024" height="576"></a></figure>

<figure><a href="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/gta_sa_qQUqnmyhV6.jpg" target="_blank"><img src="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/thumb/gta_sa_qQUqnmyhV6.jpg" alt="" width="1024" height="576"></a></figure>

</figure>
<h2 id="investigating-the-bug">
  
  
    Investigating the bug <a href="#investigating-the-bug"></a>
  
  
</h2>
    
<h2 id="what-is-broken">
  
  
    What is broken? <a href="#what-is-broken"></a>
  
  
</h2>
    

<p>But, enough messing around; now I knew it was a real bug and I needed to figure out the root cause. At this point it wasn’t possible to say
whether the game was at fault, or if I was really dealing with an API bug introduced in 24H2, as looking at how many games have issues with this OS version,
it could go either way.</p>

<p>I didn’t have much to go with, but the fact the game froze with SilentPatch installed provided me with a good starting point. Upon entering the seaplane,
the game froze in a very small loop in <code>CPlane::PreRender</code>, attempting to normalize the rotor blade angle to the 0-360 degree range:</p>

<div><pre><code><span>this</span><span>-&gt;</span><span>m_fBladeAngle</span> <span>=</span> <span>CTimer</span><span>::</span><span>ms_fTimeStep</span> <span>*</span> <span>this</span><span>-&gt;</span><span>m_fBladeSpeed</span> <span>+</span> <span>this</span><span>-&gt;</span><span>m_fBladeAngle</span><span>;</span>
<span>while</span> <span>(</span><span>v12</span> <span>&gt;</span> <span>6.2831855</span><span>)</span>
<span>{</span>
  <span>this</span><span>-&gt;</span><span>m_fBladeAngle</span> <span>=</span> <span>this</span><span>-&gt;</span><span>m_fBladeAngle</span> <span>-</span> <span>6.2831855</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>In the debugged session, <code>this-&gt;m_fBladeSpeed</code> was <code>3.73340132e+29</code>. This value is obviously enormous, big enough to make decrementing the value by <code>6.2831855</code>
entirely ineffective due to the difference in floating point exponents of these two values.<sup id="fnref:fp-explanation" role="doc-noteref"><a href="#fn:fp-explanation" rel="footnote">1</a></sup> But why is the blade speed so ridiculously high?
The blade speed is derived from the following formula:</p>
<div><pre><code><span>this</span><span>-&gt;</span><span>m_fBladeSpeed</span> <span>=</span> <span>(</span><span>v34</span> <span>-</span> <span>this</span><span>-&gt;</span><span>m_fBladeSpeed</span><span>)</span> <span>*</span> <span>CTimer</span><span>::</span><span>ms_fTimeStep</span> <span>/</span> <span>100.0</span> <span>+</span> <span>this</span><span>-&gt;</span><span>m_fBladeSpeed</span><span>;</span>
</code></pre></div>

<p>where <code>v34</code> is <strong>proportional to the plane’s altitude</strong>. This matches the initial findings – as mentioned earlier, the “burn-in effect” traditionally happens
when the camera is very far away from the map center, or at a great height.</p>

<p>What caused the plane to shoot so high up? There are two possibilities:</p>
<ol>
  <li>The plane spawns high up in the sky already.</li>
  <li>The plane spawns at ground level and then shoots up in the next frame.</li>
</ol>

<p>As for this test, I was spawning the Skimmer myself with a test script, so I could start from the function used in the game’s SCM (script) interpreter,
named <code>CCarCtrl::CreateCarForScript</code>. This function spawns a vehicle with a specified ID at the provided coordinates, and those come from my test script,
so I know they are correct. However, this function transforms the supplied Z coordinate slightly:</p>

<div><pre><code><span>if</span> <span>(</span><span>posZ</span> <span>&lt;=</span> <span>100.0</span><span>)</span>
<span>{</span>
  <span>posZ</span> <span>=</span> <span>CWorld</span><span>::</span><span>FindGroundZForCoord</span><span>(</span><span>posX</span><span>,</span> <span>posY</span><span>);</span>
<span>}</span>
<span>posZ</span> <span>+=</span> <span>newVehicle</span><span>-&gt;</span><span>GetDistanceFromCentreOfMassToBaseOfModel</span><span>();</span>
</code></pre></div>

<p><code>CEntity::GetDistanceFromCentreOfMassToBaseOfModel</code> contains multiple code paths, but the one used in this case simply gets the negated maximum Z value
of the model’s bounding box:</p>
<div><pre><code><span>return</span> <span>-</span><span>CModelInfo</span><span>::</span><span>ms_modelInfoPtrs</span><span>[</span><span>this</span><span>-&gt;</span><span>m_wModelIndex</span><span>]</span><span>-&gt;</span><span>pColModel</span><span>-&gt;</span><span>bbox</span><span>.</span><span>sup</span><span>.</span><span>z</span><span>;</span>
</code></pre></div>

<p>At this point, I expected this value to be incorrect, so I peeked into Skimmer’s bounding box values just to find out that the maximum Z value is indeed corrupted:</p>

<div><pre><code>- *(RwBBox**)0x00B2AC48	RwBBox *
  - sup	RwV3d
      x	-5.39924574	float
      y	-6.77431822	float
      z	-4.30747210e+33	float
  - inf	RwV3d
      x	5.42313004	float
      y	4.02343750	float
      z	1.87021971	float
</code></pre></div>

<p>If all the components of the bounding box were corrupted, I would have suspected some memory corruption, like another code writing past boundaries and overwriting
these values, but it’s specifically <code>sup.z</code> that is corrupted that is neither the first nor the last field in the bounding box. Once again, two possibilities came to my mind:</p>
<ol>
  <li>The collision file is read incorrectly and some fields remain uninitialized, or read unrelated data instead of the bounding box? Highly unlikely, but not impossible given that
  this issue could potentially have been an OS bug.</li>
  <li>The bounding box is read correctly, but then it’s updated with an outrageously incorrect value.</li>
</ol>

<p>A data breakpoint set up at <code>pColModel</code> reveals that at the time of the initial setup, the bounding box is correct, and the value of the Z coordinate is completely reasonable:</p>
<div><pre><code>- *(RwBBox**)0x00B2AC48	RwBBox *
  - sup	RwV3d
    x	-5.39924574	float
    y	-6.77431822	float
    z	-2.21952772	float
  - inf	RwV3d
    x	5.42313004	float
    y	4.02343750	float
    z	1.87021971	float
</code></pre></div>

<p>Turns out, the first time a vehicle with a specific model is spawned, the game sets up the suspension in a function <code>SetupSuspensionLines</code>, and updates the Z coordinate
of the bounding box to reflect the car’s natural suspension height:</p>
<div><pre><code><span>if</span> <span>(</span><span>pSuspensionLines</span><span>[</span><span>0</span><span>].</span><span>p1</span><span>.</span><span>z</span> <span>&lt;</span> <span>colModel</span><span>-&gt;</span><span>bbox</span><span>.</span><span>sup</span><span>.</span><span>z</span><span>)</span>
<span>{</span>
  <span>colModel</span><span>-&gt;</span><span>bbox</span><span>.</span><span>sup</span><span>.</span><span>z</span> <span>=</span> <span>pSuspensionLines</span><span>[</span><span>0</span><span>].</span><span>p1</span><span>.</span><span>z</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>This is where things went wrong first. The suspension lines are computed using a combination of values from <code>handling.cfg</code> and the wheel scale parameter
coming from <code>vehicles.ide</code>:</p>
<div><pre><code><span>for</span> <span>(</span><span>int</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>4</span><span>;</span> <span>i</span><span>++</span><span>)</span>
<span>{</span>
  <span>CVector</span> <span>posn</span><span>;</span>
  <span>modelInfo</span><span>-&gt;</span><span>GetWheelPosn</span><span>(</span><span>i</span><span>,</span> <span>posn</span><span>);</span>

  <span>posn</span><span>.</span><span>z</span> <span>+=</span> <span>pHandling</span><span>-&gt;</span><span>fSuspensionUpperLimit</span><span>;</span>
  <span>colModel</span><span>-&gt;</span><span>lines</span><span>[</span><span>i</span><span>].</span><span>p0</span> <span>=</span> <span>posn</span><span>;</span>

  <span>float</span> <span>wheelScale</span> <span>=</span> <span>i</span> <span>!=</span> <span>0</span> <span>&amp;&amp;</span> <span>i</span> <span>!=</span> <span>2</span> <span>?</span> <span>modelInfo</span><span>-&gt;</span><span>m_frontWheelScale</span> <span>:</span> <span>modelInfo</span><span>-&gt;</span><span>m_rearWheelScale</span><span>;</span>

  <span>posn</span><span>.</span><span>z</span> <span>+=</span> <span>pHandling</span><span>-&gt;</span><span>fSuspensionLowerLimit</span> <span>-</span> <span>pHandling</span><span>-&gt;</span><span>fSuspensionUpperLimit</span><span>;</span>
  <span>posn</span><span>.</span><span>z</span> <span>-=</span> <span>wheelScale</span> <span>/</span> <span>2.0</span><span>;</span>
  <span>colModel</span><span>-&gt;</span><span>lines</span><span>[</span><span>i</span><span>].</span><span>p1</span> <span>=</span> <span>posn</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>Since I knew <code>colModel-&gt;lines[0].p1</code> is corrupted, this meant either <code>pHandling-&gt;fSuspensionLowerLimit</code>, <code>pHandling-&gt;fSuspensionUpperLimit</code>, or <code>wheelScale</code> were bogus.
Skimmer’s <code>handling.cfg</code> values didn’t seem any different to any other plane in the game, but then I spotted something interesting in <code>vehicles.ide</code>. Skimmer’s line looks like this:</p>
<div><pre><code>460, 	skimmer,	skimmer, 	plane,		SEAPLANE,	SKIMMER,	null,	ignore,		5,	0,	0
</code></pre></div>

<p>Compare this line to any other plane in the game, in this example Rustler:</p>
<div><pre><code>476, 	rustler, 	rustler, 	plane, 		RUSTLER, 	RUSTLER,	rustler, ignore,		10,	0,	0,		-1, 0.6, 0.3,		-1
</code></pre></div>

<p>The line is shorter and it’s missing the last four parameters, moreover, <strong>two of the missing parameters are the front and rear wheel scale!</strong>
This is normal for boats, but Skimmer is <strong>the only</strong> plane to omit these parameters.</p>

<p>Does re-adding those parameters fix the seaplane? Unsurprisingly, it does!</p>

<figure><a href="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/gta_sa_3hbE1KfRUe.jpg" target="_blank"><img src="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/screens/thumb/gta_sa_3hbE1KfRUe.jpg" alt="" width="1024" height="576"></a></figure>
<h2 id="but-why-and-how">
  
  
    But why and how? <a href="#but-why-and-how"></a>
  
  
</h2>
    

<p>I have a likely explanation for why Rockstar made this specific mistake in the data to begin with – in Vice City, Skimmer was defined as a <strong>boat</strong>,
and therefore did not have those values defined by design!
When in San Andreas they changed Skimmer’s vehicle type to a <strong>plane</strong>, someone forgot to add those now-required extra parameters.
Since this game seldom verifies the completeness of its data, this mistake simply slipped under the radar.</p>

<p>Problem solved? Not quite yet, as for SilentPatch, I need to fix it from the code. A peek into the pseudocode of <code>CFileLoader::LoadVehicleObject</code>
reveals the true nature of this bug: the game assumes all parameters are always present in the definition line and it doesn’t default any but two parameters,
nor it checks the return value of <code>sscanf</code>, and so in the case of all boats and Skimmer, those parameters remained uninitialized:</p>
<div><pre><code><span>void</span> <span>CFileLoader</span><span>::</span><span>LoadVehicleObject</span><span>(</span><span>const</span> <span>char</span><span>*</span> <span>line</span><span>)</span>
<span>{</span>
  <span>int</span> <span>objID</span> <span>=</span> <span>-</span><span>1</span><span>;</span>
  <span>char</span> <span>modelName</span><span>[</span><span>24</span><span>];</span>
  <span>char</span> <span>texName</span><span>[</span><span>24</span><span>];</span>
  <span>char</span> <span>type</span><span>[</span><span>8</span><span>];</span>
  <span>char</span> <span>handlingID</span><span>[</span><span>16</span><span>];</span>
  <span>char</span> <span>gameName</span><span>[</span><span>32</span><span>];</span>
  <span>char</span> <span>anims</span><span>[</span><span>16</span><span>];</span>
  <span>char</span> <span>vehClass</span><span>[</span><span>16</span><span>];</span>
  <span>int</span> <span>frq</span><span>;</span>
  <span>int</span> <span>flags</span><span>;</span>
  <span>int</span> <span>comprules</span><span>;</span>
  <span>int</span> <span>wheelModelID</span><span>;</span> <span>// Uninitialized!</span>
  <span>float</span> <span>frontWheelScale</span><span>,</span> <span>rearWheelScale</span><span>;</span> <span>// Uninitialized!</span>
  <span>int</span> <span>wheelUpgradeClass</span> <span>=</span> <span>-</span><span>1</span><span>;</span> <span>// Funny enough, this one IS initialized</span>

  <span>int</span> <span>TxdSlot</span> <span>=</span> <span>CTxdStore</span><span>::</span><span>FindTxdSlot</span><span>(</span><span>"vehicle"</span><span>);</span>
  <span>if</span> <span>(</span><span>TxdSlot</span> <span>==</span> <span>-</span><span>1</span><span>)</span>
  <span>{</span>
    <span>TxdSlot</span> <span>=</span> <span>CTxdStore</span><span>::</span><span>AddTxdSlot</span><span>(</span><span>"vehicle"</span><span>);</span>
  <span>}</span>
  <span>sscanf</span><span>(</span><span>line</span><span>,</span> <span>"%d %s %s %s %s %s %s %s %d %d %x %d %f %f %d"</span><span>,</span> <span>&amp;</span><span>objID</span><span>,</span> <span>modelName</span><span>,</span> <span>texName</span><span>,</span> <span>type</span><span>,</span> <span>handlingID</span><span>,</span>
        <span>gameName</span><span>,</span> <span>anims</span><span>,</span> <span>vehClass</span><span>,</span> <span>&amp;</span><span>frq</span><span>,</span> <span>&amp;</span><span>flags</span><span>,</span> <span>&amp;</span><span>comprules</span><span>,</span> <span>&amp;</span><span>wheelModelID</span><span>,</span> <span>&amp;</span><span>frontWheelScale</span><span>,</span> <span>&amp;</span><span>rearWheelScale</span><span>,</span>
        <span>&amp;</span><span>wheelUpgradeClass</span><span>);</span>

  <span>// More processing here...</span>
<span>}</span>
</code></pre></div>

<p>Given the symptoms, those uninitialized values must have evaluated to small, valid floating point values all the way until now,
whereas with Windows 11 24H2 they got out of hand and tripped the bounding box calculations.</p>

<p>In SilentPatch, the fix is easy – I wrap this call to <code>sscanf</code> and provide reasonable defaults for the final four parameters:</p>
<div><pre><code><span>static</span> <span>int</span> <span>(</span><span>*</span><span>orgSscanf</span><span>)(</span><span>const</span> <span>char</span><span>*</span> <span>s</span><span>,</span> <span>const</span> <span>char</span><span>*</span> <span>format</span><span>,</span> <span>...);</span>
<span>static</span> <span>int</span> <span>sscanf_Defaults</span><span>(</span><span>const</span> <span>char</span><span>*</span> <span>s</span><span>,</span> <span>const</span> <span>char</span><span>*</span> <span>format</span><span>,</span> <span>int</span><span>*</span> <span>objID</span><span>,</span> <span>char</span><span>*</span> <span>modelName</span><span>,</span> <span>char</span><span>*</span> <span>texName</span><span>,</span> <span>char</span><span>*</span> <span>type</span><span>,</span>
      <span>char</span><span>*</span> <span>handlingID</span><span>,</span> <span>char</span><span>*</span> <span>gameName</span><span>,</span> <span>char</span><span>*</span> <span>anims</span><span>,</span> <span>char</span><span>*</span> <span>vehClass</span><span>,</span> <span>int</span><span>*</span> <span>frequency</span><span>,</span> <span>int</span><span>*</span> <span>flags</span><span>,</span> <span>int</span><span>*</span> <span>comprules</span><span>,</span>
      <span>int</span><span>*</span> <span>wheelModelID</span><span>,</span> <span>float</span><span>*</span> <span>frontWheelSize</span><span>,</span> <span>float</span><span>*</span> <span>rearWheelSize</span><span>,</span> <span>int</span><span>*</span> <span>wheelUpgradeClass</span><span>)</span>
<span>{</span>
  <span>*</span><span>wheelModelID</span> <span>=</span> <span>-</span><span>1</span><span>;</span>
  <span>// Why 0.7 and not 1.0, I'll explain later</span>
  <span>*</span><span>frontWheelSize</span> <span>=</span> <span>0.7</span><span>;</span>
  <span>*</span><span>rearWheelSize</span> <span>=</span> <span>0.7</span><span>;</span>
  <span>*</span><span>wheelUpgradeClass</span> <span>=</span> <span>-</span><span>1</span><span>;</span>

  <span>return</span> <span>orgSscanf</span><span>(</span><span>s</span><span>,</span> <span>format</span><span>,</span> <span>objID</span><span>,</span> <span>modelName</span><span>,</span> <span>texName</span><span>,</span> <span>type</span><span>,</span> <span>handlingID</span><span>,</span> <span>gameName</span><span>,</span> <span>anims</span><span>,</span> <span>vehClass</span><span>,</span>
                  <span>frequency</span><span>,</span> <span>flags</span><span>,</span> <span>comprules</span><span>,</span> <span>wheelModelID</span><span>,</span> <span>frontWheelSize</span><span>,</span> <span>rearWheelSize</span><span>,</span> <span>wheelUpgradeClass</span><span>);</span>
<span>}</span>
</code></pre></div>

<p><a href="https://github.com/CookiePLMonster/SilentPatch/commit/881aded7237067202025934796cc2313104cba8c" target="_blank">Fixed!</a>
Another compatibility win for the patch.</p><hr>

<p>If this was a regular bug, I would’ve ended the post right here. However, in the case of this rabbit hole, the discovery of this fix only
raised more questions – why did this break only now? What made the game work fine despite of this issue for over twenty years,
before a new update to Windows 11 suddenly challenged this status quo?</p>

<p><strong>Finally, is this somehow caused by a problem in Windows 11 24H2, or is this just an unfortunate coincidence, stars aligning just right?</strong></p>
<h2 id="here-be-dragons--the-true-root-cause">
  
  
    Here be dragons – the true root cause <a href="#here-be-dragons--the-true-root-cause"></a>
  
  
</h2>
    
<h2 id="diving-deeper">
  
  
    Diving deeper <a href="#diving-deeper"></a>
  
  
</h2>
    

<p>At this point, the working theory was that the uninitialized local variables in <code>CFileLoader::LoadVehicleObject</code>
happened to have reasonable values until <em>something</em> changed in Windows 11 24H2, and those values became “unreasonable”.
What I knew could <strong>not</strong> be the cause was the CRT (and thus, the <code>sscanf</code> call) – San Andreas uses a statically compiled CRT,
and therefore any OS-level hotfixes wouldn’t apply to it.
However, considering the plethora of security enhancements in Windows 11, I couldn’t rule out that one of those enhancements,
for example, <strong>Kernel-mode Hardware-enforced Stack Protection</strong>, ends up scrambling the stack in a way the game’s bugged function doesn’t like.</p>

<p>I set up an experiment where I broke into a debugger before a <code>sscanf</code> call when parsing Skimmer’s line (vehicle ID 460) specifically,
and the observed variable values supported that claim. On my Windows 10 machine, they happened to be both <code>0.7</code>:</p>
<div><pre><code>frontWheelSize  0x01779f14 {0.699999988}
rearWheelSize   0x01779f10 {0.699999988}
</code></pre></div>
<p>while on the Win11 24H2 VM, they are huge, similar in order of magnitude to the wrong values observed in the bounding box earlier.
The stack pointer has also shifted by 4 bytes for some reason, but that is unlikely to be related – and it’s likely caused by some changes
to the thread startup boilerplate inside <code>kernel32.dll</code>:</p>
<div><pre><code>frontWheelSize  0x01779f18 {7.84421263e+33}
rearWheelSize   0x01779f14 {4.54809690e-38}
</code></pre></div>

<p>This got me curious - <code>0.7</code> is a bit “too good” of a value to be a result of interpreting random garbage from the stack as a floating point;
what’s more likely is that it’s an actual floating point value that was sitting on the stack in exactly the right spot.
I then inspected <code>vehicles.ide</code> for TopFun – the vehicle defined directly before Skimmer. Sure enough, its wheel scale is <code>0.7</code>!</p>
<div><pre><code>459,	topfun,		topfun,		car,		TOPFUN,		TOPFUN,		van,	ignore,		1,	0,	0,		-1, 0.7, 0.7,		-1
</code></pre></div>

<p><code>vehicles.ide</code> is parsed in order, in a function working similarly to this (pseudocode):</p>
<div><pre><code><span>void</span> <span>CFileLoader</span><span>::</span><span>LoadObjectTypes</span><span>(</span><span>const</span> <span>char</span><span>*</span> <span>filename</span><span>)</span>
<span>{</span>
  <span>// Open the file...</span>

  <span>while</span> <span>((</span><span>line</span> <span>=</span> <span>fgets</span><span>(</span><span>file</span><span>))</span> <span>!=</span> <span>NULL</span><span>)</span>
  <span>{</span>
    <span>// Parse the section indicators...</span>
    <span>switch</span> <span>(</span><span>section</span><span>)</span>
    <span>{</span>
      <span>// Different sections...</span>
    <span>case</span> <span>SECTION_CARS</span><span>:</span>
      <span>LoadVehicleObject</span><span>(</span><span>line</span><span>);</span>
      <span>break</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre></div>

<p>Seems like the code somehow persisted the stale wheel scale values, so Skimmer ends up getting the same wheel scales as Topfun.
I set up another experiment to verify this claim:</p>
<ol>
  <li>Set up a breakpoint before <code>sscanf</code> again, but this time before Topfun’s line (vehicle ID 459) gets parsed.</li>
  <li>Set up write breakpoints on <code>frontWheelScale</code> and <code>rearWheelScale</code>.</li>
  <li>Resume execution until the game gets to parsing the next vehicle definition.</li>
</ol>

<p>Windows 10 verified my claim – <strong>nothing wrote to these two stack values between the calls to <code>CFileLoader::LoadVehicleObject</code>,
so the function’s effective behavior was to preserve (albeit, unintentionally) the wheel scale values between the consecutive calls!</strong></p>

<p>Repeating the same exercise on Windows 11 24H2 triggered the write breakpoint! However, it wasn’t anywhere close to any security feature:
the stack values were overwritten by… <code>LeaveCriticalSection</code> inside <code>fgets</code>:</p>
<div><pre><code>&gt;	ntdll.dll!_RtlpAbFindLockEntry@4()	Unknown
 	ntdll.dll!_RtlAbPostRelease@8()	Unknown
 	ntdll.dll!_RtlLeaveCriticalSection@4()	Unknown
 	gta_sa.exe!fgets()	Unknown
</code></pre></div>

<p>Seems like a change in Windows 11 24H2 modified the way <a href="https://learn.microsoft.com/en-us/windows/win32/sync/critical-section-objects" target="_blank">Critical Section Objects</a>
work internally, and the new code unlocking the critical section uses more stack space than the old one.
I ran one more experiment, comparing the changes to the stack space that happened after <code>sscanf</code> inside <code>LoadVehicleObject</code>, until the next invocation of this function.
Changed values are highlighted in red:</p>

<figure>
<figure><a href="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/stack-win10.jpg" target="_blank"><img src="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/stack-win10.jpg" alt="" width="1190" height="611"></a><figcaption>On Windows 10, the stack values didn’t change much between the calls.
        In fact, you can spot the two values of <code>0x3F449BA6</code> = <code>0.768</code> (highlighted on the screenshot).
        They correspond to Landstalker’s wheel scales.</figcaption></figure>

<figure><a href="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/stack-win11.jpg" target="_blank"><img src="https://cookieplmonster.github.io/assets/img/posts/sa-win11-24h2-bug/stack-win11.jpg" alt="" width="1190" height="611"></a><figcaption>On Windows 11 24H2, more stack space was modified by a new implementation of Critical Sections.
                The wheel scales are nowhere to be found, as they were overwritten!</figcaption></figure>

</figure>

<p>This is the exact proof I needed – notice that in the Windows 10 run, some of the local variables are even still visible to the human eye (like the <code>normal</code> vehicle class),
while in Windows 11, they are completely gone. It’s also worth pointing out that even in Windows 10, <strong>the very next local variable</strong> after the wheel scales has been overwritten
by <code>LeaveCriticalSection</code>, which means the game was <strong>4 bytes away</strong> from hitting this exact bug years earlier! The luck at display here is insane.</p>
<h2 id="whose-stack-is-it-anyway">
  
  
    Whose Stack Is It Anyway? <a href="#whose-stack-is-it-anyway"></a>
  
  
</h2>
    

<p>To illustrate why the game got away with this bug for so long, I need to show how the stack changes across calls.
Let’s say the stack looks like this after the call to <code>LoadVehicleObject</code>. <strong>Emphasis</strong> on the local variables we’re interested in:</p>

<table>
  <tbody>
    <tr>
      <td>return address from <code>LoadObjectTypes</code></td>
    </tr>
    <tr>
      <td>local variables of <code>LoadObjectTypes</code>…</td>
    </tr>
    <tr>
      <td>return address from <code>LoadVehicleObject</code></td>
    </tr>
    <tr>
      <td>local variables of <code>LoadVehicleObject</code>…</td>
    </tr>
    <tr>
      <td><strong>frontWheelScale</strong></td>
    </tr>
    <tr>
      <td><strong>rearWheelScale</strong></td>
    </tr>
    <tr>
      <td>more local variables…</td>
    </tr>
  </tbody>
</table>

<p>The call to <code>fgets</code>, and consequently <code>LeaveCriticalSection</code>, that follows the call to <code>LoadVehicleObject</code>, reuses the stack space previously occupied by that function,
as the lifetime of the function stack is limited to the duration of the function itself and once the function is done, this space is up for grabs again.
On Windows 10, the stack looked like this once <code>fgets</code> and <code>LeaveCriticalSection</code> returned:</p>

<table>
  <tbody>
    <tr>
      <td>return address from <code>LoadObjectTypes</code></td>
    </tr>
    <tr>
      <td>local variables of <code>LoadObjectTypes</code>…</td>
    </tr>
    <tr>
      <td>return address from <code>fgets</code></td>
    </tr>
    <tr>
      <td>local variables of <code>fgets</code>…</td>
    </tr>
    <tr>
      <td>return address from <code>LeaveCriticalSection</code></td>
    </tr>
    <tr>
      <td>local variables of <code>LeaveCriticalSection</code>…</td>
    </tr>
    <tr>
      <td><strong>frontWheelScale</strong></td>
    </tr>
    <tr>
      <td><strong>rearWheelScale</strong></td>
    </tr>
    <tr>
      <td>more local variables…</td>
    </tr>
  </tbody>
</table>

<p><span>Highlighted parts</span> overwrite what used to be the stack space of <code>LoadVehicleObject</code>,
but notice how it doesn’t reach the area of the stack where the wheel scales resided.
In Windows 11 24H2, <code>LeaveCriticalSection</code> uses more stack space, so the stack space instead looks more like this:</p>

<table>
  <tbody>
    <tr>
      <td>return address from <code>LoadObjectTypes</code></td>
    </tr>
    <tr>
      <td>local variables of <code>LoadObjectTypes</code>…</td>
    </tr>
    <tr>
      <td>return address from <code>fgets</code></td>
    </tr>
    <tr>
      <td>local variables of <code>fgets</code>…</td>
    </tr>
    <tr>
      <td>return address from <code>LeaveCriticalSection</code></td>
    </tr>
    <tr>
      <td>local variables of <code>LeaveCriticalSection</code>…</td>
    </tr>
    <tr>
      <td><strong>frontWheelScale is overwritten!</strong></td>
    </tr>
    <tr>
      <td><strong>rearWheelScale is overwritten!</strong></td>
    </tr>
    <tr>
      <td>more local variables…</td>
    </tr>
  </tbody>
</table>

<p>Parts of the stack <span>highlighted in red</span> are now also scrambled
when in the past they were left intact; those parts include the wheel scales read by the previous call to <code>LoadVehicleObject</code>!
This in turn exposes the bug caused by those variables being uninitialized, and since <code>sscanf</code> can’t read those values from Skimmer’s <code>vehicles.ide</code> definition,
they are kept as-is in garbage form, and propagate further to the vehicle’s data.</p>
<h2 id="what-are-the-odds-this-only-broke-now-darn-windows-11">
  
  
    What are the odds this only broke now? Darn Windows 11! <a href="#what-are-the-odds-this-only-broke-now-darn-windows-11"></a>
  
  
</h2>
    

<p>I want to make it clear: <strong>all these findings prove that the bug is NOT an issue with Windows 11 24H2,
as things like the way the stack is used by internal WinAPI functions are not contractual and they may change at any time, with no prior notice</strong>.
The real issue here is the game relying on undefined behavior (uninitialized local variables), and to be honest,
I’m shocked that the game didn’t hit this bug on so many OS versions, although as I pointed out earlier, it was extremely close.
San Andreas still supported Windows 98, which means it got away with this bug in <strong>at least</strong> a dozen different Windows versions <strong>and</strong> many more releases of Wine!</p>

<p>…or, did it? I found it hard to believe that the game would never hit this issue on any of the many, many platforms it released on,
so I looked into the binary files of some other releases. While this bug was <strong>not</strong> fixed in the official 1.01 PC patch, it <strong>was</strong> fixed in the original Xbox release,
where a “reasonable default” of <code>1.0</code> was added to the code, much like in my fix. This fix was then “inherited” by many future versions of San Andreas, including:</p>
<ul>
  <li>Steam 3.0, newsteam, and RGL, as they were all based on the Xbox branch of the code.</li>
  <li>Any releases from War Drum Studios, including Android, X360, and PS3.</li>
  <li>The Definitive Edition.</li>
</ul>

<p>However, unlike Rockstar, I decided to use the wheel scale of <code>0.7</code> instead of <code>1.0</code> as a default, for multiple reasons:</p>
<ol>
  <li>This is the effective wheel scale Skimmer had on PC (and possibly PS2) until now since that’s the wheel scale of Topfun.</li>
  <li>Two other non-boat vehicles that float on water, Sea Sparrow and Vortex, both have a wheel scale of <code>0.7</code>.</li>
  <li>Many cars in the game have a wheel scale of <code>0.7</code>.</li>
</ol>
<h2 id="i-want-this-fixed-in-my-game">
  
  
    I want this fixed in my game! <a href="#i-want-this-fixed-in-my-game"></a>
  
  
</h2>
    

<p>The code fix will be included in <a href="https://github.com/CookiePLMonster/SilentPatch/milestone/3" target="_blank">the next SilentPatch hotfix</a>,
but for now, you may easily fix it yourself by editing <code>vehicles.ide</code>:</p>
<ol>
  <li>In your San Andreas directory, open <code>data\vehicles.ide</code> with Notepad.</li>
  <li>Scroll down to Skimmer’s line beginning with <code>460, 	skimmer</code>.</li>
  <li>Replace the original line with:
    <div><pre><code>460, 	skimmer,	skimmer, 	plane,		SEAPLANE,	SKIMMER,	null,	ignore,		5,	0,	0,		-1, 0.7, 0.7,		-1
</code></pre></div>
  </li>
  <li>Save the file.</li>
</ol>
<h2 id="final-word">
  
  
    Final word <a href="#final-word"></a>
  
  
</h2>
    

<p>This was the most interesting bug I’ve encountered for a while. I initially had a hard time believing that a bug like this would directly tie to a specific OS release,
but I was proven completely wrong. At the end of the day, it was a simple bug in San Andreas and this function should have never worked right,
and yet, at least on PC it hid itself for two decades.</p>

<p>This is an interesting lesson in compatibility: even changes to the stack layout of the internal implementations can have compatibility implications if an application
is bugged and unintentionally relies on a specific behavior. This is also not the first time I encountered issues like this: regular visitors might remember
<a href="https://cookieplmonster.github.io/mods/bully/">Bully: Scholarship Edition</a> which famously broke on Windows 10, for very similar reasons. Just like in this case,
Bully should have never worked properly to begin with, but instead, it got away with making incorrect assumptions for years, before changes in Windows 10 finally
made it run out of luck.</p>

<p>Yet again, we are reminded to:</p>
<ul>
  <li><strong>Validate your input data</strong> – San Andreas was notoriously bad at this, and ultimately this was the main reason why an incomplete config line remained unnoticed.</li>
  <li><strong>Not ignore the compilation warnings</strong> – this code most likely threw a warning in the original code that was either ignored or disabled!</li>
</ul>

<p>In the end, the GTA players are lucky: in many other games, issues like this would’ve remained unfixed and they’d become a folk legend.
Thankfully, GTAs are moddable and well understood, so we can act upon problems like this and ensure the game stays functional for many more years to come.</p><hr>


    
  </section>


  

  
  

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How I Blog with Obsidian, Hugo, GitHub, and Cloudflare – Zero Cost, Fully Owned (234 pts)]]></title>
            <link>https://ingau.me/blog/how-i-write-my-blogs-in-obsidian-and-publish-instantly/</link>
            <guid>43771645</guid>
            <pubDate>Wed, 23 Apr 2025 13:00:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ingau.me/blog/how-i-write-my-blogs-in-obsidian-and-publish-instantly/">https://ingau.me/blog/how-i-write-my-blogs-in-obsidian-and-publish-instantly/</a>, See on <a href="https://news.ycombinator.com/item?id=43771645">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <p>I’ve been using Obsidian for all my writing lately, and it’s been a game changer. The local-first model means everything lives as plain text on my machine, and with the Minimal theme, the interface stays clean and distraction-free.</p>
<p>My vault lives in iCloud (Dropbox or Google Drive work too), so notes sync seamlessly across devices - I often start drafts on my phone and finish them later on my laptop.</p>
<p>For publishing, I use Hugo with the Bear Blog theme (fast, minimal), and deploy via GitHub and Cloudflare Pages. This stack gives me full control: no subscriptions, no vendor lock-in, and no risk of platforms disappearing or changing policies.</p>
<p>If you:</p>
<ul>
<li>Use (or want to try) Obsidian</li>
<li>Don’t mind a bit of technical setup</li>
<li>Prefer writing in plain text with Git-based version control</li>
<li>Want a fast, cost-free, portable publishing flow</li>
</ul>
<p>Then this setup might be exactly what you’re looking for. Once set up, publishing is as simple as toggling a draft flag and pushing to GitHub.</p>
<p><img src="https://ingau.me/images/obsidian-publish.png" alt="Screenshot of my Obsidian vault"></p>
<h2 id="setting-up-your-system">Setting Up Your System</h2>
<p>This post is a <strong>high-level outline</strong> of how it all fits together. It’s not a tutorial, but if you’re familiar with basic dev tools, it should be easy to follow. And if anything’s unclear, LLMs like ChatGPT or Claude are great for filling in the gaps.</p>
<h3 id="1-install-and-set-up-hugo">1. Install and Set Up Hugo</h3>
<p>First, you’ll need to <a href="https://gohugo.io/installation/">install Hugo</a> on your machine. Once installed, create a new site:</p>
<pre tabindex="0"><code>hugo new site myblog
cd myblog
</code></pre><p>Then add the Bear Blog theme (or your preferred theme):</p>
<pre tabindex="0"><code>git init
git submodule add https://github.com/janraasch/hugo-bearblog.git themes/hugo-bearblog
</code></pre><p>Update your <code>config.toml</code> file to use the theme. See the <a href="https://github.com/janraasch/hugo-bearblog">Bear Blog theme documentation</a> for configuration options.</p>
<h3 id="2-connect-obsidian-to-hugo">2. Connect Obsidian to Hugo</h3>
<p>This is the key part. Hugo has a specific folder structure, and you want to write your posts in the <code>content</code> folder. Inside that folder, I created a <code>blog</code> subfolder for all my posts.</p>
<p>So my folder structure looks like this:</p>
<pre tabindex="0"><code>myblog/
  ├── content/
  │   ├── blog/   &lt;- This is where I write my posts
  │   └── ...
  └── ...
</code></pre><p>To set up Obsidian:</p>
<ol>
<li>Open Obsidian</li>
<li>Click “Open folder as vault”</li>
<li>Navigate to your Hugo site’s blog folder (myblog/content/blog)</li>
<li>Select this folder</li>
</ol>
<p>This way, everything you write in Obsidian goes directly into the right folder for Hugo to process.</p>
<h3 id="3-set-up-front-matter-template">3. Set Up Front Matter Template</h3>
<p>In Obsidian, make sure that your posts includes the necessary Hugo front matter:</p>
<pre tabindex="0"><code>+++
title= "Your Post Title"
date= YYYY-MM-DD
tags= ["post"]
draft= true
+++
</code></pre><p>The <code>draft: true</code> tag is crucial - this is what you’ll toggle to <code>false</code> when you’re ready to publish.</p>
<h3 id="4-preview-posts-locally">4. Preview Posts Locally</h3>
<p>While writing, I use Hugo’s local server with draft visibility:</p>
<p><code>hugo server -D</code></p>
<p>This lets me see how everything looks in-browser before pushing live.</p>
<h3 id="5-connect-to-github">5. Connect to GitHub</h3>
<p>Create a new GitHub repository for your blog, then connect your local Hugo site:</p>
<pre tabindex="0"><code>git remote add origin https://github.com/yourusername/yourblog.git
git add .
git commit -m "Initial commit"
git push -u origin main
</code></pre><p>There are plenty of <a href="https://docs.github.com/en/get-started/quickstart/hello-world">GitHub tutorials</a> if you need help with this step.</p>
<h3 id="6-set-up-cloudflare-pages">6. Set Up Cloudflare Pages</h3>
<ol>
<li>Sign up for a <a href="https://dash.cloudflare.com/sign-up">Cloudflare account</a> if you don’t have one</li>
<li>Go to the Pages section and create a new project</li>
<li>Connect to your GitHub account and select your blog repository</li>
<li>For build settings:
<ul>
<li>Build command: <code>hugo --minify</code></li>
<li>Build output directory: <code>public</code></li>
</ul>
</li>
</ol>
<p>Cloudflare’s <a href="https://developers.cloudflare.com/pages/framework-guides/deploy-a-hugo-site/">own documentation</a> covers this process well.</p>
<h2 id="the-publishing-workflow">The Publishing Workflow</h2>
<p>Once everything is set up, publishing is simple:</p>
<ol>
<li>Write your post in Obsidian</li>
<li>When ready to publish, change <code>draft: true</code> to <code>draft: false</code> in the front matter</li>
<li>Commit and push to GitHub:</li>
</ol>
<pre tabindex="0"><code>git add .
git commit -m "Publish new post"
git push
</code></pre><p>Cloudflare Pages will automatically detect the change and rebuild your site, typically within a minute or two.</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>This setup takes a bit of initial work, but the payoff is enormous. Once it’s all set up, this workflow fades into the background - I just write, commit, and publish. No friction, no fees, and everything stays in my hands. If you’re looking for a lightweight, sustainable way to blog, this might be worth trying.</p>
 </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Show HN: Node.js video tutorials where you can edit and run the code (162 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43771365</link>
            <guid>43771365</guid>
            <pubDate>Wed, 23 Apr 2025 12:35:49 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43771365">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="43771365">
      <td><span></span></td>      <td><center><a id="up_43771365" href="https://news.ycombinator.com/vote?id=43771365&amp;how=up&amp;goto=item%3Fid%3D43771365"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=43771365">Show HN: Node.js video tutorials where you can edit and run the code</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_43771365">104 points</span> by <a href="https://news.ycombinator.com/user?id=somebee">somebee</a> <span title="2025-04-23T12:35:49 1745411749"><a href="https://news.ycombinator.com/item?id=43771365">3 hours ago</a></span> <span id="unv_43771365"></span> | <a href="https://news.ycombinator.com/hide?id=43771365&amp;goto=item%3Fid%3D43771365">hide</a> | <a href="https://hn.algolia.com/?query=Show%20HN%3A%20Node.js%20video%20tutorials%20where%20you%20can%20edit%20and%20run%20the%20code&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=43771365&amp;auth=f2fed84ff1e053cd2fd7c67a4f2106ff939b6f87">favorite</a> | <a href="https://news.ycombinator.com/item?id=43771365">35&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><div><p>Hey HN,</p><p>I'm Sindre, CTO of Scrimba (YC S20). We originally launched Scrimba to make video learning more interactive for aspiring frontend developers. So instead of passively watching videos, you can jump in an experiment with the code directly inside the video player. Since launch, almost two million people have used Scrimba to grow their skills.</p><p>However, one limitation is that we've only supported frontend code, as our interactive videos run in the browser, whereas most of our learners want to go fullstack—building APIs, handling auth, working with databases, and so forth.</p><p>To fix this, we spent the last 6 months integrating StackBlitz WebContainers into Scrimba. This enables a full Node.js environment—including a terminal, shell, npm access, and a virtual file system—directly inside our video player. Everything runs in the browser.</p><p>Here is a 2-minute recorded demo: <a href="https://scrimba.com/s08dpq3nom">https://scrimba.com/s08dpq3nom</a></p><p>If you want to see more, feel free to enroll into any of the seven fullstack courses we've launched so far, on subject like Node, Next, Express, SQL, Vite, and more. We've opened them up for Hacker News today so that you don't even need to create an account to watch the content:</p><p><a href="https://scrimba.com/fullstack">https://scrimba.com/fullstack</a></p><p><i>Other notable highlights about our "IDE videos":</i></p><p>- Based on events (code edits, cursor moves, etc) instead of pixels</p><p>- Roughly 100x smaller than traditional videos</p><p>- Recording is simple: just talk while you code</p><p>- Can be embedded in blogs, docs, or courses, like MDN does here: <a href="https://developer.mozilla.org/en-US/curriculum/core/css-fundamentals/" rel="nofollow">https://developer.mozilla.org/en-US/curriculum/core/css-fund...</a></p><p>- Entirely built in Imba, a language I created myself: <a href="https://news.ycombinator.com/item?id=28207662">https://news.ycombinator.com/item?id=28207662</a></p><p>We think this format could be useful for open-source maintainers and API-focused teams looking to create interactive docs or walkthroughs. Our videos are already embedded by MDN, LangChain, and Coursera.</p><p>If you maintain a library or SDK and want an interactive video about it, let us know—happy to record one for free that you can use however you like.</p><p>Would love to answer any questions or hear people's feedback!</p></div></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Geocoding APIs compared: Pricing, free tiers and terms of use (116 pts)]]></title>
            <link>https://www.bitoff.org/geocoding-apis-comparison/</link>
            <guid>43770446</guid>
            <pubDate>Wed, 23 Apr 2025 10:21:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bitoff.org/geocoding-apis-comparison/">https://www.bitoff.org/geocoding-apis-comparison/</a>, See on <a href="https://news.ycombinator.com/item?id=43770446">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <div role="note">
<p role="heading" aria-level="2"><strong>Author's note</strong></p>
<p>This article was originally <a href="https://web.archive.org/web/20230810062017/https://superface.ai/blog/geocoding-apis-comparison-1">published</a> on <a href="https://superface.ai/">Superface</a> blog before the pivot to agentic tooling platform and is republished here with company's permission.</p>
<p>I am no longer working with geocoding APIs and the content of this article may be outdated.</p>
</div>
<p>Geocoding is the process of converting an address to geolocation coordinates (latitude and longitude). <em>Reverse</em> geocoding is the opposite: assigning a street address to the given coordinates. Examples of geocoding include:</p>
<ul>
<li>Obvious ones, like finding a location on a map or displaying an address of a selected location.</li>
<li>Visualization of customer data.</li>
<li>Working with coordinates stored in photos.</li>
<li>Local search, such as displaying events or restaurants in the user’s proximity or within a city radius.</li>
</ul>
<p>How do you build this feature? The easiest way is to use a geocoding API, which often includes reverse geocoding and address data cleaning functions as well.</p>
<p>The good news is that there isn’t a shortage of geocoding API providers to choose from. The bad news is that you have to pick one. Which is why we’re here: to help you decide on the most suitable geocoding API for your project.</p>
<h2 id="comparison-criteria" tabindex="-1">Comparison criteria</h2>
<p>In this article, we will look at the pricing model, and terms of use:</p>
<ul>
<li><strong>Pricing:</strong> Most geocoding API providers have a volume-based pricing. So, we will look at pricing tiers and price per API request.</li>
<li><strong>Free tier:</strong> Typically there is a free or trial tier with a limited number of requests or limited functionality. This can be useful for testing the API or even keeping your costs low for personal or low-budget projects.</li>
<li><strong>Data terms of use:</strong> It’s essential to know if there are any limitations about the data usage: Does the provider require displaying an attribution? Is it even okay to use the data for commercial use?</li>
</ul>
<p>In the follow-up articles, we will also explore additional criteria:</p>
<ul>
<li><strong>Accuracy:</strong> It doesn’t matter whether the API is cheap if the results are useless. So, we will do a head-to-head comparison of various queries and compare the results.</li>
<li><strong>Performance:</strong> If your project requires displaying the geocoding results in real-time, then every millisecond matters.</li>
</ul>
<h2 id="what's-superface-and-why-is-this-comparison-neutral" tabindex="-1">What’s Superface and why is this comparison neutral</h2>
<p>At Superface we don’t provide a geocoding API. Instead, we are building a universal API client which lets you connect to any API and any provider – directly from your application without passing the data through our servers. You can even use multiple providers behind a single interface without the need to study the documentation for each or keep up with the API changes.</p>
<p>Geocoding is particularly one domain where your project can benefit from using multiple API providers. Whether it’s for accuracy, cost management, or legal reasons. Our goal is to provide you with accurate and impartial information about geocoding APIs, and we will show you how you can use them immediately with OneSDK, our API client.</p>
<p>Oh, and one more thing: OneSDK is free and <a href="https://github.com/superfaceai/one-sdk-js">open-source</a>, it doesn’t matter whether you will use it for geocoding twice or a billion times. Our business is built around providing the connectors to the APIs and their long-term support, but not around the usage volume.</p>

<table>
<thead>
<tr>
<th>Provider</th>
<th>Free Requests</th>
<th>Rate Limit (requests per second)</th>
<th>Pricing (per 1,000 requests)</th>
<th>Additional Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>HERE</td>
<td>30,000/month</td>
<td>5</td>
<td>$0.83 up to 5M<br>$0.66 up to 10M</td>
<td></td>
</tr>
<tr>
<td>Google Maps</td>
<td>40,000/month ($200 credit)</td>
<td>50</td>
<td>$5 up to 100,000<br>$4 up to 500,000</td>
<td>Attribution &amp; Google Maps required</td>
</tr>
<tr>
<td>Azure Maps</td>
<td>5,000/month</td>
<td>500 (geocoding)<br>250 (reverse geocoding)</td>
<td>$4.50</td>
<td></td>
</tr>
<tr>
<td>OpenCage</td>
<td>2,500/day</td>
<td>1 (free)<br>15 (X-Small)<br>up to 40 (Large)</td>
<td>$0.17 (10,000 per day)<br>$0.11 (300,000 per day)<sup><a href="#fn1" id="fnref1">[1]</a></sup></td>
<td>Free trial for testing only<br>Monthly fixed pricing</td>
</tr>
<tr>
<td>TomTom Maps</td>
<td>2,500/day</td>
<td>5</td>
<td>$0.54</td>
<td></td>
</tr>
<tr>
<td>LocationIQ</td>
<td>5,000/day</td>
<td>2</td>
<td>$0.16 (10,000 per day)<br>$0.03 (1M per day)<sup><a href="#fn1" id="fnref1:1">[1:1]</a></sup></td>
<td>Free plan requires attribution<br>Monthly fixed pricing</td>
</tr>
<tr>
<td>Nominatim</td>
<td>n/a</td>
<td>1</td>
<td>n/a</td>
<td>Low-volume, noncommercial use only<br>Attribution required</td>
</tr>
</tbody>
</table>
<h3 id="here" tabindex="-1">HERE</h3>
<p><a href="https://www.here.com/get-started/pricing">HERE’s pricing</a> starts with the Limited Plan, which provides you with <strong>1,000 free requests per day</strong>, with a rate limit of <strong>5 requests per second</strong>.</p>
<p>If you provide payment information, you are upgraded to the Base Plan. The Base Plan removes the rate limit and sets you up for <strong>30,000 free requests per&nbsp;month</strong>. Above that, requests up to 5&nbsp;million are <strong>$0.830 per 1,000</strong>, and <strong>$0.660 per 1,000</strong> requests between 5 and 10&nbsp;million per&nbsp;month.</p>
<h3 id="google-maps-platform" tabindex="-1">Google Maps Platform</h3>
<p>Google Maps Platform requires you to provide billing details to use the Geocoding API, and provides you with <strong>$200 of free credit per month</strong>, which is good for <strong>40,000 free geocoding API requests</strong> (check the <a href="https://developers.google.com/maps/documentation/geocoding/usage-and-billing">Geocoding API Usage and Billing</a>).</p>
<p>If that’s not enough, the pricing starts at <strong>$5 per 1,000 requests</strong> up to 100,000 requests per month. Above that, the price gets lower to <strong>$4 per 1,000</strong> requests up to 500,000 requests.</p>
<p>Regardless of usage, there’s a rate limit of 50 requests per second. Google also <a href="https://developers.google.com/maps/documentation/geocoding/policies#map">prohibits displaying of geocoding results</a> on another map than Google Maps, and <a href="https://developers.google.com/maps/documentation/geocoding/policies#logo">requires displaying Google logo</a> for attribution.</p>
<h3 id="azure-maps" tabindex="-1">Azure Maps</h3>
<p>Azure Maps provides <strong>5,000 free requests per month</strong> (see the <a href="https://azure.microsoft.com/en-us/pricing/details/azure-maps/">pricing for Azure Maps Search</a>), and the <strong>price per 1,000 requests above that is $4.50</strong> (up to 500,000 requests).</p>
<p><a href="https://learn.microsoft.com/en-us/azure/azure-maps/azure-maps-qps-rate-limits">Queries are rate limited</a> to 500 per second for geocoding, and 250 per second for reverse geocoding.</p>
<h3 id="opencage" tabindex="-1">OpenCage</h3>
<p><a href="https://opencagedata.com/pricing">OpenCage pricing</a> is richer than for other services. You have a choice of purchasing a one-time requests package (valid up to one year), or subscribing to different usage tiers on a monthly or annual basis.</p>
<p>The free tier is intended only for testing and development and provides you with <strong>2,500 requests per day</strong>, rate limited to 1 request per second. The cheapest package costs <strong>$50 per month</strong> and comes with <strong>10,000 requests per day</strong> (about $0.17 per 1,000 requests) and a rate limit of 15 requests per second. The biggest pre-Enterprise package costs <strong>$1,000 per month</strong>, with <strong>300,000 requests per day</strong> and a rate limit of 40 requests per second (which is approx $0.11 per 1,000 requests).</p>
<p>One nice thing is that the daily request limit is “soft” – if you occasionally cross the limit, the service won’t be blocked, and you won’t be charged anything extra. Only if you repeatedly pass the limit OpenCage asks you to upgrade your plan for the next month.</p>
<h3 id="locationiq" tabindex="-1">LocationIQ</h3>
<p><a href="https://locationiq.com/pricing">LocationIQ pricing</a> is very similar to OpenCage's. You have a choice of plans paid on a monthly and annual basis, but no option to purchase a one-time requests package.</p>
<p>The free tier does allow commercial usage as long as you include a link in your application to LocationIQ. Furthermore, the free tier limit is doubled compared to OpenCage, with <strong>5,000 free requests</strong> allowed per day and a rate limit of 2 requests per second. The smallest package is basically the same as OpenCage's: it costs <strong>$49 per month</strong> and comes with <strong>10,000 requests per day</strong> (about $0.16 per 1,000 requests) and a rate limit of 15 requests per second. However, the biggest package includes <strong>1 million requests per day</strong> for <strong>$950 per month</strong> (about $0.03 per 1,000 requests).</p>
<p>Similar to OpenCage, LocationIQ has a “soft” limit for daily requests, allowing requests “upto an additional 100% of your daily limit”. For example, on the smallest package, you can occasionally perform 20,000 requests per day before getting an error.</p>
<h3 id="tomtom-maps-api" tabindex="-1">TomTom Maps API</h3>
<p>TomTom provides a generous free tier with <strong>2,500 requests per day</strong> available for commercial applications as well. Above that, <strong>1,000 requests cost €0.50 ($0.54)</strong>.</p>
<h3 id="nominatim" tabindex="-1">Nominatim</h3>
<p><a href="https://nominatim.org/">Nominatim</a> is a bit different from the other services on this list. It’s primarily an open-source project that uses data from <a href="https://www.openstreetmap.org/">OpenStreetMap</a>. And conversely, OpenStreetMap’s search is powered by Nominatim. You can (and should) run Nominatim <a href="https://nominatim.org/release-docs/latest/admin/Installation/">on your server</a>, but if you just want to try the API or have a low-volume hobby project, you’re welcome to use the Nominatim instance provided by OpenStreetMap.</p>
<p>However, pay close attention to its <a href="https://operations.osmfoundation.org/policies/nominatim/">usage policy</a>, in particular:</p>
<ul>
<li>Maximum of 1 request per second.</li>
<li>Identify your application using User-Agent or HTTP Referer headers.</li>
<li>Display <a href="https://wiki.osmfoundation.org/wiki/Licence/Attribution_Guidelines">attribution</a>.</li>
<li>Don’t resell the data.</li>
</ul>
<p>Nominatim is also used by some <a href="https://wiki.openstreetmap.org/wiki/Nominatim#Alternatives_/_Third-party_providers">commercial providers</a>, including OpenCage and LocationIQ.</p>
<h2 id="pricing-comparison" tabindex="-1">Pricing comparison</h2>
<p>While each service has different pricing tiers, we can compare the price based on the number of requests made. We’ve omitted Nominatim in this comparison, since it’s always free, but isn’t intended for commercial projects.</p>
<h3 id="small-usage-(up-to-30000-requests-month)" tabindex="-1">Small usage (up to 30,000 requests / month)</h3>
<ul>
<li>HERE: free</li>
<li>Google Maps Platform: free (with credit)</li>
<li>Azure Maps: $112.5/month</li>
<li>OpenCage: free or $50/month (X-Small)</li>
<li>TomTom Maps: free</li>
<li>LocationIQ: free or $49/month (Geocoding Lite)</li>
</ul>
<h3 id="medium-usage-(100000-requestsmonth-or-3333day)" tabindex="-1">Medium usage (100,000 requests/month or 3,333/day)</h3>
<ul>
<li>HERE: $58.1</li>
<li>Google Maps Platform: $300 (with credit)</li>
<li>Azure Maps: $427.5</li>
<li>OpenCage: $50 (X-Small)</li>
<li>TomTom Maps: $16.2 ($0.54/day)</li>
<li>LocationIQ: free or $49/month (Geocoding Lite)</li>
</ul>
<h3 id="high-usage-(300000-requestsmonth-or-10000day)" tabindex="-1">High usage (300,000 requests/month or 10,000/day)</h3>
<ul>
<li>HERE: $224.1</li>
<li>Google Maps Platform: $1,100 (with credit)</li>
<li>Azure Maps: $1327.5</li>
<li>OpenCage: $50 (X-Small) or $125 (Small)</li>
<li>TomTom Maps: $121.5 ($4.05/day)</li>
<li>LocationIQ: $49/month (Geocoding Lite) or $99 (Developer)</li>
</ul>
<h2 id="conclusion:-what's-the-best-geocoding-api-deal" tabindex="-1">Conclusion: What’s the best geocoding API deal?</h2>
<p>Based purely on pricing, we can draw a conclusion about each provider.</p>
<p><strong>Azure Maps</strong> is, for higher volume scenarios, the most expensive option, with low free tier and fixed price per request. Similar to Google Maps, Azure Maps’ price per 1,000 requests is almost ten times higher compared to other providers.</p>
<p><strong>Google Maps Platform</strong> is similarly expensive, but also the most restrictive provider, with requirements for attribution and displaying data using their embedded maps. This can introduce additional costs, as Google Maps with JavaScript API is also paid per usage.</p>
<p><strong>OpenCage</strong> and <strong>LocationIQ</strong> both provide monthly plans with a fixed price. OpenCage also provides the possibility to purchase one-off usage credits and handles billing in multiple currencies automatically. LocationIQ, on the other hand, provides more generous free tier, and their monthly plans are cheaper, especially for higher volume usage. The “Business Plus” plan in particular allows for 1 million requests per day, allowing for a whopping 30 million requests per month without negotiating custom pricing. A monthly subscription probably makes the most sense if your usage volume of the geocoding API is consistent throughout the month.</p>
<p>On the other hand, <strong>TomTom Maps</strong> may be preferable if your usage is uneven. The price per 1,000 calls is among the lowest, and you have a large amount of free requests per day. And unlike OpenCage and LocationIQ, you don't need to pay a monthly subscription. The commercial-friendly free tier is also a great option for smaller and low-budget projects.</p>
<p><strong>HERE</strong> is a viable option for high-volume usage. While most providers require you to upgrade to the (presumably expensive) Enterprise plan once you use around 500,000 requests/month, HERE will ask you only once you reach 10 million monthly requests. (However, LocationIQ allows for 1 million requests <em>per day</em> with their biggest package.)</p>
<p>Finally, <strong>Nominatim</strong> is a special option. Great for small projects, but not intended for commercial usage. Still, if you use the service, consider <a href="https://nominatim.org/funding/">supporting the project</a>.</p>
<h2 id="resources" tabindex="-1">Resources</h2>
<ul>
<li>OpenCage has a <a href="https://opencagedata.com/guides/how-to-compare-and-test-geocoding-services">detailed guide on comparing and testing geocoding providers</a>; rather than comparing individual providers, it explains what criteria you should consider.</li>
<li>On GIS Stack Exchange, you can find a sheet with a <a href="https://gis.stackexchange.com/a/62389/27909">comprehensive comparison of providers’ accuracy</a>; the last update was in 2021.</li>
<li>You can find additional comparisons by <a href="https://www.smarty.com/articles/geocoding-api-comparison">Smarty</a> (formerly SmartyStreets), <a href="https://www.geoapify.com/top-geocoding-services-comparison">Geoapify</a>, and <a href="https://www.geocod.io/compare/">Geocodio</a>, however some information about pricing may be outdated and the comparisons are obviously biased.</li>
</ul>
<h2 id="updates" tabindex="-1">Updates</h2>
<p>The article was updated on June 26, 2023, to include LocationIQ per the provider's request.</p>
<section>
<h2>Footnotes</h2>
<ol>
<li id="fn1"><p>For services with monthly subscription (OpenCage and LocationIQ) the price per 1,000 requests is based on daily limit per 30 days for the lowest and the highest plans paid monthly. <a href="#fnref1">↩︎</a> <a href="#fnref1:1">↩︎</a></p>
</li>
</ol>
</section>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[MinC Is Not Cygwin (242 pts)]]></title>
            <link>https://minc.commandlinerevolution.nl/english/home.html</link>
            <guid>43770445</guid>
            <pubDate>Wed, 23 Apr 2025 10:21:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://minc.commandlinerevolution.nl/english/home.html">https://minc.commandlinerevolution.nl/english/home.html</a>, See on <a href="https://news.ycombinator.com/item?id=43770445">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><section>
<article>
<p>Welcome to the MinC home page. MinC is a Unix emulator for Windows, based on the OpenBSD operating system.
MinC was written to help children at vocational education learn Linux without the hassle of virtualization. 
It runs on all versions of Windows, except Win95 and Win98.
</p>
<p>MinC is a tiny kernel which runs on Windows. The rest of the software was 
taken verbatim from OpenBSD, version 6.1. This means that by installing MinC, 
you run OpenBSD on your Windows machine at native speed.
</p>
</article>
<article>
<img src="https://minc.commandlinerevolution.nl/_images/ppuf1000X907_small.png" width="96" alt="Puffy, the OpenBSD mascotte" title="Puffy"></article>
</section>

<section>

<article>
<h2>Install</h2>
<p>To install MinC you no longer have to copy it "by hand". You can now use the new installation
wizard. Download the current version by clicking the link:
<a href="https://minc.commandlinerevolution.nl/minc-6.1.exe">minc-6.1.exe</a> (20Mb).
</p>
<img src="https://minc.commandlinerevolution.nl/_images/Installer-1.0_10.png" width="288"><p>After installation you will see a new icon called <b>Console</b> on your Desktop.
This starts the MinC terminal.
</p>
</article>

<article>
<h2>Use</h2>
<p>The current MinC realease contains the following functions:
</p>
<ul>
<li>All Unix standard commands, like: ls, du, ps, df, find, grep, awk, mkdir, chmod, 
chown, wc, top, diff, etc.
</li><li>Editing: less, vi, nano, hexedit
</li><li>Compression: unzip, gzip, bzip2, xz
</li><li>Networking: route, ifconfig, ping, ftp, ssh, scp, telnet, wget, curl, lynx, mutt, BitchX
</li><li>Development: vim, git, ImageMagick
</li></ul>
<p>Services and daemons, like Apache (httpd), Sendmail and sshd are not yet available, 
but will be released as soon as possible.
</p>
<p>If you like to compile code for MinC, you can install the toolchain: 
<a href="https://minc.commandlinerevolution.nl/buildtools-6.1.exe">buildtools-6.1.exe</a> The package contains BSD libc, GNU 
binutils, GNU cc, GNU make, vim and git.
</p>
</article>

<article>
<h2>Donate</h2>
<p>Writing the kernel took a lot of time. To help me finish MinC, you can make a donation
via PayPal. Any amount is welcome.
</p>

<p>Let me know if you wish to have a particular software included in the next release.
Send an e-mail to dboland@xs4all.nl.
</p>
</article>

<article>
<h2>Antivirus</h2>
<p>MinC works well with antivirus software, such as the built-in
<b>Windows Defender</b> or <b>Kaspersky</b>.
</p>
<p>In some cases you need to temporarily disable antivirus before downloading and 
installing (<a target="_blank" href="https://support.kaspersky.com/KIS/21.2/en-US/70886.htm" title="How to pause and resume computer protection">Kaspersky</a>). After that, MinC works fine.
</p>
<p>In other cases, MinC installs well, but the antivirus does not let you 
run its programs. You need to exclude the MinC root directory from scanning 
(<a target="_blank" href="https://help.f-secure.com/product.html#home/total-windows/latest/en/allow_program_on_sys_control_blocklist_to_run-latest-en" title="Allowing blocked applications">f-secure</a>).
</p>
</article>

<article>
<h2>Visual Studio</h2>
<p>MinC can be integrated into <b>MS Visual Studio Code</b> as a terminal.
Put following snippet in your personal settings.json file:
</p>
<pre>"terminal.integrated.profiles.windows": {
   "MinC": {
      "path": "<u>C:\\MinC</u>\\sbin\\bsd.exe"
   }
}
</pre>
<p>If you installed MinC at another location, make sure 
the underlined part is correct.
</p>
</article>

</section>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[EU fines Apple €500M and Meta €200M (129 pts)]]></title>
            <link>https://www.politico.eu/article/eu-fines-apple-meta-breaking-europe-digital-markets-act-dma/</link>
            <guid>43770396</guid>
            <pubDate>Wed, 23 Apr 2025 10:12:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.politico.eu/article/eu-fines-apple-meta-breaking-europe-digital-markets-act-dma/">https://www.politico.eu/article/eu-fines-apple-meta-breaking-europe-digital-markets-act-dma/</a>, See on <a href="https://news.ycombinator.com/item?id=43770396">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-count="4" data-remainder="0" data-block-attributes="[]" data-page="0">
					
<div>
			<p><img src="https://www.politico.eu/cdn-cgi/image/width=380,height=253,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/13/GettyImages-2112143030-1.jpg" srcset="https://www.politico.eu/cdn-cgi/image/width=480,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/13/GettyImages-2112143030-1.jpg 480w, https://www.politico.eu/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/13/GettyImages-2112143030-1.jpg 768w, https://www.politico.eu/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/13/GettyImages-2112143030-1.jpg 1024w, https://www.politico.eu/cdn-cgi/image/width=1280,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/13/GettyImages-2112143030-1.jpg 1280w, https://www.politico.eu/cdn-cgi/image/width=1440,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/13/GettyImages-2112143030-1.jpg 1440w, https://www.politico.eu/cdn-cgi/image/width=1920,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/13/GettyImages-2112143030-1.jpg 1920w, https://www.politico.eu/cdn-cgi/image/width=2640,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/13/GettyImages-2112143030-1.jpg 2640w" sizes="(max-width: 380px) 100vw, 380px" alt="Big Tech fines just got political, whether the Commission likes it or not" width="380" height="253" role="" loading="lazy" decoding="async">

					</p>
	
	
		
		<div>

			
			
			
			
			
							<h2>
										<a href="https://www.politico.eu/article/big-tech-fines-digital-markets-act-political-european-commission-meta-apple-donald-trump-tariffs/">
						Big Tech fines just got political, whether the Commission likes it or not					</a>
				</h2>
			
			
							<p>By delaying expected announcements on fining Apple and Meta, the bloc’s Digital Markets Act is being dragged into the global trade war.</p>
			
			<p><span>
			Apr 14		</span>
	
	
	
<span>
	<span>5 mins read</span>
</span>
</p>

			
			
			
			
					</div>

			</div>

<div>
			<p><img src="https://www.politico.eu/cdn-cgi/image/width=380,height=242,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/08/GettyImages-1090864832-scaled.jpg" srcset="https://www.politico.eu/cdn-cgi/image/width=480,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/08/GettyImages-1090864832-scaled.jpg 480w, https://www.politico.eu/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/08/GettyImages-1090864832-scaled.jpg 768w, https://www.politico.eu/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/08/GettyImages-1090864832-scaled.jpg 1024w, https://www.politico.eu/cdn-cgi/image/width=1280,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/08/GettyImages-1090864832-scaled.jpg 1280w, https://www.politico.eu/cdn-cgi/image/width=1440,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/08/GettyImages-1090864832-scaled.jpg 1440w, https://www.politico.eu/cdn-cgi/image/width=1920,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/08/GettyImages-1090864832-scaled.jpg 1920w, https://www.politico.eu/cdn-cgi/image/width=2640,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/08/GettyImages-1090864832-scaled.jpg 2640w" sizes="(max-width: 380px) 100vw, 380px" alt="Top EU official downplays expectations over Apple, Meta digital fines" width="380" height="242" role="" loading="lazy" decoding="async">

					</p>
	
	
		
		<div>

			
			
			
			
			
							<h2>
										<a href="https://www.politico.eu/article/apple-meta-top-eu-official-downplays-expectations-over-apple-meta-digital-fines/">
						Top EU official downplays expectations over Apple, Meta digital fines					</a>
				</h2>
			
			
							<p>The bloc’s Digital Markets Act is about compliance, not fines, says Olivier Guersent.</p>
			
			<p><span>
			Apr 8		</span>
	
	
	
<span>
	<span>2 mins read</span>
</span>
</p>

			
			
			
			
					</div>

			</div>

<div>
			<p><img src="https://www.politico.eu/cdn-cgi/image/width=380,height=259,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/02/GettyImages-2204511832-scaled.jpg" srcset="https://www.politico.eu/cdn-cgi/image/width=480,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/02/GettyImages-2204511832-scaled.jpg 480w, https://www.politico.eu/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/02/GettyImages-2204511832-scaled.jpg 768w, https://www.politico.eu/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/02/GettyImages-2204511832-scaled.jpg 1024w, https://www.politico.eu/cdn-cgi/image/width=1280,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/02/GettyImages-2204511832-scaled.jpg 1280w, https://www.politico.eu/cdn-cgi/image/width=1440,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/02/GettyImages-2204511832-scaled.jpg 1440w, https://www.politico.eu/cdn-cgi/image/width=1920,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/02/GettyImages-2204511832-scaled.jpg 1920w, https://www.politico.eu/cdn-cgi/image/width=2640,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/04/02/GettyImages-2204511832-scaled.jpg 2640w" sizes="(max-width: 380px) 100vw, 380px" alt="EU fines big carmakers €458M for green cartel" width="380" height="259" role="" loading="lazy" decoding="async">

					</p>
	
	
		
		<div>

			
			
			
			
			
							<h2>
										<a href="https://www.politico.eu/article/eu-fines-big-carmakers-e458m-for-green-cartel/">
						EU fines big carmakers €458M for green cartel					</a>
				</h2>
			
			
							<p>European groups received some of the biggest fines.</p>
			
			<p><span>
			Apr 1		</span>
	
	
	
<span>
	<span>1 min read</span>
</span>
</p>

			
			
			
			
					</div>

			</div>

<div>
			<p><img src="https://www.politico.eu/cdn-cgi/image/width=380,height=253,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/28/1742468554355_20250320_EP-182433A_PB9_227-scaled.jpg" srcset="https://www.politico.eu/cdn-cgi/image/width=480,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/28/1742468554355_20250320_EP-182433A_PB9_227-scaled.jpg 480w, https://www.politico.eu/cdn-cgi/image/width=768,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/28/1742468554355_20250320_EP-182433A_PB9_227-scaled.jpg 768w, https://www.politico.eu/cdn-cgi/image/width=1024,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/28/1742468554355_20250320_EP-182433A_PB9_227-scaled.jpg 1024w, https://www.politico.eu/cdn-cgi/image/width=1280,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/28/1742468554355_20250320_EP-182433A_PB9_227-scaled.jpg 1280w, https://www.politico.eu/cdn-cgi/image/width=1440,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/28/1742468554355_20250320_EP-182433A_PB9_227-scaled.jpg 1440w, https://www.politico.eu/cdn-cgi/image/width=1920,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/28/1742468554355_20250320_EP-182433A_PB9_227-scaled.jpg 1920w, https://www.politico.eu/cdn-cgi/image/width=2640,quality=80,onerror=redirect,format=auto/wp-content/uploads/2025/03/28/1742468554355_20250320_EP-182433A_PB9_227-scaled.jpg 2640w" sizes="(max-width: 380px) 100vw, 380px" alt="EU set to fine Apple and Meta amid escalating trade war" width="380" height="253" role="" loading="lazy" decoding="async">

					</p>
	
	
		
		<div>

			
			
			
			
			
							<h2>
										<a href="https://www.politico.eu/article/eu-set-fine-apple-meta-amid-escalating-trade-war/">
						EU set to fine Apple and Meta amid escalating trade war					</a>
				</h2>
			
			
							<p>The Commission’s first fines under its Digital Markets Act are expected this week.</p>
			
			<p><span>
			Mar 31		</span>
	
	
	
<span>
	<span>4 mins read</span>
</span>
</p>

			
			
			
			
					</div>

			</div>
				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[America's cyber defenses are being dismantled from the inside (319 pts)]]></title>
            <link>https://www.theregister.com/2025/04/23/trump_us_security/</link>
            <guid>43770382</guid>
            <pubDate>Wed, 23 Apr 2025 10:10:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2025/04/23/trump_us_security/">https://www.theregister.com/2025/04/23/trump_us_security/</a>, See on <a href="https://news.ycombinator.com/item?id=43770382">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p><span>Opinion</span> We almost lost the Common Vulnerabilities and Exposures (CVE) database system, but that's only the tip of the iceberg of what President Trump and company are doing to US cybersecurity efforts.</p>
<p>When it comes to technology security, let's face it. We're lame and we're lazy. But we don't normally go out of our way to make it worse. Until now. Until President Donald Trump and his cohort of tech minions, better known as Elon Musk's Department of Government Efficiency (DOGE), took over.</p>
<p>You might think, if you're outside the US, who cares? Unfortunately, whether you like it or not, the US has long taken the lead in technical security.</p>

    

<p>Take, for example, the fact that we <a target="_blank" href="https://www.theregister.com/2025/04/16/homeland_security_funding_for_cve/">almost lost the Common Vulnerabilities and Exposures (CVE) database</a>. Anyone familiar with cybersecurity will have heard of the CVE. It's the master list of essentially all security holes for the last 25 years.</p>

        


        

<p>As Jen Easterly, former director of the Cybersecurity and Infrastructure Security Agency (CISA), explained on LinkedIn: "It's the global catalog that helps everyone – security teams, software vendors, researchers, governments – organize and talk about vulnerabilities using the same reference system."</p>
<p>Without it, everyone is using a different catalog or no catalog at all, no one knows if they're talking about the same problem, and defenders waste precious time figuring out what's wrong. Worst of all, threat actors take advantage of the confusion.</p>

        

<p>How could such an important project go under? Easily. It wasn't funded. The group that oversees the CVE, CISA, had been targeted for staff cuts of over a third of its employees. In addition, CISA employees were given until midnight Monday to choose between <a target="_blank" rel="nofollow" href="https://www.govinfosecurity.com/cisa-braces-for-major-workforce-cuts-amid-security-fears-a-27996">staying on the job or resigning</a>. So it was that the decision to <a target="_blank" href="https://www.theregister.com/2025/04/16/cve_program_funding_save/?td=rt-3a">extend the MITRE CVE contract didn't come until literally the 11th hour</a>.</p>
<p>That contract will still run out in March 2026. Who knows if Trump et al will extend it again? Once upon a time, this kind of decision would be a no-brainer. I mean, all technology security, for better or worse, depends on the CVE system. Now? Your guess is as good as mine.</p>
<p>You can't depend on guesses when it comes to security.</p>

        

<p>The Trump administration's tenure, though, has already been marked by significant setbacks to US federal government technology security efforts, over and over again.</p>
<p>For example, General Timothy D. Haugh, the head of the National Security Agency (NSA) and US Cyber Command, was <a target="_blank" href="https://www.theregister.com/2025/04/04/nsa_boss_deputy_fired/">fired in early April</a>. General Haugh was a pivotal figure in defending the nation's cyber infrastructure, especially noted for countering Russian interference dating back to the 2016 election. His dismissal, along with the removal of other senior cyber officials, has significantly weakened the country's cyber defense. Why? What was his offense? Laura Loomer, a far-right conspiracy theorist and Trump buddy, disliked him.</p>
<p>The administration has also systematically dismantled critical cybersecurity advisory bodies. Notably, the Cyber Safety Review Board (CSRB), established under the previous Biden administration to investigate major cyber incidents, was effectively disbanded by terminating all its members. This <a target="_blank" href="https://www.theregister.com/2025/01/22/dhs_axes_cyber_advisory_boards/">move halted</a> investigations into significant cyberattacks, including the Chinese "Salt Typhoon" hacks.</p>
<p>Mind you, the Salt Typhoon attacks were also aimed at Trump and VP JD Vance, but for some reason, don't ask me why, they don't care. We already know that Trump is buddy-buddy with Russia, but China? The country he's having a major trade war with? This makes no sense to me.</p>
<p>So, who should be in charge of protecting the US's cyber resources? The state and local governments, would you believe?</p>
<p>According to Trump's <a target="_blank" rel="nofollow" href="https://www.whitehouse.gov/presidential-actions/2025/03/test/">Achieving Efficiency Through State and Local Preparedness</a> executive order: "Preparedness is most effectively owned and managed at the State, local, and even individual levels, supported by a competent, accessible, and efficient Federal Government. Citizens are the immediate beneficiaries of sound local decisions and investments designed to address risks, including cyberattacks, wildfires, hurricanes, and space weather."</p>
<ul>

<li><a href="https://www.theregister.com/2025/04/14/miyazaki_ai_and_intellectual_property/">It's fun making Studio Ghibli-style images with ChatGPT – but intellectual property is no laughing matter</a></li>

<li><a href="https://www.theregister.com/2025/02/07/opinion_column_musk/">Musk's move fast and break things mantra won't work in US.gov</a></li>

<li><a href="https://www.theregister.com/2025/01/28/windows_10_demise_linux/">Windows 10's demise nears, but Linux is forever</a></li>

<li><a href="https://www.theregister.com/2025/01/11/opinion_column_us_moves/">Is it really the plan to take over Greenland and the Panama Canal? It's been a weird week</a></li>
</ul>
<p>Part of that clearly sets the stage for getting rid of the Federal Emergency Management Administration (FEMA), but space weather!? Cyberattacks!!? Do you know how few real IT security experts are out there? Do you think all 50 states can hire enough? I don't. Oh, and let us not forget, cyberattacks aren't only made against, say, North Carolina and West Virginia, they hit everyone, everywhere. Fifty different groups trying to cope with state-sponsored elite hacking teams is too stupid for words.</p>
<p>Oh, and did I mention? Earlier in his tenure, <a target="_blank" rel="nofollow" href="https://cyberscoop.com/trump-pause-grants-aid-federal-cyber-programs/">Trump had cut funding for cybersecurity-specific federal grant programs</a>. So, good luck hiring top-flight security mavens to protect your home state.</p>
<p>Let's also not forget the enemy inside. DOGE has access to sensitive federal systems. These include the Treasury Department's payment systems and the Social Security System. It appears that this data had been copied to God alone knows where and can now be accessed by people without the right to see or use it.</p>
<p>So not only has America's external cyber defenses been dismantled, but the data is out there for the greatest security attacks ever on individual citizens. <a target="_blank" href="https://www.theregister.com/2025/04/15/landmark_admin_data_loss/?td=rt-3a">1.6 million people had their Social Security information stolen from an insurance company</a>? That's so penny-ante.</p>
<p>The US will suffer the most from these self-inflicted security wounds, but the entire world will feel the pain. "Buckle up, we're in for a bumpy ride." ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple and Meta fined millions for breaching EU law (292 pts)]]></title>
            <link>https://ca.finance.yahoo.com/news/apple-fined-570-million-meta-094701712.html</link>
            <guid>43770337</guid>
            <pubDate>Wed, 23 Apr 2025 10:01:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ca.finance.yahoo.com/news/apple-fined-570-million-meta-094701712.html">https://ca.finance.yahoo.com/news/apple-fined-570-million-meta-094701712.html</a>, See on <a href="https://news.ycombinator.com/item?id=43770337">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>  <p><!-- HTML_TAG_START -->By Foo Yun Chee and Jan Strupczewski<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->BRUSSELS (Reuters) -Apple was fined 500 million euros ($570 million) on Wednesday and Meta 200 million euros, as European Union antitrust regulators handed out the first sanctions under landmark legislation aimed at curbing the power of Big Tech.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->The EU fines could stoke tensions with U.S. President Donald Trump who has threatened to levy tariffs against countries that penalise U.S. companies.<!-- HTML_TAG_END --></p>    <p><!-- HTML_TAG_START -->They follow a year-long investigation by the European Commission, the EU executive, into whether the companies comply with the Digital Markets Act (DMA) that seeks to allow smaller rivals into markets dominated by the biggest companies.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->The fines signal that the EU is sticking to its guns in enforcing the new rules, which were introduced in 2023. That is despite Trump citing the DMA while vowing in February to "defend American companies and innovators from overseas extortion".<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Alphabet's Google and Elon Musk's X are also facing potential fines from European regulators.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->The EU will be encouraged by a U.S. court judgment earlier this month which found that Google illegally dominates two markets for online advertising technology, Commission sources say. That ruling could pave the way for U.S. antitrust prosecutors to seek a breakup of its ad products.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->Apple said it would challenge the EU fine.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->"Today's announcements are yet another example of the European Commission unfairly targeting Apple in a series of decisions that are bad for the privacy and security of our users, bad for products, and force us to give away our technology for free," Apple said in an emailed statement.<!-- HTML_TAG_END --></p>    <p><!-- HTML_TAG_START -->Meta also criticised the EU decision.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->"The European Commission is attempting to handicap successful American businesses while allowing Chinese and European companies to operate under different standards," its Chief Global Affairs Officer Joel Kaplan said in an emailed statement.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->"This isn't just about a fine; the Commission forcing us to change our business model effectively imposes a multi-billion-dollar tariff on Meta while requiring us to offer an inferior service."<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->The fines are modest compared to the penalties meted out by the previous EU antitrust chief Margrethe Vestager during her term. Sources, speaking on condition of anonymity, have said this is due to the short period of the breaches, a focus on compliance rather than sanctions, and a desire to avoid possible retaliation from Trump.<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->PAY-OR-CONSENT MODEL<!-- HTML_TAG_END --></p>  <p><!-- HTML_TAG_START -->The EU competition watchdog said Apple must remove technical and commercial restrictions that prevent app developers from steering users to cheaper deals outside the App Store.<!-- HTML_TAG_END --></p> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI wants to buy Chrome and make it an "AI-first" experience (140 pts)]]></title>
            <link>https://arstechnica.com/ai/2025/04/chatgpt-head-tells-court-openai-is-interested-in-buying-chrome/</link>
            <guid>43770312</guid>
            <pubDate>Wed, 23 Apr 2025 09:55:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/ai/2025/04/chatgpt-head-tells-court-openai-is-interested-in-buying-chrome/">https://arstechnica.com/ai/2025/04/chatgpt-head-tells-court-openai-is-interested-in-buying-chrome/</a>, See on <a href="https://news.ycombinator.com/item?id=43770312">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          
          
<p>According to Turley, OpenAI would throw its proverbial hat in the ring if Google had to sell. When asked if OpenAI would want Chrome, he was unequivocal. "Yes, we would, as would many other parties," <a href="https://www.theinformation.com/articles/openai-buy-chrome-executive-testifies">Turley said</a>.</p>
<p>OpenAI has reportedly considered building its own Chromium-based browser to compete with Chrome. Several months ago, the company hired former Google developers Ben Goodger and Darin Fisher, both of whom worked to bring Chrome to market.</p>
<figure><a href="https://cdn.arstechnica.net/wp-content/uploads/2025/01/google-chrome-browser.jpg">
    <p><img width="1000" height="665" src="https://cdn.arstechnica.net/wp-content/uploads/2025/01/google-chrome-browser.jpg" alt="Close-up of Google Chrome Web Browser web page on the web browser. Chrome is widely used web browser developed by Google." decoding="async" loading="lazy" srcset="https://cdn.arstechnica.net/wp-content/uploads/2025/01/google-chrome-browser.jpg 1000w, https://cdn.arstechnica.net/wp-content/uploads/2025/01/google-chrome-browser-640x426.jpg 640w, https://cdn.arstechnica.net/wp-content/uploads/2025/01/google-chrome-browser-768x511.jpg 768w, https://cdn.arstechnica.net/wp-content/uploads/2025/01/google-chrome-browser-980x652.jpg 980w" sizes="auto, (max-width: 1000px) 100vw, 1000px">
                  </p>
          <figcaption>
        <div>
    
    <p><span>
          Credit:

          
          Getty Images

                  </span>
          </p>
  </div>
      </figcaption>
      </a></figure>
<p>It's not hard to see why OpenAI might want a browser, particularly Chrome with its 4 billion users and 67 percent market share. Chrome would instantly give OpenAI a massive install base of users who have been incentivized to use Google services. If OpenAI were running the show, you can bet ChatGPT would be integrated throughout the experience—Turley said as much, predicting an "AI-first" experience. The user data flowing to the owner of Chrome could also be invaluable in training <a href="https://arstechnica.com/ai/2025/01/openai-launches-operator-an-ai-agent-that-can-operate-your-computer/">agentic AI models</a> that can operate browsers on the user's behalf.</p>
<p>Interestingly, there's so much discussion about who should buy Chrome, but relatively little about spinning off Chrome into an independent company. Google has contended that Chrome can't survive on its own. However, the existence of Google's multibillion-dollar search placement deals, which the DOJ wants to end, suggests otherwise. Regardless, if Google has to sell, and OpenAI has the cash, we might get the proposed "AI-first" browsing experience.</p>


          
                  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Gruen Transfer is consuming the internet (256 pts)]]></title>
            <link>https://sebs.website/blog/the%20gruen-transfer-is-consuming-the-internet</link>
            <guid>43769936</guid>
            <pubDate>Wed, 23 Apr 2025 08:49:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sebs.website/blog/the%20gruen-transfer-is-consuming-the-internet">https://sebs.website/blog/the%20gruen-transfer-is-consuming-the-internet</a>, See on <a href="https://news.ycombinator.com/item?id=43769936">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    <p>Have you ever walked into a supermarket, pharmacy, or department store looking to buy a specific item, only to find the layout confusing? Perhaps you ended up aimlessly strolling around, purchasing other items? This is deliberate, and known as the Gruen Transfer.  </p>
<p>The 'Transfer' part is the moment that you, as a consumer surrounded by a deliberately confusing layout, lose track of your original intentions.  </p>
<p>We've all experienced it, and now it's starting to consume the internet. It first appeared on Facebook, with the introduction of the feed. Originally intended as a way to simplify updates from your friends, and hold your attention captive for longer. However somewhere along the line, the feed became more than that. Facebook now feels more confusing than my local department store, and my original reason for visiting (keeping up to date with friends &amp; family) is quickly forgotten. The last time I checked Facebook, maybe 10% of my feed was updates from friends. The rest was a combination of ads, memes, and influencer marketing videos, leaving me doom scrolling endlessly.    </p>
<p>This isn't relegated to Facebook though, or even social media. So many websites are now designed to disorient you upon visiting, so that you start acting impulsively. This can even happen in a relatively benign way - who hasn't looked up something on Wikipedia and fell down a rabbit hole that ended looking at a <a href="https://en.wikipedia.org/wiki/List_of_animals_awarded_human_credentials">list of animals awarded human credentials</a>?  </p>
<p>It pops up in other areas as well, closely associated with several UX dark patterns. If you've tried to permanently delete your account from any major social network, you’ll know what I mean. It is utterly confusing to find and navigate to the page you need, and the site will desperately conjole you into doing something other than deleting your account. It's the same for trying to alter your insurance policy, cancel subscriptions, spend frequent flyer miles, and so on...  </p>
<p>I wonder where all this will end? There must be a point at which the friction generated by needless complexity has a detrimental effect. A kind of <a href="https://en.wikipedia.org/wiki/Laffer_curve#:~:text=In%20economics%2C%20the%20Laffer%20curve,of%20the%20government's%20tax%20revenue.">Laffer Curve</a> of web design.  </p>
<p>In the EU, it is a legal requirement to allow your customers the same method, with the same number of steps and complexity, for canceling as for subscribing. So if it takes 10 seconds to fill in a form online to get subscribed, they need to offer the same ease of use for canceling.  </p>
<p>I like this idea of ‘complexity’ as a measure for legislation. Now if only they could apply the same thing to my local Boots when I'm trying to buy toothpaste.  </p>
                  </div><p>If you've made it this far I owe you a beer the next time I see you 🍺. Want to get in touch? <a href="http://twitter.com/sebs_tweets">Follow me on Twitter(X)</a>.</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Advanced Python Features (349 pts)]]></title>
            <link>https://blog.edward-li.com/tech/advanced-python-features/</link>
            <guid>43769486</guid>
            <pubDate>Wed, 23 Apr 2025 07:21:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.edward-li.com/tech/advanced-python-features/">https://blog.edward-li.com/tech/advanced-python-features/</a>, See on <a href="https://news.ycombinator.com/item?id=43769486">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
      <p>Python is one of the <a href="https://survey.stackoverflow.co/2024/technology#most-popular-technologies">most widely adopted programming languages</a> in the world. Yet, because of it’s ease and simplicity to just “get <em>something</em> working”, it’s also one of the most underappreciated.</p>
<p>If you search for <a href="https://www.google.com/search?q=Top+10+Advanced+Python+Tricks"><code>Top 10 Advanced Python Tricks</code></a> on Google or any other search engine, you’ll find tons of blogs or LinkedIn articles going over trivial (but still useful) things like <code>generators</code> or <code>tuples</code>.</p>
<p><em><strong>However</strong></em>, as someone who’s written Python for the past 12 years, I’ve come across a lot of really interesting, underrated, unique, or (as some might say) “un-pythonic” tricks to <em>really</em> level up what Python can do.</p>
<p>That’s why I decided to compile the top 14 of said features alongside examples and additional resources if you want to dive deeper into any of them.</p>
<blockquote>
<p>These tips &amp; tricks were originally featured as part of a 14-day series on X/Twitter between March 1st and March 14th (pi-day, hence why there are 14 topics in the article).</p>
<p>All X/Twitter links will also be accompanied with a Nitter counterpart. Nitter is a privacy-abiding open source Twitter frontend. Learn more about the project <a href="https://github.com/zedeus/nitter">here</a>.</p></blockquote>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#1-typing-overloads">1. Typing Overloads</a></li>
<li><a href="#2-keyword-only-and-positional-only-arguments">2. Keyword-only and Positional-only Arguments</a></li>
<li><a href="#3-future-annotations">3. Future Annotations</a></li>
<li><a href="#4-generics">4. Generics</a></li>
<li><a href="#5-protocols">5. Protocols</a></li>
<li><a href="#6-context-managers">6. Context Managers</a></li>
<li><a href="#7-structural-pattern-matching">7. Structural Pattern Matching</a></li>
<li><a href="#8-python-slots">8. Python Slots</a></li>
<li><a href="#9-python-nitpicks">9. Python Nitpicks</a></li>
<li><a href="#10-advanced-f-string-string-formatting">10. Advanced f-string String Formatting</a></li>
<li><a href="#11-cache--lru_cache">11. Cache / lru_cache</a></li>
<li><a href="#12-python-futures">12. Python Futures</a></li>
<li><a href="#13-proxy-properties">13. Proxy Properties</a></li>
<li><a href="#14-metaclasses">14. Metaclasses</a></li>
</ul>
<h2 id="1-typing-overloads">1. Typing Overloads</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1895937864527192320">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1895937864527192320">Nitter Mirror</a></strong></p></blockquote>
<p><strong><code>@overload</code></strong> is a decorator from Python’s <code>typing</code> module that lets you define multiple signatures for the same function. Each overload tells the type checker exactly what types to expect when specific parameters are passed in.</p>
<p>For example, the code below dictates that <em>only</em> <code>list[str]</code> can be returned if <code>mode=split</code>, and <em>only</em> <code>str</code> can be returned if <code>mode=upper</code>. (The <code>Literal</code> type also forces mode to be either one of <code>split</code> or <code>upper</code>)</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> typing <span>import</span> Literal, overload
</span></span><span><span>
</span></span><span><span><span>@overload</span>
</span></span><span><span><span>def</span> <span>transform</span>(data: str, mode: Literal[<span>"split"</span>]) <span>-&gt;</span> list[str]:
</span></span><span><span>    <span>...</span>
</span></span><span><span>
</span></span><span><span><span>@overload</span>
</span></span><span><span><span>def</span> <span>transform</span>(data: str, mode: Literal[<span>"upper"</span>]) <span>-&gt;</span> str:
</span></span><span><span>    <span>...</span>
</span></span><span><span>
</span></span><span><span><span>def</span> <span>transform</span>(data: str, mode: Literal[<span>"split"</span>, <span>"upper"</span>]) <span>-&gt;</span> list[str] <span>|</span> str:
</span></span><span><span>    <span>if</span> mode <span>==</span> <span>"split"</span>:
</span></span><span><span>        <span>return</span> data<span>.</span>split()
</span></span><span><span>    <span>else</span>:
</span></span><span><span>        <span>return</span> data<span>.</span>upper()
</span></span><span><span>
</span></span><span><span>split_words <span>=</span> transform(<span>"hello world"</span>, <span>"split"</span>)  <span># Return type is list[str]</span>
</span></span><span><span>split_words[<span>0</span>]  <span># Type checker is happy</span>
</span></span><span><span>
</span></span><span><span>upper_words <span>=</span> transform(<span>"hello world"</span>, <span>"upper"</span>)  <span># Return type is str</span>
</span></span><span><span>upper_words<span>.</span>lower()  <span># Type checker is happy</span>
</span></span><span><span>
</span></span><span><span>upper_words<span>.</span>append(<span>"!"</span>)  <span># Cannot access attribute "append" for "str"</span>
</span></span></code></pre></div><p>Overloads can do more than just change return type based on arguments! In another example, we use typing overloads to ensure that either one of <code>id</code> OR <code>username</code> are passed in, but <em><strong>never both</strong></em>.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>@overload</span>
</span></span><span><span><span>def</span> <span>get_user</span>(id: int <span>=</span> <span>...</span>, username: <span>None</span> <span>=</span> <span>None</span>) <span>-&gt;</span> User:
</span></span><span><span>    <span>...</span>
</span></span><span><span>
</span></span><span><span><span>@overload</span>
</span></span><span><span><span>def</span> <span>get_user</span>(id: <span>None</span> <span>=</span> <span>None</span>, username: str <span>=</span> <span>...</span>) <span>-&gt;</span> User:
</span></span><span><span>    <span>...</span>
</span></span><span><span>
</span></span><span><span><span>def</span> <span>get_user</span>(id: int <span>|</span> <span>None</span> <span>=</span> <span>None</span>, username: str <span>|</span> <span>None</span> <span>=</span> <span>None</span>) <span>-&gt;</span> User:
</span></span><span><span>    <span>...</span>
</span></span><span><span>
</span></span><span><span>get_user(id<span>=</span><span>1</span>)  <span># Works!</span>
</span></span><span><span>get_user(username<span>=</span><span>"John"</span>)  <span># Works!</span>
</span></span><span><span>get_user(id<span>=</span><span>1</span>, username<span>=</span><span>"John"</span>)  <span># No overloads for "get_user" match the provided arguments</span>
</span></span></code></pre></div><blockquote>
<p>The <code>...</code> is a special value often used in overloads to indicate that a parameter is optional, but still requires a value.</p></blockquote>
<p><strong>✨ Quick bonus trick:</strong> As you probably saw, Python also has support for <strong>String Literals</strong>. These help assert that only specific string values can be passed to a parameter, giving you even more type safety. Think of them like a lightweight form of Enums!</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>def</span> <span>set_color</span>(color: Literal[<span>"red"</span>, <span>"blue"</span>, <span>"green"</span>]) <span>-&gt;</span> <span>None</span>:
</span></span><span><span>    <span>...</span>
</span></span><span><span>
</span></span><span><span>set_color(<span>"red"</span>)
</span></span><span><span>set_color(<span>"blue"</span>)
</span></span><span><span>set_color(<span>"green"</span>)
</span></span><span><span>set_color(<span>"fuchsia"</span>)  <span># Argument of type "Literal['fuchsia']" cannot be assigned to parameter "color"</span>
</span></span></code></pre></div><h3 id="additional-resources">Additional Resources</h3>
<ul>
<li><a href="https://adamj.eu/tech/2021/05/29/python-type-hints-how-to-use-overload/">Python Type Hints: How to use <code>@overload</code></a></li>
<li><a href="https://peps.python.org/pep-3124/">PEP 3124 – Overloading, Generic Functions, Interfaces, and Adaptation</a></li>
<li><a href="https://docs.python.org/3/library/typing.html#overload">Python Docs - Overloads</a></li>
<li><a href="https://peps.python.org/pep-0586/">PEP 586 – Literal Types</a></li>
</ul>
<h2 id="2-keyword-only-and-positional-only-arguments">2. Keyword-only and Positional-only Arguments</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1896257050147246306">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1896257050147246306">Nitter Mirror</a></strong></p></blockquote>
<p>By default, both required parameters and optional parameters can be assigned with both positional and keyword syntax. However, what if you <em>don’t</em> want that to happen? <strong>Keyword-only and Positional-only args</strong> let you control that.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>def</span> <span>foo</span>(a, b, <span>/</span>, c, d, <span>*</span>, e, f):
</span></span><span><span>	<span>#         ^        ^</span>
</span></span><span><span>	<span># Ever seen these before?</span>
</span></span><span><span>	<span>...</span>
</span></span></code></pre></div><p><strong><code>*</code> (asterisk)</strong> marks keyword-only parameters. Arguments <em>after</em> <code>*</code> <em>must</em> be passed as keyword arguments.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>#   KW+POS | KW ONLY</span>
</span></span><span><span><span>#       vv | vv</span>
</span></span><span><span><span>def</span> <span>foo</span>(a, <span>*</span>, b):
</span></span><span><span>    <span>...</span>
</span></span><span><span>
</span></span><span><span><span># == ALLOWED ==</span>
</span></span><span><span>foo(a<span>=</span><span>1</span>, b<span>=</span><span>2</span>)  <span># All keyword</span>
</span></span><span><span>foo(<span>1</span>, b<span>=</span><span>2</span>)  <span># Half positional, half keyword</span>
</span></span><span><span>
</span></span><span><span><span># == NOT ALLOWED ==</span>
</span></span><span><span>foo(<span>1</span>, <span>2</span>)  <span># Cannot use positional for keyword-only parameter</span>
</span></span><span><span><span>#      ^</span>
</span></span></code></pre></div><p><strong><code>/</code> (forward slash)</strong> marks positional-only parameters. Arguments <em>before</em> <code>/</code> <em>must</em> be passed positionally and cannot be used as keyword arguments.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># POS ONLY | KW POS</span>
</span></span><span><span><span>#       vv | vv</span>
</span></span><span><span><span>def</span> <span>bar</span>(a, <span>/</span>, b):
</span></span><span><span>    <span>...</span>
</span></span><span><span>
</span></span><span><span><span># == ALLOWED ==</span>
</span></span><span><span>bar(<span>1</span>, <span>2</span>)  <span># All positional</span>
</span></span><span><span>bar(<span>1</span>, b<span>=</span><span>2</span>)  <span># Half positional, half keyword</span>
</span></span><span><span>
</span></span><span><span><span># == NOT ALLOWED ==</span>
</span></span><span><span>bar(a<span>=</span><span>1</span>, b<span>=</span><span>2</span>)  <span># Cannot use keyword for positional-only parameter</span>
</span></span><span><span><span>#   ^</span>
</span></span></code></pre></div><p>Keyword-only and Positional-only arguments are especially helpful for API developers to enforce how their arguments may be used and passed in.</p>
<h3 id="additional-resources-1">Additional Resources</h3>
<ul>
<li><a href="https://thepythoncodingbook.com/2022/12/11/positional-only-and-keyword-only-arguments-in-python/">Using Positional-Only And Keyword-Only Arguments in Python</a></li>
<li><a href="https://stackoverflow.com/questions/58477827/why-use-positional-only-parameters-in-python-3-8">Stack Overflow: Why use positional-only parameters in Python 3.8+?</a></li>
<li><a href="https://peps.python.org/pep-3102/">PEP 3102 – Keyword-Only Arguments</a></li>
<li><a href="https://peps.python.org/pep-0570/">PEP 570 – Python Positional-Only Parameters</a></li>
</ul>
<h2 id="3-future-annotations">3. Future Annotations</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1896667340777091212">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1896667340777091212">Nitter Mirror</a></strong></p></blockquote>
<p>A quick history lesson into Python’s typing:</p>
<blockquote>
<p>This is less of a “Python Feature” and more of a history lesson into Python’s type system, and what <code>from __future__ import annotations</code> does if you ever encounter it in production code.</p></blockquote>
<p><em>Python’s typing system started off as a hack</em>. Function annotation syntax was first introduced with <a href="https://peps.python.org/pep-3107/">PEP 3107</a> back in Python 3.0 as purely an extra way to decorate functions with no actual type-checking functionality.</p>
<p>Proper specifications for type annotations were later added in Python 3.5 through <a href="https://peps.python.org/pep-0484/">PEP 484</a>, but they were designed to be evaluated at bound / definition time. This worked great for simple cases, but it increasingly caused headaches with one type of problem: <strong>forward references</strong>.</p>
<p>This meant that forward references (using a type before it gets defined) required falling back to string literals, making the code less elegant and more error-prone.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># This won't work</span>
</span></span><span><span><span>class</span> <span>Foo</span>:
</span></span><span><span>    <span>def</span> <span>action</span>(self) <span>-&gt;</span> Foo:
</span></span><span><span>        <span># The `-&gt; Foo` return annotation is evaluated immediately during definition,</span>
</span></span><span><span>        <span># but the class `Foo` is not yet fully defined at that point,</span>
</span></span><span><span>        <span># causing a NameError during type checking.</span>
</span></span><span><span>        <span>...</span>
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># This is the workaround -&gt; Using string types</span>
</span></span><span><span><span>class</span> <span>Bar</span>:
</span></span><span><span>    <span>def</span> <span>action</span>(self) <span>-&gt;</span> <span>"Bar"</span>:
</span></span><span><span>        <span># Workaround with string literals, but ugly and error-prone</span>
</span></span><span><span>        <span>...</span>
</span></span></code></pre></div><p>Introduced as a PEP (Python Enhancement Proposal), <a href="https://peps.python.org/pep-0563/">PEP 563: Postponed Evaluation of Annotations</a> aimed to fix this by changing when type annotations were evaluated. Instead of evaluating annotations at definition time, PEP 563 “<em>string-ifies</em>” types behind the scenes and postpones evaluation until they’re actually needed, typically during static analysis. This allows for cleaner forward references without explicitly defining string literals and reduces the runtime overhead of type annotations.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> __future__ <span>import</span> annotations
</span></span><span><span>
</span></span><span><span><span>class</span> <span>Foo</span>:
</span></span><span><span>    <span>def</span> <span>bar</span>(self) <span>-&gt;</span> Foo:  <span># Works now!</span>
</span></span><span><span>        <span>...</span>
</span></span></code></pre></div><p><strong>So what was the problem?</strong></p>
<p>For type checkers, this change is largely transparent. But because PEP 563 implements this by essentially treating all types as strings behind the scenes, anything that relies on accessing return types at runtime (i.e., ORMs, serialization libraries, validators, dependency injectors, etc.) will have compatibility issues with the new setup.</p>
<p>That’s why even after ten years after the initial proposal, modern Python (3.13 as of writing this) still relies on the same hacked-together type system introduced in Python 3.5.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Regular Python Typing =====</span>
</span></span><span><span><span>def</span> <span>foobar</span>() <span>-&gt;</span> int:
</span></span><span><span>    <span>return</span> <span>1</span>
</span></span><span><span>
</span></span><span><span>ret_type <span>=</span> foobar<span>.</span>__annotations__<span>.</span>get(<span>"return"</span>)
</span></span><span><span>ret_type
</span></span><span><span><span># Returns: &lt;class 'int'&gt;</span>
</span></span><span><span>new_int <span>=</span> ret_type()
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== With Postponed Evaluation =====</span>
</span></span><span><span><span>from</span> __future__ <span>import</span> annotations
</span></span><span><span>
</span></span><span><span><span>def</span> <span>foobar</span>() <span>-&gt;</span> int:
</span></span><span><span>    <span>return</span> <span>1</span>
</span></span><span><span>
</span></span><span><span>ret_type <span>=</span> foobar<span>.</span>__annotations__<span>.</span>get(<span>"return"</span>)
</span></span><span><span>ret_type
</span></span><span><span><span># "int" (str)</span>
</span></span><span><span>new_int <span>=</span> ret_type()  <span># TypeError: 'str' object is not callable</span>
</span></span></code></pre></div><p>Recently, <a href="https://peps.python.org/pep-0649/">PEP 649</a> proposes a new method to handle Python function and class annotations through deferred, or “lazy,” evaluation. Instead of evaluating annotations at the time of function or class definition, as is traditionally done, this approach delays their computation until they are actually accessed.</p>
<p>This is achieved by compiling the annotation expressions into a separate function, stored in a special <code>__annotate__</code> attribute. When the <code>__annotations__</code> attribute is accessed for the first time, this function is invoked to compute and cache the annotations, making them readily available for subsequent accesses.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># Example code from the PEP 649 proposal</span>
</span></span><span><span>
</span></span><span><span><span>class</span> <span>function</span>:
</span></span><span><span>    <span># __annotations__ on a function object is already a</span>
</span></span><span><span>    <span># "data descriptor" in Python, we're just changing</span>
</span></span><span><span>    <span># what it does</span>
</span></span><span><span>    <span>@property</span>
</span></span><span><span>    <span>def</span> <span>__annotations__</span>(self):
</span></span><span><span>        <span>return</span> self<span>.</span>__annotate__()
</span></span><span><span>
</span></span><span><span><span># ...</span>
</span></span><span><span>
</span></span><span><span><span>def</span> <span>annotate_foo</span>():
</span></span><span><span>    <span>return</span> {<span>'x'</span>: int, <span>'y'</span>: MyType, <span>'return'</span>: float}
</span></span><span><span>
</span></span><span><span><span>def</span> <span>foo</span>(x <span>=</span> <span>3</span>, y <span>=</span> <span>"abc"</span>):
</span></span><span><span>    <span>...</span>
</span></span><span><span>
</span></span><span><span>foo<span>.</span>__annotate__ <span>=</span> annotate_foo
</span></span><span><span>
</span></span><span><span><span>class</span> <span>MyType</span>:
</span></span><span><span>   <span>...</span>
</span></span><span><span>
</span></span><span><span>foo_y_annotation <span>=</span> foo<span>.</span>__annotations__[<span>'y'</span>]
</span></span></code></pre></div><p>This deferred evaluation strategy addresses issues like forward references and circular dependencies, as annotations are only evaluated when needed. Moreover, it enhances performance by avoiding the immediate computation of annotations that might not be used, and maintains full semantic information, supporting introspection and runtime type-checking tools.</p>
<p><strong>✨ Bonus Fact:</strong> Since Python 3.11, Python now supports a “Self” type (<a href="https://peps.python.org/pep-0673/">PEP 673</a>) that allows for proper typing of methods that return instances of their own class, solving this particular example of self-referential return types.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> typing <span>import</span> Self
</span></span><span><span>
</span></span><span><span><span>class</span> <span>Foo</span>:
</span></span><span><span>    <span>def</span> <span>bar</span>(self) <span>-&gt;</span> Self:
</span></span><span><span>        <span>...</span>
</span></span></code></pre></div><h3 id="additional-resources-2">Additional Resources</h3>
<ul>
<li><a href="https://peps.python.org/pep-0649/#a-history-of-annotations">A History Of Annotations</a></li>
<li><a href="https://blog.derlin.ch/python-type-hints-and-future-annotations">Python, Type Hints, and Future Annotations</a></li>
<li><a href="https://docs.python.org/3/library/__future__.html"><code>__future__</code> — Future Statement Definitions</a></li>
<li><a href="https://peps.python.org/pep-0484/">PEP 484 – Type Hints</a></li>
<li><a href="https://peps.python.org/pep-0563/">PEP 563 – Postponed Evaluation of Annotations</a></li>
<li><a href="https://peps.python.org/pep-0649/">PEP 649 – Deferred Evaluation Of Annotations Using Descriptors</a></li>
<li><a href="https://peps.python.org/pep-0749/">PEP 749 – Implementing PEP 649</a></li>
</ul>
<h2 id="4-generics">4. Generics</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1896994839516020825">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1896994839516020825">Nitter Mirror</a></strong></p></blockquote>
<p>Did you know that Python has <strong>Generics</strong>? In fact, <a href="https://docs.python.org/3/whatsnew/3.12.html">since Python 3.12</a>, a newer, sleeker, and sexier syntax for Generics was introduced.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>class</span> <span>KVStore</span>[K: str <span>|</span> int, V]:
</span></span><span><span>    <span>def</span> __init__(self) <span>-&gt;</span> <span>None</span>:
</span></span><span><span>        self<span>.</span>store: dict[K, V] <span>=</span> {}
</span></span><span><span>
</span></span><span><span>    <span>def</span> <span>get</span>(self, key: K) <span>-&gt;</span> V:
</span></span><span><span>        <span>return</span> self<span>.</span>store[key]
</span></span><span><span>
</span></span><span><span>    <span>def</span> <span>set</span>(self, key: K, value: V) <span>-&gt;</span> <span>None</span>:
</span></span><span><span>        self<span>.</span>store[key] <span>=</span> value
</span></span><span><span>
</span></span><span><span>kv <span>=</span> KVStore[str, int]()
</span></span><span><span>kv<span>.</span>set(<span>"one"</span>, <span>1</span>)
</span></span><span><span>kv<span>.</span>set(<span>"two"</span>, <span>2</span>)
</span></span><span><span>kv<span>.</span>set(<span>"three"</span>, <span>3</span>)
</span></span></code></pre></div><p>Python 3.5 initially introduced Generics through the <code>TypeVar</code> syntax. However, <a href="https://peps.python.org/pep-0695/">PEP 695</a> for Python 3.12 revamped type annotations with native syntax for generics, type aliases, and more.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># OLD SYNTAX - Python 3.5 to 3.11</span>
</span></span><span><span><span>from</span> typing <span>import</span> Generic, TypeVar
</span></span><span><span>
</span></span><span><span>UnBounded <span>=</span> TypeVar(<span>"UnBounded"</span>)
</span></span><span><span>Bounded <span>=</span> TypeVar(<span>"Bounded"</span>, bound<span>=</span>int)
</span></span><span><span>Constrained <span>=</span> TypeVar(<span>"Constrained"</span>, int, float)
</span></span><span><span>
</span></span><span><span><span>class</span> <span>Foo</span>(Generic[UnBounded, Bounded, Constrained]):
</span></span><span><span>    <span>def</span> __init__(self, x: UnBounded, y: Bounded, z: Constrained) <span>-&gt;</span> <span>None</span>:
</span></span><span><span>        self<span>.</span>x <span>=</span> x
</span></span><span><span>        self<span>.</span>y <span>=</span> y
</span></span><span><span>        self<span>.</span>z <span>=</span> z
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># NEW SYNTAX - Python 3.12+</span>
</span></span><span><span><span>class</span> <span>Foo</span>[UnBounded, Bounded: int, Constrained: int <span>|</span> float]:
</span></span><span><span>    <span>def</span> __init__(self, x: UnBounded, y: Bounded, z: Constrained) <span>-&gt;</span> <span>None</span>:
</span></span><span><span>        self<span>.</span>x <span>=</span> x
</span></span><span><span>        self<span>.</span>y <span>=</span> y
</span></span><span><span>        self<span>.</span>z <span>=</span> z
</span></span></code></pre></div><p>This change also introduces an even more powerful version of <strong>variadic generics</strong>. Meaning you can have an arbitrary number of type parameters for complex data structures and operations.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>class</span> <span>Tuple</span>[<span>*</span>Ts]:
</span></span><span><span>    <span>def</span> __init__(self, <span>*</span>args: <span>*</span>Ts) <span>-&gt;</span> <span>None</span>:
</span></span><span><span>        self<span>.</span>values <span>=</span> args
</span></span><span><span>
</span></span><span><span><span># Works with any number of types!</span>
</span></span><span><span>pair <span>=</span> Tuple[str, int](<span>"hello"</span>, <span>42</span>)
</span></span><span><span>triple <span>=</span> Tuple[str, int, bool](<span>"world"</span>, <span>100</span>, <span>True</span>)
</span></span></code></pre></div><p>Finally, as part of the 3.12 typing changes, Python also introduced a new concise syntax for type aliases!</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># OLD SYNTAX - Python 3.5 to 3.9</span>
</span></span><span><span><span>from</span> typing <span>import</span> NewType
</span></span><span><span>Vector <span>=</span> NewType(<span>"Vector"</span>, list[float])
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># OLD-ish SYNTAX - Python 3.10 to 3.11</span>
</span></span><span><span><span>from</span> typing <span>import</span> TypeAlias
</span></span><span><span>Vector: TypeAlias <span>=</span> list[float]
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># NEW SYNTAX - Python 3.12+</span>
</span></span><span><span>type Vector <span>=</span> list[float]
</span></span></code></pre></div><h3 id="additional-resources-3">Additional Resources</h3>
<ul>
<li><a href="https://arjancodes.com/blog/python-generics-syntax/">Blog on Python 3.12 Generics</a></li>
<li><a href="https://realpython.com/python312-typing/">Python 3.12 Preview: Static Typing Improvements</a></li>
<li><a href="https://typing.python.org/en/latest/spec/generics.html">Python Docs - Generics</a></li>
<li><a href="https://peps.python.org/pep-0695/">PEP 695 – Type Parameter Syntax</a></li>
</ul>
<h2 id="5-protocols">5. Protocols</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1897373856475836829">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1897373856475836829">Nitter Mirror</a></strong></p></blockquote>
<p>One of Python’s major features (and also major complaints) is its support for <a href="https://realpython.com/duck-typing-python/"><strong>Duck Typing</strong></a>. There’s a saying that goes:</p>
<p><q>
    “If it walks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.”
</q></p><p>However, that raises the question: <em>How do you <strong>type</strong> duck typing?</em></p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>class</span> <span>Duck</span>:
</span></span><span><span>    <span>def</span> <span>quack</span>(self): print(<span>'Quack!'</span>)
</span></span><span><span>
</span></span><span><span><span>class</span> <span>Person</span>:
</span></span><span><span>    <span>def</span> <span>quack</span>(self): print(<span>"I'm quacking!"</span>)
</span></span><span><span>
</span></span><span><span><span>class</span> <span>Dog</span>:
</span></span><span><span>    <span>def</span> <span>bark</span>(self): print(<span>'Woof!'</span>)
</span></span><span><span>
</span></span><span><span><span>def</span> <span>run_quack</span>(obj):
</span></span><span><span>    obj<span>.</span>quack()
</span></span><span><span>
</span></span><span><span>run_quack(Duck())  <span># Works!</span>
</span></span><span><span>run_quack(Person())  <span># Works!</span>
</span></span><span><span>run_quack(Dog())  <span># Fails with AttributeError</span>
</span></span></code></pre></div><p>That’s where <strong>Protocols</strong> come in. Protocols (also known as <strong>Structural Subtyping</strong>) are typing classes in Python defining the structure or behavior that classes can follow <strong>without</strong> the use of interfaces or inheritance.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> typing <span>import</span> Protocol
</span></span><span><span>
</span></span><span><span><span>class</span> <span>Quackable</span>(Protocol):
</span></span><span><span>    <span>def</span> <span>quack</span>(self) <span>-&gt;</span> <span>None</span>:
</span></span><span><span>        <span>...</span>  <span># The ellipsis indicates this is just a method signature</span>
</span></span><span><span>
</span></span><span><span><span>class</span> <span>Duck</span>:
</span></span><span><span>    <span>def</span> <span>quack</span>(self): print(<span>'Quack!'</span>)
</span></span><span><span>
</span></span><span><span><span>class</span> <span>Dog</span>:
</span></span><span><span>    <span>def</span> <span>bark</span>(self): print(<span>'Woof!'</span>)
</span></span><span><span>
</span></span><span><span><span>def</span> <span>run_quack</span>(obj: Quackable):
</span></span><span><span>    obj<span>.</span>quack()
</span></span><span><span>
</span></span><span><span>run_quack(Duck())  <span># Works!</span>
</span></span><span><span>run_quack(Dog())  <span># Fails during TYPE CHECKING (not runtime)</span>
</span></span></code></pre></div><p>In essence, Protocols check what your object <em><strong>can</strong></em> do, not what it <em><strong>is</strong></em>. They simply state that as long as an object implements certain methods or behaviors, it qualifies, regardless of its actual type or inheritance.</p>
<p><strong>✨ Additional quick tip:</strong>  Add the <code>@runtime_checkable</code> decorator if you want <code>isinstance()</code> checks to work alongside your Protocols!</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>@runtime_checkable</span>
</span></span><span><span><span>class</span> <span>Drawable</span>(Protocol):
</span></span><span><span>    <span>def</span> <span>draw</span>(self) <span>-&gt;</span> <span>None</span>:
</span></span><span><span>        <span>...</span>
</span></span></code></pre></div><h3 id="additional-resources-4">Additional Resources</h3>
<ul>
<li><a href="https://realpython.com/python-protocol/">Python Protocols: Leveraging Structural Subtyping</a></li>
<li><a href="https://mypy.readthedocs.io/en/stable/protocols.html">MyPy: Protocols and structural subtyping</a></li>
<li><a href="https://typing.python.org/en/latest/spec/protocol.html">Python Docs - Protocols</a></li>
<li><a href="https://peps.python.org/pep-0544/">PEP 544 – Protocols: Structural subtyping</a></li>
</ul>
<h2 id="6-context-managers">6. Context Managers</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1897714940297068624">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1897714940297068624">Nitter Mirror</a></strong></p></blockquote>
<p><strong>Context Managers</strong> are objects that define the methods: <code>__enter__()</code> and <code>__exit__()</code>. The <code>__enter__()</code> method runs when you enter the <code>with</code> block, and the <code>__exit__()</code> method runs when you leave it (even if an exception occurs).</p>
<p><strong><code>Contextlib</code></strong> simplifies this process by wrapping all that boilerplate code in a single easy-to-use decorator.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># OLD SYNTAX - Traditional OOP-style context manager</span>
</span></span><span><span><span>class</span> <span>retry</span>:
</span></span><span><span>    <span>def</span> __enter__(self):
</span></span><span><span>        print(<span>"Entering Context"</span>)
</span></span><span><span>
</span></span><span><span>    <span>def</span> __exit__(self, exc_type, exc_val, exc_tb):
</span></span><span><span>        print(<span>"Exiting Context"</span>)
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># NEW SYNTAX - New contextlib-based context manager</span>
</span></span><span><span><span>import</span> contextlib
</span></span><span><span>
</span></span><span><span><span>@contextlib.contextmanager</span>
</span></span><span><span><span>def</span> <span>retry</span>():
</span></span><span><span>    print(<span>"Entering Context"</span>)
</span></span><span><span>    <span>yield</span>
</span></span><span><span>    print(<span>"Exiting Context"</span>)
</span></span></code></pre></div><p>To create your own, write a function with the <code>@contextlib.contextmanager</code> decorator. Add setup code before <code>yield</code>, cleanup code after it. Any variables on yield will be passed in as additional context. That’s it.</p>
<p>The <code>yield</code> statement instructs the context manager to pause your function and lets content within the <code>with</code> block run.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>import</span> contextlib
</span></span><span><span>
</span></span><span><span><span>@contextlib.contextmanager</span>
</span></span><span><span><span>def</span> <span>context</span>():
</span></span><span><span>    <span># Setup code here</span>
</span></span><span><span>    setup()
</span></span><span><span>    <span>yield</span> (<span>...</span>)  <span># Any variables you want to be passed to the with block</span>
</span></span><span><span>    <span># Teardown code here</span>
</span></span><span><span>    takedown()
</span></span></code></pre></div><p>Overall, this is a much more concise and readable way of creating and using context managers in Python.</p>
<h3 id="additional-resources-5">Additional Resources</h3>
<ul>
<li><a href="https://realpython.com/python-with-statement/">Context Managers and Python’s with Statement</a></li>
<li><a href="https://book.pythontips.com/en/latest/context_managers.html">Python Tips: Context Manager</a></li>
<li><a href="https://docs.python.org/3/library/contextlib.html">Python Docs: <code>contextlib</code> — Utilities for with-statement contexts</a></li>
</ul>
<h2 id="7-structural-pattern-matching">7. Structural Pattern Matching</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1898065958578929801">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1898065958578929801">Nitter Mirror</a></strong></p></blockquote>
<p>Introduced in <a href="https://docs.python.org/3/whatsnew/3.10.html">Python 3.10</a>, <strong>Structural Pattern Matching</strong> gives Python developers a powerful alternative to traditional conditional logic. At its most basic, the syntax looks like this:</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>match</span> value:
</span></span><span><span>    <span>case</span> pattern1:
</span></span><span><span>        <span># code if value matches pattern1</span>
</span></span><span><span>    <span>case</span> pattern2:
</span></span><span><span>        <span># code if value matches pattern2</span>
</span></span><span><span>    <span>case</span> _:
</span></span><span><span>        <span># wildcard case (default)</span>
</span></span></code></pre></div><p>The real power comes with <strong>destructuring</strong>! Match patterns break down complex data structures and extract values in a single step.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># Destructuring and matching tuples</span>
</span></span><span><span><span>match</span> point:
</span></span><span><span>    <span>case</span> (<span>0</span>, <span>0</span>):
</span></span><span><span>        <span>return</span> <span>"Origin"</span>
</span></span><span><span>    <span>case</span> (<span>0</span>, y):
</span></span><span><span>        <span>return</span> <span>f</span><span>"Y-axis at </span><span>{</span>y<span>}</span><span>"</span>
</span></span><span><span>    <span>case</span> (x, <span>0</span>):
</span></span><span><span>        <span>return</span> <span>f</span><span>"X-axis at </span><span>{</span>x<span>}</span><span>"</span>
</span></span><span><span>    <span>case</span> (x, y):
</span></span><span><span>        <span>return</span> <span>f</span><span>"Point at (</span><span>{</span>x<span>}</span><span>, </span><span>{</span>y<span>}</span><span>)"</span>
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># Using OR pattern (|) to match multiple patterns</span>
</span></span><span><span><span>match</span> day:
</span></span><span><span>    <span>case</span> (<span>"Monday"</span>
</span></span><span><span>          <span>|</span> <span>"Tuesday"</span>
</span></span><span><span>          <span>|</span> <span>"Wednesday"</span>
</span></span><span><span>          <span>|</span> <span>"Thursday"</span>
</span></span><span><span>          <span>|</span> <span>"Friday"</span>):
</span></span><span><span>        <span>return</span> <span>"Weekday"</span>
</span></span><span><span>    <span>case</span> <span>"Saturday"</span> <span>|</span> <span>"Sunday"</span>:
</span></span><span><span>        <span>return</span> <span>"Weekend"</span>
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># Guard clauses with inline 'if' statements</span>
</span></span><span><span><span>match</span> temperature:
</span></span><span><span>    <span>case</span> temp <span>if</span> temp <span>&lt;</span> <span>0</span>:
</span></span><span><span>        <span>return</span> <span>"Freezing"</span>
</span></span><span><span>    <span>case</span> temp <span>if</span> temp <span>&lt;</span> <span>20</span>:
</span></span><span><span>        <span>return</span> <span>"Cold"</span>
</span></span><span><span>    <span>case</span> temp <span>if</span> temp <span>&lt;</span> <span>30</span>:
</span></span><span><span>        <span>return</span> <span>"Warm"</span>
</span></span><span><span>    <span>case</span> _:
</span></span><span><span>        <span>return</span> <span>"Hot"</span>
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># Capture entire collections using asterisk (*)</span>
</span></span><span><span><span>match</span> numbers:
</span></span><span><span>    <span>case</span> [f]:
</span></span><span><span>        <span>return</span> <span>f</span><span>"First: </span><span>{</span>f<span>}</span><span>"</span>
</span></span><span><span>    <span>case</span> [f, l]:
</span></span><span><span>        <span>return</span> <span>f</span><span>"First: </span><span>{</span>f<span>}</span><span>, Last: </span><span>{</span>l<span>}</span><span>"</span>
</span></span><span><span>    <span>case</span> [f, <span>*</span>m, l]:
</span></span><span><span>        <span>return</span> <span>f</span><span>"First: </span><span>{</span>f<span>}</span><span>, Middle: </span><span>{</span>m<span>}</span><span>, Last: </span><span>{</span>l<span>}</span><span>"</span>
</span></span><span><span>    <span>case</span> []:
</span></span><span><span>        <span>return</span> <span>"Empty list"</span>
</span></span></code></pre></div><p>You can also combine match-case with other Python features like <strong><a href="https://realpython.com/python-walrus-operator/">walrus operators</a></strong> to create even more powerful patterns.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># Check if a packet is valid or not</span>
</span></span><span><span>packet: list[int] <span>=</span> [<span>0x01</span>, <span>0x02</span>, <span>0x03</span>, <span>0x04</span>, <span>0x05</span>, <span>0x06</span>, <span>0x07</span>]
</span></span><span><span>
</span></span><span><span><span>match</span> packet:
</span></span><span><span>    <span>case</span> [c1, c2, <span>*</span>data, footer] <span>if</span> (  <span># Deconstruct packet into header, data, and footer</span>
</span></span><span><span>        (checksum <span>:=</span> c1 <span>+</span> c2) <span>==</span> sum(data) <span>and</span>  <span># Check that the checksum is correct</span>
</span></span><span><span>        len(data) <span>==</span> footer  <span># Check that the data length is correct</span>
</span></span><span><span>    ):
</span></span><span><span>        print(<span>f</span><span>"Packet received: </span><span>{</span>data<span>}</span><span> (Checksum: </span><span>{</span>checksum<span>}</span><span>)"</span>)
</span></span><span><span>    <span>case</span> [c1, c2, <span>*</span>data]:  <span># Failure case where structure is correct but checksum is wrong</span>
</span></span><span><span>        print(<span>f</span><span>"Packet received: </span><span>{</span>data<span>}</span><span> (Checksum Failed)"</span>)
</span></span><span><span>    <span>case</span> [_, <span>*</span>__]:  <span># Failure case where packet is too short</span>
</span></span><span><span>        print(<span>"Invalid packet length"</span>)
</span></span><span><span>    <span>case</span> []:  <span># Failure case where packet is empty</span>
</span></span><span><span>        print(<span>"Empty packet"</span>)
</span></span><span><span>    <span>case</span> _:  <span># Failure case where packet is invalid</span>
</span></span><span><span>        print(<span>"Invalid packet"</span>)
</span></span></code></pre></div><h3 id="additional-resources-6">Additional Resources</h3>
<ul>
<li><a href="https://realpython.com/structural-pattern-matching/">Structural Pattern Matching in Python</a></li>
<li><a href="https://benhoyt.com/writings/python-pattern-matching/">Structural pattern matching in Python 3.10</a></li>
<li><a href="https://stackoverflow.com/questions/70815197/how-to-do-structural-pattern-matching-in-python-3-10-with-a-type-to-match">Good StackOverflow Thread</a></li>
<li><a href="https://docs.python.org/3/reference/compound_stmts.html#match">Python Docs: The match statement</a></li>
<li><a href="https://peps.python.org/pep-0634/">PEP 634 – Structural Pattern Matching: Specification</a></li>
<li><a href="https://peps.python.org/pep-0636/">PEP 636 – Structural Pattern Matching: Tutorial</a></li>
</ul>
<h2 id="8-python-slots">8. Python Slots</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1898596367045640193">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1898596367045640193">Nitter Mirror</a></strong></p></blockquote>
<p><strong>Slots</strong> are a way to potentially speed up the creation and access of any Python class.</p>
<p><strong>TLDR:</strong> They define a fixed set of attributes for classes, optimizing and speeding up accesses during runtime.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>class</span> <span>Person</span>:
</span></span><span><span>    __slots__ <span>=</span> (<span>'name'</span>, <span>'age'</span>)
</span></span><span><span>
</span></span><span><span>    <span>def</span> __init__(self, name, age):
</span></span><span><span>        self<span>.</span>name <span>=</span> name
</span></span><span><span>        self<span>.</span>age <span>=</span> age
</span></span></code></pre></div><p>Under the hood, Python classes store instance attributes in an internal dictionary called <code>__dict__</code>, meaning a hash table lookup is required each time you want to access a value.</p>
<p>In contrast, <code>__slots__</code> uses an array-like structure where attributes can be looked up in true O(1) time, bringing a minor overall speed bump to Python.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># Without __slots__</span>
</span></span><span><span><span>class</span> <span>FooBar</span>:
</span></span><span><span>    <span>def</span> __init__(self):
</span></span><span><span>        self<span>.</span>a <span>=</span> <span>1</span>
</span></span><span><span>        self<span>.</span>b <span>=</span> <span>2</span>
</span></span><span><span>        self<span>.</span>c <span>=</span> <span>3</span>
</span></span><span><span>
</span></span><span><span>f <span>=</span> FooBar()
</span></span><span><span>print(f<span>.</span>__dict__)  <span># {'a': 1, 'b': 2, 'c': 3}</span>
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># With __slots__</span>
</span></span><span><span><span>class</span> <span>FooBar</span>:
</span></span><span><span>    __slots__ <span>=</span> (<span>'a'</span>, <span>'b'</span>, <span>'c'</span>)
</span></span><span><span>
</span></span><span><span>    <span>def</span> __init__(self):
</span></span><span><span>        self<span>.</span>a <span>=</span> <span>1</span>
</span></span><span><span>        self<span>.</span>b <span>=</span> <span>2</span>
</span></span><span><span>        self<span>.</span>c <span>=</span> <span>3</span>
</span></span><span><span>
</span></span><span><span>f <span>=</span> FooBar()
</span></span><span><span>print(f<span>.</span>__dict__)  <span># AttributeError</span>
</span></span><span><span>print(f<span>.</span>__slots__)  <span># ('a', 'b', 'c')</span>
</span></span></code></pre></div><p>There is still debate about whether <code>__slots__</code> is worth using, as it complicates class definitions with very marginal or no performance benefits at all. However, it is a useful tool to have in your arsenal if you ever need it.</p>
<h3 id="additional-resources-7">Additional Resources</h3>
<ul>
<li><a href="https://wiki.python.org/moin/UsingSlots">Using Slots - Python Wiki</a></li>
<li><a href="https://medium.com/@apps.merkurev/dont-forget-about-slots-in-python-c397f414c490">Don’t forget about <code>__slots__</code> in Python!</a></li>
<li><a href="https://stackoverflow.com/questions/472000/usage-of-slots">StackOverflow - Usage of <code>__slots__</code></a></li>
</ul>
<h2 id="9-python-nitpicks">9. Python Nitpicks</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1898934432939290658">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1898934432939290658">Nitter Mirror</a></strong></p></blockquote>
<blockquote>
<p>This is not a Python “feature” or “tip” per se, but instead a handful of quick syntax tips to really clean up your Python codebase.</p>
<p>As someone who’s seen a lot of Python code.</p></blockquote>
<h2 id="91-for-else-statements">9.1 For-else statements</h2>
<p>If you ever need to check if a for loop completes without a break, <strong>for-else statements</strong> are a great way to accomplish this <strong>without</strong> using a temporary variable.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Don't write this =====</span>
</span></span><span><span>found_server <span>=</span> <span>False</span>  <span># Keep track of whether we found a server</span>
</span></span><span><span><span>for</span> server <span>in</span> servers:
</span></span><span><span>    <span>if</span> server<span>.</span>check_availability():
</span></span><span><span>        primary_server <span>=</span> server
</span></span><span><span>        found_server <span>=</span> <span>True</span>  <span># Set the flag to True</span>
</span></span><span><span>        <span>break</span>
</span></span><span><span><span>if</span> <span>not</span> found_server:
</span></span><span><span>    <span># Use the backup server if no server was found</span>
</span></span><span><span>    primary_server <span>=</span> backup_server
</span></span><span><span>
</span></span><span><span><span># Continue execution with whatever server we found</span>
</span></span><span><span>deploy_application(primary_server)
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Write this instead =====</span>
</span></span><span><span><span>for</span> server <span>in</span> servers:
</span></span><span><span>    <span>if</span> server<span>.</span>check_availability():
</span></span><span><span>        primary_server <span>=</span> server
</span></span><span><span>        <span>break</span>
</span></span><span><span><span>else</span>:
</span></span><span><span>    <span># Use the backup server if no server was found</span>
</span></span><span><span>    primary_server <span>=</span> backup_server
</span></span><span><span>
</span></span><span><span><span># Continue execution with whatever server we found</span>
</span></span><span><span>deploy_application(primary_server)
</span></span></code></pre></div><h2 id="92-walrus-operator">9.2 Walrus Operator</h2>
<p>If you need to define and evaluate a variable all in one expression, the <strong>Walrus Operator</strong> (new in Python 3.8 with <a href="https://peps.python.org/pep-0572/">PEP 572</a>) is a quick way to accomplish just that.</p>
<blockquote>
<p>Walrus operators are really useful for using a value right after checking if it is <strong><code>not None</code></strong>!</p></blockquote>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Don't write this =====</span>
</span></span><span><span>response <span>=</span> get_user_input()
</span></span><span><span><span>if</span> response:
</span></span><span><span>    print(<span>'You pressed:'</span>, response)
</span></span><span><span><span>else</span>:
</span></span><span><span>    print(<span>'You pressed nothing'</span>)
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Write this instead =====</span>
</span></span><span><span><span>if</span> response <span>:=</span> get_user_input():
</span></span><span><span>    print(<span>'You pressed:'</span>, response)
</span></span><span><span><span>else</span>:
</span></span><span><span>    print(<span>'You pressed nothing'</span>)
</span></span></code></pre></div><h2 id="93-short-circuit-evaluation">9.3 Short Circuit Evaluation</h2>
<p><strong>Short-circuit Evaluation</strong> is a shortcut for getting the “next available” or “next truthy” value in a list of expressions. It turns out you can simply chain <code>or</code> statements!</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Don't write this =====</span>
</span></span><span><span>username, full_name, first_name <span>=</span> get_user_info()
</span></span><span><span>
</span></span><span><span><span>if</span> username <span>is</span> <span>not</span> <span>None</span>:
</span></span><span><span>    display_name <span>=</span> username
</span></span><span><span><span>elif</span> full_name <span>is</span> <span>not</span> <span>None</span>:
</span></span><span><span>    display_name <span>=</span> full_name
</span></span><span><span><span>elif</span> first_name <span>is</span> <span>not</span> <span>None</span>:
</span></span><span><span>    display_name <span>=</span> first_name
</span></span><span><span><span>else</span>:
</span></span><span><span>    display_name <span>=</span> <span>"Anonymous"</span>
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Write this instead =====</span>
</span></span><span><span>username, full_name, first_name <span>=</span> get_user_info()
</span></span><span><span>
</span></span><span><span>display_name <span>=</span> username <span>or</span> full_name <span>or</span> first_name <span>or</span> <span>"Anonymous"</span>
</span></span></code></pre></div><h2 id="94-operator-chaining">9.4 Operator Chaining</h2>
<p>Finally, Python lets you <strong>chain comparison operators</strong> together to shorten up integer range comparisons, making them more readable than the equivalent boolean expressions.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Don't write this =====</span>
</span></span><span><span><span>if</span> <span>0</span> <span>&lt;</span> x <span>and</span> x <span>&lt;</span> <span>10</span>:
</span></span><span><span>    print(<span>"x is between 0 and 10"</span>)
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Write this instead =====</span>
</span></span><span><span><span>if</span> <span>0</span> <span>&lt;</span> x <span>&lt;</span> <span>10</span>:  <span># Instead of if 0 &lt; x and x &lt; 10</span>
</span></span><span><span>    print(<span>"x is between 0 and 10"</span>)
</span></span></code></pre></div><h3 id="additional-resources-8">Additional Resources</h3>
<ul>
<li><a href="https://book.pythontips.com/en/latest/for_-_else.html"><code>for/else</code> - Python Tips</a></li>
<li><a href="https://realpython.com/python-walrus-operator/">The Walrus Operator: Python’s Assignment Expressions</a></li>
<li><a href="https://peps.python.org/pep-0572/">PEP 572 – Assignment Expressions</a></li>
<li><a href="https://realpython.com/python-or-operator/#default-values-for-variables">Using the “or” Boolean Operator in Python</a></li>
<li><a href="https://mathspp.com/blog/pydonts/chaining-comparison-operators">Chaining Comparison Operators</a></li>
</ul>
<h2 id="10-advanced-f-string-string-formatting">10. Advanced f-string String Formatting</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1899162302131122430">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1899162302131122430">Nitter Mirror</a></strong></p></blockquote>
<p>Python’s <strong>f-strings</strong> are no secret by now. Introduced in Python 3.6 with <a href="https://peps.python.org/pep-0498/">PEP 498</a>, they are a better, cleaner, faster, and safer method of interpolating variables, objects, and expressions into strings.</p>
<p>But did you know there is more to f-strings than just inserting variables? There exists a hidden formatting syntax called the <strong>Format Mini-Language</strong> that allows you to have much greater control over string formatting.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span>print(<span>f</span><span>"</span><span>{</span><span>' [ Run Status ] '</span><span>:</span><span>=^50</span><span>}</span><span>"</span>)
</span></span><span><span>print(<span>f</span><span>"[</span><span>{</span>time<span>:</span><span>%H:%M:%S</span><span>}</span><span>] Training Run </span><span>{</span>run_id<span>=}</span><span> status: </span><span>{</span>progress<span>:</span><span>.1%</span><span>}</span><span>"</span>)
</span></span><span><span>print(<span>f</span><span>"Summary: </span><span>{</span>total_samples<span>:</span><span>,</span><span>}</span><span> samples processed"</span>)
</span></span><span><span>print(<span>f</span><span>"Accuracy: </span><span>{</span>accuracy<span>:</span><span>.4f</span><span>}</span><span> | Loss: </span><span>{</span>loss<span>:</span><span>#.3g</span><span>}</span><span>"</span>)
</span></span><span><span>print(<span>f</span><span>"Memory: </span><span>{</span>memory <span>/</span> <span>1e9</span><span>:</span><span>+.2f</span><span>}</span><span> GB"</span>)
</span></span></code></pre></div><p><strong>Output:</strong></p>
<pre tabindex="0"><code>=================== [ Run Status ] ===================
[11:16:37] Training Run run_id=42 status: 87.4%
Summary: 12,345,678 samples processed
Accuracy: 0.9876 | Loss: 0.0123
Memory: +2.75 GB
</code></pre><p>You can do things like enable debug expressions, apply number formatting (similar to <code>str.format</code>), add string padding, format datetime objects, and more! All within f-string format specifiers.</p>
<h2 id="regular-f-strings">Regular f-strings</h2>
<pre tabindex="0"><code>Hello World!
</code></pre><h2 id="debug-expressions">Debug Expressions</h2>
<div><pre tabindex="0"><code data-lang="python"><span><span>print(<span>f</span><span>"</span><span>{</span>name<span>=}</span><span>, </span><span>{</span>age<span>=}</span><span>"</span>)
</span></span></code></pre></div><pre tabindex="0"><code>name='Claude', age=3
</code></pre><h2 id="number-formatting">Number Formatting</h2>
<div><pre tabindex="0"><code data-lang="python"><span><span>print(<span>f</span><span>"Pi: </span><span>{</span>pi<span>:</span><span>.2f</span><span>}</span><span>"</span>)
</span></span><span><span>print(<span>f</span><span>"Avogadro: </span><span>{</span>avogadro<span>:</span><span>.2e</span><span>}</span><span>"</span>)
</span></span><span><span>print(<span>f</span><span>"Big Number: </span><span>{</span>big_num<span>:</span><span>,</span><span>}</span><span>"</span>)
</span></span><span><span>print(<span>f</span><span>"Hex: </span><span>{</span>num<span>:</span><span>#0x</span><span>}</span><span>"</span>)
</span></span><span><span>print(<span>f</span><span>"Number: </span><span>{</span>num<span>:</span><span>09</span><span>}</span><span>"</span>)
</span></span></code></pre></div><pre tabindex="0"><code>Pi: 3.14
Avogadro: 6.02e+23
Big Number: 1,000,000
Hex: 0x1a4
Number: 000000420
</code></pre><h2 id="string-padding">String Padding</h2>
<div><pre tabindex="0"><code data-lang="python"><span><span>print(<span>f</span><span>"Left: |</span><span>{</span>word<span>:</span><span>&lt;10</span><span>}</span><span>|"</span>)
</span></span><span><span>print(<span>f</span><span>"Right: |</span><span>{</span>word<span>:</span><span>&gt;10</span><span>}</span><span>|"</span>)
</span></span><span><span>print(<span>f</span><span>"Center: |</span><span>{</span>word<span>:</span><span>^10</span><span>}</span><span>|"</span>)
</span></span><span><span>print(<span>f</span><span>"Center *: |</span><span>{</span>word<span>:</span><span>*^10</span><span>}</span><span>|"</span>)
</span></span></code></pre></div><pre tabindex="0"><code>Left: |Python    |
Right: |    Python|
Center: |  Python  |
Center *: |**Python**|
</code></pre><h2 id="date-formatting">Date Formatting</h2>
<div><pre tabindex="0"><code data-lang="python"><span><span>print(<span>f</span><span>"Date: </span><span>{</span>now<span>:</span><span>%Y-%m-%d</span><span>}</span><span>"</span>)
</span></span><span><span>print(<span>f</span><span>"Time: </span><span>{</span>now<span>:</span><span>%H:%M:%S</span><span>}</span><span>"</span>)
</span></span></code></pre></div><pre tabindex="0"><code>Date: 2025-03-10
Time: 14:30:59
</code></pre><h2 id="percentage-formatting">Percentage Formatting</h2>
<div><pre tabindex="0"><code data-lang="python"><span><span>print(<span>f</span><span>"Progress: </span><span>{</span>progress<span>:</span><span>.1%</span><span>}</span><span>"</span>)
</span></span></code></pre></div><pre tabindex="0"><code>Progress: 75.0%
</code></pre><h3 id="additional-resources-9">Additional Resources</h3>
<ul>
<li><a href="https://realpython.com/python-f-strings/">Python’s F-String for String Interpolation and Formatting</a></li>
<li><a href="https://realpython.com/python-format-mini-language/">Python’s Format Mini-Language for Tidy Strings</a></li>
<li><a href="https://docs.python.org/3/tutorial/inputoutput.html">Python Docs - Input and Output</a></li>
<li><a href="https://peps.python.org/pep-0498/">PEP 498 – Literal String Interpolation</a></li>
</ul>
<h2 id="11-cache--lru_cache">11. Cache / lru_cache</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1899571802873135208">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1899571802873135208">Nitter Mirror</a></strong></p></blockquote>
<p>You can use the built-in <strong><code>@cache</code></strong> decorator to dramatically speed up recursive functions and expensive calculations! (which superseded <code>@lru_cache</code> in Python 3.9!)</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> functools <span>import</span> cache
</span></span><span><span>
</span></span><span><span><span>@cache</span>
</span></span><span><span><span>def</span> <span>fib</span>(n):
</span></span><span><span>    <span>return</span> n <span>if</span> n <span>&lt;</span> <span>2</span> <span>else</span> fib(n<span>-</span><span>1</span>) <span>+</span> fib(n<span>-</span><span>2</span>)
</span></span></code></pre></div><p>Since Python 3.2, <code>@lru_cache</code> was introduced as part of the <code>functools</code> module for quick &amp; clean function memoization. Starting with Python 3.9, <code>@cache</code> was added for the same effect with less code. <code>lru_cache</code> still exists if you want explicit control of the cache size.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span>FIB_CACHE <span>=</span> {}
</span></span><span><span>
</span></span><span><span><span># With Manual Caching :(</span>
</span></span><span><span><span>def</span> <span>fib</span>(n):
</span></span><span><span>    <span>if</span> n <span>in</span> FIB_CACHE:
</span></span><span><span>        <span>return</span> FIB_CACHE[n]
</span></span><span><span>    <span>if</span> n <span>&lt;=</span> <span>2</span>:
</span></span><span><span>        <span>return</span> <span>1</span>
</span></span><span><span>    FIB_CACHE[n] <span>=</span> fib(n <span>-</span> <span>1</span>) <span>+</span> fib(n <span>-</span> <span>2</span>)
</span></span><span><span>    <span>return</span> FIB_CACHE[n]
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> functools <span>import</span> lru_cache
</span></span><span><span>
</span></span><span><span><span># Same code with lru_cache :)</span>
</span></span><span><span><span>@lru_cache</span>(maxsize<span>=</span><span>None</span>)
</span></span><span><span><span>def</span> <span>fib</span>(n):
</span></span><span><span>    <span>return</span> n <span>if</span> n <span>&lt;</span> <span>2</span> <span>else</span> fib(n<span>-</span><span>1</span>) <span>+</span> fib(n<span>-</span><span>2</span>)
</span></span></code></pre></div><div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> functools <span>import</span> cache
</span></span><span><span>
</span></span><span><span><span># Same code with new Python 3.9's cache :D</span>
</span></span><span><span><span>@cache</span>
</span></span><span><span><span>def</span> <span>fib</span>(n):
</span></span><span><span>    <span>return</span> n <span>if</span> n <span>&lt;</span> <span>2</span> <span>else</span> fib(n<span>-</span><span>1</span>) <span>+</span> fib(n<span>-</span><span>2</span>)
</span></span></code></pre></div><h3 id="additional-resources-10">Additional Resources</h3>
<ul>
<li><a href="https://www.datacamp.com/tutorial/python-cache-introduction">Python Cache: Two Simple Methods</a></li>
<li><a href="https://realpython.com/lru-cache-python/">(outdated) Caching in Python Using the LRU Cache Strategy</a></li>
<li><a href="https://docs.python.org/3/library/functools.html#functools.cache">Python Docs - <code>@functools.cache</code></a></li>
<li><a href="https://docs.python.org/3/library/functools.html#functools.lru_cache">Python Docs - <code>@functools.lru_cache</code></a></li>
</ul>
<h2 id="12-python-futures">12. Python Futures</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1899900763977228374">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1899900763977228374">Nitter Mirror</a></strong></p></blockquote>
<p>Did you know that Python has native <code>Promise</code>-like concurrency control?</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> concurrent.futures <span>import</span> Future
</span></span><span><span>
</span></span><span><span><span># Manually create a Future Object</span>
</span></span><span><span>future <span>=</span> Future()
</span></span><span><span>
</span></span><span><span><span># Set its result whenever you want</span>
</span></span><span><span>future<span>.</span>set_result(<span>"Hello from the future!"</span>)
</span></span><span><span>
</span></span><span><span><span># Get the result</span>
</span></span><span><span>print(future<span>.</span>result())  <span># "Hello from the future!"</span>
</span></span></code></pre></div><p>Python’s <strong><code>concurrent.futures</code></strong> module gives you direct control over async operations, just like JS Promises. For example, they let you attach callbacks that run when the result is ready (just like JS’s <code>.then()</code>).</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> concurrent.futures <span>import</span> Future
</span></span><span><span>
</span></span><span><span>future <span>=</span> Future()
</span></span><span><span>
</span></span><span><span><span># Add callbacks BEFORE or AFTER completion!</span>
</span></span><span><span>future<span>.</span>add_done_callback(<span>lambda</span> f: print(<span>f</span><span>"Got: </span><span>{</span>f<span>.</span>result()<span>}</span><span>"</span>))
</span></span><span><span>
</span></span><span><span>future<span>.</span>set_result(<span>"Async result"</span>)
</span></span><span><span><span># Prints: "Got: Async result"</span>
</span></span><span><span>
</span></span><span><span>future<span>.</span>add_done_callback(<span>lambda</span> f: print(<span>f</span><span>"After: </span><span>{</span>f<span>.</span>result()<span>}</span><span>"</span>))
</span></span><span><span><span># Prints: "After: Async result"</span>
</span></span></code></pre></div><p>Python Futures also come with primitives to handle exceptions, set timeouts, or stop tasks completely.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> concurrent.futures <span>import</span> Future
</span></span><span><span><span>import</span> time<span>,</span> threading
</span></span><span><span>
</span></span><span><span><span># Create and manage a future manually</span>
</span></span><span><span>future <span>=</span> Future()
</span></span><span><span>
</span></span><span><span><span># Background task function</span>
</span></span><span><span><span>def</span> <span>background_task</span>():
</span></span><span><span>    time<span>.</span>sleep(<span>2</span>)
</span></span><span><span>    future<span>.</span>set_result(<span>"Done!"</span>)
</span></span><span><span>
</span></span><span><span>thread <span>=</span> threading<span>.</span>Thread(target<span>=</span>background_task)
</span></span><span><span>thread<span>.</span>daemon <span>=</span> <span>True</span>
</span></span><span><span>thread<span>.</span>start()
</span></span><span><span>
</span></span><span><span><span># Try all control operations</span>
</span></span><span><span>print(<span>f</span><span>"Cancelled: </span><span>{</span>future<span>.</span>cancel()<span>}</span><span>"</span>)  <span># Likely False if started</span>
</span></span><span><span>
</span></span><span><span><span>try</span>:
</span></span><span><span>    <span># Wait at most 0.5 seconds</span>
</span></span><span><span>    result <span>=</span> future<span>.</span>result(timeout<span>=</span><span>0.5</span>)
</span></span><span><span><span>except</span> <span>TimeoutError</span>:
</span></span><span><span>    print(<span>"Timed out!"</span>)
</span></span><span><span>
</span></span><span><span><span># Create failed future</span>
</span></span><span><span>err_future <span>=</span> Future()
</span></span><span><span>err_future<span>.</span>set_exception(<span>ValueError</span>(<span>"Failed"</span>))
</span></span><span><span>print(<span>f</span><span>"Has error: </span><span>{</span>bool(err_future<span>.</span>exception())<span>}</span><span>"</span>)
</span></span></code></pre></div><p>Just like modern JS, the <code>asyncio</code> module has its own Future that works seamlessly with Python’s <code>async/await</code> syntax:</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>import</span> asyncio
</span></span><span><span>
</span></span><span><span><span>async</span> <span>def</span> <span>main</span>():
</span></span><span><span>    future <span>=</span> asyncio<span>.</span>Future()
</span></span><span><span>
</span></span><span><span>    <span># Set result after delay</span>
</span></span><span><span>    asyncio<span>.</span>create_task(set_after_delay(future))
</span></span><span><span>
</span></span><span><span>    <span># Await just like a JS Promise!</span>
</span></span><span><span>    result <span>=</span> <span>await</span> future
</span></span><span><span>    print(result)  <span># "Worth the wait!"</span>
</span></span><span><span>
</span></span><span><span><span>async</span> <span>def</span> <span>set_after_delay</span>(future):
</span></span><span><span>    <span>await</span> asyncio<span>.</span>sleep(<span>1</span>)
</span></span><span><span>    future<span>.</span>set_result(<span>"Worth the wait!"</span>)
</span></span><span><span>
</span></span><span><span>asyncio<span>.</span>run(main())
</span></span></code></pre></div><p>Finally, for CPU or I/O bound tasks, Python’s <code>ThreadPoolExecutor</code> can automatically create and manage futures for you.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> concurrent.futures <span>import</span> ThreadPoolExecutor
</span></span><span><span><span>import</span> time
</span></span><span><span>
</span></span><span><span><span>def</span> <span>slow_task</span>():
</span></span><span><span>    time<span>.</span>sleep(<span>1</span>)
</span></span><span><span>    <span>return</span> <span>"Done!"</span>
</span></span><span><span>
</span></span><span><span><span>with</span> ThreadPoolExecutor() <span>as</span> executor:
</span></span><span><span>    <span># Returns a Future immediately</span>
</span></span><span><span>    future <span>=</span> executor<span>.</span>submit(slow_task)
</span></span><span><span>
</span></span><span><span>    <span># Do other work while waiting...</span>
</span></span><span><span>    print(<span>"Working..."</span>)
</span></span><span><span>
</span></span><span><span>    <span># Get result when needed</span>
</span></span><span><span>    print(future<span>.</span>result())
</span></span></code></pre></div><h3 id="additional-resources-11">Additional Resources</h3>
<ul>
<li><a href="https://medium.com/@smrati.katiyar/introduction-to-concurrent-futures-in-python-009fe1d4592c">Introduction to <code>concurrent.futures</code> in Python</a></li>
<li><a href="https://alexwlchan.net/2019/adventures-with-concurrent-futures/">Adventures in Python with <code>concurrent.futures</code></a></li>
<li><a href="https://docs.python.org/3/library/asyncio-future.html">Python Docs - Futures</a></li>
<li><a href="https://docs.python.org/3/library/concurrent.futures.html">Python Docs - <code>concurrent.futures</code></a></li>
</ul>
<h2 id="13-proxy-properties">13. Proxy Properties</h2>
<blockquote>
<p><strong><a href="https://x.com/edwardjxli/status/1900316544066007332">Original X/Twitter Thread</a>  |  <a href="https://nitter.hydranet.dev/edwardjxli/status/1900316544066007332">Nitter Mirror</a></strong></p></blockquote>
<p>Did you know you can make class attributes act as <strong>BOTH</strong> methods <strong>AND</strong> properties?!? <em>This isn’t a built-in feature of Python</em>, but instead a demonstration of what you can do with clever use of Python’s dunder (magic) methods and descriptors.</p>
<blockquote>
<p>(Note that this is very much an example implementation and should not be used in production)</p></blockquote>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>from</span> typing <span>import</span> Callable, Generic, TypeVar, ParamSpec, Self
</span></span><span><span>
</span></span><span><span>P <span>=</span> ParamSpec(<span>"P"</span>)
</span></span><span><span>R <span>=</span> TypeVar(<span>"R"</span>)
</span></span><span><span>T <span>=</span> TypeVar(<span>"T"</span>)
</span></span><span><span>
</span></span><span><span><span>class</span> <span>ProxyProperty</span>(Generic[P, R]):
</span></span><span><span>    func: Callable[P, R]
</span></span><span><span>    instance: object
</span></span><span><span>
</span></span><span><span>    <span>def</span> __init__(self, func: Callable[P, R]) <span>-&gt;</span> <span>None</span>:
</span></span><span><span>        self<span>.</span>func <span>=</span> func
</span></span><span><span>
</span></span><span><span>    <span>def</span> __get__(self, instance: object, _<span>=</span><span>None</span>) <span>-&gt;</span> Self:
</span></span><span><span>        self<span>.</span>instance <span>=</span> instance
</span></span><span><span>        <span>return</span> self
</span></span><span><span>
</span></span><span><span>    <span>def</span> __call__(self, <span>*</span>args: P<span>.</span>args, <span>**</span>kwargs: P<span>.</span>kwargs) <span>-&gt;</span> R:
</span></span><span><span>        <span>return</span> self<span>.</span>func(self<span>.</span>instance, <span>*</span>args, <span>**</span>kwargs)
</span></span><span><span>
</span></span><span><span>    <span>def</span> __repr__(self) <span>-&gt;</span> str:
</span></span><span><span>        <span>return</span> self<span>.</span>func(self<span>.</span>instance)
</span></span><span><span>
</span></span><span><span><span>def</span> <span>proxy_property</span>(func: Callable[P, R]) <span>-&gt;</span> ProxyProperty[P, R]:
</span></span><span><span>    <span>return</span> ProxyProperty(func)
</span></span><span><span>
</span></span><span><span><span>class</span> <span>Container</span>:
</span></span><span><span>    <span>@proxy_property</span>
</span></span><span><span>    <span>def</span> <span>value</span>(self, val: int <span>=</span> <span>5</span>) <span>-&gt;</span> str:
</span></span><span><span>        <span>return</span> <span>f</span><span>"The value is: </span><span>{</span>val<span>}</span><span>"</span>
</span></span><span><span>
</span></span><span><span><span># Example usage</span>
</span></span><span><span>c <span>=</span> Container()
</span></span><span><span>print(c<span>.</span>value)      <span># Returns: The value is: 5</span>
</span></span><span><span>print(c<span>.</span>value(<span>7</span>))   <span># Returns: The value is: 7</span>
</span></span></code></pre></div><p><em>How does this work under the hood?</em> It comes down to Python’s <strong><a href="https://docs.python.org/3/howto/descriptor.html">Descriptor Protocol</a></strong>:</p>
<ol>
<li>
<p>The <code>__get__</code> method transforms the <code>ProxyProperty</code> object into a <strong>descriptor</strong>.</p>
</li>
<li>
<p>When you access <code>c.value</code>, Python calls <code>__get__</code> which returns <code>self</code> (the descriptor instance).</p>
</li>
<li>
<p>The <code>__repr__</code> method handles property access (returning default values).</p>
</li>
<li>
<p>The <code>__call__</code> method handles method calls with parameters.</p>
</li>
</ol>
<p>This creates a dual-purpose attribute that can be both read directly AND called like a function!</p>
<p>The benefit of this class is that it allows you to create intuitive APIs where a property might need configuration, or properties that should have sensible defaults but still allow for customization.</p>
<blockquote>
<p>If you want to look at a proper production-ready implementation of <strong>proxy properties</strong>, check out Codegen’s implementation of <code>ProxyProperty</code> here: <a href="https://github.com/codegen-sh/codegen/blob/590ce812c08d973d8f2c22795ab3e5055cea6b1e/src/codegen/sdk/_proxy.py#L5">codegen/src/codegen/sdk/_proxy.py</a></p></blockquote>
<h3 id="additional-resources-12">Additional Resources</h3>
<ul>
<li><a href="https://realpython.com/python-descriptors/">Python Descriptors: An Introduction</a></li>
<li><a href="https://deepsource.com/blog/demystifying-python-descriptor-protocol">Demystifying Python’s Descriptor Protocol</a></li>
<li><a href="https://docs.python.org/3/howto/descriptor.html">Descriptor Guide - Python Wiki</a></li>
<li><a href="https://wrapt.readthedocs.io/en/latest/wrappers.html">Proxies and Wrappers</a></li>
</ul>

<p>Finally, introducing one of Python’s most powerful yet mysterious features: <strong>Metaclasses</strong></p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>class</span> <span>MyMetaclass</span>(type):
</span></span><span><span>    <span>def</span> __new__(cls, name, bases, namespace):
</span></span><span><span>        <span># Magic happens here</span>
</span></span><span><span>        <span>return</span> super()<span>.</span>__new__(cls, name, bases, namespace)
</span></span><span><span>
</span></span><span><span><span>class</span> <span>MyClass</span>(metaclass<span>=</span>MyMetaclass):
</span></span><span><span>    <span>pass</span>
</span></span><span><span>
</span></span><span><span>obj <span>=</span> MyClass()
</span></span></code></pre></div><p>Classes in Python aren’t just blueprints for objects. They’re objects too! And every object needs a class that created it. So what creates class objects? <strong>Metaclasses</strong>.</p>
<p>By default, Python uses the <code>type</code> metaclass to create all classes. For example, these two are equivalent to each other:</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># Create a MyClass object</span>
</span></span><span><span><span>class</span> <span>MyClass</span>:
</span></span><span><span>    <span>...</span>
</span></span><span><span>obj <span>=</span> MyClass()
</span></span><span><span>
</span></span><span><span><span># Also creates a MyClass object</span>
</span></span><span><span>obj2 <span>=</span> type(<span>"MyClass"</span>, (), {})
</span></span></code></pre></div><p>To break down what those arguments mean, here is an example that creates a class with an attribute <code>x</code> and a method <code>say_hi</code>, that also subclasses off <code>object</code>.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># type(</span>
</span></span><span><span><span>#     name,</span>
</span></span><span><span><span>#     bases,</span>
</span></span><span><span><span>#     attributes</span>
</span></span><span><span><span># )</span>
</span></span><span><span>CustomClass <span>=</span> type(
</span></span><span><span>    <span>'CustomClass'</span>,
</span></span><span><span>    (object,),
</span></span><span><span>    {<span>'x'</span>: <span>5</span>, <span>'say_hi'</span>: <span>lambda</span> self: <span>'Hello!'</span>}
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span>obj <span>=</span> CustomClass()
</span></span><span><span>print(obj<span>.</span>x)  <span># 5</span>
</span></span><span><span>print(obj<span>.</span>say_hi())  <span># Hello!</span>
</span></span></code></pre></div><p>In essence, Metaclasses let you customize and modify these arguments during class creation. For example, here is a metaclass that doubles every integer attribute for a class:</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>class</span> <span>DoubleAttrMeta</span>(type):
</span></span><span><span>    <span>def</span> __new__(cls, name, bases, namespace):
</span></span><span><span>        new_namespace <span>=</span> {}
</span></span><span><span>        <span>for</span> key, val <span>in</span> namespace<span>.</span>items():
</span></span><span><span>            <span>if</span> isinstance(val, int):
</span></span><span><span>                val <span>*=</span> <span>2</span>
</span></span><span><span>            new_namespace[key] <span>=</span> val
</span></span><span><span>        <span>return</span> super()<span>.</span>__new__(cls, name, bases, new_namespace)
</span></span><span><span>
</span></span><span><span><span>class</span> <span>MyClass</span>(metaclass<span>=</span>DoubleAttrMeta):
</span></span><span><span>    x <span>=</span> <span>5</span>
</span></span><span><span>    y <span>=</span> <span>10</span>
</span></span><span><span>
</span></span><span><span>print(MyClass<span>.</span>x)  <span># 10</span>
</span></span><span><span>print(MyClass<span>.</span>y)  <span># 20</span>
</span></span></code></pre></div><p>Here is another example of a metaclass that registers every class created into a registry.</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Metaclass Solution =====</span>
</span></span><span><span><span>class</span> <span>RegisterMeta</span>(type):
</span></span><span><span>    registry <span>=</span> []
</span></span><span><span>    <span>def</span> __new__(mcs, name, bases, attrs):
</span></span><span><span>        cls <span>=</span> super()<span>.</span>__new__(mcs, name, bases, attrs)
</span></span><span><span>        mcs<span>.</span>registry<span>.</span>append(cls)
</span></span><span><span>        <span>return</span> cls
</span></span></code></pre></div><p><em>The problem is</em>, decorators could achieve this same goal without the use of black magic (and it’s often cleaner too).</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span># ===== Decorator Solution =====</span>
</span></span><span><span><span>def</span> <span>register</span>(cls):
</span></span><span><span>    registry<span>.</span>append(cls)
</span></span><span><span>    <span>return</span> cls
</span></span><span><span>
</span></span><span><span><span>@register</span>
</span></span><span><span><span>class</span> <span>MyClass</span>:
</span></span><span><span>    <span>pass</span>
</span></span></code></pre></div><p>And that kind of brings to light the biggest problem with metaclasses:</p>
<p><strong>Almost 100% of the time, you will never need to touch them.</strong></p>
<p>In your day-to-day development, 99% of your code won’t ever hit a use case where metaclasses could be useful. And of that 1%, 95% of those cases could just be solved with regular decorators, dunder methods, or just plain inheritance.</p>
<p>That’s why there is that one famous Python quote that goes:</p>
<p><q>
    Metaclasses are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don’t. - Tim Peters
</q></p><p>But if you are that 1% which has a unique enough problem that only metaclasses can solve, they are a powerful tool that lets you tinker with the internals of the Python object system.</p>
<blockquote>
<p><strong>As for some real-world examples of metaclasses:</strong></p>
<ul>
<li>Python’s “ABC” implementation uses metaclasses to implement abstract classes.</li>
<li>Python’s “Enum” implementation uses it to create enumeration types.</li>
<li>A bunch of 3rd party libraries like Django, SQLAlchemy, Pydantic, and Pytest use metaclasses for a variety of purposes.</li>
</ul></blockquote>
<h3 id="additional-resources-13">Additional Resources</h3>
<ul>
<li><a href="https://realpython.com/python-metaclasses/">Python Metaclasses</a></li>
<li><a href="https://sentry.io/answers/what-are-Python-metaclasses/">What are Python Metaclasses?</a></li>
<li><a href="https://medium.com/@miguel.amezola/demystifying-python-metaclasses-understanding-and-harnessing-the-power-of-custom-class-creation-d7dff7b68de8">Demystifying Python Metaclasses</a></li>
<li><a href="https://s3.dualstack.us-east-2.amazonaws.com/pythondotorg-assets/media/files/meta-vladimir.txt">Re: The metaclass saga using Python</a></li>
</ul>
<h2 id="fin">Fin</h2>
<p><strong>And that’s it folks!</strong> 14 of some of the most interesting &amp; underrated Python features that I’ve encountered in my Python career.</p>
<p>If you’ve made it this far, shoot me a quick message as to which ones you’ve seen before and which ones you haven’t! I’d love to hear from you.</p>
<p>Happy Python-ing, y’all 🐍!</p>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Open Source Projects Receive Funding to Reclaim the Public Internet (442 pts)]]></title>
            <link>https://nlnet.nl/news/2025/20250422-announcement-grants-CommonsFund.html</link>
            <guid>43769482</guid>
            <pubDate>Wed, 23 Apr 2025 07:20:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nlnet.nl/news/2025/20250422-announcement-grants-CommonsFund.html">https://nlnet.nl/news/2025/20250422-announcement-grants-CommonsFund.html</a>, See on <a href="https://news.ycombinator.com/item?id=43769482">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincolumn">
          
          <p>It is wonderful to see the growing number of people working on digital commons, inventing and improving technologies to the benefit of all humanity. 42 of such projects have been selected for funding in the October call of the NGI Zero Commons Fund. In terms of applications, it was the largest call round in NGI Zero's life time. And we'd like to take this space to thank <em>all</em> applicants for their contributions to an internet for people rather than for profit.</p>
          <p>The selected projects all contribute, one way or another, to the mission of the Commons Fund: reclaiming the public nature of the internet. For example, there are people working on <a href="https://nlnet.nl/project/MNT-Reform-Touch/">MNT Reform Touch</a> (an open hardware tablet device) and the <a href="https://nlnet.nl/project/Solar-FemtoTX/">Solar FemtoTX motherboard</a> — a collaborative effort to create an ultra-low power motherboard that can run on solar power. The Open Terms Archive offers <a href="https://nlnet.nl/project/Modular-OTA/">public tracking of the evolution of terms and conditions</a> to facilitate democratic oversight. <a href="https://nlnet.nl/project/LLM2FPGA/">LLM2FPGA</a> aims to enable running open source LLMs locally on FPGAs using a fully open-source toolchain. <a href="https://nlnet.nl/project/bcachefs-crypto-API/">bcachefs</a> readies itself as the next generation filesystem for Linux, improving performance, scalability and reliability when compared to legacy filesystems and <a href="https://nlnet.nl/project/KDEPlasma-gestures/">KDE Plasma Gestures</a> will add multi-touch and stroke gestures to the Plasma Desktop. And that's just a small sample of the wide range of important contributions being worked on. Read on to meet all the projects selected in this funding round.</p>
          <p><b>If you applied for a grant</b><br> This is the selection for the <a href="https://nlnet.nl/news/2024/20240601-call.html">October call</a> of the NGI Zero Commons Fund fund only. We always inform <em>all</em> applicants about the outcome of the review ahead of the public announcement, whether they are selected or not. If you have not heard anything, you probably applied to a later call or a different fund that is still under review.</p><details>
              <summary>How do I find out which call round I applied to?</summary>You can see which call round you applied to by checking the application number assigned to the project when you submitted the proposal. The number starts with the year and month of the call, so 2024-10- in the case of the October 2024 call. You see that same number featured in the emails we send you (It should not happen, but if you did apply to another call and did not hear anything, do contact us)</details>
          <br> <h2>Meet the new projects!</h2>
          <p><em>(you can click or tap on the project name to fold out additional information)</em></p>
          <h3>Trustworthy hardware and manufacturing</h3>
          <ul>
            <li>
              <details>
                <summary><strong>FuseSoc-compatible Web Catalog</strong> — A catalog of gateware that can be easily used with FuseSoC</summary>
                <div>
                  <p>FuseSoC is a package manager for chip designs, allowing for easy reuse and sharing of IP cores as well as combining them into larger systems. Its native core description format (CAPI2) allows describing IP cores in a tool- and vendor-independent way. Together with FuseSoC's backend library Edalize this enables creating and using portable IP cores and SoCs for a large number of EDA tools and flows.</p>
                  <p>This project will extend FuseSoC with a collaborative database and a web frontend that allows users to upload their core description files to a central repository to make it easier for others to find and inspect them. In addition, signing, SBOM generation and a web frontend will be added to increase transparency, trust and security.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/FuseSoC-catalog">https://nlnet.nl/project/FuseSoC-catalog</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>MNT Reform Touch</strong> — Open Hardware tablet device</summary>
                
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Solar FemtoTX motherboard with 802.3 cg Ethernet cards</strong> — Low-power motherboard that can run on solar power</summary>
                <div>
                  <p>Solar FemtoTX motherboard with 802.3 cg Ethernet cards is an open, collaborative effort towards designing an ultra-low power motherboard in a mobile device-sized form factor. It aims to achieve several goals: 1) to design a plug and play (PnP) motherboard that can be seamlessly integrated into an open-source hardware laptop for easy repair/replacement/upgrade. 2) to utilize the new, 802.3cg ethernet standard for a low-power LAN port, and 3) to integrate the 802.3 cg ethernet port into a single board computer with a FemtoTX-sized form factor for the lowest power consumption, facilitating minimal solar energy requirements and quick recharging.</p>
                  <p>Furthermore, the project aims to make the open-hardware framework extensible by supporting socket-based or embedded processors and peripheral devices that meet a defined size and TDP limit. This interoperability allows newer, ultra low power microprocessors to work within the FemtoTX specification, and is optimized for solar power.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Solar-FemtoTX">https://nlnet.nl/project/Solar-FemtoTX</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Tin Snipe DAQ</strong> — Digital Aquisition module</summary>
                <div>
                  <p>The Tin Snipe DAQ is a digital acquisition (DAQ) module targeting diverse professional measurement applications typically found in mid to high end hand-held Multimeters. It focuses on digital mixed signal systems while offering an upgrade over traditional Multimeters in terms of sample rate, giving usable time series data for signal integrity analysis of low speed signals. It's designed as a compact fully integrated module that comes with the necessary AFE, ADC and Signal Processor. It exposes a digital control interface over various buses (UART, I2C, USB and potentially more) to be controlled and read out via an external system processor, thus making it easy to integrate into other systems. It is targeting battery operation like traditional handheld Multimeters and will be heavily optimized for low power consumption but can also be used for bench top applications.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/TinSnipe-DAQ">https://nlnet.nl/project/TinSnipe-DAQ</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>USB 3 PHY implementation on GateMate FPGAs</strong> — USB 3 PHY implementation with Cologne Chip GateMate FPGA Transceiver</summary>
                <div>
                  <p>Since its introduction at the end of the previous century, USB has developed into the most widely used interface to connect all sorts of electronic devices. Recent versions of the USB standard provide serial communication at speeds of 5Gbps and higher, which require a dedicated hardware block (transceiver) inside a chip. Throughout the last decade, FPGA devices are gaining popularity in many applications and this trend will not stop. Even small and low-cost modern FPGA devices, such as GateMate FPGA from Cologne Chip AG, include transceivers capable of communication at 5Gbps. However, no Open Hardware and FOSS implementation of USB 3.x is available. This project will enable a universal and libre USB 3.2 Gen.1 x1 (5Gbps) connectivity on the GateMate FPGA.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/GateMate-USB3-PHY">https://nlnet.nl/project/GateMate-USB3-PHY</a></p>
                </div>
              </details>
            </li>
          </ul>
          <h3>Operating Systems, firmware and virtualisation</h3>
          <ul>
            <li>
              <details>
                <summary><strong>SSH Stamp</strong> — Secure SSH-to-UART bridge for devices with a serial port</summary>
                <div>
                  <p>SSH Stamp is a secure wireless-to-UART bridge implemented in Rust (no_std, no_alloc and no_unsafe whenever possible) with simplicity and robustness as its main design tenets. The firmware runs on a microcontroller running Secure SHell Protocol (RFC 4253 and related IETF standards series). This firmware can be used for multiple purposes, conveniently avoiding physical tethering and securely tunneling traffic via SSH by default: easily add telemetry to a (moving) robot, monitor and operate any (domestic) appliance remotely, conduct remote cybersecurity audits on network gear of a company, reverse engineer hardware and software for right to repair purposes, just to name a few examples -a "low level-to-SSH Swiss army knife".</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/SSH-Stamp/">https://nlnet.nl/project/SSH-Stamp/</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Ada Bootstrap Compiler</strong> — Full source bootstrap for Ada</summary>
                <div>
                  <p>Ada is an important computer language with a long history, with the compilers being built for new architectures in an ad-hoc basis based on previously existing Ada compilers from other architectures. This project aims to create a bootstrap path from the C language to an Ada compiler without relying on an existing Ada compiler binary. This will allow us to have a fully auditable trail from C to a working Ada compiler, removing concerns about hidden backdoors or other issues that may arise from using a compiler without a clear bootstrap path.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Ada-bootstrap">https://nlnet.nl/project/Ada-bootstrap</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Bcachefs userspace integration</strong> — Next generation filesystem</summary>
                <div>
                  <p>bcachefs is a next generation filesystem for Linux, with a fully modern featureset and vastly improved performance, scalability and reliability as compared to legacy filesystems. The main focus of this grant is achieving stability, but on the side there will be work on userspace integration with systemd, reworking the cryptographic API to be more robust, as well as adding the potential for users to generate telemetry data - in order to capture edge cases in the real-world.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/bcachefs-crypto-API">https://nlnet.nl/project/bcachefs-crypto-API</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>KDE Plasma Gestures</strong> — Advanced customisable gesture input on desktop and mobile</summary>
                <div>
                  <p>Plasma Desktop, made by the KDE community, is a powerful free and open source platform that competes with proprietary operating systems. This project will introduce new functionality for multi-touch and stroke gestures. Multi-touch gestures allow a user to easily switch between virtual desktops, or to open Plasma's Overview mode. They will become customizable, with a wide selection of available desktop actions. Stroke gestures allow drawing shapes to trigger actions, launch apps, and more. They will be introduced into Plasma's core desktop experience, complete with a configuration page in System Settings. Together, these features will make Plasma Desktop even more productive and intuitive to use.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/KDEPlasma-gestures">https://nlnet.nl/project/KDEPlasma-gestures</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>LeanFTL</strong> — Flash Translation Layer library for embeddedsystems</summary>
                <div>
                  <p>LeanFTL is a "Flash Translation Layer" library targeting embedded systems. An FTL library is needed on all embedded systems to deal with the constraints inherent to flash memories and to be able to resume operations safely after an unexpected loss of power (AKA "tearing events"). LeanFTL aims at being a minimal library easily portable to any MCU and able to manage both internal and external flash memories. LeanFTL goal is to avoid fragmentation by design, this means that fragmentation never occurs no matter the usage pattern. Another important feature is the emulator which allows running LeanFTL on a personal computer, allowing the integrator to provide such an emulator for its firmware. Last but not least, the emulator is able to simulate "tearing events" - this is key to ensure robustness and security of an embedded system. In other words, LeanFTL not only provide the Flash Translation Layer, it also provides a tool for validating it is correctly used, something which is typically lacking even in commercial libraries.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/LeanFTL">https://nlnet.nl/project/LeanFTL</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Maemo Leste Daedalus</strong> — Improve device coverage and advanced security for mobile Linux distro</summary>
                <div>
                  <p>Maemo Leste is a Free and Open Source mobile operating system based on GNU/Linux. The goal of the initiative is to provide a secure and modern mobile operating system that consists only of free software, obeys and respects the users' privacy and digital rights. Maemo Leste is currently focussing on upgrading and modernising it's core to the latest Debian and Devuan versions, improving the stability and security of the system as well as widening the array of supported devices.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/MaemoLeste-AppArmour">https://nlnet.nl/project/MaemoLeste-AppArmour</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Reproducible Builds in the Scala ecosystem</strong> — Deterministic builds for software written in Scala</summary>
                <div>
                  <p>While open source components can be audited through their open version history, there is no guarantee that any binaries that are distributed actually correspond to those sources. The technique to validate this is known as "Reproducible Builds": by building the same code on independent infrastructure and verifying the results are identical, you can verify the binary artifacts have not been tampered with. This is useful both for project members who want to verify no malware was inserted via their CI system or developer build machine, and for 'external' auditors who can independently verify the project as a whole is not compromised.</p>
                  <p>This project intends to improve Reproducible Builds for software written in the Scala language, which typically use the 'sbt' build tool. It will do so by making improvements to the sbt-reproducible-builds sbt plugin and other toolchain components such as sbt plugins and the Scala compiler, so that projects will be reproducible 'out of the box' as much as possible.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/ReproducibleSBT">https://nlnet.nl/project/ReproducibleSBT</a></p>
                </div>
              </details>
            </li>
          </ul>
          <h3>Measurement, monitoring, analysis and abuse handling</h3>
          <ul>
            <li>
              <details>
                <summary><strong>Alaveteli GDPR and Search</strong> — Better search and redacting capabilities for Alaveteli FOI request portal</summary>
                <div>
                  <p>Alaveteli is an open source platform deployed in 20+ countries that helps citizens make Freedom of Information requests and publishes them and the responses online. Access to Information laws are powerful tools by which citizens, journalists, and civil society organisations can obtain information to scrutinise government. Such legislation is an important prerequisite for accountability and bottom up participation, making it one of the cornerstones of a healthy democracy.</p>
                  <p>Alaveteli’s architecture was designed long before the introduction of GDPR. This makes it challenging to balance public access to information with protection of citizens' individual data rights. The project aims to redesign and replace Alaveteli’s antiquated search architecture and technology and implement key missing functionality to effectively locate and, when appropriate, remove personally identifiable information to ensure GDPR compliance.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Wiktionary-QA">https://nlnet.nl/project/Wiktionary-QA</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Wiktionary QA tools</strong> — QA tools to improve the quality, reliability, and consistency of Wiktionary</summary>
                <div>
                  <p>Part of the Wikimedia commons, Wiktionary.org offers a global open data set pertaining to many languages. However, this data is contributed and crowdsourced in different formats, leading to conflicting information which creates inconsistencies across languages and makes Wiktionary less reliable than it could be.</p>
                  <p>This project will develop QA modules for Wiktionary, leading to easy parsing and processing of cross-linguistic data. This helps to unify data formats across Wiktionary, and improve the overall reliability of this invaluable resource.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Wiktionary-QA/">https://nlnet.nl/project/Wiktionary-QA/</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Clearance</strong> — Curating changes to OpenStreetMap data of interest</summary>
                
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Open Terms Archive vendor lock-in break</strong> — Public tracking of the evolution of terms and conditions</summary>
                <div>
                  <p>Open Terms Archive is a digital public good that archives every version of the terms of over 800 digital services to support democratic oversight by regulators, lawmakers, journalists, researchers, and civil society. Open Terms Archive has prioritized adoption in multiple industries and jurisdictions over the past four years, by enabling easy connection from its fully open-source engine to free but proprietary platforms. The "Open Terms Archive vendor lock-in break" project aims at replacing the hardcoded interconnections with proprietary software with standardized APIs and connectors for at least one open-source platform for issue reporting, email notifications, dataset distribution, and RSS feeds publishing, while keeping compatibility with existing integrations that are used by community members.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Modular-OTA">https://nlnet.nl/project/Modular-OTA</a></p>
                </div>
              </details>
            </li>
          </ul>
          <h3>Middleware and identity</h3>
          <ul>
            <li>
              <details>
                <summary><strong>Accessible KDE File Management</strong> — Accessible file dialogs throughout KDE applications</summary>
                <div>
                  <p>This project aims to make a core part of computing with KDE software, namely file management, fully accessible. Many applications and frameworks by KDE are used in high-profile institutions and the public sector. Even though a main point of focus of this project is the improvement of accessibility in KDE's default file manager Dolphin, most of the work benefits framework code which is used in many of the most popular applications in the FLOSS ecosystem. As such, this project will empower people with disabilities around the world to perform more computer-driven tasks efficiently.</p>
                  <p>The accessibility improvements to "Open/Save" dialogs, the keyboard shortcut editor, and various other panels and dialogs will simplify integration of people with handicaps in various social and work contexts including public institutions and private companies, which in turn will allow more of them to base their digital infrastructure on open standards and digital commons in line with EU's value "to be free from discrimination on the basis of […] disability".</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/KDE-Dolphin-a11y">https://nlnet.nl/project/KDE-Dolphin-a11y</a></p>
                </div>
              </details>
            </li>
          </ul>
          <h3>Decentralised solutions, including blockchain/distributed ledger</h3>
          <ul>
            <li>
              <details>
                <summary><strong>Redwax Server Modernisation</strong> — Self-hostable X509 certificate based identity management solution</summary>
                <div>
                  <p>The Redwax Project is a set of tools and web server modules to make it easy to build and deploy secure services on the web. The Redwax modular certificate authority mod_ca provides a set of Apache http server modules that can be combined to form various types of certificate authorities, issuing certificates from a Certificate Sign Request, or with the SPKAC and SCEP protocols, servicing certificate revocation with CRLs and OCSP, and creating timestamps.</p>
                  <p>The Redwax tool provides a mechanism to read certificates and keys from a wide variety of sources, automatically associating leaf, intermediate, and trusted certificates, and optionally their private keys, then showing the metadata of or writing the certificates in a wide variety of target formats. This project will update the key modules, adjust to the current Apache API's and also fully implement the meanwhile published RFC 8894.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Redwax-SCEP-LDAP">https://nlnet.nl/project/Redwax-SCEP-LDAP</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Securing Internet protocols with decentralized identity</strong> — DIDs and Verified Credentials as SASL method</summary>
                <div>
                  <p>There has been much innovation in the last few years in the area of decentralized digital identity, including the development of standards such as Decentralized Identifiers (DIDs) and Verifiable Credentials (VCs). These technologies have led to large-scale initiatives around the world to develop digital identity wallets, including for example the European Digital Identity Wallet (EUDI). These initiatives aim at making it possible to obtain and use digital versions of identity documents such as drivers' licenses, birth certificates, university diplomas, and more.</p>
                  <p>The potential of these technologies however is much greater than just logging in to websites. In this project, we work on integrating decentralized digital identity technologies into widely used Internet protocols themselves, such as XMPP for instant messaging. In this case, a combination of identity and messaging means that you can authenticate to a messaging service using a digital identity wallet, rather than username and password. We accomplish this by specifying and building a DID-based extension for the Simple Authentication and Security Layer (SASL).</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/DID-SASL">https://nlnet.nl/project/DID-SASL</a></p>
                </div>
              </details>
            </li>
          </ul>
          <h3>Data and AI</h3>
          <ul>
            <li>
              <details>
                <summary><strong>Data Package implementation in TypeScript</strong> — Reference implementation of data definition language and data API</summary>
                <div>
                  <p>Data Package is a standard consisting of a set of simple yet extensible specifications to describe datasets, data files and tabular data. It is a data definition language (DDL) and data API that facilitates findability, accessibility, interoperability, and reusability (FAIR) of data. TypeScript implementation of the Data Package standard provides all the necessary functionality for working with data packages in Node.js or similar environments — including validating and extending metadata, and reading or writing data in various formats such as CSV, TSV, JSON, and OpenDocument Format (ISO/IEC 26300) as used by e.g. Excel and LibreOffice.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/DataPackage-TS">https://nlnet.nl/project/DataPackage-TS</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Livebook</strong> — Robust and distributed data and ML workflows with Python, Elixir, and Livebook</summary>
                <div>
                  <p>Livebook is an open-source interactive notebook application for the Elixir programming language and the Erlang VM ecosystem. It enables users to write, execute, and document code in real-time within a browser interface, making it ideal for exploratory programming, data analysis, teaching, and documentation. Livebook features built-in markdown support, real-time collaboration, custom visualizations, "smart cells" to automate common workflows, as well as built-in concurrent and distributed execution. The project supports the Elixir and Erlang languages and is integrating additional ones.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Livebook-Python">https://nlnet.nl/project/Livebook-Python</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>LLM2FPGA</strong> — Run Open Source LLMs locally on FPGAs</summary>
                <div>
                  <p>LLM2FPGA aims to enable local inference of open-source Large Language Models (LLMs) on FPGAs using a fully open-source toolchain. While LLM inference has been demonstrated on proprietary hardware and software, we are not aware of any widely recognized project running open-source LLMs on FPGAs through a fully open-source EDA (Electronics Design Automation) flow. To fill this gap, the project will produce an HDL implementation of a lightweight open-source LLM, verify it via simulation, and then attempt synthesis and place-and-route on freely supported FPGA devices. By providing a fully open alternative to proprietary and cloud-based LLM inference, LLM2FPGA will offer a transparent, flexible, and privacy-friendly way to run your own LLM on local hardware.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/LLM2FPGA">https://nlnet.nl/project/LLM2FPGA</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>PodOS</strong> — Personal Online Data Operating System aimed at exploring W3C Solid pods</summary>
                <div>
                  <p>PodOS is an operating system for data on Solid Pods, designed to bridge the gap between specialized apps and raw data management. It is built from the ground up for mobile-first UX, accessibility and maintainability, on top of re-usable custom elements. In the upcoming phase, PodOS will introduce new ways for users to structure, link, and repurpose their data, allowing them to organize information beyond the constraints of individual applications. Users will be able to extract information from classic documents or notes and transform them into structured resources that could be used with other Solid Apps. New developments will emphasise modularity and interoperability by integrating existing data modules, dynamically loaded dashboards and seamless transitions between PodOS and specialized apps. These advancements will give individuals and organizations greater flexibility and control over their data, making the Solid ecosystem more practical, interactive, and user-friendly.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/PodOS">https://nlnet.nl/project/PodOS</a></p>
                </div>
              </details>
            </li>
          </ul>
          <h3>Services + Applications (e.g. email, instant messaging, video chat, collaboration)</h3>
          <ul>
            <li>
              <details>
                <summary><strong>Mobile Typst editor</strong> — Mobile editor/viewer for Typst documents</summary>
                <div>
                  <p>Typst is a new markup-based typesetting system that is designed to be as powerful as LaTeX while being much easier to learn and use. The Typst for iOS project focuses on creating a smooth Typst document editing experience akin to Swift Playground's editing experience. Additionally it allows the compilation, presenting and sharing of pdf files all from an iPhone or iPad.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Mobile-Typst-editor/">https://nlnet.nl/project/Mobile-Typst-editor/X</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Dino</strong> — User-friendly and secure instant messaging based on XMPP</summary>
                <div>
                  <p>Dino is an open-source messaging application. It uses XMPP as an underlying protocol, which allows federated, provider-independent communication and offers a world-wide network of interconnected servers. Dino aims to be secure and privacy-friendly while at the same time offering a good user experience and a modern feature set.</p>
                  <p>This project is about adding various additional usability and privacy features such as Message moderation in groupchats (XEP-0425), message deletion (XEP-0424) and local message deletion, improved password handling and connection establishment via SASL2 (XEP-0388), Bind2 (XEP-0386), FAST (XEP-484) and storing secrets in the system keyring, improved file transfers including sending multiple images in the same message via Stateless File Sharing (XEP-0447), improving the UX in MUCs by using more efficient protocols like MUC Affiliation Versioning (XEP-0463) and by making further use of occupant IDs (XEP-0421) in the context of message correction and message deletion. It will also extending support of message formatting via Message Markup (XEP-0394).</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Dino-UX">https://nlnet.nl/project/Dino-UX</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Podlibre</strong> — Dedicated, customizable podcast editor</summary>
                <div>
                  <p>Podlibre is an all-in-one, customizable podcast editor designed to empower podcasters with a tool they can rely on daily. In the past decade, the popularity of podcasts has exploded - but so far there was no good podcast-specific workflow for creators to handle the process. Obviously one can use generic sound editors, but these are typically geared toward music production and lack features that make it easy for podcasters and journalists to produce consistent podcast content. With a customizable workflow and plugin architecture, Podlibre allows users to tailor their experience while integrating with third-party services. It provides all essential features in one place, including noise reduction, mouth noise editing, multi-channel audio editing, music insertion, local transcription with manual correction, chapter editing, metadata editing (ID3, RSS), local publishing, and publishing to hosting platforms (Castopod, Funkwale, Faircamp).</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Podlibre">https://nlnet.nl/project/Podlibre</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Signature PDF</strong> — PDF editing and server-based digital signing workflow</summary>
                <div>
                  <p>Signature PDF allows users to sign PDFs online, individually or with others. The project offers as well the possibilities to reorganize pages (merge, sort, rotate, delete, extract pages, etc.), edit metadata, and compress PDFs. This tool aims to be a free alternative to existing proprietary web services, offering users more control and guarantee of what happens to the PDF processed by the software.</p>
                  <p>Signature PDF is easily deployable on a server of any size, a laptop, a container image or a Yunohost instance. Scope of the project is to implement verification of signed PDFs, integration into third-party software, improve smartphone ergonomy and accessibility, and other improvementes to meet the requests/needs identified by users.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/SignaturePDF-UX">https://nlnet.nl/project/SignaturePDF-UX</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Flock XR</strong> — 3D visual creativity and coding tool</summary>
                <div>
                  <p>Flock XR is a visual creativity and coding tool that allows young people to create 3D experiences in a web browser. Flock XR allows young people and beginners to create apps relevant to the virtual worlds that they use socially. Through creating with Flock XR, young people develop technical and creative skills such as coding and working in 3D space with 3D models and animations. They will be able to create using extended reality features including VR, Augmented Reality, 3D printing and spatial audio. This puts them on the path to amazing career opportunities across many industries. Flock XR is being developed with an inclusion first approach using co-design techniques with young people in our pilots. After a successful schools pilot we are focussing on improving user experience, stability and access for all.</p>
                  <p>Flock XR builds on established open source tools, Blockly and Babylon.js to bring modern 3D creation to young people on the devices they already use. We’re designing Flock XR for users who may have older hardware and limited data access. And we take young people’s rights, safety and data privacy very seriously. We’re extending young people’s reality with Flock XR and giving them the skills to create the virtual worlds that humanity needs.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/FlockXR">https://nlnet.nl/project/FlockXR</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>ClassQuiz</strong> — Libre quizing tool</summary>
                <div>
                  <p>ClassQuiz is a quiz application designed for, but not limited to, classrooms. It allows anyone to create live quizzes to engage the audience in a fun way, where each player also competes against the others by answering questions as fast as possible to score high. By providing a simple setup for self-hosting, it also allows many educators to host quizzes without any privacy concerns. ClassQuiz was born as an alternative to Kahoot! because educational software for students should be built with privacy in mind.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/ClassQuiz">https://nlnet.nl/project/ClassQuiz</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Federating pedagogical immersive experiences</strong> — Framework for playful learning content in enhanced reality</summary>
                <div>
                  <p>Emerging technologies like augmented and virtual reality (XR) provide incredible avenues to teach and learn. Unfortunately, nearly all content and ways to create it remain centralized through large captive platforms. Such platforms lock users and their creations to their closed source environment and filtering mechanisms. This process risk reflecting assumptions on how teaching can be done. The project "Federating pedagogical immersive experiences" proposes a self-hostable platform to remix simple pedagogical XR games. Learners themselves can then, together with parents and teachers, freely share back pedagogically, culturally and linguistically adapted content - curated by their own instance and benefiting from immersive technologies without being locked to a platform.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/ImmersiveXP">https://nlnet.nl/project/ImmersiveXP</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Kaidan MUC + legacy OMEMO</strong> — Multi-user chat and improved legacy interoperability for Kaidan XMPP client</summary>
                <div>
                  <p>Kaidan is a user-friendly and modern chat app for every device. It uses the open communication protocol XMPP (Jabber). Unlike other chat apps, you are not dependent on one specific service provider. Instead, you can choose between various servers and clients. Kaidan is one of those XMPP clients.</p>
                  <p>It is easy to get started and switch devices with Kaidan. Additionally, it adapts to your operating system and device's dimensions. It runs on mobile and desktop systems including Linux, Windows, macOS, Android, Plasma Mobile and Ubuntu Touch. The user interface makes use of Kirigami and Qt Quick. The backend of Kaidan is entirely written in C++ using Qt and the Qt-based XMPP library QXmpp.</p>
                  <p>This project will make improvements to Kaidan across the board, ranging from multi-user chat, backups, bookmarks, support for legacy OMEMO encryption, SASL improvements, message retraction and more media sharing functionality.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Kaidan-MUC">https://nlnet.nl/project/Kaidan-MUC</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>LiberaForms</strong> — Self-hostable E2EE libre form server</summary>
                <div>
                  <p>LiberaForms is an online form tool to easily create and manage forms. It can be used by neighbours, friends, colleagues and anyone else who values privacy. The server can be self-hosted and form answers can be end-to-end OpenPGP encrypted. LiberaForms comes with a comprehensible list of features for both form authors and site administrators alike, such as integrated GDPR policies. This grant will be used to make a number of usability improvements, to make LiberaForms a relevant tool for educational use cases, and add many new features requested by the people who already use it.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/LiberaForms-Edu">https://nlnet.nl/project/LiberaForms-Edu</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Modernizing Paged.js Web-to-Print</strong> — Quality typesetting based on HTML and CSS</summary>
                <div>
                  <p>Paged.js is a free and open source JavaScript library that paginates content in the browser to create print/PDF output from HTML and CSS content. This is necessary for instance for delivering browser-native office productivity solutions - users expect these to produce good output but don't want to have the burden of legacy formats. The proposed project will fundamentally revisit/upgrade the architecture of paged.js. to support additional layouts, add advanced layout capabilities and implement PDF/UA tagging.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/PagedJS">https://nlnet.nl/project/PagedJS</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Peertube plugin livechat</strong> — Public and private messaging for Peertube content + live streams</summary>
                <div>
                  <p>Peertube is a free, decentralized and sovereign alternative to video-on-demand and live-streaming platforms. The Peertube Livechat project is a popular plugin for PeerTube that adds chatting capabilities to Peertube, so the audience can interact with streamers during their live streams. The functionality goes way beyond a mere chat system: it also provides moderation tools, polls, chat integration in the live stream, TODO-list for streamers and moderation team, and more. Its ambition is to become a complete ecosystem for live streaming.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/PeerTube-Livechat-UX">https://nlnet.nl/project/PeerTube-Livechat-UX</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>PeerTube for Institutions</strong> — Make PeerTube easier to manage and moderate at scale</summary>
                <div>
                  <p>PeerTube is a free-libre and federated video platforms that empowers anyone to self host video content without being isolated in the wide web. Many institutions have started using PeerTube, to reclaim control over their video hosting. By choosing PeerTube, they offer a wider audience the opportunity to familiarize themselves with PeerTube.</p>
                  <p>A significant part of this project focuses on enabling these institutional use cases, and is designed from their feedback. We plan to add ownership transfer and shared administration for video channels, quality of life features for moderation and administration, more control on an instance look and experience and a set-up wizard with relevant presets (and more). We also want to adapt the mobile app to tablet and TV devices, and add a watch offline option.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/PeerTube-for-Institutions/">https://nlnet.nl/project/PeerTube-for-Institutions/</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Repath Studio</strong> — SVG editor written in Clojurescript</summary>
                <div>
                  <p>Repath Studio is a cross platform vector graphics editor, that combines procedural tooling with traditional design workflows. It includes an interactive shell, which allows evaluating code to generate shapes, or even extend the editor on the fly. Supporting multiple programming languages and enriching the existing API is planned. The tool relies heavily on the SVG specification, and aims to educate users about it. Creating and editing SMIL animations - an SVG extension – is an important aspect of the project, that is yet to be fully implemented. An advanced undo/redo mechanism is used to maintain a full history tree of actions in memory, so users will never lose their redo stack. We are exploring ways to persist this history to disk. Some built-in accessibility testing tools are already included, but we want to add more. Extensibility is also something that we want to enhance, in order to allow creating and sharing custom tools and workflows. Integrations with third party tools will also be investigated.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/RepathStudio">https://nlnet.nl/project/RepathStudio</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>StreetComplete Multiplatform</strong> — OpenStreetMap editing beyond Android</summary>
                <div>
                  <p>The goal of this project is to migrate StreetComplete from an Android app to a multiplatform app, making use of Kotlin Multiplatform and Compose Multiplatform for the UI, thus, allowing the app to be released on other platforms, such as iOS and eventually Linux.</p>
                  <p>This will allow for a significantly larger audience that is able to casually contribute missing data to OpenStreetMap on the go, as StreetComplete is the go-to app for this purpose, aimed at non-tech-savvy people and presented in a slightly gamified fashion. OpenStreetMap, in turn, is the free wiki worldmap.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/StreetComplete-multiplatform">https://nlnet.nl/project/StreetComplete-multiplatform</a></p>
                </div>
              </details>
            </li>
          </ul>
          <h3>Vertical use cases, Search, Community</h3>
          <ul>
            <li>
              <details>
                <summary><strong>An OpenScience flavour of Bonfire on NixOS for preprints</strong> — Discuss preprints based on W3C ActivityPub federation</summary>
                <div>
                  <p>Preprints have revolutionised scholarly publishing, offering a rapid and open way to share research findings, establishing priority, receiving early feedback, and accelerating scientific discovery. Online discussions around preprints regularly take place on social media, but there still exists a gap in encouraging fluid discourse around science and making it a recognised academic activity.</p>
                  <p>This project aims to address the gap by facilitating and integrating these conversations into the scholarly framework using FOSS tooling. Outcomes include; establishing a Bonfire network tailored for preprints, with reproducible deployment made possible via NixOS, bringing existing communities into the Fediverse, amplifying contributions using existing scholarly infrastructure, exploring new models of peer evaluation, and supporting recognition of this crucial scholarly activity.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Sciety-ActivityPub">https://nlnet.nl/project/Sciety-ActivityPub</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>cables.gl editor features</strong> — Create beautiful, interactive, visual web content</summary>
                <div>
                  <p>Cables is a tool which allows people to create beautiful, interactive, visual web content without knowing how to type a line of code. Your work is easily exportable at any time, so you can embed it into your website, use it an immersive VR experience, or integrate into other kinds of creative output. Cables patches can be published, shared, copied and remixed by the entire community. This allows people to constantly learn new things from each other. There is both a browser based version and a standalone, offline version offering a user-friendly development environment.</p>
                  <p>This new grant adds an improved keyframing- and animation user interface (timeline) that makes cables.gl much more accessible for animators and motion designers. The team will also add a physics engine, Gaussian Splatting (a new method of rendering realistic 3d scenes), dynamic operator instancing/repeating, a stepping debugger and a comprehensive shadergraph system that allows to create complex shaders by combining small modules.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/cables.gl-editorfeatures">https://nlnet.nl/project/cables.gl-editorfeatures</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>MOTIS</strong> — European Public Transport Door to Door Real-Time Routing with MOTIS</summary>
                <div>
                  <p>This project aims to enhance MOTIS, an open-source, scalable, intermodal real-time routing system that powers the provider-neutral public transport routing service transitous.org. This grant will add support for the relevant European Transmodel data standards NeTEx, SIRI-ET, SIRI-SX, and OJP. Hereby, we will enable open and privacy friendly borderless routing across Europe from door to door using data published by European National Access Points (NAP) in compliance with EU regulation 2017/1926. Its results will be deployed via transitous.org and integrated into applications such as KDE Itinerary, KTrip, and Gnome Maps, fostering a fully open alternative to proprietary solutions.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/MOTIS">https://nlnet.nl/project/MOTIS</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Open Terms Archive vendor lock-in break</strong> — Public tracking of the evolution of terms and conditions</summary>
                <div>
                  <p>Open Terms Archive is a digital public good that archives every version of the terms of over 800 digital services to support democratic oversight by regulators, lawmakers, journalists, researchers, and civil society. Open Terms Archive has prioritized adoption in multiple industries and jurisdictions over the past four years, by enabling easy connection from its fully open-source engine to free but proprietary platforms. The "Open Terms Archive vendor lock-in break" project aims at replacing the hardcoded interconnections with proprietary software with standardized APIs and connectors for at least one open-source platform for issue reporting, email notifications, dataset distribution, and RSS feeds publishing, while keeping compatibility with existing integrations that are used by community members.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/Modular-OTA">https://nlnet.nl/project/Modular-OTA</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>PodOS</strong> — Personal Online Data Operating System aimed at exploring W3C Solid pods</summary>
                <div>
                  <p>PodOS is an operating system for data on Solid Pods, designed to bridge the gap between specialized apps and raw data management. It is built from the ground up for mobile-first UX, accessibility and maintainability, on top of re-usable custom elements. In the upcoming phase, PodOS will introduce new ways for users to structure, link, and repurpose their data, allowing them to organize information beyond the constraints of individual applications. Users will be able to extract information from classic documents or notes and transform them into structured resources that could be used with other Solid Apps. New developments will emphasise modularity and interoperability by integrating existing data modules, dynamically loaded dashboards and seamless transitions between PodOS and specialized apps. These advancements will give individuals and organizations greater flexibility and control over their data, making the Solid ecosystem more practical, interactive, and user-friendly.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/PodOS">https://nlnet.nl/project/PodOS</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>Pushing forward for CSS Print</strong> — High end print from HTML and CSS</summary>
                <div>
                  <p>The Web is one of the largest common resources, accessible to everyone across the globe, based on standards maintained by the World Wide Web Consortium (W3C). Certain CSS modules have been developed specifically for paginated design and publication: the fragmentation model, which divides content into pages, columns, or regions, and includes features such as controlling flow breakpoints (page breaks, column breaks, etc.). Additionally, three W3C CSS modules focus on formatting for "paginated media", defining how pages are structured and providing essential functionality for printed page layouts, including margin sizes, page numbering, running headers, footnotes, templates, and element positioning on the page. However, these modules remain in the Working Draft phase, and currently no web browser has fully implemented them.</p>
                  <p>In response to this limited browser support, several open-source initiatives (such as WeasyPrint and Paged.js) have emerged over the past 15 years, each with a unique approach to addressing these challenges. The user community continues to grow, new layout requirements have arisen, revealing that the current specifications are insufficient to meet the demands of modern paginated layout. As developers, maintainers and users of these open-source solutions, our goal is to address these gaps by collaborating on the development of new specifications in a structured and collective manner, demonstrating the feasibility of these new specifications by implementing them in various tools and engaging in advocacy with the CSS Working Group (CSSWG) to promote the adoption of these new specification proposals.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/CSS-Print">https://nlnet.nl/project/CSS-Print</a></p>
                </div>
              </details>
            </li>
            <li>
              <details>
                <summary><strong>XR Fragments Teamware</strong> — Design, deploy, federate and integrate portable XR experiences</summary>
                <div>
                  <p>XR Teamware will develop a publishing platform/forge for XR content, and a Blender plugin with direct import export capabilities to said forge and to Icosa gallery. This would allow 3D creators to easily publish and share their ideas, and preview metadata in Blender before exporting.</p>
                  <p>XR Fragments itself is a simple public protocol for networked 3D content to discover, reference, navigate and query 3D online assets (read-only), making it part of the web and thus liberating 3D content creation and content from only existing inside gated products. Within the scope of this project, XR Fragments will streamline the design, deployment, hosting, and integration of portable XR experiences - and thus further simplify embedding, cross-platform support and hosting, as well as add vendor specific support.</p>
                  <p>▸ <em>For more details see</em>: <a href="https://nlnet.nl/project/XR-Teamware">https://nlnet.nl/project/XR-Teamware</a></p>
                </div>
              </details>
            </li>
          </ul>
          <hr>
          <p>Still hungry for more projects? Check out the <a href="https://nlnet.nl/project/current.html">overview of all our current and recent projects</a>...</p>
          <p>Inspired? If you are working on a project that contributes to the Next Generation Internet you can <a href="https://nlnet.nl/propose/">submit a proposal</a>. The next deadline is June 1<sup>st</sup>.</p>
          <h2 id="ack">Acknowledgements</h2>
          <p><a href="https://ec.europa.eu/info/departments/communications-networks-content-and-technology_en"><img src="https://nlnet.nl/image/logos/EC.svg" alt="Logo European Commission"></a></p>
          <p>The NGI0 Core fund is made possible with financial support from the <a href="https://ec.europa.eu/">European Commission</a>'s <a href="https://ngi.eu/">Next Generation Internet</a> programme, under the aegis of <a href="https://ec.europa.eu/info/departments/communications-networks-content-and-technology_en">DG Communications Networks, Content and Technology</a>.</p>
          <p><a href="https://nlnet.nl/core/"><img src="https://nlnet.nl/image/logos/NGI0CommonsFund_tag.svg" alt="Logo NGI Zero Commons Fund: letterlogo shaped like a tag"></a></p>
          
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pixel is a unit of length and area (120 pts)]]></title>
            <link>https://www.nayuki.io/page/pixel-is-a-unit-of-length-and-area</link>
            <guid>43769478</guid>
            <pubDate>Wed, 23 Apr 2025 07:20:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nayuki.io/page/pixel-is-a-unit-of-length-and-area">https://www.nayuki.io/page/pixel-is-a-unit-of-length-and-area</a>, See on <a href="https://news.ycombinator.com/item?id=43769478">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>


<p>When measuring the size of a two-dimensional digital picture, the unit <i>pixel</i> is used in a weird overloaded way. Sometimes, it is used as a unit of linear length – for example, each frame of an animation is 1920 pixels wide and 1080 pixels tall. Other times, it is used as a unit of area – e.g. that camera sensor has 12 megapixels (or 12&nbsp;000&nbsp;000 pixels).</p>
<p>Viewed mathematically through the lens of dimensional analysis, these conflicting definitions lead to illogical nonsense. Given that the formula for the area of a rectangle is <var>area</var> = <var>width</var> × <var>height</var>, if for example we have <var>width</var> = 1920 pixel and <var>height</var> = 1080 pixel, then we get <var>area</var> = 2&nbsp;073&nbsp;600 pixel<sup>2</sup>. That’s right, multiplying two linear dimensions – where each has the unit pixel – produces an area with the unit square pixel. This is analogous to how metres and square metres behave.</p>
<p>On the other hand, if we trust the colloquial definitions of how pixels are used in practice, then an image that is 10 pixels wide and 10 pixels tall has an area of 100 pixels, so 10 pixel × 10 pixel = 100 pixel, thus 100 pixel<sup>2</sup> = 100 pixel, then pixel<sup>2</sup> = pixel, and finally pixel = 1. That means the pixel is a dimensionless unit that is just another name for 1, kind of like how the <a href="https://en.wikipedia.org/wiki/Radian" title="Wikipedia: Radian">radian</a> is length divided by length so it also equals one, and the <a href="https://en.wikipedia.org/wiki/Steradian" title="Wikipedia: Steradian">steradian</a> is area divided by area which also equals one.</p>
<p>I don’t think there is a clean way to resolve this particular tension between pure mathematics and colloquialisms. One imperfect approach is to define a pixel to be a square whose physical size depends on the exact device or standard under consideration, and then give the name <i>pixel-side</i> to the linear unit that defines both the width and height of the pixel. Under this approach, we can also call the pixel-side as a square-root-pixel or √pixel (this is not unheard of as engineering uses √Hz (square root hertz) in places). We will have to ignore less common cases such as non-square pixels (this was used in images/<wbr>videos a lot in the early decades of computing).</p>
<p>The other awkward approach is to insist that the pixel is a unit of length, and then we need to refer to all instances of area as square pixels – for example, a television monitor might have 8 million square pixels. Following metric rules, prefixes can only be applied to units and not to the result of computations – e.g. 1 million square metres is not 1 mega-square-metre, but is 1 square kilometre. So everything that was previously quantified in megapixels would now need to be written out as a big number (e.g. 8 million square pixels) or more awkwardly switch to square kilopixels, which squares both the prefix and the unit simultaneously.</p>
<p>Overall, this isn’t a particularly serious discussion because the pixel isn’t a metric unit and it rarely participates in compound units and calculations more complicated than something like “pixels per metre” or “gigapixels per second”. But it does highlight that the common terminology is imperfect and breaks the regularity that scientists come to expect when working with physical units in calculations. (Outside of computing, an example of tension in the definitions of units is that the <i>pound</i> is conflated as both a unit of mass and force. Meanwhile, the metric system mandates a clean separation between the kilogram and the newton.)</p>

<h2>More info</h2>
<ul>
	<li><a href="https://cs.stackexchange.com/questions/88057/why-is-the-unit-of-image-size-not-pixel%C2%B2">Computer Science Stack Exchange: Why is the unit of image size not Pixel²?</a></li>
	<li><a href="https://en.wikipedia.org/wiki/Pixel">Wikipedia: Pixel</a></li>
	<li><a href="https://en.wikipedia.org/wiki/Dimensional_analysis">Wikipedia: Dimensional analysis</a></li>
	<li><a href="https://www.youtube.com/watch?v=3V84Bi-mzQM">YouTube: Numberphile - The Nescafé Equation (43 coffee beans)</a></li>
</ul>

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Native visionOS platform support (356 pts)]]></title>
            <link>https://github.com/godotengine/godot/pull/105628</link>
            <guid>43768421</guid>
            <pubDate>Wed, 23 Apr 2025 03:37:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/godotengine/godot/pull/105628">https://github.com/godotengine/godot/pull/105628</a>, See on <a href="https://news.ycombinator.com/item?id=43768421">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">Dear Godot community,</p>
<p dir="auto">I'm on Apple's visionOS engineering team, and we would like to contribute Vision Pro support to the Godot engine. This is the first PR that lays the foundation for that.</p>
<p dir="auto">First, I'd like to mention that we're really excited to be working with the Godot community on adding visionOS support. We've attempted to follow Godot's coding standards and a high-quality bar for our contributions. We hope that our contributions align with Godot's goals. Lastly, even though we have tried to split the changes into smaller self-contained PRs, we acknowledge that some of these PRs can be of considerable size.</p>
<p dir="auto">We're very happy to iterate on our PRs after receiving feedback and suggestions from the community.</p>
<h2 dir="auto">High Level Overview</h2>
<p dir="auto">The immediate goals of our contributions are:</p>
<ol dir="auto">
<li>To support current Godot games running natively on a planar window on visionOS.</li>
<li>To support creating Immersive experiences by using a new Godot's visionOS VR Plugin.</li>
</ol>
<p dir="auto">To achieve that, and in order to make reviewing easier, we have structured our contributions in three incremental PRs.</p>
<ol dir="auto">
<li>Add the native <code>visionOS</code> platform. Uses iOS as the starting point. Reuses as much code as possible between the iOS and Vision Pro platforms. (This PR).</li>
<li>Add ability to compile and link Swift files within Godot, and replace <code>main.mm</code> on the <code>visionOS</code> platform by the SwiftUI app lifecycle. This is a requirement to be able to launch Immersive scenes on visionOS.</li>
<li>Introduce Vision Pro VR plugin for Immersive support.</li>
</ol>
<p dir="auto">Even though we have a working version including points 2 and 3, those PRs are not up yet. Our current plan is to open them sequentially, after each of the previous PRs merge.</p>
<h2 dir="auto">Technical Discussion</h2>
<p dir="auto">This PR implements a new native <code>visionOS</code> platform.</p>
<p dir="auto">It's very close to the <code>iOS</code> platform in terms of implementation. In order to reuse as much code as possible, it introduces a new <code>drivers/apple_embedded</code> folder, to host code shared between the <code>iOS</code> and <code>visionOS</code> (but not <code>macOS</code>) platforms. We took inspiration from the new <code>drivers/apple</code> folder, which hosts code that applies to all Apple platforms.</p>
<p dir="auto">The platform-specific logic (including app instantiation, client code, display server, os support, and export plugin) was refactored, and now the bulk of the implementation is on <code>drivers/apple_embedded</code>. The platforms provide small subclasses that specialize the concrete aspects that are different between platforms. We did this refactor with care, trying not to alter the existing iOS functionality.</p>
<p dir="auto">The <code>visionOS</code> platform doesn't have OpenGL support, as it's not supported by visionOS.</p>
<p dir="auto">In order to make reviewing easier, we have tried to split this PR into individual self-contained commits when that made sense, and we have added detailed descriptions to most of them about what's contained in each commit. It's easier to review commit by commit, to see how the changes were incrementally implemented.</p>
<h3 dir="auto">Documentation Considerations</h3>
<p dir="auto">Now, the export plugin for <code>iOS</code> and <code>visionOS</code> share the majority of the code and most of their options (with the exception of launch storyboard support, which is iOS only; and specific platform icon support). Because of this, we have renamed <code>EditorExportPlatformIOS.xml</code> to <code>EditorExportPlatformAppleEmbedded.xml</code>, and moved it to <code>drivers/apple_embedded</code>.</p>
<p dir="auto">We'd like to ask the community if this is appropriate from the docs tooling perspective, and we're requesting further guidance on how to modify this file or the docs tooling to provide specific documentation for each of the platforms.</p>
<h2 dir="auto">Testing</h2>
<p dir="auto">We have been testing this PR mainly with the <a href="https://github.com/godotengine/godot-demo-projects/tree/master/3d/platformer">Platformer demo project</a>. We have verified the project continues to work on iOS, and it now runs natively on visionOS. We have tested both the Mobile and Forward+ renderers with the Metal rendering driver on both platforms.</p>
<h3 dir="auto">Open Questions</h3>
<p dir="auto">In all our tests, we exported an Xcode project using the corresponding export plugin and template, and we then ran this project directly to an iOS or visionOS device.</p>
<p dir="auto">We'd like to ask the community to provide guidance, or to help testing the following functionality:</p>
<ul dir="auto">
<li>We have not tested the ability of the iOS/visionOS export templates to embed and link plugins at export time. We tried to preserve this functionality on the <code>visionOS</code> platform, and we assume it will work in the same way it works on iOS. If anybody can attach a project using this functionality, we can help test it.</li>
<li>We have not been able to make direct Archive/IPA export, nor One-Click-Deploy to work, not even in <code>master</code>. There are some differences between our developer account and what external developers use, so it's a bit difficult to pinpoint the problem. We'd appreciate it if anybody that has One-Click-Deploy currently working is able to test on both platforms.</li>
<li>Likewise, we have not tested deploying directly to an iOS device using <code>ios_deploy</code> (used with Xcode versions prior to 14.0). If somebody has a working setup using this, we'd appreciate it if you could test this functionality still works. Alternatively, if <code>ios_deploy</code> support is no longer desired due to its age, we're happy to remove those codepaths for code simplicity.</li>
</ul>
<h2 dir="auto">Missing Functionality</h2>
<ul dir="auto">
<li>The DPI metrics on visionOS are hardcoded for now. They can change at runtime depending on how close the window is to the viewer. We'll address this in the PR adding SwiftUI, as the metrics come from SwiftUI APIs.</li>
<li>We have not implemented building a visionOS Icon Asset Catalog into the exporter. If somebody from the community can step in and implement it, that would be awesome. Otherwise, we may submit this as a later PRs. For now, you can work around this by manually creating your visionOS icon after exporting the Xcode project. <a href="https://developer.apple.com/design/human-interface-guidelines/app-icons" rel="nofollow">Here</a> you can read how visionOS icons work. And here's an example icon showing the Asset Catalog structure: <a href="https://github.com/user-attachments/files/19839704/visionOS-icon.xcassets.zip">visionOS-icon.xcassets.zip</a></li>
<li>The SVG logo for the visionOS platform is just text, it'd be good if somebody could come up with a nice graphic.</li>
</ul>
<hr>
<p dir="auto">We're happy to answer any questions or address any concerns. We're looking forward to collaborating with all of you.</p>
<p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/BastiaanOlij/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/BastiaanOlij">@BastiaanOlij</a> <a data-hovercard-type="user" data-hovercard-url="/users/clayjohn/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/clayjohn">@clayjohn</a> <a data-hovercard-type="user" data-hovercard-url="/users/coppolaemilio/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/coppolaemilio">@coppolaemilio</a> <a data-hovercard-type="user" data-hovercard-url="/users/stuartcarnie/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/stuartcarnie">@stuartcarnie</a> Feel free to mention anybody who would be interested in this change.</p>
    </div>
  </task-lists>
  
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Projects for Old OS X (130 pts)]]></title>
            <link>https://jonathanalland.com/old-osx-projects.html</link>
            <guid>43767944</guid>
            <pubDate>Wed, 23 Apr 2025 01:42:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jonathanalland.com/old-osx-projects.html">https://jonathanalland.com/old-osx-projects.html</a>, See on <a href="https://news.ycombinator.com/item?id=43767944">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p><span>I</span><span>n the fall of 2019, I came to a decision: it was time to leave modern macOS behind.</span></p>
				<p>A decade prior, switching to OS X had been a revelatory experience, as though the software was working in perfect sync with my mind. That feeling had long since disappeared.</p>
				<p>I surveyed the computing landscape. Windows was still fine, and Linux was still Linux. A normal person would have just picked one, but I was apparently not a normal person. I cared far too much about having the <em>perfect</em> computer, and I couldn't get that wonderful memory out of my head...</p>
			</div><div>
			<p><small>Most downloads include source code. Where code was omitted for practical or aesthetic reasons, it is available upon request.</small></p>
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meaning Machine – Visualize how LLMs break down and simulate meaning (102 pts)]]></title>
            <link>https://meaning-machine.streamlit.app</link>
            <guid>43767058</guid>
            <pubDate>Tue, 22 Apr 2025 22:55:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://meaning-machine.streamlit.app">https://meaning-machine.streamlit.app</a>, See on <a href="https://news.ycombinator.com/item?id=43767058">Hacker News</a></p>
Couldn't get https://meaning-machine.streamlit.app: Error [ERR_FR_TOO_MANY_REDIRECTS]: Maximum number of redirects exceeded]]></description>
        </item>
    </channel>
</rss>